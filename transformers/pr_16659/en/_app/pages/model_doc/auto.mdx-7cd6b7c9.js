import{S as Bwt,i as Pwt,s as $wt,e as a,k as l,w as f,t as o,M as Iwt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as qwt}from"../../chunks/vendor-6b77c823.js";import{T as $$r}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function Nwt(jf){let Z,io,ce,Ce,lo,he,Me,Xo,Di,Df,fa,Gi,Oi,B3,Gf,xe,co,Vi,On,P3,Vn,Xn,$3,Xi,zn,I3,zi,Of,Da;return{c(){Z=a("p"),io=o("If your "),ce=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),he=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Di=a("code"),Df=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Gi=a("code"),Oi=o('"new-model"'),B3=o(")."),Gf=l(),xe=a("p"),co=o("Likewise, if your "),Vi=a("code"),On=o("NewModel"),P3=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),$3=o(`, make sure its
`),Xi=a("code"),zn=o("config_class"),I3=o(` attribute is set to the same class you use when registering the model (here
`),zi=a("code"),Of=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),ce=n(ue,"CODE",{});var L7=s(ce);Ce=r(L7,"NewModelConfig"),L7.forEach(t),lo=r(ue," is a subclass of "),he=n(ue,"CODE",{});var Qi=s(he);Me=r(Qi,"PretrainedConfig"),Qi.forEach(t),Xo=r(ue,`, make sure its
`),Di=n(ue,"CODE",{});var x7=s(Di);Df=r(x7,"model_type"),x7.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),Gi=n(ue,"CODE",{});var k7=s(Gi);Oi=r(k7,'"new-model"'),k7.forEach(t),B3=r(ue,")."),ue.forEach(t),Gf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),Vi=n(zo,"CODE",{});var Ga=s(Vi);On=r(Ga,"NewModel"),Ga.forEach(t),P3=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var S7=s(Vn);Xn=r(S7,"PreTrainedModel"),S7.forEach(t),$3=r(zo,`, make sure its
`),Xi=n(zo,"CODE",{});var Vf=s(Xi);zn=r(Vf,"config_class"),Vf.forEach(t),I3=r(zo,` attribute is set to the same class you use when registering the model (here
`),zi=n(zo,"CODE",{});var R7=s(zi);Of=r(R7,"NewModelConfig"),R7.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo),e(Z,he),e(he,Me),e(Z,Xo),e(Z,Di),e(Di,Df),e(Z,fa),e(Z,Gi),e(Gi,Oi),e(Z,B3),b(fo,Gf,ue),b(fo,xe,ue),e(xe,co),e(xe,Vi),e(Vi,On),e(xe,P3),e(xe,Vn),e(Vn,Xn),e(xe,$3),e(xe,Xi),e(Xi,zn),e(xe,I3),e(xe,zi),e(zi,Of),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Gf),fo&&t(xe)}}}function jwt(jf){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function Dwt(jf){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function Gwt(jf){let Z,io,ce,Ce,lo,he,Me,Xo,Di,Df,fa,Gi,Oi,B3,Gf,xe,co,Vi,On,P3,Vn,Xn,$3,Xi,zn,I3,zi,Of,Da,fo,ue,L7,Qi,x7,k7,zo,Ga,S7,Vf,R7,gqe,eBe,Wi,Xf,wY,q3,hqe,AY,pqe,oBe,Qn,_qe,yY,uqe,bqe,LY,vqe,Fqe,rBe,N3,tBe,B7,Tqe,aBe,zf,nBe,Hi,Qf,xY,j3,Mqe,kY,Eqe,sBe,Qo,D3,Cqe,G3,wqe,P7,Aqe,yqe,Lqe,O3,xqe,SY,kqe,Sqe,Rqe,mo,V3,Bqe,RY,Pqe,$qe,Ui,Iqe,BY,qqe,Nqe,PY,jqe,Dqe,Gqe,v,Wf,$Y,Oqe,Vqe,$7,Xqe,zqe,Qqe,Hf,IY,Wqe,Hqe,I7,Uqe,Jqe,Yqe,Uf,qY,Kqe,Zqe,q7,eNe,oNe,rNe,Jf,NY,tNe,aNe,N7,nNe,sNe,lNe,Yf,jY,iNe,dNe,j7,cNe,fNe,mNe,Kf,DY,gNe,hNe,D7,pNe,_Ne,uNe,Zf,GY,bNe,vNe,G7,FNe,TNe,MNe,em,OY,ENe,CNe,O7,wNe,ANe,yNe,om,VY,LNe,xNe,V7,kNe,SNe,RNe,rm,XY,BNe,PNe,X7,$Ne,INe,qNe,tm,zY,NNe,jNe,z7,DNe,GNe,ONe,am,QY,VNe,XNe,Q7,zNe,QNe,WNe,nm,WY,HNe,UNe,W7,JNe,YNe,KNe,sm,HY,ZNe,eje,H7,oje,rje,tje,lm,UY,aje,nje,U7,sje,lje,ije,im,JY,dje,cje,J7,fje,mje,gje,dm,YY,hje,pje,Y7,_je,uje,bje,cm,KY,vje,Fje,K7,Tje,Mje,Eje,fm,ZY,Cje,wje,Z7,Aje,yje,Lje,mm,eK,xje,kje,ex,Sje,Rje,Bje,gm,oK,Pje,$je,ox,Ije,qje,Nje,hm,rK,jje,Dje,rx,Gje,Oje,Vje,pm,tK,Xje,zje,tx,Qje,Wje,Hje,_m,aK,Uje,Jje,ax,Yje,Kje,Zje,um,nK,eDe,oDe,nx,rDe,tDe,aDe,bm,sK,nDe,sDe,sx,lDe,iDe,dDe,vm,lK,cDe,fDe,lx,mDe,gDe,hDe,Fm,iK,pDe,_De,ix,uDe,bDe,vDe,Tm,dK,FDe,TDe,dx,MDe,EDe,CDe,Mm,cK,wDe,ADe,cx,yDe,LDe,xDe,Em,fK,kDe,SDe,fx,RDe,BDe,PDe,Cm,mK,$De,IDe,mx,qDe,NDe,jDe,wm,gK,DDe,GDe,gx,ODe,VDe,XDe,Am,hK,zDe,QDe,hx,WDe,HDe,UDe,ym,pK,JDe,YDe,px,KDe,ZDe,eGe,Lm,_K,oGe,rGe,_x,tGe,aGe,nGe,xm,uK,sGe,lGe,ux,iGe,dGe,cGe,km,bK,fGe,mGe,bx,gGe,hGe,pGe,Sm,vK,_Ge,uGe,vx,bGe,vGe,FGe,Rm,FK,TGe,MGe,Fx,EGe,CGe,wGe,Bm,TK,AGe,yGe,Tx,LGe,xGe,kGe,Pm,MK,SGe,RGe,Mx,BGe,PGe,$Ge,$m,EK,IGe,qGe,Ex,NGe,jGe,DGe,Im,CK,GGe,OGe,Cx,VGe,XGe,zGe,qm,wK,QGe,WGe,wx,HGe,UGe,JGe,Nm,AK,YGe,KGe,Ax,ZGe,eOe,oOe,jm,yK,rOe,tOe,yx,aOe,nOe,sOe,Dm,LK,lOe,iOe,Lx,dOe,cOe,fOe,Gm,xK,mOe,gOe,xx,hOe,pOe,_Oe,Om,kK,uOe,bOe,kx,vOe,FOe,TOe,Vm,SK,MOe,EOe,Sx,COe,wOe,AOe,Xm,RK,yOe,LOe,Rx,xOe,kOe,SOe,zm,BK,ROe,BOe,Bx,POe,$Oe,IOe,Qm,PK,qOe,NOe,Px,jOe,DOe,GOe,Wm,$K,OOe,VOe,$x,XOe,zOe,QOe,Hm,IK,WOe,HOe,Ix,UOe,JOe,YOe,Um,qK,KOe,ZOe,qx,eVe,oVe,rVe,Jm,NK,tVe,aVe,Nx,nVe,sVe,lVe,Ym,jK,iVe,dVe,jx,cVe,fVe,mVe,Km,DK,gVe,hVe,Dx,pVe,_Ve,uVe,Zm,GK,bVe,vVe,Gx,FVe,TVe,MVe,eg,OK,EVe,CVe,Ox,wVe,AVe,yVe,og,VK,LVe,xVe,Vx,kVe,SVe,RVe,rg,XK,BVe,PVe,Xx,$Ve,IVe,qVe,tg,zK,NVe,jVe,zx,DVe,GVe,OVe,ag,QK,VVe,XVe,Qx,zVe,QVe,WVe,ng,WK,HVe,UVe,Wx,JVe,YVe,KVe,sg,HK,ZVe,eXe,Hx,oXe,rXe,tXe,lg,UK,aXe,nXe,Ux,sXe,lXe,iXe,ig,JK,dXe,cXe,Jx,fXe,mXe,gXe,dg,YK,hXe,pXe,Yx,_Xe,uXe,bXe,cg,KK,vXe,FXe,Kx,TXe,MXe,EXe,fg,ZK,CXe,wXe,Zx,AXe,yXe,LXe,mg,eZ,xXe,kXe,ek,SXe,RXe,BXe,gg,oZ,PXe,$Xe,ok,IXe,qXe,NXe,hg,rZ,jXe,DXe,rk,GXe,OXe,VXe,pg,tZ,XXe,zXe,tk,QXe,WXe,HXe,_g,aZ,UXe,JXe,ak,YXe,KXe,ZXe,ug,nZ,eze,oze,nk,rze,tze,aze,bg,sZ,nze,sze,sk,lze,ize,dze,vg,lZ,cze,fze,lk,mze,gze,hze,Fg,iZ,pze,_ze,ik,uze,bze,vze,Tg,dZ,Fze,Tze,dk,Mze,Eze,Cze,Mg,cZ,wze,Aze,ck,yze,Lze,xze,Eg,fZ,kze,Sze,fk,Rze,Bze,Pze,Cg,mZ,$ze,Ize,mk,qze,Nze,jze,wg,gZ,Dze,Gze,gk,Oze,Vze,Xze,Ag,hZ,zze,Qze,hk,Wze,Hze,Uze,yg,pZ,Jze,Yze,pk,Kze,Zze,eQe,Lg,_Z,oQe,rQe,_k,tQe,aQe,nQe,xg,uZ,sQe,lQe,uk,iQe,dQe,cQe,kg,bZ,fQe,mQe,bk,gQe,hQe,pQe,Sg,vZ,_Qe,uQe,vk,bQe,vQe,FQe,Rg,FZ,TQe,MQe,Fk,EQe,CQe,wQe,Bg,TZ,AQe,yQe,Tk,LQe,xQe,kQe,Pg,MZ,SQe,RQe,Mk,BQe,PQe,$Qe,$g,EZ,IQe,qQe,Ek,NQe,jQe,DQe,Ig,CZ,GQe,OQe,Ck,VQe,XQe,zQe,qg,wZ,QQe,WQe,wk,HQe,UQe,JQe,Ng,AZ,YQe,KQe,Ak,ZQe,eWe,oWe,jg,yZ,rWe,tWe,yk,aWe,nWe,sWe,Dg,LZ,lWe,iWe,Lk,dWe,cWe,fWe,Gg,xZ,mWe,gWe,xk,hWe,pWe,_We,kZ,uWe,bWe,X3,vWe,Og,z3,FWe,SZ,TWe,lBe,Ji,Vg,RZ,Q3,MWe,BZ,EWe,iBe,Wo,W3,CWe,H3,wWe,kk,AWe,yWe,LWe,U3,xWe,PZ,kWe,SWe,RWe,go,J3,BWe,$Z,PWe,$We,Oa,IWe,IZ,qWe,NWe,qZ,jWe,DWe,NZ,GWe,OWe,VWe,E,Wn,jZ,XWe,zWe,Sk,QWe,WWe,Rk,HWe,UWe,JWe,Hn,DZ,YWe,KWe,Bk,ZWe,eHe,Pk,oHe,rHe,tHe,Un,GZ,aHe,nHe,$k,sHe,lHe,Ik,iHe,dHe,cHe,Xg,OZ,fHe,mHe,qk,gHe,hHe,pHe,Jn,VZ,_He,uHe,Nk,bHe,vHe,jk,FHe,THe,MHe,zg,XZ,EHe,CHe,Dk,wHe,AHe,yHe,Qg,zZ,LHe,xHe,Gk,kHe,SHe,RHe,Wg,QZ,BHe,PHe,Ok,$He,IHe,qHe,Yn,WZ,NHe,jHe,Vk,DHe,GHe,Xk,OHe,VHe,XHe,Kn,HZ,zHe,QHe,zk,WHe,HHe,Qk,UHe,JHe,YHe,Zn,UZ,KHe,ZHe,Wk,eUe,oUe,Hk,rUe,tUe,aUe,Hg,JZ,nUe,sUe,Uk,lUe,iUe,dUe,Ug,YZ,cUe,fUe,Jk,mUe,gUe,hUe,es,KZ,pUe,_Ue,Yk,uUe,bUe,Kk,vUe,FUe,TUe,Jg,ZZ,MUe,EUe,Zk,CUe,wUe,AUe,os,eee,yUe,LUe,eS,xUe,kUe,oS,SUe,RUe,BUe,rs,oee,PUe,$Ue,rS,IUe,qUe,tS,NUe,jUe,DUe,ts,ree,GUe,OUe,aS,VUe,XUe,tee,zUe,QUe,WUe,Yg,aee,HUe,UUe,nS,JUe,YUe,KUe,as,nee,ZUe,eJe,sS,oJe,rJe,lS,tJe,aJe,nJe,ns,see,sJe,lJe,iS,iJe,dJe,dS,cJe,fJe,mJe,ss,lee,gJe,hJe,cS,pJe,_Je,fS,uJe,bJe,vJe,ls,iee,FJe,TJe,mS,MJe,EJe,gS,CJe,wJe,AJe,is,dee,yJe,LJe,hS,xJe,kJe,pS,SJe,RJe,BJe,Kg,cee,PJe,$Je,_S,IJe,qJe,NJe,ds,fee,jJe,DJe,uS,GJe,OJe,bS,VJe,XJe,zJe,Zg,mee,QJe,WJe,vS,HJe,UJe,JJe,cs,gee,YJe,KJe,FS,ZJe,eYe,TS,oYe,rYe,tYe,fs,hee,aYe,nYe,MS,sYe,lYe,ES,iYe,dYe,cYe,ms,pee,fYe,mYe,CS,gYe,hYe,wS,pYe,_Ye,uYe,gs,_ee,bYe,vYe,AS,FYe,TYe,yS,MYe,EYe,CYe,hs,uee,wYe,AYe,LS,yYe,LYe,xS,xYe,kYe,SYe,ps,bee,RYe,BYe,kS,PYe,$Ye,SS,IYe,qYe,NYe,eh,vee,jYe,DYe,RS,GYe,OYe,VYe,_s,Fee,XYe,zYe,BS,QYe,WYe,PS,HYe,UYe,JYe,us,Tee,YYe,KYe,$S,ZYe,eKe,IS,oKe,rKe,tKe,bs,Mee,aKe,nKe,qS,sKe,lKe,NS,iKe,dKe,cKe,vs,Eee,fKe,mKe,jS,gKe,hKe,DS,pKe,_Ke,uKe,Fs,Cee,bKe,vKe,GS,FKe,TKe,OS,MKe,EKe,CKe,Ts,wee,wKe,AKe,VS,yKe,LKe,XS,xKe,kKe,SKe,oh,Aee,RKe,BKe,zS,PKe,$Ke,IKe,Ms,yee,qKe,NKe,QS,jKe,DKe,WS,GKe,OKe,VKe,rh,Lee,XKe,zKe,HS,QKe,WKe,HKe,th,xee,UKe,JKe,US,YKe,KKe,ZKe,Es,kee,eZe,oZe,JS,rZe,tZe,YS,aZe,nZe,sZe,Cs,See,lZe,iZe,KS,dZe,cZe,ZS,fZe,mZe,gZe,ah,Ree,hZe,pZe,eR,_Ze,uZe,bZe,ws,Bee,vZe,FZe,oR,TZe,MZe,rR,EZe,CZe,wZe,As,Pee,AZe,yZe,tR,LZe,xZe,aR,kZe,SZe,RZe,ys,$ee,BZe,PZe,nR,$Ze,IZe,sR,qZe,NZe,jZe,Ls,Iee,DZe,GZe,lR,OZe,VZe,iR,XZe,zZe,QZe,xs,qee,WZe,HZe,dR,UZe,JZe,cR,YZe,KZe,ZZe,nh,Nee,eeo,oeo,fR,reo,teo,aeo,sh,jee,neo,seo,mR,leo,ieo,deo,lh,Dee,ceo,feo,gR,meo,geo,heo,ih,Gee,peo,_eo,hR,ueo,beo,veo,ks,Oee,Feo,Teo,pR,Meo,Eeo,_R,Ceo,weo,Aeo,dh,Vee,yeo,Leo,uR,xeo,keo,Seo,Ss,Xee,Reo,Beo,bR,Peo,$eo,vR,Ieo,qeo,Neo,Rs,zee,jeo,Deo,FR,Geo,Oeo,TR,Veo,Xeo,zeo,Bs,Qee,Qeo,Weo,MR,Heo,Ueo,ER,Jeo,Yeo,Keo,Ps,Wee,Zeo,eoo,CR,ooo,roo,wR,too,aoo,noo,$s,Hee,soo,loo,AR,ioo,doo,yR,coo,foo,moo,Is,Uee,goo,hoo,LR,poo,_oo,xR,uoo,boo,voo,ch,Jee,Foo,Too,kR,Moo,Eoo,Coo,fh,Yee,woo,Aoo,SR,yoo,Loo,xoo,qs,Kee,koo,Soo,RR,Roo,Boo,BR,Poo,$oo,Ioo,Ns,Zee,qoo,Noo,PR,joo,Doo,$R,Goo,Ooo,Voo,js,eoe,Xoo,zoo,IR,Qoo,Woo,qR,Hoo,Uoo,Joo,mh,ooe,Yoo,Koo,NR,Zoo,ero,oro,gh,roe,rro,tro,jR,aro,nro,sro,hh,toe,lro,iro,DR,dro,cro,fro,ph,aoe,mro,gro,GR,hro,pro,_ro,_h,noe,uro,bro,OR,vro,Fro,Tro,Ds,soe,Mro,Ero,VR,Cro,wro,XR,Aro,yro,Lro,uh,loe,xro,kro,zR,Sro,Rro,Bro,bh,ioe,Pro,$ro,QR,Iro,qro,Nro,Gs,doe,jro,Dro,WR,Gro,Oro,HR,Vro,Xro,zro,Os,coe,Qro,Wro,UR,Hro,Uro,JR,Jro,Yro,Kro,foe,Zro,eto,Y3,oto,vh,K3,rto,moe,tto,dBe,Yi,Fh,goe,Z3,ato,hoe,nto,cBe,Ho,eC,sto,oC,lto,YR,ito,dto,cto,rC,fto,poe,mto,gto,hto,$e,tC,pto,_oe,_to,uto,Va,bto,uoe,vto,Fto,boe,Tto,Mto,voe,Eto,Cto,wto,ee,Th,Foe,Ato,yto,KR,Lto,xto,kto,Mh,Toe,Sto,Rto,ZR,Bto,Pto,$to,Eh,Moe,Ito,qto,eB,Nto,jto,Dto,Ch,Eoe,Gto,Oto,oB,Vto,Xto,zto,wh,Coe,Qto,Wto,rB,Hto,Uto,Jto,Ah,woe,Yto,Kto,tB,Zto,eao,oao,yh,Aoe,rao,tao,aB,aao,nao,sao,Lh,yoe,lao,iao,nB,dao,cao,fao,xh,Loe,mao,gao,sB,hao,pao,_ao,kh,xoe,uao,bao,lB,vao,Fao,Tao,Sh,koe,Mao,Eao,iB,Cao,wao,Aao,Rh,Soe,yao,Lao,dB,xao,kao,Sao,Bh,Roe,Rao,Bao,cB,Pao,$ao,Iao,Ph,Boe,qao,Nao,fB,jao,Dao,Gao,$h,Poe,Oao,Vao,mB,Xao,zao,Qao,Ih,$oe,Wao,Hao,gB,Uao,Jao,Yao,qh,Ioe,Kao,Zao,hB,eno,ono,rno,Nh,qoe,tno,ano,pB,nno,sno,lno,jh,Noe,ino,dno,_B,cno,fno,mno,Dh,gno,joe,hno,pno,aC,_no,Gh,nC,uno,Doe,bno,fBe,Ki,Oh,Goe,sC,vno,Ooe,Fno,mBe,Uo,lC,Tno,iC,Mno,uB,Eno,Cno,wno,dC,Ano,Voe,yno,Lno,xno,Ie,cC,kno,Xoe,Sno,Rno,Zi,Bno,zoe,Pno,$no,Qoe,Ino,qno,Nno,ke,Vh,Woe,jno,Dno,bB,Gno,Ono,Vno,Xh,Hoe,Xno,zno,vB,Qno,Wno,Hno,zh,Uoe,Uno,Jno,FB,Yno,Kno,Zno,Qh,Joe,eso,oso,TB,rso,tso,aso,Wh,Yoe,nso,sso,MB,lso,iso,dso,Hh,Koe,cso,fso,EB,mso,gso,hso,Uh,Zoe,pso,_so,CB,uso,bso,vso,Jh,ere,Fso,Tso,wB,Mso,Eso,Cso,Yh,wso,ore,Aso,yso,fC,Lso,Kh,mC,xso,rre,kso,gBe,ed,Zh,tre,gC,Sso,are,Rso,hBe,Jo,hC,Bso,od,Pso,AB,$so,Iso,yB,qso,Nso,jso,pC,Dso,nre,Gso,Oso,Vso,Xr,_C,Xso,sre,zso,Qso,rd,Wso,lre,Hso,Uso,LB,Jso,Yso,Kso,ire,Zso,elo,uC,olo,qe,bC,rlo,dre,tlo,alo,Xa,nlo,cre,slo,llo,fre,ilo,dlo,mre,clo,flo,mlo,T,ep,gre,glo,hlo,xB,plo,_lo,ulo,op,hre,blo,vlo,kB,Flo,Tlo,Mlo,rp,pre,Elo,Clo,SB,wlo,Alo,ylo,tp,_re,Llo,xlo,RB,klo,Slo,Rlo,ap,ure,Blo,Plo,BB,$lo,Ilo,qlo,np,bre,Nlo,jlo,PB,Dlo,Glo,Olo,sp,vre,Vlo,Xlo,$B,zlo,Qlo,Wlo,lp,Fre,Hlo,Ulo,IB,Jlo,Ylo,Klo,ip,Tre,Zlo,eio,qB,oio,rio,tio,dp,Mre,aio,nio,NB,sio,lio,iio,cp,Ere,dio,cio,jB,fio,mio,gio,fp,Cre,hio,pio,DB,_io,uio,bio,mp,wre,vio,Fio,GB,Tio,Mio,Eio,gp,Are,Cio,wio,OB,Aio,yio,Lio,hp,yre,xio,kio,VB,Sio,Rio,Bio,pp,Lre,Pio,$io,XB,Iio,qio,Nio,_p,xre,jio,Dio,zB,Gio,Oio,Vio,up,kre,Xio,zio,QB,Qio,Wio,Hio,bp,Sre,Uio,Jio,WB,Yio,Kio,Zio,vp,Rre,edo,odo,HB,rdo,tdo,ado,Fp,Bre,ndo,sdo,UB,ldo,ido,ddo,Tp,Pre,cdo,fdo,JB,mdo,gdo,hdo,Mp,$re,pdo,_do,YB,udo,bdo,vdo,Ep,Ire,Fdo,Tdo,KB,Mdo,Edo,Cdo,Cp,qre,wdo,Ado,ZB,ydo,Ldo,xdo,wp,Nre,kdo,Sdo,eP,Rdo,Bdo,Pdo,Ap,jre,$do,Ido,oP,qdo,Ndo,jdo,yp,Dre,Ddo,Gdo,rP,Odo,Vdo,Xdo,Lp,Gre,zdo,Qdo,tP,Wdo,Hdo,Udo,xp,Ore,Jdo,Ydo,aP,Kdo,Zdo,eco,Vs,Vre,oco,rco,nP,tco,aco,sP,nco,sco,lco,kp,Xre,ico,dco,lP,cco,fco,mco,Sp,zre,gco,hco,iP,pco,_co,uco,Rp,Qre,bco,vco,dP,Fco,Tco,Mco,Bp,Wre,Eco,Cco,cP,wco,Aco,yco,Pp,Hre,Lco,xco,fP,kco,Sco,Rco,$p,Ure,Bco,Pco,mP,$co,Ico,qco,Ip,Jre,Nco,jco,gP,Dco,Gco,Oco,qp,Yre,Vco,Xco,hP,zco,Qco,Wco,Np,Kre,Hco,Uco,pP,Jco,Yco,Kco,jp,Zre,Zco,efo,_P,ofo,rfo,tfo,Dp,ete,afo,nfo,uP,sfo,lfo,ifo,Gp,ote,dfo,cfo,bP,ffo,mfo,gfo,Op,rte,hfo,pfo,vP,_fo,ufo,bfo,Vp,tte,vfo,Ffo,FP,Tfo,Mfo,Efo,Xp,ate,Cfo,wfo,TP,Afo,yfo,Lfo,zp,nte,xfo,kfo,MP,Sfo,Rfo,Bfo,Qp,ste,Pfo,$fo,EP,Ifo,qfo,Nfo,Wp,lte,jfo,Dfo,CP,Gfo,Ofo,Vfo,Hp,ite,Xfo,zfo,wP,Qfo,Wfo,Hfo,Up,dte,Ufo,Jfo,AP,Yfo,Kfo,Zfo,Jp,cte,emo,omo,yP,rmo,tmo,amo,Yp,fte,nmo,smo,LP,lmo,imo,dmo,Kp,mte,cmo,fmo,xP,mmo,gmo,hmo,Zp,gte,pmo,_mo,kP,umo,bmo,vmo,e_,hte,Fmo,Tmo,SP,Mmo,Emo,Cmo,o_,pte,wmo,Amo,RP,ymo,Lmo,xmo,r_,_te,kmo,Smo,BP,Rmo,Bmo,Pmo,t_,ute,$mo,Imo,PP,qmo,Nmo,jmo,a_,bte,Dmo,Gmo,$P,Omo,Vmo,Xmo,n_,vte,zmo,Qmo,IP,Wmo,Hmo,Umo,s_,Fte,Jmo,Ymo,qP,Kmo,Zmo,ego,l_,Tte,ogo,rgo,NP,tgo,ago,ngo,i_,Mte,sgo,lgo,jP,igo,dgo,cgo,d_,Ete,fgo,mgo,DP,ggo,hgo,pgo,c_,Cte,_go,ugo,GP,bgo,vgo,Fgo,f_,wte,Tgo,Mgo,OP,Ego,Cgo,wgo,m_,Ate,Ago,ygo,VP,Lgo,xgo,kgo,g_,yte,Sgo,Rgo,XP,Bgo,Pgo,$go,h_,Lte,Igo,qgo,zP,Ngo,jgo,Dgo,p_,xte,Ggo,Ogo,QP,Vgo,Xgo,zgo,__,kte,Qgo,Wgo,WP,Hgo,Ugo,Jgo,u_,Ste,Ygo,Kgo,HP,Zgo,eho,oho,b_,Rte,rho,tho,UP,aho,nho,sho,v_,Bte,lho,iho,JP,dho,cho,fho,F_,Pte,mho,gho,YP,hho,pho,_ho,T_,$te,uho,bho,KP,vho,Fho,Tho,M_,Ite,Mho,Eho,ZP,Cho,who,Aho,E_,qte,yho,Lho,e$,xho,kho,Sho,C_,Nte,Rho,Bho,o$,Pho,$ho,Iho,w_,jte,qho,Nho,r$,jho,Dho,Gho,A_,Dte,Oho,Vho,t$,Xho,zho,Qho,y_,Gte,Who,Hho,a$,Uho,Jho,Yho,L_,Ote,Kho,Zho,n$,epo,opo,rpo,x_,Vte,tpo,apo,s$,npo,spo,lpo,k_,Xte,ipo,dpo,l$,cpo,fpo,mpo,S_,zte,gpo,hpo,i$,ppo,_po,upo,R_,Qte,bpo,vpo,d$,Fpo,Tpo,Mpo,B_,Wte,Epo,Cpo,c$,wpo,Apo,ypo,P_,Hte,Lpo,xpo,f$,kpo,Spo,Rpo,$_,Ute,Bpo,Ppo,m$,$po,Ipo,qpo,I_,Jte,Npo,jpo,g$,Dpo,Gpo,Opo,q_,Yte,Vpo,Xpo,h$,zpo,Qpo,Wpo,N_,Kte,Hpo,Upo,p$,Jpo,Ypo,Kpo,j_,Zte,Zpo,e_o,_$,o_o,r_o,t_o,D_,a_o,eae,n_o,s_o,oae,l_o,i_o,rae,d_o,c_o,vC,pBe,td,G_,tae,FC,f_o,aae,m_o,_Be,Yo,TC,g_o,ad,h_o,u$,p_o,__o,b$,u_o,b_o,v_o,MC,F_o,nae,T_o,M_o,E_o,zr,EC,C_o,sae,w_o,A_o,nd,y_o,lae,L_o,x_o,v$,k_o,S_o,R_o,iae,B_o,P_o,CC,$_o,Ne,wC,I_o,dae,q_o,N_o,za,j_o,cae,D_o,G_o,fae,O_o,V_o,mae,X_o,z_o,Q_o,S,O_,gae,W_o,H_o,F$,U_o,J_o,Y_o,V_,hae,K_o,Z_o,T$,euo,ouo,ruo,X_,pae,tuo,auo,M$,nuo,suo,luo,z_,_ae,iuo,duo,E$,cuo,fuo,muo,Q_,uae,guo,huo,C$,puo,_uo,uuo,W_,bae,buo,vuo,w$,Fuo,Tuo,Muo,H_,vae,Euo,Cuo,A$,wuo,Auo,yuo,U_,Fae,Luo,xuo,y$,kuo,Suo,Ruo,J_,Tae,Buo,Puo,L$,$uo,Iuo,quo,Y_,Mae,Nuo,juo,x$,Duo,Guo,Ouo,K_,Eae,Vuo,Xuo,k$,zuo,Quo,Wuo,Z_,Cae,Huo,Uuo,S$,Juo,Yuo,Kuo,eu,wae,Zuo,e6o,R$,o6o,r6o,t6o,ou,Aae,a6o,n6o,B$,s6o,l6o,i6o,ru,yae,d6o,c6o,P$,f6o,m6o,g6o,tu,Lae,h6o,p6o,$$,_6o,u6o,b6o,au,xae,v6o,F6o,I$,T6o,M6o,E6o,nu,kae,C6o,w6o,q$,A6o,y6o,L6o,su,Sae,x6o,k6o,N$,S6o,R6o,B6o,lu,Rae,P6o,$6o,j$,I6o,q6o,N6o,iu,Bae,j6o,D6o,D$,G6o,O6o,V6o,du,Pae,X6o,z6o,G$,Q6o,W6o,H6o,cu,$ae,U6o,J6o,O$,Y6o,K6o,Z6o,fu,Iae,e1o,o1o,V$,r1o,t1o,a1o,mu,qae,n1o,s1o,X$,l1o,i1o,d1o,gu,Nae,c1o,f1o,z$,m1o,g1o,h1o,hu,jae,p1o,_1o,Q$,u1o,b1o,v1o,pu,Dae,F1o,T1o,W$,M1o,E1o,C1o,_u,Gae,w1o,A1o,H$,y1o,L1o,x1o,uu,Oae,k1o,S1o,U$,R1o,B1o,P1o,bu,Vae,$1o,I1o,J$,q1o,N1o,j1o,vu,Xae,D1o,G1o,Y$,O1o,V1o,X1o,Fu,zae,z1o,Q1o,K$,W1o,H1o,U1o,Tu,Qae,J1o,Y1o,Z$,K1o,Z1o,ebo,Mu,Wae,obo,rbo,eI,tbo,abo,nbo,Eu,Hae,sbo,lbo,oI,ibo,dbo,cbo,Cu,Uae,fbo,mbo,rI,gbo,hbo,pbo,wu,Jae,_bo,ubo,tI,bbo,vbo,Fbo,Au,Yae,Tbo,Mbo,aI,Ebo,Cbo,wbo,yu,Abo,Kae,ybo,Lbo,Zae,xbo,kbo,ene,Sbo,Rbo,AC,uBe,sd,Lu,one,yC,Bbo,rne,Pbo,bBe,Ko,LC,$bo,ld,Ibo,nI,qbo,Nbo,sI,jbo,Dbo,Gbo,xC,Obo,tne,Vbo,Xbo,zbo,Qr,kC,Qbo,ane,Wbo,Hbo,id,Ubo,nne,Jbo,Ybo,lI,Kbo,Zbo,e2o,sne,o2o,r2o,SC,t2o,je,RC,a2o,lne,n2o,s2o,Qa,l2o,ine,i2o,d2o,dne,c2o,f2o,cne,m2o,g2o,h2o,$,xu,fne,p2o,_2o,iI,u2o,b2o,v2o,ku,mne,F2o,T2o,dI,M2o,E2o,C2o,Su,gne,w2o,A2o,cI,y2o,L2o,x2o,Ru,hne,k2o,S2o,fI,R2o,B2o,P2o,Bu,pne,$2o,I2o,mI,q2o,N2o,j2o,Pu,_ne,D2o,G2o,gI,O2o,V2o,X2o,$u,une,z2o,Q2o,hI,W2o,H2o,U2o,Iu,bne,J2o,Y2o,pI,K2o,Z2o,e5o,qu,vne,o5o,r5o,_I,t5o,a5o,n5o,Nu,Fne,s5o,l5o,uI,i5o,d5o,c5o,ju,Tne,f5o,m5o,bI,g5o,h5o,p5o,Du,Mne,_5o,u5o,vI,b5o,v5o,F5o,Gu,Ene,T5o,M5o,FI,E5o,C5o,w5o,Ou,Cne,A5o,y5o,TI,L5o,x5o,k5o,Vu,wne,S5o,R5o,MI,B5o,P5o,$5o,Xu,Ane,I5o,q5o,EI,N5o,j5o,D5o,zu,yne,G5o,O5o,CI,V5o,X5o,z5o,Qu,Lne,Q5o,W5o,wI,H5o,U5o,J5o,Wu,xne,Y5o,K5o,AI,Z5o,evo,ovo,Hu,kne,rvo,tvo,yI,avo,nvo,svo,Uu,Sne,lvo,ivo,LI,dvo,cvo,fvo,Ju,Rne,mvo,gvo,xI,hvo,pvo,_vo,Yu,Bne,uvo,bvo,kI,vvo,Fvo,Tvo,Ku,Pne,Mvo,Evo,SI,Cvo,wvo,Avo,Zu,$ne,yvo,Lvo,RI,xvo,kvo,Svo,e6,Ine,Rvo,Bvo,BI,Pvo,$vo,Ivo,o6,qne,qvo,Nvo,PI,jvo,Dvo,Gvo,r6,Nne,Ovo,Vvo,$I,Xvo,zvo,Qvo,t6,jne,Wvo,Hvo,II,Uvo,Jvo,Yvo,a6,Dne,Kvo,Zvo,qI,eFo,oFo,rFo,n6,Gne,tFo,aFo,NI,nFo,sFo,lFo,s6,One,iFo,dFo,jI,cFo,fFo,mFo,l6,Vne,gFo,hFo,DI,pFo,_Fo,uFo,i6,Xne,bFo,vFo,GI,FFo,TFo,MFo,d6,zne,EFo,CFo,OI,wFo,AFo,yFo,c6,Qne,LFo,xFo,VI,kFo,SFo,RFo,f6,BFo,Wne,PFo,$Fo,Hne,IFo,qFo,Une,NFo,jFo,BC,vBe,dd,m6,Jne,PC,DFo,Yne,GFo,FBe,Zo,$C,OFo,cd,VFo,XI,XFo,zFo,zI,QFo,WFo,HFo,IC,UFo,Kne,JFo,YFo,KFo,Wr,qC,ZFo,Zne,eTo,oTo,fd,rTo,ese,tTo,aTo,QI,nTo,sTo,lTo,ose,iTo,dTo,NC,cTo,De,jC,fTo,rse,mTo,gTo,Wa,hTo,tse,pTo,_To,ase,uTo,bTo,nse,vTo,FTo,TTo,I,g6,sse,MTo,ETo,WI,CTo,wTo,ATo,h6,lse,yTo,LTo,HI,xTo,kTo,STo,p6,ise,RTo,BTo,UI,PTo,$To,ITo,_6,dse,qTo,NTo,JI,jTo,DTo,GTo,u6,cse,OTo,VTo,YI,XTo,zTo,QTo,b6,fse,WTo,HTo,KI,UTo,JTo,YTo,v6,mse,KTo,ZTo,ZI,e9o,o9o,r9o,F6,gse,t9o,a9o,eq,n9o,s9o,l9o,T6,hse,i9o,d9o,oq,c9o,f9o,m9o,M6,pse,g9o,h9o,rq,p9o,_9o,u9o,E6,_se,b9o,v9o,tq,F9o,T9o,M9o,C6,use,E9o,C9o,aq,w9o,A9o,y9o,w6,bse,L9o,x9o,nq,k9o,S9o,R9o,A6,vse,B9o,P9o,sq,$9o,I9o,q9o,y6,Fse,N9o,j9o,lq,D9o,G9o,O9o,L6,Tse,V9o,X9o,iq,z9o,Q9o,W9o,x6,Mse,H9o,U9o,dq,J9o,Y9o,K9o,k6,Ese,Z9o,eMo,cq,oMo,rMo,tMo,S6,Cse,aMo,nMo,fq,sMo,lMo,iMo,R6,wse,dMo,cMo,mq,fMo,mMo,gMo,B6,Ase,hMo,pMo,gq,_Mo,uMo,bMo,P6,yse,vMo,FMo,hq,TMo,MMo,EMo,$6,Lse,CMo,wMo,pq,AMo,yMo,LMo,I6,xse,xMo,kMo,_q,SMo,RMo,BMo,q6,kse,PMo,$Mo,uq,IMo,qMo,NMo,N6,Sse,jMo,DMo,bq,GMo,OMo,VMo,j6,Rse,XMo,zMo,vq,QMo,WMo,HMo,D6,Bse,UMo,JMo,Fq,YMo,KMo,ZMo,G6,Pse,e4o,o4o,Tq,r4o,t4o,a4o,O6,$se,n4o,s4o,Mq,l4o,i4o,d4o,V6,Ise,c4o,f4o,qse,m4o,g4o,h4o,X6,Nse,p4o,_4o,Eq,u4o,b4o,v4o,z6,jse,F4o,T4o,Cq,M4o,E4o,C4o,Q6,Dse,w4o,A4o,wq,y4o,L4o,x4o,W6,Gse,k4o,S4o,Aq,R4o,B4o,P4o,H6,$4o,Ose,I4o,q4o,Vse,N4o,j4o,Xse,D4o,G4o,DC,TBe,md,U6,zse,GC,O4o,Qse,V4o,MBe,er,OC,X4o,gd,z4o,yq,Q4o,W4o,Lq,H4o,U4o,J4o,VC,Y4o,Wse,K4o,Z4o,eEo,Hr,XC,oEo,Hse,rEo,tEo,hd,aEo,Use,nEo,sEo,xq,lEo,iEo,dEo,Jse,cEo,fEo,zC,mEo,Ge,QC,gEo,Yse,hEo,pEo,Ha,_Eo,Kse,uEo,bEo,Zse,vEo,FEo,ele,TEo,MEo,EEo,ne,J6,ole,CEo,wEo,kq,AEo,yEo,LEo,Y6,rle,xEo,kEo,Sq,SEo,REo,BEo,K6,tle,PEo,$Eo,Rq,IEo,qEo,NEo,Z6,ale,jEo,DEo,Bq,GEo,OEo,VEo,e1,nle,XEo,zEo,Pq,QEo,WEo,HEo,o1,sle,UEo,JEo,$q,YEo,KEo,ZEo,r1,lle,e3o,o3o,Iq,r3o,t3o,a3o,t1,ile,n3o,s3o,qq,l3o,i3o,d3o,a1,dle,c3o,f3o,Nq,m3o,g3o,h3o,n1,cle,p3o,_3o,jq,u3o,b3o,v3o,s1,fle,F3o,T3o,Dq,M3o,E3o,C3o,l1,mle,w3o,A3o,Gq,y3o,L3o,x3o,i1,gle,k3o,S3o,Oq,R3o,B3o,P3o,d1,hle,$3o,I3o,Vq,q3o,N3o,j3o,c1,ple,D3o,G3o,Xq,O3o,V3o,X3o,f1,_le,z3o,Q3o,zq,W3o,H3o,U3o,m1,ule,J3o,Y3o,Qq,K3o,Z3o,eCo,g1,oCo,ble,rCo,tCo,vle,aCo,nCo,Fle,sCo,lCo,WC,EBe,pd,h1,Tle,HC,iCo,Mle,dCo,CBe,or,UC,cCo,_d,fCo,Wq,mCo,gCo,Hq,hCo,pCo,_Co,JC,uCo,Ele,bCo,vCo,FCo,Ur,YC,TCo,Cle,MCo,ECo,ud,CCo,wle,wCo,ACo,Uq,yCo,LCo,xCo,Ale,kCo,SCo,KC,RCo,Oe,ZC,BCo,yle,PCo,$Co,Ua,ICo,Lle,qCo,NCo,xle,jCo,DCo,kle,GCo,OCo,VCo,y,p1,Sle,XCo,zCo,Jq,QCo,WCo,HCo,_1,Rle,UCo,JCo,Yq,YCo,KCo,ZCo,u1,Ble,ewo,owo,Kq,rwo,two,awo,b1,Ple,nwo,swo,Zq,lwo,iwo,dwo,v1,$le,cwo,fwo,eN,mwo,gwo,hwo,F1,Ile,pwo,_wo,oN,uwo,bwo,vwo,T1,qle,Fwo,Two,rN,Mwo,Ewo,Cwo,M1,Nle,wwo,Awo,tN,ywo,Lwo,xwo,E1,jle,kwo,Swo,aN,Rwo,Bwo,Pwo,C1,Dle,$wo,Iwo,nN,qwo,Nwo,jwo,w1,Gle,Dwo,Gwo,sN,Owo,Vwo,Xwo,A1,Ole,zwo,Qwo,lN,Wwo,Hwo,Uwo,y1,Vle,Jwo,Ywo,iN,Kwo,Zwo,eAo,L1,Xle,oAo,rAo,dN,tAo,aAo,nAo,x1,zle,sAo,lAo,cN,iAo,dAo,cAo,k1,Qle,fAo,mAo,fN,gAo,hAo,pAo,S1,Wle,_Ao,uAo,mN,bAo,vAo,FAo,R1,Hle,TAo,MAo,gN,EAo,CAo,wAo,B1,Ule,AAo,yAo,hN,LAo,xAo,kAo,P1,Jle,SAo,RAo,pN,BAo,PAo,$Ao,$1,Yle,IAo,qAo,_N,NAo,jAo,DAo,I1,Kle,GAo,OAo,uN,VAo,XAo,zAo,q1,Zle,QAo,WAo,bN,HAo,UAo,JAo,N1,eie,YAo,KAo,vN,ZAo,e0o,o0o,j1,oie,r0o,t0o,FN,a0o,n0o,s0o,D1,rie,l0o,i0o,TN,d0o,c0o,f0o,G1,tie,m0o,g0o,MN,h0o,p0o,_0o,O1,aie,u0o,b0o,EN,v0o,F0o,T0o,V1,nie,M0o,E0o,CN,C0o,w0o,A0o,X1,sie,y0o,L0o,wN,x0o,k0o,S0o,z1,lie,R0o,B0o,AN,P0o,$0o,I0o,Q1,iie,q0o,N0o,yN,j0o,D0o,G0o,W1,die,O0o,V0o,LN,X0o,z0o,Q0o,H1,cie,W0o,H0o,xN,U0o,J0o,Y0o,U1,fie,K0o,Z0o,kN,eyo,oyo,ryo,J1,mie,tyo,ayo,SN,nyo,syo,lyo,Y1,gie,iyo,dyo,RN,cyo,fyo,myo,K1,hie,gyo,hyo,BN,pyo,_yo,uyo,Z1,pie,byo,vyo,PN,Fyo,Tyo,Myo,eb,_ie,Eyo,Cyo,$N,wyo,Ayo,yyo,ob,uie,Lyo,xyo,IN,kyo,Syo,Ryo,rb,bie,Byo,Pyo,qN,$yo,Iyo,qyo,tb,vie,Nyo,jyo,NN,Dyo,Gyo,Oyo,ab,Fie,Vyo,Xyo,jN,zyo,Qyo,Wyo,nb,Tie,Hyo,Uyo,DN,Jyo,Yyo,Kyo,sb,Mie,Zyo,e8o,GN,o8o,r8o,t8o,lb,Eie,a8o,n8o,ON,s8o,l8o,i8o,ib,d8o,Cie,c8o,f8o,wie,m8o,g8o,Aie,h8o,p8o,ew,wBe,bd,db,yie,ow,_8o,Lie,u8o,ABe,rr,rw,b8o,vd,v8o,VN,F8o,T8o,XN,M8o,E8o,C8o,tw,w8o,xie,A8o,y8o,L8o,Jr,aw,x8o,kie,k8o,S8o,Fd,R8o,Sie,B8o,P8o,zN,$8o,I8o,q8o,Rie,N8o,j8o,nw,D8o,Ve,sw,G8o,Bie,O8o,V8o,Ja,X8o,Pie,z8o,Q8o,$ie,W8o,H8o,Iie,U8o,J8o,Y8o,G,cb,qie,K8o,Z8o,QN,eLo,oLo,rLo,fb,Nie,tLo,aLo,WN,nLo,sLo,lLo,mb,jie,iLo,dLo,HN,cLo,fLo,mLo,gb,Die,gLo,hLo,UN,pLo,_Lo,uLo,hb,Gie,bLo,vLo,JN,FLo,TLo,MLo,pb,Oie,ELo,CLo,YN,wLo,ALo,yLo,_b,Vie,LLo,xLo,KN,kLo,SLo,RLo,ub,Xie,BLo,PLo,ZN,$Lo,ILo,qLo,bb,zie,NLo,jLo,ej,DLo,GLo,OLo,vb,Qie,VLo,XLo,oj,zLo,QLo,WLo,Fb,Wie,HLo,ULo,rj,JLo,YLo,KLo,Tb,Hie,ZLo,e7o,tj,o7o,r7o,t7o,Mb,Uie,a7o,n7o,aj,s7o,l7o,i7o,Eb,Jie,d7o,c7o,nj,f7o,m7o,g7o,Cb,Yie,h7o,p7o,sj,_7o,u7o,b7o,wb,Kie,v7o,F7o,lj,T7o,M7o,E7o,Ab,Zie,C7o,w7o,ij,A7o,y7o,L7o,yb,ede,x7o,k7o,dj,S7o,R7o,B7o,Lb,ode,P7o,$7o,cj,I7o,q7o,N7o,xb,rde,j7o,D7o,fj,G7o,O7o,V7o,kb,tde,X7o,z7o,mj,Q7o,W7o,H7o,Sb,ade,U7o,J7o,gj,Y7o,K7o,Z7o,Rb,nde,exo,oxo,hj,rxo,txo,axo,Bb,sde,nxo,sxo,pj,lxo,ixo,dxo,Pb,lde,cxo,fxo,_j,mxo,gxo,hxo,$b,ide,pxo,_xo,uj,uxo,bxo,vxo,Ib,dde,Fxo,Txo,bj,Mxo,Exo,Cxo,qb,cde,wxo,Axo,vj,yxo,Lxo,xxo,Nb,kxo,fde,Sxo,Rxo,mde,Bxo,Pxo,gde,$xo,Ixo,lw,yBe,Td,jb,hde,iw,qxo,pde,Nxo,LBe,tr,dw,jxo,Md,Dxo,Fj,Gxo,Oxo,Tj,Vxo,Xxo,zxo,cw,Qxo,_de,Wxo,Hxo,Uxo,Yr,fw,Jxo,ude,Yxo,Kxo,Ed,Zxo,bde,eko,oko,Mj,rko,tko,ako,vde,nko,sko,mw,lko,Xe,gw,iko,Fde,dko,cko,Ya,fko,Tde,mko,gko,Mde,hko,pko,Ede,_ko,uko,bko,da,Db,Cde,vko,Fko,Ej,Tko,Mko,Eko,Gb,wde,Cko,wko,Cj,Ako,yko,Lko,Ob,Ade,xko,kko,wj,Sko,Rko,Bko,Vb,yde,Pko,$ko,Aj,Iko,qko,Nko,Xb,Lde,jko,Dko,yj,Gko,Oko,Vko,zb,Xko,xde,zko,Qko,kde,Wko,Hko,Sde,Uko,Jko,hw,xBe,Cd,Qb,Rde,pw,Yko,Bde,Kko,kBe,ar,_w,Zko,wd,eSo,Lj,oSo,rSo,xj,tSo,aSo,nSo,uw,sSo,Pde,lSo,iSo,dSo,Kr,bw,cSo,$de,fSo,mSo,Ad,gSo,Ide,hSo,pSo,kj,_So,uSo,bSo,qde,vSo,FSo,vw,TSo,ze,Fw,MSo,Nde,ESo,CSo,Ka,wSo,jde,ASo,ySo,Dde,LSo,xSo,Gde,kSo,SSo,RSo,j,Wb,Ode,BSo,PSo,Sj,$So,ISo,qSo,Hb,Vde,NSo,jSo,Rj,DSo,GSo,OSo,Ub,Xde,VSo,XSo,Bj,zSo,QSo,WSo,Jb,zde,HSo,USo,Pj,JSo,YSo,KSo,Yb,Qde,ZSo,eRo,$j,oRo,rRo,tRo,Kb,Wde,aRo,nRo,Ij,sRo,lRo,iRo,Zb,Hde,dRo,cRo,qj,fRo,mRo,gRo,e2,Ude,hRo,pRo,Nj,_Ro,uRo,bRo,o2,Jde,vRo,FRo,jj,TRo,MRo,ERo,r2,Yde,CRo,wRo,Dj,ARo,yRo,LRo,t2,Kde,xRo,kRo,Gj,SRo,RRo,BRo,a2,Zde,PRo,$Ro,Oj,IRo,qRo,NRo,n2,ece,jRo,DRo,Vj,GRo,ORo,VRo,s2,oce,XRo,zRo,Xj,QRo,WRo,HRo,l2,rce,URo,JRo,zj,YRo,KRo,ZRo,i2,tce,eBo,oBo,Qj,rBo,tBo,aBo,d2,ace,nBo,sBo,Wj,lBo,iBo,dBo,c2,nce,cBo,fBo,Hj,mBo,gBo,hBo,f2,sce,pBo,_Bo,Uj,uBo,bBo,vBo,m2,lce,FBo,TBo,Jj,MBo,EBo,CBo,g2,ice,wBo,ABo,Yj,yBo,LBo,xBo,h2,dce,kBo,SBo,Kj,RBo,BBo,PBo,p2,cce,$Bo,IBo,Zj,qBo,NBo,jBo,_2,fce,DBo,GBo,eD,OBo,VBo,XBo,u2,mce,zBo,QBo,oD,WBo,HBo,UBo,b2,gce,JBo,YBo,rD,KBo,ZBo,ePo,v2,hce,oPo,rPo,tD,tPo,aPo,nPo,F2,pce,sPo,lPo,aD,iPo,dPo,cPo,T2,_ce,fPo,mPo,nD,gPo,hPo,pPo,M2,uce,_Po,uPo,sD,bPo,vPo,FPo,E2,bce,TPo,MPo,lD,EPo,CPo,wPo,C2,vce,APo,yPo,iD,LPo,xPo,kPo,w2,Fce,SPo,RPo,dD,BPo,PPo,$Po,A2,IPo,Tce,qPo,NPo,Mce,jPo,DPo,Ece,GPo,OPo,Tw,SBe,yd,y2,Cce,Mw,VPo,wce,XPo,RBe,nr,Ew,zPo,Ld,QPo,cD,WPo,HPo,fD,UPo,JPo,YPo,Cw,KPo,Ace,ZPo,e$o,o$o,Zr,ww,r$o,yce,t$o,a$o,xd,n$o,Lce,s$o,l$o,mD,i$o,d$o,c$o,xce,f$o,m$o,Aw,g$o,Qe,yw,h$o,kce,p$o,_$o,Za,u$o,Sce,b$o,v$o,Rce,F$o,T$o,Bce,M$o,E$o,C$o,R,L2,Pce,w$o,A$o,gD,y$o,L$o,x$o,x2,$ce,k$o,S$o,hD,R$o,B$o,P$o,k2,Ice,$$o,I$o,pD,q$o,N$o,j$o,S2,qce,D$o,G$o,_D,O$o,V$o,X$o,R2,Nce,z$o,Q$o,uD,W$o,H$o,U$o,B2,jce,J$o,Y$o,bD,K$o,Z$o,eIo,P2,Dce,oIo,rIo,vD,tIo,aIo,nIo,$2,Gce,sIo,lIo,FD,iIo,dIo,cIo,I2,Oce,fIo,mIo,TD,gIo,hIo,pIo,q2,Vce,_Io,uIo,MD,bIo,vIo,FIo,N2,Xce,TIo,MIo,ED,EIo,CIo,wIo,j2,zce,AIo,yIo,CD,LIo,xIo,kIo,D2,Qce,SIo,RIo,wD,BIo,PIo,$Io,G2,Wce,IIo,qIo,AD,NIo,jIo,DIo,O2,Hce,GIo,OIo,yD,VIo,XIo,zIo,V2,Uce,QIo,WIo,LD,HIo,UIo,JIo,X2,Jce,YIo,KIo,xD,ZIo,eqo,oqo,z2,Yce,rqo,tqo,kD,aqo,nqo,sqo,Q2,Kce,lqo,iqo,SD,dqo,cqo,fqo,W2,Zce,mqo,gqo,RD,hqo,pqo,_qo,H2,efe,uqo,bqo,BD,vqo,Fqo,Tqo,U2,ofe,Mqo,Eqo,PD,Cqo,wqo,Aqo,J2,rfe,yqo,Lqo,$D,xqo,kqo,Sqo,Y2,tfe,Rqo,Bqo,ID,Pqo,$qo,Iqo,K2,afe,qqo,Nqo,qD,jqo,Dqo,Gqo,Z2,nfe,Oqo,Vqo,ND,Xqo,zqo,Qqo,e5,sfe,Wqo,Hqo,jD,Uqo,Jqo,Yqo,o5,lfe,Kqo,Zqo,DD,eNo,oNo,rNo,r5,ife,tNo,aNo,GD,nNo,sNo,lNo,t5,dfe,iNo,dNo,OD,cNo,fNo,mNo,a5,cfe,gNo,hNo,VD,pNo,_No,uNo,n5,ffe,bNo,vNo,XD,FNo,TNo,MNo,s5,mfe,ENo,CNo,zD,wNo,ANo,yNo,l5,gfe,LNo,xNo,QD,kNo,SNo,RNo,i5,hfe,BNo,PNo,WD,$No,INo,qNo,d5,pfe,NNo,jNo,HD,DNo,GNo,ONo,c5,_fe,VNo,XNo,UD,zNo,QNo,WNo,f5,ufe,HNo,UNo,JD,JNo,YNo,KNo,m5,bfe,ZNo,ejo,YD,ojo,rjo,tjo,g5,ajo,vfe,njo,sjo,Ffe,ljo,ijo,Tfe,djo,cjo,Lw,BBe,kd,h5,Mfe,xw,fjo,Efe,mjo,PBe,sr,kw,gjo,Sd,hjo,KD,pjo,_jo,ZD,ujo,bjo,vjo,Sw,Fjo,Cfe,Tjo,Mjo,Ejo,et,Rw,Cjo,wfe,wjo,Ajo,Rd,yjo,Afe,Ljo,xjo,eG,kjo,Sjo,Rjo,yfe,Bjo,Pjo,Bw,$jo,We,Pw,Ijo,Lfe,qjo,Njo,en,jjo,xfe,Djo,Gjo,kfe,Ojo,Vjo,Sfe,Xjo,zjo,Qjo,Rfe,p5,Bfe,Wjo,Hjo,oG,Ujo,Jjo,Yjo,_5,Kjo,Pfe,Zjo,eDo,$fe,oDo,rDo,Ife,tDo,aDo,$w,$Be,Bd,u5,qfe,Iw,nDo,Nfe,sDo,IBe,lr,qw,lDo,Pd,iDo,rG,dDo,cDo,tG,fDo,mDo,gDo,Nw,hDo,jfe,pDo,_Do,uDo,ot,jw,bDo,Dfe,vDo,FDo,$d,TDo,Gfe,MDo,EDo,aG,CDo,wDo,ADo,Ofe,yDo,LDo,Dw,xDo,He,Gw,kDo,Vfe,SDo,RDo,on,BDo,Xfe,PDo,$Do,zfe,IDo,qDo,Qfe,NDo,jDo,DDo,de,b5,Wfe,GDo,ODo,nG,VDo,XDo,zDo,v5,Hfe,QDo,WDo,sG,HDo,UDo,JDo,F5,Ufe,YDo,KDo,lG,ZDo,eGo,oGo,Xs,Jfe,rGo,tGo,iG,aGo,nGo,dG,sGo,lGo,iGo,T5,Yfe,dGo,cGo,cG,fGo,mGo,gGo,ma,Kfe,hGo,pGo,fG,_Go,uGo,mG,bGo,vGo,gG,FGo,TGo,MGo,M5,Zfe,EGo,CGo,hG,wGo,AGo,yGo,E5,eme,LGo,xGo,pG,kGo,SGo,RGo,C5,ome,BGo,PGo,_G,$Go,IGo,qGo,w5,rme,NGo,jGo,uG,DGo,GGo,OGo,A5,tme,VGo,XGo,bG,zGo,QGo,WGo,y5,ame,HGo,UGo,vG,JGo,YGo,KGo,L5,nme,ZGo,eOo,FG,oOo,rOo,tOo,x5,aOo,sme,nOo,sOo,lme,lOo,iOo,ime,dOo,cOo,Ow,qBe,Id,k5,dme,Vw,fOo,cme,mOo,NBe,ir,Xw,gOo,qd,hOo,TG,pOo,_Oo,MG,uOo,bOo,vOo,zw,FOo,fme,TOo,MOo,EOo,rt,Qw,COo,mme,wOo,AOo,Nd,yOo,gme,LOo,xOo,EG,kOo,SOo,ROo,hme,BOo,POo,Ww,$Oo,Ue,Hw,IOo,pme,qOo,NOo,rn,jOo,_me,DOo,GOo,ume,OOo,VOo,bme,XOo,zOo,QOo,vme,S5,Fme,WOo,HOo,CG,UOo,JOo,YOo,R5,KOo,Tme,ZOo,eVo,Mme,oVo,rVo,Eme,tVo,aVo,Uw,jBe,jd,B5,Cme,Jw,nVo,wme,sVo,DBe,dr,Yw,lVo,Dd,iVo,wG,dVo,cVo,AG,fVo,mVo,gVo,Kw,hVo,Ame,pVo,_Vo,uVo,tt,Zw,bVo,yme,vVo,FVo,Gd,TVo,Lme,MVo,EVo,yG,CVo,wVo,AVo,xme,yVo,LVo,eA,xVo,Je,oA,kVo,kme,SVo,RVo,tn,BVo,Sme,PVo,$Vo,Rme,IVo,qVo,Bme,NVo,jVo,DVo,Se,P5,Pme,GVo,OVo,LG,VVo,XVo,zVo,$5,$me,QVo,WVo,xG,HVo,UVo,JVo,I5,Ime,YVo,KVo,kG,ZVo,eXo,oXo,q5,qme,rXo,tXo,SG,aXo,nXo,sXo,N5,Nme,lXo,iXo,RG,dXo,cXo,fXo,j5,jme,mXo,gXo,BG,hXo,pXo,_Xo,D5,Dme,uXo,bXo,PG,vXo,FXo,TXo,G5,Gme,MXo,EXo,$G,CXo,wXo,AXo,O5,yXo,Ome,LXo,xXo,Vme,kXo,SXo,Xme,RXo,BXo,rA,GBe,Od,V5,zme,tA,PXo,Qme,$Xo,OBe,cr,aA,IXo,Vd,qXo,IG,NXo,jXo,qG,DXo,GXo,OXo,nA,VXo,Wme,XXo,zXo,QXo,at,sA,WXo,Hme,HXo,UXo,Xd,JXo,Ume,YXo,KXo,NG,ZXo,ezo,ozo,Jme,rzo,tzo,lA,azo,Ye,iA,nzo,Yme,szo,lzo,an,izo,Kme,dzo,czo,Zme,fzo,mzo,ege,gzo,hzo,pzo,nn,X5,oge,_zo,uzo,jG,bzo,vzo,Fzo,z5,rge,Tzo,Mzo,DG,Ezo,Czo,wzo,Q5,tge,Azo,yzo,GG,Lzo,xzo,kzo,W5,age,Szo,Rzo,OG,Bzo,Pzo,$zo,H5,Izo,nge,qzo,Nzo,sge,jzo,Dzo,lge,Gzo,Ozo,dA,VBe,zd,U5,ige,cA,Vzo,dge,Xzo,XBe,fr,fA,zzo,Qd,Qzo,VG,Wzo,Hzo,XG,Uzo,Jzo,Yzo,mA,Kzo,cge,Zzo,eQo,oQo,nt,gA,rQo,fge,tQo,aQo,Wd,nQo,mge,sQo,lQo,zG,iQo,dQo,cQo,gge,fQo,mQo,hA,gQo,Ke,pA,hQo,hge,pQo,_Qo,sn,uQo,pge,bQo,vQo,_ge,FQo,TQo,uge,MQo,EQo,CQo,Re,J5,bge,wQo,AQo,QG,yQo,LQo,xQo,Y5,vge,kQo,SQo,WG,RQo,BQo,PQo,K5,Fge,$Qo,IQo,HG,qQo,NQo,jQo,Z5,Tge,DQo,GQo,UG,OQo,VQo,XQo,ev,Mge,zQo,QQo,JG,WQo,HQo,UQo,ov,Ege,JQo,YQo,YG,KQo,ZQo,eWo,rv,Cge,oWo,rWo,KG,tWo,aWo,nWo,tv,wge,sWo,lWo,ZG,iWo,dWo,cWo,av,fWo,Age,mWo,gWo,yge,hWo,pWo,Lge,_Wo,uWo,_A,zBe,Hd,nv,xge,uA,bWo,kge,vWo,QBe,mr,bA,FWo,Ud,TWo,eO,MWo,EWo,oO,CWo,wWo,AWo,vA,yWo,Sge,LWo,xWo,kWo,st,FA,SWo,Rge,RWo,BWo,Jd,PWo,Bge,$Wo,IWo,rO,qWo,NWo,jWo,Pge,DWo,GWo,TA,OWo,Ze,MA,VWo,$ge,XWo,zWo,ln,QWo,Ige,WWo,HWo,qge,UWo,JWo,Nge,YWo,KWo,ZWo,EA,sv,jge,eHo,oHo,tO,rHo,tHo,aHo,lv,Dge,nHo,sHo,aO,lHo,iHo,dHo,iv,cHo,Gge,fHo,mHo,Oge,gHo,hHo,Vge,pHo,_Ho,CA,WBe,Yd,dv,Xge,wA,uHo,zge,bHo,HBe,gr,AA,vHo,Kd,FHo,nO,THo,MHo,sO,EHo,CHo,wHo,yA,AHo,Qge,yHo,LHo,xHo,lt,LA,kHo,Wge,SHo,RHo,Zd,BHo,Hge,PHo,$Ho,lO,IHo,qHo,NHo,Uge,jHo,DHo,xA,GHo,eo,kA,OHo,Jge,VHo,XHo,dn,zHo,Yge,QHo,WHo,Kge,HHo,UHo,Zge,JHo,YHo,KHo,cn,cv,ehe,ZHo,eUo,iO,oUo,rUo,tUo,fv,ohe,aUo,nUo,dO,sUo,lUo,iUo,mv,rhe,dUo,cUo,cO,fUo,mUo,gUo,gv,the,hUo,pUo,fO,_Uo,uUo,bUo,hv,vUo,ahe,FUo,TUo,nhe,MUo,EUo,she,CUo,wUo,SA,UBe,ec,pv,lhe,RA,AUo,ihe,yUo,JBe,hr,BA,LUo,oc,xUo,mO,kUo,SUo,gO,RUo,BUo,PUo,PA,$Uo,dhe,IUo,qUo,NUo,it,$A,jUo,che,DUo,GUo,rc,OUo,fhe,VUo,XUo,hO,zUo,QUo,WUo,mhe,HUo,UUo,IA,JUo,oo,qA,YUo,ghe,KUo,ZUo,fn,eJo,hhe,oJo,rJo,phe,tJo,aJo,_he,nJo,sJo,lJo,tc,_v,uhe,iJo,dJo,pO,cJo,fJo,mJo,uv,bhe,gJo,hJo,_O,pJo,_Jo,uJo,bv,vhe,bJo,vJo,uO,FJo,TJo,MJo,vv,EJo,Fhe,CJo,wJo,The,AJo,yJo,Mhe,LJo,xJo,NA,YBe,ac,Fv,Ehe,jA,kJo,Che,SJo,KBe,pr,DA,RJo,nc,BJo,bO,PJo,$Jo,vO,IJo,qJo,NJo,GA,jJo,whe,DJo,GJo,OJo,dt,OA,VJo,Ahe,XJo,zJo,sc,QJo,yhe,WJo,HJo,FO,UJo,JJo,YJo,Lhe,KJo,ZJo,VA,eYo,ro,XA,oYo,xhe,rYo,tYo,mn,aYo,khe,nYo,sYo,She,lYo,iYo,Rhe,dYo,cYo,fYo,Bhe,Tv,Phe,mYo,gYo,TO,hYo,pYo,_Yo,Mv,uYo,$he,bYo,vYo,Ihe,FYo,TYo,qhe,MYo,EYo,zA,ZBe,lc,Ev,Nhe,QA,CYo,jhe,wYo,ePe,_r,WA,AYo,ic,yYo,MO,LYo,xYo,EO,kYo,SYo,RYo,HA,BYo,Dhe,PYo,$Yo,IYo,ct,UA,qYo,Ghe,NYo,jYo,dc,DYo,Ohe,GYo,OYo,CO,VYo,XYo,zYo,Vhe,QYo,WYo,JA,HYo,to,YA,UYo,Xhe,JYo,YYo,gn,KYo,zhe,ZYo,eKo,Qhe,oKo,rKo,Whe,tKo,aKo,nKo,Hhe,Cv,Uhe,sKo,lKo,wO,iKo,dKo,cKo,wv,fKo,Jhe,mKo,gKo,Yhe,hKo,pKo,Khe,_Ko,uKo,KA,oPe,cc,Av,Zhe,ZA,bKo,epe,vKo,rPe,ur,e0,FKo,fc,TKo,AO,MKo,EKo,yO,CKo,wKo,AKo,o0,yKo,ope,LKo,xKo,kKo,ft,r0,SKo,rpe,RKo,BKo,mc,PKo,tpe,$Ko,IKo,LO,qKo,NKo,jKo,ape,DKo,GKo,t0,OKo,ao,a0,VKo,npe,XKo,zKo,hn,QKo,spe,WKo,HKo,lpe,UKo,JKo,ipe,YKo,KKo,ZKo,pn,yv,dpe,eZo,oZo,xO,rZo,tZo,aZo,Lv,cpe,nZo,sZo,kO,lZo,iZo,dZo,xv,fpe,cZo,fZo,SO,mZo,gZo,hZo,kv,mpe,pZo,_Zo,RO,uZo,bZo,vZo,Sv,FZo,gpe,TZo,MZo,hpe,EZo,CZo,ppe,wZo,AZo,n0,tPe,gc,Rv,_pe,s0,yZo,upe,LZo,aPe,br,l0,xZo,hc,kZo,BO,SZo,RZo,PO,BZo,PZo,$Zo,i0,IZo,bpe,qZo,NZo,jZo,mt,d0,DZo,vpe,GZo,OZo,pc,VZo,Fpe,XZo,zZo,$O,QZo,WZo,HZo,Tpe,UZo,JZo,c0,YZo,no,f0,KZo,Mpe,ZZo,eer,_n,oer,Epe,rer,ter,Cpe,aer,ner,wpe,ser,ler,ier,Ape,Bv,ype,der,cer,IO,fer,mer,ger,Pv,her,Lpe,per,_er,xpe,uer,ber,kpe,ver,Fer,m0,nPe,_c,$v,Spe,g0,Ter,Rpe,Mer,sPe,vr,h0,Eer,uc,Cer,qO,wer,Aer,NO,yer,Ler,xer,p0,ker,Bpe,Ser,Rer,Ber,gt,_0,Per,Ppe,$er,Ier,bc,qer,$pe,Ner,jer,jO,Der,Ger,Oer,Ipe,Ver,Xer,u0,zer,ho,b0,Qer,qpe,Wer,Her,un,Uer,Npe,Jer,Yer,jpe,Ker,Zer,Dpe,eor,oor,ror,x,Iv,Gpe,tor,aor,DO,nor,sor,lor,qv,Ope,ior,dor,GO,cor,mor,gor,Nv,Vpe,hor,por,OO,_or,uor,bor,jv,Xpe,vor,For,VO,Tor,Mor,Eor,Dv,zpe,Cor,wor,XO,Aor,yor,Lor,Gv,Qpe,xor,kor,zO,Sor,Ror,Bor,Ov,Wpe,Por,$or,QO,Ior,qor,Nor,Vv,Hpe,jor,Dor,WO,Gor,Oor,Vor,Xv,Upe,Xor,zor,HO,Qor,Wor,Hor,zv,Jpe,Uor,Jor,UO,Yor,Kor,Zor,Qv,Ype,err,orr,JO,rrr,trr,arr,Wv,Kpe,nrr,srr,YO,lrr,irr,drr,Hv,Zpe,crr,frr,KO,mrr,grr,hrr,Uv,e_e,prr,_rr,ZO,urr,brr,vrr,Jv,o_e,Frr,Trr,eV,Mrr,Err,Crr,Yv,r_e,wrr,Arr,oV,yrr,Lrr,xrr,zs,t_e,krr,Srr,rV,Rrr,Brr,tV,Prr,$rr,Irr,Kv,a_e,qrr,Nrr,aV,jrr,Drr,Grr,Zv,n_e,Orr,Vrr,nV,Xrr,zrr,Qrr,eF,s_e,Wrr,Hrr,sV,Urr,Jrr,Yrr,oF,l_e,Krr,Zrr,lV,etr,otr,rtr,rF,i_e,ttr,atr,iV,ntr,str,ltr,tF,d_e,itr,dtr,dV,ctr,ftr,mtr,aF,c_e,gtr,htr,cV,ptr,_tr,utr,nF,f_e,btr,vtr,fV,Ftr,Ttr,Mtr,sF,m_e,Etr,Ctr,mV,wtr,Atr,ytr,lF,g_e,Ltr,xtr,gV,ktr,Str,Rtr,iF,h_e,Btr,Ptr,hV,$tr,Itr,qtr,dF,p_e,Ntr,jtr,pV,Dtr,Gtr,Otr,cF,__e,Vtr,Xtr,_V,ztr,Qtr,Wtr,fF,u_e,Htr,Utr,uV,Jtr,Ytr,Ktr,mF,b_e,Ztr,ear,bV,oar,rar,tar,gF,v_e,aar,nar,vV,sar,lar,iar,hF,F_e,dar,car,FV,far,mar,gar,pF,T_e,har,par,TV,_ar,uar,bar,_F,M_e,Far,Tar,MV,Mar,Ear,Car,uF,E_e,war,Aar,EV,yar,Lar,xar,bF,C_e,kar,Sar,CV,Rar,Bar,Par,vF,w_e,$ar,Iar,wV,qar,Nar,jar,FF,A_e,Dar,Gar,AV,Oar,Var,Xar,TF,y_e,zar,Qar,yV,War,Har,Uar,MF,L_e,Jar,Yar,LV,Kar,Zar,enr,EF,x_e,onr,rnr,xV,tnr,anr,nnr,CF,k_e,snr,lnr,kV,inr,dnr,cnr,S_e,fnr,mnr,v0,lPe,vc,wF,R_e,F0,gnr,B_e,hnr,iPe,Fr,T0,pnr,Fc,_nr,SV,unr,bnr,RV,vnr,Fnr,Tnr,M0,Mnr,P_e,Enr,Cnr,wnr,ht,E0,Anr,$_e,ynr,Lnr,Tc,xnr,I_e,knr,Snr,BV,Rnr,Bnr,Pnr,q_e,$nr,Inr,C0,qnr,po,w0,Nnr,N_e,jnr,Dnr,bn,Gnr,j_e,Onr,Vnr,D_e,Xnr,znr,G_e,Qnr,Wnr,Hnr,H,AF,O_e,Unr,Jnr,PV,Ynr,Knr,Znr,yF,V_e,esr,osr,$V,rsr,tsr,asr,LF,X_e,nsr,ssr,IV,lsr,isr,dsr,xF,z_e,csr,fsr,qV,msr,gsr,hsr,kF,Q_e,psr,_sr,NV,usr,bsr,vsr,SF,W_e,Fsr,Tsr,jV,Msr,Esr,Csr,RF,H_e,wsr,Asr,DV,ysr,Lsr,xsr,BF,U_e,ksr,Ssr,GV,Rsr,Bsr,Psr,PF,J_e,$sr,Isr,OV,qsr,Nsr,jsr,$F,Y_e,Dsr,Gsr,VV,Osr,Vsr,Xsr,IF,K_e,zsr,Qsr,XV,Wsr,Hsr,Usr,qF,Z_e,Jsr,Ysr,zV,Ksr,Zsr,elr,NF,eue,olr,rlr,QV,tlr,alr,nlr,jF,oue,slr,llr,WV,ilr,dlr,clr,DF,rue,flr,mlr,HV,glr,hlr,plr,GF,tue,_lr,ulr,UV,blr,vlr,Flr,OF,aue,Tlr,Mlr,JV,Elr,Clr,wlr,VF,nue,Alr,ylr,YV,Llr,xlr,klr,XF,sue,Slr,Rlr,KV,Blr,Plr,$lr,zF,lue,Ilr,qlr,ZV,Nlr,jlr,Dlr,QF,iue,Glr,Olr,eX,Vlr,Xlr,zlr,WF,due,Qlr,Wlr,oX,Hlr,Ulr,Jlr,HF,cue,Ylr,Klr,rX,Zlr,eir,oir,fue,rir,tir,A0,dPe,Mc,UF,mue,y0,air,gue,nir,cPe,Tr,L0,sir,Ec,lir,tX,iir,dir,aX,cir,fir,mir,x0,gir,hue,hir,pir,_ir,pt,k0,uir,pue,bir,vir,Cc,Fir,_ue,Tir,Mir,nX,Eir,Cir,wir,uue,Air,yir,S0,Lir,_o,R0,xir,bue,kir,Sir,vn,Rir,vue,Bir,Pir,Fue,$ir,Iir,Tue,qir,Nir,jir,fe,JF,Mue,Dir,Gir,sX,Oir,Vir,Xir,YF,Eue,zir,Qir,lX,Wir,Hir,Uir,KF,Cue,Jir,Yir,iX,Kir,Zir,edr,ZF,wue,odr,rdr,dX,tdr,adr,ndr,eT,Aue,sdr,ldr,cX,idr,ddr,cdr,oT,yue,fdr,mdr,fX,gdr,hdr,pdr,rT,Lue,_dr,udr,mX,bdr,vdr,Fdr,tT,xue,Tdr,Mdr,gX,Edr,Cdr,wdr,aT,kue,Adr,ydr,hX,Ldr,xdr,kdr,nT,Sue,Sdr,Rdr,pX,Bdr,Pdr,$dr,sT,Rue,Idr,qdr,_X,Ndr,jdr,Ddr,lT,Bue,Gdr,Odr,uX,Vdr,Xdr,zdr,Pue,Qdr,Wdr,B0,fPe,wc,iT,$ue,P0,Hdr,Iue,Udr,mPe,Mr,$0,Jdr,Ac,Ydr,bX,Kdr,Zdr,vX,ecr,ocr,rcr,I0,tcr,que,acr,ncr,scr,_t,q0,lcr,Nue,icr,dcr,yc,ccr,jue,fcr,mcr,FX,gcr,hcr,pcr,Due,_cr,ucr,N0,bcr,uo,j0,vcr,Gue,Fcr,Tcr,Fn,Mcr,Oue,Ecr,Ccr,Vue,wcr,Acr,Xue,ycr,Lcr,xcr,D0,dT,zue,kcr,Scr,TX,Rcr,Bcr,Pcr,cT,Que,$cr,Icr,MX,qcr,Ncr,jcr,Wue,Dcr,Gcr,G0,gPe,Lc,fT,Hue,O0,Ocr,Uue,Vcr,hPe,Er,V0,Xcr,xc,zcr,EX,Qcr,Wcr,CX,Hcr,Ucr,Jcr,X0,Ycr,Jue,Kcr,Zcr,efr,ut,z0,ofr,Yue,rfr,tfr,kc,afr,Kue,nfr,sfr,wX,lfr,ifr,dfr,Zue,cfr,ffr,Q0,mfr,bo,W0,gfr,e6e,hfr,pfr,Tn,_fr,o6e,ufr,bfr,r6e,vfr,Ffr,t6e,Tfr,Mfr,Efr,J,mT,a6e,Cfr,wfr,AX,Afr,yfr,Lfr,gT,n6e,xfr,kfr,yX,Sfr,Rfr,Bfr,hT,s6e,Pfr,$fr,LX,Ifr,qfr,Nfr,pT,l6e,jfr,Dfr,xX,Gfr,Ofr,Vfr,_T,i6e,Xfr,zfr,kX,Qfr,Wfr,Hfr,uT,d6e,Ufr,Jfr,SX,Yfr,Kfr,Zfr,bT,c6e,emr,omr,RX,rmr,tmr,amr,vT,f6e,nmr,smr,BX,lmr,imr,dmr,FT,m6e,cmr,fmr,PX,mmr,gmr,hmr,TT,g6e,pmr,_mr,$X,umr,bmr,vmr,MT,h6e,Fmr,Tmr,IX,Mmr,Emr,Cmr,ET,p6e,wmr,Amr,qX,ymr,Lmr,xmr,CT,_6e,kmr,Smr,NX,Rmr,Bmr,Pmr,wT,u6e,$mr,Imr,jX,qmr,Nmr,jmr,AT,b6e,Dmr,Gmr,DX,Omr,Vmr,Xmr,yT,v6e,zmr,Qmr,GX,Wmr,Hmr,Umr,LT,F6e,Jmr,Ymr,OX,Kmr,Zmr,egr,xT,T6e,ogr,rgr,VX,tgr,agr,ngr,kT,M6e,sgr,lgr,XX,igr,dgr,cgr,ST,E6e,fgr,mgr,zX,ggr,hgr,pgr,C6e,_gr,ugr,H0,pPe,Sc,RT,w6e,U0,bgr,A6e,vgr,_Pe,Cr,J0,Fgr,Rc,Tgr,QX,Mgr,Egr,WX,Cgr,wgr,Agr,Y0,ygr,y6e,Lgr,xgr,kgr,bt,K0,Sgr,L6e,Rgr,Bgr,Bc,Pgr,x6e,$gr,Igr,HX,qgr,Ngr,jgr,k6e,Dgr,Ggr,Z0,Ogr,vo,ey,Vgr,S6e,Xgr,zgr,Mn,Qgr,R6e,Wgr,Hgr,B6e,Ugr,Jgr,P6e,Ygr,Kgr,Zgr,be,BT,$6e,ehr,ohr,UX,rhr,thr,ahr,PT,I6e,nhr,shr,JX,lhr,ihr,dhr,$T,q6e,chr,fhr,YX,mhr,ghr,hhr,IT,N6e,phr,_hr,KX,uhr,bhr,vhr,qT,j6e,Fhr,Thr,ZX,Mhr,Ehr,Chr,NT,D6e,whr,Ahr,ez,yhr,Lhr,xhr,jT,G6e,khr,Shr,oz,Rhr,Bhr,Phr,DT,O6e,$hr,Ihr,rz,qhr,Nhr,jhr,GT,V6e,Dhr,Ghr,tz,Ohr,Vhr,Xhr,OT,X6e,zhr,Qhr,az,Whr,Hhr,Uhr,z6e,Jhr,Yhr,oy,uPe,Pc,VT,Q6e,ry,Khr,W6e,Zhr,bPe,wr,ty,epr,$c,opr,nz,rpr,tpr,sz,apr,npr,spr,ay,lpr,H6e,ipr,dpr,cpr,vt,ny,fpr,U6e,mpr,gpr,Ic,hpr,J6e,ppr,_pr,lz,upr,bpr,vpr,Y6e,Fpr,Tpr,sy,Mpr,Fo,ly,Epr,K6e,Cpr,wpr,En,Apr,Z6e,ypr,Lpr,e1e,xpr,kpr,o1e,Spr,Rpr,Bpr,V,XT,r1e,Ppr,$pr,iz,Ipr,qpr,Npr,zT,t1e,jpr,Dpr,dz,Gpr,Opr,Vpr,QT,a1e,Xpr,zpr,cz,Qpr,Wpr,Hpr,WT,n1e,Upr,Jpr,fz,Ypr,Kpr,Zpr,HT,s1e,e_r,o_r,mz,r_r,t_r,a_r,UT,l1e,n_r,s_r,gz,l_r,i_r,d_r,JT,i1e,c_r,f_r,hz,m_r,g_r,h_r,YT,d1e,p_r,__r,pz,u_r,b_r,v_r,KT,c1e,F_r,T_r,_z,M_r,E_r,C_r,ZT,f1e,w_r,A_r,uz,y_r,L_r,x_r,e9,m1e,k_r,S_r,bz,R_r,B_r,P_r,o9,g1e,$_r,I_r,vz,q_r,N_r,j_r,r9,h1e,D_r,G_r,Fz,O_r,V_r,X_r,t9,p1e,z_r,Q_r,Tz,W_r,H_r,U_r,a9,_1e,J_r,Y_r,Mz,K_r,Z_r,eur,n9,u1e,our,rur,Ez,tur,aur,nur,s9,b1e,sur,lur,Cz,iur,dur,cur,l9,v1e,fur,mur,wz,gur,hur,pur,i9,F1e,_ur,uur,Az,bur,vur,Fur,d9,T1e,Tur,Mur,yz,Eur,Cur,wur,c9,M1e,Aur,yur,Lz,Lur,xur,kur,f9,E1e,Sur,Rur,xz,Bur,Pur,$ur,m9,C1e,Iur,qur,kz,Nur,jur,Dur,g9,w1e,Gur,Our,Sz,Vur,Xur,zur,h9,A1e,Qur,Wur,Rz,Hur,Uur,Jur,p9,y1e,Yur,Kur,Bz,Zur,e6r,o6r,L1e,r6r,t6r,iy,vPe,qc,_9,x1e,dy,a6r,k1e,n6r,FPe,Ar,cy,s6r,Nc,l6r,Pz,i6r,d6r,$z,c6r,f6r,m6r,fy,g6r,S1e,h6r,p6r,_6r,Ft,my,u6r,R1e,b6r,v6r,jc,F6r,B1e,T6r,M6r,Iz,E6r,C6r,w6r,P1e,A6r,y6r,gy,L6r,To,hy,x6r,$1e,k6r,S6r,Cn,R6r,I1e,B6r,P6r,q1e,$6r,I6r,N1e,q6r,N6r,j6r,se,u9,j1e,D6r,G6r,qz,O6r,V6r,X6r,b9,D1e,z6r,Q6r,Nz,W6r,H6r,U6r,v9,G1e,J6r,Y6r,jz,K6r,Z6r,e1r,F9,O1e,o1r,r1r,Dz,t1r,a1r,n1r,T9,V1e,s1r,l1r,Gz,i1r,d1r,c1r,M9,X1e,f1r,m1r,Oz,g1r,h1r,p1r,E9,z1e,_1r,u1r,Vz,b1r,v1r,F1r,C9,Q1e,T1r,M1r,Xz,E1r,C1r,w1r,w9,W1e,A1r,y1r,zz,L1r,x1r,k1r,A9,H1e,S1r,R1r,Qz,B1r,P1r,$1r,y9,U1e,I1r,q1r,Wz,N1r,j1r,D1r,L9,J1e,G1r,O1r,Hz,V1r,X1r,z1r,x9,Y1e,Q1r,W1r,Uz,H1r,U1r,J1r,k9,K1e,Y1r,K1r,Jz,Z1r,ebr,obr,S9,Z1e,rbr,tbr,Yz,abr,nbr,sbr,R9,ebe,lbr,ibr,Kz,dbr,cbr,fbr,B9,obe,mbr,gbr,Zz,hbr,pbr,_br,rbe,ubr,bbr,py,TPe,Dc,P9,tbe,_y,vbr,abe,Fbr,MPe,yr,uy,Tbr,Gc,Mbr,eQ,Ebr,Cbr,oQ,wbr,Abr,ybr,by,Lbr,nbe,xbr,kbr,Sbr,Tt,vy,Rbr,sbe,Bbr,Pbr,Oc,$br,lbe,Ibr,qbr,rQ,Nbr,jbr,Dbr,ibe,Gbr,Obr,Fy,Vbr,Mo,Ty,Xbr,dbe,zbr,Qbr,wn,Wbr,cbe,Hbr,Ubr,fbe,Jbr,Ybr,mbe,Kbr,Zbr,e2r,gbe,$9,hbe,o2r,r2r,tQ,t2r,a2r,n2r,pbe,s2r,l2r,My,EPe,Vc,I9,_be,Ey,i2r,ube,d2r,CPe,Lr,Cy,c2r,Xc,f2r,aQ,m2r,g2r,nQ,h2r,p2r,_2r,wy,u2r,bbe,b2r,v2r,F2r,Mt,Ay,T2r,vbe,M2r,E2r,zc,C2r,Fbe,w2r,A2r,sQ,y2r,L2r,x2r,Tbe,k2r,S2r,yy,R2r,Eo,Ly,B2r,Mbe,P2r,$2r,An,I2r,Ebe,q2r,N2r,Cbe,j2r,D2r,wbe,G2r,O2r,V2r,Y,q9,Abe,X2r,z2r,lQ,Q2r,W2r,H2r,N9,ybe,U2r,J2r,iQ,Y2r,K2r,Z2r,j9,Lbe,e5r,o5r,dQ,r5r,t5r,a5r,D9,xbe,n5r,s5r,cQ,l5r,i5r,d5r,G9,kbe,c5r,f5r,fQ,m5r,g5r,h5r,O9,Sbe,p5r,_5r,mQ,u5r,b5r,v5r,V9,Rbe,F5r,T5r,gQ,M5r,E5r,C5r,X9,Bbe,w5r,A5r,hQ,y5r,L5r,x5r,z9,Pbe,k5r,S5r,pQ,R5r,B5r,P5r,Q9,$be,$5r,I5r,_Q,q5r,N5r,j5r,W9,Ibe,D5r,G5r,uQ,O5r,V5r,X5r,H9,qbe,z5r,Q5r,bQ,W5r,H5r,U5r,U9,Nbe,J5r,Y5r,vQ,K5r,Z5r,evr,J9,jbe,ovr,rvr,FQ,tvr,avr,nvr,Y9,Dbe,svr,lvr,TQ,ivr,dvr,cvr,K9,Gbe,fvr,mvr,MQ,gvr,hvr,pvr,Z9,Obe,_vr,uvr,EQ,bvr,vvr,Fvr,eM,Vbe,Tvr,Mvr,CQ,Evr,Cvr,wvr,oM,Xbe,Avr,yvr,wQ,Lvr,xvr,kvr,rM,zbe,Svr,Rvr,AQ,Bvr,Pvr,$vr,Qbe,Ivr,qvr,xy,wPe,Qc,tM,Wbe,ky,Nvr,Hbe,jvr,APe,xr,Sy,Dvr,Wc,Gvr,yQ,Ovr,Vvr,LQ,Xvr,zvr,Qvr,Ry,Wvr,Ube,Hvr,Uvr,Jvr,Et,By,Yvr,Jbe,Kvr,Zvr,Hc,eFr,Ybe,oFr,rFr,xQ,tFr,aFr,nFr,Kbe,sFr,lFr,Py,iFr,Co,$y,dFr,Zbe,cFr,fFr,yn,mFr,e2e,gFr,hFr,o2e,pFr,_Fr,r2e,uFr,bFr,vFr,K,aM,t2e,FFr,TFr,kQ,MFr,EFr,CFr,nM,a2e,wFr,AFr,SQ,yFr,LFr,xFr,sM,n2e,kFr,SFr,RQ,RFr,BFr,PFr,lM,s2e,$Fr,IFr,BQ,qFr,NFr,jFr,iM,l2e,DFr,GFr,PQ,OFr,VFr,XFr,dM,i2e,zFr,QFr,$Q,WFr,HFr,UFr,cM,d2e,JFr,YFr,IQ,KFr,ZFr,eTr,fM,c2e,oTr,rTr,qQ,tTr,aTr,nTr,mM,f2e,sTr,lTr,NQ,iTr,dTr,cTr,gM,m2e,fTr,mTr,jQ,gTr,hTr,pTr,hM,g2e,_Tr,uTr,DQ,bTr,vTr,FTr,pM,h2e,TTr,MTr,GQ,ETr,CTr,wTr,_M,p2e,ATr,yTr,OQ,LTr,xTr,kTr,uM,_2e,STr,RTr,VQ,BTr,PTr,$Tr,bM,u2e,ITr,qTr,XQ,NTr,jTr,DTr,vM,b2e,GTr,OTr,zQ,VTr,XTr,zTr,FM,v2e,QTr,WTr,QQ,HTr,UTr,JTr,TM,F2e,YTr,KTr,WQ,ZTr,e9r,o9r,MM,T2e,r9r,t9r,HQ,a9r,n9r,s9r,EM,M2e,l9r,i9r,UQ,d9r,c9r,f9r,E2e,m9r,g9r,Iy,yPe,Uc,CM,C2e,qy,h9r,w2e,p9r,LPe,kr,Ny,_9r,Jc,u9r,JQ,b9r,v9r,YQ,F9r,T9r,M9r,jy,E9r,A2e,C9r,w9r,A9r,Ct,Dy,y9r,y2e,L9r,x9r,Yc,k9r,L2e,S9r,R9r,KQ,B9r,P9r,$9r,x2e,I9r,q9r,Gy,N9r,wo,Oy,j9r,k2e,D9r,G9r,Ln,O9r,S2e,V9r,X9r,R2e,z9r,Q9r,B2e,W9r,H9r,U9r,P2e,wM,$2e,J9r,Y9r,ZQ,K9r,Z9r,eMr,I2e,oMr,rMr,Vy,xPe,Kc,AM,q2e,Xy,tMr,N2e,aMr,kPe,Sr,zy,nMr,Zc,sMr,eW,lMr,iMr,oW,dMr,cMr,fMr,Qy,mMr,j2e,gMr,hMr,pMr,wt,Wy,_Mr,D2e,uMr,bMr,ef,vMr,G2e,FMr,TMr,rW,MMr,EMr,CMr,O2e,wMr,AMr,Hy,yMr,Ao,Uy,LMr,V2e,xMr,kMr,xn,SMr,X2e,RMr,BMr,z2e,PMr,$Mr,Q2e,IMr,qMr,NMr,W2e,yM,H2e,jMr,DMr,tW,GMr,OMr,VMr,U2e,XMr,zMr,Jy,SPe,of,LM,J2e,Yy,QMr,Y2e,WMr,RPe,Rr,Ky,HMr,rf,UMr,aW,JMr,YMr,nW,KMr,ZMr,e4r,Zy,o4r,K2e,r4r,t4r,a4r,At,e8,n4r,Z2e,s4r,l4r,tf,i4r,e5e,d4r,c4r,sW,f4r,m4r,g4r,o5e,h4r,p4r,o8,_4r,yo,r8,u4r,r5e,b4r,v4r,kn,F4r,t5e,T4r,M4r,a5e,E4r,C4r,n5e,w4r,A4r,y4r,z,xM,s5e,L4r,x4r,lW,k4r,S4r,R4r,kM,l5e,B4r,P4r,iW,$4r,I4r,q4r,SM,i5e,N4r,j4r,dW,D4r,G4r,O4r,RM,d5e,V4r,X4r,cW,z4r,Q4r,W4r,BM,c5e,H4r,U4r,fW,J4r,Y4r,K4r,PM,f5e,Z4r,eEr,mW,oEr,rEr,tEr,$M,m5e,aEr,nEr,gW,sEr,lEr,iEr,IM,g5e,dEr,cEr,hW,fEr,mEr,gEr,qM,h5e,hEr,pEr,pW,_Er,uEr,bEr,NM,p5e,vEr,FEr,_W,TEr,MEr,EEr,jM,_5e,CEr,wEr,uW,AEr,yEr,LEr,DM,u5e,xEr,kEr,bW,SEr,REr,BEr,GM,b5e,PEr,$Er,vW,IEr,qEr,NEr,OM,v5e,jEr,DEr,FW,GEr,OEr,VEr,VM,F5e,XEr,zEr,TW,QEr,WEr,HEr,XM,T5e,UEr,JEr,MW,YEr,KEr,ZEr,zM,M5e,e3r,o3r,EW,r3r,t3r,a3r,QM,E5e,n3r,s3r,CW,l3r,i3r,d3r,WM,C5e,c3r,f3r,wW,m3r,g3r,h3r,HM,w5e,p3r,_3r,AW,u3r,b3r,v3r,UM,A5e,F3r,T3r,yW,M3r,E3r,C3r,JM,y5e,w3r,A3r,LW,y3r,L3r,x3r,YM,L5e,k3r,S3r,xW,R3r,B3r,P3r,KM,x5e,$3r,I3r,kW,q3r,N3r,j3r,ZM,k5e,D3r,G3r,SW,O3r,V3r,X3r,S5e,z3r,Q3r,t8,BPe,af,e4,R5e,a8,W3r,B5e,H3r,PPe,Br,n8,U3r,nf,J3r,RW,Y3r,K3r,BW,Z3r,eCr,oCr,s8,rCr,P5e,tCr,aCr,nCr,yt,l8,sCr,$5e,lCr,iCr,sf,dCr,I5e,cCr,fCr,PW,mCr,gCr,hCr,q5e,pCr,_Cr,i8,uCr,Lo,d8,bCr,N5e,vCr,FCr,Sn,TCr,j5e,MCr,ECr,D5e,CCr,wCr,G5e,ACr,yCr,LCr,ca,o4,O5e,xCr,kCr,$W,SCr,RCr,BCr,r4,V5e,PCr,$Cr,IW,ICr,qCr,NCr,t4,X5e,jCr,DCr,qW,GCr,OCr,VCr,a4,z5e,XCr,zCr,NW,QCr,WCr,HCr,n4,Q5e,UCr,JCr,jW,YCr,KCr,ZCr,W5e,ewr,owr,c8,$Pe,lf,s4,H5e,f8,rwr,U5e,twr,IPe,Pr,m8,awr,df,nwr,DW,swr,lwr,GW,iwr,dwr,cwr,g8,fwr,J5e,mwr,gwr,hwr,Lt,h8,pwr,Y5e,_wr,uwr,cf,bwr,K5e,vwr,Fwr,OW,Twr,Mwr,Ewr,Z5e,Cwr,wwr,p8,Awr,xo,_8,ywr,eve,Lwr,xwr,Rn,kwr,ove,Swr,Rwr,rve,Bwr,Pwr,tve,$wr,Iwr,qwr,me,l4,ave,Nwr,jwr,VW,Dwr,Gwr,Owr,i4,nve,Vwr,Xwr,XW,zwr,Qwr,Wwr,d4,sve,Hwr,Uwr,zW,Jwr,Ywr,Kwr,c4,lve,Zwr,eAr,QW,oAr,rAr,tAr,f4,ive,aAr,nAr,WW,sAr,lAr,iAr,m4,dve,dAr,cAr,HW,fAr,mAr,gAr,g4,cve,hAr,pAr,UW,_Ar,uAr,bAr,h4,fve,vAr,FAr,JW,TAr,MAr,EAr,p4,mve,CAr,wAr,YW,AAr,yAr,LAr,_4,gve,xAr,kAr,KW,SAr,RAr,BAr,u4,hve,PAr,$Ar,ZW,IAr,qAr,NAr,b4,pve,jAr,DAr,eH,GAr,OAr,VAr,_ve,XAr,zAr,u8,qPe,ff,v4,uve,b8,QAr,bve,WAr,NPe,$r,v8,HAr,mf,UAr,oH,JAr,YAr,rH,KAr,ZAr,e0r,F8,o0r,vve,r0r,t0r,a0r,xt,T8,n0r,Fve,s0r,l0r,gf,i0r,Tve,d0r,c0r,tH,f0r,m0r,g0r,Mve,h0r,p0r,M8,_0r,ko,E8,u0r,Eve,b0r,v0r,Bn,F0r,Cve,T0r,M0r,wve,E0r,C0r,Ave,w0r,A0r,y0r,ve,F4,yve,L0r,x0r,aH,k0r,S0r,R0r,T4,Lve,B0r,P0r,nH,$0r,I0r,q0r,M4,xve,N0r,j0r,sH,D0r,G0r,O0r,E4,kve,V0r,X0r,lH,z0r,Q0r,W0r,C4,Sve,H0r,U0r,iH,J0r,Y0r,K0r,w4,Rve,Z0r,eyr,dH,oyr,ryr,tyr,A4,Bve,ayr,nyr,cH,syr,lyr,iyr,y4,Pve,dyr,cyr,fH,fyr,myr,gyr,L4,$ve,hyr,pyr,mH,_yr,uyr,byr,x4,Ive,vyr,Fyr,gH,Tyr,Myr,Eyr,qve,Cyr,wyr,C8,jPe,hf,k4,Nve,w8,Ayr,jve,yyr,DPe,Ir,A8,Lyr,pf,xyr,hH,kyr,Syr,pH,Ryr,Byr,Pyr,y8,$yr,Dve,Iyr,qyr,Nyr,kt,L8,jyr,Gve,Dyr,Gyr,_f,Oyr,Ove,Vyr,Xyr,_H,zyr,Qyr,Wyr,Vve,Hyr,Uyr,x8,Jyr,So,k8,Yyr,Xve,Kyr,Zyr,Pn,e8r,zve,o8r,r8r,Qve,t8r,a8r,Wve,n8r,s8r,l8r,Ee,S4,Hve,i8r,d8r,uH,c8r,f8r,m8r,R4,Uve,g8r,h8r,bH,p8r,_8r,u8r,B4,Jve,b8r,v8r,vH,F8r,T8r,M8r,P4,Yve,E8r,C8r,FH,w8r,A8r,y8r,$4,Kve,L8r,x8r,TH,k8r,S8r,R8r,I4,Zve,B8r,P8r,MH,$8r,I8r,q8r,q4,eFe,N8r,j8r,EH,D8r,G8r,O8r,N4,oFe,V8r,X8r,CH,z8r,Q8r,W8r,j4,rFe,H8r,U8r,wH,J8r,Y8r,K8r,tFe,Z8r,eLr,S8,GPe,uf,D4,aFe,R8,oLr,nFe,rLr,OPe,qr,B8,tLr,bf,aLr,AH,nLr,sLr,yH,lLr,iLr,dLr,P8,cLr,sFe,fLr,mLr,gLr,St,$8,hLr,lFe,pLr,_Lr,vf,uLr,iFe,bLr,vLr,LH,FLr,TLr,MLr,dFe,ELr,CLr,I8,wLr,Ro,q8,ALr,cFe,yLr,LLr,$n,xLr,fFe,kLr,SLr,mFe,RLr,BLr,gFe,PLr,$Lr,ILr,Fe,G4,hFe,qLr,NLr,xH,jLr,DLr,GLr,O4,pFe,OLr,VLr,kH,XLr,zLr,QLr,V4,_Fe,WLr,HLr,SH,ULr,JLr,YLr,X4,uFe,KLr,ZLr,RH,e7r,o7r,r7r,z4,bFe,t7r,a7r,BH,n7r,s7r,l7r,Q4,vFe,i7r,d7r,PH,c7r,f7r,m7r,W4,FFe,g7r,h7r,$H,p7r,_7r,u7r,H4,TFe,b7r,v7r,IH,F7r,T7r,M7r,U4,MFe,E7r,C7r,qH,w7r,A7r,y7r,J4,EFe,L7r,x7r,NH,k7r,S7r,R7r,CFe,B7r,P7r,N8,VPe,Ff,Y4,wFe,j8,$7r,AFe,I7r,XPe,Nr,D8,q7r,Tf,N7r,jH,j7r,D7r,DH,G7r,O7r,V7r,G8,X7r,yFe,z7r,Q7r,W7r,Rt,O8,H7r,LFe,U7r,J7r,Mf,Y7r,xFe,K7r,Z7r,GH,exr,oxr,rxr,kFe,txr,axr,V8,nxr,Bo,X8,sxr,SFe,lxr,ixr,In,dxr,RFe,cxr,fxr,BFe,mxr,gxr,PFe,hxr,pxr,_xr,Te,K4,$Fe,uxr,bxr,OH,vxr,Fxr,Txr,Z4,IFe,Mxr,Exr,VH,Cxr,wxr,Axr,eE,qFe,yxr,Lxr,XH,xxr,kxr,Sxr,oE,NFe,Rxr,Bxr,zH,Pxr,$xr,Ixr,rE,jFe,qxr,Nxr,QH,jxr,Dxr,Gxr,tE,DFe,Oxr,Vxr,WH,Xxr,zxr,Qxr,aE,GFe,Wxr,Hxr,HH,Uxr,Jxr,Yxr,nE,OFe,Kxr,Zxr,UH,ekr,okr,rkr,sE,VFe,tkr,akr,JH,nkr,skr,lkr,lE,XFe,ikr,dkr,YH,ckr,fkr,mkr,zFe,gkr,hkr,z8,zPe,Ef,iE,QFe,Q8,pkr,WFe,_kr,QPe,jr,W8,ukr,Cf,bkr,KH,vkr,Fkr,ZH,Tkr,Mkr,Ekr,H8,Ckr,HFe,wkr,Akr,ykr,Bt,U8,Lkr,UFe,xkr,kkr,wf,Skr,JFe,Rkr,Bkr,eU,Pkr,$kr,Ikr,YFe,qkr,Nkr,J8,jkr,Po,Y8,Dkr,KFe,Gkr,Okr,qn,Vkr,ZFe,Xkr,zkr,eTe,Qkr,Wkr,oTe,Hkr,Ukr,Jkr,Be,dE,rTe,Ykr,Kkr,oU,Zkr,eSr,oSr,cE,tTe,rSr,tSr,rU,aSr,nSr,sSr,fE,aTe,lSr,iSr,tU,dSr,cSr,fSr,mE,nTe,mSr,gSr,aU,hSr,pSr,_Sr,gE,sTe,uSr,bSr,nU,vSr,FSr,TSr,hE,lTe,MSr,ESr,sU,CSr,wSr,ASr,pE,iTe,ySr,LSr,lU,xSr,kSr,SSr,_E,dTe,RSr,BSr,iU,PSr,$Sr,ISr,cTe,qSr,NSr,K8,WPe,Af,uE,fTe,Z8,jSr,mTe,DSr,HPe,Dr,eL,GSr,yf,OSr,dU,VSr,XSr,cU,zSr,QSr,WSr,oL,HSr,gTe,USr,JSr,YSr,Pt,rL,KSr,hTe,ZSr,eRr,Lf,oRr,pTe,rRr,tRr,fU,aRr,nRr,sRr,_Te,lRr,iRr,tL,dRr,$o,aL,cRr,uTe,fRr,mRr,Nn,gRr,bTe,hRr,pRr,vTe,_Rr,uRr,FTe,bRr,vRr,FRr,Pe,bE,TTe,TRr,MRr,mU,ERr,CRr,wRr,vE,MTe,ARr,yRr,gU,LRr,xRr,kRr,FE,ETe,SRr,RRr,hU,BRr,PRr,$Rr,TE,CTe,IRr,qRr,pU,NRr,jRr,DRr,ME,wTe,GRr,ORr,_U,VRr,XRr,zRr,EE,ATe,QRr,WRr,uU,HRr,URr,JRr,CE,yTe,YRr,KRr,bU,ZRr,eBr,oBr,wE,LTe,rBr,tBr,vU,aBr,nBr,sBr,xTe,lBr,iBr,nL,UPe,xf,AE,kTe,sL,dBr,STe,cBr,JPe,Gr,lL,fBr,kf,mBr,FU,gBr,hBr,TU,pBr,_Br,uBr,iL,bBr,RTe,vBr,FBr,TBr,$t,dL,MBr,BTe,EBr,CBr,Sf,wBr,PTe,ABr,yBr,MU,LBr,xBr,kBr,$Te,SBr,RBr,cL,BBr,Io,fL,PBr,ITe,$Br,IBr,jn,qBr,qTe,NBr,jBr,NTe,DBr,GBr,jTe,OBr,VBr,XBr,DTe,yE,GTe,zBr,QBr,EU,WBr,HBr,UBr,OTe,JBr,YBr,mL,YPe,Rf,LE,VTe,gL,KBr,XTe,ZBr,KPe,Or,hL,ePr,Bf,oPr,CU,rPr,tPr,wU,aPr,nPr,sPr,pL,lPr,zTe,iPr,dPr,cPr,It,_L,fPr,QTe,mPr,gPr,Pf,hPr,WTe,pPr,_Pr,AU,uPr,bPr,vPr,HTe,FPr,TPr,uL,MPr,qo,bL,EPr,UTe,CPr,wPr,Dn,APr,JTe,yPr,LPr,YTe,xPr,kPr,KTe,SPr,RPr,BPr,vL,xE,ZTe,PPr,$Pr,yU,IPr,qPr,NPr,kE,e9e,jPr,DPr,LU,GPr,OPr,VPr,o9e,XPr,zPr,FL,ZPe,$f,SE,r9e,TL,QPr,t9e,WPr,e$e,Vr,ML,HPr,If,UPr,xU,JPr,YPr,kU,KPr,ZPr,e$r,EL,o$r,a9e,r$r,t$r,a$r,qt,CL,n$r,n9e,s$r,l$r,qf,i$r,s9e,d$r,c$r,SU,f$r,m$r,g$r,l9e,h$r,p$r,wL,_$r,No,AL,u$r,i9e,b$r,v$r,Gn,F$r,d9e,T$r,M$r,c9e,E$r,C$r,f9e,w$r,A$r,y$r,m9e,RE,g9e,L$r,x$r,RU,k$r,S$r,R$r,h9e,B$r,P$r,yL,o$e;return he=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),q3=new X({}),N3=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),zf=new $$r({props:{warning:!0,$$slots:{default:[Nwt]},$$scope:{ctx:jf}}}),j3=new X({}),D3=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/configuration_auto.py#L563"}}),V3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/configuration_auto.py#L586"}}),X3=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),z3=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/configuration_auto.py#L708"}}),Q3=new X({}),W3=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/tokenization_auto.py#L360"}}),J3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16659/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/tokenization_auto.py#L374"}}),Y3=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),K3=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/tokenization_auto.py#L570"}}),Z3=new X({}),eC=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),tC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16659/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),Dh=new $$r({props:{$$slots:{default:[jwt]},$$scope:{ctx:jf}}}),aC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),nC=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),sC=new X({}),lC=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/processing_auto.py#L70"}}),cC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/processing_auto.py#L84"}}),Yh=new $$r({props:{$$slots:{default:[Dwt]},$$scope:{ctx:jf}}}),fC=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),mC=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/processing_auto.py#L237"}}),gC=new X({}),hC=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L716"}}),_C=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPTNeoX model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),bC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FC=new X({}),TC=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L723"}}),EC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),wC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yC=new X({}),LC=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L738"}}),kC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPTNeoX model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),SC=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),RC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),BC=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PC=new X({}),$C=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L745"}}),qC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),NC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),jC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GC=new X({}),OC=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L752"}}),XC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),QC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HC=new X({}),UC=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L761"}}),YC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),ZC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ow=new X({}),rw=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L795"}}),aw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),sw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iw=new X({}),dw=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L802"}}),fw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),gw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pw=new X({}),_w=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L788"}}),bw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Fw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Mw=new X({}),Ew=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L770"}}),ww=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),yw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xw=new X({}),kw=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L777"}}),Rw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Pw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),$w=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iw=new X({}),qw=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L811"}}),jw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Gw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vw=new X({}),Xw=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L850"}}),Qw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Hw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jw=new X({}),Yw=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L857"}}),Zw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),eA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),oA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),rA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new X({}),aA=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L880"}}),sA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),lA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),iA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),dA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new X({}),fA=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L864"}}),gA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),hA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),pA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),_A=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new X({}),bA=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L871"}}),FA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),TA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),MA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),CA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wA=new X({}),AA=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L889"}}),LA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),xA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),kA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),SA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RA=new X({}),BA=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L896"}}),$A=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),IA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),qA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),NA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new X({}),DA=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L843"}}),OA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),VA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),XA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),zA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new X({}),WA=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L818"}}),UA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),JA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),YA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),KA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZA=new X({}),e0=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L825"}}),r0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),a0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s0=new X({}),l0=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_auto.py#L834"}}),d0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),f0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),m0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g0=new X({}),h0=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),_0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),u0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),b0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F0=new X({}),T0=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),E0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),w0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y0=new X({}),L0=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),k0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),R0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P0=new X({}),$0=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),q0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),j0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O0=new X({}),V0=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),z0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),W0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U0=new X({}),J0=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),K0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),ey=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),oy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new X({}),ty=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),ny=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),ly=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new X({}),cy=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),my=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),hy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_y=new X({}),uy=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),vy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),Ty=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),My=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ey=new X({}),Cy=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),Ay=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),yy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Ly=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),xy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new X({}),Sy=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),By=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),$y=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new X({}),Ny=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),Dy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),Oy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xy=new X({}),zy=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Wy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),Uy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Jy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yy=new X({}),Ky=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),e8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),o8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),r8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),t8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a8=new X({}),n8=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),l8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),i8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),d8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),c8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f8=new X({}),m8=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),h8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),p8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),_8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),u8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b8=new X({}),v8=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),T8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),M8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),E8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),C8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w8=new X({}),A8=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),L8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),x8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),k8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),S8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R8=new X({}),B8=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),$8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),I8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),q8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),N8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j8=new X({}),D8=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),O8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),V8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),X8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),z8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q8=new X({}),W8=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),U8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),J8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),Y8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),K8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z8=new X({}),eL=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),rL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),tL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),aL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),nL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new X({}),lL=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),dL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),cL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),fL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),mL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gL=new X({}),hL=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),_L=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),uL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),bL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),FL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TL=new X({}),ML=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),CL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),wL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),AL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),yL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),ce=a("h1"),Ce=a("a"),lo=a("span"),f(he.$$.fragment),Me=l(),Xo=a("span"),Di=o("Auto Classes"),Df=l(),fa=a("p"),Gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Oi=a("code"),B3=o("from_pretrained()"),Gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Vi=o("Instantiating one of "),On=a("a"),P3=o("AutoConfig"),Vn=o(", "),Xn=a("a"),$3=o("AutoModel"),Xi=o(`, and
`),zn=a("a"),I3=o("AutoTokenizer"),zi=o(" will directly create a class of the relevant architecture. For instance"),Of=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),L7=o("will create a model that is an instance of "),Qi=a("a"),x7=o("BertModel"),k7=o("."),zo=l(),Ga=a("p"),S7=o("There is one class of "),Vf=a("code"),R7=o("AutoModel"),gqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),eBe=l(),Wi=a("h2"),Xf=a("a"),wY=a("span"),f(q3.$$.fragment),hqe=l(),AY=a("span"),pqe=o("Extending the Auto Classes"),oBe=l(),Qn=a("p"),_qe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),yY=a("code"),uqe=o("NewModel"),bqe=o(", make sure you have a "),LY=a("code"),vqe=o("NewModelConfig"),Fqe=o(` then you can add those to the auto
classes like this:`),rBe=l(),f(N3.$$.fragment),tBe=l(),B7=a("p"),Tqe=o("You will then be able to use the auto classes like you would usually do!"),aBe=l(),f(zf.$$.fragment),nBe=l(),Hi=a("h2"),Qf=a("a"),xY=a("span"),f(j3.$$.fragment),Mqe=l(),kY=a("span"),Eqe=o("AutoConfig"),sBe=l(),Qo=a("div"),f(D3.$$.fragment),Cqe=l(),G3=a("p"),wqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),P7=a("a"),Aqe=o("from_pretrained()"),yqe=o(" class method."),Lqe=l(),O3=a("p"),xqe=o("This class cannot be instantiated directly using "),SY=a("code"),kqe=o("__init__()"),Sqe=o(" (throws an error)."),Rqe=l(),mo=a("div"),f(V3.$$.fragment),Bqe=l(),RY=a("p"),Pqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),$qe=l(),Ui=a("p"),Iqe=o("The configuration class to instantiate is selected based on the "),BY=a("code"),qqe=o("model_type"),Nqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),PY=a("code"),jqe=o("pretrained_model_name_or_path"),Dqe=o(":"),Gqe=l(),v=a("ul"),Wf=a("li"),$Y=a("strong"),Oqe=o("albert"),Vqe=o(" \u2014 "),$7=a("a"),Xqe=o("AlbertConfig"),zqe=o(" (ALBERT model)"),Qqe=l(),Hf=a("li"),IY=a("strong"),Wqe=o("bart"),Hqe=o(" \u2014 "),I7=a("a"),Uqe=o("BartConfig"),Jqe=o(" (BART model)"),Yqe=l(),Uf=a("li"),qY=a("strong"),Kqe=o("beit"),Zqe=o(" \u2014 "),q7=a("a"),eNe=o("BeitConfig"),oNe=o(" (BEiT model)"),rNe=l(),Jf=a("li"),NY=a("strong"),tNe=o("bert"),aNe=o(" \u2014 "),N7=a("a"),nNe=o("BertConfig"),sNe=o(" (BERT model)"),lNe=l(),Yf=a("li"),jY=a("strong"),iNe=o("bert-generation"),dNe=o(" \u2014 "),j7=a("a"),cNe=o("BertGenerationConfig"),fNe=o(" (Bert Generation model)"),mNe=l(),Kf=a("li"),DY=a("strong"),gNe=o("big_bird"),hNe=o(" \u2014 "),D7=a("a"),pNe=o("BigBirdConfig"),_Ne=o(" (BigBird model)"),uNe=l(),Zf=a("li"),GY=a("strong"),bNe=o("bigbird_pegasus"),vNe=o(" \u2014 "),G7=a("a"),FNe=o("BigBirdPegasusConfig"),TNe=o(" (BigBirdPegasus model)"),MNe=l(),em=a("li"),OY=a("strong"),ENe=o("blenderbot"),CNe=o(" \u2014 "),O7=a("a"),wNe=o("BlenderbotConfig"),ANe=o(" (Blenderbot model)"),yNe=l(),om=a("li"),VY=a("strong"),LNe=o("blenderbot-small"),xNe=o(" \u2014 "),V7=a("a"),kNe=o("BlenderbotSmallConfig"),SNe=o(" (BlenderbotSmall model)"),RNe=l(),rm=a("li"),XY=a("strong"),BNe=o("camembert"),PNe=o(" \u2014 "),X7=a("a"),$Ne=o("CamembertConfig"),INe=o(" (CamemBERT model)"),qNe=l(),tm=a("li"),zY=a("strong"),NNe=o("canine"),jNe=o(" \u2014 "),z7=a("a"),DNe=o("CanineConfig"),GNe=o(" (Canine model)"),ONe=l(),am=a("li"),QY=a("strong"),VNe=o("clip"),XNe=o(" \u2014 "),Q7=a("a"),zNe=o("CLIPConfig"),QNe=o(" (CLIP model)"),WNe=l(),nm=a("li"),WY=a("strong"),HNe=o("convbert"),UNe=o(" \u2014 "),W7=a("a"),JNe=o("ConvBertConfig"),YNe=o(" (ConvBERT model)"),KNe=l(),sm=a("li"),HY=a("strong"),ZNe=o("convnext"),eje=o(" \u2014 "),H7=a("a"),oje=o("ConvNextConfig"),rje=o(" (ConvNext model)"),tje=l(),lm=a("li"),UY=a("strong"),aje=o("ctrl"),nje=o(" \u2014 "),U7=a("a"),sje=o("CTRLConfig"),lje=o(" (CTRL model)"),ije=l(),im=a("li"),JY=a("strong"),dje=o("data2vec-audio"),cje=o(" \u2014 "),J7=a("a"),fje=o("Data2VecAudioConfig"),mje=o(" (Data2VecAudio model)"),gje=l(),dm=a("li"),YY=a("strong"),hje=o("data2vec-text"),pje=o(" \u2014 "),Y7=a("a"),_je=o("Data2VecTextConfig"),uje=o(" (Data2VecText model)"),bje=l(),cm=a("li"),KY=a("strong"),vje=o("data2vec-vision"),Fje=o(" \u2014 "),K7=a("a"),Tje=o("Data2VecVisionConfig"),Mje=o(" (Data2VecVision model)"),Eje=l(),fm=a("li"),ZY=a("strong"),Cje=o("deberta"),wje=o(" \u2014 "),Z7=a("a"),Aje=o("DebertaConfig"),yje=o(" (DeBERTa model)"),Lje=l(),mm=a("li"),eK=a("strong"),xje=o("deberta-v2"),kje=o(" \u2014 "),ex=a("a"),Sje=o("DebertaV2Config"),Rje=o(" (DeBERTa-v2 model)"),Bje=l(),gm=a("li"),oK=a("strong"),Pje=o("decision_transformer"),$je=o(" \u2014 "),ox=a("a"),Ije=o("DecisionTransformerConfig"),qje=o(" (Decision Transformer model)"),Nje=l(),hm=a("li"),rK=a("strong"),jje=o("deit"),Dje=o(" \u2014 "),rx=a("a"),Gje=o("DeiTConfig"),Oje=o(" (DeiT model)"),Vje=l(),pm=a("li"),tK=a("strong"),Xje=o("detr"),zje=o(" \u2014 "),tx=a("a"),Qje=o("DetrConfig"),Wje=o(" (DETR model)"),Hje=l(),_m=a("li"),aK=a("strong"),Uje=o("distilbert"),Jje=o(" \u2014 "),ax=a("a"),Yje=o("DistilBertConfig"),Kje=o(" (DistilBERT model)"),Zje=l(),um=a("li"),nK=a("strong"),eDe=o("dpr"),oDe=o(" \u2014 "),nx=a("a"),rDe=o("DPRConfig"),tDe=o(" (DPR model)"),aDe=l(),bm=a("li"),sK=a("strong"),nDe=o("dpt"),sDe=o(" \u2014 "),sx=a("a"),lDe=o("DPTConfig"),iDe=o(" (DPT model)"),dDe=l(),vm=a("li"),lK=a("strong"),cDe=o("electra"),fDe=o(" \u2014 "),lx=a("a"),mDe=o("ElectraConfig"),gDe=o(" (ELECTRA model)"),hDe=l(),Fm=a("li"),iK=a("strong"),pDe=o("encoder-decoder"),_De=o(" \u2014 "),ix=a("a"),uDe=o("EncoderDecoderConfig"),bDe=o(" (Encoder decoder model)"),vDe=l(),Tm=a("li"),dK=a("strong"),FDe=o("flaubert"),TDe=o(" \u2014 "),dx=a("a"),MDe=o("FlaubertConfig"),EDe=o(" (FlauBERT model)"),CDe=l(),Mm=a("li"),cK=a("strong"),wDe=o("fnet"),ADe=o(" \u2014 "),cx=a("a"),yDe=o("FNetConfig"),LDe=o(" (FNet model)"),xDe=l(),Em=a("li"),fK=a("strong"),kDe=o("fsmt"),SDe=o(" \u2014 "),fx=a("a"),RDe=o("FSMTConfig"),BDe=o(" (FairSeq Machine-Translation model)"),PDe=l(),Cm=a("li"),mK=a("strong"),$De=o("funnel"),IDe=o(" \u2014 "),mx=a("a"),qDe=o("FunnelConfig"),NDe=o(" (Funnel Transformer model)"),jDe=l(),wm=a("li"),gK=a("strong"),DDe=o("glpn"),GDe=o(" \u2014 "),gx=a("a"),ODe=o("GLPNConfig"),VDe=o(" (GLPN model)"),XDe=l(),Am=a("li"),hK=a("strong"),zDe=o("gpt2"),QDe=o(" \u2014 "),hx=a("a"),WDe=o("GPT2Config"),HDe=o(" (OpenAI GPT-2 model)"),UDe=l(),ym=a("li"),pK=a("strong"),JDe=o("gpt_neo"),YDe=o(" \u2014 "),px=a("a"),KDe=o("GPTNeoConfig"),ZDe=o(" (GPT Neo model)"),eGe=l(),Lm=a("li"),_K=a("strong"),oGe=o("gpt_neox"),rGe=o(" \u2014 "),_x=a("a"),tGe=o("GPTNeoXConfig"),aGe=o(" (GPTNeoX model)"),nGe=l(),xm=a("li"),uK=a("strong"),sGe=o("gptj"),lGe=o(" \u2014 "),ux=a("a"),iGe=o("GPTJConfig"),dGe=o(" (GPT-J model)"),cGe=l(),km=a("li"),bK=a("strong"),fGe=o("hubert"),mGe=o(" \u2014 "),bx=a("a"),gGe=o("HubertConfig"),hGe=o(" (Hubert model)"),pGe=l(),Sm=a("li"),vK=a("strong"),_Ge=o("ibert"),uGe=o(" \u2014 "),vx=a("a"),bGe=o("IBertConfig"),vGe=o(" (I-BERT model)"),FGe=l(),Rm=a("li"),FK=a("strong"),TGe=o("imagegpt"),MGe=o(" \u2014 "),Fx=a("a"),EGe=o("ImageGPTConfig"),CGe=o(" (ImageGPT model)"),wGe=l(),Bm=a("li"),TK=a("strong"),AGe=o("layoutlm"),yGe=o(" \u2014 "),Tx=a("a"),LGe=o("LayoutLMConfig"),xGe=o(" (LayoutLM model)"),kGe=l(),Pm=a("li"),MK=a("strong"),SGe=o("layoutlmv2"),RGe=o(" \u2014 "),Mx=a("a"),BGe=o("LayoutLMv2Config"),PGe=o(" (LayoutLMv2 model)"),$Ge=l(),$m=a("li"),EK=a("strong"),IGe=o("led"),qGe=o(" \u2014 "),Ex=a("a"),NGe=o("LEDConfig"),jGe=o(" (LED model)"),DGe=l(),Im=a("li"),CK=a("strong"),GGe=o("longformer"),OGe=o(" \u2014 "),Cx=a("a"),VGe=o("LongformerConfig"),XGe=o(" (Longformer model)"),zGe=l(),qm=a("li"),wK=a("strong"),QGe=o("luke"),WGe=o(" \u2014 "),wx=a("a"),HGe=o("LukeConfig"),UGe=o(" (LUKE model)"),JGe=l(),Nm=a("li"),AK=a("strong"),YGe=o("lxmert"),KGe=o(" \u2014 "),Ax=a("a"),ZGe=o("LxmertConfig"),eOe=o(" (LXMERT model)"),oOe=l(),jm=a("li"),yK=a("strong"),rOe=o("m2m_100"),tOe=o(" \u2014 "),yx=a("a"),aOe=o("M2M100Config"),nOe=o(" (M2M100 model)"),sOe=l(),Dm=a("li"),LK=a("strong"),lOe=o("marian"),iOe=o(" \u2014 "),Lx=a("a"),dOe=o("MarianConfig"),cOe=o(" (Marian model)"),fOe=l(),Gm=a("li"),xK=a("strong"),mOe=o("maskformer"),gOe=o(" \u2014 "),xx=a("a"),hOe=o("MaskFormerConfig"),pOe=o(" (MaskFormer model)"),_Oe=l(),Om=a("li"),kK=a("strong"),uOe=o("mbart"),bOe=o(" \u2014 "),kx=a("a"),vOe=o("MBartConfig"),FOe=o(" (mBART model)"),TOe=l(),Vm=a("li"),SK=a("strong"),MOe=o("megatron-bert"),EOe=o(" \u2014 "),Sx=a("a"),COe=o("MegatronBertConfig"),wOe=o(" (MegatronBert model)"),AOe=l(),Xm=a("li"),RK=a("strong"),yOe=o("mobilebert"),LOe=o(" \u2014 "),Rx=a("a"),xOe=o("MobileBertConfig"),kOe=o(" (MobileBERT model)"),SOe=l(),zm=a("li"),BK=a("strong"),ROe=o("mpnet"),BOe=o(" \u2014 "),Bx=a("a"),POe=o("MPNetConfig"),$Oe=o(" (MPNet model)"),IOe=l(),Qm=a("li"),PK=a("strong"),qOe=o("mt5"),NOe=o(" \u2014 "),Px=a("a"),jOe=o("MT5Config"),DOe=o(" (mT5 model)"),GOe=l(),Wm=a("li"),$K=a("strong"),OOe=o("nystromformer"),VOe=o(" \u2014 "),$x=a("a"),XOe=o("NystromformerConfig"),zOe=o(" (Nystromformer model)"),QOe=l(),Hm=a("li"),IK=a("strong"),WOe=o("openai-gpt"),HOe=o(" \u2014 "),Ix=a("a"),UOe=o("OpenAIGPTConfig"),JOe=o(" (OpenAI GPT model)"),YOe=l(),Um=a("li"),qK=a("strong"),KOe=o("pegasus"),ZOe=o(" \u2014 "),qx=a("a"),eVe=o("PegasusConfig"),oVe=o(" (Pegasus model)"),rVe=l(),Jm=a("li"),NK=a("strong"),tVe=o("perceiver"),aVe=o(" \u2014 "),Nx=a("a"),nVe=o("PerceiverConfig"),sVe=o(" (Perceiver model)"),lVe=l(),Ym=a("li"),jK=a("strong"),iVe=o("plbart"),dVe=o(" \u2014 "),jx=a("a"),cVe=o("PLBartConfig"),fVe=o(" (PLBart model)"),mVe=l(),Km=a("li"),DK=a("strong"),gVe=o("poolformer"),hVe=o(" \u2014 "),Dx=a("a"),pVe=o("PoolFormerConfig"),_Ve=o(" (PoolFormer model)"),uVe=l(),Zm=a("li"),GK=a("strong"),bVe=o("prophetnet"),vVe=o(" \u2014 "),Gx=a("a"),FVe=o("ProphetNetConfig"),TVe=o(" (ProphetNet model)"),MVe=l(),eg=a("li"),OK=a("strong"),EVe=o("qdqbert"),CVe=o(" \u2014 "),Ox=a("a"),wVe=o("QDQBertConfig"),AVe=o(" (QDQBert model)"),yVe=l(),og=a("li"),VK=a("strong"),LVe=o("rag"),xVe=o(" \u2014 "),Vx=a("a"),kVe=o("RagConfig"),SVe=o(" (RAG model)"),RVe=l(),rg=a("li"),XK=a("strong"),BVe=o("realm"),PVe=o(" \u2014 "),Xx=a("a"),$Ve=o("RealmConfig"),IVe=o(" (Realm model)"),qVe=l(),tg=a("li"),zK=a("strong"),NVe=o("reformer"),jVe=o(" \u2014 "),zx=a("a"),DVe=o("ReformerConfig"),GVe=o(" (Reformer model)"),OVe=l(),ag=a("li"),QK=a("strong"),VVe=o("regnet"),XVe=o(" \u2014 "),Qx=a("a"),zVe=o("RegNetConfig"),QVe=o(" (RegNet model)"),WVe=l(),ng=a("li"),WK=a("strong"),HVe=o("rembert"),UVe=o(" \u2014 "),Wx=a("a"),JVe=o("RemBertConfig"),YVe=o(" (RemBERT model)"),KVe=l(),sg=a("li"),HK=a("strong"),ZVe=o("resnet"),eXe=o(" \u2014 "),Hx=a("a"),oXe=o("ResNetConfig"),rXe=o(" (ResNet model)"),tXe=l(),lg=a("li"),UK=a("strong"),aXe=o("retribert"),nXe=o(" \u2014 "),Ux=a("a"),sXe=o("RetriBertConfig"),lXe=o(" (RetriBERT model)"),iXe=l(),ig=a("li"),JK=a("strong"),dXe=o("roberta"),cXe=o(" \u2014 "),Jx=a("a"),fXe=o("RobertaConfig"),mXe=o(" (RoBERTa model)"),gXe=l(),dg=a("li"),YK=a("strong"),hXe=o("roformer"),pXe=o(" \u2014 "),Yx=a("a"),_Xe=o("RoFormerConfig"),uXe=o(" (RoFormer model)"),bXe=l(),cg=a("li"),KK=a("strong"),vXe=o("segformer"),FXe=o(" \u2014 "),Kx=a("a"),TXe=o("SegformerConfig"),MXe=o(" (SegFormer model)"),EXe=l(),fg=a("li"),ZK=a("strong"),CXe=o("sew"),wXe=o(" \u2014 "),Zx=a("a"),AXe=o("SEWConfig"),yXe=o(" (SEW model)"),LXe=l(),mg=a("li"),eZ=a("strong"),xXe=o("sew-d"),kXe=o(" \u2014 "),ek=a("a"),SXe=o("SEWDConfig"),RXe=o(" (SEW-D model)"),BXe=l(),gg=a("li"),oZ=a("strong"),PXe=o("speech-encoder-decoder"),$Xe=o(" \u2014 "),ok=a("a"),IXe=o("SpeechEncoderDecoderConfig"),qXe=o(" (Speech Encoder decoder model)"),NXe=l(),hg=a("li"),rZ=a("strong"),jXe=o("speech_to_text"),DXe=o(" \u2014 "),rk=a("a"),GXe=o("Speech2TextConfig"),OXe=o(" (Speech2Text model)"),VXe=l(),pg=a("li"),tZ=a("strong"),XXe=o("speech_to_text_2"),zXe=o(" \u2014 "),tk=a("a"),QXe=o("Speech2Text2Config"),WXe=o(" (Speech2Text2 model)"),HXe=l(),_g=a("li"),aZ=a("strong"),UXe=o("splinter"),JXe=o(" \u2014 "),ak=a("a"),YXe=o("SplinterConfig"),KXe=o(" (Splinter model)"),ZXe=l(),ug=a("li"),nZ=a("strong"),eze=o("squeezebert"),oze=o(" \u2014 "),nk=a("a"),rze=o("SqueezeBertConfig"),tze=o(" (SqueezeBERT model)"),aze=l(),bg=a("li"),sZ=a("strong"),nze=o("swin"),sze=o(" \u2014 "),sk=a("a"),lze=o("SwinConfig"),ize=o(" (Swin model)"),dze=l(),vg=a("li"),lZ=a("strong"),cze=o("t5"),fze=o(" \u2014 "),lk=a("a"),mze=o("T5Config"),gze=o(" (T5 model)"),hze=l(),Fg=a("li"),iZ=a("strong"),pze=o("tapas"),_ze=o(" \u2014 "),ik=a("a"),uze=o("TapasConfig"),bze=o(" (TAPAS model)"),vze=l(),Tg=a("li"),dZ=a("strong"),Fze=o("tapex"),Tze=o(" \u2014 "),dk=a("a"),Mze=o("BartConfig"),Eze=o(" (TAPEX model)"),Cze=l(),Mg=a("li"),cZ=a("strong"),wze=o("transfo-xl"),Aze=o(" \u2014 "),ck=a("a"),yze=o("TransfoXLConfig"),Lze=o(" (Transformer-XL model)"),xze=l(),Eg=a("li"),fZ=a("strong"),kze=o("trocr"),Sze=o(" \u2014 "),fk=a("a"),Rze=o("TrOCRConfig"),Bze=o(" (TrOCR model)"),Pze=l(),Cg=a("li"),mZ=a("strong"),$ze=o("unispeech"),Ize=o(" \u2014 "),mk=a("a"),qze=o("UniSpeechConfig"),Nze=o(" (UniSpeech model)"),jze=l(),wg=a("li"),gZ=a("strong"),Dze=o("unispeech-sat"),Gze=o(" \u2014 "),gk=a("a"),Oze=o("UniSpeechSatConfig"),Vze=o(" (UniSpeechSat model)"),Xze=l(),Ag=a("li"),hZ=a("strong"),zze=o("van"),Qze=o(" \u2014 "),hk=a("a"),Wze=o("VanConfig"),Hze=o(" (VAN model)"),Uze=l(),yg=a("li"),pZ=a("strong"),Jze=o("vilt"),Yze=o(" \u2014 "),pk=a("a"),Kze=o("ViltConfig"),Zze=o(" (ViLT model)"),eQe=l(),Lg=a("li"),_Z=a("strong"),oQe=o("vision-encoder-decoder"),rQe=o(" \u2014 "),_k=a("a"),tQe=o("VisionEncoderDecoderConfig"),aQe=o(" (Vision Encoder decoder model)"),nQe=l(),xg=a("li"),uZ=a("strong"),sQe=o("vision-text-dual-encoder"),lQe=o(" \u2014 "),uk=a("a"),iQe=o("VisionTextDualEncoderConfig"),dQe=o(" (VisionTextDualEncoder model)"),cQe=l(),kg=a("li"),bZ=a("strong"),fQe=o("visual_bert"),mQe=o(" \u2014 "),bk=a("a"),gQe=o("VisualBertConfig"),hQe=o(" (VisualBert model)"),pQe=l(),Sg=a("li"),vZ=a("strong"),_Qe=o("vit"),uQe=o(" \u2014 "),vk=a("a"),bQe=o("ViTConfig"),vQe=o(" (ViT model)"),FQe=l(),Rg=a("li"),FZ=a("strong"),TQe=o("vit_mae"),MQe=o(" \u2014 "),Fk=a("a"),EQe=o("ViTMAEConfig"),CQe=o(" (ViTMAE model)"),wQe=l(),Bg=a("li"),TZ=a("strong"),AQe=o("wav2vec2"),yQe=o(" \u2014 "),Tk=a("a"),LQe=o("Wav2Vec2Config"),xQe=o(" (Wav2Vec2 model)"),kQe=l(),Pg=a("li"),MZ=a("strong"),SQe=o("wavlm"),RQe=o(" \u2014 "),Mk=a("a"),BQe=o("WavLMConfig"),PQe=o(" (WavLM model)"),$Qe=l(),$g=a("li"),EZ=a("strong"),IQe=o("xglm"),qQe=o(" \u2014 "),Ek=a("a"),NQe=o("XGLMConfig"),jQe=o(" (XGLM model)"),DQe=l(),Ig=a("li"),CZ=a("strong"),GQe=o("xlm"),OQe=o(" \u2014 "),Ck=a("a"),VQe=o("XLMConfig"),XQe=o(" (XLM model)"),zQe=l(),qg=a("li"),wZ=a("strong"),QQe=o("xlm-prophetnet"),WQe=o(" \u2014 "),wk=a("a"),HQe=o("XLMProphetNetConfig"),UQe=o(" (XLMProphetNet model)"),JQe=l(),Ng=a("li"),AZ=a("strong"),YQe=o("xlm-roberta"),KQe=o(" \u2014 "),Ak=a("a"),ZQe=o("XLMRobertaConfig"),eWe=o(" (XLM-RoBERTa model)"),oWe=l(),jg=a("li"),yZ=a("strong"),rWe=o("xlm-roberta-xl"),tWe=o(" \u2014 "),yk=a("a"),aWe=o("XLMRobertaXLConfig"),nWe=o(" (XLM-RoBERTa-XL model)"),sWe=l(),Dg=a("li"),LZ=a("strong"),lWe=o("xlnet"),iWe=o(" \u2014 "),Lk=a("a"),dWe=o("XLNetConfig"),cWe=o(" (XLNet model)"),fWe=l(),Gg=a("li"),xZ=a("strong"),mWe=o("yoso"),gWe=o(" \u2014 "),xk=a("a"),hWe=o("YosoConfig"),pWe=o(" (YOSO model)"),_We=l(),kZ=a("p"),uWe=o("Examples:"),bWe=l(),f(X3.$$.fragment),vWe=l(),Og=a("div"),f(z3.$$.fragment),FWe=l(),SZ=a("p"),TWe=o("Register a new configuration for this class."),lBe=l(),Ji=a("h2"),Vg=a("a"),RZ=a("span"),f(Q3.$$.fragment),MWe=l(),BZ=a("span"),EWe=o("AutoTokenizer"),iBe=l(),Wo=a("div"),f(W3.$$.fragment),CWe=l(),H3=a("p"),wWe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),kk=a("a"),AWe=o("AutoTokenizer.from_pretrained()"),yWe=o(" class method."),LWe=l(),U3=a("p"),xWe=o("This class cannot be instantiated directly using "),PZ=a("code"),kWe=o("__init__()"),SWe=o(" (throws an error)."),RWe=l(),go=a("div"),f(J3.$$.fragment),BWe=l(),$Z=a("p"),PWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$We=l(),Oa=a("p"),IWe=o("The tokenizer class to instantiate is selected based on the "),IZ=a("code"),qWe=o("model_type"),NWe=o(` property of the config object (either
passed as an argument or loaded from `),qZ=a("code"),jWe=o("pretrained_model_name_or_path"),DWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NZ=a("code"),GWe=o("pretrained_model_name_or_path"),OWe=o(":"),VWe=l(),E=a("ul"),Wn=a("li"),jZ=a("strong"),XWe=o("albert"),zWe=o(" \u2014 "),Sk=a("a"),QWe=o("AlbertTokenizer"),WWe=o(" or "),Rk=a("a"),HWe=o("AlbertTokenizerFast"),UWe=o(" (ALBERT model)"),JWe=l(),Hn=a("li"),DZ=a("strong"),YWe=o("bart"),KWe=o(" \u2014 "),Bk=a("a"),ZWe=o("BartTokenizer"),eHe=o(" or "),Pk=a("a"),oHe=o("BartTokenizerFast"),rHe=o(" (BART model)"),tHe=l(),Un=a("li"),GZ=a("strong"),aHe=o("barthez"),nHe=o(" \u2014 "),$k=a("a"),sHe=o("BarthezTokenizer"),lHe=o(" or "),Ik=a("a"),iHe=o("BarthezTokenizerFast"),dHe=o(" (BARThez model)"),cHe=l(),Xg=a("li"),OZ=a("strong"),fHe=o("bartpho"),mHe=o(" \u2014 "),qk=a("a"),gHe=o("BartphoTokenizer"),hHe=o(" (BARTpho model)"),pHe=l(),Jn=a("li"),VZ=a("strong"),_He=o("bert"),uHe=o(" \u2014 "),Nk=a("a"),bHe=o("BertTokenizer"),vHe=o(" or "),jk=a("a"),FHe=o("BertTokenizerFast"),THe=o(" (BERT model)"),MHe=l(),zg=a("li"),XZ=a("strong"),EHe=o("bert-generation"),CHe=o(" \u2014 "),Dk=a("a"),wHe=o("BertGenerationTokenizer"),AHe=o(" (Bert Generation model)"),yHe=l(),Qg=a("li"),zZ=a("strong"),LHe=o("bert-japanese"),xHe=o(" \u2014 "),Gk=a("a"),kHe=o("BertJapaneseTokenizer"),SHe=o(" (BertJapanese model)"),RHe=l(),Wg=a("li"),QZ=a("strong"),BHe=o("bertweet"),PHe=o(" \u2014 "),Ok=a("a"),$He=o("BertweetTokenizer"),IHe=o(" (Bertweet model)"),qHe=l(),Yn=a("li"),WZ=a("strong"),NHe=o("big_bird"),jHe=o(" \u2014 "),Vk=a("a"),DHe=o("BigBirdTokenizer"),GHe=o(" or "),Xk=a("a"),OHe=o("BigBirdTokenizerFast"),VHe=o(" (BigBird model)"),XHe=l(),Kn=a("li"),HZ=a("strong"),zHe=o("bigbird_pegasus"),QHe=o(" \u2014 "),zk=a("a"),WHe=o("PegasusTokenizer"),HHe=o(" or "),Qk=a("a"),UHe=o("PegasusTokenizerFast"),JHe=o(" (BigBirdPegasus model)"),YHe=l(),Zn=a("li"),UZ=a("strong"),KHe=o("blenderbot"),ZHe=o(" \u2014 "),Wk=a("a"),eUe=o("BlenderbotTokenizer"),oUe=o(" or "),Hk=a("a"),rUe=o("BlenderbotTokenizerFast"),tUe=o(" (Blenderbot model)"),aUe=l(),Hg=a("li"),JZ=a("strong"),nUe=o("blenderbot-small"),sUe=o(" \u2014 "),Uk=a("a"),lUe=o("BlenderbotSmallTokenizer"),iUe=o(" (BlenderbotSmall model)"),dUe=l(),Ug=a("li"),YZ=a("strong"),cUe=o("byt5"),fUe=o(" \u2014 "),Jk=a("a"),mUe=o("ByT5Tokenizer"),gUe=o(" (ByT5 model)"),hUe=l(),es=a("li"),KZ=a("strong"),pUe=o("camembert"),_Ue=o(" \u2014 "),Yk=a("a"),uUe=o("CamembertTokenizer"),bUe=o(" or "),Kk=a("a"),vUe=o("CamembertTokenizerFast"),FUe=o(" (CamemBERT model)"),TUe=l(),Jg=a("li"),ZZ=a("strong"),MUe=o("canine"),EUe=o(" \u2014 "),Zk=a("a"),CUe=o("CanineTokenizer"),wUe=o(" (Canine model)"),AUe=l(),os=a("li"),eee=a("strong"),yUe=o("clip"),LUe=o(" \u2014 "),eS=a("a"),xUe=o("CLIPTokenizer"),kUe=o(" or "),oS=a("a"),SUe=o("CLIPTokenizerFast"),RUe=o(" (CLIP model)"),BUe=l(),rs=a("li"),oee=a("strong"),PUe=o("convbert"),$Ue=o(" \u2014 "),rS=a("a"),IUe=o("ConvBertTokenizer"),qUe=o(" or "),tS=a("a"),NUe=o("ConvBertTokenizerFast"),jUe=o(" (ConvBERT model)"),DUe=l(),ts=a("li"),ree=a("strong"),GUe=o("cpm"),OUe=o(" \u2014 "),aS=a("a"),VUe=o("CpmTokenizer"),XUe=o(" or "),tee=a("code"),zUe=o("CpmTokenizerFast"),QUe=o(" (CPM model)"),WUe=l(),Yg=a("li"),aee=a("strong"),HUe=o("ctrl"),UUe=o(" \u2014 "),nS=a("a"),JUe=o("CTRLTokenizer"),YUe=o(" (CTRL model)"),KUe=l(),as=a("li"),nee=a("strong"),ZUe=o("deberta"),eJe=o(" \u2014 "),sS=a("a"),oJe=o("DebertaTokenizer"),rJe=o(" or "),lS=a("a"),tJe=o("DebertaTokenizerFast"),aJe=o(" (DeBERTa model)"),nJe=l(),ns=a("li"),see=a("strong"),sJe=o("deberta-v2"),lJe=o(" \u2014 "),iS=a("a"),iJe=o("DebertaV2Tokenizer"),dJe=o(" or "),dS=a("a"),cJe=o("DebertaV2TokenizerFast"),fJe=o(" (DeBERTa-v2 model)"),mJe=l(),ss=a("li"),lee=a("strong"),gJe=o("distilbert"),hJe=o(" \u2014 "),cS=a("a"),pJe=o("DistilBertTokenizer"),_Je=o(" or "),fS=a("a"),uJe=o("DistilBertTokenizerFast"),bJe=o(" (DistilBERT model)"),vJe=l(),ls=a("li"),iee=a("strong"),FJe=o("dpr"),TJe=o(" \u2014 "),mS=a("a"),MJe=o("DPRQuestionEncoderTokenizer"),EJe=o(" or "),gS=a("a"),CJe=o("DPRQuestionEncoderTokenizerFast"),wJe=o(" (DPR model)"),AJe=l(),is=a("li"),dee=a("strong"),yJe=o("electra"),LJe=o(" \u2014 "),hS=a("a"),xJe=o("ElectraTokenizer"),kJe=o(" or "),pS=a("a"),SJe=o("ElectraTokenizerFast"),RJe=o(" (ELECTRA model)"),BJe=l(),Kg=a("li"),cee=a("strong"),PJe=o("flaubert"),$Je=o(" \u2014 "),_S=a("a"),IJe=o("FlaubertTokenizer"),qJe=o(" (FlauBERT model)"),NJe=l(),ds=a("li"),fee=a("strong"),jJe=o("fnet"),DJe=o(" \u2014 "),uS=a("a"),GJe=o("FNetTokenizer"),OJe=o(" or "),bS=a("a"),VJe=o("FNetTokenizerFast"),XJe=o(" (FNet model)"),zJe=l(),Zg=a("li"),mee=a("strong"),QJe=o("fsmt"),WJe=o(" \u2014 "),vS=a("a"),HJe=o("FSMTTokenizer"),UJe=o(" (FairSeq Machine-Translation model)"),JJe=l(),cs=a("li"),gee=a("strong"),YJe=o("funnel"),KJe=o(" \u2014 "),FS=a("a"),ZJe=o("FunnelTokenizer"),eYe=o(" or "),TS=a("a"),oYe=o("FunnelTokenizerFast"),rYe=o(" (Funnel Transformer model)"),tYe=l(),fs=a("li"),hee=a("strong"),aYe=o("gpt2"),nYe=o(" \u2014 "),MS=a("a"),sYe=o("GPT2Tokenizer"),lYe=o(" or "),ES=a("a"),iYe=o("GPT2TokenizerFast"),dYe=o(" (OpenAI GPT-2 model)"),cYe=l(),ms=a("li"),pee=a("strong"),fYe=o("gpt_neo"),mYe=o(" \u2014 "),CS=a("a"),gYe=o("GPT2Tokenizer"),hYe=o(" or "),wS=a("a"),pYe=o("GPT2TokenizerFast"),_Ye=o(" (GPT Neo model)"),uYe=l(),gs=a("li"),_ee=a("strong"),bYe=o("gpt_neox"),vYe=o(" \u2014 "),AS=a("a"),FYe=o("GPTNeoXTokenizer"),TYe=o(" or "),yS=a("a"),MYe=o("GPTNeoXTokenizerFast"),EYe=o(" (GPTNeoX model)"),CYe=l(),hs=a("li"),uee=a("strong"),wYe=o("gptj"),AYe=o(" \u2014 "),LS=a("a"),yYe=o("GPT2Tokenizer"),LYe=o(" or "),xS=a("a"),xYe=o("GPT2TokenizerFast"),kYe=o(" (GPT-J model)"),SYe=l(),ps=a("li"),bee=a("strong"),RYe=o("herbert"),BYe=o(" \u2014 "),kS=a("a"),PYe=o("HerbertTokenizer"),$Ye=o(" or "),SS=a("a"),IYe=o("HerbertTokenizerFast"),qYe=o(" (HerBERT model)"),NYe=l(),eh=a("li"),vee=a("strong"),jYe=o("hubert"),DYe=o(" \u2014 "),RS=a("a"),GYe=o("Wav2Vec2CTCTokenizer"),OYe=o(" (Hubert model)"),VYe=l(),_s=a("li"),Fee=a("strong"),XYe=o("ibert"),zYe=o(" \u2014 "),BS=a("a"),QYe=o("RobertaTokenizer"),WYe=o(" or "),PS=a("a"),HYe=o("RobertaTokenizerFast"),UYe=o(" (I-BERT model)"),JYe=l(),us=a("li"),Tee=a("strong"),YYe=o("layoutlm"),KYe=o(" \u2014 "),$S=a("a"),ZYe=o("LayoutLMTokenizer"),eKe=o(" or "),IS=a("a"),oKe=o("LayoutLMTokenizerFast"),rKe=o(" (LayoutLM model)"),tKe=l(),bs=a("li"),Mee=a("strong"),aKe=o("layoutlmv2"),nKe=o(" \u2014 "),qS=a("a"),sKe=o("LayoutLMv2Tokenizer"),lKe=o(" or "),NS=a("a"),iKe=o("LayoutLMv2TokenizerFast"),dKe=o(" (LayoutLMv2 model)"),cKe=l(),vs=a("li"),Eee=a("strong"),fKe=o("layoutxlm"),mKe=o(" \u2014 "),jS=a("a"),gKe=o("LayoutXLMTokenizer"),hKe=o(" or "),DS=a("a"),pKe=o("LayoutXLMTokenizerFast"),_Ke=o(" (LayoutXLM model)"),uKe=l(),Fs=a("li"),Cee=a("strong"),bKe=o("led"),vKe=o(" \u2014 "),GS=a("a"),FKe=o("LEDTokenizer"),TKe=o(" or "),OS=a("a"),MKe=o("LEDTokenizerFast"),EKe=o(" (LED model)"),CKe=l(),Ts=a("li"),wee=a("strong"),wKe=o("longformer"),AKe=o(" \u2014 "),VS=a("a"),yKe=o("LongformerTokenizer"),LKe=o(" or "),XS=a("a"),xKe=o("LongformerTokenizerFast"),kKe=o(" (Longformer model)"),SKe=l(),oh=a("li"),Aee=a("strong"),RKe=o("luke"),BKe=o(" \u2014 "),zS=a("a"),PKe=o("LukeTokenizer"),$Ke=o(" (LUKE model)"),IKe=l(),Ms=a("li"),yee=a("strong"),qKe=o("lxmert"),NKe=o(" \u2014 "),QS=a("a"),jKe=o("LxmertTokenizer"),DKe=o(" or "),WS=a("a"),GKe=o("LxmertTokenizerFast"),OKe=o(" (LXMERT model)"),VKe=l(),rh=a("li"),Lee=a("strong"),XKe=o("m2m_100"),zKe=o(" \u2014 "),HS=a("a"),QKe=o("M2M100Tokenizer"),WKe=o(" (M2M100 model)"),HKe=l(),th=a("li"),xee=a("strong"),UKe=o("marian"),JKe=o(" \u2014 "),US=a("a"),YKe=o("MarianTokenizer"),KKe=o(" (Marian model)"),ZKe=l(),Es=a("li"),kee=a("strong"),eZe=o("mbart"),oZe=o(" \u2014 "),JS=a("a"),rZe=o("MBartTokenizer"),tZe=o(" or "),YS=a("a"),aZe=o("MBartTokenizerFast"),nZe=o(" (mBART model)"),sZe=l(),Cs=a("li"),See=a("strong"),lZe=o("mbart50"),iZe=o(" \u2014 "),KS=a("a"),dZe=o("MBart50Tokenizer"),cZe=o(" or "),ZS=a("a"),fZe=o("MBart50TokenizerFast"),mZe=o(" (mBART-50 model)"),gZe=l(),ah=a("li"),Ree=a("strong"),hZe=o("mluke"),pZe=o(" \u2014 "),eR=a("a"),_Ze=o("MLukeTokenizer"),uZe=o(" (mLUKE model)"),bZe=l(),ws=a("li"),Bee=a("strong"),vZe=o("mobilebert"),FZe=o(" \u2014 "),oR=a("a"),TZe=o("MobileBertTokenizer"),MZe=o(" or "),rR=a("a"),EZe=o("MobileBertTokenizerFast"),CZe=o(" (MobileBERT model)"),wZe=l(),As=a("li"),Pee=a("strong"),AZe=o("mpnet"),yZe=o(" \u2014 "),tR=a("a"),LZe=o("MPNetTokenizer"),xZe=o(" or "),aR=a("a"),kZe=o("MPNetTokenizerFast"),SZe=o(" (MPNet model)"),RZe=l(),ys=a("li"),$ee=a("strong"),BZe=o("mt5"),PZe=o(" \u2014 "),nR=a("a"),$Ze=o("MT5Tokenizer"),IZe=o(" or "),sR=a("a"),qZe=o("MT5TokenizerFast"),NZe=o(" (mT5 model)"),jZe=l(),Ls=a("li"),Iee=a("strong"),DZe=o("openai-gpt"),GZe=o(" \u2014 "),lR=a("a"),OZe=o("OpenAIGPTTokenizer"),VZe=o(" or "),iR=a("a"),XZe=o("OpenAIGPTTokenizerFast"),zZe=o(" (OpenAI GPT model)"),QZe=l(),xs=a("li"),qee=a("strong"),WZe=o("pegasus"),HZe=o(" \u2014 "),dR=a("a"),UZe=o("PegasusTokenizer"),JZe=o(" or "),cR=a("a"),YZe=o("PegasusTokenizerFast"),KZe=o(" (Pegasus model)"),ZZe=l(),nh=a("li"),Nee=a("strong"),eeo=o("perceiver"),oeo=o(" \u2014 "),fR=a("a"),reo=o("PerceiverTokenizer"),teo=o(" (Perceiver model)"),aeo=l(),sh=a("li"),jee=a("strong"),neo=o("phobert"),seo=o(" \u2014 "),mR=a("a"),leo=o("PhobertTokenizer"),ieo=o(" (PhoBERT model)"),deo=l(),lh=a("li"),Dee=a("strong"),ceo=o("plbart"),feo=o(" \u2014 "),gR=a("a"),meo=o("PLBartTokenizer"),geo=o(" (PLBart model)"),heo=l(),ih=a("li"),Gee=a("strong"),peo=o("prophetnet"),_eo=o(" \u2014 "),hR=a("a"),ueo=o("ProphetNetTokenizer"),beo=o(" (ProphetNet model)"),veo=l(),ks=a("li"),Oee=a("strong"),Feo=o("qdqbert"),Teo=o(" \u2014 "),pR=a("a"),Meo=o("BertTokenizer"),Eeo=o(" or "),_R=a("a"),Ceo=o("BertTokenizerFast"),weo=o(" (QDQBert model)"),Aeo=l(),dh=a("li"),Vee=a("strong"),yeo=o("rag"),Leo=o(" \u2014 "),uR=a("a"),xeo=o("RagTokenizer"),keo=o(" (RAG model)"),Seo=l(),Ss=a("li"),Xee=a("strong"),Reo=o("realm"),Beo=o(" \u2014 "),bR=a("a"),Peo=o("RealmTokenizer"),$eo=o(" or "),vR=a("a"),Ieo=o("RealmTokenizerFast"),qeo=o(" (Realm model)"),Neo=l(),Rs=a("li"),zee=a("strong"),jeo=o("reformer"),Deo=o(" \u2014 "),FR=a("a"),Geo=o("ReformerTokenizer"),Oeo=o(" or "),TR=a("a"),Veo=o("ReformerTokenizerFast"),Xeo=o(" (Reformer model)"),zeo=l(),Bs=a("li"),Qee=a("strong"),Qeo=o("rembert"),Weo=o(" \u2014 "),MR=a("a"),Heo=o("RemBertTokenizer"),Ueo=o(" or "),ER=a("a"),Jeo=o("RemBertTokenizerFast"),Yeo=o(" (RemBERT model)"),Keo=l(),Ps=a("li"),Wee=a("strong"),Zeo=o("retribert"),eoo=o(" \u2014 "),CR=a("a"),ooo=o("RetriBertTokenizer"),roo=o(" or "),wR=a("a"),too=o("RetriBertTokenizerFast"),aoo=o(" (RetriBERT model)"),noo=l(),$s=a("li"),Hee=a("strong"),soo=o("roberta"),loo=o(" \u2014 "),AR=a("a"),ioo=o("RobertaTokenizer"),doo=o(" or "),yR=a("a"),coo=o("RobertaTokenizerFast"),foo=o(" (RoBERTa model)"),moo=l(),Is=a("li"),Uee=a("strong"),goo=o("roformer"),hoo=o(" \u2014 "),LR=a("a"),poo=o("RoFormerTokenizer"),_oo=o(" or "),xR=a("a"),uoo=o("RoFormerTokenizerFast"),boo=o(" (RoFormer model)"),voo=l(),ch=a("li"),Jee=a("strong"),Foo=o("speech_to_text"),Too=o(" \u2014 "),kR=a("a"),Moo=o("Speech2TextTokenizer"),Eoo=o(" (Speech2Text model)"),Coo=l(),fh=a("li"),Yee=a("strong"),woo=o("speech_to_text_2"),Aoo=o(" \u2014 "),SR=a("a"),yoo=o("Speech2Text2Tokenizer"),Loo=o(" (Speech2Text2 model)"),xoo=l(),qs=a("li"),Kee=a("strong"),koo=o("splinter"),Soo=o(" \u2014 "),RR=a("a"),Roo=o("SplinterTokenizer"),Boo=o(" or "),BR=a("a"),Poo=o("SplinterTokenizerFast"),$oo=o(" (Splinter model)"),Ioo=l(),Ns=a("li"),Zee=a("strong"),qoo=o("squeezebert"),Noo=o(" \u2014 "),PR=a("a"),joo=o("SqueezeBertTokenizer"),Doo=o(" or "),$R=a("a"),Goo=o("SqueezeBertTokenizerFast"),Ooo=o(" (SqueezeBERT model)"),Voo=l(),js=a("li"),eoe=a("strong"),Xoo=o("t5"),zoo=o(" \u2014 "),IR=a("a"),Qoo=o("T5Tokenizer"),Woo=o(" or "),qR=a("a"),Hoo=o("T5TokenizerFast"),Uoo=o(" (T5 model)"),Joo=l(),mh=a("li"),ooe=a("strong"),Yoo=o("tapas"),Koo=o(" \u2014 "),NR=a("a"),Zoo=o("TapasTokenizer"),ero=o(" (TAPAS model)"),oro=l(),gh=a("li"),roe=a("strong"),rro=o("tapex"),tro=o(" \u2014 "),jR=a("a"),aro=o("TapexTokenizer"),nro=o(" (TAPEX model)"),sro=l(),hh=a("li"),toe=a("strong"),lro=o("transfo-xl"),iro=o(" \u2014 "),DR=a("a"),dro=o("TransfoXLTokenizer"),cro=o(" (Transformer-XL model)"),fro=l(),ph=a("li"),aoe=a("strong"),mro=o("wav2vec2"),gro=o(" \u2014 "),GR=a("a"),hro=o("Wav2Vec2CTCTokenizer"),pro=o(" (Wav2Vec2 model)"),_ro=l(),_h=a("li"),noe=a("strong"),uro=o("wav2vec2_phoneme"),bro=o(" \u2014 "),OR=a("a"),vro=o("Wav2Vec2PhonemeCTCTokenizer"),Fro=o(" (Wav2Vec2Phoneme model)"),Tro=l(),Ds=a("li"),soe=a("strong"),Mro=o("xglm"),Ero=o(" \u2014 "),VR=a("a"),Cro=o("XGLMTokenizer"),wro=o(" or "),XR=a("a"),Aro=o("XGLMTokenizerFast"),yro=o(" (XGLM model)"),Lro=l(),uh=a("li"),loe=a("strong"),xro=o("xlm"),kro=o(" \u2014 "),zR=a("a"),Sro=o("XLMTokenizer"),Rro=o(" (XLM model)"),Bro=l(),bh=a("li"),ioe=a("strong"),Pro=o("xlm-prophetnet"),$ro=o(" \u2014 "),QR=a("a"),Iro=o("XLMProphetNetTokenizer"),qro=o(" (XLMProphetNet model)"),Nro=l(),Gs=a("li"),doe=a("strong"),jro=o("xlm-roberta"),Dro=o(" \u2014 "),WR=a("a"),Gro=o("XLMRobertaTokenizer"),Oro=o(" or "),HR=a("a"),Vro=o("XLMRobertaTokenizerFast"),Xro=o(" (XLM-RoBERTa model)"),zro=l(),Os=a("li"),coe=a("strong"),Qro=o("xlnet"),Wro=o(" \u2014 "),UR=a("a"),Hro=o("XLNetTokenizer"),Uro=o(" or "),JR=a("a"),Jro=o("XLNetTokenizerFast"),Yro=o(" (XLNet model)"),Kro=l(),foe=a("p"),Zro=o("Examples:"),eto=l(),f(Y3.$$.fragment),oto=l(),vh=a("div"),f(K3.$$.fragment),rto=l(),moe=a("p"),tto=o("Register a new tokenizer in this mapping."),dBe=l(),Yi=a("h2"),Fh=a("a"),goe=a("span"),f(Z3.$$.fragment),ato=l(),hoe=a("span"),nto=o("AutoFeatureExtractor"),cBe=l(),Ho=a("div"),f(eC.$$.fragment),sto=l(),oC=a("p"),lto=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),YR=a("a"),ito=o("AutoFeatureExtractor.from_pretrained()"),dto=o(" class method."),cto=l(),rC=a("p"),fto=o("This class cannot be instantiated directly using "),poe=a("code"),mto=o("__init__()"),gto=o(" (throws an error)."),hto=l(),$e=a("div"),f(tC.$$.fragment),pto=l(),_oe=a("p"),_to=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),uto=l(),Va=a("p"),bto=o("The feature extractor class to instantiate is selected based on the "),uoe=a("code"),vto=o("model_type"),Fto=o(` property of the config object
(either passed as an argument or loaded from `),boe=a("code"),Tto=o("pretrained_model_name_or_path"),Mto=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),voe=a("code"),Eto=o("pretrained_model_name_or_path"),Cto=o(":"),wto=l(),ee=a("ul"),Th=a("li"),Foe=a("strong"),Ato=o("beit"),yto=o(" \u2014 "),KR=a("a"),Lto=o("BeitFeatureExtractor"),xto=o(" (BEiT model)"),kto=l(),Mh=a("li"),Toe=a("strong"),Sto=o("clip"),Rto=o(" \u2014 "),ZR=a("a"),Bto=o("CLIPFeatureExtractor"),Pto=o(" (CLIP model)"),$to=l(),Eh=a("li"),Moe=a("strong"),Ito=o("convnext"),qto=o(" \u2014 "),eB=a("a"),Nto=o("ConvNextFeatureExtractor"),jto=o(" (ConvNext model)"),Dto=l(),Ch=a("li"),Eoe=a("strong"),Gto=o("deit"),Oto=o(" \u2014 "),oB=a("a"),Vto=o("DeiTFeatureExtractor"),Xto=o(" (DeiT model)"),zto=l(),wh=a("li"),Coe=a("strong"),Qto=o("detr"),Wto=o(" \u2014 "),rB=a("a"),Hto=o("DetrFeatureExtractor"),Uto=o(" (DETR model)"),Jto=l(),Ah=a("li"),woe=a("strong"),Yto=o("hubert"),Kto=o(" \u2014 "),tB=a("a"),Zto=o("Wav2Vec2FeatureExtractor"),eao=o(" (Hubert model)"),oao=l(),yh=a("li"),Aoe=a("strong"),rao=o("layoutlmv2"),tao=o(" \u2014 "),aB=a("a"),aao=o("LayoutLMv2FeatureExtractor"),nao=o(" (LayoutLMv2 model)"),sao=l(),Lh=a("li"),yoe=a("strong"),lao=o("maskformer"),iao=o(" \u2014 "),nB=a("a"),dao=o("MaskFormerFeatureExtractor"),cao=o(" (MaskFormer model)"),fao=l(),xh=a("li"),Loe=a("strong"),mao=o("perceiver"),gao=o(" \u2014 "),sB=a("a"),hao=o("PerceiverFeatureExtractor"),pao=o(" (Perceiver model)"),_ao=l(),kh=a("li"),xoe=a("strong"),uao=o("poolformer"),bao=o(" \u2014 "),lB=a("a"),vao=o("PoolFormerFeatureExtractor"),Fao=o(" (PoolFormer model)"),Tao=l(),Sh=a("li"),koe=a("strong"),Mao=o("regnet"),Eao=o(" \u2014 "),iB=a("a"),Cao=o("ConvNextFeatureExtractor"),wao=o(" (RegNet model)"),Aao=l(),Rh=a("li"),Soe=a("strong"),yao=o("resnet"),Lao=o(" \u2014 "),dB=a("a"),xao=o("ConvNextFeatureExtractor"),kao=o(" (ResNet model)"),Sao=l(),Bh=a("li"),Roe=a("strong"),Rao=o("segformer"),Bao=o(" \u2014 "),cB=a("a"),Pao=o("SegformerFeatureExtractor"),$ao=o(" (SegFormer model)"),Iao=l(),Ph=a("li"),Boe=a("strong"),qao=o("speech_to_text"),Nao=o(" \u2014 "),fB=a("a"),jao=o("Speech2TextFeatureExtractor"),Dao=o(" (Speech2Text model)"),Gao=l(),$h=a("li"),Poe=a("strong"),Oao=o("swin"),Vao=o(" \u2014 "),mB=a("a"),Xao=o("ViTFeatureExtractor"),zao=o(" (Swin model)"),Qao=l(),Ih=a("li"),$oe=a("strong"),Wao=o("van"),Hao=o(" \u2014 "),gB=a("a"),Uao=o("ConvNextFeatureExtractor"),Jao=o(" (VAN model)"),Yao=l(),qh=a("li"),Ioe=a("strong"),Kao=o("vit"),Zao=o(" \u2014 "),hB=a("a"),eno=o("ViTFeatureExtractor"),ono=o(" (ViT model)"),rno=l(),Nh=a("li"),qoe=a("strong"),tno=o("vit_mae"),ano=o(" \u2014 "),pB=a("a"),nno=o("ViTFeatureExtractor"),sno=o(" (ViTMAE model)"),lno=l(),jh=a("li"),Noe=a("strong"),ino=o("wav2vec2"),dno=o(" \u2014 "),_B=a("a"),cno=o("Wav2Vec2FeatureExtractor"),fno=o(" (Wav2Vec2 model)"),mno=l(),f(Dh.$$.fragment),gno=l(),joe=a("p"),hno=o("Examples:"),pno=l(),f(aC.$$.fragment),_no=l(),Gh=a("div"),f(nC.$$.fragment),uno=l(),Doe=a("p"),bno=o("Register a new feature extractor for this class."),fBe=l(),Ki=a("h2"),Oh=a("a"),Goe=a("span"),f(sC.$$.fragment),vno=l(),Ooe=a("span"),Fno=o("AutoProcessor"),mBe=l(),Uo=a("div"),f(lC.$$.fragment),Tno=l(),iC=a("p"),Mno=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uB=a("a"),Eno=o("AutoProcessor.from_pretrained()"),Cno=o(" class method."),wno=l(),dC=a("p"),Ano=o("This class cannot be instantiated directly using "),Voe=a("code"),yno=o("__init__()"),Lno=o(" (throws an error)."),xno=l(),Ie=a("div"),f(cC.$$.fragment),kno=l(),Xoe=a("p"),Sno=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Rno=l(),Zi=a("p"),Bno=o("The processor class to instantiate is selected based on the "),zoe=a("code"),Pno=o("model_type"),$no=o(` property of the config object (either
passed as an argument or loaded from `),Qoe=a("code"),Ino=o("pretrained_model_name_or_path"),qno=o(" if possible):"),Nno=l(),ke=a("ul"),Vh=a("li"),Woe=a("strong"),jno=o("clip"),Dno=o(" \u2014 "),bB=a("a"),Gno=o("CLIPProcessor"),Ono=o(" (CLIP model)"),Vno=l(),Xh=a("li"),Hoe=a("strong"),Xno=o("layoutlmv2"),zno=o(" \u2014 "),vB=a("a"),Qno=o("LayoutLMv2Processor"),Wno=o(" (LayoutLMv2 model)"),Hno=l(),zh=a("li"),Uoe=a("strong"),Uno=o("layoutxlm"),Jno=o(" \u2014 "),FB=a("a"),Yno=o("LayoutXLMProcessor"),Kno=o(" (LayoutXLM model)"),Zno=l(),Qh=a("li"),Joe=a("strong"),eso=o("speech_to_text"),oso=o(" \u2014 "),TB=a("a"),rso=o("Speech2TextProcessor"),tso=o(" (Speech2Text model)"),aso=l(),Wh=a("li"),Yoe=a("strong"),nso=o("speech_to_text_2"),sso=o(" \u2014 "),MB=a("a"),lso=o("Speech2Text2Processor"),iso=o(" (Speech2Text2 model)"),dso=l(),Hh=a("li"),Koe=a("strong"),cso=o("trocr"),fso=o(" \u2014 "),EB=a("a"),mso=o("TrOCRProcessor"),gso=o(" (TrOCR model)"),hso=l(),Uh=a("li"),Zoe=a("strong"),pso=o("vision-text-dual-encoder"),_so=o(" \u2014 "),CB=a("a"),uso=o("VisionTextDualEncoderProcessor"),bso=o(" (VisionTextDualEncoder model)"),vso=l(),Jh=a("li"),ere=a("strong"),Fso=o("wav2vec2"),Tso=o(" \u2014 "),wB=a("a"),Mso=o("Wav2Vec2Processor"),Eso=o(" (Wav2Vec2 model)"),Cso=l(),f(Yh.$$.fragment),wso=l(),ore=a("p"),Aso=o("Examples:"),yso=l(),f(fC.$$.fragment),Lso=l(),Kh=a("div"),f(mC.$$.fragment),xso=l(),rre=a("p"),kso=o("Register a new processor for this class."),gBe=l(),ed=a("h2"),Zh=a("a"),tre=a("span"),f(gC.$$.fragment),Sso=l(),are=a("span"),Rso=o("AutoModel"),hBe=l(),Jo=a("div"),f(hC.$$.fragment),Bso=l(),od=a("p"),Pso=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AB=a("a"),$so=o("from_pretrained()"),Iso=o(" class method or the "),yB=a("a"),qso=o("from_config()"),Nso=o(` class
method.`),jso=l(),pC=a("p"),Dso=o("This class cannot be instantiated directly using "),nre=a("code"),Gso=o("__init__()"),Oso=o(" (throws an error)."),Vso=l(),Xr=a("div"),f(_C.$$.fragment),Xso=l(),sre=a("p"),zso=o("Instantiates one of the base model classes of the library from a configuration."),Qso=l(),rd=a("p"),Wso=o(`Note:
Loading a model from its configuration file does `),lre=a("strong"),Hso=o("not"),Uso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LB=a("a"),Jso=o("from_pretrained()"),Yso=o(" to load the model weights."),Kso=l(),ire=a("p"),Zso=o("Examples:"),elo=l(),f(uC.$$.fragment),olo=l(),qe=a("div"),f(bC.$$.fragment),rlo=l(),dre=a("p"),tlo=o("Instantiate one of the base model classes of the library from a pretrained model."),alo=l(),Xa=a("p"),nlo=o("The model class to instantiate is selected based on the "),cre=a("code"),slo=o("model_type"),llo=o(` property of the config object (either
passed as an argument or loaded from `),fre=a("code"),ilo=o("pretrained_model_name_or_path"),dlo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mre=a("code"),clo=o("pretrained_model_name_or_path"),flo=o(":"),mlo=l(),T=a("ul"),ep=a("li"),gre=a("strong"),glo=o("albert"),hlo=o(" \u2014 "),xB=a("a"),plo=o("AlbertModel"),_lo=o(" (ALBERT model)"),ulo=l(),op=a("li"),hre=a("strong"),blo=o("bart"),vlo=o(" \u2014 "),kB=a("a"),Flo=o("BartModel"),Tlo=o(" (BART model)"),Mlo=l(),rp=a("li"),pre=a("strong"),Elo=o("beit"),Clo=o(" \u2014 "),SB=a("a"),wlo=o("BeitModel"),Alo=o(" (BEiT model)"),ylo=l(),tp=a("li"),_re=a("strong"),Llo=o("bert"),xlo=o(" \u2014 "),RB=a("a"),klo=o("BertModel"),Slo=o(" (BERT model)"),Rlo=l(),ap=a("li"),ure=a("strong"),Blo=o("bert-generation"),Plo=o(" \u2014 "),BB=a("a"),$lo=o("BertGenerationEncoder"),Ilo=o(" (Bert Generation model)"),qlo=l(),np=a("li"),bre=a("strong"),Nlo=o("big_bird"),jlo=o(" \u2014 "),PB=a("a"),Dlo=o("BigBirdModel"),Glo=o(" (BigBird model)"),Olo=l(),sp=a("li"),vre=a("strong"),Vlo=o("bigbird_pegasus"),Xlo=o(" \u2014 "),$B=a("a"),zlo=o("BigBirdPegasusModel"),Qlo=o(" (BigBirdPegasus model)"),Wlo=l(),lp=a("li"),Fre=a("strong"),Hlo=o("blenderbot"),Ulo=o(" \u2014 "),IB=a("a"),Jlo=o("BlenderbotModel"),Ylo=o(" (Blenderbot model)"),Klo=l(),ip=a("li"),Tre=a("strong"),Zlo=o("blenderbot-small"),eio=o(" \u2014 "),qB=a("a"),oio=o("BlenderbotSmallModel"),rio=o(" (BlenderbotSmall model)"),tio=l(),dp=a("li"),Mre=a("strong"),aio=o("camembert"),nio=o(" \u2014 "),NB=a("a"),sio=o("CamembertModel"),lio=o(" (CamemBERT model)"),iio=l(),cp=a("li"),Ere=a("strong"),dio=o("canine"),cio=o(" \u2014 "),jB=a("a"),fio=o("CanineModel"),mio=o(" (Canine model)"),gio=l(),fp=a("li"),Cre=a("strong"),hio=o("clip"),pio=o(" \u2014 "),DB=a("a"),_io=o("CLIPModel"),uio=o(" (CLIP model)"),bio=l(),mp=a("li"),wre=a("strong"),vio=o("convbert"),Fio=o(" \u2014 "),GB=a("a"),Tio=o("ConvBertModel"),Mio=o(" (ConvBERT model)"),Eio=l(),gp=a("li"),Are=a("strong"),Cio=o("convnext"),wio=o(" \u2014 "),OB=a("a"),Aio=o("ConvNextModel"),yio=o(" (ConvNext model)"),Lio=l(),hp=a("li"),yre=a("strong"),xio=o("ctrl"),kio=o(" \u2014 "),VB=a("a"),Sio=o("CTRLModel"),Rio=o(" (CTRL model)"),Bio=l(),pp=a("li"),Lre=a("strong"),Pio=o("data2vec-audio"),$io=o(" \u2014 "),XB=a("a"),Iio=o("Data2VecAudioModel"),qio=o(" (Data2VecAudio model)"),Nio=l(),_p=a("li"),xre=a("strong"),jio=o("data2vec-text"),Dio=o(" \u2014 "),zB=a("a"),Gio=o("Data2VecTextModel"),Oio=o(" (Data2VecText model)"),Vio=l(),up=a("li"),kre=a("strong"),Xio=o("data2vec-vision"),zio=o(" \u2014 "),QB=a("a"),Qio=o("Data2VecVisionModel"),Wio=o(" (Data2VecVision model)"),Hio=l(),bp=a("li"),Sre=a("strong"),Uio=o("deberta"),Jio=o(" \u2014 "),WB=a("a"),Yio=o("DebertaModel"),Kio=o(" (DeBERTa model)"),Zio=l(),vp=a("li"),Rre=a("strong"),edo=o("deberta-v2"),odo=o(" \u2014 "),HB=a("a"),rdo=o("DebertaV2Model"),tdo=o(" (DeBERTa-v2 model)"),ado=l(),Fp=a("li"),Bre=a("strong"),ndo=o("decision_transformer"),sdo=o(" \u2014 "),UB=a("a"),ldo=o("DecisionTransformerModel"),ido=o(" (Decision Transformer model)"),ddo=l(),Tp=a("li"),Pre=a("strong"),cdo=o("deit"),fdo=o(" \u2014 "),JB=a("a"),mdo=o("DeiTModel"),gdo=o(" (DeiT model)"),hdo=l(),Mp=a("li"),$re=a("strong"),pdo=o("detr"),_do=o(" \u2014 "),YB=a("a"),udo=o("DetrModel"),bdo=o(" (DETR model)"),vdo=l(),Ep=a("li"),Ire=a("strong"),Fdo=o("distilbert"),Tdo=o(" \u2014 "),KB=a("a"),Mdo=o("DistilBertModel"),Edo=o(" (DistilBERT model)"),Cdo=l(),Cp=a("li"),qre=a("strong"),wdo=o("dpr"),Ado=o(" \u2014 "),ZB=a("a"),ydo=o("DPRQuestionEncoder"),Ldo=o(" (DPR model)"),xdo=l(),wp=a("li"),Nre=a("strong"),kdo=o("dpt"),Sdo=o(" \u2014 "),eP=a("a"),Rdo=o("DPTModel"),Bdo=o(" (DPT model)"),Pdo=l(),Ap=a("li"),jre=a("strong"),$do=o("electra"),Ido=o(" \u2014 "),oP=a("a"),qdo=o("ElectraModel"),Ndo=o(" (ELECTRA model)"),jdo=l(),yp=a("li"),Dre=a("strong"),Ddo=o("flaubert"),Gdo=o(" \u2014 "),rP=a("a"),Odo=o("FlaubertModel"),Vdo=o(" (FlauBERT model)"),Xdo=l(),Lp=a("li"),Gre=a("strong"),zdo=o("fnet"),Qdo=o(" \u2014 "),tP=a("a"),Wdo=o("FNetModel"),Hdo=o(" (FNet model)"),Udo=l(),xp=a("li"),Ore=a("strong"),Jdo=o("fsmt"),Ydo=o(" \u2014 "),aP=a("a"),Kdo=o("FSMTModel"),Zdo=o(" (FairSeq Machine-Translation model)"),eco=l(),Vs=a("li"),Vre=a("strong"),oco=o("funnel"),rco=o(" \u2014 "),nP=a("a"),tco=o("FunnelModel"),aco=o(" or "),sP=a("a"),nco=o("FunnelBaseModel"),sco=o(" (Funnel Transformer model)"),lco=l(),kp=a("li"),Xre=a("strong"),ico=o("glpn"),dco=o(" \u2014 "),lP=a("a"),cco=o("GLPNModel"),fco=o(" (GLPN model)"),mco=l(),Sp=a("li"),zre=a("strong"),gco=o("gpt2"),hco=o(" \u2014 "),iP=a("a"),pco=o("GPT2Model"),_co=o(" (OpenAI GPT-2 model)"),uco=l(),Rp=a("li"),Qre=a("strong"),bco=o("gpt_neo"),vco=o(" \u2014 "),dP=a("a"),Fco=o("GPTNeoModel"),Tco=o(" (GPT Neo model)"),Mco=l(),Bp=a("li"),Wre=a("strong"),Eco=o("gpt_neox"),Cco=o(" \u2014 "),cP=a("a"),wco=o("GPTNeoXModel"),Aco=o(" (GPTNeoX model)"),yco=l(),Pp=a("li"),Hre=a("strong"),Lco=o("gptj"),xco=o(" \u2014 "),fP=a("a"),kco=o("GPTJModel"),Sco=o(" (GPT-J model)"),Rco=l(),$p=a("li"),Ure=a("strong"),Bco=o("hubert"),Pco=o(" \u2014 "),mP=a("a"),$co=o("HubertModel"),Ico=o(" (Hubert model)"),qco=l(),Ip=a("li"),Jre=a("strong"),Nco=o("ibert"),jco=o(" \u2014 "),gP=a("a"),Dco=o("IBertModel"),Gco=o(" (I-BERT model)"),Oco=l(),qp=a("li"),Yre=a("strong"),Vco=o("imagegpt"),Xco=o(" \u2014 "),hP=a("a"),zco=o("ImageGPTModel"),Qco=o(" (ImageGPT model)"),Wco=l(),Np=a("li"),Kre=a("strong"),Hco=o("layoutlm"),Uco=o(" \u2014 "),pP=a("a"),Jco=o("LayoutLMModel"),Yco=o(" (LayoutLM model)"),Kco=l(),jp=a("li"),Zre=a("strong"),Zco=o("layoutlmv2"),efo=o(" \u2014 "),_P=a("a"),ofo=o("LayoutLMv2Model"),rfo=o(" (LayoutLMv2 model)"),tfo=l(),Dp=a("li"),ete=a("strong"),afo=o("led"),nfo=o(" \u2014 "),uP=a("a"),sfo=o("LEDModel"),lfo=o(" (LED model)"),ifo=l(),Gp=a("li"),ote=a("strong"),dfo=o("longformer"),cfo=o(" \u2014 "),bP=a("a"),ffo=o("LongformerModel"),mfo=o(" (Longformer model)"),gfo=l(),Op=a("li"),rte=a("strong"),hfo=o("luke"),pfo=o(" \u2014 "),vP=a("a"),_fo=o("LukeModel"),ufo=o(" (LUKE model)"),bfo=l(),Vp=a("li"),tte=a("strong"),vfo=o("lxmert"),Ffo=o(" \u2014 "),FP=a("a"),Tfo=o("LxmertModel"),Mfo=o(" (LXMERT model)"),Efo=l(),Xp=a("li"),ate=a("strong"),Cfo=o("m2m_100"),wfo=o(" \u2014 "),TP=a("a"),Afo=o("M2M100Model"),yfo=o(" (M2M100 model)"),Lfo=l(),zp=a("li"),nte=a("strong"),xfo=o("marian"),kfo=o(" \u2014 "),MP=a("a"),Sfo=o("MarianModel"),Rfo=o(" (Marian model)"),Bfo=l(),Qp=a("li"),ste=a("strong"),Pfo=o("maskformer"),$fo=o(" \u2014 "),EP=a("a"),Ifo=o("MaskFormerModel"),qfo=o(" (MaskFormer model)"),Nfo=l(),Wp=a("li"),lte=a("strong"),jfo=o("mbart"),Dfo=o(" \u2014 "),CP=a("a"),Gfo=o("MBartModel"),Ofo=o(" (mBART model)"),Vfo=l(),Hp=a("li"),ite=a("strong"),Xfo=o("megatron-bert"),zfo=o(" \u2014 "),wP=a("a"),Qfo=o("MegatronBertModel"),Wfo=o(" (MegatronBert model)"),Hfo=l(),Up=a("li"),dte=a("strong"),Ufo=o("mobilebert"),Jfo=o(" \u2014 "),AP=a("a"),Yfo=o("MobileBertModel"),Kfo=o(" (MobileBERT model)"),Zfo=l(),Jp=a("li"),cte=a("strong"),emo=o("mpnet"),omo=o(" \u2014 "),yP=a("a"),rmo=o("MPNetModel"),tmo=o(" (MPNet model)"),amo=l(),Yp=a("li"),fte=a("strong"),nmo=o("mt5"),smo=o(" \u2014 "),LP=a("a"),lmo=o("MT5Model"),imo=o(" (mT5 model)"),dmo=l(),Kp=a("li"),mte=a("strong"),cmo=o("nystromformer"),fmo=o(" \u2014 "),xP=a("a"),mmo=o("NystromformerModel"),gmo=o(" (Nystromformer model)"),hmo=l(),Zp=a("li"),gte=a("strong"),pmo=o("openai-gpt"),_mo=o(" \u2014 "),kP=a("a"),umo=o("OpenAIGPTModel"),bmo=o(" (OpenAI GPT model)"),vmo=l(),e_=a("li"),hte=a("strong"),Fmo=o("pegasus"),Tmo=o(" \u2014 "),SP=a("a"),Mmo=o("PegasusModel"),Emo=o(" (Pegasus model)"),Cmo=l(),o_=a("li"),pte=a("strong"),wmo=o("perceiver"),Amo=o(" \u2014 "),RP=a("a"),ymo=o("PerceiverModel"),Lmo=o(" (Perceiver model)"),xmo=l(),r_=a("li"),_te=a("strong"),kmo=o("plbart"),Smo=o(" \u2014 "),BP=a("a"),Rmo=o("PLBartModel"),Bmo=o(" (PLBart model)"),Pmo=l(),t_=a("li"),ute=a("strong"),$mo=o("poolformer"),Imo=o(" \u2014 "),PP=a("a"),qmo=o("PoolFormerModel"),Nmo=o(" (PoolFormer model)"),jmo=l(),a_=a("li"),bte=a("strong"),Dmo=o("prophetnet"),Gmo=o(" \u2014 "),$P=a("a"),Omo=o("ProphetNetModel"),Vmo=o(" (ProphetNet model)"),Xmo=l(),n_=a("li"),vte=a("strong"),zmo=o("qdqbert"),Qmo=o(" \u2014 "),IP=a("a"),Wmo=o("QDQBertModel"),Hmo=o(" (QDQBert model)"),Umo=l(),s_=a("li"),Fte=a("strong"),Jmo=o("reformer"),Ymo=o(" \u2014 "),qP=a("a"),Kmo=o("ReformerModel"),Zmo=o(" (Reformer model)"),ego=l(),l_=a("li"),Tte=a("strong"),ogo=o("regnet"),rgo=o(" \u2014 "),NP=a("a"),tgo=o("RegNetModel"),ago=o(" (RegNet model)"),ngo=l(),i_=a("li"),Mte=a("strong"),sgo=o("rembert"),lgo=o(" \u2014 "),jP=a("a"),igo=o("RemBertModel"),dgo=o(" (RemBERT model)"),cgo=l(),d_=a("li"),Ete=a("strong"),fgo=o("resnet"),mgo=o(" \u2014 "),DP=a("a"),ggo=o("ResNetModel"),hgo=o(" (ResNet model)"),pgo=l(),c_=a("li"),Cte=a("strong"),_go=o("retribert"),ugo=o(" \u2014 "),GP=a("a"),bgo=o("RetriBertModel"),vgo=o(" (RetriBERT model)"),Fgo=l(),f_=a("li"),wte=a("strong"),Tgo=o("roberta"),Mgo=o(" \u2014 "),OP=a("a"),Ego=o("RobertaModel"),Cgo=o(" (RoBERTa model)"),wgo=l(),m_=a("li"),Ate=a("strong"),Ago=o("roformer"),ygo=o(" \u2014 "),VP=a("a"),Lgo=o("RoFormerModel"),xgo=o(" (RoFormer model)"),kgo=l(),g_=a("li"),yte=a("strong"),Sgo=o("segformer"),Rgo=o(" \u2014 "),XP=a("a"),Bgo=o("SegformerModel"),Pgo=o(" (SegFormer model)"),$go=l(),h_=a("li"),Lte=a("strong"),Igo=o("sew"),qgo=o(" \u2014 "),zP=a("a"),Ngo=o("SEWModel"),jgo=o(" (SEW model)"),Dgo=l(),p_=a("li"),xte=a("strong"),Ggo=o("sew-d"),Ogo=o(" \u2014 "),QP=a("a"),Vgo=o("SEWDModel"),Xgo=o(" (SEW-D model)"),zgo=l(),__=a("li"),kte=a("strong"),Qgo=o("speech_to_text"),Wgo=o(" \u2014 "),WP=a("a"),Hgo=o("Speech2TextModel"),Ugo=o(" (Speech2Text model)"),Jgo=l(),u_=a("li"),Ste=a("strong"),Ygo=o("splinter"),Kgo=o(" \u2014 "),HP=a("a"),Zgo=o("SplinterModel"),eho=o(" (Splinter model)"),oho=l(),b_=a("li"),Rte=a("strong"),rho=o("squeezebert"),tho=o(" \u2014 "),UP=a("a"),aho=o("SqueezeBertModel"),nho=o(" (SqueezeBERT model)"),sho=l(),v_=a("li"),Bte=a("strong"),lho=o("swin"),iho=o(" \u2014 "),JP=a("a"),dho=o("SwinModel"),cho=o(" (Swin model)"),fho=l(),F_=a("li"),Pte=a("strong"),mho=o("t5"),gho=o(" \u2014 "),YP=a("a"),hho=o("T5Model"),pho=o(" (T5 model)"),_ho=l(),T_=a("li"),$te=a("strong"),uho=o("tapas"),bho=o(" \u2014 "),KP=a("a"),vho=o("TapasModel"),Fho=o(" (TAPAS model)"),Tho=l(),M_=a("li"),Ite=a("strong"),Mho=o("transfo-xl"),Eho=o(" \u2014 "),ZP=a("a"),Cho=o("TransfoXLModel"),who=o(" (Transformer-XL model)"),Aho=l(),E_=a("li"),qte=a("strong"),yho=o("unispeech"),Lho=o(" \u2014 "),e$=a("a"),xho=o("UniSpeechModel"),kho=o(" (UniSpeech model)"),Sho=l(),C_=a("li"),Nte=a("strong"),Rho=o("unispeech-sat"),Bho=o(" \u2014 "),o$=a("a"),Pho=o("UniSpeechSatModel"),$ho=o(" (UniSpeechSat model)"),Iho=l(),w_=a("li"),jte=a("strong"),qho=o("van"),Nho=o(" \u2014 "),r$=a("a"),jho=o("VanModel"),Dho=o(" (VAN model)"),Gho=l(),A_=a("li"),Dte=a("strong"),Oho=o("vilt"),Vho=o(" \u2014 "),t$=a("a"),Xho=o("ViltModel"),zho=o(" (ViLT model)"),Qho=l(),y_=a("li"),Gte=a("strong"),Who=o("vision-text-dual-encoder"),Hho=o(" \u2014 "),a$=a("a"),Uho=o("VisionTextDualEncoderModel"),Jho=o(" (VisionTextDualEncoder model)"),Yho=l(),L_=a("li"),Ote=a("strong"),Kho=o("visual_bert"),Zho=o(" \u2014 "),n$=a("a"),epo=o("VisualBertModel"),opo=o(" (VisualBert model)"),rpo=l(),x_=a("li"),Vte=a("strong"),tpo=o("vit"),apo=o(" \u2014 "),s$=a("a"),npo=o("ViTModel"),spo=o(" (ViT model)"),lpo=l(),k_=a("li"),Xte=a("strong"),ipo=o("vit_mae"),dpo=o(" \u2014 "),l$=a("a"),cpo=o("ViTMAEModel"),fpo=o(" (ViTMAE model)"),mpo=l(),S_=a("li"),zte=a("strong"),gpo=o("wav2vec2"),hpo=o(" \u2014 "),i$=a("a"),ppo=o("Wav2Vec2Model"),_po=o(" (Wav2Vec2 model)"),upo=l(),R_=a("li"),Qte=a("strong"),bpo=o("wavlm"),vpo=o(" \u2014 "),d$=a("a"),Fpo=o("WavLMModel"),Tpo=o(" (WavLM model)"),Mpo=l(),B_=a("li"),Wte=a("strong"),Epo=o("xglm"),Cpo=o(" \u2014 "),c$=a("a"),wpo=o("XGLMModel"),Apo=o(" (XGLM model)"),ypo=l(),P_=a("li"),Hte=a("strong"),Lpo=o("xlm"),xpo=o(" \u2014 "),f$=a("a"),kpo=o("XLMModel"),Spo=o(" (XLM model)"),Rpo=l(),$_=a("li"),Ute=a("strong"),Bpo=o("xlm-prophetnet"),Ppo=o(" \u2014 "),m$=a("a"),$po=o("XLMProphetNetModel"),Ipo=o(" (XLMProphetNet model)"),qpo=l(),I_=a("li"),Jte=a("strong"),Npo=o("xlm-roberta"),jpo=o(" \u2014 "),g$=a("a"),Dpo=o("XLMRobertaModel"),Gpo=o(" (XLM-RoBERTa model)"),Opo=l(),q_=a("li"),Yte=a("strong"),Vpo=o("xlm-roberta-xl"),Xpo=o(" \u2014 "),h$=a("a"),zpo=o("XLMRobertaXLModel"),Qpo=o(" (XLM-RoBERTa-XL model)"),Wpo=l(),N_=a("li"),Kte=a("strong"),Hpo=o("xlnet"),Upo=o(" \u2014 "),p$=a("a"),Jpo=o("XLNetModel"),Ypo=o(" (XLNet model)"),Kpo=l(),j_=a("li"),Zte=a("strong"),Zpo=o("yoso"),e_o=o(" \u2014 "),_$=a("a"),o_o=o("YosoModel"),r_o=o(" (YOSO model)"),t_o=l(),D_=a("p"),a_o=o("The model is set in evaluation mode by default using "),eae=a("code"),n_o=o("model.eval()"),s_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oae=a("code"),l_o=o("model.train()"),i_o=l(),rae=a("p"),d_o=o("Examples:"),c_o=l(),f(vC.$$.fragment),pBe=l(),td=a("h2"),G_=a("a"),tae=a("span"),f(FC.$$.fragment),f_o=l(),aae=a("span"),m_o=o("AutoModelForPreTraining"),_Be=l(),Yo=a("div"),f(TC.$$.fragment),g_o=l(),ad=a("p"),h_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),u$=a("a"),p_o=o("from_pretrained()"),__o=o(" class method or the "),b$=a("a"),u_o=o("from_config()"),b_o=o(` class
method.`),v_o=l(),MC=a("p"),F_o=o("This class cannot be instantiated directly using "),nae=a("code"),T_o=o("__init__()"),M_o=o(" (throws an error)."),E_o=l(),zr=a("div"),f(EC.$$.fragment),C_o=l(),sae=a("p"),w_o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),A_o=l(),nd=a("p"),y_o=o(`Note:
Loading a model from its configuration file does `),lae=a("strong"),L_o=o("not"),x_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),v$=a("a"),k_o=o("from_pretrained()"),S_o=o(" to load the model weights."),R_o=l(),iae=a("p"),B_o=o("Examples:"),P_o=l(),f(CC.$$.fragment),$_o=l(),Ne=a("div"),f(wC.$$.fragment),I_o=l(),dae=a("p"),q_o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N_o=l(),za=a("p"),j_o=o("The model class to instantiate is selected based on the "),cae=a("code"),D_o=o("model_type"),G_o=o(` property of the config object (either
passed as an argument or loaded from `),fae=a("code"),O_o=o("pretrained_model_name_or_path"),V_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mae=a("code"),X_o=o("pretrained_model_name_or_path"),z_o=o(":"),Q_o=l(),S=a("ul"),O_=a("li"),gae=a("strong"),W_o=o("albert"),H_o=o(" \u2014 "),F$=a("a"),U_o=o("AlbertForPreTraining"),J_o=o(" (ALBERT model)"),Y_o=l(),V_=a("li"),hae=a("strong"),K_o=o("bart"),Z_o=o(" \u2014 "),T$=a("a"),euo=o("BartForConditionalGeneration"),ouo=o(" (BART model)"),ruo=l(),X_=a("li"),pae=a("strong"),tuo=o("bert"),auo=o(" \u2014 "),M$=a("a"),nuo=o("BertForPreTraining"),suo=o(" (BERT model)"),luo=l(),z_=a("li"),_ae=a("strong"),iuo=o("big_bird"),duo=o(" \u2014 "),E$=a("a"),cuo=o("BigBirdForPreTraining"),fuo=o(" (BigBird model)"),muo=l(),Q_=a("li"),uae=a("strong"),guo=o("camembert"),huo=o(" \u2014 "),C$=a("a"),puo=o("CamembertForMaskedLM"),_uo=o(" (CamemBERT model)"),uuo=l(),W_=a("li"),bae=a("strong"),buo=o("ctrl"),vuo=o(" \u2014 "),w$=a("a"),Fuo=o("CTRLLMHeadModel"),Tuo=o(" (CTRL model)"),Muo=l(),H_=a("li"),vae=a("strong"),Euo=o("data2vec-text"),Cuo=o(" \u2014 "),A$=a("a"),wuo=o("Data2VecTextForMaskedLM"),Auo=o(" (Data2VecText model)"),yuo=l(),U_=a("li"),Fae=a("strong"),Luo=o("deberta"),xuo=o(" \u2014 "),y$=a("a"),kuo=o("DebertaForMaskedLM"),Suo=o(" (DeBERTa model)"),Ruo=l(),J_=a("li"),Tae=a("strong"),Buo=o("deberta-v2"),Puo=o(" \u2014 "),L$=a("a"),$uo=o("DebertaV2ForMaskedLM"),Iuo=o(" (DeBERTa-v2 model)"),quo=l(),Y_=a("li"),Mae=a("strong"),Nuo=o("distilbert"),juo=o(" \u2014 "),x$=a("a"),Duo=o("DistilBertForMaskedLM"),Guo=o(" (DistilBERT model)"),Ouo=l(),K_=a("li"),Eae=a("strong"),Vuo=o("electra"),Xuo=o(" \u2014 "),k$=a("a"),zuo=o("ElectraForPreTraining"),Quo=o(" (ELECTRA model)"),Wuo=l(),Z_=a("li"),Cae=a("strong"),Huo=o("flaubert"),Uuo=o(" \u2014 "),S$=a("a"),Juo=o("FlaubertWithLMHeadModel"),Yuo=o(" (FlauBERT model)"),Kuo=l(),eu=a("li"),wae=a("strong"),Zuo=o("fnet"),e6o=o(" \u2014 "),R$=a("a"),o6o=o("FNetForPreTraining"),r6o=o(" (FNet model)"),t6o=l(),ou=a("li"),Aae=a("strong"),a6o=o("fsmt"),n6o=o(" \u2014 "),B$=a("a"),s6o=o("FSMTForConditionalGeneration"),l6o=o(" (FairSeq Machine-Translation model)"),i6o=l(),ru=a("li"),yae=a("strong"),d6o=o("funnel"),c6o=o(" \u2014 "),P$=a("a"),f6o=o("FunnelForPreTraining"),m6o=o(" (Funnel Transformer model)"),g6o=l(),tu=a("li"),Lae=a("strong"),h6o=o("gpt2"),p6o=o(" \u2014 "),$$=a("a"),_6o=o("GPT2LMHeadModel"),u6o=o(" (OpenAI GPT-2 model)"),b6o=l(),au=a("li"),xae=a("strong"),v6o=o("ibert"),F6o=o(" \u2014 "),I$=a("a"),T6o=o("IBertForMaskedLM"),M6o=o(" (I-BERT model)"),E6o=l(),nu=a("li"),kae=a("strong"),C6o=o("layoutlm"),w6o=o(" \u2014 "),q$=a("a"),A6o=o("LayoutLMForMaskedLM"),y6o=o(" (LayoutLM model)"),L6o=l(),su=a("li"),Sae=a("strong"),x6o=o("longformer"),k6o=o(" \u2014 "),N$=a("a"),S6o=o("LongformerForMaskedLM"),R6o=o(" (Longformer model)"),B6o=l(),lu=a("li"),Rae=a("strong"),P6o=o("lxmert"),$6o=o(" \u2014 "),j$=a("a"),I6o=o("LxmertForPreTraining"),q6o=o(" (LXMERT model)"),N6o=l(),iu=a("li"),Bae=a("strong"),j6o=o("megatron-bert"),D6o=o(" \u2014 "),D$=a("a"),G6o=o("MegatronBertForPreTraining"),O6o=o(" (MegatronBert model)"),V6o=l(),du=a("li"),Pae=a("strong"),X6o=o("mobilebert"),z6o=o(" \u2014 "),G$=a("a"),Q6o=o("MobileBertForPreTraining"),W6o=o(" (MobileBERT model)"),H6o=l(),cu=a("li"),$ae=a("strong"),U6o=o("mpnet"),J6o=o(" \u2014 "),O$=a("a"),Y6o=o("MPNetForMaskedLM"),K6o=o(" (MPNet model)"),Z6o=l(),fu=a("li"),Iae=a("strong"),e1o=o("openai-gpt"),o1o=o(" \u2014 "),V$=a("a"),r1o=o("OpenAIGPTLMHeadModel"),t1o=o(" (OpenAI GPT model)"),a1o=l(),mu=a("li"),qae=a("strong"),n1o=o("retribert"),s1o=o(" \u2014 "),X$=a("a"),l1o=o("RetriBertModel"),i1o=o(" (RetriBERT model)"),d1o=l(),gu=a("li"),Nae=a("strong"),c1o=o("roberta"),f1o=o(" \u2014 "),z$=a("a"),m1o=o("RobertaForMaskedLM"),g1o=o(" (RoBERTa model)"),h1o=l(),hu=a("li"),jae=a("strong"),p1o=o("squeezebert"),_1o=o(" \u2014 "),Q$=a("a"),u1o=o("SqueezeBertForMaskedLM"),b1o=o(" (SqueezeBERT model)"),v1o=l(),pu=a("li"),Dae=a("strong"),F1o=o("t5"),T1o=o(" \u2014 "),W$=a("a"),M1o=o("T5ForConditionalGeneration"),E1o=o(" (T5 model)"),C1o=l(),_u=a("li"),Gae=a("strong"),w1o=o("tapas"),A1o=o(" \u2014 "),H$=a("a"),y1o=o("TapasForMaskedLM"),L1o=o(" (TAPAS model)"),x1o=l(),uu=a("li"),Oae=a("strong"),k1o=o("transfo-xl"),S1o=o(" \u2014 "),U$=a("a"),R1o=o("TransfoXLLMHeadModel"),B1o=o(" (Transformer-XL model)"),P1o=l(),bu=a("li"),Vae=a("strong"),$1o=o("unispeech"),I1o=o(" \u2014 "),J$=a("a"),q1o=o("UniSpeechForPreTraining"),N1o=o(" (UniSpeech model)"),j1o=l(),vu=a("li"),Xae=a("strong"),D1o=o("unispeech-sat"),G1o=o(" \u2014 "),Y$=a("a"),O1o=o("UniSpeechSatForPreTraining"),V1o=o(" (UniSpeechSat model)"),X1o=l(),Fu=a("li"),zae=a("strong"),z1o=o("visual_bert"),Q1o=o(" \u2014 "),K$=a("a"),W1o=o("VisualBertForPreTraining"),H1o=o(" (VisualBert model)"),U1o=l(),Tu=a("li"),Qae=a("strong"),J1o=o("vit_mae"),Y1o=o(" \u2014 "),Z$=a("a"),K1o=o("ViTMAEForPreTraining"),Z1o=o(" (ViTMAE model)"),ebo=l(),Mu=a("li"),Wae=a("strong"),obo=o("wav2vec2"),rbo=o(" \u2014 "),eI=a("a"),tbo=o("Wav2Vec2ForPreTraining"),abo=o(" (Wav2Vec2 model)"),nbo=l(),Eu=a("li"),Hae=a("strong"),sbo=o("xlm"),lbo=o(" \u2014 "),oI=a("a"),ibo=o("XLMWithLMHeadModel"),dbo=o(" (XLM model)"),cbo=l(),Cu=a("li"),Uae=a("strong"),fbo=o("xlm-roberta"),mbo=o(" \u2014 "),rI=a("a"),gbo=o("XLMRobertaForMaskedLM"),hbo=o(" (XLM-RoBERTa model)"),pbo=l(),wu=a("li"),Jae=a("strong"),_bo=o("xlm-roberta-xl"),ubo=o(" \u2014 "),tI=a("a"),bbo=o("XLMRobertaXLForMaskedLM"),vbo=o(" (XLM-RoBERTa-XL model)"),Fbo=l(),Au=a("li"),Yae=a("strong"),Tbo=o("xlnet"),Mbo=o(" \u2014 "),aI=a("a"),Ebo=o("XLNetLMHeadModel"),Cbo=o(" (XLNet model)"),wbo=l(),yu=a("p"),Abo=o("The model is set in evaluation mode by default using "),Kae=a("code"),ybo=o("model.eval()"),Lbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zae=a("code"),xbo=o("model.train()"),kbo=l(),ene=a("p"),Sbo=o("Examples:"),Rbo=l(),f(AC.$$.fragment),uBe=l(),sd=a("h2"),Lu=a("a"),one=a("span"),f(yC.$$.fragment),Bbo=l(),rne=a("span"),Pbo=o("AutoModelForCausalLM"),bBe=l(),Ko=a("div"),f(LC.$$.fragment),$bo=l(),ld=a("p"),Ibo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nI=a("a"),qbo=o("from_pretrained()"),Nbo=o(" class method or the "),sI=a("a"),jbo=o("from_config()"),Dbo=o(` class
method.`),Gbo=l(),xC=a("p"),Obo=o("This class cannot be instantiated directly using "),tne=a("code"),Vbo=o("__init__()"),Xbo=o(" (throws an error)."),zbo=l(),Qr=a("div"),f(kC.$$.fragment),Qbo=l(),ane=a("p"),Wbo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Hbo=l(),id=a("p"),Ubo=o(`Note:
Loading a model from its configuration file does `),nne=a("strong"),Jbo=o("not"),Ybo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lI=a("a"),Kbo=o("from_pretrained()"),Zbo=o(" to load the model weights."),e2o=l(),sne=a("p"),o2o=o("Examples:"),r2o=l(),f(SC.$$.fragment),t2o=l(),je=a("div"),f(RC.$$.fragment),a2o=l(),lne=a("p"),n2o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),s2o=l(),Qa=a("p"),l2o=o("The model class to instantiate is selected based on the "),ine=a("code"),i2o=o("model_type"),d2o=o(` property of the config object (either
passed as an argument or loaded from `),dne=a("code"),c2o=o("pretrained_model_name_or_path"),f2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cne=a("code"),m2o=o("pretrained_model_name_or_path"),g2o=o(":"),h2o=l(),$=a("ul"),xu=a("li"),fne=a("strong"),p2o=o("bart"),_2o=o(" \u2014 "),iI=a("a"),u2o=o("BartForCausalLM"),b2o=o(" (BART model)"),v2o=l(),ku=a("li"),mne=a("strong"),F2o=o("bert"),T2o=o(" \u2014 "),dI=a("a"),M2o=o("BertLMHeadModel"),E2o=o(" (BERT model)"),C2o=l(),Su=a("li"),gne=a("strong"),w2o=o("bert-generation"),A2o=o(" \u2014 "),cI=a("a"),y2o=o("BertGenerationDecoder"),L2o=o(" (Bert Generation model)"),x2o=l(),Ru=a("li"),hne=a("strong"),k2o=o("big_bird"),S2o=o(" \u2014 "),fI=a("a"),R2o=o("BigBirdForCausalLM"),B2o=o(" (BigBird model)"),P2o=l(),Bu=a("li"),pne=a("strong"),$2o=o("bigbird_pegasus"),I2o=o(" \u2014 "),mI=a("a"),q2o=o("BigBirdPegasusForCausalLM"),N2o=o(" (BigBirdPegasus model)"),j2o=l(),Pu=a("li"),_ne=a("strong"),D2o=o("blenderbot"),G2o=o(" \u2014 "),gI=a("a"),O2o=o("BlenderbotForCausalLM"),V2o=o(" (Blenderbot model)"),X2o=l(),$u=a("li"),une=a("strong"),z2o=o("blenderbot-small"),Q2o=o(" \u2014 "),hI=a("a"),W2o=o("BlenderbotSmallForCausalLM"),H2o=o(" (BlenderbotSmall model)"),U2o=l(),Iu=a("li"),bne=a("strong"),J2o=o("camembert"),Y2o=o(" \u2014 "),pI=a("a"),K2o=o("CamembertForCausalLM"),Z2o=o(" (CamemBERT model)"),e5o=l(),qu=a("li"),vne=a("strong"),o5o=o("ctrl"),r5o=o(" \u2014 "),_I=a("a"),t5o=o("CTRLLMHeadModel"),a5o=o(" (CTRL model)"),n5o=l(),Nu=a("li"),Fne=a("strong"),s5o=o("data2vec-text"),l5o=o(" \u2014 "),uI=a("a"),i5o=o("Data2VecTextForCausalLM"),d5o=o(" (Data2VecText model)"),c5o=l(),ju=a("li"),Tne=a("strong"),f5o=o("electra"),m5o=o(" \u2014 "),bI=a("a"),g5o=o("ElectraForCausalLM"),h5o=o(" (ELECTRA model)"),p5o=l(),Du=a("li"),Mne=a("strong"),_5o=o("gpt2"),u5o=o(" \u2014 "),vI=a("a"),b5o=o("GPT2LMHeadModel"),v5o=o(" (OpenAI GPT-2 model)"),F5o=l(),Gu=a("li"),Ene=a("strong"),T5o=o("gpt_neo"),M5o=o(" \u2014 "),FI=a("a"),E5o=o("GPTNeoForCausalLM"),C5o=o(" (GPT Neo model)"),w5o=l(),Ou=a("li"),Cne=a("strong"),A5o=o("gpt_neox"),y5o=o(" \u2014 "),TI=a("a"),L5o=o("GPTNeoXForCausalLM"),x5o=o(" (GPTNeoX model)"),k5o=l(),Vu=a("li"),wne=a("strong"),S5o=o("gptj"),R5o=o(" \u2014 "),MI=a("a"),B5o=o("GPTJForCausalLM"),P5o=o(" (GPT-J model)"),$5o=l(),Xu=a("li"),Ane=a("strong"),I5o=o("marian"),q5o=o(" \u2014 "),EI=a("a"),N5o=o("MarianForCausalLM"),j5o=o(" (Marian model)"),D5o=l(),zu=a("li"),yne=a("strong"),G5o=o("mbart"),O5o=o(" \u2014 "),CI=a("a"),V5o=o("MBartForCausalLM"),X5o=o(" (mBART model)"),z5o=l(),Qu=a("li"),Lne=a("strong"),Q5o=o("megatron-bert"),W5o=o(" \u2014 "),wI=a("a"),H5o=o("MegatronBertForCausalLM"),U5o=o(" (MegatronBert model)"),J5o=l(),Wu=a("li"),xne=a("strong"),Y5o=o("openai-gpt"),K5o=o(" \u2014 "),AI=a("a"),Z5o=o("OpenAIGPTLMHeadModel"),evo=o(" (OpenAI GPT model)"),ovo=l(),Hu=a("li"),kne=a("strong"),rvo=o("pegasus"),tvo=o(" \u2014 "),yI=a("a"),avo=o("PegasusForCausalLM"),nvo=o(" (Pegasus model)"),svo=l(),Uu=a("li"),Sne=a("strong"),lvo=o("plbart"),ivo=o(" \u2014 "),LI=a("a"),dvo=o("PLBartForCausalLM"),cvo=o(" (PLBart model)"),fvo=l(),Ju=a("li"),Rne=a("strong"),mvo=o("prophetnet"),gvo=o(" \u2014 "),xI=a("a"),hvo=o("ProphetNetForCausalLM"),pvo=o(" (ProphetNet model)"),_vo=l(),Yu=a("li"),Bne=a("strong"),uvo=o("qdqbert"),bvo=o(" \u2014 "),kI=a("a"),vvo=o("QDQBertLMHeadModel"),Fvo=o(" (QDQBert model)"),Tvo=l(),Ku=a("li"),Pne=a("strong"),Mvo=o("reformer"),Evo=o(" \u2014 "),SI=a("a"),Cvo=o("ReformerModelWithLMHead"),wvo=o(" (Reformer model)"),Avo=l(),Zu=a("li"),$ne=a("strong"),yvo=o("rembert"),Lvo=o(" \u2014 "),RI=a("a"),xvo=o("RemBertForCausalLM"),kvo=o(" (RemBERT model)"),Svo=l(),e6=a("li"),Ine=a("strong"),Rvo=o("roberta"),Bvo=o(" \u2014 "),BI=a("a"),Pvo=o("RobertaForCausalLM"),$vo=o(" (RoBERTa model)"),Ivo=l(),o6=a("li"),qne=a("strong"),qvo=o("roformer"),Nvo=o(" \u2014 "),PI=a("a"),jvo=o("RoFormerForCausalLM"),Dvo=o(" (RoFormer model)"),Gvo=l(),r6=a("li"),Nne=a("strong"),Ovo=o("speech_to_text_2"),Vvo=o(" \u2014 "),$I=a("a"),Xvo=o("Speech2Text2ForCausalLM"),zvo=o(" (Speech2Text2 model)"),Qvo=l(),t6=a("li"),jne=a("strong"),Wvo=o("transfo-xl"),Hvo=o(" \u2014 "),II=a("a"),Uvo=o("TransfoXLLMHeadModel"),Jvo=o(" (Transformer-XL model)"),Yvo=l(),a6=a("li"),Dne=a("strong"),Kvo=o("trocr"),Zvo=o(" \u2014 "),qI=a("a"),eFo=o("TrOCRForCausalLM"),oFo=o(" (TrOCR model)"),rFo=l(),n6=a("li"),Gne=a("strong"),tFo=o("xglm"),aFo=o(" \u2014 "),NI=a("a"),nFo=o("XGLMForCausalLM"),sFo=o(" (XGLM model)"),lFo=l(),s6=a("li"),One=a("strong"),iFo=o("xlm"),dFo=o(" \u2014 "),jI=a("a"),cFo=o("XLMWithLMHeadModel"),fFo=o(" (XLM model)"),mFo=l(),l6=a("li"),Vne=a("strong"),gFo=o("xlm-prophetnet"),hFo=o(" \u2014 "),DI=a("a"),pFo=o("XLMProphetNetForCausalLM"),_Fo=o(" (XLMProphetNet model)"),uFo=l(),i6=a("li"),Xne=a("strong"),bFo=o("xlm-roberta"),vFo=o(" \u2014 "),GI=a("a"),FFo=o("XLMRobertaForCausalLM"),TFo=o(" (XLM-RoBERTa model)"),MFo=l(),d6=a("li"),zne=a("strong"),EFo=o("xlm-roberta-xl"),CFo=o(" \u2014 "),OI=a("a"),wFo=o("XLMRobertaXLForCausalLM"),AFo=o(" (XLM-RoBERTa-XL model)"),yFo=l(),c6=a("li"),Qne=a("strong"),LFo=o("xlnet"),xFo=o(" \u2014 "),VI=a("a"),kFo=o("XLNetLMHeadModel"),SFo=o(" (XLNet model)"),RFo=l(),f6=a("p"),BFo=o("The model is set in evaluation mode by default using "),Wne=a("code"),PFo=o("model.eval()"),$Fo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hne=a("code"),IFo=o("model.train()"),qFo=l(),Une=a("p"),NFo=o("Examples:"),jFo=l(),f(BC.$$.fragment),vBe=l(),dd=a("h2"),m6=a("a"),Jne=a("span"),f(PC.$$.fragment),DFo=l(),Yne=a("span"),GFo=o("AutoModelForMaskedLM"),FBe=l(),Zo=a("div"),f($C.$$.fragment),OFo=l(),cd=a("p"),VFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XI=a("a"),XFo=o("from_pretrained()"),zFo=o(" class method or the "),zI=a("a"),QFo=o("from_config()"),WFo=o(` class
method.`),HFo=l(),IC=a("p"),UFo=o("This class cannot be instantiated directly using "),Kne=a("code"),JFo=o("__init__()"),YFo=o(" (throws an error)."),KFo=l(),Wr=a("div"),f(qC.$$.fragment),ZFo=l(),Zne=a("p"),eTo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oTo=l(),fd=a("p"),rTo=o(`Note:
Loading a model from its configuration file does `),ese=a("strong"),tTo=o("not"),aTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QI=a("a"),nTo=o("from_pretrained()"),sTo=o(" to load the model weights."),lTo=l(),ose=a("p"),iTo=o("Examples:"),dTo=l(),f(NC.$$.fragment),cTo=l(),De=a("div"),f(jC.$$.fragment),fTo=l(),rse=a("p"),mTo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gTo=l(),Wa=a("p"),hTo=o("The model class to instantiate is selected based on the "),tse=a("code"),pTo=o("model_type"),_To=o(` property of the config object (either
passed as an argument or loaded from `),ase=a("code"),uTo=o("pretrained_model_name_or_path"),bTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=a("code"),vTo=o("pretrained_model_name_or_path"),FTo=o(":"),TTo=l(),I=a("ul"),g6=a("li"),sse=a("strong"),MTo=o("albert"),ETo=o(" \u2014 "),WI=a("a"),CTo=o("AlbertForMaskedLM"),wTo=o(" (ALBERT model)"),ATo=l(),h6=a("li"),lse=a("strong"),yTo=o("bart"),LTo=o(" \u2014 "),HI=a("a"),xTo=o("BartForConditionalGeneration"),kTo=o(" (BART model)"),STo=l(),p6=a("li"),ise=a("strong"),RTo=o("bert"),BTo=o(" \u2014 "),UI=a("a"),PTo=o("BertForMaskedLM"),$To=o(" (BERT model)"),ITo=l(),_6=a("li"),dse=a("strong"),qTo=o("big_bird"),NTo=o(" \u2014 "),JI=a("a"),jTo=o("BigBirdForMaskedLM"),DTo=o(" (BigBird model)"),GTo=l(),u6=a("li"),cse=a("strong"),OTo=o("camembert"),VTo=o(" \u2014 "),YI=a("a"),XTo=o("CamembertForMaskedLM"),zTo=o(" (CamemBERT model)"),QTo=l(),b6=a("li"),fse=a("strong"),WTo=o("convbert"),HTo=o(" \u2014 "),KI=a("a"),UTo=o("ConvBertForMaskedLM"),JTo=o(" (ConvBERT model)"),YTo=l(),v6=a("li"),mse=a("strong"),KTo=o("data2vec-text"),ZTo=o(" \u2014 "),ZI=a("a"),e9o=o("Data2VecTextForMaskedLM"),o9o=o(" (Data2VecText model)"),r9o=l(),F6=a("li"),gse=a("strong"),t9o=o("deberta"),a9o=o(" \u2014 "),eq=a("a"),n9o=o("DebertaForMaskedLM"),s9o=o(" (DeBERTa model)"),l9o=l(),T6=a("li"),hse=a("strong"),i9o=o("deberta-v2"),d9o=o(" \u2014 "),oq=a("a"),c9o=o("DebertaV2ForMaskedLM"),f9o=o(" (DeBERTa-v2 model)"),m9o=l(),M6=a("li"),pse=a("strong"),g9o=o("distilbert"),h9o=o(" \u2014 "),rq=a("a"),p9o=o("DistilBertForMaskedLM"),_9o=o(" (DistilBERT model)"),u9o=l(),E6=a("li"),_se=a("strong"),b9o=o("electra"),v9o=o(" \u2014 "),tq=a("a"),F9o=o("ElectraForMaskedLM"),T9o=o(" (ELECTRA model)"),M9o=l(),C6=a("li"),use=a("strong"),E9o=o("flaubert"),C9o=o(" \u2014 "),aq=a("a"),w9o=o("FlaubertWithLMHeadModel"),A9o=o(" (FlauBERT model)"),y9o=l(),w6=a("li"),bse=a("strong"),L9o=o("fnet"),x9o=o(" \u2014 "),nq=a("a"),k9o=o("FNetForMaskedLM"),S9o=o(" (FNet model)"),R9o=l(),A6=a("li"),vse=a("strong"),B9o=o("funnel"),P9o=o(" \u2014 "),sq=a("a"),$9o=o("FunnelForMaskedLM"),I9o=o(" (Funnel Transformer model)"),q9o=l(),y6=a("li"),Fse=a("strong"),N9o=o("ibert"),j9o=o(" \u2014 "),lq=a("a"),D9o=o("IBertForMaskedLM"),G9o=o(" (I-BERT model)"),O9o=l(),L6=a("li"),Tse=a("strong"),V9o=o("layoutlm"),X9o=o(" \u2014 "),iq=a("a"),z9o=o("LayoutLMForMaskedLM"),Q9o=o(" (LayoutLM model)"),W9o=l(),x6=a("li"),Mse=a("strong"),H9o=o("longformer"),U9o=o(" \u2014 "),dq=a("a"),J9o=o("LongformerForMaskedLM"),Y9o=o(" (Longformer model)"),K9o=l(),k6=a("li"),Ese=a("strong"),Z9o=o("mbart"),eMo=o(" \u2014 "),cq=a("a"),oMo=o("MBartForConditionalGeneration"),rMo=o(" (mBART model)"),tMo=l(),S6=a("li"),Cse=a("strong"),aMo=o("megatron-bert"),nMo=o(" \u2014 "),fq=a("a"),sMo=o("MegatronBertForMaskedLM"),lMo=o(" (MegatronBert model)"),iMo=l(),R6=a("li"),wse=a("strong"),dMo=o("mobilebert"),cMo=o(" \u2014 "),mq=a("a"),fMo=o("MobileBertForMaskedLM"),mMo=o(" (MobileBERT model)"),gMo=l(),B6=a("li"),Ase=a("strong"),hMo=o("mpnet"),pMo=o(" \u2014 "),gq=a("a"),_Mo=o("MPNetForMaskedLM"),uMo=o(" (MPNet model)"),bMo=l(),P6=a("li"),yse=a("strong"),vMo=o("nystromformer"),FMo=o(" \u2014 "),hq=a("a"),TMo=o("NystromformerForMaskedLM"),MMo=o(" (Nystromformer model)"),EMo=l(),$6=a("li"),Lse=a("strong"),CMo=o("perceiver"),wMo=o(" \u2014 "),pq=a("a"),AMo=o("PerceiverForMaskedLM"),yMo=o(" (Perceiver model)"),LMo=l(),I6=a("li"),xse=a("strong"),xMo=o("qdqbert"),kMo=o(" \u2014 "),_q=a("a"),SMo=o("QDQBertForMaskedLM"),RMo=o(" (QDQBert model)"),BMo=l(),q6=a("li"),kse=a("strong"),PMo=o("reformer"),$Mo=o(" \u2014 "),uq=a("a"),IMo=o("ReformerForMaskedLM"),qMo=o(" (Reformer model)"),NMo=l(),N6=a("li"),Sse=a("strong"),jMo=o("rembert"),DMo=o(" \u2014 "),bq=a("a"),GMo=o("RemBertForMaskedLM"),OMo=o(" (RemBERT model)"),VMo=l(),j6=a("li"),Rse=a("strong"),XMo=o("roberta"),zMo=o(" \u2014 "),vq=a("a"),QMo=o("RobertaForMaskedLM"),WMo=o(" (RoBERTa model)"),HMo=l(),D6=a("li"),Bse=a("strong"),UMo=o("roformer"),JMo=o(" \u2014 "),Fq=a("a"),YMo=o("RoFormerForMaskedLM"),KMo=o(" (RoFormer model)"),ZMo=l(),G6=a("li"),Pse=a("strong"),e4o=o("squeezebert"),o4o=o(" \u2014 "),Tq=a("a"),r4o=o("SqueezeBertForMaskedLM"),t4o=o(" (SqueezeBERT model)"),a4o=l(),O6=a("li"),$se=a("strong"),n4o=o("tapas"),s4o=o(" \u2014 "),Mq=a("a"),l4o=o("TapasForMaskedLM"),i4o=o(" (TAPAS model)"),d4o=l(),V6=a("li"),Ise=a("strong"),c4o=o("wav2vec2"),f4o=o(" \u2014 "),qse=a("code"),m4o=o("Wav2Vec2ForMaskedLM"),g4o=o(" (Wav2Vec2 model)"),h4o=l(),X6=a("li"),Nse=a("strong"),p4o=o("xlm"),_4o=o(" \u2014 "),Eq=a("a"),u4o=o("XLMWithLMHeadModel"),b4o=o(" (XLM model)"),v4o=l(),z6=a("li"),jse=a("strong"),F4o=o("xlm-roberta"),T4o=o(" \u2014 "),Cq=a("a"),M4o=o("XLMRobertaForMaskedLM"),E4o=o(" (XLM-RoBERTa model)"),C4o=l(),Q6=a("li"),Dse=a("strong"),w4o=o("xlm-roberta-xl"),A4o=o(" \u2014 "),wq=a("a"),y4o=o("XLMRobertaXLForMaskedLM"),L4o=o(" (XLM-RoBERTa-XL model)"),x4o=l(),W6=a("li"),Gse=a("strong"),k4o=o("yoso"),S4o=o(" \u2014 "),Aq=a("a"),R4o=o("YosoForMaskedLM"),B4o=o(" (YOSO model)"),P4o=l(),H6=a("p"),$4o=o("The model is set in evaluation mode by default using "),Ose=a("code"),I4o=o("model.eval()"),q4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vse=a("code"),N4o=o("model.train()"),j4o=l(),Xse=a("p"),D4o=o("Examples:"),G4o=l(),f(DC.$$.fragment),TBe=l(),md=a("h2"),U6=a("a"),zse=a("span"),f(GC.$$.fragment),O4o=l(),Qse=a("span"),V4o=o("AutoModelForSeq2SeqLM"),MBe=l(),er=a("div"),f(OC.$$.fragment),X4o=l(),gd=a("p"),z4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yq=a("a"),Q4o=o("from_pretrained()"),W4o=o(" class method or the "),Lq=a("a"),H4o=o("from_config()"),U4o=o(` class
method.`),J4o=l(),VC=a("p"),Y4o=o("This class cannot be instantiated directly using "),Wse=a("code"),K4o=o("__init__()"),Z4o=o(" (throws an error)."),eEo=l(),Hr=a("div"),f(XC.$$.fragment),oEo=l(),Hse=a("p"),rEo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tEo=l(),hd=a("p"),aEo=o(`Note:
Loading a model from its configuration file does `),Use=a("strong"),nEo=o("not"),sEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=a("a"),lEo=o("from_pretrained()"),iEo=o(" to load the model weights."),dEo=l(),Jse=a("p"),cEo=o("Examples:"),fEo=l(),f(zC.$$.fragment),mEo=l(),Ge=a("div"),f(QC.$$.fragment),gEo=l(),Yse=a("p"),hEo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pEo=l(),Ha=a("p"),_Eo=o("The model class to instantiate is selected based on the "),Kse=a("code"),uEo=o("model_type"),bEo=o(` property of the config object (either
passed as an argument or loaded from `),Zse=a("code"),vEo=o("pretrained_model_name_or_path"),FEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=a("code"),TEo=o("pretrained_model_name_or_path"),MEo=o(":"),EEo=l(),ne=a("ul"),J6=a("li"),ole=a("strong"),CEo=o("bart"),wEo=o(" \u2014 "),kq=a("a"),AEo=o("BartForConditionalGeneration"),yEo=o(" (BART model)"),LEo=l(),Y6=a("li"),rle=a("strong"),xEo=o("bigbird_pegasus"),kEo=o(" \u2014 "),Sq=a("a"),SEo=o("BigBirdPegasusForConditionalGeneration"),REo=o(" (BigBirdPegasus model)"),BEo=l(),K6=a("li"),tle=a("strong"),PEo=o("blenderbot"),$Eo=o(" \u2014 "),Rq=a("a"),IEo=o("BlenderbotForConditionalGeneration"),qEo=o(" (Blenderbot model)"),NEo=l(),Z6=a("li"),ale=a("strong"),jEo=o("blenderbot-small"),DEo=o(" \u2014 "),Bq=a("a"),GEo=o("BlenderbotSmallForConditionalGeneration"),OEo=o(" (BlenderbotSmall model)"),VEo=l(),e1=a("li"),nle=a("strong"),XEo=o("encoder-decoder"),zEo=o(" \u2014 "),Pq=a("a"),QEo=o("EncoderDecoderModel"),WEo=o(" (Encoder decoder model)"),HEo=l(),o1=a("li"),sle=a("strong"),UEo=o("fsmt"),JEo=o(" \u2014 "),$q=a("a"),YEo=o("FSMTForConditionalGeneration"),KEo=o(" (FairSeq Machine-Translation model)"),ZEo=l(),r1=a("li"),lle=a("strong"),e3o=o("led"),o3o=o(" \u2014 "),Iq=a("a"),r3o=o("LEDForConditionalGeneration"),t3o=o(" (LED model)"),a3o=l(),t1=a("li"),ile=a("strong"),n3o=o("m2m_100"),s3o=o(" \u2014 "),qq=a("a"),l3o=o("M2M100ForConditionalGeneration"),i3o=o(" (M2M100 model)"),d3o=l(),a1=a("li"),dle=a("strong"),c3o=o("marian"),f3o=o(" \u2014 "),Nq=a("a"),m3o=o("MarianMTModel"),g3o=o(" (Marian model)"),h3o=l(),n1=a("li"),cle=a("strong"),p3o=o("mbart"),_3o=o(" \u2014 "),jq=a("a"),u3o=o("MBartForConditionalGeneration"),b3o=o(" (mBART model)"),v3o=l(),s1=a("li"),fle=a("strong"),F3o=o("mt5"),T3o=o(" \u2014 "),Dq=a("a"),M3o=o("MT5ForConditionalGeneration"),E3o=o(" (mT5 model)"),C3o=l(),l1=a("li"),mle=a("strong"),w3o=o("pegasus"),A3o=o(" \u2014 "),Gq=a("a"),y3o=o("PegasusForConditionalGeneration"),L3o=o(" (Pegasus model)"),x3o=l(),i1=a("li"),gle=a("strong"),k3o=o("plbart"),S3o=o(" \u2014 "),Oq=a("a"),R3o=o("PLBartForConditionalGeneration"),B3o=o(" (PLBart model)"),P3o=l(),d1=a("li"),hle=a("strong"),$3o=o("prophetnet"),I3o=o(" \u2014 "),Vq=a("a"),q3o=o("ProphetNetForConditionalGeneration"),N3o=o(" (ProphetNet model)"),j3o=l(),c1=a("li"),ple=a("strong"),D3o=o("t5"),G3o=o(" \u2014 "),Xq=a("a"),O3o=o("T5ForConditionalGeneration"),V3o=o(" (T5 model)"),X3o=l(),f1=a("li"),_le=a("strong"),z3o=o("tapex"),Q3o=o(" \u2014 "),zq=a("a"),W3o=o("BartForConditionalGeneration"),H3o=o(" (TAPEX model)"),U3o=l(),m1=a("li"),ule=a("strong"),J3o=o("xlm-prophetnet"),Y3o=o(" \u2014 "),Qq=a("a"),K3o=o("XLMProphetNetForConditionalGeneration"),Z3o=o(" (XLMProphetNet model)"),eCo=l(),g1=a("p"),oCo=o("The model is set in evaluation mode by default using "),ble=a("code"),rCo=o("model.eval()"),tCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=a("code"),aCo=o("model.train()"),nCo=l(),Fle=a("p"),sCo=o("Examples:"),lCo=l(),f(WC.$$.fragment),EBe=l(),pd=a("h2"),h1=a("a"),Tle=a("span"),f(HC.$$.fragment),iCo=l(),Mle=a("span"),dCo=o("AutoModelForSequenceClassification"),CBe=l(),or=a("div"),f(UC.$$.fragment),cCo=l(),_d=a("p"),fCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Wq=a("a"),mCo=o("from_pretrained()"),gCo=o(" class method or the "),Hq=a("a"),hCo=o("from_config()"),pCo=o(` class
method.`),_Co=l(),JC=a("p"),uCo=o("This class cannot be instantiated directly using "),Ele=a("code"),bCo=o("__init__()"),vCo=o(" (throws an error)."),FCo=l(),Ur=a("div"),f(YC.$$.fragment),TCo=l(),Cle=a("p"),MCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ECo=l(),ud=a("p"),CCo=o(`Note:
Loading a model from its configuration file does `),wle=a("strong"),wCo=o("not"),ACo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=a("a"),yCo=o("from_pretrained()"),LCo=o(" to load the model weights."),xCo=l(),Ale=a("p"),kCo=o("Examples:"),SCo=l(),f(KC.$$.fragment),RCo=l(),Oe=a("div"),f(ZC.$$.fragment),BCo=l(),yle=a("p"),PCo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$Co=l(),Ua=a("p"),ICo=o("The model class to instantiate is selected based on the "),Lle=a("code"),qCo=o("model_type"),NCo=o(` property of the config object (either
passed as an argument or loaded from `),xle=a("code"),jCo=o("pretrained_model_name_or_path"),DCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kle=a("code"),GCo=o("pretrained_model_name_or_path"),OCo=o(":"),VCo=l(),y=a("ul"),p1=a("li"),Sle=a("strong"),XCo=o("albert"),zCo=o(" \u2014 "),Jq=a("a"),QCo=o("AlbertForSequenceClassification"),WCo=o(" (ALBERT model)"),HCo=l(),_1=a("li"),Rle=a("strong"),UCo=o("bart"),JCo=o(" \u2014 "),Yq=a("a"),YCo=o("BartForSequenceClassification"),KCo=o(" (BART model)"),ZCo=l(),u1=a("li"),Ble=a("strong"),ewo=o("bert"),owo=o(" \u2014 "),Kq=a("a"),rwo=o("BertForSequenceClassification"),two=o(" (BERT model)"),awo=l(),b1=a("li"),Ple=a("strong"),nwo=o("big_bird"),swo=o(" \u2014 "),Zq=a("a"),lwo=o("BigBirdForSequenceClassification"),iwo=o(" (BigBird model)"),dwo=l(),v1=a("li"),$le=a("strong"),cwo=o("bigbird_pegasus"),fwo=o(" \u2014 "),eN=a("a"),mwo=o("BigBirdPegasusForSequenceClassification"),gwo=o(" (BigBirdPegasus model)"),hwo=l(),F1=a("li"),Ile=a("strong"),pwo=o("camembert"),_wo=o(" \u2014 "),oN=a("a"),uwo=o("CamembertForSequenceClassification"),bwo=o(" (CamemBERT model)"),vwo=l(),T1=a("li"),qle=a("strong"),Fwo=o("canine"),Two=o(" \u2014 "),rN=a("a"),Mwo=o("CanineForSequenceClassification"),Ewo=o(" (Canine model)"),Cwo=l(),M1=a("li"),Nle=a("strong"),wwo=o("convbert"),Awo=o(" \u2014 "),tN=a("a"),ywo=o("ConvBertForSequenceClassification"),Lwo=o(" (ConvBERT model)"),xwo=l(),E1=a("li"),jle=a("strong"),kwo=o("ctrl"),Swo=o(" \u2014 "),aN=a("a"),Rwo=o("CTRLForSequenceClassification"),Bwo=o(" (CTRL model)"),Pwo=l(),C1=a("li"),Dle=a("strong"),$wo=o("data2vec-text"),Iwo=o(" \u2014 "),nN=a("a"),qwo=o("Data2VecTextForSequenceClassification"),Nwo=o(" (Data2VecText model)"),jwo=l(),w1=a("li"),Gle=a("strong"),Dwo=o("deberta"),Gwo=o(" \u2014 "),sN=a("a"),Owo=o("DebertaForSequenceClassification"),Vwo=o(" (DeBERTa model)"),Xwo=l(),A1=a("li"),Ole=a("strong"),zwo=o("deberta-v2"),Qwo=o(" \u2014 "),lN=a("a"),Wwo=o("DebertaV2ForSequenceClassification"),Hwo=o(" (DeBERTa-v2 model)"),Uwo=l(),y1=a("li"),Vle=a("strong"),Jwo=o("distilbert"),Ywo=o(" \u2014 "),iN=a("a"),Kwo=o("DistilBertForSequenceClassification"),Zwo=o(" (DistilBERT model)"),eAo=l(),L1=a("li"),Xle=a("strong"),oAo=o("electra"),rAo=o(" \u2014 "),dN=a("a"),tAo=o("ElectraForSequenceClassification"),aAo=o(" (ELECTRA model)"),nAo=l(),x1=a("li"),zle=a("strong"),sAo=o("flaubert"),lAo=o(" \u2014 "),cN=a("a"),iAo=o("FlaubertForSequenceClassification"),dAo=o(" (FlauBERT model)"),cAo=l(),k1=a("li"),Qle=a("strong"),fAo=o("fnet"),mAo=o(" \u2014 "),fN=a("a"),gAo=o("FNetForSequenceClassification"),hAo=o(" (FNet model)"),pAo=l(),S1=a("li"),Wle=a("strong"),_Ao=o("funnel"),uAo=o(" \u2014 "),mN=a("a"),bAo=o("FunnelForSequenceClassification"),vAo=o(" (Funnel Transformer model)"),FAo=l(),R1=a("li"),Hle=a("strong"),TAo=o("gpt2"),MAo=o(" \u2014 "),gN=a("a"),EAo=o("GPT2ForSequenceClassification"),CAo=o(" (OpenAI GPT-2 model)"),wAo=l(),B1=a("li"),Ule=a("strong"),AAo=o("gpt_neo"),yAo=o(" \u2014 "),hN=a("a"),LAo=o("GPTNeoForSequenceClassification"),xAo=o(" (GPT Neo model)"),kAo=l(),P1=a("li"),Jle=a("strong"),SAo=o("gptj"),RAo=o(" \u2014 "),pN=a("a"),BAo=o("GPTJForSequenceClassification"),PAo=o(" (GPT-J model)"),$Ao=l(),$1=a("li"),Yle=a("strong"),IAo=o("ibert"),qAo=o(" \u2014 "),_N=a("a"),NAo=o("IBertForSequenceClassification"),jAo=o(" (I-BERT model)"),DAo=l(),I1=a("li"),Kle=a("strong"),GAo=o("layoutlm"),OAo=o(" \u2014 "),uN=a("a"),VAo=o("LayoutLMForSequenceClassification"),XAo=o(" (LayoutLM model)"),zAo=l(),q1=a("li"),Zle=a("strong"),QAo=o("layoutlmv2"),WAo=o(" \u2014 "),bN=a("a"),HAo=o("LayoutLMv2ForSequenceClassification"),UAo=o(" (LayoutLMv2 model)"),JAo=l(),N1=a("li"),eie=a("strong"),YAo=o("led"),KAo=o(" \u2014 "),vN=a("a"),ZAo=o("LEDForSequenceClassification"),e0o=o(" (LED model)"),o0o=l(),j1=a("li"),oie=a("strong"),r0o=o("longformer"),t0o=o(" \u2014 "),FN=a("a"),a0o=o("LongformerForSequenceClassification"),n0o=o(" (Longformer model)"),s0o=l(),D1=a("li"),rie=a("strong"),l0o=o("mbart"),i0o=o(" \u2014 "),TN=a("a"),d0o=o("MBartForSequenceClassification"),c0o=o(" (mBART model)"),f0o=l(),G1=a("li"),tie=a("strong"),m0o=o("megatron-bert"),g0o=o(" \u2014 "),MN=a("a"),h0o=o("MegatronBertForSequenceClassification"),p0o=o(" (MegatronBert model)"),_0o=l(),O1=a("li"),aie=a("strong"),u0o=o("mobilebert"),b0o=o(" \u2014 "),EN=a("a"),v0o=o("MobileBertForSequenceClassification"),F0o=o(" (MobileBERT model)"),T0o=l(),V1=a("li"),nie=a("strong"),M0o=o("mpnet"),E0o=o(" \u2014 "),CN=a("a"),C0o=o("MPNetForSequenceClassification"),w0o=o(" (MPNet model)"),A0o=l(),X1=a("li"),sie=a("strong"),y0o=o("nystromformer"),L0o=o(" \u2014 "),wN=a("a"),x0o=o("NystromformerForSequenceClassification"),k0o=o(" (Nystromformer model)"),S0o=l(),z1=a("li"),lie=a("strong"),R0o=o("openai-gpt"),B0o=o(" \u2014 "),AN=a("a"),P0o=o("OpenAIGPTForSequenceClassification"),$0o=o(" (OpenAI GPT model)"),I0o=l(),Q1=a("li"),iie=a("strong"),q0o=o("perceiver"),N0o=o(" \u2014 "),yN=a("a"),j0o=o("PerceiverForSequenceClassification"),D0o=o(" (Perceiver model)"),G0o=l(),W1=a("li"),die=a("strong"),O0o=o("plbart"),V0o=o(" \u2014 "),LN=a("a"),X0o=o("PLBartForSequenceClassification"),z0o=o(" (PLBart model)"),Q0o=l(),H1=a("li"),cie=a("strong"),W0o=o("qdqbert"),H0o=o(" \u2014 "),xN=a("a"),U0o=o("QDQBertForSequenceClassification"),J0o=o(" (QDQBert model)"),Y0o=l(),U1=a("li"),fie=a("strong"),K0o=o("reformer"),Z0o=o(" \u2014 "),kN=a("a"),eyo=o("ReformerForSequenceClassification"),oyo=o(" (Reformer model)"),ryo=l(),J1=a("li"),mie=a("strong"),tyo=o("rembert"),ayo=o(" \u2014 "),SN=a("a"),nyo=o("RemBertForSequenceClassification"),syo=o(" (RemBERT model)"),lyo=l(),Y1=a("li"),gie=a("strong"),iyo=o("roberta"),dyo=o(" \u2014 "),RN=a("a"),cyo=o("RobertaForSequenceClassification"),fyo=o(" (RoBERTa model)"),myo=l(),K1=a("li"),hie=a("strong"),gyo=o("roformer"),hyo=o(" \u2014 "),BN=a("a"),pyo=o("RoFormerForSequenceClassification"),_yo=o(" (RoFormer model)"),uyo=l(),Z1=a("li"),pie=a("strong"),byo=o("squeezebert"),vyo=o(" \u2014 "),PN=a("a"),Fyo=o("SqueezeBertForSequenceClassification"),Tyo=o(" (SqueezeBERT model)"),Myo=l(),eb=a("li"),_ie=a("strong"),Eyo=o("tapas"),Cyo=o(" \u2014 "),$N=a("a"),wyo=o("TapasForSequenceClassification"),Ayo=o(" (TAPAS model)"),yyo=l(),ob=a("li"),uie=a("strong"),Lyo=o("tapex"),xyo=o(" \u2014 "),IN=a("a"),kyo=o("BartForSequenceClassification"),Syo=o(" (TAPEX model)"),Ryo=l(),rb=a("li"),bie=a("strong"),Byo=o("transfo-xl"),Pyo=o(" \u2014 "),qN=a("a"),$yo=o("TransfoXLForSequenceClassification"),Iyo=o(" (Transformer-XL model)"),qyo=l(),tb=a("li"),vie=a("strong"),Nyo=o("xlm"),jyo=o(" \u2014 "),NN=a("a"),Dyo=o("XLMForSequenceClassification"),Gyo=o(" (XLM model)"),Oyo=l(),ab=a("li"),Fie=a("strong"),Vyo=o("xlm-roberta"),Xyo=o(" \u2014 "),jN=a("a"),zyo=o("XLMRobertaForSequenceClassification"),Qyo=o(" (XLM-RoBERTa model)"),Wyo=l(),nb=a("li"),Tie=a("strong"),Hyo=o("xlm-roberta-xl"),Uyo=o(" \u2014 "),DN=a("a"),Jyo=o("XLMRobertaXLForSequenceClassification"),Yyo=o(" (XLM-RoBERTa-XL model)"),Kyo=l(),sb=a("li"),Mie=a("strong"),Zyo=o("xlnet"),e8o=o(" \u2014 "),GN=a("a"),o8o=o("XLNetForSequenceClassification"),r8o=o(" (XLNet model)"),t8o=l(),lb=a("li"),Eie=a("strong"),a8o=o("yoso"),n8o=o(" \u2014 "),ON=a("a"),s8o=o("YosoForSequenceClassification"),l8o=o(" (YOSO model)"),i8o=l(),ib=a("p"),d8o=o("The model is set in evaluation mode by default using "),Cie=a("code"),c8o=o("model.eval()"),f8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=a("code"),m8o=o("model.train()"),g8o=l(),Aie=a("p"),h8o=o("Examples:"),p8o=l(),f(ew.$$.fragment),wBe=l(),bd=a("h2"),db=a("a"),yie=a("span"),f(ow.$$.fragment),_8o=l(),Lie=a("span"),u8o=o("AutoModelForMultipleChoice"),ABe=l(),rr=a("div"),f(rw.$$.fragment),b8o=l(),vd=a("p"),v8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VN=a("a"),F8o=o("from_pretrained()"),T8o=o(" class method or the "),XN=a("a"),M8o=o("from_config()"),E8o=o(` class
method.`),C8o=l(),tw=a("p"),w8o=o("This class cannot be instantiated directly using "),xie=a("code"),A8o=o("__init__()"),y8o=o(" (throws an error)."),L8o=l(),Jr=a("div"),f(aw.$$.fragment),x8o=l(),kie=a("p"),k8o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S8o=l(),Fd=a("p"),R8o=o(`Note:
Loading a model from its configuration file does `),Sie=a("strong"),B8o=o("not"),P8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zN=a("a"),$8o=o("from_pretrained()"),I8o=o(" to load the model weights."),q8o=l(),Rie=a("p"),N8o=o("Examples:"),j8o=l(),f(nw.$$.fragment),D8o=l(),Ve=a("div"),f(sw.$$.fragment),G8o=l(),Bie=a("p"),O8o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),V8o=l(),Ja=a("p"),X8o=o("The model class to instantiate is selected based on the "),Pie=a("code"),z8o=o("model_type"),Q8o=o(` property of the config object (either
passed as an argument or loaded from `),$ie=a("code"),W8o=o("pretrained_model_name_or_path"),H8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=a("code"),U8o=o("pretrained_model_name_or_path"),J8o=o(":"),Y8o=l(),G=a("ul"),cb=a("li"),qie=a("strong"),K8o=o("albert"),Z8o=o(" \u2014 "),QN=a("a"),eLo=o("AlbertForMultipleChoice"),oLo=o(" (ALBERT model)"),rLo=l(),fb=a("li"),Nie=a("strong"),tLo=o("bert"),aLo=o(" \u2014 "),WN=a("a"),nLo=o("BertForMultipleChoice"),sLo=o(" (BERT model)"),lLo=l(),mb=a("li"),jie=a("strong"),iLo=o("big_bird"),dLo=o(" \u2014 "),HN=a("a"),cLo=o("BigBirdForMultipleChoice"),fLo=o(" (BigBird model)"),mLo=l(),gb=a("li"),Die=a("strong"),gLo=o("camembert"),hLo=o(" \u2014 "),UN=a("a"),pLo=o("CamembertForMultipleChoice"),_Lo=o(" (CamemBERT model)"),uLo=l(),hb=a("li"),Gie=a("strong"),bLo=o("canine"),vLo=o(" \u2014 "),JN=a("a"),FLo=o("CanineForMultipleChoice"),TLo=o(" (Canine model)"),MLo=l(),pb=a("li"),Oie=a("strong"),ELo=o("convbert"),CLo=o(" \u2014 "),YN=a("a"),wLo=o("ConvBertForMultipleChoice"),ALo=o(" (ConvBERT model)"),yLo=l(),_b=a("li"),Vie=a("strong"),LLo=o("data2vec-text"),xLo=o(" \u2014 "),KN=a("a"),kLo=o("Data2VecTextForMultipleChoice"),SLo=o(" (Data2VecText model)"),RLo=l(),ub=a("li"),Xie=a("strong"),BLo=o("distilbert"),PLo=o(" \u2014 "),ZN=a("a"),$Lo=o("DistilBertForMultipleChoice"),ILo=o(" (DistilBERT model)"),qLo=l(),bb=a("li"),zie=a("strong"),NLo=o("electra"),jLo=o(" \u2014 "),ej=a("a"),DLo=o("ElectraForMultipleChoice"),GLo=o(" (ELECTRA model)"),OLo=l(),vb=a("li"),Qie=a("strong"),VLo=o("flaubert"),XLo=o(" \u2014 "),oj=a("a"),zLo=o("FlaubertForMultipleChoice"),QLo=o(" (FlauBERT model)"),WLo=l(),Fb=a("li"),Wie=a("strong"),HLo=o("fnet"),ULo=o(" \u2014 "),rj=a("a"),JLo=o("FNetForMultipleChoice"),YLo=o(" (FNet model)"),KLo=l(),Tb=a("li"),Hie=a("strong"),ZLo=o("funnel"),e7o=o(" \u2014 "),tj=a("a"),o7o=o("FunnelForMultipleChoice"),r7o=o(" (Funnel Transformer model)"),t7o=l(),Mb=a("li"),Uie=a("strong"),a7o=o("ibert"),n7o=o(" \u2014 "),aj=a("a"),s7o=o("IBertForMultipleChoice"),l7o=o(" (I-BERT model)"),i7o=l(),Eb=a("li"),Jie=a("strong"),d7o=o("longformer"),c7o=o(" \u2014 "),nj=a("a"),f7o=o("LongformerForMultipleChoice"),m7o=o(" (Longformer model)"),g7o=l(),Cb=a("li"),Yie=a("strong"),h7o=o("megatron-bert"),p7o=o(" \u2014 "),sj=a("a"),_7o=o("MegatronBertForMultipleChoice"),u7o=o(" (MegatronBert model)"),b7o=l(),wb=a("li"),Kie=a("strong"),v7o=o("mobilebert"),F7o=o(" \u2014 "),lj=a("a"),T7o=o("MobileBertForMultipleChoice"),M7o=o(" (MobileBERT model)"),E7o=l(),Ab=a("li"),Zie=a("strong"),C7o=o("mpnet"),w7o=o(" \u2014 "),ij=a("a"),A7o=o("MPNetForMultipleChoice"),y7o=o(" (MPNet model)"),L7o=l(),yb=a("li"),ede=a("strong"),x7o=o("nystromformer"),k7o=o(" \u2014 "),dj=a("a"),S7o=o("NystromformerForMultipleChoice"),R7o=o(" (Nystromformer model)"),B7o=l(),Lb=a("li"),ode=a("strong"),P7o=o("qdqbert"),$7o=o(" \u2014 "),cj=a("a"),I7o=o("QDQBertForMultipleChoice"),q7o=o(" (QDQBert model)"),N7o=l(),xb=a("li"),rde=a("strong"),j7o=o("rembert"),D7o=o(" \u2014 "),fj=a("a"),G7o=o("RemBertForMultipleChoice"),O7o=o(" (RemBERT model)"),V7o=l(),kb=a("li"),tde=a("strong"),X7o=o("roberta"),z7o=o(" \u2014 "),mj=a("a"),Q7o=o("RobertaForMultipleChoice"),W7o=o(" (RoBERTa model)"),H7o=l(),Sb=a("li"),ade=a("strong"),U7o=o("roformer"),J7o=o(" \u2014 "),gj=a("a"),Y7o=o("RoFormerForMultipleChoice"),K7o=o(" (RoFormer model)"),Z7o=l(),Rb=a("li"),nde=a("strong"),exo=o("squeezebert"),oxo=o(" \u2014 "),hj=a("a"),rxo=o("SqueezeBertForMultipleChoice"),txo=o(" (SqueezeBERT model)"),axo=l(),Bb=a("li"),sde=a("strong"),nxo=o("xlm"),sxo=o(" \u2014 "),pj=a("a"),lxo=o("XLMForMultipleChoice"),ixo=o(" (XLM model)"),dxo=l(),Pb=a("li"),lde=a("strong"),cxo=o("xlm-roberta"),fxo=o(" \u2014 "),_j=a("a"),mxo=o("XLMRobertaForMultipleChoice"),gxo=o(" (XLM-RoBERTa model)"),hxo=l(),$b=a("li"),ide=a("strong"),pxo=o("xlm-roberta-xl"),_xo=o(" \u2014 "),uj=a("a"),uxo=o("XLMRobertaXLForMultipleChoice"),bxo=o(" (XLM-RoBERTa-XL model)"),vxo=l(),Ib=a("li"),dde=a("strong"),Fxo=o("xlnet"),Txo=o(" \u2014 "),bj=a("a"),Mxo=o("XLNetForMultipleChoice"),Exo=o(" (XLNet model)"),Cxo=l(),qb=a("li"),cde=a("strong"),wxo=o("yoso"),Axo=o(" \u2014 "),vj=a("a"),yxo=o("YosoForMultipleChoice"),Lxo=o(" (YOSO model)"),xxo=l(),Nb=a("p"),kxo=o("The model is set in evaluation mode by default using "),fde=a("code"),Sxo=o("model.eval()"),Rxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mde=a("code"),Bxo=o("model.train()"),Pxo=l(),gde=a("p"),$xo=o("Examples:"),Ixo=l(),f(lw.$$.fragment),yBe=l(),Td=a("h2"),jb=a("a"),hde=a("span"),f(iw.$$.fragment),qxo=l(),pde=a("span"),Nxo=o("AutoModelForNextSentencePrediction"),LBe=l(),tr=a("div"),f(dw.$$.fragment),jxo=l(),Md=a("p"),Dxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Fj=a("a"),Gxo=o("from_pretrained()"),Oxo=o(" class method or the "),Tj=a("a"),Vxo=o("from_config()"),Xxo=o(` class
method.`),zxo=l(),cw=a("p"),Qxo=o("This class cannot be instantiated directly using "),_de=a("code"),Wxo=o("__init__()"),Hxo=o(" (throws an error)."),Uxo=l(),Yr=a("div"),f(fw.$$.fragment),Jxo=l(),ude=a("p"),Yxo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Kxo=l(),Ed=a("p"),Zxo=o(`Note:
Loading a model from its configuration file does `),bde=a("strong"),eko=o("not"),oko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=a("a"),rko=o("from_pretrained()"),tko=o(" to load the model weights."),ako=l(),vde=a("p"),nko=o("Examples:"),sko=l(),f(mw.$$.fragment),lko=l(),Xe=a("div"),f(gw.$$.fragment),iko=l(),Fde=a("p"),dko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cko=l(),Ya=a("p"),fko=o("The model class to instantiate is selected based on the "),Tde=a("code"),mko=o("model_type"),gko=o(` property of the config object (either
passed as an argument or loaded from `),Mde=a("code"),hko=o("pretrained_model_name_or_path"),pko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=a("code"),_ko=o("pretrained_model_name_or_path"),uko=o(":"),bko=l(),da=a("ul"),Db=a("li"),Cde=a("strong"),vko=o("bert"),Fko=o(" \u2014 "),Ej=a("a"),Tko=o("BertForNextSentencePrediction"),Mko=o(" (BERT model)"),Eko=l(),Gb=a("li"),wde=a("strong"),Cko=o("fnet"),wko=o(" \u2014 "),Cj=a("a"),Ako=o("FNetForNextSentencePrediction"),yko=o(" (FNet model)"),Lko=l(),Ob=a("li"),Ade=a("strong"),xko=o("megatron-bert"),kko=o(" \u2014 "),wj=a("a"),Sko=o("MegatronBertForNextSentencePrediction"),Rko=o(" (MegatronBert model)"),Bko=l(),Vb=a("li"),yde=a("strong"),Pko=o("mobilebert"),$ko=o(" \u2014 "),Aj=a("a"),Iko=o("MobileBertForNextSentencePrediction"),qko=o(" (MobileBERT model)"),Nko=l(),Xb=a("li"),Lde=a("strong"),jko=o("qdqbert"),Dko=o(" \u2014 "),yj=a("a"),Gko=o("QDQBertForNextSentencePrediction"),Oko=o(" (QDQBert model)"),Vko=l(),zb=a("p"),Xko=o("The model is set in evaluation mode by default using "),xde=a("code"),zko=o("model.eval()"),Qko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=a("code"),Wko=o("model.train()"),Hko=l(),Sde=a("p"),Uko=o("Examples:"),Jko=l(),f(hw.$$.fragment),xBe=l(),Cd=a("h2"),Qb=a("a"),Rde=a("span"),f(pw.$$.fragment),Yko=l(),Bde=a("span"),Kko=o("AutoModelForTokenClassification"),kBe=l(),ar=a("div"),f(_w.$$.fragment),Zko=l(),wd=a("p"),eSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Lj=a("a"),oSo=o("from_pretrained()"),rSo=o(" class method or the "),xj=a("a"),tSo=o("from_config()"),aSo=o(` class
method.`),nSo=l(),uw=a("p"),sSo=o("This class cannot be instantiated directly using "),Pde=a("code"),lSo=o("__init__()"),iSo=o(" (throws an error)."),dSo=l(),Kr=a("div"),f(bw.$$.fragment),cSo=l(),$de=a("p"),fSo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mSo=l(),Ad=a("p"),gSo=o(`Note:
Loading a model from its configuration file does `),Ide=a("strong"),hSo=o("not"),pSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=a("a"),_So=o("from_pretrained()"),uSo=o(" to load the model weights."),bSo=l(),qde=a("p"),vSo=o("Examples:"),FSo=l(),f(vw.$$.fragment),TSo=l(),ze=a("div"),f(Fw.$$.fragment),MSo=l(),Nde=a("p"),ESo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CSo=l(),Ka=a("p"),wSo=o("The model class to instantiate is selected based on the "),jde=a("code"),ASo=o("model_type"),ySo=o(` property of the config object (either
passed as an argument or loaded from `),Dde=a("code"),LSo=o("pretrained_model_name_or_path"),xSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=a("code"),kSo=o("pretrained_model_name_or_path"),SSo=o(":"),RSo=l(),j=a("ul"),Wb=a("li"),Ode=a("strong"),BSo=o("albert"),PSo=o(" \u2014 "),Sj=a("a"),$So=o("AlbertForTokenClassification"),ISo=o(" (ALBERT model)"),qSo=l(),Hb=a("li"),Vde=a("strong"),NSo=o("bert"),jSo=o(" \u2014 "),Rj=a("a"),DSo=o("BertForTokenClassification"),GSo=o(" (BERT model)"),OSo=l(),Ub=a("li"),Xde=a("strong"),VSo=o("big_bird"),XSo=o(" \u2014 "),Bj=a("a"),zSo=o("BigBirdForTokenClassification"),QSo=o(" (BigBird model)"),WSo=l(),Jb=a("li"),zde=a("strong"),HSo=o("camembert"),USo=o(" \u2014 "),Pj=a("a"),JSo=o("CamembertForTokenClassification"),YSo=o(" (CamemBERT model)"),KSo=l(),Yb=a("li"),Qde=a("strong"),ZSo=o("canine"),eRo=o(" \u2014 "),$j=a("a"),oRo=o("CanineForTokenClassification"),rRo=o(" (Canine model)"),tRo=l(),Kb=a("li"),Wde=a("strong"),aRo=o("convbert"),nRo=o(" \u2014 "),Ij=a("a"),sRo=o("ConvBertForTokenClassification"),lRo=o(" (ConvBERT model)"),iRo=l(),Zb=a("li"),Hde=a("strong"),dRo=o("data2vec-text"),cRo=o(" \u2014 "),qj=a("a"),fRo=o("Data2VecTextForTokenClassification"),mRo=o(" (Data2VecText model)"),gRo=l(),e2=a("li"),Ude=a("strong"),hRo=o("deberta"),pRo=o(" \u2014 "),Nj=a("a"),_Ro=o("DebertaForTokenClassification"),uRo=o(" (DeBERTa model)"),bRo=l(),o2=a("li"),Jde=a("strong"),vRo=o("deberta-v2"),FRo=o(" \u2014 "),jj=a("a"),TRo=o("DebertaV2ForTokenClassification"),MRo=o(" (DeBERTa-v2 model)"),ERo=l(),r2=a("li"),Yde=a("strong"),CRo=o("distilbert"),wRo=o(" \u2014 "),Dj=a("a"),ARo=o("DistilBertForTokenClassification"),yRo=o(" (DistilBERT model)"),LRo=l(),t2=a("li"),Kde=a("strong"),xRo=o("electra"),kRo=o(" \u2014 "),Gj=a("a"),SRo=o("ElectraForTokenClassification"),RRo=o(" (ELECTRA model)"),BRo=l(),a2=a("li"),Zde=a("strong"),PRo=o("flaubert"),$Ro=o(" \u2014 "),Oj=a("a"),IRo=o("FlaubertForTokenClassification"),qRo=o(" (FlauBERT model)"),NRo=l(),n2=a("li"),ece=a("strong"),jRo=o("fnet"),DRo=o(" \u2014 "),Vj=a("a"),GRo=o("FNetForTokenClassification"),ORo=o(" (FNet model)"),VRo=l(),s2=a("li"),oce=a("strong"),XRo=o("funnel"),zRo=o(" \u2014 "),Xj=a("a"),QRo=o("FunnelForTokenClassification"),WRo=o(" (Funnel Transformer model)"),HRo=l(),l2=a("li"),rce=a("strong"),URo=o("gpt2"),JRo=o(" \u2014 "),zj=a("a"),YRo=o("GPT2ForTokenClassification"),KRo=o(" (OpenAI GPT-2 model)"),ZRo=l(),i2=a("li"),tce=a("strong"),eBo=o("ibert"),oBo=o(" \u2014 "),Qj=a("a"),rBo=o("IBertForTokenClassification"),tBo=o(" (I-BERT model)"),aBo=l(),d2=a("li"),ace=a("strong"),nBo=o("layoutlm"),sBo=o(" \u2014 "),Wj=a("a"),lBo=o("LayoutLMForTokenClassification"),iBo=o(" (LayoutLM model)"),dBo=l(),c2=a("li"),nce=a("strong"),cBo=o("layoutlmv2"),fBo=o(" \u2014 "),Hj=a("a"),mBo=o("LayoutLMv2ForTokenClassification"),gBo=o(" (LayoutLMv2 model)"),hBo=l(),f2=a("li"),sce=a("strong"),pBo=o("longformer"),_Bo=o(" \u2014 "),Uj=a("a"),uBo=o("LongformerForTokenClassification"),bBo=o(" (Longformer model)"),vBo=l(),m2=a("li"),lce=a("strong"),FBo=o("megatron-bert"),TBo=o(" \u2014 "),Jj=a("a"),MBo=o("MegatronBertForTokenClassification"),EBo=o(" (MegatronBert model)"),CBo=l(),g2=a("li"),ice=a("strong"),wBo=o("mobilebert"),ABo=o(" \u2014 "),Yj=a("a"),yBo=o("MobileBertForTokenClassification"),LBo=o(" (MobileBERT model)"),xBo=l(),h2=a("li"),dce=a("strong"),kBo=o("mpnet"),SBo=o(" \u2014 "),Kj=a("a"),RBo=o("MPNetForTokenClassification"),BBo=o(" (MPNet model)"),PBo=l(),p2=a("li"),cce=a("strong"),$Bo=o("nystromformer"),IBo=o(" \u2014 "),Zj=a("a"),qBo=o("NystromformerForTokenClassification"),NBo=o(" (Nystromformer model)"),jBo=l(),_2=a("li"),fce=a("strong"),DBo=o("qdqbert"),GBo=o(" \u2014 "),eD=a("a"),OBo=o("QDQBertForTokenClassification"),VBo=o(" (QDQBert model)"),XBo=l(),u2=a("li"),mce=a("strong"),zBo=o("rembert"),QBo=o(" \u2014 "),oD=a("a"),WBo=o("RemBertForTokenClassification"),HBo=o(" (RemBERT model)"),UBo=l(),b2=a("li"),gce=a("strong"),JBo=o("roberta"),YBo=o(" \u2014 "),rD=a("a"),KBo=o("RobertaForTokenClassification"),ZBo=o(" (RoBERTa model)"),ePo=l(),v2=a("li"),hce=a("strong"),oPo=o("roformer"),rPo=o(" \u2014 "),tD=a("a"),tPo=o("RoFormerForTokenClassification"),aPo=o(" (RoFormer model)"),nPo=l(),F2=a("li"),pce=a("strong"),sPo=o("squeezebert"),lPo=o(" \u2014 "),aD=a("a"),iPo=o("SqueezeBertForTokenClassification"),dPo=o(" (SqueezeBERT model)"),cPo=l(),T2=a("li"),_ce=a("strong"),fPo=o("xlm"),mPo=o(" \u2014 "),nD=a("a"),gPo=o("XLMForTokenClassification"),hPo=o(" (XLM model)"),pPo=l(),M2=a("li"),uce=a("strong"),_Po=o("xlm-roberta"),uPo=o(" \u2014 "),sD=a("a"),bPo=o("XLMRobertaForTokenClassification"),vPo=o(" (XLM-RoBERTa model)"),FPo=l(),E2=a("li"),bce=a("strong"),TPo=o("xlm-roberta-xl"),MPo=o(" \u2014 "),lD=a("a"),EPo=o("XLMRobertaXLForTokenClassification"),CPo=o(" (XLM-RoBERTa-XL model)"),wPo=l(),C2=a("li"),vce=a("strong"),APo=o("xlnet"),yPo=o(" \u2014 "),iD=a("a"),LPo=o("XLNetForTokenClassification"),xPo=o(" (XLNet model)"),kPo=l(),w2=a("li"),Fce=a("strong"),SPo=o("yoso"),RPo=o(" \u2014 "),dD=a("a"),BPo=o("YosoForTokenClassification"),PPo=o(" (YOSO model)"),$Po=l(),A2=a("p"),IPo=o("The model is set in evaluation mode by default using "),Tce=a("code"),qPo=o("model.eval()"),NPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=a("code"),jPo=o("model.train()"),DPo=l(),Ece=a("p"),GPo=o("Examples:"),OPo=l(),f(Tw.$$.fragment),SBe=l(),yd=a("h2"),y2=a("a"),Cce=a("span"),f(Mw.$$.fragment),VPo=l(),wce=a("span"),XPo=o("AutoModelForQuestionAnswering"),RBe=l(),nr=a("div"),f(Ew.$$.fragment),zPo=l(),Ld=a("p"),QPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cD=a("a"),WPo=o("from_pretrained()"),HPo=o(" class method or the "),fD=a("a"),UPo=o("from_config()"),JPo=o(` class
method.`),YPo=l(),Cw=a("p"),KPo=o("This class cannot be instantiated directly using "),Ace=a("code"),ZPo=o("__init__()"),e$o=o(" (throws an error)."),o$o=l(),Zr=a("div"),f(ww.$$.fragment),r$o=l(),yce=a("p"),t$o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a$o=l(),xd=a("p"),n$o=o(`Note:
Loading a model from its configuration file does `),Lce=a("strong"),s$o=o("not"),l$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=a("a"),i$o=o("from_pretrained()"),d$o=o(" to load the model weights."),c$o=l(),xce=a("p"),f$o=o("Examples:"),m$o=l(),f(Aw.$$.fragment),g$o=l(),Qe=a("div"),f(yw.$$.fragment),h$o=l(),kce=a("p"),p$o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_$o=l(),Za=a("p"),u$o=o("The model class to instantiate is selected based on the "),Sce=a("code"),b$o=o("model_type"),v$o=o(` property of the config object (either
passed as an argument or loaded from `),Rce=a("code"),F$o=o("pretrained_model_name_or_path"),T$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=a("code"),M$o=o("pretrained_model_name_or_path"),E$o=o(":"),C$o=l(),R=a("ul"),L2=a("li"),Pce=a("strong"),w$o=o("albert"),A$o=o(" \u2014 "),gD=a("a"),y$o=o("AlbertForQuestionAnswering"),L$o=o(" (ALBERT model)"),x$o=l(),x2=a("li"),$ce=a("strong"),k$o=o("bart"),S$o=o(" \u2014 "),hD=a("a"),R$o=o("BartForQuestionAnswering"),B$o=o(" (BART model)"),P$o=l(),k2=a("li"),Ice=a("strong"),$$o=o("bert"),I$o=o(" \u2014 "),pD=a("a"),q$o=o("BertForQuestionAnswering"),N$o=o(" (BERT model)"),j$o=l(),S2=a("li"),qce=a("strong"),D$o=o("big_bird"),G$o=o(" \u2014 "),_D=a("a"),O$o=o("BigBirdForQuestionAnswering"),V$o=o(" (BigBird model)"),X$o=l(),R2=a("li"),Nce=a("strong"),z$o=o("bigbird_pegasus"),Q$o=o(" \u2014 "),uD=a("a"),W$o=o("BigBirdPegasusForQuestionAnswering"),H$o=o(" (BigBirdPegasus model)"),U$o=l(),B2=a("li"),jce=a("strong"),J$o=o("camembert"),Y$o=o(" \u2014 "),bD=a("a"),K$o=o("CamembertForQuestionAnswering"),Z$o=o(" (CamemBERT model)"),eIo=l(),P2=a("li"),Dce=a("strong"),oIo=o("canine"),rIo=o(" \u2014 "),vD=a("a"),tIo=o("CanineForQuestionAnswering"),aIo=o(" (Canine model)"),nIo=l(),$2=a("li"),Gce=a("strong"),sIo=o("convbert"),lIo=o(" \u2014 "),FD=a("a"),iIo=o("ConvBertForQuestionAnswering"),dIo=o(" (ConvBERT model)"),cIo=l(),I2=a("li"),Oce=a("strong"),fIo=o("data2vec-text"),mIo=o(" \u2014 "),TD=a("a"),gIo=o("Data2VecTextForQuestionAnswering"),hIo=o(" (Data2VecText model)"),pIo=l(),q2=a("li"),Vce=a("strong"),_Io=o("deberta"),uIo=o(" \u2014 "),MD=a("a"),bIo=o("DebertaForQuestionAnswering"),vIo=o(" (DeBERTa model)"),FIo=l(),N2=a("li"),Xce=a("strong"),TIo=o("deberta-v2"),MIo=o(" \u2014 "),ED=a("a"),EIo=o("DebertaV2ForQuestionAnswering"),CIo=o(" (DeBERTa-v2 model)"),wIo=l(),j2=a("li"),zce=a("strong"),AIo=o("distilbert"),yIo=o(" \u2014 "),CD=a("a"),LIo=o("DistilBertForQuestionAnswering"),xIo=o(" (DistilBERT model)"),kIo=l(),D2=a("li"),Qce=a("strong"),SIo=o("electra"),RIo=o(" \u2014 "),wD=a("a"),BIo=o("ElectraForQuestionAnswering"),PIo=o(" (ELECTRA model)"),$Io=l(),G2=a("li"),Wce=a("strong"),IIo=o("flaubert"),qIo=o(" \u2014 "),AD=a("a"),NIo=o("FlaubertForQuestionAnsweringSimple"),jIo=o(" (FlauBERT model)"),DIo=l(),O2=a("li"),Hce=a("strong"),GIo=o("fnet"),OIo=o(" \u2014 "),yD=a("a"),VIo=o("FNetForQuestionAnswering"),XIo=o(" (FNet model)"),zIo=l(),V2=a("li"),Uce=a("strong"),QIo=o("funnel"),WIo=o(" \u2014 "),LD=a("a"),HIo=o("FunnelForQuestionAnswering"),UIo=o(" (Funnel Transformer model)"),JIo=l(),X2=a("li"),Jce=a("strong"),YIo=o("gptj"),KIo=o(" \u2014 "),xD=a("a"),ZIo=o("GPTJForQuestionAnswering"),eqo=o(" (GPT-J model)"),oqo=l(),z2=a("li"),Yce=a("strong"),rqo=o("ibert"),tqo=o(" \u2014 "),kD=a("a"),aqo=o("IBertForQuestionAnswering"),nqo=o(" (I-BERT model)"),sqo=l(),Q2=a("li"),Kce=a("strong"),lqo=o("layoutlmv2"),iqo=o(" \u2014 "),SD=a("a"),dqo=o("LayoutLMv2ForQuestionAnswering"),cqo=o(" (LayoutLMv2 model)"),fqo=l(),W2=a("li"),Zce=a("strong"),mqo=o("led"),gqo=o(" \u2014 "),RD=a("a"),hqo=o("LEDForQuestionAnswering"),pqo=o(" (LED model)"),_qo=l(),H2=a("li"),efe=a("strong"),uqo=o("longformer"),bqo=o(" \u2014 "),BD=a("a"),vqo=o("LongformerForQuestionAnswering"),Fqo=o(" (Longformer model)"),Tqo=l(),U2=a("li"),ofe=a("strong"),Mqo=o("lxmert"),Eqo=o(" \u2014 "),PD=a("a"),Cqo=o("LxmertForQuestionAnswering"),wqo=o(" (LXMERT model)"),Aqo=l(),J2=a("li"),rfe=a("strong"),yqo=o("mbart"),Lqo=o(" \u2014 "),$D=a("a"),xqo=o("MBartForQuestionAnswering"),kqo=o(" (mBART model)"),Sqo=l(),Y2=a("li"),tfe=a("strong"),Rqo=o("megatron-bert"),Bqo=o(" \u2014 "),ID=a("a"),Pqo=o("MegatronBertForQuestionAnswering"),$qo=o(" (MegatronBert model)"),Iqo=l(),K2=a("li"),afe=a("strong"),qqo=o("mobilebert"),Nqo=o(" \u2014 "),qD=a("a"),jqo=o("MobileBertForQuestionAnswering"),Dqo=o(" (MobileBERT model)"),Gqo=l(),Z2=a("li"),nfe=a("strong"),Oqo=o("mpnet"),Vqo=o(" \u2014 "),ND=a("a"),Xqo=o("MPNetForQuestionAnswering"),zqo=o(" (MPNet model)"),Qqo=l(),e5=a("li"),sfe=a("strong"),Wqo=o("nystromformer"),Hqo=o(" \u2014 "),jD=a("a"),Uqo=o("NystromformerForQuestionAnswering"),Jqo=o(" (Nystromformer model)"),Yqo=l(),o5=a("li"),lfe=a("strong"),Kqo=o("qdqbert"),Zqo=o(" \u2014 "),DD=a("a"),eNo=o("QDQBertForQuestionAnswering"),oNo=o(" (QDQBert model)"),rNo=l(),r5=a("li"),ife=a("strong"),tNo=o("reformer"),aNo=o(" \u2014 "),GD=a("a"),nNo=o("ReformerForQuestionAnswering"),sNo=o(" (Reformer model)"),lNo=l(),t5=a("li"),dfe=a("strong"),iNo=o("rembert"),dNo=o(" \u2014 "),OD=a("a"),cNo=o("RemBertForQuestionAnswering"),fNo=o(" (RemBERT model)"),mNo=l(),a5=a("li"),cfe=a("strong"),gNo=o("roberta"),hNo=o(" \u2014 "),VD=a("a"),pNo=o("RobertaForQuestionAnswering"),_No=o(" (RoBERTa model)"),uNo=l(),n5=a("li"),ffe=a("strong"),bNo=o("roformer"),vNo=o(" \u2014 "),XD=a("a"),FNo=o("RoFormerForQuestionAnswering"),TNo=o(" (RoFormer model)"),MNo=l(),s5=a("li"),mfe=a("strong"),ENo=o("splinter"),CNo=o(" \u2014 "),zD=a("a"),wNo=o("SplinterForQuestionAnswering"),ANo=o(" (Splinter model)"),yNo=l(),l5=a("li"),gfe=a("strong"),LNo=o("squeezebert"),xNo=o(" \u2014 "),QD=a("a"),kNo=o("SqueezeBertForQuestionAnswering"),SNo=o(" (SqueezeBERT model)"),RNo=l(),i5=a("li"),hfe=a("strong"),BNo=o("xlm"),PNo=o(" \u2014 "),WD=a("a"),$No=o("XLMForQuestionAnsweringSimple"),INo=o(" (XLM model)"),qNo=l(),d5=a("li"),pfe=a("strong"),NNo=o("xlm-roberta"),jNo=o(" \u2014 "),HD=a("a"),DNo=o("XLMRobertaForQuestionAnswering"),GNo=o(" (XLM-RoBERTa model)"),ONo=l(),c5=a("li"),_fe=a("strong"),VNo=o("xlm-roberta-xl"),XNo=o(" \u2014 "),UD=a("a"),zNo=o("XLMRobertaXLForQuestionAnswering"),QNo=o(" (XLM-RoBERTa-XL model)"),WNo=l(),f5=a("li"),ufe=a("strong"),HNo=o("xlnet"),UNo=o(" \u2014 "),JD=a("a"),JNo=o("XLNetForQuestionAnsweringSimple"),YNo=o(" (XLNet model)"),KNo=l(),m5=a("li"),bfe=a("strong"),ZNo=o("yoso"),ejo=o(" \u2014 "),YD=a("a"),ojo=o("YosoForQuestionAnswering"),rjo=o(" (YOSO model)"),tjo=l(),g5=a("p"),ajo=o("The model is set in evaluation mode by default using "),vfe=a("code"),njo=o("model.eval()"),sjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=a("code"),ljo=o("model.train()"),ijo=l(),Tfe=a("p"),djo=o("Examples:"),cjo=l(),f(Lw.$$.fragment),BBe=l(),kd=a("h2"),h5=a("a"),Mfe=a("span"),f(xw.$$.fragment),fjo=l(),Efe=a("span"),mjo=o("AutoModelForTableQuestionAnswering"),PBe=l(),sr=a("div"),f(kw.$$.fragment),gjo=l(),Sd=a("p"),hjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KD=a("a"),pjo=o("from_pretrained()"),_jo=o(" class method or the "),ZD=a("a"),ujo=o("from_config()"),bjo=o(` class
method.`),vjo=l(),Sw=a("p"),Fjo=o("This class cannot be instantiated directly using "),Cfe=a("code"),Tjo=o("__init__()"),Mjo=o(" (throws an error)."),Ejo=l(),et=a("div"),f(Rw.$$.fragment),Cjo=l(),wfe=a("p"),wjo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ajo=l(),Rd=a("p"),yjo=o(`Note:
Loading a model from its configuration file does `),Afe=a("strong"),Ljo=o("not"),xjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=a("a"),kjo=o("from_pretrained()"),Sjo=o(" to load the model weights."),Rjo=l(),yfe=a("p"),Bjo=o("Examples:"),Pjo=l(),f(Bw.$$.fragment),$jo=l(),We=a("div"),f(Pw.$$.fragment),Ijo=l(),Lfe=a("p"),qjo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Njo=l(),en=a("p"),jjo=o("The model class to instantiate is selected based on the "),xfe=a("code"),Djo=o("model_type"),Gjo=o(` property of the config object (either
passed as an argument or loaded from `),kfe=a("code"),Ojo=o("pretrained_model_name_or_path"),Vjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),Xjo=o("pretrained_model_name_or_path"),zjo=o(":"),Qjo=l(),Rfe=a("ul"),p5=a("li"),Bfe=a("strong"),Wjo=o("tapas"),Hjo=o(" \u2014 "),oG=a("a"),Ujo=o("TapasForQuestionAnswering"),Jjo=o(" (TAPAS model)"),Yjo=l(),_5=a("p"),Kjo=o("The model is set in evaluation mode by default using "),Pfe=a("code"),Zjo=o("model.eval()"),eDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=a("code"),oDo=o("model.train()"),rDo=l(),Ife=a("p"),tDo=o("Examples:"),aDo=l(),f($w.$$.fragment),$Be=l(),Bd=a("h2"),u5=a("a"),qfe=a("span"),f(Iw.$$.fragment),nDo=l(),Nfe=a("span"),sDo=o("AutoModelForImageClassification"),IBe=l(),lr=a("div"),f(qw.$$.fragment),lDo=l(),Pd=a("p"),iDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rG=a("a"),dDo=o("from_pretrained()"),cDo=o(" class method or the "),tG=a("a"),fDo=o("from_config()"),mDo=o(` class
method.`),gDo=l(),Nw=a("p"),hDo=o("This class cannot be instantiated directly using "),jfe=a("code"),pDo=o("__init__()"),_Do=o(" (throws an error)."),uDo=l(),ot=a("div"),f(jw.$$.fragment),bDo=l(),Dfe=a("p"),vDo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FDo=l(),$d=a("p"),TDo=o(`Note:
Loading a model from its configuration file does `),Gfe=a("strong"),MDo=o("not"),EDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=a("a"),CDo=o("from_pretrained()"),wDo=o(" to load the model weights."),ADo=l(),Ofe=a("p"),yDo=o("Examples:"),LDo=l(),f(Dw.$$.fragment),xDo=l(),He=a("div"),f(Gw.$$.fragment),kDo=l(),Vfe=a("p"),SDo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RDo=l(),on=a("p"),BDo=o("The model class to instantiate is selected based on the "),Xfe=a("code"),PDo=o("model_type"),$Do=o(` property of the config object (either
passed as an argument or loaded from `),zfe=a("code"),IDo=o("pretrained_model_name_or_path"),qDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qfe=a("code"),NDo=o("pretrained_model_name_or_path"),jDo=o(":"),DDo=l(),de=a("ul"),b5=a("li"),Wfe=a("strong"),GDo=o("beit"),ODo=o(" \u2014 "),nG=a("a"),VDo=o("BeitForImageClassification"),XDo=o(" (BEiT model)"),zDo=l(),v5=a("li"),Hfe=a("strong"),QDo=o("convnext"),WDo=o(" \u2014 "),sG=a("a"),HDo=o("ConvNextForImageClassification"),UDo=o(" (ConvNext model)"),JDo=l(),F5=a("li"),Ufe=a("strong"),YDo=o("data2vec-vision"),KDo=o(" \u2014 "),lG=a("a"),ZDo=o("Data2VecVisionForImageClassification"),eGo=o(" (Data2VecVision model)"),oGo=l(),Xs=a("li"),Jfe=a("strong"),rGo=o("deit"),tGo=o(" \u2014 "),iG=a("a"),aGo=o("DeiTForImageClassification"),nGo=o(" or "),dG=a("a"),sGo=o("DeiTForImageClassificationWithTeacher"),lGo=o(" (DeiT model)"),iGo=l(),T5=a("li"),Yfe=a("strong"),dGo=o("imagegpt"),cGo=o(" \u2014 "),cG=a("a"),fGo=o("ImageGPTForImageClassification"),mGo=o(" (ImageGPT model)"),gGo=l(),ma=a("li"),Kfe=a("strong"),hGo=o("perceiver"),pGo=o(" \u2014 "),fG=a("a"),_Go=o("PerceiverForImageClassificationLearned"),uGo=o(" or "),mG=a("a"),bGo=o("PerceiverForImageClassificationFourier"),vGo=o(" or "),gG=a("a"),FGo=o("PerceiverForImageClassificationConvProcessing"),TGo=o(" (Perceiver model)"),MGo=l(),M5=a("li"),Zfe=a("strong"),EGo=o("poolformer"),CGo=o(" \u2014 "),hG=a("a"),wGo=o("PoolFormerForImageClassification"),AGo=o(" (PoolFormer model)"),yGo=l(),E5=a("li"),eme=a("strong"),LGo=o("regnet"),xGo=o(" \u2014 "),pG=a("a"),kGo=o("RegNetForImageClassification"),SGo=o(" (RegNet model)"),RGo=l(),C5=a("li"),ome=a("strong"),BGo=o("resnet"),PGo=o(" \u2014 "),_G=a("a"),$Go=o("ResNetForImageClassification"),IGo=o(" (ResNet model)"),qGo=l(),w5=a("li"),rme=a("strong"),NGo=o("segformer"),jGo=o(" \u2014 "),uG=a("a"),DGo=o("SegformerForImageClassification"),GGo=o(" (SegFormer model)"),OGo=l(),A5=a("li"),tme=a("strong"),VGo=o("swin"),XGo=o(" \u2014 "),bG=a("a"),zGo=o("SwinForImageClassification"),QGo=o(" (Swin model)"),WGo=l(),y5=a("li"),ame=a("strong"),HGo=o("van"),UGo=o(" \u2014 "),vG=a("a"),JGo=o("VanForImageClassification"),YGo=o(" (VAN model)"),KGo=l(),L5=a("li"),nme=a("strong"),ZGo=o("vit"),eOo=o(" \u2014 "),FG=a("a"),oOo=o("ViTForImageClassification"),rOo=o(" (ViT model)"),tOo=l(),x5=a("p"),aOo=o("The model is set in evaluation mode by default using "),sme=a("code"),nOo=o("model.eval()"),sOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=a("code"),lOo=o("model.train()"),iOo=l(),ime=a("p"),dOo=o("Examples:"),cOo=l(),f(Ow.$$.fragment),qBe=l(),Id=a("h2"),k5=a("a"),dme=a("span"),f(Vw.$$.fragment),fOo=l(),cme=a("span"),mOo=o("AutoModelForVision2Seq"),NBe=l(),ir=a("div"),f(Xw.$$.fragment),gOo=l(),qd=a("p"),hOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),TG=a("a"),pOo=o("from_pretrained()"),_Oo=o(" class method or the "),MG=a("a"),uOo=o("from_config()"),bOo=o(` class
method.`),vOo=l(),zw=a("p"),FOo=o("This class cannot be instantiated directly using "),fme=a("code"),TOo=o("__init__()"),MOo=o(" (throws an error)."),EOo=l(),rt=a("div"),f(Qw.$$.fragment),COo=l(),mme=a("p"),wOo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),AOo=l(),Nd=a("p"),yOo=o(`Note:
Loading a model from its configuration file does `),gme=a("strong"),LOo=o("not"),xOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=a("a"),kOo=o("from_pretrained()"),SOo=o(" to load the model weights."),ROo=l(),hme=a("p"),BOo=o("Examples:"),POo=l(),f(Ww.$$.fragment),$Oo=l(),Ue=a("div"),f(Hw.$$.fragment),IOo=l(),pme=a("p"),qOo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NOo=l(),rn=a("p"),jOo=o("The model class to instantiate is selected based on the "),_me=a("code"),DOo=o("model_type"),GOo=o(` property of the config object (either
passed as an argument or loaded from `),ume=a("code"),OOo=o("pretrained_model_name_or_path"),VOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=a("code"),XOo=o("pretrained_model_name_or_path"),zOo=o(":"),QOo=l(),vme=a("ul"),S5=a("li"),Fme=a("strong"),WOo=o("vision-encoder-decoder"),HOo=o(" \u2014 "),CG=a("a"),UOo=o("VisionEncoderDecoderModel"),JOo=o(" (Vision Encoder decoder model)"),YOo=l(),R5=a("p"),KOo=o("The model is set in evaluation mode by default using "),Tme=a("code"),ZOo=o("model.eval()"),eVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=a("code"),oVo=o("model.train()"),rVo=l(),Eme=a("p"),tVo=o("Examples:"),aVo=l(),f(Uw.$$.fragment),jBe=l(),jd=a("h2"),B5=a("a"),Cme=a("span"),f(Jw.$$.fragment),nVo=l(),wme=a("span"),sVo=o("AutoModelForAudioClassification"),DBe=l(),dr=a("div"),f(Yw.$$.fragment),lVo=l(),Dd=a("p"),iVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wG=a("a"),dVo=o("from_pretrained()"),cVo=o(" class method or the "),AG=a("a"),fVo=o("from_config()"),mVo=o(` class
method.`),gVo=l(),Kw=a("p"),hVo=o("This class cannot be instantiated directly using "),Ame=a("code"),pVo=o("__init__()"),_Vo=o(" (throws an error)."),uVo=l(),tt=a("div"),f(Zw.$$.fragment),bVo=l(),yme=a("p"),vVo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),FVo=l(),Gd=a("p"),TVo=o(`Note:
Loading a model from its configuration file does `),Lme=a("strong"),MVo=o("not"),EVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=a("a"),CVo=o("from_pretrained()"),wVo=o(" to load the model weights."),AVo=l(),xme=a("p"),yVo=o("Examples:"),LVo=l(),f(eA.$$.fragment),xVo=l(),Je=a("div"),f(oA.$$.fragment),kVo=l(),kme=a("p"),SVo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),RVo=l(),tn=a("p"),BVo=o("The model class to instantiate is selected based on the "),Sme=a("code"),PVo=o("model_type"),$Vo=o(` property of the config object (either
passed as an argument or loaded from `),Rme=a("code"),IVo=o("pretrained_model_name_or_path"),qVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=a("code"),NVo=o("pretrained_model_name_or_path"),jVo=o(":"),DVo=l(),Se=a("ul"),P5=a("li"),Pme=a("strong"),GVo=o("data2vec-audio"),OVo=o(" \u2014 "),LG=a("a"),VVo=o("Data2VecAudioForSequenceClassification"),XVo=o(" (Data2VecAudio model)"),zVo=l(),$5=a("li"),$me=a("strong"),QVo=o("hubert"),WVo=o(" \u2014 "),xG=a("a"),HVo=o("HubertForSequenceClassification"),UVo=o(" (Hubert model)"),JVo=l(),I5=a("li"),Ime=a("strong"),YVo=o("sew"),KVo=o(" \u2014 "),kG=a("a"),ZVo=o("SEWForSequenceClassification"),eXo=o(" (SEW model)"),oXo=l(),q5=a("li"),qme=a("strong"),rXo=o("sew-d"),tXo=o(" \u2014 "),SG=a("a"),aXo=o("SEWDForSequenceClassification"),nXo=o(" (SEW-D model)"),sXo=l(),N5=a("li"),Nme=a("strong"),lXo=o("unispeech"),iXo=o(" \u2014 "),RG=a("a"),dXo=o("UniSpeechForSequenceClassification"),cXo=o(" (UniSpeech model)"),fXo=l(),j5=a("li"),jme=a("strong"),mXo=o("unispeech-sat"),gXo=o(" \u2014 "),BG=a("a"),hXo=o("UniSpeechSatForSequenceClassification"),pXo=o(" (UniSpeechSat model)"),_Xo=l(),D5=a("li"),Dme=a("strong"),uXo=o("wav2vec2"),bXo=o(" \u2014 "),PG=a("a"),vXo=o("Wav2Vec2ForSequenceClassification"),FXo=o(" (Wav2Vec2 model)"),TXo=l(),G5=a("li"),Gme=a("strong"),MXo=o("wavlm"),EXo=o(" \u2014 "),$G=a("a"),CXo=o("WavLMForSequenceClassification"),wXo=o(" (WavLM model)"),AXo=l(),O5=a("p"),yXo=o("The model is set in evaluation mode by default using "),Ome=a("code"),LXo=o("model.eval()"),xXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=a("code"),kXo=o("model.train()"),SXo=l(),Xme=a("p"),RXo=o("Examples:"),BXo=l(),f(rA.$$.fragment),GBe=l(),Od=a("h2"),V5=a("a"),zme=a("span"),f(tA.$$.fragment),PXo=l(),Qme=a("span"),$Xo=o("AutoModelForAudioFrameClassification"),OBe=l(),cr=a("div"),f(aA.$$.fragment),IXo=l(),Vd=a("p"),qXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),IG=a("a"),NXo=o("from_pretrained()"),jXo=o(" class method or the "),qG=a("a"),DXo=o("from_config()"),GXo=o(` class
method.`),OXo=l(),nA=a("p"),VXo=o("This class cannot be instantiated directly using "),Wme=a("code"),XXo=o("__init__()"),zXo=o(" (throws an error)."),QXo=l(),at=a("div"),f(sA.$$.fragment),WXo=l(),Hme=a("p"),HXo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),UXo=l(),Xd=a("p"),JXo=o(`Note:
Loading a model from its configuration file does `),Ume=a("strong"),YXo=o("not"),KXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),ZXo=o("from_pretrained()"),ezo=o(" to load the model weights."),ozo=l(),Jme=a("p"),rzo=o("Examples:"),tzo=l(),f(lA.$$.fragment),azo=l(),Ye=a("div"),f(iA.$$.fragment),nzo=l(),Yme=a("p"),szo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),lzo=l(),an=a("p"),izo=o("The model class to instantiate is selected based on the "),Kme=a("code"),dzo=o("model_type"),czo=o(` property of the config object (either
passed as an argument or loaded from `),Zme=a("code"),fzo=o("pretrained_model_name_or_path"),mzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=a("code"),gzo=o("pretrained_model_name_or_path"),hzo=o(":"),pzo=l(),nn=a("ul"),X5=a("li"),oge=a("strong"),_zo=o("data2vec-audio"),uzo=o(" \u2014 "),jG=a("a"),bzo=o("Data2VecAudioForAudioFrameClassification"),vzo=o(" (Data2VecAudio model)"),Fzo=l(),z5=a("li"),rge=a("strong"),Tzo=o("unispeech-sat"),Mzo=o(" \u2014 "),DG=a("a"),Ezo=o("UniSpeechSatForAudioFrameClassification"),Czo=o(" (UniSpeechSat model)"),wzo=l(),Q5=a("li"),tge=a("strong"),Azo=o("wav2vec2"),yzo=o(" \u2014 "),GG=a("a"),Lzo=o("Wav2Vec2ForAudioFrameClassification"),xzo=o(" (Wav2Vec2 model)"),kzo=l(),W5=a("li"),age=a("strong"),Szo=o("wavlm"),Rzo=o(" \u2014 "),OG=a("a"),Bzo=o("WavLMForAudioFrameClassification"),Pzo=o(" (WavLM model)"),$zo=l(),H5=a("p"),Izo=o("The model is set in evaluation mode by default using "),nge=a("code"),qzo=o("model.eval()"),Nzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=a("code"),jzo=o("model.train()"),Dzo=l(),lge=a("p"),Gzo=o("Examples:"),Ozo=l(),f(dA.$$.fragment),VBe=l(),zd=a("h2"),U5=a("a"),ige=a("span"),f(cA.$$.fragment),Vzo=l(),dge=a("span"),Xzo=o("AutoModelForCTC"),XBe=l(),fr=a("div"),f(fA.$$.fragment),zzo=l(),Qd=a("p"),Qzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),VG=a("a"),Wzo=o("from_pretrained()"),Hzo=o(" class method or the "),XG=a("a"),Uzo=o("from_config()"),Jzo=o(` class
method.`),Yzo=l(),mA=a("p"),Kzo=o("This class cannot be instantiated directly using "),cge=a("code"),Zzo=o("__init__()"),eQo=o(" (throws an error)."),oQo=l(),nt=a("div"),f(gA.$$.fragment),rQo=l(),fge=a("p"),tQo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),aQo=l(),Wd=a("p"),nQo=o(`Note:
Loading a model from its configuration file does `),mge=a("strong"),sQo=o("not"),lQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=a("a"),iQo=o("from_pretrained()"),dQo=o(" to load the model weights."),cQo=l(),gge=a("p"),fQo=o("Examples:"),mQo=l(),f(hA.$$.fragment),gQo=l(),Ke=a("div"),f(pA.$$.fragment),hQo=l(),hge=a("p"),pQo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),_Qo=l(),sn=a("p"),uQo=o("The model class to instantiate is selected based on the "),pge=a("code"),bQo=o("model_type"),vQo=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),FQo=o("pretrained_model_name_or_path"),TQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=a("code"),MQo=o("pretrained_model_name_or_path"),EQo=o(":"),CQo=l(),Re=a("ul"),J5=a("li"),bge=a("strong"),wQo=o("data2vec-audio"),AQo=o(" \u2014 "),QG=a("a"),yQo=o("Data2VecAudioForCTC"),LQo=o(" (Data2VecAudio model)"),xQo=l(),Y5=a("li"),vge=a("strong"),kQo=o("hubert"),SQo=o(" \u2014 "),WG=a("a"),RQo=o("HubertForCTC"),BQo=o(" (Hubert model)"),PQo=l(),K5=a("li"),Fge=a("strong"),$Qo=o("sew"),IQo=o(" \u2014 "),HG=a("a"),qQo=o("SEWForCTC"),NQo=o(" (SEW model)"),jQo=l(),Z5=a("li"),Tge=a("strong"),DQo=o("sew-d"),GQo=o(" \u2014 "),UG=a("a"),OQo=o("SEWDForCTC"),VQo=o(" (SEW-D model)"),XQo=l(),ev=a("li"),Mge=a("strong"),zQo=o("unispeech"),QQo=o(" \u2014 "),JG=a("a"),WQo=o("UniSpeechForCTC"),HQo=o(" (UniSpeech model)"),UQo=l(),ov=a("li"),Ege=a("strong"),JQo=o("unispeech-sat"),YQo=o(" \u2014 "),YG=a("a"),KQo=o("UniSpeechSatForCTC"),ZQo=o(" (UniSpeechSat model)"),eWo=l(),rv=a("li"),Cge=a("strong"),oWo=o("wav2vec2"),rWo=o(" \u2014 "),KG=a("a"),tWo=o("Wav2Vec2ForCTC"),aWo=o(" (Wav2Vec2 model)"),nWo=l(),tv=a("li"),wge=a("strong"),sWo=o("wavlm"),lWo=o(" \u2014 "),ZG=a("a"),iWo=o("WavLMForCTC"),dWo=o(" (WavLM model)"),cWo=l(),av=a("p"),fWo=o("The model is set in evaluation mode by default using "),Age=a("code"),mWo=o("model.eval()"),gWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=a("code"),hWo=o("model.train()"),pWo=l(),Lge=a("p"),_Wo=o("Examples:"),uWo=l(),f(_A.$$.fragment),zBe=l(),Hd=a("h2"),nv=a("a"),xge=a("span"),f(uA.$$.fragment),bWo=l(),kge=a("span"),vWo=o("AutoModelForSpeechSeq2Seq"),QBe=l(),mr=a("div"),f(bA.$$.fragment),FWo=l(),Ud=a("p"),TWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eO=a("a"),MWo=o("from_pretrained()"),EWo=o(" class method or the "),oO=a("a"),CWo=o("from_config()"),wWo=o(` class
method.`),AWo=l(),vA=a("p"),yWo=o("This class cannot be instantiated directly using "),Sge=a("code"),LWo=o("__init__()"),xWo=o(" (throws an error)."),kWo=l(),st=a("div"),f(FA.$$.fragment),SWo=l(),Rge=a("p"),RWo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),BWo=l(),Jd=a("p"),PWo=o(`Note:
Loading a model from its configuration file does `),Bge=a("strong"),$Wo=o("not"),IWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=a("a"),qWo=o("from_pretrained()"),NWo=o(" to load the model weights."),jWo=l(),Pge=a("p"),DWo=o("Examples:"),GWo=l(),f(TA.$$.fragment),OWo=l(),Ze=a("div"),f(MA.$$.fragment),VWo=l(),$ge=a("p"),XWo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zWo=l(),ln=a("p"),QWo=o("The model class to instantiate is selected based on the "),Ige=a("code"),WWo=o("model_type"),HWo=o(` property of the config object (either
passed as an argument or loaded from `),qge=a("code"),UWo=o("pretrained_model_name_or_path"),JWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=a("code"),YWo=o("pretrained_model_name_or_path"),KWo=o(":"),ZWo=l(),EA=a("ul"),sv=a("li"),jge=a("strong"),eHo=o("speech-encoder-decoder"),oHo=o(" \u2014 "),tO=a("a"),rHo=o("SpeechEncoderDecoderModel"),tHo=o(" (Speech Encoder decoder model)"),aHo=l(),lv=a("li"),Dge=a("strong"),nHo=o("speech_to_text"),sHo=o(" \u2014 "),aO=a("a"),lHo=o("Speech2TextForConditionalGeneration"),iHo=o(" (Speech2Text model)"),dHo=l(),iv=a("p"),cHo=o("The model is set in evaluation mode by default using "),Gge=a("code"),fHo=o("model.eval()"),mHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=a("code"),gHo=o("model.train()"),hHo=l(),Vge=a("p"),pHo=o("Examples:"),_Ho=l(),f(CA.$$.fragment),WBe=l(),Yd=a("h2"),dv=a("a"),Xge=a("span"),f(wA.$$.fragment),uHo=l(),zge=a("span"),bHo=o("AutoModelForAudioXVector"),HBe=l(),gr=a("div"),f(AA.$$.fragment),vHo=l(),Kd=a("p"),FHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nO=a("a"),THo=o("from_pretrained()"),MHo=o(" class method or the "),sO=a("a"),EHo=o("from_config()"),CHo=o(` class
method.`),wHo=l(),yA=a("p"),AHo=o("This class cannot be instantiated directly using "),Qge=a("code"),yHo=o("__init__()"),LHo=o(" (throws an error)."),xHo=l(),lt=a("div"),f(LA.$$.fragment),kHo=l(),Wge=a("p"),SHo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),RHo=l(),Zd=a("p"),BHo=o(`Note:
Loading a model from its configuration file does `),Hge=a("strong"),PHo=o("not"),$Ho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),IHo=o("from_pretrained()"),qHo=o(" to load the model weights."),NHo=l(),Uge=a("p"),jHo=o("Examples:"),DHo=l(),f(xA.$$.fragment),GHo=l(),eo=a("div"),f(kA.$$.fragment),OHo=l(),Jge=a("p"),VHo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),XHo=l(),dn=a("p"),zHo=o("The model class to instantiate is selected based on the "),Yge=a("code"),QHo=o("model_type"),WHo=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),HHo=o("pretrained_model_name_or_path"),UHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(":"),KHo=l(),cn=a("ul"),cv=a("li"),ehe=a("strong"),ZHo=o("data2vec-audio"),eUo=o(" \u2014 "),iO=a("a"),oUo=o("Data2VecAudioForXVector"),rUo=o(" (Data2VecAudio model)"),tUo=l(),fv=a("li"),ohe=a("strong"),aUo=o("unispeech-sat"),nUo=o(" \u2014 "),dO=a("a"),sUo=o("UniSpeechSatForXVector"),lUo=o(" (UniSpeechSat model)"),iUo=l(),mv=a("li"),rhe=a("strong"),dUo=o("wav2vec2"),cUo=o(" \u2014 "),cO=a("a"),fUo=o("Wav2Vec2ForXVector"),mUo=o(" (Wav2Vec2 model)"),gUo=l(),gv=a("li"),the=a("strong"),hUo=o("wavlm"),pUo=o(" \u2014 "),fO=a("a"),_Uo=o("WavLMForXVector"),uUo=o(" (WavLM model)"),bUo=l(),hv=a("p"),vUo=o("The model is set in evaluation mode by default using "),ahe=a("code"),FUo=o("model.eval()"),TUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=a("code"),MUo=o("model.train()"),EUo=l(),she=a("p"),CUo=o("Examples:"),wUo=l(),f(SA.$$.fragment),UBe=l(),ec=a("h2"),pv=a("a"),lhe=a("span"),f(RA.$$.fragment),AUo=l(),ihe=a("span"),yUo=o("AutoModelForMaskedImageModeling"),JBe=l(),hr=a("div"),f(BA.$$.fragment),LUo=l(),oc=a("p"),xUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mO=a("a"),kUo=o("from_pretrained()"),SUo=o(" class method or the "),gO=a("a"),RUo=o("from_config()"),BUo=o(` class
method.`),PUo=l(),PA=a("p"),$Uo=o("This class cannot be instantiated directly using "),dhe=a("code"),IUo=o("__init__()"),qUo=o(" (throws an error)."),NUo=l(),it=a("div"),f($A.$$.fragment),jUo=l(),che=a("p"),DUo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),GUo=l(),rc=a("p"),OUo=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),VUo=o("not"),XUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),zUo=o("from_pretrained()"),QUo=o(" to load the model weights."),WUo=l(),mhe=a("p"),HUo=o("Examples:"),UUo=l(),f(IA.$$.fragment),JUo=l(),oo=a("div"),f(qA.$$.fragment),YUo=l(),ghe=a("p"),KUo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ZUo=l(),fn=a("p"),eJo=o("The model class to instantiate is selected based on the "),hhe=a("code"),oJo=o("model_type"),rJo=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),tJo=o("pretrained_model_name_or_path"),aJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),nJo=o("pretrained_model_name_or_path"),sJo=o(":"),lJo=l(),tc=a("ul"),_v=a("li"),uhe=a("strong"),iJo=o("deit"),dJo=o(" \u2014 "),pO=a("a"),cJo=o("DeiTForMaskedImageModeling"),fJo=o(" (DeiT model)"),mJo=l(),uv=a("li"),bhe=a("strong"),gJo=o("swin"),hJo=o(" \u2014 "),_O=a("a"),pJo=o("SwinForMaskedImageModeling"),_Jo=o(" (Swin model)"),uJo=l(),bv=a("li"),vhe=a("strong"),bJo=o("vit"),vJo=o(" \u2014 "),uO=a("a"),FJo=o("ViTForMaskedImageModeling"),TJo=o(" (ViT model)"),MJo=l(),vv=a("p"),EJo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),CJo=o("model.eval()"),wJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=a("code"),AJo=o("model.train()"),yJo=l(),Mhe=a("p"),LJo=o("Examples:"),xJo=l(),f(NA.$$.fragment),YBe=l(),ac=a("h2"),Fv=a("a"),Ehe=a("span"),f(jA.$$.fragment),kJo=l(),Che=a("span"),SJo=o("AutoModelForObjectDetection"),KBe=l(),pr=a("div"),f(DA.$$.fragment),RJo=l(),nc=a("p"),BJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),bO=a("a"),PJo=o("from_pretrained()"),$Jo=o(" class method or the "),vO=a("a"),IJo=o("from_config()"),qJo=o(` class
method.`),NJo=l(),GA=a("p"),jJo=o("This class cannot be instantiated directly using "),whe=a("code"),DJo=o("__init__()"),GJo=o(" (throws an error)."),OJo=l(),dt=a("div"),f(OA.$$.fragment),VJo=l(),Ahe=a("p"),XJo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zJo=l(),sc=a("p"),QJo=o(`Note:
Loading a model from its configuration file does `),yhe=a("strong"),WJo=o("not"),HJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),UJo=o("from_pretrained()"),JJo=o(" to load the model weights."),YJo=l(),Lhe=a("p"),KJo=o("Examples:"),ZJo=l(),f(VA.$$.fragment),eYo=l(),ro=a("div"),f(XA.$$.fragment),oYo=l(),xhe=a("p"),rYo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tYo=l(),mn=a("p"),aYo=o("The model class to instantiate is selected based on the "),khe=a("code"),nYo=o("model_type"),sYo=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),lYo=o("pretrained_model_name_or_path"),iYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=a("code"),dYo=o("pretrained_model_name_or_path"),cYo=o(":"),fYo=l(),Bhe=a("ul"),Tv=a("li"),Phe=a("strong"),mYo=o("detr"),gYo=o(" \u2014 "),TO=a("a"),hYo=o("DetrForObjectDetection"),pYo=o(" (DETR model)"),_Yo=l(),Mv=a("p"),uYo=o("The model is set in evaluation mode by default using "),$he=a("code"),bYo=o("model.eval()"),vYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=a("code"),FYo=o("model.train()"),TYo=l(),qhe=a("p"),MYo=o("Examples:"),EYo=l(),f(zA.$$.fragment),ZBe=l(),lc=a("h2"),Ev=a("a"),Nhe=a("span"),f(QA.$$.fragment),CYo=l(),jhe=a("span"),wYo=o("AutoModelForImageSegmentation"),ePe=l(),_r=a("div"),f(WA.$$.fragment),AYo=l(),ic=a("p"),yYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),MO=a("a"),LYo=o("from_pretrained()"),xYo=o(" class method or the "),EO=a("a"),kYo=o("from_config()"),SYo=o(` class
method.`),RYo=l(),HA=a("p"),BYo=o("This class cannot be instantiated directly using "),Dhe=a("code"),PYo=o("__init__()"),$Yo=o(" (throws an error)."),IYo=l(),ct=a("div"),f(UA.$$.fragment),qYo=l(),Ghe=a("p"),NYo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jYo=l(),dc=a("p"),DYo=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),GYo=o("not"),OYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CO=a("a"),VYo=o("from_pretrained()"),XYo=o(" to load the model weights."),zYo=l(),Vhe=a("p"),QYo=o("Examples:"),WYo=l(),f(JA.$$.fragment),HYo=l(),to=a("div"),f(YA.$$.fragment),UYo=l(),Xhe=a("p"),JYo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),YYo=l(),gn=a("p"),KYo=o("The model class to instantiate is selected based on the "),zhe=a("code"),ZYo=o("model_type"),eKo=o(` property of the config object (either
passed as an argument or loaded from `),Qhe=a("code"),oKo=o("pretrained_model_name_or_path"),rKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=a("code"),tKo=o("pretrained_model_name_or_path"),aKo=o(":"),nKo=l(),Hhe=a("ul"),Cv=a("li"),Uhe=a("strong"),sKo=o("detr"),lKo=o(" \u2014 "),wO=a("a"),iKo=o("DetrForSegmentation"),dKo=o(" (DETR model)"),cKo=l(),wv=a("p"),fKo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),mKo=o("model.eval()"),gKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),hKo=o("model.train()"),pKo=l(),Khe=a("p"),_Ko=o("Examples:"),uKo=l(),f(KA.$$.fragment),oPe=l(),cc=a("h2"),Av=a("a"),Zhe=a("span"),f(ZA.$$.fragment),bKo=l(),epe=a("span"),vKo=o("AutoModelForSemanticSegmentation"),rPe=l(),ur=a("div"),f(e0.$$.fragment),FKo=l(),fc=a("p"),TKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),AO=a("a"),MKo=o("from_pretrained()"),EKo=o(" class method or the "),yO=a("a"),CKo=o("from_config()"),wKo=o(` class
method.`),AKo=l(),o0=a("p"),yKo=o("This class cannot be instantiated directly using "),ope=a("code"),LKo=o("__init__()"),xKo=o(" (throws an error)."),kKo=l(),ft=a("div"),f(r0.$$.fragment),SKo=l(),rpe=a("p"),RKo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),BKo=l(),mc=a("p"),PKo=o(`Note:
Loading a model from its configuration file does `),tpe=a("strong"),$Ko=o("not"),IKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=a("a"),qKo=o("from_pretrained()"),NKo=o(" to load the model weights."),jKo=l(),ape=a("p"),DKo=o("Examples:"),GKo=l(),f(t0.$$.fragment),OKo=l(),ao=a("div"),f(a0.$$.fragment),VKo=l(),npe=a("p"),XKo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zKo=l(),hn=a("p"),QKo=o("The model class to instantiate is selected based on the "),spe=a("code"),WKo=o("model_type"),HKo=o(` property of the config object (either
passed as an argument or loaded from `),lpe=a("code"),UKo=o("pretrained_model_name_or_path"),JKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=a("code"),YKo=o("pretrained_model_name_or_path"),KKo=o(":"),ZKo=l(),pn=a("ul"),yv=a("li"),dpe=a("strong"),eZo=o("beit"),oZo=o(" \u2014 "),xO=a("a"),rZo=o("BeitForSemanticSegmentation"),tZo=o(" (BEiT model)"),aZo=l(),Lv=a("li"),cpe=a("strong"),nZo=o("data2vec-vision"),sZo=o(" \u2014 "),kO=a("a"),lZo=o("Data2VecVisionForSemanticSegmentation"),iZo=o(" (Data2VecVision model)"),dZo=l(),xv=a("li"),fpe=a("strong"),cZo=o("dpt"),fZo=o(" \u2014 "),SO=a("a"),mZo=o("DPTForSemanticSegmentation"),gZo=o(" (DPT model)"),hZo=l(),kv=a("li"),mpe=a("strong"),pZo=o("segformer"),_Zo=o(" \u2014 "),RO=a("a"),uZo=o("SegformerForSemanticSegmentation"),bZo=o(" (SegFormer model)"),vZo=l(),Sv=a("p"),FZo=o("The model is set in evaluation mode by default using "),gpe=a("code"),TZo=o("model.eval()"),MZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=a("code"),EZo=o("model.train()"),CZo=l(),ppe=a("p"),wZo=o("Examples:"),AZo=l(),f(n0.$$.fragment),tPe=l(),gc=a("h2"),Rv=a("a"),_pe=a("span"),f(s0.$$.fragment),yZo=l(),upe=a("span"),LZo=o("AutoModelForInstanceSegmentation"),aPe=l(),br=a("div"),f(l0.$$.fragment),xZo=l(),hc=a("p"),kZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),BO=a("a"),SZo=o("from_pretrained()"),RZo=o(" class method or the "),PO=a("a"),BZo=o("from_config()"),PZo=o(` class
method.`),$Zo=l(),i0=a("p"),IZo=o("This class cannot be instantiated directly using "),bpe=a("code"),qZo=o("__init__()"),NZo=o(" (throws an error)."),jZo=l(),mt=a("div"),f(d0.$$.fragment),DZo=l(),vpe=a("p"),GZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),OZo=l(),pc=a("p"),VZo=o(`Note:
Loading a model from its configuration file does `),Fpe=a("strong"),XZo=o("not"),zZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=a("a"),QZo=o("from_pretrained()"),WZo=o(" to load the model weights."),HZo=l(),Tpe=a("p"),UZo=o("Examples:"),JZo=l(),f(c0.$$.fragment),YZo=l(),no=a("div"),f(f0.$$.fragment),KZo=l(),Mpe=a("p"),ZZo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),eer=l(),_n=a("p"),oer=o("The model class to instantiate is selected based on the "),Epe=a("code"),rer=o("model_type"),ter=o(` property of the config object (either
passed as an argument or loaded from `),Cpe=a("code"),aer=o("pretrained_model_name_or_path"),ner=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),ser=o("pretrained_model_name_or_path"),ler=o(":"),ier=l(),Ape=a("ul"),Bv=a("li"),ype=a("strong"),der=o("maskformer"),cer=o(" \u2014 "),IO=a("a"),fer=o("MaskFormerForInstanceSegmentation"),mer=o(" (MaskFormer model)"),ger=l(),Pv=a("p"),her=o("The model is set in evaluation mode by default using "),Lpe=a("code"),per=o("model.eval()"),_er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),uer=o("model.train()"),ber=l(),kpe=a("p"),ver=o("Examples:"),Fer=l(),f(m0.$$.fragment),nPe=l(),_c=a("h2"),$v=a("a"),Spe=a("span"),f(g0.$$.fragment),Ter=l(),Rpe=a("span"),Mer=o("TFAutoModel"),sPe=l(),vr=a("div"),f(h0.$$.fragment),Eer=l(),uc=a("p"),Cer=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qO=a("a"),wer=o("from_pretrained()"),Aer=o(" class method or the "),NO=a("a"),yer=o("from_config()"),Ler=o(` class
method.`),xer=l(),p0=a("p"),ker=o("This class cannot be instantiated directly using "),Bpe=a("code"),Ser=o("__init__()"),Rer=o(" (throws an error)."),Ber=l(),gt=a("div"),f(_0.$$.fragment),Per=l(),Ppe=a("p"),$er=o("Instantiates one of the base model classes of the library from a configuration."),Ier=l(),bc=a("p"),qer=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),Ner=o("not"),jer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=a("a"),Der=o("from_pretrained()"),Ger=o(" to load the model weights."),Oer=l(),Ipe=a("p"),Ver=o("Examples:"),Xer=l(),f(u0.$$.fragment),zer=l(),ho=a("div"),f(b0.$$.fragment),Qer=l(),qpe=a("p"),Wer=o("Instantiate one of the base model classes of the library from a pretrained model."),Her=l(),un=a("p"),Uer=o("The model class to instantiate is selected based on the "),Npe=a("code"),Jer=o("model_type"),Yer=o(` property of the config object (either
passed as an argument or loaded from `),jpe=a("code"),Ker=o("pretrained_model_name_or_path"),Zer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=a("code"),eor=o("pretrained_model_name_or_path"),oor=o(":"),ror=l(),x=a("ul"),Iv=a("li"),Gpe=a("strong"),tor=o("albert"),aor=o(" \u2014 "),DO=a("a"),nor=o("TFAlbertModel"),sor=o(" (ALBERT model)"),lor=l(),qv=a("li"),Ope=a("strong"),ior=o("bart"),dor=o(" \u2014 "),GO=a("a"),cor=o("TFBartModel"),mor=o(" (BART model)"),gor=l(),Nv=a("li"),Vpe=a("strong"),hor=o("bert"),por=o(" \u2014 "),OO=a("a"),_or=o("TFBertModel"),uor=o(" (BERT model)"),bor=l(),jv=a("li"),Xpe=a("strong"),vor=o("blenderbot"),For=o(" \u2014 "),VO=a("a"),Tor=o("TFBlenderbotModel"),Mor=o(" (Blenderbot model)"),Eor=l(),Dv=a("li"),zpe=a("strong"),Cor=o("blenderbot-small"),wor=o(" \u2014 "),XO=a("a"),Aor=o("TFBlenderbotSmallModel"),yor=o(" (BlenderbotSmall model)"),Lor=l(),Gv=a("li"),Qpe=a("strong"),xor=o("camembert"),kor=o(" \u2014 "),zO=a("a"),Sor=o("TFCamembertModel"),Ror=o(" (CamemBERT model)"),Bor=l(),Ov=a("li"),Wpe=a("strong"),Por=o("clip"),$or=o(" \u2014 "),QO=a("a"),Ior=o("TFCLIPModel"),qor=o(" (CLIP model)"),Nor=l(),Vv=a("li"),Hpe=a("strong"),jor=o("convbert"),Dor=o(" \u2014 "),WO=a("a"),Gor=o("TFConvBertModel"),Oor=o(" (ConvBERT model)"),Vor=l(),Xv=a("li"),Upe=a("strong"),Xor=o("convnext"),zor=o(" \u2014 "),HO=a("a"),Qor=o("TFConvNextModel"),Wor=o(" (ConvNext model)"),Hor=l(),zv=a("li"),Jpe=a("strong"),Uor=o("ctrl"),Jor=o(" \u2014 "),UO=a("a"),Yor=o("TFCTRLModel"),Kor=o(" (CTRL model)"),Zor=l(),Qv=a("li"),Ype=a("strong"),err=o("deberta"),orr=o(" \u2014 "),JO=a("a"),rrr=o("TFDebertaModel"),trr=o(" (DeBERTa model)"),arr=l(),Wv=a("li"),Kpe=a("strong"),nrr=o("deberta-v2"),srr=o(" \u2014 "),YO=a("a"),lrr=o("TFDebertaV2Model"),irr=o(" (DeBERTa-v2 model)"),drr=l(),Hv=a("li"),Zpe=a("strong"),crr=o("distilbert"),frr=o(" \u2014 "),KO=a("a"),mrr=o("TFDistilBertModel"),grr=o(" (DistilBERT model)"),hrr=l(),Uv=a("li"),e_e=a("strong"),prr=o("dpr"),_rr=o(" \u2014 "),ZO=a("a"),urr=o("TFDPRQuestionEncoder"),brr=o(" (DPR model)"),vrr=l(),Jv=a("li"),o_e=a("strong"),Frr=o("electra"),Trr=o(" \u2014 "),eV=a("a"),Mrr=o("TFElectraModel"),Err=o(" (ELECTRA model)"),Crr=l(),Yv=a("li"),r_e=a("strong"),wrr=o("flaubert"),Arr=o(" \u2014 "),oV=a("a"),yrr=o("TFFlaubertModel"),Lrr=o(" (FlauBERT model)"),xrr=l(),zs=a("li"),t_e=a("strong"),krr=o("funnel"),Srr=o(" \u2014 "),rV=a("a"),Rrr=o("TFFunnelModel"),Brr=o(" or "),tV=a("a"),Prr=o("TFFunnelBaseModel"),$rr=o(" (Funnel Transformer model)"),Irr=l(),Kv=a("li"),a_e=a("strong"),qrr=o("gpt2"),Nrr=o(" \u2014 "),aV=a("a"),jrr=o("TFGPT2Model"),Drr=o(" (OpenAI GPT-2 model)"),Grr=l(),Zv=a("li"),n_e=a("strong"),Orr=o("gptj"),Vrr=o(" \u2014 "),nV=a("a"),Xrr=o("TFGPTJModel"),zrr=o(" (GPT-J model)"),Qrr=l(),eF=a("li"),s_e=a("strong"),Wrr=o("hubert"),Hrr=o(" \u2014 "),sV=a("a"),Urr=o("TFHubertModel"),Jrr=o(" (Hubert model)"),Yrr=l(),oF=a("li"),l_e=a("strong"),Krr=o("layoutlm"),Zrr=o(" \u2014 "),lV=a("a"),etr=o("TFLayoutLMModel"),otr=o(" (LayoutLM model)"),rtr=l(),rF=a("li"),i_e=a("strong"),ttr=o("led"),atr=o(" \u2014 "),iV=a("a"),ntr=o("TFLEDModel"),str=o(" (LED model)"),ltr=l(),tF=a("li"),d_e=a("strong"),itr=o("longformer"),dtr=o(" \u2014 "),dV=a("a"),ctr=o("TFLongformerModel"),ftr=o(" (Longformer model)"),mtr=l(),aF=a("li"),c_e=a("strong"),gtr=o("lxmert"),htr=o(" \u2014 "),cV=a("a"),ptr=o("TFLxmertModel"),_tr=o(" (LXMERT model)"),utr=l(),nF=a("li"),f_e=a("strong"),btr=o("marian"),vtr=o(" \u2014 "),fV=a("a"),Ftr=o("TFMarianModel"),Ttr=o(" (Marian model)"),Mtr=l(),sF=a("li"),m_e=a("strong"),Etr=o("mbart"),Ctr=o(" \u2014 "),mV=a("a"),wtr=o("TFMBartModel"),Atr=o(" (mBART model)"),ytr=l(),lF=a("li"),g_e=a("strong"),Ltr=o("mobilebert"),xtr=o(" \u2014 "),gV=a("a"),ktr=o("TFMobileBertModel"),Str=o(" (MobileBERT model)"),Rtr=l(),iF=a("li"),h_e=a("strong"),Btr=o("mpnet"),Ptr=o(" \u2014 "),hV=a("a"),$tr=o("TFMPNetModel"),Itr=o(" (MPNet model)"),qtr=l(),dF=a("li"),p_e=a("strong"),Ntr=o("mt5"),jtr=o(" \u2014 "),pV=a("a"),Dtr=o("TFMT5Model"),Gtr=o(" (mT5 model)"),Otr=l(),cF=a("li"),__e=a("strong"),Vtr=o("openai-gpt"),Xtr=o(" \u2014 "),_V=a("a"),ztr=o("TFOpenAIGPTModel"),Qtr=o(" (OpenAI GPT model)"),Wtr=l(),fF=a("li"),u_e=a("strong"),Htr=o("pegasus"),Utr=o(" \u2014 "),uV=a("a"),Jtr=o("TFPegasusModel"),Ytr=o(" (Pegasus model)"),Ktr=l(),mF=a("li"),b_e=a("strong"),Ztr=o("rembert"),ear=o(" \u2014 "),bV=a("a"),oar=o("TFRemBertModel"),rar=o(" (RemBERT model)"),tar=l(),gF=a("li"),v_e=a("strong"),aar=o("roberta"),nar=o(" \u2014 "),vV=a("a"),sar=o("TFRobertaModel"),lar=o(" (RoBERTa model)"),iar=l(),hF=a("li"),F_e=a("strong"),dar=o("roformer"),car=o(" \u2014 "),FV=a("a"),far=o("TFRoFormerModel"),mar=o(" (RoFormer model)"),gar=l(),pF=a("li"),T_e=a("strong"),har=o("speech_to_text"),par=o(" \u2014 "),TV=a("a"),_ar=o("TFSpeech2TextModel"),uar=o(" (Speech2Text model)"),bar=l(),_F=a("li"),M_e=a("strong"),Far=o("t5"),Tar=o(" \u2014 "),MV=a("a"),Mar=o("TFT5Model"),Ear=o(" (T5 model)"),Car=l(),uF=a("li"),E_e=a("strong"),war=o("tapas"),Aar=o(" \u2014 "),EV=a("a"),yar=o("TFTapasModel"),Lar=o(" (TAPAS model)"),xar=l(),bF=a("li"),C_e=a("strong"),kar=o("transfo-xl"),Sar=o(" \u2014 "),CV=a("a"),Rar=o("TFTransfoXLModel"),Bar=o(" (Transformer-XL model)"),Par=l(),vF=a("li"),w_e=a("strong"),$ar=o("vit"),Iar=o(" \u2014 "),wV=a("a"),qar=o("TFViTModel"),Nar=o(" (ViT model)"),jar=l(),FF=a("li"),A_e=a("strong"),Dar=o("vit_mae"),Gar=o(" \u2014 "),AV=a("a"),Oar=o("TFViTMAEModel"),Var=o(" (ViTMAE model)"),Xar=l(),TF=a("li"),y_e=a("strong"),zar=o("wav2vec2"),Qar=o(" \u2014 "),yV=a("a"),War=o("TFWav2Vec2Model"),Har=o(" (Wav2Vec2 model)"),Uar=l(),MF=a("li"),L_e=a("strong"),Jar=o("xlm"),Yar=o(" \u2014 "),LV=a("a"),Kar=o("TFXLMModel"),Zar=o(" (XLM model)"),enr=l(),EF=a("li"),x_e=a("strong"),onr=o("xlm-roberta"),rnr=o(" \u2014 "),xV=a("a"),tnr=o("TFXLMRobertaModel"),anr=o(" (XLM-RoBERTa model)"),nnr=l(),CF=a("li"),k_e=a("strong"),snr=o("xlnet"),lnr=o(" \u2014 "),kV=a("a"),inr=o("TFXLNetModel"),dnr=o(" (XLNet model)"),cnr=l(),S_e=a("p"),fnr=o("Examples:"),mnr=l(),f(v0.$$.fragment),lPe=l(),vc=a("h2"),wF=a("a"),R_e=a("span"),f(F0.$$.fragment),gnr=l(),B_e=a("span"),hnr=o("TFAutoModelForPreTraining"),iPe=l(),Fr=a("div"),f(T0.$$.fragment),pnr=l(),Fc=a("p"),_nr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SV=a("a"),unr=o("from_pretrained()"),bnr=o(" class method or the "),RV=a("a"),vnr=o("from_config()"),Fnr=o(` class
method.`),Tnr=l(),M0=a("p"),Mnr=o("This class cannot be instantiated directly using "),P_e=a("code"),Enr=o("__init__()"),Cnr=o(" (throws an error)."),wnr=l(),ht=a("div"),f(E0.$$.fragment),Anr=l(),$_e=a("p"),ynr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lnr=l(),Tc=a("p"),xnr=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),knr=o("not"),Snr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),Rnr=o("from_pretrained()"),Bnr=o(" to load the model weights."),Pnr=l(),q_e=a("p"),$nr=o("Examples:"),Inr=l(),f(C0.$$.fragment),qnr=l(),po=a("div"),f(w0.$$.fragment),Nnr=l(),N_e=a("p"),jnr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dnr=l(),bn=a("p"),Gnr=o("The model class to instantiate is selected based on the "),j_e=a("code"),Onr=o("model_type"),Vnr=o(` property of the config object (either
passed as an argument or loaded from `),D_e=a("code"),Xnr=o("pretrained_model_name_or_path"),znr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=a("code"),Qnr=o("pretrained_model_name_or_path"),Wnr=o(":"),Hnr=l(),H=a("ul"),AF=a("li"),O_e=a("strong"),Unr=o("albert"),Jnr=o(" \u2014 "),PV=a("a"),Ynr=o("TFAlbertForPreTraining"),Knr=o(" (ALBERT model)"),Znr=l(),yF=a("li"),V_e=a("strong"),esr=o("bart"),osr=o(" \u2014 "),$V=a("a"),rsr=o("TFBartForConditionalGeneration"),tsr=o(" (BART model)"),asr=l(),LF=a("li"),X_e=a("strong"),nsr=o("bert"),ssr=o(" \u2014 "),IV=a("a"),lsr=o("TFBertForPreTraining"),isr=o(" (BERT model)"),dsr=l(),xF=a("li"),z_e=a("strong"),csr=o("camembert"),fsr=o(" \u2014 "),qV=a("a"),msr=o("TFCamembertForMaskedLM"),gsr=o(" (CamemBERT model)"),hsr=l(),kF=a("li"),Q_e=a("strong"),psr=o("ctrl"),_sr=o(" \u2014 "),NV=a("a"),usr=o("TFCTRLLMHeadModel"),bsr=o(" (CTRL model)"),vsr=l(),SF=a("li"),W_e=a("strong"),Fsr=o("distilbert"),Tsr=o(" \u2014 "),jV=a("a"),Msr=o("TFDistilBertForMaskedLM"),Esr=o(" (DistilBERT model)"),Csr=l(),RF=a("li"),H_e=a("strong"),wsr=o("electra"),Asr=o(" \u2014 "),DV=a("a"),ysr=o("TFElectraForPreTraining"),Lsr=o(" (ELECTRA model)"),xsr=l(),BF=a("li"),U_e=a("strong"),ksr=o("flaubert"),Ssr=o(" \u2014 "),GV=a("a"),Rsr=o("TFFlaubertWithLMHeadModel"),Bsr=o(" (FlauBERT model)"),Psr=l(),PF=a("li"),J_e=a("strong"),$sr=o("funnel"),Isr=o(" \u2014 "),OV=a("a"),qsr=o("TFFunnelForPreTraining"),Nsr=o(" (Funnel Transformer model)"),jsr=l(),$F=a("li"),Y_e=a("strong"),Dsr=o("gpt2"),Gsr=o(" \u2014 "),VV=a("a"),Osr=o("TFGPT2LMHeadModel"),Vsr=o(" (OpenAI GPT-2 model)"),Xsr=l(),IF=a("li"),K_e=a("strong"),zsr=o("layoutlm"),Qsr=o(" \u2014 "),XV=a("a"),Wsr=o("TFLayoutLMForMaskedLM"),Hsr=o(" (LayoutLM model)"),Usr=l(),qF=a("li"),Z_e=a("strong"),Jsr=o("lxmert"),Ysr=o(" \u2014 "),zV=a("a"),Ksr=o("TFLxmertForPreTraining"),Zsr=o(" (LXMERT model)"),elr=l(),NF=a("li"),eue=a("strong"),olr=o("mobilebert"),rlr=o(" \u2014 "),QV=a("a"),tlr=o("TFMobileBertForPreTraining"),alr=o(" (MobileBERT model)"),nlr=l(),jF=a("li"),oue=a("strong"),slr=o("mpnet"),llr=o(" \u2014 "),WV=a("a"),ilr=o("TFMPNetForMaskedLM"),dlr=o(" (MPNet model)"),clr=l(),DF=a("li"),rue=a("strong"),flr=o("openai-gpt"),mlr=o(" \u2014 "),HV=a("a"),glr=o("TFOpenAIGPTLMHeadModel"),hlr=o(" (OpenAI GPT model)"),plr=l(),GF=a("li"),tue=a("strong"),_lr=o("roberta"),ulr=o(" \u2014 "),UV=a("a"),blr=o("TFRobertaForMaskedLM"),vlr=o(" (RoBERTa model)"),Flr=l(),OF=a("li"),aue=a("strong"),Tlr=o("t5"),Mlr=o(" \u2014 "),JV=a("a"),Elr=o("TFT5ForConditionalGeneration"),Clr=o(" (T5 model)"),wlr=l(),VF=a("li"),nue=a("strong"),Alr=o("tapas"),ylr=o(" \u2014 "),YV=a("a"),Llr=o("TFTapasForMaskedLM"),xlr=o(" (TAPAS model)"),klr=l(),XF=a("li"),sue=a("strong"),Slr=o("transfo-xl"),Rlr=o(" \u2014 "),KV=a("a"),Blr=o("TFTransfoXLLMHeadModel"),Plr=o(" (Transformer-XL model)"),$lr=l(),zF=a("li"),lue=a("strong"),Ilr=o("vit_mae"),qlr=o(" \u2014 "),ZV=a("a"),Nlr=o("TFViTMAEForPreTraining"),jlr=o(" (ViTMAE model)"),Dlr=l(),QF=a("li"),iue=a("strong"),Glr=o("xlm"),Olr=o(" \u2014 "),eX=a("a"),Vlr=o("TFXLMWithLMHeadModel"),Xlr=o(" (XLM model)"),zlr=l(),WF=a("li"),due=a("strong"),Qlr=o("xlm-roberta"),Wlr=o(" \u2014 "),oX=a("a"),Hlr=o("TFXLMRobertaForMaskedLM"),Ulr=o(" (XLM-RoBERTa model)"),Jlr=l(),HF=a("li"),cue=a("strong"),Ylr=o("xlnet"),Klr=o(" \u2014 "),rX=a("a"),Zlr=o("TFXLNetLMHeadModel"),eir=o(" (XLNet model)"),oir=l(),fue=a("p"),rir=o("Examples:"),tir=l(),f(A0.$$.fragment),dPe=l(),Mc=a("h2"),UF=a("a"),mue=a("span"),f(y0.$$.fragment),air=l(),gue=a("span"),nir=o("TFAutoModelForCausalLM"),cPe=l(),Tr=a("div"),f(L0.$$.fragment),sir=l(),Ec=a("p"),lir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tX=a("a"),iir=o("from_pretrained()"),dir=o(" class method or the "),aX=a("a"),cir=o("from_config()"),fir=o(` class
method.`),mir=l(),x0=a("p"),gir=o("This class cannot be instantiated directly using "),hue=a("code"),hir=o("__init__()"),pir=o(" (throws an error)."),_ir=l(),pt=a("div"),f(k0.$$.fragment),uir=l(),pue=a("p"),bir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vir=l(),Cc=a("p"),Fir=o(`Note:
Loading a model from its configuration file does `),_ue=a("strong"),Tir=o("not"),Mir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=a("a"),Eir=o("from_pretrained()"),Cir=o(" to load the model weights."),wir=l(),uue=a("p"),Air=o("Examples:"),yir=l(),f(S0.$$.fragment),Lir=l(),_o=a("div"),f(R0.$$.fragment),xir=l(),bue=a("p"),kir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Sir=l(),vn=a("p"),Rir=o("The model class to instantiate is selected based on the "),vue=a("code"),Bir=o("model_type"),Pir=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),$ir=o("pretrained_model_name_or_path"),Iir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=a("code"),qir=o("pretrained_model_name_or_path"),Nir=o(":"),jir=l(),fe=a("ul"),JF=a("li"),Mue=a("strong"),Dir=o("bert"),Gir=o(" \u2014 "),sX=a("a"),Oir=o("TFBertLMHeadModel"),Vir=o(" (BERT model)"),Xir=l(),YF=a("li"),Eue=a("strong"),zir=o("camembert"),Qir=o(" \u2014 "),lX=a("a"),Wir=o("TFCamembertForCausalLM"),Hir=o(" (CamemBERT model)"),Uir=l(),KF=a("li"),Cue=a("strong"),Jir=o("ctrl"),Yir=o(" \u2014 "),iX=a("a"),Kir=o("TFCTRLLMHeadModel"),Zir=o(" (CTRL model)"),edr=l(),ZF=a("li"),wue=a("strong"),odr=o("gpt2"),rdr=o(" \u2014 "),dX=a("a"),tdr=o("TFGPT2LMHeadModel"),adr=o(" (OpenAI GPT-2 model)"),ndr=l(),eT=a("li"),Aue=a("strong"),sdr=o("gptj"),ldr=o(" \u2014 "),cX=a("a"),idr=o("TFGPTJForCausalLM"),ddr=o(" (GPT-J model)"),cdr=l(),oT=a("li"),yue=a("strong"),fdr=o("openai-gpt"),mdr=o(" \u2014 "),fX=a("a"),gdr=o("TFOpenAIGPTLMHeadModel"),hdr=o(" (OpenAI GPT model)"),pdr=l(),rT=a("li"),Lue=a("strong"),_dr=o("rembert"),udr=o(" \u2014 "),mX=a("a"),bdr=o("TFRemBertForCausalLM"),vdr=o(" (RemBERT model)"),Fdr=l(),tT=a("li"),xue=a("strong"),Tdr=o("roberta"),Mdr=o(" \u2014 "),gX=a("a"),Edr=o("TFRobertaForCausalLM"),Cdr=o(" (RoBERTa model)"),wdr=l(),aT=a("li"),kue=a("strong"),Adr=o("roformer"),ydr=o(" \u2014 "),hX=a("a"),Ldr=o("TFRoFormerForCausalLM"),xdr=o(" (RoFormer model)"),kdr=l(),nT=a("li"),Sue=a("strong"),Sdr=o("transfo-xl"),Rdr=o(" \u2014 "),pX=a("a"),Bdr=o("TFTransfoXLLMHeadModel"),Pdr=o(" (Transformer-XL model)"),$dr=l(),sT=a("li"),Rue=a("strong"),Idr=o("xlm"),qdr=o(" \u2014 "),_X=a("a"),Ndr=o("TFXLMWithLMHeadModel"),jdr=o(" (XLM model)"),Ddr=l(),lT=a("li"),Bue=a("strong"),Gdr=o("xlnet"),Odr=o(" \u2014 "),uX=a("a"),Vdr=o("TFXLNetLMHeadModel"),Xdr=o(" (XLNet model)"),zdr=l(),Pue=a("p"),Qdr=o("Examples:"),Wdr=l(),f(B0.$$.fragment),fPe=l(),wc=a("h2"),iT=a("a"),$ue=a("span"),f(P0.$$.fragment),Hdr=l(),Iue=a("span"),Udr=o("TFAutoModelForImageClassification"),mPe=l(),Mr=a("div"),f($0.$$.fragment),Jdr=l(),Ac=a("p"),Ydr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bX=a("a"),Kdr=o("from_pretrained()"),Zdr=o(" class method or the "),vX=a("a"),ecr=o("from_config()"),ocr=o(` class
method.`),rcr=l(),I0=a("p"),tcr=o("This class cannot be instantiated directly using "),que=a("code"),acr=o("__init__()"),ncr=o(" (throws an error)."),scr=l(),_t=a("div"),f(q0.$$.fragment),lcr=l(),Nue=a("p"),icr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dcr=l(),yc=a("p"),ccr=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),fcr=o("not"),mcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),gcr=o("from_pretrained()"),hcr=o(" to load the model weights."),pcr=l(),Due=a("p"),_cr=o("Examples:"),ucr=l(),f(N0.$$.fragment),bcr=l(),uo=a("div"),f(j0.$$.fragment),vcr=l(),Gue=a("p"),Fcr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tcr=l(),Fn=a("p"),Mcr=o("The model class to instantiate is selected based on the "),Oue=a("code"),Ecr=o("model_type"),Ccr=o(` property of the config object (either
passed as an argument or loaded from `),Vue=a("code"),wcr=o("pretrained_model_name_or_path"),Acr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=a("code"),ycr=o("pretrained_model_name_or_path"),Lcr=o(":"),xcr=l(),D0=a("ul"),dT=a("li"),zue=a("strong"),kcr=o("convnext"),Scr=o(" \u2014 "),TX=a("a"),Rcr=o("TFConvNextForImageClassification"),Bcr=o(" (ConvNext model)"),Pcr=l(),cT=a("li"),Que=a("strong"),$cr=o("vit"),Icr=o(" \u2014 "),MX=a("a"),qcr=o("TFViTForImageClassification"),Ncr=o(" (ViT model)"),jcr=l(),Wue=a("p"),Dcr=o("Examples:"),Gcr=l(),f(G0.$$.fragment),gPe=l(),Lc=a("h2"),fT=a("a"),Hue=a("span"),f(O0.$$.fragment),Ocr=l(),Uue=a("span"),Vcr=o("TFAutoModelForMaskedLM"),hPe=l(),Er=a("div"),f(V0.$$.fragment),Xcr=l(),xc=a("p"),zcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EX=a("a"),Qcr=o("from_pretrained()"),Wcr=o(" class method or the "),CX=a("a"),Hcr=o("from_config()"),Ucr=o(` class
method.`),Jcr=l(),X0=a("p"),Ycr=o("This class cannot be instantiated directly using "),Jue=a("code"),Kcr=o("__init__()"),Zcr=o(" (throws an error)."),efr=l(),ut=a("div"),f(z0.$$.fragment),ofr=l(),Yue=a("p"),rfr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tfr=l(),kc=a("p"),afr=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),nfr=o("not"),sfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=a("a"),lfr=o("from_pretrained()"),ifr=o(" to load the model weights."),dfr=l(),Zue=a("p"),cfr=o("Examples:"),ffr=l(),f(Q0.$$.fragment),mfr=l(),bo=a("div"),f(W0.$$.fragment),gfr=l(),e6e=a("p"),hfr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pfr=l(),Tn=a("p"),_fr=o("The model class to instantiate is selected based on the "),o6e=a("code"),ufr=o("model_type"),bfr=o(` property of the config object (either
passed as an argument or loaded from `),r6e=a("code"),vfr=o("pretrained_model_name_or_path"),Ffr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t6e=a("code"),Tfr=o("pretrained_model_name_or_path"),Mfr=o(":"),Efr=l(),J=a("ul"),mT=a("li"),a6e=a("strong"),Cfr=o("albert"),wfr=o(" \u2014 "),AX=a("a"),Afr=o("TFAlbertForMaskedLM"),yfr=o(" (ALBERT model)"),Lfr=l(),gT=a("li"),n6e=a("strong"),xfr=o("bert"),kfr=o(" \u2014 "),yX=a("a"),Sfr=o("TFBertForMaskedLM"),Rfr=o(" (BERT model)"),Bfr=l(),hT=a("li"),s6e=a("strong"),Pfr=o("camembert"),$fr=o(" \u2014 "),LX=a("a"),Ifr=o("TFCamembertForMaskedLM"),qfr=o(" (CamemBERT model)"),Nfr=l(),pT=a("li"),l6e=a("strong"),jfr=o("convbert"),Dfr=o(" \u2014 "),xX=a("a"),Gfr=o("TFConvBertForMaskedLM"),Ofr=o(" (ConvBERT model)"),Vfr=l(),_T=a("li"),i6e=a("strong"),Xfr=o("deberta"),zfr=o(" \u2014 "),kX=a("a"),Qfr=o("TFDebertaForMaskedLM"),Wfr=o(" (DeBERTa model)"),Hfr=l(),uT=a("li"),d6e=a("strong"),Ufr=o("deberta-v2"),Jfr=o(" \u2014 "),SX=a("a"),Yfr=o("TFDebertaV2ForMaskedLM"),Kfr=o(" (DeBERTa-v2 model)"),Zfr=l(),bT=a("li"),c6e=a("strong"),emr=o("distilbert"),omr=o(" \u2014 "),RX=a("a"),rmr=o("TFDistilBertForMaskedLM"),tmr=o(" (DistilBERT model)"),amr=l(),vT=a("li"),f6e=a("strong"),nmr=o("electra"),smr=o(" \u2014 "),BX=a("a"),lmr=o("TFElectraForMaskedLM"),imr=o(" (ELECTRA model)"),dmr=l(),FT=a("li"),m6e=a("strong"),cmr=o("flaubert"),fmr=o(" \u2014 "),PX=a("a"),mmr=o("TFFlaubertWithLMHeadModel"),gmr=o(" (FlauBERT model)"),hmr=l(),TT=a("li"),g6e=a("strong"),pmr=o("funnel"),_mr=o(" \u2014 "),$X=a("a"),umr=o("TFFunnelForMaskedLM"),bmr=o(" (Funnel Transformer model)"),vmr=l(),MT=a("li"),h6e=a("strong"),Fmr=o("layoutlm"),Tmr=o(" \u2014 "),IX=a("a"),Mmr=o("TFLayoutLMForMaskedLM"),Emr=o(" (LayoutLM model)"),Cmr=l(),ET=a("li"),p6e=a("strong"),wmr=o("longformer"),Amr=o(" \u2014 "),qX=a("a"),ymr=o("TFLongformerForMaskedLM"),Lmr=o(" (Longformer model)"),xmr=l(),CT=a("li"),_6e=a("strong"),kmr=o("mobilebert"),Smr=o(" \u2014 "),NX=a("a"),Rmr=o("TFMobileBertForMaskedLM"),Bmr=o(" (MobileBERT model)"),Pmr=l(),wT=a("li"),u6e=a("strong"),$mr=o("mpnet"),Imr=o(" \u2014 "),jX=a("a"),qmr=o("TFMPNetForMaskedLM"),Nmr=o(" (MPNet model)"),jmr=l(),AT=a("li"),b6e=a("strong"),Dmr=o("rembert"),Gmr=o(" \u2014 "),DX=a("a"),Omr=o("TFRemBertForMaskedLM"),Vmr=o(" (RemBERT model)"),Xmr=l(),yT=a("li"),v6e=a("strong"),zmr=o("roberta"),Qmr=o(" \u2014 "),GX=a("a"),Wmr=o("TFRobertaForMaskedLM"),Hmr=o(" (RoBERTa model)"),Umr=l(),LT=a("li"),F6e=a("strong"),Jmr=o("roformer"),Ymr=o(" \u2014 "),OX=a("a"),Kmr=o("TFRoFormerForMaskedLM"),Zmr=o(" (RoFormer model)"),egr=l(),xT=a("li"),T6e=a("strong"),ogr=o("tapas"),rgr=o(" \u2014 "),VX=a("a"),tgr=o("TFTapasForMaskedLM"),agr=o(" (TAPAS model)"),ngr=l(),kT=a("li"),M6e=a("strong"),sgr=o("xlm"),lgr=o(" \u2014 "),XX=a("a"),igr=o("TFXLMWithLMHeadModel"),dgr=o(" (XLM model)"),cgr=l(),ST=a("li"),E6e=a("strong"),fgr=o("xlm-roberta"),mgr=o(" \u2014 "),zX=a("a"),ggr=o("TFXLMRobertaForMaskedLM"),hgr=o(" (XLM-RoBERTa model)"),pgr=l(),C6e=a("p"),_gr=o("Examples:"),ugr=l(),f(H0.$$.fragment),pPe=l(),Sc=a("h2"),RT=a("a"),w6e=a("span"),f(U0.$$.fragment),bgr=l(),A6e=a("span"),vgr=o("TFAutoModelForSeq2SeqLM"),_Pe=l(),Cr=a("div"),f(J0.$$.fragment),Fgr=l(),Rc=a("p"),Tgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QX=a("a"),Mgr=o("from_pretrained()"),Egr=o(" class method or the "),WX=a("a"),Cgr=o("from_config()"),wgr=o(` class
method.`),Agr=l(),Y0=a("p"),ygr=o("This class cannot be instantiated directly using "),y6e=a("code"),Lgr=o("__init__()"),xgr=o(" (throws an error)."),kgr=l(),bt=a("div"),f(K0.$$.fragment),Sgr=l(),L6e=a("p"),Rgr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bgr=l(),Bc=a("p"),Pgr=o(`Note:
Loading a model from its configuration file does `),x6e=a("strong"),$gr=o("not"),Igr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),qgr=o("from_pretrained()"),Ngr=o(" to load the model weights."),jgr=l(),k6e=a("p"),Dgr=o("Examples:"),Ggr=l(),f(Z0.$$.fragment),Ogr=l(),vo=a("div"),f(ey.$$.fragment),Vgr=l(),S6e=a("p"),Xgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zgr=l(),Mn=a("p"),Qgr=o("The model class to instantiate is selected based on the "),R6e=a("code"),Wgr=o("model_type"),Hgr=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),Ugr=o("pretrained_model_name_or_path"),Jgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),Ygr=o("pretrained_model_name_or_path"),Kgr=o(":"),Zgr=l(),be=a("ul"),BT=a("li"),$6e=a("strong"),ehr=o("bart"),ohr=o(" \u2014 "),UX=a("a"),rhr=o("TFBartForConditionalGeneration"),thr=o(" (BART model)"),ahr=l(),PT=a("li"),I6e=a("strong"),nhr=o("blenderbot"),shr=o(" \u2014 "),JX=a("a"),lhr=o("TFBlenderbotForConditionalGeneration"),ihr=o(" (Blenderbot model)"),dhr=l(),$T=a("li"),q6e=a("strong"),chr=o("blenderbot-small"),fhr=o(" \u2014 "),YX=a("a"),mhr=o("TFBlenderbotSmallForConditionalGeneration"),ghr=o(" (BlenderbotSmall model)"),hhr=l(),IT=a("li"),N6e=a("strong"),phr=o("encoder-decoder"),_hr=o(" \u2014 "),KX=a("a"),uhr=o("TFEncoderDecoderModel"),bhr=o(" (Encoder decoder model)"),vhr=l(),qT=a("li"),j6e=a("strong"),Fhr=o("led"),Thr=o(" \u2014 "),ZX=a("a"),Mhr=o("TFLEDForConditionalGeneration"),Ehr=o(" (LED model)"),Chr=l(),NT=a("li"),D6e=a("strong"),whr=o("marian"),Ahr=o(" \u2014 "),ez=a("a"),yhr=o("TFMarianMTModel"),Lhr=o(" (Marian model)"),xhr=l(),jT=a("li"),G6e=a("strong"),khr=o("mbart"),Shr=o(" \u2014 "),oz=a("a"),Rhr=o("TFMBartForConditionalGeneration"),Bhr=o(" (mBART model)"),Phr=l(),DT=a("li"),O6e=a("strong"),$hr=o("mt5"),Ihr=o(" \u2014 "),rz=a("a"),qhr=o("TFMT5ForConditionalGeneration"),Nhr=o(" (mT5 model)"),jhr=l(),GT=a("li"),V6e=a("strong"),Dhr=o("pegasus"),Ghr=o(" \u2014 "),tz=a("a"),Ohr=o("TFPegasusForConditionalGeneration"),Vhr=o(" (Pegasus model)"),Xhr=l(),OT=a("li"),X6e=a("strong"),zhr=o("t5"),Qhr=o(" \u2014 "),az=a("a"),Whr=o("TFT5ForConditionalGeneration"),Hhr=o(" (T5 model)"),Uhr=l(),z6e=a("p"),Jhr=o("Examples:"),Yhr=l(),f(oy.$$.fragment),uPe=l(),Pc=a("h2"),VT=a("a"),Q6e=a("span"),f(ry.$$.fragment),Khr=l(),W6e=a("span"),Zhr=o("TFAutoModelForSequenceClassification"),bPe=l(),wr=a("div"),f(ty.$$.fragment),epr=l(),$c=a("p"),opr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nz=a("a"),rpr=o("from_pretrained()"),tpr=o(" class method or the "),sz=a("a"),apr=o("from_config()"),npr=o(` class
method.`),spr=l(),ay=a("p"),lpr=o("This class cannot be instantiated directly using "),H6e=a("code"),ipr=o("__init__()"),dpr=o(" (throws an error)."),cpr=l(),vt=a("div"),f(ny.$$.fragment),fpr=l(),U6e=a("p"),mpr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gpr=l(),Ic=a("p"),hpr=o(`Note:
Loading a model from its configuration file does `),J6e=a("strong"),ppr=o("not"),_pr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=a("a"),upr=o("from_pretrained()"),bpr=o(" to load the model weights."),vpr=l(),Y6e=a("p"),Fpr=o("Examples:"),Tpr=l(),f(sy.$$.fragment),Mpr=l(),Fo=a("div"),f(ly.$$.fragment),Epr=l(),K6e=a("p"),Cpr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wpr=l(),En=a("p"),Apr=o("The model class to instantiate is selected based on the "),Z6e=a("code"),ypr=o("model_type"),Lpr=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),xpr=o("pretrained_model_name_or_path"),kpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),Spr=o("pretrained_model_name_or_path"),Rpr=o(":"),Bpr=l(),V=a("ul"),XT=a("li"),r1e=a("strong"),Ppr=o("albert"),$pr=o(" \u2014 "),iz=a("a"),Ipr=o("TFAlbertForSequenceClassification"),qpr=o(" (ALBERT model)"),Npr=l(),zT=a("li"),t1e=a("strong"),jpr=o("bert"),Dpr=o(" \u2014 "),dz=a("a"),Gpr=o("TFBertForSequenceClassification"),Opr=o(" (BERT model)"),Vpr=l(),QT=a("li"),a1e=a("strong"),Xpr=o("camembert"),zpr=o(" \u2014 "),cz=a("a"),Qpr=o("TFCamembertForSequenceClassification"),Wpr=o(" (CamemBERT model)"),Hpr=l(),WT=a("li"),n1e=a("strong"),Upr=o("convbert"),Jpr=o(" \u2014 "),fz=a("a"),Ypr=o("TFConvBertForSequenceClassification"),Kpr=o(" (ConvBERT model)"),Zpr=l(),HT=a("li"),s1e=a("strong"),e_r=o("ctrl"),o_r=o(" \u2014 "),mz=a("a"),r_r=o("TFCTRLForSequenceClassification"),t_r=o(" (CTRL model)"),a_r=l(),UT=a("li"),l1e=a("strong"),n_r=o("deberta"),s_r=o(" \u2014 "),gz=a("a"),l_r=o("TFDebertaForSequenceClassification"),i_r=o(" (DeBERTa model)"),d_r=l(),JT=a("li"),i1e=a("strong"),c_r=o("deberta-v2"),f_r=o(" \u2014 "),hz=a("a"),m_r=o("TFDebertaV2ForSequenceClassification"),g_r=o(" (DeBERTa-v2 model)"),h_r=l(),YT=a("li"),d1e=a("strong"),p_r=o("distilbert"),__r=o(" \u2014 "),pz=a("a"),u_r=o("TFDistilBertForSequenceClassification"),b_r=o(" (DistilBERT model)"),v_r=l(),KT=a("li"),c1e=a("strong"),F_r=o("electra"),T_r=o(" \u2014 "),_z=a("a"),M_r=o("TFElectraForSequenceClassification"),E_r=o(" (ELECTRA model)"),C_r=l(),ZT=a("li"),f1e=a("strong"),w_r=o("flaubert"),A_r=o(" \u2014 "),uz=a("a"),y_r=o("TFFlaubertForSequenceClassification"),L_r=o(" (FlauBERT model)"),x_r=l(),e9=a("li"),m1e=a("strong"),k_r=o("funnel"),S_r=o(" \u2014 "),bz=a("a"),R_r=o("TFFunnelForSequenceClassification"),B_r=o(" (Funnel Transformer model)"),P_r=l(),o9=a("li"),g1e=a("strong"),$_r=o("gpt2"),I_r=o(" \u2014 "),vz=a("a"),q_r=o("TFGPT2ForSequenceClassification"),N_r=o(" (OpenAI GPT-2 model)"),j_r=l(),r9=a("li"),h1e=a("strong"),D_r=o("gptj"),G_r=o(" \u2014 "),Fz=a("a"),O_r=o("TFGPTJForSequenceClassification"),V_r=o(" (GPT-J model)"),X_r=l(),t9=a("li"),p1e=a("strong"),z_r=o("layoutlm"),Q_r=o(" \u2014 "),Tz=a("a"),W_r=o("TFLayoutLMForSequenceClassification"),H_r=o(" (LayoutLM model)"),U_r=l(),a9=a("li"),_1e=a("strong"),J_r=o("longformer"),Y_r=o(" \u2014 "),Mz=a("a"),K_r=o("TFLongformerForSequenceClassification"),Z_r=o(" (Longformer model)"),eur=l(),n9=a("li"),u1e=a("strong"),our=o("mobilebert"),rur=o(" \u2014 "),Ez=a("a"),tur=o("TFMobileBertForSequenceClassification"),aur=o(" (MobileBERT model)"),nur=l(),s9=a("li"),b1e=a("strong"),sur=o("mpnet"),lur=o(" \u2014 "),Cz=a("a"),iur=o("TFMPNetForSequenceClassification"),dur=o(" (MPNet model)"),cur=l(),l9=a("li"),v1e=a("strong"),fur=o("openai-gpt"),mur=o(" \u2014 "),wz=a("a"),gur=o("TFOpenAIGPTForSequenceClassification"),hur=o(" (OpenAI GPT model)"),pur=l(),i9=a("li"),F1e=a("strong"),_ur=o("rembert"),uur=o(" \u2014 "),Az=a("a"),bur=o("TFRemBertForSequenceClassification"),vur=o(" (RemBERT model)"),Fur=l(),d9=a("li"),T1e=a("strong"),Tur=o("roberta"),Mur=o(" \u2014 "),yz=a("a"),Eur=o("TFRobertaForSequenceClassification"),Cur=o(" (RoBERTa model)"),wur=l(),c9=a("li"),M1e=a("strong"),Aur=o("roformer"),yur=o(" \u2014 "),Lz=a("a"),Lur=o("TFRoFormerForSequenceClassification"),xur=o(" (RoFormer model)"),kur=l(),f9=a("li"),E1e=a("strong"),Sur=o("tapas"),Rur=o(" \u2014 "),xz=a("a"),Bur=o("TFTapasForSequenceClassification"),Pur=o(" (TAPAS model)"),$ur=l(),m9=a("li"),C1e=a("strong"),Iur=o("transfo-xl"),qur=o(" \u2014 "),kz=a("a"),Nur=o("TFTransfoXLForSequenceClassification"),jur=o(" (Transformer-XL model)"),Dur=l(),g9=a("li"),w1e=a("strong"),Gur=o("xlm"),Our=o(" \u2014 "),Sz=a("a"),Vur=o("TFXLMForSequenceClassification"),Xur=o(" (XLM model)"),zur=l(),h9=a("li"),A1e=a("strong"),Qur=o("xlm-roberta"),Wur=o(" \u2014 "),Rz=a("a"),Hur=o("TFXLMRobertaForSequenceClassification"),Uur=o(" (XLM-RoBERTa model)"),Jur=l(),p9=a("li"),y1e=a("strong"),Yur=o("xlnet"),Kur=o(" \u2014 "),Bz=a("a"),Zur=o("TFXLNetForSequenceClassification"),e6r=o(" (XLNet model)"),o6r=l(),L1e=a("p"),r6r=o("Examples:"),t6r=l(),f(iy.$$.fragment),vPe=l(),qc=a("h2"),_9=a("a"),x1e=a("span"),f(dy.$$.fragment),a6r=l(),k1e=a("span"),n6r=o("TFAutoModelForMultipleChoice"),FPe=l(),Ar=a("div"),f(cy.$$.fragment),s6r=l(),Nc=a("p"),l6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Pz=a("a"),i6r=o("from_pretrained()"),d6r=o(" class method or the "),$z=a("a"),c6r=o("from_config()"),f6r=o(` class
method.`),m6r=l(),fy=a("p"),g6r=o("This class cannot be instantiated directly using "),S1e=a("code"),h6r=o("__init__()"),p6r=o(" (throws an error)."),_6r=l(),Ft=a("div"),f(my.$$.fragment),u6r=l(),R1e=a("p"),b6r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v6r=l(),jc=a("p"),F6r=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),T6r=o("not"),M6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),E6r=o("from_pretrained()"),C6r=o(" to load the model weights."),w6r=l(),P1e=a("p"),A6r=o("Examples:"),y6r=l(),f(gy.$$.fragment),L6r=l(),To=a("div"),f(hy.$$.fragment),x6r=l(),$1e=a("p"),k6r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),S6r=l(),Cn=a("p"),R6r=o("The model class to instantiate is selected based on the "),I1e=a("code"),B6r=o("model_type"),P6r=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),$6r=o("pretrained_model_name_or_path"),I6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),q6r=o("pretrained_model_name_or_path"),N6r=o(":"),j6r=l(),se=a("ul"),u9=a("li"),j1e=a("strong"),D6r=o("albert"),G6r=o(" \u2014 "),qz=a("a"),O6r=o("TFAlbertForMultipleChoice"),V6r=o(" (ALBERT model)"),X6r=l(),b9=a("li"),D1e=a("strong"),z6r=o("bert"),Q6r=o(" \u2014 "),Nz=a("a"),W6r=o("TFBertForMultipleChoice"),H6r=o(" (BERT model)"),U6r=l(),v9=a("li"),G1e=a("strong"),J6r=o("camembert"),Y6r=o(" \u2014 "),jz=a("a"),K6r=o("TFCamembertForMultipleChoice"),Z6r=o(" (CamemBERT model)"),e1r=l(),F9=a("li"),O1e=a("strong"),o1r=o("convbert"),r1r=o(" \u2014 "),Dz=a("a"),t1r=o("TFConvBertForMultipleChoice"),a1r=o(" (ConvBERT model)"),n1r=l(),T9=a("li"),V1e=a("strong"),s1r=o("distilbert"),l1r=o(" \u2014 "),Gz=a("a"),i1r=o("TFDistilBertForMultipleChoice"),d1r=o(" (DistilBERT model)"),c1r=l(),M9=a("li"),X1e=a("strong"),f1r=o("electra"),m1r=o(" \u2014 "),Oz=a("a"),g1r=o("TFElectraForMultipleChoice"),h1r=o(" (ELECTRA model)"),p1r=l(),E9=a("li"),z1e=a("strong"),_1r=o("flaubert"),u1r=o(" \u2014 "),Vz=a("a"),b1r=o("TFFlaubertForMultipleChoice"),v1r=o(" (FlauBERT model)"),F1r=l(),C9=a("li"),Q1e=a("strong"),T1r=o("funnel"),M1r=o(" \u2014 "),Xz=a("a"),E1r=o("TFFunnelForMultipleChoice"),C1r=o(" (Funnel Transformer model)"),w1r=l(),w9=a("li"),W1e=a("strong"),A1r=o("longformer"),y1r=o(" \u2014 "),zz=a("a"),L1r=o("TFLongformerForMultipleChoice"),x1r=o(" (Longformer model)"),k1r=l(),A9=a("li"),H1e=a("strong"),S1r=o("mobilebert"),R1r=o(" \u2014 "),Qz=a("a"),B1r=o("TFMobileBertForMultipleChoice"),P1r=o(" (MobileBERT model)"),$1r=l(),y9=a("li"),U1e=a("strong"),I1r=o("mpnet"),q1r=o(" \u2014 "),Wz=a("a"),N1r=o("TFMPNetForMultipleChoice"),j1r=o(" (MPNet model)"),D1r=l(),L9=a("li"),J1e=a("strong"),G1r=o("rembert"),O1r=o(" \u2014 "),Hz=a("a"),V1r=o("TFRemBertForMultipleChoice"),X1r=o(" (RemBERT model)"),z1r=l(),x9=a("li"),Y1e=a("strong"),Q1r=o("roberta"),W1r=o(" \u2014 "),Uz=a("a"),H1r=o("TFRobertaForMultipleChoice"),U1r=o(" (RoBERTa model)"),J1r=l(),k9=a("li"),K1e=a("strong"),Y1r=o("roformer"),K1r=o(" \u2014 "),Jz=a("a"),Z1r=o("TFRoFormerForMultipleChoice"),ebr=o(" (RoFormer model)"),obr=l(),S9=a("li"),Z1e=a("strong"),rbr=o("xlm"),tbr=o(" \u2014 "),Yz=a("a"),abr=o("TFXLMForMultipleChoice"),nbr=o(" (XLM model)"),sbr=l(),R9=a("li"),ebe=a("strong"),lbr=o("xlm-roberta"),ibr=o(" \u2014 "),Kz=a("a"),dbr=o("TFXLMRobertaForMultipleChoice"),cbr=o(" (XLM-RoBERTa model)"),fbr=l(),B9=a("li"),obe=a("strong"),mbr=o("xlnet"),gbr=o(" \u2014 "),Zz=a("a"),hbr=o("TFXLNetForMultipleChoice"),pbr=o(" (XLNet model)"),_br=l(),rbe=a("p"),ubr=o("Examples:"),bbr=l(),f(py.$$.fragment),TPe=l(),Dc=a("h2"),P9=a("a"),tbe=a("span"),f(_y.$$.fragment),vbr=l(),abe=a("span"),Fbr=o("TFAutoModelForTableQuestionAnswering"),MPe=l(),yr=a("div"),f(uy.$$.fragment),Tbr=l(),Gc=a("p"),Mbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eQ=a("a"),Ebr=o("from_pretrained()"),Cbr=o(" class method or the "),oQ=a("a"),wbr=o("from_config()"),Abr=o(` class
method.`),ybr=l(),by=a("p"),Lbr=o("This class cannot be instantiated directly using "),nbe=a("code"),xbr=o("__init__()"),kbr=o(" (throws an error)."),Sbr=l(),Tt=a("div"),f(vy.$$.fragment),Rbr=l(),sbe=a("p"),Bbr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Pbr=l(),Oc=a("p"),$br=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),Ibr=o("not"),qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=a("a"),Nbr=o("from_pretrained()"),jbr=o(" to load the model weights."),Dbr=l(),ibe=a("p"),Gbr=o("Examples:"),Obr=l(),f(Fy.$$.fragment),Vbr=l(),Mo=a("div"),f(Ty.$$.fragment),Xbr=l(),dbe=a("p"),zbr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Qbr=l(),wn=a("p"),Wbr=o("The model class to instantiate is selected based on the "),cbe=a("code"),Hbr=o("model_type"),Ubr=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),Jbr=o("pretrained_model_name_or_path"),Ybr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=a("code"),Kbr=o("pretrained_model_name_or_path"),Zbr=o(":"),e2r=l(),gbe=a("ul"),$9=a("li"),hbe=a("strong"),o2r=o("tapas"),r2r=o(" \u2014 "),tQ=a("a"),t2r=o("TFTapasForQuestionAnswering"),a2r=o(" (TAPAS model)"),n2r=l(),pbe=a("p"),s2r=o("Examples:"),l2r=l(),f(My.$$.fragment),EPe=l(),Vc=a("h2"),I9=a("a"),_be=a("span"),f(Ey.$$.fragment),i2r=l(),ube=a("span"),d2r=o("TFAutoModelForTokenClassification"),CPe=l(),Lr=a("div"),f(Cy.$$.fragment),c2r=l(),Xc=a("p"),f2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aQ=a("a"),m2r=o("from_pretrained()"),g2r=o(" class method or the "),nQ=a("a"),h2r=o("from_config()"),p2r=o(` class
method.`),_2r=l(),wy=a("p"),u2r=o("This class cannot be instantiated directly using "),bbe=a("code"),b2r=o("__init__()"),v2r=o(" (throws an error)."),F2r=l(),Mt=a("div"),f(Ay.$$.fragment),T2r=l(),vbe=a("p"),M2r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),E2r=l(),zc=a("p"),C2r=o(`Note:
Loading a model from its configuration file does `),Fbe=a("strong"),w2r=o("not"),A2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),y2r=o("from_pretrained()"),L2r=o(" to load the model weights."),x2r=l(),Tbe=a("p"),k2r=o("Examples:"),S2r=l(),f(yy.$$.fragment),R2r=l(),Eo=a("div"),f(Ly.$$.fragment),B2r=l(),Mbe=a("p"),P2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$2r=l(),An=a("p"),I2r=o("The model class to instantiate is selected based on the "),Ebe=a("code"),q2r=o("model_type"),N2r=o(` property of the config object (either
passed as an argument or loaded from `),Cbe=a("code"),j2r=o("pretrained_model_name_or_path"),D2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),G2r=o("pretrained_model_name_or_path"),O2r=o(":"),V2r=l(),Y=a("ul"),q9=a("li"),Abe=a("strong"),X2r=o("albert"),z2r=o(" \u2014 "),lQ=a("a"),Q2r=o("TFAlbertForTokenClassification"),W2r=o(" (ALBERT model)"),H2r=l(),N9=a("li"),ybe=a("strong"),U2r=o("bert"),J2r=o(" \u2014 "),iQ=a("a"),Y2r=o("TFBertForTokenClassification"),K2r=o(" (BERT model)"),Z2r=l(),j9=a("li"),Lbe=a("strong"),e5r=o("camembert"),o5r=o(" \u2014 "),dQ=a("a"),r5r=o("TFCamembertForTokenClassification"),t5r=o(" (CamemBERT model)"),a5r=l(),D9=a("li"),xbe=a("strong"),n5r=o("convbert"),s5r=o(" \u2014 "),cQ=a("a"),l5r=o("TFConvBertForTokenClassification"),i5r=o(" (ConvBERT model)"),d5r=l(),G9=a("li"),kbe=a("strong"),c5r=o("deberta"),f5r=o(" \u2014 "),fQ=a("a"),m5r=o("TFDebertaForTokenClassification"),g5r=o(" (DeBERTa model)"),h5r=l(),O9=a("li"),Sbe=a("strong"),p5r=o("deberta-v2"),_5r=o(" \u2014 "),mQ=a("a"),u5r=o("TFDebertaV2ForTokenClassification"),b5r=o(" (DeBERTa-v2 model)"),v5r=l(),V9=a("li"),Rbe=a("strong"),F5r=o("distilbert"),T5r=o(" \u2014 "),gQ=a("a"),M5r=o("TFDistilBertForTokenClassification"),E5r=o(" (DistilBERT model)"),C5r=l(),X9=a("li"),Bbe=a("strong"),w5r=o("electra"),A5r=o(" \u2014 "),hQ=a("a"),y5r=o("TFElectraForTokenClassification"),L5r=o(" (ELECTRA model)"),x5r=l(),z9=a("li"),Pbe=a("strong"),k5r=o("flaubert"),S5r=o(" \u2014 "),pQ=a("a"),R5r=o("TFFlaubertForTokenClassification"),B5r=o(" (FlauBERT model)"),P5r=l(),Q9=a("li"),$be=a("strong"),$5r=o("funnel"),I5r=o(" \u2014 "),_Q=a("a"),q5r=o("TFFunnelForTokenClassification"),N5r=o(" (Funnel Transformer model)"),j5r=l(),W9=a("li"),Ibe=a("strong"),D5r=o("layoutlm"),G5r=o(" \u2014 "),uQ=a("a"),O5r=o("TFLayoutLMForTokenClassification"),V5r=o(" (LayoutLM model)"),X5r=l(),H9=a("li"),qbe=a("strong"),z5r=o("longformer"),Q5r=o(" \u2014 "),bQ=a("a"),W5r=o("TFLongformerForTokenClassification"),H5r=o(" (Longformer model)"),U5r=l(),U9=a("li"),Nbe=a("strong"),J5r=o("mobilebert"),Y5r=o(" \u2014 "),vQ=a("a"),K5r=o("TFMobileBertForTokenClassification"),Z5r=o(" (MobileBERT model)"),evr=l(),J9=a("li"),jbe=a("strong"),ovr=o("mpnet"),rvr=o(" \u2014 "),FQ=a("a"),tvr=o("TFMPNetForTokenClassification"),avr=o(" (MPNet model)"),nvr=l(),Y9=a("li"),Dbe=a("strong"),svr=o("rembert"),lvr=o(" \u2014 "),TQ=a("a"),ivr=o("TFRemBertForTokenClassification"),dvr=o(" (RemBERT model)"),cvr=l(),K9=a("li"),Gbe=a("strong"),fvr=o("roberta"),mvr=o(" \u2014 "),MQ=a("a"),gvr=o("TFRobertaForTokenClassification"),hvr=o(" (RoBERTa model)"),pvr=l(),Z9=a("li"),Obe=a("strong"),_vr=o("roformer"),uvr=o(" \u2014 "),EQ=a("a"),bvr=o("TFRoFormerForTokenClassification"),vvr=o(" (RoFormer model)"),Fvr=l(),eM=a("li"),Vbe=a("strong"),Tvr=o("xlm"),Mvr=o(" \u2014 "),CQ=a("a"),Evr=o("TFXLMForTokenClassification"),Cvr=o(" (XLM model)"),wvr=l(),oM=a("li"),Xbe=a("strong"),Avr=o("xlm-roberta"),yvr=o(" \u2014 "),wQ=a("a"),Lvr=o("TFXLMRobertaForTokenClassification"),xvr=o(" (XLM-RoBERTa model)"),kvr=l(),rM=a("li"),zbe=a("strong"),Svr=o("xlnet"),Rvr=o(" \u2014 "),AQ=a("a"),Bvr=o("TFXLNetForTokenClassification"),Pvr=o(" (XLNet model)"),$vr=l(),Qbe=a("p"),Ivr=o("Examples:"),qvr=l(),f(xy.$$.fragment),wPe=l(),Qc=a("h2"),tM=a("a"),Wbe=a("span"),f(ky.$$.fragment),Nvr=l(),Hbe=a("span"),jvr=o("TFAutoModelForQuestionAnswering"),APe=l(),xr=a("div"),f(Sy.$$.fragment),Dvr=l(),Wc=a("p"),Gvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yQ=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" class method or the "),LQ=a("a"),Xvr=o("from_config()"),zvr=o(` class
method.`),Qvr=l(),Ry=a("p"),Wvr=o("This class cannot be instantiated directly using "),Ube=a("code"),Hvr=o("__init__()"),Uvr=o(" (throws an error)."),Jvr=l(),Et=a("div"),f(By.$$.fragment),Yvr=l(),Jbe=a("p"),Kvr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zvr=l(),Hc=a("p"),eFr=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),oFr=o("not"),rFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),tFr=o("from_pretrained()"),aFr=o(" to load the model weights."),nFr=l(),Kbe=a("p"),sFr=o("Examples:"),lFr=l(),f(Py.$$.fragment),iFr=l(),Co=a("div"),f($y.$$.fragment),dFr=l(),Zbe=a("p"),cFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fFr=l(),yn=a("p"),mFr=o("The model class to instantiate is selected based on the "),e2e=a("code"),gFr=o("model_type"),hFr=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),pFr=o("pretrained_model_name_or_path"),_Fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),uFr=o("pretrained_model_name_or_path"),bFr=o(":"),vFr=l(),K=a("ul"),aM=a("li"),t2e=a("strong"),FFr=o("albert"),TFr=o(" \u2014 "),kQ=a("a"),MFr=o("TFAlbertForQuestionAnswering"),EFr=o(" (ALBERT model)"),CFr=l(),nM=a("li"),a2e=a("strong"),wFr=o("bert"),AFr=o(" \u2014 "),SQ=a("a"),yFr=o("TFBertForQuestionAnswering"),LFr=o(" (BERT model)"),xFr=l(),sM=a("li"),n2e=a("strong"),kFr=o("camembert"),SFr=o(" \u2014 "),RQ=a("a"),RFr=o("TFCamembertForQuestionAnswering"),BFr=o(" (CamemBERT model)"),PFr=l(),lM=a("li"),s2e=a("strong"),$Fr=o("convbert"),IFr=o(" \u2014 "),BQ=a("a"),qFr=o("TFConvBertForQuestionAnswering"),NFr=o(" (ConvBERT model)"),jFr=l(),iM=a("li"),l2e=a("strong"),DFr=o("deberta"),GFr=o(" \u2014 "),PQ=a("a"),OFr=o("TFDebertaForQuestionAnswering"),VFr=o(" (DeBERTa model)"),XFr=l(),dM=a("li"),i2e=a("strong"),zFr=o("deberta-v2"),QFr=o(" \u2014 "),$Q=a("a"),WFr=o("TFDebertaV2ForQuestionAnswering"),HFr=o(" (DeBERTa-v2 model)"),UFr=l(),cM=a("li"),d2e=a("strong"),JFr=o("distilbert"),YFr=o(" \u2014 "),IQ=a("a"),KFr=o("TFDistilBertForQuestionAnswering"),ZFr=o(" (DistilBERT model)"),eTr=l(),fM=a("li"),c2e=a("strong"),oTr=o("electra"),rTr=o(" \u2014 "),qQ=a("a"),tTr=o("TFElectraForQuestionAnswering"),aTr=o(" (ELECTRA model)"),nTr=l(),mM=a("li"),f2e=a("strong"),sTr=o("flaubert"),lTr=o(" \u2014 "),NQ=a("a"),iTr=o("TFFlaubertForQuestionAnsweringSimple"),dTr=o(" (FlauBERT model)"),cTr=l(),gM=a("li"),m2e=a("strong"),fTr=o("funnel"),mTr=o(" \u2014 "),jQ=a("a"),gTr=o("TFFunnelForQuestionAnswering"),hTr=o(" (Funnel Transformer model)"),pTr=l(),hM=a("li"),g2e=a("strong"),_Tr=o("gptj"),uTr=o(" \u2014 "),DQ=a("a"),bTr=o("TFGPTJForQuestionAnswering"),vTr=o(" (GPT-J model)"),FTr=l(),pM=a("li"),h2e=a("strong"),TTr=o("longformer"),MTr=o(" \u2014 "),GQ=a("a"),ETr=o("TFLongformerForQuestionAnswering"),CTr=o(" (Longformer model)"),wTr=l(),_M=a("li"),p2e=a("strong"),ATr=o("mobilebert"),yTr=o(" \u2014 "),OQ=a("a"),LTr=o("TFMobileBertForQuestionAnswering"),xTr=o(" (MobileBERT model)"),kTr=l(),uM=a("li"),_2e=a("strong"),STr=o("mpnet"),RTr=o(" \u2014 "),VQ=a("a"),BTr=o("TFMPNetForQuestionAnswering"),PTr=o(" (MPNet model)"),$Tr=l(),bM=a("li"),u2e=a("strong"),ITr=o("rembert"),qTr=o(" \u2014 "),XQ=a("a"),NTr=o("TFRemBertForQuestionAnswering"),jTr=o(" (RemBERT model)"),DTr=l(),vM=a("li"),b2e=a("strong"),GTr=o("roberta"),OTr=o(" \u2014 "),zQ=a("a"),VTr=o("TFRobertaForQuestionAnswering"),XTr=o(" (RoBERTa model)"),zTr=l(),FM=a("li"),v2e=a("strong"),QTr=o("roformer"),WTr=o(" \u2014 "),QQ=a("a"),HTr=o("TFRoFormerForQuestionAnswering"),UTr=o(" (RoFormer model)"),JTr=l(),TM=a("li"),F2e=a("strong"),YTr=o("xlm"),KTr=o(" \u2014 "),WQ=a("a"),ZTr=o("TFXLMForQuestionAnsweringSimple"),e9r=o(" (XLM model)"),o9r=l(),MM=a("li"),T2e=a("strong"),r9r=o("xlm-roberta"),t9r=o(" \u2014 "),HQ=a("a"),a9r=o("TFXLMRobertaForQuestionAnswering"),n9r=o(" (XLM-RoBERTa model)"),s9r=l(),EM=a("li"),M2e=a("strong"),l9r=o("xlnet"),i9r=o(" \u2014 "),UQ=a("a"),d9r=o("TFXLNetForQuestionAnsweringSimple"),c9r=o(" (XLNet model)"),f9r=l(),E2e=a("p"),m9r=o("Examples:"),g9r=l(),f(Iy.$$.fragment),yPe=l(),Uc=a("h2"),CM=a("a"),C2e=a("span"),f(qy.$$.fragment),h9r=l(),w2e=a("span"),p9r=o("TFAutoModelForVision2Seq"),LPe=l(),kr=a("div"),f(Ny.$$.fragment),_9r=l(),Jc=a("p"),u9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JQ=a("a"),b9r=o("from_pretrained()"),v9r=o(" class method or the "),YQ=a("a"),F9r=o("from_config()"),T9r=o(` class
method.`),M9r=l(),jy=a("p"),E9r=o("This class cannot be instantiated directly using "),A2e=a("code"),C9r=o("__init__()"),w9r=o(" (throws an error)."),A9r=l(),Ct=a("div"),f(Dy.$$.fragment),y9r=l(),y2e=a("p"),L9r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),x9r=l(),Yc=a("p"),k9r=o(`Note:
Loading a model from its configuration file does `),L2e=a("strong"),S9r=o("not"),R9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),B9r=o("from_pretrained()"),P9r=o(" to load the model weights."),$9r=l(),x2e=a("p"),I9r=o("Examples:"),q9r=l(),f(Gy.$$.fragment),N9r=l(),wo=a("div"),f(Oy.$$.fragment),j9r=l(),k2e=a("p"),D9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),G9r=l(),Ln=a("p"),O9r=o("The model class to instantiate is selected based on the "),S2e=a("code"),V9r=o("model_type"),X9r=o(` property of the config object (either
passed as an argument or loaded from `),R2e=a("code"),z9r=o("pretrained_model_name_or_path"),Q9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),W9r=o("pretrained_model_name_or_path"),H9r=o(":"),U9r=l(),P2e=a("ul"),wM=a("li"),$2e=a("strong"),J9r=o("vision-encoder-decoder"),Y9r=o(" \u2014 "),ZQ=a("a"),K9r=o("TFVisionEncoderDecoderModel"),Z9r=o(" (Vision Encoder decoder model)"),eMr=l(),I2e=a("p"),oMr=o("Examples:"),rMr=l(),f(Vy.$$.fragment),xPe=l(),Kc=a("h2"),AM=a("a"),q2e=a("span"),f(Xy.$$.fragment),tMr=l(),N2e=a("span"),aMr=o("TFAutoModelForSpeechSeq2Seq"),kPe=l(),Sr=a("div"),f(zy.$$.fragment),nMr=l(),Zc=a("p"),sMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eW=a("a"),lMr=o("from_pretrained()"),iMr=o(" class method or the "),oW=a("a"),dMr=o("from_config()"),cMr=o(` class
method.`),fMr=l(),Qy=a("p"),mMr=o("This class cannot be instantiated directly using "),j2e=a("code"),gMr=o("__init__()"),hMr=o(" (throws an error)."),pMr=l(),wt=a("div"),f(Wy.$$.fragment),_Mr=l(),D2e=a("p"),uMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bMr=l(),ef=a("p"),vMr=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),FMr=o("not"),TMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),MMr=o("from_pretrained()"),EMr=o(" to load the model weights."),CMr=l(),O2e=a("p"),wMr=o("Examples:"),AMr=l(),f(Hy.$$.fragment),yMr=l(),Ao=a("div"),f(Uy.$$.fragment),LMr=l(),V2e=a("p"),xMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kMr=l(),xn=a("p"),SMr=o("The model class to instantiate is selected based on the "),X2e=a("code"),RMr=o("model_type"),BMr=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),PMr=o("pretrained_model_name_or_path"),$Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),IMr=o("pretrained_model_name_or_path"),qMr=o(":"),NMr=l(),W2e=a("ul"),yM=a("li"),H2e=a("strong"),jMr=o("speech_to_text"),DMr=o(" \u2014 "),tW=a("a"),GMr=o("TFSpeech2TextForConditionalGeneration"),OMr=o(" (Speech2Text model)"),VMr=l(),U2e=a("p"),XMr=o("Examples:"),zMr=l(),f(Jy.$$.fragment),SPe=l(),of=a("h2"),LM=a("a"),J2e=a("span"),f(Yy.$$.fragment),QMr=l(),Y2e=a("span"),WMr=o("FlaxAutoModel"),RPe=l(),Rr=a("div"),f(Ky.$$.fragment),HMr=l(),rf=a("p"),UMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aW=a("a"),JMr=o("from_pretrained()"),YMr=o(" class method or the "),nW=a("a"),KMr=o("from_config()"),ZMr=o(` class
method.`),e4r=l(),Zy=a("p"),o4r=o("This class cannot be instantiated directly using "),K2e=a("code"),r4r=o("__init__()"),t4r=o(" (throws an error)."),a4r=l(),At=a("div"),f(e8.$$.fragment),n4r=l(),Z2e=a("p"),s4r=o("Instantiates one of the base model classes of the library from a configuration."),l4r=l(),tf=a("p"),i4r=o(`Note:
Loading a model from its configuration file does `),e5e=a("strong"),d4r=o("not"),c4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),f4r=o("from_pretrained()"),m4r=o(" to load the model weights."),g4r=l(),o5e=a("p"),h4r=o("Examples:"),p4r=l(),f(o8.$$.fragment),_4r=l(),yo=a("div"),f(r8.$$.fragment),u4r=l(),r5e=a("p"),b4r=o("Instantiate one of the base model classes of the library from a pretrained model."),v4r=l(),kn=a("p"),F4r=o("The model class to instantiate is selected based on the "),t5e=a("code"),T4r=o("model_type"),M4r=o(` property of the config object (either
passed as an argument or loaded from `),a5e=a("code"),E4r=o("pretrained_model_name_or_path"),C4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=a("code"),w4r=o("pretrained_model_name_or_path"),A4r=o(":"),y4r=l(),z=a("ul"),xM=a("li"),s5e=a("strong"),L4r=o("albert"),x4r=o(" \u2014 "),lW=a("a"),k4r=o("FlaxAlbertModel"),S4r=o(" (ALBERT model)"),R4r=l(),kM=a("li"),l5e=a("strong"),B4r=o("bart"),P4r=o(" \u2014 "),iW=a("a"),$4r=o("FlaxBartModel"),I4r=o(" (BART model)"),q4r=l(),SM=a("li"),i5e=a("strong"),N4r=o("beit"),j4r=o(" \u2014 "),dW=a("a"),D4r=o("FlaxBeitModel"),G4r=o(" (BEiT model)"),O4r=l(),RM=a("li"),d5e=a("strong"),V4r=o("bert"),X4r=o(" \u2014 "),cW=a("a"),z4r=o("FlaxBertModel"),Q4r=o(" (BERT model)"),W4r=l(),BM=a("li"),c5e=a("strong"),H4r=o("big_bird"),U4r=o(" \u2014 "),fW=a("a"),J4r=o("FlaxBigBirdModel"),Y4r=o(" (BigBird model)"),K4r=l(),PM=a("li"),f5e=a("strong"),Z4r=o("blenderbot"),eEr=o(" \u2014 "),mW=a("a"),oEr=o("FlaxBlenderbotModel"),rEr=o(" (Blenderbot model)"),tEr=l(),$M=a("li"),m5e=a("strong"),aEr=o("blenderbot-small"),nEr=o(" \u2014 "),gW=a("a"),sEr=o("FlaxBlenderbotSmallModel"),lEr=o(" (BlenderbotSmall model)"),iEr=l(),IM=a("li"),g5e=a("strong"),dEr=o("clip"),cEr=o(" \u2014 "),hW=a("a"),fEr=o("FlaxCLIPModel"),mEr=o(" (CLIP model)"),gEr=l(),qM=a("li"),h5e=a("strong"),hEr=o("distilbert"),pEr=o(" \u2014 "),pW=a("a"),_Er=o("FlaxDistilBertModel"),uEr=o(" (DistilBERT model)"),bEr=l(),NM=a("li"),p5e=a("strong"),vEr=o("electra"),FEr=o(" \u2014 "),_W=a("a"),TEr=o("FlaxElectraModel"),MEr=o(" (ELECTRA model)"),EEr=l(),jM=a("li"),_5e=a("strong"),CEr=o("gpt2"),wEr=o(" \u2014 "),uW=a("a"),AEr=o("FlaxGPT2Model"),yEr=o(" (OpenAI GPT-2 model)"),LEr=l(),DM=a("li"),u5e=a("strong"),xEr=o("gpt_neo"),kEr=o(" \u2014 "),bW=a("a"),SEr=o("FlaxGPTNeoModel"),REr=o(" (GPT Neo model)"),BEr=l(),GM=a("li"),b5e=a("strong"),PEr=o("gptj"),$Er=o(" \u2014 "),vW=a("a"),IEr=o("FlaxGPTJModel"),qEr=o(" (GPT-J model)"),NEr=l(),OM=a("li"),v5e=a("strong"),jEr=o("marian"),DEr=o(" \u2014 "),FW=a("a"),GEr=o("FlaxMarianModel"),OEr=o(" (Marian model)"),VEr=l(),VM=a("li"),F5e=a("strong"),XEr=o("mbart"),zEr=o(" \u2014 "),TW=a("a"),QEr=o("FlaxMBartModel"),WEr=o(" (mBART model)"),HEr=l(),XM=a("li"),T5e=a("strong"),UEr=o("mt5"),JEr=o(" \u2014 "),MW=a("a"),YEr=o("FlaxMT5Model"),KEr=o(" (mT5 model)"),ZEr=l(),zM=a("li"),M5e=a("strong"),e3r=o("pegasus"),o3r=o(" \u2014 "),EW=a("a"),r3r=o("FlaxPegasusModel"),t3r=o(" (Pegasus model)"),a3r=l(),QM=a("li"),E5e=a("strong"),n3r=o("roberta"),s3r=o(" \u2014 "),CW=a("a"),l3r=o("FlaxRobertaModel"),i3r=o(" (RoBERTa model)"),d3r=l(),WM=a("li"),C5e=a("strong"),c3r=o("roformer"),f3r=o(" \u2014 "),wW=a("a"),m3r=o("FlaxRoFormerModel"),g3r=o(" (RoFormer model)"),h3r=l(),HM=a("li"),w5e=a("strong"),p3r=o("t5"),_3r=o(" \u2014 "),AW=a("a"),u3r=o("FlaxT5Model"),b3r=o(" (T5 model)"),v3r=l(),UM=a("li"),A5e=a("strong"),F3r=o("vision-text-dual-encoder"),T3r=o(" \u2014 "),yW=a("a"),M3r=o("FlaxVisionTextDualEncoderModel"),E3r=o(" (VisionTextDualEncoder model)"),C3r=l(),JM=a("li"),y5e=a("strong"),w3r=o("vit"),A3r=o(" \u2014 "),LW=a("a"),y3r=o("FlaxViTModel"),L3r=o(" (ViT model)"),x3r=l(),YM=a("li"),L5e=a("strong"),k3r=o("wav2vec2"),S3r=o(" \u2014 "),xW=a("a"),R3r=o("FlaxWav2Vec2Model"),B3r=o(" (Wav2Vec2 model)"),P3r=l(),KM=a("li"),x5e=a("strong"),$3r=o("xglm"),I3r=o(" \u2014 "),kW=a("a"),q3r=o("FlaxXGLMModel"),N3r=o(" (XGLM model)"),j3r=l(),ZM=a("li"),k5e=a("strong"),D3r=o("xlm-roberta"),G3r=o(" \u2014 "),SW=a("a"),O3r=o("FlaxXLMRobertaModel"),V3r=o(" (XLM-RoBERTa model)"),X3r=l(),S5e=a("p"),z3r=o("Examples:"),Q3r=l(),f(t8.$$.fragment),BPe=l(),af=a("h2"),e4=a("a"),R5e=a("span"),f(a8.$$.fragment),W3r=l(),B5e=a("span"),H3r=o("FlaxAutoModelForCausalLM"),PPe=l(),Br=a("div"),f(n8.$$.fragment),U3r=l(),nf=a("p"),J3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RW=a("a"),Y3r=o("from_pretrained()"),K3r=o(" class method or the "),BW=a("a"),Z3r=o("from_config()"),eCr=o(` class
method.`),oCr=l(),s8=a("p"),rCr=o("This class cannot be instantiated directly using "),P5e=a("code"),tCr=o("__init__()"),aCr=o(" (throws an error)."),nCr=l(),yt=a("div"),f(l8.$$.fragment),sCr=l(),$5e=a("p"),lCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iCr=l(),sf=a("p"),dCr=o(`Note:
Loading a model from its configuration file does `),I5e=a("strong"),cCr=o("not"),fCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),mCr=o("from_pretrained()"),gCr=o(" to load the model weights."),hCr=l(),q5e=a("p"),pCr=o("Examples:"),_Cr=l(),f(i8.$$.fragment),uCr=l(),Lo=a("div"),f(d8.$$.fragment),bCr=l(),N5e=a("p"),vCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FCr=l(),Sn=a("p"),TCr=o("The model class to instantiate is selected based on the "),j5e=a("code"),MCr=o("model_type"),ECr=o(` property of the config object (either
passed as an argument or loaded from `),D5e=a("code"),CCr=o("pretrained_model_name_or_path"),wCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=a("code"),ACr=o("pretrained_model_name_or_path"),yCr=o(":"),LCr=l(),ca=a("ul"),o4=a("li"),O5e=a("strong"),xCr=o("bart"),kCr=o(" \u2014 "),$W=a("a"),SCr=o("FlaxBartForCausalLM"),RCr=o(" (BART model)"),BCr=l(),r4=a("li"),V5e=a("strong"),PCr=o("gpt2"),$Cr=o(" \u2014 "),IW=a("a"),ICr=o("FlaxGPT2LMHeadModel"),qCr=o(" (OpenAI GPT-2 model)"),NCr=l(),t4=a("li"),X5e=a("strong"),jCr=o("gpt_neo"),DCr=o(" \u2014 "),qW=a("a"),GCr=o("FlaxGPTNeoForCausalLM"),OCr=o(" (GPT Neo model)"),VCr=l(),a4=a("li"),z5e=a("strong"),XCr=o("gptj"),zCr=o(" \u2014 "),NW=a("a"),QCr=o("FlaxGPTJForCausalLM"),WCr=o(" (GPT-J model)"),HCr=l(),n4=a("li"),Q5e=a("strong"),UCr=o("xglm"),JCr=o(" \u2014 "),jW=a("a"),YCr=o("FlaxXGLMForCausalLM"),KCr=o(" (XGLM model)"),ZCr=l(),W5e=a("p"),ewr=o("Examples:"),owr=l(),f(c8.$$.fragment),$Pe=l(),lf=a("h2"),s4=a("a"),H5e=a("span"),f(f8.$$.fragment),rwr=l(),U5e=a("span"),twr=o("FlaxAutoModelForPreTraining"),IPe=l(),Pr=a("div"),f(m8.$$.fragment),awr=l(),df=a("p"),nwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DW=a("a"),swr=o("from_pretrained()"),lwr=o(" class method or the "),GW=a("a"),iwr=o("from_config()"),dwr=o(` class
method.`),cwr=l(),g8=a("p"),fwr=o("This class cannot be instantiated directly using "),J5e=a("code"),mwr=o("__init__()"),gwr=o(" (throws an error)."),hwr=l(),Lt=a("div"),f(h8.$$.fragment),pwr=l(),Y5e=a("p"),_wr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uwr=l(),cf=a("p"),bwr=o(`Note:
Loading a model from its configuration file does `),K5e=a("strong"),vwr=o("not"),Fwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),Twr=o("from_pretrained()"),Mwr=o(" to load the model weights."),Ewr=l(),Z5e=a("p"),Cwr=o("Examples:"),wwr=l(),f(p8.$$.fragment),Awr=l(),xo=a("div"),f(_8.$$.fragment),ywr=l(),eve=a("p"),Lwr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xwr=l(),Rn=a("p"),kwr=o("The model class to instantiate is selected based on the "),ove=a("code"),Swr=o("model_type"),Rwr=o(` property of the config object (either
passed as an argument or loaded from `),rve=a("code"),Bwr=o("pretrained_model_name_or_path"),Pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=a("code"),$wr=o("pretrained_model_name_or_path"),Iwr=o(":"),qwr=l(),me=a("ul"),l4=a("li"),ave=a("strong"),Nwr=o("albert"),jwr=o(" \u2014 "),VW=a("a"),Dwr=o("FlaxAlbertForPreTraining"),Gwr=o(" (ALBERT model)"),Owr=l(),i4=a("li"),nve=a("strong"),Vwr=o("bart"),Xwr=o(" \u2014 "),XW=a("a"),zwr=o("FlaxBartForConditionalGeneration"),Qwr=o(" (BART model)"),Wwr=l(),d4=a("li"),sve=a("strong"),Hwr=o("bert"),Uwr=o(" \u2014 "),zW=a("a"),Jwr=o("FlaxBertForPreTraining"),Ywr=o(" (BERT model)"),Kwr=l(),c4=a("li"),lve=a("strong"),Zwr=o("big_bird"),eAr=o(" \u2014 "),QW=a("a"),oAr=o("FlaxBigBirdForPreTraining"),rAr=o(" (BigBird model)"),tAr=l(),f4=a("li"),ive=a("strong"),aAr=o("electra"),nAr=o(" \u2014 "),WW=a("a"),sAr=o("FlaxElectraForPreTraining"),lAr=o(" (ELECTRA model)"),iAr=l(),m4=a("li"),dve=a("strong"),dAr=o("mbart"),cAr=o(" \u2014 "),HW=a("a"),fAr=o("FlaxMBartForConditionalGeneration"),mAr=o(" (mBART model)"),gAr=l(),g4=a("li"),cve=a("strong"),hAr=o("mt5"),pAr=o(" \u2014 "),UW=a("a"),_Ar=o("FlaxMT5ForConditionalGeneration"),uAr=o(" (mT5 model)"),bAr=l(),h4=a("li"),fve=a("strong"),vAr=o("roberta"),FAr=o(" \u2014 "),JW=a("a"),TAr=o("FlaxRobertaForMaskedLM"),MAr=o(" (RoBERTa model)"),EAr=l(),p4=a("li"),mve=a("strong"),CAr=o("roformer"),wAr=o(" \u2014 "),YW=a("a"),AAr=o("FlaxRoFormerForMaskedLM"),yAr=o(" (RoFormer model)"),LAr=l(),_4=a("li"),gve=a("strong"),xAr=o("t5"),kAr=o(" \u2014 "),KW=a("a"),SAr=o("FlaxT5ForConditionalGeneration"),RAr=o(" (T5 model)"),BAr=l(),u4=a("li"),hve=a("strong"),PAr=o("wav2vec2"),$Ar=o(" \u2014 "),ZW=a("a"),IAr=o("FlaxWav2Vec2ForPreTraining"),qAr=o(" (Wav2Vec2 model)"),NAr=l(),b4=a("li"),pve=a("strong"),jAr=o("xlm-roberta"),DAr=o(" \u2014 "),eH=a("a"),GAr=o("FlaxXLMRobertaForMaskedLM"),OAr=o(" (XLM-RoBERTa model)"),VAr=l(),_ve=a("p"),XAr=o("Examples:"),zAr=l(),f(u8.$$.fragment),qPe=l(),ff=a("h2"),v4=a("a"),uve=a("span"),f(b8.$$.fragment),QAr=l(),bve=a("span"),WAr=o("FlaxAutoModelForMaskedLM"),NPe=l(),$r=a("div"),f(v8.$$.fragment),HAr=l(),mf=a("p"),UAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oH=a("a"),JAr=o("from_pretrained()"),YAr=o(" class method or the "),rH=a("a"),KAr=o("from_config()"),ZAr=o(` class
method.`),e0r=l(),F8=a("p"),o0r=o("This class cannot be instantiated directly using "),vve=a("code"),r0r=o("__init__()"),t0r=o(" (throws an error)."),a0r=l(),xt=a("div"),f(T8.$$.fragment),n0r=l(),Fve=a("p"),s0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),l0r=l(),gf=a("p"),i0r=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),d0r=o("not"),c0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),f0r=o("from_pretrained()"),m0r=o(" to load the model weights."),g0r=l(),Mve=a("p"),h0r=o("Examples:"),p0r=l(),f(M8.$$.fragment),_0r=l(),ko=a("div"),f(E8.$$.fragment),u0r=l(),Eve=a("p"),b0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),v0r=l(),Bn=a("p"),F0r=o("The model class to instantiate is selected based on the "),Cve=a("code"),T0r=o("model_type"),M0r=o(` property of the config object (either
passed as an argument or loaded from `),wve=a("code"),E0r=o("pretrained_model_name_or_path"),C0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=a("code"),w0r=o("pretrained_model_name_or_path"),A0r=o(":"),y0r=l(),ve=a("ul"),F4=a("li"),yve=a("strong"),L0r=o("albert"),x0r=o(" \u2014 "),aH=a("a"),k0r=o("FlaxAlbertForMaskedLM"),S0r=o(" (ALBERT model)"),R0r=l(),T4=a("li"),Lve=a("strong"),B0r=o("bart"),P0r=o(" \u2014 "),nH=a("a"),$0r=o("FlaxBartForConditionalGeneration"),I0r=o(" (BART model)"),q0r=l(),M4=a("li"),xve=a("strong"),N0r=o("bert"),j0r=o(" \u2014 "),sH=a("a"),D0r=o("FlaxBertForMaskedLM"),G0r=o(" (BERT model)"),O0r=l(),E4=a("li"),kve=a("strong"),V0r=o("big_bird"),X0r=o(" \u2014 "),lH=a("a"),z0r=o("FlaxBigBirdForMaskedLM"),Q0r=o(" (BigBird model)"),W0r=l(),C4=a("li"),Sve=a("strong"),H0r=o("distilbert"),U0r=o(" \u2014 "),iH=a("a"),J0r=o("FlaxDistilBertForMaskedLM"),Y0r=o(" (DistilBERT model)"),K0r=l(),w4=a("li"),Rve=a("strong"),Z0r=o("electra"),eyr=o(" \u2014 "),dH=a("a"),oyr=o("FlaxElectraForMaskedLM"),ryr=o(" (ELECTRA model)"),tyr=l(),A4=a("li"),Bve=a("strong"),ayr=o("mbart"),nyr=o(" \u2014 "),cH=a("a"),syr=o("FlaxMBartForConditionalGeneration"),lyr=o(" (mBART model)"),iyr=l(),y4=a("li"),Pve=a("strong"),dyr=o("roberta"),cyr=o(" \u2014 "),fH=a("a"),fyr=o("FlaxRobertaForMaskedLM"),myr=o(" (RoBERTa model)"),gyr=l(),L4=a("li"),$ve=a("strong"),hyr=o("roformer"),pyr=o(" \u2014 "),mH=a("a"),_yr=o("FlaxRoFormerForMaskedLM"),uyr=o(" (RoFormer model)"),byr=l(),x4=a("li"),Ive=a("strong"),vyr=o("xlm-roberta"),Fyr=o(" \u2014 "),gH=a("a"),Tyr=o("FlaxXLMRobertaForMaskedLM"),Myr=o(" (XLM-RoBERTa model)"),Eyr=l(),qve=a("p"),Cyr=o("Examples:"),wyr=l(),f(C8.$$.fragment),jPe=l(),hf=a("h2"),k4=a("a"),Nve=a("span"),f(w8.$$.fragment),Ayr=l(),jve=a("span"),yyr=o("FlaxAutoModelForSeq2SeqLM"),DPe=l(),Ir=a("div"),f(A8.$$.fragment),Lyr=l(),pf=a("p"),xyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hH=a("a"),kyr=o("from_pretrained()"),Syr=o(" class method or the "),pH=a("a"),Ryr=o("from_config()"),Byr=o(` class
method.`),Pyr=l(),y8=a("p"),$yr=o("This class cannot be instantiated directly using "),Dve=a("code"),Iyr=o("__init__()"),qyr=o(" (throws an error)."),Nyr=l(),kt=a("div"),f(L8.$$.fragment),jyr=l(),Gve=a("p"),Dyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gyr=l(),_f=a("p"),Oyr=o(`Note:
Loading a model from its configuration file does `),Ove=a("strong"),Vyr=o("not"),Xyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),zyr=o("from_pretrained()"),Qyr=o(" to load the model weights."),Wyr=l(),Vve=a("p"),Hyr=o("Examples:"),Uyr=l(),f(x8.$$.fragment),Jyr=l(),So=a("div"),f(k8.$$.fragment),Yyr=l(),Xve=a("p"),Kyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zyr=l(),Pn=a("p"),e8r=o("The model class to instantiate is selected based on the "),zve=a("code"),o8r=o("model_type"),r8r=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),t8r=o("pretrained_model_name_or_path"),a8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),n8r=o("pretrained_model_name_or_path"),s8r=o(":"),l8r=l(),Ee=a("ul"),S4=a("li"),Hve=a("strong"),i8r=o("bart"),d8r=o(" \u2014 "),uH=a("a"),c8r=o("FlaxBartForConditionalGeneration"),f8r=o(" (BART model)"),m8r=l(),R4=a("li"),Uve=a("strong"),g8r=o("blenderbot"),h8r=o(" \u2014 "),bH=a("a"),p8r=o("FlaxBlenderbotForConditionalGeneration"),_8r=o(" (Blenderbot model)"),u8r=l(),B4=a("li"),Jve=a("strong"),b8r=o("blenderbot-small"),v8r=o(" \u2014 "),vH=a("a"),F8r=o("FlaxBlenderbotSmallForConditionalGeneration"),T8r=o(" (BlenderbotSmall model)"),M8r=l(),P4=a("li"),Yve=a("strong"),E8r=o("encoder-decoder"),C8r=o(" \u2014 "),FH=a("a"),w8r=o("FlaxEncoderDecoderModel"),A8r=o(" (Encoder decoder model)"),y8r=l(),$4=a("li"),Kve=a("strong"),L8r=o("marian"),x8r=o(" \u2014 "),TH=a("a"),k8r=o("FlaxMarianMTModel"),S8r=o(" (Marian model)"),R8r=l(),I4=a("li"),Zve=a("strong"),B8r=o("mbart"),P8r=o(" \u2014 "),MH=a("a"),$8r=o("FlaxMBartForConditionalGeneration"),I8r=o(" (mBART model)"),q8r=l(),q4=a("li"),eFe=a("strong"),N8r=o("mt5"),j8r=o(" \u2014 "),EH=a("a"),D8r=o("FlaxMT5ForConditionalGeneration"),G8r=o(" (mT5 model)"),O8r=l(),N4=a("li"),oFe=a("strong"),V8r=o("pegasus"),X8r=o(" \u2014 "),CH=a("a"),z8r=o("FlaxPegasusForConditionalGeneration"),Q8r=o(" (Pegasus model)"),W8r=l(),j4=a("li"),rFe=a("strong"),H8r=o("t5"),U8r=o(" \u2014 "),wH=a("a"),J8r=o("FlaxT5ForConditionalGeneration"),Y8r=o(" (T5 model)"),K8r=l(),tFe=a("p"),Z8r=o("Examples:"),eLr=l(),f(S8.$$.fragment),GPe=l(),uf=a("h2"),D4=a("a"),aFe=a("span"),f(R8.$$.fragment),oLr=l(),nFe=a("span"),rLr=o("FlaxAutoModelForSequenceClassification"),OPe=l(),qr=a("div"),f(B8.$$.fragment),tLr=l(),bf=a("p"),aLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AH=a("a"),nLr=o("from_pretrained()"),sLr=o(" class method or the "),yH=a("a"),lLr=o("from_config()"),iLr=o(` class
method.`),dLr=l(),P8=a("p"),cLr=o("This class cannot be instantiated directly using "),sFe=a("code"),fLr=o("__init__()"),mLr=o(" (throws an error)."),gLr=l(),St=a("div"),f($8.$$.fragment),hLr=l(),lFe=a("p"),pLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Lr=l(),vf=a("p"),uLr=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),bLr=o("not"),vLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),FLr=o("from_pretrained()"),TLr=o(" to load the model weights."),MLr=l(),dFe=a("p"),ELr=o("Examples:"),CLr=l(),f(I8.$$.fragment),wLr=l(),Ro=a("div"),f(q8.$$.fragment),ALr=l(),cFe=a("p"),yLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LLr=l(),$n=a("p"),xLr=o("The model class to instantiate is selected based on the "),fFe=a("code"),kLr=o("model_type"),SLr=o(` property of the config object (either
passed as an argument or loaded from `),mFe=a("code"),RLr=o("pretrained_model_name_or_path"),BLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=a("code"),PLr=o("pretrained_model_name_or_path"),$Lr=o(":"),ILr=l(),Fe=a("ul"),G4=a("li"),hFe=a("strong"),qLr=o("albert"),NLr=o(" \u2014 "),xH=a("a"),jLr=o("FlaxAlbertForSequenceClassification"),DLr=o(" (ALBERT model)"),GLr=l(),O4=a("li"),pFe=a("strong"),OLr=o("bart"),VLr=o(" \u2014 "),kH=a("a"),XLr=o("FlaxBartForSequenceClassification"),zLr=o(" (BART model)"),QLr=l(),V4=a("li"),_Fe=a("strong"),WLr=o("bert"),HLr=o(" \u2014 "),SH=a("a"),ULr=o("FlaxBertForSequenceClassification"),JLr=o(" (BERT model)"),YLr=l(),X4=a("li"),uFe=a("strong"),KLr=o("big_bird"),ZLr=o(" \u2014 "),RH=a("a"),e7r=o("FlaxBigBirdForSequenceClassification"),o7r=o(" (BigBird model)"),r7r=l(),z4=a("li"),bFe=a("strong"),t7r=o("distilbert"),a7r=o(" \u2014 "),BH=a("a"),n7r=o("FlaxDistilBertForSequenceClassification"),s7r=o(" (DistilBERT model)"),l7r=l(),Q4=a("li"),vFe=a("strong"),i7r=o("electra"),d7r=o(" \u2014 "),PH=a("a"),c7r=o("FlaxElectraForSequenceClassification"),f7r=o(" (ELECTRA model)"),m7r=l(),W4=a("li"),FFe=a("strong"),g7r=o("mbart"),h7r=o(" \u2014 "),$H=a("a"),p7r=o("FlaxMBartForSequenceClassification"),_7r=o(" (mBART model)"),u7r=l(),H4=a("li"),TFe=a("strong"),b7r=o("roberta"),v7r=o(" \u2014 "),IH=a("a"),F7r=o("FlaxRobertaForSequenceClassification"),T7r=o(" (RoBERTa model)"),M7r=l(),U4=a("li"),MFe=a("strong"),E7r=o("roformer"),C7r=o(" \u2014 "),qH=a("a"),w7r=o("FlaxRoFormerForSequenceClassification"),A7r=o(" (RoFormer model)"),y7r=l(),J4=a("li"),EFe=a("strong"),L7r=o("xlm-roberta"),x7r=o(" \u2014 "),NH=a("a"),k7r=o("FlaxXLMRobertaForSequenceClassification"),S7r=o(" (XLM-RoBERTa model)"),R7r=l(),CFe=a("p"),B7r=o("Examples:"),P7r=l(),f(N8.$$.fragment),VPe=l(),Ff=a("h2"),Y4=a("a"),wFe=a("span"),f(j8.$$.fragment),$7r=l(),AFe=a("span"),I7r=o("FlaxAutoModelForQuestionAnswering"),XPe=l(),Nr=a("div"),f(D8.$$.fragment),q7r=l(),Tf=a("p"),N7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jH=a("a"),j7r=o("from_pretrained()"),D7r=o(" class method or the "),DH=a("a"),G7r=o("from_config()"),O7r=o(` class
method.`),V7r=l(),G8=a("p"),X7r=o("This class cannot be instantiated directly using "),yFe=a("code"),z7r=o("__init__()"),Q7r=o(" (throws an error)."),W7r=l(),Rt=a("div"),f(O8.$$.fragment),H7r=l(),LFe=a("p"),U7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J7r=l(),Mf=a("p"),Y7r=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),K7r=o("not"),Z7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),exr=o("from_pretrained()"),oxr=o(" to load the model weights."),rxr=l(),kFe=a("p"),txr=o("Examples:"),axr=l(),f(V8.$$.fragment),nxr=l(),Bo=a("div"),f(X8.$$.fragment),sxr=l(),SFe=a("p"),lxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ixr=l(),In=a("p"),dxr=o("The model class to instantiate is selected based on the "),RFe=a("code"),cxr=o("model_type"),fxr=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),mxr=o("pretrained_model_name_or_path"),gxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),hxr=o("pretrained_model_name_or_path"),pxr=o(":"),_xr=l(),Te=a("ul"),K4=a("li"),$Fe=a("strong"),uxr=o("albert"),bxr=o(" \u2014 "),OH=a("a"),vxr=o("FlaxAlbertForQuestionAnswering"),Fxr=o(" (ALBERT model)"),Txr=l(),Z4=a("li"),IFe=a("strong"),Mxr=o("bart"),Exr=o(" \u2014 "),VH=a("a"),Cxr=o("FlaxBartForQuestionAnswering"),wxr=o(" (BART model)"),Axr=l(),eE=a("li"),qFe=a("strong"),yxr=o("bert"),Lxr=o(" \u2014 "),XH=a("a"),xxr=o("FlaxBertForQuestionAnswering"),kxr=o(" (BERT model)"),Sxr=l(),oE=a("li"),NFe=a("strong"),Rxr=o("big_bird"),Bxr=o(" \u2014 "),zH=a("a"),Pxr=o("FlaxBigBirdForQuestionAnswering"),$xr=o(" (BigBird model)"),Ixr=l(),rE=a("li"),jFe=a("strong"),qxr=o("distilbert"),Nxr=o(" \u2014 "),QH=a("a"),jxr=o("FlaxDistilBertForQuestionAnswering"),Dxr=o(" (DistilBERT model)"),Gxr=l(),tE=a("li"),DFe=a("strong"),Oxr=o("electra"),Vxr=o(" \u2014 "),WH=a("a"),Xxr=o("FlaxElectraForQuestionAnswering"),zxr=o(" (ELECTRA model)"),Qxr=l(),aE=a("li"),GFe=a("strong"),Wxr=o("mbart"),Hxr=o(" \u2014 "),HH=a("a"),Uxr=o("FlaxMBartForQuestionAnswering"),Jxr=o(" (mBART model)"),Yxr=l(),nE=a("li"),OFe=a("strong"),Kxr=o("roberta"),Zxr=o(" \u2014 "),UH=a("a"),ekr=o("FlaxRobertaForQuestionAnswering"),okr=o(" (RoBERTa model)"),rkr=l(),sE=a("li"),VFe=a("strong"),tkr=o("roformer"),akr=o(" \u2014 "),JH=a("a"),nkr=o("FlaxRoFormerForQuestionAnswering"),skr=o(" (RoFormer model)"),lkr=l(),lE=a("li"),XFe=a("strong"),ikr=o("xlm-roberta"),dkr=o(" \u2014 "),YH=a("a"),ckr=o("FlaxXLMRobertaForQuestionAnswering"),fkr=o(" (XLM-RoBERTa model)"),mkr=l(),zFe=a("p"),gkr=o("Examples:"),hkr=l(),f(z8.$$.fragment),zPe=l(),Ef=a("h2"),iE=a("a"),QFe=a("span"),f(Q8.$$.fragment),pkr=l(),WFe=a("span"),_kr=o("FlaxAutoModelForTokenClassification"),QPe=l(),jr=a("div"),f(W8.$$.fragment),ukr=l(),Cf=a("p"),bkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KH=a("a"),vkr=o("from_pretrained()"),Fkr=o(" class method or the "),ZH=a("a"),Tkr=o("from_config()"),Mkr=o(` class
method.`),Ekr=l(),H8=a("p"),Ckr=o("This class cannot be instantiated directly using "),HFe=a("code"),wkr=o("__init__()"),Akr=o(" (throws an error)."),ykr=l(),Bt=a("div"),f(U8.$$.fragment),Lkr=l(),UFe=a("p"),xkr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kkr=l(),wf=a("p"),Skr=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),Rkr=o("not"),Bkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=a("a"),Pkr=o("from_pretrained()"),$kr=o(" to load the model weights."),Ikr=l(),YFe=a("p"),qkr=o("Examples:"),Nkr=l(),f(J8.$$.fragment),jkr=l(),Po=a("div"),f(Y8.$$.fragment),Dkr=l(),KFe=a("p"),Gkr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Okr=l(),qn=a("p"),Vkr=o("The model class to instantiate is selected based on the "),ZFe=a("code"),Xkr=o("model_type"),zkr=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),Qkr=o("pretrained_model_name_or_path"),Wkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),Hkr=o("pretrained_model_name_or_path"),Ukr=o(":"),Jkr=l(),Be=a("ul"),dE=a("li"),rTe=a("strong"),Ykr=o("albert"),Kkr=o(" \u2014 "),oU=a("a"),Zkr=o("FlaxAlbertForTokenClassification"),eSr=o(" (ALBERT model)"),oSr=l(),cE=a("li"),tTe=a("strong"),rSr=o("bert"),tSr=o(" \u2014 "),rU=a("a"),aSr=o("FlaxBertForTokenClassification"),nSr=o(" (BERT model)"),sSr=l(),fE=a("li"),aTe=a("strong"),lSr=o("big_bird"),iSr=o(" \u2014 "),tU=a("a"),dSr=o("FlaxBigBirdForTokenClassification"),cSr=o(" (BigBird model)"),fSr=l(),mE=a("li"),nTe=a("strong"),mSr=o("distilbert"),gSr=o(" \u2014 "),aU=a("a"),hSr=o("FlaxDistilBertForTokenClassification"),pSr=o(" (DistilBERT model)"),_Sr=l(),gE=a("li"),sTe=a("strong"),uSr=o("electra"),bSr=o(" \u2014 "),nU=a("a"),vSr=o("FlaxElectraForTokenClassification"),FSr=o(" (ELECTRA model)"),TSr=l(),hE=a("li"),lTe=a("strong"),MSr=o("roberta"),ESr=o(" \u2014 "),sU=a("a"),CSr=o("FlaxRobertaForTokenClassification"),wSr=o(" (RoBERTa model)"),ASr=l(),pE=a("li"),iTe=a("strong"),ySr=o("roformer"),LSr=o(" \u2014 "),lU=a("a"),xSr=o("FlaxRoFormerForTokenClassification"),kSr=o(" (RoFormer model)"),SSr=l(),_E=a("li"),dTe=a("strong"),RSr=o("xlm-roberta"),BSr=o(" \u2014 "),iU=a("a"),PSr=o("FlaxXLMRobertaForTokenClassification"),$Sr=o(" (XLM-RoBERTa model)"),ISr=l(),cTe=a("p"),qSr=o("Examples:"),NSr=l(),f(K8.$$.fragment),WPe=l(),Af=a("h2"),uE=a("a"),fTe=a("span"),f(Z8.$$.fragment),jSr=l(),mTe=a("span"),DSr=o("FlaxAutoModelForMultipleChoice"),HPe=l(),Dr=a("div"),f(eL.$$.fragment),GSr=l(),yf=a("p"),OSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dU=a("a"),VSr=o("from_pretrained()"),XSr=o(" class method or the "),cU=a("a"),zSr=o("from_config()"),QSr=o(` class
method.`),WSr=l(),oL=a("p"),HSr=o("This class cannot be instantiated directly using "),gTe=a("code"),USr=o("__init__()"),JSr=o(" (throws an error)."),YSr=l(),Pt=a("div"),f(rL.$$.fragment),KSr=l(),hTe=a("p"),ZSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eRr=l(),Lf=a("p"),oRr=o(`Note:
Loading a model from its configuration file does `),pTe=a("strong"),rRr=o("not"),tRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),aRr=o("from_pretrained()"),nRr=o(" to load the model weights."),sRr=l(),_Te=a("p"),lRr=o("Examples:"),iRr=l(),f(tL.$$.fragment),dRr=l(),$o=a("div"),f(aL.$$.fragment),cRr=l(),uTe=a("p"),fRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mRr=l(),Nn=a("p"),gRr=o("The model class to instantiate is selected based on the "),bTe=a("code"),hRr=o("model_type"),pRr=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),_Rr=o("pretrained_model_name_or_path"),uRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),bRr=o("pretrained_model_name_or_path"),vRr=o(":"),FRr=l(),Pe=a("ul"),bE=a("li"),TTe=a("strong"),TRr=o("albert"),MRr=o(" \u2014 "),mU=a("a"),ERr=o("FlaxAlbertForMultipleChoice"),CRr=o(" (ALBERT model)"),wRr=l(),vE=a("li"),MTe=a("strong"),ARr=o("bert"),yRr=o(" \u2014 "),gU=a("a"),LRr=o("FlaxBertForMultipleChoice"),xRr=o(" (BERT model)"),kRr=l(),FE=a("li"),ETe=a("strong"),SRr=o("big_bird"),RRr=o(" \u2014 "),hU=a("a"),BRr=o("FlaxBigBirdForMultipleChoice"),PRr=o(" (BigBird model)"),$Rr=l(),TE=a("li"),CTe=a("strong"),IRr=o("distilbert"),qRr=o(" \u2014 "),pU=a("a"),NRr=o("FlaxDistilBertForMultipleChoice"),jRr=o(" (DistilBERT model)"),DRr=l(),ME=a("li"),wTe=a("strong"),GRr=o("electra"),ORr=o(" \u2014 "),_U=a("a"),VRr=o("FlaxElectraForMultipleChoice"),XRr=o(" (ELECTRA model)"),zRr=l(),EE=a("li"),ATe=a("strong"),QRr=o("roberta"),WRr=o(" \u2014 "),uU=a("a"),HRr=o("FlaxRobertaForMultipleChoice"),URr=o(" (RoBERTa model)"),JRr=l(),CE=a("li"),yTe=a("strong"),YRr=o("roformer"),KRr=o(" \u2014 "),bU=a("a"),ZRr=o("FlaxRoFormerForMultipleChoice"),eBr=o(" (RoFormer model)"),oBr=l(),wE=a("li"),LTe=a("strong"),rBr=o("xlm-roberta"),tBr=o(" \u2014 "),vU=a("a"),aBr=o("FlaxXLMRobertaForMultipleChoice"),nBr=o(" (XLM-RoBERTa model)"),sBr=l(),xTe=a("p"),lBr=o("Examples:"),iBr=l(),f(nL.$$.fragment),UPe=l(),xf=a("h2"),AE=a("a"),kTe=a("span"),f(sL.$$.fragment),dBr=l(),STe=a("span"),cBr=o("FlaxAutoModelForNextSentencePrediction"),JPe=l(),Gr=a("div"),f(lL.$$.fragment),fBr=l(),kf=a("p"),mBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FU=a("a"),gBr=o("from_pretrained()"),hBr=o(" class method or the "),TU=a("a"),pBr=o("from_config()"),_Br=o(` class
method.`),uBr=l(),iL=a("p"),bBr=o("This class cannot be instantiated directly using "),RTe=a("code"),vBr=o("__init__()"),FBr=o(" (throws an error)."),TBr=l(),$t=a("div"),f(dL.$$.fragment),MBr=l(),BTe=a("p"),EBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CBr=l(),Sf=a("p"),wBr=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),ABr=o("not"),yBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),LBr=o("from_pretrained()"),xBr=o(" to load the model weights."),kBr=l(),$Te=a("p"),SBr=o("Examples:"),RBr=l(),f(cL.$$.fragment),BBr=l(),Io=a("div"),f(fL.$$.fragment),PBr=l(),ITe=a("p"),$Br=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IBr=l(),jn=a("p"),qBr=o("The model class to instantiate is selected based on the "),qTe=a("code"),NBr=o("model_type"),jBr=o(` property of the config object (either
passed as an argument or loaded from `),NTe=a("code"),DBr=o("pretrained_model_name_or_path"),GBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=a("code"),OBr=o("pretrained_model_name_or_path"),VBr=o(":"),XBr=l(),DTe=a("ul"),yE=a("li"),GTe=a("strong"),zBr=o("bert"),QBr=o(" \u2014 "),EU=a("a"),WBr=o("FlaxBertForNextSentencePrediction"),HBr=o(" (BERT model)"),UBr=l(),OTe=a("p"),JBr=o("Examples:"),YBr=l(),f(mL.$$.fragment),YPe=l(),Rf=a("h2"),LE=a("a"),VTe=a("span"),f(gL.$$.fragment),KBr=l(),XTe=a("span"),ZBr=o("FlaxAutoModelForImageClassification"),KPe=l(),Or=a("div"),f(hL.$$.fragment),ePr=l(),Bf=a("p"),oPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CU=a("a"),rPr=o("from_pretrained()"),tPr=o(" class method or the "),wU=a("a"),aPr=o("from_config()"),nPr=o(` class
method.`),sPr=l(),pL=a("p"),lPr=o("This class cannot be instantiated directly using "),zTe=a("code"),iPr=o("__init__()"),dPr=o(" (throws an error)."),cPr=l(),It=a("div"),f(_L.$$.fragment),fPr=l(),QTe=a("p"),mPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gPr=l(),Pf=a("p"),hPr=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),pPr=o("not"),_Pr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),uPr=o("from_pretrained()"),bPr=o(" to load the model weights."),vPr=l(),HTe=a("p"),FPr=o("Examples:"),TPr=l(),f(uL.$$.fragment),MPr=l(),qo=a("div"),f(bL.$$.fragment),EPr=l(),UTe=a("p"),CPr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wPr=l(),Dn=a("p"),APr=o("The model class to instantiate is selected based on the "),JTe=a("code"),yPr=o("model_type"),LPr=o(` property of the config object (either
passed as an argument or loaded from `),YTe=a("code"),xPr=o("pretrained_model_name_or_path"),kPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=a("code"),SPr=o("pretrained_model_name_or_path"),RPr=o(":"),BPr=l(),vL=a("ul"),xE=a("li"),ZTe=a("strong"),PPr=o("beit"),$Pr=o(" \u2014 "),yU=a("a"),IPr=o("FlaxBeitForImageClassification"),qPr=o(" (BEiT model)"),NPr=l(),kE=a("li"),e9e=a("strong"),jPr=o("vit"),DPr=o(" \u2014 "),LU=a("a"),GPr=o("FlaxViTForImageClassification"),OPr=o(" (ViT model)"),VPr=l(),o9e=a("p"),XPr=o("Examples:"),zPr=l(),f(FL.$$.fragment),ZPe=l(),$f=a("h2"),SE=a("a"),r9e=a("span"),f(TL.$$.fragment),QPr=l(),t9e=a("span"),WPr=o("FlaxAutoModelForVision2Seq"),e$e=l(),Vr=a("div"),f(ML.$$.fragment),HPr=l(),If=a("p"),UPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xU=a("a"),JPr=o("from_pretrained()"),YPr=o(" class method or the "),kU=a("a"),KPr=o("from_config()"),ZPr=o(` class
method.`),e$r=l(),EL=a("p"),o$r=o("This class cannot be instantiated directly using "),a9e=a("code"),r$r=o("__init__()"),t$r=o(" (throws an error)."),a$r=l(),qt=a("div"),f(CL.$$.fragment),n$r=l(),n9e=a("p"),s$r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),l$r=l(),qf=a("p"),i$r=o(`Note:
Loading a model from its configuration file does `),s9e=a("strong"),d$r=o("not"),c$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),f$r=o("from_pretrained()"),m$r=o(" to load the model weights."),g$r=l(),l9e=a("p"),h$r=o("Examples:"),p$r=l(),f(wL.$$.fragment),_$r=l(),No=a("div"),f(AL.$$.fragment),u$r=l(),i9e=a("p"),b$r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),v$r=l(),Gn=a("p"),F$r=o("The model class to instantiate is selected based on the "),d9e=a("code"),T$r=o("model_type"),M$r=o(` property of the config object (either
passed as an argument or loaded from `),c9e=a("code"),E$r=o("pretrained_model_name_or_path"),C$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=a("code"),w$r=o("pretrained_model_name_or_path"),A$r=o(":"),y$r=l(),m9e=a("ul"),RE=a("li"),g9e=a("strong"),L$r=o("vision-encoder-decoder"),x$r=o(" \u2014 "),RU=a("a"),k$r=o("FlaxVisionEncoderDecoderModel"),S$r=o(" (Vision Encoder decoder model)"),R$r=l(),h9e=a("p"),B$r=o("Examples:"),P$r=l(),f(yL.$$.fragment),this.h()},l(c){const u=Iwt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),ce=n(c,"H1",{class:!0});var LL=s(ce);Ce=n(LL,"A",{id:!0,class:!0,href:!0});var p9e=s(Ce);lo=n(p9e,"SPAN",{});var _9e=s(lo);m(he.$$.fragment,_9e),_9e.forEach(t),p9e.forEach(t),Me=i(LL),Xo=n(LL,"SPAN",{});var I$r=s(Xo);Di=r(I$r,"Auto Classes"),I$r.forEach(t),LL.forEach(t),Df=i(c),fa=n(c,"P",{});var r$e=s(fa);Gi=r(r$e,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Oi=n(r$e,"CODE",{});var q$r=s(Oi);B3=r(q$r,"from_pretrained()"),q$r.forEach(t),Gf=r(r$e,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),r$e.forEach(t),xe=i(c),co=n(c,"P",{});var BE=s(co);Vi=r(BE,"Instantiating one of "),On=n(BE,"A",{href:!0});var N$r=s(On);P3=r(N$r,"AutoConfig"),N$r.forEach(t),Vn=r(BE,", "),Xn=n(BE,"A",{href:!0});var j$r=s(Xn);$3=r(j$r,"AutoModel"),j$r.forEach(t),Xi=r(BE,`, and
`),zn=n(BE,"A",{href:!0});var D$r=s(zn);I3=r(D$r,"AutoTokenizer"),D$r.forEach(t),zi=r(BE," will directly create a class of the relevant architecture. For instance"),BE.forEach(t),Of=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var t$e=s(ue);L7=r(t$e,"will create a model that is an instance of "),Qi=n(t$e,"A",{href:!0});var G$r=s(Qi);x7=r(G$r,"BertModel"),G$r.forEach(t),k7=r(t$e,"."),t$e.forEach(t),zo=i(c),Ga=n(c,"P",{});var a$e=s(Ga);S7=r(a$e,"There is one class of "),Vf=n(a$e,"CODE",{});var O$r=s(Vf);R7=r(O$r,"AutoModel"),O$r.forEach(t),gqe=r(a$e," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),a$e.forEach(t),eBe=i(c),Wi=n(c,"H2",{class:!0});var n$e=s(Wi);Xf=n(n$e,"A",{id:!0,class:!0,href:!0});var V$r=s(Xf);wY=n(V$r,"SPAN",{});var X$r=s(wY);m(q3.$$.fragment,X$r),X$r.forEach(t),V$r.forEach(t),hqe=i(n$e),AY=n(n$e,"SPAN",{});var z$r=s(AY);pqe=r(z$r,"Extending the Auto Classes"),z$r.forEach(t),n$e.forEach(t),oBe=i(c),Qn=n(c,"P",{});var BU=s(Qn);_qe=r(BU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),yY=n(BU,"CODE",{});var Q$r=s(yY);uqe=r(Q$r,"NewModel"),Q$r.forEach(t),bqe=r(BU,", make sure you have a "),LY=n(BU,"CODE",{});var W$r=s(LY);vqe=r(W$r,"NewModelConfig"),W$r.forEach(t),Fqe=r(BU,` then you can add those to the auto
classes like this:`),BU.forEach(t),rBe=i(c),m(N3.$$.fragment,c),tBe=i(c),B7=n(c,"P",{});var H$r=s(B7);Tqe=r(H$r,"You will then be able to use the auto classes like you would usually do!"),H$r.forEach(t),aBe=i(c),m(zf.$$.fragment,c),nBe=i(c),Hi=n(c,"H2",{class:!0});var s$e=s(Hi);Qf=n(s$e,"A",{id:!0,class:!0,href:!0});var U$r=s(Qf);xY=n(U$r,"SPAN",{});var J$r=s(xY);m(j3.$$.fragment,J$r),J$r.forEach(t),U$r.forEach(t),Mqe=i(s$e),kY=n(s$e,"SPAN",{});var Y$r=s(kY);Eqe=r(Y$r,"AutoConfig"),Y$r.forEach(t),s$e.forEach(t),sBe=i(c),Qo=n(c,"DIV",{class:!0});var Qs=s(Qo);m(D3.$$.fragment,Qs),Cqe=i(Qs),G3=n(Qs,"P",{});var l$e=s(G3);wqe=r(l$e,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),P7=n(l$e,"A",{href:!0});var K$r=s(P7);Aqe=r(K$r,"from_pretrained()"),K$r.forEach(t),yqe=r(l$e," class method."),l$e.forEach(t),Lqe=i(Qs),O3=n(Qs,"P",{});var i$e=s(O3);xqe=r(i$e,"This class cannot be instantiated directly using "),SY=n(i$e,"CODE",{});var Z$r=s(SY);kqe=r(Z$r,"__init__()"),Z$r.forEach(t),Sqe=r(i$e," (throws an error)."),i$e.forEach(t),Rqe=i(Qs),mo=n(Qs,"DIV",{class:!0});var ga=s(mo);m(V3.$$.fragment,ga),Bqe=i(ga),RY=n(ga,"P",{});var eIr=s(RY);Pqe=r(eIr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),eIr.forEach(t),$qe=i(ga),Ui=n(ga,"P",{});var PU=s(Ui);Iqe=r(PU,"The configuration class to instantiate is selected based on the "),BY=n(PU,"CODE",{});var oIr=s(BY);qqe=r(oIr,"model_type"),oIr.forEach(t),Nqe=r(PU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),PY=n(PU,"CODE",{});var rIr=s(PY);jqe=r(rIr,"pretrained_model_name_or_path"),rIr.forEach(t),Dqe=r(PU,":"),PU.forEach(t),Gqe=i(ga),v=n(ga,"UL",{});var F=s(v);Wf=n(F,"LI",{});var u9e=s(Wf);$Y=n(u9e,"STRONG",{});var tIr=s($Y);Oqe=r(tIr,"albert"),tIr.forEach(t),Vqe=r(u9e," \u2014 "),$7=n(u9e,"A",{href:!0});var aIr=s($7);Xqe=r(aIr,"AlbertConfig"),aIr.forEach(t),zqe=r(u9e," (ALBERT model)"),u9e.forEach(t),Qqe=i(F),Hf=n(F,"LI",{});var b9e=s(Hf);IY=n(b9e,"STRONG",{});var nIr=s(IY);Wqe=r(nIr,"bart"),nIr.forEach(t),Hqe=r(b9e," \u2014 "),I7=n(b9e,"A",{href:!0});var sIr=s(I7);Uqe=r(sIr,"BartConfig"),sIr.forEach(t),Jqe=r(b9e," (BART model)"),b9e.forEach(t),Yqe=i(F),Uf=n(F,"LI",{});var v9e=s(Uf);qY=n(v9e,"STRONG",{});var lIr=s(qY);Kqe=r(lIr,"beit"),lIr.forEach(t),Zqe=r(v9e," \u2014 "),q7=n(v9e,"A",{href:!0});var iIr=s(q7);eNe=r(iIr,"BeitConfig"),iIr.forEach(t),oNe=r(v9e," (BEiT model)"),v9e.forEach(t),rNe=i(F),Jf=n(F,"LI",{});var F9e=s(Jf);NY=n(F9e,"STRONG",{});var dIr=s(NY);tNe=r(dIr,"bert"),dIr.forEach(t),aNe=r(F9e," \u2014 "),N7=n(F9e,"A",{href:!0});var cIr=s(N7);nNe=r(cIr,"BertConfig"),cIr.forEach(t),sNe=r(F9e," (BERT model)"),F9e.forEach(t),lNe=i(F),Yf=n(F,"LI",{});var T9e=s(Yf);jY=n(T9e,"STRONG",{});var fIr=s(jY);iNe=r(fIr,"bert-generation"),fIr.forEach(t),dNe=r(T9e," \u2014 "),j7=n(T9e,"A",{href:!0});var mIr=s(j7);cNe=r(mIr,"BertGenerationConfig"),mIr.forEach(t),fNe=r(T9e," (Bert Generation model)"),T9e.forEach(t),mNe=i(F),Kf=n(F,"LI",{});var M9e=s(Kf);DY=n(M9e,"STRONG",{});var gIr=s(DY);gNe=r(gIr,"big_bird"),gIr.forEach(t),hNe=r(M9e," \u2014 "),D7=n(M9e,"A",{href:!0});var hIr=s(D7);pNe=r(hIr,"BigBirdConfig"),hIr.forEach(t),_Ne=r(M9e," (BigBird model)"),M9e.forEach(t),uNe=i(F),Zf=n(F,"LI",{});var E9e=s(Zf);GY=n(E9e,"STRONG",{});var pIr=s(GY);bNe=r(pIr,"bigbird_pegasus"),pIr.forEach(t),vNe=r(E9e," \u2014 "),G7=n(E9e,"A",{href:!0});var _Ir=s(G7);FNe=r(_Ir,"BigBirdPegasusConfig"),_Ir.forEach(t),TNe=r(E9e," (BigBirdPegasus model)"),E9e.forEach(t),MNe=i(F),em=n(F,"LI",{});var C9e=s(em);OY=n(C9e,"STRONG",{});var uIr=s(OY);ENe=r(uIr,"blenderbot"),uIr.forEach(t),CNe=r(C9e," \u2014 "),O7=n(C9e,"A",{href:!0});var bIr=s(O7);wNe=r(bIr,"BlenderbotConfig"),bIr.forEach(t),ANe=r(C9e," (Blenderbot model)"),C9e.forEach(t),yNe=i(F),om=n(F,"LI",{});var w9e=s(om);VY=n(w9e,"STRONG",{});var vIr=s(VY);LNe=r(vIr,"blenderbot-small"),vIr.forEach(t),xNe=r(w9e," \u2014 "),V7=n(w9e,"A",{href:!0});var FIr=s(V7);kNe=r(FIr,"BlenderbotSmallConfig"),FIr.forEach(t),SNe=r(w9e," (BlenderbotSmall model)"),w9e.forEach(t),RNe=i(F),rm=n(F,"LI",{});var A9e=s(rm);XY=n(A9e,"STRONG",{});var TIr=s(XY);BNe=r(TIr,"camembert"),TIr.forEach(t),PNe=r(A9e," \u2014 "),X7=n(A9e,"A",{href:!0});var MIr=s(X7);$Ne=r(MIr,"CamembertConfig"),MIr.forEach(t),INe=r(A9e," (CamemBERT model)"),A9e.forEach(t),qNe=i(F),tm=n(F,"LI",{});var y9e=s(tm);zY=n(y9e,"STRONG",{});var EIr=s(zY);NNe=r(EIr,"canine"),EIr.forEach(t),jNe=r(y9e," \u2014 "),z7=n(y9e,"A",{href:!0});var CIr=s(z7);DNe=r(CIr,"CanineConfig"),CIr.forEach(t),GNe=r(y9e," (Canine model)"),y9e.forEach(t),ONe=i(F),am=n(F,"LI",{});var L9e=s(am);QY=n(L9e,"STRONG",{});var wIr=s(QY);VNe=r(wIr,"clip"),wIr.forEach(t),XNe=r(L9e," \u2014 "),Q7=n(L9e,"A",{href:!0});var AIr=s(Q7);zNe=r(AIr,"CLIPConfig"),AIr.forEach(t),QNe=r(L9e," (CLIP model)"),L9e.forEach(t),WNe=i(F),nm=n(F,"LI",{});var x9e=s(nm);WY=n(x9e,"STRONG",{});var yIr=s(WY);HNe=r(yIr,"convbert"),yIr.forEach(t),UNe=r(x9e," \u2014 "),W7=n(x9e,"A",{href:!0});var LIr=s(W7);JNe=r(LIr,"ConvBertConfig"),LIr.forEach(t),YNe=r(x9e," (ConvBERT model)"),x9e.forEach(t),KNe=i(F),sm=n(F,"LI",{});var k9e=s(sm);HY=n(k9e,"STRONG",{});var xIr=s(HY);ZNe=r(xIr,"convnext"),xIr.forEach(t),eje=r(k9e," \u2014 "),H7=n(k9e,"A",{href:!0});var kIr=s(H7);oje=r(kIr,"ConvNextConfig"),kIr.forEach(t),rje=r(k9e," (ConvNext model)"),k9e.forEach(t),tje=i(F),lm=n(F,"LI",{});var S9e=s(lm);UY=n(S9e,"STRONG",{});var SIr=s(UY);aje=r(SIr,"ctrl"),SIr.forEach(t),nje=r(S9e," \u2014 "),U7=n(S9e,"A",{href:!0});var RIr=s(U7);sje=r(RIr,"CTRLConfig"),RIr.forEach(t),lje=r(S9e," (CTRL model)"),S9e.forEach(t),ije=i(F),im=n(F,"LI",{});var R9e=s(im);JY=n(R9e,"STRONG",{});var BIr=s(JY);dje=r(BIr,"data2vec-audio"),BIr.forEach(t),cje=r(R9e," \u2014 "),J7=n(R9e,"A",{href:!0});var PIr=s(J7);fje=r(PIr,"Data2VecAudioConfig"),PIr.forEach(t),mje=r(R9e," (Data2VecAudio model)"),R9e.forEach(t),gje=i(F),dm=n(F,"LI",{});var B9e=s(dm);YY=n(B9e,"STRONG",{});var $Ir=s(YY);hje=r($Ir,"data2vec-text"),$Ir.forEach(t),pje=r(B9e," \u2014 "),Y7=n(B9e,"A",{href:!0});var IIr=s(Y7);_je=r(IIr,"Data2VecTextConfig"),IIr.forEach(t),uje=r(B9e," (Data2VecText model)"),B9e.forEach(t),bje=i(F),cm=n(F,"LI",{});var P9e=s(cm);KY=n(P9e,"STRONG",{});var qIr=s(KY);vje=r(qIr,"data2vec-vision"),qIr.forEach(t),Fje=r(P9e," \u2014 "),K7=n(P9e,"A",{href:!0});var NIr=s(K7);Tje=r(NIr,"Data2VecVisionConfig"),NIr.forEach(t),Mje=r(P9e," (Data2VecVision model)"),P9e.forEach(t),Eje=i(F),fm=n(F,"LI",{});var $9e=s(fm);ZY=n($9e,"STRONG",{});var jIr=s(ZY);Cje=r(jIr,"deberta"),jIr.forEach(t),wje=r($9e," \u2014 "),Z7=n($9e,"A",{href:!0});var DIr=s(Z7);Aje=r(DIr,"DebertaConfig"),DIr.forEach(t),yje=r($9e," (DeBERTa model)"),$9e.forEach(t),Lje=i(F),mm=n(F,"LI",{});var I9e=s(mm);eK=n(I9e,"STRONG",{});var GIr=s(eK);xje=r(GIr,"deberta-v2"),GIr.forEach(t),kje=r(I9e," \u2014 "),ex=n(I9e,"A",{href:!0});var OIr=s(ex);Sje=r(OIr,"DebertaV2Config"),OIr.forEach(t),Rje=r(I9e," (DeBERTa-v2 model)"),I9e.forEach(t),Bje=i(F),gm=n(F,"LI",{});var q9e=s(gm);oK=n(q9e,"STRONG",{});var VIr=s(oK);Pje=r(VIr,"decision_transformer"),VIr.forEach(t),$je=r(q9e," \u2014 "),ox=n(q9e,"A",{href:!0});var XIr=s(ox);Ije=r(XIr,"DecisionTransformerConfig"),XIr.forEach(t),qje=r(q9e," (Decision Transformer model)"),q9e.forEach(t),Nje=i(F),hm=n(F,"LI",{});var N9e=s(hm);rK=n(N9e,"STRONG",{});var zIr=s(rK);jje=r(zIr,"deit"),zIr.forEach(t),Dje=r(N9e," \u2014 "),rx=n(N9e,"A",{href:!0});var QIr=s(rx);Gje=r(QIr,"DeiTConfig"),QIr.forEach(t),Oje=r(N9e," (DeiT model)"),N9e.forEach(t),Vje=i(F),pm=n(F,"LI",{});var j9e=s(pm);tK=n(j9e,"STRONG",{});var WIr=s(tK);Xje=r(WIr,"detr"),WIr.forEach(t),zje=r(j9e," \u2014 "),tx=n(j9e,"A",{href:!0});var HIr=s(tx);Qje=r(HIr,"DetrConfig"),HIr.forEach(t),Wje=r(j9e," (DETR model)"),j9e.forEach(t),Hje=i(F),_m=n(F,"LI",{});var D9e=s(_m);aK=n(D9e,"STRONG",{});var UIr=s(aK);Uje=r(UIr,"distilbert"),UIr.forEach(t),Jje=r(D9e," \u2014 "),ax=n(D9e,"A",{href:!0});var JIr=s(ax);Yje=r(JIr,"DistilBertConfig"),JIr.forEach(t),Kje=r(D9e," (DistilBERT model)"),D9e.forEach(t),Zje=i(F),um=n(F,"LI",{});var G9e=s(um);nK=n(G9e,"STRONG",{});var YIr=s(nK);eDe=r(YIr,"dpr"),YIr.forEach(t),oDe=r(G9e," \u2014 "),nx=n(G9e,"A",{href:!0});var KIr=s(nx);rDe=r(KIr,"DPRConfig"),KIr.forEach(t),tDe=r(G9e," (DPR model)"),G9e.forEach(t),aDe=i(F),bm=n(F,"LI",{});var O9e=s(bm);sK=n(O9e,"STRONG",{});var ZIr=s(sK);nDe=r(ZIr,"dpt"),ZIr.forEach(t),sDe=r(O9e," \u2014 "),sx=n(O9e,"A",{href:!0});var eqr=s(sx);lDe=r(eqr,"DPTConfig"),eqr.forEach(t),iDe=r(O9e," (DPT model)"),O9e.forEach(t),dDe=i(F),vm=n(F,"LI",{});var V9e=s(vm);lK=n(V9e,"STRONG",{});var oqr=s(lK);cDe=r(oqr,"electra"),oqr.forEach(t),fDe=r(V9e," \u2014 "),lx=n(V9e,"A",{href:!0});var rqr=s(lx);mDe=r(rqr,"ElectraConfig"),rqr.forEach(t),gDe=r(V9e," (ELECTRA model)"),V9e.forEach(t),hDe=i(F),Fm=n(F,"LI",{});var X9e=s(Fm);iK=n(X9e,"STRONG",{});var tqr=s(iK);pDe=r(tqr,"encoder-decoder"),tqr.forEach(t),_De=r(X9e," \u2014 "),ix=n(X9e,"A",{href:!0});var aqr=s(ix);uDe=r(aqr,"EncoderDecoderConfig"),aqr.forEach(t),bDe=r(X9e," (Encoder decoder model)"),X9e.forEach(t),vDe=i(F),Tm=n(F,"LI",{});var z9e=s(Tm);dK=n(z9e,"STRONG",{});var nqr=s(dK);FDe=r(nqr,"flaubert"),nqr.forEach(t),TDe=r(z9e," \u2014 "),dx=n(z9e,"A",{href:!0});var sqr=s(dx);MDe=r(sqr,"FlaubertConfig"),sqr.forEach(t),EDe=r(z9e," (FlauBERT model)"),z9e.forEach(t),CDe=i(F),Mm=n(F,"LI",{});var Q9e=s(Mm);cK=n(Q9e,"STRONG",{});var lqr=s(cK);wDe=r(lqr,"fnet"),lqr.forEach(t),ADe=r(Q9e," \u2014 "),cx=n(Q9e,"A",{href:!0});var iqr=s(cx);yDe=r(iqr,"FNetConfig"),iqr.forEach(t),LDe=r(Q9e," (FNet model)"),Q9e.forEach(t),xDe=i(F),Em=n(F,"LI",{});var W9e=s(Em);fK=n(W9e,"STRONG",{});var dqr=s(fK);kDe=r(dqr,"fsmt"),dqr.forEach(t),SDe=r(W9e," \u2014 "),fx=n(W9e,"A",{href:!0});var cqr=s(fx);RDe=r(cqr,"FSMTConfig"),cqr.forEach(t),BDe=r(W9e," (FairSeq Machine-Translation model)"),W9e.forEach(t),PDe=i(F),Cm=n(F,"LI",{});var H9e=s(Cm);mK=n(H9e,"STRONG",{});var fqr=s(mK);$De=r(fqr,"funnel"),fqr.forEach(t),IDe=r(H9e," \u2014 "),mx=n(H9e,"A",{href:!0});var mqr=s(mx);qDe=r(mqr,"FunnelConfig"),mqr.forEach(t),NDe=r(H9e," (Funnel Transformer model)"),H9e.forEach(t),jDe=i(F),wm=n(F,"LI",{});var U9e=s(wm);gK=n(U9e,"STRONG",{});var gqr=s(gK);DDe=r(gqr,"glpn"),gqr.forEach(t),GDe=r(U9e," \u2014 "),gx=n(U9e,"A",{href:!0});var hqr=s(gx);ODe=r(hqr,"GLPNConfig"),hqr.forEach(t),VDe=r(U9e," (GLPN model)"),U9e.forEach(t),XDe=i(F),Am=n(F,"LI",{});var J9e=s(Am);hK=n(J9e,"STRONG",{});var pqr=s(hK);zDe=r(pqr,"gpt2"),pqr.forEach(t),QDe=r(J9e," \u2014 "),hx=n(J9e,"A",{href:!0});var _qr=s(hx);WDe=r(_qr,"GPT2Config"),_qr.forEach(t),HDe=r(J9e," (OpenAI GPT-2 model)"),J9e.forEach(t),UDe=i(F),ym=n(F,"LI",{});var Y9e=s(ym);pK=n(Y9e,"STRONG",{});var uqr=s(pK);JDe=r(uqr,"gpt_neo"),uqr.forEach(t),YDe=r(Y9e," \u2014 "),px=n(Y9e,"A",{href:!0});var bqr=s(px);KDe=r(bqr,"GPTNeoConfig"),bqr.forEach(t),ZDe=r(Y9e," (GPT Neo model)"),Y9e.forEach(t),eGe=i(F),Lm=n(F,"LI",{});var K9e=s(Lm);_K=n(K9e,"STRONG",{});var vqr=s(_K);oGe=r(vqr,"gpt_neox"),vqr.forEach(t),rGe=r(K9e," \u2014 "),_x=n(K9e,"A",{href:!0});var Fqr=s(_x);tGe=r(Fqr,"GPTNeoXConfig"),Fqr.forEach(t),aGe=r(K9e," (GPTNeoX model)"),K9e.forEach(t),nGe=i(F),xm=n(F,"LI",{});var Z9e=s(xm);uK=n(Z9e,"STRONG",{});var Tqr=s(uK);sGe=r(Tqr,"gptj"),Tqr.forEach(t),lGe=r(Z9e," \u2014 "),ux=n(Z9e,"A",{href:!0});var Mqr=s(ux);iGe=r(Mqr,"GPTJConfig"),Mqr.forEach(t),dGe=r(Z9e," (GPT-J model)"),Z9e.forEach(t),cGe=i(F),km=n(F,"LI",{});var eMe=s(km);bK=n(eMe,"STRONG",{});var Eqr=s(bK);fGe=r(Eqr,"hubert"),Eqr.forEach(t),mGe=r(eMe," \u2014 "),bx=n(eMe,"A",{href:!0});var Cqr=s(bx);gGe=r(Cqr,"HubertConfig"),Cqr.forEach(t),hGe=r(eMe," (Hubert model)"),eMe.forEach(t),pGe=i(F),Sm=n(F,"LI",{});var oMe=s(Sm);vK=n(oMe,"STRONG",{});var wqr=s(vK);_Ge=r(wqr,"ibert"),wqr.forEach(t),uGe=r(oMe," \u2014 "),vx=n(oMe,"A",{href:!0});var Aqr=s(vx);bGe=r(Aqr,"IBertConfig"),Aqr.forEach(t),vGe=r(oMe," (I-BERT model)"),oMe.forEach(t),FGe=i(F),Rm=n(F,"LI",{});var rMe=s(Rm);FK=n(rMe,"STRONG",{});var yqr=s(FK);TGe=r(yqr,"imagegpt"),yqr.forEach(t),MGe=r(rMe," \u2014 "),Fx=n(rMe,"A",{href:!0});var Lqr=s(Fx);EGe=r(Lqr,"ImageGPTConfig"),Lqr.forEach(t),CGe=r(rMe," (ImageGPT model)"),rMe.forEach(t),wGe=i(F),Bm=n(F,"LI",{});var tMe=s(Bm);TK=n(tMe,"STRONG",{});var xqr=s(TK);AGe=r(xqr,"layoutlm"),xqr.forEach(t),yGe=r(tMe," \u2014 "),Tx=n(tMe,"A",{href:!0});var kqr=s(Tx);LGe=r(kqr,"LayoutLMConfig"),kqr.forEach(t),xGe=r(tMe," (LayoutLM model)"),tMe.forEach(t),kGe=i(F),Pm=n(F,"LI",{});var aMe=s(Pm);MK=n(aMe,"STRONG",{});var Sqr=s(MK);SGe=r(Sqr,"layoutlmv2"),Sqr.forEach(t),RGe=r(aMe," \u2014 "),Mx=n(aMe,"A",{href:!0});var Rqr=s(Mx);BGe=r(Rqr,"LayoutLMv2Config"),Rqr.forEach(t),PGe=r(aMe," (LayoutLMv2 model)"),aMe.forEach(t),$Ge=i(F),$m=n(F,"LI",{});var nMe=s($m);EK=n(nMe,"STRONG",{});var Bqr=s(EK);IGe=r(Bqr,"led"),Bqr.forEach(t),qGe=r(nMe," \u2014 "),Ex=n(nMe,"A",{href:!0});var Pqr=s(Ex);NGe=r(Pqr,"LEDConfig"),Pqr.forEach(t),jGe=r(nMe," (LED model)"),nMe.forEach(t),DGe=i(F),Im=n(F,"LI",{});var sMe=s(Im);CK=n(sMe,"STRONG",{});var $qr=s(CK);GGe=r($qr,"longformer"),$qr.forEach(t),OGe=r(sMe," \u2014 "),Cx=n(sMe,"A",{href:!0});var Iqr=s(Cx);VGe=r(Iqr,"LongformerConfig"),Iqr.forEach(t),XGe=r(sMe," (Longformer model)"),sMe.forEach(t),zGe=i(F),qm=n(F,"LI",{});var lMe=s(qm);wK=n(lMe,"STRONG",{});var qqr=s(wK);QGe=r(qqr,"luke"),qqr.forEach(t),WGe=r(lMe," \u2014 "),wx=n(lMe,"A",{href:!0});var Nqr=s(wx);HGe=r(Nqr,"LukeConfig"),Nqr.forEach(t),UGe=r(lMe," (LUKE model)"),lMe.forEach(t),JGe=i(F),Nm=n(F,"LI",{});var iMe=s(Nm);AK=n(iMe,"STRONG",{});var jqr=s(AK);YGe=r(jqr,"lxmert"),jqr.forEach(t),KGe=r(iMe," \u2014 "),Ax=n(iMe,"A",{href:!0});var Dqr=s(Ax);ZGe=r(Dqr,"LxmertConfig"),Dqr.forEach(t),eOe=r(iMe," (LXMERT model)"),iMe.forEach(t),oOe=i(F),jm=n(F,"LI",{});var dMe=s(jm);yK=n(dMe,"STRONG",{});var Gqr=s(yK);rOe=r(Gqr,"m2m_100"),Gqr.forEach(t),tOe=r(dMe," \u2014 "),yx=n(dMe,"A",{href:!0});var Oqr=s(yx);aOe=r(Oqr,"M2M100Config"),Oqr.forEach(t),nOe=r(dMe," (M2M100 model)"),dMe.forEach(t),sOe=i(F),Dm=n(F,"LI",{});var cMe=s(Dm);LK=n(cMe,"STRONG",{});var Vqr=s(LK);lOe=r(Vqr,"marian"),Vqr.forEach(t),iOe=r(cMe," \u2014 "),Lx=n(cMe,"A",{href:!0});var Xqr=s(Lx);dOe=r(Xqr,"MarianConfig"),Xqr.forEach(t),cOe=r(cMe," (Marian model)"),cMe.forEach(t),fOe=i(F),Gm=n(F,"LI",{});var fMe=s(Gm);xK=n(fMe,"STRONG",{});var zqr=s(xK);mOe=r(zqr,"maskformer"),zqr.forEach(t),gOe=r(fMe," \u2014 "),xx=n(fMe,"A",{href:!0});var Qqr=s(xx);hOe=r(Qqr,"MaskFormerConfig"),Qqr.forEach(t),pOe=r(fMe," (MaskFormer model)"),fMe.forEach(t),_Oe=i(F),Om=n(F,"LI",{});var mMe=s(Om);kK=n(mMe,"STRONG",{});var Wqr=s(kK);uOe=r(Wqr,"mbart"),Wqr.forEach(t),bOe=r(mMe," \u2014 "),kx=n(mMe,"A",{href:!0});var Hqr=s(kx);vOe=r(Hqr,"MBartConfig"),Hqr.forEach(t),FOe=r(mMe," (mBART model)"),mMe.forEach(t),TOe=i(F),Vm=n(F,"LI",{});var gMe=s(Vm);SK=n(gMe,"STRONG",{});var Uqr=s(SK);MOe=r(Uqr,"megatron-bert"),Uqr.forEach(t),EOe=r(gMe," \u2014 "),Sx=n(gMe,"A",{href:!0});var Jqr=s(Sx);COe=r(Jqr,"MegatronBertConfig"),Jqr.forEach(t),wOe=r(gMe," (MegatronBert model)"),gMe.forEach(t),AOe=i(F),Xm=n(F,"LI",{});var hMe=s(Xm);RK=n(hMe,"STRONG",{});var Yqr=s(RK);yOe=r(Yqr,"mobilebert"),Yqr.forEach(t),LOe=r(hMe," \u2014 "),Rx=n(hMe,"A",{href:!0});var Kqr=s(Rx);xOe=r(Kqr,"MobileBertConfig"),Kqr.forEach(t),kOe=r(hMe," (MobileBERT model)"),hMe.forEach(t),SOe=i(F),zm=n(F,"LI",{});var pMe=s(zm);BK=n(pMe,"STRONG",{});var Zqr=s(BK);ROe=r(Zqr,"mpnet"),Zqr.forEach(t),BOe=r(pMe," \u2014 "),Bx=n(pMe,"A",{href:!0});var eNr=s(Bx);POe=r(eNr,"MPNetConfig"),eNr.forEach(t),$Oe=r(pMe," (MPNet model)"),pMe.forEach(t),IOe=i(F),Qm=n(F,"LI",{});var _Me=s(Qm);PK=n(_Me,"STRONG",{});var oNr=s(PK);qOe=r(oNr,"mt5"),oNr.forEach(t),NOe=r(_Me," \u2014 "),Px=n(_Me,"A",{href:!0});var rNr=s(Px);jOe=r(rNr,"MT5Config"),rNr.forEach(t),DOe=r(_Me," (mT5 model)"),_Me.forEach(t),GOe=i(F),Wm=n(F,"LI",{});var uMe=s(Wm);$K=n(uMe,"STRONG",{});var tNr=s($K);OOe=r(tNr,"nystromformer"),tNr.forEach(t),VOe=r(uMe," \u2014 "),$x=n(uMe,"A",{href:!0});var aNr=s($x);XOe=r(aNr,"NystromformerConfig"),aNr.forEach(t),zOe=r(uMe," (Nystromformer model)"),uMe.forEach(t),QOe=i(F),Hm=n(F,"LI",{});var bMe=s(Hm);IK=n(bMe,"STRONG",{});var nNr=s(IK);WOe=r(nNr,"openai-gpt"),nNr.forEach(t),HOe=r(bMe," \u2014 "),Ix=n(bMe,"A",{href:!0});var sNr=s(Ix);UOe=r(sNr,"OpenAIGPTConfig"),sNr.forEach(t),JOe=r(bMe," (OpenAI GPT model)"),bMe.forEach(t),YOe=i(F),Um=n(F,"LI",{});var vMe=s(Um);qK=n(vMe,"STRONG",{});var lNr=s(qK);KOe=r(lNr,"pegasus"),lNr.forEach(t),ZOe=r(vMe," \u2014 "),qx=n(vMe,"A",{href:!0});var iNr=s(qx);eVe=r(iNr,"PegasusConfig"),iNr.forEach(t),oVe=r(vMe," (Pegasus model)"),vMe.forEach(t),rVe=i(F),Jm=n(F,"LI",{});var FMe=s(Jm);NK=n(FMe,"STRONG",{});var dNr=s(NK);tVe=r(dNr,"perceiver"),dNr.forEach(t),aVe=r(FMe," \u2014 "),Nx=n(FMe,"A",{href:!0});var cNr=s(Nx);nVe=r(cNr,"PerceiverConfig"),cNr.forEach(t),sVe=r(FMe," (Perceiver model)"),FMe.forEach(t),lVe=i(F),Ym=n(F,"LI",{});var TMe=s(Ym);jK=n(TMe,"STRONG",{});var fNr=s(jK);iVe=r(fNr,"plbart"),fNr.forEach(t),dVe=r(TMe," \u2014 "),jx=n(TMe,"A",{href:!0});var mNr=s(jx);cVe=r(mNr,"PLBartConfig"),mNr.forEach(t),fVe=r(TMe," (PLBart model)"),TMe.forEach(t),mVe=i(F),Km=n(F,"LI",{});var MMe=s(Km);DK=n(MMe,"STRONG",{});var gNr=s(DK);gVe=r(gNr,"poolformer"),gNr.forEach(t),hVe=r(MMe," \u2014 "),Dx=n(MMe,"A",{href:!0});var hNr=s(Dx);pVe=r(hNr,"PoolFormerConfig"),hNr.forEach(t),_Ve=r(MMe," (PoolFormer model)"),MMe.forEach(t),uVe=i(F),Zm=n(F,"LI",{});var EMe=s(Zm);GK=n(EMe,"STRONG",{});var pNr=s(GK);bVe=r(pNr,"prophetnet"),pNr.forEach(t),vVe=r(EMe," \u2014 "),Gx=n(EMe,"A",{href:!0});var _Nr=s(Gx);FVe=r(_Nr,"ProphetNetConfig"),_Nr.forEach(t),TVe=r(EMe," (ProphetNet model)"),EMe.forEach(t),MVe=i(F),eg=n(F,"LI",{});var CMe=s(eg);OK=n(CMe,"STRONG",{});var uNr=s(OK);EVe=r(uNr,"qdqbert"),uNr.forEach(t),CVe=r(CMe," \u2014 "),Ox=n(CMe,"A",{href:!0});var bNr=s(Ox);wVe=r(bNr,"QDQBertConfig"),bNr.forEach(t),AVe=r(CMe," (QDQBert model)"),CMe.forEach(t),yVe=i(F),og=n(F,"LI",{});var wMe=s(og);VK=n(wMe,"STRONG",{});var vNr=s(VK);LVe=r(vNr,"rag"),vNr.forEach(t),xVe=r(wMe," \u2014 "),Vx=n(wMe,"A",{href:!0});var FNr=s(Vx);kVe=r(FNr,"RagConfig"),FNr.forEach(t),SVe=r(wMe," (RAG model)"),wMe.forEach(t),RVe=i(F),rg=n(F,"LI",{});var AMe=s(rg);XK=n(AMe,"STRONG",{});var TNr=s(XK);BVe=r(TNr,"realm"),TNr.forEach(t),PVe=r(AMe," \u2014 "),Xx=n(AMe,"A",{href:!0});var MNr=s(Xx);$Ve=r(MNr,"RealmConfig"),MNr.forEach(t),IVe=r(AMe," (Realm model)"),AMe.forEach(t),qVe=i(F),tg=n(F,"LI",{});var yMe=s(tg);zK=n(yMe,"STRONG",{});var ENr=s(zK);NVe=r(ENr,"reformer"),ENr.forEach(t),jVe=r(yMe," \u2014 "),zx=n(yMe,"A",{href:!0});var CNr=s(zx);DVe=r(CNr,"ReformerConfig"),CNr.forEach(t),GVe=r(yMe," (Reformer model)"),yMe.forEach(t),OVe=i(F),ag=n(F,"LI",{});var LMe=s(ag);QK=n(LMe,"STRONG",{});var wNr=s(QK);VVe=r(wNr,"regnet"),wNr.forEach(t),XVe=r(LMe," \u2014 "),Qx=n(LMe,"A",{href:!0});var ANr=s(Qx);zVe=r(ANr,"RegNetConfig"),ANr.forEach(t),QVe=r(LMe," (RegNet model)"),LMe.forEach(t),WVe=i(F),ng=n(F,"LI",{});var xMe=s(ng);WK=n(xMe,"STRONG",{});var yNr=s(WK);HVe=r(yNr,"rembert"),yNr.forEach(t),UVe=r(xMe," \u2014 "),Wx=n(xMe,"A",{href:!0});var LNr=s(Wx);JVe=r(LNr,"RemBertConfig"),LNr.forEach(t),YVe=r(xMe," (RemBERT model)"),xMe.forEach(t),KVe=i(F),sg=n(F,"LI",{});var kMe=s(sg);HK=n(kMe,"STRONG",{});var xNr=s(HK);ZVe=r(xNr,"resnet"),xNr.forEach(t),eXe=r(kMe," \u2014 "),Hx=n(kMe,"A",{href:!0});var kNr=s(Hx);oXe=r(kNr,"ResNetConfig"),kNr.forEach(t),rXe=r(kMe," (ResNet model)"),kMe.forEach(t),tXe=i(F),lg=n(F,"LI",{});var SMe=s(lg);UK=n(SMe,"STRONG",{});var SNr=s(UK);aXe=r(SNr,"retribert"),SNr.forEach(t),nXe=r(SMe," \u2014 "),Ux=n(SMe,"A",{href:!0});var RNr=s(Ux);sXe=r(RNr,"RetriBertConfig"),RNr.forEach(t),lXe=r(SMe," (RetriBERT model)"),SMe.forEach(t),iXe=i(F),ig=n(F,"LI",{});var RMe=s(ig);JK=n(RMe,"STRONG",{});var BNr=s(JK);dXe=r(BNr,"roberta"),BNr.forEach(t),cXe=r(RMe," \u2014 "),Jx=n(RMe,"A",{href:!0});var PNr=s(Jx);fXe=r(PNr,"RobertaConfig"),PNr.forEach(t),mXe=r(RMe," (RoBERTa model)"),RMe.forEach(t),gXe=i(F),dg=n(F,"LI",{});var BMe=s(dg);YK=n(BMe,"STRONG",{});var $Nr=s(YK);hXe=r($Nr,"roformer"),$Nr.forEach(t),pXe=r(BMe," \u2014 "),Yx=n(BMe,"A",{href:!0});var INr=s(Yx);_Xe=r(INr,"RoFormerConfig"),INr.forEach(t),uXe=r(BMe," (RoFormer model)"),BMe.forEach(t),bXe=i(F),cg=n(F,"LI",{});var PMe=s(cg);KK=n(PMe,"STRONG",{});var qNr=s(KK);vXe=r(qNr,"segformer"),qNr.forEach(t),FXe=r(PMe," \u2014 "),Kx=n(PMe,"A",{href:!0});var NNr=s(Kx);TXe=r(NNr,"SegformerConfig"),NNr.forEach(t),MXe=r(PMe," (SegFormer model)"),PMe.forEach(t),EXe=i(F),fg=n(F,"LI",{});var $Me=s(fg);ZK=n($Me,"STRONG",{});var jNr=s(ZK);CXe=r(jNr,"sew"),jNr.forEach(t),wXe=r($Me," \u2014 "),Zx=n($Me,"A",{href:!0});var DNr=s(Zx);AXe=r(DNr,"SEWConfig"),DNr.forEach(t),yXe=r($Me," (SEW model)"),$Me.forEach(t),LXe=i(F),mg=n(F,"LI",{});var IMe=s(mg);eZ=n(IMe,"STRONG",{});var GNr=s(eZ);xXe=r(GNr,"sew-d"),GNr.forEach(t),kXe=r(IMe," \u2014 "),ek=n(IMe,"A",{href:!0});var ONr=s(ek);SXe=r(ONr,"SEWDConfig"),ONr.forEach(t),RXe=r(IMe," (SEW-D model)"),IMe.forEach(t),BXe=i(F),gg=n(F,"LI",{});var qMe=s(gg);oZ=n(qMe,"STRONG",{});var VNr=s(oZ);PXe=r(VNr,"speech-encoder-decoder"),VNr.forEach(t),$Xe=r(qMe," \u2014 "),ok=n(qMe,"A",{href:!0});var XNr=s(ok);IXe=r(XNr,"SpeechEncoderDecoderConfig"),XNr.forEach(t),qXe=r(qMe," (Speech Encoder decoder model)"),qMe.forEach(t),NXe=i(F),hg=n(F,"LI",{});var NMe=s(hg);rZ=n(NMe,"STRONG",{});var zNr=s(rZ);jXe=r(zNr,"speech_to_text"),zNr.forEach(t),DXe=r(NMe," \u2014 "),rk=n(NMe,"A",{href:!0});var QNr=s(rk);GXe=r(QNr,"Speech2TextConfig"),QNr.forEach(t),OXe=r(NMe," (Speech2Text model)"),NMe.forEach(t),VXe=i(F),pg=n(F,"LI",{});var jMe=s(pg);tZ=n(jMe,"STRONG",{});var WNr=s(tZ);XXe=r(WNr,"speech_to_text_2"),WNr.forEach(t),zXe=r(jMe," \u2014 "),tk=n(jMe,"A",{href:!0});var HNr=s(tk);QXe=r(HNr,"Speech2Text2Config"),HNr.forEach(t),WXe=r(jMe," (Speech2Text2 model)"),jMe.forEach(t),HXe=i(F),_g=n(F,"LI",{});var DMe=s(_g);aZ=n(DMe,"STRONG",{});var UNr=s(aZ);UXe=r(UNr,"splinter"),UNr.forEach(t),JXe=r(DMe," \u2014 "),ak=n(DMe,"A",{href:!0});var JNr=s(ak);YXe=r(JNr,"SplinterConfig"),JNr.forEach(t),KXe=r(DMe," (Splinter model)"),DMe.forEach(t),ZXe=i(F),ug=n(F,"LI",{});var GMe=s(ug);nZ=n(GMe,"STRONG",{});var YNr=s(nZ);eze=r(YNr,"squeezebert"),YNr.forEach(t),oze=r(GMe," \u2014 "),nk=n(GMe,"A",{href:!0});var KNr=s(nk);rze=r(KNr,"SqueezeBertConfig"),KNr.forEach(t),tze=r(GMe," (SqueezeBERT model)"),GMe.forEach(t),aze=i(F),bg=n(F,"LI",{});var OMe=s(bg);sZ=n(OMe,"STRONG",{});var ZNr=s(sZ);nze=r(ZNr,"swin"),ZNr.forEach(t),sze=r(OMe," \u2014 "),sk=n(OMe,"A",{href:!0});var ejr=s(sk);lze=r(ejr,"SwinConfig"),ejr.forEach(t),ize=r(OMe," (Swin model)"),OMe.forEach(t),dze=i(F),vg=n(F,"LI",{});var VMe=s(vg);lZ=n(VMe,"STRONG",{});var ojr=s(lZ);cze=r(ojr,"t5"),ojr.forEach(t),fze=r(VMe," \u2014 "),lk=n(VMe,"A",{href:!0});var rjr=s(lk);mze=r(rjr,"T5Config"),rjr.forEach(t),gze=r(VMe," (T5 model)"),VMe.forEach(t),hze=i(F),Fg=n(F,"LI",{});var XMe=s(Fg);iZ=n(XMe,"STRONG",{});var tjr=s(iZ);pze=r(tjr,"tapas"),tjr.forEach(t),_ze=r(XMe," \u2014 "),ik=n(XMe,"A",{href:!0});var ajr=s(ik);uze=r(ajr,"TapasConfig"),ajr.forEach(t),bze=r(XMe," (TAPAS model)"),XMe.forEach(t),vze=i(F),Tg=n(F,"LI",{});var zMe=s(Tg);dZ=n(zMe,"STRONG",{});var njr=s(dZ);Fze=r(njr,"tapex"),njr.forEach(t),Tze=r(zMe," \u2014 "),dk=n(zMe,"A",{href:!0});var sjr=s(dk);Mze=r(sjr,"BartConfig"),sjr.forEach(t),Eze=r(zMe," (TAPEX model)"),zMe.forEach(t),Cze=i(F),Mg=n(F,"LI",{});var QMe=s(Mg);cZ=n(QMe,"STRONG",{});var ljr=s(cZ);wze=r(ljr,"transfo-xl"),ljr.forEach(t),Aze=r(QMe," \u2014 "),ck=n(QMe,"A",{href:!0});var ijr=s(ck);yze=r(ijr,"TransfoXLConfig"),ijr.forEach(t),Lze=r(QMe," (Transformer-XL model)"),QMe.forEach(t),xze=i(F),Eg=n(F,"LI",{});var WMe=s(Eg);fZ=n(WMe,"STRONG",{});var djr=s(fZ);kze=r(djr,"trocr"),djr.forEach(t),Sze=r(WMe," \u2014 "),fk=n(WMe,"A",{href:!0});var cjr=s(fk);Rze=r(cjr,"TrOCRConfig"),cjr.forEach(t),Bze=r(WMe," (TrOCR model)"),WMe.forEach(t),Pze=i(F),Cg=n(F,"LI",{});var HMe=s(Cg);mZ=n(HMe,"STRONG",{});var fjr=s(mZ);$ze=r(fjr,"unispeech"),fjr.forEach(t),Ize=r(HMe," \u2014 "),mk=n(HMe,"A",{href:!0});var mjr=s(mk);qze=r(mjr,"UniSpeechConfig"),mjr.forEach(t),Nze=r(HMe," (UniSpeech model)"),HMe.forEach(t),jze=i(F),wg=n(F,"LI",{});var UMe=s(wg);gZ=n(UMe,"STRONG",{});var gjr=s(gZ);Dze=r(gjr,"unispeech-sat"),gjr.forEach(t),Gze=r(UMe," \u2014 "),gk=n(UMe,"A",{href:!0});var hjr=s(gk);Oze=r(hjr,"UniSpeechSatConfig"),hjr.forEach(t),Vze=r(UMe," (UniSpeechSat model)"),UMe.forEach(t),Xze=i(F),Ag=n(F,"LI",{});var JMe=s(Ag);hZ=n(JMe,"STRONG",{});var pjr=s(hZ);zze=r(pjr,"van"),pjr.forEach(t),Qze=r(JMe," \u2014 "),hk=n(JMe,"A",{href:!0});var _jr=s(hk);Wze=r(_jr,"VanConfig"),_jr.forEach(t),Hze=r(JMe," (VAN model)"),JMe.forEach(t),Uze=i(F),yg=n(F,"LI",{});var YMe=s(yg);pZ=n(YMe,"STRONG",{});var ujr=s(pZ);Jze=r(ujr,"vilt"),ujr.forEach(t),Yze=r(YMe," \u2014 "),pk=n(YMe,"A",{href:!0});var bjr=s(pk);Kze=r(bjr,"ViltConfig"),bjr.forEach(t),Zze=r(YMe," (ViLT model)"),YMe.forEach(t),eQe=i(F),Lg=n(F,"LI",{});var KMe=s(Lg);_Z=n(KMe,"STRONG",{});var vjr=s(_Z);oQe=r(vjr,"vision-encoder-decoder"),vjr.forEach(t),rQe=r(KMe," \u2014 "),_k=n(KMe,"A",{href:!0});var Fjr=s(_k);tQe=r(Fjr,"VisionEncoderDecoderConfig"),Fjr.forEach(t),aQe=r(KMe," (Vision Encoder decoder model)"),KMe.forEach(t),nQe=i(F),xg=n(F,"LI",{});var ZMe=s(xg);uZ=n(ZMe,"STRONG",{});var Tjr=s(uZ);sQe=r(Tjr,"vision-text-dual-encoder"),Tjr.forEach(t),lQe=r(ZMe," \u2014 "),uk=n(ZMe,"A",{href:!0});var Mjr=s(uk);iQe=r(Mjr,"VisionTextDualEncoderConfig"),Mjr.forEach(t),dQe=r(ZMe," (VisionTextDualEncoder model)"),ZMe.forEach(t),cQe=i(F),kg=n(F,"LI",{});var e4e=s(kg);bZ=n(e4e,"STRONG",{});var Ejr=s(bZ);fQe=r(Ejr,"visual_bert"),Ejr.forEach(t),mQe=r(e4e," \u2014 "),bk=n(e4e,"A",{href:!0});var Cjr=s(bk);gQe=r(Cjr,"VisualBertConfig"),Cjr.forEach(t),hQe=r(e4e," (VisualBert model)"),e4e.forEach(t),pQe=i(F),Sg=n(F,"LI",{});var o4e=s(Sg);vZ=n(o4e,"STRONG",{});var wjr=s(vZ);_Qe=r(wjr,"vit"),wjr.forEach(t),uQe=r(o4e," \u2014 "),vk=n(o4e,"A",{href:!0});var Ajr=s(vk);bQe=r(Ajr,"ViTConfig"),Ajr.forEach(t),vQe=r(o4e," (ViT model)"),o4e.forEach(t),FQe=i(F),Rg=n(F,"LI",{});var r4e=s(Rg);FZ=n(r4e,"STRONG",{});var yjr=s(FZ);TQe=r(yjr,"vit_mae"),yjr.forEach(t),MQe=r(r4e," \u2014 "),Fk=n(r4e,"A",{href:!0});var Ljr=s(Fk);EQe=r(Ljr,"ViTMAEConfig"),Ljr.forEach(t),CQe=r(r4e," (ViTMAE model)"),r4e.forEach(t),wQe=i(F),Bg=n(F,"LI",{});var t4e=s(Bg);TZ=n(t4e,"STRONG",{});var xjr=s(TZ);AQe=r(xjr,"wav2vec2"),xjr.forEach(t),yQe=r(t4e," \u2014 "),Tk=n(t4e,"A",{href:!0});var kjr=s(Tk);LQe=r(kjr,"Wav2Vec2Config"),kjr.forEach(t),xQe=r(t4e," (Wav2Vec2 model)"),t4e.forEach(t),kQe=i(F),Pg=n(F,"LI",{});var a4e=s(Pg);MZ=n(a4e,"STRONG",{});var Sjr=s(MZ);SQe=r(Sjr,"wavlm"),Sjr.forEach(t),RQe=r(a4e," \u2014 "),Mk=n(a4e,"A",{href:!0});var Rjr=s(Mk);BQe=r(Rjr,"WavLMConfig"),Rjr.forEach(t),PQe=r(a4e," (WavLM model)"),a4e.forEach(t),$Qe=i(F),$g=n(F,"LI",{});var n4e=s($g);EZ=n(n4e,"STRONG",{});var Bjr=s(EZ);IQe=r(Bjr,"xglm"),Bjr.forEach(t),qQe=r(n4e," \u2014 "),Ek=n(n4e,"A",{href:!0});var Pjr=s(Ek);NQe=r(Pjr,"XGLMConfig"),Pjr.forEach(t),jQe=r(n4e," (XGLM model)"),n4e.forEach(t),DQe=i(F),Ig=n(F,"LI",{});var s4e=s(Ig);CZ=n(s4e,"STRONG",{});var $jr=s(CZ);GQe=r($jr,"xlm"),$jr.forEach(t),OQe=r(s4e," \u2014 "),Ck=n(s4e,"A",{href:!0});var Ijr=s(Ck);VQe=r(Ijr,"XLMConfig"),Ijr.forEach(t),XQe=r(s4e," (XLM model)"),s4e.forEach(t),zQe=i(F),qg=n(F,"LI",{});var l4e=s(qg);wZ=n(l4e,"STRONG",{});var qjr=s(wZ);QQe=r(qjr,"xlm-prophetnet"),qjr.forEach(t),WQe=r(l4e," \u2014 "),wk=n(l4e,"A",{href:!0});var Njr=s(wk);HQe=r(Njr,"XLMProphetNetConfig"),Njr.forEach(t),UQe=r(l4e," (XLMProphetNet model)"),l4e.forEach(t),JQe=i(F),Ng=n(F,"LI",{});var i4e=s(Ng);AZ=n(i4e,"STRONG",{});var jjr=s(AZ);YQe=r(jjr,"xlm-roberta"),jjr.forEach(t),KQe=r(i4e," \u2014 "),Ak=n(i4e,"A",{href:!0});var Djr=s(Ak);ZQe=r(Djr,"XLMRobertaConfig"),Djr.forEach(t),eWe=r(i4e," (XLM-RoBERTa model)"),i4e.forEach(t),oWe=i(F),jg=n(F,"LI",{});var d4e=s(jg);yZ=n(d4e,"STRONG",{});var Gjr=s(yZ);rWe=r(Gjr,"xlm-roberta-xl"),Gjr.forEach(t),tWe=r(d4e," \u2014 "),yk=n(d4e,"A",{href:!0});var Ojr=s(yk);aWe=r(Ojr,"XLMRobertaXLConfig"),Ojr.forEach(t),nWe=r(d4e," (XLM-RoBERTa-XL model)"),d4e.forEach(t),sWe=i(F),Dg=n(F,"LI",{});var c4e=s(Dg);LZ=n(c4e,"STRONG",{});var Vjr=s(LZ);lWe=r(Vjr,"xlnet"),Vjr.forEach(t),iWe=r(c4e," \u2014 "),Lk=n(c4e,"A",{href:!0});var Xjr=s(Lk);dWe=r(Xjr,"XLNetConfig"),Xjr.forEach(t),cWe=r(c4e," (XLNet model)"),c4e.forEach(t),fWe=i(F),Gg=n(F,"LI",{});var f4e=s(Gg);xZ=n(f4e,"STRONG",{});var zjr=s(xZ);mWe=r(zjr,"yoso"),zjr.forEach(t),gWe=r(f4e," \u2014 "),xk=n(f4e,"A",{href:!0});var Qjr=s(xk);hWe=r(Qjr,"YosoConfig"),Qjr.forEach(t),pWe=r(f4e," (YOSO model)"),f4e.forEach(t),F.forEach(t),_We=i(ga),kZ=n(ga,"P",{});var Wjr=s(kZ);uWe=r(Wjr,"Examples:"),Wjr.forEach(t),bWe=i(ga),m(X3.$$.fragment,ga),ga.forEach(t),vWe=i(Qs),Og=n(Qs,"DIV",{class:!0});var d$e=s(Og);m(z3.$$.fragment,d$e),FWe=i(d$e),SZ=n(d$e,"P",{});var Hjr=s(SZ);TWe=r(Hjr,"Register a new configuration for this class."),Hjr.forEach(t),d$e.forEach(t),Qs.forEach(t),lBe=i(c),Ji=n(c,"H2",{class:!0});var c$e=s(Ji);Vg=n(c$e,"A",{id:!0,class:!0,href:!0});var Ujr=s(Vg);RZ=n(Ujr,"SPAN",{});var Jjr=s(RZ);m(Q3.$$.fragment,Jjr),Jjr.forEach(t),Ujr.forEach(t),MWe=i(c$e),BZ=n(c$e,"SPAN",{});var Yjr=s(BZ);EWe=r(Yjr,"AutoTokenizer"),Yjr.forEach(t),c$e.forEach(t),iBe=i(c),Wo=n(c,"DIV",{class:!0});var Ws=s(Wo);m(W3.$$.fragment,Ws),CWe=i(Ws),H3=n(Ws,"P",{});var f$e=s(H3);wWe=r(f$e,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),kk=n(f$e,"A",{href:!0});var Kjr=s(kk);AWe=r(Kjr,"AutoTokenizer.from_pretrained()"),Kjr.forEach(t),yWe=r(f$e," class method."),f$e.forEach(t),LWe=i(Ws),U3=n(Ws,"P",{});var m$e=s(U3);xWe=r(m$e,"This class cannot be instantiated directly using "),PZ=n(m$e,"CODE",{});var Zjr=s(PZ);kWe=r(Zjr,"__init__()"),Zjr.forEach(t),SWe=r(m$e," (throws an error)."),m$e.forEach(t),RWe=i(Ws),go=n(Ws,"DIV",{class:!0});var ha=s(go);m(J3.$$.fragment,ha),BWe=i(ha),$Z=n(ha,"P",{});var eDr=s($Z);PWe=r(eDr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),eDr.forEach(t),$We=i(ha),Oa=n(ha,"P",{});var PE=s(Oa);IWe=r(PE,"The tokenizer class to instantiate is selected based on the "),IZ=n(PE,"CODE",{});var oDr=s(IZ);qWe=r(oDr,"model_type"),oDr.forEach(t),NWe=r(PE,` property of the config object (either
passed as an argument or loaded from `),qZ=n(PE,"CODE",{});var rDr=s(qZ);jWe=r(rDr,"pretrained_model_name_or_path"),rDr.forEach(t),DWe=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NZ=n(PE,"CODE",{});var tDr=s(NZ);GWe=r(tDr,"pretrained_model_name_or_path"),tDr.forEach(t),OWe=r(PE,":"),PE.forEach(t),VWe=i(ha),E=n(ha,"UL",{});var C=s(E);Wn=n(C,"LI",{});var xL=s(Wn);jZ=n(xL,"STRONG",{});var aDr=s(jZ);XWe=r(aDr,"albert"),aDr.forEach(t),zWe=r(xL," \u2014 "),Sk=n(xL,"A",{href:!0});var nDr=s(Sk);QWe=r(nDr,"AlbertTokenizer"),nDr.forEach(t),WWe=r(xL," or "),Rk=n(xL,"A",{href:!0});var sDr=s(Rk);HWe=r(sDr,"AlbertTokenizerFast"),sDr.forEach(t),UWe=r(xL," (ALBERT model)"),xL.forEach(t),JWe=i(C),Hn=n(C,"LI",{});var kL=s(Hn);DZ=n(kL,"STRONG",{});var lDr=s(DZ);YWe=r(lDr,"bart"),lDr.forEach(t),KWe=r(kL," \u2014 "),Bk=n(kL,"A",{href:!0});var iDr=s(Bk);ZWe=r(iDr,"BartTokenizer"),iDr.forEach(t),eHe=r(kL," or "),Pk=n(kL,"A",{href:!0});var dDr=s(Pk);oHe=r(dDr,"BartTokenizerFast"),dDr.forEach(t),rHe=r(kL," (BART model)"),kL.forEach(t),tHe=i(C),Un=n(C,"LI",{});var SL=s(Un);GZ=n(SL,"STRONG",{});var cDr=s(GZ);aHe=r(cDr,"barthez"),cDr.forEach(t),nHe=r(SL," \u2014 "),$k=n(SL,"A",{href:!0});var fDr=s($k);sHe=r(fDr,"BarthezTokenizer"),fDr.forEach(t),lHe=r(SL," or "),Ik=n(SL,"A",{href:!0});var mDr=s(Ik);iHe=r(mDr,"BarthezTokenizerFast"),mDr.forEach(t),dHe=r(SL," (BARThez model)"),SL.forEach(t),cHe=i(C),Xg=n(C,"LI",{});var m4e=s(Xg);OZ=n(m4e,"STRONG",{});var gDr=s(OZ);fHe=r(gDr,"bartpho"),gDr.forEach(t),mHe=r(m4e," \u2014 "),qk=n(m4e,"A",{href:!0});var hDr=s(qk);gHe=r(hDr,"BartphoTokenizer"),hDr.forEach(t),hHe=r(m4e," (BARTpho model)"),m4e.forEach(t),pHe=i(C),Jn=n(C,"LI",{});var RL=s(Jn);VZ=n(RL,"STRONG",{});var pDr=s(VZ);_He=r(pDr,"bert"),pDr.forEach(t),uHe=r(RL," \u2014 "),Nk=n(RL,"A",{href:!0});var _Dr=s(Nk);bHe=r(_Dr,"BertTokenizer"),_Dr.forEach(t),vHe=r(RL," or "),jk=n(RL,"A",{href:!0});var uDr=s(jk);FHe=r(uDr,"BertTokenizerFast"),uDr.forEach(t),THe=r(RL," (BERT model)"),RL.forEach(t),MHe=i(C),zg=n(C,"LI",{});var g4e=s(zg);XZ=n(g4e,"STRONG",{});var bDr=s(XZ);EHe=r(bDr,"bert-generation"),bDr.forEach(t),CHe=r(g4e," \u2014 "),Dk=n(g4e,"A",{href:!0});var vDr=s(Dk);wHe=r(vDr,"BertGenerationTokenizer"),vDr.forEach(t),AHe=r(g4e," (Bert Generation model)"),g4e.forEach(t),yHe=i(C),Qg=n(C,"LI",{});var h4e=s(Qg);zZ=n(h4e,"STRONG",{});var FDr=s(zZ);LHe=r(FDr,"bert-japanese"),FDr.forEach(t),xHe=r(h4e," \u2014 "),Gk=n(h4e,"A",{href:!0});var TDr=s(Gk);kHe=r(TDr,"BertJapaneseTokenizer"),TDr.forEach(t),SHe=r(h4e," (BertJapanese model)"),h4e.forEach(t),RHe=i(C),Wg=n(C,"LI",{});var p4e=s(Wg);QZ=n(p4e,"STRONG",{});var MDr=s(QZ);BHe=r(MDr,"bertweet"),MDr.forEach(t),PHe=r(p4e," \u2014 "),Ok=n(p4e,"A",{href:!0});var EDr=s(Ok);$He=r(EDr,"BertweetTokenizer"),EDr.forEach(t),IHe=r(p4e," (Bertweet model)"),p4e.forEach(t),qHe=i(C),Yn=n(C,"LI",{});var BL=s(Yn);WZ=n(BL,"STRONG",{});var CDr=s(WZ);NHe=r(CDr,"big_bird"),CDr.forEach(t),jHe=r(BL," \u2014 "),Vk=n(BL,"A",{href:!0});var wDr=s(Vk);DHe=r(wDr,"BigBirdTokenizer"),wDr.forEach(t),GHe=r(BL," or "),Xk=n(BL,"A",{href:!0});var ADr=s(Xk);OHe=r(ADr,"BigBirdTokenizerFast"),ADr.forEach(t),VHe=r(BL," (BigBird model)"),BL.forEach(t),XHe=i(C),Kn=n(C,"LI",{});var PL=s(Kn);HZ=n(PL,"STRONG",{});var yDr=s(HZ);zHe=r(yDr,"bigbird_pegasus"),yDr.forEach(t),QHe=r(PL," \u2014 "),zk=n(PL,"A",{href:!0});var LDr=s(zk);WHe=r(LDr,"PegasusTokenizer"),LDr.forEach(t),HHe=r(PL," or "),Qk=n(PL,"A",{href:!0});var xDr=s(Qk);UHe=r(xDr,"PegasusTokenizerFast"),xDr.forEach(t),JHe=r(PL," (BigBirdPegasus model)"),PL.forEach(t),YHe=i(C),Zn=n(C,"LI",{});var $L=s(Zn);UZ=n($L,"STRONG",{});var kDr=s(UZ);KHe=r(kDr,"blenderbot"),kDr.forEach(t),ZHe=r($L," \u2014 "),Wk=n($L,"A",{href:!0});var SDr=s(Wk);eUe=r(SDr,"BlenderbotTokenizer"),SDr.forEach(t),oUe=r($L," or "),Hk=n($L,"A",{href:!0});var RDr=s(Hk);rUe=r(RDr,"BlenderbotTokenizerFast"),RDr.forEach(t),tUe=r($L," (Blenderbot model)"),$L.forEach(t),aUe=i(C),Hg=n(C,"LI",{});var _4e=s(Hg);JZ=n(_4e,"STRONG",{});var BDr=s(JZ);nUe=r(BDr,"blenderbot-small"),BDr.forEach(t),sUe=r(_4e," \u2014 "),Uk=n(_4e,"A",{href:!0});var PDr=s(Uk);lUe=r(PDr,"BlenderbotSmallTokenizer"),PDr.forEach(t),iUe=r(_4e," (BlenderbotSmall model)"),_4e.forEach(t),dUe=i(C),Ug=n(C,"LI",{});var u4e=s(Ug);YZ=n(u4e,"STRONG",{});var $Dr=s(YZ);cUe=r($Dr,"byt5"),$Dr.forEach(t),fUe=r(u4e," \u2014 "),Jk=n(u4e,"A",{href:!0});var IDr=s(Jk);mUe=r(IDr,"ByT5Tokenizer"),IDr.forEach(t),gUe=r(u4e," (ByT5 model)"),u4e.forEach(t),hUe=i(C),es=n(C,"LI",{});var IL=s(es);KZ=n(IL,"STRONG",{});var qDr=s(KZ);pUe=r(qDr,"camembert"),qDr.forEach(t),_Ue=r(IL," \u2014 "),Yk=n(IL,"A",{href:!0});var NDr=s(Yk);uUe=r(NDr,"CamembertTokenizer"),NDr.forEach(t),bUe=r(IL," or "),Kk=n(IL,"A",{href:!0});var jDr=s(Kk);vUe=r(jDr,"CamembertTokenizerFast"),jDr.forEach(t),FUe=r(IL," (CamemBERT model)"),IL.forEach(t),TUe=i(C),Jg=n(C,"LI",{});var b4e=s(Jg);ZZ=n(b4e,"STRONG",{});var DDr=s(ZZ);MUe=r(DDr,"canine"),DDr.forEach(t),EUe=r(b4e," \u2014 "),Zk=n(b4e,"A",{href:!0});var GDr=s(Zk);CUe=r(GDr,"CanineTokenizer"),GDr.forEach(t),wUe=r(b4e," (Canine model)"),b4e.forEach(t),AUe=i(C),os=n(C,"LI",{});var qL=s(os);eee=n(qL,"STRONG",{});var ODr=s(eee);yUe=r(ODr,"clip"),ODr.forEach(t),LUe=r(qL," \u2014 "),eS=n(qL,"A",{href:!0});var VDr=s(eS);xUe=r(VDr,"CLIPTokenizer"),VDr.forEach(t),kUe=r(qL," or "),oS=n(qL,"A",{href:!0});var XDr=s(oS);SUe=r(XDr,"CLIPTokenizerFast"),XDr.forEach(t),RUe=r(qL," (CLIP model)"),qL.forEach(t),BUe=i(C),rs=n(C,"LI",{});var NL=s(rs);oee=n(NL,"STRONG",{});var zDr=s(oee);PUe=r(zDr,"convbert"),zDr.forEach(t),$Ue=r(NL," \u2014 "),rS=n(NL,"A",{href:!0});var QDr=s(rS);IUe=r(QDr,"ConvBertTokenizer"),QDr.forEach(t),qUe=r(NL," or "),tS=n(NL,"A",{href:!0});var WDr=s(tS);NUe=r(WDr,"ConvBertTokenizerFast"),WDr.forEach(t),jUe=r(NL," (ConvBERT model)"),NL.forEach(t),DUe=i(C),ts=n(C,"LI",{});var jL=s(ts);ree=n(jL,"STRONG",{});var HDr=s(ree);GUe=r(HDr,"cpm"),HDr.forEach(t),OUe=r(jL," \u2014 "),aS=n(jL,"A",{href:!0});var UDr=s(aS);VUe=r(UDr,"CpmTokenizer"),UDr.forEach(t),XUe=r(jL," or "),tee=n(jL,"CODE",{});var JDr=s(tee);zUe=r(JDr,"CpmTokenizerFast"),JDr.forEach(t),QUe=r(jL," (CPM model)"),jL.forEach(t),WUe=i(C),Yg=n(C,"LI",{});var v4e=s(Yg);aee=n(v4e,"STRONG",{});var YDr=s(aee);HUe=r(YDr,"ctrl"),YDr.forEach(t),UUe=r(v4e," \u2014 "),nS=n(v4e,"A",{href:!0});var KDr=s(nS);JUe=r(KDr,"CTRLTokenizer"),KDr.forEach(t),YUe=r(v4e," (CTRL model)"),v4e.forEach(t),KUe=i(C),as=n(C,"LI",{});var DL=s(as);nee=n(DL,"STRONG",{});var ZDr=s(nee);ZUe=r(ZDr,"deberta"),ZDr.forEach(t),eJe=r(DL," \u2014 "),sS=n(DL,"A",{href:!0});var eGr=s(sS);oJe=r(eGr,"DebertaTokenizer"),eGr.forEach(t),rJe=r(DL," or "),lS=n(DL,"A",{href:!0});var oGr=s(lS);tJe=r(oGr,"DebertaTokenizerFast"),oGr.forEach(t),aJe=r(DL," (DeBERTa model)"),DL.forEach(t),nJe=i(C),ns=n(C,"LI",{});var GL=s(ns);see=n(GL,"STRONG",{});var rGr=s(see);sJe=r(rGr,"deberta-v2"),rGr.forEach(t),lJe=r(GL," \u2014 "),iS=n(GL,"A",{href:!0});var tGr=s(iS);iJe=r(tGr,"DebertaV2Tokenizer"),tGr.forEach(t),dJe=r(GL," or "),dS=n(GL,"A",{href:!0});var aGr=s(dS);cJe=r(aGr,"DebertaV2TokenizerFast"),aGr.forEach(t),fJe=r(GL," (DeBERTa-v2 model)"),GL.forEach(t),mJe=i(C),ss=n(C,"LI",{});var OL=s(ss);lee=n(OL,"STRONG",{});var nGr=s(lee);gJe=r(nGr,"distilbert"),nGr.forEach(t),hJe=r(OL," \u2014 "),cS=n(OL,"A",{href:!0});var sGr=s(cS);pJe=r(sGr,"DistilBertTokenizer"),sGr.forEach(t),_Je=r(OL," or "),fS=n(OL,"A",{href:!0});var lGr=s(fS);uJe=r(lGr,"DistilBertTokenizerFast"),lGr.forEach(t),bJe=r(OL," (DistilBERT model)"),OL.forEach(t),vJe=i(C),ls=n(C,"LI",{});var VL=s(ls);iee=n(VL,"STRONG",{});var iGr=s(iee);FJe=r(iGr,"dpr"),iGr.forEach(t),TJe=r(VL," \u2014 "),mS=n(VL,"A",{href:!0});var dGr=s(mS);MJe=r(dGr,"DPRQuestionEncoderTokenizer"),dGr.forEach(t),EJe=r(VL," or "),gS=n(VL,"A",{href:!0});var cGr=s(gS);CJe=r(cGr,"DPRQuestionEncoderTokenizerFast"),cGr.forEach(t),wJe=r(VL," (DPR model)"),VL.forEach(t),AJe=i(C),is=n(C,"LI",{});var XL=s(is);dee=n(XL,"STRONG",{});var fGr=s(dee);yJe=r(fGr,"electra"),fGr.forEach(t),LJe=r(XL," \u2014 "),hS=n(XL,"A",{href:!0});var mGr=s(hS);xJe=r(mGr,"ElectraTokenizer"),mGr.forEach(t),kJe=r(XL," or "),pS=n(XL,"A",{href:!0});var gGr=s(pS);SJe=r(gGr,"ElectraTokenizerFast"),gGr.forEach(t),RJe=r(XL," (ELECTRA model)"),XL.forEach(t),BJe=i(C),Kg=n(C,"LI",{});var F4e=s(Kg);cee=n(F4e,"STRONG",{});var hGr=s(cee);PJe=r(hGr,"flaubert"),hGr.forEach(t),$Je=r(F4e," \u2014 "),_S=n(F4e,"A",{href:!0});var pGr=s(_S);IJe=r(pGr,"FlaubertTokenizer"),pGr.forEach(t),qJe=r(F4e," (FlauBERT model)"),F4e.forEach(t),NJe=i(C),ds=n(C,"LI",{});var zL=s(ds);fee=n(zL,"STRONG",{});var _Gr=s(fee);jJe=r(_Gr,"fnet"),_Gr.forEach(t),DJe=r(zL," \u2014 "),uS=n(zL,"A",{href:!0});var uGr=s(uS);GJe=r(uGr,"FNetTokenizer"),uGr.forEach(t),OJe=r(zL," or "),bS=n(zL,"A",{href:!0});var bGr=s(bS);VJe=r(bGr,"FNetTokenizerFast"),bGr.forEach(t),XJe=r(zL," (FNet model)"),zL.forEach(t),zJe=i(C),Zg=n(C,"LI",{});var T4e=s(Zg);mee=n(T4e,"STRONG",{});var vGr=s(mee);QJe=r(vGr,"fsmt"),vGr.forEach(t),WJe=r(T4e," \u2014 "),vS=n(T4e,"A",{href:!0});var FGr=s(vS);HJe=r(FGr,"FSMTTokenizer"),FGr.forEach(t),UJe=r(T4e," (FairSeq Machine-Translation model)"),T4e.forEach(t),JJe=i(C),cs=n(C,"LI",{});var QL=s(cs);gee=n(QL,"STRONG",{});var TGr=s(gee);YJe=r(TGr,"funnel"),TGr.forEach(t),KJe=r(QL," \u2014 "),FS=n(QL,"A",{href:!0});var MGr=s(FS);ZJe=r(MGr,"FunnelTokenizer"),MGr.forEach(t),eYe=r(QL," or "),TS=n(QL,"A",{href:!0});var EGr=s(TS);oYe=r(EGr,"FunnelTokenizerFast"),EGr.forEach(t),rYe=r(QL," (Funnel Transformer model)"),QL.forEach(t),tYe=i(C),fs=n(C,"LI",{});var WL=s(fs);hee=n(WL,"STRONG",{});var CGr=s(hee);aYe=r(CGr,"gpt2"),CGr.forEach(t),nYe=r(WL," \u2014 "),MS=n(WL,"A",{href:!0});var wGr=s(MS);sYe=r(wGr,"GPT2Tokenizer"),wGr.forEach(t),lYe=r(WL," or "),ES=n(WL,"A",{href:!0});var AGr=s(ES);iYe=r(AGr,"GPT2TokenizerFast"),AGr.forEach(t),dYe=r(WL," (OpenAI GPT-2 model)"),WL.forEach(t),cYe=i(C),ms=n(C,"LI",{});var HL=s(ms);pee=n(HL,"STRONG",{});var yGr=s(pee);fYe=r(yGr,"gpt_neo"),yGr.forEach(t),mYe=r(HL," \u2014 "),CS=n(HL,"A",{href:!0});var LGr=s(CS);gYe=r(LGr,"GPT2Tokenizer"),LGr.forEach(t),hYe=r(HL," or "),wS=n(HL,"A",{href:!0});var xGr=s(wS);pYe=r(xGr,"GPT2TokenizerFast"),xGr.forEach(t),_Ye=r(HL," (GPT Neo model)"),HL.forEach(t),uYe=i(C),gs=n(C,"LI",{});var UL=s(gs);_ee=n(UL,"STRONG",{});var kGr=s(_ee);bYe=r(kGr,"gpt_neox"),kGr.forEach(t),vYe=r(UL," \u2014 "),AS=n(UL,"A",{href:!0});var SGr=s(AS);FYe=r(SGr,"GPTNeoXTokenizer"),SGr.forEach(t),TYe=r(UL," or "),yS=n(UL,"A",{href:!0});var RGr=s(yS);MYe=r(RGr,"GPTNeoXTokenizerFast"),RGr.forEach(t),EYe=r(UL," (GPTNeoX model)"),UL.forEach(t),CYe=i(C),hs=n(C,"LI",{});var JL=s(hs);uee=n(JL,"STRONG",{});var BGr=s(uee);wYe=r(BGr,"gptj"),BGr.forEach(t),AYe=r(JL," \u2014 "),LS=n(JL,"A",{href:!0});var PGr=s(LS);yYe=r(PGr,"GPT2Tokenizer"),PGr.forEach(t),LYe=r(JL," or "),xS=n(JL,"A",{href:!0});var $Gr=s(xS);xYe=r($Gr,"GPT2TokenizerFast"),$Gr.forEach(t),kYe=r(JL," (GPT-J model)"),JL.forEach(t),SYe=i(C),ps=n(C,"LI",{});var YL=s(ps);bee=n(YL,"STRONG",{});var IGr=s(bee);RYe=r(IGr,"herbert"),IGr.forEach(t),BYe=r(YL," \u2014 "),kS=n(YL,"A",{href:!0});var qGr=s(kS);PYe=r(qGr,"HerbertTokenizer"),qGr.forEach(t),$Ye=r(YL," or "),SS=n(YL,"A",{href:!0});var NGr=s(SS);IYe=r(NGr,"HerbertTokenizerFast"),NGr.forEach(t),qYe=r(YL," (HerBERT model)"),YL.forEach(t),NYe=i(C),eh=n(C,"LI",{});var M4e=s(eh);vee=n(M4e,"STRONG",{});var jGr=s(vee);jYe=r(jGr,"hubert"),jGr.forEach(t),DYe=r(M4e," \u2014 "),RS=n(M4e,"A",{href:!0});var DGr=s(RS);GYe=r(DGr,"Wav2Vec2CTCTokenizer"),DGr.forEach(t),OYe=r(M4e," (Hubert model)"),M4e.forEach(t),VYe=i(C),_s=n(C,"LI",{});var KL=s(_s);Fee=n(KL,"STRONG",{});var GGr=s(Fee);XYe=r(GGr,"ibert"),GGr.forEach(t),zYe=r(KL," \u2014 "),BS=n(KL,"A",{href:!0});var OGr=s(BS);QYe=r(OGr,"RobertaTokenizer"),OGr.forEach(t),WYe=r(KL," or "),PS=n(KL,"A",{href:!0});var VGr=s(PS);HYe=r(VGr,"RobertaTokenizerFast"),VGr.forEach(t),UYe=r(KL," (I-BERT model)"),KL.forEach(t),JYe=i(C),us=n(C,"LI",{});var ZL=s(us);Tee=n(ZL,"STRONG",{});var XGr=s(Tee);YYe=r(XGr,"layoutlm"),XGr.forEach(t),KYe=r(ZL," \u2014 "),$S=n(ZL,"A",{href:!0});var zGr=s($S);ZYe=r(zGr,"LayoutLMTokenizer"),zGr.forEach(t),eKe=r(ZL," or "),IS=n(ZL,"A",{href:!0});var QGr=s(IS);oKe=r(QGr,"LayoutLMTokenizerFast"),QGr.forEach(t),rKe=r(ZL," (LayoutLM model)"),ZL.forEach(t),tKe=i(C),bs=n(C,"LI",{});var e7=s(bs);Mee=n(e7,"STRONG",{});var WGr=s(Mee);aKe=r(WGr,"layoutlmv2"),WGr.forEach(t),nKe=r(e7," \u2014 "),qS=n(e7,"A",{href:!0});var HGr=s(qS);sKe=r(HGr,"LayoutLMv2Tokenizer"),HGr.forEach(t),lKe=r(e7," or "),NS=n(e7,"A",{href:!0});var UGr=s(NS);iKe=r(UGr,"LayoutLMv2TokenizerFast"),UGr.forEach(t),dKe=r(e7," (LayoutLMv2 model)"),e7.forEach(t),cKe=i(C),vs=n(C,"LI",{});var o7=s(vs);Eee=n(o7,"STRONG",{});var JGr=s(Eee);fKe=r(JGr,"layoutxlm"),JGr.forEach(t),mKe=r(o7," \u2014 "),jS=n(o7,"A",{href:!0});var YGr=s(jS);gKe=r(YGr,"LayoutXLMTokenizer"),YGr.forEach(t),hKe=r(o7," or "),DS=n(o7,"A",{href:!0});var KGr=s(DS);pKe=r(KGr,"LayoutXLMTokenizerFast"),KGr.forEach(t),_Ke=r(o7," (LayoutXLM model)"),o7.forEach(t),uKe=i(C),Fs=n(C,"LI",{});var r7=s(Fs);Cee=n(r7,"STRONG",{});var ZGr=s(Cee);bKe=r(ZGr,"led"),ZGr.forEach(t),vKe=r(r7," \u2014 "),GS=n(r7,"A",{href:!0});var eOr=s(GS);FKe=r(eOr,"LEDTokenizer"),eOr.forEach(t),TKe=r(r7," or "),OS=n(r7,"A",{href:!0});var oOr=s(OS);MKe=r(oOr,"LEDTokenizerFast"),oOr.forEach(t),EKe=r(r7," (LED model)"),r7.forEach(t),CKe=i(C),Ts=n(C,"LI",{});var t7=s(Ts);wee=n(t7,"STRONG",{});var rOr=s(wee);wKe=r(rOr,"longformer"),rOr.forEach(t),AKe=r(t7," \u2014 "),VS=n(t7,"A",{href:!0});var tOr=s(VS);yKe=r(tOr,"LongformerTokenizer"),tOr.forEach(t),LKe=r(t7," or "),XS=n(t7,"A",{href:!0});var aOr=s(XS);xKe=r(aOr,"LongformerTokenizerFast"),aOr.forEach(t),kKe=r(t7," (Longformer model)"),t7.forEach(t),SKe=i(C),oh=n(C,"LI",{});var E4e=s(oh);Aee=n(E4e,"STRONG",{});var nOr=s(Aee);RKe=r(nOr,"luke"),nOr.forEach(t),BKe=r(E4e," \u2014 "),zS=n(E4e,"A",{href:!0});var sOr=s(zS);PKe=r(sOr,"LukeTokenizer"),sOr.forEach(t),$Ke=r(E4e," (LUKE model)"),E4e.forEach(t),IKe=i(C),Ms=n(C,"LI",{});var a7=s(Ms);yee=n(a7,"STRONG",{});var lOr=s(yee);qKe=r(lOr,"lxmert"),lOr.forEach(t),NKe=r(a7," \u2014 "),QS=n(a7,"A",{href:!0});var iOr=s(QS);jKe=r(iOr,"LxmertTokenizer"),iOr.forEach(t),DKe=r(a7," or "),WS=n(a7,"A",{href:!0});var dOr=s(WS);GKe=r(dOr,"LxmertTokenizerFast"),dOr.forEach(t),OKe=r(a7," (LXMERT model)"),a7.forEach(t),VKe=i(C),rh=n(C,"LI",{});var C4e=s(rh);Lee=n(C4e,"STRONG",{});var cOr=s(Lee);XKe=r(cOr,"m2m_100"),cOr.forEach(t),zKe=r(C4e," \u2014 "),HS=n(C4e,"A",{href:!0});var fOr=s(HS);QKe=r(fOr,"M2M100Tokenizer"),fOr.forEach(t),WKe=r(C4e," (M2M100 model)"),C4e.forEach(t),HKe=i(C),th=n(C,"LI",{});var w4e=s(th);xee=n(w4e,"STRONG",{});var mOr=s(xee);UKe=r(mOr,"marian"),mOr.forEach(t),JKe=r(w4e," \u2014 "),US=n(w4e,"A",{href:!0});var gOr=s(US);YKe=r(gOr,"MarianTokenizer"),gOr.forEach(t),KKe=r(w4e," (Marian model)"),w4e.forEach(t),ZKe=i(C),Es=n(C,"LI",{});var n7=s(Es);kee=n(n7,"STRONG",{});var hOr=s(kee);eZe=r(hOr,"mbart"),hOr.forEach(t),oZe=r(n7," \u2014 "),JS=n(n7,"A",{href:!0});var pOr=s(JS);rZe=r(pOr,"MBartTokenizer"),pOr.forEach(t),tZe=r(n7," or "),YS=n(n7,"A",{href:!0});var _Or=s(YS);aZe=r(_Or,"MBartTokenizerFast"),_Or.forEach(t),nZe=r(n7," (mBART model)"),n7.forEach(t),sZe=i(C),Cs=n(C,"LI",{});var s7=s(Cs);See=n(s7,"STRONG",{});var uOr=s(See);lZe=r(uOr,"mbart50"),uOr.forEach(t),iZe=r(s7," \u2014 "),KS=n(s7,"A",{href:!0});var bOr=s(KS);dZe=r(bOr,"MBart50Tokenizer"),bOr.forEach(t),cZe=r(s7," or "),ZS=n(s7,"A",{href:!0});var vOr=s(ZS);fZe=r(vOr,"MBart50TokenizerFast"),vOr.forEach(t),mZe=r(s7," (mBART-50 model)"),s7.forEach(t),gZe=i(C),ah=n(C,"LI",{});var A4e=s(ah);Ree=n(A4e,"STRONG",{});var FOr=s(Ree);hZe=r(FOr,"mluke"),FOr.forEach(t),pZe=r(A4e," \u2014 "),eR=n(A4e,"A",{href:!0});var TOr=s(eR);_Ze=r(TOr,"MLukeTokenizer"),TOr.forEach(t),uZe=r(A4e," (mLUKE model)"),A4e.forEach(t),bZe=i(C),ws=n(C,"LI",{});var l7=s(ws);Bee=n(l7,"STRONG",{});var MOr=s(Bee);vZe=r(MOr,"mobilebert"),MOr.forEach(t),FZe=r(l7," \u2014 "),oR=n(l7,"A",{href:!0});var EOr=s(oR);TZe=r(EOr,"MobileBertTokenizer"),EOr.forEach(t),MZe=r(l7," or "),rR=n(l7,"A",{href:!0});var COr=s(rR);EZe=r(COr,"MobileBertTokenizerFast"),COr.forEach(t),CZe=r(l7," (MobileBERT model)"),l7.forEach(t),wZe=i(C),As=n(C,"LI",{});var i7=s(As);Pee=n(i7,"STRONG",{});var wOr=s(Pee);AZe=r(wOr,"mpnet"),wOr.forEach(t),yZe=r(i7," \u2014 "),tR=n(i7,"A",{href:!0});var AOr=s(tR);LZe=r(AOr,"MPNetTokenizer"),AOr.forEach(t),xZe=r(i7," or "),aR=n(i7,"A",{href:!0});var yOr=s(aR);kZe=r(yOr,"MPNetTokenizerFast"),yOr.forEach(t),SZe=r(i7," (MPNet model)"),i7.forEach(t),RZe=i(C),ys=n(C,"LI",{});var d7=s(ys);$ee=n(d7,"STRONG",{});var LOr=s($ee);BZe=r(LOr,"mt5"),LOr.forEach(t),PZe=r(d7," \u2014 "),nR=n(d7,"A",{href:!0});var xOr=s(nR);$Ze=r(xOr,"MT5Tokenizer"),xOr.forEach(t),IZe=r(d7," or "),sR=n(d7,"A",{href:!0});var kOr=s(sR);qZe=r(kOr,"MT5TokenizerFast"),kOr.forEach(t),NZe=r(d7," (mT5 model)"),d7.forEach(t),jZe=i(C),Ls=n(C,"LI",{});var c7=s(Ls);Iee=n(c7,"STRONG",{});var SOr=s(Iee);DZe=r(SOr,"openai-gpt"),SOr.forEach(t),GZe=r(c7," \u2014 "),lR=n(c7,"A",{href:!0});var ROr=s(lR);OZe=r(ROr,"OpenAIGPTTokenizer"),ROr.forEach(t),VZe=r(c7," or "),iR=n(c7,"A",{href:!0});var BOr=s(iR);XZe=r(BOr,"OpenAIGPTTokenizerFast"),BOr.forEach(t),zZe=r(c7," (OpenAI GPT model)"),c7.forEach(t),QZe=i(C),xs=n(C,"LI",{});var f7=s(xs);qee=n(f7,"STRONG",{});var POr=s(qee);WZe=r(POr,"pegasus"),POr.forEach(t),HZe=r(f7," \u2014 "),dR=n(f7,"A",{href:!0});var $Or=s(dR);UZe=r($Or,"PegasusTokenizer"),$Or.forEach(t),JZe=r(f7," or "),cR=n(f7,"A",{href:!0});var IOr=s(cR);YZe=r(IOr,"PegasusTokenizerFast"),IOr.forEach(t),KZe=r(f7," (Pegasus model)"),f7.forEach(t),ZZe=i(C),nh=n(C,"LI",{});var y4e=s(nh);Nee=n(y4e,"STRONG",{});var qOr=s(Nee);eeo=r(qOr,"perceiver"),qOr.forEach(t),oeo=r(y4e," \u2014 "),fR=n(y4e,"A",{href:!0});var NOr=s(fR);reo=r(NOr,"PerceiverTokenizer"),NOr.forEach(t),teo=r(y4e," (Perceiver model)"),y4e.forEach(t),aeo=i(C),sh=n(C,"LI",{});var L4e=s(sh);jee=n(L4e,"STRONG",{});var jOr=s(jee);neo=r(jOr,"phobert"),jOr.forEach(t),seo=r(L4e," \u2014 "),mR=n(L4e,"A",{href:!0});var DOr=s(mR);leo=r(DOr,"PhobertTokenizer"),DOr.forEach(t),ieo=r(L4e," (PhoBERT model)"),L4e.forEach(t),deo=i(C),lh=n(C,"LI",{});var x4e=s(lh);Dee=n(x4e,"STRONG",{});var GOr=s(Dee);ceo=r(GOr,"plbart"),GOr.forEach(t),feo=r(x4e," \u2014 "),gR=n(x4e,"A",{href:!0});var OOr=s(gR);meo=r(OOr,"PLBartTokenizer"),OOr.forEach(t),geo=r(x4e," (PLBart model)"),x4e.forEach(t),heo=i(C),ih=n(C,"LI",{});var k4e=s(ih);Gee=n(k4e,"STRONG",{});var VOr=s(Gee);peo=r(VOr,"prophetnet"),VOr.forEach(t),_eo=r(k4e," \u2014 "),hR=n(k4e,"A",{href:!0});var XOr=s(hR);ueo=r(XOr,"ProphetNetTokenizer"),XOr.forEach(t),beo=r(k4e," (ProphetNet model)"),k4e.forEach(t),veo=i(C),ks=n(C,"LI",{});var m7=s(ks);Oee=n(m7,"STRONG",{});var zOr=s(Oee);Feo=r(zOr,"qdqbert"),zOr.forEach(t),Teo=r(m7," \u2014 "),pR=n(m7,"A",{href:!0});var QOr=s(pR);Meo=r(QOr,"BertTokenizer"),QOr.forEach(t),Eeo=r(m7," or "),_R=n(m7,"A",{href:!0});var WOr=s(_R);Ceo=r(WOr,"BertTokenizerFast"),WOr.forEach(t),weo=r(m7," (QDQBert model)"),m7.forEach(t),Aeo=i(C),dh=n(C,"LI",{});var S4e=s(dh);Vee=n(S4e,"STRONG",{});var HOr=s(Vee);yeo=r(HOr,"rag"),HOr.forEach(t),Leo=r(S4e," \u2014 "),uR=n(S4e,"A",{href:!0});var UOr=s(uR);xeo=r(UOr,"RagTokenizer"),UOr.forEach(t),keo=r(S4e," (RAG model)"),S4e.forEach(t),Seo=i(C),Ss=n(C,"LI",{});var g7=s(Ss);Xee=n(g7,"STRONG",{});var JOr=s(Xee);Reo=r(JOr,"realm"),JOr.forEach(t),Beo=r(g7," \u2014 "),bR=n(g7,"A",{href:!0});var YOr=s(bR);Peo=r(YOr,"RealmTokenizer"),YOr.forEach(t),$eo=r(g7," or "),vR=n(g7,"A",{href:!0});var KOr=s(vR);Ieo=r(KOr,"RealmTokenizerFast"),KOr.forEach(t),qeo=r(g7," (Realm model)"),g7.forEach(t),Neo=i(C),Rs=n(C,"LI",{});var h7=s(Rs);zee=n(h7,"STRONG",{});var ZOr=s(zee);jeo=r(ZOr,"reformer"),ZOr.forEach(t),Deo=r(h7," \u2014 "),FR=n(h7,"A",{href:!0});var eVr=s(FR);Geo=r(eVr,"ReformerTokenizer"),eVr.forEach(t),Oeo=r(h7," or "),TR=n(h7,"A",{href:!0});var oVr=s(TR);Veo=r(oVr,"ReformerTokenizerFast"),oVr.forEach(t),Xeo=r(h7," (Reformer model)"),h7.forEach(t),zeo=i(C),Bs=n(C,"LI",{});var p7=s(Bs);Qee=n(p7,"STRONG",{});var rVr=s(Qee);Qeo=r(rVr,"rembert"),rVr.forEach(t),Weo=r(p7," \u2014 "),MR=n(p7,"A",{href:!0});var tVr=s(MR);Heo=r(tVr,"RemBertTokenizer"),tVr.forEach(t),Ueo=r(p7," or "),ER=n(p7,"A",{href:!0});var aVr=s(ER);Jeo=r(aVr,"RemBertTokenizerFast"),aVr.forEach(t),Yeo=r(p7," (RemBERT model)"),p7.forEach(t),Keo=i(C),Ps=n(C,"LI",{});var _7=s(Ps);Wee=n(_7,"STRONG",{});var nVr=s(Wee);Zeo=r(nVr,"retribert"),nVr.forEach(t),eoo=r(_7," \u2014 "),CR=n(_7,"A",{href:!0});var sVr=s(CR);ooo=r(sVr,"RetriBertTokenizer"),sVr.forEach(t),roo=r(_7," or "),wR=n(_7,"A",{href:!0});var lVr=s(wR);too=r(lVr,"RetriBertTokenizerFast"),lVr.forEach(t),aoo=r(_7," (RetriBERT model)"),_7.forEach(t),noo=i(C),$s=n(C,"LI",{});var u7=s($s);Hee=n(u7,"STRONG",{});var iVr=s(Hee);soo=r(iVr,"roberta"),iVr.forEach(t),loo=r(u7," \u2014 "),AR=n(u7,"A",{href:!0});var dVr=s(AR);ioo=r(dVr,"RobertaTokenizer"),dVr.forEach(t),doo=r(u7," or "),yR=n(u7,"A",{href:!0});var cVr=s(yR);coo=r(cVr,"RobertaTokenizerFast"),cVr.forEach(t),foo=r(u7," (RoBERTa model)"),u7.forEach(t),moo=i(C),Is=n(C,"LI",{});var b7=s(Is);Uee=n(b7,"STRONG",{});var fVr=s(Uee);goo=r(fVr,"roformer"),fVr.forEach(t),hoo=r(b7," \u2014 "),LR=n(b7,"A",{href:!0});var mVr=s(LR);poo=r(mVr,"RoFormerTokenizer"),mVr.forEach(t),_oo=r(b7," or "),xR=n(b7,"A",{href:!0});var gVr=s(xR);uoo=r(gVr,"RoFormerTokenizerFast"),gVr.forEach(t),boo=r(b7," (RoFormer model)"),b7.forEach(t),voo=i(C),ch=n(C,"LI",{});var R4e=s(ch);Jee=n(R4e,"STRONG",{});var hVr=s(Jee);Foo=r(hVr,"speech_to_text"),hVr.forEach(t),Too=r(R4e," \u2014 "),kR=n(R4e,"A",{href:!0});var pVr=s(kR);Moo=r(pVr,"Speech2TextTokenizer"),pVr.forEach(t),Eoo=r(R4e," (Speech2Text model)"),R4e.forEach(t),Coo=i(C),fh=n(C,"LI",{});var B4e=s(fh);Yee=n(B4e,"STRONG",{});var _Vr=s(Yee);woo=r(_Vr,"speech_to_text_2"),_Vr.forEach(t),Aoo=r(B4e," \u2014 "),SR=n(B4e,"A",{href:!0});var uVr=s(SR);yoo=r(uVr,"Speech2Text2Tokenizer"),uVr.forEach(t),Loo=r(B4e," (Speech2Text2 model)"),B4e.forEach(t),xoo=i(C),qs=n(C,"LI",{});var v7=s(qs);Kee=n(v7,"STRONG",{});var bVr=s(Kee);koo=r(bVr,"splinter"),bVr.forEach(t),Soo=r(v7," \u2014 "),RR=n(v7,"A",{href:!0});var vVr=s(RR);Roo=r(vVr,"SplinterTokenizer"),vVr.forEach(t),Boo=r(v7," or "),BR=n(v7,"A",{href:!0});var FVr=s(BR);Poo=r(FVr,"SplinterTokenizerFast"),FVr.forEach(t),$oo=r(v7," (Splinter model)"),v7.forEach(t),Ioo=i(C),Ns=n(C,"LI",{});var F7=s(Ns);Zee=n(F7,"STRONG",{});var TVr=s(Zee);qoo=r(TVr,"squeezebert"),TVr.forEach(t),Noo=r(F7," \u2014 "),PR=n(F7,"A",{href:!0});var MVr=s(PR);joo=r(MVr,"SqueezeBertTokenizer"),MVr.forEach(t),Doo=r(F7," or "),$R=n(F7,"A",{href:!0});var EVr=s($R);Goo=r(EVr,"SqueezeBertTokenizerFast"),EVr.forEach(t),Ooo=r(F7," (SqueezeBERT model)"),F7.forEach(t),Voo=i(C),js=n(C,"LI",{});var T7=s(js);eoe=n(T7,"STRONG",{});var CVr=s(eoe);Xoo=r(CVr,"t5"),CVr.forEach(t),zoo=r(T7," \u2014 "),IR=n(T7,"A",{href:!0});var wVr=s(IR);Qoo=r(wVr,"T5Tokenizer"),wVr.forEach(t),Woo=r(T7," or "),qR=n(T7,"A",{href:!0});var AVr=s(qR);Hoo=r(AVr,"T5TokenizerFast"),AVr.forEach(t),Uoo=r(T7," (T5 model)"),T7.forEach(t),Joo=i(C),mh=n(C,"LI",{});var P4e=s(mh);ooe=n(P4e,"STRONG",{});var yVr=s(ooe);Yoo=r(yVr,"tapas"),yVr.forEach(t),Koo=r(P4e," \u2014 "),NR=n(P4e,"A",{href:!0});var LVr=s(NR);Zoo=r(LVr,"TapasTokenizer"),LVr.forEach(t),ero=r(P4e," (TAPAS model)"),P4e.forEach(t),oro=i(C),gh=n(C,"LI",{});var $4e=s(gh);roe=n($4e,"STRONG",{});var xVr=s(roe);rro=r(xVr,"tapex"),xVr.forEach(t),tro=r($4e," \u2014 "),jR=n($4e,"A",{href:!0});var kVr=s(jR);aro=r(kVr,"TapexTokenizer"),kVr.forEach(t),nro=r($4e," (TAPEX model)"),$4e.forEach(t),sro=i(C),hh=n(C,"LI",{});var I4e=s(hh);toe=n(I4e,"STRONG",{});var SVr=s(toe);lro=r(SVr,"transfo-xl"),SVr.forEach(t),iro=r(I4e," \u2014 "),DR=n(I4e,"A",{href:!0});var RVr=s(DR);dro=r(RVr,"TransfoXLTokenizer"),RVr.forEach(t),cro=r(I4e," (Transformer-XL model)"),I4e.forEach(t),fro=i(C),ph=n(C,"LI",{});var q4e=s(ph);aoe=n(q4e,"STRONG",{});var BVr=s(aoe);mro=r(BVr,"wav2vec2"),BVr.forEach(t),gro=r(q4e," \u2014 "),GR=n(q4e,"A",{href:!0});var PVr=s(GR);hro=r(PVr,"Wav2Vec2CTCTokenizer"),PVr.forEach(t),pro=r(q4e," (Wav2Vec2 model)"),q4e.forEach(t),_ro=i(C),_h=n(C,"LI",{});var N4e=s(_h);noe=n(N4e,"STRONG",{});var $Vr=s(noe);uro=r($Vr,"wav2vec2_phoneme"),$Vr.forEach(t),bro=r(N4e," \u2014 "),OR=n(N4e,"A",{href:!0});var IVr=s(OR);vro=r(IVr,"Wav2Vec2PhonemeCTCTokenizer"),IVr.forEach(t),Fro=r(N4e," (Wav2Vec2Phoneme model)"),N4e.forEach(t),Tro=i(C),Ds=n(C,"LI",{});var M7=s(Ds);soe=n(M7,"STRONG",{});var qVr=s(soe);Mro=r(qVr,"xglm"),qVr.forEach(t),Ero=r(M7," \u2014 "),VR=n(M7,"A",{href:!0});var NVr=s(VR);Cro=r(NVr,"XGLMTokenizer"),NVr.forEach(t),wro=r(M7," or "),XR=n(M7,"A",{href:!0});var jVr=s(XR);Aro=r(jVr,"XGLMTokenizerFast"),jVr.forEach(t),yro=r(M7," (XGLM model)"),M7.forEach(t),Lro=i(C),uh=n(C,"LI",{});var j4e=s(uh);loe=n(j4e,"STRONG",{});var DVr=s(loe);xro=r(DVr,"xlm"),DVr.forEach(t),kro=r(j4e," \u2014 "),zR=n(j4e,"A",{href:!0});var GVr=s(zR);Sro=r(GVr,"XLMTokenizer"),GVr.forEach(t),Rro=r(j4e," (XLM model)"),j4e.forEach(t),Bro=i(C),bh=n(C,"LI",{});var D4e=s(bh);ioe=n(D4e,"STRONG",{});var OVr=s(ioe);Pro=r(OVr,"xlm-prophetnet"),OVr.forEach(t),$ro=r(D4e," \u2014 "),QR=n(D4e,"A",{href:!0});var VVr=s(QR);Iro=r(VVr,"XLMProphetNetTokenizer"),VVr.forEach(t),qro=r(D4e," (XLMProphetNet model)"),D4e.forEach(t),Nro=i(C),Gs=n(C,"LI",{});var E7=s(Gs);doe=n(E7,"STRONG",{});var XVr=s(doe);jro=r(XVr,"xlm-roberta"),XVr.forEach(t),Dro=r(E7," \u2014 "),WR=n(E7,"A",{href:!0});var zVr=s(WR);Gro=r(zVr,"XLMRobertaTokenizer"),zVr.forEach(t),Oro=r(E7," or "),HR=n(E7,"A",{href:!0});var QVr=s(HR);Vro=r(QVr,"XLMRobertaTokenizerFast"),QVr.forEach(t),Xro=r(E7," (XLM-RoBERTa model)"),E7.forEach(t),zro=i(C),Os=n(C,"LI",{});var C7=s(Os);coe=n(C7,"STRONG",{});var WVr=s(coe);Qro=r(WVr,"xlnet"),WVr.forEach(t),Wro=r(C7," \u2014 "),UR=n(C7,"A",{href:!0});var HVr=s(UR);Hro=r(HVr,"XLNetTokenizer"),HVr.forEach(t),Uro=r(C7," or "),JR=n(C7,"A",{href:!0});var UVr=s(JR);Jro=r(UVr,"XLNetTokenizerFast"),UVr.forEach(t),Yro=r(C7," (XLNet model)"),C7.forEach(t),C.forEach(t),Kro=i(ha),foe=n(ha,"P",{});var JVr=s(foe);Zro=r(JVr,"Examples:"),JVr.forEach(t),eto=i(ha),m(Y3.$$.fragment,ha),ha.forEach(t),oto=i(Ws),vh=n(Ws,"DIV",{class:!0});var g$e=s(vh);m(K3.$$.fragment,g$e),rto=i(g$e),moe=n(g$e,"P",{});var YVr=s(moe);tto=r(YVr,"Register a new tokenizer in this mapping."),YVr.forEach(t),g$e.forEach(t),Ws.forEach(t),dBe=i(c),Yi=n(c,"H2",{class:!0});var h$e=s(Yi);Fh=n(h$e,"A",{id:!0,class:!0,href:!0});var KVr=s(Fh);goe=n(KVr,"SPAN",{});var ZVr=s(goe);m(Z3.$$.fragment,ZVr),ZVr.forEach(t),KVr.forEach(t),ato=i(h$e),hoe=n(h$e,"SPAN",{});var eXr=s(hoe);nto=r(eXr,"AutoFeatureExtractor"),eXr.forEach(t),h$e.forEach(t),cBe=i(c),Ho=n(c,"DIV",{class:!0});var Hs=s(Ho);m(eC.$$.fragment,Hs),sto=i(Hs),oC=n(Hs,"P",{});var p$e=s(oC);lto=r(p$e,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),YR=n(p$e,"A",{href:!0});var oXr=s(YR);ito=r(oXr,"AutoFeatureExtractor.from_pretrained()"),oXr.forEach(t),dto=r(p$e," class method."),p$e.forEach(t),cto=i(Hs),rC=n(Hs,"P",{});var _$e=s(rC);fto=r(_$e,"This class cannot be instantiated directly using "),poe=n(_$e,"CODE",{});var rXr=s(poe);mto=r(rXr,"__init__()"),rXr.forEach(t),gto=r(_$e," (throws an error)."),_$e.forEach(t),hto=i(Hs),$e=n(Hs,"DIV",{class:!0});var Nt=s($e);m(tC.$$.fragment,Nt),pto=i(Nt),_oe=n(Nt,"P",{});var tXr=s(_oe);_to=r(tXr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),tXr.forEach(t),uto=i(Nt),Va=n(Nt,"P",{});var $E=s(Va);bto=r($E,"The feature extractor class to instantiate is selected based on the "),uoe=n($E,"CODE",{});var aXr=s(uoe);vto=r(aXr,"model_type"),aXr.forEach(t),Fto=r($E,` property of the config object
(either passed as an argument or loaded from `),boe=n($E,"CODE",{});var nXr=s(boe);Tto=r(nXr,"pretrained_model_name_or_path"),nXr.forEach(t),Mto=r($E,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),voe=n($E,"CODE",{});var sXr=s(voe);Eto=r(sXr,"pretrained_model_name_or_path"),sXr.forEach(t),Cto=r($E,":"),$E.forEach(t),wto=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);Th=n(ae,"LI",{});var G4e=s(Th);Foe=n(G4e,"STRONG",{});var lXr=s(Foe);Ato=r(lXr,"beit"),lXr.forEach(t),yto=r(G4e," \u2014 "),KR=n(G4e,"A",{href:!0});var iXr=s(KR);Lto=r(iXr,"BeitFeatureExtractor"),iXr.forEach(t),xto=r(G4e," (BEiT model)"),G4e.forEach(t),kto=i(ae),Mh=n(ae,"LI",{});var O4e=s(Mh);Toe=n(O4e,"STRONG",{});var dXr=s(Toe);Sto=r(dXr,"clip"),dXr.forEach(t),Rto=r(O4e," \u2014 "),ZR=n(O4e,"A",{href:!0});var cXr=s(ZR);Bto=r(cXr,"CLIPFeatureExtractor"),cXr.forEach(t),Pto=r(O4e," (CLIP model)"),O4e.forEach(t),$to=i(ae),Eh=n(ae,"LI",{});var V4e=s(Eh);Moe=n(V4e,"STRONG",{});var fXr=s(Moe);Ito=r(fXr,"convnext"),fXr.forEach(t),qto=r(V4e," \u2014 "),eB=n(V4e,"A",{href:!0});var mXr=s(eB);Nto=r(mXr,"ConvNextFeatureExtractor"),mXr.forEach(t),jto=r(V4e," (ConvNext model)"),V4e.forEach(t),Dto=i(ae),Ch=n(ae,"LI",{});var X4e=s(Ch);Eoe=n(X4e,"STRONG",{});var gXr=s(Eoe);Gto=r(gXr,"deit"),gXr.forEach(t),Oto=r(X4e," \u2014 "),oB=n(X4e,"A",{href:!0});var hXr=s(oB);Vto=r(hXr,"DeiTFeatureExtractor"),hXr.forEach(t),Xto=r(X4e," (DeiT model)"),X4e.forEach(t),zto=i(ae),wh=n(ae,"LI",{});var z4e=s(wh);Coe=n(z4e,"STRONG",{});var pXr=s(Coe);Qto=r(pXr,"detr"),pXr.forEach(t),Wto=r(z4e," \u2014 "),rB=n(z4e,"A",{href:!0});var _Xr=s(rB);Hto=r(_Xr,"DetrFeatureExtractor"),_Xr.forEach(t),Uto=r(z4e," (DETR model)"),z4e.forEach(t),Jto=i(ae),Ah=n(ae,"LI",{});var Q4e=s(Ah);woe=n(Q4e,"STRONG",{});var uXr=s(woe);Yto=r(uXr,"hubert"),uXr.forEach(t),Kto=r(Q4e," \u2014 "),tB=n(Q4e,"A",{href:!0});var bXr=s(tB);Zto=r(bXr,"Wav2Vec2FeatureExtractor"),bXr.forEach(t),eao=r(Q4e," (Hubert model)"),Q4e.forEach(t),oao=i(ae),yh=n(ae,"LI",{});var W4e=s(yh);Aoe=n(W4e,"STRONG",{});var vXr=s(Aoe);rao=r(vXr,"layoutlmv2"),vXr.forEach(t),tao=r(W4e," \u2014 "),aB=n(W4e,"A",{href:!0});var FXr=s(aB);aao=r(FXr,"LayoutLMv2FeatureExtractor"),FXr.forEach(t),nao=r(W4e," (LayoutLMv2 model)"),W4e.forEach(t),sao=i(ae),Lh=n(ae,"LI",{});var H4e=s(Lh);yoe=n(H4e,"STRONG",{});var TXr=s(yoe);lao=r(TXr,"maskformer"),TXr.forEach(t),iao=r(H4e," \u2014 "),nB=n(H4e,"A",{href:!0});var MXr=s(nB);dao=r(MXr,"MaskFormerFeatureExtractor"),MXr.forEach(t),cao=r(H4e," (MaskFormer model)"),H4e.forEach(t),fao=i(ae),xh=n(ae,"LI",{});var U4e=s(xh);Loe=n(U4e,"STRONG",{});var EXr=s(Loe);mao=r(EXr,"perceiver"),EXr.forEach(t),gao=r(U4e," \u2014 "),sB=n(U4e,"A",{href:!0});var CXr=s(sB);hao=r(CXr,"PerceiverFeatureExtractor"),CXr.forEach(t),pao=r(U4e," (Perceiver model)"),U4e.forEach(t),_ao=i(ae),kh=n(ae,"LI",{});var J4e=s(kh);xoe=n(J4e,"STRONG",{});var wXr=s(xoe);uao=r(wXr,"poolformer"),wXr.forEach(t),bao=r(J4e," \u2014 "),lB=n(J4e,"A",{href:!0});var AXr=s(lB);vao=r(AXr,"PoolFormerFeatureExtractor"),AXr.forEach(t),Fao=r(J4e," (PoolFormer model)"),J4e.forEach(t),Tao=i(ae),Sh=n(ae,"LI",{});var Y4e=s(Sh);koe=n(Y4e,"STRONG",{});var yXr=s(koe);Mao=r(yXr,"regnet"),yXr.forEach(t),Eao=r(Y4e," \u2014 "),iB=n(Y4e,"A",{href:!0});var LXr=s(iB);Cao=r(LXr,"ConvNextFeatureExtractor"),LXr.forEach(t),wao=r(Y4e," (RegNet model)"),Y4e.forEach(t),Aao=i(ae),Rh=n(ae,"LI",{});var K4e=s(Rh);Soe=n(K4e,"STRONG",{});var xXr=s(Soe);yao=r(xXr,"resnet"),xXr.forEach(t),Lao=r(K4e," \u2014 "),dB=n(K4e,"A",{href:!0});var kXr=s(dB);xao=r(kXr,"ConvNextFeatureExtractor"),kXr.forEach(t),kao=r(K4e," (ResNet model)"),K4e.forEach(t),Sao=i(ae),Bh=n(ae,"LI",{});var Z4e=s(Bh);Roe=n(Z4e,"STRONG",{});var SXr=s(Roe);Rao=r(SXr,"segformer"),SXr.forEach(t),Bao=r(Z4e," \u2014 "),cB=n(Z4e,"A",{href:!0});var RXr=s(cB);Pao=r(RXr,"SegformerFeatureExtractor"),RXr.forEach(t),$ao=r(Z4e," (SegFormer model)"),Z4e.forEach(t),Iao=i(ae),Ph=n(ae,"LI",{});var eEe=s(Ph);Boe=n(eEe,"STRONG",{});var BXr=s(Boe);qao=r(BXr,"speech_to_text"),BXr.forEach(t),Nao=r(eEe," \u2014 "),fB=n(eEe,"A",{href:!0});var PXr=s(fB);jao=r(PXr,"Speech2TextFeatureExtractor"),PXr.forEach(t),Dao=r(eEe," (Speech2Text model)"),eEe.forEach(t),Gao=i(ae),$h=n(ae,"LI",{});var oEe=s($h);Poe=n(oEe,"STRONG",{});var $Xr=s(Poe);Oao=r($Xr,"swin"),$Xr.forEach(t),Vao=r(oEe," \u2014 "),mB=n(oEe,"A",{href:!0});var IXr=s(mB);Xao=r(IXr,"ViTFeatureExtractor"),IXr.forEach(t),zao=r(oEe," (Swin model)"),oEe.forEach(t),Qao=i(ae),Ih=n(ae,"LI",{});var rEe=s(Ih);$oe=n(rEe,"STRONG",{});var qXr=s($oe);Wao=r(qXr,"van"),qXr.forEach(t),Hao=r(rEe," \u2014 "),gB=n(rEe,"A",{href:!0});var NXr=s(gB);Uao=r(NXr,"ConvNextFeatureExtractor"),NXr.forEach(t),Jao=r(rEe," (VAN model)"),rEe.forEach(t),Yao=i(ae),qh=n(ae,"LI",{});var tEe=s(qh);Ioe=n(tEe,"STRONG",{});var jXr=s(Ioe);Kao=r(jXr,"vit"),jXr.forEach(t),Zao=r(tEe," \u2014 "),hB=n(tEe,"A",{href:!0});var DXr=s(hB);eno=r(DXr,"ViTFeatureExtractor"),DXr.forEach(t),ono=r(tEe," (ViT model)"),tEe.forEach(t),rno=i(ae),Nh=n(ae,"LI",{});var aEe=s(Nh);qoe=n(aEe,"STRONG",{});var GXr=s(qoe);tno=r(GXr,"vit_mae"),GXr.forEach(t),ano=r(aEe," \u2014 "),pB=n(aEe,"A",{href:!0});var OXr=s(pB);nno=r(OXr,"ViTFeatureExtractor"),OXr.forEach(t),sno=r(aEe," (ViTMAE model)"),aEe.forEach(t),lno=i(ae),jh=n(ae,"LI",{});var nEe=s(jh);Noe=n(nEe,"STRONG",{});var VXr=s(Noe);ino=r(VXr,"wav2vec2"),VXr.forEach(t),dno=r(nEe," \u2014 "),_B=n(nEe,"A",{href:!0});var XXr=s(_B);cno=r(XXr,"Wav2Vec2FeatureExtractor"),XXr.forEach(t),fno=r(nEe," (Wav2Vec2 model)"),nEe.forEach(t),ae.forEach(t),mno=i(Nt),m(Dh.$$.fragment,Nt),gno=i(Nt),joe=n(Nt,"P",{});var zXr=s(joe);hno=r(zXr,"Examples:"),zXr.forEach(t),pno=i(Nt),m(aC.$$.fragment,Nt),Nt.forEach(t),_no=i(Hs),Gh=n(Hs,"DIV",{class:!0});var u$e=s(Gh);m(nC.$$.fragment,u$e),uno=i(u$e),Doe=n(u$e,"P",{});var QXr=s(Doe);bno=r(QXr,"Register a new feature extractor for this class."),QXr.forEach(t),u$e.forEach(t),Hs.forEach(t),fBe=i(c),Ki=n(c,"H2",{class:!0});var b$e=s(Ki);Oh=n(b$e,"A",{id:!0,class:!0,href:!0});var WXr=s(Oh);Goe=n(WXr,"SPAN",{});var HXr=s(Goe);m(sC.$$.fragment,HXr),HXr.forEach(t),WXr.forEach(t),vno=i(b$e),Ooe=n(b$e,"SPAN",{});var UXr=s(Ooe);Fno=r(UXr,"AutoProcessor"),UXr.forEach(t),b$e.forEach(t),mBe=i(c),Uo=n(c,"DIV",{class:!0});var Us=s(Uo);m(lC.$$.fragment,Us),Tno=i(Us),iC=n(Us,"P",{});var v$e=s(iC);Mno=r(v$e,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uB=n(v$e,"A",{href:!0});var JXr=s(uB);Eno=r(JXr,"AutoProcessor.from_pretrained()"),JXr.forEach(t),Cno=r(v$e," class method."),v$e.forEach(t),wno=i(Us),dC=n(Us,"P",{});var F$e=s(dC);Ano=r(F$e,"This class cannot be instantiated directly using "),Voe=n(F$e,"CODE",{});var YXr=s(Voe);yno=r(YXr,"__init__()"),YXr.forEach(t),Lno=r(F$e," (throws an error)."),F$e.forEach(t),xno=i(Us),Ie=n(Us,"DIV",{class:!0});var jt=s(Ie);m(cC.$$.fragment,jt),kno=i(jt),Xoe=n(jt,"P",{});var KXr=s(Xoe);Sno=r(KXr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),KXr.forEach(t),Rno=i(jt),Zi=n(jt,"P",{});var $U=s(Zi);Bno=r($U,"The processor class to instantiate is selected based on the "),zoe=n($U,"CODE",{});var ZXr=s(zoe);Pno=r(ZXr,"model_type"),ZXr.forEach(t),$no=r($U,` property of the config object (either
passed as an argument or loaded from `),Qoe=n($U,"CODE",{});var ezr=s(Qoe);Ino=r(ezr,"pretrained_model_name_or_path"),ezr.forEach(t),qno=r($U," if possible):"),$U.forEach(t),Nno=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Vh=n(jo,"LI",{});var sEe=s(Vh);Woe=n(sEe,"STRONG",{});var ozr=s(Woe);jno=r(ozr,"clip"),ozr.forEach(t),Dno=r(sEe," \u2014 "),bB=n(sEe,"A",{href:!0});var rzr=s(bB);Gno=r(rzr,"CLIPProcessor"),rzr.forEach(t),Ono=r(sEe," (CLIP model)"),sEe.forEach(t),Vno=i(jo),Xh=n(jo,"LI",{});var lEe=s(Xh);Hoe=n(lEe,"STRONG",{});var tzr=s(Hoe);Xno=r(tzr,"layoutlmv2"),tzr.forEach(t),zno=r(lEe," \u2014 "),vB=n(lEe,"A",{href:!0});var azr=s(vB);Qno=r(azr,"LayoutLMv2Processor"),azr.forEach(t),Wno=r(lEe," (LayoutLMv2 model)"),lEe.forEach(t),Hno=i(jo),zh=n(jo,"LI",{});var iEe=s(zh);Uoe=n(iEe,"STRONG",{});var nzr=s(Uoe);Uno=r(nzr,"layoutxlm"),nzr.forEach(t),Jno=r(iEe," \u2014 "),FB=n(iEe,"A",{href:!0});var szr=s(FB);Yno=r(szr,"LayoutXLMProcessor"),szr.forEach(t),Kno=r(iEe," (LayoutXLM model)"),iEe.forEach(t),Zno=i(jo),Qh=n(jo,"LI",{});var dEe=s(Qh);Joe=n(dEe,"STRONG",{});var lzr=s(Joe);eso=r(lzr,"speech_to_text"),lzr.forEach(t),oso=r(dEe," \u2014 "),TB=n(dEe,"A",{href:!0});var izr=s(TB);rso=r(izr,"Speech2TextProcessor"),izr.forEach(t),tso=r(dEe," (Speech2Text model)"),dEe.forEach(t),aso=i(jo),Wh=n(jo,"LI",{});var cEe=s(Wh);Yoe=n(cEe,"STRONG",{});var dzr=s(Yoe);nso=r(dzr,"speech_to_text_2"),dzr.forEach(t),sso=r(cEe," \u2014 "),MB=n(cEe,"A",{href:!0});var czr=s(MB);lso=r(czr,"Speech2Text2Processor"),czr.forEach(t),iso=r(cEe," (Speech2Text2 model)"),cEe.forEach(t),dso=i(jo),Hh=n(jo,"LI",{});var fEe=s(Hh);Koe=n(fEe,"STRONG",{});var fzr=s(Koe);cso=r(fzr,"trocr"),fzr.forEach(t),fso=r(fEe," \u2014 "),EB=n(fEe,"A",{href:!0});var mzr=s(EB);mso=r(mzr,"TrOCRProcessor"),mzr.forEach(t),gso=r(fEe," (TrOCR model)"),fEe.forEach(t),hso=i(jo),Uh=n(jo,"LI",{});var mEe=s(Uh);Zoe=n(mEe,"STRONG",{});var gzr=s(Zoe);pso=r(gzr,"vision-text-dual-encoder"),gzr.forEach(t),_so=r(mEe," \u2014 "),CB=n(mEe,"A",{href:!0});var hzr=s(CB);uso=r(hzr,"VisionTextDualEncoderProcessor"),hzr.forEach(t),bso=r(mEe," (VisionTextDualEncoder model)"),mEe.forEach(t),vso=i(jo),Jh=n(jo,"LI",{});var gEe=s(Jh);ere=n(gEe,"STRONG",{});var pzr=s(ere);Fso=r(pzr,"wav2vec2"),pzr.forEach(t),Tso=r(gEe," \u2014 "),wB=n(gEe,"A",{href:!0});var _zr=s(wB);Mso=r(_zr,"Wav2Vec2Processor"),_zr.forEach(t),Eso=r(gEe," (Wav2Vec2 model)"),gEe.forEach(t),jo.forEach(t),Cso=i(jt),m(Yh.$$.fragment,jt),wso=i(jt),ore=n(jt,"P",{});var uzr=s(ore);Aso=r(uzr,"Examples:"),uzr.forEach(t),yso=i(jt),m(fC.$$.fragment,jt),jt.forEach(t),Lso=i(Us),Kh=n(Us,"DIV",{class:!0});var T$e=s(Kh);m(mC.$$.fragment,T$e),xso=i(T$e),rre=n(T$e,"P",{});var bzr=s(rre);kso=r(bzr,"Register a new processor for this class."),bzr.forEach(t),T$e.forEach(t),Us.forEach(t),gBe=i(c),ed=n(c,"H2",{class:!0});var M$e=s(ed);Zh=n(M$e,"A",{id:!0,class:!0,href:!0});var vzr=s(Zh);tre=n(vzr,"SPAN",{});var Fzr=s(tre);m(gC.$$.fragment,Fzr),Fzr.forEach(t),vzr.forEach(t),Sso=i(M$e),are=n(M$e,"SPAN",{});var Tzr=s(are);Rso=r(Tzr,"AutoModel"),Tzr.forEach(t),M$e.forEach(t),hBe=i(c),Jo=n(c,"DIV",{class:!0});var Js=s(Jo);m(hC.$$.fragment,Js),Bso=i(Js),od=n(Js,"P",{});var IU=s(od);Pso=r(IU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AB=n(IU,"A",{href:!0});var Mzr=s(AB);$so=r(Mzr,"from_pretrained()"),Mzr.forEach(t),Iso=r(IU," class method or the "),yB=n(IU,"A",{href:!0});var Ezr=s(yB);qso=r(Ezr,"from_config()"),Ezr.forEach(t),Nso=r(IU,` class
method.`),IU.forEach(t),jso=i(Js),pC=n(Js,"P",{});var E$e=s(pC);Dso=r(E$e,"This class cannot be instantiated directly using "),nre=n(E$e,"CODE",{});var Czr=s(nre);Gso=r(Czr,"__init__()"),Czr.forEach(t),Oso=r(E$e," (throws an error)."),E$e.forEach(t),Vso=i(Js),Xr=n(Js,"DIV",{class:!0});var Ys=s(Xr);m(_C.$$.fragment,Ys),Xso=i(Ys),sre=n(Ys,"P",{});var wzr=s(sre);zso=r(wzr,"Instantiates one of the base model classes of the library from a configuration."),wzr.forEach(t),Qso=i(Ys),rd=n(Ys,"P",{});var qU=s(rd);Wso=r(qU,`Note:
Loading a model from its configuration file does `),lre=n(qU,"STRONG",{});var Azr=s(lre);Hso=r(Azr,"not"),Azr.forEach(t),Uso=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),LB=n(qU,"A",{href:!0});var yzr=s(LB);Jso=r(yzr,"from_pretrained()"),yzr.forEach(t),Yso=r(qU," to load the model weights."),qU.forEach(t),Kso=i(Ys),ire=n(Ys,"P",{});var Lzr=s(ire);Zso=r(Lzr,"Examples:"),Lzr.forEach(t),elo=i(Ys),m(uC.$$.fragment,Ys),Ys.forEach(t),olo=i(Js),qe=n(Js,"DIV",{class:!0});var Dt=s(qe);m(bC.$$.fragment,Dt),rlo=i(Dt),dre=n(Dt,"P",{});var xzr=s(dre);tlo=r(xzr,"Instantiate one of the base model classes of the library from a pretrained model."),xzr.forEach(t),alo=i(Dt),Xa=n(Dt,"P",{});var IE=s(Xa);nlo=r(IE,"The model class to instantiate is selected based on the "),cre=n(IE,"CODE",{});var kzr=s(cre);slo=r(kzr,"model_type"),kzr.forEach(t),llo=r(IE,` property of the config object (either
passed as an argument or loaded from `),fre=n(IE,"CODE",{});var Szr=s(fre);ilo=r(Szr,"pretrained_model_name_or_path"),Szr.forEach(t),dlo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mre=n(IE,"CODE",{});var Rzr=s(mre);clo=r(Rzr,"pretrained_model_name_or_path"),Rzr.forEach(t),flo=r(IE,":"),IE.forEach(t),mlo=i(Dt),T=n(Dt,"UL",{});var M=s(T);ep=n(M,"LI",{});var hEe=s(ep);gre=n(hEe,"STRONG",{});var Bzr=s(gre);glo=r(Bzr,"albert"),Bzr.forEach(t),hlo=r(hEe," \u2014 "),xB=n(hEe,"A",{href:!0});var Pzr=s(xB);plo=r(Pzr,"AlbertModel"),Pzr.forEach(t),_lo=r(hEe," (ALBERT model)"),hEe.forEach(t),ulo=i(M),op=n(M,"LI",{});var pEe=s(op);hre=n(pEe,"STRONG",{});var $zr=s(hre);blo=r($zr,"bart"),$zr.forEach(t),vlo=r(pEe," \u2014 "),kB=n(pEe,"A",{href:!0});var Izr=s(kB);Flo=r(Izr,"BartModel"),Izr.forEach(t),Tlo=r(pEe," (BART model)"),pEe.forEach(t),Mlo=i(M),rp=n(M,"LI",{});var _Ee=s(rp);pre=n(_Ee,"STRONG",{});var qzr=s(pre);Elo=r(qzr,"beit"),qzr.forEach(t),Clo=r(_Ee," \u2014 "),SB=n(_Ee,"A",{href:!0});var Nzr=s(SB);wlo=r(Nzr,"BeitModel"),Nzr.forEach(t),Alo=r(_Ee," (BEiT model)"),_Ee.forEach(t),ylo=i(M),tp=n(M,"LI",{});var uEe=s(tp);_re=n(uEe,"STRONG",{});var jzr=s(_re);Llo=r(jzr,"bert"),jzr.forEach(t),xlo=r(uEe," \u2014 "),RB=n(uEe,"A",{href:!0});var Dzr=s(RB);klo=r(Dzr,"BertModel"),Dzr.forEach(t),Slo=r(uEe," (BERT model)"),uEe.forEach(t),Rlo=i(M),ap=n(M,"LI",{});var bEe=s(ap);ure=n(bEe,"STRONG",{});var Gzr=s(ure);Blo=r(Gzr,"bert-generation"),Gzr.forEach(t),Plo=r(bEe," \u2014 "),BB=n(bEe,"A",{href:!0});var Ozr=s(BB);$lo=r(Ozr,"BertGenerationEncoder"),Ozr.forEach(t),Ilo=r(bEe," (Bert Generation model)"),bEe.forEach(t),qlo=i(M),np=n(M,"LI",{});var vEe=s(np);bre=n(vEe,"STRONG",{});var Vzr=s(bre);Nlo=r(Vzr,"big_bird"),Vzr.forEach(t),jlo=r(vEe," \u2014 "),PB=n(vEe,"A",{href:!0});var Xzr=s(PB);Dlo=r(Xzr,"BigBirdModel"),Xzr.forEach(t),Glo=r(vEe," (BigBird model)"),vEe.forEach(t),Olo=i(M),sp=n(M,"LI",{});var FEe=s(sp);vre=n(FEe,"STRONG",{});var zzr=s(vre);Vlo=r(zzr,"bigbird_pegasus"),zzr.forEach(t),Xlo=r(FEe," \u2014 "),$B=n(FEe,"A",{href:!0});var Qzr=s($B);zlo=r(Qzr,"BigBirdPegasusModel"),Qzr.forEach(t),Qlo=r(FEe," (BigBirdPegasus model)"),FEe.forEach(t),Wlo=i(M),lp=n(M,"LI",{});var TEe=s(lp);Fre=n(TEe,"STRONG",{});var Wzr=s(Fre);Hlo=r(Wzr,"blenderbot"),Wzr.forEach(t),Ulo=r(TEe," \u2014 "),IB=n(TEe,"A",{href:!0});var Hzr=s(IB);Jlo=r(Hzr,"BlenderbotModel"),Hzr.forEach(t),Ylo=r(TEe," (Blenderbot model)"),TEe.forEach(t),Klo=i(M),ip=n(M,"LI",{});var MEe=s(ip);Tre=n(MEe,"STRONG",{});var Uzr=s(Tre);Zlo=r(Uzr,"blenderbot-small"),Uzr.forEach(t),eio=r(MEe," \u2014 "),qB=n(MEe,"A",{href:!0});var Jzr=s(qB);oio=r(Jzr,"BlenderbotSmallModel"),Jzr.forEach(t),rio=r(MEe," (BlenderbotSmall model)"),MEe.forEach(t),tio=i(M),dp=n(M,"LI",{});var EEe=s(dp);Mre=n(EEe,"STRONG",{});var Yzr=s(Mre);aio=r(Yzr,"camembert"),Yzr.forEach(t),nio=r(EEe," \u2014 "),NB=n(EEe,"A",{href:!0});var Kzr=s(NB);sio=r(Kzr,"CamembertModel"),Kzr.forEach(t),lio=r(EEe," (CamemBERT model)"),EEe.forEach(t),iio=i(M),cp=n(M,"LI",{});var CEe=s(cp);Ere=n(CEe,"STRONG",{});var Zzr=s(Ere);dio=r(Zzr,"canine"),Zzr.forEach(t),cio=r(CEe," \u2014 "),jB=n(CEe,"A",{href:!0});var eQr=s(jB);fio=r(eQr,"CanineModel"),eQr.forEach(t),mio=r(CEe," (Canine model)"),CEe.forEach(t),gio=i(M),fp=n(M,"LI",{});var wEe=s(fp);Cre=n(wEe,"STRONG",{});var oQr=s(Cre);hio=r(oQr,"clip"),oQr.forEach(t),pio=r(wEe," \u2014 "),DB=n(wEe,"A",{href:!0});var rQr=s(DB);_io=r(rQr,"CLIPModel"),rQr.forEach(t),uio=r(wEe," (CLIP model)"),wEe.forEach(t),bio=i(M),mp=n(M,"LI",{});var AEe=s(mp);wre=n(AEe,"STRONG",{});var tQr=s(wre);vio=r(tQr,"convbert"),tQr.forEach(t),Fio=r(AEe," \u2014 "),GB=n(AEe,"A",{href:!0});var aQr=s(GB);Tio=r(aQr,"ConvBertModel"),aQr.forEach(t),Mio=r(AEe," (ConvBERT model)"),AEe.forEach(t),Eio=i(M),gp=n(M,"LI",{});var yEe=s(gp);Are=n(yEe,"STRONG",{});var nQr=s(Are);Cio=r(nQr,"convnext"),nQr.forEach(t),wio=r(yEe," \u2014 "),OB=n(yEe,"A",{href:!0});var sQr=s(OB);Aio=r(sQr,"ConvNextModel"),sQr.forEach(t),yio=r(yEe," (ConvNext model)"),yEe.forEach(t),Lio=i(M),hp=n(M,"LI",{});var LEe=s(hp);yre=n(LEe,"STRONG",{});var lQr=s(yre);xio=r(lQr,"ctrl"),lQr.forEach(t),kio=r(LEe," \u2014 "),VB=n(LEe,"A",{href:!0});var iQr=s(VB);Sio=r(iQr,"CTRLModel"),iQr.forEach(t),Rio=r(LEe," (CTRL model)"),LEe.forEach(t),Bio=i(M),pp=n(M,"LI",{});var xEe=s(pp);Lre=n(xEe,"STRONG",{});var dQr=s(Lre);Pio=r(dQr,"data2vec-audio"),dQr.forEach(t),$io=r(xEe," \u2014 "),XB=n(xEe,"A",{href:!0});var cQr=s(XB);Iio=r(cQr,"Data2VecAudioModel"),cQr.forEach(t),qio=r(xEe," (Data2VecAudio model)"),xEe.forEach(t),Nio=i(M),_p=n(M,"LI",{});var kEe=s(_p);xre=n(kEe,"STRONG",{});var fQr=s(xre);jio=r(fQr,"data2vec-text"),fQr.forEach(t),Dio=r(kEe," \u2014 "),zB=n(kEe,"A",{href:!0});var mQr=s(zB);Gio=r(mQr,"Data2VecTextModel"),mQr.forEach(t),Oio=r(kEe," (Data2VecText model)"),kEe.forEach(t),Vio=i(M),up=n(M,"LI",{});var SEe=s(up);kre=n(SEe,"STRONG",{});var gQr=s(kre);Xio=r(gQr,"data2vec-vision"),gQr.forEach(t),zio=r(SEe," \u2014 "),QB=n(SEe,"A",{href:!0});var hQr=s(QB);Qio=r(hQr,"Data2VecVisionModel"),hQr.forEach(t),Wio=r(SEe," (Data2VecVision model)"),SEe.forEach(t),Hio=i(M),bp=n(M,"LI",{});var REe=s(bp);Sre=n(REe,"STRONG",{});var pQr=s(Sre);Uio=r(pQr,"deberta"),pQr.forEach(t),Jio=r(REe," \u2014 "),WB=n(REe,"A",{href:!0});var _Qr=s(WB);Yio=r(_Qr,"DebertaModel"),_Qr.forEach(t),Kio=r(REe," (DeBERTa model)"),REe.forEach(t),Zio=i(M),vp=n(M,"LI",{});var BEe=s(vp);Rre=n(BEe,"STRONG",{});var uQr=s(Rre);edo=r(uQr,"deberta-v2"),uQr.forEach(t),odo=r(BEe," \u2014 "),HB=n(BEe,"A",{href:!0});var bQr=s(HB);rdo=r(bQr,"DebertaV2Model"),bQr.forEach(t),tdo=r(BEe," (DeBERTa-v2 model)"),BEe.forEach(t),ado=i(M),Fp=n(M,"LI",{});var PEe=s(Fp);Bre=n(PEe,"STRONG",{});var vQr=s(Bre);ndo=r(vQr,"decision_transformer"),vQr.forEach(t),sdo=r(PEe," \u2014 "),UB=n(PEe,"A",{href:!0});var FQr=s(UB);ldo=r(FQr,"DecisionTransformerModel"),FQr.forEach(t),ido=r(PEe," (Decision Transformer model)"),PEe.forEach(t),ddo=i(M),Tp=n(M,"LI",{});var $Ee=s(Tp);Pre=n($Ee,"STRONG",{});var TQr=s(Pre);cdo=r(TQr,"deit"),TQr.forEach(t),fdo=r($Ee," \u2014 "),JB=n($Ee,"A",{href:!0});var MQr=s(JB);mdo=r(MQr,"DeiTModel"),MQr.forEach(t),gdo=r($Ee," (DeiT model)"),$Ee.forEach(t),hdo=i(M),Mp=n(M,"LI",{});var IEe=s(Mp);$re=n(IEe,"STRONG",{});var EQr=s($re);pdo=r(EQr,"detr"),EQr.forEach(t),_do=r(IEe," \u2014 "),YB=n(IEe,"A",{href:!0});var CQr=s(YB);udo=r(CQr,"DetrModel"),CQr.forEach(t),bdo=r(IEe," (DETR model)"),IEe.forEach(t),vdo=i(M),Ep=n(M,"LI",{});var qEe=s(Ep);Ire=n(qEe,"STRONG",{});var wQr=s(Ire);Fdo=r(wQr,"distilbert"),wQr.forEach(t),Tdo=r(qEe," \u2014 "),KB=n(qEe,"A",{href:!0});var AQr=s(KB);Mdo=r(AQr,"DistilBertModel"),AQr.forEach(t),Edo=r(qEe," (DistilBERT model)"),qEe.forEach(t),Cdo=i(M),Cp=n(M,"LI",{});var NEe=s(Cp);qre=n(NEe,"STRONG",{});var yQr=s(qre);wdo=r(yQr,"dpr"),yQr.forEach(t),Ado=r(NEe," \u2014 "),ZB=n(NEe,"A",{href:!0});var LQr=s(ZB);ydo=r(LQr,"DPRQuestionEncoder"),LQr.forEach(t),Ldo=r(NEe," (DPR model)"),NEe.forEach(t),xdo=i(M),wp=n(M,"LI",{});var jEe=s(wp);Nre=n(jEe,"STRONG",{});var xQr=s(Nre);kdo=r(xQr,"dpt"),xQr.forEach(t),Sdo=r(jEe," \u2014 "),eP=n(jEe,"A",{href:!0});var kQr=s(eP);Rdo=r(kQr,"DPTModel"),kQr.forEach(t),Bdo=r(jEe," (DPT model)"),jEe.forEach(t),Pdo=i(M),Ap=n(M,"LI",{});var DEe=s(Ap);jre=n(DEe,"STRONG",{});var SQr=s(jre);$do=r(SQr,"electra"),SQr.forEach(t),Ido=r(DEe," \u2014 "),oP=n(DEe,"A",{href:!0});var RQr=s(oP);qdo=r(RQr,"ElectraModel"),RQr.forEach(t),Ndo=r(DEe," (ELECTRA model)"),DEe.forEach(t),jdo=i(M),yp=n(M,"LI",{});var GEe=s(yp);Dre=n(GEe,"STRONG",{});var BQr=s(Dre);Ddo=r(BQr,"flaubert"),BQr.forEach(t),Gdo=r(GEe," \u2014 "),rP=n(GEe,"A",{href:!0});var PQr=s(rP);Odo=r(PQr,"FlaubertModel"),PQr.forEach(t),Vdo=r(GEe," (FlauBERT model)"),GEe.forEach(t),Xdo=i(M),Lp=n(M,"LI",{});var OEe=s(Lp);Gre=n(OEe,"STRONG",{});var $Qr=s(Gre);zdo=r($Qr,"fnet"),$Qr.forEach(t),Qdo=r(OEe," \u2014 "),tP=n(OEe,"A",{href:!0});var IQr=s(tP);Wdo=r(IQr,"FNetModel"),IQr.forEach(t),Hdo=r(OEe," (FNet model)"),OEe.forEach(t),Udo=i(M),xp=n(M,"LI",{});var VEe=s(xp);Ore=n(VEe,"STRONG",{});var qQr=s(Ore);Jdo=r(qQr,"fsmt"),qQr.forEach(t),Ydo=r(VEe," \u2014 "),aP=n(VEe,"A",{href:!0});var NQr=s(aP);Kdo=r(NQr,"FSMTModel"),NQr.forEach(t),Zdo=r(VEe," (FairSeq Machine-Translation model)"),VEe.forEach(t),eco=i(M),Vs=n(M,"LI",{});var w7=s(Vs);Vre=n(w7,"STRONG",{});var jQr=s(Vre);oco=r(jQr,"funnel"),jQr.forEach(t),rco=r(w7," \u2014 "),nP=n(w7,"A",{href:!0});var DQr=s(nP);tco=r(DQr,"FunnelModel"),DQr.forEach(t),aco=r(w7," or "),sP=n(w7,"A",{href:!0});var GQr=s(sP);nco=r(GQr,"FunnelBaseModel"),GQr.forEach(t),sco=r(w7," (Funnel Transformer model)"),w7.forEach(t),lco=i(M),kp=n(M,"LI",{});var XEe=s(kp);Xre=n(XEe,"STRONG",{});var OQr=s(Xre);ico=r(OQr,"glpn"),OQr.forEach(t),dco=r(XEe," \u2014 "),lP=n(XEe,"A",{href:!0});var VQr=s(lP);cco=r(VQr,"GLPNModel"),VQr.forEach(t),fco=r(XEe," (GLPN model)"),XEe.forEach(t),mco=i(M),Sp=n(M,"LI",{});var zEe=s(Sp);zre=n(zEe,"STRONG",{});var XQr=s(zre);gco=r(XQr,"gpt2"),XQr.forEach(t),hco=r(zEe," \u2014 "),iP=n(zEe,"A",{href:!0});var zQr=s(iP);pco=r(zQr,"GPT2Model"),zQr.forEach(t),_co=r(zEe," (OpenAI GPT-2 model)"),zEe.forEach(t),uco=i(M),Rp=n(M,"LI",{});var QEe=s(Rp);Qre=n(QEe,"STRONG",{});var QQr=s(Qre);bco=r(QQr,"gpt_neo"),QQr.forEach(t),vco=r(QEe," \u2014 "),dP=n(QEe,"A",{href:!0});var WQr=s(dP);Fco=r(WQr,"GPTNeoModel"),WQr.forEach(t),Tco=r(QEe," (GPT Neo model)"),QEe.forEach(t),Mco=i(M),Bp=n(M,"LI",{});var WEe=s(Bp);Wre=n(WEe,"STRONG",{});var HQr=s(Wre);Eco=r(HQr,"gpt_neox"),HQr.forEach(t),Cco=r(WEe," \u2014 "),cP=n(WEe,"A",{href:!0});var UQr=s(cP);wco=r(UQr,"GPTNeoXModel"),UQr.forEach(t),Aco=r(WEe," (GPTNeoX model)"),WEe.forEach(t),yco=i(M),Pp=n(M,"LI",{});var HEe=s(Pp);Hre=n(HEe,"STRONG",{});var JQr=s(Hre);Lco=r(JQr,"gptj"),JQr.forEach(t),xco=r(HEe," \u2014 "),fP=n(HEe,"A",{href:!0});var YQr=s(fP);kco=r(YQr,"GPTJModel"),YQr.forEach(t),Sco=r(HEe," (GPT-J model)"),HEe.forEach(t),Rco=i(M),$p=n(M,"LI",{});var UEe=s($p);Ure=n(UEe,"STRONG",{});var KQr=s(Ure);Bco=r(KQr,"hubert"),KQr.forEach(t),Pco=r(UEe," \u2014 "),mP=n(UEe,"A",{href:!0});var ZQr=s(mP);$co=r(ZQr,"HubertModel"),ZQr.forEach(t),Ico=r(UEe," (Hubert model)"),UEe.forEach(t),qco=i(M),Ip=n(M,"LI",{});var JEe=s(Ip);Jre=n(JEe,"STRONG",{});var eWr=s(Jre);Nco=r(eWr,"ibert"),eWr.forEach(t),jco=r(JEe," \u2014 "),gP=n(JEe,"A",{href:!0});var oWr=s(gP);Dco=r(oWr,"IBertModel"),oWr.forEach(t),Gco=r(JEe," (I-BERT model)"),JEe.forEach(t),Oco=i(M),qp=n(M,"LI",{});var YEe=s(qp);Yre=n(YEe,"STRONG",{});var rWr=s(Yre);Vco=r(rWr,"imagegpt"),rWr.forEach(t),Xco=r(YEe," \u2014 "),hP=n(YEe,"A",{href:!0});var tWr=s(hP);zco=r(tWr,"ImageGPTModel"),tWr.forEach(t),Qco=r(YEe," (ImageGPT model)"),YEe.forEach(t),Wco=i(M),Np=n(M,"LI",{});var KEe=s(Np);Kre=n(KEe,"STRONG",{});var aWr=s(Kre);Hco=r(aWr,"layoutlm"),aWr.forEach(t),Uco=r(KEe," \u2014 "),pP=n(KEe,"A",{href:!0});var nWr=s(pP);Jco=r(nWr,"LayoutLMModel"),nWr.forEach(t),Yco=r(KEe," (LayoutLM model)"),KEe.forEach(t),Kco=i(M),jp=n(M,"LI",{});var ZEe=s(jp);Zre=n(ZEe,"STRONG",{});var sWr=s(Zre);Zco=r(sWr,"layoutlmv2"),sWr.forEach(t),efo=r(ZEe," \u2014 "),_P=n(ZEe,"A",{href:!0});var lWr=s(_P);ofo=r(lWr,"LayoutLMv2Model"),lWr.forEach(t),rfo=r(ZEe," (LayoutLMv2 model)"),ZEe.forEach(t),tfo=i(M),Dp=n(M,"LI",{});var e3e=s(Dp);ete=n(e3e,"STRONG",{});var iWr=s(ete);afo=r(iWr,"led"),iWr.forEach(t),nfo=r(e3e," \u2014 "),uP=n(e3e,"A",{href:!0});var dWr=s(uP);sfo=r(dWr,"LEDModel"),dWr.forEach(t),lfo=r(e3e," (LED model)"),e3e.forEach(t),ifo=i(M),Gp=n(M,"LI",{});var o3e=s(Gp);ote=n(o3e,"STRONG",{});var cWr=s(ote);dfo=r(cWr,"longformer"),cWr.forEach(t),cfo=r(o3e," \u2014 "),bP=n(o3e,"A",{href:!0});var fWr=s(bP);ffo=r(fWr,"LongformerModel"),fWr.forEach(t),mfo=r(o3e," (Longformer model)"),o3e.forEach(t),gfo=i(M),Op=n(M,"LI",{});var r3e=s(Op);rte=n(r3e,"STRONG",{});var mWr=s(rte);hfo=r(mWr,"luke"),mWr.forEach(t),pfo=r(r3e," \u2014 "),vP=n(r3e,"A",{href:!0});var gWr=s(vP);_fo=r(gWr,"LukeModel"),gWr.forEach(t),ufo=r(r3e," (LUKE model)"),r3e.forEach(t),bfo=i(M),Vp=n(M,"LI",{});var t3e=s(Vp);tte=n(t3e,"STRONG",{});var hWr=s(tte);vfo=r(hWr,"lxmert"),hWr.forEach(t),Ffo=r(t3e," \u2014 "),FP=n(t3e,"A",{href:!0});var pWr=s(FP);Tfo=r(pWr,"LxmertModel"),pWr.forEach(t),Mfo=r(t3e," (LXMERT model)"),t3e.forEach(t),Efo=i(M),Xp=n(M,"LI",{});var a3e=s(Xp);ate=n(a3e,"STRONG",{});var _Wr=s(ate);Cfo=r(_Wr,"m2m_100"),_Wr.forEach(t),wfo=r(a3e," \u2014 "),TP=n(a3e,"A",{href:!0});var uWr=s(TP);Afo=r(uWr,"M2M100Model"),uWr.forEach(t),yfo=r(a3e," (M2M100 model)"),a3e.forEach(t),Lfo=i(M),zp=n(M,"LI",{});var n3e=s(zp);nte=n(n3e,"STRONG",{});var bWr=s(nte);xfo=r(bWr,"marian"),bWr.forEach(t),kfo=r(n3e," \u2014 "),MP=n(n3e,"A",{href:!0});var vWr=s(MP);Sfo=r(vWr,"MarianModel"),vWr.forEach(t),Rfo=r(n3e," (Marian model)"),n3e.forEach(t),Bfo=i(M),Qp=n(M,"LI",{});var s3e=s(Qp);ste=n(s3e,"STRONG",{});var FWr=s(ste);Pfo=r(FWr,"maskformer"),FWr.forEach(t),$fo=r(s3e," \u2014 "),EP=n(s3e,"A",{href:!0});var TWr=s(EP);Ifo=r(TWr,"MaskFormerModel"),TWr.forEach(t),qfo=r(s3e," (MaskFormer model)"),s3e.forEach(t),Nfo=i(M),Wp=n(M,"LI",{});var l3e=s(Wp);lte=n(l3e,"STRONG",{});var MWr=s(lte);jfo=r(MWr,"mbart"),MWr.forEach(t),Dfo=r(l3e," \u2014 "),CP=n(l3e,"A",{href:!0});var EWr=s(CP);Gfo=r(EWr,"MBartModel"),EWr.forEach(t),Ofo=r(l3e," (mBART model)"),l3e.forEach(t),Vfo=i(M),Hp=n(M,"LI",{});var i3e=s(Hp);ite=n(i3e,"STRONG",{});var CWr=s(ite);Xfo=r(CWr,"megatron-bert"),CWr.forEach(t),zfo=r(i3e," \u2014 "),wP=n(i3e,"A",{href:!0});var wWr=s(wP);Qfo=r(wWr,"MegatronBertModel"),wWr.forEach(t),Wfo=r(i3e," (MegatronBert model)"),i3e.forEach(t),Hfo=i(M),Up=n(M,"LI",{});var d3e=s(Up);dte=n(d3e,"STRONG",{});var AWr=s(dte);Ufo=r(AWr,"mobilebert"),AWr.forEach(t),Jfo=r(d3e," \u2014 "),AP=n(d3e,"A",{href:!0});var yWr=s(AP);Yfo=r(yWr,"MobileBertModel"),yWr.forEach(t),Kfo=r(d3e," (MobileBERT model)"),d3e.forEach(t),Zfo=i(M),Jp=n(M,"LI",{});var c3e=s(Jp);cte=n(c3e,"STRONG",{});var LWr=s(cte);emo=r(LWr,"mpnet"),LWr.forEach(t),omo=r(c3e," \u2014 "),yP=n(c3e,"A",{href:!0});var xWr=s(yP);rmo=r(xWr,"MPNetModel"),xWr.forEach(t),tmo=r(c3e," (MPNet model)"),c3e.forEach(t),amo=i(M),Yp=n(M,"LI",{});var f3e=s(Yp);fte=n(f3e,"STRONG",{});var kWr=s(fte);nmo=r(kWr,"mt5"),kWr.forEach(t),smo=r(f3e," \u2014 "),LP=n(f3e,"A",{href:!0});var SWr=s(LP);lmo=r(SWr,"MT5Model"),SWr.forEach(t),imo=r(f3e," (mT5 model)"),f3e.forEach(t),dmo=i(M),Kp=n(M,"LI",{});var m3e=s(Kp);mte=n(m3e,"STRONG",{});var RWr=s(mte);cmo=r(RWr,"nystromformer"),RWr.forEach(t),fmo=r(m3e," \u2014 "),xP=n(m3e,"A",{href:!0});var BWr=s(xP);mmo=r(BWr,"NystromformerModel"),BWr.forEach(t),gmo=r(m3e," (Nystromformer model)"),m3e.forEach(t),hmo=i(M),Zp=n(M,"LI",{});var g3e=s(Zp);gte=n(g3e,"STRONG",{});var PWr=s(gte);pmo=r(PWr,"openai-gpt"),PWr.forEach(t),_mo=r(g3e," \u2014 "),kP=n(g3e,"A",{href:!0});var $Wr=s(kP);umo=r($Wr,"OpenAIGPTModel"),$Wr.forEach(t),bmo=r(g3e," (OpenAI GPT model)"),g3e.forEach(t),vmo=i(M),e_=n(M,"LI",{});var h3e=s(e_);hte=n(h3e,"STRONG",{});var IWr=s(hte);Fmo=r(IWr,"pegasus"),IWr.forEach(t),Tmo=r(h3e," \u2014 "),SP=n(h3e,"A",{href:!0});var qWr=s(SP);Mmo=r(qWr,"PegasusModel"),qWr.forEach(t),Emo=r(h3e," (Pegasus model)"),h3e.forEach(t),Cmo=i(M),o_=n(M,"LI",{});var p3e=s(o_);pte=n(p3e,"STRONG",{});var NWr=s(pte);wmo=r(NWr,"perceiver"),NWr.forEach(t),Amo=r(p3e," \u2014 "),RP=n(p3e,"A",{href:!0});var jWr=s(RP);ymo=r(jWr,"PerceiverModel"),jWr.forEach(t),Lmo=r(p3e," (Perceiver model)"),p3e.forEach(t),xmo=i(M),r_=n(M,"LI",{});var _3e=s(r_);_te=n(_3e,"STRONG",{});var DWr=s(_te);kmo=r(DWr,"plbart"),DWr.forEach(t),Smo=r(_3e," \u2014 "),BP=n(_3e,"A",{href:!0});var GWr=s(BP);Rmo=r(GWr,"PLBartModel"),GWr.forEach(t),Bmo=r(_3e," (PLBart model)"),_3e.forEach(t),Pmo=i(M),t_=n(M,"LI",{});var u3e=s(t_);ute=n(u3e,"STRONG",{});var OWr=s(ute);$mo=r(OWr,"poolformer"),OWr.forEach(t),Imo=r(u3e," \u2014 "),PP=n(u3e,"A",{href:!0});var VWr=s(PP);qmo=r(VWr,"PoolFormerModel"),VWr.forEach(t),Nmo=r(u3e," (PoolFormer model)"),u3e.forEach(t),jmo=i(M),a_=n(M,"LI",{});var b3e=s(a_);bte=n(b3e,"STRONG",{});var XWr=s(bte);Dmo=r(XWr,"prophetnet"),XWr.forEach(t),Gmo=r(b3e," \u2014 "),$P=n(b3e,"A",{href:!0});var zWr=s($P);Omo=r(zWr,"ProphetNetModel"),zWr.forEach(t),Vmo=r(b3e," (ProphetNet model)"),b3e.forEach(t),Xmo=i(M),n_=n(M,"LI",{});var v3e=s(n_);vte=n(v3e,"STRONG",{});var QWr=s(vte);zmo=r(QWr,"qdqbert"),QWr.forEach(t),Qmo=r(v3e," \u2014 "),IP=n(v3e,"A",{href:!0});var WWr=s(IP);Wmo=r(WWr,"QDQBertModel"),WWr.forEach(t),Hmo=r(v3e," (QDQBert model)"),v3e.forEach(t),Umo=i(M),s_=n(M,"LI",{});var F3e=s(s_);Fte=n(F3e,"STRONG",{});var HWr=s(Fte);Jmo=r(HWr,"reformer"),HWr.forEach(t),Ymo=r(F3e," \u2014 "),qP=n(F3e,"A",{href:!0});var UWr=s(qP);Kmo=r(UWr,"ReformerModel"),UWr.forEach(t),Zmo=r(F3e," (Reformer model)"),F3e.forEach(t),ego=i(M),l_=n(M,"LI",{});var T3e=s(l_);Tte=n(T3e,"STRONG",{});var JWr=s(Tte);ogo=r(JWr,"regnet"),JWr.forEach(t),rgo=r(T3e," \u2014 "),NP=n(T3e,"A",{href:!0});var YWr=s(NP);tgo=r(YWr,"RegNetModel"),YWr.forEach(t),ago=r(T3e," (RegNet model)"),T3e.forEach(t),ngo=i(M),i_=n(M,"LI",{});var M3e=s(i_);Mte=n(M3e,"STRONG",{});var KWr=s(Mte);sgo=r(KWr,"rembert"),KWr.forEach(t),lgo=r(M3e," \u2014 "),jP=n(M3e,"A",{href:!0});var ZWr=s(jP);igo=r(ZWr,"RemBertModel"),ZWr.forEach(t),dgo=r(M3e," (RemBERT model)"),M3e.forEach(t),cgo=i(M),d_=n(M,"LI",{});var E3e=s(d_);Ete=n(E3e,"STRONG",{});var eHr=s(Ete);fgo=r(eHr,"resnet"),eHr.forEach(t),mgo=r(E3e," \u2014 "),DP=n(E3e,"A",{href:!0});var oHr=s(DP);ggo=r(oHr,"ResNetModel"),oHr.forEach(t),hgo=r(E3e," (ResNet model)"),E3e.forEach(t),pgo=i(M),c_=n(M,"LI",{});var C3e=s(c_);Cte=n(C3e,"STRONG",{});var rHr=s(Cte);_go=r(rHr,"retribert"),rHr.forEach(t),ugo=r(C3e," \u2014 "),GP=n(C3e,"A",{href:!0});var tHr=s(GP);bgo=r(tHr,"RetriBertModel"),tHr.forEach(t),vgo=r(C3e," (RetriBERT model)"),C3e.forEach(t),Fgo=i(M),f_=n(M,"LI",{});var w3e=s(f_);wte=n(w3e,"STRONG",{});var aHr=s(wte);Tgo=r(aHr,"roberta"),aHr.forEach(t),Mgo=r(w3e," \u2014 "),OP=n(w3e,"A",{href:!0});var nHr=s(OP);Ego=r(nHr,"RobertaModel"),nHr.forEach(t),Cgo=r(w3e," (RoBERTa model)"),w3e.forEach(t),wgo=i(M),m_=n(M,"LI",{});var A3e=s(m_);Ate=n(A3e,"STRONG",{});var sHr=s(Ate);Ago=r(sHr,"roformer"),sHr.forEach(t),ygo=r(A3e," \u2014 "),VP=n(A3e,"A",{href:!0});var lHr=s(VP);Lgo=r(lHr,"RoFormerModel"),lHr.forEach(t),xgo=r(A3e," (RoFormer model)"),A3e.forEach(t),kgo=i(M),g_=n(M,"LI",{});var y3e=s(g_);yte=n(y3e,"STRONG",{});var iHr=s(yte);Sgo=r(iHr,"segformer"),iHr.forEach(t),Rgo=r(y3e," \u2014 "),XP=n(y3e,"A",{href:!0});var dHr=s(XP);Bgo=r(dHr,"SegformerModel"),dHr.forEach(t),Pgo=r(y3e," (SegFormer model)"),y3e.forEach(t),$go=i(M),h_=n(M,"LI",{});var L3e=s(h_);Lte=n(L3e,"STRONG",{});var cHr=s(Lte);Igo=r(cHr,"sew"),cHr.forEach(t),qgo=r(L3e," \u2014 "),zP=n(L3e,"A",{href:!0});var fHr=s(zP);Ngo=r(fHr,"SEWModel"),fHr.forEach(t),jgo=r(L3e," (SEW model)"),L3e.forEach(t),Dgo=i(M),p_=n(M,"LI",{});var x3e=s(p_);xte=n(x3e,"STRONG",{});var mHr=s(xte);Ggo=r(mHr,"sew-d"),mHr.forEach(t),Ogo=r(x3e," \u2014 "),QP=n(x3e,"A",{href:!0});var gHr=s(QP);Vgo=r(gHr,"SEWDModel"),gHr.forEach(t),Xgo=r(x3e," (SEW-D model)"),x3e.forEach(t),zgo=i(M),__=n(M,"LI",{});var k3e=s(__);kte=n(k3e,"STRONG",{});var hHr=s(kte);Qgo=r(hHr,"speech_to_text"),hHr.forEach(t),Wgo=r(k3e," \u2014 "),WP=n(k3e,"A",{href:!0});var pHr=s(WP);Hgo=r(pHr,"Speech2TextModel"),pHr.forEach(t),Ugo=r(k3e," (Speech2Text model)"),k3e.forEach(t),Jgo=i(M),u_=n(M,"LI",{});var S3e=s(u_);Ste=n(S3e,"STRONG",{});var _Hr=s(Ste);Ygo=r(_Hr,"splinter"),_Hr.forEach(t),Kgo=r(S3e," \u2014 "),HP=n(S3e,"A",{href:!0});var uHr=s(HP);Zgo=r(uHr,"SplinterModel"),uHr.forEach(t),eho=r(S3e," (Splinter model)"),S3e.forEach(t),oho=i(M),b_=n(M,"LI",{});var R3e=s(b_);Rte=n(R3e,"STRONG",{});var bHr=s(Rte);rho=r(bHr,"squeezebert"),bHr.forEach(t),tho=r(R3e," \u2014 "),UP=n(R3e,"A",{href:!0});var vHr=s(UP);aho=r(vHr,"SqueezeBertModel"),vHr.forEach(t),nho=r(R3e," (SqueezeBERT model)"),R3e.forEach(t),sho=i(M),v_=n(M,"LI",{});var B3e=s(v_);Bte=n(B3e,"STRONG",{});var FHr=s(Bte);lho=r(FHr,"swin"),FHr.forEach(t),iho=r(B3e," \u2014 "),JP=n(B3e,"A",{href:!0});var THr=s(JP);dho=r(THr,"SwinModel"),THr.forEach(t),cho=r(B3e," (Swin model)"),B3e.forEach(t),fho=i(M),F_=n(M,"LI",{});var P3e=s(F_);Pte=n(P3e,"STRONG",{});var MHr=s(Pte);mho=r(MHr,"t5"),MHr.forEach(t),gho=r(P3e," \u2014 "),YP=n(P3e,"A",{href:!0});var EHr=s(YP);hho=r(EHr,"T5Model"),EHr.forEach(t),pho=r(P3e," (T5 model)"),P3e.forEach(t),_ho=i(M),T_=n(M,"LI",{});var $3e=s(T_);$te=n($3e,"STRONG",{});var CHr=s($te);uho=r(CHr,"tapas"),CHr.forEach(t),bho=r($3e," \u2014 "),KP=n($3e,"A",{href:!0});var wHr=s(KP);vho=r(wHr,"TapasModel"),wHr.forEach(t),Fho=r($3e," (TAPAS model)"),$3e.forEach(t),Tho=i(M),M_=n(M,"LI",{});var I3e=s(M_);Ite=n(I3e,"STRONG",{});var AHr=s(Ite);Mho=r(AHr,"transfo-xl"),AHr.forEach(t),Eho=r(I3e," \u2014 "),ZP=n(I3e,"A",{href:!0});var yHr=s(ZP);Cho=r(yHr,"TransfoXLModel"),yHr.forEach(t),who=r(I3e," (Transformer-XL model)"),I3e.forEach(t),Aho=i(M),E_=n(M,"LI",{});var q3e=s(E_);qte=n(q3e,"STRONG",{});var LHr=s(qte);yho=r(LHr,"unispeech"),LHr.forEach(t),Lho=r(q3e," \u2014 "),e$=n(q3e,"A",{href:!0});var xHr=s(e$);xho=r(xHr,"UniSpeechModel"),xHr.forEach(t),kho=r(q3e," (UniSpeech model)"),q3e.forEach(t),Sho=i(M),C_=n(M,"LI",{});var N3e=s(C_);Nte=n(N3e,"STRONG",{});var kHr=s(Nte);Rho=r(kHr,"unispeech-sat"),kHr.forEach(t),Bho=r(N3e," \u2014 "),o$=n(N3e,"A",{href:!0});var SHr=s(o$);Pho=r(SHr,"UniSpeechSatModel"),SHr.forEach(t),$ho=r(N3e," (UniSpeechSat model)"),N3e.forEach(t),Iho=i(M),w_=n(M,"LI",{});var j3e=s(w_);jte=n(j3e,"STRONG",{});var RHr=s(jte);qho=r(RHr,"van"),RHr.forEach(t),Nho=r(j3e," \u2014 "),r$=n(j3e,"A",{href:!0});var BHr=s(r$);jho=r(BHr,"VanModel"),BHr.forEach(t),Dho=r(j3e," (VAN model)"),j3e.forEach(t),Gho=i(M),A_=n(M,"LI",{});var D3e=s(A_);Dte=n(D3e,"STRONG",{});var PHr=s(Dte);Oho=r(PHr,"vilt"),PHr.forEach(t),Vho=r(D3e," \u2014 "),t$=n(D3e,"A",{href:!0});var $Hr=s(t$);Xho=r($Hr,"ViltModel"),$Hr.forEach(t),zho=r(D3e," (ViLT model)"),D3e.forEach(t),Qho=i(M),y_=n(M,"LI",{});var G3e=s(y_);Gte=n(G3e,"STRONG",{});var IHr=s(Gte);Who=r(IHr,"vision-text-dual-encoder"),IHr.forEach(t),Hho=r(G3e," \u2014 "),a$=n(G3e,"A",{href:!0});var qHr=s(a$);Uho=r(qHr,"VisionTextDualEncoderModel"),qHr.forEach(t),Jho=r(G3e," (VisionTextDualEncoder model)"),G3e.forEach(t),Yho=i(M),L_=n(M,"LI",{});var O3e=s(L_);Ote=n(O3e,"STRONG",{});var NHr=s(Ote);Kho=r(NHr,"visual_bert"),NHr.forEach(t),Zho=r(O3e," \u2014 "),n$=n(O3e,"A",{href:!0});var jHr=s(n$);epo=r(jHr,"VisualBertModel"),jHr.forEach(t),opo=r(O3e," (VisualBert model)"),O3e.forEach(t),rpo=i(M),x_=n(M,"LI",{});var V3e=s(x_);Vte=n(V3e,"STRONG",{});var DHr=s(Vte);tpo=r(DHr,"vit"),DHr.forEach(t),apo=r(V3e," \u2014 "),s$=n(V3e,"A",{href:!0});var GHr=s(s$);npo=r(GHr,"ViTModel"),GHr.forEach(t),spo=r(V3e," (ViT model)"),V3e.forEach(t),lpo=i(M),k_=n(M,"LI",{});var X3e=s(k_);Xte=n(X3e,"STRONG",{});var OHr=s(Xte);ipo=r(OHr,"vit_mae"),OHr.forEach(t),dpo=r(X3e," \u2014 "),l$=n(X3e,"A",{href:!0});var VHr=s(l$);cpo=r(VHr,"ViTMAEModel"),VHr.forEach(t),fpo=r(X3e," (ViTMAE model)"),X3e.forEach(t),mpo=i(M),S_=n(M,"LI",{});var z3e=s(S_);zte=n(z3e,"STRONG",{});var XHr=s(zte);gpo=r(XHr,"wav2vec2"),XHr.forEach(t),hpo=r(z3e," \u2014 "),i$=n(z3e,"A",{href:!0});var zHr=s(i$);ppo=r(zHr,"Wav2Vec2Model"),zHr.forEach(t),_po=r(z3e," (Wav2Vec2 model)"),z3e.forEach(t),upo=i(M),R_=n(M,"LI",{});var Q3e=s(R_);Qte=n(Q3e,"STRONG",{});var QHr=s(Qte);bpo=r(QHr,"wavlm"),QHr.forEach(t),vpo=r(Q3e," \u2014 "),d$=n(Q3e,"A",{href:!0});var WHr=s(d$);Fpo=r(WHr,"WavLMModel"),WHr.forEach(t),Tpo=r(Q3e," (WavLM model)"),Q3e.forEach(t),Mpo=i(M),B_=n(M,"LI",{});var W3e=s(B_);Wte=n(W3e,"STRONG",{});var HHr=s(Wte);Epo=r(HHr,"xglm"),HHr.forEach(t),Cpo=r(W3e," \u2014 "),c$=n(W3e,"A",{href:!0});var UHr=s(c$);wpo=r(UHr,"XGLMModel"),UHr.forEach(t),Apo=r(W3e," (XGLM model)"),W3e.forEach(t),ypo=i(M),P_=n(M,"LI",{});var H3e=s(P_);Hte=n(H3e,"STRONG",{});var JHr=s(Hte);Lpo=r(JHr,"xlm"),JHr.forEach(t),xpo=r(H3e," \u2014 "),f$=n(H3e,"A",{href:!0});var YHr=s(f$);kpo=r(YHr,"XLMModel"),YHr.forEach(t),Spo=r(H3e," (XLM model)"),H3e.forEach(t),Rpo=i(M),$_=n(M,"LI",{});var U3e=s($_);Ute=n(U3e,"STRONG",{});var KHr=s(Ute);Bpo=r(KHr,"xlm-prophetnet"),KHr.forEach(t),Ppo=r(U3e," \u2014 "),m$=n(U3e,"A",{href:!0});var ZHr=s(m$);$po=r(ZHr,"XLMProphetNetModel"),ZHr.forEach(t),Ipo=r(U3e," (XLMProphetNet model)"),U3e.forEach(t),qpo=i(M),I_=n(M,"LI",{});var J3e=s(I_);Jte=n(J3e,"STRONG",{});var eUr=s(Jte);Npo=r(eUr,"xlm-roberta"),eUr.forEach(t),jpo=r(J3e," \u2014 "),g$=n(J3e,"A",{href:!0});var oUr=s(g$);Dpo=r(oUr,"XLMRobertaModel"),oUr.forEach(t),Gpo=r(J3e," (XLM-RoBERTa model)"),J3e.forEach(t),Opo=i(M),q_=n(M,"LI",{});var Y3e=s(q_);Yte=n(Y3e,"STRONG",{});var rUr=s(Yte);Vpo=r(rUr,"xlm-roberta-xl"),rUr.forEach(t),Xpo=r(Y3e," \u2014 "),h$=n(Y3e,"A",{href:!0});var tUr=s(h$);zpo=r(tUr,"XLMRobertaXLModel"),tUr.forEach(t),Qpo=r(Y3e," (XLM-RoBERTa-XL model)"),Y3e.forEach(t),Wpo=i(M),N_=n(M,"LI",{});var K3e=s(N_);Kte=n(K3e,"STRONG",{});var aUr=s(Kte);Hpo=r(aUr,"xlnet"),aUr.forEach(t),Upo=r(K3e," \u2014 "),p$=n(K3e,"A",{href:!0});var nUr=s(p$);Jpo=r(nUr,"XLNetModel"),nUr.forEach(t),Ypo=r(K3e," (XLNet model)"),K3e.forEach(t),Kpo=i(M),j_=n(M,"LI",{});var Z3e=s(j_);Zte=n(Z3e,"STRONG",{});var sUr=s(Zte);Zpo=r(sUr,"yoso"),sUr.forEach(t),e_o=r(Z3e," \u2014 "),_$=n(Z3e,"A",{href:!0});var lUr=s(_$);o_o=r(lUr,"YosoModel"),lUr.forEach(t),r_o=r(Z3e," (YOSO model)"),Z3e.forEach(t),M.forEach(t),t_o=i(Dt),D_=n(Dt,"P",{});var eCe=s(D_);a_o=r(eCe,"The model is set in evaluation mode by default using "),eae=n(eCe,"CODE",{});var iUr=s(eae);n_o=r(iUr,"model.eval()"),iUr.forEach(t),s_o=r(eCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oae=n(eCe,"CODE",{});var dUr=s(oae);l_o=r(dUr,"model.train()"),dUr.forEach(t),eCe.forEach(t),i_o=i(Dt),rae=n(Dt,"P",{});var cUr=s(rae);d_o=r(cUr,"Examples:"),cUr.forEach(t),c_o=i(Dt),m(vC.$$.fragment,Dt),Dt.forEach(t),Js.forEach(t),pBe=i(c),td=n(c,"H2",{class:!0});var C$e=s(td);G_=n(C$e,"A",{id:!0,class:!0,href:!0});var fUr=s(G_);tae=n(fUr,"SPAN",{});var mUr=s(tae);m(FC.$$.fragment,mUr),mUr.forEach(t),fUr.forEach(t),f_o=i(C$e),aae=n(C$e,"SPAN",{});var gUr=s(aae);m_o=r(gUr,"AutoModelForPreTraining"),gUr.forEach(t),C$e.forEach(t),_Be=i(c),Yo=n(c,"DIV",{class:!0});var Ks=s(Yo);m(TC.$$.fragment,Ks),g_o=i(Ks),ad=n(Ks,"P",{});var NU=s(ad);h_o=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),u$=n(NU,"A",{href:!0});var hUr=s(u$);p_o=r(hUr,"from_pretrained()"),hUr.forEach(t),__o=r(NU," class method or the "),b$=n(NU,"A",{href:!0});var pUr=s(b$);u_o=r(pUr,"from_config()"),pUr.forEach(t),b_o=r(NU,` class
method.`),NU.forEach(t),v_o=i(Ks),MC=n(Ks,"P",{});var w$e=s(MC);F_o=r(w$e,"This class cannot be instantiated directly using "),nae=n(w$e,"CODE",{});var _Ur=s(nae);T_o=r(_Ur,"__init__()"),_Ur.forEach(t),M_o=r(w$e," (throws an error)."),w$e.forEach(t),E_o=i(Ks),zr=n(Ks,"DIV",{class:!0});var Zs=s(zr);m(EC.$$.fragment,Zs),C_o=i(Zs),sae=n(Zs,"P",{});var uUr=s(sae);w_o=r(uUr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uUr.forEach(t),A_o=i(Zs),nd=n(Zs,"P",{});var jU=s(nd);y_o=r(jU,`Note:
Loading a model from its configuration file does `),lae=n(jU,"STRONG",{});var bUr=s(lae);L_o=r(bUr,"not"),bUr.forEach(t),x_o=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),v$=n(jU,"A",{href:!0});var vUr=s(v$);k_o=r(vUr,"from_pretrained()"),vUr.forEach(t),S_o=r(jU," to load the model weights."),jU.forEach(t),R_o=i(Zs),iae=n(Zs,"P",{});var FUr=s(iae);B_o=r(FUr,"Examples:"),FUr.forEach(t),P_o=i(Zs),m(CC.$$.fragment,Zs),Zs.forEach(t),$_o=i(Ks),Ne=n(Ks,"DIV",{class:!0});var Gt=s(Ne);m(wC.$$.fragment,Gt),I_o=i(Gt),dae=n(Gt,"P",{});var TUr=s(dae);q_o=r(TUr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TUr.forEach(t),N_o=i(Gt),za=n(Gt,"P",{});var qE=s(za);j_o=r(qE,"The model class to instantiate is selected based on the "),cae=n(qE,"CODE",{});var MUr=s(cae);D_o=r(MUr,"model_type"),MUr.forEach(t),G_o=r(qE,` property of the config object (either
passed as an argument or loaded from `),fae=n(qE,"CODE",{});var EUr=s(fae);O_o=r(EUr,"pretrained_model_name_or_path"),EUr.forEach(t),V_o=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mae=n(qE,"CODE",{});var CUr=s(mae);X_o=r(CUr,"pretrained_model_name_or_path"),CUr.forEach(t),z_o=r(qE,":"),qE.forEach(t),Q_o=i(Gt),S=n(Gt,"UL",{});var B=s(S);O_=n(B,"LI",{});var oCe=s(O_);gae=n(oCe,"STRONG",{});var wUr=s(gae);W_o=r(wUr,"albert"),wUr.forEach(t),H_o=r(oCe," \u2014 "),F$=n(oCe,"A",{href:!0});var AUr=s(F$);U_o=r(AUr,"AlbertForPreTraining"),AUr.forEach(t),J_o=r(oCe," (ALBERT model)"),oCe.forEach(t),Y_o=i(B),V_=n(B,"LI",{});var rCe=s(V_);hae=n(rCe,"STRONG",{});var yUr=s(hae);K_o=r(yUr,"bart"),yUr.forEach(t),Z_o=r(rCe," \u2014 "),T$=n(rCe,"A",{href:!0});var LUr=s(T$);euo=r(LUr,"BartForConditionalGeneration"),LUr.forEach(t),ouo=r(rCe," (BART model)"),rCe.forEach(t),ruo=i(B),X_=n(B,"LI",{});var tCe=s(X_);pae=n(tCe,"STRONG",{});var xUr=s(pae);tuo=r(xUr,"bert"),xUr.forEach(t),auo=r(tCe," \u2014 "),M$=n(tCe,"A",{href:!0});var kUr=s(M$);nuo=r(kUr,"BertForPreTraining"),kUr.forEach(t),suo=r(tCe," (BERT model)"),tCe.forEach(t),luo=i(B),z_=n(B,"LI",{});var aCe=s(z_);_ae=n(aCe,"STRONG",{});var SUr=s(_ae);iuo=r(SUr,"big_bird"),SUr.forEach(t),duo=r(aCe," \u2014 "),E$=n(aCe,"A",{href:!0});var RUr=s(E$);cuo=r(RUr,"BigBirdForPreTraining"),RUr.forEach(t),fuo=r(aCe," (BigBird model)"),aCe.forEach(t),muo=i(B),Q_=n(B,"LI",{});var nCe=s(Q_);uae=n(nCe,"STRONG",{});var BUr=s(uae);guo=r(BUr,"camembert"),BUr.forEach(t),huo=r(nCe," \u2014 "),C$=n(nCe,"A",{href:!0});var PUr=s(C$);puo=r(PUr,"CamembertForMaskedLM"),PUr.forEach(t),_uo=r(nCe," (CamemBERT model)"),nCe.forEach(t),uuo=i(B),W_=n(B,"LI",{});var sCe=s(W_);bae=n(sCe,"STRONG",{});var $Ur=s(bae);buo=r($Ur,"ctrl"),$Ur.forEach(t),vuo=r(sCe," \u2014 "),w$=n(sCe,"A",{href:!0});var IUr=s(w$);Fuo=r(IUr,"CTRLLMHeadModel"),IUr.forEach(t),Tuo=r(sCe," (CTRL model)"),sCe.forEach(t),Muo=i(B),H_=n(B,"LI",{});var lCe=s(H_);vae=n(lCe,"STRONG",{});var qUr=s(vae);Euo=r(qUr,"data2vec-text"),qUr.forEach(t),Cuo=r(lCe," \u2014 "),A$=n(lCe,"A",{href:!0});var NUr=s(A$);wuo=r(NUr,"Data2VecTextForMaskedLM"),NUr.forEach(t),Auo=r(lCe," (Data2VecText model)"),lCe.forEach(t),yuo=i(B),U_=n(B,"LI",{});var iCe=s(U_);Fae=n(iCe,"STRONG",{});var jUr=s(Fae);Luo=r(jUr,"deberta"),jUr.forEach(t),xuo=r(iCe," \u2014 "),y$=n(iCe,"A",{href:!0});var DUr=s(y$);kuo=r(DUr,"DebertaForMaskedLM"),DUr.forEach(t),Suo=r(iCe," (DeBERTa model)"),iCe.forEach(t),Ruo=i(B),J_=n(B,"LI",{});var dCe=s(J_);Tae=n(dCe,"STRONG",{});var GUr=s(Tae);Buo=r(GUr,"deberta-v2"),GUr.forEach(t),Puo=r(dCe," \u2014 "),L$=n(dCe,"A",{href:!0});var OUr=s(L$);$uo=r(OUr,"DebertaV2ForMaskedLM"),OUr.forEach(t),Iuo=r(dCe," (DeBERTa-v2 model)"),dCe.forEach(t),quo=i(B),Y_=n(B,"LI",{});var cCe=s(Y_);Mae=n(cCe,"STRONG",{});var VUr=s(Mae);Nuo=r(VUr,"distilbert"),VUr.forEach(t),juo=r(cCe," \u2014 "),x$=n(cCe,"A",{href:!0});var XUr=s(x$);Duo=r(XUr,"DistilBertForMaskedLM"),XUr.forEach(t),Guo=r(cCe," (DistilBERT model)"),cCe.forEach(t),Ouo=i(B),K_=n(B,"LI",{});var fCe=s(K_);Eae=n(fCe,"STRONG",{});var zUr=s(Eae);Vuo=r(zUr,"electra"),zUr.forEach(t),Xuo=r(fCe," \u2014 "),k$=n(fCe,"A",{href:!0});var QUr=s(k$);zuo=r(QUr,"ElectraForPreTraining"),QUr.forEach(t),Quo=r(fCe," (ELECTRA model)"),fCe.forEach(t),Wuo=i(B),Z_=n(B,"LI",{});var mCe=s(Z_);Cae=n(mCe,"STRONG",{});var WUr=s(Cae);Huo=r(WUr,"flaubert"),WUr.forEach(t),Uuo=r(mCe," \u2014 "),S$=n(mCe,"A",{href:!0});var HUr=s(S$);Juo=r(HUr,"FlaubertWithLMHeadModel"),HUr.forEach(t),Yuo=r(mCe," (FlauBERT model)"),mCe.forEach(t),Kuo=i(B),eu=n(B,"LI",{});var gCe=s(eu);wae=n(gCe,"STRONG",{});var UUr=s(wae);Zuo=r(UUr,"fnet"),UUr.forEach(t),e6o=r(gCe," \u2014 "),R$=n(gCe,"A",{href:!0});var JUr=s(R$);o6o=r(JUr,"FNetForPreTraining"),JUr.forEach(t),r6o=r(gCe," (FNet model)"),gCe.forEach(t),t6o=i(B),ou=n(B,"LI",{});var hCe=s(ou);Aae=n(hCe,"STRONG",{});var YUr=s(Aae);a6o=r(YUr,"fsmt"),YUr.forEach(t),n6o=r(hCe," \u2014 "),B$=n(hCe,"A",{href:!0});var KUr=s(B$);s6o=r(KUr,"FSMTForConditionalGeneration"),KUr.forEach(t),l6o=r(hCe," (FairSeq Machine-Translation model)"),hCe.forEach(t),i6o=i(B),ru=n(B,"LI",{});var pCe=s(ru);yae=n(pCe,"STRONG",{});var ZUr=s(yae);d6o=r(ZUr,"funnel"),ZUr.forEach(t),c6o=r(pCe," \u2014 "),P$=n(pCe,"A",{href:!0});var eJr=s(P$);f6o=r(eJr,"FunnelForPreTraining"),eJr.forEach(t),m6o=r(pCe," (Funnel Transformer model)"),pCe.forEach(t),g6o=i(B),tu=n(B,"LI",{});var _Ce=s(tu);Lae=n(_Ce,"STRONG",{});var oJr=s(Lae);h6o=r(oJr,"gpt2"),oJr.forEach(t),p6o=r(_Ce," \u2014 "),$$=n(_Ce,"A",{href:!0});var rJr=s($$);_6o=r(rJr,"GPT2LMHeadModel"),rJr.forEach(t),u6o=r(_Ce," (OpenAI GPT-2 model)"),_Ce.forEach(t),b6o=i(B),au=n(B,"LI",{});var uCe=s(au);xae=n(uCe,"STRONG",{});var tJr=s(xae);v6o=r(tJr,"ibert"),tJr.forEach(t),F6o=r(uCe," \u2014 "),I$=n(uCe,"A",{href:!0});var aJr=s(I$);T6o=r(aJr,"IBertForMaskedLM"),aJr.forEach(t),M6o=r(uCe," (I-BERT model)"),uCe.forEach(t),E6o=i(B),nu=n(B,"LI",{});var bCe=s(nu);kae=n(bCe,"STRONG",{});var nJr=s(kae);C6o=r(nJr,"layoutlm"),nJr.forEach(t),w6o=r(bCe," \u2014 "),q$=n(bCe,"A",{href:!0});var sJr=s(q$);A6o=r(sJr,"LayoutLMForMaskedLM"),sJr.forEach(t),y6o=r(bCe," (LayoutLM model)"),bCe.forEach(t),L6o=i(B),su=n(B,"LI",{});var vCe=s(su);Sae=n(vCe,"STRONG",{});var lJr=s(Sae);x6o=r(lJr,"longformer"),lJr.forEach(t),k6o=r(vCe," \u2014 "),N$=n(vCe,"A",{href:!0});var iJr=s(N$);S6o=r(iJr,"LongformerForMaskedLM"),iJr.forEach(t),R6o=r(vCe," (Longformer model)"),vCe.forEach(t),B6o=i(B),lu=n(B,"LI",{});var FCe=s(lu);Rae=n(FCe,"STRONG",{});var dJr=s(Rae);P6o=r(dJr,"lxmert"),dJr.forEach(t),$6o=r(FCe," \u2014 "),j$=n(FCe,"A",{href:!0});var cJr=s(j$);I6o=r(cJr,"LxmertForPreTraining"),cJr.forEach(t),q6o=r(FCe," (LXMERT model)"),FCe.forEach(t),N6o=i(B),iu=n(B,"LI",{});var TCe=s(iu);Bae=n(TCe,"STRONG",{});var fJr=s(Bae);j6o=r(fJr,"megatron-bert"),fJr.forEach(t),D6o=r(TCe," \u2014 "),D$=n(TCe,"A",{href:!0});var mJr=s(D$);G6o=r(mJr,"MegatronBertForPreTraining"),mJr.forEach(t),O6o=r(TCe," (MegatronBert model)"),TCe.forEach(t),V6o=i(B),du=n(B,"LI",{});var MCe=s(du);Pae=n(MCe,"STRONG",{});var gJr=s(Pae);X6o=r(gJr,"mobilebert"),gJr.forEach(t),z6o=r(MCe," \u2014 "),G$=n(MCe,"A",{href:!0});var hJr=s(G$);Q6o=r(hJr,"MobileBertForPreTraining"),hJr.forEach(t),W6o=r(MCe," (MobileBERT model)"),MCe.forEach(t),H6o=i(B),cu=n(B,"LI",{});var ECe=s(cu);$ae=n(ECe,"STRONG",{});var pJr=s($ae);U6o=r(pJr,"mpnet"),pJr.forEach(t),J6o=r(ECe," \u2014 "),O$=n(ECe,"A",{href:!0});var _Jr=s(O$);Y6o=r(_Jr,"MPNetForMaskedLM"),_Jr.forEach(t),K6o=r(ECe," (MPNet model)"),ECe.forEach(t),Z6o=i(B),fu=n(B,"LI",{});var CCe=s(fu);Iae=n(CCe,"STRONG",{});var uJr=s(Iae);e1o=r(uJr,"openai-gpt"),uJr.forEach(t),o1o=r(CCe," \u2014 "),V$=n(CCe,"A",{href:!0});var bJr=s(V$);r1o=r(bJr,"OpenAIGPTLMHeadModel"),bJr.forEach(t),t1o=r(CCe," (OpenAI GPT model)"),CCe.forEach(t),a1o=i(B),mu=n(B,"LI",{});var wCe=s(mu);qae=n(wCe,"STRONG",{});var vJr=s(qae);n1o=r(vJr,"retribert"),vJr.forEach(t),s1o=r(wCe," \u2014 "),X$=n(wCe,"A",{href:!0});var FJr=s(X$);l1o=r(FJr,"RetriBertModel"),FJr.forEach(t),i1o=r(wCe," (RetriBERT model)"),wCe.forEach(t),d1o=i(B),gu=n(B,"LI",{});var ACe=s(gu);Nae=n(ACe,"STRONG",{});var TJr=s(Nae);c1o=r(TJr,"roberta"),TJr.forEach(t),f1o=r(ACe," \u2014 "),z$=n(ACe,"A",{href:!0});var MJr=s(z$);m1o=r(MJr,"RobertaForMaskedLM"),MJr.forEach(t),g1o=r(ACe," (RoBERTa model)"),ACe.forEach(t),h1o=i(B),hu=n(B,"LI",{});var yCe=s(hu);jae=n(yCe,"STRONG",{});var EJr=s(jae);p1o=r(EJr,"squeezebert"),EJr.forEach(t),_1o=r(yCe," \u2014 "),Q$=n(yCe,"A",{href:!0});var CJr=s(Q$);u1o=r(CJr,"SqueezeBertForMaskedLM"),CJr.forEach(t),b1o=r(yCe," (SqueezeBERT model)"),yCe.forEach(t),v1o=i(B),pu=n(B,"LI",{});var LCe=s(pu);Dae=n(LCe,"STRONG",{});var wJr=s(Dae);F1o=r(wJr,"t5"),wJr.forEach(t),T1o=r(LCe," \u2014 "),W$=n(LCe,"A",{href:!0});var AJr=s(W$);M1o=r(AJr,"T5ForConditionalGeneration"),AJr.forEach(t),E1o=r(LCe," (T5 model)"),LCe.forEach(t),C1o=i(B),_u=n(B,"LI",{});var xCe=s(_u);Gae=n(xCe,"STRONG",{});var yJr=s(Gae);w1o=r(yJr,"tapas"),yJr.forEach(t),A1o=r(xCe," \u2014 "),H$=n(xCe,"A",{href:!0});var LJr=s(H$);y1o=r(LJr,"TapasForMaskedLM"),LJr.forEach(t),L1o=r(xCe," (TAPAS model)"),xCe.forEach(t),x1o=i(B),uu=n(B,"LI",{});var kCe=s(uu);Oae=n(kCe,"STRONG",{});var xJr=s(Oae);k1o=r(xJr,"transfo-xl"),xJr.forEach(t),S1o=r(kCe," \u2014 "),U$=n(kCe,"A",{href:!0});var kJr=s(U$);R1o=r(kJr,"TransfoXLLMHeadModel"),kJr.forEach(t),B1o=r(kCe," (Transformer-XL model)"),kCe.forEach(t),P1o=i(B),bu=n(B,"LI",{});var SCe=s(bu);Vae=n(SCe,"STRONG",{});var SJr=s(Vae);$1o=r(SJr,"unispeech"),SJr.forEach(t),I1o=r(SCe," \u2014 "),J$=n(SCe,"A",{href:!0});var RJr=s(J$);q1o=r(RJr,"UniSpeechForPreTraining"),RJr.forEach(t),N1o=r(SCe," (UniSpeech model)"),SCe.forEach(t),j1o=i(B),vu=n(B,"LI",{});var RCe=s(vu);Xae=n(RCe,"STRONG",{});var BJr=s(Xae);D1o=r(BJr,"unispeech-sat"),BJr.forEach(t),G1o=r(RCe," \u2014 "),Y$=n(RCe,"A",{href:!0});var PJr=s(Y$);O1o=r(PJr,"UniSpeechSatForPreTraining"),PJr.forEach(t),V1o=r(RCe," (UniSpeechSat model)"),RCe.forEach(t),X1o=i(B),Fu=n(B,"LI",{});var BCe=s(Fu);zae=n(BCe,"STRONG",{});var $Jr=s(zae);z1o=r($Jr,"visual_bert"),$Jr.forEach(t),Q1o=r(BCe," \u2014 "),K$=n(BCe,"A",{href:!0});var IJr=s(K$);W1o=r(IJr,"VisualBertForPreTraining"),IJr.forEach(t),H1o=r(BCe," (VisualBert model)"),BCe.forEach(t),U1o=i(B),Tu=n(B,"LI",{});var PCe=s(Tu);Qae=n(PCe,"STRONG",{});var qJr=s(Qae);J1o=r(qJr,"vit_mae"),qJr.forEach(t),Y1o=r(PCe," \u2014 "),Z$=n(PCe,"A",{href:!0});var NJr=s(Z$);K1o=r(NJr,"ViTMAEForPreTraining"),NJr.forEach(t),Z1o=r(PCe," (ViTMAE model)"),PCe.forEach(t),ebo=i(B),Mu=n(B,"LI",{});var $Ce=s(Mu);Wae=n($Ce,"STRONG",{});var jJr=s(Wae);obo=r(jJr,"wav2vec2"),jJr.forEach(t),rbo=r($Ce," \u2014 "),eI=n($Ce,"A",{href:!0});var DJr=s(eI);tbo=r(DJr,"Wav2Vec2ForPreTraining"),DJr.forEach(t),abo=r($Ce," (Wav2Vec2 model)"),$Ce.forEach(t),nbo=i(B),Eu=n(B,"LI",{});var ICe=s(Eu);Hae=n(ICe,"STRONG",{});var GJr=s(Hae);sbo=r(GJr,"xlm"),GJr.forEach(t),lbo=r(ICe," \u2014 "),oI=n(ICe,"A",{href:!0});var OJr=s(oI);ibo=r(OJr,"XLMWithLMHeadModel"),OJr.forEach(t),dbo=r(ICe," (XLM model)"),ICe.forEach(t),cbo=i(B),Cu=n(B,"LI",{});var qCe=s(Cu);Uae=n(qCe,"STRONG",{});var VJr=s(Uae);fbo=r(VJr,"xlm-roberta"),VJr.forEach(t),mbo=r(qCe," \u2014 "),rI=n(qCe,"A",{href:!0});var XJr=s(rI);gbo=r(XJr,"XLMRobertaForMaskedLM"),XJr.forEach(t),hbo=r(qCe," (XLM-RoBERTa model)"),qCe.forEach(t),pbo=i(B),wu=n(B,"LI",{});var NCe=s(wu);Jae=n(NCe,"STRONG",{});var zJr=s(Jae);_bo=r(zJr,"xlm-roberta-xl"),zJr.forEach(t),ubo=r(NCe," \u2014 "),tI=n(NCe,"A",{href:!0});var QJr=s(tI);bbo=r(QJr,"XLMRobertaXLForMaskedLM"),QJr.forEach(t),vbo=r(NCe," (XLM-RoBERTa-XL model)"),NCe.forEach(t),Fbo=i(B),Au=n(B,"LI",{});var jCe=s(Au);Yae=n(jCe,"STRONG",{});var WJr=s(Yae);Tbo=r(WJr,"xlnet"),WJr.forEach(t),Mbo=r(jCe," \u2014 "),aI=n(jCe,"A",{href:!0});var HJr=s(aI);Ebo=r(HJr,"XLNetLMHeadModel"),HJr.forEach(t),Cbo=r(jCe," (XLNet model)"),jCe.forEach(t),B.forEach(t),wbo=i(Gt),yu=n(Gt,"P",{});var DCe=s(yu);Abo=r(DCe,"The model is set in evaluation mode by default using "),Kae=n(DCe,"CODE",{});var UJr=s(Kae);ybo=r(UJr,"model.eval()"),UJr.forEach(t),Lbo=r(DCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zae=n(DCe,"CODE",{});var JJr=s(Zae);xbo=r(JJr,"model.train()"),JJr.forEach(t),DCe.forEach(t),kbo=i(Gt),ene=n(Gt,"P",{});var YJr=s(ene);Sbo=r(YJr,"Examples:"),YJr.forEach(t),Rbo=i(Gt),m(AC.$$.fragment,Gt),Gt.forEach(t),Ks.forEach(t),uBe=i(c),sd=n(c,"H2",{class:!0});var A$e=s(sd);Lu=n(A$e,"A",{id:!0,class:!0,href:!0});var KJr=s(Lu);one=n(KJr,"SPAN",{});var ZJr=s(one);m(yC.$$.fragment,ZJr),ZJr.forEach(t),KJr.forEach(t),Bbo=i(A$e),rne=n(A$e,"SPAN",{});var eYr=s(rne);Pbo=r(eYr,"AutoModelForCausalLM"),eYr.forEach(t),A$e.forEach(t),bBe=i(c),Ko=n(c,"DIV",{class:!0});var el=s(Ko);m(LC.$$.fragment,el),$bo=i(el),ld=n(el,"P",{});var DU=s(ld);Ibo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nI=n(DU,"A",{href:!0});var oYr=s(nI);qbo=r(oYr,"from_pretrained()"),oYr.forEach(t),Nbo=r(DU," class method or the "),sI=n(DU,"A",{href:!0});var rYr=s(sI);jbo=r(rYr,"from_config()"),rYr.forEach(t),Dbo=r(DU,` class
method.`),DU.forEach(t),Gbo=i(el),xC=n(el,"P",{});var y$e=s(xC);Obo=r(y$e,"This class cannot be instantiated directly using "),tne=n(y$e,"CODE",{});var tYr=s(tne);Vbo=r(tYr,"__init__()"),tYr.forEach(t),Xbo=r(y$e," (throws an error)."),y$e.forEach(t),zbo=i(el),Qr=n(el,"DIV",{class:!0});var ol=s(Qr);m(kC.$$.fragment,ol),Qbo=i(ol),ane=n(ol,"P",{});var aYr=s(ane);Wbo=r(aYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aYr.forEach(t),Hbo=i(ol),id=n(ol,"P",{});var GU=s(id);Ubo=r(GU,`Note:
Loading a model from its configuration file does `),nne=n(GU,"STRONG",{});var nYr=s(nne);Jbo=r(nYr,"not"),nYr.forEach(t),Ybo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lI=n(GU,"A",{href:!0});var sYr=s(lI);Kbo=r(sYr,"from_pretrained()"),sYr.forEach(t),Zbo=r(GU," to load the model weights."),GU.forEach(t),e2o=i(ol),sne=n(ol,"P",{});var lYr=s(sne);o2o=r(lYr,"Examples:"),lYr.forEach(t),r2o=i(ol),m(SC.$$.fragment,ol),ol.forEach(t),t2o=i(el),je=n(el,"DIV",{class:!0});var Ot=s(je);m(RC.$$.fragment,Ot),a2o=i(Ot),lne=n(Ot,"P",{});var iYr=s(lne);n2o=r(iYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iYr.forEach(t),s2o=i(Ot),Qa=n(Ot,"P",{});var NE=s(Qa);l2o=r(NE,"The model class to instantiate is selected based on the "),ine=n(NE,"CODE",{});var dYr=s(ine);i2o=r(dYr,"model_type"),dYr.forEach(t),d2o=r(NE,` property of the config object (either
passed as an argument or loaded from `),dne=n(NE,"CODE",{});var cYr=s(dne);c2o=r(cYr,"pretrained_model_name_or_path"),cYr.forEach(t),f2o=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cne=n(NE,"CODE",{});var fYr=s(cne);m2o=r(fYr,"pretrained_model_name_or_path"),fYr.forEach(t),g2o=r(NE,":"),NE.forEach(t),h2o=i(Ot),$=n(Ot,"UL",{});var q=s($);xu=n(q,"LI",{});var GCe=s(xu);fne=n(GCe,"STRONG",{});var mYr=s(fne);p2o=r(mYr,"bart"),mYr.forEach(t),_2o=r(GCe," \u2014 "),iI=n(GCe,"A",{href:!0});var gYr=s(iI);u2o=r(gYr,"BartForCausalLM"),gYr.forEach(t),b2o=r(GCe," (BART model)"),GCe.forEach(t),v2o=i(q),ku=n(q,"LI",{});var OCe=s(ku);mne=n(OCe,"STRONG",{});var hYr=s(mne);F2o=r(hYr,"bert"),hYr.forEach(t),T2o=r(OCe," \u2014 "),dI=n(OCe,"A",{href:!0});var pYr=s(dI);M2o=r(pYr,"BertLMHeadModel"),pYr.forEach(t),E2o=r(OCe," (BERT model)"),OCe.forEach(t),C2o=i(q),Su=n(q,"LI",{});var VCe=s(Su);gne=n(VCe,"STRONG",{});var _Yr=s(gne);w2o=r(_Yr,"bert-generation"),_Yr.forEach(t),A2o=r(VCe," \u2014 "),cI=n(VCe,"A",{href:!0});var uYr=s(cI);y2o=r(uYr,"BertGenerationDecoder"),uYr.forEach(t),L2o=r(VCe," (Bert Generation model)"),VCe.forEach(t),x2o=i(q),Ru=n(q,"LI",{});var XCe=s(Ru);hne=n(XCe,"STRONG",{});var bYr=s(hne);k2o=r(bYr,"big_bird"),bYr.forEach(t),S2o=r(XCe," \u2014 "),fI=n(XCe,"A",{href:!0});var vYr=s(fI);R2o=r(vYr,"BigBirdForCausalLM"),vYr.forEach(t),B2o=r(XCe," (BigBird model)"),XCe.forEach(t),P2o=i(q),Bu=n(q,"LI",{});var zCe=s(Bu);pne=n(zCe,"STRONG",{});var FYr=s(pne);$2o=r(FYr,"bigbird_pegasus"),FYr.forEach(t),I2o=r(zCe," \u2014 "),mI=n(zCe,"A",{href:!0});var TYr=s(mI);q2o=r(TYr,"BigBirdPegasusForCausalLM"),TYr.forEach(t),N2o=r(zCe," (BigBirdPegasus model)"),zCe.forEach(t),j2o=i(q),Pu=n(q,"LI",{});var QCe=s(Pu);_ne=n(QCe,"STRONG",{});var MYr=s(_ne);D2o=r(MYr,"blenderbot"),MYr.forEach(t),G2o=r(QCe," \u2014 "),gI=n(QCe,"A",{href:!0});var EYr=s(gI);O2o=r(EYr,"BlenderbotForCausalLM"),EYr.forEach(t),V2o=r(QCe," (Blenderbot model)"),QCe.forEach(t),X2o=i(q),$u=n(q,"LI",{});var WCe=s($u);une=n(WCe,"STRONG",{});var CYr=s(une);z2o=r(CYr,"blenderbot-small"),CYr.forEach(t),Q2o=r(WCe," \u2014 "),hI=n(WCe,"A",{href:!0});var wYr=s(hI);W2o=r(wYr,"BlenderbotSmallForCausalLM"),wYr.forEach(t),H2o=r(WCe," (BlenderbotSmall model)"),WCe.forEach(t),U2o=i(q),Iu=n(q,"LI",{});var HCe=s(Iu);bne=n(HCe,"STRONG",{});var AYr=s(bne);J2o=r(AYr,"camembert"),AYr.forEach(t),Y2o=r(HCe," \u2014 "),pI=n(HCe,"A",{href:!0});var yYr=s(pI);K2o=r(yYr,"CamembertForCausalLM"),yYr.forEach(t),Z2o=r(HCe," (CamemBERT model)"),HCe.forEach(t),e5o=i(q),qu=n(q,"LI",{});var UCe=s(qu);vne=n(UCe,"STRONG",{});var LYr=s(vne);o5o=r(LYr,"ctrl"),LYr.forEach(t),r5o=r(UCe," \u2014 "),_I=n(UCe,"A",{href:!0});var xYr=s(_I);t5o=r(xYr,"CTRLLMHeadModel"),xYr.forEach(t),a5o=r(UCe," (CTRL model)"),UCe.forEach(t),n5o=i(q),Nu=n(q,"LI",{});var JCe=s(Nu);Fne=n(JCe,"STRONG",{});var kYr=s(Fne);s5o=r(kYr,"data2vec-text"),kYr.forEach(t),l5o=r(JCe," \u2014 "),uI=n(JCe,"A",{href:!0});var SYr=s(uI);i5o=r(SYr,"Data2VecTextForCausalLM"),SYr.forEach(t),d5o=r(JCe," (Data2VecText model)"),JCe.forEach(t),c5o=i(q),ju=n(q,"LI",{});var YCe=s(ju);Tne=n(YCe,"STRONG",{});var RYr=s(Tne);f5o=r(RYr,"electra"),RYr.forEach(t),m5o=r(YCe," \u2014 "),bI=n(YCe,"A",{href:!0});var BYr=s(bI);g5o=r(BYr,"ElectraForCausalLM"),BYr.forEach(t),h5o=r(YCe," (ELECTRA model)"),YCe.forEach(t),p5o=i(q),Du=n(q,"LI",{});var KCe=s(Du);Mne=n(KCe,"STRONG",{});var PYr=s(Mne);_5o=r(PYr,"gpt2"),PYr.forEach(t),u5o=r(KCe," \u2014 "),vI=n(KCe,"A",{href:!0});var $Yr=s(vI);b5o=r($Yr,"GPT2LMHeadModel"),$Yr.forEach(t),v5o=r(KCe," (OpenAI GPT-2 model)"),KCe.forEach(t),F5o=i(q),Gu=n(q,"LI",{});var ZCe=s(Gu);Ene=n(ZCe,"STRONG",{});var IYr=s(Ene);T5o=r(IYr,"gpt_neo"),IYr.forEach(t),M5o=r(ZCe," \u2014 "),FI=n(ZCe,"A",{href:!0});var qYr=s(FI);E5o=r(qYr,"GPTNeoForCausalLM"),qYr.forEach(t),C5o=r(ZCe," (GPT Neo model)"),ZCe.forEach(t),w5o=i(q),Ou=n(q,"LI",{});var ewe=s(Ou);Cne=n(ewe,"STRONG",{});var NYr=s(Cne);A5o=r(NYr,"gpt_neox"),NYr.forEach(t),y5o=r(ewe," \u2014 "),TI=n(ewe,"A",{href:!0});var jYr=s(TI);L5o=r(jYr,"GPTNeoXForCausalLM"),jYr.forEach(t),x5o=r(ewe," (GPTNeoX model)"),ewe.forEach(t),k5o=i(q),Vu=n(q,"LI",{});var owe=s(Vu);wne=n(owe,"STRONG",{});var DYr=s(wne);S5o=r(DYr,"gptj"),DYr.forEach(t),R5o=r(owe," \u2014 "),MI=n(owe,"A",{href:!0});var GYr=s(MI);B5o=r(GYr,"GPTJForCausalLM"),GYr.forEach(t),P5o=r(owe," (GPT-J model)"),owe.forEach(t),$5o=i(q),Xu=n(q,"LI",{});var rwe=s(Xu);Ane=n(rwe,"STRONG",{});var OYr=s(Ane);I5o=r(OYr,"marian"),OYr.forEach(t),q5o=r(rwe," \u2014 "),EI=n(rwe,"A",{href:!0});var VYr=s(EI);N5o=r(VYr,"MarianForCausalLM"),VYr.forEach(t),j5o=r(rwe," (Marian model)"),rwe.forEach(t),D5o=i(q),zu=n(q,"LI",{});var twe=s(zu);yne=n(twe,"STRONG",{});var XYr=s(yne);G5o=r(XYr,"mbart"),XYr.forEach(t),O5o=r(twe," \u2014 "),CI=n(twe,"A",{href:!0});var zYr=s(CI);V5o=r(zYr,"MBartForCausalLM"),zYr.forEach(t),X5o=r(twe," (mBART model)"),twe.forEach(t),z5o=i(q),Qu=n(q,"LI",{});var awe=s(Qu);Lne=n(awe,"STRONG",{});var QYr=s(Lne);Q5o=r(QYr,"megatron-bert"),QYr.forEach(t),W5o=r(awe," \u2014 "),wI=n(awe,"A",{href:!0});var WYr=s(wI);H5o=r(WYr,"MegatronBertForCausalLM"),WYr.forEach(t),U5o=r(awe," (MegatronBert model)"),awe.forEach(t),J5o=i(q),Wu=n(q,"LI",{});var nwe=s(Wu);xne=n(nwe,"STRONG",{});var HYr=s(xne);Y5o=r(HYr,"openai-gpt"),HYr.forEach(t),K5o=r(nwe," \u2014 "),AI=n(nwe,"A",{href:!0});var UYr=s(AI);Z5o=r(UYr,"OpenAIGPTLMHeadModel"),UYr.forEach(t),evo=r(nwe," (OpenAI GPT model)"),nwe.forEach(t),ovo=i(q),Hu=n(q,"LI",{});var swe=s(Hu);kne=n(swe,"STRONG",{});var JYr=s(kne);rvo=r(JYr,"pegasus"),JYr.forEach(t),tvo=r(swe," \u2014 "),yI=n(swe,"A",{href:!0});var YYr=s(yI);avo=r(YYr,"PegasusForCausalLM"),YYr.forEach(t),nvo=r(swe," (Pegasus model)"),swe.forEach(t),svo=i(q),Uu=n(q,"LI",{});var lwe=s(Uu);Sne=n(lwe,"STRONG",{});var KYr=s(Sne);lvo=r(KYr,"plbart"),KYr.forEach(t),ivo=r(lwe," \u2014 "),LI=n(lwe,"A",{href:!0});var ZYr=s(LI);dvo=r(ZYr,"PLBartForCausalLM"),ZYr.forEach(t),cvo=r(lwe," (PLBart model)"),lwe.forEach(t),fvo=i(q),Ju=n(q,"LI",{});var iwe=s(Ju);Rne=n(iwe,"STRONG",{});var eKr=s(Rne);mvo=r(eKr,"prophetnet"),eKr.forEach(t),gvo=r(iwe," \u2014 "),xI=n(iwe,"A",{href:!0});var oKr=s(xI);hvo=r(oKr,"ProphetNetForCausalLM"),oKr.forEach(t),pvo=r(iwe," (ProphetNet model)"),iwe.forEach(t),_vo=i(q),Yu=n(q,"LI",{});var dwe=s(Yu);Bne=n(dwe,"STRONG",{});var rKr=s(Bne);uvo=r(rKr,"qdqbert"),rKr.forEach(t),bvo=r(dwe," \u2014 "),kI=n(dwe,"A",{href:!0});var tKr=s(kI);vvo=r(tKr,"QDQBertLMHeadModel"),tKr.forEach(t),Fvo=r(dwe," (QDQBert model)"),dwe.forEach(t),Tvo=i(q),Ku=n(q,"LI",{});var cwe=s(Ku);Pne=n(cwe,"STRONG",{});var aKr=s(Pne);Mvo=r(aKr,"reformer"),aKr.forEach(t),Evo=r(cwe," \u2014 "),SI=n(cwe,"A",{href:!0});var nKr=s(SI);Cvo=r(nKr,"ReformerModelWithLMHead"),nKr.forEach(t),wvo=r(cwe," (Reformer model)"),cwe.forEach(t),Avo=i(q),Zu=n(q,"LI",{});var fwe=s(Zu);$ne=n(fwe,"STRONG",{});var sKr=s($ne);yvo=r(sKr,"rembert"),sKr.forEach(t),Lvo=r(fwe," \u2014 "),RI=n(fwe,"A",{href:!0});var lKr=s(RI);xvo=r(lKr,"RemBertForCausalLM"),lKr.forEach(t),kvo=r(fwe," (RemBERT model)"),fwe.forEach(t),Svo=i(q),e6=n(q,"LI",{});var mwe=s(e6);Ine=n(mwe,"STRONG",{});var iKr=s(Ine);Rvo=r(iKr,"roberta"),iKr.forEach(t),Bvo=r(mwe," \u2014 "),BI=n(mwe,"A",{href:!0});var dKr=s(BI);Pvo=r(dKr,"RobertaForCausalLM"),dKr.forEach(t),$vo=r(mwe," (RoBERTa model)"),mwe.forEach(t),Ivo=i(q),o6=n(q,"LI",{});var gwe=s(o6);qne=n(gwe,"STRONG",{});var cKr=s(qne);qvo=r(cKr,"roformer"),cKr.forEach(t),Nvo=r(gwe," \u2014 "),PI=n(gwe,"A",{href:!0});var fKr=s(PI);jvo=r(fKr,"RoFormerForCausalLM"),fKr.forEach(t),Dvo=r(gwe," (RoFormer model)"),gwe.forEach(t),Gvo=i(q),r6=n(q,"LI",{});var hwe=s(r6);Nne=n(hwe,"STRONG",{});var mKr=s(Nne);Ovo=r(mKr,"speech_to_text_2"),mKr.forEach(t),Vvo=r(hwe," \u2014 "),$I=n(hwe,"A",{href:!0});var gKr=s($I);Xvo=r(gKr,"Speech2Text2ForCausalLM"),gKr.forEach(t),zvo=r(hwe," (Speech2Text2 model)"),hwe.forEach(t),Qvo=i(q),t6=n(q,"LI",{});var pwe=s(t6);jne=n(pwe,"STRONG",{});var hKr=s(jne);Wvo=r(hKr,"transfo-xl"),hKr.forEach(t),Hvo=r(pwe," \u2014 "),II=n(pwe,"A",{href:!0});var pKr=s(II);Uvo=r(pKr,"TransfoXLLMHeadModel"),pKr.forEach(t),Jvo=r(pwe," (Transformer-XL model)"),pwe.forEach(t),Yvo=i(q),a6=n(q,"LI",{});var _we=s(a6);Dne=n(_we,"STRONG",{});var _Kr=s(Dne);Kvo=r(_Kr,"trocr"),_Kr.forEach(t),Zvo=r(_we," \u2014 "),qI=n(_we,"A",{href:!0});var uKr=s(qI);eFo=r(uKr,"TrOCRForCausalLM"),uKr.forEach(t),oFo=r(_we," (TrOCR model)"),_we.forEach(t),rFo=i(q),n6=n(q,"LI",{});var uwe=s(n6);Gne=n(uwe,"STRONG",{});var bKr=s(Gne);tFo=r(bKr,"xglm"),bKr.forEach(t),aFo=r(uwe," \u2014 "),NI=n(uwe,"A",{href:!0});var vKr=s(NI);nFo=r(vKr,"XGLMForCausalLM"),vKr.forEach(t),sFo=r(uwe," (XGLM model)"),uwe.forEach(t),lFo=i(q),s6=n(q,"LI",{});var bwe=s(s6);One=n(bwe,"STRONG",{});var FKr=s(One);iFo=r(FKr,"xlm"),FKr.forEach(t),dFo=r(bwe," \u2014 "),jI=n(bwe,"A",{href:!0});var TKr=s(jI);cFo=r(TKr,"XLMWithLMHeadModel"),TKr.forEach(t),fFo=r(bwe," (XLM model)"),bwe.forEach(t),mFo=i(q),l6=n(q,"LI",{});var vwe=s(l6);Vne=n(vwe,"STRONG",{});var MKr=s(Vne);gFo=r(MKr,"xlm-prophetnet"),MKr.forEach(t),hFo=r(vwe," \u2014 "),DI=n(vwe,"A",{href:!0});var EKr=s(DI);pFo=r(EKr,"XLMProphetNetForCausalLM"),EKr.forEach(t),_Fo=r(vwe," (XLMProphetNet model)"),vwe.forEach(t),uFo=i(q),i6=n(q,"LI",{});var Fwe=s(i6);Xne=n(Fwe,"STRONG",{});var CKr=s(Xne);bFo=r(CKr,"xlm-roberta"),CKr.forEach(t),vFo=r(Fwe," \u2014 "),GI=n(Fwe,"A",{href:!0});var wKr=s(GI);FFo=r(wKr,"XLMRobertaForCausalLM"),wKr.forEach(t),TFo=r(Fwe," (XLM-RoBERTa model)"),Fwe.forEach(t),MFo=i(q),d6=n(q,"LI",{});var Twe=s(d6);zne=n(Twe,"STRONG",{});var AKr=s(zne);EFo=r(AKr,"xlm-roberta-xl"),AKr.forEach(t),CFo=r(Twe," \u2014 "),OI=n(Twe,"A",{href:!0});var yKr=s(OI);wFo=r(yKr,"XLMRobertaXLForCausalLM"),yKr.forEach(t),AFo=r(Twe," (XLM-RoBERTa-XL model)"),Twe.forEach(t),yFo=i(q),c6=n(q,"LI",{});var Mwe=s(c6);Qne=n(Mwe,"STRONG",{});var LKr=s(Qne);LFo=r(LKr,"xlnet"),LKr.forEach(t),xFo=r(Mwe," \u2014 "),VI=n(Mwe,"A",{href:!0});var xKr=s(VI);kFo=r(xKr,"XLNetLMHeadModel"),xKr.forEach(t),SFo=r(Mwe," (XLNet model)"),Mwe.forEach(t),q.forEach(t),RFo=i(Ot),f6=n(Ot,"P",{});var Ewe=s(f6);BFo=r(Ewe,"The model is set in evaluation mode by default using "),Wne=n(Ewe,"CODE",{});var kKr=s(Wne);PFo=r(kKr,"model.eval()"),kKr.forEach(t),$Fo=r(Ewe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hne=n(Ewe,"CODE",{});var SKr=s(Hne);IFo=r(SKr,"model.train()"),SKr.forEach(t),Ewe.forEach(t),qFo=i(Ot),Une=n(Ot,"P",{});var RKr=s(Une);NFo=r(RKr,"Examples:"),RKr.forEach(t),jFo=i(Ot),m(BC.$$.fragment,Ot),Ot.forEach(t),el.forEach(t),vBe=i(c),dd=n(c,"H2",{class:!0});var L$e=s(dd);m6=n(L$e,"A",{id:!0,class:!0,href:!0});var BKr=s(m6);Jne=n(BKr,"SPAN",{});var PKr=s(Jne);m(PC.$$.fragment,PKr),PKr.forEach(t),BKr.forEach(t),DFo=i(L$e),Yne=n(L$e,"SPAN",{});var $Kr=s(Yne);GFo=r($Kr,"AutoModelForMaskedLM"),$Kr.forEach(t),L$e.forEach(t),FBe=i(c),Zo=n(c,"DIV",{class:!0});var rl=s(Zo);m($C.$$.fragment,rl),OFo=i(rl),cd=n(rl,"P",{});var OU=s(cd);VFo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XI=n(OU,"A",{href:!0});var IKr=s(XI);XFo=r(IKr,"from_pretrained()"),IKr.forEach(t),zFo=r(OU," class method or the "),zI=n(OU,"A",{href:!0});var qKr=s(zI);QFo=r(qKr,"from_config()"),qKr.forEach(t),WFo=r(OU,` class
method.`),OU.forEach(t),HFo=i(rl),IC=n(rl,"P",{});var x$e=s(IC);UFo=r(x$e,"This class cannot be instantiated directly using "),Kne=n(x$e,"CODE",{});var NKr=s(Kne);JFo=r(NKr,"__init__()"),NKr.forEach(t),YFo=r(x$e," (throws an error)."),x$e.forEach(t),KFo=i(rl),Wr=n(rl,"DIV",{class:!0});var tl=s(Wr);m(qC.$$.fragment,tl),ZFo=i(tl),Zne=n(tl,"P",{});var jKr=s(Zne);eTo=r(jKr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jKr.forEach(t),oTo=i(tl),fd=n(tl,"P",{});var VU=s(fd);rTo=r(VU,`Note:
Loading a model from its configuration file does `),ese=n(VU,"STRONG",{});var DKr=s(ese);tTo=r(DKr,"not"),DKr.forEach(t),aTo=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QI=n(VU,"A",{href:!0});var GKr=s(QI);nTo=r(GKr,"from_pretrained()"),GKr.forEach(t),sTo=r(VU," to load the model weights."),VU.forEach(t),lTo=i(tl),ose=n(tl,"P",{});var OKr=s(ose);iTo=r(OKr,"Examples:"),OKr.forEach(t),dTo=i(tl),m(NC.$$.fragment,tl),tl.forEach(t),cTo=i(rl),De=n(rl,"DIV",{class:!0});var Vt=s(De);m(jC.$$.fragment,Vt),fTo=i(Vt),rse=n(Vt,"P",{});var VKr=s(rse);mTo=r(VKr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),VKr.forEach(t),gTo=i(Vt),Wa=n(Vt,"P",{});var jE=s(Wa);hTo=r(jE,"The model class to instantiate is selected based on the "),tse=n(jE,"CODE",{});var XKr=s(tse);pTo=r(XKr,"model_type"),XKr.forEach(t),_To=r(jE,` property of the config object (either
passed as an argument or loaded from `),ase=n(jE,"CODE",{});var zKr=s(ase);uTo=r(zKr,"pretrained_model_name_or_path"),zKr.forEach(t),bTo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=n(jE,"CODE",{});var QKr=s(nse);vTo=r(QKr,"pretrained_model_name_or_path"),QKr.forEach(t),FTo=r(jE,":"),jE.forEach(t),TTo=i(Vt),I=n(Vt,"UL",{});var N=s(I);g6=n(N,"LI",{});var Cwe=s(g6);sse=n(Cwe,"STRONG",{});var WKr=s(sse);MTo=r(WKr,"albert"),WKr.forEach(t),ETo=r(Cwe," \u2014 "),WI=n(Cwe,"A",{href:!0});var HKr=s(WI);CTo=r(HKr,"AlbertForMaskedLM"),HKr.forEach(t),wTo=r(Cwe," (ALBERT model)"),Cwe.forEach(t),ATo=i(N),h6=n(N,"LI",{});var wwe=s(h6);lse=n(wwe,"STRONG",{});var UKr=s(lse);yTo=r(UKr,"bart"),UKr.forEach(t),LTo=r(wwe," \u2014 "),HI=n(wwe,"A",{href:!0});var JKr=s(HI);xTo=r(JKr,"BartForConditionalGeneration"),JKr.forEach(t),kTo=r(wwe," (BART model)"),wwe.forEach(t),STo=i(N),p6=n(N,"LI",{});var Awe=s(p6);ise=n(Awe,"STRONG",{});var YKr=s(ise);RTo=r(YKr,"bert"),YKr.forEach(t),BTo=r(Awe," \u2014 "),UI=n(Awe,"A",{href:!0});var KKr=s(UI);PTo=r(KKr,"BertForMaskedLM"),KKr.forEach(t),$To=r(Awe," (BERT model)"),Awe.forEach(t),ITo=i(N),_6=n(N,"LI",{});var ywe=s(_6);dse=n(ywe,"STRONG",{});var ZKr=s(dse);qTo=r(ZKr,"big_bird"),ZKr.forEach(t),NTo=r(ywe," \u2014 "),JI=n(ywe,"A",{href:!0});var eZr=s(JI);jTo=r(eZr,"BigBirdForMaskedLM"),eZr.forEach(t),DTo=r(ywe," (BigBird model)"),ywe.forEach(t),GTo=i(N),u6=n(N,"LI",{});var Lwe=s(u6);cse=n(Lwe,"STRONG",{});var oZr=s(cse);OTo=r(oZr,"camembert"),oZr.forEach(t),VTo=r(Lwe," \u2014 "),YI=n(Lwe,"A",{href:!0});var rZr=s(YI);XTo=r(rZr,"CamembertForMaskedLM"),rZr.forEach(t),zTo=r(Lwe," (CamemBERT model)"),Lwe.forEach(t),QTo=i(N),b6=n(N,"LI",{});var xwe=s(b6);fse=n(xwe,"STRONG",{});var tZr=s(fse);WTo=r(tZr,"convbert"),tZr.forEach(t),HTo=r(xwe," \u2014 "),KI=n(xwe,"A",{href:!0});var aZr=s(KI);UTo=r(aZr,"ConvBertForMaskedLM"),aZr.forEach(t),JTo=r(xwe," (ConvBERT model)"),xwe.forEach(t),YTo=i(N),v6=n(N,"LI",{});var kwe=s(v6);mse=n(kwe,"STRONG",{});var nZr=s(mse);KTo=r(nZr,"data2vec-text"),nZr.forEach(t),ZTo=r(kwe," \u2014 "),ZI=n(kwe,"A",{href:!0});var sZr=s(ZI);e9o=r(sZr,"Data2VecTextForMaskedLM"),sZr.forEach(t),o9o=r(kwe," (Data2VecText model)"),kwe.forEach(t),r9o=i(N),F6=n(N,"LI",{});var Swe=s(F6);gse=n(Swe,"STRONG",{});var lZr=s(gse);t9o=r(lZr,"deberta"),lZr.forEach(t),a9o=r(Swe," \u2014 "),eq=n(Swe,"A",{href:!0});var iZr=s(eq);n9o=r(iZr,"DebertaForMaskedLM"),iZr.forEach(t),s9o=r(Swe," (DeBERTa model)"),Swe.forEach(t),l9o=i(N),T6=n(N,"LI",{});var Rwe=s(T6);hse=n(Rwe,"STRONG",{});var dZr=s(hse);i9o=r(dZr,"deberta-v2"),dZr.forEach(t),d9o=r(Rwe," \u2014 "),oq=n(Rwe,"A",{href:!0});var cZr=s(oq);c9o=r(cZr,"DebertaV2ForMaskedLM"),cZr.forEach(t),f9o=r(Rwe," (DeBERTa-v2 model)"),Rwe.forEach(t),m9o=i(N),M6=n(N,"LI",{});var Bwe=s(M6);pse=n(Bwe,"STRONG",{});var fZr=s(pse);g9o=r(fZr,"distilbert"),fZr.forEach(t),h9o=r(Bwe," \u2014 "),rq=n(Bwe,"A",{href:!0});var mZr=s(rq);p9o=r(mZr,"DistilBertForMaskedLM"),mZr.forEach(t),_9o=r(Bwe," (DistilBERT model)"),Bwe.forEach(t),u9o=i(N),E6=n(N,"LI",{});var Pwe=s(E6);_se=n(Pwe,"STRONG",{});var gZr=s(_se);b9o=r(gZr,"electra"),gZr.forEach(t),v9o=r(Pwe," \u2014 "),tq=n(Pwe,"A",{href:!0});var hZr=s(tq);F9o=r(hZr,"ElectraForMaskedLM"),hZr.forEach(t),T9o=r(Pwe," (ELECTRA model)"),Pwe.forEach(t),M9o=i(N),C6=n(N,"LI",{});var $we=s(C6);use=n($we,"STRONG",{});var pZr=s(use);E9o=r(pZr,"flaubert"),pZr.forEach(t),C9o=r($we," \u2014 "),aq=n($we,"A",{href:!0});var _Zr=s(aq);w9o=r(_Zr,"FlaubertWithLMHeadModel"),_Zr.forEach(t),A9o=r($we," (FlauBERT model)"),$we.forEach(t),y9o=i(N),w6=n(N,"LI",{});var Iwe=s(w6);bse=n(Iwe,"STRONG",{});var uZr=s(bse);L9o=r(uZr,"fnet"),uZr.forEach(t),x9o=r(Iwe," \u2014 "),nq=n(Iwe,"A",{href:!0});var bZr=s(nq);k9o=r(bZr,"FNetForMaskedLM"),bZr.forEach(t),S9o=r(Iwe," (FNet model)"),Iwe.forEach(t),R9o=i(N),A6=n(N,"LI",{});var qwe=s(A6);vse=n(qwe,"STRONG",{});var vZr=s(vse);B9o=r(vZr,"funnel"),vZr.forEach(t),P9o=r(qwe," \u2014 "),sq=n(qwe,"A",{href:!0});var FZr=s(sq);$9o=r(FZr,"FunnelForMaskedLM"),FZr.forEach(t),I9o=r(qwe," (Funnel Transformer model)"),qwe.forEach(t),q9o=i(N),y6=n(N,"LI",{});var Nwe=s(y6);Fse=n(Nwe,"STRONG",{});var TZr=s(Fse);N9o=r(TZr,"ibert"),TZr.forEach(t),j9o=r(Nwe," \u2014 "),lq=n(Nwe,"A",{href:!0});var MZr=s(lq);D9o=r(MZr,"IBertForMaskedLM"),MZr.forEach(t),G9o=r(Nwe," (I-BERT model)"),Nwe.forEach(t),O9o=i(N),L6=n(N,"LI",{});var jwe=s(L6);Tse=n(jwe,"STRONG",{});var EZr=s(Tse);V9o=r(EZr,"layoutlm"),EZr.forEach(t),X9o=r(jwe," \u2014 "),iq=n(jwe,"A",{href:!0});var CZr=s(iq);z9o=r(CZr,"LayoutLMForMaskedLM"),CZr.forEach(t),Q9o=r(jwe," (LayoutLM model)"),jwe.forEach(t),W9o=i(N),x6=n(N,"LI",{});var Dwe=s(x6);Mse=n(Dwe,"STRONG",{});var wZr=s(Mse);H9o=r(wZr,"longformer"),wZr.forEach(t),U9o=r(Dwe," \u2014 "),dq=n(Dwe,"A",{href:!0});var AZr=s(dq);J9o=r(AZr,"LongformerForMaskedLM"),AZr.forEach(t),Y9o=r(Dwe," (Longformer model)"),Dwe.forEach(t),K9o=i(N),k6=n(N,"LI",{});var Gwe=s(k6);Ese=n(Gwe,"STRONG",{});var yZr=s(Ese);Z9o=r(yZr,"mbart"),yZr.forEach(t),eMo=r(Gwe," \u2014 "),cq=n(Gwe,"A",{href:!0});var LZr=s(cq);oMo=r(LZr,"MBartForConditionalGeneration"),LZr.forEach(t),rMo=r(Gwe," (mBART model)"),Gwe.forEach(t),tMo=i(N),S6=n(N,"LI",{});var Owe=s(S6);Cse=n(Owe,"STRONG",{});var xZr=s(Cse);aMo=r(xZr,"megatron-bert"),xZr.forEach(t),nMo=r(Owe," \u2014 "),fq=n(Owe,"A",{href:!0});var kZr=s(fq);sMo=r(kZr,"MegatronBertForMaskedLM"),kZr.forEach(t),lMo=r(Owe," (MegatronBert model)"),Owe.forEach(t),iMo=i(N),R6=n(N,"LI",{});var Vwe=s(R6);wse=n(Vwe,"STRONG",{});var SZr=s(wse);dMo=r(SZr,"mobilebert"),SZr.forEach(t),cMo=r(Vwe," \u2014 "),mq=n(Vwe,"A",{href:!0});var RZr=s(mq);fMo=r(RZr,"MobileBertForMaskedLM"),RZr.forEach(t),mMo=r(Vwe," (MobileBERT model)"),Vwe.forEach(t),gMo=i(N),B6=n(N,"LI",{});var Xwe=s(B6);Ase=n(Xwe,"STRONG",{});var BZr=s(Ase);hMo=r(BZr,"mpnet"),BZr.forEach(t),pMo=r(Xwe," \u2014 "),gq=n(Xwe,"A",{href:!0});var PZr=s(gq);_Mo=r(PZr,"MPNetForMaskedLM"),PZr.forEach(t),uMo=r(Xwe," (MPNet model)"),Xwe.forEach(t),bMo=i(N),P6=n(N,"LI",{});var zwe=s(P6);yse=n(zwe,"STRONG",{});var $Zr=s(yse);vMo=r($Zr,"nystromformer"),$Zr.forEach(t),FMo=r(zwe," \u2014 "),hq=n(zwe,"A",{href:!0});var IZr=s(hq);TMo=r(IZr,"NystromformerForMaskedLM"),IZr.forEach(t),MMo=r(zwe," (Nystromformer model)"),zwe.forEach(t),EMo=i(N),$6=n(N,"LI",{});var Qwe=s($6);Lse=n(Qwe,"STRONG",{});var qZr=s(Lse);CMo=r(qZr,"perceiver"),qZr.forEach(t),wMo=r(Qwe," \u2014 "),pq=n(Qwe,"A",{href:!0});var NZr=s(pq);AMo=r(NZr,"PerceiverForMaskedLM"),NZr.forEach(t),yMo=r(Qwe," (Perceiver model)"),Qwe.forEach(t),LMo=i(N),I6=n(N,"LI",{});var Wwe=s(I6);xse=n(Wwe,"STRONG",{});var jZr=s(xse);xMo=r(jZr,"qdqbert"),jZr.forEach(t),kMo=r(Wwe," \u2014 "),_q=n(Wwe,"A",{href:!0});var DZr=s(_q);SMo=r(DZr,"QDQBertForMaskedLM"),DZr.forEach(t),RMo=r(Wwe," (QDQBert model)"),Wwe.forEach(t),BMo=i(N),q6=n(N,"LI",{});var Hwe=s(q6);kse=n(Hwe,"STRONG",{});var GZr=s(kse);PMo=r(GZr,"reformer"),GZr.forEach(t),$Mo=r(Hwe," \u2014 "),uq=n(Hwe,"A",{href:!0});var OZr=s(uq);IMo=r(OZr,"ReformerForMaskedLM"),OZr.forEach(t),qMo=r(Hwe," (Reformer model)"),Hwe.forEach(t),NMo=i(N),N6=n(N,"LI",{});var Uwe=s(N6);Sse=n(Uwe,"STRONG",{});var VZr=s(Sse);jMo=r(VZr,"rembert"),VZr.forEach(t),DMo=r(Uwe," \u2014 "),bq=n(Uwe,"A",{href:!0});var XZr=s(bq);GMo=r(XZr,"RemBertForMaskedLM"),XZr.forEach(t),OMo=r(Uwe," (RemBERT model)"),Uwe.forEach(t),VMo=i(N),j6=n(N,"LI",{});var Jwe=s(j6);Rse=n(Jwe,"STRONG",{});var zZr=s(Rse);XMo=r(zZr,"roberta"),zZr.forEach(t),zMo=r(Jwe," \u2014 "),vq=n(Jwe,"A",{href:!0});var QZr=s(vq);QMo=r(QZr,"RobertaForMaskedLM"),QZr.forEach(t),WMo=r(Jwe," (RoBERTa model)"),Jwe.forEach(t),HMo=i(N),D6=n(N,"LI",{});var Ywe=s(D6);Bse=n(Ywe,"STRONG",{});var WZr=s(Bse);UMo=r(WZr,"roformer"),WZr.forEach(t),JMo=r(Ywe," \u2014 "),Fq=n(Ywe,"A",{href:!0});var HZr=s(Fq);YMo=r(HZr,"RoFormerForMaskedLM"),HZr.forEach(t),KMo=r(Ywe," (RoFormer model)"),Ywe.forEach(t),ZMo=i(N),G6=n(N,"LI",{});var Kwe=s(G6);Pse=n(Kwe,"STRONG",{});var UZr=s(Pse);e4o=r(UZr,"squeezebert"),UZr.forEach(t),o4o=r(Kwe," \u2014 "),Tq=n(Kwe,"A",{href:!0});var JZr=s(Tq);r4o=r(JZr,"SqueezeBertForMaskedLM"),JZr.forEach(t),t4o=r(Kwe," (SqueezeBERT model)"),Kwe.forEach(t),a4o=i(N),O6=n(N,"LI",{});var Zwe=s(O6);$se=n(Zwe,"STRONG",{});var YZr=s($se);n4o=r(YZr,"tapas"),YZr.forEach(t),s4o=r(Zwe," \u2014 "),Mq=n(Zwe,"A",{href:!0});var KZr=s(Mq);l4o=r(KZr,"TapasForMaskedLM"),KZr.forEach(t),i4o=r(Zwe," (TAPAS model)"),Zwe.forEach(t),d4o=i(N),V6=n(N,"LI",{});var eAe=s(V6);Ise=n(eAe,"STRONG",{});var ZZr=s(Ise);c4o=r(ZZr,"wav2vec2"),ZZr.forEach(t),f4o=r(eAe," \u2014 "),qse=n(eAe,"CODE",{});var eet=s(qse);m4o=r(eet,"Wav2Vec2ForMaskedLM"),eet.forEach(t),g4o=r(eAe," (Wav2Vec2 model)"),eAe.forEach(t),h4o=i(N),X6=n(N,"LI",{});var oAe=s(X6);Nse=n(oAe,"STRONG",{});var oet=s(Nse);p4o=r(oet,"xlm"),oet.forEach(t),_4o=r(oAe," \u2014 "),Eq=n(oAe,"A",{href:!0});var ret=s(Eq);u4o=r(ret,"XLMWithLMHeadModel"),ret.forEach(t),b4o=r(oAe," (XLM model)"),oAe.forEach(t),v4o=i(N),z6=n(N,"LI",{});var rAe=s(z6);jse=n(rAe,"STRONG",{});var tet=s(jse);F4o=r(tet,"xlm-roberta"),tet.forEach(t),T4o=r(rAe," \u2014 "),Cq=n(rAe,"A",{href:!0});var aet=s(Cq);M4o=r(aet,"XLMRobertaForMaskedLM"),aet.forEach(t),E4o=r(rAe," (XLM-RoBERTa model)"),rAe.forEach(t),C4o=i(N),Q6=n(N,"LI",{});var tAe=s(Q6);Dse=n(tAe,"STRONG",{});var net=s(Dse);w4o=r(net,"xlm-roberta-xl"),net.forEach(t),A4o=r(tAe," \u2014 "),wq=n(tAe,"A",{href:!0});var set=s(wq);y4o=r(set,"XLMRobertaXLForMaskedLM"),set.forEach(t),L4o=r(tAe," (XLM-RoBERTa-XL model)"),tAe.forEach(t),x4o=i(N),W6=n(N,"LI",{});var aAe=s(W6);Gse=n(aAe,"STRONG",{});var iet=s(Gse);k4o=r(iet,"yoso"),iet.forEach(t),S4o=r(aAe," \u2014 "),Aq=n(aAe,"A",{href:!0});var det=s(Aq);R4o=r(det,"YosoForMaskedLM"),det.forEach(t),B4o=r(aAe," (YOSO model)"),aAe.forEach(t),N.forEach(t),P4o=i(Vt),H6=n(Vt,"P",{});var nAe=s(H6);$4o=r(nAe,"The model is set in evaluation mode by default using "),Ose=n(nAe,"CODE",{});var cet=s(Ose);I4o=r(cet,"model.eval()"),cet.forEach(t),q4o=r(nAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vse=n(nAe,"CODE",{});var fet=s(Vse);N4o=r(fet,"model.train()"),fet.forEach(t),nAe.forEach(t),j4o=i(Vt),Xse=n(Vt,"P",{});var met=s(Xse);D4o=r(met,"Examples:"),met.forEach(t),G4o=i(Vt),m(DC.$$.fragment,Vt),Vt.forEach(t),rl.forEach(t),TBe=i(c),md=n(c,"H2",{class:!0});var k$e=s(md);U6=n(k$e,"A",{id:!0,class:!0,href:!0});var get=s(U6);zse=n(get,"SPAN",{});var het=s(zse);m(GC.$$.fragment,het),het.forEach(t),get.forEach(t),O4o=i(k$e),Qse=n(k$e,"SPAN",{});var pet=s(Qse);V4o=r(pet,"AutoModelForSeq2SeqLM"),pet.forEach(t),k$e.forEach(t),MBe=i(c),er=n(c,"DIV",{class:!0});var al=s(er);m(OC.$$.fragment,al),X4o=i(al),gd=n(al,"P",{});var XU=s(gd);z4o=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yq=n(XU,"A",{href:!0});var _et=s(yq);Q4o=r(_et,"from_pretrained()"),_et.forEach(t),W4o=r(XU," class method or the "),Lq=n(XU,"A",{href:!0});var uet=s(Lq);H4o=r(uet,"from_config()"),uet.forEach(t),U4o=r(XU,` class
method.`),XU.forEach(t),J4o=i(al),VC=n(al,"P",{});var S$e=s(VC);Y4o=r(S$e,"This class cannot be instantiated directly using "),Wse=n(S$e,"CODE",{});var bet=s(Wse);K4o=r(bet,"__init__()"),bet.forEach(t),Z4o=r(S$e," (throws an error)."),S$e.forEach(t),eEo=i(al),Hr=n(al,"DIV",{class:!0});var nl=s(Hr);m(XC.$$.fragment,nl),oEo=i(nl),Hse=n(nl,"P",{});var vet=s(Hse);rEo=r(vet,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vet.forEach(t),tEo=i(nl),hd=n(nl,"P",{});var zU=s(hd);aEo=r(zU,`Note:
Loading a model from its configuration file does `),Use=n(zU,"STRONG",{});var Fet=s(Use);nEo=r(Fet,"not"),Fet.forEach(t),sEo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=n(zU,"A",{href:!0});var Tet=s(xq);lEo=r(Tet,"from_pretrained()"),Tet.forEach(t),iEo=r(zU," to load the model weights."),zU.forEach(t),dEo=i(nl),Jse=n(nl,"P",{});var Met=s(Jse);cEo=r(Met,"Examples:"),Met.forEach(t),fEo=i(nl),m(zC.$$.fragment,nl),nl.forEach(t),mEo=i(al),Ge=n(al,"DIV",{class:!0});var Xt=s(Ge);m(QC.$$.fragment,Xt),gEo=i(Xt),Yse=n(Xt,"P",{});var Eet=s(Yse);hEo=r(Eet,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Eet.forEach(t),pEo=i(Xt),Ha=n(Xt,"P",{});var DE=s(Ha);_Eo=r(DE,"The model class to instantiate is selected based on the "),Kse=n(DE,"CODE",{});var Cet=s(Kse);uEo=r(Cet,"model_type"),Cet.forEach(t),bEo=r(DE,` property of the config object (either
passed as an argument or loaded from `),Zse=n(DE,"CODE",{});var wet=s(Zse);vEo=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),FEo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=n(DE,"CODE",{});var Aet=s(ele);TEo=r(Aet,"pretrained_model_name_or_path"),Aet.forEach(t),MEo=r(DE,":"),DE.forEach(t),EEo=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);J6=n(le,"LI",{});var sAe=s(J6);ole=n(sAe,"STRONG",{});var yet=s(ole);CEo=r(yet,"bart"),yet.forEach(t),wEo=r(sAe," \u2014 "),kq=n(sAe,"A",{href:!0});var Let=s(kq);AEo=r(Let,"BartForConditionalGeneration"),Let.forEach(t),yEo=r(sAe," (BART model)"),sAe.forEach(t),LEo=i(le),Y6=n(le,"LI",{});var lAe=s(Y6);rle=n(lAe,"STRONG",{});var xet=s(rle);xEo=r(xet,"bigbird_pegasus"),xet.forEach(t),kEo=r(lAe," \u2014 "),Sq=n(lAe,"A",{href:!0});var ket=s(Sq);SEo=r(ket,"BigBirdPegasusForConditionalGeneration"),ket.forEach(t),REo=r(lAe," (BigBirdPegasus model)"),lAe.forEach(t),BEo=i(le),K6=n(le,"LI",{});var iAe=s(K6);tle=n(iAe,"STRONG",{});var Set=s(tle);PEo=r(Set,"blenderbot"),Set.forEach(t),$Eo=r(iAe," \u2014 "),Rq=n(iAe,"A",{href:!0});var Ret=s(Rq);IEo=r(Ret,"BlenderbotForConditionalGeneration"),Ret.forEach(t),qEo=r(iAe," (Blenderbot model)"),iAe.forEach(t),NEo=i(le),Z6=n(le,"LI",{});var dAe=s(Z6);ale=n(dAe,"STRONG",{});var Bet=s(ale);jEo=r(Bet,"blenderbot-small"),Bet.forEach(t),DEo=r(dAe," \u2014 "),Bq=n(dAe,"A",{href:!0});var Pet=s(Bq);GEo=r(Pet,"BlenderbotSmallForConditionalGeneration"),Pet.forEach(t),OEo=r(dAe," (BlenderbotSmall model)"),dAe.forEach(t),VEo=i(le),e1=n(le,"LI",{});var cAe=s(e1);nle=n(cAe,"STRONG",{});var $et=s(nle);XEo=r($et,"encoder-decoder"),$et.forEach(t),zEo=r(cAe," \u2014 "),Pq=n(cAe,"A",{href:!0});var Iet=s(Pq);QEo=r(Iet,"EncoderDecoderModel"),Iet.forEach(t),WEo=r(cAe," (Encoder decoder model)"),cAe.forEach(t),HEo=i(le),o1=n(le,"LI",{});var fAe=s(o1);sle=n(fAe,"STRONG",{});var qet=s(sle);UEo=r(qet,"fsmt"),qet.forEach(t),JEo=r(fAe," \u2014 "),$q=n(fAe,"A",{href:!0});var Net=s($q);YEo=r(Net,"FSMTForConditionalGeneration"),Net.forEach(t),KEo=r(fAe," (FairSeq Machine-Translation model)"),fAe.forEach(t),ZEo=i(le),r1=n(le,"LI",{});var mAe=s(r1);lle=n(mAe,"STRONG",{});var jet=s(lle);e3o=r(jet,"led"),jet.forEach(t),o3o=r(mAe," \u2014 "),Iq=n(mAe,"A",{href:!0});var Det=s(Iq);r3o=r(Det,"LEDForConditionalGeneration"),Det.forEach(t),t3o=r(mAe," (LED model)"),mAe.forEach(t),a3o=i(le),t1=n(le,"LI",{});var gAe=s(t1);ile=n(gAe,"STRONG",{});var Get=s(ile);n3o=r(Get,"m2m_100"),Get.forEach(t),s3o=r(gAe," \u2014 "),qq=n(gAe,"A",{href:!0});var Oet=s(qq);l3o=r(Oet,"M2M100ForConditionalGeneration"),Oet.forEach(t),i3o=r(gAe," (M2M100 model)"),gAe.forEach(t),d3o=i(le),a1=n(le,"LI",{});var hAe=s(a1);dle=n(hAe,"STRONG",{});var Vet=s(dle);c3o=r(Vet,"marian"),Vet.forEach(t),f3o=r(hAe," \u2014 "),Nq=n(hAe,"A",{href:!0});var Xet=s(Nq);m3o=r(Xet,"MarianMTModel"),Xet.forEach(t),g3o=r(hAe," (Marian model)"),hAe.forEach(t),h3o=i(le),n1=n(le,"LI",{});var pAe=s(n1);cle=n(pAe,"STRONG",{});var zet=s(cle);p3o=r(zet,"mbart"),zet.forEach(t),_3o=r(pAe," \u2014 "),jq=n(pAe,"A",{href:!0});var Qet=s(jq);u3o=r(Qet,"MBartForConditionalGeneration"),Qet.forEach(t),b3o=r(pAe," (mBART model)"),pAe.forEach(t),v3o=i(le),s1=n(le,"LI",{});var _Ae=s(s1);fle=n(_Ae,"STRONG",{});var Wet=s(fle);F3o=r(Wet,"mt5"),Wet.forEach(t),T3o=r(_Ae," \u2014 "),Dq=n(_Ae,"A",{href:!0});var Het=s(Dq);M3o=r(Het,"MT5ForConditionalGeneration"),Het.forEach(t),E3o=r(_Ae," (mT5 model)"),_Ae.forEach(t),C3o=i(le),l1=n(le,"LI",{});var uAe=s(l1);mle=n(uAe,"STRONG",{});var Uet=s(mle);w3o=r(Uet,"pegasus"),Uet.forEach(t),A3o=r(uAe," \u2014 "),Gq=n(uAe,"A",{href:!0});var Jet=s(Gq);y3o=r(Jet,"PegasusForConditionalGeneration"),Jet.forEach(t),L3o=r(uAe," (Pegasus model)"),uAe.forEach(t),x3o=i(le),i1=n(le,"LI",{});var bAe=s(i1);gle=n(bAe,"STRONG",{});var Yet=s(gle);k3o=r(Yet,"plbart"),Yet.forEach(t),S3o=r(bAe," \u2014 "),Oq=n(bAe,"A",{href:!0});var Ket=s(Oq);R3o=r(Ket,"PLBartForConditionalGeneration"),Ket.forEach(t),B3o=r(bAe," (PLBart model)"),bAe.forEach(t),P3o=i(le),d1=n(le,"LI",{});var vAe=s(d1);hle=n(vAe,"STRONG",{});var Zet=s(hle);$3o=r(Zet,"prophetnet"),Zet.forEach(t),I3o=r(vAe," \u2014 "),Vq=n(vAe,"A",{href:!0});var eot=s(Vq);q3o=r(eot,"ProphetNetForConditionalGeneration"),eot.forEach(t),N3o=r(vAe," (ProphetNet model)"),vAe.forEach(t),j3o=i(le),c1=n(le,"LI",{});var FAe=s(c1);ple=n(FAe,"STRONG",{});var oot=s(ple);D3o=r(oot,"t5"),oot.forEach(t),G3o=r(FAe," \u2014 "),Xq=n(FAe,"A",{href:!0});var rot=s(Xq);O3o=r(rot,"T5ForConditionalGeneration"),rot.forEach(t),V3o=r(FAe," (T5 model)"),FAe.forEach(t),X3o=i(le),f1=n(le,"LI",{});var TAe=s(f1);_le=n(TAe,"STRONG",{});var tot=s(_le);z3o=r(tot,"tapex"),tot.forEach(t),Q3o=r(TAe," \u2014 "),zq=n(TAe,"A",{href:!0});var aot=s(zq);W3o=r(aot,"BartForConditionalGeneration"),aot.forEach(t),H3o=r(TAe," (TAPEX model)"),TAe.forEach(t),U3o=i(le),m1=n(le,"LI",{});var MAe=s(m1);ule=n(MAe,"STRONG",{});var not=s(ule);J3o=r(not,"xlm-prophetnet"),not.forEach(t),Y3o=r(MAe," \u2014 "),Qq=n(MAe,"A",{href:!0});var sot=s(Qq);K3o=r(sot,"XLMProphetNetForConditionalGeneration"),sot.forEach(t),Z3o=r(MAe," (XLMProphetNet model)"),MAe.forEach(t),le.forEach(t),eCo=i(Xt),g1=n(Xt,"P",{});var EAe=s(g1);oCo=r(EAe,"The model is set in evaluation mode by default using "),ble=n(EAe,"CODE",{});var lot=s(ble);rCo=r(lot,"model.eval()"),lot.forEach(t),tCo=r(EAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=n(EAe,"CODE",{});var iot=s(vle);aCo=r(iot,"model.train()"),iot.forEach(t),EAe.forEach(t),nCo=i(Xt),Fle=n(Xt,"P",{});var dot=s(Fle);sCo=r(dot,"Examples:"),dot.forEach(t),lCo=i(Xt),m(WC.$$.fragment,Xt),Xt.forEach(t),al.forEach(t),EBe=i(c),pd=n(c,"H2",{class:!0});var R$e=s(pd);h1=n(R$e,"A",{id:!0,class:!0,href:!0});var cot=s(h1);Tle=n(cot,"SPAN",{});var fot=s(Tle);m(HC.$$.fragment,fot),fot.forEach(t),cot.forEach(t),iCo=i(R$e),Mle=n(R$e,"SPAN",{});var mot=s(Mle);dCo=r(mot,"AutoModelForSequenceClassification"),mot.forEach(t),R$e.forEach(t),CBe=i(c),or=n(c,"DIV",{class:!0});var sl=s(or);m(UC.$$.fragment,sl),cCo=i(sl),_d=n(sl,"P",{});var QU=s(_d);fCo=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Wq=n(QU,"A",{href:!0});var got=s(Wq);mCo=r(got,"from_pretrained()"),got.forEach(t),gCo=r(QU," class method or the "),Hq=n(QU,"A",{href:!0});var hot=s(Hq);hCo=r(hot,"from_config()"),hot.forEach(t),pCo=r(QU,` class
method.`),QU.forEach(t),_Co=i(sl),JC=n(sl,"P",{});var B$e=s(JC);uCo=r(B$e,"This class cannot be instantiated directly using "),Ele=n(B$e,"CODE",{});var pot=s(Ele);bCo=r(pot,"__init__()"),pot.forEach(t),vCo=r(B$e," (throws an error)."),B$e.forEach(t),FCo=i(sl),Ur=n(sl,"DIV",{class:!0});var ll=s(Ur);m(YC.$$.fragment,ll),TCo=i(ll),Cle=n(ll,"P",{});var _ot=s(Cle);MCo=r(_ot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_ot.forEach(t),ECo=i(ll),ud=n(ll,"P",{});var WU=s(ud);CCo=r(WU,`Note:
Loading a model from its configuration file does `),wle=n(WU,"STRONG",{});var uot=s(wle);wCo=r(uot,"not"),uot.forEach(t),ACo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uq=n(WU,"A",{href:!0});var bot=s(Uq);yCo=r(bot,"from_pretrained()"),bot.forEach(t),LCo=r(WU," to load the model weights."),WU.forEach(t),xCo=i(ll),Ale=n(ll,"P",{});var vot=s(Ale);kCo=r(vot,"Examples:"),vot.forEach(t),SCo=i(ll),m(KC.$$.fragment,ll),ll.forEach(t),RCo=i(sl),Oe=n(sl,"DIV",{class:!0});var zt=s(Oe);m(ZC.$$.fragment,zt),BCo=i(zt),yle=n(zt,"P",{});var Fot=s(yle);PCo=r(Fot,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Fot.forEach(t),$Co=i(zt),Ua=n(zt,"P",{});var GE=s(Ua);ICo=r(GE,"The model class to instantiate is selected based on the "),Lle=n(GE,"CODE",{});var Tot=s(Lle);qCo=r(Tot,"model_type"),Tot.forEach(t),NCo=r(GE,` property of the config object (either
passed as an argument or loaded from `),xle=n(GE,"CODE",{});var Mot=s(xle);jCo=r(Mot,"pretrained_model_name_or_path"),Mot.forEach(t),DCo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kle=n(GE,"CODE",{});var Eot=s(kle);GCo=r(Eot,"pretrained_model_name_or_path"),Eot.forEach(t),OCo=r(GE,":"),GE.forEach(t),VCo=i(zt),y=n(zt,"UL",{});var L=s(y);p1=n(L,"LI",{});var CAe=s(p1);Sle=n(CAe,"STRONG",{});var Cot=s(Sle);XCo=r(Cot,"albert"),Cot.forEach(t),zCo=r(CAe," \u2014 "),Jq=n(CAe,"A",{href:!0});var wot=s(Jq);QCo=r(wot,"AlbertForSequenceClassification"),wot.forEach(t),WCo=r(CAe," (ALBERT model)"),CAe.forEach(t),HCo=i(L),_1=n(L,"LI",{});var wAe=s(_1);Rle=n(wAe,"STRONG",{});var Aot=s(Rle);UCo=r(Aot,"bart"),Aot.forEach(t),JCo=r(wAe," \u2014 "),Yq=n(wAe,"A",{href:!0});var yot=s(Yq);YCo=r(yot,"BartForSequenceClassification"),yot.forEach(t),KCo=r(wAe," (BART model)"),wAe.forEach(t),ZCo=i(L),u1=n(L,"LI",{});var AAe=s(u1);Ble=n(AAe,"STRONG",{});var Lot=s(Ble);ewo=r(Lot,"bert"),Lot.forEach(t),owo=r(AAe," \u2014 "),Kq=n(AAe,"A",{href:!0});var xot=s(Kq);rwo=r(xot,"BertForSequenceClassification"),xot.forEach(t),two=r(AAe," (BERT model)"),AAe.forEach(t),awo=i(L),b1=n(L,"LI",{});var yAe=s(b1);Ple=n(yAe,"STRONG",{});var kot=s(Ple);nwo=r(kot,"big_bird"),kot.forEach(t),swo=r(yAe," \u2014 "),Zq=n(yAe,"A",{href:!0});var Sot=s(Zq);lwo=r(Sot,"BigBirdForSequenceClassification"),Sot.forEach(t),iwo=r(yAe," (BigBird model)"),yAe.forEach(t),dwo=i(L),v1=n(L,"LI",{});var LAe=s(v1);$le=n(LAe,"STRONG",{});var Rot=s($le);cwo=r(Rot,"bigbird_pegasus"),Rot.forEach(t),fwo=r(LAe," \u2014 "),eN=n(LAe,"A",{href:!0});var Bot=s(eN);mwo=r(Bot,"BigBirdPegasusForSequenceClassification"),Bot.forEach(t),gwo=r(LAe," (BigBirdPegasus model)"),LAe.forEach(t),hwo=i(L),F1=n(L,"LI",{});var xAe=s(F1);Ile=n(xAe,"STRONG",{});var Pot=s(Ile);pwo=r(Pot,"camembert"),Pot.forEach(t),_wo=r(xAe," \u2014 "),oN=n(xAe,"A",{href:!0});var $ot=s(oN);uwo=r($ot,"CamembertForSequenceClassification"),$ot.forEach(t),bwo=r(xAe," (CamemBERT model)"),xAe.forEach(t),vwo=i(L),T1=n(L,"LI",{});var kAe=s(T1);qle=n(kAe,"STRONG",{});var Iot=s(qle);Fwo=r(Iot,"canine"),Iot.forEach(t),Two=r(kAe," \u2014 "),rN=n(kAe,"A",{href:!0});var qot=s(rN);Mwo=r(qot,"CanineForSequenceClassification"),qot.forEach(t),Ewo=r(kAe," (Canine model)"),kAe.forEach(t),Cwo=i(L),M1=n(L,"LI",{});var SAe=s(M1);Nle=n(SAe,"STRONG",{});var Not=s(Nle);wwo=r(Not,"convbert"),Not.forEach(t),Awo=r(SAe," \u2014 "),tN=n(SAe,"A",{href:!0});var jot=s(tN);ywo=r(jot,"ConvBertForSequenceClassification"),jot.forEach(t),Lwo=r(SAe," (ConvBERT model)"),SAe.forEach(t),xwo=i(L),E1=n(L,"LI",{});var RAe=s(E1);jle=n(RAe,"STRONG",{});var Dot=s(jle);kwo=r(Dot,"ctrl"),Dot.forEach(t),Swo=r(RAe," \u2014 "),aN=n(RAe,"A",{href:!0});var Got=s(aN);Rwo=r(Got,"CTRLForSequenceClassification"),Got.forEach(t),Bwo=r(RAe," (CTRL model)"),RAe.forEach(t),Pwo=i(L),C1=n(L,"LI",{});var BAe=s(C1);Dle=n(BAe,"STRONG",{});var Oot=s(Dle);$wo=r(Oot,"data2vec-text"),Oot.forEach(t),Iwo=r(BAe," \u2014 "),nN=n(BAe,"A",{href:!0});var Vot=s(nN);qwo=r(Vot,"Data2VecTextForSequenceClassification"),Vot.forEach(t),Nwo=r(BAe," (Data2VecText model)"),BAe.forEach(t),jwo=i(L),w1=n(L,"LI",{});var PAe=s(w1);Gle=n(PAe,"STRONG",{});var Xot=s(Gle);Dwo=r(Xot,"deberta"),Xot.forEach(t),Gwo=r(PAe," \u2014 "),sN=n(PAe,"A",{href:!0});var zot=s(sN);Owo=r(zot,"DebertaForSequenceClassification"),zot.forEach(t),Vwo=r(PAe," (DeBERTa model)"),PAe.forEach(t),Xwo=i(L),A1=n(L,"LI",{});var $Ae=s(A1);Ole=n($Ae,"STRONG",{});var Qot=s(Ole);zwo=r(Qot,"deberta-v2"),Qot.forEach(t),Qwo=r($Ae," \u2014 "),lN=n($Ae,"A",{href:!0});var Wot=s(lN);Wwo=r(Wot,"DebertaV2ForSequenceClassification"),Wot.forEach(t),Hwo=r($Ae," (DeBERTa-v2 model)"),$Ae.forEach(t),Uwo=i(L),y1=n(L,"LI",{});var IAe=s(y1);Vle=n(IAe,"STRONG",{});var Hot=s(Vle);Jwo=r(Hot,"distilbert"),Hot.forEach(t),Ywo=r(IAe," \u2014 "),iN=n(IAe,"A",{href:!0});var Uot=s(iN);Kwo=r(Uot,"DistilBertForSequenceClassification"),Uot.forEach(t),Zwo=r(IAe," (DistilBERT model)"),IAe.forEach(t),eAo=i(L),L1=n(L,"LI",{});var qAe=s(L1);Xle=n(qAe,"STRONG",{});var Jot=s(Xle);oAo=r(Jot,"electra"),Jot.forEach(t),rAo=r(qAe," \u2014 "),dN=n(qAe,"A",{href:!0});var Yot=s(dN);tAo=r(Yot,"ElectraForSequenceClassification"),Yot.forEach(t),aAo=r(qAe," (ELECTRA model)"),qAe.forEach(t),nAo=i(L),x1=n(L,"LI",{});var NAe=s(x1);zle=n(NAe,"STRONG",{});var Kot=s(zle);sAo=r(Kot,"flaubert"),Kot.forEach(t),lAo=r(NAe," \u2014 "),cN=n(NAe,"A",{href:!0});var Zot=s(cN);iAo=r(Zot,"FlaubertForSequenceClassification"),Zot.forEach(t),dAo=r(NAe," (FlauBERT model)"),NAe.forEach(t),cAo=i(L),k1=n(L,"LI",{});var jAe=s(k1);Qle=n(jAe,"STRONG",{});var ert=s(Qle);fAo=r(ert,"fnet"),ert.forEach(t),mAo=r(jAe," \u2014 "),fN=n(jAe,"A",{href:!0});var ort=s(fN);gAo=r(ort,"FNetForSequenceClassification"),ort.forEach(t),hAo=r(jAe," (FNet model)"),jAe.forEach(t),pAo=i(L),S1=n(L,"LI",{});var DAe=s(S1);Wle=n(DAe,"STRONG",{});var rrt=s(Wle);_Ao=r(rrt,"funnel"),rrt.forEach(t),uAo=r(DAe," \u2014 "),mN=n(DAe,"A",{href:!0});var trt=s(mN);bAo=r(trt,"FunnelForSequenceClassification"),trt.forEach(t),vAo=r(DAe," (Funnel Transformer model)"),DAe.forEach(t),FAo=i(L),R1=n(L,"LI",{});var GAe=s(R1);Hle=n(GAe,"STRONG",{});var art=s(Hle);TAo=r(art,"gpt2"),art.forEach(t),MAo=r(GAe," \u2014 "),gN=n(GAe,"A",{href:!0});var nrt=s(gN);EAo=r(nrt,"GPT2ForSequenceClassification"),nrt.forEach(t),CAo=r(GAe," (OpenAI GPT-2 model)"),GAe.forEach(t),wAo=i(L),B1=n(L,"LI",{});var OAe=s(B1);Ule=n(OAe,"STRONG",{});var srt=s(Ule);AAo=r(srt,"gpt_neo"),srt.forEach(t),yAo=r(OAe," \u2014 "),hN=n(OAe,"A",{href:!0});var lrt=s(hN);LAo=r(lrt,"GPTNeoForSequenceClassification"),lrt.forEach(t),xAo=r(OAe," (GPT Neo model)"),OAe.forEach(t),kAo=i(L),P1=n(L,"LI",{});var VAe=s(P1);Jle=n(VAe,"STRONG",{});var irt=s(Jle);SAo=r(irt,"gptj"),irt.forEach(t),RAo=r(VAe," \u2014 "),pN=n(VAe,"A",{href:!0});var drt=s(pN);BAo=r(drt,"GPTJForSequenceClassification"),drt.forEach(t),PAo=r(VAe," (GPT-J model)"),VAe.forEach(t),$Ao=i(L),$1=n(L,"LI",{});var XAe=s($1);Yle=n(XAe,"STRONG",{});var crt=s(Yle);IAo=r(crt,"ibert"),crt.forEach(t),qAo=r(XAe," \u2014 "),_N=n(XAe,"A",{href:!0});var frt=s(_N);NAo=r(frt,"IBertForSequenceClassification"),frt.forEach(t),jAo=r(XAe," (I-BERT model)"),XAe.forEach(t),DAo=i(L),I1=n(L,"LI",{});var zAe=s(I1);Kle=n(zAe,"STRONG",{});var mrt=s(Kle);GAo=r(mrt,"layoutlm"),mrt.forEach(t),OAo=r(zAe," \u2014 "),uN=n(zAe,"A",{href:!0});var grt=s(uN);VAo=r(grt,"LayoutLMForSequenceClassification"),grt.forEach(t),XAo=r(zAe," (LayoutLM model)"),zAe.forEach(t),zAo=i(L),q1=n(L,"LI",{});var QAe=s(q1);Zle=n(QAe,"STRONG",{});var hrt=s(Zle);QAo=r(hrt,"layoutlmv2"),hrt.forEach(t),WAo=r(QAe," \u2014 "),bN=n(QAe,"A",{href:!0});var prt=s(bN);HAo=r(prt,"LayoutLMv2ForSequenceClassification"),prt.forEach(t),UAo=r(QAe," (LayoutLMv2 model)"),QAe.forEach(t),JAo=i(L),N1=n(L,"LI",{});var WAe=s(N1);eie=n(WAe,"STRONG",{});var _rt=s(eie);YAo=r(_rt,"led"),_rt.forEach(t),KAo=r(WAe," \u2014 "),vN=n(WAe,"A",{href:!0});var urt=s(vN);ZAo=r(urt,"LEDForSequenceClassification"),urt.forEach(t),e0o=r(WAe," (LED model)"),WAe.forEach(t),o0o=i(L),j1=n(L,"LI",{});var HAe=s(j1);oie=n(HAe,"STRONG",{});var brt=s(oie);r0o=r(brt,"longformer"),brt.forEach(t),t0o=r(HAe," \u2014 "),FN=n(HAe,"A",{href:!0});var vrt=s(FN);a0o=r(vrt,"LongformerForSequenceClassification"),vrt.forEach(t),n0o=r(HAe," (Longformer model)"),HAe.forEach(t),s0o=i(L),D1=n(L,"LI",{});var UAe=s(D1);rie=n(UAe,"STRONG",{});var Frt=s(rie);l0o=r(Frt,"mbart"),Frt.forEach(t),i0o=r(UAe," \u2014 "),TN=n(UAe,"A",{href:!0});var Trt=s(TN);d0o=r(Trt,"MBartForSequenceClassification"),Trt.forEach(t),c0o=r(UAe," (mBART model)"),UAe.forEach(t),f0o=i(L),G1=n(L,"LI",{});var JAe=s(G1);tie=n(JAe,"STRONG",{});var Mrt=s(tie);m0o=r(Mrt,"megatron-bert"),Mrt.forEach(t),g0o=r(JAe," \u2014 "),MN=n(JAe,"A",{href:!0});var Ert=s(MN);h0o=r(Ert,"MegatronBertForSequenceClassification"),Ert.forEach(t),p0o=r(JAe," (MegatronBert model)"),JAe.forEach(t),_0o=i(L),O1=n(L,"LI",{});var YAe=s(O1);aie=n(YAe,"STRONG",{});var Crt=s(aie);u0o=r(Crt,"mobilebert"),Crt.forEach(t),b0o=r(YAe," \u2014 "),EN=n(YAe,"A",{href:!0});var wrt=s(EN);v0o=r(wrt,"MobileBertForSequenceClassification"),wrt.forEach(t),F0o=r(YAe," (MobileBERT model)"),YAe.forEach(t),T0o=i(L),V1=n(L,"LI",{});var KAe=s(V1);nie=n(KAe,"STRONG",{});var Art=s(nie);M0o=r(Art,"mpnet"),Art.forEach(t),E0o=r(KAe," \u2014 "),CN=n(KAe,"A",{href:!0});var yrt=s(CN);C0o=r(yrt,"MPNetForSequenceClassification"),yrt.forEach(t),w0o=r(KAe," (MPNet model)"),KAe.forEach(t),A0o=i(L),X1=n(L,"LI",{});var ZAe=s(X1);sie=n(ZAe,"STRONG",{});var Lrt=s(sie);y0o=r(Lrt,"nystromformer"),Lrt.forEach(t),L0o=r(ZAe," \u2014 "),wN=n(ZAe,"A",{href:!0});var xrt=s(wN);x0o=r(xrt,"NystromformerForSequenceClassification"),xrt.forEach(t),k0o=r(ZAe," (Nystromformer model)"),ZAe.forEach(t),S0o=i(L),z1=n(L,"LI",{});var e0e=s(z1);lie=n(e0e,"STRONG",{});var krt=s(lie);R0o=r(krt,"openai-gpt"),krt.forEach(t),B0o=r(e0e," \u2014 "),AN=n(e0e,"A",{href:!0});var Srt=s(AN);P0o=r(Srt,"OpenAIGPTForSequenceClassification"),Srt.forEach(t),$0o=r(e0e," (OpenAI GPT model)"),e0e.forEach(t),I0o=i(L),Q1=n(L,"LI",{});var o0e=s(Q1);iie=n(o0e,"STRONG",{});var Rrt=s(iie);q0o=r(Rrt,"perceiver"),Rrt.forEach(t),N0o=r(o0e," \u2014 "),yN=n(o0e,"A",{href:!0});var Brt=s(yN);j0o=r(Brt,"PerceiverForSequenceClassification"),Brt.forEach(t),D0o=r(o0e," (Perceiver model)"),o0e.forEach(t),G0o=i(L),W1=n(L,"LI",{});var r0e=s(W1);die=n(r0e,"STRONG",{});var Prt=s(die);O0o=r(Prt,"plbart"),Prt.forEach(t),V0o=r(r0e," \u2014 "),LN=n(r0e,"A",{href:!0});var $rt=s(LN);X0o=r($rt,"PLBartForSequenceClassification"),$rt.forEach(t),z0o=r(r0e," (PLBart model)"),r0e.forEach(t),Q0o=i(L),H1=n(L,"LI",{});var t0e=s(H1);cie=n(t0e,"STRONG",{});var Irt=s(cie);W0o=r(Irt,"qdqbert"),Irt.forEach(t),H0o=r(t0e," \u2014 "),xN=n(t0e,"A",{href:!0});var qrt=s(xN);U0o=r(qrt,"QDQBertForSequenceClassification"),qrt.forEach(t),J0o=r(t0e," (QDQBert model)"),t0e.forEach(t),Y0o=i(L),U1=n(L,"LI",{});var a0e=s(U1);fie=n(a0e,"STRONG",{});var Nrt=s(fie);K0o=r(Nrt,"reformer"),Nrt.forEach(t),Z0o=r(a0e," \u2014 "),kN=n(a0e,"A",{href:!0});var jrt=s(kN);eyo=r(jrt,"ReformerForSequenceClassification"),jrt.forEach(t),oyo=r(a0e," (Reformer model)"),a0e.forEach(t),ryo=i(L),J1=n(L,"LI",{});var n0e=s(J1);mie=n(n0e,"STRONG",{});var Drt=s(mie);tyo=r(Drt,"rembert"),Drt.forEach(t),ayo=r(n0e," \u2014 "),SN=n(n0e,"A",{href:!0});var Grt=s(SN);nyo=r(Grt,"RemBertForSequenceClassification"),Grt.forEach(t),syo=r(n0e," (RemBERT model)"),n0e.forEach(t),lyo=i(L),Y1=n(L,"LI",{});var s0e=s(Y1);gie=n(s0e,"STRONG",{});var Ort=s(gie);iyo=r(Ort,"roberta"),Ort.forEach(t),dyo=r(s0e," \u2014 "),RN=n(s0e,"A",{href:!0});var Vrt=s(RN);cyo=r(Vrt,"RobertaForSequenceClassification"),Vrt.forEach(t),fyo=r(s0e," (RoBERTa model)"),s0e.forEach(t),myo=i(L),K1=n(L,"LI",{});var l0e=s(K1);hie=n(l0e,"STRONG",{});var Xrt=s(hie);gyo=r(Xrt,"roformer"),Xrt.forEach(t),hyo=r(l0e," \u2014 "),BN=n(l0e,"A",{href:!0});var zrt=s(BN);pyo=r(zrt,"RoFormerForSequenceClassification"),zrt.forEach(t),_yo=r(l0e," (RoFormer model)"),l0e.forEach(t),uyo=i(L),Z1=n(L,"LI",{});var i0e=s(Z1);pie=n(i0e,"STRONG",{});var Qrt=s(pie);byo=r(Qrt,"squeezebert"),Qrt.forEach(t),vyo=r(i0e," \u2014 "),PN=n(i0e,"A",{href:!0});var Wrt=s(PN);Fyo=r(Wrt,"SqueezeBertForSequenceClassification"),Wrt.forEach(t),Tyo=r(i0e," (SqueezeBERT model)"),i0e.forEach(t),Myo=i(L),eb=n(L,"LI",{});var d0e=s(eb);_ie=n(d0e,"STRONG",{});var Hrt=s(_ie);Eyo=r(Hrt,"tapas"),Hrt.forEach(t),Cyo=r(d0e," \u2014 "),$N=n(d0e,"A",{href:!0});var Urt=s($N);wyo=r(Urt,"TapasForSequenceClassification"),Urt.forEach(t),Ayo=r(d0e," (TAPAS model)"),d0e.forEach(t),yyo=i(L),ob=n(L,"LI",{});var c0e=s(ob);uie=n(c0e,"STRONG",{});var Jrt=s(uie);Lyo=r(Jrt,"tapex"),Jrt.forEach(t),xyo=r(c0e," \u2014 "),IN=n(c0e,"A",{href:!0});var Yrt=s(IN);kyo=r(Yrt,"BartForSequenceClassification"),Yrt.forEach(t),Syo=r(c0e," (TAPEX model)"),c0e.forEach(t),Ryo=i(L),rb=n(L,"LI",{});var f0e=s(rb);bie=n(f0e,"STRONG",{});var Krt=s(bie);Byo=r(Krt,"transfo-xl"),Krt.forEach(t),Pyo=r(f0e," \u2014 "),qN=n(f0e,"A",{href:!0});var Zrt=s(qN);$yo=r(Zrt,"TransfoXLForSequenceClassification"),Zrt.forEach(t),Iyo=r(f0e," (Transformer-XL model)"),f0e.forEach(t),qyo=i(L),tb=n(L,"LI",{});var m0e=s(tb);vie=n(m0e,"STRONG",{});var ett=s(vie);Nyo=r(ett,"xlm"),ett.forEach(t),jyo=r(m0e," \u2014 "),NN=n(m0e,"A",{href:!0});var ott=s(NN);Dyo=r(ott,"XLMForSequenceClassification"),ott.forEach(t),Gyo=r(m0e," (XLM model)"),m0e.forEach(t),Oyo=i(L),ab=n(L,"LI",{});var g0e=s(ab);Fie=n(g0e,"STRONG",{});var rtt=s(Fie);Vyo=r(rtt,"xlm-roberta"),rtt.forEach(t),Xyo=r(g0e," \u2014 "),jN=n(g0e,"A",{href:!0});var ttt=s(jN);zyo=r(ttt,"XLMRobertaForSequenceClassification"),ttt.forEach(t),Qyo=r(g0e," (XLM-RoBERTa model)"),g0e.forEach(t),Wyo=i(L),nb=n(L,"LI",{});var h0e=s(nb);Tie=n(h0e,"STRONG",{});var att=s(Tie);Hyo=r(att,"xlm-roberta-xl"),att.forEach(t),Uyo=r(h0e," \u2014 "),DN=n(h0e,"A",{href:!0});var ntt=s(DN);Jyo=r(ntt,"XLMRobertaXLForSequenceClassification"),ntt.forEach(t),Yyo=r(h0e," (XLM-RoBERTa-XL model)"),h0e.forEach(t),Kyo=i(L),sb=n(L,"LI",{});var p0e=s(sb);Mie=n(p0e,"STRONG",{});var stt=s(Mie);Zyo=r(stt,"xlnet"),stt.forEach(t),e8o=r(p0e," \u2014 "),GN=n(p0e,"A",{href:!0});var ltt=s(GN);o8o=r(ltt,"XLNetForSequenceClassification"),ltt.forEach(t),r8o=r(p0e," (XLNet model)"),p0e.forEach(t),t8o=i(L),lb=n(L,"LI",{});var _0e=s(lb);Eie=n(_0e,"STRONG",{});var itt=s(Eie);a8o=r(itt,"yoso"),itt.forEach(t),n8o=r(_0e," \u2014 "),ON=n(_0e,"A",{href:!0});var dtt=s(ON);s8o=r(dtt,"YosoForSequenceClassification"),dtt.forEach(t),l8o=r(_0e," (YOSO model)"),_0e.forEach(t),L.forEach(t),i8o=i(zt),ib=n(zt,"P",{});var u0e=s(ib);d8o=r(u0e,"The model is set in evaluation mode by default using "),Cie=n(u0e,"CODE",{});var ctt=s(Cie);c8o=r(ctt,"model.eval()"),ctt.forEach(t),f8o=r(u0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=n(u0e,"CODE",{});var ftt=s(wie);m8o=r(ftt,"model.train()"),ftt.forEach(t),u0e.forEach(t),g8o=i(zt),Aie=n(zt,"P",{});var mtt=s(Aie);h8o=r(mtt,"Examples:"),mtt.forEach(t),p8o=i(zt),m(ew.$$.fragment,zt),zt.forEach(t),sl.forEach(t),wBe=i(c),bd=n(c,"H2",{class:!0});var P$e=s(bd);db=n(P$e,"A",{id:!0,class:!0,href:!0});var gtt=s(db);yie=n(gtt,"SPAN",{});var htt=s(yie);m(ow.$$.fragment,htt),htt.forEach(t),gtt.forEach(t),_8o=i(P$e),Lie=n(P$e,"SPAN",{});var ptt=s(Lie);u8o=r(ptt,"AutoModelForMultipleChoice"),ptt.forEach(t),P$e.forEach(t),ABe=i(c),rr=n(c,"DIV",{class:!0});var il=s(rr);m(rw.$$.fragment,il),b8o=i(il),vd=n(il,"P",{});var HU=s(vd);v8o=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VN=n(HU,"A",{href:!0});var _tt=s(VN);F8o=r(_tt,"from_pretrained()"),_tt.forEach(t),T8o=r(HU," class method or the "),XN=n(HU,"A",{href:!0});var utt=s(XN);M8o=r(utt,"from_config()"),utt.forEach(t),E8o=r(HU,` class
method.`),HU.forEach(t),C8o=i(il),tw=n(il,"P",{});var $$e=s(tw);w8o=r($$e,"This class cannot be instantiated directly using "),xie=n($$e,"CODE",{});var btt=s(xie);A8o=r(btt,"__init__()"),btt.forEach(t),y8o=r($$e," (throws an error)."),$$e.forEach(t),L8o=i(il),Jr=n(il,"DIV",{class:!0});var dl=s(Jr);m(aw.$$.fragment,dl),x8o=i(dl),kie=n(dl,"P",{});var vtt=s(kie);k8o=r(vtt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vtt.forEach(t),S8o=i(dl),Fd=n(dl,"P",{});var UU=s(Fd);R8o=r(UU,`Note:
Loading a model from its configuration file does `),Sie=n(UU,"STRONG",{});var Ftt=s(Sie);B8o=r(Ftt,"not"),Ftt.forEach(t),P8o=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),zN=n(UU,"A",{href:!0});var Ttt=s(zN);$8o=r(Ttt,"from_pretrained()"),Ttt.forEach(t),I8o=r(UU," to load the model weights."),UU.forEach(t),q8o=i(dl),Rie=n(dl,"P",{});var Mtt=s(Rie);N8o=r(Mtt,"Examples:"),Mtt.forEach(t),j8o=i(dl),m(nw.$$.fragment,dl),dl.forEach(t),D8o=i(il),Ve=n(il,"DIV",{class:!0});var Qt=s(Ve);m(sw.$$.fragment,Qt),G8o=i(Qt),Bie=n(Qt,"P",{});var Ett=s(Bie);O8o=r(Ett,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ett.forEach(t),V8o=i(Qt),Ja=n(Qt,"P",{});var OE=s(Ja);X8o=r(OE,"The model class to instantiate is selected based on the "),Pie=n(OE,"CODE",{});var Ctt=s(Pie);z8o=r(Ctt,"model_type"),Ctt.forEach(t),Q8o=r(OE,` property of the config object (either
passed as an argument or loaded from `),$ie=n(OE,"CODE",{});var wtt=s($ie);W8o=r(wtt,"pretrained_model_name_or_path"),wtt.forEach(t),H8o=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=n(OE,"CODE",{});var Att=s(Iie);U8o=r(Att,"pretrained_model_name_or_path"),Att.forEach(t),J8o=r(OE,":"),OE.forEach(t),Y8o=i(Qt),G=n(Qt,"UL",{});var O=s(G);cb=n(O,"LI",{});var b0e=s(cb);qie=n(b0e,"STRONG",{});var ytt=s(qie);K8o=r(ytt,"albert"),ytt.forEach(t),Z8o=r(b0e," \u2014 "),QN=n(b0e,"A",{href:!0});var Ltt=s(QN);eLo=r(Ltt,"AlbertForMultipleChoice"),Ltt.forEach(t),oLo=r(b0e," (ALBERT model)"),b0e.forEach(t),rLo=i(O),fb=n(O,"LI",{});var v0e=s(fb);Nie=n(v0e,"STRONG",{});var xtt=s(Nie);tLo=r(xtt,"bert"),xtt.forEach(t),aLo=r(v0e," \u2014 "),WN=n(v0e,"A",{href:!0});var ktt=s(WN);nLo=r(ktt,"BertForMultipleChoice"),ktt.forEach(t),sLo=r(v0e," (BERT model)"),v0e.forEach(t),lLo=i(O),mb=n(O,"LI",{});var F0e=s(mb);jie=n(F0e,"STRONG",{});var Stt=s(jie);iLo=r(Stt,"big_bird"),Stt.forEach(t),dLo=r(F0e," \u2014 "),HN=n(F0e,"A",{href:!0});var Rtt=s(HN);cLo=r(Rtt,"BigBirdForMultipleChoice"),Rtt.forEach(t),fLo=r(F0e," (BigBird model)"),F0e.forEach(t),mLo=i(O),gb=n(O,"LI",{});var T0e=s(gb);Die=n(T0e,"STRONG",{});var Btt=s(Die);gLo=r(Btt,"camembert"),Btt.forEach(t),hLo=r(T0e," \u2014 "),UN=n(T0e,"A",{href:!0});var Ptt=s(UN);pLo=r(Ptt,"CamembertForMultipleChoice"),Ptt.forEach(t),_Lo=r(T0e," (CamemBERT model)"),T0e.forEach(t),uLo=i(O),hb=n(O,"LI",{});var M0e=s(hb);Gie=n(M0e,"STRONG",{});var $tt=s(Gie);bLo=r($tt,"canine"),$tt.forEach(t),vLo=r(M0e," \u2014 "),JN=n(M0e,"A",{href:!0});var Itt=s(JN);FLo=r(Itt,"CanineForMultipleChoice"),Itt.forEach(t),TLo=r(M0e," (Canine model)"),M0e.forEach(t),MLo=i(O),pb=n(O,"LI",{});var E0e=s(pb);Oie=n(E0e,"STRONG",{});var qtt=s(Oie);ELo=r(qtt,"convbert"),qtt.forEach(t),CLo=r(E0e," \u2014 "),YN=n(E0e,"A",{href:!0});var Ntt=s(YN);wLo=r(Ntt,"ConvBertForMultipleChoice"),Ntt.forEach(t),ALo=r(E0e," (ConvBERT model)"),E0e.forEach(t),yLo=i(O),_b=n(O,"LI",{});var C0e=s(_b);Vie=n(C0e,"STRONG",{});var jtt=s(Vie);LLo=r(jtt,"data2vec-text"),jtt.forEach(t),xLo=r(C0e," \u2014 "),KN=n(C0e,"A",{href:!0});var Dtt=s(KN);kLo=r(Dtt,"Data2VecTextForMultipleChoice"),Dtt.forEach(t),SLo=r(C0e," (Data2VecText model)"),C0e.forEach(t),RLo=i(O),ub=n(O,"LI",{});var w0e=s(ub);Xie=n(w0e,"STRONG",{});var Gtt=s(Xie);BLo=r(Gtt,"distilbert"),Gtt.forEach(t),PLo=r(w0e," \u2014 "),ZN=n(w0e,"A",{href:!0});var Ott=s(ZN);$Lo=r(Ott,"DistilBertForMultipleChoice"),Ott.forEach(t),ILo=r(w0e," (DistilBERT model)"),w0e.forEach(t),qLo=i(O),bb=n(O,"LI",{});var A0e=s(bb);zie=n(A0e,"STRONG",{});var Vtt=s(zie);NLo=r(Vtt,"electra"),Vtt.forEach(t),jLo=r(A0e," \u2014 "),ej=n(A0e,"A",{href:!0});var Xtt=s(ej);DLo=r(Xtt,"ElectraForMultipleChoice"),Xtt.forEach(t),GLo=r(A0e," (ELECTRA model)"),A0e.forEach(t),OLo=i(O),vb=n(O,"LI",{});var y0e=s(vb);Qie=n(y0e,"STRONG",{});var ztt=s(Qie);VLo=r(ztt,"flaubert"),ztt.forEach(t),XLo=r(y0e," \u2014 "),oj=n(y0e,"A",{href:!0});var Qtt=s(oj);zLo=r(Qtt,"FlaubertForMultipleChoice"),Qtt.forEach(t),QLo=r(y0e," (FlauBERT model)"),y0e.forEach(t),WLo=i(O),Fb=n(O,"LI",{});var L0e=s(Fb);Wie=n(L0e,"STRONG",{});var Wtt=s(Wie);HLo=r(Wtt,"fnet"),Wtt.forEach(t),ULo=r(L0e," \u2014 "),rj=n(L0e,"A",{href:!0});var Htt=s(rj);JLo=r(Htt,"FNetForMultipleChoice"),Htt.forEach(t),YLo=r(L0e," (FNet model)"),L0e.forEach(t),KLo=i(O),Tb=n(O,"LI",{});var x0e=s(Tb);Hie=n(x0e,"STRONG",{});var Utt=s(Hie);ZLo=r(Utt,"funnel"),Utt.forEach(t),e7o=r(x0e," \u2014 "),tj=n(x0e,"A",{href:!0});var Jtt=s(tj);o7o=r(Jtt,"FunnelForMultipleChoice"),Jtt.forEach(t),r7o=r(x0e," (Funnel Transformer model)"),x0e.forEach(t),t7o=i(O),Mb=n(O,"LI",{});var k0e=s(Mb);Uie=n(k0e,"STRONG",{});var Ytt=s(Uie);a7o=r(Ytt,"ibert"),Ytt.forEach(t),n7o=r(k0e," \u2014 "),aj=n(k0e,"A",{href:!0});var Ktt=s(aj);s7o=r(Ktt,"IBertForMultipleChoice"),Ktt.forEach(t),l7o=r(k0e," (I-BERT model)"),k0e.forEach(t),i7o=i(O),Eb=n(O,"LI",{});var S0e=s(Eb);Jie=n(S0e,"STRONG",{});var Ztt=s(Jie);d7o=r(Ztt,"longformer"),Ztt.forEach(t),c7o=r(S0e," \u2014 "),nj=n(S0e,"A",{href:!0});var eat=s(nj);f7o=r(eat,"LongformerForMultipleChoice"),eat.forEach(t),m7o=r(S0e," (Longformer model)"),S0e.forEach(t),g7o=i(O),Cb=n(O,"LI",{});var R0e=s(Cb);Yie=n(R0e,"STRONG",{});var oat=s(Yie);h7o=r(oat,"megatron-bert"),oat.forEach(t),p7o=r(R0e," \u2014 "),sj=n(R0e,"A",{href:!0});var rat=s(sj);_7o=r(rat,"MegatronBertForMultipleChoice"),rat.forEach(t),u7o=r(R0e," (MegatronBert model)"),R0e.forEach(t),b7o=i(O),wb=n(O,"LI",{});var B0e=s(wb);Kie=n(B0e,"STRONG",{});var tat=s(Kie);v7o=r(tat,"mobilebert"),tat.forEach(t),F7o=r(B0e," \u2014 "),lj=n(B0e,"A",{href:!0});var aat=s(lj);T7o=r(aat,"MobileBertForMultipleChoice"),aat.forEach(t),M7o=r(B0e," (MobileBERT model)"),B0e.forEach(t),E7o=i(O),Ab=n(O,"LI",{});var P0e=s(Ab);Zie=n(P0e,"STRONG",{});var nat=s(Zie);C7o=r(nat,"mpnet"),nat.forEach(t),w7o=r(P0e," \u2014 "),ij=n(P0e,"A",{href:!0});var sat=s(ij);A7o=r(sat,"MPNetForMultipleChoice"),sat.forEach(t),y7o=r(P0e," (MPNet model)"),P0e.forEach(t),L7o=i(O),yb=n(O,"LI",{});var $0e=s(yb);ede=n($0e,"STRONG",{});var lat=s(ede);x7o=r(lat,"nystromformer"),lat.forEach(t),k7o=r($0e," \u2014 "),dj=n($0e,"A",{href:!0});var iat=s(dj);S7o=r(iat,"NystromformerForMultipleChoice"),iat.forEach(t),R7o=r($0e," (Nystromformer model)"),$0e.forEach(t),B7o=i(O),Lb=n(O,"LI",{});var I0e=s(Lb);ode=n(I0e,"STRONG",{});var dat=s(ode);P7o=r(dat,"qdqbert"),dat.forEach(t),$7o=r(I0e," \u2014 "),cj=n(I0e,"A",{href:!0});var cat=s(cj);I7o=r(cat,"QDQBertForMultipleChoice"),cat.forEach(t),q7o=r(I0e," (QDQBert model)"),I0e.forEach(t),N7o=i(O),xb=n(O,"LI",{});var q0e=s(xb);rde=n(q0e,"STRONG",{});var fat=s(rde);j7o=r(fat,"rembert"),fat.forEach(t),D7o=r(q0e," \u2014 "),fj=n(q0e,"A",{href:!0});var mat=s(fj);G7o=r(mat,"RemBertForMultipleChoice"),mat.forEach(t),O7o=r(q0e," (RemBERT model)"),q0e.forEach(t),V7o=i(O),kb=n(O,"LI",{});var N0e=s(kb);tde=n(N0e,"STRONG",{});var gat=s(tde);X7o=r(gat,"roberta"),gat.forEach(t),z7o=r(N0e," \u2014 "),mj=n(N0e,"A",{href:!0});var hat=s(mj);Q7o=r(hat,"RobertaForMultipleChoice"),hat.forEach(t),W7o=r(N0e," (RoBERTa model)"),N0e.forEach(t),H7o=i(O),Sb=n(O,"LI",{});var j0e=s(Sb);ade=n(j0e,"STRONG",{});var pat=s(ade);U7o=r(pat,"roformer"),pat.forEach(t),J7o=r(j0e," \u2014 "),gj=n(j0e,"A",{href:!0});var _at=s(gj);Y7o=r(_at,"RoFormerForMultipleChoice"),_at.forEach(t),K7o=r(j0e," (RoFormer model)"),j0e.forEach(t),Z7o=i(O),Rb=n(O,"LI",{});var D0e=s(Rb);nde=n(D0e,"STRONG",{});var uat=s(nde);exo=r(uat,"squeezebert"),uat.forEach(t),oxo=r(D0e," \u2014 "),hj=n(D0e,"A",{href:!0});var bat=s(hj);rxo=r(bat,"SqueezeBertForMultipleChoice"),bat.forEach(t),txo=r(D0e," (SqueezeBERT model)"),D0e.forEach(t),axo=i(O),Bb=n(O,"LI",{});var G0e=s(Bb);sde=n(G0e,"STRONG",{});var vat=s(sde);nxo=r(vat,"xlm"),vat.forEach(t),sxo=r(G0e," \u2014 "),pj=n(G0e,"A",{href:!0});var Fat=s(pj);lxo=r(Fat,"XLMForMultipleChoice"),Fat.forEach(t),ixo=r(G0e," (XLM model)"),G0e.forEach(t),dxo=i(O),Pb=n(O,"LI",{});var O0e=s(Pb);lde=n(O0e,"STRONG",{});var Tat=s(lde);cxo=r(Tat,"xlm-roberta"),Tat.forEach(t),fxo=r(O0e," \u2014 "),_j=n(O0e,"A",{href:!0});var Mat=s(_j);mxo=r(Mat,"XLMRobertaForMultipleChoice"),Mat.forEach(t),gxo=r(O0e," (XLM-RoBERTa model)"),O0e.forEach(t),hxo=i(O),$b=n(O,"LI",{});var V0e=s($b);ide=n(V0e,"STRONG",{});var Eat=s(ide);pxo=r(Eat,"xlm-roberta-xl"),Eat.forEach(t),_xo=r(V0e," \u2014 "),uj=n(V0e,"A",{href:!0});var Cat=s(uj);uxo=r(Cat,"XLMRobertaXLForMultipleChoice"),Cat.forEach(t),bxo=r(V0e," (XLM-RoBERTa-XL model)"),V0e.forEach(t),vxo=i(O),Ib=n(O,"LI",{});var X0e=s(Ib);dde=n(X0e,"STRONG",{});var wat=s(dde);Fxo=r(wat,"xlnet"),wat.forEach(t),Txo=r(X0e," \u2014 "),bj=n(X0e,"A",{href:!0});var Aat=s(bj);Mxo=r(Aat,"XLNetForMultipleChoice"),Aat.forEach(t),Exo=r(X0e," (XLNet model)"),X0e.forEach(t),Cxo=i(O),qb=n(O,"LI",{});var z0e=s(qb);cde=n(z0e,"STRONG",{});var yat=s(cde);wxo=r(yat,"yoso"),yat.forEach(t),Axo=r(z0e," \u2014 "),vj=n(z0e,"A",{href:!0});var Lat=s(vj);yxo=r(Lat,"YosoForMultipleChoice"),Lat.forEach(t),Lxo=r(z0e," (YOSO model)"),z0e.forEach(t),O.forEach(t),xxo=i(Qt),Nb=n(Qt,"P",{});var Q0e=s(Nb);kxo=r(Q0e,"The model is set in evaluation mode by default using "),fde=n(Q0e,"CODE",{});var xat=s(fde);Sxo=r(xat,"model.eval()"),xat.forEach(t),Rxo=r(Q0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mde=n(Q0e,"CODE",{});var kat=s(mde);Bxo=r(kat,"model.train()"),kat.forEach(t),Q0e.forEach(t),Pxo=i(Qt),gde=n(Qt,"P",{});var Sat=s(gde);$xo=r(Sat,"Examples:"),Sat.forEach(t),Ixo=i(Qt),m(lw.$$.fragment,Qt),Qt.forEach(t),il.forEach(t),yBe=i(c),Td=n(c,"H2",{class:!0});var I$e=s(Td);jb=n(I$e,"A",{id:!0,class:!0,href:!0});var Rat=s(jb);hde=n(Rat,"SPAN",{});var Bat=s(hde);m(iw.$$.fragment,Bat),Bat.forEach(t),Rat.forEach(t),qxo=i(I$e),pde=n(I$e,"SPAN",{});var Pat=s(pde);Nxo=r(Pat,"AutoModelForNextSentencePrediction"),Pat.forEach(t),I$e.forEach(t),LBe=i(c),tr=n(c,"DIV",{class:!0});var cl=s(tr);m(dw.$$.fragment,cl),jxo=i(cl),Md=n(cl,"P",{});var JU=s(Md);Dxo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Fj=n(JU,"A",{href:!0});var $at=s(Fj);Gxo=r($at,"from_pretrained()"),$at.forEach(t),Oxo=r(JU," class method or the "),Tj=n(JU,"A",{href:!0});var Iat=s(Tj);Vxo=r(Iat,"from_config()"),Iat.forEach(t),Xxo=r(JU,` class
method.`),JU.forEach(t),zxo=i(cl),cw=n(cl,"P",{});var q$e=s(cw);Qxo=r(q$e,"This class cannot be instantiated directly using "),_de=n(q$e,"CODE",{});var qat=s(_de);Wxo=r(qat,"__init__()"),qat.forEach(t),Hxo=r(q$e," (throws an error)."),q$e.forEach(t),Uxo=i(cl),Yr=n(cl,"DIV",{class:!0});var fl=s(Yr);m(fw.$$.fragment,fl),Jxo=i(fl),ude=n(fl,"P",{});var Nat=s(ude);Yxo=r(Nat,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Nat.forEach(t),Kxo=i(fl),Ed=n(fl,"P",{});var YU=s(Ed);Zxo=r(YU,`Note:
Loading a model from its configuration file does `),bde=n(YU,"STRONG",{});var jat=s(bde);eko=r(jat,"not"),jat.forEach(t),oko=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=n(YU,"A",{href:!0});var Dat=s(Mj);rko=r(Dat,"from_pretrained()"),Dat.forEach(t),tko=r(YU," to load the model weights."),YU.forEach(t),ako=i(fl),vde=n(fl,"P",{});var Gat=s(vde);nko=r(Gat,"Examples:"),Gat.forEach(t),sko=i(fl),m(mw.$$.fragment,fl),fl.forEach(t),lko=i(cl),Xe=n(cl,"DIV",{class:!0});var Wt=s(Xe);m(gw.$$.fragment,Wt),iko=i(Wt),Fde=n(Wt,"P",{});var Oat=s(Fde);dko=r(Oat,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Oat.forEach(t),cko=i(Wt),Ya=n(Wt,"P",{});var VE=s(Ya);fko=r(VE,"The model class to instantiate is selected based on the "),Tde=n(VE,"CODE",{});var Vat=s(Tde);mko=r(Vat,"model_type"),Vat.forEach(t),gko=r(VE,` property of the config object (either
passed as an argument or loaded from `),Mde=n(VE,"CODE",{});var Xat=s(Mde);hko=r(Xat,"pretrained_model_name_or_path"),Xat.forEach(t),pko=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=n(VE,"CODE",{});var zat=s(Ede);_ko=r(zat,"pretrained_model_name_or_path"),zat.forEach(t),uko=r(VE,":"),VE.forEach(t),bko=i(Wt),da=n(Wt,"UL",{});var ml=s(da);Db=n(ml,"LI",{});var W0e=s(Db);Cde=n(W0e,"STRONG",{});var Qat=s(Cde);vko=r(Qat,"bert"),Qat.forEach(t),Fko=r(W0e," \u2014 "),Ej=n(W0e,"A",{href:!0});var Wat=s(Ej);Tko=r(Wat,"BertForNextSentencePrediction"),Wat.forEach(t),Mko=r(W0e," (BERT model)"),W0e.forEach(t),Eko=i(ml),Gb=n(ml,"LI",{});var H0e=s(Gb);wde=n(H0e,"STRONG",{});var Hat=s(wde);Cko=r(Hat,"fnet"),Hat.forEach(t),wko=r(H0e," \u2014 "),Cj=n(H0e,"A",{href:!0});var Uat=s(Cj);Ako=r(Uat,"FNetForNextSentencePrediction"),Uat.forEach(t),yko=r(H0e," (FNet model)"),H0e.forEach(t),Lko=i(ml),Ob=n(ml,"LI",{});var U0e=s(Ob);Ade=n(U0e,"STRONG",{});var Jat=s(Ade);xko=r(Jat,"megatron-bert"),Jat.forEach(t),kko=r(U0e," \u2014 "),wj=n(U0e,"A",{href:!0});var Yat=s(wj);Sko=r(Yat,"MegatronBertForNextSentencePrediction"),Yat.forEach(t),Rko=r(U0e," (MegatronBert model)"),U0e.forEach(t),Bko=i(ml),Vb=n(ml,"LI",{});var J0e=s(Vb);yde=n(J0e,"STRONG",{});var Kat=s(yde);Pko=r(Kat,"mobilebert"),Kat.forEach(t),$ko=r(J0e," \u2014 "),Aj=n(J0e,"A",{href:!0});var Zat=s(Aj);Iko=r(Zat,"MobileBertForNextSentencePrediction"),Zat.forEach(t),qko=r(J0e," (MobileBERT model)"),J0e.forEach(t),Nko=i(ml),Xb=n(ml,"LI",{});var Y0e=s(Xb);Lde=n(Y0e,"STRONG",{});var ent=s(Lde);jko=r(ent,"qdqbert"),ent.forEach(t),Dko=r(Y0e," \u2014 "),yj=n(Y0e,"A",{href:!0});var ont=s(yj);Gko=r(ont,"QDQBertForNextSentencePrediction"),ont.forEach(t),Oko=r(Y0e," (QDQBert model)"),Y0e.forEach(t),ml.forEach(t),Vko=i(Wt),zb=n(Wt,"P",{});var K0e=s(zb);Xko=r(K0e,"The model is set in evaluation mode by default using "),xde=n(K0e,"CODE",{});var rnt=s(xde);zko=r(rnt,"model.eval()"),rnt.forEach(t),Qko=r(K0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=n(K0e,"CODE",{});var tnt=s(kde);Wko=r(tnt,"model.train()"),tnt.forEach(t),K0e.forEach(t),Hko=i(Wt),Sde=n(Wt,"P",{});var ant=s(Sde);Uko=r(ant,"Examples:"),ant.forEach(t),Jko=i(Wt),m(hw.$$.fragment,Wt),Wt.forEach(t),cl.forEach(t),xBe=i(c),Cd=n(c,"H2",{class:!0});var N$e=s(Cd);Qb=n(N$e,"A",{id:!0,class:!0,href:!0});var nnt=s(Qb);Rde=n(nnt,"SPAN",{});var snt=s(Rde);m(pw.$$.fragment,snt),snt.forEach(t),nnt.forEach(t),Yko=i(N$e),Bde=n(N$e,"SPAN",{});var lnt=s(Bde);Kko=r(lnt,"AutoModelForTokenClassification"),lnt.forEach(t),N$e.forEach(t),kBe=i(c),ar=n(c,"DIV",{class:!0});var gl=s(ar);m(_w.$$.fragment,gl),Zko=i(gl),wd=n(gl,"P",{});var KU=s(wd);eSo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Lj=n(KU,"A",{href:!0});var int=s(Lj);oSo=r(int,"from_pretrained()"),int.forEach(t),rSo=r(KU," class method or the "),xj=n(KU,"A",{href:!0});var dnt=s(xj);tSo=r(dnt,"from_config()"),dnt.forEach(t),aSo=r(KU,` class
method.`),KU.forEach(t),nSo=i(gl),uw=n(gl,"P",{});var j$e=s(uw);sSo=r(j$e,"This class cannot be instantiated directly using "),Pde=n(j$e,"CODE",{});var cnt=s(Pde);lSo=r(cnt,"__init__()"),cnt.forEach(t),iSo=r(j$e," (throws an error)."),j$e.forEach(t),dSo=i(gl),Kr=n(gl,"DIV",{class:!0});var hl=s(Kr);m(bw.$$.fragment,hl),cSo=i(hl),$de=n(hl,"P",{});var fnt=s($de);fSo=r(fnt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fnt.forEach(t),mSo=i(hl),Ad=n(hl,"P",{});var ZU=s(Ad);gSo=r(ZU,`Note:
Loading a model from its configuration file does `),Ide=n(ZU,"STRONG",{});var mnt=s(Ide);hSo=r(mnt,"not"),mnt.forEach(t),pSo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=n(ZU,"A",{href:!0});var gnt=s(kj);_So=r(gnt,"from_pretrained()"),gnt.forEach(t),uSo=r(ZU," to load the model weights."),ZU.forEach(t),bSo=i(hl),qde=n(hl,"P",{});var hnt=s(qde);vSo=r(hnt,"Examples:"),hnt.forEach(t),FSo=i(hl),m(vw.$$.fragment,hl),hl.forEach(t),TSo=i(gl),ze=n(gl,"DIV",{class:!0});var Ht=s(ze);m(Fw.$$.fragment,Ht),MSo=i(Ht),Nde=n(Ht,"P",{});var pnt=s(Nde);ESo=r(pnt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pnt.forEach(t),CSo=i(Ht),Ka=n(Ht,"P",{});var XE=s(Ka);wSo=r(XE,"The model class to instantiate is selected based on the "),jde=n(XE,"CODE",{});var _nt=s(jde);ASo=r(_nt,"model_type"),_nt.forEach(t),ySo=r(XE,` property of the config object (either
passed as an argument or loaded from `),Dde=n(XE,"CODE",{});var unt=s(Dde);LSo=r(unt,"pretrained_model_name_or_path"),unt.forEach(t),xSo=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=n(XE,"CODE",{});var bnt=s(Gde);kSo=r(bnt,"pretrained_model_name_or_path"),bnt.forEach(t),SSo=r(XE,":"),XE.forEach(t),RSo=i(Ht),j=n(Ht,"UL",{});var D=s(j);Wb=n(D,"LI",{});var Z0e=s(Wb);Ode=n(Z0e,"STRONG",{});var vnt=s(Ode);BSo=r(vnt,"albert"),vnt.forEach(t),PSo=r(Z0e," \u2014 "),Sj=n(Z0e,"A",{href:!0});var Fnt=s(Sj);$So=r(Fnt,"AlbertForTokenClassification"),Fnt.forEach(t),ISo=r(Z0e," (ALBERT model)"),Z0e.forEach(t),qSo=i(D),Hb=n(D,"LI",{});var eye=s(Hb);Vde=n(eye,"STRONG",{});var Tnt=s(Vde);NSo=r(Tnt,"bert"),Tnt.forEach(t),jSo=r(eye," \u2014 "),Rj=n(eye,"A",{href:!0});var Mnt=s(Rj);DSo=r(Mnt,"BertForTokenClassification"),Mnt.forEach(t),GSo=r(eye," (BERT model)"),eye.forEach(t),OSo=i(D),Ub=n(D,"LI",{});var oye=s(Ub);Xde=n(oye,"STRONG",{});var Ent=s(Xde);VSo=r(Ent,"big_bird"),Ent.forEach(t),XSo=r(oye," \u2014 "),Bj=n(oye,"A",{href:!0});var Cnt=s(Bj);zSo=r(Cnt,"BigBirdForTokenClassification"),Cnt.forEach(t),QSo=r(oye," (BigBird model)"),oye.forEach(t),WSo=i(D),Jb=n(D,"LI",{});var rye=s(Jb);zde=n(rye,"STRONG",{});var wnt=s(zde);HSo=r(wnt,"camembert"),wnt.forEach(t),USo=r(rye," \u2014 "),Pj=n(rye,"A",{href:!0});var Ant=s(Pj);JSo=r(Ant,"CamembertForTokenClassification"),Ant.forEach(t),YSo=r(rye," (CamemBERT model)"),rye.forEach(t),KSo=i(D),Yb=n(D,"LI",{});var tye=s(Yb);Qde=n(tye,"STRONG",{});var ynt=s(Qde);ZSo=r(ynt,"canine"),ynt.forEach(t),eRo=r(tye," \u2014 "),$j=n(tye,"A",{href:!0});var Lnt=s($j);oRo=r(Lnt,"CanineForTokenClassification"),Lnt.forEach(t),rRo=r(tye," (Canine model)"),tye.forEach(t),tRo=i(D),Kb=n(D,"LI",{});var aye=s(Kb);Wde=n(aye,"STRONG",{});var xnt=s(Wde);aRo=r(xnt,"convbert"),xnt.forEach(t),nRo=r(aye," \u2014 "),Ij=n(aye,"A",{href:!0});var knt=s(Ij);sRo=r(knt,"ConvBertForTokenClassification"),knt.forEach(t),lRo=r(aye," (ConvBERT model)"),aye.forEach(t),iRo=i(D),Zb=n(D,"LI",{});var nye=s(Zb);Hde=n(nye,"STRONG",{});var Snt=s(Hde);dRo=r(Snt,"data2vec-text"),Snt.forEach(t),cRo=r(nye," \u2014 "),qj=n(nye,"A",{href:!0});var Rnt=s(qj);fRo=r(Rnt,"Data2VecTextForTokenClassification"),Rnt.forEach(t),mRo=r(nye," (Data2VecText model)"),nye.forEach(t),gRo=i(D),e2=n(D,"LI",{});var sye=s(e2);Ude=n(sye,"STRONG",{});var Bnt=s(Ude);hRo=r(Bnt,"deberta"),Bnt.forEach(t),pRo=r(sye," \u2014 "),Nj=n(sye,"A",{href:!0});var Pnt=s(Nj);_Ro=r(Pnt,"DebertaForTokenClassification"),Pnt.forEach(t),uRo=r(sye," (DeBERTa model)"),sye.forEach(t),bRo=i(D),o2=n(D,"LI",{});var lye=s(o2);Jde=n(lye,"STRONG",{});var $nt=s(Jde);vRo=r($nt,"deberta-v2"),$nt.forEach(t),FRo=r(lye," \u2014 "),jj=n(lye,"A",{href:!0});var Int=s(jj);TRo=r(Int,"DebertaV2ForTokenClassification"),Int.forEach(t),MRo=r(lye," (DeBERTa-v2 model)"),lye.forEach(t),ERo=i(D),r2=n(D,"LI",{});var iye=s(r2);Yde=n(iye,"STRONG",{});var qnt=s(Yde);CRo=r(qnt,"distilbert"),qnt.forEach(t),wRo=r(iye," \u2014 "),Dj=n(iye,"A",{href:!0});var Nnt=s(Dj);ARo=r(Nnt,"DistilBertForTokenClassification"),Nnt.forEach(t),yRo=r(iye," (DistilBERT model)"),iye.forEach(t),LRo=i(D),t2=n(D,"LI",{});var dye=s(t2);Kde=n(dye,"STRONG",{});var jnt=s(Kde);xRo=r(jnt,"electra"),jnt.forEach(t),kRo=r(dye," \u2014 "),Gj=n(dye,"A",{href:!0});var Dnt=s(Gj);SRo=r(Dnt,"ElectraForTokenClassification"),Dnt.forEach(t),RRo=r(dye," (ELECTRA model)"),dye.forEach(t),BRo=i(D),a2=n(D,"LI",{});var cye=s(a2);Zde=n(cye,"STRONG",{});var Gnt=s(Zde);PRo=r(Gnt,"flaubert"),Gnt.forEach(t),$Ro=r(cye," \u2014 "),Oj=n(cye,"A",{href:!0});var Ont=s(Oj);IRo=r(Ont,"FlaubertForTokenClassification"),Ont.forEach(t),qRo=r(cye," (FlauBERT model)"),cye.forEach(t),NRo=i(D),n2=n(D,"LI",{});var fye=s(n2);ece=n(fye,"STRONG",{});var Vnt=s(ece);jRo=r(Vnt,"fnet"),Vnt.forEach(t),DRo=r(fye," \u2014 "),Vj=n(fye,"A",{href:!0});var Xnt=s(Vj);GRo=r(Xnt,"FNetForTokenClassification"),Xnt.forEach(t),ORo=r(fye," (FNet model)"),fye.forEach(t),VRo=i(D),s2=n(D,"LI",{});var mye=s(s2);oce=n(mye,"STRONG",{});var znt=s(oce);XRo=r(znt,"funnel"),znt.forEach(t),zRo=r(mye," \u2014 "),Xj=n(mye,"A",{href:!0});var Qnt=s(Xj);QRo=r(Qnt,"FunnelForTokenClassification"),Qnt.forEach(t),WRo=r(mye," (Funnel Transformer model)"),mye.forEach(t),HRo=i(D),l2=n(D,"LI",{});var gye=s(l2);rce=n(gye,"STRONG",{});var Wnt=s(rce);URo=r(Wnt,"gpt2"),Wnt.forEach(t),JRo=r(gye," \u2014 "),zj=n(gye,"A",{href:!0});var Hnt=s(zj);YRo=r(Hnt,"GPT2ForTokenClassification"),Hnt.forEach(t),KRo=r(gye," (OpenAI GPT-2 model)"),gye.forEach(t),ZRo=i(D),i2=n(D,"LI",{});var hye=s(i2);tce=n(hye,"STRONG",{});var Unt=s(tce);eBo=r(Unt,"ibert"),Unt.forEach(t),oBo=r(hye," \u2014 "),Qj=n(hye,"A",{href:!0});var Jnt=s(Qj);rBo=r(Jnt,"IBertForTokenClassification"),Jnt.forEach(t),tBo=r(hye," (I-BERT model)"),hye.forEach(t),aBo=i(D),d2=n(D,"LI",{});var pye=s(d2);ace=n(pye,"STRONG",{});var Ynt=s(ace);nBo=r(Ynt,"layoutlm"),Ynt.forEach(t),sBo=r(pye," \u2014 "),Wj=n(pye,"A",{href:!0});var Knt=s(Wj);lBo=r(Knt,"LayoutLMForTokenClassification"),Knt.forEach(t),iBo=r(pye," (LayoutLM model)"),pye.forEach(t),dBo=i(D),c2=n(D,"LI",{});var _ye=s(c2);nce=n(_ye,"STRONG",{});var Znt=s(nce);cBo=r(Znt,"layoutlmv2"),Znt.forEach(t),fBo=r(_ye," \u2014 "),Hj=n(_ye,"A",{href:!0});var est=s(Hj);mBo=r(est,"LayoutLMv2ForTokenClassification"),est.forEach(t),gBo=r(_ye," (LayoutLMv2 model)"),_ye.forEach(t),hBo=i(D),f2=n(D,"LI",{});var uye=s(f2);sce=n(uye,"STRONG",{});var ost=s(sce);pBo=r(ost,"longformer"),ost.forEach(t),_Bo=r(uye," \u2014 "),Uj=n(uye,"A",{href:!0});var rst=s(Uj);uBo=r(rst,"LongformerForTokenClassification"),rst.forEach(t),bBo=r(uye," (Longformer model)"),uye.forEach(t),vBo=i(D),m2=n(D,"LI",{});var bye=s(m2);lce=n(bye,"STRONG",{});var tst=s(lce);FBo=r(tst,"megatron-bert"),tst.forEach(t),TBo=r(bye," \u2014 "),Jj=n(bye,"A",{href:!0});var ast=s(Jj);MBo=r(ast,"MegatronBertForTokenClassification"),ast.forEach(t),EBo=r(bye," (MegatronBert model)"),bye.forEach(t),CBo=i(D),g2=n(D,"LI",{});var vye=s(g2);ice=n(vye,"STRONG",{});var nst=s(ice);wBo=r(nst,"mobilebert"),nst.forEach(t),ABo=r(vye," \u2014 "),Yj=n(vye,"A",{href:!0});var sst=s(Yj);yBo=r(sst,"MobileBertForTokenClassification"),sst.forEach(t),LBo=r(vye," (MobileBERT model)"),vye.forEach(t),xBo=i(D),h2=n(D,"LI",{});var Fye=s(h2);dce=n(Fye,"STRONG",{});var lst=s(dce);kBo=r(lst,"mpnet"),lst.forEach(t),SBo=r(Fye," \u2014 "),Kj=n(Fye,"A",{href:!0});var ist=s(Kj);RBo=r(ist,"MPNetForTokenClassification"),ist.forEach(t),BBo=r(Fye," (MPNet model)"),Fye.forEach(t),PBo=i(D),p2=n(D,"LI",{});var Tye=s(p2);cce=n(Tye,"STRONG",{});var dst=s(cce);$Bo=r(dst,"nystromformer"),dst.forEach(t),IBo=r(Tye," \u2014 "),Zj=n(Tye,"A",{href:!0});var cst=s(Zj);qBo=r(cst,"NystromformerForTokenClassification"),cst.forEach(t),NBo=r(Tye," (Nystromformer model)"),Tye.forEach(t),jBo=i(D),_2=n(D,"LI",{});var Mye=s(_2);fce=n(Mye,"STRONG",{});var fst=s(fce);DBo=r(fst,"qdqbert"),fst.forEach(t),GBo=r(Mye," \u2014 "),eD=n(Mye,"A",{href:!0});var mst=s(eD);OBo=r(mst,"QDQBertForTokenClassification"),mst.forEach(t),VBo=r(Mye," (QDQBert model)"),Mye.forEach(t),XBo=i(D),u2=n(D,"LI",{});var Eye=s(u2);mce=n(Eye,"STRONG",{});var gst=s(mce);zBo=r(gst,"rembert"),gst.forEach(t),QBo=r(Eye," \u2014 "),oD=n(Eye,"A",{href:!0});var hst=s(oD);WBo=r(hst,"RemBertForTokenClassification"),hst.forEach(t),HBo=r(Eye," (RemBERT model)"),Eye.forEach(t),UBo=i(D),b2=n(D,"LI",{});var Cye=s(b2);gce=n(Cye,"STRONG",{});var pst=s(gce);JBo=r(pst,"roberta"),pst.forEach(t),YBo=r(Cye," \u2014 "),rD=n(Cye,"A",{href:!0});var _st=s(rD);KBo=r(_st,"RobertaForTokenClassification"),_st.forEach(t),ZBo=r(Cye," (RoBERTa model)"),Cye.forEach(t),ePo=i(D),v2=n(D,"LI",{});var wye=s(v2);hce=n(wye,"STRONG",{});var ust=s(hce);oPo=r(ust,"roformer"),ust.forEach(t),rPo=r(wye," \u2014 "),tD=n(wye,"A",{href:!0});var bst=s(tD);tPo=r(bst,"RoFormerForTokenClassification"),bst.forEach(t),aPo=r(wye," (RoFormer model)"),wye.forEach(t),nPo=i(D),F2=n(D,"LI",{});var Aye=s(F2);pce=n(Aye,"STRONG",{});var vst=s(pce);sPo=r(vst,"squeezebert"),vst.forEach(t),lPo=r(Aye," \u2014 "),aD=n(Aye,"A",{href:!0});var Fst=s(aD);iPo=r(Fst,"SqueezeBertForTokenClassification"),Fst.forEach(t),dPo=r(Aye," (SqueezeBERT model)"),Aye.forEach(t),cPo=i(D),T2=n(D,"LI",{});var yye=s(T2);_ce=n(yye,"STRONG",{});var Tst=s(_ce);fPo=r(Tst,"xlm"),Tst.forEach(t),mPo=r(yye," \u2014 "),nD=n(yye,"A",{href:!0});var Mst=s(nD);gPo=r(Mst,"XLMForTokenClassification"),Mst.forEach(t),hPo=r(yye," (XLM model)"),yye.forEach(t),pPo=i(D),M2=n(D,"LI",{});var Lye=s(M2);uce=n(Lye,"STRONG",{});var Est=s(uce);_Po=r(Est,"xlm-roberta"),Est.forEach(t),uPo=r(Lye," \u2014 "),sD=n(Lye,"A",{href:!0});var Cst=s(sD);bPo=r(Cst,"XLMRobertaForTokenClassification"),Cst.forEach(t),vPo=r(Lye," (XLM-RoBERTa model)"),Lye.forEach(t),FPo=i(D),E2=n(D,"LI",{});var xye=s(E2);bce=n(xye,"STRONG",{});var wst=s(bce);TPo=r(wst,"xlm-roberta-xl"),wst.forEach(t),MPo=r(xye," \u2014 "),lD=n(xye,"A",{href:!0});var Ast=s(lD);EPo=r(Ast,"XLMRobertaXLForTokenClassification"),Ast.forEach(t),CPo=r(xye," (XLM-RoBERTa-XL model)"),xye.forEach(t),wPo=i(D),C2=n(D,"LI",{});var kye=s(C2);vce=n(kye,"STRONG",{});var yst=s(vce);APo=r(yst,"xlnet"),yst.forEach(t),yPo=r(kye," \u2014 "),iD=n(kye,"A",{href:!0});var Lst=s(iD);LPo=r(Lst,"XLNetForTokenClassification"),Lst.forEach(t),xPo=r(kye," (XLNet model)"),kye.forEach(t),kPo=i(D),w2=n(D,"LI",{});var Sye=s(w2);Fce=n(Sye,"STRONG",{});var xst=s(Fce);SPo=r(xst,"yoso"),xst.forEach(t),RPo=r(Sye," \u2014 "),dD=n(Sye,"A",{href:!0});var kst=s(dD);BPo=r(kst,"YosoForTokenClassification"),kst.forEach(t),PPo=r(Sye," (YOSO model)"),Sye.forEach(t),D.forEach(t),$Po=i(Ht),A2=n(Ht,"P",{});var Rye=s(A2);IPo=r(Rye,"The model is set in evaluation mode by default using "),Tce=n(Rye,"CODE",{});var Sst=s(Tce);qPo=r(Sst,"model.eval()"),Sst.forEach(t),NPo=r(Rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=n(Rye,"CODE",{});var Rst=s(Mce);jPo=r(Rst,"model.train()"),Rst.forEach(t),Rye.forEach(t),DPo=i(Ht),Ece=n(Ht,"P",{});var Bst=s(Ece);GPo=r(Bst,"Examples:"),Bst.forEach(t),OPo=i(Ht),m(Tw.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),SBe=i(c),yd=n(c,"H2",{class:!0});var D$e=s(yd);y2=n(D$e,"A",{id:!0,class:!0,href:!0});var Pst=s(y2);Cce=n(Pst,"SPAN",{});var $st=s(Cce);m(Mw.$$.fragment,$st),$st.forEach(t),Pst.forEach(t),VPo=i(D$e),wce=n(D$e,"SPAN",{});var Ist=s(wce);XPo=r(Ist,"AutoModelForQuestionAnswering"),Ist.forEach(t),D$e.forEach(t),RBe=i(c),nr=n(c,"DIV",{class:!0});var pl=s(nr);m(Ew.$$.fragment,pl),zPo=i(pl),Ld=n(pl,"P",{});var eJ=s(Ld);QPo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cD=n(eJ,"A",{href:!0});var qst=s(cD);WPo=r(qst,"from_pretrained()"),qst.forEach(t),HPo=r(eJ," class method or the "),fD=n(eJ,"A",{href:!0});var Nst=s(fD);UPo=r(Nst,"from_config()"),Nst.forEach(t),JPo=r(eJ,` class
method.`),eJ.forEach(t),YPo=i(pl),Cw=n(pl,"P",{});var G$e=s(Cw);KPo=r(G$e,"This class cannot be instantiated directly using "),Ace=n(G$e,"CODE",{});var jst=s(Ace);ZPo=r(jst,"__init__()"),jst.forEach(t),e$o=r(G$e," (throws an error)."),G$e.forEach(t),o$o=i(pl),Zr=n(pl,"DIV",{class:!0});var _l=s(Zr);m(ww.$$.fragment,_l),r$o=i(_l),yce=n(_l,"P",{});var Dst=s(yce);t$o=r(Dst,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Dst.forEach(t),a$o=i(_l),xd=n(_l,"P",{});var oJ=s(xd);n$o=r(oJ,`Note:
Loading a model from its configuration file does `),Lce=n(oJ,"STRONG",{});var Gst=s(Lce);s$o=r(Gst,"not"),Gst.forEach(t),l$o=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=n(oJ,"A",{href:!0});var Ost=s(mD);i$o=r(Ost,"from_pretrained()"),Ost.forEach(t),d$o=r(oJ," to load the model weights."),oJ.forEach(t),c$o=i(_l),xce=n(_l,"P",{});var Vst=s(xce);f$o=r(Vst,"Examples:"),Vst.forEach(t),m$o=i(_l),m(Aw.$$.fragment,_l),_l.forEach(t),g$o=i(pl),Qe=n(pl,"DIV",{class:!0});var Ut=s(Qe);m(yw.$$.fragment,Ut),h$o=i(Ut),kce=n(Ut,"P",{});var Xst=s(kce);p$o=r(Xst,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xst.forEach(t),_$o=i(Ut),Za=n(Ut,"P",{});var zE=s(Za);u$o=r(zE,"The model class to instantiate is selected based on the "),Sce=n(zE,"CODE",{});var zst=s(Sce);b$o=r(zst,"model_type"),zst.forEach(t),v$o=r(zE,` property of the config object (either
passed as an argument or loaded from `),Rce=n(zE,"CODE",{});var Qst=s(Rce);F$o=r(Qst,"pretrained_model_name_or_path"),Qst.forEach(t),T$o=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=n(zE,"CODE",{});var Wst=s(Bce);M$o=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),E$o=r(zE,":"),zE.forEach(t),C$o=i(Ut),R=n(Ut,"UL",{});var P=s(R);L2=n(P,"LI",{});var Bye=s(L2);Pce=n(Bye,"STRONG",{});var Hst=s(Pce);w$o=r(Hst,"albert"),Hst.forEach(t),A$o=r(Bye," \u2014 "),gD=n(Bye,"A",{href:!0});var Ust=s(gD);y$o=r(Ust,"AlbertForQuestionAnswering"),Ust.forEach(t),L$o=r(Bye," (ALBERT model)"),Bye.forEach(t),x$o=i(P),x2=n(P,"LI",{});var Pye=s(x2);$ce=n(Pye,"STRONG",{});var Jst=s($ce);k$o=r(Jst,"bart"),Jst.forEach(t),S$o=r(Pye," \u2014 "),hD=n(Pye,"A",{href:!0});var Yst=s(hD);R$o=r(Yst,"BartForQuestionAnswering"),Yst.forEach(t),B$o=r(Pye," (BART model)"),Pye.forEach(t),P$o=i(P),k2=n(P,"LI",{});var $ye=s(k2);Ice=n($ye,"STRONG",{});var Kst=s(Ice);$$o=r(Kst,"bert"),Kst.forEach(t),I$o=r($ye," \u2014 "),pD=n($ye,"A",{href:!0});var Zst=s(pD);q$o=r(Zst,"BertForQuestionAnswering"),Zst.forEach(t),N$o=r($ye," (BERT model)"),$ye.forEach(t),j$o=i(P),S2=n(P,"LI",{});var Iye=s(S2);qce=n(Iye,"STRONG",{});var elt=s(qce);D$o=r(elt,"big_bird"),elt.forEach(t),G$o=r(Iye," \u2014 "),_D=n(Iye,"A",{href:!0});var olt=s(_D);O$o=r(olt,"BigBirdForQuestionAnswering"),olt.forEach(t),V$o=r(Iye," (BigBird model)"),Iye.forEach(t),X$o=i(P),R2=n(P,"LI",{});var qye=s(R2);Nce=n(qye,"STRONG",{});var rlt=s(Nce);z$o=r(rlt,"bigbird_pegasus"),rlt.forEach(t),Q$o=r(qye," \u2014 "),uD=n(qye,"A",{href:!0});var tlt=s(uD);W$o=r(tlt,"BigBirdPegasusForQuestionAnswering"),tlt.forEach(t),H$o=r(qye," (BigBirdPegasus model)"),qye.forEach(t),U$o=i(P),B2=n(P,"LI",{});var Nye=s(B2);jce=n(Nye,"STRONG",{});var alt=s(jce);J$o=r(alt,"camembert"),alt.forEach(t),Y$o=r(Nye," \u2014 "),bD=n(Nye,"A",{href:!0});var nlt=s(bD);K$o=r(nlt,"CamembertForQuestionAnswering"),nlt.forEach(t),Z$o=r(Nye," (CamemBERT model)"),Nye.forEach(t),eIo=i(P),P2=n(P,"LI",{});var jye=s(P2);Dce=n(jye,"STRONG",{});var slt=s(Dce);oIo=r(slt,"canine"),slt.forEach(t),rIo=r(jye," \u2014 "),vD=n(jye,"A",{href:!0});var llt=s(vD);tIo=r(llt,"CanineForQuestionAnswering"),llt.forEach(t),aIo=r(jye," (Canine model)"),jye.forEach(t),nIo=i(P),$2=n(P,"LI",{});var Dye=s($2);Gce=n(Dye,"STRONG",{});var ilt=s(Gce);sIo=r(ilt,"convbert"),ilt.forEach(t),lIo=r(Dye," \u2014 "),FD=n(Dye,"A",{href:!0});var dlt=s(FD);iIo=r(dlt,"ConvBertForQuestionAnswering"),dlt.forEach(t),dIo=r(Dye," (ConvBERT model)"),Dye.forEach(t),cIo=i(P),I2=n(P,"LI",{});var Gye=s(I2);Oce=n(Gye,"STRONG",{});var clt=s(Oce);fIo=r(clt,"data2vec-text"),clt.forEach(t),mIo=r(Gye," \u2014 "),TD=n(Gye,"A",{href:!0});var flt=s(TD);gIo=r(flt,"Data2VecTextForQuestionAnswering"),flt.forEach(t),hIo=r(Gye," (Data2VecText model)"),Gye.forEach(t),pIo=i(P),q2=n(P,"LI",{});var Oye=s(q2);Vce=n(Oye,"STRONG",{});var mlt=s(Vce);_Io=r(mlt,"deberta"),mlt.forEach(t),uIo=r(Oye," \u2014 "),MD=n(Oye,"A",{href:!0});var glt=s(MD);bIo=r(glt,"DebertaForQuestionAnswering"),glt.forEach(t),vIo=r(Oye," (DeBERTa model)"),Oye.forEach(t),FIo=i(P),N2=n(P,"LI",{});var Vye=s(N2);Xce=n(Vye,"STRONG",{});var hlt=s(Xce);TIo=r(hlt,"deberta-v2"),hlt.forEach(t),MIo=r(Vye," \u2014 "),ED=n(Vye,"A",{href:!0});var plt=s(ED);EIo=r(plt,"DebertaV2ForQuestionAnswering"),plt.forEach(t),CIo=r(Vye," (DeBERTa-v2 model)"),Vye.forEach(t),wIo=i(P),j2=n(P,"LI",{});var Xye=s(j2);zce=n(Xye,"STRONG",{});var _lt=s(zce);AIo=r(_lt,"distilbert"),_lt.forEach(t),yIo=r(Xye," \u2014 "),CD=n(Xye,"A",{href:!0});var ult=s(CD);LIo=r(ult,"DistilBertForQuestionAnswering"),ult.forEach(t),xIo=r(Xye," (DistilBERT model)"),Xye.forEach(t),kIo=i(P),D2=n(P,"LI",{});var zye=s(D2);Qce=n(zye,"STRONG",{});var blt=s(Qce);SIo=r(blt,"electra"),blt.forEach(t),RIo=r(zye," \u2014 "),wD=n(zye,"A",{href:!0});var vlt=s(wD);BIo=r(vlt,"ElectraForQuestionAnswering"),vlt.forEach(t),PIo=r(zye," (ELECTRA model)"),zye.forEach(t),$Io=i(P),G2=n(P,"LI",{});var Qye=s(G2);Wce=n(Qye,"STRONG",{});var Flt=s(Wce);IIo=r(Flt,"flaubert"),Flt.forEach(t),qIo=r(Qye," \u2014 "),AD=n(Qye,"A",{href:!0});var Tlt=s(AD);NIo=r(Tlt,"FlaubertForQuestionAnsweringSimple"),Tlt.forEach(t),jIo=r(Qye," (FlauBERT model)"),Qye.forEach(t),DIo=i(P),O2=n(P,"LI",{});var Wye=s(O2);Hce=n(Wye,"STRONG",{});var Mlt=s(Hce);GIo=r(Mlt,"fnet"),Mlt.forEach(t),OIo=r(Wye," \u2014 "),yD=n(Wye,"A",{href:!0});var Elt=s(yD);VIo=r(Elt,"FNetForQuestionAnswering"),Elt.forEach(t),XIo=r(Wye," (FNet model)"),Wye.forEach(t),zIo=i(P),V2=n(P,"LI",{});var Hye=s(V2);Uce=n(Hye,"STRONG",{});var Clt=s(Uce);QIo=r(Clt,"funnel"),Clt.forEach(t),WIo=r(Hye," \u2014 "),LD=n(Hye,"A",{href:!0});var wlt=s(LD);HIo=r(wlt,"FunnelForQuestionAnswering"),wlt.forEach(t),UIo=r(Hye," (Funnel Transformer model)"),Hye.forEach(t),JIo=i(P),X2=n(P,"LI",{});var Uye=s(X2);Jce=n(Uye,"STRONG",{});var Alt=s(Jce);YIo=r(Alt,"gptj"),Alt.forEach(t),KIo=r(Uye," \u2014 "),xD=n(Uye,"A",{href:!0});var ylt=s(xD);ZIo=r(ylt,"GPTJForQuestionAnswering"),ylt.forEach(t),eqo=r(Uye," (GPT-J model)"),Uye.forEach(t),oqo=i(P),z2=n(P,"LI",{});var Jye=s(z2);Yce=n(Jye,"STRONG",{});var Llt=s(Yce);rqo=r(Llt,"ibert"),Llt.forEach(t),tqo=r(Jye," \u2014 "),kD=n(Jye,"A",{href:!0});var xlt=s(kD);aqo=r(xlt,"IBertForQuestionAnswering"),xlt.forEach(t),nqo=r(Jye," (I-BERT model)"),Jye.forEach(t),sqo=i(P),Q2=n(P,"LI",{});var Yye=s(Q2);Kce=n(Yye,"STRONG",{});var klt=s(Kce);lqo=r(klt,"layoutlmv2"),klt.forEach(t),iqo=r(Yye," \u2014 "),SD=n(Yye,"A",{href:!0});var Slt=s(SD);dqo=r(Slt,"LayoutLMv2ForQuestionAnswering"),Slt.forEach(t),cqo=r(Yye," (LayoutLMv2 model)"),Yye.forEach(t),fqo=i(P),W2=n(P,"LI",{});var Kye=s(W2);Zce=n(Kye,"STRONG",{});var Rlt=s(Zce);mqo=r(Rlt,"led"),Rlt.forEach(t),gqo=r(Kye," \u2014 "),RD=n(Kye,"A",{href:!0});var Blt=s(RD);hqo=r(Blt,"LEDForQuestionAnswering"),Blt.forEach(t),pqo=r(Kye," (LED model)"),Kye.forEach(t),_qo=i(P),H2=n(P,"LI",{});var Zye=s(H2);efe=n(Zye,"STRONG",{});var Plt=s(efe);uqo=r(Plt,"longformer"),Plt.forEach(t),bqo=r(Zye," \u2014 "),BD=n(Zye,"A",{href:!0});var $lt=s(BD);vqo=r($lt,"LongformerForQuestionAnswering"),$lt.forEach(t),Fqo=r(Zye," (Longformer model)"),Zye.forEach(t),Tqo=i(P),U2=n(P,"LI",{});var e8e=s(U2);ofe=n(e8e,"STRONG",{});var Ilt=s(ofe);Mqo=r(Ilt,"lxmert"),Ilt.forEach(t),Eqo=r(e8e," \u2014 "),PD=n(e8e,"A",{href:!0});var qlt=s(PD);Cqo=r(qlt,"LxmertForQuestionAnswering"),qlt.forEach(t),wqo=r(e8e," (LXMERT model)"),e8e.forEach(t),Aqo=i(P),J2=n(P,"LI",{});var o8e=s(J2);rfe=n(o8e,"STRONG",{});var Nlt=s(rfe);yqo=r(Nlt,"mbart"),Nlt.forEach(t),Lqo=r(o8e," \u2014 "),$D=n(o8e,"A",{href:!0});var jlt=s($D);xqo=r(jlt,"MBartForQuestionAnswering"),jlt.forEach(t),kqo=r(o8e," (mBART model)"),o8e.forEach(t),Sqo=i(P),Y2=n(P,"LI",{});var r8e=s(Y2);tfe=n(r8e,"STRONG",{});var Dlt=s(tfe);Rqo=r(Dlt,"megatron-bert"),Dlt.forEach(t),Bqo=r(r8e," \u2014 "),ID=n(r8e,"A",{href:!0});var Glt=s(ID);Pqo=r(Glt,"MegatronBertForQuestionAnswering"),Glt.forEach(t),$qo=r(r8e," (MegatronBert model)"),r8e.forEach(t),Iqo=i(P),K2=n(P,"LI",{});var t8e=s(K2);afe=n(t8e,"STRONG",{});var Olt=s(afe);qqo=r(Olt,"mobilebert"),Olt.forEach(t),Nqo=r(t8e," \u2014 "),qD=n(t8e,"A",{href:!0});var Vlt=s(qD);jqo=r(Vlt,"MobileBertForQuestionAnswering"),Vlt.forEach(t),Dqo=r(t8e," (MobileBERT model)"),t8e.forEach(t),Gqo=i(P),Z2=n(P,"LI",{});var a8e=s(Z2);nfe=n(a8e,"STRONG",{});var Xlt=s(nfe);Oqo=r(Xlt,"mpnet"),Xlt.forEach(t),Vqo=r(a8e," \u2014 "),ND=n(a8e,"A",{href:!0});var zlt=s(ND);Xqo=r(zlt,"MPNetForQuestionAnswering"),zlt.forEach(t),zqo=r(a8e," (MPNet model)"),a8e.forEach(t),Qqo=i(P),e5=n(P,"LI",{});var n8e=s(e5);sfe=n(n8e,"STRONG",{});var Qlt=s(sfe);Wqo=r(Qlt,"nystromformer"),Qlt.forEach(t),Hqo=r(n8e," \u2014 "),jD=n(n8e,"A",{href:!0});var Wlt=s(jD);Uqo=r(Wlt,"NystromformerForQuestionAnswering"),Wlt.forEach(t),Jqo=r(n8e," (Nystromformer model)"),n8e.forEach(t),Yqo=i(P),o5=n(P,"LI",{});var s8e=s(o5);lfe=n(s8e,"STRONG",{});var Hlt=s(lfe);Kqo=r(Hlt,"qdqbert"),Hlt.forEach(t),Zqo=r(s8e," \u2014 "),DD=n(s8e,"A",{href:!0});var Ult=s(DD);eNo=r(Ult,"QDQBertForQuestionAnswering"),Ult.forEach(t),oNo=r(s8e," (QDQBert model)"),s8e.forEach(t),rNo=i(P),r5=n(P,"LI",{});var l8e=s(r5);ife=n(l8e,"STRONG",{});var Jlt=s(ife);tNo=r(Jlt,"reformer"),Jlt.forEach(t),aNo=r(l8e," \u2014 "),GD=n(l8e,"A",{href:!0});var Ylt=s(GD);nNo=r(Ylt,"ReformerForQuestionAnswering"),Ylt.forEach(t),sNo=r(l8e," (Reformer model)"),l8e.forEach(t),lNo=i(P),t5=n(P,"LI",{});var i8e=s(t5);dfe=n(i8e,"STRONG",{});var Klt=s(dfe);iNo=r(Klt,"rembert"),Klt.forEach(t),dNo=r(i8e," \u2014 "),OD=n(i8e,"A",{href:!0});var Zlt=s(OD);cNo=r(Zlt,"RemBertForQuestionAnswering"),Zlt.forEach(t),fNo=r(i8e," (RemBERT model)"),i8e.forEach(t),mNo=i(P),a5=n(P,"LI",{});var d8e=s(a5);cfe=n(d8e,"STRONG",{});var eit=s(cfe);gNo=r(eit,"roberta"),eit.forEach(t),hNo=r(d8e," \u2014 "),VD=n(d8e,"A",{href:!0});var oit=s(VD);pNo=r(oit,"RobertaForQuestionAnswering"),oit.forEach(t),_No=r(d8e," (RoBERTa model)"),d8e.forEach(t),uNo=i(P),n5=n(P,"LI",{});var c8e=s(n5);ffe=n(c8e,"STRONG",{});var rit=s(ffe);bNo=r(rit,"roformer"),rit.forEach(t),vNo=r(c8e," \u2014 "),XD=n(c8e,"A",{href:!0});var tit=s(XD);FNo=r(tit,"RoFormerForQuestionAnswering"),tit.forEach(t),TNo=r(c8e," (RoFormer model)"),c8e.forEach(t),MNo=i(P),s5=n(P,"LI",{});var f8e=s(s5);mfe=n(f8e,"STRONG",{});var ait=s(mfe);ENo=r(ait,"splinter"),ait.forEach(t),CNo=r(f8e," \u2014 "),zD=n(f8e,"A",{href:!0});var nit=s(zD);wNo=r(nit,"SplinterForQuestionAnswering"),nit.forEach(t),ANo=r(f8e," (Splinter model)"),f8e.forEach(t),yNo=i(P),l5=n(P,"LI",{});var m8e=s(l5);gfe=n(m8e,"STRONG",{});var sit=s(gfe);LNo=r(sit,"squeezebert"),sit.forEach(t),xNo=r(m8e," \u2014 "),QD=n(m8e,"A",{href:!0});var lit=s(QD);kNo=r(lit,"SqueezeBertForQuestionAnswering"),lit.forEach(t),SNo=r(m8e," (SqueezeBERT model)"),m8e.forEach(t),RNo=i(P),i5=n(P,"LI",{});var g8e=s(i5);hfe=n(g8e,"STRONG",{});var iit=s(hfe);BNo=r(iit,"xlm"),iit.forEach(t),PNo=r(g8e," \u2014 "),WD=n(g8e,"A",{href:!0});var dit=s(WD);$No=r(dit,"XLMForQuestionAnsweringSimple"),dit.forEach(t),INo=r(g8e," (XLM model)"),g8e.forEach(t),qNo=i(P),d5=n(P,"LI",{});var h8e=s(d5);pfe=n(h8e,"STRONG",{});var cit=s(pfe);NNo=r(cit,"xlm-roberta"),cit.forEach(t),jNo=r(h8e," \u2014 "),HD=n(h8e,"A",{href:!0});var fit=s(HD);DNo=r(fit,"XLMRobertaForQuestionAnswering"),fit.forEach(t),GNo=r(h8e," (XLM-RoBERTa model)"),h8e.forEach(t),ONo=i(P),c5=n(P,"LI",{});var p8e=s(c5);_fe=n(p8e,"STRONG",{});var mit=s(_fe);VNo=r(mit,"xlm-roberta-xl"),mit.forEach(t),XNo=r(p8e," \u2014 "),UD=n(p8e,"A",{href:!0});var git=s(UD);zNo=r(git,"XLMRobertaXLForQuestionAnswering"),git.forEach(t),QNo=r(p8e," (XLM-RoBERTa-XL model)"),p8e.forEach(t),WNo=i(P),f5=n(P,"LI",{});var _8e=s(f5);ufe=n(_8e,"STRONG",{});var hit=s(ufe);HNo=r(hit,"xlnet"),hit.forEach(t),UNo=r(_8e," \u2014 "),JD=n(_8e,"A",{href:!0});var pit=s(JD);JNo=r(pit,"XLNetForQuestionAnsweringSimple"),pit.forEach(t),YNo=r(_8e," (XLNet model)"),_8e.forEach(t),KNo=i(P),m5=n(P,"LI",{});var u8e=s(m5);bfe=n(u8e,"STRONG",{});var _it=s(bfe);ZNo=r(_it,"yoso"),_it.forEach(t),ejo=r(u8e," \u2014 "),YD=n(u8e,"A",{href:!0});var uit=s(YD);ojo=r(uit,"YosoForQuestionAnswering"),uit.forEach(t),rjo=r(u8e," (YOSO model)"),u8e.forEach(t),P.forEach(t),tjo=i(Ut),g5=n(Ut,"P",{});var b8e=s(g5);ajo=r(b8e,"The model is set in evaluation mode by default using "),vfe=n(b8e,"CODE",{});var bit=s(vfe);njo=r(bit,"model.eval()"),bit.forEach(t),sjo=r(b8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=n(b8e,"CODE",{});var vit=s(Ffe);ljo=r(vit,"model.train()"),vit.forEach(t),b8e.forEach(t),ijo=i(Ut),Tfe=n(Ut,"P",{});var Fit=s(Tfe);djo=r(Fit,"Examples:"),Fit.forEach(t),cjo=i(Ut),m(Lw.$$.fragment,Ut),Ut.forEach(t),pl.forEach(t),BBe=i(c),kd=n(c,"H2",{class:!0});var O$e=s(kd);h5=n(O$e,"A",{id:!0,class:!0,href:!0});var Tit=s(h5);Mfe=n(Tit,"SPAN",{});var Mit=s(Mfe);m(xw.$$.fragment,Mit),Mit.forEach(t),Tit.forEach(t),fjo=i(O$e),Efe=n(O$e,"SPAN",{});var Eit=s(Efe);mjo=r(Eit,"AutoModelForTableQuestionAnswering"),Eit.forEach(t),O$e.forEach(t),PBe=i(c),sr=n(c,"DIV",{class:!0});var ul=s(sr);m(kw.$$.fragment,ul),gjo=i(ul),Sd=n(ul,"P",{});var rJ=s(Sd);hjo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KD=n(rJ,"A",{href:!0});var Cit=s(KD);pjo=r(Cit,"from_pretrained()"),Cit.forEach(t),_jo=r(rJ," class method or the "),ZD=n(rJ,"A",{href:!0});var wit=s(ZD);ujo=r(wit,"from_config()"),wit.forEach(t),bjo=r(rJ,` class
method.`),rJ.forEach(t),vjo=i(ul),Sw=n(ul,"P",{});var V$e=s(Sw);Fjo=r(V$e,"This class cannot be instantiated directly using "),Cfe=n(V$e,"CODE",{});var Ait=s(Cfe);Tjo=r(Ait,"__init__()"),Ait.forEach(t),Mjo=r(V$e," (throws an error)."),V$e.forEach(t),Ejo=i(ul),et=n(ul,"DIV",{class:!0});var bl=s(et);m(Rw.$$.fragment,bl),Cjo=i(bl),wfe=n(bl,"P",{});var yit=s(wfe);wjo=r(yit,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yit.forEach(t),Ajo=i(bl),Rd=n(bl,"P",{});var tJ=s(Rd);yjo=r(tJ,`Note:
Loading a model from its configuration file does `),Afe=n(tJ,"STRONG",{});var Lit=s(Afe);Ljo=r(Lit,"not"),Lit.forEach(t),xjo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=n(tJ,"A",{href:!0});var xit=s(eG);kjo=r(xit,"from_pretrained()"),xit.forEach(t),Sjo=r(tJ," to load the model weights."),tJ.forEach(t),Rjo=i(bl),yfe=n(bl,"P",{});var kit=s(yfe);Bjo=r(kit,"Examples:"),kit.forEach(t),Pjo=i(bl),m(Bw.$$.fragment,bl),bl.forEach(t),$jo=i(ul),We=n(ul,"DIV",{class:!0});var Jt=s(We);m(Pw.$$.fragment,Jt),Ijo=i(Jt),Lfe=n(Jt,"P",{});var Sit=s(Lfe);qjo=r(Sit,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Sit.forEach(t),Njo=i(Jt),en=n(Jt,"P",{});var QE=s(en);jjo=r(QE,"The model class to instantiate is selected based on the "),xfe=n(QE,"CODE",{});var Rit=s(xfe);Djo=r(Rit,"model_type"),Rit.forEach(t),Gjo=r(QE,` property of the config object (either
passed as an argument or loaded from `),kfe=n(QE,"CODE",{});var Bit=s(kfe);Ojo=r(Bit,"pretrained_model_name_or_path"),Bit.forEach(t),Vjo=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(QE,"CODE",{});var Pit=s(Sfe);Xjo=r(Pit,"pretrained_model_name_or_path"),Pit.forEach(t),zjo=r(QE,":"),QE.forEach(t),Qjo=i(Jt),Rfe=n(Jt,"UL",{});var $it=s(Rfe);p5=n($it,"LI",{});var v8e=s(p5);Bfe=n(v8e,"STRONG",{});var Iit=s(Bfe);Wjo=r(Iit,"tapas"),Iit.forEach(t),Hjo=r(v8e," \u2014 "),oG=n(v8e,"A",{href:!0});var qit=s(oG);Ujo=r(qit,"TapasForQuestionAnswering"),qit.forEach(t),Jjo=r(v8e," (TAPAS model)"),v8e.forEach(t),$it.forEach(t),Yjo=i(Jt),_5=n(Jt,"P",{});var F8e=s(_5);Kjo=r(F8e,"The model is set in evaluation mode by default using "),Pfe=n(F8e,"CODE",{});var Nit=s(Pfe);Zjo=r(Nit,"model.eval()"),Nit.forEach(t),eDo=r(F8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$fe=n(F8e,"CODE",{});var jit=s($fe);oDo=r(jit,"model.train()"),jit.forEach(t),F8e.forEach(t),rDo=i(Jt),Ife=n(Jt,"P",{});var Dit=s(Ife);tDo=r(Dit,"Examples:"),Dit.forEach(t),aDo=i(Jt),m($w.$$.fragment,Jt),Jt.forEach(t),ul.forEach(t),$Be=i(c),Bd=n(c,"H2",{class:!0});var X$e=s(Bd);u5=n(X$e,"A",{id:!0,class:!0,href:!0});var Git=s(u5);qfe=n(Git,"SPAN",{});var Oit=s(qfe);m(Iw.$$.fragment,Oit),Oit.forEach(t),Git.forEach(t),nDo=i(X$e),Nfe=n(X$e,"SPAN",{});var Vit=s(Nfe);sDo=r(Vit,"AutoModelForImageClassification"),Vit.forEach(t),X$e.forEach(t),IBe=i(c),lr=n(c,"DIV",{class:!0});var vl=s(lr);m(qw.$$.fragment,vl),lDo=i(vl),Pd=n(vl,"P",{});var aJ=s(Pd);iDo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rG=n(aJ,"A",{href:!0});var Xit=s(rG);dDo=r(Xit,"from_pretrained()"),Xit.forEach(t),cDo=r(aJ," class method or the "),tG=n(aJ,"A",{href:!0});var zit=s(tG);fDo=r(zit,"from_config()"),zit.forEach(t),mDo=r(aJ,` class
method.`),aJ.forEach(t),gDo=i(vl),Nw=n(vl,"P",{});var z$e=s(Nw);hDo=r(z$e,"This class cannot be instantiated directly using "),jfe=n(z$e,"CODE",{});var Qit=s(jfe);pDo=r(Qit,"__init__()"),Qit.forEach(t),_Do=r(z$e," (throws an error)."),z$e.forEach(t),uDo=i(vl),ot=n(vl,"DIV",{class:!0});var Fl=s(ot);m(jw.$$.fragment,Fl),bDo=i(Fl),Dfe=n(Fl,"P",{});var Wit=s(Dfe);vDo=r(Wit,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wit.forEach(t),FDo=i(Fl),$d=n(Fl,"P",{});var nJ=s($d);TDo=r(nJ,`Note:
Loading a model from its configuration file does `),Gfe=n(nJ,"STRONG",{});var Hit=s(Gfe);MDo=r(Hit,"not"),Hit.forEach(t),EDo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=n(nJ,"A",{href:!0});var Uit=s(aG);CDo=r(Uit,"from_pretrained()"),Uit.forEach(t),wDo=r(nJ," to load the model weights."),nJ.forEach(t),ADo=i(Fl),Ofe=n(Fl,"P",{});var Jit=s(Ofe);yDo=r(Jit,"Examples:"),Jit.forEach(t),LDo=i(Fl),m(Dw.$$.fragment,Fl),Fl.forEach(t),xDo=i(vl),He=n(vl,"DIV",{class:!0});var Yt=s(He);m(Gw.$$.fragment,Yt),kDo=i(Yt),Vfe=n(Yt,"P",{});var Yit=s(Vfe);SDo=r(Yit,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Yit.forEach(t),RDo=i(Yt),on=n(Yt,"P",{});var WE=s(on);BDo=r(WE,"The model class to instantiate is selected based on the "),Xfe=n(WE,"CODE",{});var Kit=s(Xfe);PDo=r(Kit,"model_type"),Kit.forEach(t),$Do=r(WE,` property of the config object (either
passed as an argument or loaded from `),zfe=n(WE,"CODE",{});var Zit=s(zfe);IDo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),qDo=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qfe=n(WE,"CODE",{});var edt=s(Qfe);NDo=r(edt,"pretrained_model_name_or_path"),edt.forEach(t),jDo=r(WE,":"),WE.forEach(t),DDo=i(Yt),de=n(Yt,"UL",{});var ge=s(de);b5=n(ge,"LI",{});var T8e=s(b5);Wfe=n(T8e,"STRONG",{});var odt=s(Wfe);GDo=r(odt,"beit"),odt.forEach(t),ODo=r(T8e," \u2014 "),nG=n(T8e,"A",{href:!0});var rdt=s(nG);VDo=r(rdt,"BeitForImageClassification"),rdt.forEach(t),XDo=r(T8e," (BEiT model)"),T8e.forEach(t),zDo=i(ge),v5=n(ge,"LI",{});var M8e=s(v5);Hfe=n(M8e,"STRONG",{});var tdt=s(Hfe);QDo=r(tdt,"convnext"),tdt.forEach(t),WDo=r(M8e," \u2014 "),sG=n(M8e,"A",{href:!0});var adt=s(sG);HDo=r(adt,"ConvNextForImageClassification"),adt.forEach(t),UDo=r(M8e," (ConvNext model)"),M8e.forEach(t),JDo=i(ge),F5=n(ge,"LI",{});var E8e=s(F5);Ufe=n(E8e,"STRONG",{});var ndt=s(Ufe);YDo=r(ndt,"data2vec-vision"),ndt.forEach(t),KDo=r(E8e," \u2014 "),lG=n(E8e,"A",{href:!0});var sdt=s(lG);ZDo=r(sdt,"Data2VecVisionForImageClassification"),sdt.forEach(t),eGo=r(E8e," (Data2VecVision model)"),E8e.forEach(t),oGo=i(ge),Xs=n(ge,"LI",{});var A7=s(Xs);Jfe=n(A7,"STRONG",{});var ldt=s(Jfe);rGo=r(ldt,"deit"),ldt.forEach(t),tGo=r(A7," \u2014 "),iG=n(A7,"A",{href:!0});var idt=s(iG);aGo=r(idt,"DeiTForImageClassification"),idt.forEach(t),nGo=r(A7," or "),dG=n(A7,"A",{href:!0});var ddt=s(dG);sGo=r(ddt,"DeiTForImageClassificationWithTeacher"),ddt.forEach(t),lGo=r(A7," (DeiT model)"),A7.forEach(t),iGo=i(ge),T5=n(ge,"LI",{});var C8e=s(T5);Yfe=n(C8e,"STRONG",{});var cdt=s(Yfe);dGo=r(cdt,"imagegpt"),cdt.forEach(t),cGo=r(C8e," \u2014 "),cG=n(C8e,"A",{href:!0});var fdt=s(cG);fGo=r(fdt,"ImageGPTForImageClassification"),fdt.forEach(t),mGo=r(C8e," (ImageGPT model)"),C8e.forEach(t),gGo=i(ge),ma=n(ge,"LI",{});var Nf=s(ma);Kfe=n(Nf,"STRONG",{});var mdt=s(Kfe);hGo=r(mdt,"perceiver"),mdt.forEach(t),pGo=r(Nf," \u2014 "),fG=n(Nf,"A",{href:!0});var gdt=s(fG);_Go=r(gdt,"PerceiverForImageClassificationLearned"),gdt.forEach(t),uGo=r(Nf," or "),mG=n(Nf,"A",{href:!0});var hdt=s(mG);bGo=r(hdt,"PerceiverForImageClassificationFourier"),hdt.forEach(t),vGo=r(Nf," or "),gG=n(Nf,"A",{href:!0});var pdt=s(gG);FGo=r(pdt,"PerceiverForImageClassificationConvProcessing"),pdt.forEach(t),TGo=r(Nf," (Perceiver model)"),Nf.forEach(t),MGo=i(ge),M5=n(ge,"LI",{});var w8e=s(M5);Zfe=n(w8e,"STRONG",{});var _dt=s(Zfe);EGo=r(_dt,"poolformer"),_dt.forEach(t),CGo=r(w8e," \u2014 "),hG=n(w8e,"A",{href:!0});var udt=s(hG);wGo=r(udt,"PoolFormerForImageClassification"),udt.forEach(t),AGo=r(w8e," (PoolFormer model)"),w8e.forEach(t),yGo=i(ge),E5=n(ge,"LI",{});var A8e=s(E5);eme=n(A8e,"STRONG",{});var bdt=s(eme);LGo=r(bdt,"regnet"),bdt.forEach(t),xGo=r(A8e," \u2014 "),pG=n(A8e,"A",{href:!0});var vdt=s(pG);kGo=r(vdt,"RegNetForImageClassification"),vdt.forEach(t),SGo=r(A8e," (RegNet model)"),A8e.forEach(t),RGo=i(ge),C5=n(ge,"LI",{});var y8e=s(C5);ome=n(y8e,"STRONG",{});var Fdt=s(ome);BGo=r(Fdt,"resnet"),Fdt.forEach(t),PGo=r(y8e," \u2014 "),_G=n(y8e,"A",{href:!0});var Tdt=s(_G);$Go=r(Tdt,"ResNetForImageClassification"),Tdt.forEach(t),IGo=r(y8e," (ResNet model)"),y8e.forEach(t),qGo=i(ge),w5=n(ge,"LI",{});var L8e=s(w5);rme=n(L8e,"STRONG",{});var Mdt=s(rme);NGo=r(Mdt,"segformer"),Mdt.forEach(t),jGo=r(L8e," \u2014 "),uG=n(L8e,"A",{href:!0});var Edt=s(uG);DGo=r(Edt,"SegformerForImageClassification"),Edt.forEach(t),GGo=r(L8e," (SegFormer model)"),L8e.forEach(t),OGo=i(ge),A5=n(ge,"LI",{});var x8e=s(A5);tme=n(x8e,"STRONG",{});var Cdt=s(tme);VGo=r(Cdt,"swin"),Cdt.forEach(t),XGo=r(x8e," \u2014 "),bG=n(x8e,"A",{href:!0});var wdt=s(bG);zGo=r(wdt,"SwinForImageClassification"),wdt.forEach(t),QGo=r(x8e," (Swin model)"),x8e.forEach(t),WGo=i(ge),y5=n(ge,"LI",{});var k8e=s(y5);ame=n(k8e,"STRONG",{});var Adt=s(ame);HGo=r(Adt,"van"),Adt.forEach(t),UGo=r(k8e," \u2014 "),vG=n(k8e,"A",{href:!0});var ydt=s(vG);JGo=r(ydt,"VanForImageClassification"),ydt.forEach(t),YGo=r(k8e," (VAN model)"),k8e.forEach(t),KGo=i(ge),L5=n(ge,"LI",{});var S8e=s(L5);nme=n(S8e,"STRONG",{});var Ldt=s(nme);ZGo=r(Ldt,"vit"),Ldt.forEach(t),eOo=r(S8e," \u2014 "),FG=n(S8e,"A",{href:!0});var xdt=s(FG);oOo=r(xdt,"ViTForImageClassification"),xdt.forEach(t),rOo=r(S8e," (ViT model)"),S8e.forEach(t),ge.forEach(t),tOo=i(Yt),x5=n(Yt,"P",{});var R8e=s(x5);aOo=r(R8e,"The model is set in evaluation mode by default using "),sme=n(R8e,"CODE",{});var kdt=s(sme);nOo=r(kdt,"model.eval()"),kdt.forEach(t),sOo=r(R8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=n(R8e,"CODE",{});var Sdt=s(lme);lOo=r(Sdt,"model.train()"),Sdt.forEach(t),R8e.forEach(t),iOo=i(Yt),ime=n(Yt,"P",{});var Rdt=s(ime);dOo=r(Rdt,"Examples:"),Rdt.forEach(t),cOo=i(Yt),m(Ow.$$.fragment,Yt),Yt.forEach(t),vl.forEach(t),qBe=i(c),Id=n(c,"H2",{class:!0});var Q$e=s(Id);k5=n(Q$e,"A",{id:!0,class:!0,href:!0});var Bdt=s(k5);dme=n(Bdt,"SPAN",{});var Pdt=s(dme);m(Vw.$$.fragment,Pdt),Pdt.forEach(t),Bdt.forEach(t),fOo=i(Q$e),cme=n(Q$e,"SPAN",{});var $dt=s(cme);mOo=r($dt,"AutoModelForVision2Seq"),$dt.forEach(t),Q$e.forEach(t),NBe=i(c),ir=n(c,"DIV",{class:!0});var Tl=s(ir);m(Xw.$$.fragment,Tl),gOo=i(Tl),qd=n(Tl,"P",{});var sJ=s(qd);hOo=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),TG=n(sJ,"A",{href:!0});var Idt=s(TG);pOo=r(Idt,"from_pretrained()"),Idt.forEach(t),_Oo=r(sJ," class method or the "),MG=n(sJ,"A",{href:!0});var qdt=s(MG);uOo=r(qdt,"from_config()"),qdt.forEach(t),bOo=r(sJ,` class
method.`),sJ.forEach(t),vOo=i(Tl),zw=n(Tl,"P",{});var W$e=s(zw);FOo=r(W$e,"This class cannot be instantiated directly using "),fme=n(W$e,"CODE",{});var Ndt=s(fme);TOo=r(Ndt,"__init__()"),Ndt.forEach(t),MOo=r(W$e," (throws an error)."),W$e.forEach(t),EOo=i(Tl),rt=n(Tl,"DIV",{class:!0});var Ml=s(rt);m(Qw.$$.fragment,Ml),COo=i(Ml),mme=n(Ml,"P",{});var jdt=s(mme);wOo=r(jdt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jdt.forEach(t),AOo=i(Ml),Nd=n(Ml,"P",{});var lJ=s(Nd);yOo=r(lJ,`Note:
Loading a model from its configuration file does `),gme=n(lJ,"STRONG",{});var Ddt=s(gme);LOo=r(Ddt,"not"),Ddt.forEach(t),xOo=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=n(lJ,"A",{href:!0});var Gdt=s(EG);kOo=r(Gdt,"from_pretrained()"),Gdt.forEach(t),SOo=r(lJ," to load the model weights."),lJ.forEach(t),ROo=i(Ml),hme=n(Ml,"P",{});var Odt=s(hme);BOo=r(Odt,"Examples:"),Odt.forEach(t),POo=i(Ml),m(Ww.$$.fragment,Ml),Ml.forEach(t),$Oo=i(Tl),Ue=n(Tl,"DIV",{class:!0});var Kt=s(Ue);m(Hw.$$.fragment,Kt),IOo=i(Kt),pme=n(Kt,"P",{});var Vdt=s(pme);qOo=r(Vdt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vdt.forEach(t),NOo=i(Kt),rn=n(Kt,"P",{});var HE=s(rn);jOo=r(HE,"The model class to instantiate is selected based on the "),_me=n(HE,"CODE",{});var Xdt=s(_me);DOo=r(Xdt,"model_type"),Xdt.forEach(t),GOo=r(HE,` property of the config object (either
passed as an argument or loaded from `),ume=n(HE,"CODE",{});var zdt=s(ume);OOo=r(zdt,"pretrained_model_name_or_path"),zdt.forEach(t),VOo=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=n(HE,"CODE",{});var Qdt=s(bme);XOo=r(Qdt,"pretrained_model_name_or_path"),Qdt.forEach(t),zOo=r(HE,":"),HE.forEach(t),QOo=i(Kt),vme=n(Kt,"UL",{});var Wdt=s(vme);S5=n(Wdt,"LI",{});var B8e=s(S5);Fme=n(B8e,"STRONG",{});var Hdt=s(Fme);WOo=r(Hdt,"vision-encoder-decoder"),Hdt.forEach(t),HOo=r(B8e," \u2014 "),CG=n(B8e,"A",{href:!0});var Udt=s(CG);UOo=r(Udt,"VisionEncoderDecoderModel"),Udt.forEach(t),JOo=r(B8e," (Vision Encoder decoder model)"),B8e.forEach(t),Wdt.forEach(t),YOo=i(Kt),R5=n(Kt,"P",{});var P8e=s(R5);KOo=r(P8e,"The model is set in evaluation mode by default using "),Tme=n(P8e,"CODE",{});var Jdt=s(Tme);ZOo=r(Jdt,"model.eval()"),Jdt.forEach(t),eVo=r(P8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=n(P8e,"CODE",{});var Ydt=s(Mme);oVo=r(Ydt,"model.train()"),Ydt.forEach(t),P8e.forEach(t),rVo=i(Kt),Eme=n(Kt,"P",{});var Kdt=s(Eme);tVo=r(Kdt,"Examples:"),Kdt.forEach(t),aVo=i(Kt),m(Uw.$$.fragment,Kt),Kt.forEach(t),Tl.forEach(t),jBe=i(c),jd=n(c,"H2",{class:!0});var H$e=s(jd);B5=n(H$e,"A",{id:!0,class:!0,href:!0});var Zdt=s(B5);Cme=n(Zdt,"SPAN",{});var ect=s(Cme);m(Jw.$$.fragment,ect),ect.forEach(t),Zdt.forEach(t),nVo=i(H$e),wme=n(H$e,"SPAN",{});var oct=s(wme);sVo=r(oct,"AutoModelForAudioClassification"),oct.forEach(t),H$e.forEach(t),DBe=i(c),dr=n(c,"DIV",{class:!0});var El=s(dr);m(Yw.$$.fragment,El),lVo=i(El),Dd=n(El,"P",{});var iJ=s(Dd);iVo=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wG=n(iJ,"A",{href:!0});var rct=s(wG);dVo=r(rct,"from_pretrained()"),rct.forEach(t),cVo=r(iJ," class method or the "),AG=n(iJ,"A",{href:!0});var tct=s(AG);fVo=r(tct,"from_config()"),tct.forEach(t),mVo=r(iJ,` class
method.`),iJ.forEach(t),gVo=i(El),Kw=n(El,"P",{});var U$e=s(Kw);hVo=r(U$e,"This class cannot be instantiated directly using "),Ame=n(U$e,"CODE",{});var act=s(Ame);pVo=r(act,"__init__()"),act.forEach(t),_Vo=r(U$e," (throws an error)."),U$e.forEach(t),uVo=i(El),tt=n(El,"DIV",{class:!0});var Cl=s(tt);m(Zw.$$.fragment,Cl),bVo=i(Cl),yme=n(Cl,"P",{});var nct=s(yme);vVo=r(nct,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),nct.forEach(t),FVo=i(Cl),Gd=n(Cl,"P",{});var dJ=s(Gd);TVo=r(dJ,`Note:
Loading a model from its configuration file does `),Lme=n(dJ,"STRONG",{});var sct=s(Lme);MVo=r(sct,"not"),sct.forEach(t),EVo=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=n(dJ,"A",{href:!0});var lct=s(yG);CVo=r(lct,"from_pretrained()"),lct.forEach(t),wVo=r(dJ," to load the model weights."),dJ.forEach(t),AVo=i(Cl),xme=n(Cl,"P",{});var ict=s(xme);yVo=r(ict,"Examples:"),ict.forEach(t),LVo=i(Cl),m(eA.$$.fragment,Cl),Cl.forEach(t),xVo=i(El),Je=n(El,"DIV",{class:!0});var Zt=s(Je);m(oA.$$.fragment,Zt),kVo=i(Zt),kme=n(Zt,"P",{});var dct=s(kme);SVo=r(dct,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dct.forEach(t),RVo=i(Zt),tn=n(Zt,"P",{});var UE=s(tn);BVo=r(UE,"The model class to instantiate is selected based on the "),Sme=n(UE,"CODE",{});var cct=s(Sme);PVo=r(cct,"model_type"),cct.forEach(t),$Vo=r(UE,` property of the config object (either
passed as an argument or loaded from `),Rme=n(UE,"CODE",{});var fct=s(Rme);IVo=r(fct,"pretrained_model_name_or_path"),fct.forEach(t),qVo=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=n(UE,"CODE",{});var mct=s(Bme);NVo=r(mct,"pretrained_model_name_or_path"),mct.forEach(t),jVo=r(UE,":"),UE.forEach(t),DVo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);P5=n(Do,"LI",{});var $8e=s(P5);Pme=n($8e,"STRONG",{});var gct=s(Pme);GVo=r(gct,"data2vec-audio"),gct.forEach(t),OVo=r($8e," \u2014 "),LG=n($8e,"A",{href:!0});var hct=s(LG);VVo=r(hct,"Data2VecAudioForSequenceClassification"),hct.forEach(t),XVo=r($8e," (Data2VecAudio model)"),$8e.forEach(t),zVo=i(Do),$5=n(Do,"LI",{});var I8e=s($5);$me=n(I8e,"STRONG",{});var pct=s($me);QVo=r(pct,"hubert"),pct.forEach(t),WVo=r(I8e," \u2014 "),xG=n(I8e,"A",{href:!0});var _ct=s(xG);HVo=r(_ct,"HubertForSequenceClassification"),_ct.forEach(t),UVo=r(I8e," (Hubert model)"),I8e.forEach(t),JVo=i(Do),I5=n(Do,"LI",{});var q8e=s(I5);Ime=n(q8e,"STRONG",{});var uct=s(Ime);YVo=r(uct,"sew"),uct.forEach(t),KVo=r(q8e," \u2014 "),kG=n(q8e,"A",{href:!0});var bct=s(kG);ZVo=r(bct,"SEWForSequenceClassification"),bct.forEach(t),eXo=r(q8e," (SEW model)"),q8e.forEach(t),oXo=i(Do),q5=n(Do,"LI",{});var N8e=s(q5);qme=n(N8e,"STRONG",{});var vct=s(qme);rXo=r(vct,"sew-d"),vct.forEach(t),tXo=r(N8e," \u2014 "),SG=n(N8e,"A",{href:!0});var Fct=s(SG);aXo=r(Fct,"SEWDForSequenceClassification"),Fct.forEach(t),nXo=r(N8e," (SEW-D model)"),N8e.forEach(t),sXo=i(Do),N5=n(Do,"LI",{});var j8e=s(N5);Nme=n(j8e,"STRONG",{});var Tct=s(Nme);lXo=r(Tct,"unispeech"),Tct.forEach(t),iXo=r(j8e," \u2014 "),RG=n(j8e,"A",{href:!0});var Mct=s(RG);dXo=r(Mct,"UniSpeechForSequenceClassification"),Mct.forEach(t),cXo=r(j8e," (UniSpeech model)"),j8e.forEach(t),fXo=i(Do),j5=n(Do,"LI",{});var D8e=s(j5);jme=n(D8e,"STRONG",{});var Ect=s(jme);mXo=r(Ect,"unispeech-sat"),Ect.forEach(t),gXo=r(D8e," \u2014 "),BG=n(D8e,"A",{href:!0});var Cct=s(BG);hXo=r(Cct,"UniSpeechSatForSequenceClassification"),Cct.forEach(t),pXo=r(D8e," (UniSpeechSat model)"),D8e.forEach(t),_Xo=i(Do),D5=n(Do,"LI",{});var G8e=s(D5);Dme=n(G8e,"STRONG",{});var wct=s(Dme);uXo=r(wct,"wav2vec2"),wct.forEach(t),bXo=r(G8e," \u2014 "),PG=n(G8e,"A",{href:!0});var Act=s(PG);vXo=r(Act,"Wav2Vec2ForSequenceClassification"),Act.forEach(t),FXo=r(G8e," (Wav2Vec2 model)"),G8e.forEach(t),TXo=i(Do),G5=n(Do,"LI",{});var O8e=s(G5);Gme=n(O8e,"STRONG",{});var yct=s(Gme);MXo=r(yct,"wavlm"),yct.forEach(t),EXo=r(O8e," \u2014 "),$G=n(O8e,"A",{href:!0});var Lct=s($G);CXo=r(Lct,"WavLMForSequenceClassification"),Lct.forEach(t),wXo=r(O8e," (WavLM model)"),O8e.forEach(t),Do.forEach(t),AXo=i(Zt),O5=n(Zt,"P",{});var V8e=s(O5);yXo=r(V8e,"The model is set in evaluation mode by default using "),Ome=n(V8e,"CODE",{});var xct=s(Ome);LXo=r(xct,"model.eval()"),xct.forEach(t),xXo=r(V8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=n(V8e,"CODE",{});var kct=s(Vme);kXo=r(kct,"model.train()"),kct.forEach(t),V8e.forEach(t),SXo=i(Zt),Xme=n(Zt,"P",{});var Sct=s(Xme);RXo=r(Sct,"Examples:"),Sct.forEach(t),BXo=i(Zt),m(rA.$$.fragment,Zt),Zt.forEach(t),El.forEach(t),GBe=i(c),Od=n(c,"H2",{class:!0});var J$e=s(Od);V5=n(J$e,"A",{id:!0,class:!0,href:!0});var Rct=s(V5);zme=n(Rct,"SPAN",{});var Bct=s(zme);m(tA.$$.fragment,Bct),Bct.forEach(t),Rct.forEach(t),PXo=i(J$e),Qme=n(J$e,"SPAN",{});var Pct=s(Qme);$Xo=r(Pct,"AutoModelForAudioFrameClassification"),Pct.forEach(t),J$e.forEach(t),OBe=i(c),cr=n(c,"DIV",{class:!0});var wl=s(cr);m(aA.$$.fragment,wl),IXo=i(wl),Vd=n(wl,"P",{});var cJ=s(Vd);qXo=r(cJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),IG=n(cJ,"A",{href:!0});var $ct=s(IG);NXo=r($ct,"from_pretrained()"),$ct.forEach(t),jXo=r(cJ," class method or the "),qG=n(cJ,"A",{href:!0});var Ict=s(qG);DXo=r(Ict,"from_config()"),Ict.forEach(t),GXo=r(cJ,` class
method.`),cJ.forEach(t),OXo=i(wl),nA=n(wl,"P",{});var Y$e=s(nA);VXo=r(Y$e,"This class cannot be instantiated directly using "),Wme=n(Y$e,"CODE",{});var qct=s(Wme);XXo=r(qct,"__init__()"),qct.forEach(t),zXo=r(Y$e," (throws an error)."),Y$e.forEach(t),QXo=i(wl),at=n(wl,"DIV",{class:!0});var Al=s(at);m(sA.$$.fragment,Al),WXo=i(Al),Hme=n(Al,"P",{});var Nct=s(Hme);HXo=r(Nct,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Nct.forEach(t),UXo=i(Al),Xd=n(Al,"P",{});var fJ=s(Xd);JXo=r(fJ,`Note:
Loading a model from its configuration file does `),Ume=n(fJ,"STRONG",{});var jct=s(Ume);YXo=r(jct,"not"),jct.forEach(t),KXo=r(fJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n(fJ,"A",{href:!0});var Dct=s(NG);ZXo=r(Dct,"from_pretrained()"),Dct.forEach(t),ezo=r(fJ," to load the model weights."),fJ.forEach(t),ozo=i(Al),Jme=n(Al,"P",{});var Gct=s(Jme);rzo=r(Gct,"Examples:"),Gct.forEach(t),tzo=i(Al),m(lA.$$.fragment,Al),Al.forEach(t),azo=i(wl),Ye=n(wl,"DIV",{class:!0});var ea=s(Ye);m(iA.$$.fragment,ea),nzo=i(ea),Yme=n(ea,"P",{});var Oct=s(Yme);szo=r(Oct,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Oct.forEach(t),lzo=i(ea),an=n(ea,"P",{});var JE=s(an);izo=r(JE,"The model class to instantiate is selected based on the "),Kme=n(JE,"CODE",{});var Vct=s(Kme);dzo=r(Vct,"model_type"),Vct.forEach(t),czo=r(JE,` property of the config object (either
passed as an argument or loaded from `),Zme=n(JE,"CODE",{});var Xct=s(Zme);fzo=r(Xct,"pretrained_model_name_or_path"),Xct.forEach(t),mzo=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=n(JE,"CODE",{});var zct=s(ege);gzo=r(zct,"pretrained_model_name_or_path"),zct.forEach(t),hzo=r(JE,":"),JE.forEach(t),pzo=i(ea),nn=n(ea,"UL",{});var YE=s(nn);X5=n(YE,"LI",{});var X8e=s(X5);oge=n(X8e,"STRONG",{});var Qct=s(oge);_zo=r(Qct,"data2vec-audio"),Qct.forEach(t),uzo=r(X8e," \u2014 "),jG=n(X8e,"A",{href:!0});var Wct=s(jG);bzo=r(Wct,"Data2VecAudioForAudioFrameClassification"),Wct.forEach(t),vzo=r(X8e," (Data2VecAudio model)"),X8e.forEach(t),Fzo=i(YE),z5=n(YE,"LI",{});var z8e=s(z5);rge=n(z8e,"STRONG",{});var Hct=s(rge);Tzo=r(Hct,"unispeech-sat"),Hct.forEach(t),Mzo=r(z8e," \u2014 "),DG=n(z8e,"A",{href:!0});var Uct=s(DG);Ezo=r(Uct,"UniSpeechSatForAudioFrameClassification"),Uct.forEach(t),Czo=r(z8e," (UniSpeechSat model)"),z8e.forEach(t),wzo=i(YE),Q5=n(YE,"LI",{});var Q8e=s(Q5);tge=n(Q8e,"STRONG",{});var Jct=s(tge);Azo=r(Jct,"wav2vec2"),Jct.forEach(t),yzo=r(Q8e," \u2014 "),GG=n(Q8e,"A",{href:!0});var Yct=s(GG);Lzo=r(Yct,"Wav2Vec2ForAudioFrameClassification"),Yct.forEach(t),xzo=r(Q8e," (Wav2Vec2 model)"),Q8e.forEach(t),kzo=i(YE),W5=n(YE,"LI",{});var W8e=s(W5);age=n(W8e,"STRONG",{});var Kct=s(age);Szo=r(Kct,"wavlm"),Kct.forEach(t),Rzo=r(W8e," \u2014 "),OG=n(W8e,"A",{href:!0});var Zct=s(OG);Bzo=r(Zct,"WavLMForAudioFrameClassification"),Zct.forEach(t),Pzo=r(W8e," (WavLM model)"),W8e.forEach(t),YE.forEach(t),$zo=i(ea),H5=n(ea,"P",{});var H8e=s(H5);Izo=r(H8e,"The model is set in evaluation mode by default using "),nge=n(H8e,"CODE",{});var eft=s(nge);qzo=r(eft,"model.eval()"),eft.forEach(t),Nzo=r(H8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=n(H8e,"CODE",{});var oft=s(sge);jzo=r(oft,"model.train()"),oft.forEach(t),H8e.forEach(t),Dzo=i(ea),lge=n(ea,"P",{});var rft=s(lge);Gzo=r(rft,"Examples:"),rft.forEach(t),Ozo=i(ea),m(dA.$$.fragment,ea),ea.forEach(t),wl.forEach(t),VBe=i(c),zd=n(c,"H2",{class:!0});var K$e=s(zd);U5=n(K$e,"A",{id:!0,class:!0,href:!0});var tft=s(U5);ige=n(tft,"SPAN",{});var aft=s(ige);m(cA.$$.fragment,aft),aft.forEach(t),tft.forEach(t),Vzo=i(K$e),dge=n(K$e,"SPAN",{});var nft=s(dge);Xzo=r(nft,"AutoModelForCTC"),nft.forEach(t),K$e.forEach(t),XBe=i(c),fr=n(c,"DIV",{class:!0});var yl=s(fr);m(fA.$$.fragment,yl),zzo=i(yl),Qd=n(yl,"P",{});var mJ=s(Qd);Qzo=r(mJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),VG=n(mJ,"A",{href:!0});var sft=s(VG);Wzo=r(sft,"from_pretrained()"),sft.forEach(t),Hzo=r(mJ," class method or the "),XG=n(mJ,"A",{href:!0});var lft=s(XG);Uzo=r(lft,"from_config()"),lft.forEach(t),Jzo=r(mJ,` class
method.`),mJ.forEach(t),Yzo=i(yl),mA=n(yl,"P",{});var Z$e=s(mA);Kzo=r(Z$e,"This class cannot be instantiated directly using "),cge=n(Z$e,"CODE",{});var ift=s(cge);Zzo=r(ift,"__init__()"),ift.forEach(t),eQo=r(Z$e," (throws an error)."),Z$e.forEach(t),oQo=i(yl),nt=n(yl,"DIV",{class:!0});var Ll=s(nt);m(gA.$$.fragment,Ll),rQo=i(Ll),fge=n(Ll,"P",{});var dft=s(fge);tQo=r(dft,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dft.forEach(t),aQo=i(Ll),Wd=n(Ll,"P",{});var gJ=s(Wd);nQo=r(gJ,`Note:
Loading a model from its configuration file does `),mge=n(gJ,"STRONG",{});var cft=s(mge);sQo=r(cft,"not"),cft.forEach(t),lQo=r(gJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=n(gJ,"A",{href:!0});var fft=s(zG);iQo=r(fft,"from_pretrained()"),fft.forEach(t),dQo=r(gJ," to load the model weights."),gJ.forEach(t),cQo=i(Ll),gge=n(Ll,"P",{});var mft=s(gge);fQo=r(mft,"Examples:"),mft.forEach(t),mQo=i(Ll),m(hA.$$.fragment,Ll),Ll.forEach(t),gQo=i(yl),Ke=n(yl,"DIV",{class:!0});var oa=s(Ke);m(pA.$$.fragment,oa),hQo=i(oa),hge=n(oa,"P",{});var gft=s(hge);pQo=r(gft,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gft.forEach(t),_Qo=i(oa),sn=n(oa,"P",{});var KE=s(sn);uQo=r(KE,"The model class to instantiate is selected based on the "),pge=n(KE,"CODE",{});var hft=s(pge);bQo=r(hft,"model_type"),hft.forEach(t),vQo=r(KE,` property of the config object (either
passed as an argument or loaded from `),_ge=n(KE,"CODE",{});var pft=s(_ge);FQo=r(pft,"pretrained_model_name_or_path"),pft.forEach(t),TQo=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=n(KE,"CODE",{});var _ft=s(uge);MQo=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),EQo=r(KE,":"),KE.forEach(t),CQo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);J5=n(Go,"LI",{});var U8e=s(J5);bge=n(U8e,"STRONG",{});var uft=s(bge);wQo=r(uft,"data2vec-audio"),uft.forEach(t),AQo=r(U8e," \u2014 "),QG=n(U8e,"A",{href:!0});var bft=s(QG);yQo=r(bft,"Data2VecAudioForCTC"),bft.forEach(t),LQo=r(U8e," (Data2VecAudio model)"),U8e.forEach(t),xQo=i(Go),Y5=n(Go,"LI",{});var J8e=s(Y5);vge=n(J8e,"STRONG",{});var vft=s(vge);kQo=r(vft,"hubert"),vft.forEach(t),SQo=r(J8e," \u2014 "),WG=n(J8e,"A",{href:!0});var Fft=s(WG);RQo=r(Fft,"HubertForCTC"),Fft.forEach(t),BQo=r(J8e," (Hubert model)"),J8e.forEach(t),PQo=i(Go),K5=n(Go,"LI",{});var Y8e=s(K5);Fge=n(Y8e,"STRONG",{});var Tft=s(Fge);$Qo=r(Tft,"sew"),Tft.forEach(t),IQo=r(Y8e," \u2014 "),HG=n(Y8e,"A",{href:!0});var Mft=s(HG);qQo=r(Mft,"SEWForCTC"),Mft.forEach(t),NQo=r(Y8e," (SEW model)"),Y8e.forEach(t),jQo=i(Go),Z5=n(Go,"LI",{});var K8e=s(Z5);Tge=n(K8e,"STRONG",{});var Eft=s(Tge);DQo=r(Eft,"sew-d"),Eft.forEach(t),GQo=r(K8e," \u2014 "),UG=n(K8e,"A",{href:!0});var Cft=s(UG);OQo=r(Cft,"SEWDForCTC"),Cft.forEach(t),VQo=r(K8e," (SEW-D model)"),K8e.forEach(t),XQo=i(Go),ev=n(Go,"LI",{});var Z8e=s(ev);Mge=n(Z8e,"STRONG",{});var wft=s(Mge);zQo=r(wft,"unispeech"),wft.forEach(t),QQo=r(Z8e," \u2014 "),JG=n(Z8e,"A",{href:!0});var Aft=s(JG);WQo=r(Aft,"UniSpeechForCTC"),Aft.forEach(t),HQo=r(Z8e," (UniSpeech model)"),Z8e.forEach(t),UQo=i(Go),ov=n(Go,"LI",{});var eLe=s(ov);Ege=n(eLe,"STRONG",{});var yft=s(Ege);JQo=r(yft,"unispeech-sat"),yft.forEach(t),YQo=r(eLe," \u2014 "),YG=n(eLe,"A",{href:!0});var Lft=s(YG);KQo=r(Lft,"UniSpeechSatForCTC"),Lft.forEach(t),ZQo=r(eLe," (UniSpeechSat model)"),eLe.forEach(t),eWo=i(Go),rv=n(Go,"LI",{});var oLe=s(rv);Cge=n(oLe,"STRONG",{});var xft=s(Cge);oWo=r(xft,"wav2vec2"),xft.forEach(t),rWo=r(oLe," \u2014 "),KG=n(oLe,"A",{href:!0});var kft=s(KG);tWo=r(kft,"Wav2Vec2ForCTC"),kft.forEach(t),aWo=r(oLe," (Wav2Vec2 model)"),oLe.forEach(t),nWo=i(Go),tv=n(Go,"LI",{});var rLe=s(tv);wge=n(rLe,"STRONG",{});var Sft=s(wge);sWo=r(Sft,"wavlm"),Sft.forEach(t),lWo=r(rLe," \u2014 "),ZG=n(rLe,"A",{href:!0});var Rft=s(ZG);iWo=r(Rft,"WavLMForCTC"),Rft.forEach(t),dWo=r(rLe," (WavLM model)"),rLe.forEach(t),Go.forEach(t),cWo=i(oa),av=n(oa,"P",{});var tLe=s(av);fWo=r(tLe,"The model is set in evaluation mode by default using "),Age=n(tLe,"CODE",{});var Bft=s(Age);mWo=r(Bft,"model.eval()"),Bft.forEach(t),gWo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=n(tLe,"CODE",{});var Pft=s(yge);hWo=r(Pft,"model.train()"),Pft.forEach(t),tLe.forEach(t),pWo=i(oa),Lge=n(oa,"P",{});var $ft=s(Lge);_Wo=r($ft,"Examples:"),$ft.forEach(t),uWo=i(oa),m(_A.$$.fragment,oa),oa.forEach(t),yl.forEach(t),zBe=i(c),Hd=n(c,"H2",{class:!0});var eIe=s(Hd);nv=n(eIe,"A",{id:!0,class:!0,href:!0});var Ift=s(nv);xge=n(Ift,"SPAN",{});var qft=s(xge);m(uA.$$.fragment,qft),qft.forEach(t),Ift.forEach(t),bWo=i(eIe),kge=n(eIe,"SPAN",{});var Nft=s(kge);vWo=r(Nft,"AutoModelForSpeechSeq2Seq"),Nft.forEach(t),eIe.forEach(t),QBe=i(c),mr=n(c,"DIV",{class:!0});var xl=s(mr);m(bA.$$.fragment,xl),FWo=i(xl),Ud=n(xl,"P",{});var hJ=s(Ud);TWo=r(hJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eO=n(hJ,"A",{href:!0});var jft=s(eO);MWo=r(jft,"from_pretrained()"),jft.forEach(t),EWo=r(hJ," class method or the "),oO=n(hJ,"A",{href:!0});var Dft=s(oO);CWo=r(Dft,"from_config()"),Dft.forEach(t),wWo=r(hJ,` class
method.`),hJ.forEach(t),AWo=i(xl),vA=n(xl,"P",{});var oIe=s(vA);yWo=r(oIe,"This class cannot be instantiated directly using "),Sge=n(oIe,"CODE",{});var Gft=s(Sge);LWo=r(Gft,"__init__()"),Gft.forEach(t),xWo=r(oIe," (throws an error)."),oIe.forEach(t),kWo=i(xl),st=n(xl,"DIV",{class:!0});var kl=s(st);m(FA.$$.fragment,kl),SWo=i(kl),Rge=n(kl,"P",{});var Oft=s(Rge);RWo=r(Oft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Oft.forEach(t),BWo=i(kl),Jd=n(kl,"P",{});var pJ=s(Jd);PWo=r(pJ,`Note:
Loading a model from its configuration file does `),Bge=n(pJ,"STRONG",{});var Vft=s(Bge);$Wo=r(Vft,"not"),Vft.forEach(t),IWo=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=n(pJ,"A",{href:!0});var Xft=s(rO);qWo=r(Xft,"from_pretrained()"),Xft.forEach(t),NWo=r(pJ," to load the model weights."),pJ.forEach(t),jWo=i(kl),Pge=n(kl,"P",{});var zft=s(Pge);DWo=r(zft,"Examples:"),zft.forEach(t),GWo=i(kl),m(TA.$$.fragment,kl),kl.forEach(t),OWo=i(xl),Ze=n(xl,"DIV",{class:!0});var ra=s(Ze);m(MA.$$.fragment,ra),VWo=i(ra),$ge=n(ra,"P",{});var Qft=s($ge);XWo=r(Qft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Qft.forEach(t),zWo=i(ra),ln=n(ra,"P",{});var ZE=s(ln);QWo=r(ZE,"The model class to instantiate is selected based on the "),Ige=n(ZE,"CODE",{});var Wft=s(Ige);WWo=r(Wft,"model_type"),Wft.forEach(t),HWo=r(ZE,` property of the config object (either
passed as an argument or loaded from `),qge=n(ZE,"CODE",{});var Hft=s(qge);UWo=r(Hft,"pretrained_model_name_or_path"),Hft.forEach(t),JWo=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nge=n(ZE,"CODE",{});var Uft=s(Nge);YWo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),KWo=r(ZE,":"),ZE.forEach(t),ZWo=i(ra),EA=n(ra,"UL",{});var rIe=s(EA);sv=n(rIe,"LI",{});var aLe=s(sv);jge=n(aLe,"STRONG",{});var Jft=s(jge);eHo=r(Jft,"speech-encoder-decoder"),Jft.forEach(t),oHo=r(aLe," \u2014 "),tO=n(aLe,"A",{href:!0});var Yft=s(tO);rHo=r(Yft,"SpeechEncoderDecoderModel"),Yft.forEach(t),tHo=r(aLe," (Speech Encoder decoder model)"),aLe.forEach(t),aHo=i(rIe),lv=n(rIe,"LI",{});var nLe=s(lv);Dge=n(nLe,"STRONG",{});var Kft=s(Dge);nHo=r(Kft,"speech_to_text"),Kft.forEach(t),sHo=r(nLe," \u2014 "),aO=n(nLe,"A",{href:!0});var Zft=s(aO);lHo=r(Zft,"Speech2TextForConditionalGeneration"),Zft.forEach(t),iHo=r(nLe," (Speech2Text model)"),nLe.forEach(t),rIe.forEach(t),dHo=i(ra),iv=n(ra,"P",{});var sLe=s(iv);cHo=r(sLe,"The model is set in evaluation mode by default using "),Gge=n(sLe,"CODE",{});var emt=s(Gge);fHo=r(emt,"model.eval()"),emt.forEach(t),mHo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=n(sLe,"CODE",{});var omt=s(Oge);gHo=r(omt,"model.train()"),omt.forEach(t),sLe.forEach(t),hHo=i(ra),Vge=n(ra,"P",{});var rmt=s(Vge);pHo=r(rmt,"Examples:"),rmt.forEach(t),_Ho=i(ra),m(CA.$$.fragment,ra),ra.forEach(t),xl.forEach(t),WBe=i(c),Yd=n(c,"H2",{class:!0});var tIe=s(Yd);dv=n(tIe,"A",{id:!0,class:!0,href:!0});var tmt=s(dv);Xge=n(tmt,"SPAN",{});var amt=s(Xge);m(wA.$$.fragment,amt),amt.forEach(t),tmt.forEach(t),uHo=i(tIe),zge=n(tIe,"SPAN",{});var nmt=s(zge);bHo=r(nmt,"AutoModelForAudioXVector"),nmt.forEach(t),tIe.forEach(t),HBe=i(c),gr=n(c,"DIV",{class:!0});var Sl=s(gr);m(AA.$$.fragment,Sl),vHo=i(Sl),Kd=n(Sl,"P",{});var _J=s(Kd);FHo=r(_J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nO=n(_J,"A",{href:!0});var smt=s(nO);THo=r(smt,"from_pretrained()"),smt.forEach(t),MHo=r(_J," class method or the "),sO=n(_J,"A",{href:!0});var lmt=s(sO);EHo=r(lmt,"from_config()"),lmt.forEach(t),CHo=r(_J,` class
method.`),_J.forEach(t),wHo=i(Sl),yA=n(Sl,"P",{});var aIe=s(yA);AHo=r(aIe,"This class cannot be instantiated directly using "),Qge=n(aIe,"CODE",{});var imt=s(Qge);yHo=r(imt,"__init__()"),imt.forEach(t),LHo=r(aIe," (throws an error)."),aIe.forEach(t),xHo=i(Sl),lt=n(Sl,"DIV",{class:!0});var Rl=s(lt);m(LA.$$.fragment,Rl),kHo=i(Rl),Wge=n(Rl,"P",{});var dmt=s(Wge);SHo=r(dmt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dmt.forEach(t),RHo=i(Rl),Zd=n(Rl,"P",{});var uJ=s(Zd);BHo=r(uJ,`Note:
Loading a model from its configuration file does `),Hge=n(uJ,"STRONG",{});var cmt=s(Hge);PHo=r(cmt,"not"),cmt.forEach(t),$Ho=r(uJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(uJ,"A",{href:!0});var fmt=s(lO);IHo=r(fmt,"from_pretrained()"),fmt.forEach(t),qHo=r(uJ," to load the model weights."),uJ.forEach(t),NHo=i(Rl),Uge=n(Rl,"P",{});var mmt=s(Uge);jHo=r(mmt,"Examples:"),mmt.forEach(t),DHo=i(Rl),m(xA.$$.fragment,Rl),Rl.forEach(t),GHo=i(Sl),eo=n(Sl,"DIV",{class:!0});var ta=s(eo);m(kA.$$.fragment,ta),OHo=i(ta),Jge=n(ta,"P",{});var gmt=s(Jge);VHo=r(gmt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gmt.forEach(t),XHo=i(ta),dn=n(ta,"P",{});var e3=s(dn);zHo=r(e3,"The model class to instantiate is selected based on the "),Yge=n(e3,"CODE",{});var hmt=s(Yge);QHo=r(hmt,"model_type"),hmt.forEach(t),WHo=r(e3,` property of the config object (either
passed as an argument or loaded from `),Kge=n(e3,"CODE",{});var pmt=s(Kge);HHo=r(pmt,"pretrained_model_name_or_path"),pmt.forEach(t),UHo=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n(e3,"CODE",{});var _mt=s(Zge);JHo=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),YHo=r(e3,":"),e3.forEach(t),KHo=i(ta),cn=n(ta,"UL",{});var o3=s(cn);cv=n(o3,"LI",{});var lLe=s(cv);ehe=n(lLe,"STRONG",{});var umt=s(ehe);ZHo=r(umt,"data2vec-audio"),umt.forEach(t),eUo=r(lLe," \u2014 "),iO=n(lLe,"A",{href:!0});var bmt=s(iO);oUo=r(bmt,"Data2VecAudioForXVector"),bmt.forEach(t),rUo=r(lLe," (Data2VecAudio model)"),lLe.forEach(t),tUo=i(o3),fv=n(o3,"LI",{});var iLe=s(fv);ohe=n(iLe,"STRONG",{});var vmt=s(ohe);aUo=r(vmt,"unispeech-sat"),vmt.forEach(t),nUo=r(iLe," \u2014 "),dO=n(iLe,"A",{href:!0});var Fmt=s(dO);sUo=r(Fmt,"UniSpeechSatForXVector"),Fmt.forEach(t),lUo=r(iLe," (UniSpeechSat model)"),iLe.forEach(t),iUo=i(o3),mv=n(o3,"LI",{});var dLe=s(mv);rhe=n(dLe,"STRONG",{});var Tmt=s(rhe);dUo=r(Tmt,"wav2vec2"),Tmt.forEach(t),cUo=r(dLe," \u2014 "),cO=n(dLe,"A",{href:!0});var Mmt=s(cO);fUo=r(Mmt,"Wav2Vec2ForXVector"),Mmt.forEach(t),mUo=r(dLe," (Wav2Vec2 model)"),dLe.forEach(t),gUo=i(o3),gv=n(o3,"LI",{});var cLe=s(gv);the=n(cLe,"STRONG",{});var Emt=s(the);hUo=r(Emt,"wavlm"),Emt.forEach(t),pUo=r(cLe," \u2014 "),fO=n(cLe,"A",{href:!0});var Cmt=s(fO);_Uo=r(Cmt,"WavLMForXVector"),Cmt.forEach(t),uUo=r(cLe," (WavLM model)"),cLe.forEach(t),o3.forEach(t),bUo=i(ta),hv=n(ta,"P",{});var fLe=s(hv);vUo=r(fLe,"The model is set in evaluation mode by default using "),ahe=n(fLe,"CODE",{});var wmt=s(ahe);FUo=r(wmt,"model.eval()"),wmt.forEach(t),TUo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=n(fLe,"CODE",{});var Amt=s(nhe);MUo=r(Amt,"model.train()"),Amt.forEach(t),fLe.forEach(t),EUo=i(ta),she=n(ta,"P",{});var ymt=s(she);CUo=r(ymt,"Examples:"),ymt.forEach(t),wUo=i(ta),m(SA.$$.fragment,ta),ta.forEach(t),Sl.forEach(t),UBe=i(c),ec=n(c,"H2",{class:!0});var nIe=s(ec);pv=n(nIe,"A",{id:!0,class:!0,href:!0});var Lmt=s(pv);lhe=n(Lmt,"SPAN",{});var xmt=s(lhe);m(RA.$$.fragment,xmt),xmt.forEach(t),Lmt.forEach(t),AUo=i(nIe),ihe=n(nIe,"SPAN",{});var kmt=s(ihe);yUo=r(kmt,"AutoModelForMaskedImageModeling"),kmt.forEach(t),nIe.forEach(t),JBe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(BA.$$.fragment,Bl),LUo=i(Bl),oc=n(Bl,"P",{});var bJ=s(oc);xUo=r(bJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mO=n(bJ,"A",{href:!0});var Smt=s(mO);kUo=r(Smt,"from_pretrained()"),Smt.forEach(t),SUo=r(bJ," class method or the "),gO=n(bJ,"A",{href:!0});var Rmt=s(gO);RUo=r(Rmt,"from_config()"),Rmt.forEach(t),BUo=r(bJ,` class
method.`),bJ.forEach(t),PUo=i(Bl),PA=n(Bl,"P",{});var sIe=s(PA);$Uo=r(sIe,"This class cannot be instantiated directly using "),dhe=n(sIe,"CODE",{});var Bmt=s(dhe);IUo=r(Bmt,"__init__()"),Bmt.forEach(t),qUo=r(sIe," (throws an error)."),sIe.forEach(t),NUo=i(Bl),it=n(Bl,"DIV",{class:!0});var Pl=s(it);m($A.$$.fragment,Pl),jUo=i(Pl),che=n(Pl,"P",{});var Pmt=s(che);DUo=r(Pmt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Pmt.forEach(t),GUo=i(Pl),rc=n(Pl,"P",{});var vJ=s(rc);OUo=r(vJ,`Note:
Loading a model from its configuration file does `),fhe=n(vJ,"STRONG",{});var $mt=s(fhe);VUo=r($mt,"not"),$mt.forEach(t),XUo=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(vJ,"A",{href:!0});var Imt=s(hO);zUo=r(Imt,"from_pretrained()"),Imt.forEach(t),QUo=r(vJ," to load the model weights."),vJ.forEach(t),WUo=i(Pl),mhe=n(Pl,"P",{});var qmt=s(mhe);HUo=r(qmt,"Examples:"),qmt.forEach(t),UUo=i(Pl),m(IA.$$.fragment,Pl),Pl.forEach(t),JUo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(qA.$$.fragment,aa),YUo=i(aa),ghe=n(aa,"P",{});var Nmt=s(ghe);KUo=r(Nmt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Nmt.forEach(t),ZUo=i(aa),fn=n(aa,"P",{});var r3=s(fn);eJo=r(r3,"The model class to instantiate is selected based on the "),hhe=n(r3,"CODE",{});var jmt=s(hhe);oJo=r(jmt,"model_type"),jmt.forEach(t),rJo=r(r3,` property of the config object (either
passed as an argument or loaded from `),phe=n(r3,"CODE",{});var Dmt=s(phe);tJo=r(Dmt,"pretrained_model_name_or_path"),Dmt.forEach(t),aJo=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(r3,"CODE",{});var Gmt=s(_he);nJo=r(Gmt,"pretrained_model_name_or_path"),Gmt.forEach(t),sJo=r(r3,":"),r3.forEach(t),lJo=i(aa),tc=n(aa,"UL",{});var FJ=s(tc);_v=n(FJ,"LI",{});var mLe=s(_v);uhe=n(mLe,"STRONG",{});var Omt=s(uhe);iJo=r(Omt,"deit"),Omt.forEach(t),dJo=r(mLe," \u2014 "),pO=n(mLe,"A",{href:!0});var Vmt=s(pO);cJo=r(Vmt,"DeiTForMaskedImageModeling"),Vmt.forEach(t),fJo=r(mLe," (DeiT model)"),mLe.forEach(t),mJo=i(FJ),uv=n(FJ,"LI",{});var gLe=s(uv);bhe=n(gLe,"STRONG",{});var Xmt=s(bhe);gJo=r(Xmt,"swin"),Xmt.forEach(t),hJo=r(gLe," \u2014 "),_O=n(gLe,"A",{href:!0});var zmt=s(_O);pJo=r(zmt,"SwinForMaskedImageModeling"),zmt.forEach(t),_Jo=r(gLe," (Swin model)"),gLe.forEach(t),uJo=i(FJ),bv=n(FJ,"LI",{});var hLe=s(bv);vhe=n(hLe,"STRONG",{});var Qmt=s(vhe);bJo=r(Qmt,"vit"),Qmt.forEach(t),vJo=r(hLe," \u2014 "),uO=n(hLe,"A",{href:!0});var Wmt=s(uO);FJo=r(Wmt,"ViTForMaskedImageModeling"),Wmt.forEach(t),TJo=r(hLe," (ViT model)"),hLe.forEach(t),FJ.forEach(t),MJo=i(aa),vv=n(aa,"P",{});var pLe=s(vv);EJo=r(pLe,"The model is set in evaluation mode by default using "),Fhe=n(pLe,"CODE",{});var Hmt=s(Fhe);CJo=r(Hmt,"model.eval()"),Hmt.forEach(t),wJo=r(pLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=n(pLe,"CODE",{});var Umt=s(The);AJo=r(Umt,"model.train()"),Umt.forEach(t),pLe.forEach(t),yJo=i(aa),Mhe=n(aa,"P",{});var Jmt=s(Mhe);LJo=r(Jmt,"Examples:"),Jmt.forEach(t),xJo=i(aa),m(NA.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),YBe=i(c),ac=n(c,"H2",{class:!0});var lIe=s(ac);Fv=n(lIe,"A",{id:!0,class:!0,href:!0});var Ymt=s(Fv);Ehe=n(Ymt,"SPAN",{});var Kmt=s(Ehe);m(jA.$$.fragment,Kmt),Kmt.forEach(t),Ymt.forEach(t),kJo=i(lIe),Che=n(lIe,"SPAN",{});var Zmt=s(Che);SJo=r(Zmt,"AutoModelForObjectDetection"),Zmt.forEach(t),lIe.forEach(t),KBe=i(c),pr=n(c,"DIV",{class:!0});var $l=s(pr);m(DA.$$.fragment,$l),RJo=i($l),nc=n($l,"P",{});var TJ=s(nc);BJo=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),bO=n(TJ,"A",{href:!0});var egt=s(bO);PJo=r(egt,"from_pretrained()"),egt.forEach(t),$Jo=r(TJ," class method or the "),vO=n(TJ,"A",{href:!0});var ogt=s(vO);IJo=r(ogt,"from_config()"),ogt.forEach(t),qJo=r(TJ,` class
method.`),TJ.forEach(t),NJo=i($l),GA=n($l,"P",{});var iIe=s(GA);jJo=r(iIe,"This class cannot be instantiated directly using "),whe=n(iIe,"CODE",{});var rgt=s(whe);DJo=r(rgt,"__init__()"),rgt.forEach(t),GJo=r(iIe," (throws an error)."),iIe.forEach(t),OJo=i($l),dt=n($l,"DIV",{class:!0});var Il=s(dt);m(OA.$$.fragment,Il),VJo=i(Il),Ahe=n(Il,"P",{});var tgt=s(Ahe);XJo=r(tgt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),tgt.forEach(t),zJo=i(Il),sc=n(Il,"P",{});var MJ=s(sc);QJo=r(MJ,`Note:
Loading a model from its configuration file does `),yhe=n(MJ,"STRONG",{});var agt=s(yhe);WJo=r(agt,"not"),agt.forEach(t),HJo=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(MJ,"A",{href:!0});var ngt=s(FO);UJo=r(ngt,"from_pretrained()"),ngt.forEach(t),JJo=r(MJ," to load the model weights."),MJ.forEach(t),YJo=i(Il),Lhe=n(Il,"P",{});var sgt=s(Lhe);KJo=r(sgt,"Examples:"),sgt.forEach(t),ZJo=i(Il),m(VA.$$.fragment,Il),Il.forEach(t),eYo=i($l),ro=n($l,"DIV",{class:!0});var na=s(ro);m(XA.$$.fragment,na),oYo=i(na),xhe=n(na,"P",{});var lgt=s(xhe);rYo=r(lgt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lgt.forEach(t),tYo=i(na),mn=n(na,"P",{});var t3=s(mn);aYo=r(t3,"The model class to instantiate is selected based on the "),khe=n(t3,"CODE",{});var igt=s(khe);nYo=r(igt,"model_type"),igt.forEach(t),sYo=r(t3,` property of the config object (either
passed as an argument or loaded from `),She=n(t3,"CODE",{});var dgt=s(She);lYo=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),iYo=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=n(t3,"CODE",{});var cgt=s(Rhe);dYo=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),cYo=r(t3,":"),t3.forEach(t),fYo=i(na),Bhe=n(na,"UL",{});var fgt=s(Bhe);Tv=n(fgt,"LI",{});var _Le=s(Tv);Phe=n(_Le,"STRONG",{});var mgt=s(Phe);mYo=r(mgt,"detr"),mgt.forEach(t),gYo=r(_Le," \u2014 "),TO=n(_Le,"A",{href:!0});var ggt=s(TO);hYo=r(ggt,"DetrForObjectDetection"),ggt.forEach(t),pYo=r(_Le," (DETR model)"),_Le.forEach(t),fgt.forEach(t),_Yo=i(na),Mv=n(na,"P",{});var uLe=s(Mv);uYo=r(uLe,"The model is set in evaluation mode by default using "),$he=n(uLe,"CODE",{});var hgt=s($he);bYo=r(hgt,"model.eval()"),hgt.forEach(t),vYo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=n(uLe,"CODE",{});var pgt=s(Ihe);FYo=r(pgt,"model.train()"),pgt.forEach(t),uLe.forEach(t),TYo=i(na),qhe=n(na,"P",{});var _gt=s(qhe);MYo=r(_gt,"Examples:"),_gt.forEach(t),EYo=i(na),m(zA.$$.fragment,na),na.forEach(t),$l.forEach(t),ZBe=i(c),lc=n(c,"H2",{class:!0});var dIe=s(lc);Ev=n(dIe,"A",{id:!0,class:!0,href:!0});var ugt=s(Ev);Nhe=n(ugt,"SPAN",{});var bgt=s(Nhe);m(QA.$$.fragment,bgt),bgt.forEach(t),ugt.forEach(t),CYo=i(dIe),jhe=n(dIe,"SPAN",{});var vgt=s(jhe);wYo=r(vgt,"AutoModelForImageSegmentation"),vgt.forEach(t),dIe.forEach(t),ePe=i(c),_r=n(c,"DIV",{class:!0});var ql=s(_r);m(WA.$$.fragment,ql),AYo=i(ql),ic=n(ql,"P",{});var EJ=s(ic);yYo=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),MO=n(EJ,"A",{href:!0});var Fgt=s(MO);LYo=r(Fgt,"from_pretrained()"),Fgt.forEach(t),xYo=r(EJ," class method or the "),EO=n(EJ,"A",{href:!0});var Tgt=s(EO);kYo=r(Tgt,"from_config()"),Tgt.forEach(t),SYo=r(EJ,` class
method.`),EJ.forEach(t),RYo=i(ql),HA=n(ql,"P",{});var cIe=s(HA);BYo=r(cIe,"This class cannot be instantiated directly using "),Dhe=n(cIe,"CODE",{});var Mgt=s(Dhe);PYo=r(Mgt,"__init__()"),Mgt.forEach(t),$Yo=r(cIe," (throws an error)."),cIe.forEach(t),IYo=i(ql),ct=n(ql,"DIV",{class:!0});var Nl=s(ct);m(UA.$$.fragment,Nl),qYo=i(Nl),Ghe=n(Nl,"P",{});var Egt=s(Ghe);NYo=r(Egt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Egt.forEach(t),jYo=i(Nl),dc=n(Nl,"P",{});var CJ=s(dc);DYo=r(CJ,`Note:
Loading a model from its configuration file does `),Ohe=n(CJ,"STRONG",{});var Cgt=s(Ohe);GYo=r(Cgt,"not"),Cgt.forEach(t),OYo=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CO=n(CJ,"A",{href:!0});var wgt=s(CO);VYo=r(wgt,"from_pretrained()"),wgt.forEach(t),XYo=r(CJ," to load the model weights."),CJ.forEach(t),zYo=i(Nl),Vhe=n(Nl,"P",{});var Agt=s(Vhe);QYo=r(Agt,"Examples:"),Agt.forEach(t),WYo=i(Nl),m(JA.$$.fragment,Nl),Nl.forEach(t),HYo=i(ql),to=n(ql,"DIV",{class:!0});var sa=s(to);m(YA.$$.fragment,sa),UYo=i(sa),Xhe=n(sa,"P",{});var ygt=s(Xhe);JYo=r(ygt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ygt.forEach(t),YYo=i(sa),gn=n(sa,"P",{});var a3=s(gn);KYo=r(a3,"The model class to instantiate is selected based on the "),zhe=n(a3,"CODE",{});var Lgt=s(zhe);ZYo=r(Lgt,"model_type"),Lgt.forEach(t),eKo=r(a3,` property of the config object (either
passed as an argument or loaded from `),Qhe=n(a3,"CODE",{});var xgt=s(Qhe);oKo=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),rKo=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=n(a3,"CODE",{});var kgt=s(Whe);tKo=r(kgt,"pretrained_model_name_or_path"),kgt.forEach(t),aKo=r(a3,":"),a3.forEach(t),nKo=i(sa),Hhe=n(sa,"UL",{});var Sgt=s(Hhe);Cv=n(Sgt,"LI",{});var bLe=s(Cv);Uhe=n(bLe,"STRONG",{});var Rgt=s(Uhe);sKo=r(Rgt,"detr"),Rgt.forEach(t),lKo=r(bLe," \u2014 "),wO=n(bLe,"A",{href:!0});var Bgt=s(wO);iKo=r(Bgt,"DetrForSegmentation"),Bgt.forEach(t),dKo=r(bLe," (DETR model)"),bLe.forEach(t),Sgt.forEach(t),cKo=i(sa),wv=n(sa,"P",{});var vLe=s(wv);fKo=r(vLe,"The model is set in evaluation mode by default using "),Jhe=n(vLe,"CODE",{});var Pgt=s(Jhe);mKo=r(Pgt,"model.eval()"),Pgt.forEach(t),gKo=r(vLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(vLe,"CODE",{});var $gt=s(Yhe);hKo=r($gt,"model.train()"),$gt.forEach(t),vLe.forEach(t),pKo=i(sa),Khe=n(sa,"P",{});var Igt=s(Khe);_Ko=r(Igt,"Examples:"),Igt.forEach(t),uKo=i(sa),m(KA.$$.fragment,sa),sa.forEach(t),ql.forEach(t),oPe=i(c),cc=n(c,"H2",{class:!0});var fIe=s(cc);Av=n(fIe,"A",{id:!0,class:!0,href:!0});var qgt=s(Av);Zhe=n(qgt,"SPAN",{});var Ngt=s(Zhe);m(ZA.$$.fragment,Ngt),Ngt.forEach(t),qgt.forEach(t),bKo=i(fIe),epe=n(fIe,"SPAN",{});var jgt=s(epe);vKo=r(jgt,"AutoModelForSemanticSegmentation"),jgt.forEach(t),fIe.forEach(t),rPe=i(c),ur=n(c,"DIV",{class:!0});var jl=s(ur);m(e0.$$.fragment,jl),FKo=i(jl),fc=n(jl,"P",{});var wJ=s(fc);TKo=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),AO=n(wJ,"A",{href:!0});var Dgt=s(AO);MKo=r(Dgt,"from_pretrained()"),Dgt.forEach(t),EKo=r(wJ," class method or the "),yO=n(wJ,"A",{href:!0});var Ggt=s(yO);CKo=r(Ggt,"from_config()"),Ggt.forEach(t),wKo=r(wJ,` class
method.`),wJ.forEach(t),AKo=i(jl),o0=n(jl,"P",{});var mIe=s(o0);yKo=r(mIe,"This class cannot be instantiated directly using "),ope=n(mIe,"CODE",{});var Ogt=s(ope);LKo=r(Ogt,"__init__()"),Ogt.forEach(t),xKo=r(mIe," (throws an error)."),mIe.forEach(t),kKo=i(jl),ft=n(jl,"DIV",{class:!0});var Dl=s(ft);m(r0.$$.fragment,Dl),SKo=i(Dl),rpe=n(Dl,"P",{});var Vgt=s(rpe);RKo=r(Vgt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Vgt.forEach(t),BKo=i(Dl),mc=n(Dl,"P",{});var AJ=s(mc);PKo=r(AJ,`Note:
Loading a model from its configuration file does `),tpe=n(AJ,"STRONG",{});var Xgt=s(tpe);$Ko=r(Xgt,"not"),Xgt.forEach(t),IKo=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=n(AJ,"A",{href:!0});var zgt=s(LO);qKo=r(zgt,"from_pretrained()"),zgt.forEach(t),NKo=r(AJ," to load the model weights."),AJ.forEach(t),jKo=i(Dl),ape=n(Dl,"P",{});var Qgt=s(ape);DKo=r(Qgt,"Examples:"),Qgt.forEach(t),GKo=i(Dl),m(t0.$$.fragment,Dl),Dl.forEach(t),OKo=i(jl),ao=n(jl,"DIV",{class:!0});var la=s(ao);m(a0.$$.fragment,la),VKo=i(la),npe=n(la,"P",{});var Wgt=s(npe);XKo=r(Wgt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Wgt.forEach(t),zKo=i(la),hn=n(la,"P",{});var n3=s(hn);QKo=r(n3,"The model class to instantiate is selected based on the "),spe=n(n3,"CODE",{});var Hgt=s(spe);WKo=r(Hgt,"model_type"),Hgt.forEach(t),HKo=r(n3,` property of the config object (either
passed as an argument or loaded from `),lpe=n(n3,"CODE",{});var Ugt=s(lpe);UKo=r(Ugt,"pretrained_model_name_or_path"),Ugt.forEach(t),JKo=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=n(n3,"CODE",{});var Jgt=s(ipe);YKo=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),KKo=r(n3,":"),n3.forEach(t),ZKo=i(la),pn=n(la,"UL",{});var s3=s(pn);yv=n(s3,"LI",{});var FLe=s(yv);dpe=n(FLe,"STRONG",{});var Ygt=s(dpe);eZo=r(Ygt,"beit"),Ygt.forEach(t),oZo=r(FLe," \u2014 "),xO=n(FLe,"A",{href:!0});var Kgt=s(xO);rZo=r(Kgt,"BeitForSemanticSegmentation"),Kgt.forEach(t),tZo=r(FLe," (BEiT model)"),FLe.forEach(t),aZo=i(s3),Lv=n(s3,"LI",{});var TLe=s(Lv);cpe=n(TLe,"STRONG",{});var Zgt=s(cpe);nZo=r(Zgt,"data2vec-vision"),Zgt.forEach(t),sZo=r(TLe," \u2014 "),kO=n(TLe,"A",{href:!0});var eht=s(kO);lZo=r(eht,"Data2VecVisionForSemanticSegmentation"),eht.forEach(t),iZo=r(TLe," (Data2VecVision model)"),TLe.forEach(t),dZo=i(s3),xv=n(s3,"LI",{});var MLe=s(xv);fpe=n(MLe,"STRONG",{});var oht=s(fpe);cZo=r(oht,"dpt"),oht.forEach(t),fZo=r(MLe," \u2014 "),SO=n(MLe,"A",{href:!0});var rht=s(SO);mZo=r(rht,"DPTForSemanticSegmentation"),rht.forEach(t),gZo=r(MLe," (DPT model)"),MLe.forEach(t),hZo=i(s3),kv=n(s3,"LI",{});var ELe=s(kv);mpe=n(ELe,"STRONG",{});var tht=s(mpe);pZo=r(tht,"segformer"),tht.forEach(t),_Zo=r(ELe," \u2014 "),RO=n(ELe,"A",{href:!0});var aht=s(RO);uZo=r(aht,"SegformerForSemanticSegmentation"),aht.forEach(t),bZo=r(ELe," (SegFormer model)"),ELe.forEach(t),s3.forEach(t),vZo=i(la),Sv=n(la,"P",{});var CLe=s(Sv);FZo=r(CLe,"The model is set in evaluation mode by default using "),gpe=n(CLe,"CODE",{});var nht=s(gpe);TZo=r(nht,"model.eval()"),nht.forEach(t),MZo=r(CLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=n(CLe,"CODE",{});var sht=s(hpe);EZo=r(sht,"model.train()"),sht.forEach(t),CLe.forEach(t),CZo=i(la),ppe=n(la,"P",{});var lht=s(ppe);wZo=r(lht,"Examples:"),lht.forEach(t),AZo=i(la),m(n0.$$.fragment,la),la.forEach(t),jl.forEach(t),tPe=i(c),gc=n(c,"H2",{class:!0});var gIe=s(gc);Rv=n(gIe,"A",{id:!0,class:!0,href:!0});var iht=s(Rv);_pe=n(iht,"SPAN",{});var dht=s(_pe);m(s0.$$.fragment,dht),dht.forEach(t),iht.forEach(t),yZo=i(gIe),upe=n(gIe,"SPAN",{});var cht=s(upe);LZo=r(cht,"AutoModelForInstanceSegmentation"),cht.forEach(t),gIe.forEach(t),aPe=i(c),br=n(c,"DIV",{class:!0});var Gl=s(br);m(l0.$$.fragment,Gl),xZo=i(Gl),hc=n(Gl,"P",{});var yJ=s(hc);kZo=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),BO=n(yJ,"A",{href:!0});var fht=s(BO);SZo=r(fht,"from_pretrained()"),fht.forEach(t),RZo=r(yJ," class method or the "),PO=n(yJ,"A",{href:!0});var mht=s(PO);BZo=r(mht,"from_config()"),mht.forEach(t),PZo=r(yJ,` class
method.`),yJ.forEach(t),$Zo=i(Gl),i0=n(Gl,"P",{});var hIe=s(i0);IZo=r(hIe,"This class cannot be instantiated directly using "),bpe=n(hIe,"CODE",{});var ght=s(bpe);qZo=r(ght,"__init__()"),ght.forEach(t),NZo=r(hIe," (throws an error)."),hIe.forEach(t),jZo=i(Gl),mt=n(Gl,"DIV",{class:!0});var Ol=s(mt);m(d0.$$.fragment,Ol),DZo=i(Ol),vpe=n(Ol,"P",{});var hht=s(vpe);GZo=r(hht,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),hht.forEach(t),OZo=i(Ol),pc=n(Ol,"P",{});var LJ=s(pc);VZo=r(LJ,`Note:
Loading a model from its configuration file does `),Fpe=n(LJ,"STRONG",{});var pht=s(Fpe);XZo=r(pht,"not"),pht.forEach(t),zZo=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$O=n(LJ,"A",{href:!0});var _ht=s($O);QZo=r(_ht,"from_pretrained()"),_ht.forEach(t),WZo=r(LJ," to load the model weights."),LJ.forEach(t),HZo=i(Ol),Tpe=n(Ol,"P",{});var uht=s(Tpe);UZo=r(uht,"Examples:"),uht.forEach(t),JZo=i(Ol),m(c0.$$.fragment,Ol),Ol.forEach(t),YZo=i(Gl),no=n(Gl,"DIV",{class:!0});var ia=s(no);m(f0.$$.fragment,ia),KZo=i(ia),Mpe=n(ia,"P",{});var bht=s(Mpe);ZZo=r(bht,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),bht.forEach(t),eer=i(ia),_n=n(ia,"P",{});var l3=s(_n);oer=r(l3,"The model class to instantiate is selected based on the "),Epe=n(l3,"CODE",{});var vht=s(Epe);rer=r(vht,"model_type"),vht.forEach(t),ter=r(l3,` property of the config object (either
passed as an argument or loaded from `),Cpe=n(l3,"CODE",{});var Fht=s(Cpe);aer=r(Fht,"pretrained_model_name_or_path"),Fht.forEach(t),ner=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(l3,"CODE",{});var Tht=s(wpe);ser=r(Tht,"pretrained_model_name_or_path"),Tht.forEach(t),ler=r(l3,":"),l3.forEach(t),ier=i(ia),Ape=n(ia,"UL",{});var Mht=s(Ape);Bv=n(Mht,"LI",{});var wLe=s(Bv);ype=n(wLe,"STRONG",{});var Eht=s(ype);der=r(Eht,"maskformer"),Eht.forEach(t),cer=r(wLe," \u2014 "),IO=n(wLe,"A",{href:!0});var Cht=s(IO);fer=r(Cht,"MaskFormerForInstanceSegmentation"),Cht.forEach(t),mer=r(wLe," (MaskFormer model)"),wLe.forEach(t),Mht.forEach(t),ger=i(ia),Pv=n(ia,"P",{});var ALe=s(Pv);her=r(ALe,"The model is set in evaluation mode by default using "),Lpe=n(ALe,"CODE",{});var wht=s(Lpe);per=r(wht,"model.eval()"),wht.forEach(t),_er=r(ALe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(ALe,"CODE",{});var Aht=s(xpe);uer=r(Aht,"model.train()"),Aht.forEach(t),ALe.forEach(t),ber=i(ia),kpe=n(ia,"P",{});var yht=s(kpe);ver=r(yht,"Examples:"),yht.forEach(t),Fer=i(ia),m(m0.$$.fragment,ia),ia.forEach(t),Gl.forEach(t),nPe=i(c),_c=n(c,"H2",{class:!0});var pIe=s(_c);$v=n(pIe,"A",{id:!0,class:!0,href:!0});var Lht=s($v);Spe=n(Lht,"SPAN",{});var xht=s(Spe);m(g0.$$.fragment,xht),xht.forEach(t),Lht.forEach(t),Ter=i(pIe),Rpe=n(pIe,"SPAN",{});var kht=s(Rpe);Mer=r(kht,"TFAutoModel"),kht.forEach(t),pIe.forEach(t),sPe=i(c),vr=n(c,"DIV",{class:!0});var Vl=s(vr);m(h0.$$.fragment,Vl),Eer=i(Vl),uc=n(Vl,"P",{});var xJ=s(uc);Cer=r(xJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qO=n(xJ,"A",{href:!0});var Sht=s(qO);wer=r(Sht,"from_pretrained()"),Sht.forEach(t),Aer=r(xJ," class method or the "),NO=n(xJ,"A",{href:!0});var Rht=s(NO);yer=r(Rht,"from_config()"),Rht.forEach(t),Ler=r(xJ,` class
method.`),xJ.forEach(t),xer=i(Vl),p0=n(Vl,"P",{});var _Ie=s(p0);ker=r(_Ie,"This class cannot be instantiated directly using "),Bpe=n(_Ie,"CODE",{});var Bht=s(Bpe);Ser=r(Bht,"__init__()"),Bht.forEach(t),Rer=r(_Ie," (throws an error)."),_Ie.forEach(t),Ber=i(Vl),gt=n(Vl,"DIV",{class:!0});var Xl=s(gt);m(_0.$$.fragment,Xl),Per=i(Xl),Ppe=n(Xl,"P",{});var Pht=s(Ppe);$er=r(Pht,"Instantiates one of the base model classes of the library from a configuration."),Pht.forEach(t),Ier=i(Xl),bc=n(Xl,"P",{});var kJ=s(bc);qer=r(kJ,`Note:
Loading a model from its configuration file does `),$pe=n(kJ,"STRONG",{});var $ht=s($pe);Ner=r($ht,"not"),$ht.forEach(t),jer=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=n(kJ,"A",{href:!0});var Iht=s(jO);Der=r(Iht,"from_pretrained()"),Iht.forEach(t),Ger=r(kJ," to load the model weights."),kJ.forEach(t),Oer=i(Xl),Ipe=n(Xl,"P",{});var qht=s(Ipe);Ver=r(qht,"Examples:"),qht.forEach(t),Xer=i(Xl),m(u0.$$.fragment,Xl),Xl.forEach(t),zer=i(Vl),ho=n(Vl,"DIV",{class:!0});var pa=s(ho);m(b0.$$.fragment,pa),Qer=i(pa),qpe=n(pa,"P",{});var Nht=s(qpe);Wer=r(Nht,"Instantiate one of the base model classes of the library from a pretrained model."),Nht.forEach(t),Her=i(pa),un=n(pa,"P",{});var i3=s(un);Uer=r(i3,"The model class to instantiate is selected based on the "),Npe=n(i3,"CODE",{});var jht=s(Npe);Jer=r(jht,"model_type"),jht.forEach(t),Yer=r(i3,` property of the config object (either
passed as an argument or loaded from `),jpe=n(i3,"CODE",{});var Dht=s(jpe);Ker=r(Dht,"pretrained_model_name_or_path"),Dht.forEach(t),Zer=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=n(i3,"CODE",{});var Ght=s(Dpe);eor=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),oor=r(i3,":"),i3.forEach(t),ror=i(pa),x=n(pa,"UL",{});var k=s(x);Iv=n(k,"LI",{});var yLe=s(Iv);Gpe=n(yLe,"STRONG",{});var Oht=s(Gpe);tor=r(Oht,"albert"),Oht.forEach(t),aor=r(yLe," \u2014 "),DO=n(yLe,"A",{href:!0});var Vht=s(DO);nor=r(Vht,"TFAlbertModel"),Vht.forEach(t),sor=r(yLe," (ALBERT model)"),yLe.forEach(t),lor=i(k),qv=n(k,"LI",{});var LLe=s(qv);Ope=n(LLe,"STRONG",{});var Xht=s(Ope);ior=r(Xht,"bart"),Xht.forEach(t),dor=r(LLe," \u2014 "),GO=n(LLe,"A",{href:!0});var zht=s(GO);cor=r(zht,"TFBartModel"),zht.forEach(t),mor=r(LLe," (BART model)"),LLe.forEach(t),gor=i(k),Nv=n(k,"LI",{});var xLe=s(Nv);Vpe=n(xLe,"STRONG",{});var Qht=s(Vpe);hor=r(Qht,"bert"),Qht.forEach(t),por=r(xLe," \u2014 "),OO=n(xLe,"A",{href:!0});var Wht=s(OO);_or=r(Wht,"TFBertModel"),Wht.forEach(t),uor=r(xLe," (BERT model)"),xLe.forEach(t),bor=i(k),jv=n(k,"LI",{});var kLe=s(jv);Xpe=n(kLe,"STRONG",{});var Hht=s(Xpe);vor=r(Hht,"blenderbot"),Hht.forEach(t),For=r(kLe," \u2014 "),VO=n(kLe,"A",{href:!0});var Uht=s(VO);Tor=r(Uht,"TFBlenderbotModel"),Uht.forEach(t),Mor=r(kLe," (Blenderbot model)"),kLe.forEach(t),Eor=i(k),Dv=n(k,"LI",{});var SLe=s(Dv);zpe=n(SLe,"STRONG",{});var Jht=s(zpe);Cor=r(Jht,"blenderbot-small"),Jht.forEach(t),wor=r(SLe," \u2014 "),XO=n(SLe,"A",{href:!0});var Yht=s(XO);Aor=r(Yht,"TFBlenderbotSmallModel"),Yht.forEach(t),yor=r(SLe," (BlenderbotSmall model)"),SLe.forEach(t),Lor=i(k),Gv=n(k,"LI",{});var RLe=s(Gv);Qpe=n(RLe,"STRONG",{});var Kht=s(Qpe);xor=r(Kht,"camembert"),Kht.forEach(t),kor=r(RLe," \u2014 "),zO=n(RLe,"A",{href:!0});var Zht=s(zO);Sor=r(Zht,"TFCamembertModel"),Zht.forEach(t),Ror=r(RLe," (CamemBERT model)"),RLe.forEach(t),Bor=i(k),Ov=n(k,"LI",{});var BLe=s(Ov);Wpe=n(BLe,"STRONG",{});var ept=s(Wpe);Por=r(ept,"clip"),ept.forEach(t),$or=r(BLe," \u2014 "),QO=n(BLe,"A",{href:!0});var opt=s(QO);Ior=r(opt,"TFCLIPModel"),opt.forEach(t),qor=r(BLe," (CLIP model)"),BLe.forEach(t),Nor=i(k),Vv=n(k,"LI",{});var PLe=s(Vv);Hpe=n(PLe,"STRONG",{});var rpt=s(Hpe);jor=r(rpt,"convbert"),rpt.forEach(t),Dor=r(PLe," \u2014 "),WO=n(PLe,"A",{href:!0});var tpt=s(WO);Gor=r(tpt,"TFConvBertModel"),tpt.forEach(t),Oor=r(PLe," (ConvBERT model)"),PLe.forEach(t),Vor=i(k),Xv=n(k,"LI",{});var $Le=s(Xv);Upe=n($Le,"STRONG",{});var apt=s(Upe);Xor=r(apt,"convnext"),apt.forEach(t),zor=r($Le," \u2014 "),HO=n($Le,"A",{href:!0});var npt=s(HO);Qor=r(npt,"TFConvNextModel"),npt.forEach(t),Wor=r($Le," (ConvNext model)"),$Le.forEach(t),Hor=i(k),zv=n(k,"LI",{});var ILe=s(zv);Jpe=n(ILe,"STRONG",{});var spt=s(Jpe);Uor=r(spt,"ctrl"),spt.forEach(t),Jor=r(ILe," \u2014 "),UO=n(ILe,"A",{href:!0});var lpt=s(UO);Yor=r(lpt,"TFCTRLModel"),lpt.forEach(t),Kor=r(ILe," (CTRL model)"),ILe.forEach(t),Zor=i(k),Qv=n(k,"LI",{});var qLe=s(Qv);Ype=n(qLe,"STRONG",{});var ipt=s(Ype);err=r(ipt,"deberta"),ipt.forEach(t),orr=r(qLe," \u2014 "),JO=n(qLe,"A",{href:!0});var dpt=s(JO);rrr=r(dpt,"TFDebertaModel"),dpt.forEach(t),trr=r(qLe," (DeBERTa model)"),qLe.forEach(t),arr=i(k),Wv=n(k,"LI",{});var NLe=s(Wv);Kpe=n(NLe,"STRONG",{});var cpt=s(Kpe);nrr=r(cpt,"deberta-v2"),cpt.forEach(t),srr=r(NLe," \u2014 "),YO=n(NLe,"A",{href:!0});var fpt=s(YO);lrr=r(fpt,"TFDebertaV2Model"),fpt.forEach(t),irr=r(NLe," (DeBERTa-v2 model)"),NLe.forEach(t),drr=i(k),Hv=n(k,"LI",{});var jLe=s(Hv);Zpe=n(jLe,"STRONG",{});var mpt=s(Zpe);crr=r(mpt,"distilbert"),mpt.forEach(t),frr=r(jLe," \u2014 "),KO=n(jLe,"A",{href:!0});var gpt=s(KO);mrr=r(gpt,"TFDistilBertModel"),gpt.forEach(t),grr=r(jLe," (DistilBERT model)"),jLe.forEach(t),hrr=i(k),Uv=n(k,"LI",{});var DLe=s(Uv);e_e=n(DLe,"STRONG",{});var hpt=s(e_e);prr=r(hpt,"dpr"),hpt.forEach(t),_rr=r(DLe," \u2014 "),ZO=n(DLe,"A",{href:!0});var ppt=s(ZO);urr=r(ppt,"TFDPRQuestionEncoder"),ppt.forEach(t),brr=r(DLe," (DPR model)"),DLe.forEach(t),vrr=i(k),Jv=n(k,"LI",{});var GLe=s(Jv);o_e=n(GLe,"STRONG",{});var _pt=s(o_e);Frr=r(_pt,"electra"),_pt.forEach(t),Trr=r(GLe," \u2014 "),eV=n(GLe,"A",{href:!0});var upt=s(eV);Mrr=r(upt,"TFElectraModel"),upt.forEach(t),Err=r(GLe," (ELECTRA model)"),GLe.forEach(t),Crr=i(k),Yv=n(k,"LI",{});var OLe=s(Yv);r_e=n(OLe,"STRONG",{});var bpt=s(r_e);wrr=r(bpt,"flaubert"),bpt.forEach(t),Arr=r(OLe," \u2014 "),oV=n(OLe,"A",{href:!0});var vpt=s(oV);yrr=r(vpt,"TFFlaubertModel"),vpt.forEach(t),Lrr=r(OLe," (FlauBERT model)"),OLe.forEach(t),xrr=i(k),zs=n(k,"LI",{});var y7=s(zs);t_e=n(y7,"STRONG",{});var Fpt=s(t_e);krr=r(Fpt,"funnel"),Fpt.forEach(t),Srr=r(y7," \u2014 "),rV=n(y7,"A",{href:!0});var Tpt=s(rV);Rrr=r(Tpt,"TFFunnelModel"),Tpt.forEach(t),Brr=r(y7," or "),tV=n(y7,"A",{href:!0});var Mpt=s(tV);Prr=r(Mpt,"TFFunnelBaseModel"),Mpt.forEach(t),$rr=r(y7," (Funnel Transformer model)"),y7.forEach(t),Irr=i(k),Kv=n(k,"LI",{});var VLe=s(Kv);a_e=n(VLe,"STRONG",{});var Ept=s(a_e);qrr=r(Ept,"gpt2"),Ept.forEach(t),Nrr=r(VLe," \u2014 "),aV=n(VLe,"A",{href:!0});var Cpt=s(aV);jrr=r(Cpt,"TFGPT2Model"),Cpt.forEach(t),Drr=r(VLe," (OpenAI GPT-2 model)"),VLe.forEach(t),Grr=i(k),Zv=n(k,"LI",{});var XLe=s(Zv);n_e=n(XLe,"STRONG",{});var wpt=s(n_e);Orr=r(wpt,"gptj"),wpt.forEach(t),Vrr=r(XLe," \u2014 "),nV=n(XLe,"A",{href:!0});var Apt=s(nV);Xrr=r(Apt,"TFGPTJModel"),Apt.forEach(t),zrr=r(XLe," (GPT-J model)"),XLe.forEach(t),Qrr=i(k),eF=n(k,"LI",{});var zLe=s(eF);s_e=n(zLe,"STRONG",{});var ypt=s(s_e);Wrr=r(ypt,"hubert"),ypt.forEach(t),Hrr=r(zLe," \u2014 "),sV=n(zLe,"A",{href:!0});var Lpt=s(sV);Urr=r(Lpt,"TFHubertModel"),Lpt.forEach(t),Jrr=r(zLe," (Hubert model)"),zLe.forEach(t),Yrr=i(k),oF=n(k,"LI",{});var QLe=s(oF);l_e=n(QLe,"STRONG",{});var xpt=s(l_e);Krr=r(xpt,"layoutlm"),xpt.forEach(t),Zrr=r(QLe," \u2014 "),lV=n(QLe,"A",{href:!0});var kpt=s(lV);etr=r(kpt,"TFLayoutLMModel"),kpt.forEach(t),otr=r(QLe," (LayoutLM model)"),QLe.forEach(t),rtr=i(k),rF=n(k,"LI",{});var WLe=s(rF);i_e=n(WLe,"STRONG",{});var Spt=s(i_e);ttr=r(Spt,"led"),Spt.forEach(t),atr=r(WLe," \u2014 "),iV=n(WLe,"A",{href:!0});var Rpt=s(iV);ntr=r(Rpt,"TFLEDModel"),Rpt.forEach(t),str=r(WLe," (LED model)"),WLe.forEach(t),ltr=i(k),tF=n(k,"LI",{});var HLe=s(tF);d_e=n(HLe,"STRONG",{});var Bpt=s(d_e);itr=r(Bpt,"longformer"),Bpt.forEach(t),dtr=r(HLe," \u2014 "),dV=n(HLe,"A",{href:!0});var Ppt=s(dV);ctr=r(Ppt,"TFLongformerModel"),Ppt.forEach(t),ftr=r(HLe," (Longformer model)"),HLe.forEach(t),mtr=i(k),aF=n(k,"LI",{});var ULe=s(aF);c_e=n(ULe,"STRONG",{});var $pt=s(c_e);gtr=r($pt,"lxmert"),$pt.forEach(t),htr=r(ULe," \u2014 "),cV=n(ULe,"A",{href:!0});var Ipt=s(cV);ptr=r(Ipt,"TFLxmertModel"),Ipt.forEach(t),_tr=r(ULe," (LXMERT model)"),ULe.forEach(t),utr=i(k),nF=n(k,"LI",{});var JLe=s(nF);f_e=n(JLe,"STRONG",{});var qpt=s(f_e);btr=r(qpt,"marian"),qpt.forEach(t),vtr=r(JLe," \u2014 "),fV=n(JLe,"A",{href:!0});var Npt=s(fV);Ftr=r(Npt,"TFMarianModel"),Npt.forEach(t),Ttr=r(JLe," (Marian model)"),JLe.forEach(t),Mtr=i(k),sF=n(k,"LI",{});var YLe=s(sF);m_e=n(YLe,"STRONG",{});var jpt=s(m_e);Etr=r(jpt,"mbart"),jpt.forEach(t),Ctr=r(YLe," \u2014 "),mV=n(YLe,"A",{href:!0});var Dpt=s(mV);wtr=r(Dpt,"TFMBartModel"),Dpt.forEach(t),Atr=r(YLe," (mBART model)"),YLe.forEach(t),ytr=i(k),lF=n(k,"LI",{});var KLe=s(lF);g_e=n(KLe,"STRONG",{});var Gpt=s(g_e);Ltr=r(Gpt,"mobilebert"),Gpt.forEach(t),xtr=r(KLe," \u2014 "),gV=n(KLe,"A",{href:!0});var Opt=s(gV);ktr=r(Opt,"TFMobileBertModel"),Opt.forEach(t),Str=r(KLe," (MobileBERT model)"),KLe.forEach(t),Rtr=i(k),iF=n(k,"LI",{});var ZLe=s(iF);h_e=n(ZLe,"STRONG",{});var Vpt=s(h_e);Btr=r(Vpt,"mpnet"),Vpt.forEach(t),Ptr=r(ZLe," \u2014 "),hV=n(ZLe,"A",{href:!0});var Xpt=s(hV);$tr=r(Xpt,"TFMPNetModel"),Xpt.forEach(t),Itr=r(ZLe," (MPNet model)"),ZLe.forEach(t),qtr=i(k),dF=n(k,"LI",{});var e7e=s(dF);p_e=n(e7e,"STRONG",{});var zpt=s(p_e);Ntr=r(zpt,"mt5"),zpt.forEach(t),jtr=r(e7e," \u2014 "),pV=n(e7e,"A",{href:!0});var Qpt=s(pV);Dtr=r(Qpt,"TFMT5Model"),Qpt.forEach(t),Gtr=r(e7e," (mT5 model)"),e7e.forEach(t),Otr=i(k),cF=n(k,"LI",{});var o7e=s(cF);__e=n(o7e,"STRONG",{});var Wpt=s(__e);Vtr=r(Wpt,"openai-gpt"),Wpt.forEach(t),Xtr=r(o7e," \u2014 "),_V=n(o7e,"A",{href:!0});var Hpt=s(_V);ztr=r(Hpt,"TFOpenAIGPTModel"),Hpt.forEach(t),Qtr=r(o7e," (OpenAI GPT model)"),o7e.forEach(t),Wtr=i(k),fF=n(k,"LI",{});var r7e=s(fF);u_e=n(r7e,"STRONG",{});var Upt=s(u_e);Htr=r(Upt,"pegasus"),Upt.forEach(t),Utr=r(r7e," \u2014 "),uV=n(r7e,"A",{href:!0});var Jpt=s(uV);Jtr=r(Jpt,"TFPegasusModel"),Jpt.forEach(t),Ytr=r(r7e," (Pegasus model)"),r7e.forEach(t),Ktr=i(k),mF=n(k,"LI",{});var t7e=s(mF);b_e=n(t7e,"STRONG",{});var Ypt=s(b_e);Ztr=r(Ypt,"rembert"),Ypt.forEach(t),ear=r(t7e," \u2014 "),bV=n(t7e,"A",{href:!0});var Kpt=s(bV);oar=r(Kpt,"TFRemBertModel"),Kpt.forEach(t),rar=r(t7e," (RemBERT model)"),t7e.forEach(t),tar=i(k),gF=n(k,"LI",{});var a7e=s(gF);v_e=n(a7e,"STRONG",{});var Zpt=s(v_e);aar=r(Zpt,"roberta"),Zpt.forEach(t),nar=r(a7e," \u2014 "),vV=n(a7e,"A",{href:!0});var e_t=s(vV);sar=r(e_t,"TFRobertaModel"),e_t.forEach(t),lar=r(a7e," (RoBERTa model)"),a7e.forEach(t),iar=i(k),hF=n(k,"LI",{});var n7e=s(hF);F_e=n(n7e,"STRONG",{});var o_t=s(F_e);dar=r(o_t,"roformer"),o_t.forEach(t),car=r(n7e," \u2014 "),FV=n(n7e,"A",{href:!0});var r_t=s(FV);far=r(r_t,"TFRoFormerModel"),r_t.forEach(t),mar=r(n7e," (RoFormer model)"),n7e.forEach(t),gar=i(k),pF=n(k,"LI",{});var s7e=s(pF);T_e=n(s7e,"STRONG",{});var t_t=s(T_e);har=r(t_t,"speech_to_text"),t_t.forEach(t),par=r(s7e," \u2014 "),TV=n(s7e,"A",{href:!0});var a_t=s(TV);_ar=r(a_t,"TFSpeech2TextModel"),a_t.forEach(t),uar=r(s7e," (Speech2Text model)"),s7e.forEach(t),bar=i(k),_F=n(k,"LI",{});var l7e=s(_F);M_e=n(l7e,"STRONG",{});var n_t=s(M_e);Far=r(n_t,"t5"),n_t.forEach(t),Tar=r(l7e," \u2014 "),MV=n(l7e,"A",{href:!0});var s_t=s(MV);Mar=r(s_t,"TFT5Model"),s_t.forEach(t),Ear=r(l7e," (T5 model)"),l7e.forEach(t),Car=i(k),uF=n(k,"LI",{});var i7e=s(uF);E_e=n(i7e,"STRONG",{});var l_t=s(E_e);war=r(l_t,"tapas"),l_t.forEach(t),Aar=r(i7e," \u2014 "),EV=n(i7e,"A",{href:!0});var i_t=s(EV);yar=r(i_t,"TFTapasModel"),i_t.forEach(t),Lar=r(i7e," (TAPAS model)"),i7e.forEach(t),xar=i(k),bF=n(k,"LI",{});var d7e=s(bF);C_e=n(d7e,"STRONG",{});var d_t=s(C_e);kar=r(d_t,"transfo-xl"),d_t.forEach(t),Sar=r(d7e," \u2014 "),CV=n(d7e,"A",{href:!0});var c_t=s(CV);Rar=r(c_t,"TFTransfoXLModel"),c_t.forEach(t),Bar=r(d7e," (Transformer-XL model)"),d7e.forEach(t),Par=i(k),vF=n(k,"LI",{});var c7e=s(vF);w_e=n(c7e,"STRONG",{});var f_t=s(w_e);$ar=r(f_t,"vit"),f_t.forEach(t),Iar=r(c7e," \u2014 "),wV=n(c7e,"A",{href:!0});var m_t=s(wV);qar=r(m_t,"TFViTModel"),m_t.forEach(t),Nar=r(c7e," (ViT model)"),c7e.forEach(t),jar=i(k),FF=n(k,"LI",{});var f7e=s(FF);A_e=n(f7e,"STRONG",{});var g_t=s(A_e);Dar=r(g_t,"vit_mae"),g_t.forEach(t),Gar=r(f7e," \u2014 "),AV=n(f7e,"A",{href:!0});var h_t=s(AV);Oar=r(h_t,"TFViTMAEModel"),h_t.forEach(t),Var=r(f7e," (ViTMAE model)"),f7e.forEach(t),Xar=i(k),TF=n(k,"LI",{});var m7e=s(TF);y_e=n(m7e,"STRONG",{});var p_t=s(y_e);zar=r(p_t,"wav2vec2"),p_t.forEach(t),Qar=r(m7e," \u2014 "),yV=n(m7e,"A",{href:!0});var __t=s(yV);War=r(__t,"TFWav2Vec2Model"),__t.forEach(t),Har=r(m7e," (Wav2Vec2 model)"),m7e.forEach(t),Uar=i(k),MF=n(k,"LI",{});var g7e=s(MF);L_e=n(g7e,"STRONG",{});var u_t=s(L_e);Jar=r(u_t,"xlm"),u_t.forEach(t),Yar=r(g7e," \u2014 "),LV=n(g7e,"A",{href:!0});var b_t=s(LV);Kar=r(b_t,"TFXLMModel"),b_t.forEach(t),Zar=r(g7e," (XLM model)"),g7e.forEach(t),enr=i(k),EF=n(k,"LI",{});var h7e=s(EF);x_e=n(h7e,"STRONG",{});var v_t=s(x_e);onr=r(v_t,"xlm-roberta"),v_t.forEach(t),rnr=r(h7e," \u2014 "),xV=n(h7e,"A",{href:!0});var F_t=s(xV);tnr=r(F_t,"TFXLMRobertaModel"),F_t.forEach(t),anr=r(h7e," (XLM-RoBERTa model)"),h7e.forEach(t),nnr=i(k),CF=n(k,"LI",{});var p7e=s(CF);k_e=n(p7e,"STRONG",{});var T_t=s(k_e);snr=r(T_t,"xlnet"),T_t.forEach(t),lnr=r(p7e," \u2014 "),kV=n(p7e,"A",{href:!0});var M_t=s(kV);inr=r(M_t,"TFXLNetModel"),M_t.forEach(t),dnr=r(p7e," (XLNet model)"),p7e.forEach(t),k.forEach(t),cnr=i(pa),S_e=n(pa,"P",{});var E_t=s(S_e);fnr=r(E_t,"Examples:"),E_t.forEach(t),mnr=i(pa),m(v0.$$.fragment,pa),pa.forEach(t),Vl.forEach(t),lPe=i(c),vc=n(c,"H2",{class:!0});var uIe=s(vc);wF=n(uIe,"A",{id:!0,class:!0,href:!0});var C_t=s(wF);R_e=n(C_t,"SPAN",{});var w_t=s(R_e);m(F0.$$.fragment,w_t),w_t.forEach(t),C_t.forEach(t),gnr=i(uIe),B_e=n(uIe,"SPAN",{});var A_t=s(B_e);hnr=r(A_t,"TFAutoModelForPreTraining"),A_t.forEach(t),uIe.forEach(t),iPe=i(c),Fr=n(c,"DIV",{class:!0});var zl=s(Fr);m(T0.$$.fragment,zl),pnr=i(zl),Fc=n(zl,"P",{});var SJ=s(Fc);_nr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SV=n(SJ,"A",{href:!0});var y_t=s(SV);unr=r(y_t,"from_pretrained()"),y_t.forEach(t),bnr=r(SJ," class method or the "),RV=n(SJ,"A",{href:!0});var L_t=s(RV);vnr=r(L_t,"from_config()"),L_t.forEach(t),Fnr=r(SJ,` class
method.`),SJ.forEach(t),Tnr=i(zl),M0=n(zl,"P",{});var bIe=s(M0);Mnr=r(bIe,"This class cannot be instantiated directly using "),P_e=n(bIe,"CODE",{});var x_t=s(P_e);Enr=r(x_t,"__init__()"),x_t.forEach(t),Cnr=r(bIe," (throws an error)."),bIe.forEach(t),wnr=i(zl),ht=n(zl,"DIV",{class:!0});var Ql=s(ht);m(E0.$$.fragment,Ql),Anr=i(Ql),$_e=n(Ql,"P",{});var k_t=s($_e);ynr=r(k_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k_t.forEach(t),Lnr=i(Ql),Tc=n(Ql,"P",{});var RJ=s(Tc);xnr=r(RJ,`Note:
Loading a model from its configuration file does `),I_e=n(RJ,"STRONG",{});var S_t=s(I_e);knr=r(S_t,"not"),S_t.forEach(t),Snr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(RJ,"A",{href:!0});var R_t=s(BV);Rnr=r(R_t,"from_pretrained()"),R_t.forEach(t),Bnr=r(RJ," to load the model weights."),RJ.forEach(t),Pnr=i(Ql),q_e=n(Ql,"P",{});var B_t=s(q_e);$nr=r(B_t,"Examples:"),B_t.forEach(t),Inr=i(Ql),m(C0.$$.fragment,Ql),Ql.forEach(t),qnr=i(zl),po=n(zl,"DIV",{class:!0});var _a=s(po);m(w0.$$.fragment,_a),Nnr=i(_a),N_e=n(_a,"P",{});var P_t=s(N_e);jnr=r(P_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),P_t.forEach(t),Dnr=i(_a),bn=n(_a,"P",{});var d3=s(bn);Gnr=r(d3,"The model class to instantiate is selected based on the "),j_e=n(d3,"CODE",{});var $_t=s(j_e);Onr=r($_t,"model_type"),$_t.forEach(t),Vnr=r(d3,` property of the config object (either
passed as an argument or loaded from `),D_e=n(d3,"CODE",{});var I_t=s(D_e);Xnr=r(I_t,"pretrained_model_name_or_path"),I_t.forEach(t),znr=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=n(d3,"CODE",{});var q_t=s(G_e);Qnr=r(q_t,"pretrained_model_name_or_path"),q_t.forEach(t),Wnr=r(d3,":"),d3.forEach(t),Hnr=i(_a),H=n(_a,"UL",{});var U=s(H);AF=n(U,"LI",{});var _7e=s(AF);O_e=n(_7e,"STRONG",{});var N_t=s(O_e);Unr=r(N_t,"albert"),N_t.forEach(t),Jnr=r(_7e," \u2014 "),PV=n(_7e,"A",{href:!0});var j_t=s(PV);Ynr=r(j_t,"TFAlbertForPreTraining"),j_t.forEach(t),Knr=r(_7e," (ALBERT model)"),_7e.forEach(t),Znr=i(U),yF=n(U,"LI",{});var u7e=s(yF);V_e=n(u7e,"STRONG",{});var D_t=s(V_e);esr=r(D_t,"bart"),D_t.forEach(t),osr=r(u7e," \u2014 "),$V=n(u7e,"A",{href:!0});var G_t=s($V);rsr=r(G_t,"TFBartForConditionalGeneration"),G_t.forEach(t),tsr=r(u7e," (BART model)"),u7e.forEach(t),asr=i(U),LF=n(U,"LI",{});var b7e=s(LF);X_e=n(b7e,"STRONG",{});var O_t=s(X_e);nsr=r(O_t,"bert"),O_t.forEach(t),ssr=r(b7e," \u2014 "),IV=n(b7e,"A",{href:!0});var V_t=s(IV);lsr=r(V_t,"TFBertForPreTraining"),V_t.forEach(t),isr=r(b7e," (BERT model)"),b7e.forEach(t),dsr=i(U),xF=n(U,"LI",{});var v7e=s(xF);z_e=n(v7e,"STRONG",{});var X_t=s(z_e);csr=r(X_t,"camembert"),X_t.forEach(t),fsr=r(v7e," \u2014 "),qV=n(v7e,"A",{href:!0});var z_t=s(qV);msr=r(z_t,"TFCamembertForMaskedLM"),z_t.forEach(t),gsr=r(v7e," (CamemBERT model)"),v7e.forEach(t),hsr=i(U),kF=n(U,"LI",{});var F7e=s(kF);Q_e=n(F7e,"STRONG",{});var Q_t=s(Q_e);psr=r(Q_t,"ctrl"),Q_t.forEach(t),_sr=r(F7e," \u2014 "),NV=n(F7e,"A",{href:!0});var W_t=s(NV);usr=r(W_t,"TFCTRLLMHeadModel"),W_t.forEach(t),bsr=r(F7e," (CTRL model)"),F7e.forEach(t),vsr=i(U),SF=n(U,"LI",{});var T7e=s(SF);W_e=n(T7e,"STRONG",{});var H_t=s(W_e);Fsr=r(H_t,"distilbert"),H_t.forEach(t),Tsr=r(T7e," \u2014 "),jV=n(T7e,"A",{href:!0});var U_t=s(jV);Msr=r(U_t,"TFDistilBertForMaskedLM"),U_t.forEach(t),Esr=r(T7e," (DistilBERT model)"),T7e.forEach(t),Csr=i(U),RF=n(U,"LI",{});var M7e=s(RF);H_e=n(M7e,"STRONG",{});var J_t=s(H_e);wsr=r(J_t,"electra"),J_t.forEach(t),Asr=r(M7e," \u2014 "),DV=n(M7e,"A",{href:!0});var Y_t=s(DV);ysr=r(Y_t,"TFElectraForPreTraining"),Y_t.forEach(t),Lsr=r(M7e," (ELECTRA model)"),M7e.forEach(t),xsr=i(U),BF=n(U,"LI",{});var E7e=s(BF);U_e=n(E7e,"STRONG",{});var K_t=s(U_e);ksr=r(K_t,"flaubert"),K_t.forEach(t),Ssr=r(E7e," \u2014 "),GV=n(E7e,"A",{href:!0});var Z_t=s(GV);Rsr=r(Z_t,"TFFlaubertWithLMHeadModel"),Z_t.forEach(t),Bsr=r(E7e," (FlauBERT model)"),E7e.forEach(t),Psr=i(U),PF=n(U,"LI",{});var C7e=s(PF);J_e=n(C7e,"STRONG",{});var eut=s(J_e);$sr=r(eut,"funnel"),eut.forEach(t),Isr=r(C7e," \u2014 "),OV=n(C7e,"A",{href:!0});var out=s(OV);qsr=r(out,"TFFunnelForPreTraining"),out.forEach(t),Nsr=r(C7e," (Funnel Transformer model)"),C7e.forEach(t),jsr=i(U),$F=n(U,"LI",{});var w7e=s($F);Y_e=n(w7e,"STRONG",{});var rut=s(Y_e);Dsr=r(rut,"gpt2"),rut.forEach(t),Gsr=r(w7e," \u2014 "),VV=n(w7e,"A",{href:!0});var tut=s(VV);Osr=r(tut,"TFGPT2LMHeadModel"),tut.forEach(t),Vsr=r(w7e," (OpenAI GPT-2 model)"),w7e.forEach(t),Xsr=i(U),IF=n(U,"LI",{});var A7e=s(IF);K_e=n(A7e,"STRONG",{});var aut=s(K_e);zsr=r(aut,"layoutlm"),aut.forEach(t),Qsr=r(A7e," \u2014 "),XV=n(A7e,"A",{href:!0});var nut=s(XV);Wsr=r(nut,"TFLayoutLMForMaskedLM"),nut.forEach(t),Hsr=r(A7e," (LayoutLM model)"),A7e.forEach(t),Usr=i(U),qF=n(U,"LI",{});var y7e=s(qF);Z_e=n(y7e,"STRONG",{});var sut=s(Z_e);Jsr=r(sut,"lxmert"),sut.forEach(t),Ysr=r(y7e," \u2014 "),zV=n(y7e,"A",{href:!0});var lut=s(zV);Ksr=r(lut,"TFLxmertForPreTraining"),lut.forEach(t),Zsr=r(y7e," (LXMERT model)"),y7e.forEach(t),elr=i(U),NF=n(U,"LI",{});var L7e=s(NF);eue=n(L7e,"STRONG",{});var iut=s(eue);olr=r(iut,"mobilebert"),iut.forEach(t),rlr=r(L7e," \u2014 "),QV=n(L7e,"A",{href:!0});var dut=s(QV);tlr=r(dut,"TFMobileBertForPreTraining"),dut.forEach(t),alr=r(L7e," (MobileBERT model)"),L7e.forEach(t),nlr=i(U),jF=n(U,"LI",{});var x7e=s(jF);oue=n(x7e,"STRONG",{});var cut=s(oue);slr=r(cut,"mpnet"),cut.forEach(t),llr=r(x7e," \u2014 "),WV=n(x7e,"A",{href:!0});var fut=s(WV);ilr=r(fut,"TFMPNetForMaskedLM"),fut.forEach(t),dlr=r(x7e," (MPNet model)"),x7e.forEach(t),clr=i(U),DF=n(U,"LI",{});var k7e=s(DF);rue=n(k7e,"STRONG",{});var mut=s(rue);flr=r(mut,"openai-gpt"),mut.forEach(t),mlr=r(k7e," \u2014 "),HV=n(k7e,"A",{href:!0});var gut=s(HV);glr=r(gut,"TFOpenAIGPTLMHeadModel"),gut.forEach(t),hlr=r(k7e," (OpenAI GPT model)"),k7e.forEach(t),plr=i(U),GF=n(U,"LI",{});var S7e=s(GF);tue=n(S7e,"STRONG",{});var hut=s(tue);_lr=r(hut,"roberta"),hut.forEach(t),ulr=r(S7e," \u2014 "),UV=n(S7e,"A",{href:!0});var put=s(UV);blr=r(put,"TFRobertaForMaskedLM"),put.forEach(t),vlr=r(S7e," (RoBERTa model)"),S7e.forEach(t),Flr=i(U),OF=n(U,"LI",{});var R7e=s(OF);aue=n(R7e,"STRONG",{});var _ut=s(aue);Tlr=r(_ut,"t5"),_ut.forEach(t),Mlr=r(R7e," \u2014 "),JV=n(R7e,"A",{href:!0});var uut=s(JV);Elr=r(uut,"TFT5ForConditionalGeneration"),uut.forEach(t),Clr=r(R7e," (T5 model)"),R7e.forEach(t),wlr=i(U),VF=n(U,"LI",{});var B7e=s(VF);nue=n(B7e,"STRONG",{});var but=s(nue);Alr=r(but,"tapas"),but.forEach(t),ylr=r(B7e," \u2014 "),YV=n(B7e,"A",{href:!0});var vut=s(YV);Llr=r(vut,"TFTapasForMaskedLM"),vut.forEach(t),xlr=r(B7e," (TAPAS model)"),B7e.forEach(t),klr=i(U),XF=n(U,"LI",{});var P7e=s(XF);sue=n(P7e,"STRONG",{});var Fut=s(sue);Slr=r(Fut,"transfo-xl"),Fut.forEach(t),Rlr=r(P7e," \u2014 "),KV=n(P7e,"A",{href:!0});var Tut=s(KV);Blr=r(Tut,"TFTransfoXLLMHeadModel"),Tut.forEach(t),Plr=r(P7e," (Transformer-XL model)"),P7e.forEach(t),$lr=i(U),zF=n(U,"LI",{});var $7e=s(zF);lue=n($7e,"STRONG",{});var Mut=s(lue);Ilr=r(Mut,"vit_mae"),Mut.forEach(t),qlr=r($7e," \u2014 "),ZV=n($7e,"A",{href:!0});var Eut=s(ZV);Nlr=r(Eut,"TFViTMAEForPreTraining"),Eut.forEach(t),jlr=r($7e," (ViTMAE model)"),$7e.forEach(t),Dlr=i(U),QF=n(U,"LI",{});var I7e=s(QF);iue=n(I7e,"STRONG",{});var Cut=s(iue);Glr=r(Cut,"xlm"),Cut.forEach(t),Olr=r(I7e," \u2014 "),eX=n(I7e,"A",{href:!0});var wut=s(eX);Vlr=r(wut,"TFXLMWithLMHeadModel"),wut.forEach(t),Xlr=r(I7e," (XLM model)"),I7e.forEach(t),zlr=i(U),WF=n(U,"LI",{});var q7e=s(WF);due=n(q7e,"STRONG",{});var Aut=s(due);Qlr=r(Aut,"xlm-roberta"),Aut.forEach(t),Wlr=r(q7e," \u2014 "),oX=n(q7e,"A",{href:!0});var yut=s(oX);Hlr=r(yut,"TFXLMRobertaForMaskedLM"),yut.forEach(t),Ulr=r(q7e," (XLM-RoBERTa model)"),q7e.forEach(t),Jlr=i(U),HF=n(U,"LI",{});var N7e=s(HF);cue=n(N7e,"STRONG",{});var Lut=s(cue);Ylr=r(Lut,"xlnet"),Lut.forEach(t),Klr=r(N7e," \u2014 "),rX=n(N7e,"A",{href:!0});var xut=s(rX);Zlr=r(xut,"TFXLNetLMHeadModel"),xut.forEach(t),eir=r(N7e," (XLNet model)"),N7e.forEach(t),U.forEach(t),oir=i(_a),fue=n(_a,"P",{});var kut=s(fue);rir=r(kut,"Examples:"),kut.forEach(t),tir=i(_a),m(A0.$$.fragment,_a),_a.forEach(t),zl.forEach(t),dPe=i(c),Mc=n(c,"H2",{class:!0});var vIe=s(Mc);UF=n(vIe,"A",{id:!0,class:!0,href:!0});var Sut=s(UF);mue=n(Sut,"SPAN",{});var Rut=s(mue);m(y0.$$.fragment,Rut),Rut.forEach(t),Sut.forEach(t),air=i(vIe),gue=n(vIe,"SPAN",{});var But=s(gue);nir=r(But,"TFAutoModelForCausalLM"),But.forEach(t),vIe.forEach(t),cPe=i(c),Tr=n(c,"DIV",{class:!0});var Wl=s(Tr);m(L0.$$.fragment,Wl),sir=i(Wl),Ec=n(Wl,"P",{});var BJ=s(Ec);lir=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tX=n(BJ,"A",{href:!0});var Put=s(tX);iir=r(Put,"from_pretrained()"),Put.forEach(t),dir=r(BJ," class method or the "),aX=n(BJ,"A",{href:!0});var $ut=s(aX);cir=r($ut,"from_config()"),$ut.forEach(t),fir=r(BJ,` class
method.`),BJ.forEach(t),mir=i(Wl),x0=n(Wl,"P",{});var FIe=s(x0);gir=r(FIe,"This class cannot be instantiated directly using "),hue=n(FIe,"CODE",{});var Iut=s(hue);hir=r(Iut,"__init__()"),Iut.forEach(t),pir=r(FIe," (throws an error)."),FIe.forEach(t),_ir=i(Wl),pt=n(Wl,"DIV",{class:!0});var Hl=s(pt);m(k0.$$.fragment,Hl),uir=i(Hl),pue=n(Hl,"P",{});var qut=s(pue);bir=r(qut,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qut.forEach(t),vir=i(Hl),Cc=n(Hl,"P",{});var PJ=s(Cc);Fir=r(PJ,`Note:
Loading a model from its configuration file does `),_ue=n(PJ,"STRONG",{});var Nut=s(_ue);Tir=r(Nut,"not"),Nut.forEach(t),Mir=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=n(PJ,"A",{href:!0});var jut=s(nX);Eir=r(jut,"from_pretrained()"),jut.forEach(t),Cir=r(PJ," to load the model weights."),PJ.forEach(t),wir=i(Hl),uue=n(Hl,"P",{});var Dut=s(uue);Air=r(Dut,"Examples:"),Dut.forEach(t),yir=i(Hl),m(S0.$$.fragment,Hl),Hl.forEach(t),Lir=i(Wl),_o=n(Wl,"DIV",{class:!0});var ua=s(_o);m(R0.$$.fragment,ua),xir=i(ua),bue=n(ua,"P",{});var Gut=s(bue);kir=r(Gut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Gut.forEach(t),Sir=i(ua),vn=n(ua,"P",{});var c3=s(vn);Rir=r(c3,"The model class to instantiate is selected based on the "),vue=n(c3,"CODE",{});var Out=s(vue);Bir=r(Out,"model_type"),Out.forEach(t),Pir=r(c3,` property of the config object (either
passed as an argument or loaded from `),Fue=n(c3,"CODE",{});var Vut=s(Fue);$ir=r(Vut,"pretrained_model_name_or_path"),Vut.forEach(t),Iir=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=n(c3,"CODE",{});var Xut=s(Tue);qir=r(Xut,"pretrained_model_name_or_path"),Xut.forEach(t),Nir=r(c3,":"),c3.forEach(t),jir=i(ua),fe=n(ua,"UL",{});var pe=s(fe);JF=n(pe,"LI",{});var j7e=s(JF);Mue=n(j7e,"STRONG",{});var zut=s(Mue);Dir=r(zut,"bert"),zut.forEach(t),Gir=r(j7e," \u2014 "),sX=n(j7e,"A",{href:!0});var Qut=s(sX);Oir=r(Qut,"TFBertLMHeadModel"),Qut.forEach(t),Vir=r(j7e," (BERT model)"),j7e.forEach(t),Xir=i(pe),YF=n(pe,"LI",{});var D7e=s(YF);Eue=n(D7e,"STRONG",{});var Wut=s(Eue);zir=r(Wut,"camembert"),Wut.forEach(t),Qir=r(D7e," \u2014 "),lX=n(D7e,"A",{href:!0});var Hut=s(lX);Wir=r(Hut,"TFCamembertForCausalLM"),Hut.forEach(t),Hir=r(D7e," (CamemBERT model)"),D7e.forEach(t),Uir=i(pe),KF=n(pe,"LI",{});var G7e=s(KF);Cue=n(G7e,"STRONG",{});var Uut=s(Cue);Jir=r(Uut,"ctrl"),Uut.forEach(t),Yir=r(G7e," \u2014 "),iX=n(G7e,"A",{href:!0});var Jut=s(iX);Kir=r(Jut,"TFCTRLLMHeadModel"),Jut.forEach(t),Zir=r(G7e," (CTRL model)"),G7e.forEach(t),edr=i(pe),ZF=n(pe,"LI",{});var O7e=s(ZF);wue=n(O7e,"STRONG",{});var Yut=s(wue);odr=r(Yut,"gpt2"),Yut.forEach(t),rdr=r(O7e," \u2014 "),dX=n(O7e,"A",{href:!0});var Kut=s(dX);tdr=r(Kut,"TFGPT2LMHeadModel"),Kut.forEach(t),adr=r(O7e," (OpenAI GPT-2 model)"),O7e.forEach(t),ndr=i(pe),eT=n(pe,"LI",{});var V7e=s(eT);Aue=n(V7e,"STRONG",{});var Zut=s(Aue);sdr=r(Zut,"gptj"),Zut.forEach(t),ldr=r(V7e," \u2014 "),cX=n(V7e,"A",{href:!0});var e6t=s(cX);idr=r(e6t,"TFGPTJForCausalLM"),e6t.forEach(t),ddr=r(V7e," (GPT-J model)"),V7e.forEach(t),cdr=i(pe),oT=n(pe,"LI",{});var X7e=s(oT);yue=n(X7e,"STRONG",{});var o6t=s(yue);fdr=r(o6t,"openai-gpt"),o6t.forEach(t),mdr=r(X7e," \u2014 "),fX=n(X7e,"A",{href:!0});var r6t=s(fX);gdr=r(r6t,"TFOpenAIGPTLMHeadModel"),r6t.forEach(t),hdr=r(X7e," (OpenAI GPT model)"),X7e.forEach(t),pdr=i(pe),rT=n(pe,"LI",{});var z7e=s(rT);Lue=n(z7e,"STRONG",{});var t6t=s(Lue);_dr=r(t6t,"rembert"),t6t.forEach(t),udr=r(z7e," \u2014 "),mX=n(z7e,"A",{href:!0});var a6t=s(mX);bdr=r(a6t,"TFRemBertForCausalLM"),a6t.forEach(t),vdr=r(z7e," (RemBERT model)"),z7e.forEach(t),Fdr=i(pe),tT=n(pe,"LI",{});var Q7e=s(tT);xue=n(Q7e,"STRONG",{});var n6t=s(xue);Tdr=r(n6t,"roberta"),n6t.forEach(t),Mdr=r(Q7e," \u2014 "),gX=n(Q7e,"A",{href:!0});var s6t=s(gX);Edr=r(s6t,"TFRobertaForCausalLM"),s6t.forEach(t),Cdr=r(Q7e," (RoBERTa model)"),Q7e.forEach(t),wdr=i(pe),aT=n(pe,"LI",{});var W7e=s(aT);kue=n(W7e,"STRONG",{});var l6t=s(kue);Adr=r(l6t,"roformer"),l6t.forEach(t),ydr=r(W7e," \u2014 "),hX=n(W7e,"A",{href:!0});var i6t=s(hX);Ldr=r(i6t,"TFRoFormerForCausalLM"),i6t.forEach(t),xdr=r(W7e," (RoFormer model)"),W7e.forEach(t),kdr=i(pe),nT=n(pe,"LI",{});var H7e=s(nT);Sue=n(H7e,"STRONG",{});var d6t=s(Sue);Sdr=r(d6t,"transfo-xl"),d6t.forEach(t),Rdr=r(H7e," \u2014 "),pX=n(H7e,"A",{href:!0});var c6t=s(pX);Bdr=r(c6t,"TFTransfoXLLMHeadModel"),c6t.forEach(t),Pdr=r(H7e," (Transformer-XL model)"),H7e.forEach(t),$dr=i(pe),sT=n(pe,"LI",{});var U7e=s(sT);Rue=n(U7e,"STRONG",{});var f6t=s(Rue);Idr=r(f6t,"xlm"),f6t.forEach(t),qdr=r(U7e," \u2014 "),_X=n(U7e,"A",{href:!0});var m6t=s(_X);Ndr=r(m6t,"TFXLMWithLMHeadModel"),m6t.forEach(t),jdr=r(U7e," (XLM model)"),U7e.forEach(t),Ddr=i(pe),lT=n(pe,"LI",{});var J7e=s(lT);Bue=n(J7e,"STRONG",{});var g6t=s(Bue);Gdr=r(g6t,"xlnet"),g6t.forEach(t),Odr=r(J7e," \u2014 "),uX=n(J7e,"A",{href:!0});var h6t=s(uX);Vdr=r(h6t,"TFXLNetLMHeadModel"),h6t.forEach(t),Xdr=r(J7e," (XLNet model)"),J7e.forEach(t),pe.forEach(t),zdr=i(ua),Pue=n(ua,"P",{});var p6t=s(Pue);Qdr=r(p6t,"Examples:"),p6t.forEach(t),Wdr=i(ua),m(B0.$$.fragment,ua),ua.forEach(t),Wl.forEach(t),fPe=i(c),wc=n(c,"H2",{class:!0});var TIe=s(wc);iT=n(TIe,"A",{id:!0,class:!0,href:!0});var _6t=s(iT);$ue=n(_6t,"SPAN",{});var u6t=s($ue);m(P0.$$.fragment,u6t),u6t.forEach(t),_6t.forEach(t),Hdr=i(TIe),Iue=n(TIe,"SPAN",{});var b6t=s(Iue);Udr=r(b6t,"TFAutoModelForImageClassification"),b6t.forEach(t),TIe.forEach(t),mPe=i(c),Mr=n(c,"DIV",{class:!0});var Ul=s(Mr);m($0.$$.fragment,Ul),Jdr=i(Ul),Ac=n(Ul,"P",{});var $J=s(Ac);Ydr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bX=n($J,"A",{href:!0});var v6t=s(bX);Kdr=r(v6t,"from_pretrained()"),v6t.forEach(t),Zdr=r($J," class method or the "),vX=n($J,"A",{href:!0});var F6t=s(vX);ecr=r(F6t,"from_config()"),F6t.forEach(t),ocr=r($J,` class
method.`),$J.forEach(t),rcr=i(Ul),I0=n(Ul,"P",{});var MIe=s(I0);tcr=r(MIe,"This class cannot be instantiated directly using "),que=n(MIe,"CODE",{});var T6t=s(que);acr=r(T6t,"__init__()"),T6t.forEach(t),ncr=r(MIe," (throws an error)."),MIe.forEach(t),scr=i(Ul),_t=n(Ul,"DIV",{class:!0});var Jl=s(_t);m(q0.$$.fragment,Jl),lcr=i(Jl),Nue=n(Jl,"P",{});var M6t=s(Nue);icr=r(M6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),M6t.forEach(t),dcr=i(Jl),yc=n(Jl,"P",{});var IJ=s(yc);ccr=r(IJ,`Note:
Loading a model from its configuration file does `),jue=n(IJ,"STRONG",{});var E6t=s(jue);fcr=r(E6t,"not"),E6t.forEach(t),mcr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(IJ,"A",{href:!0});var C6t=s(FX);gcr=r(C6t,"from_pretrained()"),C6t.forEach(t),hcr=r(IJ," to load the model weights."),IJ.forEach(t),pcr=i(Jl),Due=n(Jl,"P",{});var w6t=s(Due);_cr=r(w6t,"Examples:"),w6t.forEach(t),ucr=i(Jl),m(N0.$$.fragment,Jl),Jl.forEach(t),bcr=i(Ul),uo=n(Ul,"DIV",{class:!0});var ba=s(uo);m(j0.$$.fragment,ba),vcr=i(ba),Gue=n(ba,"P",{});var A6t=s(Gue);Fcr=r(A6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),A6t.forEach(t),Tcr=i(ba),Fn=n(ba,"P",{});var f3=s(Fn);Mcr=r(f3,"The model class to instantiate is selected based on the "),Oue=n(f3,"CODE",{});var y6t=s(Oue);Ecr=r(y6t,"model_type"),y6t.forEach(t),Ccr=r(f3,` property of the config object (either
passed as an argument or loaded from `),Vue=n(f3,"CODE",{});var L6t=s(Vue);wcr=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),Acr=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=n(f3,"CODE",{});var x6t=s(Xue);ycr=r(x6t,"pretrained_model_name_or_path"),x6t.forEach(t),Lcr=r(f3,":"),f3.forEach(t),xcr=i(ba),D0=n(ba,"UL",{});var EIe=s(D0);dT=n(EIe,"LI",{});var Y7e=s(dT);zue=n(Y7e,"STRONG",{});var k6t=s(zue);kcr=r(k6t,"convnext"),k6t.forEach(t),Scr=r(Y7e," \u2014 "),TX=n(Y7e,"A",{href:!0});var S6t=s(TX);Rcr=r(S6t,"TFConvNextForImageClassification"),S6t.forEach(t),Bcr=r(Y7e," (ConvNext model)"),Y7e.forEach(t),Pcr=i(EIe),cT=n(EIe,"LI",{});var K7e=s(cT);Que=n(K7e,"STRONG",{});var R6t=s(Que);$cr=r(R6t,"vit"),R6t.forEach(t),Icr=r(K7e," \u2014 "),MX=n(K7e,"A",{href:!0});var B6t=s(MX);qcr=r(B6t,"TFViTForImageClassification"),B6t.forEach(t),Ncr=r(K7e," (ViT model)"),K7e.forEach(t),EIe.forEach(t),jcr=i(ba),Wue=n(ba,"P",{});var P6t=s(Wue);Dcr=r(P6t,"Examples:"),P6t.forEach(t),Gcr=i(ba),m(G0.$$.fragment,ba),ba.forEach(t),Ul.forEach(t),gPe=i(c),Lc=n(c,"H2",{class:!0});var CIe=s(Lc);fT=n(CIe,"A",{id:!0,class:!0,href:!0});var $6t=s(fT);Hue=n($6t,"SPAN",{});var I6t=s(Hue);m(O0.$$.fragment,I6t),I6t.forEach(t),$6t.forEach(t),Ocr=i(CIe),Uue=n(CIe,"SPAN",{});var q6t=s(Uue);Vcr=r(q6t,"TFAutoModelForMaskedLM"),q6t.forEach(t),CIe.forEach(t),hPe=i(c),Er=n(c,"DIV",{class:!0});var Yl=s(Er);m(V0.$$.fragment,Yl),Xcr=i(Yl),xc=n(Yl,"P",{});var qJ=s(xc);zcr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EX=n(qJ,"A",{href:!0});var N6t=s(EX);Qcr=r(N6t,"from_pretrained()"),N6t.forEach(t),Wcr=r(qJ," class method or the "),CX=n(qJ,"A",{href:!0});var j6t=s(CX);Hcr=r(j6t,"from_config()"),j6t.forEach(t),Ucr=r(qJ,` class
method.`),qJ.forEach(t),Jcr=i(Yl),X0=n(Yl,"P",{});var wIe=s(X0);Ycr=r(wIe,"This class cannot be instantiated directly using "),Jue=n(wIe,"CODE",{});var D6t=s(Jue);Kcr=r(D6t,"__init__()"),D6t.forEach(t),Zcr=r(wIe," (throws an error)."),wIe.forEach(t),efr=i(Yl),ut=n(Yl,"DIV",{class:!0});var Kl=s(ut);m(z0.$$.fragment,Kl),ofr=i(Kl),Yue=n(Kl,"P",{});var G6t=s(Yue);rfr=r(G6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G6t.forEach(t),tfr=i(Kl),kc=n(Kl,"P",{});var NJ=s(kc);afr=r(NJ,`Note:
Loading a model from its configuration file does `),Kue=n(NJ,"STRONG",{});var O6t=s(Kue);nfr=r(O6t,"not"),O6t.forEach(t),sfr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=n(NJ,"A",{href:!0});var V6t=s(wX);lfr=r(V6t,"from_pretrained()"),V6t.forEach(t),ifr=r(NJ," to load the model weights."),NJ.forEach(t),dfr=i(Kl),Zue=n(Kl,"P",{});var X6t=s(Zue);cfr=r(X6t,"Examples:"),X6t.forEach(t),ffr=i(Kl),m(Q0.$$.fragment,Kl),Kl.forEach(t),mfr=i(Yl),bo=n(Yl,"DIV",{class:!0});var va=s(bo);m(W0.$$.fragment,va),gfr=i(va),e6e=n(va,"P",{});var z6t=s(e6e);hfr=r(z6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z6t.forEach(t),pfr=i(va),Tn=n(va,"P",{});var m3=s(Tn);_fr=r(m3,"The model class to instantiate is selected based on the "),o6e=n(m3,"CODE",{});var Q6t=s(o6e);ufr=r(Q6t,"model_type"),Q6t.forEach(t),bfr=r(m3,` property of the config object (either
passed as an argument or loaded from `),r6e=n(m3,"CODE",{});var W6t=s(r6e);vfr=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),Ffr=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t6e=n(m3,"CODE",{});var H6t=s(t6e);Tfr=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),Mfr=r(m3,":"),m3.forEach(t),Efr=i(va),J=n(va,"UL",{});var oe=s(J);mT=n(oe,"LI",{});var Z7e=s(mT);a6e=n(Z7e,"STRONG",{});var U6t=s(a6e);Cfr=r(U6t,"albert"),U6t.forEach(t),wfr=r(Z7e," \u2014 "),AX=n(Z7e,"A",{href:!0});var J6t=s(AX);Afr=r(J6t,"TFAlbertForMaskedLM"),J6t.forEach(t),yfr=r(Z7e," (ALBERT model)"),Z7e.forEach(t),Lfr=i(oe),gT=n(oe,"LI",{});var exe=s(gT);n6e=n(exe,"STRONG",{});var Y6t=s(n6e);xfr=r(Y6t,"bert"),Y6t.forEach(t),kfr=r(exe," \u2014 "),yX=n(exe,"A",{href:!0});var K6t=s(yX);Sfr=r(K6t,"TFBertForMaskedLM"),K6t.forEach(t),Rfr=r(exe," (BERT model)"),exe.forEach(t),Bfr=i(oe),hT=n(oe,"LI",{});var oxe=s(hT);s6e=n(oxe,"STRONG",{});var Z6t=s(s6e);Pfr=r(Z6t,"camembert"),Z6t.forEach(t),$fr=r(oxe," \u2014 "),LX=n(oxe,"A",{href:!0});var e1t=s(LX);Ifr=r(e1t,"TFCamembertForMaskedLM"),e1t.forEach(t),qfr=r(oxe," (CamemBERT model)"),oxe.forEach(t),Nfr=i(oe),pT=n(oe,"LI",{});var rxe=s(pT);l6e=n(rxe,"STRONG",{});var o1t=s(l6e);jfr=r(o1t,"convbert"),o1t.forEach(t),Dfr=r(rxe," \u2014 "),xX=n(rxe,"A",{href:!0});var r1t=s(xX);Gfr=r(r1t,"TFConvBertForMaskedLM"),r1t.forEach(t),Ofr=r(rxe," (ConvBERT model)"),rxe.forEach(t),Vfr=i(oe),_T=n(oe,"LI",{});var txe=s(_T);i6e=n(txe,"STRONG",{});var t1t=s(i6e);Xfr=r(t1t,"deberta"),t1t.forEach(t),zfr=r(txe," \u2014 "),kX=n(txe,"A",{href:!0});var a1t=s(kX);Qfr=r(a1t,"TFDebertaForMaskedLM"),a1t.forEach(t),Wfr=r(txe," (DeBERTa model)"),txe.forEach(t),Hfr=i(oe),uT=n(oe,"LI",{});var axe=s(uT);d6e=n(axe,"STRONG",{});var n1t=s(d6e);Ufr=r(n1t,"deberta-v2"),n1t.forEach(t),Jfr=r(axe," \u2014 "),SX=n(axe,"A",{href:!0});var s1t=s(SX);Yfr=r(s1t,"TFDebertaV2ForMaskedLM"),s1t.forEach(t),Kfr=r(axe," (DeBERTa-v2 model)"),axe.forEach(t),Zfr=i(oe),bT=n(oe,"LI",{});var nxe=s(bT);c6e=n(nxe,"STRONG",{});var l1t=s(c6e);emr=r(l1t,"distilbert"),l1t.forEach(t),omr=r(nxe," \u2014 "),RX=n(nxe,"A",{href:!0});var i1t=s(RX);rmr=r(i1t,"TFDistilBertForMaskedLM"),i1t.forEach(t),tmr=r(nxe," (DistilBERT model)"),nxe.forEach(t),amr=i(oe),vT=n(oe,"LI",{});var sxe=s(vT);f6e=n(sxe,"STRONG",{});var d1t=s(f6e);nmr=r(d1t,"electra"),d1t.forEach(t),smr=r(sxe," \u2014 "),BX=n(sxe,"A",{href:!0});var c1t=s(BX);lmr=r(c1t,"TFElectraForMaskedLM"),c1t.forEach(t),imr=r(sxe," (ELECTRA model)"),sxe.forEach(t),dmr=i(oe),FT=n(oe,"LI",{});var lxe=s(FT);m6e=n(lxe,"STRONG",{});var f1t=s(m6e);cmr=r(f1t,"flaubert"),f1t.forEach(t),fmr=r(lxe," \u2014 "),PX=n(lxe,"A",{href:!0});var m1t=s(PX);mmr=r(m1t,"TFFlaubertWithLMHeadModel"),m1t.forEach(t),gmr=r(lxe," (FlauBERT model)"),lxe.forEach(t),hmr=i(oe),TT=n(oe,"LI",{});var ixe=s(TT);g6e=n(ixe,"STRONG",{});var g1t=s(g6e);pmr=r(g1t,"funnel"),g1t.forEach(t),_mr=r(ixe," \u2014 "),$X=n(ixe,"A",{href:!0});var h1t=s($X);umr=r(h1t,"TFFunnelForMaskedLM"),h1t.forEach(t),bmr=r(ixe," (Funnel Transformer model)"),ixe.forEach(t),vmr=i(oe),MT=n(oe,"LI",{});var dxe=s(MT);h6e=n(dxe,"STRONG",{});var p1t=s(h6e);Fmr=r(p1t,"layoutlm"),p1t.forEach(t),Tmr=r(dxe," \u2014 "),IX=n(dxe,"A",{href:!0});var _1t=s(IX);Mmr=r(_1t,"TFLayoutLMForMaskedLM"),_1t.forEach(t),Emr=r(dxe," (LayoutLM model)"),dxe.forEach(t),Cmr=i(oe),ET=n(oe,"LI",{});var cxe=s(ET);p6e=n(cxe,"STRONG",{});var u1t=s(p6e);wmr=r(u1t,"longformer"),u1t.forEach(t),Amr=r(cxe," \u2014 "),qX=n(cxe,"A",{href:!0});var b1t=s(qX);ymr=r(b1t,"TFLongformerForMaskedLM"),b1t.forEach(t),Lmr=r(cxe," (Longformer model)"),cxe.forEach(t),xmr=i(oe),CT=n(oe,"LI",{});var fxe=s(CT);_6e=n(fxe,"STRONG",{});var v1t=s(_6e);kmr=r(v1t,"mobilebert"),v1t.forEach(t),Smr=r(fxe," \u2014 "),NX=n(fxe,"A",{href:!0});var F1t=s(NX);Rmr=r(F1t,"TFMobileBertForMaskedLM"),F1t.forEach(t),Bmr=r(fxe," (MobileBERT model)"),fxe.forEach(t),Pmr=i(oe),wT=n(oe,"LI",{});var mxe=s(wT);u6e=n(mxe,"STRONG",{});var T1t=s(u6e);$mr=r(T1t,"mpnet"),T1t.forEach(t),Imr=r(mxe," \u2014 "),jX=n(mxe,"A",{href:!0});var M1t=s(jX);qmr=r(M1t,"TFMPNetForMaskedLM"),M1t.forEach(t),Nmr=r(mxe," (MPNet model)"),mxe.forEach(t),jmr=i(oe),AT=n(oe,"LI",{});var gxe=s(AT);b6e=n(gxe,"STRONG",{});var E1t=s(b6e);Dmr=r(E1t,"rembert"),E1t.forEach(t),Gmr=r(gxe," \u2014 "),DX=n(gxe,"A",{href:!0});var C1t=s(DX);Omr=r(C1t,"TFRemBertForMaskedLM"),C1t.forEach(t),Vmr=r(gxe," (RemBERT model)"),gxe.forEach(t),Xmr=i(oe),yT=n(oe,"LI",{});var hxe=s(yT);v6e=n(hxe,"STRONG",{});var w1t=s(v6e);zmr=r(w1t,"roberta"),w1t.forEach(t),Qmr=r(hxe," \u2014 "),GX=n(hxe,"A",{href:!0});var A1t=s(GX);Wmr=r(A1t,"TFRobertaForMaskedLM"),A1t.forEach(t),Hmr=r(hxe," (RoBERTa model)"),hxe.forEach(t),Umr=i(oe),LT=n(oe,"LI",{});var pxe=s(LT);F6e=n(pxe,"STRONG",{});var y1t=s(F6e);Jmr=r(y1t,"roformer"),y1t.forEach(t),Ymr=r(pxe," \u2014 "),OX=n(pxe,"A",{href:!0});var L1t=s(OX);Kmr=r(L1t,"TFRoFormerForMaskedLM"),L1t.forEach(t),Zmr=r(pxe," (RoFormer model)"),pxe.forEach(t),egr=i(oe),xT=n(oe,"LI",{});var _xe=s(xT);T6e=n(_xe,"STRONG",{});var x1t=s(T6e);ogr=r(x1t,"tapas"),x1t.forEach(t),rgr=r(_xe," \u2014 "),VX=n(_xe,"A",{href:!0});var k1t=s(VX);tgr=r(k1t,"TFTapasForMaskedLM"),k1t.forEach(t),agr=r(_xe," (TAPAS model)"),_xe.forEach(t),ngr=i(oe),kT=n(oe,"LI",{});var uxe=s(kT);M6e=n(uxe,"STRONG",{});var S1t=s(M6e);sgr=r(S1t,"xlm"),S1t.forEach(t),lgr=r(uxe," \u2014 "),XX=n(uxe,"A",{href:!0});var R1t=s(XX);igr=r(R1t,"TFXLMWithLMHeadModel"),R1t.forEach(t),dgr=r(uxe," (XLM model)"),uxe.forEach(t),cgr=i(oe),ST=n(oe,"LI",{});var bxe=s(ST);E6e=n(bxe,"STRONG",{});var B1t=s(E6e);fgr=r(B1t,"xlm-roberta"),B1t.forEach(t),mgr=r(bxe," \u2014 "),zX=n(bxe,"A",{href:!0});var P1t=s(zX);ggr=r(P1t,"TFXLMRobertaForMaskedLM"),P1t.forEach(t),hgr=r(bxe," (XLM-RoBERTa model)"),bxe.forEach(t),oe.forEach(t),pgr=i(va),C6e=n(va,"P",{});var $1t=s(C6e);_gr=r($1t,"Examples:"),$1t.forEach(t),ugr=i(va),m(H0.$$.fragment,va),va.forEach(t),Yl.forEach(t),pPe=i(c),Sc=n(c,"H2",{class:!0});var AIe=s(Sc);RT=n(AIe,"A",{id:!0,class:!0,href:!0});var I1t=s(RT);w6e=n(I1t,"SPAN",{});var q1t=s(w6e);m(U0.$$.fragment,q1t),q1t.forEach(t),I1t.forEach(t),bgr=i(AIe),A6e=n(AIe,"SPAN",{});var N1t=s(A6e);vgr=r(N1t,"TFAutoModelForSeq2SeqLM"),N1t.forEach(t),AIe.forEach(t),_Pe=i(c),Cr=n(c,"DIV",{class:!0});var Zl=s(Cr);m(J0.$$.fragment,Zl),Fgr=i(Zl),Rc=n(Zl,"P",{});var jJ=s(Rc);Tgr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QX=n(jJ,"A",{href:!0});var j1t=s(QX);Mgr=r(j1t,"from_pretrained()"),j1t.forEach(t),Egr=r(jJ," class method or the "),WX=n(jJ,"A",{href:!0});var D1t=s(WX);Cgr=r(D1t,"from_config()"),D1t.forEach(t),wgr=r(jJ,` class
method.`),jJ.forEach(t),Agr=i(Zl),Y0=n(Zl,"P",{});var yIe=s(Y0);ygr=r(yIe,"This class cannot be instantiated directly using "),y6e=n(yIe,"CODE",{});var G1t=s(y6e);Lgr=r(G1t,"__init__()"),G1t.forEach(t),xgr=r(yIe," (throws an error)."),yIe.forEach(t),kgr=i(Zl),bt=n(Zl,"DIV",{class:!0});var ei=s(bt);m(K0.$$.fragment,ei),Sgr=i(ei),L6e=n(ei,"P",{});var O1t=s(L6e);Rgr=r(O1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),O1t.forEach(t),Bgr=i(ei),Bc=n(ei,"P",{});var DJ=s(Bc);Pgr=r(DJ,`Note:
Loading a model from its configuration file does `),x6e=n(DJ,"STRONG",{});var V1t=s(x6e);$gr=r(V1t,"not"),V1t.forEach(t),Igr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(DJ,"A",{href:!0});var X1t=s(HX);qgr=r(X1t,"from_pretrained()"),X1t.forEach(t),Ngr=r(DJ," to load the model weights."),DJ.forEach(t),jgr=i(ei),k6e=n(ei,"P",{});var z1t=s(k6e);Dgr=r(z1t,"Examples:"),z1t.forEach(t),Ggr=i(ei),m(Z0.$$.fragment,ei),ei.forEach(t),Ogr=i(Zl),vo=n(Zl,"DIV",{class:!0});var Fa=s(vo);m(ey.$$.fragment,Fa),Vgr=i(Fa),S6e=n(Fa,"P",{});var Q1t=s(S6e);Xgr=r(Q1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Q1t.forEach(t),zgr=i(Fa),Mn=n(Fa,"P",{});var g3=s(Mn);Qgr=r(g3,"The model class to instantiate is selected based on the "),R6e=n(g3,"CODE",{});var W1t=s(R6e);Wgr=r(W1t,"model_type"),W1t.forEach(t),Hgr=r(g3,` property of the config object (either
passed as an argument or loaded from `),B6e=n(g3,"CODE",{});var H1t=s(B6e);Ugr=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),Jgr=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(g3,"CODE",{});var U1t=s(P6e);Ygr=r(U1t,"pretrained_model_name_or_path"),U1t.forEach(t),Kgr=r(g3,":"),g3.forEach(t),Zgr=i(Fa),be=n(Fa,"UL",{});var we=s(be);BT=n(we,"LI",{});var vxe=s(BT);$6e=n(vxe,"STRONG",{});var J1t=s($6e);ehr=r(J1t,"bart"),J1t.forEach(t),ohr=r(vxe," \u2014 "),UX=n(vxe,"A",{href:!0});var Y1t=s(UX);rhr=r(Y1t,"TFBartForConditionalGeneration"),Y1t.forEach(t),thr=r(vxe," (BART model)"),vxe.forEach(t),ahr=i(we),PT=n(we,"LI",{});var Fxe=s(PT);I6e=n(Fxe,"STRONG",{});var K1t=s(I6e);nhr=r(K1t,"blenderbot"),K1t.forEach(t),shr=r(Fxe," \u2014 "),JX=n(Fxe,"A",{href:!0});var Z1t=s(JX);lhr=r(Z1t,"TFBlenderbotForConditionalGeneration"),Z1t.forEach(t),ihr=r(Fxe," (Blenderbot model)"),Fxe.forEach(t),dhr=i(we),$T=n(we,"LI",{});var Txe=s($T);q6e=n(Txe,"STRONG",{});var ebt=s(q6e);chr=r(ebt,"blenderbot-small"),ebt.forEach(t),fhr=r(Txe," \u2014 "),YX=n(Txe,"A",{href:!0});var obt=s(YX);mhr=r(obt,"TFBlenderbotSmallForConditionalGeneration"),obt.forEach(t),ghr=r(Txe," (BlenderbotSmall model)"),Txe.forEach(t),hhr=i(we),IT=n(we,"LI",{});var Mxe=s(IT);N6e=n(Mxe,"STRONG",{});var rbt=s(N6e);phr=r(rbt,"encoder-decoder"),rbt.forEach(t),_hr=r(Mxe," \u2014 "),KX=n(Mxe,"A",{href:!0});var tbt=s(KX);uhr=r(tbt,"TFEncoderDecoderModel"),tbt.forEach(t),bhr=r(Mxe," (Encoder decoder model)"),Mxe.forEach(t),vhr=i(we),qT=n(we,"LI",{});var Exe=s(qT);j6e=n(Exe,"STRONG",{});var abt=s(j6e);Fhr=r(abt,"led"),abt.forEach(t),Thr=r(Exe," \u2014 "),ZX=n(Exe,"A",{href:!0});var nbt=s(ZX);Mhr=r(nbt,"TFLEDForConditionalGeneration"),nbt.forEach(t),Ehr=r(Exe," (LED model)"),Exe.forEach(t),Chr=i(we),NT=n(we,"LI",{});var Cxe=s(NT);D6e=n(Cxe,"STRONG",{});var sbt=s(D6e);whr=r(sbt,"marian"),sbt.forEach(t),Ahr=r(Cxe," \u2014 "),ez=n(Cxe,"A",{href:!0});var lbt=s(ez);yhr=r(lbt,"TFMarianMTModel"),lbt.forEach(t),Lhr=r(Cxe," (Marian model)"),Cxe.forEach(t),xhr=i(we),jT=n(we,"LI",{});var wxe=s(jT);G6e=n(wxe,"STRONG",{});var ibt=s(G6e);khr=r(ibt,"mbart"),ibt.forEach(t),Shr=r(wxe," \u2014 "),oz=n(wxe,"A",{href:!0});var dbt=s(oz);Rhr=r(dbt,"TFMBartForConditionalGeneration"),dbt.forEach(t),Bhr=r(wxe," (mBART model)"),wxe.forEach(t),Phr=i(we),DT=n(we,"LI",{});var Axe=s(DT);O6e=n(Axe,"STRONG",{});var cbt=s(O6e);$hr=r(cbt,"mt5"),cbt.forEach(t),Ihr=r(Axe," \u2014 "),rz=n(Axe,"A",{href:!0});var fbt=s(rz);qhr=r(fbt,"TFMT5ForConditionalGeneration"),fbt.forEach(t),Nhr=r(Axe," (mT5 model)"),Axe.forEach(t),jhr=i(we),GT=n(we,"LI",{});var yxe=s(GT);V6e=n(yxe,"STRONG",{});var mbt=s(V6e);Dhr=r(mbt,"pegasus"),mbt.forEach(t),Ghr=r(yxe," \u2014 "),tz=n(yxe,"A",{href:!0});var gbt=s(tz);Ohr=r(gbt,"TFPegasusForConditionalGeneration"),gbt.forEach(t),Vhr=r(yxe," (Pegasus model)"),yxe.forEach(t),Xhr=i(we),OT=n(we,"LI",{});var Lxe=s(OT);X6e=n(Lxe,"STRONG",{});var hbt=s(X6e);zhr=r(hbt,"t5"),hbt.forEach(t),Qhr=r(Lxe," \u2014 "),az=n(Lxe,"A",{href:!0});var pbt=s(az);Whr=r(pbt,"TFT5ForConditionalGeneration"),pbt.forEach(t),Hhr=r(Lxe," (T5 model)"),Lxe.forEach(t),we.forEach(t),Uhr=i(Fa),z6e=n(Fa,"P",{});var _bt=s(z6e);Jhr=r(_bt,"Examples:"),_bt.forEach(t),Yhr=i(Fa),m(oy.$$.fragment,Fa),Fa.forEach(t),Zl.forEach(t),uPe=i(c),Pc=n(c,"H2",{class:!0});var LIe=s(Pc);VT=n(LIe,"A",{id:!0,class:!0,href:!0});var ubt=s(VT);Q6e=n(ubt,"SPAN",{});var bbt=s(Q6e);m(ry.$$.fragment,bbt),bbt.forEach(t),ubt.forEach(t),Khr=i(LIe),W6e=n(LIe,"SPAN",{});var vbt=s(W6e);Zhr=r(vbt,"TFAutoModelForSequenceClassification"),vbt.forEach(t),LIe.forEach(t),bPe=i(c),wr=n(c,"DIV",{class:!0});var oi=s(wr);m(ty.$$.fragment,oi),epr=i(oi),$c=n(oi,"P",{});var GJ=s($c);opr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nz=n(GJ,"A",{href:!0});var Fbt=s(nz);rpr=r(Fbt,"from_pretrained()"),Fbt.forEach(t),tpr=r(GJ," class method or the "),sz=n(GJ,"A",{href:!0});var Tbt=s(sz);apr=r(Tbt,"from_config()"),Tbt.forEach(t),npr=r(GJ,` class
method.`),GJ.forEach(t),spr=i(oi),ay=n(oi,"P",{});var xIe=s(ay);lpr=r(xIe,"This class cannot be instantiated directly using "),H6e=n(xIe,"CODE",{});var Mbt=s(H6e);ipr=r(Mbt,"__init__()"),Mbt.forEach(t),dpr=r(xIe," (throws an error)."),xIe.forEach(t),cpr=i(oi),vt=n(oi,"DIV",{class:!0});var ri=s(vt);m(ny.$$.fragment,ri),fpr=i(ri),U6e=n(ri,"P",{});var Ebt=s(U6e);mpr=r(Ebt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ebt.forEach(t),gpr=i(ri),Ic=n(ri,"P",{});var OJ=s(Ic);hpr=r(OJ,`Note:
Loading a model from its configuration file does `),J6e=n(OJ,"STRONG",{});var Cbt=s(J6e);ppr=r(Cbt,"not"),Cbt.forEach(t),_pr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=n(OJ,"A",{href:!0});var wbt=s(lz);upr=r(wbt,"from_pretrained()"),wbt.forEach(t),bpr=r(OJ," to load the model weights."),OJ.forEach(t),vpr=i(ri),Y6e=n(ri,"P",{});var Abt=s(Y6e);Fpr=r(Abt,"Examples:"),Abt.forEach(t),Tpr=i(ri),m(sy.$$.fragment,ri),ri.forEach(t),Mpr=i(oi),Fo=n(oi,"DIV",{class:!0});var Ta=s(Fo);m(ly.$$.fragment,Ta),Epr=i(Ta),K6e=n(Ta,"P",{});var ybt=s(K6e);Cpr=r(ybt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ybt.forEach(t),wpr=i(Ta),En=n(Ta,"P",{});var h3=s(En);Apr=r(h3,"The model class to instantiate is selected based on the "),Z6e=n(h3,"CODE",{});var Lbt=s(Z6e);ypr=r(Lbt,"model_type"),Lbt.forEach(t),Lpr=r(h3,` property of the config object (either
passed as an argument or loaded from `),e1e=n(h3,"CODE",{});var xbt=s(e1e);xpr=r(xbt,"pretrained_model_name_or_path"),xbt.forEach(t),kpr=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(h3,"CODE",{});var kbt=s(o1e);Spr=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),Rpr=r(h3,":"),h3.forEach(t),Bpr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);XT=n(Q,"LI",{});var xxe=s(XT);r1e=n(xxe,"STRONG",{});var Sbt=s(r1e);Ppr=r(Sbt,"albert"),Sbt.forEach(t),$pr=r(xxe," \u2014 "),iz=n(xxe,"A",{href:!0});var Rbt=s(iz);Ipr=r(Rbt,"TFAlbertForSequenceClassification"),Rbt.forEach(t),qpr=r(xxe," (ALBERT model)"),xxe.forEach(t),Npr=i(Q),zT=n(Q,"LI",{});var kxe=s(zT);t1e=n(kxe,"STRONG",{});var Bbt=s(t1e);jpr=r(Bbt,"bert"),Bbt.forEach(t),Dpr=r(kxe," \u2014 "),dz=n(kxe,"A",{href:!0});var Pbt=s(dz);Gpr=r(Pbt,"TFBertForSequenceClassification"),Pbt.forEach(t),Opr=r(kxe," (BERT model)"),kxe.forEach(t),Vpr=i(Q),QT=n(Q,"LI",{});var Sxe=s(QT);a1e=n(Sxe,"STRONG",{});var $bt=s(a1e);Xpr=r($bt,"camembert"),$bt.forEach(t),zpr=r(Sxe," \u2014 "),cz=n(Sxe,"A",{href:!0});var Ibt=s(cz);Qpr=r(Ibt,"TFCamembertForSequenceClassification"),Ibt.forEach(t),Wpr=r(Sxe," (CamemBERT model)"),Sxe.forEach(t),Hpr=i(Q),WT=n(Q,"LI",{});var Rxe=s(WT);n1e=n(Rxe,"STRONG",{});var qbt=s(n1e);Upr=r(qbt,"convbert"),qbt.forEach(t),Jpr=r(Rxe," \u2014 "),fz=n(Rxe,"A",{href:!0});var Nbt=s(fz);Ypr=r(Nbt,"TFConvBertForSequenceClassification"),Nbt.forEach(t),Kpr=r(Rxe," (ConvBERT model)"),Rxe.forEach(t),Zpr=i(Q),HT=n(Q,"LI",{});var Bxe=s(HT);s1e=n(Bxe,"STRONG",{});var jbt=s(s1e);e_r=r(jbt,"ctrl"),jbt.forEach(t),o_r=r(Bxe," \u2014 "),mz=n(Bxe,"A",{href:!0});var Dbt=s(mz);r_r=r(Dbt,"TFCTRLForSequenceClassification"),Dbt.forEach(t),t_r=r(Bxe," (CTRL model)"),Bxe.forEach(t),a_r=i(Q),UT=n(Q,"LI",{});var Pxe=s(UT);l1e=n(Pxe,"STRONG",{});var Gbt=s(l1e);n_r=r(Gbt,"deberta"),Gbt.forEach(t),s_r=r(Pxe," \u2014 "),gz=n(Pxe,"A",{href:!0});var Obt=s(gz);l_r=r(Obt,"TFDebertaForSequenceClassification"),Obt.forEach(t),i_r=r(Pxe," (DeBERTa model)"),Pxe.forEach(t),d_r=i(Q),JT=n(Q,"LI",{});var $xe=s(JT);i1e=n($xe,"STRONG",{});var Vbt=s(i1e);c_r=r(Vbt,"deberta-v2"),Vbt.forEach(t),f_r=r($xe," \u2014 "),hz=n($xe,"A",{href:!0});var Xbt=s(hz);m_r=r(Xbt,"TFDebertaV2ForSequenceClassification"),Xbt.forEach(t),g_r=r($xe," (DeBERTa-v2 model)"),$xe.forEach(t),h_r=i(Q),YT=n(Q,"LI",{});var Ixe=s(YT);d1e=n(Ixe,"STRONG",{});var zbt=s(d1e);p_r=r(zbt,"distilbert"),zbt.forEach(t),__r=r(Ixe," \u2014 "),pz=n(Ixe,"A",{href:!0});var Qbt=s(pz);u_r=r(Qbt,"TFDistilBertForSequenceClassification"),Qbt.forEach(t),b_r=r(Ixe," (DistilBERT model)"),Ixe.forEach(t),v_r=i(Q),KT=n(Q,"LI",{});var qxe=s(KT);c1e=n(qxe,"STRONG",{});var Wbt=s(c1e);F_r=r(Wbt,"electra"),Wbt.forEach(t),T_r=r(qxe," \u2014 "),_z=n(qxe,"A",{href:!0});var Hbt=s(_z);M_r=r(Hbt,"TFElectraForSequenceClassification"),Hbt.forEach(t),E_r=r(qxe," (ELECTRA model)"),qxe.forEach(t),C_r=i(Q),ZT=n(Q,"LI",{});var Nxe=s(ZT);f1e=n(Nxe,"STRONG",{});var Ubt=s(f1e);w_r=r(Ubt,"flaubert"),Ubt.forEach(t),A_r=r(Nxe," \u2014 "),uz=n(Nxe,"A",{href:!0});var Jbt=s(uz);y_r=r(Jbt,"TFFlaubertForSequenceClassification"),Jbt.forEach(t),L_r=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),x_r=i(Q),e9=n(Q,"LI",{});var jxe=s(e9);m1e=n(jxe,"STRONG",{});var Ybt=s(m1e);k_r=r(Ybt,"funnel"),Ybt.forEach(t),S_r=r(jxe," \u2014 "),bz=n(jxe,"A",{href:!0});var Kbt=s(bz);R_r=r(Kbt,"TFFunnelForSequenceClassification"),Kbt.forEach(t),B_r=r(jxe," (Funnel Transformer model)"),jxe.forEach(t),P_r=i(Q),o9=n(Q,"LI",{});var Dxe=s(o9);g1e=n(Dxe,"STRONG",{});var Zbt=s(g1e);$_r=r(Zbt,"gpt2"),Zbt.forEach(t),I_r=r(Dxe," \u2014 "),vz=n(Dxe,"A",{href:!0});var e2t=s(vz);q_r=r(e2t,"TFGPT2ForSequenceClassification"),e2t.forEach(t),N_r=r(Dxe," (OpenAI GPT-2 model)"),Dxe.forEach(t),j_r=i(Q),r9=n(Q,"LI",{});var Gxe=s(r9);h1e=n(Gxe,"STRONG",{});var o2t=s(h1e);D_r=r(o2t,"gptj"),o2t.forEach(t),G_r=r(Gxe," \u2014 "),Fz=n(Gxe,"A",{href:!0});var r2t=s(Fz);O_r=r(r2t,"TFGPTJForSequenceClassification"),r2t.forEach(t),V_r=r(Gxe," (GPT-J model)"),Gxe.forEach(t),X_r=i(Q),t9=n(Q,"LI",{});var Oxe=s(t9);p1e=n(Oxe,"STRONG",{});var t2t=s(p1e);z_r=r(t2t,"layoutlm"),t2t.forEach(t),Q_r=r(Oxe," \u2014 "),Tz=n(Oxe,"A",{href:!0});var a2t=s(Tz);W_r=r(a2t,"TFLayoutLMForSequenceClassification"),a2t.forEach(t),H_r=r(Oxe," (LayoutLM model)"),Oxe.forEach(t),U_r=i(Q),a9=n(Q,"LI",{});var Vxe=s(a9);_1e=n(Vxe,"STRONG",{});var n2t=s(_1e);J_r=r(n2t,"longformer"),n2t.forEach(t),Y_r=r(Vxe," \u2014 "),Mz=n(Vxe,"A",{href:!0});var s2t=s(Mz);K_r=r(s2t,"TFLongformerForSequenceClassification"),s2t.forEach(t),Z_r=r(Vxe," (Longformer model)"),Vxe.forEach(t),eur=i(Q),n9=n(Q,"LI",{});var Xxe=s(n9);u1e=n(Xxe,"STRONG",{});var l2t=s(u1e);our=r(l2t,"mobilebert"),l2t.forEach(t),rur=r(Xxe," \u2014 "),Ez=n(Xxe,"A",{href:!0});var i2t=s(Ez);tur=r(i2t,"TFMobileBertForSequenceClassification"),i2t.forEach(t),aur=r(Xxe," (MobileBERT model)"),Xxe.forEach(t),nur=i(Q),s9=n(Q,"LI",{});var zxe=s(s9);b1e=n(zxe,"STRONG",{});var d2t=s(b1e);sur=r(d2t,"mpnet"),d2t.forEach(t),lur=r(zxe," \u2014 "),Cz=n(zxe,"A",{href:!0});var c2t=s(Cz);iur=r(c2t,"TFMPNetForSequenceClassification"),c2t.forEach(t),dur=r(zxe," (MPNet model)"),zxe.forEach(t),cur=i(Q),l9=n(Q,"LI",{});var Qxe=s(l9);v1e=n(Qxe,"STRONG",{});var f2t=s(v1e);fur=r(f2t,"openai-gpt"),f2t.forEach(t),mur=r(Qxe," \u2014 "),wz=n(Qxe,"A",{href:!0});var m2t=s(wz);gur=r(m2t,"TFOpenAIGPTForSequenceClassification"),m2t.forEach(t),hur=r(Qxe," (OpenAI GPT model)"),Qxe.forEach(t),pur=i(Q),i9=n(Q,"LI",{});var Wxe=s(i9);F1e=n(Wxe,"STRONG",{});var g2t=s(F1e);_ur=r(g2t,"rembert"),g2t.forEach(t),uur=r(Wxe," \u2014 "),Az=n(Wxe,"A",{href:!0});var h2t=s(Az);bur=r(h2t,"TFRemBertForSequenceClassification"),h2t.forEach(t),vur=r(Wxe," (RemBERT model)"),Wxe.forEach(t),Fur=i(Q),d9=n(Q,"LI",{});var Hxe=s(d9);T1e=n(Hxe,"STRONG",{});var p2t=s(T1e);Tur=r(p2t,"roberta"),p2t.forEach(t),Mur=r(Hxe," \u2014 "),yz=n(Hxe,"A",{href:!0});var _2t=s(yz);Eur=r(_2t,"TFRobertaForSequenceClassification"),_2t.forEach(t),Cur=r(Hxe," (RoBERTa model)"),Hxe.forEach(t),wur=i(Q),c9=n(Q,"LI",{});var Uxe=s(c9);M1e=n(Uxe,"STRONG",{});var u2t=s(M1e);Aur=r(u2t,"roformer"),u2t.forEach(t),yur=r(Uxe," \u2014 "),Lz=n(Uxe,"A",{href:!0});var b2t=s(Lz);Lur=r(b2t,"TFRoFormerForSequenceClassification"),b2t.forEach(t),xur=r(Uxe," (RoFormer model)"),Uxe.forEach(t),kur=i(Q),f9=n(Q,"LI",{});var Jxe=s(f9);E1e=n(Jxe,"STRONG",{});var v2t=s(E1e);Sur=r(v2t,"tapas"),v2t.forEach(t),Rur=r(Jxe," \u2014 "),xz=n(Jxe,"A",{href:!0});var F2t=s(xz);Bur=r(F2t,"TFTapasForSequenceClassification"),F2t.forEach(t),Pur=r(Jxe," (TAPAS model)"),Jxe.forEach(t),$ur=i(Q),m9=n(Q,"LI",{});var Yxe=s(m9);C1e=n(Yxe,"STRONG",{});var T2t=s(C1e);Iur=r(T2t,"transfo-xl"),T2t.forEach(t),qur=r(Yxe," \u2014 "),kz=n(Yxe,"A",{href:!0});var M2t=s(kz);Nur=r(M2t,"TFTransfoXLForSequenceClassification"),M2t.forEach(t),jur=r(Yxe," (Transformer-XL model)"),Yxe.forEach(t),Dur=i(Q),g9=n(Q,"LI",{});var Kxe=s(g9);w1e=n(Kxe,"STRONG",{});var E2t=s(w1e);Gur=r(E2t,"xlm"),E2t.forEach(t),Our=r(Kxe," \u2014 "),Sz=n(Kxe,"A",{href:!0});var C2t=s(Sz);Vur=r(C2t,"TFXLMForSequenceClassification"),C2t.forEach(t),Xur=r(Kxe," (XLM model)"),Kxe.forEach(t),zur=i(Q),h9=n(Q,"LI",{});var Zxe=s(h9);A1e=n(Zxe,"STRONG",{});var w2t=s(A1e);Qur=r(w2t,"xlm-roberta"),w2t.forEach(t),Wur=r(Zxe," \u2014 "),Rz=n(Zxe,"A",{href:!0});var A2t=s(Rz);Hur=r(A2t,"TFXLMRobertaForSequenceClassification"),A2t.forEach(t),Uur=r(Zxe," (XLM-RoBERTa model)"),Zxe.forEach(t),Jur=i(Q),p9=n(Q,"LI",{});var eke=s(p9);y1e=n(eke,"STRONG",{});var y2t=s(y1e);Yur=r(y2t,"xlnet"),y2t.forEach(t),Kur=r(eke," \u2014 "),Bz=n(eke,"A",{href:!0});var L2t=s(Bz);Zur=r(L2t,"TFXLNetForSequenceClassification"),L2t.forEach(t),e6r=r(eke," (XLNet model)"),eke.forEach(t),Q.forEach(t),o6r=i(Ta),L1e=n(Ta,"P",{});var x2t=s(L1e);r6r=r(x2t,"Examples:"),x2t.forEach(t),t6r=i(Ta),m(iy.$$.fragment,Ta),Ta.forEach(t),oi.forEach(t),vPe=i(c),qc=n(c,"H2",{class:!0});var kIe=s(qc);_9=n(kIe,"A",{id:!0,class:!0,href:!0});var k2t=s(_9);x1e=n(k2t,"SPAN",{});var S2t=s(x1e);m(dy.$$.fragment,S2t),S2t.forEach(t),k2t.forEach(t),a6r=i(kIe),k1e=n(kIe,"SPAN",{});var R2t=s(k1e);n6r=r(R2t,"TFAutoModelForMultipleChoice"),R2t.forEach(t),kIe.forEach(t),FPe=i(c),Ar=n(c,"DIV",{class:!0});var ti=s(Ar);m(cy.$$.fragment,ti),s6r=i(ti),Nc=n(ti,"P",{});var VJ=s(Nc);l6r=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Pz=n(VJ,"A",{href:!0});var B2t=s(Pz);i6r=r(B2t,"from_pretrained()"),B2t.forEach(t),d6r=r(VJ," class method or the "),$z=n(VJ,"A",{href:!0});var P2t=s($z);c6r=r(P2t,"from_config()"),P2t.forEach(t),f6r=r(VJ,` class
method.`),VJ.forEach(t),m6r=i(ti),fy=n(ti,"P",{});var SIe=s(fy);g6r=r(SIe,"This class cannot be instantiated directly using "),S1e=n(SIe,"CODE",{});var $2t=s(S1e);h6r=r($2t,"__init__()"),$2t.forEach(t),p6r=r(SIe," (throws an error)."),SIe.forEach(t),_6r=i(ti),Ft=n(ti,"DIV",{class:!0});var ai=s(Ft);m(my.$$.fragment,ai),u6r=i(ai),R1e=n(ai,"P",{});var I2t=s(R1e);b6r=r(I2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I2t.forEach(t),v6r=i(ai),jc=n(ai,"P",{});var XJ=s(jc);F6r=r(XJ,`Note:
Loading a model from its configuration file does `),B1e=n(XJ,"STRONG",{});var q2t=s(B1e);T6r=r(q2t,"not"),q2t.forEach(t),M6r=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(XJ,"A",{href:!0});var N2t=s(Iz);E6r=r(N2t,"from_pretrained()"),N2t.forEach(t),C6r=r(XJ," to load the model weights."),XJ.forEach(t),w6r=i(ai),P1e=n(ai,"P",{});var j2t=s(P1e);A6r=r(j2t,"Examples:"),j2t.forEach(t),y6r=i(ai),m(gy.$$.fragment,ai),ai.forEach(t),L6r=i(ti),To=n(ti,"DIV",{class:!0});var Ma=s(To);m(hy.$$.fragment,Ma),x6r=i(Ma),$1e=n(Ma,"P",{});var D2t=s($1e);k6r=r(D2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),D2t.forEach(t),S6r=i(Ma),Cn=n(Ma,"P",{});var p3=s(Cn);R6r=r(p3,"The model class to instantiate is selected based on the "),I1e=n(p3,"CODE",{});var G2t=s(I1e);B6r=r(G2t,"model_type"),G2t.forEach(t),P6r=r(p3,` property of the config object (either
passed as an argument or loaded from `),q1e=n(p3,"CODE",{});var O2t=s(q1e);$6r=r(O2t,"pretrained_model_name_or_path"),O2t.forEach(t),I6r=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(p3,"CODE",{});var V2t=s(N1e);q6r=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),N6r=r(p3,":"),p3.forEach(t),j6r=i(Ma),se=n(Ma,"UL",{});var ie=s(se);u9=n(ie,"LI",{});var oke=s(u9);j1e=n(oke,"STRONG",{});var X2t=s(j1e);D6r=r(X2t,"albert"),X2t.forEach(t),G6r=r(oke," \u2014 "),qz=n(oke,"A",{href:!0});var z2t=s(qz);O6r=r(z2t,"TFAlbertForMultipleChoice"),z2t.forEach(t),V6r=r(oke," (ALBERT model)"),oke.forEach(t),X6r=i(ie),b9=n(ie,"LI",{});var rke=s(b9);D1e=n(rke,"STRONG",{});var Q2t=s(D1e);z6r=r(Q2t,"bert"),Q2t.forEach(t),Q6r=r(rke," \u2014 "),Nz=n(rke,"A",{href:!0});var W2t=s(Nz);W6r=r(W2t,"TFBertForMultipleChoice"),W2t.forEach(t),H6r=r(rke," (BERT model)"),rke.forEach(t),U6r=i(ie),v9=n(ie,"LI",{});var tke=s(v9);G1e=n(tke,"STRONG",{});var H2t=s(G1e);J6r=r(H2t,"camembert"),H2t.forEach(t),Y6r=r(tke," \u2014 "),jz=n(tke,"A",{href:!0});var U2t=s(jz);K6r=r(U2t,"TFCamembertForMultipleChoice"),U2t.forEach(t),Z6r=r(tke," (CamemBERT model)"),tke.forEach(t),e1r=i(ie),F9=n(ie,"LI",{});var ake=s(F9);O1e=n(ake,"STRONG",{});var J2t=s(O1e);o1r=r(J2t,"convbert"),J2t.forEach(t),r1r=r(ake," \u2014 "),Dz=n(ake,"A",{href:!0});var Y2t=s(Dz);t1r=r(Y2t,"TFConvBertForMultipleChoice"),Y2t.forEach(t),a1r=r(ake," (ConvBERT model)"),ake.forEach(t),n1r=i(ie),T9=n(ie,"LI",{});var nke=s(T9);V1e=n(nke,"STRONG",{});var K2t=s(V1e);s1r=r(K2t,"distilbert"),K2t.forEach(t),l1r=r(nke," \u2014 "),Gz=n(nke,"A",{href:!0});var Z2t=s(Gz);i1r=r(Z2t,"TFDistilBertForMultipleChoice"),Z2t.forEach(t),d1r=r(nke," (DistilBERT model)"),nke.forEach(t),c1r=i(ie),M9=n(ie,"LI",{});var ske=s(M9);X1e=n(ske,"STRONG",{});var e5t=s(X1e);f1r=r(e5t,"electra"),e5t.forEach(t),m1r=r(ske," \u2014 "),Oz=n(ske,"A",{href:!0});var o5t=s(Oz);g1r=r(o5t,"TFElectraForMultipleChoice"),o5t.forEach(t),h1r=r(ske," (ELECTRA model)"),ske.forEach(t),p1r=i(ie),E9=n(ie,"LI",{});var lke=s(E9);z1e=n(lke,"STRONG",{});var r5t=s(z1e);_1r=r(r5t,"flaubert"),r5t.forEach(t),u1r=r(lke," \u2014 "),Vz=n(lke,"A",{href:!0});var t5t=s(Vz);b1r=r(t5t,"TFFlaubertForMultipleChoice"),t5t.forEach(t),v1r=r(lke," (FlauBERT model)"),lke.forEach(t),F1r=i(ie),C9=n(ie,"LI",{});var ike=s(C9);Q1e=n(ike,"STRONG",{});var a5t=s(Q1e);T1r=r(a5t,"funnel"),a5t.forEach(t),M1r=r(ike," \u2014 "),Xz=n(ike,"A",{href:!0});var n5t=s(Xz);E1r=r(n5t,"TFFunnelForMultipleChoice"),n5t.forEach(t),C1r=r(ike," (Funnel Transformer model)"),ike.forEach(t),w1r=i(ie),w9=n(ie,"LI",{});var dke=s(w9);W1e=n(dke,"STRONG",{});var s5t=s(W1e);A1r=r(s5t,"longformer"),s5t.forEach(t),y1r=r(dke," \u2014 "),zz=n(dke,"A",{href:!0});var l5t=s(zz);L1r=r(l5t,"TFLongformerForMultipleChoice"),l5t.forEach(t),x1r=r(dke," (Longformer model)"),dke.forEach(t),k1r=i(ie),A9=n(ie,"LI",{});var cke=s(A9);H1e=n(cke,"STRONG",{});var i5t=s(H1e);S1r=r(i5t,"mobilebert"),i5t.forEach(t),R1r=r(cke," \u2014 "),Qz=n(cke,"A",{href:!0});var d5t=s(Qz);B1r=r(d5t,"TFMobileBertForMultipleChoice"),d5t.forEach(t),P1r=r(cke," (MobileBERT model)"),cke.forEach(t),$1r=i(ie),y9=n(ie,"LI",{});var fke=s(y9);U1e=n(fke,"STRONG",{});var c5t=s(U1e);I1r=r(c5t,"mpnet"),c5t.forEach(t),q1r=r(fke," \u2014 "),Wz=n(fke,"A",{href:!0});var f5t=s(Wz);N1r=r(f5t,"TFMPNetForMultipleChoice"),f5t.forEach(t),j1r=r(fke," (MPNet model)"),fke.forEach(t),D1r=i(ie),L9=n(ie,"LI",{});var mke=s(L9);J1e=n(mke,"STRONG",{});var m5t=s(J1e);G1r=r(m5t,"rembert"),m5t.forEach(t),O1r=r(mke," \u2014 "),Hz=n(mke,"A",{href:!0});var g5t=s(Hz);V1r=r(g5t,"TFRemBertForMultipleChoice"),g5t.forEach(t),X1r=r(mke," (RemBERT model)"),mke.forEach(t),z1r=i(ie),x9=n(ie,"LI",{});var gke=s(x9);Y1e=n(gke,"STRONG",{});var h5t=s(Y1e);Q1r=r(h5t,"roberta"),h5t.forEach(t),W1r=r(gke," \u2014 "),Uz=n(gke,"A",{href:!0});var p5t=s(Uz);H1r=r(p5t,"TFRobertaForMultipleChoice"),p5t.forEach(t),U1r=r(gke," (RoBERTa model)"),gke.forEach(t),J1r=i(ie),k9=n(ie,"LI",{});var hke=s(k9);K1e=n(hke,"STRONG",{});var _5t=s(K1e);Y1r=r(_5t,"roformer"),_5t.forEach(t),K1r=r(hke," \u2014 "),Jz=n(hke,"A",{href:!0});var u5t=s(Jz);Z1r=r(u5t,"TFRoFormerForMultipleChoice"),u5t.forEach(t),ebr=r(hke," (RoFormer model)"),hke.forEach(t),obr=i(ie),S9=n(ie,"LI",{});var pke=s(S9);Z1e=n(pke,"STRONG",{});var b5t=s(Z1e);rbr=r(b5t,"xlm"),b5t.forEach(t),tbr=r(pke," \u2014 "),Yz=n(pke,"A",{href:!0});var v5t=s(Yz);abr=r(v5t,"TFXLMForMultipleChoice"),v5t.forEach(t),nbr=r(pke," (XLM model)"),pke.forEach(t),sbr=i(ie),R9=n(ie,"LI",{});var _ke=s(R9);ebe=n(_ke,"STRONG",{});var F5t=s(ebe);lbr=r(F5t,"xlm-roberta"),F5t.forEach(t),ibr=r(_ke," \u2014 "),Kz=n(_ke,"A",{href:!0});var T5t=s(Kz);dbr=r(T5t,"TFXLMRobertaForMultipleChoice"),T5t.forEach(t),cbr=r(_ke," (XLM-RoBERTa model)"),_ke.forEach(t),fbr=i(ie),B9=n(ie,"LI",{});var uke=s(B9);obe=n(uke,"STRONG",{});var M5t=s(obe);mbr=r(M5t,"xlnet"),M5t.forEach(t),gbr=r(uke," \u2014 "),Zz=n(uke,"A",{href:!0});var E5t=s(Zz);hbr=r(E5t,"TFXLNetForMultipleChoice"),E5t.forEach(t),pbr=r(uke," (XLNet model)"),uke.forEach(t),ie.forEach(t),_br=i(Ma),rbe=n(Ma,"P",{});var C5t=s(rbe);ubr=r(C5t,"Examples:"),C5t.forEach(t),bbr=i(Ma),m(py.$$.fragment,Ma),Ma.forEach(t),ti.forEach(t),TPe=i(c),Dc=n(c,"H2",{class:!0});var RIe=s(Dc);P9=n(RIe,"A",{id:!0,class:!0,href:!0});var w5t=s(P9);tbe=n(w5t,"SPAN",{});var A5t=s(tbe);m(_y.$$.fragment,A5t),A5t.forEach(t),w5t.forEach(t),vbr=i(RIe),abe=n(RIe,"SPAN",{});var y5t=s(abe);Fbr=r(y5t,"TFAutoModelForTableQuestionAnswering"),y5t.forEach(t),RIe.forEach(t),MPe=i(c),yr=n(c,"DIV",{class:!0});var ni=s(yr);m(uy.$$.fragment,ni),Tbr=i(ni),Gc=n(ni,"P",{});var zJ=s(Gc);Mbr=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eQ=n(zJ,"A",{href:!0});var L5t=s(eQ);Ebr=r(L5t,"from_pretrained()"),L5t.forEach(t),Cbr=r(zJ," class method or the "),oQ=n(zJ,"A",{href:!0});var x5t=s(oQ);wbr=r(x5t,"from_config()"),x5t.forEach(t),Abr=r(zJ,` class
method.`),zJ.forEach(t),ybr=i(ni),by=n(ni,"P",{});var BIe=s(by);Lbr=r(BIe,"This class cannot be instantiated directly using "),nbe=n(BIe,"CODE",{});var k5t=s(nbe);xbr=r(k5t,"__init__()"),k5t.forEach(t),kbr=r(BIe," (throws an error)."),BIe.forEach(t),Sbr=i(ni),Tt=n(ni,"DIV",{class:!0});var si=s(Tt);m(vy.$$.fragment,si),Rbr=i(si),sbe=n(si,"P",{});var S5t=s(sbe);Bbr=r(S5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),S5t.forEach(t),Pbr=i(si),Oc=n(si,"P",{});var QJ=s(Oc);$br=r(QJ,`Note:
Loading a model from its configuration file does `),lbe=n(QJ,"STRONG",{});var R5t=s(lbe);Ibr=r(R5t,"not"),R5t.forEach(t),qbr=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=n(QJ,"A",{href:!0});var B5t=s(rQ);Nbr=r(B5t,"from_pretrained()"),B5t.forEach(t),jbr=r(QJ," to load the model weights."),QJ.forEach(t),Dbr=i(si),ibe=n(si,"P",{});var P5t=s(ibe);Gbr=r(P5t,"Examples:"),P5t.forEach(t),Obr=i(si),m(Fy.$$.fragment,si),si.forEach(t),Vbr=i(ni),Mo=n(ni,"DIV",{class:!0});var Ea=s(Mo);m(Ty.$$.fragment,Ea),Xbr=i(Ea),dbe=n(Ea,"P",{});var $5t=s(dbe);zbr=r($5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$5t.forEach(t),Qbr=i(Ea),wn=n(Ea,"P",{});var _3=s(wn);Wbr=r(_3,"The model class to instantiate is selected based on the "),cbe=n(_3,"CODE",{});var I5t=s(cbe);Hbr=r(I5t,"model_type"),I5t.forEach(t),Ubr=r(_3,` property of the config object (either
passed as an argument or loaded from `),fbe=n(_3,"CODE",{});var q5t=s(fbe);Jbr=r(q5t,"pretrained_model_name_or_path"),q5t.forEach(t),Ybr=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=n(_3,"CODE",{});var N5t=s(mbe);Kbr=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),Zbr=r(_3,":"),_3.forEach(t),e2r=i(Ea),gbe=n(Ea,"UL",{});var j5t=s(gbe);$9=n(j5t,"LI",{});var bke=s($9);hbe=n(bke,"STRONG",{});var D5t=s(hbe);o2r=r(D5t,"tapas"),D5t.forEach(t),r2r=r(bke," \u2014 "),tQ=n(bke,"A",{href:!0});var G5t=s(tQ);t2r=r(G5t,"TFTapasForQuestionAnswering"),G5t.forEach(t),a2r=r(bke," (TAPAS model)"),bke.forEach(t),j5t.forEach(t),n2r=i(Ea),pbe=n(Ea,"P",{});var O5t=s(pbe);s2r=r(O5t,"Examples:"),O5t.forEach(t),l2r=i(Ea),m(My.$$.fragment,Ea),Ea.forEach(t),ni.forEach(t),EPe=i(c),Vc=n(c,"H2",{class:!0});var PIe=s(Vc);I9=n(PIe,"A",{id:!0,class:!0,href:!0});var V5t=s(I9);_be=n(V5t,"SPAN",{});var X5t=s(_be);m(Ey.$$.fragment,X5t),X5t.forEach(t),V5t.forEach(t),i2r=i(PIe),ube=n(PIe,"SPAN",{});var z5t=s(ube);d2r=r(z5t,"TFAutoModelForTokenClassification"),z5t.forEach(t),PIe.forEach(t),CPe=i(c),Lr=n(c,"DIV",{class:!0});var li=s(Lr);m(Cy.$$.fragment,li),c2r=i(li),Xc=n(li,"P",{});var WJ=s(Xc);f2r=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aQ=n(WJ,"A",{href:!0});var Q5t=s(aQ);m2r=r(Q5t,"from_pretrained()"),Q5t.forEach(t),g2r=r(WJ," class method or the "),nQ=n(WJ,"A",{href:!0});var W5t=s(nQ);h2r=r(W5t,"from_config()"),W5t.forEach(t),p2r=r(WJ,` class
method.`),WJ.forEach(t),_2r=i(li),wy=n(li,"P",{});var $Ie=s(wy);u2r=r($Ie,"This class cannot be instantiated directly using "),bbe=n($Ie,"CODE",{});var H5t=s(bbe);b2r=r(H5t,"__init__()"),H5t.forEach(t),v2r=r($Ie," (throws an error)."),$Ie.forEach(t),F2r=i(li),Mt=n(li,"DIV",{class:!0});var ii=s(Mt);m(Ay.$$.fragment,ii),T2r=i(ii),vbe=n(ii,"P",{});var U5t=s(vbe);M2r=r(U5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),U5t.forEach(t),E2r=i(ii),zc=n(ii,"P",{});var HJ=s(zc);C2r=r(HJ,`Note:
Loading a model from its configuration file does `),Fbe=n(HJ,"STRONG",{});var J5t=s(Fbe);w2r=r(J5t,"not"),J5t.forEach(t),A2r=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(HJ,"A",{href:!0});var Y5t=s(sQ);y2r=r(Y5t,"from_pretrained()"),Y5t.forEach(t),L2r=r(HJ," to load the model weights."),HJ.forEach(t),x2r=i(ii),Tbe=n(ii,"P",{});var K5t=s(Tbe);k2r=r(K5t,"Examples:"),K5t.forEach(t),S2r=i(ii),m(yy.$$.fragment,ii),ii.forEach(t),R2r=i(li),Eo=n(li,"DIV",{class:!0});var Ca=s(Eo);m(Ly.$$.fragment,Ca),B2r=i(Ca),Mbe=n(Ca,"P",{});var Z5t=s(Mbe);P2r=r(Z5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Z5t.forEach(t),$2r=i(Ca),An=n(Ca,"P",{});var u3=s(An);I2r=r(u3,"The model class to instantiate is selected based on the "),Ebe=n(u3,"CODE",{});var evt=s(Ebe);q2r=r(evt,"model_type"),evt.forEach(t),N2r=r(u3,` property of the config object (either
passed as an argument or loaded from `),Cbe=n(u3,"CODE",{});var ovt=s(Cbe);j2r=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),D2r=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(u3,"CODE",{});var rvt=s(wbe);G2r=r(rvt,"pretrained_model_name_or_path"),rvt.forEach(t),O2r=r(u3,":"),u3.forEach(t),V2r=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);q9=n(re,"LI",{});var vke=s(q9);Abe=n(vke,"STRONG",{});var tvt=s(Abe);X2r=r(tvt,"albert"),tvt.forEach(t),z2r=r(vke," \u2014 "),lQ=n(vke,"A",{href:!0});var avt=s(lQ);Q2r=r(avt,"TFAlbertForTokenClassification"),avt.forEach(t),W2r=r(vke," (ALBERT model)"),vke.forEach(t),H2r=i(re),N9=n(re,"LI",{});var Fke=s(N9);ybe=n(Fke,"STRONG",{});var nvt=s(ybe);U2r=r(nvt,"bert"),nvt.forEach(t),J2r=r(Fke," \u2014 "),iQ=n(Fke,"A",{href:!0});var svt=s(iQ);Y2r=r(svt,"TFBertForTokenClassification"),svt.forEach(t),K2r=r(Fke," (BERT model)"),Fke.forEach(t),Z2r=i(re),j9=n(re,"LI",{});var Tke=s(j9);Lbe=n(Tke,"STRONG",{});var lvt=s(Lbe);e5r=r(lvt,"camembert"),lvt.forEach(t),o5r=r(Tke," \u2014 "),dQ=n(Tke,"A",{href:!0});var ivt=s(dQ);r5r=r(ivt,"TFCamembertForTokenClassification"),ivt.forEach(t),t5r=r(Tke," (CamemBERT model)"),Tke.forEach(t),a5r=i(re),D9=n(re,"LI",{});var Mke=s(D9);xbe=n(Mke,"STRONG",{});var dvt=s(xbe);n5r=r(dvt,"convbert"),dvt.forEach(t),s5r=r(Mke," \u2014 "),cQ=n(Mke,"A",{href:!0});var cvt=s(cQ);l5r=r(cvt,"TFConvBertForTokenClassification"),cvt.forEach(t),i5r=r(Mke," (ConvBERT model)"),Mke.forEach(t),d5r=i(re),G9=n(re,"LI",{});var Eke=s(G9);kbe=n(Eke,"STRONG",{});var fvt=s(kbe);c5r=r(fvt,"deberta"),fvt.forEach(t),f5r=r(Eke," \u2014 "),fQ=n(Eke,"A",{href:!0});var mvt=s(fQ);m5r=r(mvt,"TFDebertaForTokenClassification"),mvt.forEach(t),g5r=r(Eke," (DeBERTa model)"),Eke.forEach(t),h5r=i(re),O9=n(re,"LI",{});var Cke=s(O9);Sbe=n(Cke,"STRONG",{});var gvt=s(Sbe);p5r=r(gvt,"deberta-v2"),gvt.forEach(t),_5r=r(Cke," \u2014 "),mQ=n(Cke,"A",{href:!0});var hvt=s(mQ);u5r=r(hvt,"TFDebertaV2ForTokenClassification"),hvt.forEach(t),b5r=r(Cke," (DeBERTa-v2 model)"),Cke.forEach(t),v5r=i(re),V9=n(re,"LI",{});var wke=s(V9);Rbe=n(wke,"STRONG",{});var pvt=s(Rbe);F5r=r(pvt,"distilbert"),pvt.forEach(t),T5r=r(wke," \u2014 "),gQ=n(wke,"A",{href:!0});var _vt=s(gQ);M5r=r(_vt,"TFDistilBertForTokenClassification"),_vt.forEach(t),E5r=r(wke," (DistilBERT model)"),wke.forEach(t),C5r=i(re),X9=n(re,"LI",{});var Ake=s(X9);Bbe=n(Ake,"STRONG",{});var uvt=s(Bbe);w5r=r(uvt,"electra"),uvt.forEach(t),A5r=r(Ake," \u2014 "),hQ=n(Ake,"A",{href:!0});var bvt=s(hQ);y5r=r(bvt,"TFElectraForTokenClassification"),bvt.forEach(t),L5r=r(Ake," (ELECTRA model)"),Ake.forEach(t),x5r=i(re),z9=n(re,"LI",{});var yke=s(z9);Pbe=n(yke,"STRONG",{});var vvt=s(Pbe);k5r=r(vvt,"flaubert"),vvt.forEach(t),S5r=r(yke," \u2014 "),pQ=n(yke,"A",{href:!0});var Fvt=s(pQ);R5r=r(Fvt,"TFFlaubertForTokenClassification"),Fvt.forEach(t),B5r=r(yke," (FlauBERT model)"),yke.forEach(t),P5r=i(re),Q9=n(re,"LI",{});var Lke=s(Q9);$be=n(Lke,"STRONG",{});var Tvt=s($be);$5r=r(Tvt,"funnel"),Tvt.forEach(t),I5r=r(Lke," \u2014 "),_Q=n(Lke,"A",{href:!0});var Mvt=s(_Q);q5r=r(Mvt,"TFFunnelForTokenClassification"),Mvt.forEach(t),N5r=r(Lke," (Funnel Transformer model)"),Lke.forEach(t),j5r=i(re),W9=n(re,"LI",{});var xke=s(W9);Ibe=n(xke,"STRONG",{});var Evt=s(Ibe);D5r=r(Evt,"layoutlm"),Evt.forEach(t),G5r=r(xke," \u2014 "),uQ=n(xke,"A",{href:!0});var Cvt=s(uQ);O5r=r(Cvt,"TFLayoutLMForTokenClassification"),Cvt.forEach(t),V5r=r(xke," (LayoutLM model)"),xke.forEach(t),X5r=i(re),H9=n(re,"LI",{});var kke=s(H9);qbe=n(kke,"STRONG",{});var wvt=s(qbe);z5r=r(wvt,"longformer"),wvt.forEach(t),Q5r=r(kke," \u2014 "),bQ=n(kke,"A",{href:!0});var Avt=s(bQ);W5r=r(Avt,"TFLongformerForTokenClassification"),Avt.forEach(t),H5r=r(kke," (Longformer model)"),kke.forEach(t),U5r=i(re),U9=n(re,"LI",{});var Ske=s(U9);Nbe=n(Ske,"STRONG",{});var yvt=s(Nbe);J5r=r(yvt,"mobilebert"),yvt.forEach(t),Y5r=r(Ske," \u2014 "),vQ=n(Ske,"A",{href:!0});var Lvt=s(vQ);K5r=r(Lvt,"TFMobileBertForTokenClassification"),Lvt.forEach(t),Z5r=r(Ske," (MobileBERT model)"),Ske.forEach(t),evr=i(re),J9=n(re,"LI",{});var Rke=s(J9);jbe=n(Rke,"STRONG",{});var xvt=s(jbe);ovr=r(xvt,"mpnet"),xvt.forEach(t),rvr=r(Rke," \u2014 "),FQ=n(Rke,"A",{href:!0});var kvt=s(FQ);tvr=r(kvt,"TFMPNetForTokenClassification"),kvt.forEach(t),avr=r(Rke," (MPNet model)"),Rke.forEach(t),nvr=i(re),Y9=n(re,"LI",{});var Bke=s(Y9);Dbe=n(Bke,"STRONG",{});var Svt=s(Dbe);svr=r(Svt,"rembert"),Svt.forEach(t),lvr=r(Bke," \u2014 "),TQ=n(Bke,"A",{href:!0});var Rvt=s(TQ);ivr=r(Rvt,"TFRemBertForTokenClassification"),Rvt.forEach(t),dvr=r(Bke," (RemBERT model)"),Bke.forEach(t),cvr=i(re),K9=n(re,"LI",{});var Pke=s(K9);Gbe=n(Pke,"STRONG",{});var Bvt=s(Gbe);fvr=r(Bvt,"roberta"),Bvt.forEach(t),mvr=r(Pke," \u2014 "),MQ=n(Pke,"A",{href:!0});var Pvt=s(MQ);gvr=r(Pvt,"TFRobertaForTokenClassification"),Pvt.forEach(t),hvr=r(Pke," (RoBERTa model)"),Pke.forEach(t),pvr=i(re),Z9=n(re,"LI",{});var $ke=s(Z9);Obe=n($ke,"STRONG",{});var $vt=s(Obe);_vr=r($vt,"roformer"),$vt.forEach(t),uvr=r($ke," \u2014 "),EQ=n($ke,"A",{href:!0});var Ivt=s(EQ);bvr=r(Ivt,"TFRoFormerForTokenClassification"),Ivt.forEach(t),vvr=r($ke," (RoFormer model)"),$ke.forEach(t),Fvr=i(re),eM=n(re,"LI",{});var Ike=s(eM);Vbe=n(Ike,"STRONG",{});var qvt=s(Vbe);Tvr=r(qvt,"xlm"),qvt.forEach(t),Mvr=r(Ike," \u2014 "),CQ=n(Ike,"A",{href:!0});var Nvt=s(CQ);Evr=r(Nvt,"TFXLMForTokenClassification"),Nvt.forEach(t),Cvr=r(Ike," (XLM model)"),Ike.forEach(t),wvr=i(re),oM=n(re,"LI",{});var qke=s(oM);Xbe=n(qke,"STRONG",{});var jvt=s(Xbe);Avr=r(jvt,"xlm-roberta"),jvt.forEach(t),yvr=r(qke," \u2014 "),wQ=n(qke,"A",{href:!0});var Dvt=s(wQ);Lvr=r(Dvt,"TFXLMRobertaForTokenClassification"),Dvt.forEach(t),xvr=r(qke," (XLM-RoBERTa model)"),qke.forEach(t),kvr=i(re),rM=n(re,"LI",{});var Nke=s(rM);zbe=n(Nke,"STRONG",{});var Gvt=s(zbe);Svr=r(Gvt,"xlnet"),Gvt.forEach(t),Rvr=r(Nke," \u2014 "),AQ=n(Nke,"A",{href:!0});var Ovt=s(AQ);Bvr=r(Ovt,"TFXLNetForTokenClassification"),Ovt.forEach(t),Pvr=r(Nke," (XLNet model)"),Nke.forEach(t),re.forEach(t),$vr=i(Ca),Qbe=n(Ca,"P",{});var Vvt=s(Qbe);Ivr=r(Vvt,"Examples:"),Vvt.forEach(t),qvr=i(Ca),m(xy.$$.fragment,Ca),Ca.forEach(t),li.forEach(t),wPe=i(c),Qc=n(c,"H2",{class:!0});var IIe=s(Qc);tM=n(IIe,"A",{id:!0,class:!0,href:!0});var Xvt=s(tM);Wbe=n(Xvt,"SPAN",{});var zvt=s(Wbe);m(ky.$$.fragment,zvt),zvt.forEach(t),Xvt.forEach(t),Nvr=i(IIe),Hbe=n(IIe,"SPAN",{});var Qvt=s(Hbe);jvr=r(Qvt,"TFAutoModelForQuestionAnswering"),Qvt.forEach(t),IIe.forEach(t),APe=i(c),xr=n(c,"DIV",{class:!0});var di=s(xr);m(Sy.$$.fragment,di),Dvr=i(di),Wc=n(di,"P",{});var UJ=s(Wc);Gvr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yQ=n(UJ,"A",{href:!0});var Wvt=s(yQ);Ovr=r(Wvt,"from_pretrained()"),Wvt.forEach(t),Vvr=r(UJ," class method or the "),LQ=n(UJ,"A",{href:!0});var Hvt=s(LQ);Xvr=r(Hvt,"from_config()"),Hvt.forEach(t),zvr=r(UJ,` class
method.`),UJ.forEach(t),Qvr=i(di),Ry=n(di,"P",{});var qIe=s(Ry);Wvr=r(qIe,"This class cannot be instantiated directly using "),Ube=n(qIe,"CODE",{});var Uvt=s(Ube);Hvr=r(Uvt,"__init__()"),Uvt.forEach(t),Uvr=r(qIe," (throws an error)."),qIe.forEach(t),Jvr=i(di),Et=n(di,"DIV",{class:!0});var ci=s(Et);m(By.$$.fragment,ci),Yvr=i(ci),Jbe=n(ci,"P",{});var Jvt=s(Jbe);Kvr=r(Jvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jvt.forEach(t),Zvr=i(ci),Hc=n(ci,"P",{});var JJ=s(Hc);eFr=r(JJ,`Note:
Loading a model from its configuration file does `),Ybe=n(JJ,"STRONG",{});var Yvt=s(Ybe);oFr=r(Yvt,"not"),Yvt.forEach(t),rFr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(JJ,"A",{href:!0});var Kvt=s(xQ);tFr=r(Kvt,"from_pretrained()"),Kvt.forEach(t),aFr=r(JJ," to load the model weights."),JJ.forEach(t),nFr=i(ci),Kbe=n(ci,"P",{});var Zvt=s(Kbe);sFr=r(Zvt,"Examples:"),Zvt.forEach(t),lFr=i(ci),m(Py.$$.fragment,ci),ci.forEach(t),iFr=i(di),Co=n(di,"DIV",{class:!0});var wa=s(Co);m($y.$$.fragment,wa),dFr=i(wa),Zbe=n(wa,"P",{});var eFt=s(Zbe);cFr=r(eFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eFt.forEach(t),fFr=i(wa),yn=n(wa,"P",{});var b3=s(yn);mFr=r(b3,"The model class to instantiate is selected based on the "),e2e=n(b3,"CODE",{});var oFt=s(e2e);gFr=r(oFt,"model_type"),oFt.forEach(t),hFr=r(b3,` property of the config object (either
passed as an argument or loaded from `),o2e=n(b3,"CODE",{});var rFt=s(o2e);pFr=r(rFt,"pretrained_model_name_or_path"),rFt.forEach(t),_Fr=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(b3,"CODE",{});var tFt=s(r2e);uFr=r(tFt,"pretrained_model_name_or_path"),tFt.forEach(t),bFr=r(b3,":"),b3.forEach(t),vFr=i(wa),K=n(wa,"UL",{});var te=s(K);aM=n(te,"LI",{});var jke=s(aM);t2e=n(jke,"STRONG",{});var aFt=s(t2e);FFr=r(aFt,"albert"),aFt.forEach(t),TFr=r(jke," \u2014 "),kQ=n(jke,"A",{href:!0});var nFt=s(kQ);MFr=r(nFt,"TFAlbertForQuestionAnswering"),nFt.forEach(t),EFr=r(jke," (ALBERT model)"),jke.forEach(t),CFr=i(te),nM=n(te,"LI",{});var Dke=s(nM);a2e=n(Dke,"STRONG",{});var sFt=s(a2e);wFr=r(sFt,"bert"),sFt.forEach(t),AFr=r(Dke," \u2014 "),SQ=n(Dke,"A",{href:!0});var lFt=s(SQ);yFr=r(lFt,"TFBertForQuestionAnswering"),lFt.forEach(t),LFr=r(Dke," (BERT model)"),Dke.forEach(t),xFr=i(te),sM=n(te,"LI",{});var Gke=s(sM);n2e=n(Gke,"STRONG",{});var iFt=s(n2e);kFr=r(iFt,"camembert"),iFt.forEach(t),SFr=r(Gke," \u2014 "),RQ=n(Gke,"A",{href:!0});var dFt=s(RQ);RFr=r(dFt,"TFCamembertForQuestionAnswering"),dFt.forEach(t),BFr=r(Gke," (CamemBERT model)"),Gke.forEach(t),PFr=i(te),lM=n(te,"LI",{});var Oke=s(lM);s2e=n(Oke,"STRONG",{});var cFt=s(s2e);$Fr=r(cFt,"convbert"),cFt.forEach(t),IFr=r(Oke," \u2014 "),BQ=n(Oke,"A",{href:!0});var fFt=s(BQ);qFr=r(fFt,"TFConvBertForQuestionAnswering"),fFt.forEach(t),NFr=r(Oke," (ConvBERT model)"),Oke.forEach(t),jFr=i(te),iM=n(te,"LI",{});var Vke=s(iM);l2e=n(Vke,"STRONG",{});var mFt=s(l2e);DFr=r(mFt,"deberta"),mFt.forEach(t),GFr=r(Vke," \u2014 "),PQ=n(Vke,"A",{href:!0});var gFt=s(PQ);OFr=r(gFt,"TFDebertaForQuestionAnswering"),gFt.forEach(t),VFr=r(Vke," (DeBERTa model)"),Vke.forEach(t),XFr=i(te),dM=n(te,"LI",{});var Xke=s(dM);i2e=n(Xke,"STRONG",{});var hFt=s(i2e);zFr=r(hFt,"deberta-v2"),hFt.forEach(t),QFr=r(Xke," \u2014 "),$Q=n(Xke,"A",{href:!0});var pFt=s($Q);WFr=r(pFt,"TFDebertaV2ForQuestionAnswering"),pFt.forEach(t),HFr=r(Xke," (DeBERTa-v2 model)"),Xke.forEach(t),UFr=i(te),cM=n(te,"LI",{});var zke=s(cM);d2e=n(zke,"STRONG",{});var _Ft=s(d2e);JFr=r(_Ft,"distilbert"),_Ft.forEach(t),YFr=r(zke," \u2014 "),IQ=n(zke,"A",{href:!0});var uFt=s(IQ);KFr=r(uFt,"TFDistilBertForQuestionAnswering"),uFt.forEach(t),ZFr=r(zke," (DistilBERT model)"),zke.forEach(t),eTr=i(te),fM=n(te,"LI",{});var Qke=s(fM);c2e=n(Qke,"STRONG",{});var bFt=s(c2e);oTr=r(bFt,"electra"),bFt.forEach(t),rTr=r(Qke," \u2014 "),qQ=n(Qke,"A",{href:!0});var vFt=s(qQ);tTr=r(vFt,"TFElectraForQuestionAnswering"),vFt.forEach(t),aTr=r(Qke," (ELECTRA model)"),Qke.forEach(t),nTr=i(te),mM=n(te,"LI",{});var Wke=s(mM);f2e=n(Wke,"STRONG",{});var FFt=s(f2e);sTr=r(FFt,"flaubert"),FFt.forEach(t),lTr=r(Wke," \u2014 "),NQ=n(Wke,"A",{href:!0});var TFt=s(NQ);iTr=r(TFt,"TFFlaubertForQuestionAnsweringSimple"),TFt.forEach(t),dTr=r(Wke," (FlauBERT model)"),Wke.forEach(t),cTr=i(te),gM=n(te,"LI",{});var Hke=s(gM);m2e=n(Hke,"STRONG",{});var MFt=s(m2e);fTr=r(MFt,"funnel"),MFt.forEach(t),mTr=r(Hke," \u2014 "),jQ=n(Hke,"A",{href:!0});var EFt=s(jQ);gTr=r(EFt,"TFFunnelForQuestionAnswering"),EFt.forEach(t),hTr=r(Hke," (Funnel Transformer model)"),Hke.forEach(t),pTr=i(te),hM=n(te,"LI",{});var Uke=s(hM);g2e=n(Uke,"STRONG",{});var CFt=s(g2e);_Tr=r(CFt,"gptj"),CFt.forEach(t),uTr=r(Uke," \u2014 "),DQ=n(Uke,"A",{href:!0});var wFt=s(DQ);bTr=r(wFt,"TFGPTJForQuestionAnswering"),wFt.forEach(t),vTr=r(Uke," (GPT-J model)"),Uke.forEach(t),FTr=i(te),pM=n(te,"LI",{});var Jke=s(pM);h2e=n(Jke,"STRONG",{});var AFt=s(h2e);TTr=r(AFt,"longformer"),AFt.forEach(t),MTr=r(Jke," \u2014 "),GQ=n(Jke,"A",{href:!0});var yFt=s(GQ);ETr=r(yFt,"TFLongformerForQuestionAnswering"),yFt.forEach(t),CTr=r(Jke," (Longformer model)"),Jke.forEach(t),wTr=i(te),_M=n(te,"LI",{});var Yke=s(_M);p2e=n(Yke,"STRONG",{});var LFt=s(p2e);ATr=r(LFt,"mobilebert"),LFt.forEach(t),yTr=r(Yke," \u2014 "),OQ=n(Yke,"A",{href:!0});var xFt=s(OQ);LTr=r(xFt,"TFMobileBertForQuestionAnswering"),xFt.forEach(t),xTr=r(Yke," (MobileBERT model)"),Yke.forEach(t),kTr=i(te),uM=n(te,"LI",{});var Kke=s(uM);_2e=n(Kke,"STRONG",{});var kFt=s(_2e);STr=r(kFt,"mpnet"),kFt.forEach(t),RTr=r(Kke," \u2014 "),VQ=n(Kke,"A",{href:!0});var SFt=s(VQ);BTr=r(SFt,"TFMPNetForQuestionAnswering"),SFt.forEach(t),PTr=r(Kke," (MPNet model)"),Kke.forEach(t),$Tr=i(te),bM=n(te,"LI",{});var Zke=s(bM);u2e=n(Zke,"STRONG",{});var RFt=s(u2e);ITr=r(RFt,"rembert"),RFt.forEach(t),qTr=r(Zke," \u2014 "),XQ=n(Zke,"A",{href:!0});var BFt=s(XQ);NTr=r(BFt,"TFRemBertForQuestionAnswering"),BFt.forEach(t),jTr=r(Zke," (RemBERT model)"),Zke.forEach(t),DTr=i(te),vM=n(te,"LI",{});var eSe=s(vM);b2e=n(eSe,"STRONG",{});var PFt=s(b2e);GTr=r(PFt,"roberta"),PFt.forEach(t),OTr=r(eSe," \u2014 "),zQ=n(eSe,"A",{href:!0});var $Ft=s(zQ);VTr=r($Ft,"TFRobertaForQuestionAnswering"),$Ft.forEach(t),XTr=r(eSe," (RoBERTa model)"),eSe.forEach(t),zTr=i(te),FM=n(te,"LI",{});var oSe=s(FM);v2e=n(oSe,"STRONG",{});var IFt=s(v2e);QTr=r(IFt,"roformer"),IFt.forEach(t),WTr=r(oSe," \u2014 "),QQ=n(oSe,"A",{href:!0});var qFt=s(QQ);HTr=r(qFt,"TFRoFormerForQuestionAnswering"),qFt.forEach(t),UTr=r(oSe," (RoFormer model)"),oSe.forEach(t),JTr=i(te),TM=n(te,"LI",{});var rSe=s(TM);F2e=n(rSe,"STRONG",{});var NFt=s(F2e);YTr=r(NFt,"xlm"),NFt.forEach(t),KTr=r(rSe," \u2014 "),WQ=n(rSe,"A",{href:!0});var jFt=s(WQ);ZTr=r(jFt,"TFXLMForQuestionAnsweringSimple"),jFt.forEach(t),e9r=r(rSe," (XLM model)"),rSe.forEach(t),o9r=i(te),MM=n(te,"LI",{});var tSe=s(MM);T2e=n(tSe,"STRONG",{});var DFt=s(T2e);r9r=r(DFt,"xlm-roberta"),DFt.forEach(t),t9r=r(tSe," \u2014 "),HQ=n(tSe,"A",{href:!0});var GFt=s(HQ);a9r=r(GFt,"TFXLMRobertaForQuestionAnswering"),GFt.forEach(t),n9r=r(tSe," (XLM-RoBERTa model)"),tSe.forEach(t),s9r=i(te),EM=n(te,"LI",{});var aSe=s(EM);M2e=n(aSe,"STRONG",{});var OFt=s(M2e);l9r=r(OFt,"xlnet"),OFt.forEach(t),i9r=r(aSe," \u2014 "),UQ=n(aSe,"A",{href:!0});var VFt=s(UQ);d9r=r(VFt,"TFXLNetForQuestionAnsweringSimple"),VFt.forEach(t),c9r=r(aSe," (XLNet model)"),aSe.forEach(t),te.forEach(t),f9r=i(wa),E2e=n(wa,"P",{});var XFt=s(E2e);m9r=r(XFt,"Examples:"),XFt.forEach(t),g9r=i(wa),m(Iy.$$.fragment,wa),wa.forEach(t),di.forEach(t),yPe=i(c),Uc=n(c,"H2",{class:!0});var NIe=s(Uc);CM=n(NIe,"A",{id:!0,class:!0,href:!0});var zFt=s(CM);C2e=n(zFt,"SPAN",{});var QFt=s(C2e);m(qy.$$.fragment,QFt),QFt.forEach(t),zFt.forEach(t),h9r=i(NIe),w2e=n(NIe,"SPAN",{});var WFt=s(w2e);p9r=r(WFt,"TFAutoModelForVision2Seq"),WFt.forEach(t),NIe.forEach(t),LPe=i(c),kr=n(c,"DIV",{class:!0});var fi=s(kr);m(Ny.$$.fragment,fi),_9r=i(fi),Jc=n(fi,"P",{});var YJ=s(Jc);u9r=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JQ=n(YJ,"A",{href:!0});var HFt=s(JQ);b9r=r(HFt,"from_pretrained()"),HFt.forEach(t),v9r=r(YJ," class method or the "),YQ=n(YJ,"A",{href:!0});var UFt=s(YQ);F9r=r(UFt,"from_config()"),UFt.forEach(t),T9r=r(YJ,` class
method.`),YJ.forEach(t),M9r=i(fi),jy=n(fi,"P",{});var jIe=s(jy);E9r=r(jIe,"This class cannot be instantiated directly using "),A2e=n(jIe,"CODE",{});var JFt=s(A2e);C9r=r(JFt,"__init__()"),JFt.forEach(t),w9r=r(jIe," (throws an error)."),jIe.forEach(t),A9r=i(fi),Ct=n(fi,"DIV",{class:!0});var mi=s(Ct);m(Dy.$$.fragment,mi),y9r=i(mi),y2e=n(mi,"P",{});var YFt=s(y2e);L9r=r(YFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YFt.forEach(t),x9r=i(mi),Yc=n(mi,"P",{});var KJ=s(Yc);k9r=r(KJ,`Note:
Loading a model from its configuration file does `),L2e=n(KJ,"STRONG",{});var KFt=s(L2e);S9r=r(KFt,"not"),KFt.forEach(t),R9r=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(KJ,"A",{href:!0});var ZFt=s(KQ);B9r=r(ZFt,"from_pretrained()"),ZFt.forEach(t),P9r=r(KJ," to load the model weights."),KJ.forEach(t),$9r=i(mi),x2e=n(mi,"P",{});var eTt=s(x2e);I9r=r(eTt,"Examples:"),eTt.forEach(t),q9r=i(mi),m(Gy.$$.fragment,mi),mi.forEach(t),N9r=i(fi),wo=n(fi,"DIV",{class:!0});var Aa=s(wo);m(Oy.$$.fragment,Aa),j9r=i(Aa),k2e=n(Aa,"P",{});var oTt=s(k2e);D9r=r(oTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oTt.forEach(t),G9r=i(Aa),Ln=n(Aa,"P",{});var v3=s(Ln);O9r=r(v3,"The model class to instantiate is selected based on the "),S2e=n(v3,"CODE",{});var rTt=s(S2e);V9r=r(rTt,"model_type"),rTt.forEach(t),X9r=r(v3,` property of the config object (either
passed as an argument or loaded from `),R2e=n(v3,"CODE",{});var tTt=s(R2e);z9r=r(tTt,"pretrained_model_name_or_path"),tTt.forEach(t),Q9r=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(v3,"CODE",{});var aTt=s(B2e);W9r=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),H9r=r(v3,":"),v3.forEach(t),U9r=i(Aa),P2e=n(Aa,"UL",{});var nTt=s(P2e);wM=n(nTt,"LI",{});var nSe=s(wM);$2e=n(nSe,"STRONG",{});var sTt=s($2e);J9r=r(sTt,"vision-encoder-decoder"),sTt.forEach(t),Y9r=r(nSe," \u2014 "),ZQ=n(nSe,"A",{href:!0});var lTt=s(ZQ);K9r=r(lTt,"TFVisionEncoderDecoderModel"),lTt.forEach(t),Z9r=r(nSe," (Vision Encoder decoder model)"),nSe.forEach(t),nTt.forEach(t),eMr=i(Aa),I2e=n(Aa,"P",{});var iTt=s(I2e);oMr=r(iTt,"Examples:"),iTt.forEach(t),rMr=i(Aa),m(Vy.$$.fragment,Aa),Aa.forEach(t),fi.forEach(t),xPe=i(c),Kc=n(c,"H2",{class:!0});var DIe=s(Kc);AM=n(DIe,"A",{id:!0,class:!0,href:!0});var dTt=s(AM);q2e=n(dTt,"SPAN",{});var cTt=s(q2e);m(Xy.$$.fragment,cTt),cTt.forEach(t),dTt.forEach(t),tMr=i(DIe),N2e=n(DIe,"SPAN",{});var fTt=s(N2e);aMr=r(fTt,"TFAutoModelForSpeechSeq2Seq"),fTt.forEach(t),DIe.forEach(t),kPe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(zy.$$.fragment,gi),nMr=i(gi),Zc=n(gi,"P",{});var ZJ=s(Zc);sMr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eW=n(ZJ,"A",{href:!0});var mTt=s(eW);lMr=r(mTt,"from_pretrained()"),mTt.forEach(t),iMr=r(ZJ," class method or the "),oW=n(ZJ,"A",{href:!0});var gTt=s(oW);dMr=r(gTt,"from_config()"),gTt.forEach(t),cMr=r(ZJ,` class
method.`),ZJ.forEach(t),fMr=i(gi),Qy=n(gi,"P",{});var GIe=s(Qy);mMr=r(GIe,"This class cannot be instantiated directly using "),j2e=n(GIe,"CODE",{});var hTt=s(j2e);gMr=r(hTt,"__init__()"),hTt.forEach(t),hMr=r(GIe," (throws an error)."),GIe.forEach(t),pMr=i(gi),wt=n(gi,"DIV",{class:!0});var hi=s(wt);m(Wy.$$.fragment,hi),_Mr=i(hi),D2e=n(hi,"P",{});var pTt=s(D2e);uMr=r(pTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pTt.forEach(t),bMr=i(hi),ef=n(hi,"P",{});var eY=s(ef);vMr=r(eY,`Note:
Loading a model from its configuration file does `),G2e=n(eY,"STRONG",{});var _Tt=s(G2e);FMr=r(_Tt,"not"),_Tt.forEach(t),TMr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(eY,"A",{href:!0});var uTt=s(rW);MMr=r(uTt,"from_pretrained()"),uTt.forEach(t),EMr=r(eY," to load the model weights."),eY.forEach(t),CMr=i(hi),O2e=n(hi,"P",{});var bTt=s(O2e);wMr=r(bTt,"Examples:"),bTt.forEach(t),AMr=i(hi),m(Hy.$$.fragment,hi),hi.forEach(t),yMr=i(gi),Ao=n(gi,"DIV",{class:!0});var ya=s(Ao);m(Uy.$$.fragment,ya),LMr=i(ya),V2e=n(ya,"P",{});var vTt=s(V2e);xMr=r(vTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vTt.forEach(t),kMr=i(ya),xn=n(ya,"P",{});var F3=s(xn);SMr=r(F3,"The model class to instantiate is selected based on the "),X2e=n(F3,"CODE",{});var FTt=s(X2e);RMr=r(FTt,"model_type"),FTt.forEach(t),BMr=r(F3,` property of the config object (either
passed as an argument or loaded from `),z2e=n(F3,"CODE",{});var TTt=s(z2e);PMr=r(TTt,"pretrained_model_name_or_path"),TTt.forEach(t),$Mr=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(F3,"CODE",{});var MTt=s(Q2e);IMr=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),qMr=r(F3,":"),F3.forEach(t),NMr=i(ya),W2e=n(ya,"UL",{});var ETt=s(W2e);yM=n(ETt,"LI",{});var sSe=s(yM);H2e=n(sSe,"STRONG",{});var CTt=s(H2e);jMr=r(CTt,"speech_to_text"),CTt.forEach(t),DMr=r(sSe," \u2014 "),tW=n(sSe,"A",{href:!0});var wTt=s(tW);GMr=r(wTt,"TFSpeech2TextForConditionalGeneration"),wTt.forEach(t),OMr=r(sSe," (Speech2Text model)"),sSe.forEach(t),ETt.forEach(t),VMr=i(ya),U2e=n(ya,"P",{});var ATt=s(U2e);XMr=r(ATt,"Examples:"),ATt.forEach(t),zMr=i(ya),m(Jy.$$.fragment,ya),ya.forEach(t),gi.forEach(t),SPe=i(c),of=n(c,"H2",{class:!0});var OIe=s(of);LM=n(OIe,"A",{id:!0,class:!0,href:!0});var yTt=s(LM);J2e=n(yTt,"SPAN",{});var LTt=s(J2e);m(Yy.$$.fragment,LTt),LTt.forEach(t),yTt.forEach(t),QMr=i(OIe),Y2e=n(OIe,"SPAN",{});var xTt=s(Y2e);WMr=r(xTt,"FlaxAutoModel"),xTt.forEach(t),OIe.forEach(t),RPe=i(c),Rr=n(c,"DIV",{class:!0});var pi=s(Rr);m(Ky.$$.fragment,pi),HMr=i(pi),rf=n(pi,"P",{});var oY=s(rf);UMr=r(oY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aW=n(oY,"A",{href:!0});var kTt=s(aW);JMr=r(kTt,"from_pretrained()"),kTt.forEach(t),YMr=r(oY," class method or the "),nW=n(oY,"A",{href:!0});var STt=s(nW);KMr=r(STt,"from_config()"),STt.forEach(t),ZMr=r(oY,` class
method.`),oY.forEach(t),e4r=i(pi),Zy=n(pi,"P",{});var VIe=s(Zy);o4r=r(VIe,"This class cannot be instantiated directly using "),K2e=n(VIe,"CODE",{});var RTt=s(K2e);r4r=r(RTt,"__init__()"),RTt.forEach(t),t4r=r(VIe," (throws an error)."),VIe.forEach(t),a4r=i(pi),At=n(pi,"DIV",{class:!0});var _i=s(At);m(e8.$$.fragment,_i),n4r=i(_i),Z2e=n(_i,"P",{});var BTt=s(Z2e);s4r=r(BTt,"Instantiates one of the base model classes of the library from a configuration."),BTt.forEach(t),l4r=i(_i),tf=n(_i,"P",{});var rY=s(tf);i4r=r(rY,`Note:
Loading a model from its configuration file does `),e5e=n(rY,"STRONG",{});var PTt=s(e5e);d4r=r(PTt,"not"),PTt.forEach(t),c4r=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(rY,"A",{href:!0});var $Tt=s(sW);f4r=r($Tt,"from_pretrained()"),$Tt.forEach(t),m4r=r(rY," to load the model weights."),rY.forEach(t),g4r=i(_i),o5e=n(_i,"P",{});var ITt=s(o5e);h4r=r(ITt,"Examples:"),ITt.forEach(t),p4r=i(_i),m(o8.$$.fragment,_i),_i.forEach(t),_4r=i(pi),yo=n(pi,"DIV",{class:!0});var La=s(yo);m(r8.$$.fragment,La),u4r=i(La),r5e=n(La,"P",{});var qTt=s(r5e);b4r=r(qTt,"Instantiate one of the base model classes of the library from a pretrained model."),qTt.forEach(t),v4r=i(La),kn=n(La,"P",{});var T3=s(kn);F4r=r(T3,"The model class to instantiate is selected based on the "),t5e=n(T3,"CODE",{});var NTt=s(t5e);T4r=r(NTt,"model_type"),NTt.forEach(t),M4r=r(T3,` property of the config object (either
passed as an argument or loaded from `),a5e=n(T3,"CODE",{});var jTt=s(a5e);E4r=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),C4r=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n5e=n(T3,"CODE",{});var DTt=s(n5e);w4r=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),A4r=r(T3,":"),T3.forEach(t),y4r=i(La),z=n(La,"UL",{});var W=s(z);xM=n(W,"LI",{});var lSe=s(xM);s5e=n(lSe,"STRONG",{});var GTt=s(s5e);L4r=r(GTt,"albert"),GTt.forEach(t),x4r=r(lSe," \u2014 "),lW=n(lSe,"A",{href:!0});var OTt=s(lW);k4r=r(OTt,"FlaxAlbertModel"),OTt.forEach(t),S4r=r(lSe," (ALBERT model)"),lSe.forEach(t),R4r=i(W),kM=n(W,"LI",{});var iSe=s(kM);l5e=n(iSe,"STRONG",{});var VTt=s(l5e);B4r=r(VTt,"bart"),VTt.forEach(t),P4r=r(iSe," \u2014 "),iW=n(iSe,"A",{href:!0});var XTt=s(iW);$4r=r(XTt,"FlaxBartModel"),XTt.forEach(t),I4r=r(iSe," (BART model)"),iSe.forEach(t),q4r=i(W),SM=n(W,"LI",{});var dSe=s(SM);i5e=n(dSe,"STRONG",{});var zTt=s(i5e);N4r=r(zTt,"beit"),zTt.forEach(t),j4r=r(dSe," \u2014 "),dW=n(dSe,"A",{href:!0});var QTt=s(dW);D4r=r(QTt,"FlaxBeitModel"),QTt.forEach(t),G4r=r(dSe," (BEiT model)"),dSe.forEach(t),O4r=i(W),RM=n(W,"LI",{});var cSe=s(RM);d5e=n(cSe,"STRONG",{});var WTt=s(d5e);V4r=r(WTt,"bert"),WTt.forEach(t),X4r=r(cSe," \u2014 "),cW=n(cSe,"A",{href:!0});var HTt=s(cW);z4r=r(HTt,"FlaxBertModel"),HTt.forEach(t),Q4r=r(cSe," (BERT model)"),cSe.forEach(t),W4r=i(W),BM=n(W,"LI",{});var fSe=s(BM);c5e=n(fSe,"STRONG",{});var UTt=s(c5e);H4r=r(UTt,"big_bird"),UTt.forEach(t),U4r=r(fSe," \u2014 "),fW=n(fSe,"A",{href:!0});var JTt=s(fW);J4r=r(JTt,"FlaxBigBirdModel"),JTt.forEach(t),Y4r=r(fSe," (BigBird model)"),fSe.forEach(t),K4r=i(W),PM=n(W,"LI",{});var mSe=s(PM);f5e=n(mSe,"STRONG",{});var YTt=s(f5e);Z4r=r(YTt,"blenderbot"),YTt.forEach(t),eEr=r(mSe," \u2014 "),mW=n(mSe,"A",{href:!0});var KTt=s(mW);oEr=r(KTt,"FlaxBlenderbotModel"),KTt.forEach(t),rEr=r(mSe," (Blenderbot model)"),mSe.forEach(t),tEr=i(W),$M=n(W,"LI",{});var gSe=s($M);m5e=n(gSe,"STRONG",{});var ZTt=s(m5e);aEr=r(ZTt,"blenderbot-small"),ZTt.forEach(t),nEr=r(gSe," \u2014 "),gW=n(gSe,"A",{href:!0});var e9t=s(gW);sEr=r(e9t,"FlaxBlenderbotSmallModel"),e9t.forEach(t),lEr=r(gSe," (BlenderbotSmall model)"),gSe.forEach(t),iEr=i(W),IM=n(W,"LI",{});var hSe=s(IM);g5e=n(hSe,"STRONG",{});var o9t=s(g5e);dEr=r(o9t,"clip"),o9t.forEach(t),cEr=r(hSe," \u2014 "),hW=n(hSe,"A",{href:!0});var r9t=s(hW);fEr=r(r9t,"FlaxCLIPModel"),r9t.forEach(t),mEr=r(hSe," (CLIP model)"),hSe.forEach(t),gEr=i(W),qM=n(W,"LI",{});var pSe=s(qM);h5e=n(pSe,"STRONG",{});var t9t=s(h5e);hEr=r(t9t,"distilbert"),t9t.forEach(t),pEr=r(pSe," \u2014 "),pW=n(pSe,"A",{href:!0});var a9t=s(pW);_Er=r(a9t,"FlaxDistilBertModel"),a9t.forEach(t),uEr=r(pSe," (DistilBERT model)"),pSe.forEach(t),bEr=i(W),NM=n(W,"LI",{});var _Se=s(NM);p5e=n(_Se,"STRONG",{});var n9t=s(p5e);vEr=r(n9t,"electra"),n9t.forEach(t),FEr=r(_Se," \u2014 "),_W=n(_Se,"A",{href:!0});var s9t=s(_W);TEr=r(s9t,"FlaxElectraModel"),s9t.forEach(t),MEr=r(_Se," (ELECTRA model)"),_Se.forEach(t),EEr=i(W),jM=n(W,"LI",{});var uSe=s(jM);_5e=n(uSe,"STRONG",{});var l9t=s(_5e);CEr=r(l9t,"gpt2"),l9t.forEach(t),wEr=r(uSe," \u2014 "),uW=n(uSe,"A",{href:!0});var i9t=s(uW);AEr=r(i9t,"FlaxGPT2Model"),i9t.forEach(t),yEr=r(uSe," (OpenAI GPT-2 model)"),uSe.forEach(t),LEr=i(W),DM=n(W,"LI",{});var bSe=s(DM);u5e=n(bSe,"STRONG",{});var d9t=s(u5e);xEr=r(d9t,"gpt_neo"),d9t.forEach(t),kEr=r(bSe," \u2014 "),bW=n(bSe,"A",{href:!0});var c9t=s(bW);SEr=r(c9t,"FlaxGPTNeoModel"),c9t.forEach(t),REr=r(bSe," (GPT Neo model)"),bSe.forEach(t),BEr=i(W),GM=n(W,"LI",{});var vSe=s(GM);b5e=n(vSe,"STRONG",{});var f9t=s(b5e);PEr=r(f9t,"gptj"),f9t.forEach(t),$Er=r(vSe," \u2014 "),vW=n(vSe,"A",{href:!0});var m9t=s(vW);IEr=r(m9t,"FlaxGPTJModel"),m9t.forEach(t),qEr=r(vSe," (GPT-J model)"),vSe.forEach(t),NEr=i(W),OM=n(W,"LI",{});var FSe=s(OM);v5e=n(FSe,"STRONG",{});var g9t=s(v5e);jEr=r(g9t,"marian"),g9t.forEach(t),DEr=r(FSe," \u2014 "),FW=n(FSe,"A",{href:!0});var h9t=s(FW);GEr=r(h9t,"FlaxMarianModel"),h9t.forEach(t),OEr=r(FSe," (Marian model)"),FSe.forEach(t),VEr=i(W),VM=n(W,"LI",{});var TSe=s(VM);F5e=n(TSe,"STRONG",{});var p9t=s(F5e);XEr=r(p9t,"mbart"),p9t.forEach(t),zEr=r(TSe," \u2014 "),TW=n(TSe,"A",{href:!0});var _9t=s(TW);QEr=r(_9t,"FlaxMBartModel"),_9t.forEach(t),WEr=r(TSe," (mBART model)"),TSe.forEach(t),HEr=i(W),XM=n(W,"LI",{});var MSe=s(XM);T5e=n(MSe,"STRONG",{});var u9t=s(T5e);UEr=r(u9t,"mt5"),u9t.forEach(t),JEr=r(MSe," \u2014 "),MW=n(MSe,"A",{href:!0});var b9t=s(MW);YEr=r(b9t,"FlaxMT5Model"),b9t.forEach(t),KEr=r(MSe," (mT5 model)"),MSe.forEach(t),ZEr=i(W),zM=n(W,"LI",{});var ESe=s(zM);M5e=n(ESe,"STRONG",{});var v9t=s(M5e);e3r=r(v9t,"pegasus"),v9t.forEach(t),o3r=r(ESe," \u2014 "),EW=n(ESe,"A",{href:!0});var F9t=s(EW);r3r=r(F9t,"FlaxPegasusModel"),F9t.forEach(t),t3r=r(ESe," (Pegasus model)"),ESe.forEach(t),a3r=i(W),QM=n(W,"LI",{});var CSe=s(QM);E5e=n(CSe,"STRONG",{});var T9t=s(E5e);n3r=r(T9t,"roberta"),T9t.forEach(t),s3r=r(CSe," \u2014 "),CW=n(CSe,"A",{href:!0});var M9t=s(CW);l3r=r(M9t,"FlaxRobertaModel"),M9t.forEach(t),i3r=r(CSe," (RoBERTa model)"),CSe.forEach(t),d3r=i(W),WM=n(W,"LI",{});var wSe=s(WM);C5e=n(wSe,"STRONG",{});var E9t=s(C5e);c3r=r(E9t,"roformer"),E9t.forEach(t),f3r=r(wSe," \u2014 "),wW=n(wSe,"A",{href:!0});var C9t=s(wW);m3r=r(C9t,"FlaxRoFormerModel"),C9t.forEach(t),g3r=r(wSe," (RoFormer model)"),wSe.forEach(t),h3r=i(W),HM=n(W,"LI",{});var ASe=s(HM);w5e=n(ASe,"STRONG",{});var w9t=s(w5e);p3r=r(w9t,"t5"),w9t.forEach(t),_3r=r(ASe," \u2014 "),AW=n(ASe,"A",{href:!0});var A9t=s(AW);u3r=r(A9t,"FlaxT5Model"),A9t.forEach(t),b3r=r(ASe," (T5 model)"),ASe.forEach(t),v3r=i(W),UM=n(W,"LI",{});var ySe=s(UM);A5e=n(ySe,"STRONG",{});var y9t=s(A5e);F3r=r(y9t,"vision-text-dual-encoder"),y9t.forEach(t),T3r=r(ySe," \u2014 "),yW=n(ySe,"A",{href:!0});var L9t=s(yW);M3r=r(L9t,"FlaxVisionTextDualEncoderModel"),L9t.forEach(t),E3r=r(ySe," (VisionTextDualEncoder model)"),ySe.forEach(t),C3r=i(W),JM=n(W,"LI",{});var LSe=s(JM);y5e=n(LSe,"STRONG",{});var x9t=s(y5e);w3r=r(x9t,"vit"),x9t.forEach(t),A3r=r(LSe," \u2014 "),LW=n(LSe,"A",{href:!0});var k9t=s(LW);y3r=r(k9t,"FlaxViTModel"),k9t.forEach(t),L3r=r(LSe," (ViT model)"),LSe.forEach(t),x3r=i(W),YM=n(W,"LI",{});var xSe=s(YM);L5e=n(xSe,"STRONG",{});var S9t=s(L5e);k3r=r(S9t,"wav2vec2"),S9t.forEach(t),S3r=r(xSe," \u2014 "),xW=n(xSe,"A",{href:!0});var R9t=s(xW);R3r=r(R9t,"FlaxWav2Vec2Model"),R9t.forEach(t),B3r=r(xSe," (Wav2Vec2 model)"),xSe.forEach(t),P3r=i(W),KM=n(W,"LI",{});var kSe=s(KM);x5e=n(kSe,"STRONG",{});var B9t=s(x5e);$3r=r(B9t,"xglm"),B9t.forEach(t),I3r=r(kSe," \u2014 "),kW=n(kSe,"A",{href:!0});var P9t=s(kW);q3r=r(P9t,"FlaxXGLMModel"),P9t.forEach(t),N3r=r(kSe," (XGLM model)"),kSe.forEach(t),j3r=i(W),ZM=n(W,"LI",{});var SSe=s(ZM);k5e=n(SSe,"STRONG",{});var $9t=s(k5e);D3r=r($9t,"xlm-roberta"),$9t.forEach(t),G3r=r(SSe," \u2014 "),SW=n(SSe,"A",{href:!0});var I9t=s(SW);O3r=r(I9t,"FlaxXLMRobertaModel"),I9t.forEach(t),V3r=r(SSe," (XLM-RoBERTa model)"),SSe.forEach(t),W.forEach(t),X3r=i(La),S5e=n(La,"P",{});var q9t=s(S5e);z3r=r(q9t,"Examples:"),q9t.forEach(t),Q3r=i(La),m(t8.$$.fragment,La),La.forEach(t),pi.forEach(t),BPe=i(c),af=n(c,"H2",{class:!0});var XIe=s(af);e4=n(XIe,"A",{id:!0,class:!0,href:!0});var N9t=s(e4);R5e=n(N9t,"SPAN",{});var j9t=s(R5e);m(a8.$$.fragment,j9t),j9t.forEach(t),N9t.forEach(t),W3r=i(XIe),B5e=n(XIe,"SPAN",{});var D9t=s(B5e);H3r=r(D9t,"FlaxAutoModelForCausalLM"),D9t.forEach(t),XIe.forEach(t),PPe=i(c),Br=n(c,"DIV",{class:!0});var ui=s(Br);m(n8.$$.fragment,ui),U3r=i(ui),nf=n(ui,"P",{});var tY=s(nf);J3r=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RW=n(tY,"A",{href:!0});var G9t=s(RW);Y3r=r(G9t,"from_pretrained()"),G9t.forEach(t),K3r=r(tY," class method or the "),BW=n(tY,"A",{href:!0});var O9t=s(BW);Z3r=r(O9t,"from_config()"),O9t.forEach(t),eCr=r(tY,` class
method.`),tY.forEach(t),oCr=i(ui),s8=n(ui,"P",{});var zIe=s(s8);rCr=r(zIe,"This class cannot be instantiated directly using "),P5e=n(zIe,"CODE",{});var V9t=s(P5e);tCr=r(V9t,"__init__()"),V9t.forEach(t),aCr=r(zIe," (throws an error)."),zIe.forEach(t),nCr=i(ui),yt=n(ui,"DIV",{class:!0});var bi=s(yt);m(l8.$$.fragment,bi),sCr=i(bi),$5e=n(bi,"P",{});var X9t=s($5e);lCr=r(X9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),X9t.forEach(t),iCr=i(bi),sf=n(bi,"P",{});var aY=s(sf);dCr=r(aY,`Note:
Loading a model from its configuration file does `),I5e=n(aY,"STRONG",{});var z9t=s(I5e);cCr=r(z9t,"not"),z9t.forEach(t),fCr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(aY,"A",{href:!0});var Q9t=s(PW);mCr=r(Q9t,"from_pretrained()"),Q9t.forEach(t),gCr=r(aY," to load the model weights."),aY.forEach(t),hCr=i(bi),q5e=n(bi,"P",{});var W9t=s(q5e);pCr=r(W9t,"Examples:"),W9t.forEach(t),_Cr=i(bi),m(i8.$$.fragment,bi),bi.forEach(t),uCr=i(ui),Lo=n(ui,"DIV",{class:!0});var xa=s(Lo);m(d8.$$.fragment,xa),bCr=i(xa),N5e=n(xa,"P",{});var H9t=s(N5e);vCr=r(H9t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),H9t.forEach(t),FCr=i(xa),Sn=n(xa,"P",{});var M3=s(Sn);TCr=r(M3,"The model class to instantiate is selected based on the "),j5e=n(M3,"CODE",{});var U9t=s(j5e);MCr=r(U9t,"model_type"),U9t.forEach(t),ECr=r(M3,` property of the config object (either
passed as an argument or loaded from `),D5e=n(M3,"CODE",{});var J9t=s(D5e);CCr=r(J9t,"pretrained_model_name_or_path"),J9t.forEach(t),wCr=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=n(M3,"CODE",{});var Y9t=s(G5e);ACr=r(Y9t,"pretrained_model_name_or_path"),Y9t.forEach(t),yCr=r(M3,":"),M3.forEach(t),LCr=i(xa),ca=n(xa,"UL",{});var vi=s(ca);o4=n(vi,"LI",{});var RSe=s(o4);O5e=n(RSe,"STRONG",{});var K9t=s(O5e);xCr=r(K9t,"bart"),K9t.forEach(t),kCr=r(RSe," \u2014 "),$W=n(RSe,"A",{href:!0});var Z9t=s($W);SCr=r(Z9t,"FlaxBartForCausalLM"),Z9t.forEach(t),RCr=r(RSe," (BART model)"),RSe.forEach(t),BCr=i(vi),r4=n(vi,"LI",{});var BSe=s(r4);V5e=n(BSe,"STRONG",{});var eMt=s(V5e);PCr=r(eMt,"gpt2"),eMt.forEach(t),$Cr=r(BSe," \u2014 "),IW=n(BSe,"A",{href:!0});var oMt=s(IW);ICr=r(oMt,"FlaxGPT2LMHeadModel"),oMt.forEach(t),qCr=r(BSe," (OpenAI GPT-2 model)"),BSe.forEach(t),NCr=i(vi),t4=n(vi,"LI",{});var PSe=s(t4);X5e=n(PSe,"STRONG",{});var rMt=s(X5e);jCr=r(rMt,"gpt_neo"),rMt.forEach(t),DCr=r(PSe," \u2014 "),qW=n(PSe,"A",{href:!0});var tMt=s(qW);GCr=r(tMt,"FlaxGPTNeoForCausalLM"),tMt.forEach(t),OCr=r(PSe," (GPT Neo model)"),PSe.forEach(t),VCr=i(vi),a4=n(vi,"LI",{});var $Se=s(a4);z5e=n($Se,"STRONG",{});var aMt=s(z5e);XCr=r(aMt,"gptj"),aMt.forEach(t),zCr=r($Se," \u2014 "),NW=n($Se,"A",{href:!0});var nMt=s(NW);QCr=r(nMt,"FlaxGPTJForCausalLM"),nMt.forEach(t),WCr=r($Se," (GPT-J model)"),$Se.forEach(t),HCr=i(vi),n4=n(vi,"LI",{});var ISe=s(n4);Q5e=n(ISe,"STRONG",{});var sMt=s(Q5e);UCr=r(sMt,"xglm"),sMt.forEach(t),JCr=r(ISe," \u2014 "),jW=n(ISe,"A",{href:!0});var lMt=s(jW);YCr=r(lMt,"FlaxXGLMForCausalLM"),lMt.forEach(t),KCr=r(ISe," (XGLM model)"),ISe.forEach(t),vi.forEach(t),ZCr=i(xa),W5e=n(xa,"P",{});var iMt=s(W5e);ewr=r(iMt,"Examples:"),iMt.forEach(t),owr=i(xa),m(c8.$$.fragment,xa),xa.forEach(t),ui.forEach(t),$Pe=i(c),lf=n(c,"H2",{class:!0});var QIe=s(lf);s4=n(QIe,"A",{id:!0,class:!0,href:!0});var dMt=s(s4);H5e=n(dMt,"SPAN",{});var cMt=s(H5e);m(f8.$$.fragment,cMt),cMt.forEach(t),dMt.forEach(t),rwr=i(QIe),U5e=n(QIe,"SPAN",{});var fMt=s(U5e);twr=r(fMt,"FlaxAutoModelForPreTraining"),fMt.forEach(t),QIe.forEach(t),IPe=i(c),Pr=n(c,"DIV",{class:!0});var Fi=s(Pr);m(m8.$$.fragment,Fi),awr=i(Fi),df=n(Fi,"P",{});var nY=s(df);nwr=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DW=n(nY,"A",{href:!0});var mMt=s(DW);swr=r(mMt,"from_pretrained()"),mMt.forEach(t),lwr=r(nY," class method or the "),GW=n(nY,"A",{href:!0});var gMt=s(GW);iwr=r(gMt,"from_config()"),gMt.forEach(t),dwr=r(nY,` class
method.`),nY.forEach(t),cwr=i(Fi),g8=n(Fi,"P",{});var WIe=s(g8);fwr=r(WIe,"This class cannot be instantiated directly using "),J5e=n(WIe,"CODE",{});var hMt=s(J5e);mwr=r(hMt,"__init__()"),hMt.forEach(t),gwr=r(WIe," (throws an error)."),WIe.forEach(t),hwr=i(Fi),Lt=n(Fi,"DIV",{class:!0});var Ti=s(Lt);m(h8.$$.fragment,Ti),pwr=i(Ti),Y5e=n(Ti,"P",{});var pMt=s(Y5e);_wr=r(pMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pMt.forEach(t),uwr=i(Ti),cf=n(Ti,"P",{});var sY=s(cf);bwr=r(sY,`Note:
Loading a model from its configuration file does `),K5e=n(sY,"STRONG",{});var _Mt=s(K5e);vwr=r(_Mt,"not"),_Mt.forEach(t),Fwr=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(sY,"A",{href:!0});var uMt=s(OW);Twr=r(uMt,"from_pretrained()"),uMt.forEach(t),Mwr=r(sY," to load the model weights."),sY.forEach(t),Ewr=i(Ti),Z5e=n(Ti,"P",{});var bMt=s(Z5e);Cwr=r(bMt,"Examples:"),bMt.forEach(t),wwr=i(Ti),m(p8.$$.fragment,Ti),Ti.forEach(t),Awr=i(Fi),xo=n(Fi,"DIV",{class:!0});var ka=s(xo);m(_8.$$.fragment,ka),ywr=i(ka),eve=n(ka,"P",{});var vMt=s(eve);Lwr=r(vMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vMt.forEach(t),xwr=i(ka),Rn=n(ka,"P",{});var E3=s(Rn);kwr=r(E3,"The model class to instantiate is selected based on the "),ove=n(E3,"CODE",{});var FMt=s(ove);Swr=r(FMt,"model_type"),FMt.forEach(t),Rwr=r(E3,` property of the config object (either
passed as an argument or loaded from `),rve=n(E3,"CODE",{});var TMt=s(rve);Bwr=r(TMt,"pretrained_model_name_or_path"),TMt.forEach(t),Pwr=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=n(E3,"CODE",{});var MMt=s(tve);$wr=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),Iwr=r(E3,":"),E3.forEach(t),qwr=i(ka),me=n(ka,"UL",{});var _e=s(me);l4=n(_e,"LI",{});var qSe=s(l4);ave=n(qSe,"STRONG",{});var EMt=s(ave);Nwr=r(EMt,"albert"),EMt.forEach(t),jwr=r(qSe," \u2014 "),VW=n(qSe,"A",{href:!0});var CMt=s(VW);Dwr=r(CMt,"FlaxAlbertForPreTraining"),CMt.forEach(t),Gwr=r(qSe," (ALBERT model)"),qSe.forEach(t),Owr=i(_e),i4=n(_e,"LI",{});var NSe=s(i4);nve=n(NSe,"STRONG",{});var wMt=s(nve);Vwr=r(wMt,"bart"),wMt.forEach(t),Xwr=r(NSe," \u2014 "),XW=n(NSe,"A",{href:!0});var AMt=s(XW);zwr=r(AMt,"FlaxBartForConditionalGeneration"),AMt.forEach(t),Qwr=r(NSe," (BART model)"),NSe.forEach(t),Wwr=i(_e),d4=n(_e,"LI",{});var jSe=s(d4);sve=n(jSe,"STRONG",{});var yMt=s(sve);Hwr=r(yMt,"bert"),yMt.forEach(t),Uwr=r(jSe," \u2014 "),zW=n(jSe,"A",{href:!0});var LMt=s(zW);Jwr=r(LMt,"FlaxBertForPreTraining"),LMt.forEach(t),Ywr=r(jSe," (BERT model)"),jSe.forEach(t),Kwr=i(_e),c4=n(_e,"LI",{});var DSe=s(c4);lve=n(DSe,"STRONG",{});var xMt=s(lve);Zwr=r(xMt,"big_bird"),xMt.forEach(t),eAr=r(DSe," \u2014 "),QW=n(DSe,"A",{href:!0});var kMt=s(QW);oAr=r(kMt,"FlaxBigBirdForPreTraining"),kMt.forEach(t),rAr=r(DSe," (BigBird model)"),DSe.forEach(t),tAr=i(_e),f4=n(_e,"LI",{});var GSe=s(f4);ive=n(GSe,"STRONG",{});var SMt=s(ive);aAr=r(SMt,"electra"),SMt.forEach(t),nAr=r(GSe," \u2014 "),WW=n(GSe,"A",{href:!0});var RMt=s(WW);sAr=r(RMt,"FlaxElectraForPreTraining"),RMt.forEach(t),lAr=r(GSe," (ELECTRA model)"),GSe.forEach(t),iAr=i(_e),m4=n(_e,"LI",{});var OSe=s(m4);dve=n(OSe,"STRONG",{});var BMt=s(dve);dAr=r(BMt,"mbart"),BMt.forEach(t),cAr=r(OSe," \u2014 "),HW=n(OSe,"A",{href:!0});var PMt=s(HW);fAr=r(PMt,"FlaxMBartForConditionalGeneration"),PMt.forEach(t),mAr=r(OSe," (mBART model)"),OSe.forEach(t),gAr=i(_e),g4=n(_e,"LI",{});var VSe=s(g4);cve=n(VSe,"STRONG",{});var $Mt=s(cve);hAr=r($Mt,"mt5"),$Mt.forEach(t),pAr=r(VSe," \u2014 "),UW=n(VSe,"A",{href:!0});var IMt=s(UW);_Ar=r(IMt,"FlaxMT5ForConditionalGeneration"),IMt.forEach(t),uAr=r(VSe," (mT5 model)"),VSe.forEach(t),bAr=i(_e),h4=n(_e,"LI",{});var XSe=s(h4);fve=n(XSe,"STRONG",{});var qMt=s(fve);vAr=r(qMt,"roberta"),qMt.forEach(t),FAr=r(XSe," \u2014 "),JW=n(XSe,"A",{href:!0});var NMt=s(JW);TAr=r(NMt,"FlaxRobertaForMaskedLM"),NMt.forEach(t),MAr=r(XSe," (RoBERTa model)"),XSe.forEach(t),EAr=i(_e),p4=n(_e,"LI",{});var zSe=s(p4);mve=n(zSe,"STRONG",{});var jMt=s(mve);CAr=r(jMt,"roformer"),jMt.forEach(t),wAr=r(zSe," \u2014 "),YW=n(zSe,"A",{href:!0});var DMt=s(YW);AAr=r(DMt,"FlaxRoFormerForMaskedLM"),DMt.forEach(t),yAr=r(zSe," (RoFormer model)"),zSe.forEach(t),LAr=i(_e),_4=n(_e,"LI",{});var QSe=s(_4);gve=n(QSe,"STRONG",{});var GMt=s(gve);xAr=r(GMt,"t5"),GMt.forEach(t),kAr=r(QSe," \u2014 "),KW=n(QSe,"A",{href:!0});var OMt=s(KW);SAr=r(OMt,"FlaxT5ForConditionalGeneration"),OMt.forEach(t),RAr=r(QSe," (T5 model)"),QSe.forEach(t),BAr=i(_e),u4=n(_e,"LI",{});var WSe=s(u4);hve=n(WSe,"STRONG",{});var VMt=s(hve);PAr=r(VMt,"wav2vec2"),VMt.forEach(t),$Ar=r(WSe," \u2014 "),ZW=n(WSe,"A",{href:!0});var XMt=s(ZW);IAr=r(XMt,"FlaxWav2Vec2ForPreTraining"),XMt.forEach(t),qAr=r(WSe," (Wav2Vec2 model)"),WSe.forEach(t),NAr=i(_e),b4=n(_e,"LI",{});var HSe=s(b4);pve=n(HSe,"STRONG",{});var zMt=s(pve);jAr=r(zMt,"xlm-roberta"),zMt.forEach(t),DAr=r(HSe," \u2014 "),eH=n(HSe,"A",{href:!0});var QMt=s(eH);GAr=r(QMt,"FlaxXLMRobertaForMaskedLM"),QMt.forEach(t),OAr=r(HSe," (XLM-RoBERTa model)"),HSe.forEach(t),_e.forEach(t),VAr=i(ka),_ve=n(ka,"P",{});var WMt=s(_ve);XAr=r(WMt,"Examples:"),WMt.forEach(t),zAr=i(ka),m(u8.$$.fragment,ka),ka.forEach(t),Fi.forEach(t),qPe=i(c),ff=n(c,"H2",{class:!0});var HIe=s(ff);v4=n(HIe,"A",{id:!0,class:!0,href:!0});var HMt=s(v4);uve=n(HMt,"SPAN",{});var UMt=s(uve);m(b8.$$.fragment,UMt),UMt.forEach(t),HMt.forEach(t),QAr=i(HIe),bve=n(HIe,"SPAN",{});var JMt=s(bve);WAr=r(JMt,"FlaxAutoModelForMaskedLM"),JMt.forEach(t),HIe.forEach(t),NPe=i(c),$r=n(c,"DIV",{class:!0});var Mi=s($r);m(v8.$$.fragment,Mi),HAr=i(Mi),mf=n(Mi,"P",{});var lY=s(mf);UAr=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oH=n(lY,"A",{href:!0});var YMt=s(oH);JAr=r(YMt,"from_pretrained()"),YMt.forEach(t),YAr=r(lY," class method or the "),rH=n(lY,"A",{href:!0});var KMt=s(rH);KAr=r(KMt,"from_config()"),KMt.forEach(t),ZAr=r(lY,` class
method.`),lY.forEach(t),e0r=i(Mi),F8=n(Mi,"P",{});var UIe=s(F8);o0r=r(UIe,"This class cannot be instantiated directly using "),vve=n(UIe,"CODE",{});var ZMt=s(vve);r0r=r(ZMt,"__init__()"),ZMt.forEach(t),t0r=r(UIe," (throws an error)."),UIe.forEach(t),a0r=i(Mi),xt=n(Mi,"DIV",{class:!0});var Ei=s(xt);m(T8.$$.fragment,Ei),n0r=i(Ei),Fve=n(Ei,"P",{});var e4t=s(Fve);s0r=r(e4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),e4t.forEach(t),l0r=i(Ei),gf=n(Ei,"P",{});var iY=s(gf);i0r=r(iY,`Note:
Loading a model from its configuration file does `),Tve=n(iY,"STRONG",{});var o4t=s(Tve);d0r=r(o4t,"not"),o4t.forEach(t),c0r=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(iY,"A",{href:!0});var r4t=s(tH);f0r=r(r4t,"from_pretrained()"),r4t.forEach(t),m0r=r(iY," to load the model weights."),iY.forEach(t),g0r=i(Ei),Mve=n(Ei,"P",{});var t4t=s(Mve);h0r=r(t4t,"Examples:"),t4t.forEach(t),p0r=i(Ei),m(M8.$$.fragment,Ei),Ei.forEach(t),_0r=i(Mi),ko=n(Mi,"DIV",{class:!0});var Sa=s(ko);m(E8.$$.fragment,Sa),u0r=i(Sa),Eve=n(Sa,"P",{});var a4t=s(Eve);b0r=r(a4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),a4t.forEach(t),v0r=i(Sa),Bn=n(Sa,"P",{});var C3=s(Bn);F0r=r(C3,"The model class to instantiate is selected based on the "),Cve=n(C3,"CODE",{});var n4t=s(Cve);T0r=r(n4t,"model_type"),n4t.forEach(t),M0r=r(C3,` property of the config object (either
passed as an argument or loaded from `),wve=n(C3,"CODE",{});var s4t=s(wve);E0r=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),C0r=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=n(C3,"CODE",{});var l4t=s(Ave);w0r=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),A0r=r(C3,":"),C3.forEach(t),y0r=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);F4=n(Ae,"LI",{});var USe=s(F4);yve=n(USe,"STRONG",{});var i4t=s(yve);L0r=r(i4t,"albert"),i4t.forEach(t),x0r=r(USe," \u2014 "),aH=n(USe,"A",{href:!0});var d4t=s(aH);k0r=r(d4t,"FlaxAlbertForMaskedLM"),d4t.forEach(t),S0r=r(USe," (ALBERT model)"),USe.forEach(t),R0r=i(Ae),T4=n(Ae,"LI",{});var JSe=s(T4);Lve=n(JSe,"STRONG",{});var c4t=s(Lve);B0r=r(c4t,"bart"),c4t.forEach(t),P0r=r(JSe," \u2014 "),nH=n(JSe,"A",{href:!0});var f4t=s(nH);$0r=r(f4t,"FlaxBartForConditionalGeneration"),f4t.forEach(t),I0r=r(JSe," (BART model)"),JSe.forEach(t),q0r=i(Ae),M4=n(Ae,"LI",{});var YSe=s(M4);xve=n(YSe,"STRONG",{});var m4t=s(xve);N0r=r(m4t,"bert"),m4t.forEach(t),j0r=r(YSe," \u2014 "),sH=n(YSe,"A",{href:!0});var g4t=s(sH);D0r=r(g4t,"FlaxBertForMaskedLM"),g4t.forEach(t),G0r=r(YSe," (BERT model)"),YSe.forEach(t),O0r=i(Ae),E4=n(Ae,"LI",{});var KSe=s(E4);kve=n(KSe,"STRONG",{});var h4t=s(kve);V0r=r(h4t,"big_bird"),h4t.forEach(t),X0r=r(KSe," \u2014 "),lH=n(KSe,"A",{href:!0});var p4t=s(lH);z0r=r(p4t,"FlaxBigBirdForMaskedLM"),p4t.forEach(t),Q0r=r(KSe," (BigBird model)"),KSe.forEach(t),W0r=i(Ae),C4=n(Ae,"LI",{});var ZSe=s(C4);Sve=n(ZSe,"STRONG",{});var _4t=s(Sve);H0r=r(_4t,"distilbert"),_4t.forEach(t),U0r=r(ZSe," \u2014 "),iH=n(ZSe,"A",{href:!0});var u4t=s(iH);J0r=r(u4t,"FlaxDistilBertForMaskedLM"),u4t.forEach(t),Y0r=r(ZSe," (DistilBERT model)"),ZSe.forEach(t),K0r=i(Ae),w4=n(Ae,"LI",{});var eRe=s(w4);Rve=n(eRe,"STRONG",{});var b4t=s(Rve);Z0r=r(b4t,"electra"),b4t.forEach(t),eyr=r(eRe," \u2014 "),dH=n(eRe,"A",{href:!0});var v4t=s(dH);oyr=r(v4t,"FlaxElectraForMaskedLM"),v4t.forEach(t),ryr=r(eRe," (ELECTRA model)"),eRe.forEach(t),tyr=i(Ae),A4=n(Ae,"LI",{});var oRe=s(A4);Bve=n(oRe,"STRONG",{});var F4t=s(Bve);ayr=r(F4t,"mbart"),F4t.forEach(t),nyr=r(oRe," \u2014 "),cH=n(oRe,"A",{href:!0});var T4t=s(cH);syr=r(T4t,"FlaxMBartForConditionalGeneration"),T4t.forEach(t),lyr=r(oRe," (mBART model)"),oRe.forEach(t),iyr=i(Ae),y4=n(Ae,"LI",{});var rRe=s(y4);Pve=n(rRe,"STRONG",{});var M4t=s(Pve);dyr=r(M4t,"roberta"),M4t.forEach(t),cyr=r(rRe," \u2014 "),fH=n(rRe,"A",{href:!0});var E4t=s(fH);fyr=r(E4t,"FlaxRobertaForMaskedLM"),E4t.forEach(t),myr=r(rRe," (RoBERTa model)"),rRe.forEach(t),gyr=i(Ae),L4=n(Ae,"LI",{});var tRe=s(L4);$ve=n(tRe,"STRONG",{});var C4t=s($ve);hyr=r(C4t,"roformer"),C4t.forEach(t),pyr=r(tRe," \u2014 "),mH=n(tRe,"A",{href:!0});var w4t=s(mH);_yr=r(w4t,"FlaxRoFormerForMaskedLM"),w4t.forEach(t),uyr=r(tRe," (RoFormer model)"),tRe.forEach(t),byr=i(Ae),x4=n(Ae,"LI",{});var aRe=s(x4);Ive=n(aRe,"STRONG",{});var A4t=s(Ive);vyr=r(A4t,"xlm-roberta"),A4t.forEach(t),Fyr=r(aRe," \u2014 "),gH=n(aRe,"A",{href:!0});var y4t=s(gH);Tyr=r(y4t,"FlaxXLMRobertaForMaskedLM"),y4t.forEach(t),Myr=r(aRe," (XLM-RoBERTa model)"),aRe.forEach(t),Ae.forEach(t),Eyr=i(Sa),qve=n(Sa,"P",{});var L4t=s(qve);Cyr=r(L4t,"Examples:"),L4t.forEach(t),wyr=i(Sa),m(C8.$$.fragment,Sa),Sa.forEach(t),Mi.forEach(t),jPe=i(c),hf=n(c,"H2",{class:!0});var JIe=s(hf);k4=n(JIe,"A",{id:!0,class:!0,href:!0});var x4t=s(k4);Nve=n(x4t,"SPAN",{});var k4t=s(Nve);m(w8.$$.fragment,k4t),k4t.forEach(t),x4t.forEach(t),Ayr=i(JIe),jve=n(JIe,"SPAN",{});var S4t=s(jve);yyr=r(S4t,"FlaxAutoModelForSeq2SeqLM"),S4t.forEach(t),JIe.forEach(t),DPe=i(c),Ir=n(c,"DIV",{class:!0});var Ci=s(Ir);m(A8.$$.fragment,Ci),Lyr=i(Ci),pf=n(Ci,"P",{});var dY=s(pf);xyr=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hH=n(dY,"A",{href:!0});var R4t=s(hH);kyr=r(R4t,"from_pretrained()"),R4t.forEach(t),Syr=r(dY," class method or the "),pH=n(dY,"A",{href:!0});var B4t=s(pH);Ryr=r(B4t,"from_config()"),B4t.forEach(t),Byr=r(dY,` class
method.`),dY.forEach(t),Pyr=i(Ci),y8=n(Ci,"P",{});var YIe=s(y8);$yr=r(YIe,"This class cannot be instantiated directly using "),Dve=n(YIe,"CODE",{});var P4t=s(Dve);Iyr=r(P4t,"__init__()"),P4t.forEach(t),qyr=r(YIe," (throws an error)."),YIe.forEach(t),Nyr=i(Ci),kt=n(Ci,"DIV",{class:!0});var wi=s(kt);m(L8.$$.fragment,wi),jyr=i(wi),Gve=n(wi,"P",{});var $4t=s(Gve);Dyr=r($4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$4t.forEach(t),Gyr=i(wi),_f=n(wi,"P",{});var cY=s(_f);Oyr=r(cY,`Note:
Loading a model from its configuration file does `),Ove=n(cY,"STRONG",{});var I4t=s(Ove);Vyr=r(I4t,"not"),I4t.forEach(t),Xyr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(cY,"A",{href:!0});var q4t=s(_H);zyr=r(q4t,"from_pretrained()"),q4t.forEach(t),Qyr=r(cY," to load the model weights."),cY.forEach(t),Wyr=i(wi),Vve=n(wi,"P",{});var N4t=s(Vve);Hyr=r(N4t,"Examples:"),N4t.forEach(t),Uyr=i(wi),m(x8.$$.fragment,wi),wi.forEach(t),Jyr=i(Ci),So=n(Ci,"DIV",{class:!0});var Ra=s(So);m(k8.$$.fragment,Ra),Yyr=i(Ra),Xve=n(Ra,"P",{});var j4t=s(Xve);Kyr=r(j4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j4t.forEach(t),Zyr=i(Ra),Pn=n(Ra,"P",{});var w3=s(Pn);e8r=r(w3,"The model class to instantiate is selected based on the "),zve=n(w3,"CODE",{});var D4t=s(zve);o8r=r(D4t,"model_type"),D4t.forEach(t),r8r=r(w3,` property of the config object (either
passed as an argument or loaded from `),Qve=n(w3,"CODE",{});var G4t=s(Qve);t8r=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),a8r=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(w3,"CODE",{});var O4t=s(Wve);n8r=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),s8r=r(w3,":"),w3.forEach(t),l8r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);S4=n(so,"LI",{});var nRe=s(S4);Hve=n(nRe,"STRONG",{});var V4t=s(Hve);i8r=r(V4t,"bart"),V4t.forEach(t),d8r=r(nRe," \u2014 "),uH=n(nRe,"A",{href:!0});var X4t=s(uH);c8r=r(X4t,"FlaxBartForConditionalGeneration"),X4t.forEach(t),f8r=r(nRe," (BART model)"),nRe.forEach(t),m8r=i(so),R4=n(so,"LI",{});var sRe=s(R4);Uve=n(sRe,"STRONG",{});var z4t=s(Uve);g8r=r(z4t,"blenderbot"),z4t.forEach(t),h8r=r(sRe," \u2014 "),bH=n(sRe,"A",{href:!0});var Q4t=s(bH);p8r=r(Q4t,"FlaxBlenderbotForConditionalGeneration"),Q4t.forEach(t),_8r=r(sRe," (Blenderbot model)"),sRe.forEach(t),u8r=i(so),B4=n(so,"LI",{});var lRe=s(B4);Jve=n(lRe,"STRONG",{});var W4t=s(Jve);b8r=r(W4t,"blenderbot-small"),W4t.forEach(t),v8r=r(lRe," \u2014 "),vH=n(lRe,"A",{href:!0});var H4t=s(vH);F8r=r(H4t,"FlaxBlenderbotSmallForConditionalGeneration"),H4t.forEach(t),T8r=r(lRe," (BlenderbotSmall model)"),lRe.forEach(t),M8r=i(so),P4=n(so,"LI",{});var iRe=s(P4);Yve=n(iRe,"STRONG",{});var U4t=s(Yve);E8r=r(U4t,"encoder-decoder"),U4t.forEach(t),C8r=r(iRe," \u2014 "),FH=n(iRe,"A",{href:!0});var J4t=s(FH);w8r=r(J4t,"FlaxEncoderDecoderModel"),J4t.forEach(t),A8r=r(iRe," (Encoder decoder model)"),iRe.forEach(t),y8r=i(so),$4=n(so,"LI",{});var dRe=s($4);Kve=n(dRe,"STRONG",{});var Y4t=s(Kve);L8r=r(Y4t,"marian"),Y4t.forEach(t),x8r=r(dRe," \u2014 "),TH=n(dRe,"A",{href:!0});var K4t=s(TH);k8r=r(K4t,"FlaxMarianMTModel"),K4t.forEach(t),S8r=r(dRe," (Marian model)"),dRe.forEach(t),R8r=i(so),I4=n(so,"LI",{});var cRe=s(I4);Zve=n(cRe,"STRONG",{});var Z4t=s(Zve);B8r=r(Z4t,"mbart"),Z4t.forEach(t),P8r=r(cRe," \u2014 "),MH=n(cRe,"A",{href:!0});var eEt=s(MH);$8r=r(eEt,"FlaxMBartForConditionalGeneration"),eEt.forEach(t),I8r=r(cRe," (mBART model)"),cRe.forEach(t),q8r=i(so),q4=n(so,"LI",{});var fRe=s(q4);eFe=n(fRe,"STRONG",{});var oEt=s(eFe);N8r=r(oEt,"mt5"),oEt.forEach(t),j8r=r(fRe," \u2014 "),EH=n(fRe,"A",{href:!0});var rEt=s(EH);D8r=r(rEt,"FlaxMT5ForConditionalGeneration"),rEt.forEach(t),G8r=r(fRe," (mT5 model)"),fRe.forEach(t),O8r=i(so),N4=n(so,"LI",{});var mRe=s(N4);oFe=n(mRe,"STRONG",{});var tEt=s(oFe);V8r=r(tEt,"pegasus"),tEt.forEach(t),X8r=r(mRe," \u2014 "),CH=n(mRe,"A",{href:!0});var aEt=s(CH);z8r=r(aEt,"FlaxPegasusForConditionalGeneration"),aEt.forEach(t),Q8r=r(mRe," (Pegasus model)"),mRe.forEach(t),W8r=i(so),j4=n(so,"LI",{});var gRe=s(j4);rFe=n(gRe,"STRONG",{});var nEt=s(rFe);H8r=r(nEt,"t5"),nEt.forEach(t),U8r=r(gRe," \u2014 "),wH=n(gRe,"A",{href:!0});var sEt=s(wH);J8r=r(sEt,"FlaxT5ForConditionalGeneration"),sEt.forEach(t),Y8r=r(gRe," (T5 model)"),gRe.forEach(t),so.forEach(t),K8r=i(Ra),tFe=n(Ra,"P",{});var lEt=s(tFe);Z8r=r(lEt,"Examples:"),lEt.forEach(t),eLr=i(Ra),m(S8.$$.fragment,Ra),Ra.forEach(t),Ci.forEach(t),GPe=i(c),uf=n(c,"H2",{class:!0});var KIe=s(uf);D4=n(KIe,"A",{id:!0,class:!0,href:!0});var iEt=s(D4);aFe=n(iEt,"SPAN",{});var dEt=s(aFe);m(R8.$$.fragment,dEt),dEt.forEach(t),iEt.forEach(t),oLr=i(KIe),nFe=n(KIe,"SPAN",{});var cEt=s(nFe);rLr=r(cEt,"FlaxAutoModelForSequenceClassification"),cEt.forEach(t),KIe.forEach(t),OPe=i(c),qr=n(c,"DIV",{class:!0});var Ai=s(qr);m(B8.$$.fragment,Ai),tLr=i(Ai),bf=n(Ai,"P",{});var fY=s(bf);aLr=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AH=n(fY,"A",{href:!0});var fEt=s(AH);nLr=r(fEt,"from_pretrained()"),fEt.forEach(t),sLr=r(fY," class method or the "),yH=n(fY,"A",{href:!0});var mEt=s(yH);lLr=r(mEt,"from_config()"),mEt.forEach(t),iLr=r(fY,` class
method.`),fY.forEach(t),dLr=i(Ai),P8=n(Ai,"P",{});var ZIe=s(P8);cLr=r(ZIe,"This class cannot be instantiated directly using "),sFe=n(ZIe,"CODE",{});var gEt=s(sFe);fLr=r(gEt,"__init__()"),gEt.forEach(t),mLr=r(ZIe," (throws an error)."),ZIe.forEach(t),gLr=i(Ai),St=n(Ai,"DIV",{class:!0});var yi=s(St);m($8.$$.fragment,yi),hLr=i(yi),lFe=n(yi,"P",{});var hEt=s(lFe);pLr=r(hEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hEt.forEach(t),_Lr=i(yi),vf=n(yi,"P",{});var mY=s(vf);uLr=r(mY,`Note:
Loading a model from its configuration file does `),iFe=n(mY,"STRONG",{});var pEt=s(iFe);bLr=r(pEt,"not"),pEt.forEach(t),vLr=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(mY,"A",{href:!0});var _Et=s(LH);FLr=r(_Et,"from_pretrained()"),_Et.forEach(t),TLr=r(mY," to load the model weights."),mY.forEach(t),MLr=i(yi),dFe=n(yi,"P",{});var uEt=s(dFe);ELr=r(uEt,"Examples:"),uEt.forEach(t),CLr=i(yi),m(I8.$$.fragment,yi),yi.forEach(t),wLr=i(Ai),Ro=n(Ai,"DIV",{class:!0});var Ba=s(Ro);m(q8.$$.fragment,Ba),ALr=i(Ba),cFe=n(Ba,"P",{});var bEt=s(cFe);yLr=r(bEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bEt.forEach(t),LLr=i(Ba),$n=n(Ba,"P",{});var A3=s($n);xLr=r(A3,"The model class to instantiate is selected based on the "),fFe=n(A3,"CODE",{});var vEt=s(fFe);kLr=r(vEt,"model_type"),vEt.forEach(t),SLr=r(A3,` property of the config object (either
passed as an argument or loaded from `),mFe=n(A3,"CODE",{});var FEt=s(mFe);RLr=r(FEt,"pretrained_model_name_or_path"),FEt.forEach(t),BLr=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=n(A3,"CODE",{});var TEt=s(gFe);PLr=r(TEt,"pretrained_model_name_or_path"),TEt.forEach(t),$Lr=r(A3,":"),A3.forEach(t),ILr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);G4=n(ye,"LI",{});var hRe=s(G4);hFe=n(hRe,"STRONG",{});var MEt=s(hFe);qLr=r(MEt,"albert"),MEt.forEach(t),NLr=r(hRe," \u2014 "),xH=n(hRe,"A",{href:!0});var EEt=s(xH);jLr=r(EEt,"FlaxAlbertForSequenceClassification"),EEt.forEach(t),DLr=r(hRe," (ALBERT model)"),hRe.forEach(t),GLr=i(ye),O4=n(ye,"LI",{});var pRe=s(O4);pFe=n(pRe,"STRONG",{});var CEt=s(pFe);OLr=r(CEt,"bart"),CEt.forEach(t),VLr=r(pRe," \u2014 "),kH=n(pRe,"A",{href:!0});var wEt=s(kH);XLr=r(wEt,"FlaxBartForSequenceClassification"),wEt.forEach(t),zLr=r(pRe," (BART model)"),pRe.forEach(t),QLr=i(ye),V4=n(ye,"LI",{});var _Re=s(V4);_Fe=n(_Re,"STRONG",{});var AEt=s(_Fe);WLr=r(AEt,"bert"),AEt.forEach(t),HLr=r(_Re," \u2014 "),SH=n(_Re,"A",{href:!0});var yEt=s(SH);ULr=r(yEt,"FlaxBertForSequenceClassification"),yEt.forEach(t),JLr=r(_Re," (BERT model)"),_Re.forEach(t),YLr=i(ye),X4=n(ye,"LI",{});var uRe=s(X4);uFe=n(uRe,"STRONG",{});var LEt=s(uFe);KLr=r(LEt,"big_bird"),LEt.forEach(t),ZLr=r(uRe," \u2014 "),RH=n(uRe,"A",{href:!0});var xEt=s(RH);e7r=r(xEt,"FlaxBigBirdForSequenceClassification"),xEt.forEach(t),o7r=r(uRe," (BigBird model)"),uRe.forEach(t),r7r=i(ye),z4=n(ye,"LI",{});var bRe=s(z4);bFe=n(bRe,"STRONG",{});var kEt=s(bFe);t7r=r(kEt,"distilbert"),kEt.forEach(t),a7r=r(bRe," \u2014 "),BH=n(bRe,"A",{href:!0});var SEt=s(BH);n7r=r(SEt,"FlaxDistilBertForSequenceClassification"),SEt.forEach(t),s7r=r(bRe," (DistilBERT model)"),bRe.forEach(t),l7r=i(ye),Q4=n(ye,"LI",{});var vRe=s(Q4);vFe=n(vRe,"STRONG",{});var REt=s(vFe);i7r=r(REt,"electra"),REt.forEach(t),d7r=r(vRe," \u2014 "),PH=n(vRe,"A",{href:!0});var BEt=s(PH);c7r=r(BEt,"FlaxElectraForSequenceClassification"),BEt.forEach(t),f7r=r(vRe," (ELECTRA model)"),vRe.forEach(t),m7r=i(ye),W4=n(ye,"LI",{});var FRe=s(W4);FFe=n(FRe,"STRONG",{});var PEt=s(FFe);g7r=r(PEt,"mbart"),PEt.forEach(t),h7r=r(FRe," \u2014 "),$H=n(FRe,"A",{href:!0});var $Et=s($H);p7r=r($Et,"FlaxMBartForSequenceClassification"),$Et.forEach(t),_7r=r(FRe," (mBART model)"),FRe.forEach(t),u7r=i(ye),H4=n(ye,"LI",{});var TRe=s(H4);TFe=n(TRe,"STRONG",{});var IEt=s(TFe);b7r=r(IEt,"roberta"),IEt.forEach(t),v7r=r(TRe," \u2014 "),IH=n(TRe,"A",{href:!0});var qEt=s(IH);F7r=r(qEt,"FlaxRobertaForSequenceClassification"),qEt.forEach(t),T7r=r(TRe," (RoBERTa model)"),TRe.forEach(t),M7r=i(ye),U4=n(ye,"LI",{});var MRe=s(U4);MFe=n(MRe,"STRONG",{});var NEt=s(MFe);E7r=r(NEt,"roformer"),NEt.forEach(t),C7r=r(MRe," \u2014 "),qH=n(MRe,"A",{href:!0});var jEt=s(qH);w7r=r(jEt,"FlaxRoFormerForSequenceClassification"),jEt.forEach(t),A7r=r(MRe," (RoFormer model)"),MRe.forEach(t),y7r=i(ye),J4=n(ye,"LI",{});var ERe=s(J4);EFe=n(ERe,"STRONG",{});var DEt=s(EFe);L7r=r(DEt,"xlm-roberta"),DEt.forEach(t),x7r=r(ERe," \u2014 "),NH=n(ERe,"A",{href:!0});var GEt=s(NH);k7r=r(GEt,"FlaxXLMRobertaForSequenceClassification"),GEt.forEach(t),S7r=r(ERe," (XLM-RoBERTa model)"),ERe.forEach(t),ye.forEach(t),R7r=i(Ba),CFe=n(Ba,"P",{});var OEt=s(CFe);B7r=r(OEt,"Examples:"),OEt.forEach(t),P7r=i(Ba),m(N8.$$.fragment,Ba),Ba.forEach(t),Ai.forEach(t),VPe=i(c),Ff=n(c,"H2",{class:!0});var eqe=s(Ff);Y4=n(eqe,"A",{id:!0,class:!0,href:!0});var VEt=s(Y4);wFe=n(VEt,"SPAN",{});var XEt=s(wFe);m(j8.$$.fragment,XEt),XEt.forEach(t),VEt.forEach(t),$7r=i(eqe),AFe=n(eqe,"SPAN",{});var zEt=s(AFe);I7r=r(zEt,"FlaxAutoModelForQuestionAnswering"),zEt.forEach(t),eqe.forEach(t),XPe=i(c),Nr=n(c,"DIV",{class:!0});var Li=s(Nr);m(D8.$$.fragment,Li),q7r=i(Li),Tf=n(Li,"P",{});var gY=s(Tf);N7r=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),jH=n(gY,"A",{href:!0});var QEt=s(jH);j7r=r(QEt,"from_pretrained()"),QEt.forEach(t),D7r=r(gY," class method or the "),DH=n(gY,"A",{href:!0});var WEt=s(DH);G7r=r(WEt,"from_config()"),WEt.forEach(t),O7r=r(gY,` class
method.`),gY.forEach(t),V7r=i(Li),G8=n(Li,"P",{});var oqe=s(G8);X7r=r(oqe,"This class cannot be instantiated directly using "),yFe=n(oqe,"CODE",{});var HEt=s(yFe);z7r=r(HEt,"__init__()"),HEt.forEach(t),Q7r=r(oqe," (throws an error)."),oqe.forEach(t),W7r=i(Li),Rt=n(Li,"DIV",{class:!0});var xi=s(Rt);m(O8.$$.fragment,xi),H7r=i(xi),LFe=n(xi,"P",{});var UEt=s(LFe);U7r=r(UEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UEt.forEach(t),J7r=i(xi),Mf=n(xi,"P",{});var hY=s(Mf);Y7r=r(hY,`Note:
Loading a model from its configuration file does `),xFe=n(hY,"STRONG",{});var JEt=s(xFe);K7r=r(JEt,"not"),JEt.forEach(t),Z7r=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(hY,"A",{href:!0});var YEt=s(GH);exr=r(YEt,"from_pretrained()"),YEt.forEach(t),oxr=r(hY," to load the model weights."),hY.forEach(t),rxr=i(xi),kFe=n(xi,"P",{});var KEt=s(kFe);txr=r(KEt,"Examples:"),KEt.forEach(t),axr=i(xi),m(V8.$$.fragment,xi),xi.forEach(t),nxr=i(Li),Bo=n(Li,"DIV",{class:!0});var Pa=s(Bo);m(X8.$$.fragment,Pa),sxr=i(Pa),SFe=n(Pa,"P",{});var ZEt=s(SFe);lxr=r(ZEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ZEt.forEach(t),ixr=i(Pa),In=n(Pa,"P",{});var y3=s(In);dxr=r(y3,"The model class to instantiate is selected based on the "),RFe=n(y3,"CODE",{});var e3t=s(RFe);cxr=r(e3t,"model_type"),e3t.forEach(t),fxr=r(y3,` property of the config object (either
passed as an argument or loaded from `),BFe=n(y3,"CODE",{});var o3t=s(BFe);mxr=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),gxr=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(y3,"CODE",{});var r3t=s(PFe);hxr=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),pxr=r(y3,":"),y3.forEach(t),_xr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);K4=n(Le,"LI",{});var CRe=s(K4);$Fe=n(CRe,"STRONG",{});var t3t=s($Fe);uxr=r(t3t,"albert"),t3t.forEach(t),bxr=r(CRe," \u2014 "),OH=n(CRe,"A",{href:!0});var a3t=s(OH);vxr=r(a3t,"FlaxAlbertForQuestionAnswering"),a3t.forEach(t),Fxr=r(CRe," (ALBERT model)"),CRe.forEach(t),Txr=i(Le),Z4=n(Le,"LI",{});var wRe=s(Z4);IFe=n(wRe,"STRONG",{});var n3t=s(IFe);Mxr=r(n3t,"bart"),n3t.forEach(t),Exr=r(wRe," \u2014 "),VH=n(wRe,"A",{href:!0});var s3t=s(VH);Cxr=r(s3t,"FlaxBartForQuestionAnswering"),s3t.forEach(t),wxr=r(wRe," (BART model)"),wRe.forEach(t),Axr=i(Le),eE=n(Le,"LI",{});var ARe=s(eE);qFe=n(ARe,"STRONG",{});var l3t=s(qFe);yxr=r(l3t,"bert"),l3t.forEach(t),Lxr=r(ARe," \u2014 "),XH=n(ARe,"A",{href:!0});var i3t=s(XH);xxr=r(i3t,"FlaxBertForQuestionAnswering"),i3t.forEach(t),kxr=r(ARe," (BERT model)"),ARe.forEach(t),Sxr=i(Le),oE=n(Le,"LI",{});var yRe=s(oE);NFe=n(yRe,"STRONG",{});var d3t=s(NFe);Rxr=r(d3t,"big_bird"),d3t.forEach(t),Bxr=r(yRe," \u2014 "),zH=n(yRe,"A",{href:!0});var c3t=s(zH);Pxr=r(c3t,"FlaxBigBirdForQuestionAnswering"),c3t.forEach(t),$xr=r(yRe," (BigBird model)"),yRe.forEach(t),Ixr=i(Le),rE=n(Le,"LI",{});var LRe=s(rE);jFe=n(LRe,"STRONG",{});var f3t=s(jFe);qxr=r(f3t,"distilbert"),f3t.forEach(t),Nxr=r(LRe," \u2014 "),QH=n(LRe,"A",{href:!0});var m3t=s(QH);jxr=r(m3t,"FlaxDistilBertForQuestionAnswering"),m3t.forEach(t),Dxr=r(LRe," (DistilBERT model)"),LRe.forEach(t),Gxr=i(Le),tE=n(Le,"LI",{});var xRe=s(tE);DFe=n(xRe,"STRONG",{});var g3t=s(DFe);Oxr=r(g3t,"electra"),g3t.forEach(t),Vxr=r(xRe," \u2014 "),WH=n(xRe,"A",{href:!0});var h3t=s(WH);Xxr=r(h3t,"FlaxElectraForQuestionAnswering"),h3t.forEach(t),zxr=r(xRe," (ELECTRA model)"),xRe.forEach(t),Qxr=i(Le),aE=n(Le,"LI",{});var kRe=s(aE);GFe=n(kRe,"STRONG",{});var p3t=s(GFe);Wxr=r(p3t,"mbart"),p3t.forEach(t),Hxr=r(kRe," \u2014 "),HH=n(kRe,"A",{href:!0});var _3t=s(HH);Uxr=r(_3t,"FlaxMBartForQuestionAnswering"),_3t.forEach(t),Jxr=r(kRe," (mBART model)"),kRe.forEach(t),Yxr=i(Le),nE=n(Le,"LI",{});var SRe=s(nE);OFe=n(SRe,"STRONG",{});var u3t=s(OFe);Kxr=r(u3t,"roberta"),u3t.forEach(t),Zxr=r(SRe," \u2014 "),UH=n(SRe,"A",{href:!0});var b3t=s(UH);ekr=r(b3t,"FlaxRobertaForQuestionAnswering"),b3t.forEach(t),okr=r(SRe," (RoBERTa model)"),SRe.forEach(t),rkr=i(Le),sE=n(Le,"LI",{});var RRe=s(sE);VFe=n(RRe,"STRONG",{});var v3t=s(VFe);tkr=r(v3t,"roformer"),v3t.forEach(t),akr=r(RRe," \u2014 "),JH=n(RRe,"A",{href:!0});var F3t=s(JH);nkr=r(F3t,"FlaxRoFormerForQuestionAnswering"),F3t.forEach(t),skr=r(RRe," (RoFormer model)"),RRe.forEach(t),lkr=i(Le),lE=n(Le,"LI",{});var BRe=s(lE);XFe=n(BRe,"STRONG",{});var T3t=s(XFe);ikr=r(T3t,"xlm-roberta"),T3t.forEach(t),dkr=r(BRe," \u2014 "),YH=n(BRe,"A",{href:!0});var M3t=s(YH);ckr=r(M3t,"FlaxXLMRobertaForQuestionAnswering"),M3t.forEach(t),fkr=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),Le.forEach(t),mkr=i(Pa),zFe=n(Pa,"P",{});var E3t=s(zFe);gkr=r(E3t,"Examples:"),E3t.forEach(t),hkr=i(Pa),m(z8.$$.fragment,Pa),Pa.forEach(t),Li.forEach(t),zPe=i(c),Ef=n(c,"H2",{class:!0});var rqe=s(Ef);iE=n(rqe,"A",{id:!0,class:!0,href:!0});var C3t=s(iE);QFe=n(C3t,"SPAN",{});var w3t=s(QFe);m(Q8.$$.fragment,w3t),w3t.forEach(t),C3t.forEach(t),pkr=i(rqe),WFe=n(rqe,"SPAN",{});var A3t=s(WFe);_kr=r(A3t,"FlaxAutoModelForTokenClassification"),A3t.forEach(t),rqe.forEach(t),QPe=i(c),jr=n(c,"DIV",{class:!0});var ki=s(jr);m(W8.$$.fragment,ki),ukr=i(ki),Cf=n(ki,"P",{});var pY=s(Cf);bkr=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KH=n(pY,"A",{href:!0});var y3t=s(KH);vkr=r(y3t,"from_pretrained()"),y3t.forEach(t),Fkr=r(pY," class method or the "),ZH=n(pY,"A",{href:!0});var L3t=s(ZH);Tkr=r(L3t,"from_config()"),L3t.forEach(t),Mkr=r(pY,` class
method.`),pY.forEach(t),Ekr=i(ki),H8=n(ki,"P",{});var tqe=s(H8);Ckr=r(tqe,"This class cannot be instantiated directly using "),HFe=n(tqe,"CODE",{});var x3t=s(HFe);wkr=r(x3t,"__init__()"),x3t.forEach(t),Akr=r(tqe," (throws an error)."),tqe.forEach(t),ykr=i(ki),Bt=n(ki,"DIV",{class:!0});var Si=s(Bt);m(U8.$$.fragment,Si),Lkr=i(Si),UFe=n(Si,"P",{});var k3t=s(UFe);xkr=r(k3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),k3t.forEach(t),kkr=i(Si),wf=n(Si,"P",{});var _Y=s(wf);Skr=r(_Y,`Note:
Loading a model from its configuration file does `),JFe=n(_Y,"STRONG",{});var S3t=s(JFe);Rkr=r(S3t,"not"),S3t.forEach(t),Bkr=r(_Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=n(_Y,"A",{href:!0});var R3t=s(eU);Pkr=r(R3t,"from_pretrained()"),R3t.forEach(t),$kr=r(_Y," to load the model weights."),_Y.forEach(t),Ikr=i(Si),YFe=n(Si,"P",{});var B3t=s(YFe);qkr=r(B3t,"Examples:"),B3t.forEach(t),Nkr=i(Si),m(J8.$$.fragment,Si),Si.forEach(t),jkr=i(ki),Po=n(ki,"DIV",{class:!0});var $a=s(Po);m(Y8.$$.fragment,$a),Dkr=i($a),KFe=n($a,"P",{});var P3t=s(KFe);Gkr=r(P3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),P3t.forEach(t),Okr=i($a),qn=n($a,"P",{});var L3=s(qn);Vkr=r(L3,"The model class to instantiate is selected based on the "),ZFe=n(L3,"CODE",{});var $3t=s(ZFe);Xkr=r($3t,"model_type"),$3t.forEach(t),zkr=r(L3,` property of the config object (either
passed as an argument or loaded from `),eTe=n(L3,"CODE",{});var I3t=s(eTe);Qkr=r(I3t,"pretrained_model_name_or_path"),I3t.forEach(t),Wkr=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(L3,"CODE",{});var q3t=s(oTe);Hkr=r(q3t,"pretrained_model_name_or_path"),q3t.forEach(t),Ukr=r(L3,":"),L3.forEach(t),Jkr=i($a),Be=n($a,"UL",{});var Oo=s(Be);dE=n(Oo,"LI",{});var PRe=s(dE);rTe=n(PRe,"STRONG",{});var N3t=s(rTe);Ykr=r(N3t,"albert"),N3t.forEach(t),Kkr=r(PRe," \u2014 "),oU=n(PRe,"A",{href:!0});var j3t=s(oU);Zkr=r(j3t,"FlaxAlbertForTokenClassification"),j3t.forEach(t),eSr=r(PRe," (ALBERT model)"),PRe.forEach(t),oSr=i(Oo),cE=n(Oo,"LI",{});var $Re=s(cE);tTe=n($Re,"STRONG",{});var D3t=s(tTe);rSr=r(D3t,"bert"),D3t.forEach(t),tSr=r($Re," \u2014 "),rU=n($Re,"A",{href:!0});var G3t=s(rU);aSr=r(G3t,"FlaxBertForTokenClassification"),G3t.forEach(t),nSr=r($Re," (BERT model)"),$Re.forEach(t),sSr=i(Oo),fE=n(Oo,"LI",{});var IRe=s(fE);aTe=n(IRe,"STRONG",{});var O3t=s(aTe);lSr=r(O3t,"big_bird"),O3t.forEach(t),iSr=r(IRe," \u2014 "),tU=n(IRe,"A",{href:!0});var V3t=s(tU);dSr=r(V3t,"FlaxBigBirdForTokenClassification"),V3t.forEach(t),cSr=r(IRe," (BigBird model)"),IRe.forEach(t),fSr=i(Oo),mE=n(Oo,"LI",{});var qRe=s(mE);nTe=n(qRe,"STRONG",{});var X3t=s(nTe);mSr=r(X3t,"distilbert"),X3t.forEach(t),gSr=r(qRe," \u2014 "),aU=n(qRe,"A",{href:!0});var z3t=s(aU);hSr=r(z3t,"FlaxDistilBertForTokenClassification"),z3t.forEach(t),pSr=r(qRe," (DistilBERT model)"),qRe.forEach(t),_Sr=i(Oo),gE=n(Oo,"LI",{});var NRe=s(gE);sTe=n(NRe,"STRONG",{});var Q3t=s(sTe);uSr=r(Q3t,"electra"),Q3t.forEach(t),bSr=r(NRe," \u2014 "),nU=n(NRe,"A",{href:!0});var W3t=s(nU);vSr=r(W3t,"FlaxElectraForTokenClassification"),W3t.forEach(t),FSr=r(NRe," (ELECTRA model)"),NRe.forEach(t),TSr=i(Oo),hE=n(Oo,"LI",{});var jRe=s(hE);lTe=n(jRe,"STRONG",{});var H3t=s(lTe);MSr=r(H3t,"roberta"),H3t.forEach(t),ESr=r(jRe," \u2014 "),sU=n(jRe,"A",{href:!0});var U3t=s(sU);CSr=r(U3t,"FlaxRobertaForTokenClassification"),U3t.forEach(t),wSr=r(jRe," (RoBERTa model)"),jRe.forEach(t),ASr=i(Oo),pE=n(Oo,"LI",{});var DRe=s(pE);iTe=n(DRe,"STRONG",{});var J3t=s(iTe);ySr=r(J3t,"roformer"),J3t.forEach(t),LSr=r(DRe," \u2014 "),lU=n(DRe,"A",{href:!0});var Y3t=s(lU);xSr=r(Y3t,"FlaxRoFormerForTokenClassification"),Y3t.forEach(t),kSr=r(DRe," (RoFormer model)"),DRe.forEach(t),SSr=i(Oo),_E=n(Oo,"LI",{});var GRe=s(_E);dTe=n(GRe,"STRONG",{});var K3t=s(dTe);RSr=r(K3t,"xlm-roberta"),K3t.forEach(t),BSr=r(GRe," \u2014 "),iU=n(GRe,"A",{href:!0});var Z3t=s(iU);PSr=r(Z3t,"FlaxXLMRobertaForTokenClassification"),Z3t.forEach(t),$Sr=r(GRe," (XLM-RoBERTa model)"),GRe.forEach(t),Oo.forEach(t),ISr=i($a),cTe=n($a,"P",{});var eCt=s(cTe);qSr=r(eCt,"Examples:"),eCt.forEach(t),NSr=i($a),m(K8.$$.fragment,$a),$a.forEach(t),ki.forEach(t),WPe=i(c),Af=n(c,"H2",{class:!0});var aqe=s(Af);uE=n(aqe,"A",{id:!0,class:!0,href:!0});var oCt=s(uE);fTe=n(oCt,"SPAN",{});var rCt=s(fTe);m(Z8.$$.fragment,rCt),rCt.forEach(t),oCt.forEach(t),jSr=i(aqe),mTe=n(aqe,"SPAN",{});var tCt=s(mTe);DSr=r(tCt,"FlaxAutoModelForMultipleChoice"),tCt.forEach(t),aqe.forEach(t),HPe=i(c),Dr=n(c,"DIV",{class:!0});var Ri=s(Dr);m(eL.$$.fragment,Ri),GSr=i(Ri),yf=n(Ri,"P",{});var uY=s(yf);OSr=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dU=n(uY,"A",{href:!0});var aCt=s(dU);VSr=r(aCt,"from_pretrained()"),aCt.forEach(t),XSr=r(uY," class method or the "),cU=n(uY,"A",{href:!0});var nCt=s(cU);zSr=r(nCt,"from_config()"),nCt.forEach(t),QSr=r(uY,` class
method.`),uY.forEach(t),WSr=i(Ri),oL=n(Ri,"P",{});var nqe=s(oL);HSr=r(nqe,"This class cannot be instantiated directly using "),gTe=n(nqe,"CODE",{});var sCt=s(gTe);USr=r(sCt,"__init__()"),sCt.forEach(t),JSr=r(nqe," (throws an error)."),nqe.forEach(t),YSr=i(Ri),Pt=n(Ri,"DIV",{class:!0});var Bi=s(Pt);m(rL.$$.fragment,Bi),KSr=i(Bi),hTe=n(Bi,"P",{});var lCt=s(hTe);ZSr=r(lCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lCt.forEach(t),eRr=i(Bi),Lf=n(Bi,"P",{});var bY=s(Lf);oRr=r(bY,`Note:
Loading a model from its configuration file does `),pTe=n(bY,"STRONG",{});var iCt=s(pTe);rRr=r(iCt,"not"),iCt.forEach(t),tRr=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(bY,"A",{href:!0});var dCt=s(fU);aRr=r(dCt,"from_pretrained()"),dCt.forEach(t),nRr=r(bY," to load the model weights."),bY.forEach(t),sRr=i(Bi),_Te=n(Bi,"P",{});var cCt=s(_Te);lRr=r(cCt,"Examples:"),cCt.forEach(t),iRr=i(Bi),m(tL.$$.fragment,Bi),Bi.forEach(t),dRr=i(Ri),$o=n(Ri,"DIV",{class:!0});var Ia=s($o);m(aL.$$.fragment,Ia),cRr=i(Ia),uTe=n(Ia,"P",{});var fCt=s(uTe);fRr=r(fCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fCt.forEach(t),mRr=i(Ia),Nn=n(Ia,"P",{});var x3=s(Nn);gRr=r(x3,"The model class to instantiate is selected based on the "),bTe=n(x3,"CODE",{});var mCt=s(bTe);hRr=r(mCt,"model_type"),mCt.forEach(t),pRr=r(x3,` property of the config object (either
passed as an argument or loaded from `),vTe=n(x3,"CODE",{});var gCt=s(vTe);_Rr=r(gCt,"pretrained_model_name_or_path"),gCt.forEach(t),uRr=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(x3,"CODE",{});var hCt=s(FTe);bRr=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),vRr=r(x3,":"),x3.forEach(t),FRr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);bE=n(Vo,"LI",{});var ORe=s(bE);TTe=n(ORe,"STRONG",{});var pCt=s(TTe);TRr=r(pCt,"albert"),pCt.forEach(t),MRr=r(ORe," \u2014 "),mU=n(ORe,"A",{href:!0});var _Ct=s(mU);ERr=r(_Ct,"FlaxAlbertForMultipleChoice"),_Ct.forEach(t),CRr=r(ORe," (ALBERT model)"),ORe.forEach(t),wRr=i(Vo),vE=n(Vo,"LI",{});var VRe=s(vE);MTe=n(VRe,"STRONG",{});var uCt=s(MTe);ARr=r(uCt,"bert"),uCt.forEach(t),yRr=r(VRe," \u2014 "),gU=n(VRe,"A",{href:!0});var bCt=s(gU);LRr=r(bCt,"FlaxBertForMultipleChoice"),bCt.forEach(t),xRr=r(VRe," (BERT model)"),VRe.forEach(t),kRr=i(Vo),FE=n(Vo,"LI",{});var XRe=s(FE);ETe=n(XRe,"STRONG",{});var vCt=s(ETe);SRr=r(vCt,"big_bird"),vCt.forEach(t),RRr=r(XRe," \u2014 "),hU=n(XRe,"A",{href:!0});var FCt=s(hU);BRr=r(FCt,"FlaxBigBirdForMultipleChoice"),FCt.forEach(t),PRr=r(XRe," (BigBird model)"),XRe.forEach(t),$Rr=i(Vo),TE=n(Vo,"LI",{});var zRe=s(TE);CTe=n(zRe,"STRONG",{});var TCt=s(CTe);IRr=r(TCt,"distilbert"),TCt.forEach(t),qRr=r(zRe," \u2014 "),pU=n(zRe,"A",{href:!0});var MCt=s(pU);NRr=r(MCt,"FlaxDistilBertForMultipleChoice"),MCt.forEach(t),jRr=r(zRe," (DistilBERT model)"),zRe.forEach(t),DRr=i(Vo),ME=n(Vo,"LI",{});var QRe=s(ME);wTe=n(QRe,"STRONG",{});var ECt=s(wTe);GRr=r(ECt,"electra"),ECt.forEach(t),ORr=r(QRe," \u2014 "),_U=n(QRe,"A",{href:!0});var CCt=s(_U);VRr=r(CCt,"FlaxElectraForMultipleChoice"),CCt.forEach(t),XRr=r(QRe," (ELECTRA model)"),QRe.forEach(t),zRr=i(Vo),EE=n(Vo,"LI",{});var WRe=s(EE);ATe=n(WRe,"STRONG",{});var wCt=s(ATe);QRr=r(wCt,"roberta"),wCt.forEach(t),WRr=r(WRe," \u2014 "),uU=n(WRe,"A",{href:!0});var ACt=s(uU);HRr=r(ACt,"FlaxRobertaForMultipleChoice"),ACt.forEach(t),URr=r(WRe," (RoBERTa model)"),WRe.forEach(t),JRr=i(Vo),CE=n(Vo,"LI",{});var HRe=s(CE);yTe=n(HRe,"STRONG",{});var yCt=s(yTe);YRr=r(yCt,"roformer"),yCt.forEach(t),KRr=r(HRe," \u2014 "),bU=n(HRe,"A",{href:!0});var LCt=s(bU);ZRr=r(LCt,"FlaxRoFormerForMultipleChoice"),LCt.forEach(t),eBr=r(HRe," (RoFormer model)"),HRe.forEach(t),oBr=i(Vo),wE=n(Vo,"LI",{});var URe=s(wE);LTe=n(URe,"STRONG",{});var xCt=s(LTe);rBr=r(xCt,"xlm-roberta"),xCt.forEach(t),tBr=r(URe," \u2014 "),vU=n(URe,"A",{href:!0});var kCt=s(vU);aBr=r(kCt,"FlaxXLMRobertaForMultipleChoice"),kCt.forEach(t),nBr=r(URe," (XLM-RoBERTa model)"),URe.forEach(t),Vo.forEach(t),sBr=i(Ia),xTe=n(Ia,"P",{});var SCt=s(xTe);lBr=r(SCt,"Examples:"),SCt.forEach(t),iBr=i(Ia),m(nL.$$.fragment,Ia),Ia.forEach(t),Ri.forEach(t),UPe=i(c),xf=n(c,"H2",{class:!0});var sqe=s(xf);AE=n(sqe,"A",{id:!0,class:!0,href:!0});var RCt=s(AE);kTe=n(RCt,"SPAN",{});var BCt=s(kTe);m(sL.$$.fragment,BCt),BCt.forEach(t),RCt.forEach(t),dBr=i(sqe),STe=n(sqe,"SPAN",{});var PCt=s(STe);cBr=r(PCt,"FlaxAutoModelForNextSentencePrediction"),PCt.forEach(t),sqe.forEach(t),JPe=i(c),Gr=n(c,"DIV",{class:!0});var Pi=s(Gr);m(lL.$$.fragment,Pi),fBr=i(Pi),kf=n(Pi,"P",{});var vY=s(kf);mBr=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FU=n(vY,"A",{href:!0});var $Ct=s(FU);gBr=r($Ct,"from_pretrained()"),$Ct.forEach(t),hBr=r(vY," class method or the "),TU=n(vY,"A",{href:!0});var ICt=s(TU);pBr=r(ICt,"from_config()"),ICt.forEach(t),_Br=r(vY,` class
method.`),vY.forEach(t),uBr=i(Pi),iL=n(Pi,"P",{});var lqe=s(iL);bBr=r(lqe,"This class cannot be instantiated directly using "),RTe=n(lqe,"CODE",{});var qCt=s(RTe);vBr=r(qCt,"__init__()"),qCt.forEach(t),FBr=r(lqe," (throws an error)."),lqe.forEach(t),TBr=i(Pi),$t=n(Pi,"DIV",{class:!0});var $i=s($t);m(dL.$$.fragment,$i),MBr=i($i),BTe=n($i,"P",{});var NCt=s(BTe);EBr=r(NCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NCt.forEach(t),CBr=i($i),Sf=n($i,"P",{});var FY=s(Sf);wBr=r(FY,`Note:
Loading a model from its configuration file does `),PTe=n(FY,"STRONG",{});var jCt=s(PTe);ABr=r(jCt,"not"),jCt.forEach(t),yBr=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(FY,"A",{href:!0});var DCt=s(MU);LBr=r(DCt,"from_pretrained()"),DCt.forEach(t),xBr=r(FY," to load the model weights."),FY.forEach(t),kBr=i($i),$Te=n($i,"P",{});var GCt=s($Te);SBr=r(GCt,"Examples:"),GCt.forEach(t),RBr=i($i),m(cL.$$.fragment,$i),$i.forEach(t),BBr=i(Pi),Io=n(Pi,"DIV",{class:!0});var qa=s(Io);m(fL.$$.fragment,qa),PBr=i(qa),ITe=n(qa,"P",{});var OCt=s(ITe);$Br=r(OCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),OCt.forEach(t),IBr=i(qa),jn=n(qa,"P",{});var k3=s(jn);qBr=r(k3,"The model class to instantiate is selected based on the "),qTe=n(k3,"CODE",{});var VCt=s(qTe);NBr=r(VCt,"model_type"),VCt.forEach(t),jBr=r(k3,` property of the config object (either
passed as an argument or loaded from `),NTe=n(k3,"CODE",{});var XCt=s(NTe);DBr=r(XCt,"pretrained_model_name_or_path"),XCt.forEach(t),GBr=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=n(k3,"CODE",{});var zCt=s(jTe);OBr=r(zCt,"pretrained_model_name_or_path"),zCt.forEach(t),VBr=r(k3,":"),k3.forEach(t),XBr=i(qa),DTe=n(qa,"UL",{});var QCt=s(DTe);yE=n(QCt,"LI",{});var JRe=s(yE);GTe=n(JRe,"STRONG",{});var WCt=s(GTe);zBr=r(WCt,"bert"),WCt.forEach(t),QBr=r(JRe," \u2014 "),EU=n(JRe,"A",{href:!0});var HCt=s(EU);WBr=r(HCt,"FlaxBertForNextSentencePrediction"),HCt.forEach(t),HBr=r(JRe," (BERT model)"),JRe.forEach(t),QCt.forEach(t),UBr=i(qa),OTe=n(qa,"P",{});var UCt=s(OTe);JBr=r(UCt,"Examples:"),UCt.forEach(t),YBr=i(qa),m(mL.$$.fragment,qa),qa.forEach(t),Pi.forEach(t),YPe=i(c),Rf=n(c,"H2",{class:!0});var iqe=s(Rf);LE=n(iqe,"A",{id:!0,class:!0,href:!0});var JCt=s(LE);VTe=n(JCt,"SPAN",{});var YCt=s(VTe);m(gL.$$.fragment,YCt),YCt.forEach(t),JCt.forEach(t),KBr=i(iqe),XTe=n(iqe,"SPAN",{});var KCt=s(XTe);ZBr=r(KCt,"FlaxAutoModelForImageClassification"),KCt.forEach(t),iqe.forEach(t),KPe=i(c),Or=n(c,"DIV",{class:!0});var Ii=s(Or);m(hL.$$.fragment,Ii),ePr=i(Ii),Bf=n(Ii,"P",{});var TY=s(Bf);oPr=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CU=n(TY,"A",{href:!0});var ZCt=s(CU);rPr=r(ZCt,"from_pretrained()"),ZCt.forEach(t),tPr=r(TY," class method or the "),wU=n(TY,"A",{href:!0});var ewt=s(wU);aPr=r(ewt,"from_config()"),ewt.forEach(t),nPr=r(TY,` class
method.`),TY.forEach(t),sPr=i(Ii),pL=n(Ii,"P",{});var dqe=s(pL);lPr=r(dqe,"This class cannot be instantiated directly using "),zTe=n(dqe,"CODE",{});var owt=s(zTe);iPr=r(owt,"__init__()"),owt.forEach(t),dPr=r(dqe," (throws an error)."),dqe.forEach(t),cPr=i(Ii),It=n(Ii,"DIV",{class:!0});var qi=s(It);m(_L.$$.fragment,qi),fPr=i(qi),QTe=n(qi,"P",{});var rwt=s(QTe);mPr=r(rwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rwt.forEach(t),gPr=i(qi),Pf=n(qi,"P",{});var MY=s(Pf);hPr=r(MY,`Note:
Loading a model from its configuration file does `),WTe=n(MY,"STRONG",{});var twt=s(WTe);pPr=r(twt,"not"),twt.forEach(t),_Pr=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(MY,"A",{href:!0});var awt=s(AU);uPr=r(awt,"from_pretrained()"),awt.forEach(t),bPr=r(MY," to load the model weights."),MY.forEach(t),vPr=i(qi),HTe=n(qi,"P",{});var nwt=s(HTe);FPr=r(nwt,"Examples:"),nwt.forEach(t),TPr=i(qi),m(uL.$$.fragment,qi),qi.forEach(t),MPr=i(Ii),qo=n(Ii,"DIV",{class:!0});var Na=s(qo);m(bL.$$.fragment,Na),EPr=i(Na),UTe=n(Na,"P",{});var swt=s(UTe);CPr=r(swt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),swt.forEach(t),wPr=i(Na),Dn=n(Na,"P",{});var S3=s(Dn);APr=r(S3,"The model class to instantiate is selected based on the "),JTe=n(S3,"CODE",{});var lwt=s(JTe);yPr=r(lwt,"model_type"),lwt.forEach(t),LPr=r(S3,` property of the config object (either
passed as an argument or loaded from `),YTe=n(S3,"CODE",{});var iwt=s(YTe);xPr=r(iwt,"pretrained_model_name_or_path"),iwt.forEach(t),kPr=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=n(S3,"CODE",{});var dwt=s(KTe);SPr=r(dwt,"pretrained_model_name_or_path"),dwt.forEach(t),RPr=r(S3,":"),S3.forEach(t),BPr=i(Na),vL=n(Na,"UL",{});var cqe=s(vL);xE=n(cqe,"LI",{});var YRe=s(xE);ZTe=n(YRe,"STRONG",{});var cwt=s(ZTe);PPr=r(cwt,"beit"),cwt.forEach(t),$Pr=r(YRe," \u2014 "),yU=n(YRe,"A",{href:!0});var fwt=s(yU);IPr=r(fwt,"FlaxBeitForImageClassification"),fwt.forEach(t),qPr=r(YRe," (BEiT model)"),YRe.forEach(t),NPr=i(cqe),kE=n(cqe,"LI",{});var KRe=s(kE);e9e=n(KRe,"STRONG",{});var mwt=s(e9e);jPr=r(mwt,"vit"),mwt.forEach(t),DPr=r(KRe," \u2014 "),LU=n(KRe,"A",{href:!0});var gwt=s(LU);GPr=r(gwt,"FlaxViTForImageClassification"),gwt.forEach(t),OPr=r(KRe," (ViT model)"),KRe.forEach(t),cqe.forEach(t),VPr=i(Na),o9e=n(Na,"P",{});var hwt=s(o9e);XPr=r(hwt,"Examples:"),hwt.forEach(t),zPr=i(Na),m(FL.$$.fragment,Na),Na.forEach(t),Ii.forEach(t),ZPe=i(c),$f=n(c,"H2",{class:!0});var fqe=s($f);SE=n(fqe,"A",{id:!0,class:!0,href:!0});var pwt=s(SE);r9e=n(pwt,"SPAN",{});var _wt=s(r9e);m(TL.$$.fragment,_wt),_wt.forEach(t),pwt.forEach(t),QPr=i(fqe),t9e=n(fqe,"SPAN",{});var uwt=s(t9e);WPr=r(uwt,"FlaxAutoModelForVision2Seq"),uwt.forEach(t),fqe.forEach(t),e$e=i(c),Vr=n(c,"DIV",{class:!0});var Ni=s(Vr);m(ML.$$.fragment,Ni),HPr=i(Ni),If=n(Ni,"P",{});var EY=s(If);UPr=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),xU=n(EY,"A",{href:!0});var bwt=s(xU);JPr=r(bwt,"from_pretrained()"),bwt.forEach(t),YPr=r(EY," class method or the "),kU=n(EY,"A",{href:!0});var vwt=s(kU);KPr=r(vwt,"from_config()"),vwt.forEach(t),ZPr=r(EY,` class
method.`),EY.forEach(t),e$r=i(Ni),EL=n(Ni,"P",{});var mqe=s(EL);o$r=r(mqe,"This class cannot be instantiated directly using "),a9e=n(mqe,"CODE",{});var Fwt=s(a9e);r$r=r(Fwt,"__init__()"),Fwt.forEach(t),t$r=r(mqe," (throws an error)."),mqe.forEach(t),a$r=i(Ni),qt=n(Ni,"DIV",{class:!0});var ji=s(qt);m(CL.$$.fragment,ji),n$r=i(ji),n9e=n(ji,"P",{});var Twt=s(n9e);s$r=r(Twt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Twt.forEach(t),l$r=i(ji),qf=n(ji,"P",{});var CY=s(qf);i$r=r(CY,`Note:
Loading a model from its configuration file does `),s9e=n(CY,"STRONG",{});var Mwt=s(s9e);d$r=r(Mwt,"not"),Mwt.forEach(t),c$r=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(CY,"A",{href:!0});var Ewt=s(SU);f$r=r(Ewt,"from_pretrained()"),Ewt.forEach(t),m$r=r(CY," to load the model weights."),CY.forEach(t),g$r=i(ji),l9e=n(ji,"P",{});var Cwt=s(l9e);h$r=r(Cwt,"Examples:"),Cwt.forEach(t),p$r=i(ji),m(wL.$$.fragment,ji),ji.forEach(t),_$r=i(Ni),No=n(Ni,"DIV",{class:!0});var ja=s(No);m(AL.$$.fragment,ja),u$r=i(ja),i9e=n(ja,"P",{});var wwt=s(i9e);b$r=r(wwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wwt.forEach(t),v$r=i(ja),Gn=n(ja,"P",{});var R3=s(Gn);F$r=r(R3,"The model class to instantiate is selected based on the "),d9e=n(R3,"CODE",{});var Awt=s(d9e);T$r=r(Awt,"model_type"),Awt.forEach(t),M$r=r(R3,` property of the config object (either
passed as an argument or loaded from `),c9e=n(R3,"CODE",{});var ywt=s(c9e);E$r=r(ywt,"pretrained_model_name_or_path"),ywt.forEach(t),C$r=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=n(R3,"CODE",{});var Lwt=s(f9e);w$r=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),A$r=r(R3,":"),R3.forEach(t),y$r=i(ja),m9e=n(ja,"UL",{});var xwt=s(m9e);RE=n(xwt,"LI",{});var ZRe=s(RE);g9e=n(ZRe,"STRONG",{});var kwt=s(g9e);L$r=r(kwt,"vision-encoder-decoder"),kwt.forEach(t),x$r=r(ZRe," \u2014 "),RU=n(ZRe,"A",{href:!0});var Swt=s(RU);k$r=r(Swt,"FlaxVisionEncoderDecoderModel"),Swt.forEach(t),S$r=r(ZRe," (Vision Encoder decoder model)"),ZRe.forEach(t),xwt.forEach(t),R$r=i(ja),h9e=n(ja,"P",{});var Rwt=s(h9e);B$r=r(Rwt,"Examples:"),Rwt.forEach(t),P$r=i(ja),m(yL.$$.fragment,ja),ja.forEach(t),Ni.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(Owt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(ce,"class","relative group"),d(On,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoTokenizer"),d(Qi,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertModel"),d(Xf,"id","extending-the-auto-classes"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#extending-the-auto-classes"),d(Wi,"class","relative group"),d(Qf,"id","transformers.AutoConfig"),d(Qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qf,"href","#transformers.AutoConfig"),d(Hi,"class","relative group"),d(P7,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d($7,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig"),d(I7,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig"),d(q7,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig"),d(N7,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig"),d(j7,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(D7,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig"),d(G7,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(O7,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(V7,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(X7,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig"),d(z7,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig"),d(Q7,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig"),d(W7,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig"),d(H7,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig"),d(U7,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig"),d(J7,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(Y7,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(K7,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(Z7,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig"),d(ex,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(ox,"href","/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(rx,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig"),d(tx,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig"),d(ax,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig"),d(nx,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRConfig"),d(sx,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTConfig"),d(lx,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig"),d(ix,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(dx,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig"),d(cx,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig"),d(fx,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig"),d(mx,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig"),d(gx,"href","/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNConfig"),d(hx,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config"),d(px,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(_x,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),d(ux,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig"),d(bx,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig"),d(vx,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig"),d(Fx,"href","/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Tx,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Mx,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(Ex,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig"),d(Cx,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig"),d(wx,"href","/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeConfig"),d(Ax,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig"),d(yx,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Config"),d(Lx,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig"),d(xx,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(kx,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig"),d(Sx,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Rx,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Bx,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig"),d(Px,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config"),d($x,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Ix,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(qx,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig"),d(Nx,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig"),d(jx,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig"),d(Dx,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Gx,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Ox,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Vx,"href","/docs/transformers/pr_16659/en/model_doc/rag#transformers.RagConfig"),d(Xx,"href","/docs/transformers/pr_16659/en/model_doc/realm#transformers.RealmConfig"),d(zx,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig"),d(Qx,"href","/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetConfig"),d(Wx,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig"),d(Hx,"href","/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetConfig"),d(Ux,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertConfig"),d(Jx,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig"),d(Yx,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig"),d(Kx,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig"),d(Zx,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig"),d(ek,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig"),d(ok,"href","/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(rk,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(tk,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(ak,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterConfig"),d(nk,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(sk,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig"),d(lk,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config"),d(ik,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig"),d(dk,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig"),d(ck,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(fk,"href","/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRConfig"),d(mk,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(gk,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(hk,"href","/docs/transformers/pr_16659/en/model_doc/van#transformers.VanConfig"),d(pk,"href","/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltConfig"),d(_k,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(uk,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(bk,"href","/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(vk,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig"),d(Fk,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Tk,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Mk,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig"),d(Ek,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig"),d(Ck,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig"),d(wk,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Ak,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(yk,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(Lk,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig"),d(xk,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vg,"id","transformers.AutoTokenizer"),d(Vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vg,"href","#transformers.AutoTokenizer"),d(Ji,"class","relative group"),d(kk,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Sk,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizer"),d(Rk,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Bk,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartTokenizer"),d(Pk,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartTokenizerFast"),d($k,"href","/docs/transformers/pr_16659/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Ik,"href","/docs/transformers/pr_16659/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(qk,"href","/docs/transformers/pr_16659/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Nk,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizer"),d(jk,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Gk,"href","/docs/transformers/pr_16659/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Ok,"href","/docs/transformers/pr_16659/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Vk,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Xk,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(zk,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Qk,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Wk,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Hk,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Uk,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Jk,"href","/docs/transformers/pr_16659/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Yk,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Kk,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Zk,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineTokenizer"),d(eS,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPTokenizer"),d(oS,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(rS,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(tS,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(aS,"href","/docs/transformers/pr_16659/en/model_doc/cpm#transformers.CpmTokenizer"),d(nS,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(sS,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaTokenizer"),d(lS,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(iS,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(dS,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(cS,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(fS,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(mS,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(gS,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(hS,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraTokenizer"),d(pS,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(_S,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(uS,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetTokenizer"),d(bS,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(vS,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(FS,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelTokenizer"),d(TS,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(MS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(ES,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(CS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(wS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(AS,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizer"),d(yS,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),d(LS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(xS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(kS,"href","/docs/transformers/pr_16659/en/model_doc/herbert#transformers.HerbertTokenizer"),d(SS,"href","/docs/transformers/pr_16659/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(RS,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(BS,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizer"),d(PS,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d($S,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(IS,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(qS,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(NS,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(jS,"href","/docs/transformers/pr_16659/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(DS,"href","/docs/transformers/pr_16659/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(GS,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDTokenizer"),d(OS,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDTokenizerFast"),d(VS,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerTokenizer"),d(XS,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(zS,"href","/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeTokenizer"),d(QS,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(WS,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(HS,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(US,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianTokenizer"),d(JS,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartTokenizer"),d(YS,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(KS,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(ZS,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(eR,"href","/docs/transformers/pr_16659/en/model_doc/mluke#transformers.MLukeTokenizer"),d(oR,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(rR,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(tR,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(aR,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(nR,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.T5Tokenizer"),d(sR,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.T5TokenizerFast"),d(lR,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(iR,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(dR,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(cR,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(fR,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(mR,"href","/docs/transformers/pr_16659/en/model_doc/phobert#transformers.PhobertTokenizer"),d(gR,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartTokenizer"),d(hR,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(pR,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizer"),d(_R,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizerFast"),d(uR,"href","/docs/transformers/pr_16659/en/model_doc/rag#transformers.RagTokenizer"),d(bR,"href","/docs/transformers/pr_16659/en/model_doc/realm#transformers.RealmTokenizer"),d(vR,"href","/docs/transformers/pr_16659/en/model_doc/realm#transformers.RealmTokenizerFast"),d(FR,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerTokenizer"),d(TR,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(MR,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertTokenizer"),d(ER,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(CR,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(wR,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(AR,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizer"),d(yR,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(LR,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(xR,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(kR,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(SR,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(RR,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterTokenizer"),d(BR,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(PR,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d($R,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(IR,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.T5Tokenizer"),d(qR,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.T5TokenizerFast"),d(NR,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasTokenizer"),d(jR,"href","/docs/transformers/pr_16659/en/model_doc/tapex#transformers.TapexTokenizer"),d(DR,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(GR,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(OR,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(VR,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMTokenizer"),d(XR,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(zR,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMTokenizer"),d(QR,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(WR,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(HR,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(UR,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(JR,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fh,"id","transformers.AutoFeatureExtractor"),d(Fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Fh,"href","#transformers.AutoFeatureExtractor"),d(Yi,"class","relative group"),d(YR,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(KR,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(eB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(oB,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(rB,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(tB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(aB,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(nB,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(sB,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(lB,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(iB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(dB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(cB,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(fB,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(mB,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(gB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(hB,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(pB,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(_B,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oh,"id","transformers.AutoProcessor"),d(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oh,"href","#transformers.AutoProcessor"),d(Ki,"class","relative group"),d(uB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(bB,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPProcessor"),d(vB,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(FB,"href","/docs/transformers/pr_16659/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(TB,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(MB,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(EB,"href","/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRProcessor"),d(CB,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(wB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zh,"id","transformers.AutoModel"),d(Zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zh,"href","#transformers.AutoModel"),d(ed,"class","relative group"),d(AB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xB,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertModel"),d(kB,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartModel"),d(SB,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitModel"),d(RB,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertModel"),d(BB,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(PB,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdModel"),d($B,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(IB,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(qB,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(NB,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertModel"),d(jB,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineModel"),d(DB,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPModel"),d(GB,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertModel"),d(OB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextModel"),d(VB,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLModel"),d(XB,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(zB,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(QB,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(WB,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaModel"),d(HB,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(UB,"href","/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(JB,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTModel"),d(YB,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrModel"),d(KB,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertModel"),d(ZB,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(eP,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTModel"),d(oP,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraModel"),d(rP,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertModel"),d(tP,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetModel"),d(aP,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTModel"),d(nP,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelModel"),d(sP,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelBaseModel"),d(lP,"href","/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNModel"),d(iP,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Model"),d(dP,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(cP,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),d(fP,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJModel"),d(mP,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertModel"),d(gP,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertModel"),d(hP,"href","/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(pP,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(_P,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(uP,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDModel"),d(bP,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerModel"),d(vP,"href","/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeModel"),d(FP,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertModel"),d(TP,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Model"),d(MP,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianModel"),d(EP,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerModel"),d(CP,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartModel"),d(wP,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(AP,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertModel"),d(yP,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetModel"),d(LP,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Model"),d(xP,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerModel"),d(kP,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(SP,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusModel"),d(RP,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverModel"),d(BP,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartModel"),d(PP,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerModel"),d($P,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(IP,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertModel"),d(qP,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModel"),d(NP,"href","/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetModel"),d(jP,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertModel"),d(DP,"href","/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetModel"),d(GP,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel"),d(OP,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaModel"),d(VP,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerModel"),d(XP,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerModel"),d(zP,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWModel"),d(QP,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDModel"),d(WP,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(HP,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterModel"),d(UP,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(JP,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinModel"),d(YP,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Model"),d(KP,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasModel"),d(ZP,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(e$,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechModel"),d(o$,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(r$,"href","/docs/transformers/pr_16659/en/model_doc/van#transformers.VanModel"),d(t$,"href","/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltModel"),d(a$,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(n$,"href","/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertModel"),d(s$,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTModel"),d(l$,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(i$,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(d$,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMModel"),d(c$,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMModel"),d(f$,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMModel"),d(m$,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(g$,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(h$,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(p$,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetModel"),d(_$,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G_,"id","transformers.AutoModelForPreTraining"),d(G_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G_,"href","#transformers.AutoModelForPreTraining"),d(td,"class","relative group"),d(u$,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(b$,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(v$,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F$,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForPreTraining"),d(T$,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(M$,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForPreTraining"),d(E$,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(C$,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(w$,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(A$,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(y$,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(L$,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(x$,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(k$,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForPreTraining"),d(S$,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(R$,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForPreTraining"),d(B$,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(P$,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForPreTraining"),d($$,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(I$,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(q$,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(N$,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(j$,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(D$,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(G$,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(O$,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(V$,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(X$,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel"),d(z$,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(Q$,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(W$,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(H$,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(U$,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(J$,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(Y$,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(K$,"href","/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(Z$,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(eI,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(oI,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(rI,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(tI,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(aI,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lu,"id","transformers.AutoModelForCausalLM"),d(Lu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lu,"href","#transformers.AutoModelForCausalLM"),d(sd,"class","relative group"),d(nI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iI,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForCausalLM"),d(dI,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertLMHeadModel"),d(cI,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(fI,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(mI,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(gI,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(hI,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(pI,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(_I,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(uI,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(bI,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForCausalLM"),d(vI,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(FI,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(TI,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),d(MI,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(EI,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianForCausalLM"),d(CI,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForCausalLM"),d(wI,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(AI,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(yI,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(LI,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(xI,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(kI,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(SI,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(RI,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(BI,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(PI,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d($I,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(II,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(qI,"href","/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(NI,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(jI,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(DI,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(GI,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(OI,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(VI,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m6,"id","transformers.AutoModelForMaskedLM"),d(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m6,"href","#transformers.AutoModelForMaskedLM"),d(dd,"class","relative group"),d(XI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WI,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(HI,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(UI,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMaskedLM"),d(JI,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(YI,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(KI,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(ZI,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(eq,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(oq,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(rq,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(tq,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(aq,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(nq,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(sq,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(lq,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(iq,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(dq,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(cq,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(mq,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(gq,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(hq,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(pq,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(_q,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(uq,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(bq,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(vq,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(Fq,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(Tq,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(Mq,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(Eq,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(Cq,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(wq,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(Aq,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U6,"id","transformers.AutoModelForSeq2SeqLM"),d(U6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U6,"href","#transformers.AutoModelForSeq2SeqLM"),d(md,"class","relative group"),d(yq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kq,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Sq,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(Rq,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(Bq,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(Pq,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d($q,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(Iq,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(qq,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(Nq,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianMTModel"),d(jq,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Dq,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(Gq,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Oq,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Vq,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Xq,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(zq,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Qq,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h1,"id","transformers.AutoModelForSequenceClassification"),d(h1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h1,"href","#transformers.AutoModelForSequenceClassification"),d(pd,"class","relative group"),d(Wq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Uq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jq,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(LN,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(xN,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(kN,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(SN,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(RN,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(BN,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(PN,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d($N,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(IN,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForSequenceClassification"),d(qN,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(NN,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(jN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(DN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(GN,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(ON,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(db,"id","transformers.AutoModelForMultipleChoice"),d(db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(db,"href","#transformers.AutoModelForMultipleChoice"),d(bd,"class","relative group"),d(VN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QN,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(ej,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(oj,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(rj,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(tj,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(aj,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(nj,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(sj,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(lj,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(ij,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(dj,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(cj,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(fj,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(mj,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(gj,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(hj,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(pj,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(_j,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(uj,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(bj,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(vj,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jb,"id","transformers.AutoModelForNextSentencePrediction"),d(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jb,"href","#transformers.AutoModelForNextSentencePrediction"),d(Td,"class","relative group"),d(Fj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Mj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ej,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(Cj,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(wj,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(Aj,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(yj,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qb,"id","transformers.AutoModelForTokenClassification"),d(Qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qb,"href","#transformers.AutoModelForTokenClassification"),d(Cd,"class","relative group"),d(Lj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sj,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d($j,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(qj,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(jj,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Vj,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Xj,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(zj,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Qj,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Wj,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Hj,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Uj,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Jj,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Yj,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Kj,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Zj,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(eD,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(oD,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(rD,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(tD,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(aD,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(nD,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(sD,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(lD,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(iD,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(dD,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y2,"id","transformers.AutoModelForQuestionAnswering"),d(y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y2,"href","#transformers.AutoModelForQuestionAnswering"),d(yd,"class","relative group"),d(cD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gD,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(yD,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d($D,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(ID,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(qD,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(ND,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(jD,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(DD,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(GD,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(OD,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(XD,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(HD,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(YD,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h5,"id","transformers.AutoModelForTableQuestionAnswering"),d(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h5,"href","#transformers.AutoModelForTableQuestionAnswering"),d(kd,"class","relative group"),d(KD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oG,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u5,"id","transformers.AutoModelForImageClassification"),d(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u5,"href","#transformers.AutoModelForImageClassification"),d(Bd,"class","relative group"),d(rG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nG,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForImageClassification"),d(sG,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(lG,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(iG,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassification"),d(dG,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(cG,"href","/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(fG,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(mG,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(gG,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(hG,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(pG,"href","/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(_G,"href","/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(uG,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(bG,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForImageClassification"),d(vG,"href","/docs/transformers/pr_16659/en/model_doc/van#transformers.VanForImageClassification"),d(FG,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k5,"id","transformers.AutoModelForVision2Seq"),d(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k5,"href","#transformers.AutoModelForVision2Seq"),d(Id,"class","relative group"),d(TG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CG,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(B5,"id","transformers.AutoModelForAudioClassification"),d(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B5,"href","#transformers.AutoModelForAudioClassification"),d(jd,"class","relative group"),d(wG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LG,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(xG,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(kG,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(SG,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(RG,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(BG,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(PG,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d($G,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V5,"id","transformers.AutoModelForAudioFrameClassification"),d(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V5,"href","#transformers.AutoModelForAudioFrameClassification"),d(Od,"class","relative group"),d(IG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jG,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(DG,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(GG,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(OG,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U5,"id","transformers.AutoModelForCTC"),d(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U5,"href","#transformers.AutoModelForCTC"),d(zd,"class","relative group"),d(VG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QG,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(WG,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForCTC"),d(HG,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForCTC"),d(UG,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForCTC"),d(JG,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(YG,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(KG,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(ZG,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Hd,"class","relative group"),d(eO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tO,"href","/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(aO,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dv,"id","transformers.AutoModelForAudioXVector"),d(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dv,"href","#transformers.AutoModelForAudioXVector"),d(Yd,"class","relative group"),d(nO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iO,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(dO,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(cO,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(fO,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pv,"id","transformers.AutoModelForMaskedImageModeling"),d(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pv,"href","#transformers.AutoModelForMaskedImageModeling"),d(ec,"class","relative group"),d(mO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pO,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(_O,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(uO,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fv,"id","transformers.AutoModelForObjectDetection"),d(Fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Fv,"href","#transformers.AutoModelForObjectDetection"),d(ac,"class","relative group"),d(bO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TO,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ev,"id","transformers.AutoModelForImageSegmentation"),d(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ev,"href","#transformers.AutoModelForImageSegmentation"),d(lc,"class","relative group"),d(MO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wO,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Av,"id","transformers.AutoModelForSemanticSegmentation"),d(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Av,"href","#transformers.AutoModelForSemanticSegmentation"),d(cc,"class","relative group"),d(AO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xO,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(kO,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(SO,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(RO,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rv,"id","transformers.AutoModelForInstanceSegmentation"),d(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rv,"href","#transformers.AutoModelForInstanceSegmentation"),d(gc,"class","relative group"),d(BO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($O,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IO,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($v,"id","transformers.TFAutoModel"),d($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($v,"href","#transformers.TFAutoModel"),d(_c,"class","relative group"),d(qO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DO,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertModel"),d(GO,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartModel"),d(OO,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertModel"),d(VO,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(XO,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(zO,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertModel"),d(QO,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.TFCLIPModel"),d(WO,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertModel"),d(HO,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextModel"),d(UO,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLModel"),d(JO,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaModel"),d(YO,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(KO,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(ZO,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(eV,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraModel"),d(oV,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(rV,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelModel"),d(tV,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(aV,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2Model"),d(nV,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJModel"),d(sV,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.TFHubertModel"),d(lV,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(iV,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDModel"),d(dV,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerModel"),d(cV,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertModel"),d(fV,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianModel"),d(mV,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartModel"),d(gV,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(hV,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetModel"),d(pV,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5Model"),d(_V,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(uV,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusModel"),d(bV,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertModel"),d(vV,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaModel"),d(FV,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerModel"),d(TV,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(MV,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5Model"),d(EV,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasModel"),d(CV,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(wV,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTModel"),d(AV,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(yV,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(LV,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMModel"),d(xV,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(kV,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wF,"id","transformers.TFAutoModelForPreTraining"),d(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wF,"href","#transformers.TFAutoModelForPreTraining"),d(vc,"class","relative group"),d(SV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PV,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d($V,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(IV,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForPreTraining"),d(qV,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(NV,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(jV,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(DV,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(GV,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(OV,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(VV,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(XV,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(zV,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(QV,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(WV,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(HV,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(UV,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(JV,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(YV,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(KV,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(ZV,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(eX,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(oX,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(rX,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UF,"id","transformers.TFAutoModelForCausalLM"),d(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UF,"href","#transformers.TFAutoModelForCausalLM"),d(Mc,"class","relative group"),d(tX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sX,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(lX,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(iX,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(dX,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(cX,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(fX,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(mX,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(gX,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(hX,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(pX,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(_X,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(uX,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iT,"id","transformers.TFAutoModelForImageClassification"),d(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iT,"href","#transformers.TFAutoModelForImageClassification"),d(wc,"class","relative group"),d(bX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TX,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(MX,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fT,"id","transformers.TFAutoModelForMaskedLM"),d(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fT,"href","#transformers.TFAutoModelForMaskedLM"),d(Lc,"class","relative group"),d(EX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AX,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(yX,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(LX,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(xX,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(kX,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(SX,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(RX,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(BX,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(PX,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d($X,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(IX,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(qX,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(NX,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(jX,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(DX,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(GX,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(OX,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(VX,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(XX,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(zX,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Sc,"class","relative group"),d(QX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UX,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(JX,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(YX,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(KX,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(ZX,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(ez,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianMTModel"),d(oz,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(rz,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(tz,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(az,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VT,"id","transformers.TFAutoModelForSequenceClassification"),d(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VT,"href","#transformers.TFAutoModelForSequenceClassification"),d(Pc,"class","relative group"),d(nz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iz,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(gz,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(hz,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(_z,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(uz,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(bz,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(vz,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(Cz,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(wz,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(Az,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(yz,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(Lz,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(xz,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(kz,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(Sz,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(Rz,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(Bz,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_9,"id","transformers.TFAutoModelForMultipleChoice"),d(_9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_9,"href","#transformers.TFAutoModelForMultipleChoice"),d(qc,"class","relative group"),d(Pz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($z,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Iz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qz,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(jz,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(zz,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Qz,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Wz,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Hz,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Uz,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Jz,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Yz,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Kz,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Zz,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P9,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(P9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Dc,"class","relative group"),d(eQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tQ,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I9,"id","transformers.TFAutoModelForTokenClassification"),d(I9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I9,"href","#transformers.TFAutoModelForTokenClassification"),d(Vc,"class","relative group"),d(aQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lQ,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(iQ,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(dQ,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(cQ,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(fQ,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(mQ,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(gQ,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(hQ,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(pQ,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(_Q,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(uQ,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(bQ,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(vQ,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(FQ,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(TQ,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(MQ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(EQ,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(CQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(wQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(AQ,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tM,"id","transformers.TFAutoModelForQuestionAnswering"),d(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tM,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Qc,"class","relative group"),d(yQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kQ,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(SQ,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(BQ,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(PQ,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(IQ,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(qQ,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(NQ,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(jQ,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(DQ,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(GQ,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(OQ,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(VQ,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(XQ,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(zQ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(QQ,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(WQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(HQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(UQ,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CM,"id","transformers.TFAutoModelForVision2Seq"),d(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CM,"href","#transformers.TFAutoModelForVision2Seq"),d(Uc,"class","relative group"),d(JQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZQ,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Kc,"class","relative group"),d(eW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tW,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LM,"id","transformers.FlaxAutoModel"),d(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LM,"href","#transformers.FlaxAutoModel"),d(of,"class","relative group"),d(aW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lW,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertModel"),d(iW,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartModel"),d(dW,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitModel"),d(cW,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertModel"),d(fW,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(mW,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(gW,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(hW,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.FlaxCLIPModel"),d(pW,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(_W,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraModel"),d(uW,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(bW,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(vW,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(FW,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianModel"),d(TW,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartModel"),d(MW,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5Model"),d(EW,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(CW,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(wW,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(AW,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5Model"),d(yW,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(LW,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTModel"),d(xW,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(kW,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(SW,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e4,"id","transformers.FlaxAutoModelForCausalLM"),d(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e4,"href","#transformers.FlaxAutoModelForCausalLM"),d(af,"class","relative group"),d(RW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($W,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(IW,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(qW,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(NW,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(jW,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(s4,"id","transformers.FlaxAutoModelForPreTraining"),d(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s4,"href","#transformers.FlaxAutoModelForPreTraining"),d(lf,"class","relative group"),d(DW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VW,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(XW,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(zW,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(QW,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(WW,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(HW,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(UW,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(JW,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(YW,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(KW,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ZW,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(eH,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v4,"id","transformers.FlaxAutoModelForMaskedLM"),d(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(ff,"class","relative group"),d(oH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aH,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(nH,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(sH,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(lH,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(iH,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(dH,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(cH,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(fH,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(mH,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(gH,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(hf,"class","relative group"),d(hH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_H,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uH,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(bH,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(vH,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(FH,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(TH,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(MH,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(EH,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(CH,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(wH,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(uf,"class","relative group"),d(AH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xH,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(kH,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(SH,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(RH,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(BH,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(PH,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d($H,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(IH,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(qH,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(NH,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(Ff,"class","relative group"),d(jH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OH,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(VH,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(XH,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(zH,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(QH,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(WH,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(HH,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(UH,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(JH,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(YH,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iE,"id","transformers.FlaxAutoModelForTokenClassification"),d(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Ef,"class","relative group"),d(KH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oU,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(rU,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(tU,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(aU,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(nU,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(sU,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(lU,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(iU,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Af,"class","relative group"),d(dU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mU,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(gU,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(hU,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(pU,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(_U,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(uU,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(bU,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(vU,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(xf,"class","relative group"),d(FU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EU,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LE,"id","transformers.FlaxAutoModelForImageClassification"),d(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LE,"href","#transformers.FlaxAutoModelForImageClassification"),d(Rf,"class","relative group"),d(CU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yU,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(LU,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SE,"id","transformers.FlaxAutoModelForVision2Seq"),d(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SE,"href","#transformers.FlaxAutoModelForVision2Seq"),d($f,"class","relative group"),d(xU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RU,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,Z),b(c,io,u),b(c,ce,u),e(ce,Ce),e(Ce,lo),g(he,lo,null),e(ce,Me),e(ce,Xo),e(Xo,Di),b(c,Df,u),b(c,fa,u),e(fa,Gi),e(fa,Oi),e(Oi,B3),e(fa,Gf),b(c,xe,u),b(c,co,u),e(co,Vi),e(co,On),e(On,P3),e(co,Vn),e(co,Xn),e(Xn,$3),e(co,Xi),e(co,zn),e(zn,I3),e(co,zi),b(c,Of,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,L7),e(ue,Qi),e(Qi,x7),e(ue,k7),b(c,zo,u),b(c,Ga,u),e(Ga,S7),e(Ga,Vf),e(Vf,R7),e(Ga,gqe),b(c,eBe,u),b(c,Wi,u),e(Wi,Xf),e(Xf,wY),g(q3,wY,null),e(Wi,hqe),e(Wi,AY),e(AY,pqe),b(c,oBe,u),b(c,Qn,u),e(Qn,_qe),e(Qn,yY),e(yY,uqe),e(Qn,bqe),e(Qn,LY),e(LY,vqe),e(Qn,Fqe),b(c,rBe,u),g(N3,c,u),b(c,tBe,u),b(c,B7,u),e(B7,Tqe),b(c,aBe,u),g(zf,c,u),b(c,nBe,u),b(c,Hi,u),e(Hi,Qf),e(Qf,xY),g(j3,xY,null),e(Hi,Mqe),e(Hi,kY),e(kY,Eqe),b(c,sBe,u),b(c,Qo,u),g(D3,Qo,null),e(Qo,Cqe),e(Qo,G3),e(G3,wqe),e(G3,P7),e(P7,Aqe),e(G3,yqe),e(Qo,Lqe),e(Qo,O3),e(O3,xqe),e(O3,SY),e(SY,kqe),e(O3,Sqe),e(Qo,Rqe),e(Qo,mo),g(V3,mo,null),e(mo,Bqe),e(mo,RY),e(RY,Pqe),e(mo,$qe),e(mo,Ui),e(Ui,Iqe),e(Ui,BY),e(BY,qqe),e(Ui,Nqe),e(Ui,PY),e(PY,jqe),e(Ui,Dqe),e(mo,Gqe),e(mo,v),e(v,Wf),e(Wf,$Y),e($Y,Oqe),e(Wf,Vqe),e(Wf,$7),e($7,Xqe),e(Wf,zqe),e(v,Qqe),e(v,Hf),e(Hf,IY),e(IY,Wqe),e(Hf,Hqe),e(Hf,I7),e(I7,Uqe),e(Hf,Jqe),e(v,Yqe),e(v,Uf),e(Uf,qY),e(qY,Kqe),e(Uf,Zqe),e(Uf,q7),e(q7,eNe),e(Uf,oNe),e(v,rNe),e(v,Jf),e(Jf,NY),e(NY,tNe),e(Jf,aNe),e(Jf,N7),e(N7,nNe),e(Jf,sNe),e(v,lNe),e(v,Yf),e(Yf,jY),e(jY,iNe),e(Yf,dNe),e(Yf,j7),e(j7,cNe),e(Yf,fNe),e(v,mNe),e(v,Kf),e(Kf,DY),e(DY,gNe),e(Kf,hNe),e(Kf,D7),e(D7,pNe),e(Kf,_Ne),e(v,uNe),e(v,Zf),e(Zf,GY),e(GY,bNe),e(Zf,vNe),e(Zf,G7),e(G7,FNe),e(Zf,TNe),e(v,MNe),e(v,em),e(em,OY),e(OY,ENe),e(em,CNe),e(em,O7),e(O7,wNe),e(em,ANe),e(v,yNe),e(v,om),e(om,VY),e(VY,LNe),e(om,xNe),e(om,V7),e(V7,kNe),e(om,SNe),e(v,RNe),e(v,rm),e(rm,XY),e(XY,BNe),e(rm,PNe),e(rm,X7),e(X7,$Ne),e(rm,INe),e(v,qNe),e(v,tm),e(tm,zY),e(zY,NNe),e(tm,jNe),e(tm,z7),e(z7,DNe),e(tm,GNe),e(v,ONe),e(v,am),e(am,QY),e(QY,VNe),e(am,XNe),e(am,Q7),e(Q7,zNe),e(am,QNe),e(v,WNe),e(v,nm),e(nm,WY),e(WY,HNe),e(nm,UNe),e(nm,W7),e(W7,JNe),e(nm,YNe),e(v,KNe),e(v,sm),e(sm,HY),e(HY,ZNe),e(sm,eje),e(sm,H7),e(H7,oje),e(sm,rje),e(v,tje),e(v,lm),e(lm,UY),e(UY,aje),e(lm,nje),e(lm,U7),e(U7,sje),e(lm,lje),e(v,ije),e(v,im),e(im,JY),e(JY,dje),e(im,cje),e(im,J7),e(J7,fje),e(im,mje),e(v,gje),e(v,dm),e(dm,YY),e(YY,hje),e(dm,pje),e(dm,Y7),e(Y7,_je),e(dm,uje),e(v,bje),e(v,cm),e(cm,KY),e(KY,vje),e(cm,Fje),e(cm,K7),e(K7,Tje),e(cm,Mje),e(v,Eje),e(v,fm),e(fm,ZY),e(ZY,Cje),e(fm,wje),e(fm,Z7),e(Z7,Aje),e(fm,yje),e(v,Lje),e(v,mm),e(mm,eK),e(eK,xje),e(mm,kje),e(mm,ex),e(ex,Sje),e(mm,Rje),e(v,Bje),e(v,gm),e(gm,oK),e(oK,Pje),e(gm,$je),e(gm,ox),e(ox,Ije),e(gm,qje),e(v,Nje),e(v,hm),e(hm,rK),e(rK,jje),e(hm,Dje),e(hm,rx),e(rx,Gje),e(hm,Oje),e(v,Vje),e(v,pm),e(pm,tK),e(tK,Xje),e(pm,zje),e(pm,tx),e(tx,Qje),e(pm,Wje),e(v,Hje),e(v,_m),e(_m,aK),e(aK,Uje),e(_m,Jje),e(_m,ax),e(ax,Yje),e(_m,Kje),e(v,Zje),e(v,um),e(um,nK),e(nK,eDe),e(um,oDe),e(um,nx),e(nx,rDe),e(um,tDe),e(v,aDe),e(v,bm),e(bm,sK),e(sK,nDe),e(bm,sDe),e(bm,sx),e(sx,lDe),e(bm,iDe),e(v,dDe),e(v,vm),e(vm,lK),e(lK,cDe),e(vm,fDe),e(vm,lx),e(lx,mDe),e(vm,gDe),e(v,hDe),e(v,Fm),e(Fm,iK),e(iK,pDe),e(Fm,_De),e(Fm,ix),e(ix,uDe),e(Fm,bDe),e(v,vDe),e(v,Tm),e(Tm,dK),e(dK,FDe),e(Tm,TDe),e(Tm,dx),e(dx,MDe),e(Tm,EDe),e(v,CDe),e(v,Mm),e(Mm,cK),e(cK,wDe),e(Mm,ADe),e(Mm,cx),e(cx,yDe),e(Mm,LDe),e(v,xDe),e(v,Em),e(Em,fK),e(fK,kDe),e(Em,SDe),e(Em,fx),e(fx,RDe),e(Em,BDe),e(v,PDe),e(v,Cm),e(Cm,mK),e(mK,$De),e(Cm,IDe),e(Cm,mx),e(mx,qDe),e(Cm,NDe),e(v,jDe),e(v,wm),e(wm,gK),e(gK,DDe),e(wm,GDe),e(wm,gx),e(gx,ODe),e(wm,VDe),e(v,XDe),e(v,Am),e(Am,hK),e(hK,zDe),e(Am,QDe),e(Am,hx),e(hx,WDe),e(Am,HDe),e(v,UDe),e(v,ym),e(ym,pK),e(pK,JDe),e(ym,YDe),e(ym,px),e(px,KDe),e(ym,ZDe),e(v,eGe),e(v,Lm),e(Lm,_K),e(_K,oGe),e(Lm,rGe),e(Lm,_x),e(_x,tGe),e(Lm,aGe),e(v,nGe),e(v,xm),e(xm,uK),e(uK,sGe),e(xm,lGe),e(xm,ux),e(ux,iGe),e(xm,dGe),e(v,cGe),e(v,km),e(km,bK),e(bK,fGe),e(km,mGe),e(km,bx),e(bx,gGe),e(km,hGe),e(v,pGe),e(v,Sm),e(Sm,vK),e(vK,_Ge),e(Sm,uGe),e(Sm,vx),e(vx,bGe),e(Sm,vGe),e(v,FGe),e(v,Rm),e(Rm,FK),e(FK,TGe),e(Rm,MGe),e(Rm,Fx),e(Fx,EGe),e(Rm,CGe),e(v,wGe),e(v,Bm),e(Bm,TK),e(TK,AGe),e(Bm,yGe),e(Bm,Tx),e(Tx,LGe),e(Bm,xGe),e(v,kGe),e(v,Pm),e(Pm,MK),e(MK,SGe),e(Pm,RGe),e(Pm,Mx),e(Mx,BGe),e(Pm,PGe),e(v,$Ge),e(v,$m),e($m,EK),e(EK,IGe),e($m,qGe),e($m,Ex),e(Ex,NGe),e($m,jGe),e(v,DGe),e(v,Im),e(Im,CK),e(CK,GGe),e(Im,OGe),e(Im,Cx),e(Cx,VGe),e(Im,XGe),e(v,zGe),e(v,qm),e(qm,wK),e(wK,QGe),e(qm,WGe),e(qm,wx),e(wx,HGe),e(qm,UGe),e(v,JGe),e(v,Nm),e(Nm,AK),e(AK,YGe),e(Nm,KGe),e(Nm,Ax),e(Ax,ZGe),e(Nm,eOe),e(v,oOe),e(v,jm),e(jm,yK),e(yK,rOe),e(jm,tOe),e(jm,yx),e(yx,aOe),e(jm,nOe),e(v,sOe),e(v,Dm),e(Dm,LK),e(LK,lOe),e(Dm,iOe),e(Dm,Lx),e(Lx,dOe),e(Dm,cOe),e(v,fOe),e(v,Gm),e(Gm,xK),e(xK,mOe),e(Gm,gOe),e(Gm,xx),e(xx,hOe),e(Gm,pOe),e(v,_Oe),e(v,Om),e(Om,kK),e(kK,uOe),e(Om,bOe),e(Om,kx),e(kx,vOe),e(Om,FOe),e(v,TOe),e(v,Vm),e(Vm,SK),e(SK,MOe),e(Vm,EOe),e(Vm,Sx),e(Sx,COe),e(Vm,wOe),e(v,AOe),e(v,Xm),e(Xm,RK),e(RK,yOe),e(Xm,LOe),e(Xm,Rx),e(Rx,xOe),e(Xm,kOe),e(v,SOe),e(v,zm),e(zm,BK),e(BK,ROe),e(zm,BOe),e(zm,Bx),e(Bx,POe),e(zm,$Oe),e(v,IOe),e(v,Qm),e(Qm,PK),e(PK,qOe),e(Qm,NOe),e(Qm,Px),e(Px,jOe),e(Qm,DOe),e(v,GOe),e(v,Wm),e(Wm,$K),e($K,OOe),e(Wm,VOe),e(Wm,$x),e($x,XOe),e(Wm,zOe),e(v,QOe),e(v,Hm),e(Hm,IK),e(IK,WOe),e(Hm,HOe),e(Hm,Ix),e(Ix,UOe),e(Hm,JOe),e(v,YOe),e(v,Um),e(Um,qK),e(qK,KOe),e(Um,ZOe),e(Um,qx),e(qx,eVe),e(Um,oVe),e(v,rVe),e(v,Jm),e(Jm,NK),e(NK,tVe),e(Jm,aVe),e(Jm,Nx),e(Nx,nVe),e(Jm,sVe),e(v,lVe),e(v,Ym),e(Ym,jK),e(jK,iVe),e(Ym,dVe),e(Ym,jx),e(jx,cVe),e(Ym,fVe),e(v,mVe),e(v,Km),e(Km,DK),e(DK,gVe),e(Km,hVe),e(Km,Dx),e(Dx,pVe),e(Km,_Ve),e(v,uVe),e(v,Zm),e(Zm,GK),e(GK,bVe),e(Zm,vVe),e(Zm,Gx),e(Gx,FVe),e(Zm,TVe),e(v,MVe),e(v,eg),e(eg,OK),e(OK,EVe),e(eg,CVe),e(eg,Ox),e(Ox,wVe),e(eg,AVe),e(v,yVe),e(v,og),e(og,VK),e(VK,LVe),e(og,xVe),e(og,Vx),e(Vx,kVe),e(og,SVe),e(v,RVe),e(v,rg),e(rg,XK),e(XK,BVe),e(rg,PVe),e(rg,Xx),e(Xx,$Ve),e(rg,IVe),e(v,qVe),e(v,tg),e(tg,zK),e(zK,NVe),e(tg,jVe),e(tg,zx),e(zx,DVe),e(tg,GVe),e(v,OVe),e(v,ag),e(ag,QK),e(QK,VVe),e(ag,XVe),e(ag,Qx),e(Qx,zVe),e(ag,QVe),e(v,WVe),e(v,ng),e(ng,WK),e(WK,HVe),e(ng,UVe),e(ng,Wx),e(Wx,JVe),e(ng,YVe),e(v,KVe),e(v,sg),e(sg,HK),e(HK,ZVe),e(sg,eXe),e(sg,Hx),e(Hx,oXe),e(sg,rXe),e(v,tXe),e(v,lg),e(lg,UK),e(UK,aXe),e(lg,nXe),e(lg,Ux),e(Ux,sXe),e(lg,lXe),e(v,iXe),e(v,ig),e(ig,JK),e(JK,dXe),e(ig,cXe),e(ig,Jx),e(Jx,fXe),e(ig,mXe),e(v,gXe),e(v,dg),e(dg,YK),e(YK,hXe),e(dg,pXe),e(dg,Yx),e(Yx,_Xe),e(dg,uXe),e(v,bXe),e(v,cg),e(cg,KK),e(KK,vXe),e(cg,FXe),e(cg,Kx),e(Kx,TXe),e(cg,MXe),e(v,EXe),e(v,fg),e(fg,ZK),e(ZK,CXe),e(fg,wXe),e(fg,Zx),e(Zx,AXe),e(fg,yXe),e(v,LXe),e(v,mg),e(mg,eZ),e(eZ,xXe),e(mg,kXe),e(mg,ek),e(ek,SXe),e(mg,RXe),e(v,BXe),e(v,gg),e(gg,oZ),e(oZ,PXe),e(gg,$Xe),e(gg,ok),e(ok,IXe),e(gg,qXe),e(v,NXe),e(v,hg),e(hg,rZ),e(rZ,jXe),e(hg,DXe),e(hg,rk),e(rk,GXe),e(hg,OXe),e(v,VXe),e(v,pg),e(pg,tZ),e(tZ,XXe),e(pg,zXe),e(pg,tk),e(tk,QXe),e(pg,WXe),e(v,HXe),e(v,_g),e(_g,aZ),e(aZ,UXe),e(_g,JXe),e(_g,ak),e(ak,YXe),e(_g,KXe),e(v,ZXe),e(v,ug),e(ug,nZ),e(nZ,eze),e(ug,oze),e(ug,nk),e(nk,rze),e(ug,tze),e(v,aze),e(v,bg),e(bg,sZ),e(sZ,nze),e(bg,sze),e(bg,sk),e(sk,lze),e(bg,ize),e(v,dze),e(v,vg),e(vg,lZ),e(lZ,cze),e(vg,fze),e(vg,lk),e(lk,mze),e(vg,gze),e(v,hze),e(v,Fg),e(Fg,iZ),e(iZ,pze),e(Fg,_ze),e(Fg,ik),e(ik,uze),e(Fg,bze),e(v,vze),e(v,Tg),e(Tg,dZ),e(dZ,Fze),e(Tg,Tze),e(Tg,dk),e(dk,Mze),e(Tg,Eze),e(v,Cze),e(v,Mg),e(Mg,cZ),e(cZ,wze),e(Mg,Aze),e(Mg,ck),e(ck,yze),e(Mg,Lze),e(v,xze),e(v,Eg),e(Eg,fZ),e(fZ,kze),e(Eg,Sze),e(Eg,fk),e(fk,Rze),e(Eg,Bze),e(v,Pze),e(v,Cg),e(Cg,mZ),e(mZ,$ze),e(Cg,Ize),e(Cg,mk),e(mk,qze),e(Cg,Nze),e(v,jze),e(v,wg),e(wg,gZ),e(gZ,Dze),e(wg,Gze),e(wg,gk),e(gk,Oze),e(wg,Vze),e(v,Xze),e(v,Ag),e(Ag,hZ),e(hZ,zze),e(Ag,Qze),e(Ag,hk),e(hk,Wze),e(Ag,Hze),e(v,Uze),e(v,yg),e(yg,pZ),e(pZ,Jze),e(yg,Yze),e(yg,pk),e(pk,Kze),e(yg,Zze),e(v,eQe),e(v,Lg),e(Lg,_Z),e(_Z,oQe),e(Lg,rQe),e(Lg,_k),e(_k,tQe),e(Lg,aQe),e(v,nQe),e(v,xg),e(xg,uZ),e(uZ,sQe),e(xg,lQe),e(xg,uk),e(uk,iQe),e(xg,dQe),e(v,cQe),e(v,kg),e(kg,bZ),e(bZ,fQe),e(kg,mQe),e(kg,bk),e(bk,gQe),e(kg,hQe),e(v,pQe),e(v,Sg),e(Sg,vZ),e(vZ,_Qe),e(Sg,uQe),e(Sg,vk),e(vk,bQe),e(Sg,vQe),e(v,FQe),e(v,Rg),e(Rg,FZ),e(FZ,TQe),e(Rg,MQe),e(Rg,Fk),e(Fk,EQe),e(Rg,CQe),e(v,wQe),e(v,Bg),e(Bg,TZ),e(TZ,AQe),e(Bg,yQe),e(Bg,Tk),e(Tk,LQe),e(Bg,xQe),e(v,kQe),e(v,Pg),e(Pg,MZ),e(MZ,SQe),e(Pg,RQe),e(Pg,Mk),e(Mk,BQe),e(Pg,PQe),e(v,$Qe),e(v,$g),e($g,EZ),e(EZ,IQe),e($g,qQe),e($g,Ek),e(Ek,NQe),e($g,jQe),e(v,DQe),e(v,Ig),e(Ig,CZ),e(CZ,GQe),e(Ig,OQe),e(Ig,Ck),e(Ck,VQe),e(Ig,XQe),e(v,zQe),e(v,qg),e(qg,wZ),e(wZ,QQe),e(qg,WQe),e(qg,wk),e(wk,HQe),e(qg,UQe),e(v,JQe),e(v,Ng),e(Ng,AZ),e(AZ,YQe),e(Ng,KQe),e(Ng,Ak),e(Ak,ZQe),e(Ng,eWe),e(v,oWe),e(v,jg),e(jg,yZ),e(yZ,rWe),e(jg,tWe),e(jg,yk),e(yk,aWe),e(jg,nWe),e(v,sWe),e(v,Dg),e(Dg,LZ),e(LZ,lWe),e(Dg,iWe),e(Dg,Lk),e(Lk,dWe),e(Dg,cWe),e(v,fWe),e(v,Gg),e(Gg,xZ),e(xZ,mWe),e(Gg,gWe),e(Gg,xk),e(xk,hWe),e(Gg,pWe),e(mo,_We),e(mo,kZ),e(kZ,uWe),e(mo,bWe),g(X3,mo,null),e(Qo,vWe),e(Qo,Og),g(z3,Og,null),e(Og,FWe),e(Og,SZ),e(SZ,TWe),b(c,lBe,u),b(c,Ji,u),e(Ji,Vg),e(Vg,RZ),g(Q3,RZ,null),e(Ji,MWe),e(Ji,BZ),e(BZ,EWe),b(c,iBe,u),b(c,Wo,u),g(W3,Wo,null),e(Wo,CWe),e(Wo,H3),e(H3,wWe),e(H3,kk),e(kk,AWe),e(H3,yWe),e(Wo,LWe),e(Wo,U3),e(U3,xWe),e(U3,PZ),e(PZ,kWe),e(U3,SWe),e(Wo,RWe),e(Wo,go),g(J3,go,null),e(go,BWe),e(go,$Z),e($Z,PWe),e(go,$We),e(go,Oa),e(Oa,IWe),e(Oa,IZ),e(IZ,qWe),e(Oa,NWe),e(Oa,qZ),e(qZ,jWe),e(Oa,DWe),e(Oa,NZ),e(NZ,GWe),e(Oa,OWe),e(go,VWe),e(go,E),e(E,Wn),e(Wn,jZ),e(jZ,XWe),e(Wn,zWe),e(Wn,Sk),e(Sk,QWe),e(Wn,WWe),e(Wn,Rk),e(Rk,HWe),e(Wn,UWe),e(E,JWe),e(E,Hn),e(Hn,DZ),e(DZ,YWe),e(Hn,KWe),e(Hn,Bk),e(Bk,ZWe),e(Hn,eHe),e(Hn,Pk),e(Pk,oHe),e(Hn,rHe),e(E,tHe),e(E,Un),e(Un,GZ),e(GZ,aHe),e(Un,nHe),e(Un,$k),e($k,sHe),e(Un,lHe),e(Un,Ik),e(Ik,iHe),e(Un,dHe),e(E,cHe),e(E,Xg),e(Xg,OZ),e(OZ,fHe),e(Xg,mHe),e(Xg,qk),e(qk,gHe),e(Xg,hHe),e(E,pHe),e(E,Jn),e(Jn,VZ),e(VZ,_He),e(Jn,uHe),e(Jn,Nk),e(Nk,bHe),e(Jn,vHe),e(Jn,jk),e(jk,FHe),e(Jn,THe),e(E,MHe),e(E,zg),e(zg,XZ),e(XZ,EHe),e(zg,CHe),e(zg,Dk),e(Dk,wHe),e(zg,AHe),e(E,yHe),e(E,Qg),e(Qg,zZ),e(zZ,LHe),e(Qg,xHe),e(Qg,Gk),e(Gk,kHe),e(Qg,SHe),e(E,RHe),e(E,Wg),e(Wg,QZ),e(QZ,BHe),e(Wg,PHe),e(Wg,Ok),e(Ok,$He),e(Wg,IHe),e(E,qHe),e(E,Yn),e(Yn,WZ),e(WZ,NHe),e(Yn,jHe),e(Yn,Vk),e(Vk,DHe),e(Yn,GHe),e(Yn,Xk),e(Xk,OHe),e(Yn,VHe),e(E,XHe),e(E,Kn),e(Kn,HZ),e(HZ,zHe),e(Kn,QHe),e(Kn,zk),e(zk,WHe),e(Kn,HHe),e(Kn,Qk),e(Qk,UHe),e(Kn,JHe),e(E,YHe),e(E,Zn),e(Zn,UZ),e(UZ,KHe),e(Zn,ZHe),e(Zn,Wk),e(Wk,eUe),e(Zn,oUe),e(Zn,Hk),e(Hk,rUe),e(Zn,tUe),e(E,aUe),e(E,Hg),e(Hg,JZ),e(JZ,nUe),e(Hg,sUe),e(Hg,Uk),e(Uk,lUe),e(Hg,iUe),e(E,dUe),e(E,Ug),e(Ug,YZ),e(YZ,cUe),e(Ug,fUe),e(Ug,Jk),e(Jk,mUe),e(Ug,gUe),e(E,hUe),e(E,es),e(es,KZ),e(KZ,pUe),e(es,_Ue),e(es,Yk),e(Yk,uUe),e(es,bUe),e(es,Kk),e(Kk,vUe),e(es,FUe),e(E,TUe),e(E,Jg),e(Jg,ZZ),e(ZZ,MUe),e(Jg,EUe),e(Jg,Zk),e(Zk,CUe),e(Jg,wUe),e(E,AUe),e(E,os),e(os,eee),e(eee,yUe),e(os,LUe),e(os,eS),e(eS,xUe),e(os,kUe),e(os,oS),e(oS,SUe),e(os,RUe),e(E,BUe),e(E,rs),e(rs,oee),e(oee,PUe),e(rs,$Ue),e(rs,rS),e(rS,IUe),e(rs,qUe),e(rs,tS),e(tS,NUe),e(rs,jUe),e(E,DUe),e(E,ts),e(ts,ree),e(ree,GUe),e(ts,OUe),e(ts,aS),e(aS,VUe),e(ts,XUe),e(ts,tee),e(tee,zUe),e(ts,QUe),e(E,WUe),e(E,Yg),e(Yg,aee),e(aee,HUe),e(Yg,UUe),e(Yg,nS),e(nS,JUe),e(Yg,YUe),e(E,KUe),e(E,as),e(as,nee),e(nee,ZUe),e(as,eJe),e(as,sS),e(sS,oJe),e(as,rJe),e(as,lS),e(lS,tJe),e(as,aJe),e(E,nJe),e(E,ns),e(ns,see),e(see,sJe),e(ns,lJe),e(ns,iS),e(iS,iJe),e(ns,dJe),e(ns,dS),e(dS,cJe),e(ns,fJe),e(E,mJe),e(E,ss),e(ss,lee),e(lee,gJe),e(ss,hJe),e(ss,cS),e(cS,pJe),e(ss,_Je),e(ss,fS),e(fS,uJe),e(ss,bJe),e(E,vJe),e(E,ls),e(ls,iee),e(iee,FJe),e(ls,TJe),e(ls,mS),e(mS,MJe),e(ls,EJe),e(ls,gS),e(gS,CJe),e(ls,wJe),e(E,AJe),e(E,is),e(is,dee),e(dee,yJe),e(is,LJe),e(is,hS),e(hS,xJe),e(is,kJe),e(is,pS),e(pS,SJe),e(is,RJe),e(E,BJe),e(E,Kg),e(Kg,cee),e(cee,PJe),e(Kg,$Je),e(Kg,_S),e(_S,IJe),e(Kg,qJe),e(E,NJe),e(E,ds),e(ds,fee),e(fee,jJe),e(ds,DJe),e(ds,uS),e(uS,GJe),e(ds,OJe),e(ds,bS),e(bS,VJe),e(ds,XJe),e(E,zJe),e(E,Zg),e(Zg,mee),e(mee,QJe),e(Zg,WJe),e(Zg,vS),e(vS,HJe),e(Zg,UJe),e(E,JJe),e(E,cs),e(cs,gee),e(gee,YJe),e(cs,KJe),e(cs,FS),e(FS,ZJe),e(cs,eYe),e(cs,TS),e(TS,oYe),e(cs,rYe),e(E,tYe),e(E,fs),e(fs,hee),e(hee,aYe),e(fs,nYe),e(fs,MS),e(MS,sYe),e(fs,lYe),e(fs,ES),e(ES,iYe),e(fs,dYe),e(E,cYe),e(E,ms),e(ms,pee),e(pee,fYe),e(ms,mYe),e(ms,CS),e(CS,gYe),e(ms,hYe),e(ms,wS),e(wS,pYe),e(ms,_Ye),e(E,uYe),e(E,gs),e(gs,_ee),e(_ee,bYe),e(gs,vYe),e(gs,AS),e(AS,FYe),e(gs,TYe),e(gs,yS),e(yS,MYe),e(gs,EYe),e(E,CYe),e(E,hs),e(hs,uee),e(uee,wYe),e(hs,AYe),e(hs,LS),e(LS,yYe),e(hs,LYe),e(hs,xS),e(xS,xYe),e(hs,kYe),e(E,SYe),e(E,ps),e(ps,bee),e(bee,RYe),e(ps,BYe),e(ps,kS),e(kS,PYe),e(ps,$Ye),e(ps,SS),e(SS,IYe),e(ps,qYe),e(E,NYe),e(E,eh),e(eh,vee),e(vee,jYe),e(eh,DYe),e(eh,RS),e(RS,GYe),e(eh,OYe),e(E,VYe),e(E,_s),e(_s,Fee),e(Fee,XYe),e(_s,zYe),e(_s,BS),e(BS,QYe),e(_s,WYe),e(_s,PS),e(PS,HYe),e(_s,UYe),e(E,JYe),e(E,us),e(us,Tee),e(Tee,YYe),e(us,KYe),e(us,$S),e($S,ZYe),e(us,eKe),e(us,IS),e(IS,oKe),e(us,rKe),e(E,tKe),e(E,bs),e(bs,Mee),e(Mee,aKe),e(bs,nKe),e(bs,qS),e(qS,sKe),e(bs,lKe),e(bs,NS),e(NS,iKe),e(bs,dKe),e(E,cKe),e(E,vs),e(vs,Eee),e(Eee,fKe),e(vs,mKe),e(vs,jS),e(jS,gKe),e(vs,hKe),e(vs,DS),e(DS,pKe),e(vs,_Ke),e(E,uKe),e(E,Fs),e(Fs,Cee),e(Cee,bKe),e(Fs,vKe),e(Fs,GS),e(GS,FKe),e(Fs,TKe),e(Fs,OS),e(OS,MKe),e(Fs,EKe),e(E,CKe),e(E,Ts),e(Ts,wee),e(wee,wKe),e(Ts,AKe),e(Ts,VS),e(VS,yKe),e(Ts,LKe),e(Ts,XS),e(XS,xKe),e(Ts,kKe),e(E,SKe),e(E,oh),e(oh,Aee),e(Aee,RKe),e(oh,BKe),e(oh,zS),e(zS,PKe),e(oh,$Ke),e(E,IKe),e(E,Ms),e(Ms,yee),e(yee,qKe),e(Ms,NKe),e(Ms,QS),e(QS,jKe),e(Ms,DKe),e(Ms,WS),e(WS,GKe),e(Ms,OKe),e(E,VKe),e(E,rh),e(rh,Lee),e(Lee,XKe),e(rh,zKe),e(rh,HS),e(HS,QKe),e(rh,WKe),e(E,HKe),e(E,th),e(th,xee),e(xee,UKe),e(th,JKe),e(th,US),e(US,YKe),e(th,KKe),e(E,ZKe),e(E,Es),e(Es,kee),e(kee,eZe),e(Es,oZe),e(Es,JS),e(JS,rZe),e(Es,tZe),e(Es,YS),e(YS,aZe),e(Es,nZe),e(E,sZe),e(E,Cs),e(Cs,See),e(See,lZe),e(Cs,iZe),e(Cs,KS),e(KS,dZe),e(Cs,cZe),e(Cs,ZS),e(ZS,fZe),e(Cs,mZe),e(E,gZe),e(E,ah),e(ah,Ree),e(Ree,hZe),e(ah,pZe),e(ah,eR),e(eR,_Ze),e(ah,uZe),e(E,bZe),e(E,ws),e(ws,Bee),e(Bee,vZe),e(ws,FZe),e(ws,oR),e(oR,TZe),e(ws,MZe),e(ws,rR),e(rR,EZe),e(ws,CZe),e(E,wZe),e(E,As),e(As,Pee),e(Pee,AZe),e(As,yZe),e(As,tR),e(tR,LZe),e(As,xZe),e(As,aR),e(aR,kZe),e(As,SZe),e(E,RZe),e(E,ys),e(ys,$ee),e($ee,BZe),e(ys,PZe),e(ys,nR),e(nR,$Ze),e(ys,IZe),e(ys,sR),e(sR,qZe),e(ys,NZe),e(E,jZe),e(E,Ls),e(Ls,Iee),e(Iee,DZe),e(Ls,GZe),e(Ls,lR),e(lR,OZe),e(Ls,VZe),e(Ls,iR),e(iR,XZe),e(Ls,zZe),e(E,QZe),e(E,xs),e(xs,qee),e(qee,WZe),e(xs,HZe),e(xs,dR),e(dR,UZe),e(xs,JZe),e(xs,cR),e(cR,YZe),e(xs,KZe),e(E,ZZe),e(E,nh),e(nh,Nee),e(Nee,eeo),e(nh,oeo),e(nh,fR),e(fR,reo),e(nh,teo),e(E,aeo),e(E,sh),e(sh,jee),e(jee,neo),e(sh,seo),e(sh,mR),e(mR,leo),e(sh,ieo),e(E,deo),e(E,lh),e(lh,Dee),e(Dee,ceo),e(lh,feo),e(lh,gR),e(gR,meo),e(lh,geo),e(E,heo),e(E,ih),e(ih,Gee),e(Gee,peo),e(ih,_eo),e(ih,hR),e(hR,ueo),e(ih,beo),e(E,veo),e(E,ks),e(ks,Oee),e(Oee,Feo),e(ks,Teo),e(ks,pR),e(pR,Meo),e(ks,Eeo),e(ks,_R),e(_R,Ceo),e(ks,weo),e(E,Aeo),e(E,dh),e(dh,Vee),e(Vee,yeo),e(dh,Leo),e(dh,uR),e(uR,xeo),e(dh,keo),e(E,Seo),e(E,Ss),e(Ss,Xee),e(Xee,Reo),e(Ss,Beo),e(Ss,bR),e(bR,Peo),e(Ss,$eo),e(Ss,vR),e(vR,Ieo),e(Ss,qeo),e(E,Neo),e(E,Rs),e(Rs,zee),e(zee,jeo),e(Rs,Deo),e(Rs,FR),e(FR,Geo),e(Rs,Oeo),e(Rs,TR),e(TR,Veo),e(Rs,Xeo),e(E,zeo),e(E,Bs),e(Bs,Qee),e(Qee,Qeo),e(Bs,Weo),e(Bs,MR),e(MR,Heo),e(Bs,Ueo),e(Bs,ER),e(ER,Jeo),e(Bs,Yeo),e(E,Keo),e(E,Ps),e(Ps,Wee),e(Wee,Zeo),e(Ps,eoo),e(Ps,CR),e(CR,ooo),e(Ps,roo),e(Ps,wR),e(wR,too),e(Ps,aoo),e(E,noo),e(E,$s),e($s,Hee),e(Hee,soo),e($s,loo),e($s,AR),e(AR,ioo),e($s,doo),e($s,yR),e(yR,coo),e($s,foo),e(E,moo),e(E,Is),e(Is,Uee),e(Uee,goo),e(Is,hoo),e(Is,LR),e(LR,poo),e(Is,_oo),e(Is,xR),e(xR,uoo),e(Is,boo),e(E,voo),e(E,ch),e(ch,Jee),e(Jee,Foo),e(ch,Too),e(ch,kR),e(kR,Moo),e(ch,Eoo),e(E,Coo),e(E,fh),e(fh,Yee),e(Yee,woo),e(fh,Aoo),e(fh,SR),e(SR,yoo),e(fh,Loo),e(E,xoo),e(E,qs),e(qs,Kee),e(Kee,koo),e(qs,Soo),e(qs,RR),e(RR,Roo),e(qs,Boo),e(qs,BR),e(BR,Poo),e(qs,$oo),e(E,Ioo),e(E,Ns),e(Ns,Zee),e(Zee,qoo),e(Ns,Noo),e(Ns,PR),e(PR,joo),e(Ns,Doo),e(Ns,$R),e($R,Goo),e(Ns,Ooo),e(E,Voo),e(E,js),e(js,eoe),e(eoe,Xoo),e(js,zoo),e(js,IR),e(IR,Qoo),e(js,Woo),e(js,qR),e(qR,Hoo),e(js,Uoo),e(E,Joo),e(E,mh),e(mh,ooe),e(ooe,Yoo),e(mh,Koo),e(mh,NR),e(NR,Zoo),e(mh,ero),e(E,oro),e(E,gh),e(gh,roe),e(roe,rro),e(gh,tro),e(gh,jR),e(jR,aro),e(gh,nro),e(E,sro),e(E,hh),e(hh,toe),e(toe,lro),e(hh,iro),e(hh,DR),e(DR,dro),e(hh,cro),e(E,fro),e(E,ph),e(ph,aoe),e(aoe,mro),e(ph,gro),e(ph,GR),e(GR,hro),e(ph,pro),e(E,_ro),e(E,_h),e(_h,noe),e(noe,uro),e(_h,bro),e(_h,OR),e(OR,vro),e(_h,Fro),e(E,Tro),e(E,Ds),e(Ds,soe),e(soe,Mro),e(Ds,Ero),e(Ds,VR),e(VR,Cro),e(Ds,wro),e(Ds,XR),e(XR,Aro),e(Ds,yro),e(E,Lro),e(E,uh),e(uh,loe),e(loe,xro),e(uh,kro),e(uh,zR),e(zR,Sro),e(uh,Rro),e(E,Bro),e(E,bh),e(bh,ioe),e(ioe,Pro),e(bh,$ro),e(bh,QR),e(QR,Iro),e(bh,qro),e(E,Nro),e(E,Gs),e(Gs,doe),e(doe,jro),e(Gs,Dro),e(Gs,WR),e(WR,Gro),e(Gs,Oro),e(Gs,HR),e(HR,Vro),e(Gs,Xro),e(E,zro),e(E,Os),e(Os,coe),e(coe,Qro),e(Os,Wro),e(Os,UR),e(UR,Hro),e(Os,Uro),e(Os,JR),e(JR,Jro),e(Os,Yro),e(go,Kro),e(go,foe),e(foe,Zro),e(go,eto),g(Y3,go,null),e(Wo,oto),e(Wo,vh),g(K3,vh,null),e(vh,rto),e(vh,moe),e(moe,tto),b(c,dBe,u),b(c,Yi,u),e(Yi,Fh),e(Fh,goe),g(Z3,goe,null),e(Yi,ato),e(Yi,hoe),e(hoe,nto),b(c,cBe,u),b(c,Ho,u),g(eC,Ho,null),e(Ho,sto),e(Ho,oC),e(oC,lto),e(oC,YR),e(YR,ito),e(oC,dto),e(Ho,cto),e(Ho,rC),e(rC,fto),e(rC,poe),e(poe,mto),e(rC,gto),e(Ho,hto),e(Ho,$e),g(tC,$e,null),e($e,pto),e($e,_oe),e(_oe,_to),e($e,uto),e($e,Va),e(Va,bto),e(Va,uoe),e(uoe,vto),e(Va,Fto),e(Va,boe),e(boe,Tto),e(Va,Mto),e(Va,voe),e(voe,Eto),e(Va,Cto),e($e,wto),e($e,ee),e(ee,Th),e(Th,Foe),e(Foe,Ato),e(Th,yto),e(Th,KR),e(KR,Lto),e(Th,xto),e(ee,kto),e(ee,Mh),e(Mh,Toe),e(Toe,Sto),e(Mh,Rto),e(Mh,ZR),e(ZR,Bto),e(Mh,Pto),e(ee,$to),e(ee,Eh),e(Eh,Moe),e(Moe,Ito),e(Eh,qto),e(Eh,eB),e(eB,Nto),e(Eh,jto),e(ee,Dto),e(ee,Ch),e(Ch,Eoe),e(Eoe,Gto),e(Ch,Oto),e(Ch,oB),e(oB,Vto),e(Ch,Xto),e(ee,zto),e(ee,wh),e(wh,Coe),e(Coe,Qto),e(wh,Wto),e(wh,rB),e(rB,Hto),e(wh,Uto),e(ee,Jto),e(ee,Ah),e(Ah,woe),e(woe,Yto),e(Ah,Kto),e(Ah,tB),e(tB,Zto),e(Ah,eao),e(ee,oao),e(ee,yh),e(yh,Aoe),e(Aoe,rao),e(yh,tao),e(yh,aB),e(aB,aao),e(yh,nao),e(ee,sao),e(ee,Lh),e(Lh,yoe),e(yoe,lao),e(Lh,iao),e(Lh,nB),e(nB,dao),e(Lh,cao),e(ee,fao),e(ee,xh),e(xh,Loe),e(Loe,mao),e(xh,gao),e(xh,sB),e(sB,hao),e(xh,pao),e(ee,_ao),e(ee,kh),e(kh,xoe),e(xoe,uao),e(kh,bao),e(kh,lB),e(lB,vao),e(kh,Fao),e(ee,Tao),e(ee,Sh),e(Sh,koe),e(koe,Mao),e(Sh,Eao),e(Sh,iB),e(iB,Cao),e(Sh,wao),e(ee,Aao),e(ee,Rh),e(Rh,Soe),e(Soe,yao),e(Rh,Lao),e(Rh,dB),e(dB,xao),e(Rh,kao),e(ee,Sao),e(ee,Bh),e(Bh,Roe),e(Roe,Rao),e(Bh,Bao),e(Bh,cB),e(cB,Pao),e(Bh,$ao),e(ee,Iao),e(ee,Ph),e(Ph,Boe),e(Boe,qao),e(Ph,Nao),e(Ph,fB),e(fB,jao),e(Ph,Dao),e(ee,Gao),e(ee,$h),e($h,Poe),e(Poe,Oao),e($h,Vao),e($h,mB),e(mB,Xao),e($h,zao),e(ee,Qao),e(ee,Ih),e(Ih,$oe),e($oe,Wao),e(Ih,Hao),e(Ih,gB),e(gB,Uao),e(Ih,Jao),e(ee,Yao),e(ee,qh),e(qh,Ioe),e(Ioe,Kao),e(qh,Zao),e(qh,hB),e(hB,eno),e(qh,ono),e(ee,rno),e(ee,Nh),e(Nh,qoe),e(qoe,tno),e(Nh,ano),e(Nh,pB),e(pB,nno),e(Nh,sno),e(ee,lno),e(ee,jh),e(jh,Noe),e(Noe,ino),e(jh,dno),e(jh,_B),e(_B,cno),e(jh,fno),e($e,mno),g(Dh,$e,null),e($e,gno),e($e,joe),e(joe,hno),e($e,pno),g(aC,$e,null),e(Ho,_no),e(Ho,Gh),g(nC,Gh,null),e(Gh,uno),e(Gh,Doe),e(Doe,bno),b(c,fBe,u),b(c,Ki,u),e(Ki,Oh),e(Oh,Goe),g(sC,Goe,null),e(Ki,vno),e(Ki,Ooe),e(Ooe,Fno),b(c,mBe,u),b(c,Uo,u),g(lC,Uo,null),e(Uo,Tno),e(Uo,iC),e(iC,Mno),e(iC,uB),e(uB,Eno),e(iC,Cno),e(Uo,wno),e(Uo,dC),e(dC,Ano),e(dC,Voe),e(Voe,yno),e(dC,Lno),e(Uo,xno),e(Uo,Ie),g(cC,Ie,null),e(Ie,kno),e(Ie,Xoe),e(Xoe,Sno),e(Ie,Rno),e(Ie,Zi),e(Zi,Bno),e(Zi,zoe),e(zoe,Pno),e(Zi,$no),e(Zi,Qoe),e(Qoe,Ino),e(Zi,qno),e(Ie,Nno),e(Ie,ke),e(ke,Vh),e(Vh,Woe),e(Woe,jno),e(Vh,Dno),e(Vh,bB),e(bB,Gno),e(Vh,Ono),e(ke,Vno),e(ke,Xh),e(Xh,Hoe),e(Hoe,Xno),e(Xh,zno),e(Xh,vB),e(vB,Qno),e(Xh,Wno),e(ke,Hno),e(ke,zh),e(zh,Uoe),e(Uoe,Uno),e(zh,Jno),e(zh,FB),e(FB,Yno),e(zh,Kno),e(ke,Zno),e(ke,Qh),e(Qh,Joe),e(Joe,eso),e(Qh,oso),e(Qh,TB),e(TB,rso),e(Qh,tso),e(ke,aso),e(ke,Wh),e(Wh,Yoe),e(Yoe,nso),e(Wh,sso),e(Wh,MB),e(MB,lso),e(Wh,iso),e(ke,dso),e(ke,Hh),e(Hh,Koe),e(Koe,cso),e(Hh,fso),e(Hh,EB),e(EB,mso),e(Hh,gso),e(ke,hso),e(ke,Uh),e(Uh,Zoe),e(Zoe,pso),e(Uh,_so),e(Uh,CB),e(CB,uso),e(Uh,bso),e(ke,vso),e(ke,Jh),e(Jh,ere),e(ere,Fso),e(Jh,Tso),e(Jh,wB),e(wB,Mso),e(Jh,Eso),e(Ie,Cso),g(Yh,Ie,null),e(Ie,wso),e(Ie,ore),e(ore,Aso),e(Ie,yso),g(fC,Ie,null),e(Uo,Lso),e(Uo,Kh),g(mC,Kh,null),e(Kh,xso),e(Kh,rre),e(rre,kso),b(c,gBe,u),b(c,ed,u),e(ed,Zh),e(Zh,tre),g(gC,tre,null),e(ed,Sso),e(ed,are),e(are,Rso),b(c,hBe,u),b(c,Jo,u),g(hC,Jo,null),e(Jo,Bso),e(Jo,od),e(od,Pso),e(od,AB),e(AB,$so),e(od,Iso),e(od,yB),e(yB,qso),e(od,Nso),e(Jo,jso),e(Jo,pC),e(pC,Dso),e(pC,nre),e(nre,Gso),e(pC,Oso),e(Jo,Vso),e(Jo,Xr),g(_C,Xr,null),e(Xr,Xso),e(Xr,sre),e(sre,zso),e(Xr,Qso),e(Xr,rd),e(rd,Wso),e(rd,lre),e(lre,Hso),e(rd,Uso),e(rd,LB),e(LB,Jso),e(rd,Yso),e(Xr,Kso),e(Xr,ire),e(ire,Zso),e(Xr,elo),g(uC,Xr,null),e(Jo,olo),e(Jo,qe),g(bC,qe,null),e(qe,rlo),e(qe,dre),e(dre,tlo),e(qe,alo),e(qe,Xa),e(Xa,nlo),e(Xa,cre),e(cre,slo),e(Xa,llo),e(Xa,fre),e(fre,ilo),e(Xa,dlo),e(Xa,mre),e(mre,clo),e(Xa,flo),e(qe,mlo),e(qe,T),e(T,ep),e(ep,gre),e(gre,glo),e(ep,hlo),e(ep,xB),e(xB,plo),e(ep,_lo),e(T,ulo),e(T,op),e(op,hre),e(hre,blo),e(op,vlo),e(op,kB),e(kB,Flo),e(op,Tlo),e(T,Mlo),e(T,rp),e(rp,pre),e(pre,Elo),e(rp,Clo),e(rp,SB),e(SB,wlo),e(rp,Alo),e(T,ylo),e(T,tp),e(tp,_re),e(_re,Llo),e(tp,xlo),e(tp,RB),e(RB,klo),e(tp,Slo),e(T,Rlo),e(T,ap),e(ap,ure),e(ure,Blo),e(ap,Plo),e(ap,BB),e(BB,$lo),e(ap,Ilo),e(T,qlo),e(T,np),e(np,bre),e(bre,Nlo),e(np,jlo),e(np,PB),e(PB,Dlo),e(np,Glo),e(T,Olo),e(T,sp),e(sp,vre),e(vre,Vlo),e(sp,Xlo),e(sp,$B),e($B,zlo),e(sp,Qlo),e(T,Wlo),e(T,lp),e(lp,Fre),e(Fre,Hlo),e(lp,Ulo),e(lp,IB),e(IB,Jlo),e(lp,Ylo),e(T,Klo),e(T,ip),e(ip,Tre),e(Tre,Zlo),e(ip,eio),e(ip,qB),e(qB,oio),e(ip,rio),e(T,tio),e(T,dp),e(dp,Mre),e(Mre,aio),e(dp,nio),e(dp,NB),e(NB,sio),e(dp,lio),e(T,iio),e(T,cp),e(cp,Ere),e(Ere,dio),e(cp,cio),e(cp,jB),e(jB,fio),e(cp,mio),e(T,gio),e(T,fp),e(fp,Cre),e(Cre,hio),e(fp,pio),e(fp,DB),e(DB,_io),e(fp,uio),e(T,bio),e(T,mp),e(mp,wre),e(wre,vio),e(mp,Fio),e(mp,GB),e(GB,Tio),e(mp,Mio),e(T,Eio),e(T,gp),e(gp,Are),e(Are,Cio),e(gp,wio),e(gp,OB),e(OB,Aio),e(gp,yio),e(T,Lio),e(T,hp),e(hp,yre),e(yre,xio),e(hp,kio),e(hp,VB),e(VB,Sio),e(hp,Rio),e(T,Bio),e(T,pp),e(pp,Lre),e(Lre,Pio),e(pp,$io),e(pp,XB),e(XB,Iio),e(pp,qio),e(T,Nio),e(T,_p),e(_p,xre),e(xre,jio),e(_p,Dio),e(_p,zB),e(zB,Gio),e(_p,Oio),e(T,Vio),e(T,up),e(up,kre),e(kre,Xio),e(up,zio),e(up,QB),e(QB,Qio),e(up,Wio),e(T,Hio),e(T,bp),e(bp,Sre),e(Sre,Uio),e(bp,Jio),e(bp,WB),e(WB,Yio),e(bp,Kio),e(T,Zio),e(T,vp),e(vp,Rre),e(Rre,edo),e(vp,odo),e(vp,HB),e(HB,rdo),e(vp,tdo),e(T,ado),e(T,Fp),e(Fp,Bre),e(Bre,ndo),e(Fp,sdo),e(Fp,UB),e(UB,ldo),e(Fp,ido),e(T,ddo),e(T,Tp),e(Tp,Pre),e(Pre,cdo),e(Tp,fdo),e(Tp,JB),e(JB,mdo),e(Tp,gdo),e(T,hdo),e(T,Mp),e(Mp,$re),e($re,pdo),e(Mp,_do),e(Mp,YB),e(YB,udo),e(Mp,bdo),e(T,vdo),e(T,Ep),e(Ep,Ire),e(Ire,Fdo),e(Ep,Tdo),e(Ep,KB),e(KB,Mdo),e(Ep,Edo),e(T,Cdo),e(T,Cp),e(Cp,qre),e(qre,wdo),e(Cp,Ado),e(Cp,ZB),e(ZB,ydo),e(Cp,Ldo),e(T,xdo),e(T,wp),e(wp,Nre),e(Nre,kdo),e(wp,Sdo),e(wp,eP),e(eP,Rdo),e(wp,Bdo),e(T,Pdo),e(T,Ap),e(Ap,jre),e(jre,$do),e(Ap,Ido),e(Ap,oP),e(oP,qdo),e(Ap,Ndo),e(T,jdo),e(T,yp),e(yp,Dre),e(Dre,Ddo),e(yp,Gdo),e(yp,rP),e(rP,Odo),e(yp,Vdo),e(T,Xdo),e(T,Lp),e(Lp,Gre),e(Gre,zdo),e(Lp,Qdo),e(Lp,tP),e(tP,Wdo),e(Lp,Hdo),e(T,Udo),e(T,xp),e(xp,Ore),e(Ore,Jdo),e(xp,Ydo),e(xp,aP),e(aP,Kdo),e(xp,Zdo),e(T,eco),e(T,Vs),e(Vs,Vre),e(Vre,oco),e(Vs,rco),e(Vs,nP),e(nP,tco),e(Vs,aco),e(Vs,sP),e(sP,nco),e(Vs,sco),e(T,lco),e(T,kp),e(kp,Xre),e(Xre,ico),e(kp,dco),e(kp,lP),e(lP,cco),e(kp,fco),e(T,mco),e(T,Sp),e(Sp,zre),e(zre,gco),e(Sp,hco),e(Sp,iP),e(iP,pco),e(Sp,_co),e(T,uco),e(T,Rp),e(Rp,Qre),e(Qre,bco),e(Rp,vco),e(Rp,dP),e(dP,Fco),e(Rp,Tco),e(T,Mco),e(T,Bp),e(Bp,Wre),e(Wre,Eco),e(Bp,Cco),e(Bp,cP),e(cP,wco),e(Bp,Aco),e(T,yco),e(T,Pp),e(Pp,Hre),e(Hre,Lco),e(Pp,xco),e(Pp,fP),e(fP,kco),e(Pp,Sco),e(T,Rco),e(T,$p),e($p,Ure),e(Ure,Bco),e($p,Pco),e($p,mP),e(mP,$co),e($p,Ico),e(T,qco),e(T,Ip),e(Ip,Jre),e(Jre,Nco),e(Ip,jco),e(Ip,gP),e(gP,Dco),e(Ip,Gco),e(T,Oco),e(T,qp),e(qp,Yre),e(Yre,Vco),e(qp,Xco),e(qp,hP),e(hP,zco),e(qp,Qco),e(T,Wco),e(T,Np),e(Np,Kre),e(Kre,Hco),e(Np,Uco),e(Np,pP),e(pP,Jco),e(Np,Yco),e(T,Kco),e(T,jp),e(jp,Zre),e(Zre,Zco),e(jp,efo),e(jp,_P),e(_P,ofo),e(jp,rfo),e(T,tfo),e(T,Dp),e(Dp,ete),e(ete,afo),e(Dp,nfo),e(Dp,uP),e(uP,sfo),e(Dp,lfo),e(T,ifo),e(T,Gp),e(Gp,ote),e(ote,dfo),e(Gp,cfo),e(Gp,bP),e(bP,ffo),e(Gp,mfo),e(T,gfo),e(T,Op),e(Op,rte),e(rte,hfo),e(Op,pfo),e(Op,vP),e(vP,_fo),e(Op,ufo),e(T,bfo),e(T,Vp),e(Vp,tte),e(tte,vfo),e(Vp,Ffo),e(Vp,FP),e(FP,Tfo),e(Vp,Mfo),e(T,Efo),e(T,Xp),e(Xp,ate),e(ate,Cfo),e(Xp,wfo),e(Xp,TP),e(TP,Afo),e(Xp,yfo),e(T,Lfo),e(T,zp),e(zp,nte),e(nte,xfo),e(zp,kfo),e(zp,MP),e(MP,Sfo),e(zp,Rfo),e(T,Bfo),e(T,Qp),e(Qp,ste),e(ste,Pfo),e(Qp,$fo),e(Qp,EP),e(EP,Ifo),e(Qp,qfo),e(T,Nfo),e(T,Wp),e(Wp,lte),e(lte,jfo),e(Wp,Dfo),e(Wp,CP),e(CP,Gfo),e(Wp,Ofo),e(T,Vfo),e(T,Hp),e(Hp,ite),e(ite,Xfo),e(Hp,zfo),e(Hp,wP),e(wP,Qfo),e(Hp,Wfo),e(T,Hfo),e(T,Up),e(Up,dte),e(dte,Ufo),e(Up,Jfo),e(Up,AP),e(AP,Yfo),e(Up,Kfo),e(T,Zfo),e(T,Jp),e(Jp,cte),e(cte,emo),e(Jp,omo),e(Jp,yP),e(yP,rmo),e(Jp,tmo),e(T,amo),e(T,Yp),e(Yp,fte),e(fte,nmo),e(Yp,smo),e(Yp,LP),e(LP,lmo),e(Yp,imo),e(T,dmo),e(T,Kp),e(Kp,mte),e(mte,cmo),e(Kp,fmo),e(Kp,xP),e(xP,mmo),e(Kp,gmo),e(T,hmo),e(T,Zp),e(Zp,gte),e(gte,pmo),e(Zp,_mo),e(Zp,kP),e(kP,umo),e(Zp,bmo),e(T,vmo),e(T,e_),e(e_,hte),e(hte,Fmo),e(e_,Tmo),e(e_,SP),e(SP,Mmo),e(e_,Emo),e(T,Cmo),e(T,o_),e(o_,pte),e(pte,wmo),e(o_,Amo),e(o_,RP),e(RP,ymo),e(o_,Lmo),e(T,xmo),e(T,r_),e(r_,_te),e(_te,kmo),e(r_,Smo),e(r_,BP),e(BP,Rmo),e(r_,Bmo),e(T,Pmo),e(T,t_),e(t_,ute),e(ute,$mo),e(t_,Imo),e(t_,PP),e(PP,qmo),e(t_,Nmo),e(T,jmo),e(T,a_),e(a_,bte),e(bte,Dmo),e(a_,Gmo),e(a_,$P),e($P,Omo),e(a_,Vmo),e(T,Xmo),e(T,n_),e(n_,vte),e(vte,zmo),e(n_,Qmo),e(n_,IP),e(IP,Wmo),e(n_,Hmo),e(T,Umo),e(T,s_),e(s_,Fte),e(Fte,Jmo),e(s_,Ymo),e(s_,qP),e(qP,Kmo),e(s_,Zmo),e(T,ego),e(T,l_),e(l_,Tte),e(Tte,ogo),e(l_,rgo),e(l_,NP),e(NP,tgo),e(l_,ago),e(T,ngo),e(T,i_),e(i_,Mte),e(Mte,sgo),e(i_,lgo),e(i_,jP),e(jP,igo),e(i_,dgo),e(T,cgo),e(T,d_),e(d_,Ete),e(Ete,fgo),e(d_,mgo),e(d_,DP),e(DP,ggo),e(d_,hgo),e(T,pgo),e(T,c_),e(c_,Cte),e(Cte,_go),e(c_,ugo),e(c_,GP),e(GP,bgo),e(c_,vgo),e(T,Fgo),e(T,f_),e(f_,wte),e(wte,Tgo),e(f_,Mgo),e(f_,OP),e(OP,Ego),e(f_,Cgo),e(T,wgo),e(T,m_),e(m_,Ate),e(Ate,Ago),e(m_,ygo),e(m_,VP),e(VP,Lgo),e(m_,xgo),e(T,kgo),e(T,g_),e(g_,yte),e(yte,Sgo),e(g_,Rgo),e(g_,XP),e(XP,Bgo),e(g_,Pgo),e(T,$go),e(T,h_),e(h_,Lte),e(Lte,Igo),e(h_,qgo),e(h_,zP),e(zP,Ngo),e(h_,jgo),e(T,Dgo),e(T,p_),e(p_,xte),e(xte,Ggo),e(p_,Ogo),e(p_,QP),e(QP,Vgo),e(p_,Xgo),e(T,zgo),e(T,__),e(__,kte),e(kte,Qgo),e(__,Wgo),e(__,WP),e(WP,Hgo),e(__,Ugo),e(T,Jgo),e(T,u_),e(u_,Ste),e(Ste,Ygo),e(u_,Kgo),e(u_,HP),e(HP,Zgo),e(u_,eho),e(T,oho),e(T,b_),e(b_,Rte),e(Rte,rho),e(b_,tho),e(b_,UP),e(UP,aho),e(b_,nho),e(T,sho),e(T,v_),e(v_,Bte),e(Bte,lho),e(v_,iho),e(v_,JP),e(JP,dho),e(v_,cho),e(T,fho),e(T,F_),e(F_,Pte),e(Pte,mho),e(F_,gho),e(F_,YP),e(YP,hho),e(F_,pho),e(T,_ho),e(T,T_),e(T_,$te),e($te,uho),e(T_,bho),e(T_,KP),e(KP,vho),e(T_,Fho),e(T,Tho),e(T,M_),e(M_,Ite),e(Ite,Mho),e(M_,Eho),e(M_,ZP),e(ZP,Cho),e(M_,who),e(T,Aho),e(T,E_),e(E_,qte),e(qte,yho),e(E_,Lho),e(E_,e$),e(e$,xho),e(E_,kho),e(T,Sho),e(T,C_),e(C_,Nte),e(Nte,Rho),e(C_,Bho),e(C_,o$),e(o$,Pho),e(C_,$ho),e(T,Iho),e(T,w_),e(w_,jte),e(jte,qho),e(w_,Nho),e(w_,r$),e(r$,jho),e(w_,Dho),e(T,Gho),e(T,A_),e(A_,Dte),e(Dte,Oho),e(A_,Vho),e(A_,t$),e(t$,Xho),e(A_,zho),e(T,Qho),e(T,y_),e(y_,Gte),e(Gte,Who),e(y_,Hho),e(y_,a$),e(a$,Uho),e(y_,Jho),e(T,Yho),e(T,L_),e(L_,Ote),e(Ote,Kho),e(L_,Zho),e(L_,n$),e(n$,epo),e(L_,opo),e(T,rpo),e(T,x_),e(x_,Vte),e(Vte,tpo),e(x_,apo),e(x_,s$),e(s$,npo),e(x_,spo),e(T,lpo),e(T,k_),e(k_,Xte),e(Xte,ipo),e(k_,dpo),e(k_,l$),e(l$,cpo),e(k_,fpo),e(T,mpo),e(T,S_),e(S_,zte),e(zte,gpo),e(S_,hpo),e(S_,i$),e(i$,ppo),e(S_,_po),e(T,upo),e(T,R_),e(R_,Qte),e(Qte,bpo),e(R_,vpo),e(R_,d$),e(d$,Fpo),e(R_,Tpo),e(T,Mpo),e(T,B_),e(B_,Wte),e(Wte,Epo),e(B_,Cpo),e(B_,c$),e(c$,wpo),e(B_,Apo),e(T,ypo),e(T,P_),e(P_,Hte),e(Hte,Lpo),e(P_,xpo),e(P_,f$),e(f$,kpo),e(P_,Spo),e(T,Rpo),e(T,$_),e($_,Ute),e(Ute,Bpo),e($_,Ppo),e($_,m$),e(m$,$po),e($_,Ipo),e(T,qpo),e(T,I_),e(I_,Jte),e(Jte,Npo),e(I_,jpo),e(I_,g$),e(g$,Dpo),e(I_,Gpo),e(T,Opo),e(T,q_),e(q_,Yte),e(Yte,Vpo),e(q_,Xpo),e(q_,h$),e(h$,zpo),e(q_,Qpo),e(T,Wpo),e(T,N_),e(N_,Kte),e(Kte,Hpo),e(N_,Upo),e(N_,p$),e(p$,Jpo),e(N_,Ypo),e(T,Kpo),e(T,j_),e(j_,Zte),e(Zte,Zpo),e(j_,e_o),e(j_,_$),e(_$,o_o),e(j_,r_o),e(qe,t_o),e(qe,D_),e(D_,a_o),e(D_,eae),e(eae,n_o),e(D_,s_o),e(D_,oae),e(oae,l_o),e(qe,i_o),e(qe,rae),e(rae,d_o),e(qe,c_o),g(vC,qe,null),b(c,pBe,u),b(c,td,u),e(td,G_),e(G_,tae),g(FC,tae,null),e(td,f_o),e(td,aae),e(aae,m_o),b(c,_Be,u),b(c,Yo,u),g(TC,Yo,null),e(Yo,g_o),e(Yo,ad),e(ad,h_o),e(ad,u$),e(u$,p_o),e(ad,__o),e(ad,b$),e(b$,u_o),e(ad,b_o),e(Yo,v_o),e(Yo,MC),e(MC,F_o),e(MC,nae),e(nae,T_o),e(MC,M_o),e(Yo,E_o),e(Yo,zr),g(EC,zr,null),e(zr,C_o),e(zr,sae),e(sae,w_o),e(zr,A_o),e(zr,nd),e(nd,y_o),e(nd,lae),e(lae,L_o),e(nd,x_o),e(nd,v$),e(v$,k_o),e(nd,S_o),e(zr,R_o),e(zr,iae),e(iae,B_o),e(zr,P_o),g(CC,zr,null),e(Yo,$_o),e(Yo,Ne),g(wC,Ne,null),e(Ne,I_o),e(Ne,dae),e(dae,q_o),e(Ne,N_o),e(Ne,za),e(za,j_o),e(za,cae),e(cae,D_o),e(za,G_o),e(za,fae),e(fae,O_o),e(za,V_o),e(za,mae),e(mae,X_o),e(za,z_o),e(Ne,Q_o),e(Ne,S),e(S,O_),e(O_,gae),e(gae,W_o),e(O_,H_o),e(O_,F$),e(F$,U_o),e(O_,J_o),e(S,Y_o),e(S,V_),e(V_,hae),e(hae,K_o),e(V_,Z_o),e(V_,T$),e(T$,euo),e(V_,ouo),e(S,ruo),e(S,X_),e(X_,pae),e(pae,tuo),e(X_,auo),e(X_,M$),e(M$,nuo),e(X_,suo),e(S,luo),e(S,z_),e(z_,_ae),e(_ae,iuo),e(z_,duo),e(z_,E$),e(E$,cuo),e(z_,fuo),e(S,muo),e(S,Q_),e(Q_,uae),e(uae,guo),e(Q_,huo),e(Q_,C$),e(C$,puo),e(Q_,_uo),e(S,uuo),e(S,W_),e(W_,bae),e(bae,buo),e(W_,vuo),e(W_,w$),e(w$,Fuo),e(W_,Tuo),e(S,Muo),e(S,H_),e(H_,vae),e(vae,Euo),e(H_,Cuo),e(H_,A$),e(A$,wuo),e(H_,Auo),e(S,yuo),e(S,U_),e(U_,Fae),e(Fae,Luo),e(U_,xuo),e(U_,y$),e(y$,kuo),e(U_,Suo),e(S,Ruo),e(S,J_),e(J_,Tae),e(Tae,Buo),e(J_,Puo),e(J_,L$),e(L$,$uo),e(J_,Iuo),e(S,quo),e(S,Y_),e(Y_,Mae),e(Mae,Nuo),e(Y_,juo),e(Y_,x$),e(x$,Duo),e(Y_,Guo),e(S,Ouo),e(S,K_),e(K_,Eae),e(Eae,Vuo),e(K_,Xuo),e(K_,k$),e(k$,zuo),e(K_,Quo),e(S,Wuo),e(S,Z_),e(Z_,Cae),e(Cae,Huo),e(Z_,Uuo),e(Z_,S$),e(S$,Juo),e(Z_,Yuo),e(S,Kuo),e(S,eu),e(eu,wae),e(wae,Zuo),e(eu,e6o),e(eu,R$),e(R$,o6o),e(eu,r6o),e(S,t6o),e(S,ou),e(ou,Aae),e(Aae,a6o),e(ou,n6o),e(ou,B$),e(B$,s6o),e(ou,l6o),e(S,i6o),e(S,ru),e(ru,yae),e(yae,d6o),e(ru,c6o),e(ru,P$),e(P$,f6o),e(ru,m6o),e(S,g6o),e(S,tu),e(tu,Lae),e(Lae,h6o),e(tu,p6o),e(tu,$$),e($$,_6o),e(tu,u6o),e(S,b6o),e(S,au),e(au,xae),e(xae,v6o),e(au,F6o),e(au,I$),e(I$,T6o),e(au,M6o),e(S,E6o),e(S,nu),e(nu,kae),e(kae,C6o),e(nu,w6o),e(nu,q$),e(q$,A6o),e(nu,y6o),e(S,L6o),e(S,su),e(su,Sae),e(Sae,x6o),e(su,k6o),e(su,N$),e(N$,S6o),e(su,R6o),e(S,B6o),e(S,lu),e(lu,Rae),e(Rae,P6o),e(lu,$6o),e(lu,j$),e(j$,I6o),e(lu,q6o),e(S,N6o),e(S,iu),e(iu,Bae),e(Bae,j6o),e(iu,D6o),e(iu,D$),e(D$,G6o),e(iu,O6o),e(S,V6o),e(S,du),e(du,Pae),e(Pae,X6o),e(du,z6o),e(du,G$),e(G$,Q6o),e(du,W6o),e(S,H6o),e(S,cu),e(cu,$ae),e($ae,U6o),e(cu,J6o),e(cu,O$),e(O$,Y6o),e(cu,K6o),e(S,Z6o),e(S,fu),e(fu,Iae),e(Iae,e1o),e(fu,o1o),e(fu,V$),e(V$,r1o),e(fu,t1o),e(S,a1o),e(S,mu),e(mu,qae),e(qae,n1o),e(mu,s1o),e(mu,X$),e(X$,l1o),e(mu,i1o),e(S,d1o),e(S,gu),e(gu,Nae),e(Nae,c1o),e(gu,f1o),e(gu,z$),e(z$,m1o),e(gu,g1o),e(S,h1o),e(S,hu),e(hu,jae),e(jae,p1o),e(hu,_1o),e(hu,Q$),e(Q$,u1o),e(hu,b1o),e(S,v1o),e(S,pu),e(pu,Dae),e(Dae,F1o),e(pu,T1o),e(pu,W$),e(W$,M1o),e(pu,E1o),e(S,C1o),e(S,_u),e(_u,Gae),e(Gae,w1o),e(_u,A1o),e(_u,H$),e(H$,y1o),e(_u,L1o),e(S,x1o),e(S,uu),e(uu,Oae),e(Oae,k1o),e(uu,S1o),e(uu,U$),e(U$,R1o),e(uu,B1o),e(S,P1o),e(S,bu),e(bu,Vae),e(Vae,$1o),e(bu,I1o),e(bu,J$),e(J$,q1o),e(bu,N1o),e(S,j1o),e(S,vu),e(vu,Xae),e(Xae,D1o),e(vu,G1o),e(vu,Y$),e(Y$,O1o),e(vu,V1o),e(S,X1o),e(S,Fu),e(Fu,zae),e(zae,z1o),e(Fu,Q1o),e(Fu,K$),e(K$,W1o),e(Fu,H1o),e(S,U1o),e(S,Tu),e(Tu,Qae),e(Qae,J1o),e(Tu,Y1o),e(Tu,Z$),e(Z$,K1o),e(Tu,Z1o),e(S,ebo),e(S,Mu),e(Mu,Wae),e(Wae,obo),e(Mu,rbo),e(Mu,eI),e(eI,tbo),e(Mu,abo),e(S,nbo),e(S,Eu),e(Eu,Hae),e(Hae,sbo),e(Eu,lbo),e(Eu,oI),e(oI,ibo),e(Eu,dbo),e(S,cbo),e(S,Cu),e(Cu,Uae),e(Uae,fbo),e(Cu,mbo),e(Cu,rI),e(rI,gbo),e(Cu,hbo),e(S,pbo),e(S,wu),e(wu,Jae),e(Jae,_bo),e(wu,ubo),e(wu,tI),e(tI,bbo),e(wu,vbo),e(S,Fbo),e(S,Au),e(Au,Yae),e(Yae,Tbo),e(Au,Mbo),e(Au,aI),e(aI,Ebo),e(Au,Cbo),e(Ne,wbo),e(Ne,yu),e(yu,Abo),e(yu,Kae),e(Kae,ybo),e(yu,Lbo),e(yu,Zae),e(Zae,xbo),e(Ne,kbo),e(Ne,ene),e(ene,Sbo),e(Ne,Rbo),g(AC,Ne,null),b(c,uBe,u),b(c,sd,u),e(sd,Lu),e(Lu,one),g(yC,one,null),e(sd,Bbo),e(sd,rne),e(rne,Pbo),b(c,bBe,u),b(c,Ko,u),g(LC,Ko,null),e(Ko,$bo),e(Ko,ld),e(ld,Ibo),e(ld,nI),e(nI,qbo),e(ld,Nbo),e(ld,sI),e(sI,jbo),e(ld,Dbo),e(Ko,Gbo),e(Ko,xC),e(xC,Obo),e(xC,tne),e(tne,Vbo),e(xC,Xbo),e(Ko,zbo),e(Ko,Qr),g(kC,Qr,null),e(Qr,Qbo),e(Qr,ane),e(ane,Wbo),e(Qr,Hbo),e(Qr,id),e(id,Ubo),e(id,nne),e(nne,Jbo),e(id,Ybo),e(id,lI),e(lI,Kbo),e(id,Zbo),e(Qr,e2o),e(Qr,sne),e(sne,o2o),e(Qr,r2o),g(SC,Qr,null),e(Ko,t2o),e(Ko,je),g(RC,je,null),e(je,a2o),e(je,lne),e(lne,n2o),e(je,s2o),e(je,Qa),e(Qa,l2o),e(Qa,ine),e(ine,i2o),e(Qa,d2o),e(Qa,dne),e(dne,c2o),e(Qa,f2o),e(Qa,cne),e(cne,m2o),e(Qa,g2o),e(je,h2o),e(je,$),e($,xu),e(xu,fne),e(fne,p2o),e(xu,_2o),e(xu,iI),e(iI,u2o),e(xu,b2o),e($,v2o),e($,ku),e(ku,mne),e(mne,F2o),e(ku,T2o),e(ku,dI),e(dI,M2o),e(ku,E2o),e($,C2o),e($,Su),e(Su,gne),e(gne,w2o),e(Su,A2o),e(Su,cI),e(cI,y2o),e(Su,L2o),e($,x2o),e($,Ru),e(Ru,hne),e(hne,k2o),e(Ru,S2o),e(Ru,fI),e(fI,R2o),e(Ru,B2o),e($,P2o),e($,Bu),e(Bu,pne),e(pne,$2o),e(Bu,I2o),e(Bu,mI),e(mI,q2o),e(Bu,N2o),e($,j2o),e($,Pu),e(Pu,_ne),e(_ne,D2o),e(Pu,G2o),e(Pu,gI),e(gI,O2o),e(Pu,V2o),e($,X2o),e($,$u),e($u,une),e(une,z2o),e($u,Q2o),e($u,hI),e(hI,W2o),e($u,H2o),e($,U2o),e($,Iu),e(Iu,bne),e(bne,J2o),e(Iu,Y2o),e(Iu,pI),e(pI,K2o),e(Iu,Z2o),e($,e5o),e($,qu),e(qu,vne),e(vne,o5o),e(qu,r5o),e(qu,_I),e(_I,t5o),e(qu,a5o),e($,n5o),e($,Nu),e(Nu,Fne),e(Fne,s5o),e(Nu,l5o),e(Nu,uI),e(uI,i5o),e(Nu,d5o),e($,c5o),e($,ju),e(ju,Tne),e(Tne,f5o),e(ju,m5o),e(ju,bI),e(bI,g5o),e(ju,h5o),e($,p5o),e($,Du),e(Du,Mne),e(Mne,_5o),e(Du,u5o),e(Du,vI),e(vI,b5o),e(Du,v5o),e($,F5o),e($,Gu),e(Gu,Ene),e(Ene,T5o),e(Gu,M5o),e(Gu,FI),e(FI,E5o),e(Gu,C5o),e($,w5o),e($,Ou),e(Ou,Cne),e(Cne,A5o),e(Ou,y5o),e(Ou,TI),e(TI,L5o),e(Ou,x5o),e($,k5o),e($,Vu),e(Vu,wne),e(wne,S5o),e(Vu,R5o),e(Vu,MI),e(MI,B5o),e(Vu,P5o),e($,$5o),e($,Xu),e(Xu,Ane),e(Ane,I5o),e(Xu,q5o),e(Xu,EI),e(EI,N5o),e(Xu,j5o),e($,D5o),e($,zu),e(zu,yne),e(yne,G5o),e(zu,O5o),e(zu,CI),e(CI,V5o),e(zu,X5o),e($,z5o),e($,Qu),e(Qu,Lne),e(Lne,Q5o),e(Qu,W5o),e(Qu,wI),e(wI,H5o),e(Qu,U5o),e($,J5o),e($,Wu),e(Wu,xne),e(xne,Y5o),e(Wu,K5o),e(Wu,AI),e(AI,Z5o),e(Wu,evo),e($,ovo),e($,Hu),e(Hu,kne),e(kne,rvo),e(Hu,tvo),e(Hu,yI),e(yI,avo),e(Hu,nvo),e($,svo),e($,Uu),e(Uu,Sne),e(Sne,lvo),e(Uu,ivo),e(Uu,LI),e(LI,dvo),e(Uu,cvo),e($,fvo),e($,Ju),e(Ju,Rne),e(Rne,mvo),e(Ju,gvo),e(Ju,xI),e(xI,hvo),e(Ju,pvo),e($,_vo),e($,Yu),e(Yu,Bne),e(Bne,uvo),e(Yu,bvo),e(Yu,kI),e(kI,vvo),e(Yu,Fvo),e($,Tvo),e($,Ku),e(Ku,Pne),e(Pne,Mvo),e(Ku,Evo),e(Ku,SI),e(SI,Cvo),e(Ku,wvo),e($,Avo),e($,Zu),e(Zu,$ne),e($ne,yvo),e(Zu,Lvo),e(Zu,RI),e(RI,xvo),e(Zu,kvo),e($,Svo),e($,e6),e(e6,Ine),e(Ine,Rvo),e(e6,Bvo),e(e6,BI),e(BI,Pvo),e(e6,$vo),e($,Ivo),e($,o6),e(o6,qne),e(qne,qvo),e(o6,Nvo),e(o6,PI),e(PI,jvo),e(o6,Dvo),e($,Gvo),e($,r6),e(r6,Nne),e(Nne,Ovo),e(r6,Vvo),e(r6,$I),e($I,Xvo),e(r6,zvo),e($,Qvo),e($,t6),e(t6,jne),e(jne,Wvo),e(t6,Hvo),e(t6,II),e(II,Uvo),e(t6,Jvo),e($,Yvo),e($,a6),e(a6,Dne),e(Dne,Kvo),e(a6,Zvo),e(a6,qI),e(qI,eFo),e(a6,oFo),e($,rFo),e($,n6),e(n6,Gne),e(Gne,tFo),e(n6,aFo),e(n6,NI),e(NI,nFo),e(n6,sFo),e($,lFo),e($,s6),e(s6,One),e(One,iFo),e(s6,dFo),e(s6,jI),e(jI,cFo),e(s6,fFo),e($,mFo),e($,l6),e(l6,Vne),e(Vne,gFo),e(l6,hFo),e(l6,DI),e(DI,pFo),e(l6,_Fo),e($,uFo),e($,i6),e(i6,Xne),e(Xne,bFo),e(i6,vFo),e(i6,GI),e(GI,FFo),e(i6,TFo),e($,MFo),e($,d6),e(d6,zne),e(zne,EFo),e(d6,CFo),e(d6,OI),e(OI,wFo),e(d6,AFo),e($,yFo),e($,c6),e(c6,Qne),e(Qne,LFo),e(c6,xFo),e(c6,VI),e(VI,kFo),e(c6,SFo),e(je,RFo),e(je,f6),e(f6,BFo),e(f6,Wne),e(Wne,PFo),e(f6,$Fo),e(f6,Hne),e(Hne,IFo),e(je,qFo),e(je,Une),e(Une,NFo),e(je,jFo),g(BC,je,null),b(c,vBe,u),b(c,dd,u),e(dd,m6),e(m6,Jne),g(PC,Jne,null),e(dd,DFo),e(dd,Yne),e(Yne,GFo),b(c,FBe,u),b(c,Zo,u),g($C,Zo,null),e(Zo,OFo),e(Zo,cd),e(cd,VFo),e(cd,XI),e(XI,XFo),e(cd,zFo),e(cd,zI),e(zI,QFo),e(cd,WFo),e(Zo,HFo),e(Zo,IC),e(IC,UFo),e(IC,Kne),e(Kne,JFo),e(IC,YFo),e(Zo,KFo),e(Zo,Wr),g(qC,Wr,null),e(Wr,ZFo),e(Wr,Zne),e(Zne,eTo),e(Wr,oTo),e(Wr,fd),e(fd,rTo),e(fd,ese),e(ese,tTo),e(fd,aTo),e(fd,QI),e(QI,nTo),e(fd,sTo),e(Wr,lTo),e(Wr,ose),e(ose,iTo),e(Wr,dTo),g(NC,Wr,null),e(Zo,cTo),e(Zo,De),g(jC,De,null),e(De,fTo),e(De,rse),e(rse,mTo),e(De,gTo),e(De,Wa),e(Wa,hTo),e(Wa,tse),e(tse,pTo),e(Wa,_To),e(Wa,ase),e(ase,uTo),e(Wa,bTo),e(Wa,nse),e(nse,vTo),e(Wa,FTo),e(De,TTo),e(De,I),e(I,g6),e(g6,sse),e(sse,MTo),e(g6,ETo),e(g6,WI),e(WI,CTo),e(g6,wTo),e(I,ATo),e(I,h6),e(h6,lse),e(lse,yTo),e(h6,LTo),e(h6,HI),e(HI,xTo),e(h6,kTo),e(I,STo),e(I,p6),e(p6,ise),e(ise,RTo),e(p6,BTo),e(p6,UI),e(UI,PTo),e(p6,$To),e(I,ITo),e(I,_6),e(_6,dse),e(dse,qTo),e(_6,NTo),e(_6,JI),e(JI,jTo),e(_6,DTo),e(I,GTo),e(I,u6),e(u6,cse),e(cse,OTo),e(u6,VTo),e(u6,YI),e(YI,XTo),e(u6,zTo),e(I,QTo),e(I,b6),e(b6,fse),e(fse,WTo),e(b6,HTo),e(b6,KI),e(KI,UTo),e(b6,JTo),e(I,YTo),e(I,v6),e(v6,mse),e(mse,KTo),e(v6,ZTo),e(v6,ZI),e(ZI,e9o),e(v6,o9o),e(I,r9o),e(I,F6),e(F6,gse),e(gse,t9o),e(F6,a9o),e(F6,eq),e(eq,n9o),e(F6,s9o),e(I,l9o),e(I,T6),e(T6,hse),e(hse,i9o),e(T6,d9o),e(T6,oq),e(oq,c9o),e(T6,f9o),e(I,m9o),e(I,M6),e(M6,pse),e(pse,g9o),e(M6,h9o),e(M6,rq),e(rq,p9o),e(M6,_9o),e(I,u9o),e(I,E6),e(E6,_se),e(_se,b9o),e(E6,v9o),e(E6,tq),e(tq,F9o),e(E6,T9o),e(I,M9o),e(I,C6),e(C6,use),e(use,E9o),e(C6,C9o),e(C6,aq),e(aq,w9o),e(C6,A9o),e(I,y9o),e(I,w6),e(w6,bse),e(bse,L9o),e(w6,x9o),e(w6,nq),e(nq,k9o),e(w6,S9o),e(I,R9o),e(I,A6),e(A6,vse),e(vse,B9o),e(A6,P9o),e(A6,sq),e(sq,$9o),e(A6,I9o),e(I,q9o),e(I,y6),e(y6,Fse),e(Fse,N9o),e(y6,j9o),e(y6,lq),e(lq,D9o),e(y6,G9o),e(I,O9o),e(I,L6),e(L6,Tse),e(Tse,V9o),e(L6,X9o),e(L6,iq),e(iq,z9o),e(L6,Q9o),e(I,W9o),e(I,x6),e(x6,Mse),e(Mse,H9o),e(x6,U9o),e(x6,dq),e(dq,J9o),e(x6,Y9o),e(I,K9o),e(I,k6),e(k6,Ese),e(Ese,Z9o),e(k6,eMo),e(k6,cq),e(cq,oMo),e(k6,rMo),e(I,tMo),e(I,S6),e(S6,Cse),e(Cse,aMo),e(S6,nMo),e(S6,fq),e(fq,sMo),e(S6,lMo),e(I,iMo),e(I,R6),e(R6,wse),e(wse,dMo),e(R6,cMo),e(R6,mq),e(mq,fMo),e(R6,mMo),e(I,gMo),e(I,B6),e(B6,Ase),e(Ase,hMo),e(B6,pMo),e(B6,gq),e(gq,_Mo),e(B6,uMo),e(I,bMo),e(I,P6),e(P6,yse),e(yse,vMo),e(P6,FMo),e(P6,hq),e(hq,TMo),e(P6,MMo),e(I,EMo),e(I,$6),e($6,Lse),e(Lse,CMo),e($6,wMo),e($6,pq),e(pq,AMo),e($6,yMo),e(I,LMo),e(I,I6),e(I6,xse),e(xse,xMo),e(I6,kMo),e(I6,_q),e(_q,SMo),e(I6,RMo),e(I,BMo),e(I,q6),e(q6,kse),e(kse,PMo),e(q6,$Mo),e(q6,uq),e(uq,IMo),e(q6,qMo),e(I,NMo),e(I,N6),e(N6,Sse),e(Sse,jMo),e(N6,DMo),e(N6,bq),e(bq,GMo),e(N6,OMo),e(I,VMo),e(I,j6),e(j6,Rse),e(Rse,XMo),e(j6,zMo),e(j6,vq),e(vq,QMo),e(j6,WMo),e(I,HMo),e(I,D6),e(D6,Bse),e(Bse,UMo),e(D6,JMo),e(D6,Fq),e(Fq,YMo),e(D6,KMo),e(I,ZMo),e(I,G6),e(G6,Pse),e(Pse,e4o),e(G6,o4o),e(G6,Tq),e(Tq,r4o),e(G6,t4o),e(I,a4o),e(I,O6),e(O6,$se),e($se,n4o),e(O6,s4o),e(O6,Mq),e(Mq,l4o),e(O6,i4o),e(I,d4o),e(I,V6),e(V6,Ise),e(Ise,c4o),e(V6,f4o),e(V6,qse),e(qse,m4o),e(V6,g4o),e(I,h4o),e(I,X6),e(X6,Nse),e(Nse,p4o),e(X6,_4o),e(X6,Eq),e(Eq,u4o),e(X6,b4o),e(I,v4o),e(I,z6),e(z6,jse),e(jse,F4o),e(z6,T4o),e(z6,Cq),e(Cq,M4o),e(z6,E4o),e(I,C4o),e(I,Q6),e(Q6,Dse),e(Dse,w4o),e(Q6,A4o),e(Q6,wq),e(wq,y4o),e(Q6,L4o),e(I,x4o),e(I,W6),e(W6,Gse),e(Gse,k4o),e(W6,S4o),e(W6,Aq),e(Aq,R4o),e(W6,B4o),e(De,P4o),e(De,H6),e(H6,$4o),e(H6,Ose),e(Ose,I4o),e(H6,q4o),e(H6,Vse),e(Vse,N4o),e(De,j4o),e(De,Xse),e(Xse,D4o),e(De,G4o),g(DC,De,null),b(c,TBe,u),b(c,md,u),e(md,U6),e(U6,zse),g(GC,zse,null),e(md,O4o),e(md,Qse),e(Qse,V4o),b(c,MBe,u),b(c,er,u),g(OC,er,null),e(er,X4o),e(er,gd),e(gd,z4o),e(gd,yq),e(yq,Q4o),e(gd,W4o),e(gd,Lq),e(Lq,H4o),e(gd,U4o),e(er,J4o),e(er,VC),e(VC,Y4o),e(VC,Wse),e(Wse,K4o),e(VC,Z4o),e(er,eEo),e(er,Hr),g(XC,Hr,null),e(Hr,oEo),e(Hr,Hse),e(Hse,rEo),e(Hr,tEo),e(Hr,hd),e(hd,aEo),e(hd,Use),e(Use,nEo),e(hd,sEo),e(hd,xq),e(xq,lEo),e(hd,iEo),e(Hr,dEo),e(Hr,Jse),e(Jse,cEo),e(Hr,fEo),g(zC,Hr,null),e(er,mEo),e(er,Ge),g(QC,Ge,null),e(Ge,gEo),e(Ge,Yse),e(Yse,hEo),e(Ge,pEo),e(Ge,Ha),e(Ha,_Eo),e(Ha,Kse),e(Kse,uEo),e(Ha,bEo),e(Ha,Zse),e(Zse,vEo),e(Ha,FEo),e(Ha,ele),e(ele,TEo),e(Ha,MEo),e(Ge,EEo),e(Ge,ne),e(ne,J6),e(J6,ole),e(ole,CEo),e(J6,wEo),e(J6,kq),e(kq,AEo),e(J6,yEo),e(ne,LEo),e(ne,Y6),e(Y6,rle),e(rle,xEo),e(Y6,kEo),e(Y6,Sq),e(Sq,SEo),e(Y6,REo),e(ne,BEo),e(ne,K6),e(K6,tle),e(tle,PEo),e(K6,$Eo),e(K6,Rq),e(Rq,IEo),e(K6,qEo),e(ne,NEo),e(ne,Z6),e(Z6,ale),e(ale,jEo),e(Z6,DEo),e(Z6,Bq),e(Bq,GEo),e(Z6,OEo),e(ne,VEo),e(ne,e1),e(e1,nle),e(nle,XEo),e(e1,zEo),e(e1,Pq),e(Pq,QEo),e(e1,WEo),e(ne,HEo),e(ne,o1),e(o1,sle),e(sle,UEo),e(o1,JEo),e(o1,$q),e($q,YEo),e(o1,KEo),e(ne,ZEo),e(ne,r1),e(r1,lle),e(lle,e3o),e(r1,o3o),e(r1,Iq),e(Iq,r3o),e(r1,t3o),e(ne,a3o),e(ne,t1),e(t1,ile),e(ile,n3o),e(t1,s3o),e(t1,qq),e(qq,l3o),e(t1,i3o),e(ne,d3o),e(ne,a1),e(a1,dle),e(dle,c3o),e(a1,f3o),e(a1,Nq),e(Nq,m3o),e(a1,g3o),e(ne,h3o),e(ne,n1),e(n1,cle),e(cle,p3o),e(n1,_3o),e(n1,jq),e(jq,u3o),e(n1,b3o),e(ne,v3o),e(ne,s1),e(s1,fle),e(fle,F3o),e(s1,T3o),e(s1,Dq),e(Dq,M3o),e(s1,E3o),e(ne,C3o),e(ne,l1),e(l1,mle),e(mle,w3o),e(l1,A3o),e(l1,Gq),e(Gq,y3o),e(l1,L3o),e(ne,x3o),e(ne,i1),e(i1,gle),e(gle,k3o),e(i1,S3o),e(i1,Oq),e(Oq,R3o),e(i1,B3o),e(ne,P3o),e(ne,d1),e(d1,hle),e(hle,$3o),e(d1,I3o),e(d1,Vq),e(Vq,q3o),e(d1,N3o),e(ne,j3o),e(ne,c1),e(c1,ple),e(ple,D3o),e(c1,G3o),e(c1,Xq),e(Xq,O3o),e(c1,V3o),e(ne,X3o),e(ne,f1),e(f1,_le),e(_le,z3o),e(f1,Q3o),e(f1,zq),e(zq,W3o),e(f1,H3o),e(ne,U3o),e(ne,m1),e(m1,ule),e(ule,J3o),e(m1,Y3o),e(m1,Qq),e(Qq,K3o),e(m1,Z3o),e(Ge,eCo),e(Ge,g1),e(g1,oCo),e(g1,ble),e(ble,rCo),e(g1,tCo),e(g1,vle),e(vle,aCo),e(Ge,nCo),e(Ge,Fle),e(Fle,sCo),e(Ge,lCo),g(WC,Ge,null),b(c,EBe,u),b(c,pd,u),e(pd,h1),e(h1,Tle),g(HC,Tle,null),e(pd,iCo),e(pd,Mle),e(Mle,dCo),b(c,CBe,u),b(c,or,u),g(UC,or,null),e(or,cCo),e(or,_d),e(_d,fCo),e(_d,Wq),e(Wq,mCo),e(_d,gCo),e(_d,Hq),e(Hq,hCo),e(_d,pCo),e(or,_Co),e(or,JC),e(JC,uCo),e(JC,Ele),e(Ele,bCo),e(JC,vCo),e(or,FCo),e(or,Ur),g(YC,Ur,null),e(Ur,TCo),e(Ur,Cle),e(Cle,MCo),e(Ur,ECo),e(Ur,ud),e(ud,CCo),e(ud,wle),e(wle,wCo),e(ud,ACo),e(ud,Uq),e(Uq,yCo),e(ud,LCo),e(Ur,xCo),e(Ur,Ale),e(Ale,kCo),e(Ur,SCo),g(KC,Ur,null),e(or,RCo),e(or,Oe),g(ZC,Oe,null),e(Oe,BCo),e(Oe,yle),e(yle,PCo),e(Oe,$Co),e(Oe,Ua),e(Ua,ICo),e(Ua,Lle),e(Lle,qCo),e(Ua,NCo),e(Ua,xle),e(xle,jCo),e(Ua,DCo),e(Ua,kle),e(kle,GCo),e(Ua,OCo),e(Oe,VCo),e(Oe,y),e(y,p1),e(p1,Sle),e(Sle,XCo),e(p1,zCo),e(p1,Jq),e(Jq,QCo),e(p1,WCo),e(y,HCo),e(y,_1),e(_1,Rle),e(Rle,UCo),e(_1,JCo),e(_1,Yq),e(Yq,YCo),e(_1,KCo),e(y,ZCo),e(y,u1),e(u1,Ble),e(Ble,ewo),e(u1,owo),e(u1,Kq),e(Kq,rwo),e(u1,two),e(y,awo),e(y,b1),e(b1,Ple),e(Ple,nwo),e(b1,swo),e(b1,Zq),e(Zq,lwo),e(b1,iwo),e(y,dwo),e(y,v1),e(v1,$le),e($le,cwo),e(v1,fwo),e(v1,eN),e(eN,mwo),e(v1,gwo),e(y,hwo),e(y,F1),e(F1,Ile),e(Ile,pwo),e(F1,_wo),e(F1,oN),e(oN,uwo),e(F1,bwo),e(y,vwo),e(y,T1),e(T1,qle),e(qle,Fwo),e(T1,Two),e(T1,rN),e(rN,Mwo),e(T1,Ewo),e(y,Cwo),e(y,M1),e(M1,Nle),e(Nle,wwo),e(M1,Awo),e(M1,tN),e(tN,ywo),e(M1,Lwo),e(y,xwo),e(y,E1),e(E1,jle),e(jle,kwo),e(E1,Swo),e(E1,aN),e(aN,Rwo),e(E1,Bwo),e(y,Pwo),e(y,C1),e(C1,Dle),e(Dle,$wo),e(C1,Iwo),e(C1,nN),e(nN,qwo),e(C1,Nwo),e(y,jwo),e(y,w1),e(w1,Gle),e(Gle,Dwo),e(w1,Gwo),e(w1,sN),e(sN,Owo),e(w1,Vwo),e(y,Xwo),e(y,A1),e(A1,Ole),e(Ole,zwo),e(A1,Qwo),e(A1,lN),e(lN,Wwo),e(A1,Hwo),e(y,Uwo),e(y,y1),e(y1,Vle),e(Vle,Jwo),e(y1,Ywo),e(y1,iN),e(iN,Kwo),e(y1,Zwo),e(y,eAo),e(y,L1),e(L1,Xle),e(Xle,oAo),e(L1,rAo),e(L1,dN),e(dN,tAo),e(L1,aAo),e(y,nAo),e(y,x1),e(x1,zle),e(zle,sAo),e(x1,lAo),e(x1,cN),e(cN,iAo),e(x1,dAo),e(y,cAo),e(y,k1),e(k1,Qle),e(Qle,fAo),e(k1,mAo),e(k1,fN),e(fN,gAo),e(k1,hAo),e(y,pAo),e(y,S1),e(S1,Wle),e(Wle,_Ao),e(S1,uAo),e(S1,mN),e(mN,bAo),e(S1,vAo),e(y,FAo),e(y,R1),e(R1,Hle),e(Hle,TAo),e(R1,MAo),e(R1,gN),e(gN,EAo),e(R1,CAo),e(y,wAo),e(y,B1),e(B1,Ule),e(Ule,AAo),e(B1,yAo),e(B1,hN),e(hN,LAo),e(B1,xAo),e(y,kAo),e(y,P1),e(P1,Jle),e(Jle,SAo),e(P1,RAo),e(P1,pN),e(pN,BAo),e(P1,PAo),e(y,$Ao),e(y,$1),e($1,Yle),e(Yle,IAo),e($1,qAo),e($1,_N),e(_N,NAo),e($1,jAo),e(y,DAo),e(y,I1),e(I1,Kle),e(Kle,GAo),e(I1,OAo),e(I1,uN),e(uN,VAo),e(I1,XAo),e(y,zAo),e(y,q1),e(q1,Zle),e(Zle,QAo),e(q1,WAo),e(q1,bN),e(bN,HAo),e(q1,UAo),e(y,JAo),e(y,N1),e(N1,eie),e(eie,YAo),e(N1,KAo),e(N1,vN),e(vN,ZAo),e(N1,e0o),e(y,o0o),e(y,j1),e(j1,oie),e(oie,r0o),e(j1,t0o),e(j1,FN),e(FN,a0o),e(j1,n0o),e(y,s0o),e(y,D1),e(D1,rie),e(rie,l0o),e(D1,i0o),e(D1,TN),e(TN,d0o),e(D1,c0o),e(y,f0o),e(y,G1),e(G1,tie),e(tie,m0o),e(G1,g0o),e(G1,MN),e(MN,h0o),e(G1,p0o),e(y,_0o),e(y,O1),e(O1,aie),e(aie,u0o),e(O1,b0o),e(O1,EN),e(EN,v0o),e(O1,F0o),e(y,T0o),e(y,V1),e(V1,nie),e(nie,M0o),e(V1,E0o),e(V1,CN),e(CN,C0o),e(V1,w0o),e(y,A0o),e(y,X1),e(X1,sie),e(sie,y0o),e(X1,L0o),e(X1,wN),e(wN,x0o),e(X1,k0o),e(y,S0o),e(y,z1),e(z1,lie),e(lie,R0o),e(z1,B0o),e(z1,AN),e(AN,P0o),e(z1,$0o),e(y,I0o),e(y,Q1),e(Q1,iie),e(iie,q0o),e(Q1,N0o),e(Q1,yN),e(yN,j0o),e(Q1,D0o),e(y,G0o),e(y,W1),e(W1,die),e(die,O0o),e(W1,V0o),e(W1,LN),e(LN,X0o),e(W1,z0o),e(y,Q0o),e(y,H1),e(H1,cie),e(cie,W0o),e(H1,H0o),e(H1,xN),e(xN,U0o),e(H1,J0o),e(y,Y0o),e(y,U1),e(U1,fie),e(fie,K0o),e(U1,Z0o),e(U1,kN),e(kN,eyo),e(U1,oyo),e(y,ryo),e(y,J1),e(J1,mie),e(mie,tyo),e(J1,ayo),e(J1,SN),e(SN,nyo),e(J1,syo),e(y,lyo),e(y,Y1),e(Y1,gie),e(gie,iyo),e(Y1,dyo),e(Y1,RN),e(RN,cyo),e(Y1,fyo),e(y,myo),e(y,K1),e(K1,hie),e(hie,gyo),e(K1,hyo),e(K1,BN),e(BN,pyo),e(K1,_yo),e(y,uyo),e(y,Z1),e(Z1,pie),e(pie,byo),e(Z1,vyo),e(Z1,PN),e(PN,Fyo),e(Z1,Tyo),e(y,Myo),e(y,eb),e(eb,_ie),e(_ie,Eyo),e(eb,Cyo),e(eb,$N),e($N,wyo),e(eb,Ayo),e(y,yyo),e(y,ob),e(ob,uie),e(uie,Lyo),e(ob,xyo),e(ob,IN),e(IN,kyo),e(ob,Syo),e(y,Ryo),e(y,rb),e(rb,bie),e(bie,Byo),e(rb,Pyo),e(rb,qN),e(qN,$yo),e(rb,Iyo),e(y,qyo),e(y,tb),e(tb,vie),e(vie,Nyo),e(tb,jyo),e(tb,NN),e(NN,Dyo),e(tb,Gyo),e(y,Oyo),e(y,ab),e(ab,Fie),e(Fie,Vyo),e(ab,Xyo),e(ab,jN),e(jN,zyo),e(ab,Qyo),e(y,Wyo),e(y,nb),e(nb,Tie),e(Tie,Hyo),e(nb,Uyo),e(nb,DN),e(DN,Jyo),e(nb,Yyo),e(y,Kyo),e(y,sb),e(sb,Mie),e(Mie,Zyo),e(sb,e8o),e(sb,GN),e(GN,o8o),e(sb,r8o),e(y,t8o),e(y,lb),e(lb,Eie),e(Eie,a8o),e(lb,n8o),e(lb,ON),e(ON,s8o),e(lb,l8o),e(Oe,i8o),e(Oe,ib),e(ib,d8o),e(ib,Cie),e(Cie,c8o),e(ib,f8o),e(ib,wie),e(wie,m8o),e(Oe,g8o),e(Oe,Aie),e(Aie,h8o),e(Oe,p8o),g(ew,Oe,null),b(c,wBe,u),b(c,bd,u),e(bd,db),e(db,yie),g(ow,yie,null),e(bd,_8o),e(bd,Lie),e(Lie,u8o),b(c,ABe,u),b(c,rr,u),g(rw,rr,null),e(rr,b8o),e(rr,vd),e(vd,v8o),e(vd,VN),e(VN,F8o),e(vd,T8o),e(vd,XN),e(XN,M8o),e(vd,E8o),e(rr,C8o),e(rr,tw),e(tw,w8o),e(tw,xie),e(xie,A8o),e(tw,y8o),e(rr,L8o),e(rr,Jr),g(aw,Jr,null),e(Jr,x8o),e(Jr,kie),e(kie,k8o),e(Jr,S8o),e(Jr,Fd),e(Fd,R8o),e(Fd,Sie),e(Sie,B8o),e(Fd,P8o),e(Fd,zN),e(zN,$8o),e(Fd,I8o),e(Jr,q8o),e(Jr,Rie),e(Rie,N8o),e(Jr,j8o),g(nw,Jr,null),e(rr,D8o),e(rr,Ve),g(sw,Ve,null),e(Ve,G8o),e(Ve,Bie),e(Bie,O8o),e(Ve,V8o),e(Ve,Ja),e(Ja,X8o),e(Ja,Pie),e(Pie,z8o),e(Ja,Q8o),e(Ja,$ie),e($ie,W8o),e(Ja,H8o),e(Ja,Iie),e(Iie,U8o),e(Ja,J8o),e(Ve,Y8o),e(Ve,G),e(G,cb),e(cb,qie),e(qie,K8o),e(cb,Z8o),e(cb,QN),e(QN,eLo),e(cb,oLo),e(G,rLo),e(G,fb),e(fb,Nie),e(Nie,tLo),e(fb,aLo),e(fb,WN),e(WN,nLo),e(fb,sLo),e(G,lLo),e(G,mb),e(mb,jie),e(jie,iLo),e(mb,dLo),e(mb,HN),e(HN,cLo),e(mb,fLo),e(G,mLo),e(G,gb),e(gb,Die),e(Die,gLo),e(gb,hLo),e(gb,UN),e(UN,pLo),e(gb,_Lo),e(G,uLo),e(G,hb),e(hb,Gie),e(Gie,bLo),e(hb,vLo),e(hb,JN),e(JN,FLo),e(hb,TLo),e(G,MLo),e(G,pb),e(pb,Oie),e(Oie,ELo),e(pb,CLo),e(pb,YN),e(YN,wLo),e(pb,ALo),e(G,yLo),e(G,_b),e(_b,Vie),e(Vie,LLo),e(_b,xLo),e(_b,KN),e(KN,kLo),e(_b,SLo),e(G,RLo),e(G,ub),e(ub,Xie),e(Xie,BLo),e(ub,PLo),e(ub,ZN),e(ZN,$Lo),e(ub,ILo),e(G,qLo),e(G,bb),e(bb,zie),e(zie,NLo),e(bb,jLo),e(bb,ej),e(ej,DLo),e(bb,GLo),e(G,OLo),e(G,vb),e(vb,Qie),e(Qie,VLo),e(vb,XLo),e(vb,oj),e(oj,zLo),e(vb,QLo),e(G,WLo),e(G,Fb),e(Fb,Wie),e(Wie,HLo),e(Fb,ULo),e(Fb,rj),e(rj,JLo),e(Fb,YLo),e(G,KLo),e(G,Tb),e(Tb,Hie),e(Hie,ZLo),e(Tb,e7o),e(Tb,tj),e(tj,o7o),e(Tb,r7o),e(G,t7o),e(G,Mb),e(Mb,Uie),e(Uie,a7o),e(Mb,n7o),e(Mb,aj),e(aj,s7o),e(Mb,l7o),e(G,i7o),e(G,Eb),e(Eb,Jie),e(Jie,d7o),e(Eb,c7o),e(Eb,nj),e(nj,f7o),e(Eb,m7o),e(G,g7o),e(G,Cb),e(Cb,Yie),e(Yie,h7o),e(Cb,p7o),e(Cb,sj),e(sj,_7o),e(Cb,u7o),e(G,b7o),e(G,wb),e(wb,Kie),e(Kie,v7o),e(wb,F7o),e(wb,lj),e(lj,T7o),e(wb,M7o),e(G,E7o),e(G,Ab),e(Ab,Zie),e(Zie,C7o),e(Ab,w7o),e(Ab,ij),e(ij,A7o),e(Ab,y7o),e(G,L7o),e(G,yb),e(yb,ede),e(ede,x7o),e(yb,k7o),e(yb,dj),e(dj,S7o),e(yb,R7o),e(G,B7o),e(G,Lb),e(Lb,ode),e(ode,P7o),e(Lb,$7o),e(Lb,cj),e(cj,I7o),e(Lb,q7o),e(G,N7o),e(G,xb),e(xb,rde),e(rde,j7o),e(xb,D7o),e(xb,fj),e(fj,G7o),e(xb,O7o),e(G,V7o),e(G,kb),e(kb,tde),e(tde,X7o),e(kb,z7o),e(kb,mj),e(mj,Q7o),e(kb,W7o),e(G,H7o),e(G,Sb),e(Sb,ade),e(ade,U7o),e(Sb,J7o),e(Sb,gj),e(gj,Y7o),e(Sb,K7o),e(G,Z7o),e(G,Rb),e(Rb,nde),e(nde,exo),e(Rb,oxo),e(Rb,hj),e(hj,rxo),e(Rb,txo),e(G,axo),e(G,Bb),e(Bb,sde),e(sde,nxo),e(Bb,sxo),e(Bb,pj),e(pj,lxo),e(Bb,ixo),e(G,dxo),e(G,Pb),e(Pb,lde),e(lde,cxo),e(Pb,fxo),e(Pb,_j),e(_j,mxo),e(Pb,gxo),e(G,hxo),e(G,$b),e($b,ide),e(ide,pxo),e($b,_xo),e($b,uj),e(uj,uxo),e($b,bxo),e(G,vxo),e(G,Ib),e(Ib,dde),e(dde,Fxo),e(Ib,Txo),e(Ib,bj),e(bj,Mxo),e(Ib,Exo),e(G,Cxo),e(G,qb),e(qb,cde),e(cde,wxo),e(qb,Axo),e(qb,vj),e(vj,yxo),e(qb,Lxo),e(Ve,xxo),e(Ve,Nb),e(Nb,kxo),e(Nb,fde),e(fde,Sxo),e(Nb,Rxo),e(Nb,mde),e(mde,Bxo),e(Ve,Pxo),e(Ve,gde),e(gde,$xo),e(Ve,Ixo),g(lw,Ve,null),b(c,yBe,u),b(c,Td,u),e(Td,jb),e(jb,hde),g(iw,hde,null),e(Td,qxo),e(Td,pde),e(pde,Nxo),b(c,LBe,u),b(c,tr,u),g(dw,tr,null),e(tr,jxo),e(tr,Md),e(Md,Dxo),e(Md,Fj),e(Fj,Gxo),e(Md,Oxo),e(Md,Tj),e(Tj,Vxo),e(Md,Xxo),e(tr,zxo),e(tr,cw),e(cw,Qxo),e(cw,_de),e(_de,Wxo),e(cw,Hxo),e(tr,Uxo),e(tr,Yr),g(fw,Yr,null),e(Yr,Jxo),e(Yr,ude),e(ude,Yxo),e(Yr,Kxo),e(Yr,Ed),e(Ed,Zxo),e(Ed,bde),e(bde,eko),e(Ed,oko),e(Ed,Mj),e(Mj,rko),e(Ed,tko),e(Yr,ako),e(Yr,vde),e(vde,nko),e(Yr,sko),g(mw,Yr,null),e(tr,lko),e(tr,Xe),g(gw,Xe,null),e(Xe,iko),e(Xe,Fde),e(Fde,dko),e(Xe,cko),e(Xe,Ya),e(Ya,fko),e(Ya,Tde),e(Tde,mko),e(Ya,gko),e(Ya,Mde),e(Mde,hko),e(Ya,pko),e(Ya,Ede),e(Ede,_ko),e(Ya,uko),e(Xe,bko),e(Xe,da),e(da,Db),e(Db,Cde),e(Cde,vko),e(Db,Fko),e(Db,Ej),e(Ej,Tko),e(Db,Mko),e(da,Eko),e(da,Gb),e(Gb,wde),e(wde,Cko),e(Gb,wko),e(Gb,Cj),e(Cj,Ako),e(Gb,yko),e(da,Lko),e(da,Ob),e(Ob,Ade),e(Ade,xko),e(Ob,kko),e(Ob,wj),e(wj,Sko),e(Ob,Rko),e(da,Bko),e(da,Vb),e(Vb,yde),e(yde,Pko),e(Vb,$ko),e(Vb,Aj),e(Aj,Iko),e(Vb,qko),e(da,Nko),e(da,Xb),e(Xb,Lde),e(Lde,jko),e(Xb,Dko),e(Xb,yj),e(yj,Gko),e(Xb,Oko),e(Xe,Vko),e(Xe,zb),e(zb,Xko),e(zb,xde),e(xde,zko),e(zb,Qko),e(zb,kde),e(kde,Wko),e(Xe,Hko),e(Xe,Sde),e(Sde,Uko),e(Xe,Jko),g(hw,Xe,null),b(c,xBe,u),b(c,Cd,u),e(Cd,Qb),e(Qb,Rde),g(pw,Rde,null),e(Cd,Yko),e(Cd,Bde),e(Bde,Kko),b(c,kBe,u),b(c,ar,u),g(_w,ar,null),e(ar,Zko),e(ar,wd),e(wd,eSo),e(wd,Lj),e(Lj,oSo),e(wd,rSo),e(wd,xj),e(xj,tSo),e(wd,aSo),e(ar,nSo),e(ar,uw),e(uw,sSo),e(uw,Pde),e(Pde,lSo),e(uw,iSo),e(ar,dSo),e(ar,Kr),g(bw,Kr,null),e(Kr,cSo),e(Kr,$de),e($de,fSo),e(Kr,mSo),e(Kr,Ad),e(Ad,gSo),e(Ad,Ide),e(Ide,hSo),e(Ad,pSo),e(Ad,kj),e(kj,_So),e(Ad,uSo),e(Kr,bSo),e(Kr,qde),e(qde,vSo),e(Kr,FSo),g(vw,Kr,null),e(ar,TSo),e(ar,ze),g(Fw,ze,null),e(ze,MSo),e(ze,Nde),e(Nde,ESo),e(ze,CSo),e(ze,Ka),e(Ka,wSo),e(Ka,jde),e(jde,ASo),e(Ka,ySo),e(Ka,Dde),e(Dde,LSo),e(Ka,xSo),e(Ka,Gde),e(Gde,kSo),e(Ka,SSo),e(ze,RSo),e(ze,j),e(j,Wb),e(Wb,Ode),e(Ode,BSo),e(Wb,PSo),e(Wb,Sj),e(Sj,$So),e(Wb,ISo),e(j,qSo),e(j,Hb),e(Hb,Vde),e(Vde,NSo),e(Hb,jSo),e(Hb,Rj),e(Rj,DSo),e(Hb,GSo),e(j,OSo),e(j,Ub),e(Ub,Xde),e(Xde,VSo),e(Ub,XSo),e(Ub,Bj),e(Bj,zSo),e(Ub,QSo),e(j,WSo),e(j,Jb),e(Jb,zde),e(zde,HSo),e(Jb,USo),e(Jb,Pj),e(Pj,JSo),e(Jb,YSo),e(j,KSo),e(j,Yb),e(Yb,Qde),e(Qde,ZSo),e(Yb,eRo),e(Yb,$j),e($j,oRo),e(Yb,rRo),e(j,tRo),e(j,Kb),e(Kb,Wde),e(Wde,aRo),e(Kb,nRo),e(Kb,Ij),e(Ij,sRo),e(Kb,lRo),e(j,iRo),e(j,Zb),e(Zb,Hde),e(Hde,dRo),e(Zb,cRo),e(Zb,qj),e(qj,fRo),e(Zb,mRo),e(j,gRo),e(j,e2),e(e2,Ude),e(Ude,hRo),e(e2,pRo),e(e2,Nj),e(Nj,_Ro),e(e2,uRo),e(j,bRo),e(j,o2),e(o2,Jde),e(Jde,vRo),e(o2,FRo),e(o2,jj),e(jj,TRo),e(o2,MRo),e(j,ERo),e(j,r2),e(r2,Yde),e(Yde,CRo),e(r2,wRo),e(r2,Dj),e(Dj,ARo),e(r2,yRo),e(j,LRo),e(j,t2),e(t2,Kde),e(Kde,xRo),e(t2,kRo),e(t2,Gj),e(Gj,SRo),e(t2,RRo),e(j,BRo),e(j,a2),e(a2,Zde),e(Zde,PRo),e(a2,$Ro),e(a2,Oj),e(Oj,IRo),e(a2,qRo),e(j,NRo),e(j,n2),e(n2,ece),e(ece,jRo),e(n2,DRo),e(n2,Vj),e(Vj,GRo),e(n2,ORo),e(j,VRo),e(j,s2),e(s2,oce),e(oce,XRo),e(s2,zRo),e(s2,Xj),e(Xj,QRo),e(s2,WRo),e(j,HRo),e(j,l2),e(l2,rce),e(rce,URo),e(l2,JRo),e(l2,zj),e(zj,YRo),e(l2,KRo),e(j,ZRo),e(j,i2),e(i2,tce),e(tce,eBo),e(i2,oBo),e(i2,Qj),e(Qj,rBo),e(i2,tBo),e(j,aBo),e(j,d2),e(d2,ace),e(ace,nBo),e(d2,sBo),e(d2,Wj),e(Wj,lBo),e(d2,iBo),e(j,dBo),e(j,c2),e(c2,nce),e(nce,cBo),e(c2,fBo),e(c2,Hj),e(Hj,mBo),e(c2,gBo),e(j,hBo),e(j,f2),e(f2,sce),e(sce,pBo),e(f2,_Bo),e(f2,Uj),e(Uj,uBo),e(f2,bBo),e(j,vBo),e(j,m2),e(m2,lce),e(lce,FBo),e(m2,TBo),e(m2,Jj),e(Jj,MBo),e(m2,EBo),e(j,CBo),e(j,g2),e(g2,ice),e(ice,wBo),e(g2,ABo),e(g2,Yj),e(Yj,yBo),e(g2,LBo),e(j,xBo),e(j,h2),e(h2,dce),e(dce,kBo),e(h2,SBo),e(h2,Kj),e(Kj,RBo),e(h2,BBo),e(j,PBo),e(j,p2),e(p2,cce),e(cce,$Bo),e(p2,IBo),e(p2,Zj),e(Zj,qBo),e(p2,NBo),e(j,jBo),e(j,_2),e(_2,fce),e(fce,DBo),e(_2,GBo),e(_2,eD),e(eD,OBo),e(_2,VBo),e(j,XBo),e(j,u2),e(u2,mce),e(mce,zBo),e(u2,QBo),e(u2,oD),e(oD,WBo),e(u2,HBo),e(j,UBo),e(j,b2),e(b2,gce),e(gce,JBo),e(b2,YBo),e(b2,rD),e(rD,KBo),e(b2,ZBo),e(j,ePo),e(j,v2),e(v2,hce),e(hce,oPo),e(v2,rPo),e(v2,tD),e(tD,tPo),e(v2,aPo),e(j,nPo),e(j,F2),e(F2,pce),e(pce,sPo),e(F2,lPo),e(F2,aD),e(aD,iPo),e(F2,dPo),e(j,cPo),e(j,T2),e(T2,_ce),e(_ce,fPo),e(T2,mPo),e(T2,nD),e(nD,gPo),e(T2,hPo),e(j,pPo),e(j,M2),e(M2,uce),e(uce,_Po),e(M2,uPo),e(M2,sD),e(sD,bPo),e(M2,vPo),e(j,FPo),e(j,E2),e(E2,bce),e(bce,TPo),e(E2,MPo),e(E2,lD),e(lD,EPo),e(E2,CPo),e(j,wPo),e(j,C2),e(C2,vce),e(vce,APo),e(C2,yPo),e(C2,iD),e(iD,LPo),e(C2,xPo),e(j,kPo),e(j,w2),e(w2,Fce),e(Fce,SPo),e(w2,RPo),e(w2,dD),e(dD,BPo),e(w2,PPo),e(ze,$Po),e(ze,A2),e(A2,IPo),e(A2,Tce),e(Tce,qPo),e(A2,NPo),e(A2,Mce),e(Mce,jPo),e(ze,DPo),e(ze,Ece),e(Ece,GPo),e(ze,OPo),g(Tw,ze,null),b(c,SBe,u),b(c,yd,u),e(yd,y2),e(y2,Cce),g(Mw,Cce,null),e(yd,VPo),e(yd,wce),e(wce,XPo),b(c,RBe,u),b(c,nr,u),g(Ew,nr,null),e(nr,zPo),e(nr,Ld),e(Ld,QPo),e(Ld,cD),e(cD,WPo),e(Ld,HPo),e(Ld,fD),e(fD,UPo),e(Ld,JPo),e(nr,YPo),e(nr,Cw),e(Cw,KPo),e(Cw,Ace),e(Ace,ZPo),e(Cw,e$o),e(nr,o$o),e(nr,Zr),g(ww,Zr,null),e(Zr,r$o),e(Zr,yce),e(yce,t$o),e(Zr,a$o),e(Zr,xd),e(xd,n$o),e(xd,Lce),e(Lce,s$o),e(xd,l$o),e(xd,mD),e(mD,i$o),e(xd,d$o),e(Zr,c$o),e(Zr,xce),e(xce,f$o),e(Zr,m$o),g(Aw,Zr,null),e(nr,g$o),e(nr,Qe),g(yw,Qe,null),e(Qe,h$o),e(Qe,kce),e(kce,p$o),e(Qe,_$o),e(Qe,Za),e(Za,u$o),e(Za,Sce),e(Sce,b$o),e(Za,v$o),e(Za,Rce),e(Rce,F$o),e(Za,T$o),e(Za,Bce),e(Bce,M$o),e(Za,E$o),e(Qe,C$o),e(Qe,R),e(R,L2),e(L2,Pce),e(Pce,w$o),e(L2,A$o),e(L2,gD),e(gD,y$o),e(L2,L$o),e(R,x$o),e(R,x2),e(x2,$ce),e($ce,k$o),e(x2,S$o),e(x2,hD),e(hD,R$o),e(x2,B$o),e(R,P$o),e(R,k2),e(k2,Ice),e(Ice,$$o),e(k2,I$o),e(k2,pD),e(pD,q$o),e(k2,N$o),e(R,j$o),e(R,S2),e(S2,qce),e(qce,D$o),e(S2,G$o),e(S2,_D),e(_D,O$o),e(S2,V$o),e(R,X$o),e(R,R2),e(R2,Nce),e(Nce,z$o),e(R2,Q$o),e(R2,uD),e(uD,W$o),e(R2,H$o),e(R,U$o),e(R,B2),e(B2,jce),e(jce,J$o),e(B2,Y$o),e(B2,bD),e(bD,K$o),e(B2,Z$o),e(R,eIo),e(R,P2),e(P2,Dce),e(Dce,oIo),e(P2,rIo),e(P2,vD),e(vD,tIo),e(P2,aIo),e(R,nIo),e(R,$2),e($2,Gce),e(Gce,sIo),e($2,lIo),e($2,FD),e(FD,iIo),e($2,dIo),e(R,cIo),e(R,I2),e(I2,Oce),e(Oce,fIo),e(I2,mIo),e(I2,TD),e(TD,gIo),e(I2,hIo),e(R,pIo),e(R,q2),e(q2,Vce),e(Vce,_Io),e(q2,uIo),e(q2,MD),e(MD,bIo),e(q2,vIo),e(R,FIo),e(R,N2),e(N2,Xce),e(Xce,TIo),e(N2,MIo),e(N2,ED),e(ED,EIo),e(N2,CIo),e(R,wIo),e(R,j2),e(j2,zce),e(zce,AIo),e(j2,yIo),e(j2,CD),e(CD,LIo),e(j2,xIo),e(R,kIo),e(R,D2),e(D2,Qce),e(Qce,SIo),e(D2,RIo),e(D2,wD),e(wD,BIo),e(D2,PIo),e(R,$Io),e(R,G2),e(G2,Wce),e(Wce,IIo),e(G2,qIo),e(G2,AD),e(AD,NIo),e(G2,jIo),e(R,DIo),e(R,O2),e(O2,Hce),e(Hce,GIo),e(O2,OIo),e(O2,yD),e(yD,VIo),e(O2,XIo),e(R,zIo),e(R,V2),e(V2,Uce),e(Uce,QIo),e(V2,WIo),e(V2,LD),e(LD,HIo),e(V2,UIo),e(R,JIo),e(R,X2),e(X2,Jce),e(Jce,YIo),e(X2,KIo),e(X2,xD),e(xD,ZIo),e(X2,eqo),e(R,oqo),e(R,z2),e(z2,Yce),e(Yce,rqo),e(z2,tqo),e(z2,kD),e(kD,aqo),e(z2,nqo),e(R,sqo),e(R,Q2),e(Q2,Kce),e(Kce,lqo),e(Q2,iqo),e(Q2,SD),e(SD,dqo),e(Q2,cqo),e(R,fqo),e(R,W2),e(W2,Zce),e(Zce,mqo),e(W2,gqo),e(W2,RD),e(RD,hqo),e(W2,pqo),e(R,_qo),e(R,H2),e(H2,efe),e(efe,uqo),e(H2,bqo),e(H2,BD),e(BD,vqo),e(H2,Fqo),e(R,Tqo),e(R,U2),e(U2,ofe),e(ofe,Mqo),e(U2,Eqo),e(U2,PD),e(PD,Cqo),e(U2,wqo),e(R,Aqo),e(R,J2),e(J2,rfe),e(rfe,yqo),e(J2,Lqo),e(J2,$D),e($D,xqo),e(J2,kqo),e(R,Sqo),e(R,Y2),e(Y2,tfe),e(tfe,Rqo),e(Y2,Bqo),e(Y2,ID),e(ID,Pqo),e(Y2,$qo),e(R,Iqo),e(R,K2),e(K2,afe),e(afe,qqo),e(K2,Nqo),e(K2,qD),e(qD,jqo),e(K2,Dqo),e(R,Gqo),e(R,Z2),e(Z2,nfe),e(nfe,Oqo),e(Z2,Vqo),e(Z2,ND),e(ND,Xqo),e(Z2,zqo),e(R,Qqo),e(R,e5),e(e5,sfe),e(sfe,Wqo),e(e5,Hqo),e(e5,jD),e(jD,Uqo),e(e5,Jqo),e(R,Yqo),e(R,o5),e(o5,lfe),e(lfe,Kqo),e(o5,Zqo),e(o5,DD),e(DD,eNo),e(o5,oNo),e(R,rNo),e(R,r5),e(r5,ife),e(ife,tNo),e(r5,aNo),e(r5,GD),e(GD,nNo),e(r5,sNo),e(R,lNo),e(R,t5),e(t5,dfe),e(dfe,iNo),e(t5,dNo),e(t5,OD),e(OD,cNo),e(t5,fNo),e(R,mNo),e(R,a5),e(a5,cfe),e(cfe,gNo),e(a5,hNo),e(a5,VD),e(VD,pNo),e(a5,_No),e(R,uNo),e(R,n5),e(n5,ffe),e(ffe,bNo),e(n5,vNo),e(n5,XD),e(XD,FNo),e(n5,TNo),e(R,MNo),e(R,s5),e(s5,mfe),e(mfe,ENo),e(s5,CNo),e(s5,zD),e(zD,wNo),e(s5,ANo),e(R,yNo),e(R,l5),e(l5,gfe),e(gfe,LNo),e(l5,xNo),e(l5,QD),e(QD,kNo),e(l5,SNo),e(R,RNo),e(R,i5),e(i5,hfe),e(hfe,BNo),e(i5,PNo),e(i5,WD),e(WD,$No),e(i5,INo),e(R,qNo),e(R,d5),e(d5,pfe),e(pfe,NNo),e(d5,jNo),e(d5,HD),e(HD,DNo),e(d5,GNo),e(R,ONo),e(R,c5),e(c5,_fe),e(_fe,VNo),e(c5,XNo),e(c5,UD),e(UD,zNo),e(c5,QNo),e(R,WNo),e(R,f5),e(f5,ufe),e(ufe,HNo),e(f5,UNo),e(f5,JD),e(JD,JNo),e(f5,YNo),e(R,KNo),e(R,m5),e(m5,bfe),e(bfe,ZNo),e(m5,ejo),e(m5,YD),e(YD,ojo),e(m5,rjo),e(Qe,tjo),e(Qe,g5),e(g5,ajo),e(g5,vfe),e(vfe,njo),e(g5,sjo),e(g5,Ffe),e(Ffe,ljo),e(Qe,ijo),e(Qe,Tfe),e(Tfe,djo),e(Qe,cjo),g(Lw,Qe,null),b(c,BBe,u),b(c,kd,u),e(kd,h5),e(h5,Mfe),g(xw,Mfe,null),e(kd,fjo),e(kd,Efe),e(Efe,mjo),b(c,PBe,u),b(c,sr,u),g(kw,sr,null),e(sr,gjo),e(sr,Sd),e(Sd,hjo),e(Sd,KD),e(KD,pjo),e(Sd,_jo),e(Sd,ZD),e(ZD,ujo),e(Sd,bjo),e(sr,vjo),e(sr,Sw),e(Sw,Fjo),e(Sw,Cfe),e(Cfe,Tjo),e(Sw,Mjo),e(sr,Ejo),e(sr,et),g(Rw,et,null),e(et,Cjo),e(et,wfe),e(wfe,wjo),e(et,Ajo),e(et,Rd),e(Rd,yjo),e(Rd,Afe),e(Afe,Ljo),e(Rd,xjo),e(Rd,eG),e(eG,kjo),e(Rd,Sjo),e(et,Rjo),e(et,yfe),e(yfe,Bjo),e(et,Pjo),g(Bw,et,null),e(sr,$jo),e(sr,We),g(Pw,We,null),e(We,Ijo),e(We,Lfe),e(Lfe,qjo),e(We,Njo),e(We,en),e(en,jjo),e(en,xfe),e(xfe,Djo),e(en,Gjo),e(en,kfe),e(kfe,Ojo),e(en,Vjo),e(en,Sfe),e(Sfe,Xjo),e(en,zjo),e(We,Qjo),e(We,Rfe),e(Rfe,p5),e(p5,Bfe),e(Bfe,Wjo),e(p5,Hjo),e(p5,oG),e(oG,Ujo),e(p5,Jjo),e(We,Yjo),e(We,_5),e(_5,Kjo),e(_5,Pfe),e(Pfe,Zjo),e(_5,eDo),e(_5,$fe),e($fe,oDo),e(We,rDo),e(We,Ife),e(Ife,tDo),e(We,aDo),g($w,We,null),b(c,$Be,u),b(c,Bd,u),e(Bd,u5),e(u5,qfe),g(Iw,qfe,null),e(Bd,nDo),e(Bd,Nfe),e(Nfe,sDo),b(c,IBe,u),b(c,lr,u),g(qw,lr,null),e(lr,lDo),e(lr,Pd),e(Pd,iDo),e(Pd,rG),e(rG,dDo),e(Pd,cDo),e(Pd,tG),e(tG,fDo),e(Pd,mDo),e(lr,gDo),e(lr,Nw),e(Nw,hDo),e(Nw,jfe),e(jfe,pDo),e(Nw,_Do),e(lr,uDo),e(lr,ot),g(jw,ot,null),e(ot,bDo),e(ot,Dfe),e(Dfe,vDo),e(ot,FDo),e(ot,$d),e($d,TDo),e($d,Gfe),e(Gfe,MDo),e($d,EDo),e($d,aG),e(aG,CDo),e($d,wDo),e(ot,ADo),e(ot,Ofe),e(Ofe,yDo),e(ot,LDo),g(Dw,ot,null),e(lr,xDo),e(lr,He),g(Gw,He,null),e(He,kDo),e(He,Vfe),e(Vfe,SDo),e(He,RDo),e(He,on),e(on,BDo),e(on,Xfe),e(Xfe,PDo),e(on,$Do),e(on,zfe),e(zfe,IDo),e(on,qDo),e(on,Qfe),e(Qfe,NDo),e(on,jDo),e(He,DDo),e(He,de),e(de,b5),e(b5,Wfe),e(Wfe,GDo),e(b5,ODo),e(b5,nG),e(nG,VDo),e(b5,XDo),e(de,zDo),e(de,v5),e(v5,Hfe),e(Hfe,QDo),e(v5,WDo),e(v5,sG),e(sG,HDo),e(v5,UDo),e(de,JDo),e(de,F5),e(F5,Ufe),e(Ufe,YDo),e(F5,KDo),e(F5,lG),e(lG,ZDo),e(F5,eGo),e(de,oGo),e(de,Xs),e(Xs,Jfe),e(Jfe,rGo),e(Xs,tGo),e(Xs,iG),e(iG,aGo),e(Xs,nGo),e(Xs,dG),e(dG,sGo),e(Xs,lGo),e(de,iGo),e(de,T5),e(T5,Yfe),e(Yfe,dGo),e(T5,cGo),e(T5,cG),e(cG,fGo),e(T5,mGo),e(de,gGo),e(de,ma),e(ma,Kfe),e(Kfe,hGo),e(ma,pGo),e(ma,fG),e(fG,_Go),e(ma,uGo),e(ma,mG),e(mG,bGo),e(ma,vGo),e(ma,gG),e(gG,FGo),e(ma,TGo),e(de,MGo),e(de,M5),e(M5,Zfe),e(Zfe,EGo),e(M5,CGo),e(M5,hG),e(hG,wGo),e(M5,AGo),e(de,yGo),e(de,E5),e(E5,eme),e(eme,LGo),e(E5,xGo),e(E5,pG),e(pG,kGo),e(E5,SGo),e(de,RGo),e(de,C5),e(C5,ome),e(ome,BGo),e(C5,PGo),e(C5,_G),e(_G,$Go),e(C5,IGo),e(de,qGo),e(de,w5),e(w5,rme),e(rme,NGo),e(w5,jGo),e(w5,uG),e(uG,DGo),e(w5,GGo),e(de,OGo),e(de,A5),e(A5,tme),e(tme,VGo),e(A5,XGo),e(A5,bG),e(bG,zGo),e(A5,QGo),e(de,WGo),e(de,y5),e(y5,ame),e(ame,HGo),e(y5,UGo),e(y5,vG),e(vG,JGo),e(y5,YGo),e(de,KGo),e(de,L5),e(L5,nme),e(nme,ZGo),e(L5,eOo),e(L5,FG),e(FG,oOo),e(L5,rOo),e(He,tOo),e(He,x5),e(x5,aOo),e(x5,sme),e(sme,nOo),e(x5,sOo),e(x5,lme),e(lme,lOo),e(He,iOo),e(He,ime),e(ime,dOo),e(He,cOo),g(Ow,He,null),b(c,qBe,u),b(c,Id,u),e(Id,k5),e(k5,dme),g(Vw,dme,null),e(Id,fOo),e(Id,cme),e(cme,mOo),b(c,NBe,u),b(c,ir,u),g(Xw,ir,null),e(ir,gOo),e(ir,qd),e(qd,hOo),e(qd,TG),e(TG,pOo),e(qd,_Oo),e(qd,MG),e(MG,uOo),e(qd,bOo),e(ir,vOo),e(ir,zw),e(zw,FOo),e(zw,fme),e(fme,TOo),e(zw,MOo),e(ir,EOo),e(ir,rt),g(Qw,rt,null),e(rt,COo),e(rt,mme),e(mme,wOo),e(rt,AOo),e(rt,Nd),e(Nd,yOo),e(Nd,gme),e(gme,LOo),e(Nd,xOo),e(Nd,EG),e(EG,kOo),e(Nd,SOo),e(rt,ROo),e(rt,hme),e(hme,BOo),e(rt,POo),g(Ww,rt,null),e(ir,$Oo),e(ir,Ue),g(Hw,Ue,null),e(Ue,IOo),e(Ue,pme),e(pme,qOo),e(Ue,NOo),e(Ue,rn),e(rn,jOo),e(rn,_me),e(_me,DOo),e(rn,GOo),e(rn,ume),e(ume,OOo),e(rn,VOo),e(rn,bme),e(bme,XOo),e(rn,zOo),e(Ue,QOo),e(Ue,vme),e(vme,S5),e(S5,Fme),e(Fme,WOo),e(S5,HOo),e(S5,CG),e(CG,UOo),e(S5,JOo),e(Ue,YOo),e(Ue,R5),e(R5,KOo),e(R5,Tme),e(Tme,ZOo),e(R5,eVo),e(R5,Mme),e(Mme,oVo),e(Ue,rVo),e(Ue,Eme),e(Eme,tVo),e(Ue,aVo),g(Uw,Ue,null),b(c,jBe,u),b(c,jd,u),e(jd,B5),e(B5,Cme),g(Jw,Cme,null),e(jd,nVo),e(jd,wme),e(wme,sVo),b(c,DBe,u),b(c,dr,u),g(Yw,dr,null),e(dr,lVo),e(dr,Dd),e(Dd,iVo),e(Dd,wG),e(wG,dVo),e(Dd,cVo),e(Dd,AG),e(AG,fVo),e(Dd,mVo),e(dr,gVo),e(dr,Kw),e(Kw,hVo),e(Kw,Ame),e(Ame,pVo),e(Kw,_Vo),e(dr,uVo),e(dr,tt),g(Zw,tt,null),e(tt,bVo),e(tt,yme),e(yme,vVo),e(tt,FVo),e(tt,Gd),e(Gd,TVo),e(Gd,Lme),e(Lme,MVo),e(Gd,EVo),e(Gd,yG),e(yG,CVo),e(Gd,wVo),e(tt,AVo),e(tt,xme),e(xme,yVo),e(tt,LVo),g(eA,tt,null),e(dr,xVo),e(dr,Je),g(oA,Je,null),e(Je,kVo),e(Je,kme),e(kme,SVo),e(Je,RVo),e(Je,tn),e(tn,BVo),e(tn,Sme),e(Sme,PVo),e(tn,$Vo),e(tn,Rme),e(Rme,IVo),e(tn,qVo),e(tn,Bme),e(Bme,NVo),e(tn,jVo),e(Je,DVo),e(Je,Se),e(Se,P5),e(P5,Pme),e(Pme,GVo),e(P5,OVo),e(P5,LG),e(LG,VVo),e(P5,XVo),e(Se,zVo),e(Se,$5),e($5,$me),e($me,QVo),e($5,WVo),e($5,xG),e(xG,HVo),e($5,UVo),e(Se,JVo),e(Se,I5),e(I5,Ime),e(Ime,YVo),e(I5,KVo),e(I5,kG),e(kG,ZVo),e(I5,eXo),e(Se,oXo),e(Se,q5),e(q5,qme),e(qme,rXo),e(q5,tXo),e(q5,SG),e(SG,aXo),e(q5,nXo),e(Se,sXo),e(Se,N5),e(N5,Nme),e(Nme,lXo),e(N5,iXo),e(N5,RG),e(RG,dXo),e(N5,cXo),e(Se,fXo),e(Se,j5),e(j5,jme),e(jme,mXo),e(j5,gXo),e(j5,BG),e(BG,hXo),e(j5,pXo),e(Se,_Xo),e(Se,D5),e(D5,Dme),e(Dme,uXo),e(D5,bXo),e(D5,PG),e(PG,vXo),e(D5,FXo),e(Se,TXo),e(Se,G5),e(G5,Gme),e(Gme,MXo),e(G5,EXo),e(G5,$G),e($G,CXo),e(G5,wXo),e(Je,AXo),e(Je,O5),e(O5,yXo),e(O5,Ome),e(Ome,LXo),e(O5,xXo),e(O5,Vme),e(Vme,kXo),e(Je,SXo),e(Je,Xme),e(Xme,RXo),e(Je,BXo),g(rA,Je,null),b(c,GBe,u),b(c,Od,u),e(Od,V5),e(V5,zme),g(tA,zme,null),e(Od,PXo),e(Od,Qme),e(Qme,$Xo),b(c,OBe,u),b(c,cr,u),g(aA,cr,null),e(cr,IXo),e(cr,Vd),e(Vd,qXo),e(Vd,IG),e(IG,NXo),e(Vd,jXo),e(Vd,qG),e(qG,DXo),e(Vd,GXo),e(cr,OXo),e(cr,nA),e(nA,VXo),e(nA,Wme),e(Wme,XXo),e(nA,zXo),e(cr,QXo),e(cr,at),g(sA,at,null),e(at,WXo),e(at,Hme),e(Hme,HXo),e(at,UXo),e(at,Xd),e(Xd,JXo),e(Xd,Ume),e(Ume,YXo),e(Xd,KXo),e(Xd,NG),e(NG,ZXo),e(Xd,ezo),e(at,ozo),e(at,Jme),e(Jme,rzo),e(at,tzo),g(lA,at,null),e(cr,azo),e(cr,Ye),g(iA,Ye,null),e(Ye,nzo),e(Ye,Yme),e(Yme,szo),e(Ye,lzo),e(Ye,an),e(an,izo),e(an,Kme),e(Kme,dzo),e(an,czo),e(an,Zme),e(Zme,fzo),e(an,mzo),e(an,ege),e(ege,gzo),e(an,hzo),e(Ye,pzo),e(Ye,nn),e(nn,X5),e(X5,oge),e(oge,_zo),e(X5,uzo),e(X5,jG),e(jG,bzo),e(X5,vzo),e(nn,Fzo),e(nn,z5),e(z5,rge),e(rge,Tzo),e(z5,Mzo),e(z5,DG),e(DG,Ezo),e(z5,Czo),e(nn,wzo),e(nn,Q5),e(Q5,tge),e(tge,Azo),e(Q5,yzo),e(Q5,GG),e(GG,Lzo),e(Q5,xzo),e(nn,kzo),e(nn,W5),e(W5,age),e(age,Szo),e(W5,Rzo),e(W5,OG),e(OG,Bzo),e(W5,Pzo),e(Ye,$zo),e(Ye,H5),e(H5,Izo),e(H5,nge),e(nge,qzo),e(H5,Nzo),e(H5,sge),e(sge,jzo),e(Ye,Dzo),e(Ye,lge),e(lge,Gzo),e(Ye,Ozo),g(dA,Ye,null),b(c,VBe,u),b(c,zd,u),e(zd,U5),e(U5,ige),g(cA,ige,null),e(zd,Vzo),e(zd,dge),e(dge,Xzo),b(c,XBe,u),b(c,fr,u),g(fA,fr,null),e(fr,zzo),e(fr,Qd),e(Qd,Qzo),e(Qd,VG),e(VG,Wzo),e(Qd,Hzo),e(Qd,XG),e(XG,Uzo),e(Qd,Jzo),e(fr,Yzo),e(fr,mA),e(mA,Kzo),e(mA,cge),e(cge,Zzo),e(mA,eQo),e(fr,oQo),e(fr,nt),g(gA,nt,null),e(nt,rQo),e(nt,fge),e(fge,tQo),e(nt,aQo),e(nt,Wd),e(Wd,nQo),e(Wd,mge),e(mge,sQo),e(Wd,lQo),e(Wd,zG),e(zG,iQo),e(Wd,dQo),e(nt,cQo),e(nt,gge),e(gge,fQo),e(nt,mQo),g(hA,nt,null),e(fr,gQo),e(fr,Ke),g(pA,Ke,null),e(Ke,hQo),e(Ke,hge),e(hge,pQo),e(Ke,_Qo),e(Ke,sn),e(sn,uQo),e(sn,pge),e(pge,bQo),e(sn,vQo),e(sn,_ge),e(_ge,FQo),e(sn,TQo),e(sn,uge),e(uge,MQo),e(sn,EQo),e(Ke,CQo),e(Ke,Re),e(Re,J5),e(J5,bge),e(bge,wQo),e(J5,AQo),e(J5,QG),e(QG,yQo),e(J5,LQo),e(Re,xQo),e(Re,Y5),e(Y5,vge),e(vge,kQo),e(Y5,SQo),e(Y5,WG),e(WG,RQo),e(Y5,BQo),e(Re,PQo),e(Re,K5),e(K5,Fge),e(Fge,$Qo),e(K5,IQo),e(K5,HG),e(HG,qQo),e(K5,NQo),e(Re,jQo),e(Re,Z5),e(Z5,Tge),e(Tge,DQo),e(Z5,GQo),e(Z5,UG),e(UG,OQo),e(Z5,VQo),e(Re,XQo),e(Re,ev),e(ev,Mge),e(Mge,zQo),e(ev,QQo),e(ev,JG),e(JG,WQo),e(ev,HQo),e(Re,UQo),e(Re,ov),e(ov,Ege),e(Ege,JQo),e(ov,YQo),e(ov,YG),e(YG,KQo),e(ov,ZQo),e(Re,eWo),e(Re,rv),e(rv,Cge),e(Cge,oWo),e(rv,rWo),e(rv,KG),e(KG,tWo),e(rv,aWo),e(Re,nWo),e(Re,tv),e(tv,wge),e(wge,sWo),e(tv,lWo),e(tv,ZG),e(ZG,iWo),e(tv,dWo),e(Ke,cWo),e(Ke,av),e(av,fWo),e(av,Age),e(Age,mWo),e(av,gWo),e(av,yge),e(yge,hWo),e(Ke,pWo),e(Ke,Lge),e(Lge,_Wo),e(Ke,uWo),g(_A,Ke,null),b(c,zBe,u),b(c,Hd,u),e(Hd,nv),e(nv,xge),g(uA,xge,null),e(Hd,bWo),e(Hd,kge),e(kge,vWo),b(c,QBe,u),b(c,mr,u),g(bA,mr,null),e(mr,FWo),e(mr,Ud),e(Ud,TWo),e(Ud,eO),e(eO,MWo),e(Ud,EWo),e(Ud,oO),e(oO,CWo),e(Ud,wWo),e(mr,AWo),e(mr,vA),e(vA,yWo),e(vA,Sge),e(Sge,LWo),e(vA,xWo),e(mr,kWo),e(mr,st),g(FA,st,null),e(st,SWo),e(st,Rge),e(Rge,RWo),e(st,BWo),e(st,Jd),e(Jd,PWo),e(Jd,Bge),e(Bge,$Wo),e(Jd,IWo),e(Jd,rO),e(rO,qWo),e(Jd,NWo),e(st,jWo),e(st,Pge),e(Pge,DWo),e(st,GWo),g(TA,st,null),e(mr,OWo),e(mr,Ze),g(MA,Ze,null),e(Ze,VWo),e(Ze,$ge),e($ge,XWo),e(Ze,zWo),e(Ze,ln),e(ln,QWo),e(ln,Ige),e(Ige,WWo),e(ln,HWo),e(ln,qge),e(qge,UWo),e(ln,JWo),e(ln,Nge),e(Nge,YWo),e(ln,KWo),e(Ze,ZWo),e(Ze,EA),e(EA,sv),e(sv,jge),e(jge,eHo),e(sv,oHo),e(sv,tO),e(tO,rHo),e(sv,tHo),e(EA,aHo),e(EA,lv),e(lv,Dge),e(Dge,nHo),e(lv,sHo),e(lv,aO),e(aO,lHo),e(lv,iHo),e(Ze,dHo),e(Ze,iv),e(iv,cHo),e(iv,Gge),e(Gge,fHo),e(iv,mHo),e(iv,Oge),e(Oge,gHo),e(Ze,hHo),e(Ze,Vge),e(Vge,pHo),e(Ze,_Ho),g(CA,Ze,null),b(c,WBe,u),b(c,Yd,u),e(Yd,dv),e(dv,Xge),g(wA,Xge,null),e(Yd,uHo),e(Yd,zge),e(zge,bHo),b(c,HBe,u),b(c,gr,u),g(AA,gr,null),e(gr,vHo),e(gr,Kd),e(Kd,FHo),e(Kd,nO),e(nO,THo),e(Kd,MHo),e(Kd,sO),e(sO,EHo),e(Kd,CHo),e(gr,wHo),e(gr,yA),e(yA,AHo),e(yA,Qge),e(Qge,yHo),e(yA,LHo),e(gr,xHo),e(gr,lt),g(LA,lt,null),e(lt,kHo),e(lt,Wge),e(Wge,SHo),e(lt,RHo),e(lt,Zd),e(Zd,BHo),e(Zd,Hge),e(Hge,PHo),e(Zd,$Ho),e(Zd,lO),e(lO,IHo),e(Zd,qHo),e(lt,NHo),e(lt,Uge),e(Uge,jHo),e(lt,DHo),g(xA,lt,null),e(gr,GHo),e(gr,eo),g(kA,eo,null),e(eo,OHo),e(eo,Jge),e(Jge,VHo),e(eo,XHo),e(eo,dn),e(dn,zHo),e(dn,Yge),e(Yge,QHo),e(dn,WHo),e(dn,Kge),e(Kge,HHo),e(dn,UHo),e(dn,Zge),e(Zge,JHo),e(dn,YHo),e(eo,KHo),e(eo,cn),e(cn,cv),e(cv,ehe),e(ehe,ZHo),e(cv,eUo),e(cv,iO),e(iO,oUo),e(cv,rUo),e(cn,tUo),e(cn,fv),e(fv,ohe),e(ohe,aUo),e(fv,nUo),e(fv,dO),e(dO,sUo),e(fv,lUo),e(cn,iUo),e(cn,mv),e(mv,rhe),e(rhe,dUo),e(mv,cUo),e(mv,cO),e(cO,fUo),e(mv,mUo),e(cn,gUo),e(cn,gv),e(gv,the),e(the,hUo),e(gv,pUo),e(gv,fO),e(fO,_Uo),e(gv,uUo),e(eo,bUo),e(eo,hv),e(hv,vUo),e(hv,ahe),e(ahe,FUo),e(hv,TUo),e(hv,nhe),e(nhe,MUo),e(eo,EUo),e(eo,she),e(she,CUo),e(eo,wUo),g(SA,eo,null),b(c,UBe,u),b(c,ec,u),e(ec,pv),e(pv,lhe),g(RA,lhe,null),e(ec,AUo),e(ec,ihe),e(ihe,yUo),b(c,JBe,u),b(c,hr,u),g(BA,hr,null),e(hr,LUo),e(hr,oc),e(oc,xUo),e(oc,mO),e(mO,kUo),e(oc,SUo),e(oc,gO),e(gO,RUo),e(oc,BUo),e(hr,PUo),e(hr,PA),e(PA,$Uo),e(PA,dhe),e(dhe,IUo),e(PA,qUo),e(hr,NUo),e(hr,it),g($A,it,null),e(it,jUo),e(it,che),e(che,DUo),e(it,GUo),e(it,rc),e(rc,OUo),e(rc,fhe),e(fhe,VUo),e(rc,XUo),e(rc,hO),e(hO,zUo),e(rc,QUo),e(it,WUo),e(it,mhe),e(mhe,HUo),e(it,UUo),g(IA,it,null),e(hr,JUo),e(hr,oo),g(qA,oo,null),e(oo,YUo),e(oo,ghe),e(ghe,KUo),e(oo,ZUo),e(oo,fn),e(fn,eJo),e(fn,hhe),e(hhe,oJo),e(fn,rJo),e(fn,phe),e(phe,tJo),e(fn,aJo),e(fn,_he),e(_he,nJo),e(fn,sJo),e(oo,lJo),e(oo,tc),e(tc,_v),e(_v,uhe),e(uhe,iJo),e(_v,dJo),e(_v,pO),e(pO,cJo),e(_v,fJo),e(tc,mJo),e(tc,uv),e(uv,bhe),e(bhe,gJo),e(uv,hJo),e(uv,_O),e(_O,pJo),e(uv,_Jo),e(tc,uJo),e(tc,bv),e(bv,vhe),e(vhe,bJo),e(bv,vJo),e(bv,uO),e(uO,FJo),e(bv,TJo),e(oo,MJo),e(oo,vv),e(vv,EJo),e(vv,Fhe),e(Fhe,CJo),e(vv,wJo),e(vv,The),e(The,AJo),e(oo,yJo),e(oo,Mhe),e(Mhe,LJo),e(oo,xJo),g(NA,oo,null),b(c,YBe,u),b(c,ac,u),e(ac,Fv),e(Fv,Ehe),g(jA,Ehe,null),e(ac,kJo),e(ac,Che),e(Che,SJo),b(c,KBe,u),b(c,pr,u),g(DA,pr,null),e(pr,RJo),e(pr,nc),e(nc,BJo),e(nc,bO),e(bO,PJo),e(nc,$Jo),e(nc,vO),e(vO,IJo),e(nc,qJo),e(pr,NJo),e(pr,GA),e(GA,jJo),e(GA,whe),e(whe,DJo),e(GA,GJo),e(pr,OJo),e(pr,dt),g(OA,dt,null),e(dt,VJo),e(dt,Ahe),e(Ahe,XJo),e(dt,zJo),e(dt,sc),e(sc,QJo),e(sc,yhe),e(yhe,WJo),e(sc,HJo),e(sc,FO),e(FO,UJo),e(sc,JJo),e(dt,YJo),e(dt,Lhe),e(Lhe,KJo),e(dt,ZJo),g(VA,dt,null),e(pr,eYo),e(pr,ro),g(XA,ro,null),e(ro,oYo),e(ro,xhe),e(xhe,rYo),e(ro,tYo),e(ro,mn),e(mn,aYo),e(mn,khe),e(khe,nYo),e(mn,sYo),e(mn,She),e(She,lYo),e(mn,iYo),e(mn,Rhe),e(Rhe,dYo),e(mn,cYo),e(ro,fYo),e(ro,Bhe),e(Bhe,Tv),e(Tv,Phe),e(Phe,mYo),e(Tv,gYo),e(Tv,TO),e(TO,hYo),e(Tv,pYo),e(ro,_Yo),e(ro,Mv),e(Mv,uYo),e(Mv,$he),e($he,bYo),e(Mv,vYo),e(Mv,Ihe),e(Ihe,FYo),e(ro,TYo),e(ro,qhe),e(qhe,MYo),e(ro,EYo),g(zA,ro,null),b(c,ZBe,u),b(c,lc,u),e(lc,Ev),e(Ev,Nhe),g(QA,Nhe,null),e(lc,CYo),e(lc,jhe),e(jhe,wYo),b(c,ePe,u),b(c,_r,u),g(WA,_r,null),e(_r,AYo),e(_r,ic),e(ic,yYo),e(ic,MO),e(MO,LYo),e(ic,xYo),e(ic,EO),e(EO,kYo),e(ic,SYo),e(_r,RYo),e(_r,HA),e(HA,BYo),e(HA,Dhe),e(Dhe,PYo),e(HA,$Yo),e(_r,IYo),e(_r,ct),g(UA,ct,null),e(ct,qYo),e(ct,Ghe),e(Ghe,NYo),e(ct,jYo),e(ct,dc),e(dc,DYo),e(dc,Ohe),e(Ohe,GYo),e(dc,OYo),e(dc,CO),e(CO,VYo),e(dc,XYo),e(ct,zYo),e(ct,Vhe),e(Vhe,QYo),e(ct,WYo),g(JA,ct,null),e(_r,HYo),e(_r,to),g(YA,to,null),e(to,UYo),e(to,Xhe),e(Xhe,JYo),e(to,YYo),e(to,gn),e(gn,KYo),e(gn,zhe),e(zhe,ZYo),e(gn,eKo),e(gn,Qhe),e(Qhe,oKo),e(gn,rKo),e(gn,Whe),e(Whe,tKo),e(gn,aKo),e(to,nKo),e(to,Hhe),e(Hhe,Cv),e(Cv,Uhe),e(Uhe,sKo),e(Cv,lKo),e(Cv,wO),e(wO,iKo),e(Cv,dKo),e(to,cKo),e(to,wv),e(wv,fKo),e(wv,Jhe),e(Jhe,mKo),e(wv,gKo),e(wv,Yhe),e(Yhe,hKo),e(to,pKo),e(to,Khe),e(Khe,_Ko),e(to,uKo),g(KA,to,null),b(c,oPe,u),b(c,cc,u),e(cc,Av),e(Av,Zhe),g(ZA,Zhe,null),e(cc,bKo),e(cc,epe),e(epe,vKo),b(c,rPe,u),b(c,ur,u),g(e0,ur,null),e(ur,FKo),e(ur,fc),e(fc,TKo),e(fc,AO),e(AO,MKo),e(fc,EKo),e(fc,yO),e(yO,CKo),e(fc,wKo),e(ur,AKo),e(ur,o0),e(o0,yKo),e(o0,ope),e(ope,LKo),e(o0,xKo),e(ur,kKo),e(ur,ft),g(r0,ft,null),e(ft,SKo),e(ft,rpe),e(rpe,RKo),e(ft,BKo),e(ft,mc),e(mc,PKo),e(mc,tpe),e(tpe,$Ko),e(mc,IKo),e(mc,LO),e(LO,qKo),e(mc,NKo),e(ft,jKo),e(ft,ape),e(ape,DKo),e(ft,GKo),g(t0,ft,null),e(ur,OKo),e(ur,ao),g(a0,ao,null),e(ao,VKo),e(ao,npe),e(npe,XKo),e(ao,zKo),e(ao,hn),e(hn,QKo),e(hn,spe),e(spe,WKo),e(hn,HKo),e(hn,lpe),e(lpe,UKo),e(hn,JKo),e(hn,ipe),e(ipe,YKo),e(hn,KKo),e(ao,ZKo),e(ao,pn),e(pn,yv),e(yv,dpe),e(dpe,eZo),e(yv,oZo),e(yv,xO),e(xO,rZo),e(yv,tZo),e(pn,aZo),e(pn,Lv),e(Lv,cpe),e(cpe,nZo),e(Lv,sZo),e(Lv,kO),e(kO,lZo),e(Lv,iZo),e(pn,dZo),e(pn,xv),e(xv,fpe),e(fpe,cZo),e(xv,fZo),e(xv,SO),e(SO,mZo),e(xv,gZo),e(pn,hZo),e(pn,kv),e(kv,mpe),e(mpe,pZo),e(kv,_Zo),e(kv,RO),e(RO,uZo),e(kv,bZo),e(ao,vZo),e(ao,Sv),e(Sv,FZo),e(Sv,gpe),e(gpe,TZo),e(Sv,MZo),e(Sv,hpe),e(hpe,EZo),e(ao,CZo),e(ao,ppe),e(ppe,wZo),e(ao,AZo),g(n0,ao,null),b(c,tPe,u),b(c,gc,u),e(gc,Rv),e(Rv,_pe),g(s0,_pe,null),e(gc,yZo),e(gc,upe),e(upe,LZo),b(c,aPe,u),b(c,br,u),g(l0,br,null),e(br,xZo),e(br,hc),e(hc,kZo),e(hc,BO),e(BO,SZo),e(hc,RZo),e(hc,PO),e(PO,BZo),e(hc,PZo),e(br,$Zo),e(br,i0),e(i0,IZo),e(i0,bpe),e(bpe,qZo),e(i0,NZo),e(br,jZo),e(br,mt),g(d0,mt,null),e(mt,DZo),e(mt,vpe),e(vpe,GZo),e(mt,OZo),e(mt,pc),e(pc,VZo),e(pc,Fpe),e(Fpe,XZo),e(pc,zZo),e(pc,$O),e($O,QZo),e(pc,WZo),e(mt,HZo),e(mt,Tpe),e(Tpe,UZo),e(mt,JZo),g(c0,mt,null),e(br,YZo),e(br,no),g(f0,no,null),e(no,KZo),e(no,Mpe),e(Mpe,ZZo),e(no,eer),e(no,_n),e(_n,oer),e(_n,Epe),e(Epe,rer),e(_n,ter),e(_n,Cpe),e(Cpe,aer),e(_n,ner),e(_n,wpe),e(wpe,ser),e(_n,ler),e(no,ier),e(no,Ape),e(Ape,Bv),e(Bv,ype),e(ype,der),e(Bv,cer),e(Bv,IO),e(IO,fer),e(Bv,mer),e(no,ger),e(no,Pv),e(Pv,her),e(Pv,Lpe),e(Lpe,per),e(Pv,_er),e(Pv,xpe),e(xpe,uer),e(no,ber),e(no,kpe),e(kpe,ver),e(no,Fer),g(m0,no,null),b(c,nPe,u),b(c,_c,u),e(_c,$v),e($v,Spe),g(g0,Spe,null),e(_c,Ter),e(_c,Rpe),e(Rpe,Mer),b(c,sPe,u),b(c,vr,u),g(h0,vr,null),e(vr,Eer),e(vr,uc),e(uc,Cer),e(uc,qO),e(qO,wer),e(uc,Aer),e(uc,NO),e(NO,yer),e(uc,Ler),e(vr,xer),e(vr,p0),e(p0,ker),e(p0,Bpe),e(Bpe,Ser),e(p0,Rer),e(vr,Ber),e(vr,gt),g(_0,gt,null),e(gt,Per),e(gt,Ppe),e(Ppe,$er),e(gt,Ier),e(gt,bc),e(bc,qer),e(bc,$pe),e($pe,Ner),e(bc,jer),e(bc,jO),e(jO,Der),e(bc,Ger),e(gt,Oer),e(gt,Ipe),e(Ipe,Ver),e(gt,Xer),g(u0,gt,null),e(vr,zer),e(vr,ho),g(b0,ho,null),e(ho,Qer),e(ho,qpe),e(qpe,Wer),e(ho,Her),e(ho,un),e(un,Uer),e(un,Npe),e(Npe,Jer),e(un,Yer),e(un,jpe),e(jpe,Ker),e(un,Zer),e(un,Dpe),e(Dpe,eor),e(un,oor),e(ho,ror),e(ho,x),e(x,Iv),e(Iv,Gpe),e(Gpe,tor),e(Iv,aor),e(Iv,DO),e(DO,nor),e(Iv,sor),e(x,lor),e(x,qv),e(qv,Ope),e(Ope,ior),e(qv,dor),e(qv,GO),e(GO,cor),e(qv,mor),e(x,gor),e(x,Nv),e(Nv,Vpe),e(Vpe,hor),e(Nv,por),e(Nv,OO),e(OO,_or),e(Nv,uor),e(x,bor),e(x,jv),e(jv,Xpe),e(Xpe,vor),e(jv,For),e(jv,VO),e(VO,Tor),e(jv,Mor),e(x,Eor),e(x,Dv),e(Dv,zpe),e(zpe,Cor),e(Dv,wor),e(Dv,XO),e(XO,Aor),e(Dv,yor),e(x,Lor),e(x,Gv),e(Gv,Qpe),e(Qpe,xor),e(Gv,kor),e(Gv,zO),e(zO,Sor),e(Gv,Ror),e(x,Bor),e(x,Ov),e(Ov,Wpe),e(Wpe,Por),e(Ov,$or),e(Ov,QO),e(QO,Ior),e(Ov,qor),e(x,Nor),e(x,Vv),e(Vv,Hpe),e(Hpe,jor),e(Vv,Dor),e(Vv,WO),e(WO,Gor),e(Vv,Oor),e(x,Vor),e(x,Xv),e(Xv,Upe),e(Upe,Xor),e(Xv,zor),e(Xv,HO),e(HO,Qor),e(Xv,Wor),e(x,Hor),e(x,zv),e(zv,Jpe),e(Jpe,Uor),e(zv,Jor),e(zv,UO),e(UO,Yor),e(zv,Kor),e(x,Zor),e(x,Qv),e(Qv,Ype),e(Ype,err),e(Qv,orr),e(Qv,JO),e(JO,rrr),e(Qv,trr),e(x,arr),e(x,Wv),e(Wv,Kpe),e(Kpe,nrr),e(Wv,srr),e(Wv,YO),e(YO,lrr),e(Wv,irr),e(x,drr),e(x,Hv),e(Hv,Zpe),e(Zpe,crr),e(Hv,frr),e(Hv,KO),e(KO,mrr),e(Hv,grr),e(x,hrr),e(x,Uv),e(Uv,e_e),e(e_e,prr),e(Uv,_rr),e(Uv,ZO),e(ZO,urr),e(Uv,brr),e(x,vrr),e(x,Jv),e(Jv,o_e),e(o_e,Frr),e(Jv,Trr),e(Jv,eV),e(eV,Mrr),e(Jv,Err),e(x,Crr),e(x,Yv),e(Yv,r_e),e(r_e,wrr),e(Yv,Arr),e(Yv,oV),e(oV,yrr),e(Yv,Lrr),e(x,xrr),e(x,zs),e(zs,t_e),e(t_e,krr),e(zs,Srr),e(zs,rV),e(rV,Rrr),e(zs,Brr),e(zs,tV),e(tV,Prr),e(zs,$rr),e(x,Irr),e(x,Kv),e(Kv,a_e),e(a_e,qrr),e(Kv,Nrr),e(Kv,aV),e(aV,jrr),e(Kv,Drr),e(x,Grr),e(x,Zv),e(Zv,n_e),e(n_e,Orr),e(Zv,Vrr),e(Zv,nV),e(nV,Xrr),e(Zv,zrr),e(x,Qrr),e(x,eF),e(eF,s_e),e(s_e,Wrr),e(eF,Hrr),e(eF,sV),e(sV,Urr),e(eF,Jrr),e(x,Yrr),e(x,oF),e(oF,l_e),e(l_e,Krr),e(oF,Zrr),e(oF,lV),e(lV,etr),e(oF,otr),e(x,rtr),e(x,rF),e(rF,i_e),e(i_e,ttr),e(rF,atr),e(rF,iV),e(iV,ntr),e(rF,str),e(x,ltr),e(x,tF),e(tF,d_e),e(d_e,itr),e(tF,dtr),e(tF,dV),e(dV,ctr),e(tF,ftr),e(x,mtr),e(x,aF),e(aF,c_e),e(c_e,gtr),e(aF,htr),e(aF,cV),e(cV,ptr),e(aF,_tr),e(x,utr),e(x,nF),e(nF,f_e),e(f_e,btr),e(nF,vtr),e(nF,fV),e(fV,Ftr),e(nF,Ttr),e(x,Mtr),e(x,sF),e(sF,m_e),e(m_e,Etr),e(sF,Ctr),e(sF,mV),e(mV,wtr),e(sF,Atr),e(x,ytr),e(x,lF),e(lF,g_e),e(g_e,Ltr),e(lF,xtr),e(lF,gV),e(gV,ktr),e(lF,Str),e(x,Rtr),e(x,iF),e(iF,h_e),e(h_e,Btr),e(iF,Ptr),e(iF,hV),e(hV,$tr),e(iF,Itr),e(x,qtr),e(x,dF),e(dF,p_e),e(p_e,Ntr),e(dF,jtr),e(dF,pV),e(pV,Dtr),e(dF,Gtr),e(x,Otr),e(x,cF),e(cF,__e),e(__e,Vtr),e(cF,Xtr),e(cF,_V),e(_V,ztr),e(cF,Qtr),e(x,Wtr),e(x,fF),e(fF,u_e),e(u_e,Htr),e(fF,Utr),e(fF,uV),e(uV,Jtr),e(fF,Ytr),e(x,Ktr),e(x,mF),e(mF,b_e),e(b_e,Ztr),e(mF,ear),e(mF,bV),e(bV,oar),e(mF,rar),e(x,tar),e(x,gF),e(gF,v_e),e(v_e,aar),e(gF,nar),e(gF,vV),e(vV,sar),e(gF,lar),e(x,iar),e(x,hF),e(hF,F_e),e(F_e,dar),e(hF,car),e(hF,FV),e(FV,far),e(hF,mar),e(x,gar),e(x,pF),e(pF,T_e),e(T_e,har),e(pF,par),e(pF,TV),e(TV,_ar),e(pF,uar),e(x,bar),e(x,_F),e(_F,M_e),e(M_e,Far),e(_F,Tar),e(_F,MV),e(MV,Mar),e(_F,Ear),e(x,Car),e(x,uF),e(uF,E_e),e(E_e,war),e(uF,Aar),e(uF,EV),e(EV,yar),e(uF,Lar),e(x,xar),e(x,bF),e(bF,C_e),e(C_e,kar),e(bF,Sar),e(bF,CV),e(CV,Rar),e(bF,Bar),e(x,Par),e(x,vF),e(vF,w_e),e(w_e,$ar),e(vF,Iar),e(vF,wV),e(wV,qar),e(vF,Nar),e(x,jar),e(x,FF),e(FF,A_e),e(A_e,Dar),e(FF,Gar),e(FF,AV),e(AV,Oar),e(FF,Var),e(x,Xar),e(x,TF),e(TF,y_e),e(y_e,zar),e(TF,Qar),e(TF,yV),e(yV,War),e(TF,Har),e(x,Uar),e(x,MF),e(MF,L_e),e(L_e,Jar),e(MF,Yar),e(MF,LV),e(LV,Kar),e(MF,Zar),e(x,enr),e(x,EF),e(EF,x_e),e(x_e,onr),e(EF,rnr),e(EF,xV),e(xV,tnr),e(EF,anr),e(x,nnr),e(x,CF),e(CF,k_e),e(k_e,snr),e(CF,lnr),e(CF,kV),e(kV,inr),e(CF,dnr),e(ho,cnr),e(ho,S_e),e(S_e,fnr),e(ho,mnr),g(v0,ho,null),b(c,lPe,u),b(c,vc,u),e(vc,wF),e(wF,R_e),g(F0,R_e,null),e(vc,gnr),e(vc,B_e),e(B_e,hnr),b(c,iPe,u),b(c,Fr,u),g(T0,Fr,null),e(Fr,pnr),e(Fr,Fc),e(Fc,_nr),e(Fc,SV),e(SV,unr),e(Fc,bnr),e(Fc,RV),e(RV,vnr),e(Fc,Fnr),e(Fr,Tnr),e(Fr,M0),e(M0,Mnr),e(M0,P_e),e(P_e,Enr),e(M0,Cnr),e(Fr,wnr),e(Fr,ht),g(E0,ht,null),e(ht,Anr),e(ht,$_e),e($_e,ynr),e(ht,Lnr),e(ht,Tc),e(Tc,xnr),e(Tc,I_e),e(I_e,knr),e(Tc,Snr),e(Tc,BV),e(BV,Rnr),e(Tc,Bnr),e(ht,Pnr),e(ht,q_e),e(q_e,$nr),e(ht,Inr),g(C0,ht,null),e(Fr,qnr),e(Fr,po),g(w0,po,null),e(po,Nnr),e(po,N_e),e(N_e,jnr),e(po,Dnr),e(po,bn),e(bn,Gnr),e(bn,j_e),e(j_e,Onr),e(bn,Vnr),e(bn,D_e),e(D_e,Xnr),e(bn,znr),e(bn,G_e),e(G_e,Qnr),e(bn,Wnr),e(po,Hnr),e(po,H),e(H,AF),e(AF,O_e),e(O_e,Unr),e(AF,Jnr),e(AF,PV),e(PV,Ynr),e(AF,Knr),e(H,Znr),e(H,yF),e(yF,V_e),e(V_e,esr),e(yF,osr),e(yF,$V),e($V,rsr),e(yF,tsr),e(H,asr),e(H,LF),e(LF,X_e),e(X_e,nsr),e(LF,ssr),e(LF,IV),e(IV,lsr),e(LF,isr),e(H,dsr),e(H,xF),e(xF,z_e),e(z_e,csr),e(xF,fsr),e(xF,qV),e(qV,msr),e(xF,gsr),e(H,hsr),e(H,kF),e(kF,Q_e),e(Q_e,psr),e(kF,_sr),e(kF,NV),e(NV,usr),e(kF,bsr),e(H,vsr),e(H,SF),e(SF,W_e),e(W_e,Fsr),e(SF,Tsr),e(SF,jV),e(jV,Msr),e(SF,Esr),e(H,Csr),e(H,RF),e(RF,H_e),e(H_e,wsr),e(RF,Asr),e(RF,DV),e(DV,ysr),e(RF,Lsr),e(H,xsr),e(H,BF),e(BF,U_e),e(U_e,ksr),e(BF,Ssr),e(BF,GV),e(GV,Rsr),e(BF,Bsr),e(H,Psr),e(H,PF),e(PF,J_e),e(J_e,$sr),e(PF,Isr),e(PF,OV),e(OV,qsr),e(PF,Nsr),e(H,jsr),e(H,$F),e($F,Y_e),e(Y_e,Dsr),e($F,Gsr),e($F,VV),e(VV,Osr),e($F,Vsr),e(H,Xsr),e(H,IF),e(IF,K_e),e(K_e,zsr),e(IF,Qsr),e(IF,XV),e(XV,Wsr),e(IF,Hsr),e(H,Usr),e(H,qF),e(qF,Z_e),e(Z_e,Jsr),e(qF,Ysr),e(qF,zV),e(zV,Ksr),e(qF,Zsr),e(H,elr),e(H,NF),e(NF,eue),e(eue,olr),e(NF,rlr),e(NF,QV),e(QV,tlr),e(NF,alr),e(H,nlr),e(H,jF),e(jF,oue),e(oue,slr),e(jF,llr),e(jF,WV),e(WV,ilr),e(jF,dlr),e(H,clr),e(H,DF),e(DF,rue),e(rue,flr),e(DF,mlr),e(DF,HV),e(HV,glr),e(DF,hlr),e(H,plr),e(H,GF),e(GF,tue),e(tue,_lr),e(GF,ulr),e(GF,UV),e(UV,blr),e(GF,vlr),e(H,Flr),e(H,OF),e(OF,aue),e(aue,Tlr),e(OF,Mlr),e(OF,JV),e(JV,Elr),e(OF,Clr),e(H,wlr),e(H,VF),e(VF,nue),e(nue,Alr),e(VF,ylr),e(VF,YV),e(YV,Llr),e(VF,xlr),e(H,klr),e(H,XF),e(XF,sue),e(sue,Slr),e(XF,Rlr),e(XF,KV),e(KV,Blr),e(XF,Plr),e(H,$lr),e(H,zF),e(zF,lue),e(lue,Ilr),e(zF,qlr),e(zF,ZV),e(ZV,Nlr),e(zF,jlr),e(H,Dlr),e(H,QF),e(QF,iue),e(iue,Glr),e(QF,Olr),e(QF,eX),e(eX,Vlr),e(QF,Xlr),e(H,zlr),e(H,WF),e(WF,due),e(due,Qlr),e(WF,Wlr),e(WF,oX),e(oX,Hlr),e(WF,Ulr),e(H,Jlr),e(H,HF),e(HF,cue),e(cue,Ylr),e(HF,Klr),e(HF,rX),e(rX,Zlr),e(HF,eir),e(po,oir),e(po,fue),e(fue,rir),e(po,tir),g(A0,po,null),b(c,dPe,u),b(c,Mc,u),e(Mc,UF),e(UF,mue),g(y0,mue,null),e(Mc,air),e(Mc,gue),e(gue,nir),b(c,cPe,u),b(c,Tr,u),g(L0,Tr,null),e(Tr,sir),e(Tr,Ec),e(Ec,lir),e(Ec,tX),e(tX,iir),e(Ec,dir),e(Ec,aX),e(aX,cir),e(Ec,fir),e(Tr,mir),e(Tr,x0),e(x0,gir),e(x0,hue),e(hue,hir),e(x0,pir),e(Tr,_ir),e(Tr,pt),g(k0,pt,null),e(pt,uir),e(pt,pue),e(pue,bir),e(pt,vir),e(pt,Cc),e(Cc,Fir),e(Cc,_ue),e(_ue,Tir),e(Cc,Mir),e(Cc,nX),e(nX,Eir),e(Cc,Cir),e(pt,wir),e(pt,uue),e(uue,Air),e(pt,yir),g(S0,pt,null),e(Tr,Lir),e(Tr,_o),g(R0,_o,null),e(_o,xir),e(_o,bue),e(bue,kir),e(_o,Sir),e(_o,vn),e(vn,Rir),e(vn,vue),e(vue,Bir),e(vn,Pir),e(vn,Fue),e(Fue,$ir),e(vn,Iir),e(vn,Tue),e(Tue,qir),e(vn,Nir),e(_o,jir),e(_o,fe),e(fe,JF),e(JF,Mue),e(Mue,Dir),e(JF,Gir),e(JF,sX),e(sX,Oir),e(JF,Vir),e(fe,Xir),e(fe,YF),e(YF,Eue),e(Eue,zir),e(YF,Qir),e(YF,lX),e(lX,Wir),e(YF,Hir),e(fe,Uir),e(fe,KF),e(KF,Cue),e(Cue,Jir),e(KF,Yir),e(KF,iX),e(iX,Kir),e(KF,Zir),e(fe,edr),e(fe,ZF),e(ZF,wue),e(wue,odr),e(ZF,rdr),e(ZF,dX),e(dX,tdr),e(ZF,adr),e(fe,ndr),e(fe,eT),e(eT,Aue),e(Aue,sdr),e(eT,ldr),e(eT,cX),e(cX,idr),e(eT,ddr),e(fe,cdr),e(fe,oT),e(oT,yue),e(yue,fdr),e(oT,mdr),e(oT,fX),e(fX,gdr),e(oT,hdr),e(fe,pdr),e(fe,rT),e(rT,Lue),e(Lue,_dr),e(rT,udr),e(rT,mX),e(mX,bdr),e(rT,vdr),e(fe,Fdr),e(fe,tT),e(tT,xue),e(xue,Tdr),e(tT,Mdr),e(tT,gX),e(gX,Edr),e(tT,Cdr),e(fe,wdr),e(fe,aT),e(aT,kue),e(kue,Adr),e(aT,ydr),e(aT,hX),e(hX,Ldr),e(aT,xdr),e(fe,kdr),e(fe,nT),e(nT,Sue),e(Sue,Sdr),e(nT,Rdr),e(nT,pX),e(pX,Bdr),e(nT,Pdr),e(fe,$dr),e(fe,sT),e(sT,Rue),e(Rue,Idr),e(sT,qdr),e(sT,_X),e(_X,Ndr),e(sT,jdr),e(fe,Ddr),e(fe,lT),e(lT,Bue),e(Bue,Gdr),e(lT,Odr),e(lT,uX),e(uX,Vdr),e(lT,Xdr),e(_o,zdr),e(_o,Pue),e(Pue,Qdr),e(_o,Wdr),g(B0,_o,null),b(c,fPe,u),b(c,wc,u),e(wc,iT),e(iT,$ue),g(P0,$ue,null),e(wc,Hdr),e(wc,Iue),e(Iue,Udr),b(c,mPe,u),b(c,Mr,u),g($0,Mr,null),e(Mr,Jdr),e(Mr,Ac),e(Ac,Ydr),e(Ac,bX),e(bX,Kdr),e(Ac,Zdr),e(Ac,vX),e(vX,ecr),e(Ac,ocr),e(Mr,rcr),e(Mr,I0),e(I0,tcr),e(I0,que),e(que,acr),e(I0,ncr),e(Mr,scr),e(Mr,_t),g(q0,_t,null),e(_t,lcr),e(_t,Nue),e(Nue,icr),e(_t,dcr),e(_t,yc),e(yc,ccr),e(yc,jue),e(jue,fcr),e(yc,mcr),e(yc,FX),e(FX,gcr),e(yc,hcr),e(_t,pcr),e(_t,Due),e(Due,_cr),e(_t,ucr),g(N0,_t,null),e(Mr,bcr),e(Mr,uo),g(j0,uo,null),e(uo,vcr),e(uo,Gue),e(Gue,Fcr),e(uo,Tcr),e(uo,Fn),e(Fn,Mcr),e(Fn,Oue),e(Oue,Ecr),e(Fn,Ccr),e(Fn,Vue),e(Vue,wcr),e(Fn,Acr),e(Fn,Xue),e(Xue,ycr),e(Fn,Lcr),e(uo,xcr),e(uo,D0),e(D0,dT),e(dT,zue),e(zue,kcr),e(dT,Scr),e(dT,TX),e(TX,Rcr),e(dT,Bcr),e(D0,Pcr),e(D0,cT),e(cT,Que),e(Que,$cr),e(cT,Icr),e(cT,MX),e(MX,qcr),e(cT,Ncr),e(uo,jcr),e(uo,Wue),e(Wue,Dcr),e(uo,Gcr),g(G0,uo,null),b(c,gPe,u),b(c,Lc,u),e(Lc,fT),e(fT,Hue),g(O0,Hue,null),e(Lc,Ocr),e(Lc,Uue),e(Uue,Vcr),b(c,hPe,u),b(c,Er,u),g(V0,Er,null),e(Er,Xcr),e(Er,xc),e(xc,zcr),e(xc,EX),e(EX,Qcr),e(xc,Wcr),e(xc,CX),e(CX,Hcr),e(xc,Ucr),e(Er,Jcr),e(Er,X0),e(X0,Ycr),e(X0,Jue),e(Jue,Kcr),e(X0,Zcr),e(Er,efr),e(Er,ut),g(z0,ut,null),e(ut,ofr),e(ut,Yue),e(Yue,rfr),e(ut,tfr),e(ut,kc),e(kc,afr),e(kc,Kue),e(Kue,nfr),e(kc,sfr),e(kc,wX),e(wX,lfr),e(kc,ifr),e(ut,dfr),e(ut,Zue),e(Zue,cfr),e(ut,ffr),g(Q0,ut,null),e(Er,mfr),e(Er,bo),g(W0,bo,null),e(bo,gfr),e(bo,e6e),e(e6e,hfr),e(bo,pfr),e(bo,Tn),e(Tn,_fr),e(Tn,o6e),e(o6e,ufr),e(Tn,bfr),e(Tn,r6e),e(r6e,vfr),e(Tn,Ffr),e(Tn,t6e),e(t6e,Tfr),e(Tn,Mfr),e(bo,Efr),e(bo,J),e(J,mT),e(mT,a6e),e(a6e,Cfr),e(mT,wfr),e(mT,AX),e(AX,Afr),e(mT,yfr),e(J,Lfr),e(J,gT),e(gT,n6e),e(n6e,xfr),e(gT,kfr),e(gT,yX),e(yX,Sfr),e(gT,Rfr),e(J,Bfr),e(J,hT),e(hT,s6e),e(s6e,Pfr),e(hT,$fr),e(hT,LX),e(LX,Ifr),e(hT,qfr),e(J,Nfr),e(J,pT),e(pT,l6e),e(l6e,jfr),e(pT,Dfr),e(pT,xX),e(xX,Gfr),e(pT,Ofr),e(J,Vfr),e(J,_T),e(_T,i6e),e(i6e,Xfr),e(_T,zfr),e(_T,kX),e(kX,Qfr),e(_T,Wfr),e(J,Hfr),e(J,uT),e(uT,d6e),e(d6e,Ufr),e(uT,Jfr),e(uT,SX),e(SX,Yfr),e(uT,Kfr),e(J,Zfr),e(J,bT),e(bT,c6e),e(c6e,emr),e(bT,omr),e(bT,RX),e(RX,rmr),e(bT,tmr),e(J,amr),e(J,vT),e(vT,f6e),e(f6e,nmr),e(vT,smr),e(vT,BX),e(BX,lmr),e(vT,imr),e(J,dmr),e(J,FT),e(FT,m6e),e(m6e,cmr),e(FT,fmr),e(FT,PX),e(PX,mmr),e(FT,gmr),e(J,hmr),e(J,TT),e(TT,g6e),e(g6e,pmr),e(TT,_mr),e(TT,$X),e($X,umr),e(TT,bmr),e(J,vmr),e(J,MT),e(MT,h6e),e(h6e,Fmr),e(MT,Tmr),e(MT,IX),e(IX,Mmr),e(MT,Emr),e(J,Cmr),e(J,ET),e(ET,p6e),e(p6e,wmr),e(ET,Amr),e(ET,qX),e(qX,ymr),e(ET,Lmr),e(J,xmr),e(J,CT),e(CT,_6e),e(_6e,kmr),e(CT,Smr),e(CT,NX),e(NX,Rmr),e(CT,Bmr),e(J,Pmr),e(J,wT),e(wT,u6e),e(u6e,$mr),e(wT,Imr),e(wT,jX),e(jX,qmr),e(wT,Nmr),e(J,jmr),e(J,AT),e(AT,b6e),e(b6e,Dmr),e(AT,Gmr),e(AT,DX),e(DX,Omr),e(AT,Vmr),e(J,Xmr),e(J,yT),e(yT,v6e),e(v6e,zmr),e(yT,Qmr),e(yT,GX),e(GX,Wmr),e(yT,Hmr),e(J,Umr),e(J,LT),e(LT,F6e),e(F6e,Jmr),e(LT,Ymr),e(LT,OX),e(OX,Kmr),e(LT,Zmr),e(J,egr),e(J,xT),e(xT,T6e),e(T6e,ogr),e(xT,rgr),e(xT,VX),e(VX,tgr),e(xT,agr),e(J,ngr),e(J,kT),e(kT,M6e),e(M6e,sgr),e(kT,lgr),e(kT,XX),e(XX,igr),e(kT,dgr),e(J,cgr),e(J,ST),e(ST,E6e),e(E6e,fgr),e(ST,mgr),e(ST,zX),e(zX,ggr),e(ST,hgr),e(bo,pgr),e(bo,C6e),e(C6e,_gr),e(bo,ugr),g(H0,bo,null),b(c,pPe,u),b(c,Sc,u),e(Sc,RT),e(RT,w6e),g(U0,w6e,null),e(Sc,bgr),e(Sc,A6e),e(A6e,vgr),b(c,_Pe,u),b(c,Cr,u),g(J0,Cr,null),e(Cr,Fgr),e(Cr,Rc),e(Rc,Tgr),e(Rc,QX),e(QX,Mgr),e(Rc,Egr),e(Rc,WX),e(WX,Cgr),e(Rc,wgr),e(Cr,Agr),e(Cr,Y0),e(Y0,ygr),e(Y0,y6e),e(y6e,Lgr),e(Y0,xgr),e(Cr,kgr),e(Cr,bt),g(K0,bt,null),e(bt,Sgr),e(bt,L6e),e(L6e,Rgr),e(bt,Bgr),e(bt,Bc),e(Bc,Pgr),e(Bc,x6e),e(x6e,$gr),e(Bc,Igr),e(Bc,HX),e(HX,qgr),e(Bc,Ngr),e(bt,jgr),e(bt,k6e),e(k6e,Dgr),e(bt,Ggr),g(Z0,bt,null),e(Cr,Ogr),e(Cr,vo),g(ey,vo,null),e(vo,Vgr),e(vo,S6e),e(S6e,Xgr),e(vo,zgr),e(vo,Mn),e(Mn,Qgr),e(Mn,R6e),e(R6e,Wgr),e(Mn,Hgr),e(Mn,B6e),e(B6e,Ugr),e(Mn,Jgr),e(Mn,P6e),e(P6e,Ygr),e(Mn,Kgr),e(vo,Zgr),e(vo,be),e(be,BT),e(BT,$6e),e($6e,ehr),e(BT,ohr),e(BT,UX),e(UX,rhr),e(BT,thr),e(be,ahr),e(be,PT),e(PT,I6e),e(I6e,nhr),e(PT,shr),e(PT,JX),e(JX,lhr),e(PT,ihr),e(be,dhr),e(be,$T),e($T,q6e),e(q6e,chr),e($T,fhr),e($T,YX),e(YX,mhr),e($T,ghr),e(be,hhr),e(be,IT),e(IT,N6e),e(N6e,phr),e(IT,_hr),e(IT,KX),e(KX,uhr),e(IT,bhr),e(be,vhr),e(be,qT),e(qT,j6e),e(j6e,Fhr),e(qT,Thr),e(qT,ZX),e(ZX,Mhr),e(qT,Ehr),e(be,Chr),e(be,NT),e(NT,D6e),e(D6e,whr),e(NT,Ahr),e(NT,ez),e(ez,yhr),e(NT,Lhr),e(be,xhr),e(be,jT),e(jT,G6e),e(G6e,khr),e(jT,Shr),e(jT,oz),e(oz,Rhr),e(jT,Bhr),e(be,Phr),e(be,DT),e(DT,O6e),e(O6e,$hr),e(DT,Ihr),e(DT,rz),e(rz,qhr),e(DT,Nhr),e(be,jhr),e(be,GT),e(GT,V6e),e(V6e,Dhr),e(GT,Ghr),e(GT,tz),e(tz,Ohr),e(GT,Vhr),e(be,Xhr),e(be,OT),e(OT,X6e),e(X6e,zhr),e(OT,Qhr),e(OT,az),e(az,Whr),e(OT,Hhr),e(vo,Uhr),e(vo,z6e),e(z6e,Jhr),e(vo,Yhr),g(oy,vo,null),b(c,uPe,u),b(c,Pc,u),e(Pc,VT),e(VT,Q6e),g(ry,Q6e,null),e(Pc,Khr),e(Pc,W6e),e(W6e,Zhr),b(c,bPe,u),b(c,wr,u),g(ty,wr,null),e(wr,epr),e(wr,$c),e($c,opr),e($c,nz),e(nz,rpr),e($c,tpr),e($c,sz),e(sz,apr),e($c,npr),e(wr,spr),e(wr,ay),e(ay,lpr),e(ay,H6e),e(H6e,ipr),e(ay,dpr),e(wr,cpr),e(wr,vt),g(ny,vt,null),e(vt,fpr),e(vt,U6e),e(U6e,mpr),e(vt,gpr),e(vt,Ic),e(Ic,hpr),e(Ic,J6e),e(J6e,ppr),e(Ic,_pr),e(Ic,lz),e(lz,upr),e(Ic,bpr),e(vt,vpr),e(vt,Y6e),e(Y6e,Fpr),e(vt,Tpr),g(sy,vt,null),e(wr,Mpr),e(wr,Fo),g(ly,Fo,null),e(Fo,Epr),e(Fo,K6e),e(K6e,Cpr),e(Fo,wpr),e(Fo,En),e(En,Apr),e(En,Z6e),e(Z6e,ypr),e(En,Lpr),e(En,e1e),e(e1e,xpr),e(En,kpr),e(En,o1e),e(o1e,Spr),e(En,Rpr),e(Fo,Bpr),e(Fo,V),e(V,XT),e(XT,r1e),e(r1e,Ppr),e(XT,$pr),e(XT,iz),e(iz,Ipr),e(XT,qpr),e(V,Npr),e(V,zT),e(zT,t1e),e(t1e,jpr),e(zT,Dpr),e(zT,dz),e(dz,Gpr),e(zT,Opr),e(V,Vpr),e(V,QT),e(QT,a1e),e(a1e,Xpr),e(QT,zpr),e(QT,cz),e(cz,Qpr),e(QT,Wpr),e(V,Hpr),e(V,WT),e(WT,n1e),e(n1e,Upr),e(WT,Jpr),e(WT,fz),e(fz,Ypr),e(WT,Kpr),e(V,Zpr),e(V,HT),e(HT,s1e),e(s1e,e_r),e(HT,o_r),e(HT,mz),e(mz,r_r),e(HT,t_r),e(V,a_r),e(V,UT),e(UT,l1e),e(l1e,n_r),e(UT,s_r),e(UT,gz),e(gz,l_r),e(UT,i_r),e(V,d_r),e(V,JT),e(JT,i1e),e(i1e,c_r),e(JT,f_r),e(JT,hz),e(hz,m_r),e(JT,g_r),e(V,h_r),e(V,YT),e(YT,d1e),e(d1e,p_r),e(YT,__r),e(YT,pz),e(pz,u_r),e(YT,b_r),e(V,v_r),e(V,KT),e(KT,c1e),e(c1e,F_r),e(KT,T_r),e(KT,_z),e(_z,M_r),e(KT,E_r),e(V,C_r),e(V,ZT),e(ZT,f1e),e(f1e,w_r),e(ZT,A_r),e(ZT,uz),e(uz,y_r),e(ZT,L_r),e(V,x_r),e(V,e9),e(e9,m1e),e(m1e,k_r),e(e9,S_r),e(e9,bz),e(bz,R_r),e(e9,B_r),e(V,P_r),e(V,o9),e(o9,g1e),e(g1e,$_r),e(o9,I_r),e(o9,vz),e(vz,q_r),e(o9,N_r),e(V,j_r),e(V,r9),e(r9,h1e),e(h1e,D_r),e(r9,G_r),e(r9,Fz),e(Fz,O_r),e(r9,V_r),e(V,X_r),e(V,t9),e(t9,p1e),e(p1e,z_r),e(t9,Q_r),e(t9,Tz),e(Tz,W_r),e(t9,H_r),e(V,U_r),e(V,a9),e(a9,_1e),e(_1e,J_r),e(a9,Y_r),e(a9,Mz),e(Mz,K_r),e(a9,Z_r),e(V,eur),e(V,n9),e(n9,u1e),e(u1e,our),e(n9,rur),e(n9,Ez),e(Ez,tur),e(n9,aur),e(V,nur),e(V,s9),e(s9,b1e),e(b1e,sur),e(s9,lur),e(s9,Cz),e(Cz,iur),e(s9,dur),e(V,cur),e(V,l9),e(l9,v1e),e(v1e,fur),e(l9,mur),e(l9,wz),e(wz,gur),e(l9,hur),e(V,pur),e(V,i9),e(i9,F1e),e(F1e,_ur),e(i9,uur),e(i9,Az),e(Az,bur),e(i9,vur),e(V,Fur),e(V,d9),e(d9,T1e),e(T1e,Tur),e(d9,Mur),e(d9,yz),e(yz,Eur),e(d9,Cur),e(V,wur),e(V,c9),e(c9,M1e),e(M1e,Aur),e(c9,yur),e(c9,Lz),e(Lz,Lur),e(c9,xur),e(V,kur),e(V,f9),e(f9,E1e),e(E1e,Sur),e(f9,Rur),e(f9,xz),e(xz,Bur),e(f9,Pur),e(V,$ur),e(V,m9),e(m9,C1e),e(C1e,Iur),e(m9,qur),e(m9,kz),e(kz,Nur),e(m9,jur),e(V,Dur),e(V,g9),e(g9,w1e),e(w1e,Gur),e(g9,Our),e(g9,Sz),e(Sz,Vur),e(g9,Xur),e(V,zur),e(V,h9),e(h9,A1e),e(A1e,Qur),e(h9,Wur),e(h9,Rz),e(Rz,Hur),e(h9,Uur),e(V,Jur),e(V,p9),e(p9,y1e),e(y1e,Yur),e(p9,Kur),e(p9,Bz),e(Bz,Zur),e(p9,e6r),e(Fo,o6r),e(Fo,L1e),e(L1e,r6r),e(Fo,t6r),g(iy,Fo,null),b(c,vPe,u),b(c,qc,u),e(qc,_9),e(_9,x1e),g(dy,x1e,null),e(qc,a6r),e(qc,k1e),e(k1e,n6r),b(c,FPe,u),b(c,Ar,u),g(cy,Ar,null),e(Ar,s6r),e(Ar,Nc),e(Nc,l6r),e(Nc,Pz),e(Pz,i6r),e(Nc,d6r),e(Nc,$z),e($z,c6r),e(Nc,f6r),e(Ar,m6r),e(Ar,fy),e(fy,g6r),e(fy,S1e),e(S1e,h6r),e(fy,p6r),e(Ar,_6r),e(Ar,Ft),g(my,Ft,null),e(Ft,u6r),e(Ft,R1e),e(R1e,b6r),e(Ft,v6r),e(Ft,jc),e(jc,F6r),e(jc,B1e),e(B1e,T6r),e(jc,M6r),e(jc,Iz),e(Iz,E6r),e(jc,C6r),e(Ft,w6r),e(Ft,P1e),e(P1e,A6r),e(Ft,y6r),g(gy,Ft,null),e(Ar,L6r),e(Ar,To),g(hy,To,null),e(To,x6r),e(To,$1e),e($1e,k6r),e(To,S6r),e(To,Cn),e(Cn,R6r),e(Cn,I1e),e(I1e,B6r),e(Cn,P6r),e(Cn,q1e),e(q1e,$6r),e(Cn,I6r),e(Cn,N1e),e(N1e,q6r),e(Cn,N6r),e(To,j6r),e(To,se),e(se,u9),e(u9,j1e),e(j1e,D6r),e(u9,G6r),e(u9,qz),e(qz,O6r),e(u9,V6r),e(se,X6r),e(se,b9),e(b9,D1e),e(D1e,z6r),e(b9,Q6r),e(b9,Nz),e(Nz,W6r),e(b9,H6r),e(se,U6r),e(se,v9),e(v9,G1e),e(G1e,J6r),e(v9,Y6r),e(v9,jz),e(jz,K6r),e(v9,Z6r),e(se,e1r),e(se,F9),e(F9,O1e),e(O1e,o1r),e(F9,r1r),e(F9,Dz),e(Dz,t1r),e(F9,a1r),e(se,n1r),e(se,T9),e(T9,V1e),e(V1e,s1r),e(T9,l1r),e(T9,Gz),e(Gz,i1r),e(T9,d1r),e(se,c1r),e(se,M9),e(M9,X1e),e(X1e,f1r),e(M9,m1r),e(M9,Oz),e(Oz,g1r),e(M9,h1r),e(se,p1r),e(se,E9),e(E9,z1e),e(z1e,_1r),e(E9,u1r),e(E9,Vz),e(Vz,b1r),e(E9,v1r),e(se,F1r),e(se,C9),e(C9,Q1e),e(Q1e,T1r),e(C9,M1r),e(C9,Xz),e(Xz,E1r),e(C9,C1r),e(se,w1r),e(se,w9),e(w9,W1e),e(W1e,A1r),e(w9,y1r),e(w9,zz),e(zz,L1r),e(w9,x1r),e(se,k1r),e(se,A9),e(A9,H1e),e(H1e,S1r),e(A9,R1r),e(A9,Qz),e(Qz,B1r),e(A9,P1r),e(se,$1r),e(se,y9),e(y9,U1e),e(U1e,I1r),e(y9,q1r),e(y9,Wz),e(Wz,N1r),e(y9,j1r),e(se,D1r),e(se,L9),e(L9,J1e),e(J1e,G1r),e(L9,O1r),e(L9,Hz),e(Hz,V1r),e(L9,X1r),e(se,z1r),e(se,x9),e(x9,Y1e),e(Y1e,Q1r),e(x9,W1r),e(x9,Uz),e(Uz,H1r),e(x9,U1r),e(se,J1r),e(se,k9),e(k9,K1e),e(K1e,Y1r),e(k9,K1r),e(k9,Jz),e(Jz,Z1r),e(k9,ebr),e(se,obr),e(se,S9),e(S9,Z1e),e(Z1e,rbr),e(S9,tbr),e(S9,Yz),e(Yz,abr),e(S9,nbr),e(se,sbr),e(se,R9),e(R9,ebe),e(ebe,lbr),e(R9,ibr),e(R9,Kz),e(Kz,dbr),e(R9,cbr),e(se,fbr),e(se,B9),e(B9,obe),e(obe,mbr),e(B9,gbr),e(B9,Zz),e(Zz,hbr),e(B9,pbr),e(To,_br),e(To,rbe),e(rbe,ubr),e(To,bbr),g(py,To,null),b(c,TPe,u),b(c,Dc,u),e(Dc,P9),e(P9,tbe),g(_y,tbe,null),e(Dc,vbr),e(Dc,abe),e(abe,Fbr),b(c,MPe,u),b(c,yr,u),g(uy,yr,null),e(yr,Tbr),e(yr,Gc),e(Gc,Mbr),e(Gc,eQ),e(eQ,Ebr),e(Gc,Cbr),e(Gc,oQ),e(oQ,wbr),e(Gc,Abr),e(yr,ybr),e(yr,by),e(by,Lbr),e(by,nbe),e(nbe,xbr),e(by,kbr),e(yr,Sbr),e(yr,Tt),g(vy,Tt,null),e(Tt,Rbr),e(Tt,sbe),e(sbe,Bbr),e(Tt,Pbr),e(Tt,Oc),e(Oc,$br),e(Oc,lbe),e(lbe,Ibr),e(Oc,qbr),e(Oc,rQ),e(rQ,Nbr),e(Oc,jbr),e(Tt,Dbr),e(Tt,ibe),e(ibe,Gbr),e(Tt,Obr),g(Fy,Tt,null),e(yr,Vbr),e(yr,Mo),g(Ty,Mo,null),e(Mo,Xbr),e(Mo,dbe),e(dbe,zbr),e(Mo,Qbr),e(Mo,wn),e(wn,Wbr),e(wn,cbe),e(cbe,Hbr),e(wn,Ubr),e(wn,fbe),e(fbe,Jbr),e(wn,Ybr),e(wn,mbe),e(mbe,Kbr),e(wn,Zbr),e(Mo,e2r),e(Mo,gbe),e(gbe,$9),e($9,hbe),e(hbe,o2r),e($9,r2r),e($9,tQ),e(tQ,t2r),e($9,a2r),e(Mo,n2r),e(Mo,pbe),e(pbe,s2r),e(Mo,l2r),g(My,Mo,null),b(c,EPe,u),b(c,Vc,u),e(Vc,I9),e(I9,_be),g(Ey,_be,null),e(Vc,i2r),e(Vc,ube),e(ube,d2r),b(c,CPe,u),b(c,Lr,u),g(Cy,Lr,null),e(Lr,c2r),e(Lr,Xc),e(Xc,f2r),e(Xc,aQ),e(aQ,m2r),e(Xc,g2r),e(Xc,nQ),e(nQ,h2r),e(Xc,p2r),e(Lr,_2r),e(Lr,wy),e(wy,u2r),e(wy,bbe),e(bbe,b2r),e(wy,v2r),e(Lr,F2r),e(Lr,Mt),g(Ay,Mt,null),e(Mt,T2r),e(Mt,vbe),e(vbe,M2r),e(Mt,E2r),e(Mt,zc),e(zc,C2r),e(zc,Fbe),e(Fbe,w2r),e(zc,A2r),e(zc,sQ),e(sQ,y2r),e(zc,L2r),e(Mt,x2r),e(Mt,Tbe),e(Tbe,k2r),e(Mt,S2r),g(yy,Mt,null),e(Lr,R2r),e(Lr,Eo),g(Ly,Eo,null),e(Eo,B2r),e(Eo,Mbe),e(Mbe,P2r),e(Eo,$2r),e(Eo,An),e(An,I2r),e(An,Ebe),e(Ebe,q2r),e(An,N2r),e(An,Cbe),e(Cbe,j2r),e(An,D2r),e(An,wbe),e(wbe,G2r),e(An,O2r),e(Eo,V2r),e(Eo,Y),e(Y,q9),e(q9,Abe),e(Abe,X2r),e(q9,z2r),e(q9,lQ),e(lQ,Q2r),e(q9,W2r),e(Y,H2r),e(Y,N9),e(N9,ybe),e(ybe,U2r),e(N9,J2r),e(N9,iQ),e(iQ,Y2r),e(N9,K2r),e(Y,Z2r),e(Y,j9),e(j9,Lbe),e(Lbe,e5r),e(j9,o5r),e(j9,dQ),e(dQ,r5r),e(j9,t5r),e(Y,a5r),e(Y,D9),e(D9,xbe),e(xbe,n5r),e(D9,s5r),e(D9,cQ),e(cQ,l5r),e(D9,i5r),e(Y,d5r),e(Y,G9),e(G9,kbe),e(kbe,c5r),e(G9,f5r),e(G9,fQ),e(fQ,m5r),e(G9,g5r),e(Y,h5r),e(Y,O9),e(O9,Sbe),e(Sbe,p5r),e(O9,_5r),e(O9,mQ),e(mQ,u5r),e(O9,b5r),e(Y,v5r),e(Y,V9),e(V9,Rbe),e(Rbe,F5r),e(V9,T5r),e(V9,gQ),e(gQ,M5r),e(V9,E5r),e(Y,C5r),e(Y,X9),e(X9,Bbe),e(Bbe,w5r),e(X9,A5r),e(X9,hQ),e(hQ,y5r),e(X9,L5r),e(Y,x5r),e(Y,z9),e(z9,Pbe),e(Pbe,k5r),e(z9,S5r),e(z9,pQ),e(pQ,R5r),e(z9,B5r),e(Y,P5r),e(Y,Q9),e(Q9,$be),e($be,$5r),e(Q9,I5r),e(Q9,_Q),e(_Q,q5r),e(Q9,N5r),e(Y,j5r),e(Y,W9),e(W9,Ibe),e(Ibe,D5r),e(W9,G5r),e(W9,uQ),e(uQ,O5r),e(W9,V5r),e(Y,X5r),e(Y,H9),e(H9,qbe),e(qbe,z5r),e(H9,Q5r),e(H9,bQ),e(bQ,W5r),e(H9,H5r),e(Y,U5r),e(Y,U9),e(U9,Nbe),e(Nbe,J5r),e(U9,Y5r),e(U9,vQ),e(vQ,K5r),e(U9,Z5r),e(Y,evr),e(Y,J9),e(J9,jbe),e(jbe,ovr),e(J9,rvr),e(J9,FQ),e(FQ,tvr),e(J9,avr),e(Y,nvr),e(Y,Y9),e(Y9,Dbe),e(Dbe,svr),e(Y9,lvr),e(Y9,TQ),e(TQ,ivr),e(Y9,dvr),e(Y,cvr),e(Y,K9),e(K9,Gbe),e(Gbe,fvr),e(K9,mvr),e(K9,MQ),e(MQ,gvr),e(K9,hvr),e(Y,pvr),e(Y,Z9),e(Z9,Obe),e(Obe,_vr),e(Z9,uvr),e(Z9,EQ),e(EQ,bvr),e(Z9,vvr),e(Y,Fvr),e(Y,eM),e(eM,Vbe),e(Vbe,Tvr),e(eM,Mvr),e(eM,CQ),e(CQ,Evr),e(eM,Cvr),e(Y,wvr),e(Y,oM),e(oM,Xbe),e(Xbe,Avr),e(oM,yvr),e(oM,wQ),e(wQ,Lvr),e(oM,xvr),e(Y,kvr),e(Y,rM),e(rM,zbe),e(zbe,Svr),e(rM,Rvr),e(rM,AQ),e(AQ,Bvr),e(rM,Pvr),e(Eo,$vr),e(Eo,Qbe),e(Qbe,Ivr),e(Eo,qvr),g(xy,Eo,null),b(c,wPe,u),b(c,Qc,u),e(Qc,tM),e(tM,Wbe),g(ky,Wbe,null),e(Qc,Nvr),e(Qc,Hbe),e(Hbe,jvr),b(c,APe,u),b(c,xr,u),g(Sy,xr,null),e(xr,Dvr),e(xr,Wc),e(Wc,Gvr),e(Wc,yQ),e(yQ,Ovr),e(Wc,Vvr),e(Wc,LQ),e(LQ,Xvr),e(Wc,zvr),e(xr,Qvr),e(xr,Ry),e(Ry,Wvr),e(Ry,Ube),e(Ube,Hvr),e(Ry,Uvr),e(xr,Jvr),e(xr,Et),g(By,Et,null),e(Et,Yvr),e(Et,Jbe),e(Jbe,Kvr),e(Et,Zvr),e(Et,Hc),e(Hc,eFr),e(Hc,Ybe),e(Ybe,oFr),e(Hc,rFr),e(Hc,xQ),e(xQ,tFr),e(Hc,aFr),e(Et,nFr),e(Et,Kbe),e(Kbe,sFr),e(Et,lFr),g(Py,Et,null),e(xr,iFr),e(xr,Co),g($y,Co,null),e(Co,dFr),e(Co,Zbe),e(Zbe,cFr),e(Co,fFr),e(Co,yn),e(yn,mFr),e(yn,e2e),e(e2e,gFr),e(yn,hFr),e(yn,o2e),e(o2e,pFr),e(yn,_Fr),e(yn,r2e),e(r2e,uFr),e(yn,bFr),e(Co,vFr),e(Co,K),e(K,aM),e(aM,t2e),e(t2e,FFr),e(aM,TFr),e(aM,kQ),e(kQ,MFr),e(aM,EFr),e(K,CFr),e(K,nM),e(nM,a2e),e(a2e,wFr),e(nM,AFr),e(nM,SQ),e(SQ,yFr),e(nM,LFr),e(K,xFr),e(K,sM),e(sM,n2e),e(n2e,kFr),e(sM,SFr),e(sM,RQ),e(RQ,RFr),e(sM,BFr),e(K,PFr),e(K,lM),e(lM,s2e),e(s2e,$Fr),e(lM,IFr),e(lM,BQ),e(BQ,qFr),e(lM,NFr),e(K,jFr),e(K,iM),e(iM,l2e),e(l2e,DFr),e(iM,GFr),e(iM,PQ),e(PQ,OFr),e(iM,VFr),e(K,XFr),e(K,dM),e(dM,i2e),e(i2e,zFr),e(dM,QFr),e(dM,$Q),e($Q,WFr),e(dM,HFr),e(K,UFr),e(K,cM),e(cM,d2e),e(d2e,JFr),e(cM,YFr),e(cM,IQ),e(IQ,KFr),e(cM,ZFr),e(K,eTr),e(K,fM),e(fM,c2e),e(c2e,oTr),e(fM,rTr),e(fM,qQ),e(qQ,tTr),e(fM,aTr),e(K,nTr),e(K,mM),e(mM,f2e),e(f2e,sTr),e(mM,lTr),e(mM,NQ),e(NQ,iTr),e(mM,dTr),e(K,cTr),e(K,gM),e(gM,m2e),e(m2e,fTr),e(gM,mTr),e(gM,jQ),e(jQ,gTr),e(gM,hTr),e(K,pTr),e(K,hM),e(hM,g2e),e(g2e,_Tr),e(hM,uTr),e(hM,DQ),e(DQ,bTr),e(hM,vTr),e(K,FTr),e(K,pM),e(pM,h2e),e(h2e,TTr),e(pM,MTr),e(pM,GQ),e(GQ,ETr),e(pM,CTr),e(K,wTr),e(K,_M),e(_M,p2e),e(p2e,ATr),e(_M,yTr),e(_M,OQ),e(OQ,LTr),e(_M,xTr),e(K,kTr),e(K,uM),e(uM,_2e),e(_2e,STr),e(uM,RTr),e(uM,VQ),e(VQ,BTr),e(uM,PTr),e(K,$Tr),e(K,bM),e(bM,u2e),e(u2e,ITr),e(bM,qTr),e(bM,XQ),e(XQ,NTr),e(bM,jTr),e(K,DTr),e(K,vM),e(vM,b2e),e(b2e,GTr),e(vM,OTr),e(vM,zQ),e(zQ,VTr),e(vM,XTr),e(K,zTr),e(K,FM),e(FM,v2e),e(v2e,QTr),e(FM,WTr),e(FM,QQ),e(QQ,HTr),e(FM,UTr),e(K,JTr),e(K,TM),e(TM,F2e),e(F2e,YTr),e(TM,KTr),e(TM,WQ),e(WQ,ZTr),e(TM,e9r),e(K,o9r),e(K,MM),e(MM,T2e),e(T2e,r9r),e(MM,t9r),e(MM,HQ),e(HQ,a9r),e(MM,n9r),e(K,s9r),e(K,EM),e(EM,M2e),e(M2e,l9r),e(EM,i9r),e(EM,UQ),e(UQ,d9r),e(EM,c9r),e(Co,f9r),e(Co,E2e),e(E2e,m9r),e(Co,g9r),g(Iy,Co,null),b(c,yPe,u),b(c,Uc,u),e(Uc,CM),e(CM,C2e),g(qy,C2e,null),e(Uc,h9r),e(Uc,w2e),e(w2e,p9r),b(c,LPe,u),b(c,kr,u),g(Ny,kr,null),e(kr,_9r),e(kr,Jc),e(Jc,u9r),e(Jc,JQ),e(JQ,b9r),e(Jc,v9r),e(Jc,YQ),e(YQ,F9r),e(Jc,T9r),e(kr,M9r),e(kr,jy),e(jy,E9r),e(jy,A2e),e(A2e,C9r),e(jy,w9r),e(kr,A9r),e(kr,Ct),g(Dy,Ct,null),e(Ct,y9r),e(Ct,y2e),e(y2e,L9r),e(Ct,x9r),e(Ct,Yc),e(Yc,k9r),e(Yc,L2e),e(L2e,S9r),e(Yc,R9r),e(Yc,KQ),e(KQ,B9r),e(Yc,P9r),e(Ct,$9r),e(Ct,x2e),e(x2e,I9r),e(Ct,q9r),g(Gy,Ct,null),e(kr,N9r),e(kr,wo),g(Oy,wo,null),e(wo,j9r),e(wo,k2e),e(k2e,D9r),e(wo,G9r),e(wo,Ln),e(Ln,O9r),e(Ln,S2e),e(S2e,V9r),e(Ln,X9r),e(Ln,R2e),e(R2e,z9r),e(Ln,Q9r),e(Ln,B2e),e(B2e,W9r),e(Ln,H9r),e(wo,U9r),e(wo,P2e),e(P2e,wM),e(wM,$2e),e($2e,J9r),e(wM,Y9r),e(wM,ZQ),e(ZQ,K9r),e(wM,Z9r),e(wo,eMr),e(wo,I2e),e(I2e,oMr),e(wo,rMr),g(Vy,wo,null),b(c,xPe,u),b(c,Kc,u),e(Kc,AM),e(AM,q2e),g(Xy,q2e,null),e(Kc,tMr),e(Kc,N2e),e(N2e,aMr),b(c,kPe,u),b(c,Sr,u),g(zy,Sr,null),e(Sr,nMr),e(Sr,Zc),e(Zc,sMr),e(Zc,eW),e(eW,lMr),e(Zc,iMr),e(Zc,oW),e(oW,dMr),e(Zc,cMr),e(Sr,fMr),e(Sr,Qy),e(Qy,mMr),e(Qy,j2e),e(j2e,gMr),e(Qy,hMr),e(Sr,pMr),e(Sr,wt),g(Wy,wt,null),e(wt,_Mr),e(wt,D2e),e(D2e,uMr),e(wt,bMr),e(wt,ef),e(ef,vMr),e(ef,G2e),e(G2e,FMr),e(ef,TMr),e(ef,rW),e(rW,MMr),e(ef,EMr),e(wt,CMr),e(wt,O2e),e(O2e,wMr),e(wt,AMr),g(Hy,wt,null),e(Sr,yMr),e(Sr,Ao),g(Uy,Ao,null),e(Ao,LMr),e(Ao,V2e),e(V2e,xMr),e(Ao,kMr),e(Ao,xn),e(xn,SMr),e(xn,X2e),e(X2e,RMr),e(xn,BMr),e(xn,z2e),e(z2e,PMr),e(xn,$Mr),e(xn,Q2e),e(Q2e,IMr),e(xn,qMr),e(Ao,NMr),e(Ao,W2e),e(W2e,yM),e(yM,H2e),e(H2e,jMr),e(yM,DMr),e(yM,tW),e(tW,GMr),e(yM,OMr),e(Ao,VMr),e(Ao,U2e),e(U2e,XMr),e(Ao,zMr),g(Jy,Ao,null),b(c,SPe,u),b(c,of,u),e(of,LM),e(LM,J2e),g(Yy,J2e,null),e(of,QMr),e(of,Y2e),e(Y2e,WMr),b(c,RPe,u),b(c,Rr,u),g(Ky,Rr,null),e(Rr,HMr),e(Rr,rf),e(rf,UMr),e(rf,aW),e(aW,JMr),e(rf,YMr),e(rf,nW),e(nW,KMr),e(rf,ZMr),e(Rr,e4r),e(Rr,Zy),e(Zy,o4r),e(Zy,K2e),e(K2e,r4r),e(Zy,t4r),e(Rr,a4r),e(Rr,At),g(e8,At,null),e(At,n4r),e(At,Z2e),e(Z2e,s4r),e(At,l4r),e(At,tf),e(tf,i4r),e(tf,e5e),e(e5e,d4r),e(tf,c4r),e(tf,sW),e(sW,f4r),e(tf,m4r),e(At,g4r),e(At,o5e),e(o5e,h4r),e(At,p4r),g(o8,At,null),e(Rr,_4r),e(Rr,yo),g(r8,yo,null),e(yo,u4r),e(yo,r5e),e(r5e,b4r),e(yo,v4r),e(yo,kn),e(kn,F4r),e(kn,t5e),e(t5e,T4r),e(kn,M4r),e(kn,a5e),e(a5e,E4r),e(kn,C4r),e(kn,n5e),e(n5e,w4r),e(kn,A4r),e(yo,y4r),e(yo,z),e(z,xM),e(xM,s5e),e(s5e,L4r),e(xM,x4r),e(xM,lW),e(lW,k4r),e(xM,S4r),e(z,R4r),e(z,kM),e(kM,l5e),e(l5e,B4r),e(kM,P4r),e(kM,iW),e(iW,$4r),e(kM,I4r),e(z,q4r),e(z,SM),e(SM,i5e),e(i5e,N4r),e(SM,j4r),e(SM,dW),e(dW,D4r),e(SM,G4r),e(z,O4r),e(z,RM),e(RM,d5e),e(d5e,V4r),e(RM,X4r),e(RM,cW),e(cW,z4r),e(RM,Q4r),e(z,W4r),e(z,BM),e(BM,c5e),e(c5e,H4r),e(BM,U4r),e(BM,fW),e(fW,J4r),e(BM,Y4r),e(z,K4r),e(z,PM),e(PM,f5e),e(f5e,Z4r),e(PM,eEr),e(PM,mW),e(mW,oEr),e(PM,rEr),e(z,tEr),e(z,$M),e($M,m5e),e(m5e,aEr),e($M,nEr),e($M,gW),e(gW,sEr),e($M,lEr),e(z,iEr),e(z,IM),e(IM,g5e),e(g5e,dEr),e(IM,cEr),e(IM,hW),e(hW,fEr),e(IM,mEr),e(z,gEr),e(z,qM),e(qM,h5e),e(h5e,hEr),e(qM,pEr),e(qM,pW),e(pW,_Er),e(qM,uEr),e(z,bEr),e(z,NM),e(NM,p5e),e(p5e,vEr),e(NM,FEr),e(NM,_W),e(_W,TEr),e(NM,MEr),e(z,EEr),e(z,jM),e(jM,_5e),e(_5e,CEr),e(jM,wEr),e(jM,uW),e(uW,AEr),e(jM,yEr),e(z,LEr),e(z,DM),e(DM,u5e),e(u5e,xEr),e(DM,kEr),e(DM,bW),e(bW,SEr),e(DM,REr),e(z,BEr),e(z,GM),e(GM,b5e),e(b5e,PEr),e(GM,$Er),e(GM,vW),e(vW,IEr),e(GM,qEr),e(z,NEr),e(z,OM),e(OM,v5e),e(v5e,jEr),e(OM,DEr),e(OM,FW),e(FW,GEr),e(OM,OEr),e(z,VEr),e(z,VM),e(VM,F5e),e(F5e,XEr),e(VM,zEr),e(VM,TW),e(TW,QEr),e(VM,WEr),e(z,HEr),e(z,XM),e(XM,T5e),e(T5e,UEr),e(XM,JEr),e(XM,MW),e(MW,YEr),e(XM,KEr),e(z,ZEr),e(z,zM),e(zM,M5e),e(M5e,e3r),e(zM,o3r),e(zM,EW),e(EW,r3r),e(zM,t3r),e(z,a3r),e(z,QM),e(QM,E5e),e(E5e,n3r),e(QM,s3r),e(QM,CW),e(CW,l3r),e(QM,i3r),e(z,d3r),e(z,WM),e(WM,C5e),e(C5e,c3r),e(WM,f3r),e(WM,wW),e(wW,m3r),e(WM,g3r),e(z,h3r),e(z,HM),e(HM,w5e),e(w5e,p3r),e(HM,_3r),e(HM,AW),e(AW,u3r),e(HM,b3r),e(z,v3r),e(z,UM),e(UM,A5e),e(A5e,F3r),e(UM,T3r),e(UM,yW),e(yW,M3r),e(UM,E3r),e(z,C3r),e(z,JM),e(JM,y5e),e(y5e,w3r),e(JM,A3r),e(JM,LW),e(LW,y3r),e(JM,L3r),e(z,x3r),e(z,YM),e(YM,L5e),e(L5e,k3r),e(YM,S3r),e(YM,xW),e(xW,R3r),e(YM,B3r),e(z,P3r),e(z,KM),e(KM,x5e),e(x5e,$3r),e(KM,I3r),e(KM,kW),e(kW,q3r),e(KM,N3r),e(z,j3r),e(z,ZM),e(ZM,k5e),e(k5e,D3r),e(ZM,G3r),e(ZM,SW),e(SW,O3r),e(ZM,V3r),e(yo,X3r),e(yo,S5e),e(S5e,z3r),e(yo,Q3r),g(t8,yo,null),b(c,BPe,u),b(c,af,u),e(af,e4),e(e4,R5e),g(a8,R5e,null),e(af,W3r),e(af,B5e),e(B5e,H3r),b(c,PPe,u),b(c,Br,u),g(n8,Br,null),e(Br,U3r),e(Br,nf),e(nf,J3r),e(nf,RW),e(RW,Y3r),e(nf,K3r),e(nf,BW),e(BW,Z3r),e(nf,eCr),e(Br,oCr),e(Br,s8),e(s8,rCr),e(s8,P5e),e(P5e,tCr),e(s8,aCr),e(Br,nCr),e(Br,yt),g(l8,yt,null),e(yt,sCr),e(yt,$5e),e($5e,lCr),e(yt,iCr),e(yt,sf),e(sf,dCr),e(sf,I5e),e(I5e,cCr),e(sf,fCr),e(sf,PW),e(PW,mCr),e(sf,gCr),e(yt,hCr),e(yt,q5e),e(q5e,pCr),e(yt,_Cr),g(i8,yt,null),e(Br,uCr),e(Br,Lo),g(d8,Lo,null),e(Lo,bCr),e(Lo,N5e),e(N5e,vCr),e(Lo,FCr),e(Lo,Sn),e(Sn,TCr),e(Sn,j5e),e(j5e,MCr),e(Sn,ECr),e(Sn,D5e),e(D5e,CCr),e(Sn,wCr),e(Sn,G5e),e(G5e,ACr),e(Sn,yCr),e(Lo,LCr),e(Lo,ca),e(ca,o4),e(o4,O5e),e(O5e,xCr),e(o4,kCr),e(o4,$W),e($W,SCr),e(o4,RCr),e(ca,BCr),e(ca,r4),e(r4,V5e),e(V5e,PCr),e(r4,$Cr),e(r4,IW),e(IW,ICr),e(r4,qCr),e(ca,NCr),e(ca,t4),e(t4,X5e),e(X5e,jCr),e(t4,DCr),e(t4,qW),e(qW,GCr),e(t4,OCr),e(ca,VCr),e(ca,a4),e(a4,z5e),e(z5e,XCr),e(a4,zCr),e(a4,NW),e(NW,QCr),e(a4,WCr),e(ca,HCr),e(ca,n4),e(n4,Q5e),e(Q5e,UCr),e(n4,JCr),e(n4,jW),e(jW,YCr),e(n4,KCr),e(Lo,ZCr),e(Lo,W5e),e(W5e,ewr),e(Lo,owr),g(c8,Lo,null),b(c,$Pe,u),b(c,lf,u),e(lf,s4),e(s4,H5e),g(f8,H5e,null),e(lf,rwr),e(lf,U5e),e(U5e,twr),b(c,IPe,u),b(c,Pr,u),g(m8,Pr,null),e(Pr,awr),e(Pr,df),e(df,nwr),e(df,DW),e(DW,swr),e(df,lwr),e(df,GW),e(GW,iwr),e(df,dwr),e(Pr,cwr),e(Pr,g8),e(g8,fwr),e(g8,J5e),e(J5e,mwr),e(g8,gwr),e(Pr,hwr),e(Pr,Lt),g(h8,Lt,null),e(Lt,pwr),e(Lt,Y5e),e(Y5e,_wr),e(Lt,uwr),e(Lt,cf),e(cf,bwr),e(cf,K5e),e(K5e,vwr),e(cf,Fwr),e(cf,OW),e(OW,Twr),e(cf,Mwr),e(Lt,Ewr),e(Lt,Z5e),e(Z5e,Cwr),e(Lt,wwr),g(p8,Lt,null),e(Pr,Awr),e(Pr,xo),g(_8,xo,null),e(xo,ywr),e(xo,eve),e(eve,Lwr),e(xo,xwr),e(xo,Rn),e(Rn,kwr),e(Rn,ove),e(ove,Swr),e(Rn,Rwr),e(Rn,rve),e(rve,Bwr),e(Rn,Pwr),e(Rn,tve),e(tve,$wr),e(Rn,Iwr),e(xo,qwr),e(xo,me),e(me,l4),e(l4,ave),e(ave,Nwr),e(l4,jwr),e(l4,VW),e(VW,Dwr),e(l4,Gwr),e(me,Owr),e(me,i4),e(i4,nve),e(nve,Vwr),e(i4,Xwr),e(i4,XW),e(XW,zwr),e(i4,Qwr),e(me,Wwr),e(me,d4),e(d4,sve),e(sve,Hwr),e(d4,Uwr),e(d4,zW),e(zW,Jwr),e(d4,Ywr),e(me,Kwr),e(me,c4),e(c4,lve),e(lve,Zwr),e(c4,eAr),e(c4,QW),e(QW,oAr),e(c4,rAr),e(me,tAr),e(me,f4),e(f4,ive),e(ive,aAr),e(f4,nAr),e(f4,WW),e(WW,sAr),e(f4,lAr),e(me,iAr),e(me,m4),e(m4,dve),e(dve,dAr),e(m4,cAr),e(m4,HW),e(HW,fAr),e(m4,mAr),e(me,gAr),e(me,g4),e(g4,cve),e(cve,hAr),e(g4,pAr),e(g4,UW),e(UW,_Ar),e(g4,uAr),e(me,bAr),e(me,h4),e(h4,fve),e(fve,vAr),e(h4,FAr),e(h4,JW),e(JW,TAr),e(h4,MAr),e(me,EAr),e(me,p4),e(p4,mve),e(mve,CAr),e(p4,wAr),e(p4,YW),e(YW,AAr),e(p4,yAr),e(me,LAr),e(me,_4),e(_4,gve),e(gve,xAr),e(_4,kAr),e(_4,KW),e(KW,SAr),e(_4,RAr),e(me,BAr),e(me,u4),e(u4,hve),e(hve,PAr),e(u4,$Ar),e(u4,ZW),e(ZW,IAr),e(u4,qAr),e(me,NAr),e(me,b4),e(b4,pve),e(pve,jAr),e(b4,DAr),e(b4,eH),e(eH,GAr),e(b4,OAr),e(xo,VAr),e(xo,_ve),e(_ve,XAr),e(xo,zAr),g(u8,xo,null),b(c,qPe,u),b(c,ff,u),e(ff,v4),e(v4,uve),g(b8,uve,null),e(ff,QAr),e(ff,bve),e(bve,WAr),b(c,NPe,u),b(c,$r,u),g(v8,$r,null),e($r,HAr),e($r,mf),e(mf,UAr),e(mf,oH),e(oH,JAr),e(mf,YAr),e(mf,rH),e(rH,KAr),e(mf,ZAr),e($r,e0r),e($r,F8),e(F8,o0r),e(F8,vve),e(vve,r0r),e(F8,t0r),e($r,a0r),e($r,xt),g(T8,xt,null),e(xt,n0r),e(xt,Fve),e(Fve,s0r),e(xt,l0r),e(xt,gf),e(gf,i0r),e(gf,Tve),e(Tve,d0r),e(gf,c0r),e(gf,tH),e(tH,f0r),e(gf,m0r),e(xt,g0r),e(xt,Mve),e(Mve,h0r),e(xt,p0r),g(M8,xt,null),e($r,_0r),e($r,ko),g(E8,ko,null),e(ko,u0r),e(ko,Eve),e(Eve,b0r),e(ko,v0r),e(ko,Bn),e(Bn,F0r),e(Bn,Cve),e(Cve,T0r),e(Bn,M0r),e(Bn,wve),e(wve,E0r),e(Bn,C0r),e(Bn,Ave),e(Ave,w0r),e(Bn,A0r),e(ko,y0r),e(ko,ve),e(ve,F4),e(F4,yve),e(yve,L0r),e(F4,x0r),e(F4,aH),e(aH,k0r),e(F4,S0r),e(ve,R0r),e(ve,T4),e(T4,Lve),e(Lve,B0r),e(T4,P0r),e(T4,nH),e(nH,$0r),e(T4,I0r),e(ve,q0r),e(ve,M4),e(M4,xve),e(xve,N0r),e(M4,j0r),e(M4,sH),e(sH,D0r),e(M4,G0r),e(ve,O0r),e(ve,E4),e(E4,kve),e(kve,V0r),e(E4,X0r),e(E4,lH),e(lH,z0r),e(E4,Q0r),e(ve,W0r),e(ve,C4),e(C4,Sve),e(Sve,H0r),e(C4,U0r),e(C4,iH),e(iH,J0r),e(C4,Y0r),e(ve,K0r),e(ve,w4),e(w4,Rve),e(Rve,Z0r),e(w4,eyr),e(w4,dH),e(dH,oyr),e(w4,ryr),e(ve,tyr),e(ve,A4),e(A4,Bve),e(Bve,ayr),e(A4,nyr),e(A4,cH),e(cH,syr),e(A4,lyr),e(ve,iyr),e(ve,y4),e(y4,Pve),e(Pve,dyr),e(y4,cyr),e(y4,fH),e(fH,fyr),e(y4,myr),e(ve,gyr),e(ve,L4),e(L4,$ve),e($ve,hyr),e(L4,pyr),e(L4,mH),e(mH,_yr),e(L4,uyr),e(ve,byr),e(ve,x4),e(x4,Ive),e(Ive,vyr),e(x4,Fyr),e(x4,gH),e(gH,Tyr),e(x4,Myr),e(ko,Eyr),e(ko,qve),e(qve,Cyr),e(ko,wyr),g(C8,ko,null),b(c,jPe,u),b(c,hf,u),e(hf,k4),e(k4,Nve),g(w8,Nve,null),e(hf,Ayr),e(hf,jve),e(jve,yyr),b(c,DPe,u),b(c,Ir,u),g(A8,Ir,null),e(Ir,Lyr),e(Ir,pf),e(pf,xyr),e(pf,hH),e(hH,kyr),e(pf,Syr),e(pf,pH),e(pH,Ryr),e(pf,Byr),e(Ir,Pyr),e(Ir,y8),e(y8,$yr),e(y8,Dve),e(Dve,Iyr),e(y8,qyr),e(Ir,Nyr),e(Ir,kt),g(L8,kt,null),e(kt,jyr),e(kt,Gve),e(Gve,Dyr),e(kt,Gyr),e(kt,_f),e(_f,Oyr),e(_f,Ove),e(Ove,Vyr),e(_f,Xyr),e(_f,_H),e(_H,zyr),e(_f,Qyr),e(kt,Wyr),e(kt,Vve),e(Vve,Hyr),e(kt,Uyr),g(x8,kt,null),e(Ir,Jyr),e(Ir,So),g(k8,So,null),e(So,Yyr),e(So,Xve),e(Xve,Kyr),e(So,Zyr),e(So,Pn),e(Pn,e8r),e(Pn,zve),e(zve,o8r),e(Pn,r8r),e(Pn,Qve),e(Qve,t8r),e(Pn,a8r),e(Pn,Wve),e(Wve,n8r),e(Pn,s8r),e(So,l8r),e(So,Ee),e(Ee,S4),e(S4,Hve),e(Hve,i8r),e(S4,d8r),e(S4,uH),e(uH,c8r),e(S4,f8r),e(Ee,m8r),e(Ee,R4),e(R4,Uve),e(Uve,g8r),e(R4,h8r),e(R4,bH),e(bH,p8r),e(R4,_8r),e(Ee,u8r),e(Ee,B4),e(B4,Jve),e(Jve,b8r),e(B4,v8r),e(B4,vH),e(vH,F8r),e(B4,T8r),e(Ee,M8r),e(Ee,P4),e(P4,Yve),e(Yve,E8r),e(P4,C8r),e(P4,FH),e(FH,w8r),e(P4,A8r),e(Ee,y8r),e(Ee,$4),e($4,Kve),e(Kve,L8r),e($4,x8r),e($4,TH),e(TH,k8r),e($4,S8r),e(Ee,R8r),e(Ee,I4),e(I4,Zve),e(Zve,B8r),e(I4,P8r),e(I4,MH),e(MH,$8r),e(I4,I8r),e(Ee,q8r),e(Ee,q4),e(q4,eFe),e(eFe,N8r),e(q4,j8r),e(q4,EH),e(EH,D8r),e(q4,G8r),e(Ee,O8r),e(Ee,N4),e(N4,oFe),e(oFe,V8r),e(N4,X8r),e(N4,CH),e(CH,z8r),e(N4,Q8r),e(Ee,W8r),e(Ee,j4),e(j4,rFe),e(rFe,H8r),e(j4,U8r),e(j4,wH),e(wH,J8r),e(j4,Y8r),e(So,K8r),e(So,tFe),e(tFe,Z8r),e(So,eLr),g(S8,So,null),b(c,GPe,u),b(c,uf,u),e(uf,D4),e(D4,aFe),g(R8,aFe,null),e(uf,oLr),e(uf,nFe),e(nFe,rLr),b(c,OPe,u),b(c,qr,u),g(B8,qr,null),e(qr,tLr),e(qr,bf),e(bf,aLr),e(bf,AH),e(AH,nLr),e(bf,sLr),e(bf,yH),e(yH,lLr),e(bf,iLr),e(qr,dLr),e(qr,P8),e(P8,cLr),e(P8,sFe),e(sFe,fLr),e(P8,mLr),e(qr,gLr),e(qr,St),g($8,St,null),e(St,hLr),e(St,lFe),e(lFe,pLr),e(St,_Lr),e(St,vf),e(vf,uLr),e(vf,iFe),e(iFe,bLr),e(vf,vLr),e(vf,LH),e(LH,FLr),e(vf,TLr),e(St,MLr),e(St,dFe),e(dFe,ELr),e(St,CLr),g(I8,St,null),e(qr,wLr),e(qr,Ro),g(q8,Ro,null),e(Ro,ALr),e(Ro,cFe),e(cFe,yLr),e(Ro,LLr),e(Ro,$n),e($n,xLr),e($n,fFe),e(fFe,kLr),e($n,SLr),e($n,mFe),e(mFe,RLr),e($n,BLr),e($n,gFe),e(gFe,PLr),e($n,$Lr),e(Ro,ILr),e(Ro,Fe),e(Fe,G4),e(G4,hFe),e(hFe,qLr),e(G4,NLr),e(G4,xH),e(xH,jLr),e(G4,DLr),e(Fe,GLr),e(Fe,O4),e(O4,pFe),e(pFe,OLr),e(O4,VLr),e(O4,kH),e(kH,XLr),e(O4,zLr),e(Fe,QLr),e(Fe,V4),e(V4,_Fe),e(_Fe,WLr),e(V4,HLr),e(V4,SH),e(SH,ULr),e(V4,JLr),e(Fe,YLr),e(Fe,X4),e(X4,uFe),e(uFe,KLr),e(X4,ZLr),e(X4,RH),e(RH,e7r),e(X4,o7r),e(Fe,r7r),e(Fe,z4),e(z4,bFe),e(bFe,t7r),e(z4,a7r),e(z4,BH),e(BH,n7r),e(z4,s7r),e(Fe,l7r),e(Fe,Q4),e(Q4,vFe),e(vFe,i7r),e(Q4,d7r),e(Q4,PH),e(PH,c7r),e(Q4,f7r),e(Fe,m7r),e(Fe,W4),e(W4,FFe),e(FFe,g7r),e(W4,h7r),e(W4,$H),e($H,p7r),e(W4,_7r),e(Fe,u7r),e(Fe,H4),e(H4,TFe),e(TFe,b7r),e(H4,v7r),e(H4,IH),e(IH,F7r),e(H4,T7r),e(Fe,M7r),e(Fe,U4),e(U4,MFe),e(MFe,E7r),e(U4,C7r),e(U4,qH),e(qH,w7r),e(U4,A7r),e(Fe,y7r),e(Fe,J4),e(J4,EFe),e(EFe,L7r),e(J4,x7r),e(J4,NH),e(NH,k7r),e(J4,S7r),e(Ro,R7r),e(Ro,CFe),e(CFe,B7r),e(Ro,P7r),g(N8,Ro,null),b(c,VPe,u),b(c,Ff,u),e(Ff,Y4),e(Y4,wFe),g(j8,wFe,null),e(Ff,$7r),e(Ff,AFe),e(AFe,I7r),b(c,XPe,u),b(c,Nr,u),g(D8,Nr,null),e(Nr,q7r),e(Nr,Tf),e(Tf,N7r),e(Tf,jH),e(jH,j7r),e(Tf,D7r),e(Tf,DH),e(DH,G7r),e(Tf,O7r),e(Nr,V7r),e(Nr,G8),e(G8,X7r),e(G8,yFe),e(yFe,z7r),e(G8,Q7r),e(Nr,W7r),e(Nr,Rt),g(O8,Rt,null),e(Rt,H7r),e(Rt,LFe),e(LFe,U7r),e(Rt,J7r),e(Rt,Mf),e(Mf,Y7r),e(Mf,xFe),e(xFe,K7r),e(Mf,Z7r),e(Mf,GH),e(GH,exr),e(Mf,oxr),e(Rt,rxr),e(Rt,kFe),e(kFe,txr),e(Rt,axr),g(V8,Rt,null),e(Nr,nxr),e(Nr,Bo),g(X8,Bo,null),e(Bo,sxr),e(Bo,SFe),e(SFe,lxr),e(Bo,ixr),e(Bo,In),e(In,dxr),e(In,RFe),e(RFe,cxr),e(In,fxr),e(In,BFe),e(BFe,mxr),e(In,gxr),e(In,PFe),e(PFe,hxr),e(In,pxr),e(Bo,_xr),e(Bo,Te),e(Te,K4),e(K4,$Fe),e($Fe,uxr),e(K4,bxr),e(K4,OH),e(OH,vxr),e(K4,Fxr),e(Te,Txr),e(Te,Z4),e(Z4,IFe),e(IFe,Mxr),e(Z4,Exr),e(Z4,VH),e(VH,Cxr),e(Z4,wxr),e(Te,Axr),e(Te,eE),e(eE,qFe),e(qFe,yxr),e(eE,Lxr),e(eE,XH),e(XH,xxr),e(eE,kxr),e(Te,Sxr),e(Te,oE),e(oE,NFe),e(NFe,Rxr),e(oE,Bxr),e(oE,zH),e(zH,Pxr),e(oE,$xr),e(Te,Ixr),e(Te,rE),e(rE,jFe),e(jFe,qxr),e(rE,Nxr),e(rE,QH),e(QH,jxr),e(rE,Dxr),e(Te,Gxr),e(Te,tE),e(tE,DFe),e(DFe,Oxr),e(tE,Vxr),e(tE,WH),e(WH,Xxr),e(tE,zxr),e(Te,Qxr),e(Te,aE),e(aE,GFe),e(GFe,Wxr),e(aE,Hxr),e(aE,HH),e(HH,Uxr),e(aE,Jxr),e(Te,Yxr),e(Te,nE),e(nE,OFe),e(OFe,Kxr),e(nE,Zxr),e(nE,UH),e(UH,ekr),e(nE,okr),e(Te,rkr),e(Te,sE),e(sE,VFe),e(VFe,tkr),e(sE,akr),e(sE,JH),e(JH,nkr),e(sE,skr),e(Te,lkr),e(Te,lE),e(lE,XFe),e(XFe,ikr),e(lE,dkr),e(lE,YH),e(YH,ckr),e(lE,fkr),e(Bo,mkr),e(Bo,zFe),e(zFe,gkr),e(Bo,hkr),g(z8,Bo,null),b(c,zPe,u),b(c,Ef,u),e(Ef,iE),e(iE,QFe),g(Q8,QFe,null),e(Ef,pkr),e(Ef,WFe),e(WFe,_kr),b(c,QPe,u),b(c,jr,u),g(W8,jr,null),e(jr,ukr),e(jr,Cf),e(Cf,bkr),e(Cf,KH),e(KH,vkr),e(Cf,Fkr),e(Cf,ZH),e(ZH,Tkr),e(Cf,Mkr),e(jr,Ekr),e(jr,H8),e(H8,Ckr),e(H8,HFe),e(HFe,wkr),e(H8,Akr),e(jr,ykr),e(jr,Bt),g(U8,Bt,null),e(Bt,Lkr),e(Bt,UFe),e(UFe,xkr),e(Bt,kkr),e(Bt,wf),e(wf,Skr),e(wf,JFe),e(JFe,Rkr),e(wf,Bkr),e(wf,eU),e(eU,Pkr),e(wf,$kr),e(Bt,Ikr),e(Bt,YFe),e(YFe,qkr),e(Bt,Nkr),g(J8,Bt,null),e(jr,jkr),e(jr,Po),g(Y8,Po,null),e(Po,Dkr),e(Po,KFe),e(KFe,Gkr),e(Po,Okr),e(Po,qn),e(qn,Vkr),e(qn,ZFe),e(ZFe,Xkr),e(qn,zkr),e(qn,eTe),e(eTe,Qkr),e(qn,Wkr),e(qn,oTe),e(oTe,Hkr),e(qn,Ukr),e(Po,Jkr),e(Po,Be),e(Be,dE),e(dE,rTe),e(rTe,Ykr),e(dE,Kkr),e(dE,oU),e(oU,Zkr),e(dE,eSr),e(Be,oSr),e(Be,cE),e(cE,tTe),e(tTe,rSr),e(cE,tSr),e(cE,rU),e(rU,aSr),e(cE,nSr),e(Be,sSr),e(Be,fE),e(fE,aTe),e(aTe,lSr),e(fE,iSr),e(fE,tU),e(tU,dSr),e(fE,cSr),e(Be,fSr),e(Be,mE),e(mE,nTe),e(nTe,mSr),e(mE,gSr),e(mE,aU),e(aU,hSr),e(mE,pSr),e(Be,_Sr),e(Be,gE),e(gE,sTe),e(sTe,uSr),e(gE,bSr),e(gE,nU),e(nU,vSr),e(gE,FSr),e(Be,TSr),e(Be,hE),e(hE,lTe),e(lTe,MSr),e(hE,ESr),e(hE,sU),e(sU,CSr),e(hE,wSr),e(Be,ASr),e(Be,pE),e(pE,iTe),e(iTe,ySr),e(pE,LSr),e(pE,lU),e(lU,xSr),e(pE,kSr),e(Be,SSr),e(Be,_E),e(_E,dTe),e(dTe,RSr),e(_E,BSr),e(_E,iU),e(iU,PSr),e(_E,$Sr),e(Po,ISr),e(Po,cTe),e(cTe,qSr),e(Po,NSr),g(K8,Po,null),b(c,WPe,u),b(c,Af,u),e(Af,uE),e(uE,fTe),g(Z8,fTe,null),e(Af,jSr),e(Af,mTe),e(mTe,DSr),b(c,HPe,u),b(c,Dr,u),g(eL,Dr,null),e(Dr,GSr),e(Dr,yf),e(yf,OSr),e(yf,dU),e(dU,VSr),e(yf,XSr),e(yf,cU),e(cU,zSr),e(yf,QSr),e(Dr,WSr),e(Dr,oL),e(oL,HSr),e(oL,gTe),e(gTe,USr),e(oL,JSr),e(Dr,YSr),e(Dr,Pt),g(rL,Pt,null),e(Pt,KSr),e(Pt,hTe),e(hTe,ZSr),e(Pt,eRr),e(Pt,Lf),e(Lf,oRr),e(Lf,pTe),e(pTe,rRr),e(Lf,tRr),e(Lf,fU),e(fU,aRr),e(Lf,nRr),e(Pt,sRr),e(Pt,_Te),e(_Te,lRr),e(Pt,iRr),g(tL,Pt,null),e(Dr,dRr),e(Dr,$o),g(aL,$o,null),e($o,cRr),e($o,uTe),e(uTe,fRr),e($o,mRr),e($o,Nn),e(Nn,gRr),e(Nn,bTe),e(bTe,hRr),e(Nn,pRr),e(Nn,vTe),e(vTe,_Rr),e(Nn,uRr),e(Nn,FTe),e(FTe,bRr),e(Nn,vRr),e($o,FRr),e($o,Pe),e(Pe,bE),e(bE,TTe),e(TTe,TRr),e(bE,MRr),e(bE,mU),e(mU,ERr),e(bE,CRr),e(Pe,wRr),e(Pe,vE),e(vE,MTe),e(MTe,ARr),e(vE,yRr),e(vE,gU),e(gU,LRr),e(vE,xRr),e(Pe,kRr),e(Pe,FE),e(FE,ETe),e(ETe,SRr),e(FE,RRr),e(FE,hU),e(hU,BRr),e(FE,PRr),e(Pe,$Rr),e(Pe,TE),e(TE,CTe),e(CTe,IRr),e(TE,qRr),e(TE,pU),e(pU,NRr),e(TE,jRr),e(Pe,DRr),e(Pe,ME),e(ME,wTe),e(wTe,GRr),e(ME,ORr),e(ME,_U),e(_U,VRr),e(ME,XRr),e(Pe,zRr),e(Pe,EE),e(EE,ATe),e(ATe,QRr),e(EE,WRr),e(EE,uU),e(uU,HRr),e(EE,URr),e(Pe,JRr),e(Pe,CE),e(CE,yTe),e(yTe,YRr),e(CE,KRr),e(CE,bU),e(bU,ZRr),e(CE,eBr),e(Pe,oBr),e(Pe,wE),e(wE,LTe),e(LTe,rBr),e(wE,tBr),e(wE,vU),e(vU,aBr),e(wE,nBr),e($o,sBr),e($o,xTe),e(xTe,lBr),e($o,iBr),g(nL,$o,null),b(c,UPe,u),b(c,xf,u),e(xf,AE),e(AE,kTe),g(sL,kTe,null),e(xf,dBr),e(xf,STe),e(STe,cBr),b(c,JPe,u),b(c,Gr,u),g(lL,Gr,null),e(Gr,fBr),e(Gr,kf),e(kf,mBr),e(kf,FU),e(FU,gBr),e(kf,hBr),e(kf,TU),e(TU,pBr),e(kf,_Br),e(Gr,uBr),e(Gr,iL),e(iL,bBr),e(iL,RTe),e(RTe,vBr),e(iL,FBr),e(Gr,TBr),e(Gr,$t),g(dL,$t,null),e($t,MBr),e($t,BTe),e(BTe,EBr),e($t,CBr),e($t,Sf),e(Sf,wBr),e(Sf,PTe),e(PTe,ABr),e(Sf,yBr),e(Sf,MU),e(MU,LBr),e(Sf,xBr),e($t,kBr),e($t,$Te),e($Te,SBr),e($t,RBr),g(cL,$t,null),e(Gr,BBr),e(Gr,Io),g(fL,Io,null),e(Io,PBr),e(Io,ITe),e(ITe,$Br),e(Io,IBr),e(Io,jn),e(jn,qBr),e(jn,qTe),e(qTe,NBr),e(jn,jBr),e(jn,NTe),e(NTe,DBr),e(jn,GBr),e(jn,jTe),e(jTe,OBr),e(jn,VBr),e(Io,XBr),e(Io,DTe),e(DTe,yE),e(yE,GTe),e(GTe,zBr),e(yE,QBr),e(yE,EU),e(EU,WBr),e(yE,HBr),e(Io,UBr),e(Io,OTe),e(OTe,JBr),e(Io,YBr),g(mL,Io,null),b(c,YPe,u),b(c,Rf,u),e(Rf,LE),e(LE,VTe),g(gL,VTe,null),e(Rf,KBr),e(Rf,XTe),e(XTe,ZBr),b(c,KPe,u),b(c,Or,u),g(hL,Or,null),e(Or,ePr),e(Or,Bf),e(Bf,oPr),e(Bf,CU),e(CU,rPr),e(Bf,tPr),e(Bf,wU),e(wU,aPr),e(Bf,nPr),e(Or,sPr),e(Or,pL),e(pL,lPr),e(pL,zTe),e(zTe,iPr),e(pL,dPr),e(Or,cPr),e(Or,It),g(_L,It,null),e(It,fPr),e(It,QTe),e(QTe,mPr),e(It,gPr),e(It,Pf),e(Pf,hPr),e(Pf,WTe),e(WTe,pPr),e(Pf,_Pr),e(Pf,AU),e(AU,uPr),e(Pf,bPr),e(It,vPr),e(It,HTe),e(HTe,FPr),e(It,TPr),g(uL,It,null),e(Or,MPr),e(Or,qo),g(bL,qo,null),e(qo,EPr),e(qo,UTe),e(UTe,CPr),e(qo,wPr),e(qo,Dn),e(Dn,APr),e(Dn,JTe),e(JTe,yPr),e(Dn,LPr),e(Dn,YTe),e(YTe,xPr),e(Dn,kPr),e(Dn,KTe),e(KTe,SPr),e(Dn,RPr),e(qo,BPr),e(qo,vL),e(vL,xE),e(xE,ZTe),e(ZTe,PPr),e(xE,$Pr),e(xE,yU),e(yU,IPr),e(xE,qPr),e(vL,NPr),e(vL,kE),e(kE,e9e),e(e9e,jPr),e(kE,DPr),e(kE,LU),e(LU,GPr),e(kE,OPr),e(qo,VPr),e(qo,o9e),e(o9e,XPr),e(qo,zPr),g(FL,qo,null),b(c,ZPe,u),b(c,$f,u),e($f,SE),e(SE,r9e),g(TL,r9e,null),e($f,QPr),e($f,t9e),e(t9e,WPr),b(c,e$e,u),b(c,Vr,u),g(ML,Vr,null),e(Vr,HPr),e(Vr,If),e(If,UPr),e(If,xU),e(xU,JPr),e(If,YPr),e(If,kU),e(kU,KPr),e(If,ZPr),e(Vr,e$r),e(Vr,EL),e(EL,o$r),e(EL,a9e),e(a9e,r$r),e(EL,t$r),e(Vr,a$r),e(Vr,qt),g(CL,qt,null),e(qt,n$r),e(qt,n9e),e(n9e,s$r),e(qt,l$r),e(qt,qf),e(qf,i$r),e(qf,s9e),e(s9e,d$r),e(qf,c$r),e(qf,SU),e(SU,f$r),e(qf,m$r),e(qt,g$r),e(qt,l9e),e(l9e,h$r),e(qt,p$r),g(wL,qt,null),e(Vr,_$r),e(Vr,No),g(AL,No,null),e(No,u$r),e(No,i9e),e(i9e,b$r),e(No,v$r),e(No,Gn),e(Gn,F$r),e(Gn,d9e),e(d9e,T$r),e(Gn,M$r),e(Gn,c9e),e(c9e,E$r),e(Gn,C$r),e(Gn,f9e),e(f9e,w$r),e(Gn,A$r),e(No,y$r),e(No,m9e),e(m9e,RE),e(RE,g9e),e(g9e,L$r),e(RE,x$r),e(RE,RU),e(RU,k$r),e(RE,S$r),e(No,R$r),e(No,h9e),e(h9e,B$r),e(No,P$r),g(yL,No,null),o$e=!0},p(c,[u]){const LL={};u&2&&(LL.$$scope={dirty:u,ctx:c}),zf.$set(LL);const p9e={};u&2&&(p9e.$$scope={dirty:u,ctx:c}),Dh.$set(p9e);const _9e={};u&2&&(_9e.$$scope={dirty:u,ctx:c}),Yh.$set(_9e)},i(c){o$e||(h(he.$$.fragment,c),h(Da.$$.fragment,c),h(q3.$$.fragment,c),h(N3.$$.fragment,c),h(zf.$$.fragment,c),h(j3.$$.fragment,c),h(D3.$$.fragment,c),h(V3.$$.fragment,c),h(X3.$$.fragment,c),h(z3.$$.fragment,c),h(Q3.$$.fragment,c),h(W3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(eC.$$.fragment,c),h(tC.$$.fragment,c),h(Dh.$$.fragment,c),h(aC.$$.fragment,c),h(nC.$$.fragment,c),h(sC.$$.fragment,c),h(lC.$$.fragment,c),h(cC.$$.fragment,c),h(Yh.$$.fragment,c),h(fC.$$.fragment,c),h(mC.$$.fragment,c),h(gC.$$.fragment,c),h(hC.$$.fragment,c),h(_C.$$.fragment,c),h(uC.$$.fragment,c),h(bC.$$.fragment,c),h(vC.$$.fragment,c),h(FC.$$.fragment,c),h(TC.$$.fragment,c),h(EC.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(yC.$$.fragment,c),h(LC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h($C.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(OC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(UC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Fw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(F0.$$.fragment,c),h(T0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(f8.$$.fragment,c),h(m8.$$.fragment,c),h(h8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(u8.$$.fragment,c),h(b8.$$.fragment,c),h(v8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(C8.$$.fragment,c),h(w8.$$.fragment,c),h(A8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(S8.$$.fragment,c),h(R8.$$.fragment,c),h(B8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(N8.$$.fragment,c),h(j8.$$.fragment,c),h(D8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(z8.$$.fragment,c),h(Q8.$$.fragment,c),h(W8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(K8.$$.fragment,c),h(Z8.$$.fragment,c),h(eL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),o$e=!0)},o(c){p(he.$$.fragment,c),p(Da.$$.fragment,c),p(q3.$$.fragment,c),p(N3.$$.fragment,c),p(zf.$$.fragment,c),p(j3.$$.fragment,c),p(D3.$$.fragment,c),p(V3.$$.fragment,c),p(X3.$$.fragment,c),p(z3.$$.fragment,c),p(Q3.$$.fragment,c),p(W3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(eC.$$.fragment,c),p(tC.$$.fragment,c),p(Dh.$$.fragment,c),p(aC.$$.fragment,c),p(nC.$$.fragment,c),p(sC.$$.fragment,c),p(lC.$$.fragment,c),p(cC.$$.fragment,c),p(Yh.$$.fragment,c),p(fC.$$.fragment,c),p(mC.$$.fragment,c),p(gC.$$.fragment,c),p(hC.$$.fragment,c),p(_C.$$.fragment,c),p(uC.$$.fragment,c),p(bC.$$.fragment,c),p(vC.$$.fragment,c),p(FC.$$.fragment,c),p(TC.$$.fragment,c),p(EC.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(yC.$$.fragment,c),p(LC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p($C.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(OC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(UC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Fw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(F0.$$.fragment,c),p(T0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(vy.$$.fragment,c),p(Fy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),p(f8.$$.fragment,c),p(m8.$$.fragment,c),p(h8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(u8.$$.fragment,c),p(b8.$$.fragment,c),p(v8.$$.fragment,c),p(T8.$$.fragment,c),p(M8.$$.fragment,c),p(E8.$$.fragment,c),p(C8.$$.fragment,c),p(w8.$$.fragment,c),p(A8.$$.fragment,c),p(L8.$$.fragment,c),p(x8.$$.fragment,c),p(k8.$$.fragment,c),p(S8.$$.fragment,c),p(R8.$$.fragment,c),p(B8.$$.fragment,c),p($8.$$.fragment,c),p(I8.$$.fragment,c),p(q8.$$.fragment,c),p(N8.$$.fragment,c),p(j8.$$.fragment,c),p(D8.$$.fragment,c),p(O8.$$.fragment,c),p(V8.$$.fragment,c),p(X8.$$.fragment,c),p(z8.$$.fragment,c),p(Q8.$$.fragment,c),p(W8.$$.fragment,c),p(U8.$$.fragment,c),p(J8.$$.fragment,c),p(Y8.$$.fragment,c),p(K8.$$.fragment,c),p(Z8.$$.fragment,c),p(eL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),o$e=!1},d(c){t(Z),c&&t(io),c&&t(ce),_(he),c&&t(Df),c&&t(fa),c&&t(xe),c&&t(co),c&&t(Of),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(eBe),c&&t(Wi),_(q3),c&&t(oBe),c&&t(Qn),c&&t(rBe),_(N3,c),c&&t(tBe),c&&t(B7),c&&t(aBe),_(zf,c),c&&t(nBe),c&&t(Hi),_(j3),c&&t(sBe),c&&t(Qo),_(D3),_(V3),_(X3),_(z3),c&&t(lBe),c&&t(Ji),_(Q3),c&&t(iBe),c&&t(Wo),_(W3),_(J3),_(Y3),_(K3),c&&t(dBe),c&&t(Yi),_(Z3),c&&t(cBe),c&&t(Ho),_(eC),_(tC),_(Dh),_(aC),_(nC),c&&t(fBe),c&&t(Ki),_(sC),c&&t(mBe),c&&t(Uo),_(lC),_(cC),_(Yh),_(fC),_(mC),c&&t(gBe),c&&t(ed),_(gC),c&&t(hBe),c&&t(Jo),_(hC),_(_C),_(uC),_(bC),_(vC),c&&t(pBe),c&&t(td),_(FC),c&&t(_Be),c&&t(Yo),_(TC),_(EC),_(CC),_(wC),_(AC),c&&t(uBe),c&&t(sd),_(yC),c&&t(bBe),c&&t(Ko),_(LC),_(kC),_(SC),_(RC),_(BC),c&&t(vBe),c&&t(dd),_(PC),c&&t(FBe),c&&t(Zo),_($C),_(qC),_(NC),_(jC),_(DC),c&&t(TBe),c&&t(md),_(GC),c&&t(MBe),c&&t(er),_(OC),_(XC),_(zC),_(QC),_(WC),c&&t(EBe),c&&t(pd),_(HC),c&&t(CBe),c&&t(or),_(UC),_(YC),_(KC),_(ZC),_(ew),c&&t(wBe),c&&t(bd),_(ow),c&&t(ABe),c&&t(rr),_(rw),_(aw),_(nw),_(sw),_(lw),c&&t(yBe),c&&t(Td),_(iw),c&&t(LBe),c&&t(tr),_(dw),_(fw),_(mw),_(gw),_(hw),c&&t(xBe),c&&t(Cd),_(pw),c&&t(kBe),c&&t(ar),_(_w),_(bw),_(vw),_(Fw),_(Tw),c&&t(SBe),c&&t(yd),_(Mw),c&&t(RBe),c&&t(nr),_(Ew),_(ww),_(Aw),_(yw),_(Lw),c&&t(BBe),c&&t(kd),_(xw),c&&t(PBe),c&&t(sr),_(kw),_(Rw),_(Bw),_(Pw),_($w),c&&t($Be),c&&t(Bd),_(Iw),c&&t(IBe),c&&t(lr),_(qw),_(jw),_(Dw),_(Gw),_(Ow),c&&t(qBe),c&&t(Id),_(Vw),c&&t(NBe),c&&t(ir),_(Xw),_(Qw),_(Ww),_(Hw),_(Uw),c&&t(jBe),c&&t(jd),_(Jw),c&&t(DBe),c&&t(dr),_(Yw),_(Zw),_(eA),_(oA),_(rA),c&&t(GBe),c&&t(Od),_(tA),c&&t(OBe),c&&t(cr),_(aA),_(sA),_(lA),_(iA),_(dA),c&&t(VBe),c&&t(zd),_(cA),c&&t(XBe),c&&t(fr),_(fA),_(gA),_(hA),_(pA),_(_A),c&&t(zBe),c&&t(Hd),_(uA),c&&t(QBe),c&&t(mr),_(bA),_(FA),_(TA),_(MA),_(CA),c&&t(WBe),c&&t(Yd),_(wA),c&&t(HBe),c&&t(gr),_(AA),_(LA),_(xA),_(kA),_(SA),c&&t(UBe),c&&t(ec),_(RA),c&&t(JBe),c&&t(hr),_(BA),_($A),_(IA),_(qA),_(NA),c&&t(YBe),c&&t(ac),_(jA),c&&t(KBe),c&&t(pr),_(DA),_(OA),_(VA),_(XA),_(zA),c&&t(ZBe),c&&t(lc),_(QA),c&&t(ePe),c&&t(_r),_(WA),_(UA),_(JA),_(YA),_(KA),c&&t(oPe),c&&t(cc),_(ZA),c&&t(rPe),c&&t(ur),_(e0),_(r0),_(t0),_(a0),_(n0),c&&t(tPe),c&&t(gc),_(s0),c&&t(aPe),c&&t(br),_(l0),_(d0),_(c0),_(f0),_(m0),c&&t(nPe),c&&t(_c),_(g0),c&&t(sPe),c&&t(vr),_(h0),_(_0),_(u0),_(b0),_(v0),c&&t(lPe),c&&t(vc),_(F0),c&&t(iPe),c&&t(Fr),_(T0),_(E0),_(C0),_(w0),_(A0),c&&t(dPe),c&&t(Mc),_(y0),c&&t(cPe),c&&t(Tr),_(L0),_(k0),_(S0),_(R0),_(B0),c&&t(fPe),c&&t(wc),_(P0),c&&t(mPe),c&&t(Mr),_($0),_(q0),_(N0),_(j0),_(G0),c&&t(gPe),c&&t(Lc),_(O0),c&&t(hPe),c&&t(Er),_(V0),_(z0),_(Q0),_(W0),_(H0),c&&t(pPe),c&&t(Sc),_(U0),c&&t(_Pe),c&&t(Cr),_(J0),_(K0),_(Z0),_(ey),_(oy),c&&t(uPe),c&&t(Pc),_(ry),c&&t(bPe),c&&t(wr),_(ty),_(ny),_(sy),_(ly),_(iy),c&&t(vPe),c&&t(qc),_(dy),c&&t(FPe),c&&t(Ar),_(cy),_(my),_(gy),_(hy),_(py),c&&t(TPe),c&&t(Dc),_(_y),c&&t(MPe),c&&t(yr),_(uy),_(vy),_(Fy),_(Ty),_(My),c&&t(EPe),c&&t(Vc),_(Ey),c&&t(CPe),c&&t(Lr),_(Cy),_(Ay),_(yy),_(Ly),_(xy),c&&t(wPe),c&&t(Qc),_(ky),c&&t(APe),c&&t(xr),_(Sy),_(By),_(Py),_($y),_(Iy),c&&t(yPe),c&&t(Uc),_(qy),c&&t(LPe),c&&t(kr),_(Ny),_(Dy),_(Gy),_(Oy),_(Vy),c&&t(xPe),c&&t(Kc),_(Xy),c&&t(kPe),c&&t(Sr),_(zy),_(Wy),_(Hy),_(Uy),_(Jy),c&&t(SPe),c&&t(of),_(Yy),c&&t(RPe),c&&t(Rr),_(Ky),_(e8),_(o8),_(r8),_(t8),c&&t(BPe),c&&t(af),_(a8),c&&t(PPe),c&&t(Br),_(n8),_(l8),_(i8),_(d8),_(c8),c&&t($Pe),c&&t(lf),_(f8),c&&t(IPe),c&&t(Pr),_(m8),_(h8),_(p8),_(_8),_(u8),c&&t(qPe),c&&t(ff),_(b8),c&&t(NPe),c&&t($r),_(v8),_(T8),_(M8),_(E8),_(C8),c&&t(jPe),c&&t(hf),_(w8),c&&t(DPe),c&&t(Ir),_(A8),_(L8),_(x8),_(k8),_(S8),c&&t(GPe),c&&t(uf),_(R8),c&&t(OPe),c&&t(qr),_(B8),_($8),_(I8),_(q8),_(N8),c&&t(VPe),c&&t(Ff),_(j8),c&&t(XPe),c&&t(Nr),_(D8),_(O8),_(V8),_(X8),_(z8),c&&t(zPe),c&&t(Ef),_(Q8),c&&t(QPe),c&&t(jr),_(W8),_(U8),_(J8),_(Y8),_(K8),c&&t(WPe),c&&t(Af),_(Z8),c&&t(HPe),c&&t(Dr),_(eL),_(rL),_(tL),_(aL),_(nL),c&&t(UPe),c&&t(xf),_(sL),c&&t(JPe),c&&t(Gr),_(lL),_(dL),_(cL),_(fL),_(mL),c&&t(YPe),c&&t(Rf),_(gL),c&&t(KPe),c&&t(Or),_(hL),_(_L),_(uL),_(bL),_(FL),c&&t(ZPe),c&&t($f),_(TL),c&&t(e$e),c&&t(Vr),_(ML),_(CL),_(wL),_(AL),_(yL)}}}const Owt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Vwt(jf){return qwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Uwt extends Bwt{constructor(Z){super();Pwt(this,Z,Vwt,Gwt,$wt,{})}}export{Uwt as default,Owt as metadata};
