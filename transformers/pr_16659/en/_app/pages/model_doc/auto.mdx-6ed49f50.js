import{S as W4t,i as H4t,s as U4t,e as a,k as l,w as F,t as o,M as J4t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Y4t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as pBr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function K4t(L){let g,v,p,m,u,d,h,Fo,oi,of,Yr,ri,ti,gA,rf,Ie,Oe,ai,Tn,hA,Mn,En,pA,ni,Cn,uA,si,tf,ba;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Fo=o(`, make sure its
`),oi=a("code"),of=o("model_type"),Yr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),gA=o(")."),rf=l(),Ie=a("p"),Oe=o("Likewise, if your "),ai=a("code"),Tn=o("NewModel"),hA=o(" is a subclass of "),Mn=a("a"),En=o("PreTrainedModel"),pA=o(`, make sure its
`),ni=a("code"),Cn=o("config_class"),uA=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),tf=o("NewModelConfig"),ba=o(")."),this.h()},l(Ve){g=n(Ve,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Lx=s(p);m=r(Lx,"NewModelConfig"),Lx.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),Fo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var xx=s(oi);of=r(xx,"model_type"),xx.forEach(t),Yr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var $x=s(ri);ti=r($x,'"new-model"'),$x.forEach(t),gA=r(Ae,")."),Ae.forEach(t),rf=i(Ve),Ie=n(Ve,"P",{});var To=s(Ie);Oe=r(To,"Likewise, if your "),ai=n(To,"CODE",{});var va=s(ai);Tn=r(va,"NewModel"),va.forEach(t),hA=r(To," is a subclass of "),Mn=n(To,"A",{href:!0});var kx=s(Mn);En=r(kx,"PreTrainedModel"),kx.forEach(t),pA=r(To,`, make sure its
`),ni=n(To,"CODE",{});var af=s(ni);Cn=r(af,"config_class"),af.forEach(t),uA=r(To,` attribute is set to the same class you use when registering the model (here
`),si=n(To,"CODE",{});var Sx=s(si);tf=r(Sx,"NewModelConfig"),Sx.forEach(t),ba=r(To,")."),To.forEach(t),this.h()},h(){c(Mn,"href","/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel")},m(Ve,Ae){b(Ve,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Fo),e(g,oi),e(oi,of),e(g,Yr),e(g,ri),e(ri,ti),e(g,gA),b(Ve,rf,Ae),b(Ve,Ie,Ae),e(Ie,Oe),e(Ie,ai),e(ai,Tn),e(Ie,hA),e(Ie,Mn),e(Mn,En),e(Ie,pA),e(Ie,ni),e(ni,Cn),e(Ie,uA),e(Ie,si),e(si,tf),e(Ie,ba)},d(Ve){Ve&&t(g),Ve&&t(rf),Ve&&t(Ie)}}}function Z4t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oEt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function rEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tEt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function aEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Et(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Et(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function REt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ECt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ACt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ICt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WCt(L){let g,v,p,m,u,d,h,Fo,oi,of,Yr,ri,ti,gA,rf,Ie,Oe,ai,Tn,hA,Mn,En,pA,ni,Cn,uA,si,tf,ba,Ve,Ae,Lx,li,xx,$x,To,va,kx,af,Sx,Uqe,VRe,ii,nf,XK,_A,Jqe,zK,Yqe,XRe,wn,Kqe,QK,Zqe,eNe,WK,oNe,rNe,zRe,bA,QRe,Rx,tNe,WRe,sf,HRe,di,lf,HK,vA,aNe,UK,nNe,URe,Mo,FA,sNe,TA,lNe,Bx,iNe,dNe,cNe,MA,fNe,JK,mNe,gNe,hNe,Fr,EA,pNe,YK,uNe,_Ne,ci,bNe,KK,vNe,FNe,ZK,TNe,MNe,ENe,A,df,eZ,CNe,wNe,Px,ANe,yNe,LNe,cf,oZ,xNe,$Ne,Ix,kNe,SNe,RNe,ff,rZ,BNe,PNe,qx,INe,qNe,NNe,mf,tZ,jNe,DNe,Nx,GNe,ONe,VNe,gf,aZ,XNe,zNe,jx,QNe,WNe,HNe,hf,nZ,UNe,JNe,Dx,YNe,KNe,ZNe,pf,sZ,eje,oje,Gx,rje,tje,aje,uf,lZ,nje,sje,Ox,lje,ije,dje,_f,iZ,cje,fje,Vx,mje,gje,hje,bf,dZ,pje,uje,Xx,_je,bje,vje,vf,cZ,Fje,Tje,zx,Mje,Eje,Cje,Ff,fZ,wje,Aje,Qx,yje,Lje,xje,Tf,mZ,$je,kje,Wx,Sje,Rje,Bje,Mf,gZ,Pje,Ije,Hx,qje,Nje,jje,Ef,hZ,Dje,Gje,Ux,Oje,Vje,Xje,Cf,pZ,zje,Qje,Jx,Wje,Hje,Uje,wf,uZ,Jje,Yje,Yx,Kje,Zje,eDe,Af,_Z,oDe,rDe,Kx,tDe,aDe,nDe,yf,bZ,sDe,lDe,Zx,iDe,dDe,cDe,Lf,vZ,fDe,mDe,e$,gDe,hDe,pDe,xf,FZ,uDe,_De,o$,bDe,vDe,FDe,$f,TZ,TDe,MDe,r$,EDe,CDe,wDe,kf,MZ,ADe,yDe,t$,LDe,xDe,$De,Sf,EZ,kDe,SDe,a$,RDe,BDe,PDe,Rf,CZ,IDe,qDe,n$,NDe,jDe,DDe,Bf,wZ,GDe,ODe,s$,VDe,XDe,zDe,Pf,AZ,QDe,WDe,l$,HDe,UDe,JDe,If,yZ,YDe,KDe,i$,ZDe,eGe,oGe,qf,LZ,rGe,tGe,d$,aGe,nGe,sGe,Nf,xZ,lGe,iGe,c$,dGe,cGe,fGe,jf,$Z,mGe,gGe,f$,hGe,pGe,uGe,Df,kZ,_Ge,bGe,m$,vGe,FGe,TGe,Gf,SZ,MGe,EGe,g$,CGe,wGe,AGe,Of,RZ,yGe,LGe,h$,xGe,$Ge,kGe,Vf,BZ,SGe,RGe,p$,BGe,PGe,IGe,Xf,PZ,qGe,NGe,u$,jGe,DGe,GGe,zf,IZ,OGe,VGe,_$,XGe,zGe,QGe,Qf,qZ,WGe,HGe,b$,UGe,JGe,YGe,Wf,NZ,KGe,ZGe,v$,eOe,oOe,rOe,Hf,jZ,tOe,aOe,F$,nOe,sOe,lOe,Uf,DZ,iOe,dOe,T$,cOe,fOe,mOe,Jf,GZ,gOe,hOe,M$,pOe,uOe,_Oe,Yf,OZ,bOe,vOe,E$,FOe,TOe,MOe,Kf,VZ,EOe,COe,C$,wOe,AOe,yOe,Zf,XZ,LOe,xOe,w$,$Oe,kOe,SOe,em,zZ,ROe,BOe,A$,POe,IOe,qOe,om,QZ,NOe,jOe,y$,DOe,GOe,OOe,rm,WZ,VOe,XOe,L$,zOe,QOe,WOe,tm,HZ,HOe,UOe,x$,JOe,YOe,KOe,am,UZ,ZOe,eVe,$$,oVe,rVe,tVe,nm,JZ,aVe,nVe,k$,sVe,lVe,iVe,sm,YZ,dVe,cVe,S$,fVe,mVe,gVe,lm,KZ,hVe,pVe,R$,uVe,_Ve,bVe,im,ZZ,vVe,FVe,B$,TVe,MVe,EVe,dm,eee,CVe,wVe,P$,AVe,yVe,LVe,cm,oee,xVe,$Ve,I$,kVe,SVe,RVe,fm,ree,BVe,PVe,q$,IVe,qVe,NVe,mm,tee,jVe,DVe,N$,GVe,OVe,VVe,gm,aee,XVe,zVe,j$,QVe,WVe,HVe,hm,nee,UVe,JVe,D$,YVe,KVe,ZVe,pm,see,eXe,oXe,G$,rXe,tXe,aXe,um,lee,nXe,sXe,O$,lXe,iXe,dXe,_m,iee,cXe,fXe,V$,mXe,gXe,hXe,bm,dee,pXe,uXe,X$,_Xe,bXe,vXe,vm,cee,FXe,TXe,z$,MXe,EXe,CXe,Fm,fee,wXe,AXe,Q$,yXe,LXe,xXe,Tm,mee,$Xe,kXe,W$,SXe,RXe,BXe,Mm,gee,PXe,IXe,H$,qXe,NXe,jXe,Em,hee,DXe,GXe,U$,OXe,VXe,XXe,Cm,pee,zXe,QXe,J$,WXe,HXe,UXe,wm,uee,JXe,YXe,Y$,KXe,ZXe,eze,Am,_ee,oze,rze,K$,tze,aze,nze,ym,bee,sze,lze,Z$,ize,dze,cze,Lm,vee,fze,mze,ek,gze,hze,pze,xm,Fee,uze,_ze,ok,bze,vze,Fze,$m,Tee,Tze,Mze,rk,Eze,Cze,wze,km,Mee,Aze,yze,tk,Lze,xze,$ze,Sm,Eee,kze,Sze,ak,Rze,Bze,Pze,Rm,Cee,Ize,qze,nk,Nze,jze,Dze,Bm,wee,Gze,Oze,sk,Vze,Xze,zze,Pm,Aee,Qze,Wze,lk,Hze,Uze,Jze,Im,yee,Yze,Kze,ik,Zze,eQe,oQe,qm,Lee,rQe,tQe,dk,aQe,nQe,sQe,Nm,xee,lQe,iQe,ck,dQe,cQe,fQe,jm,$ee,mQe,gQe,fk,hQe,pQe,uQe,Dm,kee,_Qe,bQe,mk,vQe,FQe,TQe,Gm,See,MQe,EQe,gk,CQe,wQe,AQe,Om,Ree,yQe,LQe,hk,xQe,$Qe,kQe,Vm,Bee,SQe,RQe,pk,BQe,PQe,IQe,Xm,Pee,qQe,NQe,uk,jQe,DQe,GQe,zm,Iee,OQe,VQe,_k,XQe,zQe,QQe,Qm,qee,WQe,HQe,bk,UQe,JQe,YQe,Wm,Nee,KQe,ZQe,vk,eWe,oWe,rWe,Hm,jee,tWe,aWe,Fk,nWe,sWe,lWe,Um,Dee,iWe,dWe,Tk,cWe,fWe,mWe,Jm,Gee,gWe,hWe,Mk,pWe,uWe,_We,Ym,Oee,bWe,vWe,Ek,FWe,TWe,MWe,Km,Vee,EWe,CWe,Ck,wWe,AWe,yWe,Zm,Xee,LWe,xWe,wk,$We,kWe,SWe,eg,zee,RWe,BWe,Ak,PWe,IWe,qWe,og,Qee,NWe,jWe,yk,DWe,GWe,OWe,rg,Wee,VWe,XWe,Lk,zWe,QWe,WWe,tg,Hee,HWe,UWe,xk,JWe,YWe,KWe,ag,ZWe,ng,CA,eHe,Uee,oHe,JRe,fi,sg,Jee,wA,rHe,Yee,tHe,YRe,Eo,AA,aHe,yA,nHe,$k,sHe,lHe,iHe,LA,dHe,Kee,cHe,fHe,mHe,Tr,xA,gHe,Zee,hHe,pHe,Fa,uHe,eoe,_He,bHe,ooe,vHe,FHe,roe,THe,MHe,EHe,k,An,toe,CHe,wHe,kk,AHe,yHe,Sk,LHe,xHe,$He,yn,aoe,kHe,SHe,Rk,RHe,BHe,Bk,PHe,IHe,qHe,Ln,noe,NHe,jHe,Pk,DHe,GHe,Ik,OHe,VHe,XHe,lg,soe,zHe,QHe,qk,WHe,HHe,UHe,xn,loe,JHe,YHe,Nk,KHe,ZHe,jk,eUe,oUe,rUe,ig,ioe,tUe,aUe,Dk,nUe,sUe,lUe,dg,doe,iUe,dUe,Gk,cUe,fUe,mUe,cg,coe,gUe,hUe,Ok,pUe,uUe,_Ue,$n,foe,bUe,vUe,Vk,FUe,TUe,Xk,MUe,EUe,CUe,kn,moe,wUe,AUe,zk,yUe,LUe,Qk,xUe,$Ue,kUe,Sn,goe,SUe,RUe,Wk,BUe,PUe,Hk,IUe,qUe,NUe,fg,hoe,jUe,DUe,Uk,GUe,OUe,VUe,mg,poe,XUe,zUe,Jk,QUe,WUe,HUe,Rn,uoe,UUe,JUe,Yk,YUe,KUe,Kk,ZUe,eJe,oJe,gg,_oe,rJe,tJe,Zk,aJe,nJe,sJe,Bn,boe,lJe,iJe,eS,dJe,cJe,oS,fJe,mJe,gJe,Pn,voe,hJe,pJe,rS,uJe,_Je,tS,bJe,vJe,FJe,In,Foe,TJe,MJe,aS,EJe,CJe,Toe,wJe,AJe,yJe,hg,Moe,LJe,xJe,nS,$Je,kJe,SJe,qn,Eoe,RJe,BJe,sS,PJe,IJe,lS,qJe,NJe,jJe,Nn,Coe,DJe,GJe,iS,OJe,VJe,dS,XJe,zJe,QJe,jn,woe,WJe,HJe,cS,UJe,JJe,fS,YJe,KJe,ZJe,Dn,Aoe,eYe,oYe,mS,rYe,tYe,gS,aYe,nYe,sYe,Gn,yoe,lYe,iYe,hS,dYe,cYe,pS,fYe,mYe,gYe,On,Loe,hYe,pYe,uS,uYe,_Ye,_S,bYe,vYe,FYe,pg,xoe,TYe,MYe,bS,EYe,CYe,wYe,Vn,$oe,AYe,yYe,vS,LYe,xYe,FS,$Ye,kYe,SYe,ug,koe,RYe,BYe,TS,PYe,IYe,qYe,Xn,Soe,NYe,jYe,MS,DYe,GYe,ES,OYe,VYe,XYe,zn,Roe,zYe,QYe,CS,WYe,HYe,wS,UYe,JYe,YYe,Qn,Boe,KYe,ZYe,AS,eKe,oKe,yS,rKe,tKe,aKe,_g,Poe,nKe,sKe,LS,lKe,iKe,dKe,Wn,Ioe,cKe,fKe,xS,mKe,gKe,$S,hKe,pKe,uKe,Hn,qoe,_Ke,bKe,kS,vKe,FKe,SS,TKe,MKe,EKe,bg,Noe,CKe,wKe,RS,AKe,yKe,LKe,Un,joe,xKe,$Ke,BS,kKe,SKe,PS,RKe,BKe,PKe,Jn,Doe,IKe,qKe,IS,NKe,jKe,qS,DKe,GKe,OKe,Yn,Goe,VKe,XKe,NS,zKe,QKe,jS,WKe,HKe,UKe,Kn,Ooe,JKe,YKe,DS,KKe,ZKe,GS,eZe,oZe,rZe,Zn,Voe,tZe,aZe,OS,nZe,sZe,VS,lZe,iZe,dZe,es,Xoe,cZe,fZe,XS,mZe,gZe,zS,hZe,pZe,uZe,vg,zoe,_Ze,bZe,QS,vZe,FZe,TZe,os,Qoe,MZe,EZe,WS,CZe,wZe,HS,AZe,yZe,LZe,Fg,Woe,xZe,$Ze,US,kZe,SZe,RZe,Tg,Hoe,BZe,PZe,JS,IZe,qZe,NZe,rs,Uoe,jZe,DZe,YS,GZe,OZe,KS,VZe,XZe,zZe,ts,Joe,QZe,WZe,ZS,HZe,UZe,eR,JZe,YZe,KZe,as,Yoe,ZZe,eeo,oR,oeo,reo,rR,teo,aeo,neo,Mg,Koe,seo,leo,tR,ieo,deo,ceo,ns,Zoe,feo,meo,aR,geo,heo,nR,peo,ueo,_eo,ss,ere,beo,veo,sR,Feo,Teo,lR,Meo,Eeo,Ceo,ls,ore,weo,Aeo,iR,yeo,Leo,dR,xeo,$eo,keo,is,rre,Seo,Reo,cR,Beo,Peo,fR,Ieo,qeo,Neo,ds,tre,jeo,Deo,mR,Geo,Oeo,gR,Veo,Xeo,zeo,cs,are,Qeo,Weo,hR,Heo,Ueo,pR,Jeo,Yeo,Keo,Eg,nre,Zeo,eoo,uR,ooo,roo,too,Cg,sre,aoo,noo,_R,soo,loo,ioo,wg,lre,doo,coo,bR,foo,moo,goo,Ag,ire,hoo,poo,vR,uoo,_oo,boo,fs,dre,voo,Foo,FR,Too,Moo,TR,Eoo,Coo,woo,yg,cre,Aoo,yoo,MR,Loo,xoo,$oo,ms,fre,koo,Soo,ER,Roo,Boo,CR,Poo,Ioo,qoo,gs,mre,Noo,joo,wR,Doo,Goo,AR,Ooo,Voo,Xoo,hs,gre,zoo,Qoo,yR,Woo,Hoo,LR,Uoo,Joo,Yoo,ps,hre,Koo,Zoo,xR,ero,oro,$R,rro,tro,aro,us,pre,nro,sro,kR,lro,iro,SR,dro,cro,fro,_s,ure,mro,gro,RR,hro,pro,BR,uro,_ro,bro,Lg,_re,vro,Fro,PR,Tro,Mro,Ero,xg,bre,Cro,wro,IR,Aro,yro,Lro,bs,vre,xro,$ro,qR,kro,Sro,NR,Rro,Bro,Pro,vs,Fre,Iro,qro,jR,Nro,jro,DR,Dro,Gro,Oro,Fs,Tre,Vro,Xro,GR,zro,Qro,OR,Wro,Hro,Uro,$g,Mre,Jro,Yro,VR,Kro,Zro,eto,kg,Ere,oto,rto,XR,tto,ato,nto,Sg,Cre,sto,lto,zR,ito,dto,cto,Ts,wre,fto,mto,QR,gto,hto,WR,pto,uto,_to,Rg,Are,bto,vto,HR,Fto,Tto,Mto,Bg,yre,Eto,Cto,UR,wto,Ato,yto,Ms,Lre,Lto,xto,JR,$to,kto,YR,Sto,Rto,Bto,Pg,xre,Pto,Ito,KR,qto,Nto,jto,Ig,$re,Dto,Gto,ZR,Oto,Vto,Xto,Es,kre,zto,Qto,eB,Wto,Hto,oB,Uto,Jto,Yto,Cs,Sre,Kto,Zto,rB,eao,oao,tB,rao,tao,aao,ws,Rre,nao,sao,aB,lao,iao,nB,dao,cao,fao,As,Bre,mao,gao,sB,hao,pao,lB,uao,_ao,bao,qg,vao,Ng,$A,Fao,Pre,Tao,KRe,mi,jg,Ire,kA,Mao,qre,Eao,ZRe,Co,SA,Cao,RA,wao,iB,Aao,yao,Lao,BA,xao,Nre,$ao,kao,Sao,Xe,PA,Rao,jre,Bao,Pao,Ta,Iao,Dre,qao,Nao,Gre,jao,Dao,Ore,Gao,Oao,Vao,ae,Dg,Vre,Xao,zao,dB,Qao,Wao,Hao,Gg,Xre,Uao,Jao,cB,Yao,Kao,Zao,Og,zre,eno,ono,fB,rno,tno,ano,Vg,Qre,nno,sno,mB,lno,ino,dno,Xg,Wre,cno,fno,gB,mno,gno,hno,zg,Hre,pno,uno,hB,_no,bno,vno,Qg,Ure,Fno,Tno,pB,Mno,Eno,Cno,Wg,Jre,wno,Ano,uB,yno,Lno,xno,Hg,Yre,$no,kno,_B,Sno,Rno,Bno,Ug,Kre,Pno,Ino,bB,qno,Nno,jno,Jg,Zre,Dno,Gno,vB,Ono,Vno,Xno,Yg,ete,zno,Qno,FB,Wno,Hno,Uno,Kg,ote,Jno,Yno,TB,Kno,Zno,eso,Zg,rte,oso,rso,MB,tso,aso,nso,eh,tte,sso,lso,EB,iso,dso,cso,oh,ate,fso,mso,CB,gso,hso,pso,rh,nte,uso,_so,wB,bso,vso,Fso,th,ste,Tso,Mso,AB,Eso,Cso,wso,ah,lte,Aso,yso,yB,Lso,xso,$so,nh,ite,kso,Sso,LB,Rso,Bso,Pso,sh,dte,Iso,qso,xB,Nso,jso,Dso,lh,cte,Gso,Oso,$B,Vso,Xso,zso,ih,fte,Qso,Wso,kB,Hso,Uso,Jso,dh,Yso,ch,Kso,fh,IA,Zso,mte,elo,eBe,gi,mh,gte,qA,olo,hte,rlo,oBe,wo,NA,tlo,jA,alo,SB,nlo,slo,llo,DA,ilo,pte,dlo,clo,flo,ze,GA,mlo,ute,glo,hlo,hi,plo,_te,ulo,_lo,bte,blo,vlo,Flo,be,gh,vte,Tlo,Mlo,RB,Elo,Clo,wlo,hh,Fte,Alo,ylo,BB,Llo,xlo,$lo,ph,Tte,klo,Slo,PB,Rlo,Blo,Plo,uh,Mte,Ilo,qlo,IB,Nlo,jlo,Dlo,_h,Ete,Glo,Olo,qB,Vlo,Xlo,zlo,bh,Cte,Qlo,Wlo,NB,Hlo,Ulo,Jlo,vh,wte,Ylo,Klo,jB,Zlo,eio,oio,Fh,Ate,rio,tio,DB,aio,nio,sio,Th,yte,lio,iio,GB,dio,cio,fio,Mh,Lte,mio,gio,OB,hio,pio,uio,Eh,xte,_io,bio,VB,vio,Fio,Tio,Ch,$te,Mio,Eio,XB,Cio,wio,Aio,wh,kte,yio,Lio,zB,xio,$io,kio,Ah,Ste,Sio,Rio,QB,Bio,Pio,Iio,yh,qio,Lh,Nio,xh,OA,jio,Rte,Dio,rBe,pi,$h,Bte,VA,Gio,Pte,Oio,tBe,Ao,XA,Vio,ui,Xio,WB,zio,Qio,HB,Wio,Hio,Uio,zA,Jio,Ite,Yio,Kio,Zio,Kr,QA,edo,qte,odo,rdo,_i,tdo,Nte,ado,ndo,UB,sdo,ldo,ido,kh,ddo,Qe,WA,cdo,jte,fdo,mdo,Ma,gdo,Dte,hdo,pdo,Gte,udo,_do,Ote,bdo,vdo,Fdo,x,Sh,Vte,Tdo,Mdo,JB,Edo,Cdo,wdo,Rh,Xte,Ado,ydo,YB,Ldo,xdo,$do,Bh,zte,kdo,Sdo,KB,Rdo,Bdo,Pdo,Ph,Qte,Ido,qdo,ZB,Ndo,jdo,Ddo,Ih,Wte,Gdo,Odo,eP,Vdo,Xdo,zdo,qh,Hte,Qdo,Wdo,oP,Hdo,Udo,Jdo,Nh,Ute,Ydo,Kdo,rP,Zdo,eco,oco,jh,Jte,rco,tco,tP,aco,nco,sco,Dh,Yte,lco,ico,aP,dco,cco,fco,Gh,Kte,mco,gco,nP,hco,pco,uco,Oh,Zte,_co,bco,sP,vco,Fco,Tco,Vh,eae,Mco,Eco,lP,Cco,wco,Aco,Xh,oae,yco,Lco,iP,xco,$co,kco,zh,rae,Sco,Rco,dP,Bco,Pco,Ico,Qh,tae,qco,Nco,cP,jco,Dco,Gco,Wh,aae,Oco,Vco,fP,Xco,zco,Qco,Hh,nae,Wco,Hco,mP,Uco,Jco,Yco,Uh,sae,Kco,Zco,gP,efo,ofo,rfo,Jh,lae,tfo,afo,hP,nfo,sfo,lfo,Yh,iae,ifo,dfo,pP,cfo,ffo,mfo,Kh,dae,gfo,hfo,uP,pfo,ufo,_fo,Zh,cae,bfo,vfo,_P,Ffo,Tfo,Mfo,ep,fae,Efo,Cfo,bP,wfo,Afo,yfo,op,mae,Lfo,xfo,vP,$fo,kfo,Sfo,rp,gae,Rfo,Bfo,FP,Pfo,Ifo,qfo,tp,hae,Nfo,jfo,TP,Dfo,Gfo,Ofo,ap,pae,Vfo,Xfo,MP,zfo,Qfo,Wfo,np,uae,Hfo,Ufo,EP,Jfo,Yfo,Kfo,sp,_ae,Zfo,emo,CP,omo,rmo,tmo,lp,bae,amo,nmo,wP,smo,lmo,imo,ys,vae,dmo,cmo,AP,fmo,mmo,yP,gmo,hmo,pmo,ip,Fae,umo,_mo,LP,bmo,vmo,Fmo,dp,Tae,Tmo,Mmo,xP,Emo,Cmo,wmo,cp,Mae,Amo,ymo,$P,Lmo,xmo,$mo,fp,Eae,kmo,Smo,kP,Rmo,Bmo,Pmo,mp,Cae,Imo,qmo,SP,Nmo,jmo,Dmo,gp,wae,Gmo,Omo,RP,Vmo,Xmo,zmo,hp,Aae,Qmo,Wmo,BP,Hmo,Umo,Jmo,pp,yae,Ymo,Kmo,PP,Zmo,ego,ogo,up,Lae,rgo,tgo,IP,ago,ngo,sgo,_p,xae,lgo,igo,qP,dgo,cgo,fgo,bp,$ae,mgo,ggo,NP,hgo,pgo,ugo,vp,kae,_go,bgo,jP,vgo,Fgo,Tgo,Fp,Sae,Mgo,Ego,DP,Cgo,wgo,Ago,Tp,Rae,ygo,Lgo,GP,xgo,$go,kgo,Mp,Bae,Sgo,Rgo,OP,Bgo,Pgo,Igo,Ep,Pae,qgo,Ngo,VP,jgo,Dgo,Ggo,Cp,Iae,Ogo,Vgo,XP,Xgo,zgo,Qgo,wp,qae,Wgo,Hgo,zP,Ugo,Jgo,Ygo,Ap,Nae,Kgo,Zgo,QP,eho,oho,rho,yp,jae,tho,aho,WP,nho,sho,lho,Lp,Dae,iho,dho,HP,cho,fho,mho,xp,Gae,gho,hho,UP,pho,uho,_ho,$p,Oae,bho,vho,JP,Fho,Tho,Mho,kp,Vae,Eho,Cho,YP,who,Aho,yho,Sp,Xae,Lho,xho,KP,$ho,kho,Sho,Rp,zae,Rho,Bho,ZP,Pho,Iho,qho,Bp,Qae,Nho,jho,eI,Dho,Gho,Oho,Pp,Wae,Vho,Xho,oI,zho,Qho,Who,Ip,Hae,Hho,Uho,rI,Jho,Yho,Kho,qp,Uae,Zho,epo,tI,opo,rpo,tpo,Np,Jae,apo,npo,aI,spo,lpo,ipo,jp,Yae,dpo,cpo,nI,fpo,mpo,gpo,Dp,Kae,hpo,ppo,sI,upo,_po,bpo,Gp,Zae,vpo,Fpo,lI,Tpo,Mpo,Epo,Op,ene,Cpo,wpo,iI,Apo,ypo,Lpo,Vp,one,xpo,$po,dI,kpo,Spo,Rpo,Xp,rne,Bpo,Ppo,cI,Ipo,qpo,Npo,zp,tne,jpo,Dpo,fI,Gpo,Opo,Vpo,Qp,ane,Xpo,zpo,mI,Qpo,Wpo,Hpo,Wp,nne,Upo,Jpo,gI,Ypo,Kpo,Zpo,Hp,sne,euo,ouo,hI,ruo,tuo,auo,Up,lne,nuo,suo,pI,luo,iuo,duo,Jp,ine,cuo,fuo,uI,muo,guo,huo,Yp,dne,puo,uuo,_I,_uo,buo,vuo,Kp,cne,Fuo,Tuo,bI,Muo,Euo,Cuo,Zp,fne,wuo,Auo,vI,yuo,Luo,xuo,eu,mne,$uo,kuo,FI,Suo,Ruo,Buo,ou,gne,Puo,Iuo,TI,quo,Nuo,juo,ru,hne,Duo,Guo,MI,Ouo,Vuo,Xuo,tu,pne,zuo,Quo,EI,Wuo,Huo,Uuo,au,une,Juo,Yuo,CI,Kuo,Zuo,e_o,nu,_ne,o_o,r_o,wI,t_o,a_o,n_o,su,bne,s_o,l_o,AI,i_o,d_o,c_o,lu,vne,f_o,m_o,yI,g_o,h_o,p_o,iu,Fne,u_o,__o,LI,b_o,v_o,F_o,du,Tne,T_o,M_o,xI,E_o,C_o,w_o,cu,Mne,A_o,y_o,$I,L_o,x_o,$_o,fu,Ene,k_o,S_o,kI,R_o,B_o,P_o,mu,Cne,I_o,q_o,SI,N_o,j_o,D_o,gu,wne,G_o,O_o,RI,V_o,X_o,z_o,hu,Ane,Q_o,W_o,BI,H_o,U_o,J_o,pu,yne,Y_o,K_o,PI,Z_o,e6o,o6o,uu,Lne,r6o,t6o,II,a6o,n6o,s6o,_u,xne,l6o,i6o,qI,d6o,c6o,f6o,bu,m6o,$ne,g6o,h6o,kne,p6o,u6o,vu,aBe,bi,Fu,Sne,HA,_6o,Rne,b6o,nBe,yo,UA,v6o,vi,F6o,NI,T6o,M6o,jI,E6o,C6o,w6o,JA,A6o,Bne,y6o,L6o,x6o,Zr,YA,$6o,Pne,k6o,S6o,Fi,R6o,Ine,B6o,P6o,DI,I6o,q6o,N6o,Tu,j6o,We,KA,D6o,qne,G6o,O6o,Ea,V6o,Nne,X6o,z6o,jne,Q6o,W6o,Dne,H6o,U6o,J6o,G,Mu,Gne,Y6o,K6o,GI,Z6o,e1o,o1o,Eu,One,r1o,t1o,OI,a1o,n1o,s1o,Cu,Vne,l1o,i1o,VI,d1o,c1o,f1o,wu,Xne,m1o,g1o,XI,h1o,p1o,u1o,Au,zne,_1o,b1o,zI,v1o,F1o,T1o,yu,Qne,M1o,E1o,QI,C1o,w1o,A1o,Lu,Wne,y1o,L1o,WI,x1o,$1o,k1o,xu,Hne,S1o,R1o,HI,B1o,P1o,I1o,$u,Une,q1o,N1o,UI,j1o,D1o,G1o,ku,Jne,O1o,V1o,JI,X1o,z1o,Q1o,Su,Yne,W1o,H1o,YI,U1o,J1o,Y1o,Ru,Kne,K1o,Z1o,KI,ebo,obo,rbo,Bu,Zne,tbo,abo,ZI,nbo,sbo,lbo,Pu,ese,ibo,dbo,eq,cbo,fbo,mbo,Iu,ose,gbo,hbo,oq,pbo,ubo,_bo,qu,rse,bbo,vbo,rq,Fbo,Tbo,Mbo,Nu,tse,Ebo,Cbo,tq,wbo,Abo,ybo,ju,ase,Lbo,xbo,aq,$bo,kbo,Sbo,Du,nse,Rbo,Bbo,nq,Pbo,Ibo,qbo,Gu,sse,Nbo,jbo,sq,Dbo,Gbo,Obo,Ou,lse,Vbo,Xbo,lq,zbo,Qbo,Wbo,Vu,ise,Hbo,Ubo,iq,Jbo,Ybo,Kbo,Xu,dse,Zbo,e2o,dq,o2o,r2o,t2o,zu,cse,a2o,n2o,cq,s2o,l2o,i2o,Qu,fse,d2o,c2o,fq,f2o,m2o,g2o,Wu,mse,h2o,p2o,mq,u2o,_2o,b2o,Hu,gse,v2o,F2o,gq,T2o,M2o,E2o,Uu,hse,C2o,w2o,hq,A2o,y2o,L2o,Ju,pse,x2o,$2o,pq,k2o,S2o,R2o,Yu,use,B2o,P2o,uq,I2o,q2o,N2o,Ku,_se,j2o,D2o,_q,G2o,O2o,V2o,Zu,bse,X2o,z2o,bq,Q2o,W2o,H2o,e_,vse,U2o,J2o,vq,Y2o,K2o,Z2o,o_,Fse,e5o,o5o,Fq,r5o,t5o,a5o,r_,Tse,n5o,s5o,Tq,l5o,i5o,d5o,t_,Mse,c5o,f5o,Mq,m5o,g5o,h5o,a_,Ese,p5o,u5o,Eq,_5o,b5o,v5o,n_,Cse,F5o,T5o,Cq,M5o,E5o,C5o,s_,wse,w5o,A5o,wq,y5o,L5o,x5o,l_,$5o,Ase,k5o,S5o,yse,R5o,B5o,i_,sBe,Ti,d_,Lse,ZA,P5o,xse,I5o,lBe,Lo,e0,q5o,Mi,N5o,Aq,j5o,D5o,yq,G5o,O5o,V5o,o0,X5o,$se,z5o,Q5o,W5o,et,r0,H5o,kse,U5o,J5o,Ei,Y5o,Sse,K5o,Z5o,Lq,evo,ovo,rvo,c_,tvo,He,t0,avo,Rse,nvo,svo,Ca,lvo,Bse,ivo,dvo,Pse,cvo,fvo,Ise,mvo,gvo,hvo,z,f_,qse,pvo,uvo,xq,_vo,bvo,vvo,m_,Nse,Fvo,Tvo,$q,Mvo,Evo,Cvo,g_,jse,wvo,Avo,kq,yvo,Lvo,xvo,h_,Dse,$vo,kvo,Sq,Svo,Rvo,Bvo,p_,Gse,Pvo,Ivo,Rq,qvo,Nvo,jvo,u_,Ose,Dvo,Gvo,Bq,Ovo,Vvo,Xvo,__,Vse,zvo,Qvo,Pq,Wvo,Hvo,Uvo,b_,Xse,Jvo,Yvo,Iq,Kvo,Zvo,eFo,v_,zse,oFo,rFo,qq,tFo,aFo,nFo,F_,Qse,sFo,lFo,Nq,iFo,dFo,cFo,T_,Wse,fFo,mFo,jq,gFo,hFo,pFo,M_,Hse,uFo,_Fo,Dq,bFo,vFo,FFo,E_,Use,TFo,MFo,Gq,EFo,CFo,wFo,C_,Jse,AFo,yFo,Oq,LFo,xFo,$Fo,w_,Yse,kFo,SFo,Vq,RFo,BFo,PFo,A_,Kse,IFo,qFo,Xq,NFo,jFo,DFo,y_,Zse,GFo,OFo,zq,VFo,XFo,zFo,L_,ele,QFo,WFo,Qq,HFo,UFo,JFo,x_,ole,YFo,KFo,Wq,ZFo,eTo,oTo,$_,rle,rTo,tTo,Hq,aTo,nTo,sTo,k_,tle,lTo,iTo,Uq,dTo,cTo,fTo,S_,ale,mTo,gTo,Jq,hTo,pTo,uTo,R_,nle,_To,bTo,Yq,vTo,FTo,TTo,B_,sle,MTo,ETo,Kq,CTo,wTo,ATo,P_,lle,yTo,LTo,Zq,xTo,$To,kTo,I_,ile,STo,RTo,eN,BTo,PTo,ITo,q_,dle,qTo,NTo,oN,jTo,DTo,GTo,N_,cle,OTo,VTo,rN,XTo,zTo,QTo,j_,fle,WTo,HTo,tN,UTo,JTo,YTo,D_,mle,KTo,ZTo,aN,e9o,o9o,r9o,G_,gle,t9o,a9o,nN,n9o,s9o,l9o,O_,hle,i9o,d9o,sN,c9o,f9o,m9o,V_,ple,g9o,h9o,lN,p9o,u9o,_9o,X_,ule,b9o,v9o,iN,F9o,T9o,M9o,z_,_le,E9o,C9o,dN,w9o,A9o,y9o,Q_,ble,L9o,x9o,cN,$9o,k9o,S9o,W_,R9o,vle,B9o,P9o,Fle,I9o,q9o,H_,iBe,Ci,U_,Tle,a0,N9o,Mle,j9o,dBe,xo,n0,D9o,wi,G9o,fN,O9o,V9o,mN,X9o,z9o,Q9o,s0,W9o,Ele,H9o,U9o,J9o,ot,l0,Y9o,Cle,K9o,Z9o,Ai,eMo,wle,oMo,rMo,gN,tMo,aMo,nMo,J_,sMo,Ue,i0,lMo,Ale,iMo,dMo,wa,cMo,yle,fMo,mMo,Lle,gMo,hMo,xle,pMo,uMo,_Mo,Q,Y_,$le,bMo,vMo,hN,FMo,TMo,MMo,K_,kle,EMo,CMo,pN,wMo,AMo,yMo,Z_,Sle,LMo,xMo,uN,$Mo,kMo,SMo,e6,Rle,RMo,BMo,_N,PMo,IMo,qMo,o6,Ble,NMo,jMo,bN,DMo,GMo,OMo,r6,Ple,VMo,XMo,vN,zMo,QMo,WMo,t6,Ile,HMo,UMo,FN,JMo,YMo,KMo,a6,qle,ZMo,e4o,TN,o4o,r4o,t4o,n6,Nle,a4o,n4o,MN,s4o,l4o,i4o,s6,jle,d4o,c4o,EN,f4o,m4o,g4o,l6,Dle,h4o,p4o,CN,u4o,_4o,b4o,i6,Gle,v4o,F4o,wN,T4o,M4o,E4o,d6,Ole,C4o,w4o,AN,A4o,y4o,L4o,c6,Vle,x4o,$4o,yN,k4o,S4o,R4o,f6,Xle,B4o,P4o,LN,I4o,q4o,N4o,m6,zle,j4o,D4o,xN,G4o,O4o,V4o,g6,Qle,X4o,z4o,$N,Q4o,W4o,H4o,h6,Wle,U4o,J4o,kN,Y4o,K4o,Z4o,p6,Hle,eEo,oEo,SN,rEo,tEo,aEo,u6,Ule,nEo,sEo,RN,lEo,iEo,dEo,_6,Jle,cEo,fEo,BN,mEo,gEo,hEo,b6,Yle,pEo,uEo,PN,_Eo,bEo,vEo,v6,Kle,FEo,TEo,IN,MEo,EEo,CEo,F6,Zle,wEo,AEo,qN,yEo,LEo,xEo,T6,eie,$Eo,kEo,NN,SEo,REo,BEo,M6,oie,PEo,IEo,jN,qEo,NEo,jEo,E6,rie,DEo,GEo,DN,OEo,VEo,XEo,C6,tie,zEo,QEo,GN,WEo,HEo,UEo,w6,aie,JEo,YEo,ON,KEo,ZEo,eCo,A6,nie,oCo,rCo,VN,tCo,aCo,nCo,y6,sie,sCo,lCo,lie,iCo,dCo,cCo,L6,iie,fCo,mCo,XN,gCo,hCo,pCo,x6,die,uCo,_Co,zN,bCo,vCo,FCo,$6,cie,TCo,MCo,QN,ECo,CCo,wCo,k6,fie,ACo,yCo,WN,LCo,xCo,$Co,S6,kCo,mie,SCo,RCo,gie,BCo,PCo,R6,cBe,yi,B6,hie,d0,ICo,pie,qCo,fBe,$o,c0,NCo,Li,jCo,HN,DCo,GCo,UN,OCo,VCo,XCo,f0,zCo,uie,QCo,WCo,HCo,rt,m0,UCo,_ie,JCo,YCo,xi,KCo,bie,ZCo,e3o,JN,o3o,r3o,t3o,P6,a3o,Je,g0,n3o,vie,s3o,l3o,Aa,i3o,Fie,d3o,c3o,Tie,f3o,m3o,Mie,g3o,h3o,p3o,he,I6,Eie,u3o,_3o,YN,b3o,v3o,F3o,q6,Cie,T3o,M3o,KN,E3o,C3o,w3o,N6,wie,A3o,y3o,ZN,L3o,x3o,$3o,j6,Aie,k3o,S3o,ej,R3o,B3o,P3o,D6,yie,I3o,q3o,oj,N3o,j3o,D3o,G6,Lie,G3o,O3o,rj,V3o,X3o,z3o,O6,xie,Q3o,W3o,tj,H3o,U3o,J3o,V6,$ie,Y3o,K3o,aj,Z3o,ewo,owo,X6,kie,rwo,two,nj,awo,nwo,swo,z6,Sie,lwo,iwo,sj,dwo,cwo,fwo,Q6,Rie,mwo,gwo,lj,hwo,pwo,uwo,W6,Bie,_wo,bwo,ij,vwo,Fwo,Two,H6,Pie,Mwo,Ewo,dj,Cwo,wwo,Awo,U6,Iie,ywo,Lwo,cj,xwo,$wo,kwo,J6,qie,Swo,Rwo,fj,Bwo,Pwo,Iwo,Y6,Nie,qwo,Nwo,mj,jwo,Dwo,Gwo,K6,jie,Owo,Vwo,gj,Xwo,zwo,Qwo,Z6,Wwo,Die,Hwo,Uwo,Gie,Jwo,Ywo,e1,mBe,$i,o1,Oie,h0,Kwo,Vie,Zwo,gBe,ko,p0,eAo,ki,oAo,hj,rAo,tAo,pj,aAo,nAo,sAo,u0,lAo,Xie,iAo,dAo,cAo,tt,_0,fAo,zie,mAo,gAo,Si,hAo,Qie,pAo,uAo,uj,_Ao,bAo,vAo,r1,FAo,Ye,b0,TAo,Wie,MAo,EAo,ya,CAo,Hie,wAo,AAo,Uie,yAo,LAo,Jie,xAo,$Ao,kAo,q,t1,Yie,SAo,RAo,_j,BAo,PAo,IAo,a1,Kie,qAo,NAo,bj,jAo,DAo,GAo,n1,Zie,OAo,VAo,vj,XAo,zAo,QAo,s1,ede,WAo,HAo,Fj,UAo,JAo,YAo,l1,ode,KAo,ZAo,Tj,e0o,o0o,r0o,i1,rde,t0o,a0o,Mj,n0o,s0o,l0o,d1,tde,i0o,d0o,Ej,c0o,f0o,m0o,c1,ade,g0o,h0o,Cj,p0o,u0o,_0o,f1,nde,b0o,v0o,wj,F0o,T0o,M0o,m1,sde,E0o,C0o,Aj,w0o,A0o,y0o,g1,lde,L0o,x0o,yj,$0o,k0o,S0o,h1,ide,R0o,B0o,Lj,P0o,I0o,q0o,p1,dde,N0o,j0o,xj,D0o,G0o,O0o,u1,cde,V0o,X0o,$j,z0o,Q0o,W0o,_1,fde,H0o,U0o,kj,J0o,Y0o,K0o,b1,mde,Z0o,eyo,Sj,oyo,ryo,tyo,v1,gde,ayo,nyo,Rj,syo,lyo,iyo,F1,hde,dyo,cyo,Bj,fyo,myo,gyo,T1,pde,hyo,pyo,Pj,uyo,_yo,byo,M1,ude,vyo,Fyo,Ij,Tyo,Myo,Eyo,E1,_de,Cyo,wyo,qj,Ayo,yyo,Lyo,C1,bde,xyo,$yo,Nj,kyo,Syo,Ryo,w1,vde,Byo,Pyo,jj,Iyo,qyo,Nyo,A1,Fde,jyo,Dyo,Dj,Gyo,Oyo,Vyo,y1,Tde,Xyo,zyo,Gj,Qyo,Wyo,Hyo,L1,Mde,Uyo,Jyo,Oj,Yyo,Kyo,Zyo,x1,Ede,eLo,oLo,Vj,rLo,tLo,aLo,$1,Cde,nLo,sLo,Xj,lLo,iLo,dLo,k1,wde,cLo,fLo,zj,mLo,gLo,hLo,S1,Ade,pLo,uLo,Qj,_Lo,bLo,vLo,R1,yde,FLo,TLo,Wj,MLo,ELo,CLo,B1,Lde,wLo,ALo,Hj,yLo,LLo,xLo,P1,xde,$Lo,kLo,Uj,SLo,RLo,BLo,I1,$de,PLo,ILo,Jj,qLo,NLo,jLo,q1,kde,DLo,GLo,Yj,OLo,VLo,XLo,N1,Sde,zLo,QLo,Kj,WLo,HLo,ULo,j1,Rde,JLo,YLo,Zj,KLo,ZLo,e8o,D1,Bde,o8o,r8o,eD,t8o,a8o,n8o,G1,Pde,s8o,l8o,oD,i8o,d8o,c8o,O1,Ide,f8o,m8o,rD,g8o,h8o,p8o,V1,qde,u8o,_8o,tD,b8o,v8o,F8o,X1,Nde,T8o,M8o,aD,E8o,C8o,w8o,z1,jde,A8o,y8o,nD,L8o,x8o,$8o,Q1,Dde,k8o,S8o,sD,R8o,B8o,P8o,W1,Gde,I8o,q8o,lD,N8o,j8o,D8o,H1,Ode,G8o,O8o,iD,V8o,X8o,z8o,U1,Vde,Q8o,W8o,dD,H8o,U8o,J8o,J1,Y8o,Xde,K8o,Z8o,zde,e7o,o7o,Y1,hBe,Ri,K1,Qde,v0,r7o,Wde,t7o,pBe,So,F0,a7o,Bi,n7o,cD,s7o,l7o,fD,i7o,d7o,c7o,T0,f7o,Hde,m7o,g7o,h7o,at,M0,p7o,Ude,u7o,_7o,Pi,b7o,Jde,v7o,F7o,mD,T7o,M7o,E7o,Z1,C7o,Ke,E0,w7o,Yde,A7o,y7o,La,L7o,Kde,x7o,$7o,Zde,k7o,S7o,ece,R7o,B7o,P7o,Y,eb,oce,I7o,q7o,gD,N7o,j7o,D7o,ob,rce,G7o,O7o,hD,V7o,X7o,z7o,rb,tce,Q7o,W7o,pD,H7o,U7o,J7o,tb,ace,Y7o,K7o,uD,Z7o,exo,oxo,ab,nce,rxo,txo,_D,axo,nxo,sxo,nb,sce,lxo,ixo,bD,dxo,cxo,fxo,sb,lce,mxo,gxo,vD,hxo,pxo,uxo,lb,ice,_xo,bxo,FD,vxo,Fxo,Txo,ib,dce,Mxo,Exo,TD,Cxo,wxo,Axo,db,cce,yxo,Lxo,MD,xxo,$xo,kxo,cb,fce,Sxo,Rxo,ED,Bxo,Pxo,Ixo,fb,mce,qxo,Nxo,CD,jxo,Dxo,Gxo,mb,gce,Oxo,Vxo,wD,Xxo,zxo,Qxo,gb,hce,Wxo,Hxo,AD,Uxo,Jxo,Yxo,hb,pce,Kxo,Zxo,yD,e$o,o$o,r$o,pb,uce,t$o,a$o,LD,n$o,s$o,l$o,ub,_ce,i$o,d$o,xD,c$o,f$o,m$o,_b,bce,g$o,h$o,$D,p$o,u$o,_$o,bb,vce,b$o,v$o,kD,F$o,T$o,M$o,vb,Fce,E$o,C$o,SD,w$o,A$o,y$o,Fb,Tce,L$o,x$o,RD,$$o,k$o,S$o,Tb,Mce,R$o,B$o,BD,P$o,I$o,q$o,Mb,Ece,N$o,j$o,PD,D$o,G$o,O$o,Eb,Cce,V$o,X$o,ID,z$o,Q$o,W$o,Cb,wce,H$o,U$o,qD,J$o,Y$o,K$o,wb,Ace,Z$o,eko,ND,oko,rko,tko,Ab,yce,ako,nko,jD,sko,lko,iko,yb,Lce,dko,cko,DD,fko,mko,gko,Lb,hko,xce,pko,uko,$ce,_ko,bko,xb,uBe,Ii,$b,kce,C0,vko,Sce,Fko,_Be,Ro,w0,Tko,qi,Mko,GD,Eko,Cko,OD,wko,Ako,yko,A0,Lko,Rce,xko,$ko,kko,nt,y0,Sko,Bce,Rko,Bko,Ni,Pko,Pce,Iko,qko,VD,Nko,jko,Dko,kb,Gko,Ze,L0,Oko,Ice,Vko,Xko,xa,zko,qce,Qko,Wko,Nce,Hko,Uko,jce,Jko,Yko,Kko,Wr,Sb,Dce,Zko,eSo,XD,oSo,rSo,tSo,Rb,Gce,aSo,nSo,zD,sSo,lSo,iSo,Bb,Oce,dSo,cSo,QD,fSo,mSo,gSo,Pb,Vce,hSo,pSo,WD,uSo,_So,bSo,Ib,Xce,vSo,FSo,HD,TSo,MSo,ESo,qb,CSo,zce,wSo,ASo,Qce,ySo,LSo,Nb,bBe,ji,jb,Wce,x0,xSo,Hce,$So,vBe,Bo,$0,kSo,Di,SSo,UD,RSo,BSo,JD,PSo,ISo,qSo,k0,NSo,Uce,jSo,DSo,GSo,st,S0,OSo,Jce,VSo,XSo,Gi,zSo,Yce,QSo,WSo,YD,HSo,USo,JSo,Db,YSo,eo,R0,KSo,Kce,ZSo,eRo,$a,oRo,Zce,rRo,tRo,efe,aRo,nRo,ofe,sRo,lRo,iRo,U,Gb,rfe,dRo,cRo,KD,fRo,mRo,gRo,Ob,tfe,hRo,pRo,ZD,uRo,_Ro,bRo,Vb,afe,vRo,FRo,eG,TRo,MRo,ERo,Xb,nfe,CRo,wRo,oG,ARo,yRo,LRo,zb,sfe,xRo,$Ro,rG,kRo,SRo,RRo,Qb,lfe,BRo,PRo,tG,IRo,qRo,NRo,Wb,ife,jRo,DRo,aG,GRo,ORo,VRo,Hb,dfe,XRo,zRo,nG,QRo,WRo,HRo,Ub,cfe,URo,JRo,sG,YRo,KRo,ZRo,Jb,ffe,eBo,oBo,lG,rBo,tBo,aBo,Yb,mfe,nBo,sBo,iG,lBo,iBo,dBo,Kb,gfe,cBo,fBo,dG,mBo,gBo,hBo,Zb,hfe,pBo,uBo,cG,_Bo,bBo,vBo,e2,pfe,FBo,TBo,fG,MBo,EBo,CBo,o2,ufe,wBo,ABo,mG,yBo,LBo,xBo,r2,_fe,$Bo,kBo,gG,SBo,RBo,BBo,t2,bfe,PBo,IBo,hG,qBo,NBo,jBo,a2,vfe,DBo,GBo,pG,OBo,VBo,XBo,n2,Ffe,zBo,QBo,uG,WBo,HBo,UBo,s2,Tfe,JBo,YBo,_G,KBo,ZBo,ePo,l2,Mfe,oPo,rPo,bG,tPo,aPo,nPo,i2,Efe,sPo,lPo,vG,iPo,dPo,cPo,d2,Cfe,fPo,mPo,FG,gPo,hPo,pPo,c2,wfe,uPo,_Po,TG,bPo,vPo,FPo,f2,Afe,TPo,MPo,MG,EPo,CPo,wPo,m2,yfe,APo,yPo,EG,LPo,xPo,$Po,g2,Lfe,kPo,SPo,CG,RPo,BPo,PPo,h2,xfe,IPo,qPo,wG,NPo,jPo,DPo,p2,$fe,GPo,OPo,AG,VPo,XPo,zPo,u2,kfe,QPo,WPo,yG,HPo,UPo,JPo,_2,Sfe,YPo,KPo,LG,ZPo,eIo,oIo,b2,Rfe,rIo,tIo,xG,aIo,nIo,sIo,v2,Bfe,lIo,iIo,$G,dIo,cIo,fIo,F2,mIo,Pfe,gIo,hIo,Ife,pIo,uIo,T2,FBe,Oi,M2,qfe,B0,_Io,Nfe,bIo,TBe,Po,P0,vIo,Vi,FIo,kG,TIo,MIo,SG,EIo,CIo,wIo,I0,AIo,jfe,yIo,LIo,xIo,lt,q0,$Io,Dfe,kIo,SIo,Xi,RIo,Gfe,BIo,PIo,RG,IIo,qIo,NIo,E2,jIo,oo,N0,DIo,Ofe,GIo,OIo,ka,VIo,Vfe,XIo,zIo,Xfe,QIo,WIo,zfe,HIo,UIo,JIo,O,C2,Qfe,YIo,KIo,BG,ZIo,eqo,oqo,w2,Wfe,rqo,tqo,PG,aqo,nqo,sqo,A2,Hfe,lqo,iqo,IG,dqo,cqo,fqo,y2,Ufe,mqo,gqo,qG,hqo,pqo,uqo,L2,Jfe,_qo,bqo,NG,vqo,Fqo,Tqo,x2,Yfe,Mqo,Eqo,jG,Cqo,wqo,Aqo,$2,Kfe,yqo,Lqo,DG,xqo,$qo,kqo,k2,Zfe,Sqo,Rqo,GG,Bqo,Pqo,Iqo,S2,eme,qqo,Nqo,OG,jqo,Dqo,Gqo,R2,ome,Oqo,Vqo,VG,Xqo,zqo,Qqo,B2,rme,Wqo,Hqo,XG,Uqo,Jqo,Yqo,P2,tme,Kqo,Zqo,zG,eNo,oNo,rNo,I2,ame,tNo,aNo,QG,nNo,sNo,lNo,q2,nme,iNo,dNo,WG,cNo,fNo,mNo,N2,sme,gNo,hNo,HG,pNo,uNo,_No,j2,lme,bNo,vNo,UG,FNo,TNo,MNo,D2,ime,ENo,CNo,JG,wNo,ANo,yNo,G2,dme,LNo,xNo,YG,$No,kNo,SNo,O2,cme,RNo,BNo,KG,PNo,INo,qNo,V2,fme,NNo,jNo,ZG,DNo,GNo,ONo,X2,mme,VNo,XNo,eO,zNo,QNo,WNo,z2,gme,HNo,UNo,oO,JNo,YNo,KNo,Q2,hme,ZNo,ejo,rO,ojo,rjo,tjo,W2,pme,ajo,njo,tO,sjo,ljo,ijo,H2,ume,djo,cjo,aO,fjo,mjo,gjo,U2,_me,hjo,pjo,nO,ujo,_jo,bjo,J2,bme,vjo,Fjo,sO,Tjo,Mjo,Ejo,Y2,vme,Cjo,wjo,lO,Ajo,yjo,Ljo,K2,Fme,xjo,$jo,iO,kjo,Sjo,Rjo,Z2,Tme,Bjo,Pjo,dO,Ijo,qjo,Njo,e5,Mme,jjo,Djo,cO,Gjo,Ojo,Vjo,o5,Eme,Xjo,zjo,fO,Qjo,Wjo,Hjo,r5,Cme,Ujo,Jjo,mO,Yjo,Kjo,Zjo,t5,wme,eDo,oDo,gO,rDo,tDo,aDo,a5,Ame,nDo,sDo,hO,lDo,iDo,dDo,n5,yme,cDo,fDo,pO,mDo,gDo,hDo,s5,Lme,pDo,uDo,uO,_Do,bDo,vDo,l5,xme,FDo,TDo,_O,MDo,EDo,CDo,i5,$me,wDo,ADo,bO,yDo,LDo,xDo,d5,$Do,kme,kDo,SDo,Sme,RDo,BDo,c5,MBe,zi,f5,Rme,j0,PDo,Bme,IDo,EBe,Io,D0,qDo,Qi,NDo,vO,jDo,DDo,FO,GDo,ODo,VDo,G0,XDo,Pme,zDo,QDo,WDo,it,O0,HDo,Ime,UDo,JDo,Wi,YDo,qme,KDo,ZDo,TO,eGo,oGo,rGo,m5,tGo,ro,V0,aGo,Nme,nGo,sGo,Sa,lGo,jme,iGo,dGo,Dme,cGo,fGo,Gme,mGo,gGo,hGo,Ome,g5,Vme,pGo,uGo,MO,_Go,bGo,vGo,h5,FGo,Xme,TGo,MGo,zme,EGo,CGo,p5,CBe,Hi,u5,Qme,X0,wGo,Wme,AGo,wBe,qo,z0,yGo,Ui,LGo,EO,xGo,$Go,CO,kGo,SGo,RGo,Q0,BGo,Hme,PGo,IGo,qGo,dt,W0,NGo,Ume,jGo,DGo,Ji,GGo,Jme,OGo,VGo,wO,XGo,zGo,QGo,_5,WGo,to,H0,HGo,Yme,UGo,JGo,Ra,YGo,Kme,KGo,ZGo,Zme,eOo,oOo,ege,rOo,tOo,aOo,ve,b5,oge,nOo,sOo,AO,lOo,iOo,dOo,v5,rge,cOo,fOo,yO,mOo,gOo,hOo,F5,tge,pOo,uOo,LO,_Oo,bOo,vOo,Ls,age,FOo,TOo,xO,MOo,EOo,$O,COo,wOo,AOo,T5,nge,yOo,LOo,kO,xOo,$Oo,kOo,ct,sge,SOo,ROo,SO,BOo,POo,RO,IOo,qOo,BO,NOo,jOo,DOo,M5,lge,GOo,OOo,PO,VOo,XOo,zOo,E5,ige,QOo,WOo,IO,HOo,UOo,JOo,C5,dge,YOo,KOo,qO,ZOo,eVo,oVo,w5,cge,rVo,tVo,NO,aVo,nVo,sVo,A5,fge,lVo,iVo,jO,dVo,cVo,fVo,y5,mge,mVo,gVo,DO,hVo,pVo,uVo,L5,gge,_Vo,bVo,GO,vVo,FVo,TVo,x5,MVo,hge,EVo,CVo,pge,wVo,AVo,$5,ABe,Yi,k5,uge,U0,yVo,_ge,LVo,yBe,No,J0,xVo,Ki,$Vo,OO,kVo,SVo,VO,RVo,BVo,PVo,Y0,IVo,bge,qVo,NVo,jVo,ft,K0,DVo,vge,GVo,OVo,Zi,VVo,Fge,XVo,zVo,XO,QVo,WVo,HVo,S5,UVo,ao,Z0,JVo,Tge,YVo,KVo,Ba,ZVo,Mge,eXo,oXo,Ege,rXo,tXo,Cge,aXo,nXo,sXo,wge,R5,Age,lXo,iXo,zO,dXo,cXo,fXo,B5,mXo,yge,gXo,hXo,Lge,pXo,uXo,P5,LBe,ed,I5,xge,ey,_Xo,$ge,bXo,xBe,jo,oy,vXo,od,FXo,QO,TXo,MXo,WO,EXo,CXo,wXo,ry,AXo,kge,yXo,LXo,xXo,mt,ty,$Xo,Sge,kXo,SXo,rd,RXo,Rge,BXo,PXo,HO,IXo,qXo,NXo,q5,jXo,no,ay,DXo,Bge,GXo,OXo,Pa,VXo,Pge,XXo,zXo,Ige,QXo,WXo,qge,HXo,UXo,JXo,qe,N5,Nge,YXo,KXo,UO,ZXo,ezo,ozo,j5,jge,rzo,tzo,JO,azo,nzo,szo,D5,Dge,lzo,izo,YO,dzo,czo,fzo,G5,Gge,mzo,gzo,KO,hzo,pzo,uzo,O5,Oge,_zo,bzo,ZO,vzo,Fzo,Tzo,V5,Vge,Mzo,Ezo,eV,Czo,wzo,Azo,X5,Xge,yzo,Lzo,oV,xzo,$zo,kzo,z5,zge,Szo,Rzo,rV,Bzo,Pzo,Izo,Q5,qzo,Qge,Nzo,jzo,Wge,Dzo,Gzo,W5,$Be,td,H5,Hge,ny,Ozo,Uge,Vzo,kBe,Do,sy,Xzo,ad,zzo,tV,Qzo,Wzo,aV,Hzo,Uzo,Jzo,ly,Yzo,Jge,Kzo,Zzo,eQo,gt,iy,oQo,Yge,rQo,tQo,nd,aQo,Kge,nQo,sQo,nV,lQo,iQo,dQo,U5,cQo,so,dy,fQo,Zge,mQo,gQo,Ia,hQo,ehe,pQo,uQo,ohe,_Qo,bQo,rhe,vQo,FQo,TQo,qa,J5,the,MQo,EQo,sV,CQo,wQo,AQo,Y5,ahe,yQo,LQo,lV,xQo,$Qo,kQo,K5,nhe,SQo,RQo,iV,BQo,PQo,IQo,Z5,she,qQo,NQo,dV,jQo,DQo,GQo,ev,OQo,lhe,VQo,XQo,ihe,zQo,QQo,ov,SBe,sd,rv,dhe,cy,WQo,che,HQo,RBe,Go,fy,UQo,ld,JQo,cV,YQo,KQo,fV,ZQo,eWo,oWo,my,rWo,fhe,tWo,aWo,nWo,ht,gy,sWo,mhe,lWo,iWo,id,dWo,ghe,cWo,fWo,mV,mWo,gWo,hWo,tv,pWo,lo,hy,uWo,hhe,_Wo,bWo,Na,vWo,phe,FWo,TWo,uhe,MWo,EWo,_he,CWo,wWo,AWo,Ne,av,bhe,yWo,LWo,gV,xWo,$Wo,kWo,nv,vhe,SWo,RWo,hV,BWo,PWo,IWo,sv,Fhe,qWo,NWo,pV,jWo,DWo,GWo,lv,The,OWo,VWo,uV,XWo,zWo,QWo,iv,Mhe,WWo,HWo,_V,UWo,JWo,YWo,dv,Ehe,KWo,ZWo,bV,eHo,oHo,rHo,cv,Che,tHo,aHo,vV,nHo,sHo,lHo,fv,whe,iHo,dHo,FV,cHo,fHo,mHo,mv,gHo,Ahe,hHo,pHo,yhe,uHo,_Ho,gv,BBe,dd,hv,Lhe,py,bHo,xhe,vHo,PBe,Oo,uy,FHo,cd,THo,TV,MHo,EHo,MV,CHo,wHo,AHo,_y,yHo,$he,LHo,xHo,$Ho,pt,by,kHo,khe,SHo,RHo,fd,BHo,She,PHo,IHo,EV,qHo,NHo,jHo,pv,DHo,io,vy,GHo,Rhe,OHo,VHo,ja,XHo,Bhe,zHo,QHo,Phe,WHo,HHo,Ihe,UHo,JHo,YHo,Fy,uv,qhe,KHo,ZHo,CV,eUo,oUo,rUo,_v,Nhe,tUo,aUo,wV,nUo,sUo,lUo,bv,iUo,jhe,dUo,cUo,Dhe,fUo,mUo,vv,IBe,md,Fv,Ghe,Ty,gUo,Ohe,hUo,qBe,Vo,My,pUo,gd,uUo,AV,_Uo,bUo,yV,vUo,FUo,TUo,Ey,MUo,Vhe,EUo,CUo,wUo,ut,Cy,AUo,Xhe,yUo,LUo,hd,xUo,zhe,$Uo,kUo,LV,SUo,RUo,BUo,Tv,PUo,co,wy,IUo,Qhe,qUo,NUo,Da,jUo,Whe,DUo,GUo,Hhe,OUo,VUo,Uhe,XUo,zUo,QUo,Ga,Mv,Jhe,WUo,HUo,xV,UUo,JUo,YUo,Ev,Yhe,KUo,ZUo,$V,eJo,oJo,rJo,Cv,Khe,tJo,aJo,kV,nJo,sJo,lJo,wv,Zhe,iJo,dJo,SV,cJo,fJo,mJo,Av,gJo,epe,hJo,pJo,ope,uJo,_Jo,yv,NBe,pd,Lv,rpe,Ay,bJo,tpe,vJo,jBe,Xo,yy,FJo,ud,TJo,RV,MJo,EJo,BV,CJo,wJo,AJo,Ly,yJo,ape,LJo,xJo,$Jo,_t,xy,kJo,npe,SJo,RJo,_d,BJo,spe,PJo,IJo,PV,qJo,NJo,jJo,xv,DJo,fo,$y,GJo,lpe,OJo,VJo,Oa,XJo,ipe,zJo,QJo,dpe,WJo,HJo,cpe,UJo,JJo,YJo,bd,$v,fpe,KJo,ZJo,IV,eYo,oYo,rYo,kv,mpe,tYo,aYo,qV,nYo,sYo,lYo,Sv,gpe,iYo,dYo,NV,cYo,fYo,mYo,Rv,gYo,hpe,hYo,pYo,ppe,uYo,_Yo,Bv,DBe,vd,Pv,upe,ky,bYo,_pe,vYo,GBe,zo,Sy,FYo,Fd,TYo,jV,MYo,EYo,DV,CYo,wYo,AYo,Ry,yYo,bpe,LYo,xYo,$Yo,bt,By,kYo,vpe,SYo,RYo,Td,BYo,Fpe,PYo,IYo,GV,qYo,NYo,jYo,Iv,DYo,mo,Py,GYo,Tpe,OYo,VYo,Va,XYo,Mpe,zYo,QYo,Epe,WYo,HYo,Cpe,UYo,JYo,YYo,wpe,qv,Ape,KYo,ZYo,OV,eKo,oKo,rKo,Nv,tKo,ype,aKo,nKo,Lpe,sKo,lKo,jv,OBe,Md,Dv,xpe,Iy,iKo,$pe,dKo,VBe,Qo,qy,cKo,Ed,fKo,VV,mKo,gKo,XV,hKo,pKo,uKo,Ny,_Ko,kpe,bKo,vKo,FKo,vt,jy,TKo,Spe,MKo,EKo,Cd,CKo,Rpe,wKo,AKo,zV,yKo,LKo,xKo,Gv,$Ko,go,Dy,kKo,Bpe,SKo,RKo,Xa,BKo,Ppe,PKo,IKo,Ipe,qKo,NKo,qpe,jKo,DKo,GKo,Npe,Ov,jpe,OKo,VKo,QV,XKo,zKo,QKo,Vv,WKo,Dpe,HKo,UKo,Gpe,JKo,YKo,Xv,XBe,wd,zv,Ope,Gy,KKo,Vpe,ZKo,zBe,Wo,Oy,eZo,Ad,oZo,WV,rZo,tZo,HV,aZo,nZo,sZo,Vy,lZo,Xpe,iZo,dZo,cZo,Ft,Xy,fZo,zpe,mZo,gZo,yd,hZo,Qpe,pZo,uZo,UV,_Zo,bZo,vZo,Qv,FZo,ho,zy,TZo,Wpe,MZo,EZo,za,CZo,Hpe,wZo,AZo,Upe,yZo,LZo,Jpe,xZo,$Zo,kZo,Qa,Wv,Ype,SZo,RZo,JV,BZo,PZo,IZo,Hv,Kpe,qZo,NZo,YV,jZo,DZo,GZo,Uv,Zpe,OZo,VZo,KV,XZo,zZo,QZo,Jv,eue,WZo,HZo,ZV,UZo,JZo,YZo,Yv,KZo,oue,ZZo,eer,rue,oer,rer,Kv,QBe,Ld,Zv,tue,Qy,ter,aue,aer,WBe,Ho,Wy,ner,xd,ser,eX,ler,ier,oX,der,cer,fer,Hy,mer,nue,ger,her,per,Tt,Uy,uer,sue,_er,ber,$d,ver,lue,Fer,Ter,rX,Mer,Eer,Cer,eF,wer,po,Jy,Aer,iue,yer,Ler,Wa,xer,due,$er,ker,cue,Ser,Rer,fue,Ber,Per,Ier,mue,oF,gue,qer,Ner,tX,jer,Der,Ger,rF,Oer,hue,Ver,Xer,pue,zer,Qer,tF,HBe,kd,aF,uue,Yy,Wer,_ue,Her,UBe,Uo,Ky,Uer,Sd,Jer,aX,Yer,Ker,nX,Zer,eor,oor,Zy,ror,bue,tor,aor,nor,Mt,eL,sor,vue,lor,ior,Rd,dor,Fue,cor,mor,sX,gor,hor,por,nF,uor,Mr,oL,_or,Tue,bor,vor,Ha,For,Mue,Tor,Mor,Eue,Eor,Cor,Cue,wor,Aor,yor,j,sF,wue,Lor,xor,lX,$or,kor,Sor,lF,Aue,Ror,Bor,iX,Por,Ior,qor,iF,yue,Nor,jor,dX,Dor,Gor,Oor,dF,Lue,Vor,Xor,cX,zor,Qor,Wor,cF,xue,Hor,Uor,fX,Jor,Yor,Kor,fF,$ue,Zor,err,mX,orr,rrr,trr,mF,kue,arr,nrr,gX,srr,lrr,irr,gF,Sue,drr,crr,hX,frr,mrr,grr,hF,Rue,hrr,prr,pX,urr,_rr,brr,pF,Bue,vrr,Frr,uX,Trr,Mrr,Err,uF,Pue,Crr,wrr,_X,Arr,yrr,Lrr,_F,Iue,xrr,$rr,bX,krr,Srr,Rrr,bF,que,Brr,Prr,vX,Irr,qrr,Nrr,vF,Nue,jrr,Drr,FX,Grr,Orr,Vrr,FF,jue,Xrr,zrr,TX,Qrr,Wrr,Hrr,TF,Due,Urr,Jrr,MX,Yrr,Krr,Zrr,xs,Gue,etr,otr,EX,rtr,ttr,CX,atr,ntr,str,MF,Oue,ltr,itr,wX,dtr,ctr,ftr,EF,Vue,mtr,gtr,AX,htr,ptr,utr,CF,Xue,_tr,btr,yX,vtr,Ftr,Ttr,wF,zue,Mtr,Etr,LX,Ctr,wtr,Atr,AF,Que,ytr,Ltr,xX,xtr,$tr,ktr,yF,Wue,Str,Rtr,$X,Btr,Ptr,Itr,LF,Hue,qtr,Ntr,kX,jtr,Dtr,Gtr,xF,Uue,Otr,Vtr,SX,Xtr,ztr,Qtr,$F,Jue,Wtr,Htr,RX,Utr,Jtr,Ytr,kF,Yue,Ktr,Ztr,BX,ear,oar,rar,SF,Kue,tar,aar,PX,nar,sar,lar,RF,Zue,iar,dar,IX,car,far,mar,BF,e_e,gar,har,qX,par,uar,_ar,PF,o_e,bar,Far,NX,Tar,Mar,Ear,IF,r_e,Car,war,jX,Aar,yar,Lar,qF,t_e,xar,$ar,DX,kar,Sar,Rar,NF,a_e,Bar,Par,GX,Iar,qar,Nar,jF,n_e,jar,Dar,OX,Gar,Oar,Var,DF,s_e,Xar,zar,VX,Qar,War,Har,GF,l_e,Uar,Jar,XX,Yar,Kar,Zar,OF,i_e,enr,onr,zX,rnr,tnr,anr,VF,d_e,nnr,snr,QX,lnr,inr,dnr,XF,c_e,cnr,fnr,WX,mnr,gnr,hnr,zF,f_e,pnr,unr,HX,_nr,bnr,vnr,QF,m_e,Fnr,Tnr,UX,Mnr,Enr,Cnr,WF,g_e,wnr,Anr,JX,ynr,Lnr,xnr,HF,h_e,$nr,knr,YX,Snr,Rnr,Bnr,UF,JBe,Bd,JF,p_e,rL,Pnr,u_e,Inr,YBe,Jo,tL,qnr,Pd,Nnr,KX,jnr,Dnr,ZX,Gnr,Onr,Vnr,aL,Xnr,__e,znr,Qnr,Wnr,Et,nL,Hnr,b_e,Unr,Jnr,Id,Ynr,v_e,Knr,Znr,ez,esr,osr,rsr,YF,tsr,Er,sL,asr,F_e,nsr,ssr,Ua,lsr,T_e,isr,dsr,M_e,csr,fsr,E_e,msr,gsr,hsr,ne,KF,C_e,psr,usr,oz,_sr,bsr,vsr,ZF,w_e,Fsr,Tsr,rz,Msr,Esr,Csr,eT,A_e,wsr,Asr,tz,ysr,Lsr,xsr,oT,y_e,$sr,ksr,az,Ssr,Rsr,Bsr,rT,L_e,Psr,Isr,nz,qsr,Nsr,jsr,tT,x_e,Dsr,Gsr,sz,Osr,Vsr,Xsr,aT,$_e,zsr,Qsr,lz,Wsr,Hsr,Usr,nT,k_e,Jsr,Ysr,iz,Ksr,Zsr,elr,sT,S_e,olr,rlr,dz,tlr,alr,nlr,lT,R_e,slr,llr,cz,ilr,dlr,clr,iT,B_e,flr,mlr,fz,glr,hlr,plr,dT,P_e,ulr,_lr,mz,blr,vlr,Flr,cT,I_e,Tlr,Mlr,gz,Elr,Clr,wlr,fT,q_e,Alr,ylr,hz,Llr,xlr,$lr,mT,N_e,klr,Slr,pz,Rlr,Blr,Plr,gT,j_e,Ilr,qlr,uz,Nlr,jlr,Dlr,hT,D_e,Glr,Olr,_z,Vlr,Xlr,zlr,pT,G_e,Qlr,Wlr,bz,Hlr,Ulr,Jlr,uT,O_e,Ylr,Klr,vz,Zlr,eir,oir,_T,V_e,rir,tir,Fz,air,nir,sir,bT,X_e,lir,iir,Tz,dir,cir,fir,vT,z_e,mir,gir,Mz,hir,pir,uir,FT,Q_e,_ir,bir,Ez,vir,Fir,Tir,TT,KBe,qd,MT,W_e,lL,Mir,H_e,Eir,ZBe,Yo,iL,Cir,Nd,wir,Cz,Air,yir,wz,Lir,xir,$ir,dL,kir,U_e,Sir,Rir,Bir,Ct,cL,Pir,J_e,Iir,qir,jd,Nir,Y_e,jir,Dir,Az,Gir,Oir,Vir,ET,Xir,Cr,fL,zir,K_e,Qir,Wir,Ja,Hir,Z_e,Uir,Jir,e6e,Yir,Kir,o6e,Zir,edr,odr,Te,CT,r6e,rdr,tdr,yz,adr,ndr,sdr,wT,t6e,ldr,idr,Lz,ddr,cdr,fdr,AT,a6e,mdr,gdr,xz,hdr,pdr,udr,yT,n6e,_dr,bdr,$z,vdr,Fdr,Tdr,LT,s6e,Mdr,Edr,kz,Cdr,wdr,Adr,xT,l6e,ydr,Ldr,Sz,xdr,$dr,kdr,$T,i6e,Sdr,Rdr,Rz,Bdr,Pdr,Idr,kT,d6e,qdr,Ndr,Bz,jdr,Ddr,Gdr,ST,c6e,Odr,Vdr,Pz,Xdr,zdr,Qdr,RT,f6e,Wdr,Hdr,Iz,Udr,Jdr,Ydr,BT,m6e,Kdr,Zdr,qz,ecr,ocr,rcr,PT,g6e,tcr,acr,Nz,ncr,scr,lcr,IT,ePe,Dd,qT,h6e,mL,icr,p6e,dcr,oPe,Ko,gL,ccr,Gd,fcr,jz,mcr,gcr,Dz,hcr,pcr,ucr,hL,_cr,u6e,bcr,vcr,Fcr,wt,pL,Tcr,_6e,Mcr,Ecr,Od,Ccr,b6e,wcr,Acr,Gz,ycr,Lcr,xcr,NT,$cr,wr,uL,kcr,v6e,Scr,Rcr,Ya,Bcr,F6e,Pcr,Icr,T6e,qcr,Ncr,M6e,jcr,Dcr,Gcr,_L,jT,E6e,Ocr,Vcr,Oz,Xcr,zcr,Qcr,DT,C6e,Wcr,Hcr,Vz,Ucr,Jcr,Ycr,GT,rPe,Vd,OT,w6e,bL,Kcr,A6e,Zcr,tPe,Zo,vL,efr,Xd,ofr,Xz,rfr,tfr,zz,afr,nfr,sfr,FL,lfr,y6e,ifr,dfr,cfr,At,TL,ffr,L6e,mfr,gfr,zd,hfr,x6e,pfr,ufr,Qz,_fr,bfr,vfr,VT,Ffr,Ar,ML,Tfr,$6e,Mfr,Efr,Ka,Cfr,k6e,wfr,Afr,S6e,yfr,Lfr,R6e,xfr,$fr,kfr,ie,XT,B6e,Sfr,Rfr,Wz,Bfr,Pfr,Ifr,zT,P6e,qfr,Nfr,Hz,jfr,Dfr,Gfr,QT,I6e,Ofr,Vfr,Uz,Xfr,zfr,Qfr,WT,q6e,Wfr,Hfr,Jz,Ufr,Jfr,Yfr,HT,N6e,Kfr,Zfr,Yz,emr,omr,rmr,UT,j6e,tmr,amr,Kz,nmr,smr,lmr,JT,D6e,imr,dmr,Zz,cmr,fmr,mmr,YT,G6e,gmr,hmr,eQ,pmr,umr,_mr,KT,O6e,bmr,vmr,oQ,Fmr,Tmr,Mmr,ZT,V6e,Emr,Cmr,rQ,wmr,Amr,ymr,e9,X6e,Lmr,xmr,tQ,$mr,kmr,Smr,o9,z6e,Rmr,Bmr,aQ,Pmr,Imr,qmr,r9,Q6e,Nmr,jmr,nQ,Dmr,Gmr,Omr,t9,W6e,Vmr,Xmr,sQ,zmr,Qmr,Wmr,a9,H6e,Hmr,Umr,lQ,Jmr,Ymr,Kmr,n9,U6e,Zmr,egr,iQ,ogr,rgr,tgr,s9,J6e,agr,ngr,dQ,sgr,lgr,igr,l9,Y6e,dgr,cgr,cQ,fgr,mgr,ggr,i9,K6e,hgr,pgr,fQ,ugr,_gr,bgr,d9,Z6e,vgr,Fgr,mQ,Tgr,Mgr,Egr,c9,aPe,Qd,f9,e1e,EL,Cgr,o1e,wgr,nPe,er,CL,Agr,Wd,ygr,gQ,Lgr,xgr,hQ,$gr,kgr,Sgr,wL,Rgr,r1e,Bgr,Pgr,Igr,yt,AL,qgr,t1e,Ngr,jgr,Hd,Dgr,a1e,Ggr,Ogr,pQ,Vgr,Xgr,zgr,m9,Qgr,yr,yL,Wgr,n1e,Hgr,Ugr,Za,Jgr,s1e,Ygr,Kgr,l1e,Zgr,ehr,i1e,ohr,rhr,thr,ye,g9,d1e,ahr,nhr,uQ,shr,lhr,ihr,h9,c1e,dhr,chr,_Q,fhr,mhr,ghr,p9,f1e,hhr,phr,bQ,uhr,_hr,bhr,u9,m1e,vhr,Fhr,vQ,Thr,Mhr,Ehr,_9,g1e,Chr,whr,FQ,Ahr,yhr,Lhr,b9,h1e,xhr,$hr,TQ,khr,Shr,Rhr,v9,p1e,Bhr,Phr,MQ,Ihr,qhr,Nhr,F9,u1e,jhr,Dhr,EQ,Ghr,Ohr,Vhr,T9,_1e,Xhr,zhr,CQ,Qhr,Whr,Hhr,M9,b1e,Uhr,Jhr,wQ,Yhr,Khr,Zhr,E9,sPe,Ud,C9,v1e,LL,epr,F1e,opr,lPe,or,xL,rpr,Jd,tpr,AQ,apr,npr,yQ,spr,lpr,ipr,$L,dpr,T1e,cpr,fpr,mpr,Lt,kL,gpr,M1e,hpr,ppr,Yd,upr,E1e,_pr,bpr,LQ,vpr,Fpr,Tpr,w9,Mpr,Lr,SL,Epr,C1e,Cpr,wpr,en,Apr,w1e,ypr,Lpr,A1e,xpr,$pr,y1e,kpr,Spr,Rpr,Z,A9,L1e,Bpr,Ppr,xQ,Ipr,qpr,Npr,y9,x1e,jpr,Dpr,$Q,Gpr,Opr,Vpr,L9,$1e,Xpr,zpr,kQ,Qpr,Wpr,Hpr,x9,k1e,Upr,Jpr,SQ,Ypr,Kpr,Zpr,$9,S1e,eur,our,RQ,rur,tur,aur,k9,R1e,nur,sur,BQ,lur,iur,dur,S9,B1e,cur,fur,PQ,mur,gur,hur,R9,P1e,pur,uur,IQ,_ur,bur,vur,B9,I1e,Fur,Tur,qQ,Mur,Eur,Cur,P9,q1e,wur,Aur,NQ,yur,Lur,xur,I9,N1e,$ur,kur,jQ,Sur,Rur,Bur,q9,j1e,Pur,Iur,DQ,qur,Nur,jur,N9,D1e,Dur,Gur,GQ,Our,Vur,Xur,j9,G1e,zur,Qur,OQ,Wur,Hur,Uur,D9,O1e,Jur,Yur,VQ,Kur,Zur,e_r,G9,V1e,o_r,r_r,XQ,t_r,a_r,n_r,O9,X1e,s_r,l_r,zQ,i_r,d_r,c_r,V9,z1e,f_r,m_r,QQ,g_r,h_r,p_r,X9,Q1e,u_r,__r,WQ,b_r,v_r,F_r,z9,W1e,T_r,M_r,HQ,E_r,C_r,w_r,Q9,H1e,A_r,y_r,UQ,L_r,x_r,$_r,W9,U1e,k_r,S_r,JQ,R_r,B_r,P_r,H9,J1e,I_r,q_r,YQ,N_r,j_r,D_r,U9,Y1e,G_r,O_r,KQ,V_r,X_r,z_r,J9,K1e,Q_r,W_r,ZQ,H_r,U_r,J_r,Y9,Z1e,Y_r,K_r,eW,Z_r,e6r,o6r,K9,iPe,Kd,Z9,ebe,RL,r6r,obe,t6r,dPe,rr,BL,a6r,Zd,n6r,oW,s6r,l6r,rW,i6r,d6r,c6r,PL,f6r,rbe,m6r,g6r,h6r,xt,IL,p6r,tbe,u6r,_6r,ec,b6r,abe,v6r,F6r,tW,T6r,M6r,E6r,eM,C6r,xr,qL,w6r,nbe,A6r,y6r,on,L6r,sbe,x6r,$6r,lbe,k6r,S6r,ibe,R6r,B6r,P6r,pe,oM,dbe,I6r,q6r,aW,N6r,j6r,D6r,rM,cbe,G6r,O6r,nW,V6r,X6r,z6r,tM,fbe,Q6r,W6r,sW,H6r,U6r,J6r,aM,mbe,Y6r,K6r,lW,Z6r,e1r,o1r,nM,gbe,r1r,t1r,iW,a1r,n1r,s1r,sM,hbe,l1r,i1r,dW,d1r,c1r,f1r,lM,pbe,m1r,g1r,cW,h1r,p1r,u1r,iM,ube,_1r,b1r,fW,v1r,F1r,T1r,dM,_be,M1r,E1r,mW,C1r,w1r,A1r,cM,bbe,y1r,L1r,gW,x1r,$1r,k1r,fM,vbe,S1r,R1r,hW,B1r,P1r,I1r,mM,Fbe,q1r,N1r,pW,j1r,D1r,G1r,gM,Tbe,O1r,V1r,uW,X1r,z1r,Q1r,hM,Mbe,W1r,H1r,_W,U1r,J1r,Y1r,pM,Ebe,K1r,Z1r,bW,ebr,obr,rbr,uM,Cbe,tbr,abr,vW,nbr,sbr,lbr,_M,wbe,ibr,dbr,FW,cbr,fbr,mbr,bM,cPe,oc,vM,Abe,NL,gbr,ybe,hbr,fPe,tr,jL,pbr,rc,ubr,TW,_br,bbr,MW,vbr,Fbr,Tbr,DL,Mbr,Lbe,Ebr,Cbr,wbr,$t,GL,Abr,xbe,ybr,Lbr,tc,xbr,$be,$br,kbr,EW,Sbr,Rbr,Bbr,FM,Pbr,$r,OL,Ibr,kbe,qbr,Nbr,rn,jbr,Sbe,Dbr,Gbr,Rbe,Obr,Vbr,Bbe,Xbr,zbr,Qbr,Pbe,TM,Ibe,Wbr,Hbr,CW,Ubr,Jbr,Ybr,MM,mPe,ac,EM,qbe,VL,Kbr,Nbe,Zbr,gPe,ar,XL,e2r,nc,o2r,wW,r2r,t2r,AW,a2r,n2r,s2r,zL,l2r,jbe,i2r,d2r,c2r,kt,QL,f2r,Dbe,m2r,g2r,sc,h2r,Gbe,p2r,u2r,yW,_2r,b2r,v2r,CM,F2r,kr,WL,T2r,Obe,M2r,E2r,tn,C2r,Vbe,w2r,A2r,Xbe,y2r,L2r,zbe,x2r,$2r,k2r,de,wM,Qbe,S2r,R2r,LW,B2r,P2r,I2r,AM,Wbe,q2r,N2r,xW,j2r,D2r,G2r,yM,Hbe,O2r,V2r,$W,X2r,z2r,Q2r,LM,Ube,W2r,H2r,kW,U2r,J2r,Y2r,xM,Jbe,K2r,Z2r,SW,e5r,o5r,r5r,$M,Ybe,t5r,a5r,RW,n5r,s5r,l5r,kM,Kbe,i5r,d5r,BW,c5r,f5r,m5r,SM,Zbe,g5r,h5r,PW,p5r,u5r,_5r,RM,e2e,b5r,v5r,IW,F5r,T5r,M5r,BM,o2e,E5r,C5r,qW,w5r,A5r,y5r,PM,r2e,L5r,x5r,NW,$5r,k5r,S5r,IM,t2e,R5r,B5r,jW,P5r,I5r,q5r,qM,a2e,N5r,j5r,DW,D5r,G5r,O5r,NM,n2e,V5r,X5r,GW,z5r,Q5r,W5r,jM,s2e,H5r,U5r,OW,J5r,Y5r,K5r,DM,l2e,Z5r,evr,VW,ovr,rvr,tvr,GM,i2e,avr,nvr,XW,svr,lvr,ivr,OM,d2e,dvr,cvr,zW,fvr,mvr,gvr,VM,c2e,hvr,pvr,QW,uvr,_vr,bvr,XM,f2e,vvr,Fvr,WW,Tvr,Mvr,Evr,zM,hPe,lc,QM,m2e,HL,Cvr,g2e,wvr,pPe,nr,UL,Avr,ic,yvr,HW,Lvr,xvr,UW,$vr,kvr,Svr,JL,Rvr,h2e,Bvr,Pvr,Ivr,St,YL,qvr,p2e,Nvr,jvr,dc,Dvr,u2e,Gvr,Ovr,JW,Vvr,Xvr,zvr,WM,Qvr,Sr,KL,Wvr,_2e,Hvr,Uvr,an,Jvr,b2e,Yvr,Kvr,v2e,Zvr,eFr,F2e,oFr,rFr,tFr,ce,HM,T2e,aFr,nFr,YW,sFr,lFr,iFr,UM,M2e,dFr,cFr,KW,fFr,mFr,gFr,JM,E2e,hFr,pFr,ZW,uFr,_Fr,bFr,YM,C2e,vFr,FFr,eH,TFr,MFr,EFr,KM,w2e,CFr,wFr,oH,AFr,yFr,LFr,ZM,A2e,xFr,$Fr,rH,kFr,SFr,RFr,e4,y2e,BFr,PFr,tH,IFr,qFr,NFr,o4,L2e,jFr,DFr,aH,GFr,OFr,VFr,r4,x2e,XFr,zFr,nH,QFr,WFr,HFr,t4,$2e,UFr,JFr,sH,YFr,KFr,ZFr,a4,k2e,eTr,oTr,lH,rTr,tTr,aTr,n4,S2e,nTr,sTr,iH,lTr,iTr,dTr,s4,R2e,cTr,fTr,dH,mTr,gTr,hTr,l4,B2e,pTr,uTr,cH,_Tr,bTr,vTr,i4,P2e,FTr,TTr,fH,MTr,ETr,CTr,d4,I2e,wTr,ATr,mH,yTr,LTr,xTr,c4,q2e,$Tr,kTr,gH,STr,RTr,BTr,f4,N2e,PTr,ITr,hH,qTr,NTr,jTr,m4,j2e,DTr,GTr,pH,OTr,VTr,XTr,g4,D2e,zTr,QTr,uH,WTr,HTr,UTr,h4,uPe,cc,p4,G2e,ZL,JTr,O2e,YTr,_Pe,sr,e8,KTr,fc,ZTr,_H,e9r,o9r,bH,r9r,t9r,a9r,o8,n9r,V2e,s9r,l9r,i9r,Rt,r8,d9r,X2e,c9r,f9r,mc,m9r,z2e,g9r,h9r,vH,p9r,u9r,_9r,u4,b9r,Rr,t8,v9r,Q2e,F9r,T9r,nn,M9r,W2e,E9r,C9r,H2e,w9r,A9r,U2e,y9r,L9r,x9r,J2e,_4,Y2e,$9r,k9r,FH,S9r,R9r,B9r,b4,bPe,gc,v4,K2e,a8,P9r,Z2e,I9r,vPe,lr,n8,q9r,hc,N9r,TH,j9r,D9r,MH,G9r,O9r,V9r,s8,X9r,e5e,z9r,Q9r,W9r,Bt,l8,H9r,o5e,U9r,J9r,pc,Y9r,r5e,K9r,Z9r,EH,eMr,oMr,rMr,F4,tMr,Br,i8,aMr,t5e,nMr,sMr,sn,lMr,a5e,iMr,dMr,n5e,cMr,fMr,s5e,mMr,gMr,hMr,l5e,T4,i5e,pMr,uMr,CH,_Mr,bMr,vMr,M4,FPe,uc,E4,d5e,d8,FMr,c5e,TMr,TPe,ir,c8,MMr,_c,EMr,wH,CMr,wMr,AH,AMr,yMr,LMr,f8,xMr,f5e,$Mr,kMr,SMr,Pt,m8,RMr,m5e,BMr,PMr,bc,IMr,g5e,qMr,NMr,yH,jMr,DMr,GMr,C4,OMr,Pr,g8,VMr,h5e,XMr,zMr,ln,QMr,p5e,WMr,HMr,u5e,UMr,JMr,_5e,YMr,KMr,ZMr,oe,w4,b5e,e4r,o4r,LH,r4r,t4r,a4r,A4,v5e,n4r,s4r,xH,l4r,i4r,d4r,y4,F5e,c4r,f4r,$H,m4r,g4r,h4r,L4,T5e,p4r,u4r,kH,_4r,b4r,v4r,x4,M5e,F4r,T4r,SH,M4r,E4r,C4r,$4,E5e,w4r,A4r,RH,y4r,L4r,x4r,k4,C5e,$4r,k4r,BH,S4r,R4r,B4r,S4,w5e,P4r,I4r,PH,q4r,N4r,j4r,R4,A5e,D4r,G4r,IH,O4r,V4r,X4r,B4,y5e,z4r,Q4r,qH,W4r,H4r,U4r,P4,L5e,J4r,Y4r,NH,K4r,Z4r,eEr,I4,x5e,oEr,rEr,jH,tEr,aEr,nEr,q4,$5e,sEr,lEr,DH,iEr,dEr,cEr,N4,k5e,fEr,mEr,GH,gEr,hEr,pEr,j4,S5e,uEr,_Er,OH,bEr,vEr,FEr,D4,R5e,TEr,MEr,VH,EEr,CEr,wEr,G4,B5e,AEr,yEr,XH,LEr,xEr,$Er,O4,P5e,kEr,SEr,zH,REr,BEr,PEr,V4,I5e,IEr,qEr,QH,NEr,jEr,DEr,X4,q5e,GEr,OEr,WH,VEr,XEr,zEr,z4,N5e,QEr,WEr,HH,HEr,UEr,JEr,Q4,j5e,YEr,KEr,UH,ZEr,eCr,oCr,W4,D5e,rCr,tCr,JH,aCr,nCr,sCr,H4,G5e,lCr,iCr,YH,dCr,cCr,fCr,U4,O5e,mCr,gCr,KH,hCr,pCr,uCr,J4,MPe,vc,Y4,V5e,h8,_Cr,X5e,bCr,EPe,dr,p8,vCr,Fc,FCr,ZH,TCr,MCr,eU,ECr,CCr,wCr,u8,ACr,z5e,yCr,LCr,xCr,It,_8,$Cr,Q5e,kCr,SCr,Tc,RCr,W5e,BCr,PCr,oU,ICr,qCr,NCr,K4,jCr,Ir,b8,DCr,H5e,GCr,OCr,dn,VCr,U5e,XCr,zCr,J5e,QCr,WCr,Y5e,HCr,UCr,JCr,Hr,Z4,K5e,YCr,KCr,rU,ZCr,e3r,o3r,eE,Z5e,r3r,t3r,tU,a3r,n3r,s3r,oE,eve,l3r,i3r,aU,d3r,c3r,f3r,rE,ove,m3r,g3r,nU,h3r,p3r,u3r,tE,rve,_3r,b3r,sU,v3r,F3r,T3r,aE,CPe,Mc,nE,tve,v8,M3r,ave,E3r,wPe,cr,F8,C3r,Ec,w3r,lU,A3r,y3r,iU,L3r,x3r,$3r,T8,k3r,nve,S3r,R3r,B3r,qt,M8,P3r,sve,I3r,q3r,Cc,N3r,lve,j3r,D3r,dU,G3r,O3r,V3r,sE,X3r,qr,E8,z3r,ive,Q3r,W3r,cn,H3r,dve,U3r,J3r,cve,Y3r,K3r,fve,Z3r,ewr,owr,Me,lE,mve,rwr,twr,cU,awr,nwr,swr,iE,gve,lwr,iwr,fU,dwr,cwr,fwr,dE,hve,mwr,gwr,mU,hwr,pwr,uwr,cE,pve,_wr,bwr,gU,vwr,Fwr,Twr,fE,uve,Mwr,Ewr,hU,Cwr,wwr,Awr,mE,_ve,ywr,Lwr,pU,xwr,$wr,kwr,gE,bve,Swr,Rwr,uU,Bwr,Pwr,Iwr,hE,vve,qwr,Nwr,_U,jwr,Dwr,Gwr,pE,Fve,Owr,Vwr,bU,Xwr,zwr,Qwr,uE,Tve,Wwr,Hwr,vU,Uwr,Jwr,Ywr,_E,Mve,Kwr,Zwr,FU,eAr,oAr,rAr,bE,Eve,tAr,aAr,TU,nAr,sAr,lAr,vE,APe,wc,FE,Cve,C8,iAr,wve,dAr,yPe,fr,w8,cAr,Ac,fAr,MU,mAr,gAr,EU,hAr,pAr,uAr,A8,_Ar,Ave,bAr,vAr,FAr,Nt,y8,TAr,yve,MAr,EAr,yc,CAr,Lve,wAr,AAr,CU,yAr,LAr,xAr,TE,$Ar,Nr,L8,kAr,xve,SAr,RAr,fn,BAr,$ve,PAr,IAr,kve,qAr,NAr,Sve,jAr,DAr,GAr,Le,ME,Rve,OAr,VAr,wU,XAr,zAr,QAr,EE,Bve,WAr,HAr,AU,UAr,JAr,YAr,CE,Pve,KAr,ZAr,yU,e0r,o0r,r0r,wE,Ive,t0r,a0r,LU,n0r,s0r,l0r,AE,qve,i0r,d0r,xU,c0r,f0r,m0r,yE,Nve,g0r,h0r,$U,p0r,u0r,_0r,LE,jve,b0r,v0r,kU,F0r,T0r,M0r,xE,Dve,E0r,C0r,SU,w0r,A0r,y0r,$E,Gve,L0r,x0r,RU,$0r,k0r,S0r,kE,Ove,R0r,B0r,BU,P0r,I0r,q0r,SE,LPe,Lc,RE,Vve,x8,N0r,Xve,j0r,xPe,mr,$8,D0r,xc,G0r,PU,O0r,V0r,IU,X0r,z0r,Q0r,k8,W0r,zve,H0r,U0r,J0r,jt,S8,Y0r,Qve,K0r,Z0r,$c,eyr,Wve,oyr,ryr,qU,tyr,ayr,nyr,BE,syr,jr,R8,lyr,Hve,iyr,dyr,mn,cyr,Uve,fyr,myr,Jve,gyr,hyr,Yve,pyr,uyr,_yr,ke,PE,Kve,byr,vyr,NU,Fyr,Tyr,Myr,IE,Zve,Eyr,Cyr,jU,wyr,Ayr,yyr,qE,eFe,Lyr,xyr,DU,$yr,kyr,Syr,NE,oFe,Ryr,Byr,GU,Pyr,Iyr,qyr,jE,rFe,Nyr,jyr,OU,Dyr,Gyr,Oyr,DE,tFe,Vyr,Xyr,VU,zyr,Qyr,Wyr,GE,aFe,Hyr,Uyr,XU,Jyr,Yyr,Kyr,OE,nFe,Zyr,eLr,zU,oLr,rLr,tLr,VE,sFe,aLr,nLr,QU,sLr,lLr,iLr,XE,$Pe,kc,zE,lFe,B8,dLr,iFe,cLr,kPe,gr,P8,fLr,Sc,mLr,WU,gLr,hLr,HU,pLr,uLr,_Lr,I8,bLr,dFe,vLr,FLr,TLr,Dt,q8,MLr,cFe,ELr,CLr,Rc,wLr,fFe,ALr,yLr,UU,LLr,xLr,$Lr,QE,kLr,Dr,N8,SLr,mFe,RLr,BLr,gn,PLr,gFe,ILr,qLr,hFe,NLr,jLr,pFe,DLr,GLr,OLr,xe,WE,uFe,VLr,XLr,JU,zLr,QLr,WLr,HE,_Fe,HLr,ULr,YU,JLr,YLr,KLr,UE,bFe,ZLr,e8r,KU,o8r,r8r,t8r,JE,vFe,a8r,n8r,ZU,s8r,l8r,i8r,YE,FFe,d8r,c8r,eJ,f8r,m8r,g8r,KE,TFe,h8r,p8r,oJ,u8r,_8r,b8r,ZE,MFe,v8r,F8r,rJ,T8r,M8r,E8r,eC,EFe,C8r,w8r,tJ,A8r,y8r,L8r,oC,CFe,x8r,$8r,aJ,k8r,S8r,R8r,rC,wFe,B8r,P8r,nJ,I8r,q8r,N8r,tC,SPe,Bc,aC,AFe,j8,j8r,yFe,D8r,RPe,hr,D8,G8r,Pc,O8r,sJ,V8r,X8r,lJ,z8r,Q8r,W8r,G8,H8r,LFe,U8r,J8r,Y8r,Gt,O8,K8r,xFe,Z8r,e7r,Ic,o7r,$Fe,r7r,t7r,iJ,a7r,n7r,s7r,nC,l7r,Gr,V8,i7r,kFe,d7r,c7r,hn,f7r,SFe,m7r,g7r,RFe,h7r,p7r,BFe,u7r,_7r,b7r,$e,sC,PFe,v7r,F7r,dJ,T7r,M7r,E7r,lC,IFe,C7r,w7r,cJ,A7r,y7r,L7r,iC,qFe,x7r,$7r,fJ,k7r,S7r,R7r,dC,NFe,B7r,P7r,mJ,I7r,q7r,N7r,cC,jFe,j7r,D7r,gJ,G7r,O7r,V7r,fC,DFe,X7r,z7r,hJ,Q7r,W7r,H7r,mC,GFe,U7r,J7r,pJ,Y7r,K7r,Z7r,gC,OFe,exr,oxr,uJ,rxr,txr,axr,hC,VFe,nxr,sxr,_J,lxr,ixr,dxr,pC,XFe,cxr,fxr,bJ,mxr,gxr,hxr,uC,BPe,qc,_C,zFe,X8,pxr,QFe,uxr,PPe,pr,z8,_xr,Nc,bxr,vJ,vxr,Fxr,FJ,Txr,Mxr,Exr,Q8,Cxr,WFe,wxr,Axr,yxr,Ot,W8,Lxr,HFe,xxr,$xr,jc,kxr,UFe,Sxr,Rxr,TJ,Bxr,Pxr,Ixr,bC,qxr,Or,H8,Nxr,JFe,jxr,Dxr,pn,Gxr,YFe,Oxr,Vxr,KFe,Xxr,zxr,ZFe,Qxr,Wxr,Hxr,je,vC,eTe,Uxr,Jxr,MJ,Yxr,Kxr,Zxr,FC,oTe,e$r,o$r,EJ,r$r,t$r,a$r,TC,rTe,n$r,s$r,CJ,l$r,i$r,d$r,MC,tTe,c$r,f$r,wJ,m$r,g$r,h$r,EC,aTe,p$r,u$r,AJ,_$r,b$r,v$r,CC,nTe,F$r,T$r,yJ,M$r,E$r,C$r,wC,sTe,w$r,A$r,LJ,y$r,L$r,x$r,AC,lTe,$$r,k$r,xJ,S$r,R$r,B$r,yC,IPe,Dc,LC,iTe,U8,P$r,dTe,I$r,qPe,ur,J8,q$r,Gc,N$r,$J,j$r,D$r,kJ,G$r,O$r,V$r,Y8,X$r,cTe,z$r,Q$r,W$r,Vt,K8,H$r,fTe,U$r,J$r,Oc,Y$r,mTe,K$r,Z$r,SJ,ekr,okr,rkr,xC,tkr,Vr,Z8,akr,gTe,nkr,skr,un,lkr,hTe,ikr,dkr,pTe,ckr,fkr,uTe,mkr,gkr,hkr,De,$C,_Te,pkr,ukr,RJ,_kr,bkr,vkr,kC,bTe,Fkr,Tkr,BJ,Mkr,Ekr,Ckr,SC,vTe,wkr,Akr,PJ,ykr,Lkr,xkr,RC,FTe,$kr,kkr,IJ,Skr,Rkr,Bkr,BC,TTe,Pkr,Ikr,qJ,qkr,Nkr,jkr,PC,MTe,Dkr,Gkr,NJ,Okr,Vkr,Xkr,IC,ETe,zkr,Qkr,jJ,Wkr,Hkr,Ukr,qC,CTe,Jkr,Ykr,DJ,Kkr,Zkr,eSr,NC,NPe,Vc,jC,wTe,e7,oSr,ATe,rSr,jPe,_r,o7,tSr,Xc,aSr,GJ,nSr,sSr,OJ,lSr,iSr,dSr,r7,cSr,yTe,fSr,mSr,gSr,Xt,t7,hSr,LTe,pSr,uSr,zc,_Sr,xTe,bSr,vSr,VJ,FSr,TSr,MSr,DC,ESr,Xr,a7,CSr,$Te,wSr,ASr,_n,ySr,kTe,LSr,xSr,STe,$Sr,kSr,RTe,SSr,RSr,BSr,BTe,GC,PTe,PSr,ISr,XJ,qSr,NSr,jSr,OC,DPe,Qc,VC,ITe,n7,DSr,qTe,GSr,GPe,br,s7,OSr,Wc,VSr,zJ,XSr,zSr,QJ,QSr,WSr,HSr,l7,USr,NTe,JSr,YSr,KSr,zt,i7,ZSr,jTe,eRr,oRr,Hc,rRr,DTe,tRr,aRr,WJ,nRr,sRr,lRr,XC,iRr,zr,d7,dRr,GTe,cRr,fRr,bn,mRr,OTe,gRr,hRr,VTe,pRr,uRr,XTe,_Rr,bRr,vRr,c7,zC,zTe,FRr,TRr,HJ,MRr,ERr,CRr,QC,QTe,wRr,ARr,UJ,yRr,LRr,xRr,WC,OPe,Uc,HC,WTe,f7,$Rr,HTe,kRr,VPe,vr,m7,SRr,Jc,RRr,JJ,BRr,PRr,YJ,IRr,qRr,NRr,g7,jRr,UTe,DRr,GRr,ORr,Qt,h7,VRr,JTe,XRr,zRr,Yc,QRr,YTe,WRr,HRr,KJ,URr,JRr,YRr,UC,KRr,Qr,p7,ZRr,KTe,eBr,oBr,vn,rBr,ZTe,tBr,aBr,e9e,nBr,sBr,o9e,lBr,iBr,dBr,r9e,JC,t9e,cBr,fBr,ZJ,mBr,gBr,hBr,YC,XPe;return d=new ee({}),ba=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),_A=new ee({}),bA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sf=new pBr({props:{warning:!0,$$slots:{default:[K4t]},$$scope:{ctx:L}}}),vA=new ee({}),FA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/configuration_auto.py#L563"}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/configuration_auto.py#L586"}}),ag=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Z4t]},$$scope:{ctx:L}}}),CA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/configuration_auto.py#L708"}}),wA=new ee({}),AA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/tokenization_auto.py#L378"}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16659/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/tokenization_auto.py#L392"}}),qg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[eEt]},$$scope:{ctx:L}}}),$A=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/tokenization_auto.py#L588"}}),kA=new ee({}),SA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/feature_extraction_auto.py#L176"}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16659/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),dh=new pBr({props:{$$slots:{default:[oEt]},$$scope:{ctx:L}}}),ch=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[rEt]},$$scope:{ctx:L}}}),IA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/feature_extraction_auto.py#L317"}}),qA=new ee({}),NA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/processing_auto.py#L76"}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/processing_auto.py#L90"}}),yh=new pBr({props:{$$slots:{default:[tEt]},$$scope:{ctx:L}}}),Lh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[aEt]},$$scope:{ctx:L}}}),OA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/processing_auto.py#L243"}}),VA=new ee({}),XA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L716"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPTNeoX model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),kh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[nEt]},$$scope:{ctx:L}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),vu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[sEt]},$$scope:{ctx:L}}}),HA=new ee({}),UA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L723"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Tu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[lEt]},$$scope:{ctx:L}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),i_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[iEt]},$$scope:{ctx:L}}}),ZA=new ee({}),e0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L738"}}),r0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPTNeoX model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),c_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[dEt]},$$scope:{ctx:L}}}),t0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cEt]},$$scope:{ctx:L}}}),a0=new ee({}),n0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L745"}}),l0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[fEt]},$$scope:{ctx:L}}}),i0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),R6=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mEt]},$$scope:{ctx:L}}}),d0=new ee({}),c0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L752"}}),m0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),P6=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[gEt]},$$scope:{ctx:L}}}),g0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),e1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[hEt]},$$scope:{ctx:L}}}),h0=new ee({}),p0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L761"}}),_0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),r1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[pEt]},$$scope:{ctx:L}}}),b0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Y1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uEt]},$$scope:{ctx:L}}}),v0=new ee({}),F0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L795"}}),M0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Z1=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[_Et]},$$scope:{ctx:L}}}),E0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),xb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[bEt]},$$scope:{ctx:L}}}),C0=new ee({}),w0=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L802"}}),y0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),kb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[vEt]},$$scope:{ctx:L}}}),L0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Nb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[FEt]},$$scope:{ctx:L}}}),x0=new ee({}),$0=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L788"}}),S0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Db=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[TEt]},$$scope:{ctx:L}}}),R0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),T2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[MEt]},$$scope:{ctx:L}}}),B0=new ee({}),P0=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L770"}}),q0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),E2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[EEt]},$$scope:{ctx:L}}}),N0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[CEt]},$$scope:{ctx:L}}}),j0=new ee({}),D0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L777"}}),O0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[wEt]},$$scope:{ctx:L}}}),V0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[AEt]},$$scope:{ctx:L}}}),X0=new ee({}),z0=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L811"}}),W0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[yEt]},$$scope:{ctx:L}}}),H0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LEt]},$$scope:{ctx:L}}}),U0=new ee({}),J0=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L850"}}),K0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[xEt]},$$scope:{ctx:L}}}),Z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$Et]},$$scope:{ctx:L}}}),ey=new ee({}),oy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L857"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),q5=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kEt]},$$scope:{ctx:L}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[SEt]},$$scope:{ctx:L}}}),ny=new ee({}),sy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L880"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[REt]},$$scope:{ctx:L}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),ov=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[BEt]},$$scope:{ctx:L}}}),cy=new ee({}),fy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L864"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),tv=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[PEt]},$$scope:{ctx:L}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),gv=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[IEt]},$$scope:{ctx:L}}}),py=new ee({}),uy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L871"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),pv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qEt]},$$scope:{ctx:L}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),vv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[NEt]},$$scope:{ctx:L}}}),Ty=new ee({}),My=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L889"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Tv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jEt]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),yv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[DEt]},$$scope:{ctx:L}}}),Ay=new ee({}),yy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L896"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),xv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[GEt]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Bv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[OEt]},$$scope:{ctx:L}}}),ky=new ee({}),Sy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L843"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Iv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[VEt]},$$scope:{ctx:L}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[XEt]},$$scope:{ctx:L}}}),Iy=new ee({}),qy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L818"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zEt]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[QEt]},$$scope:{ctx:L}}}),Gy=new ee({}),Oy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L825"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[WEt]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),Kv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[HEt]},$$scope:{ctx:L}}}),Qy=new ee({}),Wy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_auto.py#L834"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),eF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[UEt]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),tF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[JEt]},$$scope:{ctx:L}}}),Yy=new ee({}),Ky=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),eL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),nF=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[YEt]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[KEt]},$$scope:{ctx:L}}}),rL=new ee({}),tL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),nL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[ZEt]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),TT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eCt]},$$scope:{ctx:L}}}),lL=new ee({}),iL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),cL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),ET=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[oCt]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rCt]},$$scope:{ctx:L}}}),mL=new ee({}),gL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),pL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[tCt]},$$scope:{ctx:L}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[aCt]},$$scope:{ctx:L}}}),bL=new ee({}),vL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),TL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[nCt]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),c9=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sCt]},$$scope:{ctx:L}}}),EL=new ee({}),CL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),AL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),m9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[lCt]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),E9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[iCt]},$$scope:{ctx:L}}}),LL=new ee({}),xL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),kL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),w9=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[dCt]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),K9=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cCt]},$$scope:{ctx:L}}}),RL=new ee({}),BL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),IL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[fCt]},$$scope:{ctx:L}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mCt]},$$scope:{ctx:L}}}),NL=new ee({}),jL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),GL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[gCt]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[hCt]},$$scope:{ctx:L}}}),VL=new ee({}),XL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),QL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[pCt]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[uCt]},$$scope:{ctx:L}}}),HL=new ee({}),UL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),YL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_Ct]},$$scope:{ctx:L}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[bCt]},$$scope:{ctx:L}}}),ZL=new ee({}),e8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),r8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[vCt]},$$scope:{ctx:L}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[FCt]},$$scope:{ctx:L}}}),a8=new ee({}),n8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),l8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[TCt]},$$scope:{ctx:L}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[MCt]},$$scope:{ctx:L}}}),d8=new ee({}),c8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),m8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[ECt]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[CCt]},$$scope:{ctx:L}}}),h8=new ee({}),p8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),_8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[wCt]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ACt]},$$scope:{ctx:L}}}),v8=new ee({}),F8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),M8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[yCt]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[LCt]},$$scope:{ctx:L}}}),C8=new ee({}),w8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),y8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[xCt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$Ct]},$$scope:{ctx:L}}}),x8=new ee({}),$8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),S8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[kCt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[SCt]},$$scope:{ctx:L}}}),B8=new ee({}),P8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),q8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[RCt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[BCt]},$$scope:{ctx:L}}}),j8=new ee({}),D8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),O8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[PCt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ICt]},$$scope:{ctx:L}}}),X8=new ee({}),z8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),W8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),bC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[qCt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[NCt]},$$scope:{ctx:L}}}),U8=new ee({}),J8=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),K8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[jCt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[DCt]},$$scope:{ctx:L}}}),e7=new ee({}),o7=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),t7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[GCt]},$$scope:{ctx:L}}}),a7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[OCt]},$$scope:{ctx:L}}}),n7=new ee({}),s7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),i7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[VCt]},$$scope:{ctx:L}}}),d7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[XCt]},$$scope:{ctx:L}}}),f7=new ee({}),m7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),h7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[zCt]},$$scope:{ctx:L}}}),p7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16659/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16659/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16659/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[QCt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Fo=a("span"),oi=o("Auto Classes"),of=l(),Yr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),gA=o("from_pretrained()"),rf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ie=l(),Oe=a("p"),ai=o("Instantiating one of "),Tn=a("a"),hA=o("AutoConfig"),Mn=o(", "),En=a("a"),pA=o("AutoModel"),ni=o(`, and
`),Cn=a("a"),uA=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),tf=l(),F(ba.$$.fragment),Ve=l(),Ae=a("p"),Lx=o("will create a model that is an instance of "),li=a("a"),xx=o("BertModel"),$x=o("."),To=l(),va=a("p"),kx=o("There is one class of "),af=a("code"),Sx=o("AutoModel"),Uqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),VRe=l(),ii=a("h2"),nf=a("a"),XK=a("span"),F(_A.$$.fragment),Jqe=l(),zK=a("span"),Yqe=o("Extending the Auto Classes"),XRe=l(),wn=a("p"),Kqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),QK=a("code"),Zqe=o("NewModel"),eNe=o(", make sure you have a "),WK=a("code"),oNe=o("NewModelConfig"),rNe=o(` then you can add those to the auto
classes like this:`),zRe=l(),F(bA.$$.fragment),QRe=l(),Rx=a("p"),tNe=o("You will then be able to use the auto classes like you would usually do!"),WRe=l(),F(sf.$$.fragment),HRe=l(),di=a("h2"),lf=a("a"),HK=a("span"),F(vA.$$.fragment),aNe=l(),UK=a("span"),nNe=o("AutoConfig"),URe=l(),Mo=a("div"),F(FA.$$.fragment),sNe=l(),TA=a("p"),lNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Bx=a("a"),iNe=o("from_pretrained()"),dNe=o(" class method."),cNe=l(),MA=a("p"),fNe=o("This class cannot be instantiated directly using "),JK=a("code"),mNe=o("__init__()"),gNe=o(" (throws an error)."),hNe=l(),Fr=a("div"),F(EA.$$.fragment),pNe=l(),YK=a("p"),uNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),_Ne=l(),ci=a("p"),bNe=o("The configuration class to instantiate is selected based on the "),KK=a("code"),vNe=o("model_type"),FNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ZK=a("code"),TNe=o("pretrained_model_name_or_path"),MNe=o(":"),ENe=l(),A=a("ul"),df=a("li"),eZ=a("strong"),CNe=o("albert"),wNe=o(" \u2014 "),Px=a("a"),ANe=o("AlbertConfig"),yNe=o(" (ALBERT model)"),LNe=l(),cf=a("li"),oZ=a("strong"),xNe=o("bart"),$Ne=o(" \u2014 "),Ix=a("a"),kNe=o("BartConfig"),SNe=o(" (BART model)"),RNe=l(),ff=a("li"),rZ=a("strong"),BNe=o("beit"),PNe=o(" \u2014 "),qx=a("a"),INe=o("BeitConfig"),qNe=o(" (BEiT model)"),NNe=l(),mf=a("li"),tZ=a("strong"),jNe=o("bert"),DNe=o(" \u2014 "),Nx=a("a"),GNe=o("BertConfig"),ONe=o(" (BERT model)"),VNe=l(),gf=a("li"),aZ=a("strong"),XNe=o("bert-generation"),zNe=o(" \u2014 "),jx=a("a"),QNe=o("BertGenerationConfig"),WNe=o(" (Bert Generation model)"),HNe=l(),hf=a("li"),nZ=a("strong"),UNe=o("big_bird"),JNe=o(" \u2014 "),Dx=a("a"),YNe=o("BigBirdConfig"),KNe=o(" (BigBird model)"),ZNe=l(),pf=a("li"),sZ=a("strong"),eje=o("bigbird_pegasus"),oje=o(" \u2014 "),Gx=a("a"),rje=o("BigBirdPegasusConfig"),tje=o(" (BigBirdPegasus model)"),aje=l(),uf=a("li"),lZ=a("strong"),nje=o("blenderbot"),sje=o(" \u2014 "),Ox=a("a"),lje=o("BlenderbotConfig"),ije=o(" (Blenderbot model)"),dje=l(),_f=a("li"),iZ=a("strong"),cje=o("blenderbot-small"),fje=o(" \u2014 "),Vx=a("a"),mje=o("BlenderbotSmallConfig"),gje=o(" (BlenderbotSmall model)"),hje=l(),bf=a("li"),dZ=a("strong"),pje=o("camembert"),uje=o(" \u2014 "),Xx=a("a"),_je=o("CamembertConfig"),bje=o(" (CamemBERT model)"),vje=l(),vf=a("li"),cZ=a("strong"),Fje=o("canine"),Tje=o(" \u2014 "),zx=a("a"),Mje=o("CanineConfig"),Eje=o(" (Canine model)"),Cje=l(),Ff=a("li"),fZ=a("strong"),wje=o("clip"),Aje=o(" \u2014 "),Qx=a("a"),yje=o("CLIPConfig"),Lje=o(" (CLIP model)"),xje=l(),Tf=a("li"),mZ=a("strong"),$je=o("convbert"),kje=o(" \u2014 "),Wx=a("a"),Sje=o("ConvBertConfig"),Rje=o(" (ConvBERT model)"),Bje=l(),Mf=a("li"),gZ=a("strong"),Pje=o("convnext"),Ije=o(" \u2014 "),Hx=a("a"),qje=o("ConvNextConfig"),Nje=o(" (ConvNext model)"),jje=l(),Ef=a("li"),hZ=a("strong"),Dje=o("ctrl"),Gje=o(" \u2014 "),Ux=a("a"),Oje=o("CTRLConfig"),Vje=o(" (CTRL model)"),Xje=l(),Cf=a("li"),pZ=a("strong"),zje=o("data2vec-audio"),Qje=o(" \u2014 "),Jx=a("a"),Wje=o("Data2VecAudioConfig"),Hje=o(" (Data2VecAudio model)"),Uje=l(),wf=a("li"),uZ=a("strong"),Jje=o("data2vec-text"),Yje=o(" \u2014 "),Yx=a("a"),Kje=o("Data2VecTextConfig"),Zje=o(" (Data2VecText model)"),eDe=l(),Af=a("li"),_Z=a("strong"),oDe=o("data2vec-vision"),rDe=o(" \u2014 "),Kx=a("a"),tDe=o("Data2VecVisionConfig"),aDe=o(" (Data2VecVision model)"),nDe=l(),yf=a("li"),bZ=a("strong"),sDe=o("deberta"),lDe=o(" \u2014 "),Zx=a("a"),iDe=o("DebertaConfig"),dDe=o(" (DeBERTa model)"),cDe=l(),Lf=a("li"),vZ=a("strong"),fDe=o("deberta-v2"),mDe=o(" \u2014 "),e$=a("a"),gDe=o("DebertaV2Config"),hDe=o(" (DeBERTa-v2 model)"),pDe=l(),xf=a("li"),FZ=a("strong"),uDe=o("decision_transformer"),_De=o(" \u2014 "),o$=a("a"),bDe=o("DecisionTransformerConfig"),vDe=o(" (Decision Transformer model)"),FDe=l(),$f=a("li"),TZ=a("strong"),TDe=o("deit"),MDe=o(" \u2014 "),r$=a("a"),EDe=o("DeiTConfig"),CDe=o(" (DeiT model)"),wDe=l(),kf=a("li"),MZ=a("strong"),ADe=o("detr"),yDe=o(" \u2014 "),t$=a("a"),LDe=o("DetrConfig"),xDe=o(" (DETR model)"),$De=l(),Sf=a("li"),EZ=a("strong"),kDe=o("distilbert"),SDe=o(" \u2014 "),a$=a("a"),RDe=o("DistilBertConfig"),BDe=o(" (DistilBERT model)"),PDe=l(),Rf=a("li"),CZ=a("strong"),IDe=o("dpr"),qDe=o(" \u2014 "),n$=a("a"),NDe=o("DPRConfig"),jDe=o(" (DPR model)"),DDe=l(),Bf=a("li"),wZ=a("strong"),GDe=o("dpt"),ODe=o(" \u2014 "),s$=a("a"),VDe=o("DPTConfig"),XDe=o(" (DPT model)"),zDe=l(),Pf=a("li"),AZ=a("strong"),QDe=o("electra"),WDe=o(" \u2014 "),l$=a("a"),HDe=o("ElectraConfig"),UDe=o(" (ELECTRA model)"),JDe=l(),If=a("li"),yZ=a("strong"),YDe=o("encoder-decoder"),KDe=o(" \u2014 "),i$=a("a"),ZDe=o("EncoderDecoderConfig"),eGe=o(" (Encoder decoder model)"),oGe=l(),qf=a("li"),LZ=a("strong"),rGe=o("flaubert"),tGe=o(" \u2014 "),d$=a("a"),aGe=o("FlaubertConfig"),nGe=o(" (FlauBERT model)"),sGe=l(),Nf=a("li"),xZ=a("strong"),lGe=o("fnet"),iGe=o(" \u2014 "),c$=a("a"),dGe=o("FNetConfig"),cGe=o(" (FNet model)"),fGe=l(),jf=a("li"),$Z=a("strong"),mGe=o("fsmt"),gGe=o(" \u2014 "),f$=a("a"),hGe=o("FSMTConfig"),pGe=o(" (FairSeq Machine-Translation model)"),uGe=l(),Df=a("li"),kZ=a("strong"),_Ge=o("funnel"),bGe=o(" \u2014 "),m$=a("a"),vGe=o("FunnelConfig"),FGe=o(" (Funnel Transformer model)"),TGe=l(),Gf=a("li"),SZ=a("strong"),MGe=o("glpn"),EGe=o(" \u2014 "),g$=a("a"),CGe=o("GLPNConfig"),wGe=o(" (GLPN model)"),AGe=l(),Of=a("li"),RZ=a("strong"),yGe=o("gpt2"),LGe=o(" \u2014 "),h$=a("a"),xGe=o("GPT2Config"),$Ge=o(" (OpenAI GPT-2 model)"),kGe=l(),Vf=a("li"),BZ=a("strong"),SGe=o("gpt_neo"),RGe=o(" \u2014 "),p$=a("a"),BGe=o("GPTNeoConfig"),PGe=o(" (GPT Neo model)"),IGe=l(),Xf=a("li"),PZ=a("strong"),qGe=o("gpt_neox"),NGe=o(" \u2014 "),u$=a("a"),jGe=o("GPTNeoXConfig"),DGe=o(" (GPTNeoX model)"),GGe=l(),zf=a("li"),IZ=a("strong"),OGe=o("gptj"),VGe=o(" \u2014 "),_$=a("a"),XGe=o("GPTJConfig"),zGe=o(" (GPT-J model)"),QGe=l(),Qf=a("li"),qZ=a("strong"),WGe=o("hubert"),HGe=o(" \u2014 "),b$=a("a"),UGe=o("HubertConfig"),JGe=o(" (Hubert model)"),YGe=l(),Wf=a("li"),NZ=a("strong"),KGe=o("ibert"),ZGe=o(" \u2014 "),v$=a("a"),eOe=o("IBertConfig"),oOe=o(" (I-BERT model)"),rOe=l(),Hf=a("li"),jZ=a("strong"),tOe=o("imagegpt"),aOe=o(" \u2014 "),F$=a("a"),nOe=o("ImageGPTConfig"),sOe=o(" (ImageGPT model)"),lOe=l(),Uf=a("li"),DZ=a("strong"),iOe=o("layoutlm"),dOe=o(" \u2014 "),T$=a("a"),cOe=o("LayoutLMConfig"),fOe=o(" (LayoutLM model)"),mOe=l(),Jf=a("li"),GZ=a("strong"),gOe=o("layoutlmv2"),hOe=o(" \u2014 "),M$=a("a"),pOe=o("LayoutLMv2Config"),uOe=o(" (LayoutLMv2 model)"),_Oe=l(),Yf=a("li"),OZ=a("strong"),bOe=o("led"),vOe=o(" \u2014 "),E$=a("a"),FOe=o("LEDConfig"),TOe=o(" (LED model)"),MOe=l(),Kf=a("li"),VZ=a("strong"),EOe=o("longformer"),COe=o(" \u2014 "),C$=a("a"),wOe=o("LongformerConfig"),AOe=o(" (Longformer model)"),yOe=l(),Zf=a("li"),XZ=a("strong"),LOe=o("luke"),xOe=o(" \u2014 "),w$=a("a"),$Oe=o("LukeConfig"),kOe=o(" (LUKE model)"),SOe=l(),em=a("li"),zZ=a("strong"),ROe=o("lxmert"),BOe=o(" \u2014 "),A$=a("a"),POe=o("LxmertConfig"),IOe=o(" (LXMERT model)"),qOe=l(),om=a("li"),QZ=a("strong"),NOe=o("m2m_100"),jOe=o(" \u2014 "),y$=a("a"),DOe=o("M2M100Config"),GOe=o(" (M2M100 model)"),OOe=l(),rm=a("li"),WZ=a("strong"),VOe=o("marian"),XOe=o(" \u2014 "),L$=a("a"),zOe=o("MarianConfig"),QOe=o(" (Marian model)"),WOe=l(),tm=a("li"),HZ=a("strong"),HOe=o("maskformer"),UOe=o(" \u2014 "),x$=a("a"),JOe=o("MaskFormerConfig"),YOe=o(" (MaskFormer model)"),KOe=l(),am=a("li"),UZ=a("strong"),ZOe=o("mbart"),eVe=o(" \u2014 "),$$=a("a"),oVe=o("MBartConfig"),rVe=o(" (mBART model)"),tVe=l(),nm=a("li"),JZ=a("strong"),aVe=o("megatron-bert"),nVe=o(" \u2014 "),k$=a("a"),sVe=o("MegatronBertConfig"),lVe=o(" (MegatronBert model)"),iVe=l(),sm=a("li"),YZ=a("strong"),dVe=o("mobilebert"),cVe=o(" \u2014 "),S$=a("a"),fVe=o("MobileBertConfig"),mVe=o(" (MobileBERT model)"),gVe=l(),lm=a("li"),KZ=a("strong"),hVe=o("mpnet"),pVe=o(" \u2014 "),R$=a("a"),uVe=o("MPNetConfig"),_Ve=o(" (MPNet model)"),bVe=l(),im=a("li"),ZZ=a("strong"),vVe=o("mt5"),FVe=o(" \u2014 "),B$=a("a"),TVe=o("MT5Config"),MVe=o(" (mT5 model)"),EVe=l(),dm=a("li"),eee=a("strong"),CVe=o("nystromformer"),wVe=o(" \u2014 "),P$=a("a"),AVe=o("NystromformerConfig"),yVe=o(" (Nystromformer model)"),LVe=l(),cm=a("li"),oee=a("strong"),xVe=o("openai-gpt"),$Ve=o(" \u2014 "),I$=a("a"),kVe=o("OpenAIGPTConfig"),SVe=o(" (OpenAI GPT model)"),RVe=l(),fm=a("li"),ree=a("strong"),BVe=o("pegasus"),PVe=o(" \u2014 "),q$=a("a"),IVe=o("PegasusConfig"),qVe=o(" (Pegasus model)"),NVe=l(),mm=a("li"),tee=a("strong"),jVe=o("perceiver"),DVe=o(" \u2014 "),N$=a("a"),GVe=o("PerceiverConfig"),OVe=o(" (Perceiver model)"),VVe=l(),gm=a("li"),aee=a("strong"),XVe=o("plbart"),zVe=o(" \u2014 "),j$=a("a"),QVe=o("PLBartConfig"),WVe=o(" (PLBart model)"),HVe=l(),hm=a("li"),nee=a("strong"),UVe=o("poolformer"),JVe=o(" \u2014 "),D$=a("a"),YVe=o("PoolFormerConfig"),KVe=o(" (PoolFormer model)"),ZVe=l(),pm=a("li"),see=a("strong"),eXe=o("prophetnet"),oXe=o(" \u2014 "),G$=a("a"),rXe=o("ProphetNetConfig"),tXe=o(" (ProphetNet model)"),aXe=l(),um=a("li"),lee=a("strong"),nXe=o("qdqbert"),sXe=o(" \u2014 "),O$=a("a"),lXe=o("QDQBertConfig"),iXe=o(" (QDQBert model)"),dXe=l(),_m=a("li"),iee=a("strong"),cXe=o("rag"),fXe=o(" \u2014 "),V$=a("a"),mXe=o("RagConfig"),gXe=o(" (RAG model)"),hXe=l(),bm=a("li"),dee=a("strong"),pXe=o("realm"),uXe=o(" \u2014 "),X$=a("a"),_Xe=o("RealmConfig"),bXe=o(" (Realm model)"),vXe=l(),vm=a("li"),cee=a("strong"),FXe=o("reformer"),TXe=o(" \u2014 "),z$=a("a"),MXe=o("ReformerConfig"),EXe=o(" (Reformer model)"),CXe=l(),Fm=a("li"),fee=a("strong"),wXe=o("regnet"),AXe=o(" \u2014 "),Q$=a("a"),yXe=o("RegNetConfig"),LXe=o(" (RegNet model)"),xXe=l(),Tm=a("li"),mee=a("strong"),$Xe=o("rembert"),kXe=o(" \u2014 "),W$=a("a"),SXe=o("RemBertConfig"),RXe=o(" (RemBERT model)"),BXe=l(),Mm=a("li"),gee=a("strong"),PXe=o("resnet"),IXe=o(" \u2014 "),H$=a("a"),qXe=o("ResNetConfig"),NXe=o(" (ResNet model)"),jXe=l(),Em=a("li"),hee=a("strong"),DXe=o("retribert"),GXe=o(" \u2014 "),U$=a("a"),OXe=o("RetriBertConfig"),VXe=o(" (RetriBERT model)"),XXe=l(),Cm=a("li"),pee=a("strong"),zXe=o("roberta"),QXe=o(" \u2014 "),J$=a("a"),WXe=o("RobertaConfig"),HXe=o(" (RoBERTa model)"),UXe=l(),wm=a("li"),uee=a("strong"),JXe=o("roformer"),YXe=o(" \u2014 "),Y$=a("a"),KXe=o("RoFormerConfig"),ZXe=o(" (RoFormer model)"),eze=l(),Am=a("li"),_ee=a("strong"),oze=o("segformer"),rze=o(" \u2014 "),K$=a("a"),tze=o("SegformerConfig"),aze=o(" (SegFormer model)"),nze=l(),ym=a("li"),bee=a("strong"),sze=o("sew"),lze=o(" \u2014 "),Z$=a("a"),ize=o("SEWConfig"),dze=o(" (SEW model)"),cze=l(),Lm=a("li"),vee=a("strong"),fze=o("sew-d"),mze=o(" \u2014 "),ek=a("a"),gze=o("SEWDConfig"),hze=o(" (SEW-D model)"),pze=l(),xm=a("li"),Fee=a("strong"),uze=o("speech-encoder-decoder"),_ze=o(" \u2014 "),ok=a("a"),bze=o("SpeechEncoderDecoderConfig"),vze=o(" (Speech Encoder decoder model)"),Fze=l(),$m=a("li"),Tee=a("strong"),Tze=o("speech_to_text"),Mze=o(" \u2014 "),rk=a("a"),Eze=o("Speech2TextConfig"),Cze=o(" (Speech2Text model)"),wze=l(),km=a("li"),Mee=a("strong"),Aze=o("speech_to_text_2"),yze=o(" \u2014 "),tk=a("a"),Lze=o("Speech2Text2Config"),xze=o(" (Speech2Text2 model)"),$ze=l(),Sm=a("li"),Eee=a("strong"),kze=o("splinter"),Sze=o(" \u2014 "),ak=a("a"),Rze=o("SplinterConfig"),Bze=o(" (Splinter model)"),Pze=l(),Rm=a("li"),Cee=a("strong"),Ize=o("squeezebert"),qze=o(" \u2014 "),nk=a("a"),Nze=o("SqueezeBertConfig"),jze=o(" (SqueezeBERT model)"),Dze=l(),Bm=a("li"),wee=a("strong"),Gze=o("swin"),Oze=o(" \u2014 "),sk=a("a"),Vze=o("SwinConfig"),Xze=o(" (Swin model)"),zze=l(),Pm=a("li"),Aee=a("strong"),Qze=o("t5"),Wze=o(" \u2014 "),lk=a("a"),Hze=o("T5Config"),Uze=o(" (T5 model)"),Jze=l(),Im=a("li"),yee=a("strong"),Yze=o("tapas"),Kze=o(" \u2014 "),ik=a("a"),Zze=o("TapasConfig"),eQe=o(" (TAPAS model)"),oQe=l(),qm=a("li"),Lee=a("strong"),rQe=o("tapex"),tQe=o(" \u2014 "),dk=a("a"),aQe=o("BartConfig"),nQe=o(" (TAPEX model)"),sQe=l(),Nm=a("li"),xee=a("strong"),lQe=o("transfo-xl"),iQe=o(" \u2014 "),ck=a("a"),dQe=o("TransfoXLConfig"),cQe=o(" (Transformer-XL model)"),fQe=l(),jm=a("li"),$ee=a("strong"),mQe=o("trocr"),gQe=o(" \u2014 "),fk=a("a"),hQe=o("TrOCRConfig"),pQe=o(" (TrOCR model)"),uQe=l(),Dm=a("li"),kee=a("strong"),_Qe=o("unispeech"),bQe=o(" \u2014 "),mk=a("a"),vQe=o("UniSpeechConfig"),FQe=o(" (UniSpeech model)"),TQe=l(),Gm=a("li"),See=a("strong"),MQe=o("unispeech-sat"),EQe=o(" \u2014 "),gk=a("a"),CQe=o("UniSpeechSatConfig"),wQe=o(" (UniSpeechSat model)"),AQe=l(),Om=a("li"),Ree=a("strong"),yQe=o("van"),LQe=o(" \u2014 "),hk=a("a"),xQe=o("VanConfig"),$Qe=o(" (VAN model)"),kQe=l(),Vm=a("li"),Bee=a("strong"),SQe=o("vilt"),RQe=o(" \u2014 "),pk=a("a"),BQe=o("ViltConfig"),PQe=o(" (ViLT model)"),IQe=l(),Xm=a("li"),Pee=a("strong"),qQe=o("vision-encoder-decoder"),NQe=o(" \u2014 "),uk=a("a"),jQe=o("VisionEncoderDecoderConfig"),DQe=o(" (Vision Encoder decoder model)"),GQe=l(),zm=a("li"),Iee=a("strong"),OQe=o("vision-text-dual-encoder"),VQe=o(" \u2014 "),_k=a("a"),XQe=o("VisionTextDualEncoderConfig"),zQe=o(" (VisionTextDualEncoder model)"),QQe=l(),Qm=a("li"),qee=a("strong"),WQe=o("visual_bert"),HQe=o(" \u2014 "),bk=a("a"),UQe=o("VisualBertConfig"),JQe=o(" (VisualBert model)"),YQe=l(),Wm=a("li"),Nee=a("strong"),KQe=o("vit"),ZQe=o(" \u2014 "),vk=a("a"),eWe=o("ViTConfig"),oWe=o(" (ViT model)"),rWe=l(),Hm=a("li"),jee=a("strong"),tWe=o("vit_mae"),aWe=o(" \u2014 "),Fk=a("a"),nWe=o("ViTMAEConfig"),sWe=o(" (ViTMAE model)"),lWe=l(),Um=a("li"),Dee=a("strong"),iWe=o("wav2vec2"),dWe=o(" \u2014 "),Tk=a("a"),cWe=o("Wav2Vec2Config"),fWe=o(" (Wav2Vec2 model)"),mWe=l(),Jm=a("li"),Gee=a("strong"),gWe=o("wavlm"),hWe=o(" \u2014 "),Mk=a("a"),pWe=o("WavLMConfig"),uWe=o(" (WavLM model)"),_We=l(),Ym=a("li"),Oee=a("strong"),bWe=o("xglm"),vWe=o(" \u2014 "),Ek=a("a"),FWe=o("XGLMConfig"),TWe=o(" (XGLM model)"),MWe=l(),Km=a("li"),Vee=a("strong"),EWe=o("xlm"),CWe=o(" \u2014 "),Ck=a("a"),wWe=o("XLMConfig"),AWe=o(" (XLM model)"),yWe=l(),Zm=a("li"),Xee=a("strong"),LWe=o("xlm-prophetnet"),xWe=o(" \u2014 "),wk=a("a"),$We=o("XLMProphetNetConfig"),kWe=o(" (XLMProphetNet model)"),SWe=l(),eg=a("li"),zee=a("strong"),RWe=o("xlm-roberta"),BWe=o(" \u2014 "),Ak=a("a"),PWe=o("XLMRobertaConfig"),IWe=o(" (XLM-RoBERTa model)"),qWe=l(),og=a("li"),Qee=a("strong"),NWe=o("xlm-roberta-xl"),jWe=o(" \u2014 "),yk=a("a"),DWe=o("XLMRobertaXLConfig"),GWe=o(" (XLM-RoBERTa-XL model)"),OWe=l(),rg=a("li"),Wee=a("strong"),VWe=o("xlnet"),XWe=o(" \u2014 "),Lk=a("a"),zWe=o("XLNetConfig"),QWe=o(" (XLNet model)"),WWe=l(),tg=a("li"),Hee=a("strong"),HWe=o("yoso"),UWe=o(" \u2014 "),xk=a("a"),JWe=o("YosoConfig"),YWe=o(" (YOSO model)"),KWe=l(),F(ag.$$.fragment),ZWe=l(),ng=a("div"),F(CA.$$.fragment),eHe=l(),Uee=a("p"),oHe=o("Register a new configuration for this class."),JRe=l(),fi=a("h2"),sg=a("a"),Jee=a("span"),F(wA.$$.fragment),rHe=l(),Yee=a("span"),tHe=o("AutoTokenizer"),YRe=l(),Eo=a("div"),F(AA.$$.fragment),aHe=l(),yA=a("p"),nHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$k=a("a"),sHe=o("AutoTokenizer.from_pretrained()"),lHe=o(" class method."),iHe=l(),LA=a("p"),dHe=o("This class cannot be instantiated directly using "),Kee=a("code"),cHe=o("__init__()"),fHe=o(" (throws an error)."),mHe=l(),Tr=a("div"),F(xA.$$.fragment),gHe=l(),Zee=a("p"),hHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pHe=l(),Fa=a("p"),uHe=o("The tokenizer class to instantiate is selected based on the "),eoe=a("code"),_He=o("model_type"),bHe=o(` property of the config object (either
passed as an argument or loaded from `),ooe=a("code"),vHe=o("pretrained_model_name_or_path"),FHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),roe=a("code"),THe=o("pretrained_model_name_or_path"),MHe=o(":"),EHe=l(),k=a("ul"),An=a("li"),toe=a("strong"),CHe=o("albert"),wHe=o(" \u2014 "),kk=a("a"),AHe=o("AlbertTokenizer"),yHe=o(" or "),Sk=a("a"),LHe=o("AlbertTokenizerFast"),xHe=o(" (ALBERT model)"),$He=l(),yn=a("li"),aoe=a("strong"),kHe=o("bart"),SHe=o(" \u2014 "),Rk=a("a"),RHe=o("BartTokenizer"),BHe=o(" or "),Bk=a("a"),PHe=o("BartTokenizerFast"),IHe=o(" (BART model)"),qHe=l(),Ln=a("li"),noe=a("strong"),NHe=o("barthez"),jHe=o(" \u2014 "),Pk=a("a"),DHe=o("BarthezTokenizer"),GHe=o(" or "),Ik=a("a"),OHe=o("BarthezTokenizerFast"),VHe=o(" (BARThez model)"),XHe=l(),lg=a("li"),soe=a("strong"),zHe=o("bartpho"),QHe=o(" \u2014 "),qk=a("a"),WHe=o("BartphoTokenizer"),HHe=o(" (BARTpho model)"),UHe=l(),xn=a("li"),loe=a("strong"),JHe=o("bert"),YHe=o(" \u2014 "),Nk=a("a"),KHe=o("BertTokenizer"),ZHe=o(" or "),jk=a("a"),eUe=o("BertTokenizerFast"),oUe=o(" (BERT model)"),rUe=l(),ig=a("li"),ioe=a("strong"),tUe=o("bert-generation"),aUe=o(" \u2014 "),Dk=a("a"),nUe=o("BertGenerationTokenizer"),sUe=o(" (Bert Generation model)"),lUe=l(),dg=a("li"),doe=a("strong"),iUe=o("bert-japanese"),dUe=o(" \u2014 "),Gk=a("a"),cUe=o("BertJapaneseTokenizer"),fUe=o(" (BertJapanese model)"),mUe=l(),cg=a("li"),coe=a("strong"),gUe=o("bertweet"),hUe=o(" \u2014 "),Ok=a("a"),pUe=o("BertweetTokenizer"),uUe=o(" (Bertweet model)"),_Ue=l(),$n=a("li"),foe=a("strong"),bUe=o("big_bird"),vUe=o(" \u2014 "),Vk=a("a"),FUe=o("BigBirdTokenizer"),TUe=o(" or "),Xk=a("a"),MUe=o("BigBirdTokenizerFast"),EUe=o(" (BigBird model)"),CUe=l(),kn=a("li"),moe=a("strong"),wUe=o("bigbird_pegasus"),AUe=o(" \u2014 "),zk=a("a"),yUe=o("PegasusTokenizer"),LUe=o(" or "),Qk=a("a"),xUe=o("PegasusTokenizerFast"),$Ue=o(" (BigBirdPegasus model)"),kUe=l(),Sn=a("li"),goe=a("strong"),SUe=o("blenderbot"),RUe=o(" \u2014 "),Wk=a("a"),BUe=o("BlenderbotTokenizer"),PUe=o(" or "),Hk=a("a"),IUe=o("BlenderbotTokenizerFast"),qUe=o(" (Blenderbot model)"),NUe=l(),fg=a("li"),hoe=a("strong"),jUe=o("blenderbot-small"),DUe=o(" \u2014 "),Uk=a("a"),GUe=o("BlenderbotSmallTokenizer"),OUe=o(" (BlenderbotSmall model)"),VUe=l(),mg=a("li"),poe=a("strong"),XUe=o("byt5"),zUe=o(" \u2014 "),Jk=a("a"),QUe=o("ByT5Tokenizer"),WUe=o(" (ByT5 model)"),HUe=l(),Rn=a("li"),uoe=a("strong"),UUe=o("camembert"),JUe=o(" \u2014 "),Yk=a("a"),YUe=o("CamembertTokenizer"),KUe=o(" or "),Kk=a("a"),ZUe=o("CamembertTokenizerFast"),eJe=o(" (CamemBERT model)"),oJe=l(),gg=a("li"),_oe=a("strong"),rJe=o("canine"),tJe=o(" \u2014 "),Zk=a("a"),aJe=o("CanineTokenizer"),nJe=o(" (Canine model)"),sJe=l(),Bn=a("li"),boe=a("strong"),lJe=o("clip"),iJe=o(" \u2014 "),eS=a("a"),dJe=o("CLIPTokenizer"),cJe=o(" or "),oS=a("a"),fJe=o("CLIPTokenizerFast"),mJe=o(" (CLIP model)"),gJe=l(),Pn=a("li"),voe=a("strong"),hJe=o("convbert"),pJe=o(" \u2014 "),rS=a("a"),uJe=o("ConvBertTokenizer"),_Je=o(" or "),tS=a("a"),bJe=o("ConvBertTokenizerFast"),vJe=o(" (ConvBERT model)"),FJe=l(),In=a("li"),Foe=a("strong"),TJe=o("cpm"),MJe=o(" \u2014 "),aS=a("a"),EJe=o("CpmTokenizer"),CJe=o(" or "),Toe=a("code"),wJe=o("CpmTokenizerFast"),AJe=o(" (CPM model)"),yJe=l(),hg=a("li"),Moe=a("strong"),LJe=o("ctrl"),xJe=o(" \u2014 "),nS=a("a"),$Je=o("CTRLTokenizer"),kJe=o(" (CTRL model)"),SJe=l(),qn=a("li"),Eoe=a("strong"),RJe=o("data2vec-text"),BJe=o(" \u2014 "),sS=a("a"),PJe=o("RobertaTokenizer"),IJe=o(" or "),lS=a("a"),qJe=o("RobertaTokenizerFast"),NJe=o(" (Data2VecText model)"),jJe=l(),Nn=a("li"),Coe=a("strong"),DJe=o("deberta"),GJe=o(" \u2014 "),iS=a("a"),OJe=o("DebertaTokenizer"),VJe=o(" or "),dS=a("a"),XJe=o("DebertaTokenizerFast"),zJe=o(" (DeBERTa model)"),QJe=l(),jn=a("li"),woe=a("strong"),WJe=o("deberta-v2"),HJe=o(" \u2014 "),cS=a("a"),UJe=o("DebertaV2Tokenizer"),JJe=o(" or "),fS=a("a"),YJe=o("DebertaV2TokenizerFast"),KJe=o(" (DeBERTa-v2 model)"),ZJe=l(),Dn=a("li"),Aoe=a("strong"),eYe=o("distilbert"),oYe=o(" \u2014 "),mS=a("a"),rYe=o("DistilBertTokenizer"),tYe=o(" or "),gS=a("a"),aYe=o("DistilBertTokenizerFast"),nYe=o(" (DistilBERT model)"),sYe=l(),Gn=a("li"),yoe=a("strong"),lYe=o("dpr"),iYe=o(" \u2014 "),hS=a("a"),dYe=o("DPRQuestionEncoderTokenizer"),cYe=o(" or "),pS=a("a"),fYe=o("DPRQuestionEncoderTokenizerFast"),mYe=o(" (DPR model)"),gYe=l(),On=a("li"),Loe=a("strong"),hYe=o("electra"),pYe=o(" \u2014 "),uS=a("a"),uYe=o("ElectraTokenizer"),_Ye=o(" or "),_S=a("a"),bYe=o("ElectraTokenizerFast"),vYe=o(" (ELECTRA model)"),FYe=l(),pg=a("li"),xoe=a("strong"),TYe=o("flaubert"),MYe=o(" \u2014 "),bS=a("a"),EYe=o("FlaubertTokenizer"),CYe=o(" (FlauBERT model)"),wYe=l(),Vn=a("li"),$oe=a("strong"),AYe=o("fnet"),yYe=o(" \u2014 "),vS=a("a"),LYe=o("FNetTokenizer"),xYe=o(" or "),FS=a("a"),$Ye=o("FNetTokenizerFast"),kYe=o(" (FNet model)"),SYe=l(),ug=a("li"),koe=a("strong"),RYe=o("fsmt"),BYe=o(" \u2014 "),TS=a("a"),PYe=o("FSMTTokenizer"),IYe=o(" (FairSeq Machine-Translation model)"),qYe=l(),Xn=a("li"),Soe=a("strong"),NYe=o("funnel"),jYe=o(" \u2014 "),MS=a("a"),DYe=o("FunnelTokenizer"),GYe=o(" or "),ES=a("a"),OYe=o("FunnelTokenizerFast"),VYe=o(" (Funnel Transformer model)"),XYe=l(),zn=a("li"),Roe=a("strong"),zYe=o("gpt2"),QYe=o(" \u2014 "),CS=a("a"),WYe=o("GPT2Tokenizer"),HYe=o(" or "),wS=a("a"),UYe=o("GPT2TokenizerFast"),JYe=o(" (OpenAI GPT-2 model)"),YYe=l(),Qn=a("li"),Boe=a("strong"),KYe=o("gpt_neo"),ZYe=o(" \u2014 "),AS=a("a"),eKe=o("GPT2Tokenizer"),oKe=o(" or "),yS=a("a"),rKe=o("GPT2TokenizerFast"),tKe=o(" (GPT Neo model)"),aKe=l(),_g=a("li"),Poe=a("strong"),nKe=o("gpt_neox"),sKe=o(" \u2014 "),LS=a("a"),lKe=o("GPTNeoXTokenizerFast"),iKe=o(" (GPTNeoX model)"),dKe=l(),Wn=a("li"),Ioe=a("strong"),cKe=o("gptj"),fKe=o(" \u2014 "),xS=a("a"),mKe=o("GPT2Tokenizer"),gKe=o(" or "),$S=a("a"),hKe=o("GPT2TokenizerFast"),pKe=o(" (GPT-J model)"),uKe=l(),Hn=a("li"),qoe=a("strong"),_Ke=o("herbert"),bKe=o(" \u2014 "),kS=a("a"),vKe=o("HerbertTokenizer"),FKe=o(" or "),SS=a("a"),TKe=o("HerbertTokenizerFast"),MKe=o(" (HerBERT model)"),EKe=l(),bg=a("li"),Noe=a("strong"),CKe=o("hubert"),wKe=o(" \u2014 "),RS=a("a"),AKe=o("Wav2Vec2CTCTokenizer"),yKe=o(" (Hubert model)"),LKe=l(),Un=a("li"),joe=a("strong"),xKe=o("ibert"),$Ke=o(" \u2014 "),BS=a("a"),kKe=o("RobertaTokenizer"),SKe=o(" or "),PS=a("a"),RKe=o("RobertaTokenizerFast"),BKe=o(" (I-BERT model)"),PKe=l(),Jn=a("li"),Doe=a("strong"),IKe=o("layoutlm"),qKe=o(" \u2014 "),IS=a("a"),NKe=o("LayoutLMTokenizer"),jKe=o(" or "),qS=a("a"),DKe=o("LayoutLMTokenizerFast"),GKe=o(" (LayoutLM model)"),OKe=l(),Yn=a("li"),Goe=a("strong"),VKe=o("layoutlmv2"),XKe=o(" \u2014 "),NS=a("a"),zKe=o("LayoutLMv2Tokenizer"),QKe=o(" or "),jS=a("a"),WKe=o("LayoutLMv2TokenizerFast"),HKe=o(" (LayoutLMv2 model)"),UKe=l(),Kn=a("li"),Ooe=a("strong"),JKe=o("layoutxlm"),YKe=o(" \u2014 "),DS=a("a"),KKe=o("LayoutXLMTokenizer"),ZKe=o(" or "),GS=a("a"),eZe=o("LayoutXLMTokenizerFast"),oZe=o(" (LayoutXLM model)"),rZe=l(),Zn=a("li"),Voe=a("strong"),tZe=o("led"),aZe=o(" \u2014 "),OS=a("a"),nZe=o("LEDTokenizer"),sZe=o(" or "),VS=a("a"),lZe=o("LEDTokenizerFast"),iZe=o(" (LED model)"),dZe=l(),es=a("li"),Xoe=a("strong"),cZe=o("longformer"),fZe=o(" \u2014 "),XS=a("a"),mZe=o("LongformerTokenizer"),gZe=o(" or "),zS=a("a"),hZe=o("LongformerTokenizerFast"),pZe=o(" (Longformer model)"),uZe=l(),vg=a("li"),zoe=a("strong"),_Ze=o("luke"),bZe=o(" \u2014 "),QS=a("a"),vZe=o("LukeTokenizer"),FZe=o(" (LUKE model)"),TZe=l(),os=a("li"),Qoe=a("strong"),MZe=o("lxmert"),EZe=o(" \u2014 "),WS=a("a"),CZe=o("LxmertTokenizer"),wZe=o(" or "),HS=a("a"),AZe=o("LxmertTokenizerFast"),yZe=o(" (LXMERT model)"),LZe=l(),Fg=a("li"),Woe=a("strong"),xZe=o("m2m_100"),$Ze=o(" \u2014 "),US=a("a"),kZe=o("M2M100Tokenizer"),SZe=o(" (M2M100 model)"),RZe=l(),Tg=a("li"),Hoe=a("strong"),BZe=o("marian"),PZe=o(" \u2014 "),JS=a("a"),IZe=o("MarianTokenizer"),qZe=o(" (Marian model)"),NZe=l(),rs=a("li"),Uoe=a("strong"),jZe=o("mbart"),DZe=o(" \u2014 "),YS=a("a"),GZe=o("MBartTokenizer"),OZe=o(" or "),KS=a("a"),VZe=o("MBartTokenizerFast"),XZe=o(" (mBART model)"),zZe=l(),ts=a("li"),Joe=a("strong"),QZe=o("mbart50"),WZe=o(" \u2014 "),ZS=a("a"),HZe=o("MBart50Tokenizer"),UZe=o(" or "),eR=a("a"),JZe=o("MBart50TokenizerFast"),YZe=o(" (mBART-50 model)"),KZe=l(),as=a("li"),Yoe=a("strong"),ZZe=o("megatron-bert"),eeo=o(" \u2014 "),oR=a("a"),oeo=o("BertTokenizer"),reo=o(" or "),rR=a("a"),teo=o("BertTokenizerFast"),aeo=o(" (MegatronBert model)"),neo=l(),Mg=a("li"),Koe=a("strong"),seo=o("mluke"),leo=o(" \u2014 "),tR=a("a"),ieo=o("MLukeTokenizer"),deo=o(" (mLUKE model)"),ceo=l(),ns=a("li"),Zoe=a("strong"),feo=o("mobilebert"),meo=o(" \u2014 "),aR=a("a"),geo=o("MobileBertTokenizer"),heo=o(" or "),nR=a("a"),peo=o("MobileBertTokenizerFast"),ueo=o(" (MobileBERT model)"),_eo=l(),ss=a("li"),ere=a("strong"),beo=o("mpnet"),veo=o(" \u2014 "),sR=a("a"),Feo=o("MPNetTokenizer"),Teo=o(" or "),lR=a("a"),Meo=o("MPNetTokenizerFast"),Eeo=o(" (MPNet model)"),Ceo=l(),ls=a("li"),ore=a("strong"),weo=o("mt5"),Aeo=o(" \u2014 "),iR=a("a"),yeo=o("MT5Tokenizer"),Leo=o(" or "),dR=a("a"),xeo=o("MT5TokenizerFast"),$eo=o(" (mT5 model)"),keo=l(),is=a("li"),rre=a("strong"),Seo=o("nystromformer"),Reo=o(" \u2014 "),cR=a("a"),Beo=o("AlbertTokenizer"),Peo=o(" or "),fR=a("a"),Ieo=o("AlbertTokenizerFast"),qeo=o(" (Nystromformer model)"),Neo=l(),ds=a("li"),tre=a("strong"),jeo=o("openai-gpt"),Deo=o(" \u2014 "),mR=a("a"),Geo=o("OpenAIGPTTokenizer"),Oeo=o(" or "),gR=a("a"),Veo=o("OpenAIGPTTokenizerFast"),Xeo=o(" (OpenAI GPT model)"),zeo=l(),cs=a("li"),are=a("strong"),Qeo=o("pegasus"),Weo=o(" \u2014 "),hR=a("a"),Heo=o("PegasusTokenizer"),Ueo=o(" or "),pR=a("a"),Jeo=o("PegasusTokenizerFast"),Yeo=o(" (Pegasus model)"),Keo=l(),Eg=a("li"),nre=a("strong"),Zeo=o("perceiver"),eoo=o(" \u2014 "),uR=a("a"),ooo=o("PerceiverTokenizer"),roo=o(" (Perceiver model)"),too=l(),Cg=a("li"),sre=a("strong"),aoo=o("phobert"),noo=o(" \u2014 "),_R=a("a"),soo=o("PhobertTokenizer"),loo=o(" (PhoBERT model)"),ioo=l(),wg=a("li"),lre=a("strong"),doo=o("plbart"),coo=o(" \u2014 "),bR=a("a"),foo=o("PLBartTokenizer"),moo=o(" (PLBart model)"),goo=l(),Ag=a("li"),ire=a("strong"),hoo=o("prophetnet"),poo=o(" \u2014 "),vR=a("a"),uoo=o("ProphetNetTokenizer"),_oo=o(" (ProphetNet model)"),boo=l(),fs=a("li"),dre=a("strong"),voo=o("qdqbert"),Foo=o(" \u2014 "),FR=a("a"),Too=o("BertTokenizer"),Moo=o(" or "),TR=a("a"),Eoo=o("BertTokenizerFast"),Coo=o(" (QDQBert model)"),woo=l(),yg=a("li"),cre=a("strong"),Aoo=o("rag"),yoo=o(" \u2014 "),MR=a("a"),Loo=o("RagTokenizer"),xoo=o(" (RAG model)"),$oo=l(),ms=a("li"),fre=a("strong"),koo=o("realm"),Soo=o(" \u2014 "),ER=a("a"),Roo=o("RealmTokenizer"),Boo=o(" or "),CR=a("a"),Poo=o("RealmTokenizerFast"),Ioo=o(" (Realm model)"),qoo=l(),gs=a("li"),mre=a("strong"),Noo=o("reformer"),joo=o(" \u2014 "),wR=a("a"),Doo=o("ReformerTokenizer"),Goo=o(" or "),AR=a("a"),Ooo=o("ReformerTokenizerFast"),Voo=o(" (Reformer model)"),Xoo=l(),hs=a("li"),gre=a("strong"),zoo=o("rembert"),Qoo=o(" \u2014 "),yR=a("a"),Woo=o("RemBertTokenizer"),Hoo=o(" or "),LR=a("a"),Uoo=o("RemBertTokenizerFast"),Joo=o(" (RemBERT model)"),Yoo=l(),ps=a("li"),hre=a("strong"),Koo=o("retribert"),Zoo=o(" \u2014 "),xR=a("a"),ero=o("RetriBertTokenizer"),oro=o(" or "),$R=a("a"),rro=o("RetriBertTokenizerFast"),tro=o(" (RetriBERT model)"),aro=l(),us=a("li"),pre=a("strong"),nro=o("roberta"),sro=o(" \u2014 "),kR=a("a"),lro=o("RobertaTokenizer"),iro=o(" or "),SR=a("a"),dro=o("RobertaTokenizerFast"),cro=o(" (RoBERTa model)"),fro=l(),_s=a("li"),ure=a("strong"),mro=o("roformer"),gro=o(" \u2014 "),RR=a("a"),hro=o("RoFormerTokenizer"),pro=o(" or "),BR=a("a"),uro=o("RoFormerTokenizerFast"),_ro=o(" (RoFormer model)"),bro=l(),Lg=a("li"),_re=a("strong"),vro=o("speech_to_text"),Fro=o(" \u2014 "),PR=a("a"),Tro=o("Speech2TextTokenizer"),Mro=o(" (Speech2Text model)"),Ero=l(),xg=a("li"),bre=a("strong"),Cro=o("speech_to_text_2"),wro=o(" \u2014 "),IR=a("a"),Aro=o("Speech2Text2Tokenizer"),yro=o(" (Speech2Text2 model)"),Lro=l(),bs=a("li"),vre=a("strong"),xro=o("splinter"),$ro=o(" \u2014 "),qR=a("a"),kro=o("SplinterTokenizer"),Sro=o(" or "),NR=a("a"),Rro=o("SplinterTokenizerFast"),Bro=o(" (Splinter model)"),Pro=l(),vs=a("li"),Fre=a("strong"),Iro=o("squeezebert"),qro=o(" \u2014 "),jR=a("a"),Nro=o("SqueezeBertTokenizer"),jro=o(" or "),DR=a("a"),Dro=o("SqueezeBertTokenizerFast"),Gro=o(" (SqueezeBERT model)"),Oro=l(),Fs=a("li"),Tre=a("strong"),Vro=o("t5"),Xro=o(" \u2014 "),GR=a("a"),zro=o("T5Tokenizer"),Qro=o(" or "),OR=a("a"),Wro=o("T5TokenizerFast"),Hro=o(" (T5 model)"),Uro=l(),$g=a("li"),Mre=a("strong"),Jro=o("tapas"),Yro=o(" \u2014 "),VR=a("a"),Kro=o("TapasTokenizer"),Zro=o(" (TAPAS model)"),eto=l(),kg=a("li"),Ere=a("strong"),oto=o("tapex"),rto=o(" \u2014 "),XR=a("a"),tto=o("TapexTokenizer"),ato=o(" (TAPEX model)"),nto=l(),Sg=a("li"),Cre=a("strong"),sto=o("transfo-xl"),lto=o(" \u2014 "),zR=a("a"),ito=o("TransfoXLTokenizer"),dto=o(" (Transformer-XL model)"),cto=l(),Ts=a("li"),wre=a("strong"),fto=o("visual_bert"),mto=o(" \u2014 "),QR=a("a"),gto=o("BertTokenizer"),hto=o(" or "),WR=a("a"),pto=o("BertTokenizerFast"),uto=o(" (VisualBert model)"),_to=l(),Rg=a("li"),Are=a("strong"),bto=o("wav2vec2"),vto=o(" \u2014 "),HR=a("a"),Fto=o("Wav2Vec2CTCTokenizer"),Tto=o(" (Wav2Vec2 model)"),Mto=l(),Bg=a("li"),yre=a("strong"),Eto=o("wav2vec2_phoneme"),Cto=o(" \u2014 "),UR=a("a"),wto=o("Wav2Vec2PhonemeCTCTokenizer"),Ato=o(" (Wav2Vec2Phoneme model)"),yto=l(),Ms=a("li"),Lre=a("strong"),Lto=o("xglm"),xto=o(" \u2014 "),JR=a("a"),$to=o("XGLMTokenizer"),kto=o(" or "),YR=a("a"),Sto=o("XGLMTokenizerFast"),Rto=o(" (XGLM model)"),Bto=l(),Pg=a("li"),xre=a("strong"),Pto=o("xlm"),Ito=o(" \u2014 "),KR=a("a"),qto=o("XLMTokenizer"),Nto=o(" (XLM model)"),jto=l(),Ig=a("li"),$re=a("strong"),Dto=o("xlm-prophetnet"),Gto=o(" \u2014 "),ZR=a("a"),Oto=o("XLMProphetNetTokenizer"),Vto=o(" (XLMProphetNet model)"),Xto=l(),Es=a("li"),kre=a("strong"),zto=o("xlm-roberta"),Qto=o(" \u2014 "),eB=a("a"),Wto=o("XLMRobertaTokenizer"),Hto=o(" or "),oB=a("a"),Uto=o("XLMRobertaTokenizerFast"),Jto=o(" (XLM-RoBERTa model)"),Yto=l(),Cs=a("li"),Sre=a("strong"),Kto=o("xlm-roberta-xl"),Zto=o(" \u2014 "),rB=a("a"),eao=o("RobertaTokenizer"),oao=o(" or "),tB=a("a"),rao=o("RobertaTokenizerFast"),tao=o(" (XLM-RoBERTa-XL model)"),aao=l(),ws=a("li"),Rre=a("strong"),nao=o("xlnet"),sao=o(" \u2014 "),aB=a("a"),lao=o("XLNetTokenizer"),iao=o(" or "),nB=a("a"),dao=o("XLNetTokenizerFast"),cao=o(" (XLNet model)"),fao=l(),As=a("li"),Bre=a("strong"),mao=o("yoso"),gao=o(" \u2014 "),sB=a("a"),hao=o("AlbertTokenizer"),pao=o(" or "),lB=a("a"),uao=o("AlbertTokenizerFast"),_ao=o(" (YOSO model)"),bao=l(),F(qg.$$.fragment),vao=l(),Ng=a("div"),F($A.$$.fragment),Fao=l(),Pre=a("p"),Tao=o("Register a new tokenizer in this mapping."),KRe=l(),mi=a("h2"),jg=a("a"),Ire=a("span"),F(kA.$$.fragment),Mao=l(),qre=a("span"),Eao=o("AutoFeatureExtractor"),ZRe=l(),Co=a("div"),F(SA.$$.fragment),Cao=l(),RA=a("p"),wao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iB=a("a"),Aao=o("AutoFeatureExtractor.from_pretrained()"),yao=o(" class method."),Lao=l(),BA=a("p"),xao=o("This class cannot be instantiated directly using "),Nre=a("code"),$ao=o("__init__()"),kao=o(" (throws an error)."),Sao=l(),Xe=a("div"),F(PA.$$.fragment),Rao=l(),jre=a("p"),Bao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Pao=l(),Ta=a("p"),Iao=o("The feature extractor class to instantiate is selected based on the "),Dre=a("code"),qao=o("model_type"),Nao=o(` property of the config object
(either passed as an argument or loaded from `),Gre=a("code"),jao=o("pretrained_model_name_or_path"),Dao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ore=a("code"),Gao=o("pretrained_model_name_or_path"),Oao=o(":"),Vao=l(),ae=a("ul"),Dg=a("li"),Vre=a("strong"),Xao=o("beit"),zao=o(" \u2014 "),dB=a("a"),Qao=o("BeitFeatureExtractor"),Wao=o(" (BEiT model)"),Hao=l(),Gg=a("li"),Xre=a("strong"),Uao=o("clip"),Jao=o(" \u2014 "),cB=a("a"),Yao=o("CLIPFeatureExtractor"),Kao=o(" (CLIP model)"),Zao=l(),Og=a("li"),zre=a("strong"),eno=o("convnext"),ono=o(" \u2014 "),fB=a("a"),rno=o("ConvNextFeatureExtractor"),tno=o(" (ConvNext model)"),ano=l(),Vg=a("li"),Qre=a("strong"),nno=o("data2vec-audio"),sno=o(" \u2014 "),mB=a("a"),lno=o("Wav2Vec2FeatureExtractor"),ino=o(" (Data2VecAudio model)"),dno=l(),Xg=a("li"),Wre=a("strong"),cno=o("data2vec-vision"),fno=o(" \u2014 "),gB=a("a"),mno=o("BeitFeatureExtractor"),gno=o(" (Data2VecVision model)"),hno=l(),zg=a("li"),Hre=a("strong"),pno=o("deit"),uno=o(" \u2014 "),hB=a("a"),_no=o("DeiTFeatureExtractor"),bno=o(" (DeiT model)"),vno=l(),Qg=a("li"),Ure=a("strong"),Fno=o("detr"),Tno=o(" \u2014 "),pB=a("a"),Mno=o("DetrFeatureExtractor"),Eno=o(" (DETR model)"),Cno=l(),Wg=a("li"),Jre=a("strong"),wno=o("dpt"),Ano=o(" \u2014 "),uB=a("a"),yno=o("DPTFeatureExtractor"),Lno=o(" (DPT model)"),xno=l(),Hg=a("li"),Yre=a("strong"),$no=o("glpn"),kno=o(" \u2014 "),_B=a("a"),Sno=o("GLPNFeatureExtractor"),Rno=o(" (GLPN model)"),Bno=l(),Ug=a("li"),Kre=a("strong"),Pno=o("hubert"),Ino=o(" \u2014 "),bB=a("a"),qno=o("Wav2Vec2FeatureExtractor"),Nno=o(" (Hubert model)"),jno=l(),Jg=a("li"),Zre=a("strong"),Dno=o("layoutlmv2"),Gno=o(" \u2014 "),vB=a("a"),Ono=o("LayoutLMv2FeatureExtractor"),Vno=o(" (LayoutLMv2 model)"),Xno=l(),Yg=a("li"),ete=a("strong"),zno=o("maskformer"),Qno=o(" \u2014 "),FB=a("a"),Wno=o("MaskFormerFeatureExtractor"),Hno=o(" (MaskFormer model)"),Uno=l(),Kg=a("li"),ote=a("strong"),Jno=o("perceiver"),Yno=o(" \u2014 "),TB=a("a"),Kno=o("PerceiverFeatureExtractor"),Zno=o(" (Perceiver model)"),eso=l(),Zg=a("li"),rte=a("strong"),oso=o("poolformer"),rso=o(" \u2014 "),MB=a("a"),tso=o("PoolFormerFeatureExtractor"),aso=o(" (PoolFormer model)"),nso=l(),eh=a("li"),tte=a("strong"),sso=o("regnet"),lso=o(" \u2014 "),EB=a("a"),iso=o("ConvNextFeatureExtractor"),dso=o(" (RegNet model)"),cso=l(),oh=a("li"),ate=a("strong"),fso=o("resnet"),mso=o(" \u2014 "),CB=a("a"),gso=o("ConvNextFeatureExtractor"),hso=o(" (ResNet model)"),pso=l(),rh=a("li"),nte=a("strong"),uso=o("segformer"),_so=o(" \u2014 "),wB=a("a"),bso=o("SegformerFeatureExtractor"),vso=o(" (SegFormer model)"),Fso=l(),th=a("li"),ste=a("strong"),Tso=o("speech_to_text"),Mso=o(" \u2014 "),AB=a("a"),Eso=o("Speech2TextFeatureExtractor"),Cso=o(" (Speech2Text model)"),wso=l(),ah=a("li"),lte=a("strong"),Aso=o("swin"),yso=o(" \u2014 "),yB=a("a"),Lso=o("ViTFeatureExtractor"),xso=o(" (Swin model)"),$so=l(),nh=a("li"),ite=a("strong"),kso=o("van"),Sso=o(" \u2014 "),LB=a("a"),Rso=o("ConvNextFeatureExtractor"),Bso=o(" (VAN model)"),Pso=l(),sh=a("li"),dte=a("strong"),Iso=o("vit"),qso=o(" \u2014 "),xB=a("a"),Nso=o("ViTFeatureExtractor"),jso=o(" (ViT model)"),Dso=l(),lh=a("li"),cte=a("strong"),Gso=o("vit_mae"),Oso=o(" \u2014 "),$B=a("a"),Vso=o("ViTFeatureExtractor"),Xso=o(" (ViTMAE model)"),zso=l(),ih=a("li"),fte=a("strong"),Qso=o("wav2vec2"),Wso=o(" \u2014 "),kB=a("a"),Hso=o("Wav2Vec2FeatureExtractor"),Uso=o(" (Wav2Vec2 model)"),Jso=l(),F(dh.$$.fragment),Yso=l(),F(ch.$$.fragment),Kso=l(),fh=a("div"),F(IA.$$.fragment),Zso=l(),mte=a("p"),elo=o("Register a new feature extractor for this class."),eBe=l(),gi=a("h2"),mh=a("a"),gte=a("span"),F(qA.$$.fragment),olo=l(),hte=a("span"),rlo=o("AutoProcessor"),oBe=l(),wo=a("div"),F(NA.$$.fragment),tlo=l(),jA=a("p"),alo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SB=a("a"),nlo=o("AutoProcessor.from_pretrained()"),slo=o(" class method."),llo=l(),DA=a("p"),ilo=o("This class cannot be instantiated directly using "),pte=a("code"),dlo=o("__init__()"),clo=o(" (throws an error)."),flo=l(),ze=a("div"),F(GA.$$.fragment),mlo=l(),ute=a("p"),glo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),hlo=l(),hi=a("p"),plo=o("The processor class to instantiate is selected based on the "),_te=a("code"),ulo=o("model_type"),_lo=o(` property of the config object (either
passed as an argument or loaded from `),bte=a("code"),blo=o("pretrained_model_name_or_path"),vlo=o(" if possible):"),Flo=l(),be=a("ul"),gh=a("li"),vte=a("strong"),Tlo=o("clip"),Mlo=o(" \u2014 "),RB=a("a"),Elo=o("CLIPProcessor"),Clo=o(" (CLIP model)"),wlo=l(),hh=a("li"),Fte=a("strong"),Alo=o("layoutlmv2"),ylo=o(" \u2014 "),BB=a("a"),Llo=o("LayoutLMv2Processor"),xlo=o(" (LayoutLMv2 model)"),$lo=l(),ph=a("li"),Tte=a("strong"),klo=o("layoutxlm"),Slo=o(" \u2014 "),PB=a("a"),Rlo=o("LayoutXLMProcessor"),Blo=o(" (LayoutXLM model)"),Plo=l(),uh=a("li"),Mte=a("strong"),Ilo=o("sew"),qlo=o(" \u2014 "),IB=a("a"),Nlo=o("Wav2Vec2Processor"),jlo=o(" (SEW model)"),Dlo=l(),_h=a("li"),Ete=a("strong"),Glo=o("sew-d"),Olo=o(" \u2014 "),qB=a("a"),Vlo=o("Wav2Vec2Processor"),Xlo=o(" (SEW-D model)"),zlo=l(),bh=a("li"),Cte=a("strong"),Qlo=o("speech_to_text"),Wlo=o(" \u2014 "),NB=a("a"),Hlo=o("Speech2TextProcessor"),Ulo=o(" (Speech2Text model)"),Jlo=l(),vh=a("li"),wte=a("strong"),Ylo=o("speech_to_text_2"),Klo=o(" \u2014 "),jB=a("a"),Zlo=o("Speech2Text2Processor"),eio=o(" (Speech2Text2 model)"),oio=l(),Fh=a("li"),Ate=a("strong"),rio=o("trocr"),tio=o(" \u2014 "),DB=a("a"),aio=o("TrOCRProcessor"),nio=o(" (TrOCR model)"),sio=l(),Th=a("li"),yte=a("strong"),lio=o("unispeech"),iio=o(" \u2014 "),GB=a("a"),dio=o("Wav2Vec2Processor"),cio=o(" (UniSpeech model)"),fio=l(),Mh=a("li"),Lte=a("strong"),mio=o("unispeech-sat"),gio=o(" \u2014 "),OB=a("a"),hio=o("Wav2Vec2Processor"),pio=o(" (UniSpeechSat model)"),uio=l(),Eh=a("li"),xte=a("strong"),_io=o("vilt"),bio=o(" \u2014 "),VB=a("a"),vio=o("ViltProcessor"),Fio=o(" (ViLT model)"),Tio=l(),Ch=a("li"),$te=a("strong"),Mio=o("vision-text-dual-encoder"),Eio=o(" \u2014 "),XB=a("a"),Cio=o("VisionTextDualEncoderProcessor"),wio=o(" (VisionTextDualEncoder model)"),Aio=l(),wh=a("li"),kte=a("strong"),yio=o("wav2vec2"),Lio=o(" \u2014 "),zB=a("a"),xio=o("Wav2Vec2Processor"),$io=o(" (Wav2Vec2 model)"),kio=l(),Ah=a("li"),Ste=a("strong"),Sio=o("wavlm"),Rio=o(" \u2014 "),QB=a("a"),Bio=o("Wav2Vec2Processor"),Pio=o(" (WavLM model)"),Iio=l(),F(yh.$$.fragment),qio=l(),F(Lh.$$.fragment),Nio=l(),xh=a("div"),F(OA.$$.fragment),jio=l(),Rte=a("p"),Dio=o("Register a new processor for this class."),rBe=l(),pi=a("h2"),$h=a("a"),Bte=a("span"),F(VA.$$.fragment),Gio=l(),Pte=a("span"),Oio=o("AutoModel"),tBe=l(),Ao=a("div"),F(XA.$$.fragment),Vio=l(),ui=a("p"),Xio=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WB=a("a"),zio=o("from_pretrained()"),Qio=o(" class method or the "),HB=a("a"),Wio=o("from_config()"),Hio=o(` class
method.`),Uio=l(),zA=a("p"),Jio=o("This class cannot be instantiated directly using "),Ite=a("code"),Yio=o("__init__()"),Kio=o(" (throws an error)."),Zio=l(),Kr=a("div"),F(QA.$$.fragment),edo=l(),qte=a("p"),odo=o("Instantiates one of the base model classes of the library from a configuration."),rdo=l(),_i=a("p"),tdo=o(`Note:
Loading a model from its configuration file does `),Nte=a("strong"),ado=o("not"),ndo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UB=a("a"),sdo=o("from_pretrained()"),ldo=o(" to load the model weights."),ido=l(),F(kh.$$.fragment),ddo=l(),Qe=a("div"),F(WA.$$.fragment),cdo=l(),jte=a("p"),fdo=o("Instantiate one of the base model classes of the library from a pretrained model."),mdo=l(),Ma=a("p"),gdo=o("The model class to instantiate is selected based on the "),Dte=a("code"),hdo=o("model_type"),pdo=o(` property of the config object (either
passed as an argument or loaded from `),Gte=a("code"),udo=o("pretrained_model_name_or_path"),_do=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ote=a("code"),bdo=o("pretrained_model_name_or_path"),vdo=o(":"),Fdo=l(),x=a("ul"),Sh=a("li"),Vte=a("strong"),Tdo=o("albert"),Mdo=o(" \u2014 "),JB=a("a"),Edo=o("AlbertModel"),Cdo=o(" (ALBERT model)"),wdo=l(),Rh=a("li"),Xte=a("strong"),Ado=o("bart"),ydo=o(" \u2014 "),YB=a("a"),Ldo=o("BartModel"),xdo=o(" (BART model)"),$do=l(),Bh=a("li"),zte=a("strong"),kdo=o("beit"),Sdo=o(" \u2014 "),KB=a("a"),Rdo=o("BeitModel"),Bdo=o(" (BEiT model)"),Pdo=l(),Ph=a("li"),Qte=a("strong"),Ido=o("bert"),qdo=o(" \u2014 "),ZB=a("a"),Ndo=o("BertModel"),jdo=o(" (BERT model)"),Ddo=l(),Ih=a("li"),Wte=a("strong"),Gdo=o("bert-generation"),Odo=o(" \u2014 "),eP=a("a"),Vdo=o("BertGenerationEncoder"),Xdo=o(" (Bert Generation model)"),zdo=l(),qh=a("li"),Hte=a("strong"),Qdo=o("big_bird"),Wdo=o(" \u2014 "),oP=a("a"),Hdo=o("BigBirdModel"),Udo=o(" (BigBird model)"),Jdo=l(),Nh=a("li"),Ute=a("strong"),Ydo=o("bigbird_pegasus"),Kdo=o(" \u2014 "),rP=a("a"),Zdo=o("BigBirdPegasusModel"),eco=o(" (BigBirdPegasus model)"),oco=l(),jh=a("li"),Jte=a("strong"),rco=o("blenderbot"),tco=o(" \u2014 "),tP=a("a"),aco=o("BlenderbotModel"),nco=o(" (Blenderbot model)"),sco=l(),Dh=a("li"),Yte=a("strong"),lco=o("blenderbot-small"),ico=o(" \u2014 "),aP=a("a"),dco=o("BlenderbotSmallModel"),cco=o(" (BlenderbotSmall model)"),fco=l(),Gh=a("li"),Kte=a("strong"),mco=o("camembert"),gco=o(" \u2014 "),nP=a("a"),hco=o("CamembertModel"),pco=o(" (CamemBERT model)"),uco=l(),Oh=a("li"),Zte=a("strong"),_co=o("canine"),bco=o(" \u2014 "),sP=a("a"),vco=o("CanineModel"),Fco=o(" (Canine model)"),Tco=l(),Vh=a("li"),eae=a("strong"),Mco=o("clip"),Eco=o(" \u2014 "),lP=a("a"),Cco=o("CLIPModel"),wco=o(" (CLIP model)"),Aco=l(),Xh=a("li"),oae=a("strong"),yco=o("convbert"),Lco=o(" \u2014 "),iP=a("a"),xco=o("ConvBertModel"),$co=o(" (ConvBERT model)"),kco=l(),zh=a("li"),rae=a("strong"),Sco=o("convnext"),Rco=o(" \u2014 "),dP=a("a"),Bco=o("ConvNextModel"),Pco=o(" (ConvNext model)"),Ico=l(),Qh=a("li"),tae=a("strong"),qco=o("ctrl"),Nco=o(" \u2014 "),cP=a("a"),jco=o("CTRLModel"),Dco=o(" (CTRL model)"),Gco=l(),Wh=a("li"),aae=a("strong"),Oco=o("data2vec-audio"),Vco=o(" \u2014 "),fP=a("a"),Xco=o("Data2VecAudioModel"),zco=o(" (Data2VecAudio model)"),Qco=l(),Hh=a("li"),nae=a("strong"),Wco=o("data2vec-text"),Hco=o(" \u2014 "),mP=a("a"),Uco=o("Data2VecTextModel"),Jco=o(" (Data2VecText model)"),Yco=l(),Uh=a("li"),sae=a("strong"),Kco=o("data2vec-vision"),Zco=o(" \u2014 "),gP=a("a"),efo=o("Data2VecVisionModel"),ofo=o(" (Data2VecVision model)"),rfo=l(),Jh=a("li"),lae=a("strong"),tfo=o("deberta"),afo=o(" \u2014 "),hP=a("a"),nfo=o("DebertaModel"),sfo=o(" (DeBERTa model)"),lfo=l(),Yh=a("li"),iae=a("strong"),ifo=o("deberta-v2"),dfo=o(" \u2014 "),pP=a("a"),cfo=o("DebertaV2Model"),ffo=o(" (DeBERTa-v2 model)"),mfo=l(),Kh=a("li"),dae=a("strong"),gfo=o("decision_transformer"),hfo=o(" \u2014 "),uP=a("a"),pfo=o("DecisionTransformerModel"),ufo=o(" (Decision Transformer model)"),_fo=l(),Zh=a("li"),cae=a("strong"),bfo=o("deit"),vfo=o(" \u2014 "),_P=a("a"),Ffo=o("DeiTModel"),Tfo=o(" (DeiT model)"),Mfo=l(),ep=a("li"),fae=a("strong"),Efo=o("detr"),Cfo=o(" \u2014 "),bP=a("a"),wfo=o("DetrModel"),Afo=o(" (DETR model)"),yfo=l(),op=a("li"),mae=a("strong"),Lfo=o("distilbert"),xfo=o(" \u2014 "),vP=a("a"),$fo=o("DistilBertModel"),kfo=o(" (DistilBERT model)"),Sfo=l(),rp=a("li"),gae=a("strong"),Rfo=o("dpr"),Bfo=o(" \u2014 "),FP=a("a"),Pfo=o("DPRQuestionEncoder"),Ifo=o(" (DPR model)"),qfo=l(),tp=a("li"),hae=a("strong"),Nfo=o("dpt"),jfo=o(" \u2014 "),TP=a("a"),Dfo=o("DPTModel"),Gfo=o(" (DPT model)"),Ofo=l(),ap=a("li"),pae=a("strong"),Vfo=o("electra"),Xfo=o(" \u2014 "),MP=a("a"),zfo=o("ElectraModel"),Qfo=o(" (ELECTRA model)"),Wfo=l(),np=a("li"),uae=a("strong"),Hfo=o("flaubert"),Ufo=o(" \u2014 "),EP=a("a"),Jfo=o("FlaubertModel"),Yfo=o(" (FlauBERT model)"),Kfo=l(),sp=a("li"),_ae=a("strong"),Zfo=o("fnet"),emo=o(" \u2014 "),CP=a("a"),omo=o("FNetModel"),rmo=o(" (FNet model)"),tmo=l(),lp=a("li"),bae=a("strong"),amo=o("fsmt"),nmo=o(" \u2014 "),wP=a("a"),smo=o("FSMTModel"),lmo=o(" (FairSeq Machine-Translation model)"),imo=l(),ys=a("li"),vae=a("strong"),dmo=o("funnel"),cmo=o(" \u2014 "),AP=a("a"),fmo=o("FunnelModel"),mmo=o(" or "),yP=a("a"),gmo=o("FunnelBaseModel"),hmo=o(" (Funnel Transformer model)"),pmo=l(),ip=a("li"),Fae=a("strong"),umo=o("glpn"),_mo=o(" \u2014 "),LP=a("a"),bmo=o("GLPNModel"),vmo=o(" (GLPN model)"),Fmo=l(),dp=a("li"),Tae=a("strong"),Tmo=o("gpt2"),Mmo=o(" \u2014 "),xP=a("a"),Emo=o("GPT2Model"),Cmo=o(" (OpenAI GPT-2 model)"),wmo=l(),cp=a("li"),Mae=a("strong"),Amo=o("gpt_neo"),ymo=o(" \u2014 "),$P=a("a"),Lmo=o("GPTNeoModel"),xmo=o(" (GPT Neo model)"),$mo=l(),fp=a("li"),Eae=a("strong"),kmo=o("gpt_neox"),Smo=o(" \u2014 "),kP=a("a"),Rmo=o("GPTNeoXModel"),Bmo=o(" (GPTNeoX model)"),Pmo=l(),mp=a("li"),Cae=a("strong"),Imo=o("gptj"),qmo=o(" \u2014 "),SP=a("a"),Nmo=o("GPTJModel"),jmo=o(" (GPT-J model)"),Dmo=l(),gp=a("li"),wae=a("strong"),Gmo=o("hubert"),Omo=o(" \u2014 "),RP=a("a"),Vmo=o("HubertModel"),Xmo=o(" (Hubert model)"),zmo=l(),hp=a("li"),Aae=a("strong"),Qmo=o("ibert"),Wmo=o(" \u2014 "),BP=a("a"),Hmo=o("IBertModel"),Umo=o(" (I-BERT model)"),Jmo=l(),pp=a("li"),yae=a("strong"),Ymo=o("imagegpt"),Kmo=o(" \u2014 "),PP=a("a"),Zmo=o("ImageGPTModel"),ego=o(" (ImageGPT model)"),ogo=l(),up=a("li"),Lae=a("strong"),rgo=o("layoutlm"),tgo=o(" \u2014 "),IP=a("a"),ago=o("LayoutLMModel"),ngo=o(" (LayoutLM model)"),sgo=l(),_p=a("li"),xae=a("strong"),lgo=o("layoutlmv2"),igo=o(" \u2014 "),qP=a("a"),dgo=o("LayoutLMv2Model"),cgo=o(" (LayoutLMv2 model)"),fgo=l(),bp=a("li"),$ae=a("strong"),mgo=o("led"),ggo=o(" \u2014 "),NP=a("a"),hgo=o("LEDModel"),pgo=o(" (LED model)"),ugo=l(),vp=a("li"),kae=a("strong"),_go=o("longformer"),bgo=o(" \u2014 "),jP=a("a"),vgo=o("LongformerModel"),Fgo=o(" (Longformer model)"),Tgo=l(),Fp=a("li"),Sae=a("strong"),Mgo=o("luke"),Ego=o(" \u2014 "),DP=a("a"),Cgo=o("LukeModel"),wgo=o(" (LUKE model)"),Ago=l(),Tp=a("li"),Rae=a("strong"),ygo=o("lxmert"),Lgo=o(" \u2014 "),GP=a("a"),xgo=o("LxmertModel"),$go=o(" (LXMERT model)"),kgo=l(),Mp=a("li"),Bae=a("strong"),Sgo=o("m2m_100"),Rgo=o(" \u2014 "),OP=a("a"),Bgo=o("M2M100Model"),Pgo=o(" (M2M100 model)"),Igo=l(),Ep=a("li"),Pae=a("strong"),qgo=o("marian"),Ngo=o(" \u2014 "),VP=a("a"),jgo=o("MarianModel"),Dgo=o(" (Marian model)"),Ggo=l(),Cp=a("li"),Iae=a("strong"),Ogo=o("maskformer"),Vgo=o(" \u2014 "),XP=a("a"),Xgo=o("MaskFormerModel"),zgo=o(" (MaskFormer model)"),Qgo=l(),wp=a("li"),qae=a("strong"),Wgo=o("mbart"),Hgo=o(" \u2014 "),zP=a("a"),Ugo=o("MBartModel"),Jgo=o(" (mBART model)"),Ygo=l(),Ap=a("li"),Nae=a("strong"),Kgo=o("megatron-bert"),Zgo=o(" \u2014 "),QP=a("a"),eho=o("MegatronBertModel"),oho=o(" (MegatronBert model)"),rho=l(),yp=a("li"),jae=a("strong"),tho=o("mobilebert"),aho=o(" \u2014 "),WP=a("a"),nho=o("MobileBertModel"),sho=o(" (MobileBERT model)"),lho=l(),Lp=a("li"),Dae=a("strong"),iho=o("mpnet"),dho=o(" \u2014 "),HP=a("a"),cho=o("MPNetModel"),fho=o(" (MPNet model)"),mho=l(),xp=a("li"),Gae=a("strong"),gho=o("mt5"),hho=o(" \u2014 "),UP=a("a"),pho=o("MT5Model"),uho=o(" (mT5 model)"),_ho=l(),$p=a("li"),Oae=a("strong"),bho=o("nystromformer"),vho=o(" \u2014 "),JP=a("a"),Fho=o("NystromformerModel"),Tho=o(" (Nystromformer model)"),Mho=l(),kp=a("li"),Vae=a("strong"),Eho=o("openai-gpt"),Cho=o(" \u2014 "),YP=a("a"),who=o("OpenAIGPTModel"),Aho=o(" (OpenAI GPT model)"),yho=l(),Sp=a("li"),Xae=a("strong"),Lho=o("pegasus"),xho=o(" \u2014 "),KP=a("a"),$ho=o("PegasusModel"),kho=o(" (Pegasus model)"),Sho=l(),Rp=a("li"),zae=a("strong"),Rho=o("perceiver"),Bho=o(" \u2014 "),ZP=a("a"),Pho=o("PerceiverModel"),Iho=o(" (Perceiver model)"),qho=l(),Bp=a("li"),Qae=a("strong"),Nho=o("plbart"),jho=o(" \u2014 "),eI=a("a"),Dho=o("PLBartModel"),Gho=o(" (PLBart model)"),Oho=l(),Pp=a("li"),Wae=a("strong"),Vho=o("poolformer"),Xho=o(" \u2014 "),oI=a("a"),zho=o("PoolFormerModel"),Qho=o(" (PoolFormer model)"),Who=l(),Ip=a("li"),Hae=a("strong"),Hho=o("prophetnet"),Uho=o(" \u2014 "),rI=a("a"),Jho=o("ProphetNetModel"),Yho=o(" (ProphetNet model)"),Kho=l(),qp=a("li"),Uae=a("strong"),Zho=o("qdqbert"),epo=o(" \u2014 "),tI=a("a"),opo=o("QDQBertModel"),rpo=o(" (QDQBert model)"),tpo=l(),Np=a("li"),Jae=a("strong"),apo=o("reformer"),npo=o(" \u2014 "),aI=a("a"),spo=o("ReformerModel"),lpo=o(" (Reformer model)"),ipo=l(),jp=a("li"),Yae=a("strong"),dpo=o("regnet"),cpo=o(" \u2014 "),nI=a("a"),fpo=o("RegNetModel"),mpo=o(" (RegNet model)"),gpo=l(),Dp=a("li"),Kae=a("strong"),hpo=o("rembert"),ppo=o(" \u2014 "),sI=a("a"),upo=o("RemBertModel"),_po=o(" (RemBERT model)"),bpo=l(),Gp=a("li"),Zae=a("strong"),vpo=o("resnet"),Fpo=o(" \u2014 "),lI=a("a"),Tpo=o("ResNetModel"),Mpo=o(" (ResNet model)"),Epo=l(),Op=a("li"),ene=a("strong"),Cpo=o("retribert"),wpo=o(" \u2014 "),iI=a("a"),Apo=o("RetriBertModel"),ypo=o(" (RetriBERT model)"),Lpo=l(),Vp=a("li"),one=a("strong"),xpo=o("roberta"),$po=o(" \u2014 "),dI=a("a"),kpo=o("RobertaModel"),Spo=o(" (RoBERTa model)"),Rpo=l(),Xp=a("li"),rne=a("strong"),Bpo=o("roformer"),Ppo=o(" \u2014 "),cI=a("a"),Ipo=o("RoFormerModel"),qpo=o(" (RoFormer model)"),Npo=l(),zp=a("li"),tne=a("strong"),jpo=o("segformer"),Dpo=o(" \u2014 "),fI=a("a"),Gpo=o("SegformerModel"),Opo=o(" (SegFormer model)"),Vpo=l(),Qp=a("li"),ane=a("strong"),Xpo=o("sew"),zpo=o(" \u2014 "),mI=a("a"),Qpo=o("SEWModel"),Wpo=o(" (SEW model)"),Hpo=l(),Wp=a("li"),nne=a("strong"),Upo=o("sew-d"),Jpo=o(" \u2014 "),gI=a("a"),Ypo=o("SEWDModel"),Kpo=o(" (SEW-D model)"),Zpo=l(),Hp=a("li"),sne=a("strong"),euo=o("speech_to_text"),ouo=o(" \u2014 "),hI=a("a"),ruo=o("Speech2TextModel"),tuo=o(" (Speech2Text model)"),auo=l(),Up=a("li"),lne=a("strong"),nuo=o("splinter"),suo=o(" \u2014 "),pI=a("a"),luo=o("SplinterModel"),iuo=o(" (Splinter model)"),duo=l(),Jp=a("li"),ine=a("strong"),cuo=o("squeezebert"),fuo=o(" \u2014 "),uI=a("a"),muo=o("SqueezeBertModel"),guo=o(" (SqueezeBERT model)"),huo=l(),Yp=a("li"),dne=a("strong"),puo=o("swin"),uuo=o(" \u2014 "),_I=a("a"),_uo=o("SwinModel"),buo=o(" (Swin model)"),vuo=l(),Kp=a("li"),cne=a("strong"),Fuo=o("t5"),Tuo=o(" \u2014 "),bI=a("a"),Muo=o("T5Model"),Euo=o(" (T5 model)"),Cuo=l(),Zp=a("li"),fne=a("strong"),wuo=o("tapas"),Auo=o(" \u2014 "),vI=a("a"),yuo=o("TapasModel"),Luo=o(" (TAPAS model)"),xuo=l(),eu=a("li"),mne=a("strong"),$uo=o("transfo-xl"),kuo=o(" \u2014 "),FI=a("a"),Suo=o("TransfoXLModel"),Ruo=o(" (Transformer-XL model)"),Buo=l(),ou=a("li"),gne=a("strong"),Puo=o("unispeech"),Iuo=o(" \u2014 "),TI=a("a"),quo=o("UniSpeechModel"),Nuo=o(" (UniSpeech model)"),juo=l(),ru=a("li"),hne=a("strong"),Duo=o("unispeech-sat"),Guo=o(" \u2014 "),MI=a("a"),Ouo=o("UniSpeechSatModel"),Vuo=o(" (UniSpeechSat model)"),Xuo=l(),tu=a("li"),pne=a("strong"),zuo=o("van"),Quo=o(" \u2014 "),EI=a("a"),Wuo=o("VanModel"),Huo=o(" (VAN model)"),Uuo=l(),au=a("li"),une=a("strong"),Juo=o("vilt"),Yuo=o(" \u2014 "),CI=a("a"),Kuo=o("ViltModel"),Zuo=o(" (ViLT model)"),e_o=l(),nu=a("li"),_ne=a("strong"),o_o=o("vision-text-dual-encoder"),r_o=o(" \u2014 "),wI=a("a"),t_o=o("VisionTextDualEncoderModel"),a_o=o(" (VisionTextDualEncoder model)"),n_o=l(),su=a("li"),bne=a("strong"),s_o=o("visual_bert"),l_o=o(" \u2014 "),AI=a("a"),i_o=o("VisualBertModel"),d_o=o(" (VisualBert model)"),c_o=l(),lu=a("li"),vne=a("strong"),f_o=o("vit"),m_o=o(" \u2014 "),yI=a("a"),g_o=o("ViTModel"),h_o=o(" (ViT model)"),p_o=l(),iu=a("li"),Fne=a("strong"),u_o=o("vit_mae"),__o=o(" \u2014 "),LI=a("a"),b_o=o("ViTMAEModel"),v_o=o(" (ViTMAE model)"),F_o=l(),du=a("li"),Tne=a("strong"),T_o=o("wav2vec2"),M_o=o(" \u2014 "),xI=a("a"),E_o=o("Wav2Vec2Model"),C_o=o(" (Wav2Vec2 model)"),w_o=l(),cu=a("li"),Mne=a("strong"),A_o=o("wavlm"),y_o=o(" \u2014 "),$I=a("a"),L_o=o("WavLMModel"),x_o=o(" (WavLM model)"),$_o=l(),fu=a("li"),Ene=a("strong"),k_o=o("xglm"),S_o=o(" \u2014 "),kI=a("a"),R_o=o("XGLMModel"),B_o=o(" (XGLM model)"),P_o=l(),mu=a("li"),Cne=a("strong"),I_o=o("xlm"),q_o=o(" \u2014 "),SI=a("a"),N_o=o("XLMModel"),j_o=o(" (XLM model)"),D_o=l(),gu=a("li"),wne=a("strong"),G_o=o("xlm-prophetnet"),O_o=o(" \u2014 "),RI=a("a"),V_o=o("XLMProphetNetModel"),X_o=o(" (XLMProphetNet model)"),z_o=l(),hu=a("li"),Ane=a("strong"),Q_o=o("xlm-roberta"),W_o=o(" \u2014 "),BI=a("a"),H_o=o("XLMRobertaModel"),U_o=o(" (XLM-RoBERTa model)"),J_o=l(),pu=a("li"),yne=a("strong"),Y_o=o("xlm-roberta-xl"),K_o=o(" \u2014 "),PI=a("a"),Z_o=o("XLMRobertaXLModel"),e6o=o(" (XLM-RoBERTa-XL model)"),o6o=l(),uu=a("li"),Lne=a("strong"),r6o=o("xlnet"),t6o=o(" \u2014 "),II=a("a"),a6o=o("XLNetModel"),n6o=o(" (XLNet model)"),s6o=l(),_u=a("li"),xne=a("strong"),l6o=o("yoso"),i6o=o(" \u2014 "),qI=a("a"),d6o=o("YosoModel"),c6o=o(" (YOSO model)"),f6o=l(),bu=a("p"),m6o=o("The model is set in evaluation mode by default using "),$ne=a("code"),g6o=o("model.eval()"),h6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kne=a("code"),p6o=o("model.train()"),u6o=l(),F(vu.$$.fragment),aBe=l(),bi=a("h2"),Fu=a("a"),Sne=a("span"),F(HA.$$.fragment),_6o=l(),Rne=a("span"),b6o=o("AutoModelForPreTraining"),nBe=l(),yo=a("div"),F(UA.$$.fragment),v6o=l(),vi=a("p"),F6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NI=a("a"),T6o=o("from_pretrained()"),M6o=o(" class method or the "),jI=a("a"),E6o=o("from_config()"),C6o=o(` class
method.`),w6o=l(),JA=a("p"),A6o=o("This class cannot be instantiated directly using "),Bne=a("code"),y6o=o("__init__()"),L6o=o(" (throws an error)."),x6o=l(),Zr=a("div"),F(YA.$$.fragment),$6o=l(),Pne=a("p"),k6o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),S6o=l(),Fi=a("p"),R6o=o(`Note:
Loading a model from its configuration file does `),Ine=a("strong"),B6o=o("not"),P6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DI=a("a"),I6o=o("from_pretrained()"),q6o=o(" to load the model weights."),N6o=l(),F(Tu.$$.fragment),j6o=l(),We=a("div"),F(KA.$$.fragment),D6o=l(),qne=a("p"),G6o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),O6o=l(),Ea=a("p"),V6o=o("The model class to instantiate is selected based on the "),Nne=a("code"),X6o=o("model_type"),z6o=o(` property of the config object (either
passed as an argument or loaded from `),jne=a("code"),Q6o=o("pretrained_model_name_or_path"),W6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dne=a("code"),H6o=o("pretrained_model_name_or_path"),U6o=o(":"),J6o=l(),G=a("ul"),Mu=a("li"),Gne=a("strong"),Y6o=o("albert"),K6o=o(" \u2014 "),GI=a("a"),Z6o=o("AlbertForPreTraining"),e1o=o(" (ALBERT model)"),o1o=l(),Eu=a("li"),One=a("strong"),r1o=o("bart"),t1o=o(" \u2014 "),OI=a("a"),a1o=o("BartForConditionalGeneration"),n1o=o(" (BART model)"),s1o=l(),Cu=a("li"),Vne=a("strong"),l1o=o("bert"),i1o=o(" \u2014 "),VI=a("a"),d1o=o("BertForPreTraining"),c1o=o(" (BERT model)"),f1o=l(),wu=a("li"),Xne=a("strong"),m1o=o("big_bird"),g1o=o(" \u2014 "),XI=a("a"),h1o=o("BigBirdForPreTraining"),p1o=o(" (BigBird model)"),u1o=l(),Au=a("li"),zne=a("strong"),_1o=o("camembert"),b1o=o(" \u2014 "),zI=a("a"),v1o=o("CamembertForMaskedLM"),F1o=o(" (CamemBERT model)"),T1o=l(),yu=a("li"),Qne=a("strong"),M1o=o("ctrl"),E1o=o(" \u2014 "),QI=a("a"),C1o=o("CTRLLMHeadModel"),w1o=o(" (CTRL model)"),A1o=l(),Lu=a("li"),Wne=a("strong"),y1o=o("data2vec-text"),L1o=o(" \u2014 "),WI=a("a"),x1o=o("Data2VecTextForMaskedLM"),$1o=o(" (Data2VecText model)"),k1o=l(),xu=a("li"),Hne=a("strong"),S1o=o("deberta"),R1o=o(" \u2014 "),HI=a("a"),B1o=o("DebertaForMaskedLM"),P1o=o(" (DeBERTa model)"),I1o=l(),$u=a("li"),Une=a("strong"),q1o=o("deberta-v2"),N1o=o(" \u2014 "),UI=a("a"),j1o=o("DebertaV2ForMaskedLM"),D1o=o(" (DeBERTa-v2 model)"),G1o=l(),ku=a("li"),Jne=a("strong"),O1o=o("distilbert"),V1o=o(" \u2014 "),JI=a("a"),X1o=o("DistilBertForMaskedLM"),z1o=o(" (DistilBERT model)"),Q1o=l(),Su=a("li"),Yne=a("strong"),W1o=o("electra"),H1o=o(" \u2014 "),YI=a("a"),U1o=o("ElectraForPreTraining"),J1o=o(" (ELECTRA model)"),Y1o=l(),Ru=a("li"),Kne=a("strong"),K1o=o("flaubert"),Z1o=o(" \u2014 "),KI=a("a"),ebo=o("FlaubertWithLMHeadModel"),obo=o(" (FlauBERT model)"),rbo=l(),Bu=a("li"),Zne=a("strong"),tbo=o("fnet"),abo=o(" \u2014 "),ZI=a("a"),nbo=o("FNetForPreTraining"),sbo=o(" (FNet model)"),lbo=l(),Pu=a("li"),ese=a("strong"),ibo=o("fsmt"),dbo=o(" \u2014 "),eq=a("a"),cbo=o("FSMTForConditionalGeneration"),fbo=o(" (FairSeq Machine-Translation model)"),mbo=l(),Iu=a("li"),ose=a("strong"),gbo=o("funnel"),hbo=o(" \u2014 "),oq=a("a"),pbo=o("FunnelForPreTraining"),ubo=o(" (Funnel Transformer model)"),_bo=l(),qu=a("li"),rse=a("strong"),bbo=o("gpt2"),vbo=o(" \u2014 "),rq=a("a"),Fbo=o("GPT2LMHeadModel"),Tbo=o(" (OpenAI GPT-2 model)"),Mbo=l(),Nu=a("li"),tse=a("strong"),Ebo=o("ibert"),Cbo=o(" \u2014 "),tq=a("a"),wbo=o("IBertForMaskedLM"),Abo=o(" (I-BERT model)"),ybo=l(),ju=a("li"),ase=a("strong"),Lbo=o("layoutlm"),xbo=o(" \u2014 "),aq=a("a"),$bo=o("LayoutLMForMaskedLM"),kbo=o(" (LayoutLM model)"),Sbo=l(),Du=a("li"),nse=a("strong"),Rbo=o("longformer"),Bbo=o(" \u2014 "),nq=a("a"),Pbo=o("LongformerForMaskedLM"),Ibo=o(" (Longformer model)"),qbo=l(),Gu=a("li"),sse=a("strong"),Nbo=o("lxmert"),jbo=o(" \u2014 "),sq=a("a"),Dbo=o("LxmertForPreTraining"),Gbo=o(" (LXMERT model)"),Obo=l(),Ou=a("li"),lse=a("strong"),Vbo=o("megatron-bert"),Xbo=o(" \u2014 "),lq=a("a"),zbo=o("MegatronBertForPreTraining"),Qbo=o(" (MegatronBert model)"),Wbo=l(),Vu=a("li"),ise=a("strong"),Hbo=o("mobilebert"),Ubo=o(" \u2014 "),iq=a("a"),Jbo=o("MobileBertForPreTraining"),Ybo=o(" (MobileBERT model)"),Kbo=l(),Xu=a("li"),dse=a("strong"),Zbo=o("mpnet"),e2o=o(" \u2014 "),dq=a("a"),o2o=o("MPNetForMaskedLM"),r2o=o(" (MPNet model)"),t2o=l(),zu=a("li"),cse=a("strong"),a2o=o("openai-gpt"),n2o=o(" \u2014 "),cq=a("a"),s2o=o("OpenAIGPTLMHeadModel"),l2o=o(" (OpenAI GPT model)"),i2o=l(),Qu=a("li"),fse=a("strong"),d2o=o("retribert"),c2o=o(" \u2014 "),fq=a("a"),f2o=o("RetriBertModel"),m2o=o(" (RetriBERT model)"),g2o=l(),Wu=a("li"),mse=a("strong"),h2o=o("roberta"),p2o=o(" \u2014 "),mq=a("a"),u2o=o("RobertaForMaskedLM"),_2o=o(" (RoBERTa model)"),b2o=l(),Hu=a("li"),gse=a("strong"),v2o=o("squeezebert"),F2o=o(" \u2014 "),gq=a("a"),T2o=o("SqueezeBertForMaskedLM"),M2o=o(" (SqueezeBERT model)"),E2o=l(),Uu=a("li"),hse=a("strong"),C2o=o("t5"),w2o=o(" \u2014 "),hq=a("a"),A2o=o("T5ForConditionalGeneration"),y2o=o(" (T5 model)"),L2o=l(),Ju=a("li"),pse=a("strong"),x2o=o("tapas"),$2o=o(" \u2014 "),pq=a("a"),k2o=o("TapasForMaskedLM"),S2o=o(" (TAPAS model)"),R2o=l(),Yu=a("li"),use=a("strong"),B2o=o("transfo-xl"),P2o=o(" \u2014 "),uq=a("a"),I2o=o("TransfoXLLMHeadModel"),q2o=o(" (Transformer-XL model)"),N2o=l(),Ku=a("li"),_se=a("strong"),j2o=o("unispeech"),D2o=o(" \u2014 "),_q=a("a"),G2o=o("UniSpeechForPreTraining"),O2o=o(" (UniSpeech model)"),V2o=l(),Zu=a("li"),bse=a("strong"),X2o=o("unispeech-sat"),z2o=o(" \u2014 "),bq=a("a"),Q2o=o("UniSpeechSatForPreTraining"),W2o=o(" (UniSpeechSat model)"),H2o=l(),e_=a("li"),vse=a("strong"),U2o=o("visual_bert"),J2o=o(" \u2014 "),vq=a("a"),Y2o=o("VisualBertForPreTraining"),K2o=o(" (VisualBert model)"),Z2o=l(),o_=a("li"),Fse=a("strong"),e5o=o("vit_mae"),o5o=o(" \u2014 "),Fq=a("a"),r5o=o("ViTMAEForPreTraining"),t5o=o(" (ViTMAE model)"),a5o=l(),r_=a("li"),Tse=a("strong"),n5o=o("wav2vec2"),s5o=o(" \u2014 "),Tq=a("a"),l5o=o("Wav2Vec2ForPreTraining"),i5o=o(" (Wav2Vec2 model)"),d5o=l(),t_=a("li"),Mse=a("strong"),c5o=o("xlm"),f5o=o(" \u2014 "),Mq=a("a"),m5o=o("XLMWithLMHeadModel"),g5o=o(" (XLM model)"),h5o=l(),a_=a("li"),Ese=a("strong"),p5o=o("xlm-roberta"),u5o=o(" \u2014 "),Eq=a("a"),_5o=o("XLMRobertaForMaskedLM"),b5o=o(" (XLM-RoBERTa model)"),v5o=l(),n_=a("li"),Cse=a("strong"),F5o=o("xlm-roberta-xl"),T5o=o(" \u2014 "),Cq=a("a"),M5o=o("XLMRobertaXLForMaskedLM"),E5o=o(" (XLM-RoBERTa-XL model)"),C5o=l(),s_=a("li"),wse=a("strong"),w5o=o("xlnet"),A5o=o(" \u2014 "),wq=a("a"),y5o=o("XLNetLMHeadModel"),L5o=o(" (XLNet model)"),x5o=l(),l_=a("p"),$5o=o("The model is set in evaluation mode by default using "),Ase=a("code"),k5o=o("model.eval()"),S5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yse=a("code"),R5o=o("model.train()"),B5o=l(),F(i_.$$.fragment),sBe=l(),Ti=a("h2"),d_=a("a"),Lse=a("span"),F(ZA.$$.fragment),P5o=l(),xse=a("span"),I5o=o("AutoModelForCausalLM"),lBe=l(),Lo=a("div"),F(e0.$$.fragment),q5o=l(),Mi=a("p"),N5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aq=a("a"),j5o=o("from_pretrained()"),D5o=o(" class method or the "),yq=a("a"),G5o=o("from_config()"),O5o=o(` class
method.`),V5o=l(),o0=a("p"),X5o=o("This class cannot be instantiated directly using "),$se=a("code"),z5o=o("__init__()"),Q5o=o(" (throws an error)."),W5o=l(),et=a("div"),F(r0.$$.fragment),H5o=l(),kse=a("p"),U5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J5o=l(),Ei=a("p"),Y5o=o(`Note:
Loading a model from its configuration file does `),Sse=a("strong"),K5o=o("not"),Z5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lq=a("a"),evo=o("from_pretrained()"),ovo=o(" to load the model weights."),rvo=l(),F(c_.$$.fragment),tvo=l(),He=a("div"),F(t0.$$.fragment),avo=l(),Rse=a("p"),nvo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),svo=l(),Ca=a("p"),lvo=o("The model class to instantiate is selected based on the "),Bse=a("code"),ivo=o("model_type"),dvo=o(` property of the config object (either
passed as an argument or loaded from `),Pse=a("code"),cvo=o("pretrained_model_name_or_path"),fvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ise=a("code"),mvo=o("pretrained_model_name_or_path"),gvo=o(":"),hvo=l(),z=a("ul"),f_=a("li"),qse=a("strong"),pvo=o("bart"),uvo=o(" \u2014 "),xq=a("a"),_vo=o("BartForCausalLM"),bvo=o(" (BART model)"),vvo=l(),m_=a("li"),Nse=a("strong"),Fvo=o("bert"),Tvo=o(" \u2014 "),$q=a("a"),Mvo=o("BertLMHeadModel"),Evo=o(" (BERT model)"),Cvo=l(),g_=a("li"),jse=a("strong"),wvo=o("bert-generation"),Avo=o(" \u2014 "),kq=a("a"),yvo=o("BertGenerationDecoder"),Lvo=o(" (Bert Generation model)"),xvo=l(),h_=a("li"),Dse=a("strong"),$vo=o("big_bird"),kvo=o(" \u2014 "),Sq=a("a"),Svo=o("BigBirdForCausalLM"),Rvo=o(" (BigBird model)"),Bvo=l(),p_=a("li"),Gse=a("strong"),Pvo=o("bigbird_pegasus"),Ivo=o(" \u2014 "),Rq=a("a"),qvo=o("BigBirdPegasusForCausalLM"),Nvo=o(" (BigBirdPegasus model)"),jvo=l(),u_=a("li"),Ose=a("strong"),Dvo=o("blenderbot"),Gvo=o(" \u2014 "),Bq=a("a"),Ovo=o("BlenderbotForCausalLM"),Vvo=o(" (Blenderbot model)"),Xvo=l(),__=a("li"),Vse=a("strong"),zvo=o("blenderbot-small"),Qvo=o(" \u2014 "),Pq=a("a"),Wvo=o("BlenderbotSmallForCausalLM"),Hvo=o(" (BlenderbotSmall model)"),Uvo=l(),b_=a("li"),Xse=a("strong"),Jvo=o("camembert"),Yvo=o(" \u2014 "),Iq=a("a"),Kvo=o("CamembertForCausalLM"),Zvo=o(" (CamemBERT model)"),eFo=l(),v_=a("li"),zse=a("strong"),oFo=o("ctrl"),rFo=o(" \u2014 "),qq=a("a"),tFo=o("CTRLLMHeadModel"),aFo=o(" (CTRL model)"),nFo=l(),F_=a("li"),Qse=a("strong"),sFo=o("data2vec-text"),lFo=o(" \u2014 "),Nq=a("a"),iFo=o("Data2VecTextForCausalLM"),dFo=o(" (Data2VecText model)"),cFo=l(),T_=a("li"),Wse=a("strong"),fFo=o("electra"),mFo=o(" \u2014 "),jq=a("a"),gFo=o("ElectraForCausalLM"),hFo=o(" (ELECTRA model)"),pFo=l(),M_=a("li"),Hse=a("strong"),uFo=o("gpt2"),_Fo=o(" \u2014 "),Dq=a("a"),bFo=o("GPT2LMHeadModel"),vFo=o(" (OpenAI GPT-2 model)"),FFo=l(),E_=a("li"),Use=a("strong"),TFo=o("gpt_neo"),MFo=o(" \u2014 "),Gq=a("a"),EFo=o("GPTNeoForCausalLM"),CFo=o(" (GPT Neo model)"),wFo=l(),C_=a("li"),Jse=a("strong"),AFo=o("gpt_neox"),yFo=o(" \u2014 "),Oq=a("a"),LFo=o("GPTNeoXForCausalLM"),xFo=o(" (GPTNeoX model)"),$Fo=l(),w_=a("li"),Yse=a("strong"),kFo=o("gptj"),SFo=o(" \u2014 "),Vq=a("a"),RFo=o("GPTJForCausalLM"),BFo=o(" (GPT-J model)"),PFo=l(),A_=a("li"),Kse=a("strong"),IFo=o("marian"),qFo=o(" \u2014 "),Xq=a("a"),NFo=o("MarianForCausalLM"),jFo=o(" (Marian model)"),DFo=l(),y_=a("li"),Zse=a("strong"),GFo=o("mbart"),OFo=o(" \u2014 "),zq=a("a"),VFo=o("MBartForCausalLM"),XFo=o(" (mBART model)"),zFo=l(),L_=a("li"),ele=a("strong"),QFo=o("megatron-bert"),WFo=o(" \u2014 "),Qq=a("a"),HFo=o("MegatronBertForCausalLM"),UFo=o(" (MegatronBert model)"),JFo=l(),x_=a("li"),ole=a("strong"),YFo=o("openai-gpt"),KFo=o(" \u2014 "),Wq=a("a"),ZFo=o("OpenAIGPTLMHeadModel"),eTo=o(" (OpenAI GPT model)"),oTo=l(),$_=a("li"),rle=a("strong"),rTo=o("pegasus"),tTo=o(" \u2014 "),Hq=a("a"),aTo=o("PegasusForCausalLM"),nTo=o(" (Pegasus model)"),sTo=l(),k_=a("li"),tle=a("strong"),lTo=o("plbart"),iTo=o(" \u2014 "),Uq=a("a"),dTo=o("PLBartForCausalLM"),cTo=o(" (PLBart model)"),fTo=l(),S_=a("li"),ale=a("strong"),mTo=o("prophetnet"),gTo=o(" \u2014 "),Jq=a("a"),hTo=o("ProphetNetForCausalLM"),pTo=o(" (ProphetNet model)"),uTo=l(),R_=a("li"),nle=a("strong"),_To=o("qdqbert"),bTo=o(" \u2014 "),Yq=a("a"),vTo=o("QDQBertLMHeadModel"),FTo=o(" (QDQBert model)"),TTo=l(),B_=a("li"),sle=a("strong"),MTo=o("reformer"),ETo=o(" \u2014 "),Kq=a("a"),CTo=o("ReformerModelWithLMHead"),wTo=o(" (Reformer model)"),ATo=l(),P_=a("li"),lle=a("strong"),yTo=o("rembert"),LTo=o(" \u2014 "),Zq=a("a"),xTo=o("RemBertForCausalLM"),$To=o(" (RemBERT model)"),kTo=l(),I_=a("li"),ile=a("strong"),STo=o("roberta"),RTo=o(" \u2014 "),eN=a("a"),BTo=o("RobertaForCausalLM"),PTo=o(" (RoBERTa model)"),ITo=l(),q_=a("li"),dle=a("strong"),qTo=o("roformer"),NTo=o(" \u2014 "),oN=a("a"),jTo=o("RoFormerForCausalLM"),DTo=o(" (RoFormer model)"),GTo=l(),N_=a("li"),cle=a("strong"),OTo=o("speech_to_text_2"),VTo=o(" \u2014 "),rN=a("a"),XTo=o("Speech2Text2ForCausalLM"),zTo=o(" (Speech2Text2 model)"),QTo=l(),j_=a("li"),fle=a("strong"),WTo=o("transfo-xl"),HTo=o(" \u2014 "),tN=a("a"),UTo=o("TransfoXLLMHeadModel"),JTo=o(" (Transformer-XL model)"),YTo=l(),D_=a("li"),mle=a("strong"),KTo=o("trocr"),ZTo=o(" \u2014 "),aN=a("a"),e9o=o("TrOCRForCausalLM"),o9o=o(" (TrOCR model)"),r9o=l(),G_=a("li"),gle=a("strong"),t9o=o("xglm"),a9o=o(" \u2014 "),nN=a("a"),n9o=o("XGLMForCausalLM"),s9o=o(" (XGLM model)"),l9o=l(),O_=a("li"),hle=a("strong"),i9o=o("xlm"),d9o=o(" \u2014 "),sN=a("a"),c9o=o("XLMWithLMHeadModel"),f9o=o(" (XLM model)"),m9o=l(),V_=a("li"),ple=a("strong"),g9o=o("xlm-prophetnet"),h9o=o(" \u2014 "),lN=a("a"),p9o=o("XLMProphetNetForCausalLM"),u9o=o(" (XLMProphetNet model)"),_9o=l(),X_=a("li"),ule=a("strong"),b9o=o("xlm-roberta"),v9o=o(" \u2014 "),iN=a("a"),F9o=o("XLMRobertaForCausalLM"),T9o=o(" (XLM-RoBERTa model)"),M9o=l(),z_=a("li"),_le=a("strong"),E9o=o("xlm-roberta-xl"),C9o=o(" \u2014 "),dN=a("a"),w9o=o("XLMRobertaXLForCausalLM"),A9o=o(" (XLM-RoBERTa-XL model)"),y9o=l(),Q_=a("li"),ble=a("strong"),L9o=o("xlnet"),x9o=o(" \u2014 "),cN=a("a"),$9o=o("XLNetLMHeadModel"),k9o=o(" (XLNet model)"),S9o=l(),W_=a("p"),R9o=o("The model is set in evaluation mode by default using "),vle=a("code"),B9o=o("model.eval()"),P9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fle=a("code"),I9o=o("model.train()"),q9o=l(),F(H_.$$.fragment),iBe=l(),Ci=a("h2"),U_=a("a"),Tle=a("span"),F(a0.$$.fragment),N9o=l(),Mle=a("span"),j9o=o("AutoModelForMaskedLM"),dBe=l(),xo=a("div"),F(n0.$$.fragment),D9o=l(),wi=a("p"),G9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fN=a("a"),O9o=o("from_pretrained()"),V9o=o(" class method or the "),mN=a("a"),X9o=o("from_config()"),z9o=o(` class
method.`),Q9o=l(),s0=a("p"),W9o=o("This class cannot be instantiated directly using "),Ele=a("code"),H9o=o("__init__()"),U9o=o(" (throws an error)."),J9o=l(),ot=a("div"),F(l0.$$.fragment),Y9o=l(),Cle=a("p"),K9o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z9o=l(),Ai=a("p"),eMo=o(`Note:
Loading a model from its configuration file does `),wle=a("strong"),oMo=o("not"),rMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=a("a"),tMo=o("from_pretrained()"),aMo=o(" to load the model weights."),nMo=l(),F(J_.$$.fragment),sMo=l(),Ue=a("div"),F(i0.$$.fragment),lMo=l(),Ale=a("p"),iMo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dMo=l(),wa=a("p"),cMo=o("The model class to instantiate is selected based on the "),yle=a("code"),fMo=o("model_type"),mMo=o(` property of the config object (either
passed as an argument or loaded from `),Lle=a("code"),gMo=o("pretrained_model_name_or_path"),hMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xle=a("code"),pMo=o("pretrained_model_name_or_path"),uMo=o(":"),_Mo=l(),Q=a("ul"),Y_=a("li"),$le=a("strong"),bMo=o("albert"),vMo=o(" \u2014 "),hN=a("a"),FMo=o("AlbertForMaskedLM"),TMo=o(" (ALBERT model)"),MMo=l(),K_=a("li"),kle=a("strong"),EMo=o("bart"),CMo=o(" \u2014 "),pN=a("a"),wMo=o("BartForConditionalGeneration"),AMo=o(" (BART model)"),yMo=l(),Z_=a("li"),Sle=a("strong"),LMo=o("bert"),xMo=o(" \u2014 "),uN=a("a"),$Mo=o("BertForMaskedLM"),kMo=o(" (BERT model)"),SMo=l(),e6=a("li"),Rle=a("strong"),RMo=o("big_bird"),BMo=o(" \u2014 "),_N=a("a"),PMo=o("BigBirdForMaskedLM"),IMo=o(" (BigBird model)"),qMo=l(),o6=a("li"),Ble=a("strong"),NMo=o("camembert"),jMo=o(" \u2014 "),bN=a("a"),DMo=o("CamembertForMaskedLM"),GMo=o(" (CamemBERT model)"),OMo=l(),r6=a("li"),Ple=a("strong"),VMo=o("convbert"),XMo=o(" \u2014 "),vN=a("a"),zMo=o("ConvBertForMaskedLM"),QMo=o(" (ConvBERT model)"),WMo=l(),t6=a("li"),Ile=a("strong"),HMo=o("data2vec-text"),UMo=o(" \u2014 "),FN=a("a"),JMo=o("Data2VecTextForMaskedLM"),YMo=o(" (Data2VecText model)"),KMo=l(),a6=a("li"),qle=a("strong"),ZMo=o("deberta"),e4o=o(" \u2014 "),TN=a("a"),o4o=o("DebertaForMaskedLM"),r4o=o(" (DeBERTa model)"),t4o=l(),n6=a("li"),Nle=a("strong"),a4o=o("deberta-v2"),n4o=o(" \u2014 "),MN=a("a"),s4o=o("DebertaV2ForMaskedLM"),l4o=o(" (DeBERTa-v2 model)"),i4o=l(),s6=a("li"),jle=a("strong"),d4o=o("distilbert"),c4o=o(" \u2014 "),EN=a("a"),f4o=o("DistilBertForMaskedLM"),m4o=o(" (DistilBERT model)"),g4o=l(),l6=a("li"),Dle=a("strong"),h4o=o("electra"),p4o=o(" \u2014 "),CN=a("a"),u4o=o("ElectraForMaskedLM"),_4o=o(" (ELECTRA model)"),b4o=l(),i6=a("li"),Gle=a("strong"),v4o=o("flaubert"),F4o=o(" \u2014 "),wN=a("a"),T4o=o("FlaubertWithLMHeadModel"),M4o=o(" (FlauBERT model)"),E4o=l(),d6=a("li"),Ole=a("strong"),C4o=o("fnet"),w4o=o(" \u2014 "),AN=a("a"),A4o=o("FNetForMaskedLM"),y4o=o(" (FNet model)"),L4o=l(),c6=a("li"),Vle=a("strong"),x4o=o("funnel"),$4o=o(" \u2014 "),yN=a("a"),k4o=o("FunnelForMaskedLM"),S4o=o(" (Funnel Transformer model)"),R4o=l(),f6=a("li"),Xle=a("strong"),B4o=o("ibert"),P4o=o(" \u2014 "),LN=a("a"),I4o=o("IBertForMaskedLM"),q4o=o(" (I-BERT model)"),N4o=l(),m6=a("li"),zle=a("strong"),j4o=o("layoutlm"),D4o=o(" \u2014 "),xN=a("a"),G4o=o("LayoutLMForMaskedLM"),O4o=o(" (LayoutLM model)"),V4o=l(),g6=a("li"),Qle=a("strong"),X4o=o("longformer"),z4o=o(" \u2014 "),$N=a("a"),Q4o=o("LongformerForMaskedLM"),W4o=o(" (Longformer model)"),H4o=l(),h6=a("li"),Wle=a("strong"),U4o=o("mbart"),J4o=o(" \u2014 "),kN=a("a"),Y4o=o("MBartForConditionalGeneration"),K4o=o(" (mBART model)"),Z4o=l(),p6=a("li"),Hle=a("strong"),eEo=o("megatron-bert"),oEo=o(" \u2014 "),SN=a("a"),rEo=o("MegatronBertForMaskedLM"),tEo=o(" (MegatronBert model)"),aEo=l(),u6=a("li"),Ule=a("strong"),nEo=o("mobilebert"),sEo=o(" \u2014 "),RN=a("a"),lEo=o("MobileBertForMaskedLM"),iEo=o(" (MobileBERT model)"),dEo=l(),_6=a("li"),Jle=a("strong"),cEo=o("mpnet"),fEo=o(" \u2014 "),BN=a("a"),mEo=o("MPNetForMaskedLM"),gEo=o(" (MPNet model)"),hEo=l(),b6=a("li"),Yle=a("strong"),pEo=o("nystromformer"),uEo=o(" \u2014 "),PN=a("a"),_Eo=o("NystromformerForMaskedLM"),bEo=o(" (Nystromformer model)"),vEo=l(),v6=a("li"),Kle=a("strong"),FEo=o("perceiver"),TEo=o(" \u2014 "),IN=a("a"),MEo=o("PerceiverForMaskedLM"),EEo=o(" (Perceiver model)"),CEo=l(),F6=a("li"),Zle=a("strong"),wEo=o("qdqbert"),AEo=o(" \u2014 "),qN=a("a"),yEo=o("QDQBertForMaskedLM"),LEo=o(" (QDQBert model)"),xEo=l(),T6=a("li"),eie=a("strong"),$Eo=o("reformer"),kEo=o(" \u2014 "),NN=a("a"),SEo=o("ReformerForMaskedLM"),REo=o(" (Reformer model)"),BEo=l(),M6=a("li"),oie=a("strong"),PEo=o("rembert"),IEo=o(" \u2014 "),jN=a("a"),qEo=o("RemBertForMaskedLM"),NEo=o(" (RemBERT model)"),jEo=l(),E6=a("li"),rie=a("strong"),DEo=o("roberta"),GEo=o(" \u2014 "),DN=a("a"),OEo=o("RobertaForMaskedLM"),VEo=o(" (RoBERTa model)"),XEo=l(),C6=a("li"),tie=a("strong"),zEo=o("roformer"),QEo=o(" \u2014 "),GN=a("a"),WEo=o("RoFormerForMaskedLM"),HEo=o(" (RoFormer model)"),UEo=l(),w6=a("li"),aie=a("strong"),JEo=o("squeezebert"),YEo=o(" \u2014 "),ON=a("a"),KEo=o("SqueezeBertForMaskedLM"),ZEo=o(" (SqueezeBERT model)"),eCo=l(),A6=a("li"),nie=a("strong"),oCo=o("tapas"),rCo=o(" \u2014 "),VN=a("a"),tCo=o("TapasForMaskedLM"),aCo=o(" (TAPAS model)"),nCo=l(),y6=a("li"),sie=a("strong"),sCo=o("wav2vec2"),lCo=o(" \u2014 "),lie=a("code"),iCo=o("Wav2Vec2ForMaskedLM"),dCo=o(" (Wav2Vec2 model)"),cCo=l(),L6=a("li"),iie=a("strong"),fCo=o("xlm"),mCo=o(" \u2014 "),XN=a("a"),gCo=o("XLMWithLMHeadModel"),hCo=o(" (XLM model)"),pCo=l(),x6=a("li"),die=a("strong"),uCo=o("xlm-roberta"),_Co=o(" \u2014 "),zN=a("a"),bCo=o("XLMRobertaForMaskedLM"),vCo=o(" (XLM-RoBERTa model)"),FCo=l(),$6=a("li"),cie=a("strong"),TCo=o("xlm-roberta-xl"),MCo=o(" \u2014 "),QN=a("a"),ECo=o("XLMRobertaXLForMaskedLM"),CCo=o(" (XLM-RoBERTa-XL model)"),wCo=l(),k6=a("li"),fie=a("strong"),ACo=o("yoso"),yCo=o(" \u2014 "),WN=a("a"),LCo=o("YosoForMaskedLM"),xCo=o(" (YOSO model)"),$Co=l(),S6=a("p"),kCo=o("The model is set in evaluation mode by default using "),mie=a("code"),SCo=o("model.eval()"),RCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gie=a("code"),BCo=o("model.train()"),PCo=l(),F(R6.$$.fragment),cBe=l(),yi=a("h2"),B6=a("a"),hie=a("span"),F(d0.$$.fragment),ICo=l(),pie=a("span"),qCo=o("AutoModelForSeq2SeqLM"),fBe=l(),$o=a("div"),F(c0.$$.fragment),NCo=l(),Li=a("p"),jCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HN=a("a"),DCo=o("from_pretrained()"),GCo=o(" class method or the "),UN=a("a"),OCo=o("from_config()"),VCo=o(` class
method.`),XCo=l(),f0=a("p"),zCo=o("This class cannot be instantiated directly using "),uie=a("code"),QCo=o("__init__()"),WCo=o(" (throws an error)."),HCo=l(),rt=a("div"),F(m0.$$.fragment),UCo=l(),_ie=a("p"),JCo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),YCo=l(),xi=a("p"),KCo=o(`Note:
Loading a model from its configuration file does `),bie=a("strong"),ZCo=o("not"),e3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JN=a("a"),o3o=o("from_pretrained()"),r3o=o(" to load the model weights."),t3o=l(),F(P6.$$.fragment),a3o=l(),Je=a("div"),F(g0.$$.fragment),n3o=l(),vie=a("p"),s3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),l3o=l(),Aa=a("p"),i3o=o("The model class to instantiate is selected based on the "),Fie=a("code"),d3o=o("model_type"),c3o=o(` property of the config object (either
passed as an argument or loaded from `),Tie=a("code"),f3o=o("pretrained_model_name_or_path"),m3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=a("code"),g3o=o("pretrained_model_name_or_path"),h3o=o(":"),p3o=l(),he=a("ul"),I6=a("li"),Eie=a("strong"),u3o=o("bart"),_3o=o(" \u2014 "),YN=a("a"),b3o=o("BartForConditionalGeneration"),v3o=o(" (BART model)"),F3o=l(),q6=a("li"),Cie=a("strong"),T3o=o("bigbird_pegasus"),M3o=o(" \u2014 "),KN=a("a"),E3o=o("BigBirdPegasusForConditionalGeneration"),C3o=o(" (BigBirdPegasus model)"),w3o=l(),N6=a("li"),wie=a("strong"),A3o=o("blenderbot"),y3o=o(" \u2014 "),ZN=a("a"),L3o=o("BlenderbotForConditionalGeneration"),x3o=o(" (Blenderbot model)"),$3o=l(),j6=a("li"),Aie=a("strong"),k3o=o("blenderbot-small"),S3o=o(" \u2014 "),ej=a("a"),R3o=o("BlenderbotSmallForConditionalGeneration"),B3o=o(" (BlenderbotSmall model)"),P3o=l(),D6=a("li"),yie=a("strong"),I3o=o("encoder-decoder"),q3o=o(" \u2014 "),oj=a("a"),N3o=o("EncoderDecoderModel"),j3o=o(" (Encoder decoder model)"),D3o=l(),G6=a("li"),Lie=a("strong"),G3o=o("fsmt"),O3o=o(" \u2014 "),rj=a("a"),V3o=o("FSMTForConditionalGeneration"),X3o=o(" (FairSeq Machine-Translation model)"),z3o=l(),O6=a("li"),xie=a("strong"),Q3o=o("led"),W3o=o(" \u2014 "),tj=a("a"),H3o=o("LEDForConditionalGeneration"),U3o=o(" (LED model)"),J3o=l(),V6=a("li"),$ie=a("strong"),Y3o=o("m2m_100"),K3o=o(" \u2014 "),aj=a("a"),Z3o=o("M2M100ForConditionalGeneration"),ewo=o(" (M2M100 model)"),owo=l(),X6=a("li"),kie=a("strong"),rwo=o("marian"),two=o(" \u2014 "),nj=a("a"),awo=o("MarianMTModel"),nwo=o(" (Marian model)"),swo=l(),z6=a("li"),Sie=a("strong"),lwo=o("mbart"),iwo=o(" \u2014 "),sj=a("a"),dwo=o("MBartForConditionalGeneration"),cwo=o(" (mBART model)"),fwo=l(),Q6=a("li"),Rie=a("strong"),mwo=o("mt5"),gwo=o(" \u2014 "),lj=a("a"),hwo=o("MT5ForConditionalGeneration"),pwo=o(" (mT5 model)"),uwo=l(),W6=a("li"),Bie=a("strong"),_wo=o("pegasus"),bwo=o(" \u2014 "),ij=a("a"),vwo=o("PegasusForConditionalGeneration"),Fwo=o(" (Pegasus model)"),Two=l(),H6=a("li"),Pie=a("strong"),Mwo=o("plbart"),Ewo=o(" \u2014 "),dj=a("a"),Cwo=o("PLBartForConditionalGeneration"),wwo=o(" (PLBart model)"),Awo=l(),U6=a("li"),Iie=a("strong"),ywo=o("prophetnet"),Lwo=o(" \u2014 "),cj=a("a"),xwo=o("ProphetNetForConditionalGeneration"),$wo=o(" (ProphetNet model)"),kwo=l(),J6=a("li"),qie=a("strong"),Swo=o("t5"),Rwo=o(" \u2014 "),fj=a("a"),Bwo=o("T5ForConditionalGeneration"),Pwo=o(" (T5 model)"),Iwo=l(),Y6=a("li"),Nie=a("strong"),qwo=o("tapex"),Nwo=o(" \u2014 "),mj=a("a"),jwo=o("BartForConditionalGeneration"),Dwo=o(" (TAPEX model)"),Gwo=l(),K6=a("li"),jie=a("strong"),Owo=o("xlm-prophetnet"),Vwo=o(" \u2014 "),gj=a("a"),Xwo=o("XLMProphetNetForConditionalGeneration"),zwo=o(" (XLMProphetNet model)"),Qwo=l(),Z6=a("p"),Wwo=o("The model is set in evaluation mode by default using "),Die=a("code"),Hwo=o("model.eval()"),Uwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=a("code"),Jwo=o("model.train()"),Ywo=l(),F(e1.$$.fragment),mBe=l(),$i=a("h2"),o1=a("a"),Oie=a("span"),F(h0.$$.fragment),Kwo=l(),Vie=a("span"),Zwo=o("AutoModelForSequenceClassification"),gBe=l(),ko=a("div"),F(p0.$$.fragment),eAo=l(),ki=a("p"),oAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hj=a("a"),rAo=o("from_pretrained()"),tAo=o(" class method or the "),pj=a("a"),aAo=o("from_config()"),nAo=o(` class
method.`),sAo=l(),u0=a("p"),lAo=o("This class cannot be instantiated directly using "),Xie=a("code"),iAo=o("__init__()"),dAo=o(" (throws an error)."),cAo=l(),tt=a("div"),F(_0.$$.fragment),fAo=l(),zie=a("p"),mAo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gAo=l(),Si=a("p"),hAo=o(`Note:
Loading a model from its configuration file does `),Qie=a("strong"),pAo=o("not"),uAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uj=a("a"),_Ao=o("from_pretrained()"),bAo=o(" to load the model weights."),vAo=l(),F(r1.$$.fragment),FAo=l(),Ye=a("div"),F(b0.$$.fragment),TAo=l(),Wie=a("p"),MAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EAo=l(),ya=a("p"),CAo=o("The model class to instantiate is selected based on the "),Hie=a("code"),wAo=o("model_type"),AAo=o(` property of the config object (either
passed as an argument or loaded from `),Uie=a("code"),yAo=o("pretrained_model_name_or_path"),LAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=a("code"),xAo=o("pretrained_model_name_or_path"),$Ao=o(":"),kAo=l(),q=a("ul"),t1=a("li"),Yie=a("strong"),SAo=o("albert"),RAo=o(" \u2014 "),_j=a("a"),BAo=o("AlbertForSequenceClassification"),PAo=o(" (ALBERT model)"),IAo=l(),a1=a("li"),Kie=a("strong"),qAo=o("bart"),NAo=o(" \u2014 "),bj=a("a"),jAo=o("BartForSequenceClassification"),DAo=o(" (BART model)"),GAo=l(),n1=a("li"),Zie=a("strong"),OAo=o("bert"),VAo=o(" \u2014 "),vj=a("a"),XAo=o("BertForSequenceClassification"),zAo=o(" (BERT model)"),QAo=l(),s1=a("li"),ede=a("strong"),WAo=o("big_bird"),HAo=o(" \u2014 "),Fj=a("a"),UAo=o("BigBirdForSequenceClassification"),JAo=o(" (BigBird model)"),YAo=l(),l1=a("li"),ode=a("strong"),KAo=o("bigbird_pegasus"),ZAo=o(" \u2014 "),Tj=a("a"),e0o=o("BigBirdPegasusForSequenceClassification"),o0o=o(" (BigBirdPegasus model)"),r0o=l(),i1=a("li"),rde=a("strong"),t0o=o("camembert"),a0o=o(" \u2014 "),Mj=a("a"),n0o=o("CamembertForSequenceClassification"),s0o=o(" (CamemBERT model)"),l0o=l(),d1=a("li"),tde=a("strong"),i0o=o("canine"),d0o=o(" \u2014 "),Ej=a("a"),c0o=o("CanineForSequenceClassification"),f0o=o(" (Canine model)"),m0o=l(),c1=a("li"),ade=a("strong"),g0o=o("convbert"),h0o=o(" \u2014 "),Cj=a("a"),p0o=o("ConvBertForSequenceClassification"),u0o=o(" (ConvBERT model)"),_0o=l(),f1=a("li"),nde=a("strong"),b0o=o("ctrl"),v0o=o(" \u2014 "),wj=a("a"),F0o=o("CTRLForSequenceClassification"),T0o=o(" (CTRL model)"),M0o=l(),m1=a("li"),sde=a("strong"),E0o=o("data2vec-text"),C0o=o(" \u2014 "),Aj=a("a"),w0o=o("Data2VecTextForSequenceClassification"),A0o=o(" (Data2VecText model)"),y0o=l(),g1=a("li"),lde=a("strong"),L0o=o("deberta"),x0o=o(" \u2014 "),yj=a("a"),$0o=o("DebertaForSequenceClassification"),k0o=o(" (DeBERTa model)"),S0o=l(),h1=a("li"),ide=a("strong"),R0o=o("deberta-v2"),B0o=o(" \u2014 "),Lj=a("a"),P0o=o("DebertaV2ForSequenceClassification"),I0o=o(" (DeBERTa-v2 model)"),q0o=l(),p1=a("li"),dde=a("strong"),N0o=o("distilbert"),j0o=o(" \u2014 "),xj=a("a"),D0o=o("DistilBertForSequenceClassification"),G0o=o(" (DistilBERT model)"),O0o=l(),u1=a("li"),cde=a("strong"),V0o=o("electra"),X0o=o(" \u2014 "),$j=a("a"),z0o=o("ElectraForSequenceClassification"),Q0o=o(" (ELECTRA model)"),W0o=l(),_1=a("li"),fde=a("strong"),H0o=o("flaubert"),U0o=o(" \u2014 "),kj=a("a"),J0o=o("FlaubertForSequenceClassification"),Y0o=o(" (FlauBERT model)"),K0o=l(),b1=a("li"),mde=a("strong"),Z0o=o("fnet"),eyo=o(" \u2014 "),Sj=a("a"),oyo=o("FNetForSequenceClassification"),ryo=o(" (FNet model)"),tyo=l(),v1=a("li"),gde=a("strong"),ayo=o("funnel"),nyo=o(" \u2014 "),Rj=a("a"),syo=o("FunnelForSequenceClassification"),lyo=o(" (Funnel Transformer model)"),iyo=l(),F1=a("li"),hde=a("strong"),dyo=o("gpt2"),cyo=o(" \u2014 "),Bj=a("a"),fyo=o("GPT2ForSequenceClassification"),myo=o(" (OpenAI GPT-2 model)"),gyo=l(),T1=a("li"),pde=a("strong"),hyo=o("gpt_neo"),pyo=o(" \u2014 "),Pj=a("a"),uyo=o("GPTNeoForSequenceClassification"),_yo=o(" (GPT Neo model)"),byo=l(),M1=a("li"),ude=a("strong"),vyo=o("gptj"),Fyo=o(" \u2014 "),Ij=a("a"),Tyo=o("GPTJForSequenceClassification"),Myo=o(" (GPT-J model)"),Eyo=l(),E1=a("li"),_de=a("strong"),Cyo=o("ibert"),wyo=o(" \u2014 "),qj=a("a"),Ayo=o("IBertForSequenceClassification"),yyo=o(" (I-BERT model)"),Lyo=l(),C1=a("li"),bde=a("strong"),xyo=o("layoutlm"),$yo=o(" \u2014 "),Nj=a("a"),kyo=o("LayoutLMForSequenceClassification"),Syo=o(" (LayoutLM model)"),Ryo=l(),w1=a("li"),vde=a("strong"),Byo=o("layoutlmv2"),Pyo=o(" \u2014 "),jj=a("a"),Iyo=o("LayoutLMv2ForSequenceClassification"),qyo=o(" (LayoutLMv2 model)"),Nyo=l(),A1=a("li"),Fde=a("strong"),jyo=o("led"),Dyo=o(" \u2014 "),Dj=a("a"),Gyo=o("LEDForSequenceClassification"),Oyo=o(" (LED model)"),Vyo=l(),y1=a("li"),Tde=a("strong"),Xyo=o("longformer"),zyo=o(" \u2014 "),Gj=a("a"),Qyo=o("LongformerForSequenceClassification"),Wyo=o(" (Longformer model)"),Hyo=l(),L1=a("li"),Mde=a("strong"),Uyo=o("mbart"),Jyo=o(" \u2014 "),Oj=a("a"),Yyo=o("MBartForSequenceClassification"),Kyo=o(" (mBART model)"),Zyo=l(),x1=a("li"),Ede=a("strong"),eLo=o("megatron-bert"),oLo=o(" \u2014 "),Vj=a("a"),rLo=o("MegatronBertForSequenceClassification"),tLo=o(" (MegatronBert model)"),aLo=l(),$1=a("li"),Cde=a("strong"),nLo=o("mobilebert"),sLo=o(" \u2014 "),Xj=a("a"),lLo=o("MobileBertForSequenceClassification"),iLo=o(" (MobileBERT model)"),dLo=l(),k1=a("li"),wde=a("strong"),cLo=o("mpnet"),fLo=o(" \u2014 "),zj=a("a"),mLo=o("MPNetForSequenceClassification"),gLo=o(" (MPNet model)"),hLo=l(),S1=a("li"),Ade=a("strong"),pLo=o("nystromformer"),uLo=o(" \u2014 "),Qj=a("a"),_Lo=o("NystromformerForSequenceClassification"),bLo=o(" (Nystromformer model)"),vLo=l(),R1=a("li"),yde=a("strong"),FLo=o("openai-gpt"),TLo=o(" \u2014 "),Wj=a("a"),MLo=o("OpenAIGPTForSequenceClassification"),ELo=o(" (OpenAI GPT model)"),CLo=l(),B1=a("li"),Lde=a("strong"),wLo=o("perceiver"),ALo=o(" \u2014 "),Hj=a("a"),yLo=o("PerceiverForSequenceClassification"),LLo=o(" (Perceiver model)"),xLo=l(),P1=a("li"),xde=a("strong"),$Lo=o("plbart"),kLo=o(" \u2014 "),Uj=a("a"),SLo=o("PLBartForSequenceClassification"),RLo=o(" (PLBart model)"),BLo=l(),I1=a("li"),$de=a("strong"),PLo=o("qdqbert"),ILo=o(" \u2014 "),Jj=a("a"),qLo=o("QDQBertForSequenceClassification"),NLo=o(" (QDQBert model)"),jLo=l(),q1=a("li"),kde=a("strong"),DLo=o("reformer"),GLo=o(" \u2014 "),Yj=a("a"),OLo=o("ReformerForSequenceClassification"),VLo=o(" (Reformer model)"),XLo=l(),N1=a("li"),Sde=a("strong"),zLo=o("rembert"),QLo=o(" \u2014 "),Kj=a("a"),WLo=o("RemBertForSequenceClassification"),HLo=o(" (RemBERT model)"),ULo=l(),j1=a("li"),Rde=a("strong"),JLo=o("roberta"),YLo=o(" \u2014 "),Zj=a("a"),KLo=o("RobertaForSequenceClassification"),ZLo=o(" (RoBERTa model)"),e8o=l(),D1=a("li"),Bde=a("strong"),o8o=o("roformer"),r8o=o(" \u2014 "),eD=a("a"),t8o=o("RoFormerForSequenceClassification"),a8o=o(" (RoFormer model)"),n8o=l(),G1=a("li"),Pde=a("strong"),s8o=o("squeezebert"),l8o=o(" \u2014 "),oD=a("a"),i8o=o("SqueezeBertForSequenceClassification"),d8o=o(" (SqueezeBERT model)"),c8o=l(),O1=a("li"),Ide=a("strong"),f8o=o("tapas"),m8o=o(" \u2014 "),rD=a("a"),g8o=o("TapasForSequenceClassification"),h8o=o(" (TAPAS model)"),p8o=l(),V1=a("li"),qde=a("strong"),u8o=o("tapex"),_8o=o(" \u2014 "),tD=a("a"),b8o=o("BartForSequenceClassification"),v8o=o(" (TAPEX model)"),F8o=l(),X1=a("li"),Nde=a("strong"),T8o=o("transfo-xl"),M8o=o(" \u2014 "),aD=a("a"),E8o=o("TransfoXLForSequenceClassification"),C8o=o(" (Transformer-XL model)"),w8o=l(),z1=a("li"),jde=a("strong"),A8o=o("xlm"),y8o=o(" \u2014 "),nD=a("a"),L8o=o("XLMForSequenceClassification"),x8o=o(" (XLM model)"),$8o=l(),Q1=a("li"),Dde=a("strong"),k8o=o("xlm-roberta"),S8o=o(" \u2014 "),sD=a("a"),R8o=o("XLMRobertaForSequenceClassification"),B8o=o(" (XLM-RoBERTa model)"),P8o=l(),W1=a("li"),Gde=a("strong"),I8o=o("xlm-roberta-xl"),q8o=o(" \u2014 "),lD=a("a"),N8o=o("XLMRobertaXLForSequenceClassification"),j8o=o(" (XLM-RoBERTa-XL model)"),D8o=l(),H1=a("li"),Ode=a("strong"),G8o=o("xlnet"),O8o=o(" \u2014 "),iD=a("a"),V8o=o("XLNetForSequenceClassification"),X8o=o(" (XLNet model)"),z8o=l(),U1=a("li"),Vde=a("strong"),Q8o=o("yoso"),W8o=o(" \u2014 "),dD=a("a"),H8o=o("YosoForSequenceClassification"),U8o=o(" (YOSO model)"),J8o=l(),J1=a("p"),Y8o=o("The model is set in evaluation mode by default using "),Xde=a("code"),K8o=o("model.eval()"),Z8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=a("code"),e7o=o("model.train()"),o7o=l(),F(Y1.$$.fragment),hBe=l(),Ri=a("h2"),K1=a("a"),Qde=a("span"),F(v0.$$.fragment),r7o=l(),Wde=a("span"),t7o=o("AutoModelForMultipleChoice"),pBe=l(),So=a("div"),F(F0.$$.fragment),a7o=l(),Bi=a("p"),n7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cD=a("a"),s7o=o("from_pretrained()"),l7o=o(" class method or the "),fD=a("a"),i7o=o("from_config()"),d7o=o(` class
method.`),c7o=l(),T0=a("p"),f7o=o("This class cannot be instantiated directly using "),Hde=a("code"),m7o=o("__init__()"),g7o=o(" (throws an error)."),h7o=l(),at=a("div"),F(M0.$$.fragment),p7o=l(),Ude=a("p"),u7o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_7o=l(),Pi=a("p"),b7o=o(`Note:
Loading a model from its configuration file does `),Jde=a("strong"),v7o=o("not"),F7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=a("a"),T7o=o("from_pretrained()"),M7o=o(" to load the model weights."),E7o=l(),F(Z1.$$.fragment),C7o=l(),Ke=a("div"),F(E0.$$.fragment),w7o=l(),Yde=a("p"),A7o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),y7o=l(),La=a("p"),L7o=o("The model class to instantiate is selected based on the "),Kde=a("code"),x7o=o("model_type"),$7o=o(` property of the config object (either
passed as an argument or loaded from `),Zde=a("code"),k7o=o("pretrained_model_name_or_path"),S7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=a("code"),R7o=o("pretrained_model_name_or_path"),B7o=o(":"),P7o=l(),Y=a("ul"),eb=a("li"),oce=a("strong"),I7o=o("albert"),q7o=o(" \u2014 "),gD=a("a"),N7o=o("AlbertForMultipleChoice"),j7o=o(" (ALBERT model)"),D7o=l(),ob=a("li"),rce=a("strong"),G7o=o("bert"),O7o=o(" \u2014 "),hD=a("a"),V7o=o("BertForMultipleChoice"),X7o=o(" (BERT model)"),z7o=l(),rb=a("li"),tce=a("strong"),Q7o=o("big_bird"),W7o=o(" \u2014 "),pD=a("a"),H7o=o("BigBirdForMultipleChoice"),U7o=o(" (BigBird model)"),J7o=l(),tb=a("li"),ace=a("strong"),Y7o=o("camembert"),K7o=o(" \u2014 "),uD=a("a"),Z7o=o("CamembertForMultipleChoice"),exo=o(" (CamemBERT model)"),oxo=l(),ab=a("li"),nce=a("strong"),rxo=o("canine"),txo=o(" \u2014 "),_D=a("a"),axo=o("CanineForMultipleChoice"),nxo=o(" (Canine model)"),sxo=l(),nb=a("li"),sce=a("strong"),lxo=o("convbert"),ixo=o(" \u2014 "),bD=a("a"),dxo=o("ConvBertForMultipleChoice"),cxo=o(" (ConvBERT model)"),fxo=l(),sb=a("li"),lce=a("strong"),mxo=o("data2vec-text"),gxo=o(" \u2014 "),vD=a("a"),hxo=o("Data2VecTextForMultipleChoice"),pxo=o(" (Data2VecText model)"),uxo=l(),lb=a("li"),ice=a("strong"),_xo=o("distilbert"),bxo=o(" \u2014 "),FD=a("a"),vxo=o("DistilBertForMultipleChoice"),Fxo=o(" (DistilBERT model)"),Txo=l(),ib=a("li"),dce=a("strong"),Mxo=o("electra"),Exo=o(" \u2014 "),TD=a("a"),Cxo=o("ElectraForMultipleChoice"),wxo=o(" (ELECTRA model)"),Axo=l(),db=a("li"),cce=a("strong"),yxo=o("flaubert"),Lxo=o(" \u2014 "),MD=a("a"),xxo=o("FlaubertForMultipleChoice"),$xo=o(" (FlauBERT model)"),kxo=l(),cb=a("li"),fce=a("strong"),Sxo=o("fnet"),Rxo=o(" \u2014 "),ED=a("a"),Bxo=o("FNetForMultipleChoice"),Pxo=o(" (FNet model)"),Ixo=l(),fb=a("li"),mce=a("strong"),qxo=o("funnel"),Nxo=o(" \u2014 "),CD=a("a"),jxo=o("FunnelForMultipleChoice"),Dxo=o(" (Funnel Transformer model)"),Gxo=l(),mb=a("li"),gce=a("strong"),Oxo=o("ibert"),Vxo=o(" \u2014 "),wD=a("a"),Xxo=o("IBertForMultipleChoice"),zxo=o(" (I-BERT model)"),Qxo=l(),gb=a("li"),hce=a("strong"),Wxo=o("longformer"),Hxo=o(" \u2014 "),AD=a("a"),Uxo=o("LongformerForMultipleChoice"),Jxo=o(" (Longformer model)"),Yxo=l(),hb=a("li"),pce=a("strong"),Kxo=o("megatron-bert"),Zxo=o(" \u2014 "),yD=a("a"),e$o=o("MegatronBertForMultipleChoice"),o$o=o(" (MegatronBert model)"),r$o=l(),pb=a("li"),uce=a("strong"),t$o=o("mobilebert"),a$o=o(" \u2014 "),LD=a("a"),n$o=o("MobileBertForMultipleChoice"),s$o=o(" (MobileBERT model)"),l$o=l(),ub=a("li"),_ce=a("strong"),i$o=o("mpnet"),d$o=o(" \u2014 "),xD=a("a"),c$o=o("MPNetForMultipleChoice"),f$o=o(" (MPNet model)"),m$o=l(),_b=a("li"),bce=a("strong"),g$o=o("nystromformer"),h$o=o(" \u2014 "),$D=a("a"),p$o=o("NystromformerForMultipleChoice"),u$o=o(" (Nystromformer model)"),_$o=l(),bb=a("li"),vce=a("strong"),b$o=o("qdqbert"),v$o=o(" \u2014 "),kD=a("a"),F$o=o("QDQBertForMultipleChoice"),T$o=o(" (QDQBert model)"),M$o=l(),vb=a("li"),Fce=a("strong"),E$o=o("rembert"),C$o=o(" \u2014 "),SD=a("a"),w$o=o("RemBertForMultipleChoice"),A$o=o(" (RemBERT model)"),y$o=l(),Fb=a("li"),Tce=a("strong"),L$o=o("roberta"),x$o=o(" \u2014 "),RD=a("a"),$$o=o("RobertaForMultipleChoice"),k$o=o(" (RoBERTa model)"),S$o=l(),Tb=a("li"),Mce=a("strong"),R$o=o("roformer"),B$o=o(" \u2014 "),BD=a("a"),P$o=o("RoFormerForMultipleChoice"),I$o=o(" (RoFormer model)"),q$o=l(),Mb=a("li"),Ece=a("strong"),N$o=o("squeezebert"),j$o=o(" \u2014 "),PD=a("a"),D$o=o("SqueezeBertForMultipleChoice"),G$o=o(" (SqueezeBERT model)"),O$o=l(),Eb=a("li"),Cce=a("strong"),V$o=o("xlm"),X$o=o(" \u2014 "),ID=a("a"),z$o=o("XLMForMultipleChoice"),Q$o=o(" (XLM model)"),W$o=l(),Cb=a("li"),wce=a("strong"),H$o=o("xlm-roberta"),U$o=o(" \u2014 "),qD=a("a"),J$o=o("XLMRobertaForMultipleChoice"),Y$o=o(" (XLM-RoBERTa model)"),K$o=l(),wb=a("li"),Ace=a("strong"),Z$o=o("xlm-roberta-xl"),eko=o(" \u2014 "),ND=a("a"),oko=o("XLMRobertaXLForMultipleChoice"),rko=o(" (XLM-RoBERTa-XL model)"),tko=l(),Ab=a("li"),yce=a("strong"),ako=o("xlnet"),nko=o(" \u2014 "),jD=a("a"),sko=o("XLNetForMultipleChoice"),lko=o(" (XLNet model)"),iko=l(),yb=a("li"),Lce=a("strong"),dko=o("yoso"),cko=o(" \u2014 "),DD=a("a"),fko=o("YosoForMultipleChoice"),mko=o(" (YOSO model)"),gko=l(),Lb=a("p"),hko=o("The model is set in evaluation mode by default using "),xce=a("code"),pko=o("model.eval()"),uko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),_ko=o("model.train()"),bko=l(),F(xb.$$.fragment),uBe=l(),Ii=a("h2"),$b=a("a"),kce=a("span"),F(C0.$$.fragment),vko=l(),Sce=a("span"),Fko=o("AutoModelForNextSentencePrediction"),_Be=l(),Ro=a("div"),F(w0.$$.fragment),Tko=l(),qi=a("p"),Mko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GD=a("a"),Eko=o("from_pretrained()"),Cko=o(" class method or the "),OD=a("a"),wko=o("from_config()"),Ako=o(` class
method.`),yko=l(),A0=a("p"),Lko=o("This class cannot be instantiated directly using "),Rce=a("code"),xko=o("__init__()"),$ko=o(" (throws an error)."),kko=l(),nt=a("div"),F(y0.$$.fragment),Sko=l(),Bce=a("p"),Rko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Bko=l(),Ni=a("p"),Pko=o(`Note:
Loading a model from its configuration file does `),Pce=a("strong"),Iko=o("not"),qko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),Nko=o("from_pretrained()"),jko=o(" to load the model weights."),Dko=l(),F(kb.$$.fragment),Gko=l(),Ze=a("div"),F(L0.$$.fragment),Oko=l(),Ice=a("p"),Vko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xko=l(),xa=a("p"),zko=o("The model class to instantiate is selected based on the "),qce=a("code"),Qko=o("model_type"),Wko=o(` property of the config object (either
passed as an argument or loaded from `),Nce=a("code"),Hko=o("pretrained_model_name_or_path"),Uko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=a("code"),Jko=o("pretrained_model_name_or_path"),Yko=o(":"),Kko=l(),Wr=a("ul"),Sb=a("li"),Dce=a("strong"),Zko=o("bert"),eSo=o(" \u2014 "),XD=a("a"),oSo=o("BertForNextSentencePrediction"),rSo=o(" (BERT model)"),tSo=l(),Rb=a("li"),Gce=a("strong"),aSo=o("fnet"),nSo=o(" \u2014 "),zD=a("a"),sSo=o("FNetForNextSentencePrediction"),lSo=o(" (FNet model)"),iSo=l(),Bb=a("li"),Oce=a("strong"),dSo=o("megatron-bert"),cSo=o(" \u2014 "),QD=a("a"),fSo=o("MegatronBertForNextSentencePrediction"),mSo=o(" (MegatronBert model)"),gSo=l(),Pb=a("li"),Vce=a("strong"),hSo=o("mobilebert"),pSo=o(" \u2014 "),WD=a("a"),uSo=o("MobileBertForNextSentencePrediction"),_So=o(" (MobileBERT model)"),bSo=l(),Ib=a("li"),Xce=a("strong"),vSo=o("qdqbert"),FSo=o(" \u2014 "),HD=a("a"),TSo=o("QDQBertForNextSentencePrediction"),MSo=o(" (QDQBert model)"),ESo=l(),qb=a("p"),CSo=o("The model is set in evaluation mode by default using "),zce=a("code"),wSo=o("model.eval()"),ASo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),ySo=o("model.train()"),LSo=l(),F(Nb.$$.fragment),bBe=l(),ji=a("h2"),jb=a("a"),Wce=a("span"),F(x0.$$.fragment),xSo=l(),Hce=a("span"),$So=o("AutoModelForTokenClassification"),vBe=l(),Bo=a("div"),F($0.$$.fragment),kSo=l(),Di=a("p"),SSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UD=a("a"),RSo=o("from_pretrained()"),BSo=o(" class method or the "),JD=a("a"),PSo=o("from_config()"),ISo=o(` class
method.`),qSo=l(),k0=a("p"),NSo=o("This class cannot be instantiated directly using "),Uce=a("code"),jSo=o("__init__()"),DSo=o(" (throws an error)."),GSo=l(),st=a("div"),F(S0.$$.fragment),OSo=l(),Jce=a("p"),VSo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),XSo=l(),Gi=a("p"),zSo=o(`Note:
Loading a model from its configuration file does `),Yce=a("strong"),QSo=o("not"),WSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YD=a("a"),HSo=o("from_pretrained()"),USo=o(" to load the model weights."),JSo=l(),F(Db.$$.fragment),YSo=l(),eo=a("div"),F(R0.$$.fragment),KSo=l(),Kce=a("p"),ZSo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eRo=l(),$a=a("p"),oRo=o("The model class to instantiate is selected based on the "),Zce=a("code"),rRo=o("model_type"),tRo=o(` property of the config object (either
passed as an argument or loaded from `),efe=a("code"),aRo=o("pretrained_model_name_or_path"),nRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=a("code"),sRo=o("pretrained_model_name_or_path"),lRo=o(":"),iRo=l(),U=a("ul"),Gb=a("li"),rfe=a("strong"),dRo=o("albert"),cRo=o(" \u2014 "),KD=a("a"),fRo=o("AlbertForTokenClassification"),mRo=o(" (ALBERT model)"),gRo=l(),Ob=a("li"),tfe=a("strong"),hRo=o("bert"),pRo=o(" \u2014 "),ZD=a("a"),uRo=o("BertForTokenClassification"),_Ro=o(" (BERT model)"),bRo=l(),Vb=a("li"),afe=a("strong"),vRo=o("big_bird"),FRo=o(" \u2014 "),eG=a("a"),TRo=o("BigBirdForTokenClassification"),MRo=o(" (BigBird model)"),ERo=l(),Xb=a("li"),nfe=a("strong"),CRo=o("camembert"),wRo=o(" \u2014 "),oG=a("a"),ARo=o("CamembertForTokenClassification"),yRo=o(" (CamemBERT model)"),LRo=l(),zb=a("li"),sfe=a("strong"),xRo=o("canine"),$Ro=o(" \u2014 "),rG=a("a"),kRo=o("CanineForTokenClassification"),SRo=o(" (Canine model)"),RRo=l(),Qb=a("li"),lfe=a("strong"),BRo=o("convbert"),PRo=o(" \u2014 "),tG=a("a"),IRo=o("ConvBertForTokenClassification"),qRo=o(" (ConvBERT model)"),NRo=l(),Wb=a("li"),ife=a("strong"),jRo=o("data2vec-text"),DRo=o(" \u2014 "),aG=a("a"),GRo=o("Data2VecTextForTokenClassification"),ORo=o(" (Data2VecText model)"),VRo=l(),Hb=a("li"),dfe=a("strong"),XRo=o("deberta"),zRo=o(" \u2014 "),nG=a("a"),QRo=o("DebertaForTokenClassification"),WRo=o(" (DeBERTa model)"),HRo=l(),Ub=a("li"),cfe=a("strong"),URo=o("deberta-v2"),JRo=o(" \u2014 "),sG=a("a"),YRo=o("DebertaV2ForTokenClassification"),KRo=o(" (DeBERTa-v2 model)"),ZRo=l(),Jb=a("li"),ffe=a("strong"),eBo=o("distilbert"),oBo=o(" \u2014 "),lG=a("a"),rBo=o("DistilBertForTokenClassification"),tBo=o(" (DistilBERT model)"),aBo=l(),Yb=a("li"),mfe=a("strong"),nBo=o("electra"),sBo=o(" \u2014 "),iG=a("a"),lBo=o("ElectraForTokenClassification"),iBo=o(" (ELECTRA model)"),dBo=l(),Kb=a("li"),gfe=a("strong"),cBo=o("flaubert"),fBo=o(" \u2014 "),dG=a("a"),mBo=o("FlaubertForTokenClassification"),gBo=o(" (FlauBERT model)"),hBo=l(),Zb=a("li"),hfe=a("strong"),pBo=o("fnet"),uBo=o(" \u2014 "),cG=a("a"),_Bo=o("FNetForTokenClassification"),bBo=o(" (FNet model)"),vBo=l(),e2=a("li"),pfe=a("strong"),FBo=o("funnel"),TBo=o(" \u2014 "),fG=a("a"),MBo=o("FunnelForTokenClassification"),EBo=o(" (Funnel Transformer model)"),CBo=l(),o2=a("li"),ufe=a("strong"),wBo=o("gpt2"),ABo=o(" \u2014 "),mG=a("a"),yBo=o("GPT2ForTokenClassification"),LBo=o(" (OpenAI GPT-2 model)"),xBo=l(),r2=a("li"),_fe=a("strong"),$Bo=o("ibert"),kBo=o(" \u2014 "),gG=a("a"),SBo=o("IBertForTokenClassification"),RBo=o(" (I-BERT model)"),BBo=l(),t2=a("li"),bfe=a("strong"),PBo=o("layoutlm"),IBo=o(" \u2014 "),hG=a("a"),qBo=o("LayoutLMForTokenClassification"),NBo=o(" (LayoutLM model)"),jBo=l(),a2=a("li"),vfe=a("strong"),DBo=o("layoutlmv2"),GBo=o(" \u2014 "),pG=a("a"),OBo=o("LayoutLMv2ForTokenClassification"),VBo=o(" (LayoutLMv2 model)"),XBo=l(),n2=a("li"),Ffe=a("strong"),zBo=o("longformer"),QBo=o(" \u2014 "),uG=a("a"),WBo=o("LongformerForTokenClassification"),HBo=o(" (Longformer model)"),UBo=l(),s2=a("li"),Tfe=a("strong"),JBo=o("megatron-bert"),YBo=o(" \u2014 "),_G=a("a"),KBo=o("MegatronBertForTokenClassification"),ZBo=o(" (MegatronBert model)"),ePo=l(),l2=a("li"),Mfe=a("strong"),oPo=o("mobilebert"),rPo=o(" \u2014 "),bG=a("a"),tPo=o("MobileBertForTokenClassification"),aPo=o(" (MobileBERT model)"),nPo=l(),i2=a("li"),Efe=a("strong"),sPo=o("mpnet"),lPo=o(" \u2014 "),vG=a("a"),iPo=o("MPNetForTokenClassification"),dPo=o(" (MPNet model)"),cPo=l(),d2=a("li"),Cfe=a("strong"),fPo=o("nystromformer"),mPo=o(" \u2014 "),FG=a("a"),gPo=o("NystromformerForTokenClassification"),hPo=o(" (Nystromformer model)"),pPo=l(),c2=a("li"),wfe=a("strong"),uPo=o("qdqbert"),_Po=o(" \u2014 "),TG=a("a"),bPo=o("QDQBertForTokenClassification"),vPo=o(" (QDQBert model)"),FPo=l(),f2=a("li"),Afe=a("strong"),TPo=o("rembert"),MPo=o(" \u2014 "),MG=a("a"),EPo=o("RemBertForTokenClassification"),CPo=o(" (RemBERT model)"),wPo=l(),m2=a("li"),yfe=a("strong"),APo=o("roberta"),yPo=o(" \u2014 "),EG=a("a"),LPo=o("RobertaForTokenClassification"),xPo=o(" (RoBERTa model)"),$Po=l(),g2=a("li"),Lfe=a("strong"),kPo=o("roformer"),SPo=o(" \u2014 "),CG=a("a"),RPo=o("RoFormerForTokenClassification"),BPo=o(" (RoFormer model)"),PPo=l(),h2=a("li"),xfe=a("strong"),IPo=o("squeezebert"),qPo=o(" \u2014 "),wG=a("a"),NPo=o("SqueezeBertForTokenClassification"),jPo=o(" (SqueezeBERT model)"),DPo=l(),p2=a("li"),$fe=a("strong"),GPo=o("xlm"),OPo=o(" \u2014 "),AG=a("a"),VPo=o("XLMForTokenClassification"),XPo=o(" (XLM model)"),zPo=l(),u2=a("li"),kfe=a("strong"),QPo=o("xlm-roberta"),WPo=o(" \u2014 "),yG=a("a"),HPo=o("XLMRobertaForTokenClassification"),UPo=o(" (XLM-RoBERTa model)"),JPo=l(),_2=a("li"),Sfe=a("strong"),YPo=o("xlm-roberta-xl"),KPo=o(" \u2014 "),LG=a("a"),ZPo=o("XLMRobertaXLForTokenClassification"),eIo=o(" (XLM-RoBERTa-XL model)"),oIo=l(),b2=a("li"),Rfe=a("strong"),rIo=o("xlnet"),tIo=o(" \u2014 "),xG=a("a"),aIo=o("XLNetForTokenClassification"),nIo=o(" (XLNet model)"),sIo=l(),v2=a("li"),Bfe=a("strong"),lIo=o("yoso"),iIo=o(" \u2014 "),$G=a("a"),dIo=o("YosoForTokenClassification"),cIo=o(" (YOSO model)"),fIo=l(),F2=a("p"),mIo=o("The model is set in evaluation mode by default using "),Pfe=a("code"),gIo=o("model.eval()"),hIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=a("code"),pIo=o("model.train()"),uIo=l(),F(T2.$$.fragment),FBe=l(),Oi=a("h2"),M2=a("a"),qfe=a("span"),F(B0.$$.fragment),_Io=l(),Nfe=a("span"),bIo=o("AutoModelForQuestionAnswering"),TBe=l(),Po=a("div"),F(P0.$$.fragment),vIo=l(),Vi=a("p"),FIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kG=a("a"),TIo=o("from_pretrained()"),MIo=o(" class method or the "),SG=a("a"),EIo=o("from_config()"),CIo=o(` class
method.`),wIo=l(),I0=a("p"),AIo=o("This class cannot be instantiated directly using "),jfe=a("code"),yIo=o("__init__()"),LIo=o(" (throws an error)."),xIo=l(),lt=a("div"),F(q0.$$.fragment),$Io=l(),Dfe=a("p"),kIo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),SIo=l(),Xi=a("p"),RIo=o(`Note:
Loading a model from its configuration file does `),Gfe=a("strong"),BIo=o("not"),PIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=a("a"),IIo=o("from_pretrained()"),qIo=o(" to load the model weights."),NIo=l(),F(E2.$$.fragment),jIo=l(),oo=a("div"),F(N0.$$.fragment),DIo=l(),Ofe=a("p"),GIo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),OIo=l(),ka=a("p"),VIo=o("The model class to instantiate is selected based on the "),Vfe=a("code"),XIo=o("model_type"),zIo=o(` property of the config object (either
passed as an argument or loaded from `),Xfe=a("code"),QIo=o("pretrained_model_name_or_path"),WIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),HIo=o("pretrained_model_name_or_path"),UIo=o(":"),JIo=l(),O=a("ul"),C2=a("li"),Qfe=a("strong"),YIo=o("albert"),KIo=o(" \u2014 "),BG=a("a"),ZIo=o("AlbertForQuestionAnswering"),eqo=o(" (ALBERT model)"),oqo=l(),w2=a("li"),Wfe=a("strong"),rqo=o("bart"),tqo=o(" \u2014 "),PG=a("a"),aqo=o("BartForQuestionAnswering"),nqo=o(" (BART model)"),sqo=l(),A2=a("li"),Hfe=a("strong"),lqo=o("bert"),iqo=o(" \u2014 "),IG=a("a"),dqo=o("BertForQuestionAnswering"),cqo=o(" (BERT model)"),fqo=l(),y2=a("li"),Ufe=a("strong"),mqo=o("big_bird"),gqo=o(" \u2014 "),qG=a("a"),hqo=o("BigBirdForQuestionAnswering"),pqo=o(" (BigBird model)"),uqo=l(),L2=a("li"),Jfe=a("strong"),_qo=o("bigbird_pegasus"),bqo=o(" \u2014 "),NG=a("a"),vqo=o("BigBirdPegasusForQuestionAnswering"),Fqo=o(" (BigBirdPegasus model)"),Tqo=l(),x2=a("li"),Yfe=a("strong"),Mqo=o("camembert"),Eqo=o(" \u2014 "),jG=a("a"),Cqo=o("CamembertForQuestionAnswering"),wqo=o(" (CamemBERT model)"),Aqo=l(),$2=a("li"),Kfe=a("strong"),yqo=o("canine"),Lqo=o(" \u2014 "),DG=a("a"),xqo=o("CanineForQuestionAnswering"),$qo=o(" (Canine model)"),kqo=l(),k2=a("li"),Zfe=a("strong"),Sqo=o("convbert"),Rqo=o(" \u2014 "),GG=a("a"),Bqo=o("ConvBertForQuestionAnswering"),Pqo=o(" (ConvBERT model)"),Iqo=l(),S2=a("li"),eme=a("strong"),qqo=o("data2vec-text"),Nqo=o(" \u2014 "),OG=a("a"),jqo=o("Data2VecTextForQuestionAnswering"),Dqo=o(" (Data2VecText model)"),Gqo=l(),R2=a("li"),ome=a("strong"),Oqo=o("deberta"),Vqo=o(" \u2014 "),VG=a("a"),Xqo=o("DebertaForQuestionAnswering"),zqo=o(" (DeBERTa model)"),Qqo=l(),B2=a("li"),rme=a("strong"),Wqo=o("deberta-v2"),Hqo=o(" \u2014 "),XG=a("a"),Uqo=o("DebertaV2ForQuestionAnswering"),Jqo=o(" (DeBERTa-v2 model)"),Yqo=l(),P2=a("li"),tme=a("strong"),Kqo=o("distilbert"),Zqo=o(" \u2014 "),zG=a("a"),eNo=o("DistilBertForQuestionAnswering"),oNo=o(" (DistilBERT model)"),rNo=l(),I2=a("li"),ame=a("strong"),tNo=o("electra"),aNo=o(" \u2014 "),QG=a("a"),nNo=o("ElectraForQuestionAnswering"),sNo=o(" (ELECTRA model)"),lNo=l(),q2=a("li"),nme=a("strong"),iNo=o("flaubert"),dNo=o(" \u2014 "),WG=a("a"),cNo=o("FlaubertForQuestionAnsweringSimple"),fNo=o(" (FlauBERT model)"),mNo=l(),N2=a("li"),sme=a("strong"),gNo=o("fnet"),hNo=o(" \u2014 "),HG=a("a"),pNo=o("FNetForQuestionAnswering"),uNo=o(" (FNet model)"),_No=l(),j2=a("li"),lme=a("strong"),bNo=o("funnel"),vNo=o(" \u2014 "),UG=a("a"),FNo=o("FunnelForQuestionAnswering"),TNo=o(" (Funnel Transformer model)"),MNo=l(),D2=a("li"),ime=a("strong"),ENo=o("gptj"),CNo=o(" \u2014 "),JG=a("a"),wNo=o("GPTJForQuestionAnswering"),ANo=o(" (GPT-J model)"),yNo=l(),G2=a("li"),dme=a("strong"),LNo=o("ibert"),xNo=o(" \u2014 "),YG=a("a"),$No=o("IBertForQuestionAnswering"),kNo=o(" (I-BERT model)"),SNo=l(),O2=a("li"),cme=a("strong"),RNo=o("layoutlmv2"),BNo=o(" \u2014 "),KG=a("a"),PNo=o("LayoutLMv2ForQuestionAnswering"),INo=o(" (LayoutLMv2 model)"),qNo=l(),V2=a("li"),fme=a("strong"),NNo=o("led"),jNo=o(" \u2014 "),ZG=a("a"),DNo=o("LEDForQuestionAnswering"),GNo=o(" (LED model)"),ONo=l(),X2=a("li"),mme=a("strong"),VNo=o("longformer"),XNo=o(" \u2014 "),eO=a("a"),zNo=o("LongformerForQuestionAnswering"),QNo=o(" (Longformer model)"),WNo=l(),z2=a("li"),gme=a("strong"),HNo=o("lxmert"),UNo=o(" \u2014 "),oO=a("a"),JNo=o("LxmertForQuestionAnswering"),YNo=o(" (LXMERT model)"),KNo=l(),Q2=a("li"),hme=a("strong"),ZNo=o("mbart"),ejo=o(" \u2014 "),rO=a("a"),ojo=o("MBartForQuestionAnswering"),rjo=o(" (mBART model)"),tjo=l(),W2=a("li"),pme=a("strong"),ajo=o("megatron-bert"),njo=o(" \u2014 "),tO=a("a"),sjo=o("MegatronBertForQuestionAnswering"),ljo=o(" (MegatronBert model)"),ijo=l(),H2=a("li"),ume=a("strong"),djo=o("mobilebert"),cjo=o(" \u2014 "),aO=a("a"),fjo=o("MobileBertForQuestionAnswering"),mjo=o(" (MobileBERT model)"),gjo=l(),U2=a("li"),_me=a("strong"),hjo=o("mpnet"),pjo=o(" \u2014 "),nO=a("a"),ujo=o("MPNetForQuestionAnswering"),_jo=o(" (MPNet model)"),bjo=l(),J2=a("li"),bme=a("strong"),vjo=o("nystromformer"),Fjo=o(" \u2014 "),sO=a("a"),Tjo=o("NystromformerForQuestionAnswering"),Mjo=o(" (Nystromformer model)"),Ejo=l(),Y2=a("li"),vme=a("strong"),Cjo=o("qdqbert"),wjo=o(" \u2014 "),lO=a("a"),Ajo=o("QDQBertForQuestionAnswering"),yjo=o(" (QDQBert model)"),Ljo=l(),K2=a("li"),Fme=a("strong"),xjo=o("reformer"),$jo=o(" \u2014 "),iO=a("a"),kjo=o("ReformerForQuestionAnswering"),Sjo=o(" (Reformer model)"),Rjo=l(),Z2=a("li"),Tme=a("strong"),Bjo=o("rembert"),Pjo=o(" \u2014 "),dO=a("a"),Ijo=o("RemBertForQuestionAnswering"),qjo=o(" (RemBERT model)"),Njo=l(),e5=a("li"),Mme=a("strong"),jjo=o("roberta"),Djo=o(" \u2014 "),cO=a("a"),Gjo=o("RobertaForQuestionAnswering"),Ojo=o(" (RoBERTa model)"),Vjo=l(),o5=a("li"),Eme=a("strong"),Xjo=o("roformer"),zjo=o(" \u2014 "),fO=a("a"),Qjo=o("RoFormerForQuestionAnswering"),Wjo=o(" (RoFormer model)"),Hjo=l(),r5=a("li"),Cme=a("strong"),Ujo=o("splinter"),Jjo=o(" \u2014 "),mO=a("a"),Yjo=o("SplinterForQuestionAnswering"),Kjo=o(" (Splinter model)"),Zjo=l(),t5=a("li"),wme=a("strong"),eDo=o("squeezebert"),oDo=o(" \u2014 "),gO=a("a"),rDo=o("SqueezeBertForQuestionAnswering"),tDo=o(" (SqueezeBERT model)"),aDo=l(),a5=a("li"),Ame=a("strong"),nDo=o("xlm"),sDo=o(" \u2014 "),hO=a("a"),lDo=o("XLMForQuestionAnsweringSimple"),iDo=o(" (XLM model)"),dDo=l(),n5=a("li"),yme=a("strong"),cDo=o("xlm-roberta"),fDo=o(" \u2014 "),pO=a("a"),mDo=o("XLMRobertaForQuestionAnswering"),gDo=o(" (XLM-RoBERTa model)"),hDo=l(),s5=a("li"),Lme=a("strong"),pDo=o("xlm-roberta-xl"),uDo=o(" \u2014 "),uO=a("a"),_Do=o("XLMRobertaXLForQuestionAnswering"),bDo=o(" (XLM-RoBERTa-XL model)"),vDo=l(),l5=a("li"),xme=a("strong"),FDo=o("xlnet"),TDo=o(" \u2014 "),_O=a("a"),MDo=o("XLNetForQuestionAnsweringSimple"),EDo=o(" (XLNet model)"),CDo=l(),i5=a("li"),$me=a("strong"),wDo=o("yoso"),ADo=o(" \u2014 "),bO=a("a"),yDo=o("YosoForQuestionAnswering"),LDo=o(" (YOSO model)"),xDo=l(),d5=a("p"),$Do=o("The model is set in evaluation mode by default using "),kme=a("code"),kDo=o("model.eval()"),SDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=a("code"),RDo=o("model.train()"),BDo=l(),F(c5.$$.fragment),MBe=l(),zi=a("h2"),f5=a("a"),Rme=a("span"),F(j0.$$.fragment),PDo=l(),Bme=a("span"),IDo=o("AutoModelForTableQuestionAnswering"),EBe=l(),Io=a("div"),F(D0.$$.fragment),qDo=l(),Qi=a("p"),NDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vO=a("a"),jDo=o("from_pretrained()"),DDo=o(" class method or the "),FO=a("a"),GDo=o("from_config()"),ODo=o(` class
method.`),VDo=l(),G0=a("p"),XDo=o("This class cannot be instantiated directly using "),Pme=a("code"),zDo=o("__init__()"),QDo=o(" (throws an error)."),WDo=l(),it=a("div"),F(O0.$$.fragment),HDo=l(),Ime=a("p"),UDo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JDo=l(),Wi=a("p"),YDo=o(`Note:
Loading a model from its configuration file does `),qme=a("strong"),KDo=o("not"),ZDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=a("a"),eGo=o("from_pretrained()"),oGo=o(" to load the model weights."),rGo=l(),F(m5.$$.fragment),tGo=l(),ro=a("div"),F(V0.$$.fragment),aGo=l(),Nme=a("p"),nGo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sGo=l(),Sa=a("p"),lGo=o("The model class to instantiate is selected based on the "),jme=a("code"),iGo=o("model_type"),dGo=o(` property of the config object (either
passed as an argument or loaded from `),Dme=a("code"),cGo=o("pretrained_model_name_or_path"),fGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=a("code"),mGo=o("pretrained_model_name_or_path"),gGo=o(":"),hGo=l(),Ome=a("ul"),g5=a("li"),Vme=a("strong"),pGo=o("tapas"),uGo=o(" \u2014 "),MO=a("a"),_Go=o("TapasForQuestionAnswering"),bGo=o(" (TAPAS model)"),vGo=l(),h5=a("p"),FGo=o("The model is set in evaluation mode by default using "),Xme=a("code"),TGo=o("model.eval()"),MGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=a("code"),EGo=o("model.train()"),CGo=l(),F(p5.$$.fragment),CBe=l(),Hi=a("h2"),u5=a("a"),Qme=a("span"),F(X0.$$.fragment),wGo=l(),Wme=a("span"),AGo=o("AutoModelForImageClassification"),wBe=l(),qo=a("div"),F(z0.$$.fragment),yGo=l(),Ui=a("p"),LGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EO=a("a"),xGo=o("from_pretrained()"),$Go=o(" class method or the "),CO=a("a"),kGo=o("from_config()"),SGo=o(` class
method.`),RGo=l(),Q0=a("p"),BGo=o("This class cannot be instantiated directly using "),Hme=a("code"),PGo=o("__init__()"),IGo=o(" (throws an error)."),qGo=l(),dt=a("div"),F(W0.$$.fragment),NGo=l(),Ume=a("p"),jGo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DGo=l(),Ji=a("p"),GGo=o(`Note:
Loading a model from its configuration file does `),Jme=a("strong"),OGo=o("not"),VGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),XGo=o("from_pretrained()"),zGo=o(" to load the model weights."),QGo=l(),F(_5.$$.fragment),WGo=l(),to=a("div"),F(H0.$$.fragment),HGo=l(),Yme=a("p"),UGo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JGo=l(),Ra=a("p"),YGo=o("The model class to instantiate is selected based on the "),Kme=a("code"),KGo=o("model_type"),ZGo=o(` property of the config object (either
passed as an argument or loaded from `),Zme=a("code"),eOo=o("pretrained_model_name_or_path"),oOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=a("code"),rOo=o("pretrained_model_name_or_path"),tOo=o(":"),aOo=l(),ve=a("ul"),b5=a("li"),oge=a("strong"),nOo=o("beit"),sOo=o(" \u2014 "),AO=a("a"),lOo=o("BeitForImageClassification"),iOo=o(" (BEiT model)"),dOo=l(),v5=a("li"),rge=a("strong"),cOo=o("convnext"),fOo=o(" \u2014 "),yO=a("a"),mOo=o("ConvNextForImageClassification"),gOo=o(" (ConvNext model)"),hOo=l(),F5=a("li"),tge=a("strong"),pOo=o("data2vec-vision"),uOo=o(" \u2014 "),LO=a("a"),_Oo=o("Data2VecVisionForImageClassification"),bOo=o(" (Data2VecVision model)"),vOo=l(),Ls=a("li"),age=a("strong"),FOo=o("deit"),TOo=o(" \u2014 "),xO=a("a"),MOo=o("DeiTForImageClassification"),EOo=o(" or "),$O=a("a"),COo=o("DeiTForImageClassificationWithTeacher"),wOo=o(" (DeiT model)"),AOo=l(),T5=a("li"),nge=a("strong"),yOo=o("imagegpt"),LOo=o(" \u2014 "),kO=a("a"),xOo=o("ImageGPTForImageClassification"),$Oo=o(" (ImageGPT model)"),kOo=l(),ct=a("li"),sge=a("strong"),SOo=o("perceiver"),ROo=o(" \u2014 "),SO=a("a"),BOo=o("PerceiverForImageClassificationLearned"),POo=o(" or "),RO=a("a"),IOo=o("PerceiverForImageClassificationFourier"),qOo=o(" or "),BO=a("a"),NOo=o("PerceiverForImageClassificationConvProcessing"),jOo=o(" (Perceiver model)"),DOo=l(),M5=a("li"),lge=a("strong"),GOo=o("poolformer"),OOo=o(" \u2014 "),PO=a("a"),VOo=o("PoolFormerForImageClassification"),XOo=o(" (PoolFormer model)"),zOo=l(),E5=a("li"),ige=a("strong"),QOo=o("regnet"),WOo=o(" \u2014 "),IO=a("a"),HOo=o("RegNetForImageClassification"),UOo=o(" (RegNet model)"),JOo=l(),C5=a("li"),dge=a("strong"),YOo=o("resnet"),KOo=o(" \u2014 "),qO=a("a"),ZOo=o("ResNetForImageClassification"),eVo=o(" (ResNet model)"),oVo=l(),w5=a("li"),cge=a("strong"),rVo=o("segformer"),tVo=o(" \u2014 "),NO=a("a"),aVo=o("SegformerForImageClassification"),nVo=o(" (SegFormer model)"),sVo=l(),A5=a("li"),fge=a("strong"),lVo=o("swin"),iVo=o(" \u2014 "),jO=a("a"),dVo=o("SwinForImageClassification"),cVo=o(" (Swin model)"),fVo=l(),y5=a("li"),mge=a("strong"),mVo=o("van"),gVo=o(" \u2014 "),DO=a("a"),hVo=o("VanForImageClassification"),pVo=o(" (VAN model)"),uVo=l(),L5=a("li"),gge=a("strong"),_Vo=o("vit"),bVo=o(" \u2014 "),GO=a("a"),vVo=o("ViTForImageClassification"),FVo=o(" (ViT model)"),TVo=l(),x5=a("p"),MVo=o("The model is set in evaluation mode by default using "),hge=a("code"),EVo=o("model.eval()"),CVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=a("code"),wVo=o("model.train()"),AVo=l(),F($5.$$.fragment),ABe=l(),Yi=a("h2"),k5=a("a"),uge=a("span"),F(U0.$$.fragment),yVo=l(),_ge=a("span"),LVo=o("AutoModelForVision2Seq"),yBe=l(),No=a("div"),F(J0.$$.fragment),xVo=l(),Ki=a("p"),$Vo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OO=a("a"),kVo=o("from_pretrained()"),SVo=o(" class method or the "),VO=a("a"),RVo=o("from_config()"),BVo=o(` class
method.`),PVo=l(),Y0=a("p"),IVo=o("This class cannot be instantiated directly using "),bge=a("code"),qVo=o("__init__()"),NVo=o(" (throws an error)."),jVo=l(),ft=a("div"),F(K0.$$.fragment),DVo=l(),vge=a("p"),GVo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OVo=l(),Zi=a("p"),VVo=o(`Note:
Loading a model from its configuration file does `),Fge=a("strong"),XVo=o("not"),zVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=a("a"),QVo=o("from_pretrained()"),WVo=o(" to load the model weights."),HVo=l(),F(S5.$$.fragment),UVo=l(),ao=a("div"),F(Z0.$$.fragment),JVo=l(),Tge=a("p"),YVo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KVo=l(),Ba=a("p"),ZVo=o("The model class to instantiate is selected based on the "),Mge=a("code"),eXo=o("model_type"),oXo=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),rXo=o("pretrained_model_name_or_path"),tXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=a("code"),aXo=o("pretrained_model_name_or_path"),nXo=o(":"),sXo=l(),wge=a("ul"),R5=a("li"),Age=a("strong"),lXo=o("vision-encoder-decoder"),iXo=o(" \u2014 "),zO=a("a"),dXo=o("VisionEncoderDecoderModel"),cXo=o(" (Vision Encoder decoder model)"),fXo=l(),B5=a("p"),mXo=o("The model is set in evaluation mode by default using "),yge=a("code"),gXo=o("model.eval()"),hXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=a("code"),pXo=o("model.train()"),uXo=l(),F(P5.$$.fragment),LBe=l(),ed=a("h2"),I5=a("a"),xge=a("span"),F(ey.$$.fragment),_Xo=l(),$ge=a("span"),bXo=o("AutoModelForAudioClassification"),xBe=l(),jo=a("div"),F(oy.$$.fragment),vXo=l(),od=a("p"),FXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),QO=a("a"),TXo=o("from_pretrained()"),MXo=o(" class method or the "),WO=a("a"),EXo=o("from_config()"),CXo=o(` class
method.`),wXo=l(),ry=a("p"),AXo=o("This class cannot be instantiated directly using "),kge=a("code"),yXo=o("__init__()"),LXo=o(" (throws an error)."),xXo=l(),mt=a("div"),F(ty.$$.fragment),$Xo=l(),Sge=a("p"),kXo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),SXo=l(),rd=a("p"),RXo=o(`Note:
Loading a model from its configuration file does `),Rge=a("strong"),BXo=o("not"),PXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),IXo=o("from_pretrained()"),qXo=o(" to load the model weights."),NXo=l(),F(q5.$$.fragment),jXo=l(),no=a("div"),F(ay.$$.fragment),DXo=l(),Bge=a("p"),GXo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),OXo=l(),Pa=a("p"),VXo=o("The model class to instantiate is selected based on the "),Pge=a("code"),XXo=o("model_type"),zXo=o(` property of the config object (either
passed as an argument or loaded from `),Ige=a("code"),QXo=o("pretrained_model_name_or_path"),WXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=a("code"),HXo=o("pretrained_model_name_or_path"),UXo=o(":"),JXo=l(),qe=a("ul"),N5=a("li"),Nge=a("strong"),YXo=o("data2vec-audio"),KXo=o(" \u2014 "),UO=a("a"),ZXo=o("Data2VecAudioForSequenceClassification"),ezo=o(" (Data2VecAudio model)"),ozo=l(),j5=a("li"),jge=a("strong"),rzo=o("hubert"),tzo=o(" \u2014 "),JO=a("a"),azo=o("HubertForSequenceClassification"),nzo=o(" (Hubert model)"),szo=l(),D5=a("li"),Dge=a("strong"),lzo=o("sew"),izo=o(" \u2014 "),YO=a("a"),dzo=o("SEWForSequenceClassification"),czo=o(" (SEW model)"),fzo=l(),G5=a("li"),Gge=a("strong"),mzo=o("sew-d"),gzo=o(" \u2014 "),KO=a("a"),hzo=o("SEWDForSequenceClassification"),pzo=o(" (SEW-D model)"),uzo=l(),O5=a("li"),Oge=a("strong"),_zo=o("unispeech"),bzo=o(" \u2014 "),ZO=a("a"),vzo=o("UniSpeechForSequenceClassification"),Fzo=o(" (UniSpeech model)"),Tzo=l(),V5=a("li"),Vge=a("strong"),Mzo=o("unispeech-sat"),Ezo=o(" \u2014 "),eV=a("a"),Czo=o("UniSpeechSatForSequenceClassification"),wzo=o(" (UniSpeechSat model)"),Azo=l(),X5=a("li"),Xge=a("strong"),yzo=o("wav2vec2"),Lzo=o(" \u2014 "),oV=a("a"),xzo=o("Wav2Vec2ForSequenceClassification"),$zo=o(" (Wav2Vec2 model)"),kzo=l(),z5=a("li"),zge=a("strong"),Szo=o("wavlm"),Rzo=o(" \u2014 "),rV=a("a"),Bzo=o("WavLMForSequenceClassification"),Pzo=o(" (WavLM model)"),Izo=l(),Q5=a("p"),qzo=o("The model is set in evaluation mode by default using "),Qge=a("code"),Nzo=o("model.eval()"),jzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=a("code"),Dzo=o("model.train()"),Gzo=l(),F(W5.$$.fragment),$Be=l(),td=a("h2"),H5=a("a"),Hge=a("span"),F(ny.$$.fragment),Ozo=l(),Uge=a("span"),Vzo=o("AutoModelForAudioFrameClassification"),kBe=l(),Do=a("div"),F(sy.$$.fragment),Xzo=l(),ad=a("p"),zzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),tV=a("a"),Qzo=o("from_pretrained()"),Wzo=o(" class method or the "),aV=a("a"),Hzo=o("from_config()"),Uzo=o(` class
method.`),Jzo=l(),ly=a("p"),Yzo=o("This class cannot be instantiated directly using "),Jge=a("code"),Kzo=o("__init__()"),Zzo=o(" (throws an error)."),eQo=l(),gt=a("div"),F(iy.$$.fragment),oQo=l(),Yge=a("p"),rQo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tQo=l(),nd=a("p"),aQo=o(`Note:
Loading a model from its configuration file does `),Kge=a("strong"),nQo=o("not"),sQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=a("a"),lQo=o("from_pretrained()"),iQo=o(" to load the model weights."),dQo=l(),F(U5.$$.fragment),cQo=l(),so=a("div"),F(dy.$$.fragment),fQo=l(),Zge=a("p"),mQo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),gQo=l(),Ia=a("p"),hQo=o("The model class to instantiate is selected based on the "),ehe=a("code"),pQo=o("model_type"),uQo=o(` property of the config object (either
passed as an argument or loaded from `),ohe=a("code"),_Qo=o("pretrained_model_name_or_path"),bQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=a("code"),vQo=o("pretrained_model_name_or_path"),FQo=o(":"),TQo=l(),qa=a("ul"),J5=a("li"),the=a("strong"),MQo=o("data2vec-audio"),EQo=o(" \u2014 "),sV=a("a"),CQo=o("Data2VecAudioForAudioFrameClassification"),wQo=o(" (Data2VecAudio model)"),AQo=l(),Y5=a("li"),ahe=a("strong"),yQo=o("unispeech-sat"),LQo=o(" \u2014 "),lV=a("a"),xQo=o("UniSpeechSatForAudioFrameClassification"),$Qo=o(" (UniSpeechSat model)"),kQo=l(),K5=a("li"),nhe=a("strong"),SQo=o("wav2vec2"),RQo=o(" \u2014 "),iV=a("a"),BQo=o("Wav2Vec2ForAudioFrameClassification"),PQo=o(" (Wav2Vec2 model)"),IQo=l(),Z5=a("li"),she=a("strong"),qQo=o("wavlm"),NQo=o(" \u2014 "),dV=a("a"),jQo=o("WavLMForAudioFrameClassification"),DQo=o(" (WavLM model)"),GQo=l(),ev=a("p"),OQo=o("The model is set in evaluation mode by default using "),lhe=a("code"),VQo=o("model.eval()"),XQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=a("code"),zQo=o("model.train()"),QQo=l(),F(ov.$$.fragment),SBe=l(),sd=a("h2"),rv=a("a"),dhe=a("span"),F(cy.$$.fragment),WQo=l(),che=a("span"),HQo=o("AutoModelForCTC"),RBe=l(),Go=a("div"),F(fy.$$.fragment),UQo=l(),ld=a("p"),JQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cV=a("a"),YQo=o("from_pretrained()"),KQo=o(" class method or the "),fV=a("a"),ZQo=o("from_config()"),eWo=o(` class
method.`),oWo=l(),my=a("p"),rWo=o("This class cannot be instantiated directly using "),fhe=a("code"),tWo=o("__init__()"),aWo=o(" (throws an error)."),nWo=l(),ht=a("div"),F(gy.$$.fragment),sWo=l(),mhe=a("p"),lWo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),iWo=l(),id=a("p"),dWo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),cWo=o("not"),fWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=a("a"),mWo=o("from_pretrained()"),gWo=o(" to load the model weights."),hWo=l(),F(tv.$$.fragment),pWo=l(),lo=a("div"),F(hy.$$.fragment),uWo=l(),hhe=a("p"),_Wo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),bWo=l(),Na=a("p"),vWo=o("The model class to instantiate is selected based on the "),phe=a("code"),FWo=o("model_type"),TWo=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),MWo=o("pretrained_model_name_or_path"),EWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),CWo=o("pretrained_model_name_or_path"),wWo=o(":"),AWo=l(),Ne=a("ul"),av=a("li"),bhe=a("strong"),yWo=o("data2vec-audio"),LWo=o(" \u2014 "),gV=a("a"),xWo=o("Data2VecAudioForCTC"),$Wo=o(" (Data2VecAudio model)"),kWo=l(),nv=a("li"),vhe=a("strong"),SWo=o("hubert"),RWo=o(" \u2014 "),hV=a("a"),BWo=o("HubertForCTC"),PWo=o(" (Hubert model)"),IWo=l(),sv=a("li"),Fhe=a("strong"),qWo=o("sew"),NWo=o(" \u2014 "),pV=a("a"),jWo=o("SEWForCTC"),DWo=o(" (SEW model)"),GWo=l(),lv=a("li"),The=a("strong"),OWo=o("sew-d"),VWo=o(" \u2014 "),uV=a("a"),XWo=o("SEWDForCTC"),zWo=o(" (SEW-D model)"),QWo=l(),iv=a("li"),Mhe=a("strong"),WWo=o("unispeech"),HWo=o(" \u2014 "),_V=a("a"),UWo=o("UniSpeechForCTC"),JWo=o(" (UniSpeech model)"),YWo=l(),dv=a("li"),Ehe=a("strong"),KWo=o("unispeech-sat"),ZWo=o(" \u2014 "),bV=a("a"),eHo=o("UniSpeechSatForCTC"),oHo=o(" (UniSpeechSat model)"),rHo=l(),cv=a("li"),Che=a("strong"),tHo=o("wav2vec2"),aHo=o(" \u2014 "),vV=a("a"),nHo=o("Wav2Vec2ForCTC"),sHo=o(" (Wav2Vec2 model)"),lHo=l(),fv=a("li"),whe=a("strong"),iHo=o("wavlm"),dHo=o(" \u2014 "),FV=a("a"),cHo=o("WavLMForCTC"),fHo=o(" (WavLM model)"),mHo=l(),mv=a("p"),gHo=o("The model is set in evaluation mode by default using "),Ahe=a("code"),hHo=o("model.eval()"),pHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),uHo=o("model.train()"),_Ho=l(),F(gv.$$.fragment),BBe=l(),dd=a("h2"),hv=a("a"),Lhe=a("span"),F(py.$$.fragment),bHo=l(),xhe=a("span"),vHo=o("AutoModelForSpeechSeq2Seq"),PBe=l(),Oo=a("div"),F(uy.$$.fragment),FHo=l(),cd=a("p"),THo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TV=a("a"),MHo=o("from_pretrained()"),EHo=o(" class method or the "),MV=a("a"),CHo=o("from_config()"),wHo=o(` class
method.`),AHo=l(),_y=a("p"),yHo=o("This class cannot be instantiated directly using "),$he=a("code"),LHo=o("__init__()"),xHo=o(" (throws an error)."),$Ho=l(),pt=a("div"),F(by.$$.fragment),kHo=l(),khe=a("p"),SHo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RHo=l(),fd=a("p"),BHo=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),PHo=o("not"),IHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),qHo=o("from_pretrained()"),NHo=o(" to load the model weights."),jHo=l(),F(pv.$$.fragment),DHo=l(),io=a("div"),F(vy.$$.fragment),GHo=l(),Rhe=a("p"),OHo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),VHo=l(),ja=a("p"),XHo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),zHo=o("model_type"),QHo=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),WHo=o("pretrained_model_name_or_path"),HHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),UHo=o("pretrained_model_name_or_path"),JHo=o(":"),YHo=l(),Fy=a("ul"),uv=a("li"),qhe=a("strong"),KHo=o("speech-encoder-decoder"),ZHo=o(" \u2014 "),CV=a("a"),eUo=o("SpeechEncoderDecoderModel"),oUo=o(" (Speech Encoder decoder model)"),rUo=l(),_v=a("li"),Nhe=a("strong"),tUo=o("speech_to_text"),aUo=o(" \u2014 "),wV=a("a"),nUo=o("Speech2TextForConditionalGeneration"),sUo=o(" (Speech2Text model)"),lUo=l(),bv=a("p"),iUo=o("The model is set in evaluation mode by default using "),jhe=a("code"),dUo=o("model.eval()"),cUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),fUo=o("model.train()"),mUo=l(),F(vv.$$.fragment),IBe=l(),md=a("h2"),Fv=a("a"),Ghe=a("span"),F(Ty.$$.fragment),gUo=l(),Ohe=a("span"),hUo=o("AutoModelForAudioXVector"),qBe=l(),Vo=a("div"),F(My.$$.fragment),pUo=l(),gd=a("p"),uUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),AV=a("a"),_Uo=o("from_pretrained()"),bUo=o(" class method or the "),yV=a("a"),vUo=o("from_config()"),FUo=o(` class
method.`),TUo=l(),Ey=a("p"),MUo=o("This class cannot be instantiated directly using "),Vhe=a("code"),EUo=o("__init__()"),CUo=o(" (throws an error)."),wUo=l(),ut=a("div"),F(Cy.$$.fragment),AUo=l(),Xhe=a("p"),yUo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),LUo=l(),hd=a("p"),xUo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),$Uo=o("not"),kUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),SUo=o("from_pretrained()"),RUo=o(" to load the model weights."),BUo=l(),F(Tv.$$.fragment),PUo=l(),co=a("div"),F(wy.$$.fragment),IUo=l(),Qhe=a("p"),qUo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),NUo=l(),Da=a("p"),jUo=o("The model class to instantiate is selected based on the "),Whe=a("code"),DUo=o("model_type"),GUo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),OUo=o("pretrained_model_name_or_path"),VUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),XUo=o("pretrained_model_name_or_path"),zUo=o(":"),QUo=l(),Ga=a("ul"),Mv=a("li"),Jhe=a("strong"),WUo=o("data2vec-audio"),HUo=o(" \u2014 "),xV=a("a"),UUo=o("Data2VecAudioForXVector"),JUo=o(" (Data2VecAudio model)"),YUo=l(),Ev=a("li"),Yhe=a("strong"),KUo=o("unispeech-sat"),ZUo=o(" \u2014 "),$V=a("a"),eJo=o("UniSpeechSatForXVector"),oJo=o(" (UniSpeechSat model)"),rJo=l(),Cv=a("li"),Khe=a("strong"),tJo=o("wav2vec2"),aJo=o(" \u2014 "),kV=a("a"),nJo=o("Wav2Vec2ForXVector"),sJo=o(" (Wav2Vec2 model)"),lJo=l(),wv=a("li"),Zhe=a("strong"),iJo=o("wavlm"),dJo=o(" \u2014 "),SV=a("a"),cJo=o("WavLMForXVector"),fJo=o(" (WavLM model)"),mJo=l(),Av=a("p"),gJo=o("The model is set in evaluation mode by default using "),epe=a("code"),hJo=o("model.eval()"),pJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),uJo=o("model.train()"),_Jo=l(),F(yv.$$.fragment),NBe=l(),pd=a("h2"),Lv=a("a"),rpe=a("span"),F(Ay.$$.fragment),bJo=l(),tpe=a("span"),vJo=o("AutoModelForMaskedImageModeling"),jBe=l(),Xo=a("div"),F(yy.$$.fragment),FJo=l(),ud=a("p"),TJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RV=a("a"),MJo=o("from_pretrained()"),EJo=o(" class method or the "),BV=a("a"),CJo=o("from_config()"),wJo=o(` class
method.`),AJo=l(),Ly=a("p"),yJo=o("This class cannot be instantiated directly using "),ape=a("code"),LJo=o("__init__()"),xJo=o(" (throws an error)."),$Jo=l(),_t=a("div"),F(xy.$$.fragment),kJo=l(),npe=a("p"),SJo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),RJo=l(),_d=a("p"),BJo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),PJo=o("not"),IJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),qJo=o("from_pretrained()"),NJo=o(" to load the model weights."),jJo=l(),F(xv.$$.fragment),DJo=l(),fo=a("div"),F($y.$$.fragment),GJo=l(),lpe=a("p"),OJo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),VJo=l(),Oa=a("p"),XJo=o("The model class to instantiate is selected based on the "),ipe=a("code"),zJo=o("model_type"),QJo=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),WJo=o("pretrained_model_name_or_path"),HJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),UJo=o("pretrained_model_name_or_path"),JJo=o(":"),YJo=l(),bd=a("ul"),$v=a("li"),fpe=a("strong"),KJo=o("deit"),ZJo=o(" \u2014 "),IV=a("a"),eYo=o("DeiTForMaskedImageModeling"),oYo=o(" (DeiT model)"),rYo=l(),kv=a("li"),mpe=a("strong"),tYo=o("swin"),aYo=o(" \u2014 "),qV=a("a"),nYo=o("SwinForMaskedImageModeling"),sYo=o(" (Swin model)"),lYo=l(),Sv=a("li"),gpe=a("strong"),iYo=o("vit"),dYo=o(" \u2014 "),NV=a("a"),cYo=o("ViTForMaskedImageModeling"),fYo=o(" (ViT model)"),mYo=l(),Rv=a("p"),gYo=o("The model is set in evaluation mode by default using "),hpe=a("code"),hYo=o("model.eval()"),pYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=a("code"),uYo=o("model.train()"),_Yo=l(),F(Bv.$$.fragment),DBe=l(),vd=a("h2"),Pv=a("a"),upe=a("span"),F(ky.$$.fragment),bYo=l(),_pe=a("span"),vYo=o("AutoModelForObjectDetection"),GBe=l(),zo=a("div"),F(Sy.$$.fragment),FYo=l(),Fd=a("p"),TYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jV=a("a"),MYo=o("from_pretrained()"),EYo=o(" class method or the "),DV=a("a"),CYo=o("from_config()"),wYo=o(` class
method.`),AYo=l(),Ry=a("p"),yYo=o("This class cannot be instantiated directly using "),bpe=a("code"),LYo=o("__init__()"),xYo=o(" (throws an error)."),$Yo=l(),bt=a("div"),F(By.$$.fragment),kYo=l(),vpe=a("p"),SYo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),RYo=l(),Td=a("p"),BYo=o(`Note:
Loading a model from its configuration file does `),Fpe=a("strong"),PYo=o("not"),IYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),qYo=o("from_pretrained()"),NYo=o(" to load the model weights."),jYo=l(),F(Iv.$$.fragment),DYo=l(),mo=a("div"),F(Py.$$.fragment),GYo=l(),Tpe=a("p"),OYo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),VYo=l(),Va=a("p"),XYo=o("The model class to instantiate is selected based on the "),Mpe=a("code"),zYo=o("model_type"),QYo=o(` property of the config object (either
passed as an argument or loaded from `),Epe=a("code"),WYo=o("pretrained_model_name_or_path"),HYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),UYo=o("pretrained_model_name_or_path"),JYo=o(":"),YYo=l(),wpe=a("ul"),qv=a("li"),Ape=a("strong"),KYo=o("detr"),ZYo=o(" \u2014 "),OV=a("a"),eKo=o("DetrForObjectDetection"),oKo=o(" (DETR model)"),rKo=l(),Nv=a("p"),tKo=o("The model is set in evaluation mode by default using "),ype=a("code"),aKo=o("model.eval()"),nKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=a("code"),sKo=o("model.train()"),lKo=l(),F(jv.$$.fragment),OBe=l(),Md=a("h2"),Dv=a("a"),xpe=a("span"),F(Iy.$$.fragment),iKo=l(),$pe=a("span"),dKo=o("AutoModelForImageSegmentation"),VBe=l(),Qo=a("div"),F(qy.$$.fragment),cKo=l(),Ed=a("p"),fKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),VV=a("a"),mKo=o("from_pretrained()"),gKo=o(" class method or the "),XV=a("a"),hKo=o("from_config()"),pKo=o(` class
method.`),uKo=l(),Ny=a("p"),_Ko=o("This class cannot be instantiated directly using "),kpe=a("code"),bKo=o("__init__()"),vKo=o(" (throws an error)."),FKo=l(),vt=a("div"),F(jy.$$.fragment),TKo=l(),Spe=a("p"),MKo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),EKo=l(),Cd=a("p"),CKo=o(`Note:
Loading a model from its configuration file does `),Rpe=a("strong"),wKo=o("not"),AKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),yKo=o("from_pretrained()"),LKo=o(" to load the model weights."),xKo=l(),F(Gv.$$.fragment),$Ko=l(),go=a("div"),F(Dy.$$.fragment),kKo=l(),Bpe=a("p"),SKo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),RKo=l(),Xa=a("p"),BKo=o("The model class to instantiate is selected based on the "),Ppe=a("code"),PKo=o("model_type"),IKo=o(` property of the config object (either
passed as an argument or loaded from `),Ipe=a("code"),qKo=o("pretrained_model_name_or_path"),NKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=a("code"),jKo=o("pretrained_model_name_or_path"),DKo=o(":"),GKo=l(),Npe=a("ul"),Ov=a("li"),jpe=a("strong"),OKo=o("detr"),VKo=o(" \u2014 "),QV=a("a"),XKo=o("DetrForSegmentation"),zKo=o(" (DETR model)"),QKo=l(),Vv=a("p"),WKo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),HKo=o("model.eval()"),UKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),JKo=o("model.train()"),YKo=l(),F(Xv.$$.fragment),XBe=l(),wd=a("h2"),zv=a("a"),Ope=a("span"),F(Gy.$$.fragment),KKo=l(),Vpe=a("span"),ZKo=o("AutoModelForSemanticSegmentation"),zBe=l(),Wo=a("div"),F(Oy.$$.fragment),eZo=l(),Ad=a("p"),oZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),WV=a("a"),rZo=o("from_pretrained()"),tZo=o(" class method or the "),HV=a("a"),aZo=o("from_config()"),nZo=o(` class
method.`),sZo=l(),Vy=a("p"),lZo=o("This class cannot be instantiated directly using "),Xpe=a("code"),iZo=o("__init__()"),dZo=o(" (throws an error)."),cZo=l(),Ft=a("div"),F(Xy.$$.fragment),fZo=l(),zpe=a("p"),mZo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),gZo=l(),yd=a("p"),hZo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),pZo=o("not"),uZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),_Zo=o("from_pretrained()"),bZo=o(" to load the model weights."),vZo=l(),F(Qv.$$.fragment),FZo=l(),ho=a("div"),F(zy.$$.fragment),TZo=l(),Wpe=a("p"),MZo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),EZo=l(),za=a("p"),CZo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),wZo=o("model_type"),AZo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),yZo=o("pretrained_model_name_or_path"),LZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),xZo=o("pretrained_model_name_or_path"),$Zo=o(":"),kZo=l(),Qa=a("ul"),Wv=a("li"),Ype=a("strong"),SZo=o("beit"),RZo=o(" \u2014 "),JV=a("a"),BZo=o("BeitForSemanticSegmentation"),PZo=o(" (BEiT model)"),IZo=l(),Hv=a("li"),Kpe=a("strong"),qZo=o("data2vec-vision"),NZo=o(" \u2014 "),YV=a("a"),jZo=o("Data2VecVisionForSemanticSegmentation"),DZo=o(" (Data2VecVision model)"),GZo=l(),Uv=a("li"),Zpe=a("strong"),OZo=o("dpt"),VZo=o(" \u2014 "),KV=a("a"),XZo=o("DPTForSemanticSegmentation"),zZo=o(" (DPT model)"),QZo=l(),Jv=a("li"),eue=a("strong"),WZo=o("segformer"),HZo=o(" \u2014 "),ZV=a("a"),UZo=o("SegformerForSemanticSegmentation"),JZo=o(" (SegFormer model)"),YZo=l(),Yv=a("p"),KZo=o("The model is set in evaluation mode by default using "),oue=a("code"),ZZo=o("model.eval()"),eer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=a("code"),oer=o("model.train()"),rer=l(),F(Kv.$$.fragment),QBe=l(),Ld=a("h2"),Zv=a("a"),tue=a("span"),F(Qy.$$.fragment),ter=l(),aue=a("span"),aer=o("AutoModelForInstanceSegmentation"),WBe=l(),Ho=a("div"),F(Wy.$$.fragment),ner=l(),xd=a("p"),ser=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eX=a("a"),ler=o("from_pretrained()"),ier=o(" class method or the "),oX=a("a"),der=o("from_config()"),cer=o(` class
method.`),fer=l(),Hy=a("p"),mer=o("This class cannot be instantiated directly using "),nue=a("code"),ger=o("__init__()"),her=o(" (throws an error)."),per=l(),Tt=a("div"),F(Uy.$$.fragment),uer=l(),sue=a("p"),_er=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ber=l(),$d=a("p"),ver=o(`Note:
Loading a model from its configuration file does `),lue=a("strong"),Fer=o("not"),Ter=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),Mer=o("from_pretrained()"),Eer=o(" to load the model weights."),Cer=l(),F(eF.$$.fragment),wer=l(),po=a("div"),F(Jy.$$.fragment),Aer=l(),iue=a("p"),yer=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ler=l(),Wa=a("p"),xer=o("The model class to instantiate is selected based on the "),due=a("code"),$er=o("model_type"),ker=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),Ser=o("pretrained_model_name_or_path"),Rer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),Ber=o("pretrained_model_name_or_path"),Per=o(":"),Ier=l(),mue=a("ul"),oF=a("li"),gue=a("strong"),qer=o("maskformer"),Ner=o(" \u2014 "),tX=a("a"),jer=o("MaskFormerForInstanceSegmentation"),Der=o(" (MaskFormer model)"),Ger=l(),rF=a("p"),Oer=o("The model is set in evaluation mode by default using "),hue=a("code"),Ver=o("model.eval()"),Xer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),zer=o("model.train()"),Qer=l(),F(tF.$$.fragment),HBe=l(),kd=a("h2"),aF=a("a"),uue=a("span"),F(Yy.$$.fragment),Wer=l(),_ue=a("span"),Her=o("TFAutoModel"),UBe=l(),Uo=a("div"),F(Ky.$$.fragment),Uer=l(),Sd=a("p"),Jer=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aX=a("a"),Yer=o("from_pretrained()"),Ker=o(" class method or the "),nX=a("a"),Zer=o("from_config()"),eor=o(` class
method.`),oor=l(),Zy=a("p"),ror=o("This class cannot be instantiated directly using "),bue=a("code"),tor=o("__init__()"),aor=o(" (throws an error)."),nor=l(),Mt=a("div"),F(eL.$$.fragment),sor=l(),vue=a("p"),lor=o("Instantiates one of the base model classes of the library from a configuration."),ior=l(),Rd=a("p"),dor=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),cor=o("not"),mor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),gor=o("from_pretrained()"),hor=o(" to load the model weights."),por=l(),F(nF.$$.fragment),uor=l(),Mr=a("div"),F(oL.$$.fragment),_or=l(),Tue=a("p"),bor=o("Instantiate one of the base model classes of the library from a pretrained model."),vor=l(),Ha=a("p"),For=o("The model class to instantiate is selected based on the "),Mue=a("code"),Tor=o("model_type"),Mor=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),Eor=o("pretrained_model_name_or_path"),Cor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),wor=o("pretrained_model_name_or_path"),Aor=o(":"),yor=l(),j=a("ul"),sF=a("li"),wue=a("strong"),Lor=o("albert"),xor=o(" \u2014 "),lX=a("a"),$or=o("TFAlbertModel"),kor=o(" (ALBERT model)"),Sor=l(),lF=a("li"),Aue=a("strong"),Ror=o("bart"),Bor=o(" \u2014 "),iX=a("a"),Por=o("TFBartModel"),Ior=o(" (BART model)"),qor=l(),iF=a("li"),yue=a("strong"),Nor=o("bert"),jor=o(" \u2014 "),dX=a("a"),Dor=o("TFBertModel"),Gor=o(" (BERT model)"),Oor=l(),dF=a("li"),Lue=a("strong"),Vor=o("blenderbot"),Xor=o(" \u2014 "),cX=a("a"),zor=o("TFBlenderbotModel"),Qor=o(" (Blenderbot model)"),Wor=l(),cF=a("li"),xue=a("strong"),Hor=o("blenderbot-small"),Uor=o(" \u2014 "),fX=a("a"),Jor=o("TFBlenderbotSmallModel"),Yor=o(" (BlenderbotSmall model)"),Kor=l(),fF=a("li"),$ue=a("strong"),Zor=o("camembert"),err=o(" \u2014 "),mX=a("a"),orr=o("TFCamembertModel"),rrr=o(" (CamemBERT model)"),trr=l(),mF=a("li"),kue=a("strong"),arr=o("clip"),nrr=o(" \u2014 "),gX=a("a"),srr=o("TFCLIPModel"),lrr=o(" (CLIP model)"),irr=l(),gF=a("li"),Sue=a("strong"),drr=o("convbert"),crr=o(" \u2014 "),hX=a("a"),frr=o("TFConvBertModel"),mrr=o(" (ConvBERT model)"),grr=l(),hF=a("li"),Rue=a("strong"),hrr=o("convnext"),prr=o(" \u2014 "),pX=a("a"),urr=o("TFConvNextModel"),_rr=o(" (ConvNext model)"),brr=l(),pF=a("li"),Bue=a("strong"),vrr=o("ctrl"),Frr=o(" \u2014 "),uX=a("a"),Trr=o("TFCTRLModel"),Mrr=o(" (CTRL model)"),Err=l(),uF=a("li"),Pue=a("strong"),Crr=o("deberta"),wrr=o(" \u2014 "),_X=a("a"),Arr=o("TFDebertaModel"),yrr=o(" (DeBERTa model)"),Lrr=l(),_F=a("li"),Iue=a("strong"),xrr=o("deberta-v2"),$rr=o(" \u2014 "),bX=a("a"),krr=o("TFDebertaV2Model"),Srr=o(" (DeBERTa-v2 model)"),Rrr=l(),bF=a("li"),que=a("strong"),Brr=o("distilbert"),Prr=o(" \u2014 "),vX=a("a"),Irr=o("TFDistilBertModel"),qrr=o(" (DistilBERT model)"),Nrr=l(),vF=a("li"),Nue=a("strong"),jrr=o("dpr"),Drr=o(" \u2014 "),FX=a("a"),Grr=o("TFDPRQuestionEncoder"),Orr=o(" (DPR model)"),Vrr=l(),FF=a("li"),jue=a("strong"),Xrr=o("electra"),zrr=o(" \u2014 "),TX=a("a"),Qrr=o("TFElectraModel"),Wrr=o(" (ELECTRA model)"),Hrr=l(),TF=a("li"),Due=a("strong"),Urr=o("flaubert"),Jrr=o(" \u2014 "),MX=a("a"),Yrr=o("TFFlaubertModel"),Krr=o(" (FlauBERT model)"),Zrr=l(),xs=a("li"),Gue=a("strong"),etr=o("funnel"),otr=o(" \u2014 "),EX=a("a"),rtr=o("TFFunnelModel"),ttr=o(" or "),CX=a("a"),atr=o("TFFunnelBaseModel"),ntr=o(" (Funnel Transformer model)"),str=l(),MF=a("li"),Oue=a("strong"),ltr=o("gpt2"),itr=o(" \u2014 "),wX=a("a"),dtr=o("TFGPT2Model"),ctr=o(" (OpenAI GPT-2 model)"),ftr=l(),EF=a("li"),Vue=a("strong"),mtr=o("gptj"),gtr=o(" \u2014 "),AX=a("a"),htr=o("TFGPTJModel"),ptr=o(" (GPT-J model)"),utr=l(),CF=a("li"),Xue=a("strong"),_tr=o("hubert"),btr=o(" \u2014 "),yX=a("a"),vtr=o("TFHubertModel"),Ftr=o(" (Hubert model)"),Ttr=l(),wF=a("li"),zue=a("strong"),Mtr=o("layoutlm"),Etr=o(" \u2014 "),LX=a("a"),Ctr=o("TFLayoutLMModel"),wtr=o(" (LayoutLM model)"),Atr=l(),AF=a("li"),Que=a("strong"),ytr=o("led"),Ltr=o(" \u2014 "),xX=a("a"),xtr=o("TFLEDModel"),$tr=o(" (LED model)"),ktr=l(),yF=a("li"),Wue=a("strong"),Str=o("longformer"),Rtr=o(" \u2014 "),$X=a("a"),Btr=o("TFLongformerModel"),Ptr=o(" (Longformer model)"),Itr=l(),LF=a("li"),Hue=a("strong"),qtr=o("lxmert"),Ntr=o(" \u2014 "),kX=a("a"),jtr=o("TFLxmertModel"),Dtr=o(" (LXMERT model)"),Gtr=l(),xF=a("li"),Uue=a("strong"),Otr=o("marian"),Vtr=o(" \u2014 "),SX=a("a"),Xtr=o("TFMarianModel"),ztr=o(" (Marian model)"),Qtr=l(),$F=a("li"),Jue=a("strong"),Wtr=o("mbart"),Htr=o(" \u2014 "),RX=a("a"),Utr=o("TFMBartModel"),Jtr=o(" (mBART model)"),Ytr=l(),kF=a("li"),Yue=a("strong"),Ktr=o("mobilebert"),Ztr=o(" \u2014 "),BX=a("a"),ear=o("TFMobileBertModel"),oar=o(" (MobileBERT model)"),rar=l(),SF=a("li"),Kue=a("strong"),tar=o("mpnet"),aar=o(" \u2014 "),PX=a("a"),nar=o("TFMPNetModel"),sar=o(" (MPNet model)"),lar=l(),RF=a("li"),Zue=a("strong"),iar=o("mt5"),dar=o(" \u2014 "),IX=a("a"),car=o("TFMT5Model"),far=o(" (mT5 model)"),mar=l(),BF=a("li"),e_e=a("strong"),gar=o("openai-gpt"),har=o(" \u2014 "),qX=a("a"),par=o("TFOpenAIGPTModel"),uar=o(" (OpenAI GPT model)"),_ar=l(),PF=a("li"),o_e=a("strong"),bar=o("pegasus"),Far=o(" \u2014 "),NX=a("a"),Tar=o("TFPegasusModel"),Mar=o(" (Pegasus model)"),Ear=l(),IF=a("li"),r_e=a("strong"),Car=o("rembert"),war=o(" \u2014 "),jX=a("a"),Aar=o("TFRemBertModel"),yar=o(" (RemBERT model)"),Lar=l(),qF=a("li"),t_e=a("strong"),xar=o("roberta"),$ar=o(" \u2014 "),DX=a("a"),kar=o("TFRobertaModel"),Sar=o(" (RoBERTa model)"),Rar=l(),NF=a("li"),a_e=a("strong"),Bar=o("roformer"),Par=o(" \u2014 "),GX=a("a"),Iar=o("TFRoFormerModel"),qar=o(" (RoFormer model)"),Nar=l(),jF=a("li"),n_e=a("strong"),jar=o("speech_to_text"),Dar=o(" \u2014 "),OX=a("a"),Gar=o("TFSpeech2TextModel"),Oar=o(" (Speech2Text model)"),Var=l(),DF=a("li"),s_e=a("strong"),Xar=o("t5"),zar=o(" \u2014 "),VX=a("a"),Qar=o("TFT5Model"),War=o(" (T5 model)"),Har=l(),GF=a("li"),l_e=a("strong"),Uar=o("tapas"),Jar=o(" \u2014 "),XX=a("a"),Yar=o("TFTapasModel"),Kar=o(" (TAPAS model)"),Zar=l(),OF=a("li"),i_e=a("strong"),enr=o("transfo-xl"),onr=o(" \u2014 "),zX=a("a"),rnr=o("TFTransfoXLModel"),tnr=o(" (Transformer-XL model)"),anr=l(),VF=a("li"),d_e=a("strong"),nnr=o("vit"),snr=o(" \u2014 "),QX=a("a"),lnr=o("TFViTModel"),inr=o(" (ViT model)"),dnr=l(),XF=a("li"),c_e=a("strong"),cnr=o("vit_mae"),fnr=o(" \u2014 "),WX=a("a"),mnr=o("TFViTMAEModel"),gnr=o(" (ViTMAE model)"),hnr=l(),zF=a("li"),f_e=a("strong"),pnr=o("wav2vec2"),unr=o(" \u2014 "),HX=a("a"),_nr=o("TFWav2Vec2Model"),bnr=o(" (Wav2Vec2 model)"),vnr=l(),QF=a("li"),m_e=a("strong"),Fnr=o("xlm"),Tnr=o(" \u2014 "),UX=a("a"),Mnr=o("TFXLMModel"),Enr=o(" (XLM model)"),Cnr=l(),WF=a("li"),g_e=a("strong"),wnr=o("xlm-roberta"),Anr=o(" \u2014 "),JX=a("a"),ynr=o("TFXLMRobertaModel"),Lnr=o(" (XLM-RoBERTa model)"),xnr=l(),HF=a("li"),h_e=a("strong"),$nr=o("xlnet"),knr=o(" \u2014 "),YX=a("a"),Snr=o("TFXLNetModel"),Rnr=o(" (XLNet model)"),Bnr=l(),F(UF.$$.fragment),JBe=l(),Bd=a("h2"),JF=a("a"),p_e=a("span"),F(rL.$$.fragment),Pnr=l(),u_e=a("span"),Inr=o("TFAutoModelForPreTraining"),YBe=l(),Jo=a("div"),F(tL.$$.fragment),qnr=l(),Pd=a("p"),Nnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),KX=a("a"),jnr=o("from_pretrained()"),Dnr=o(" class method or the "),ZX=a("a"),Gnr=o("from_config()"),Onr=o(` class
method.`),Vnr=l(),aL=a("p"),Xnr=o("This class cannot be instantiated directly using "),__e=a("code"),znr=o("__init__()"),Qnr=o(" (throws an error)."),Wnr=l(),Et=a("div"),F(nL.$$.fragment),Hnr=l(),b_e=a("p"),Unr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jnr=l(),Id=a("p"),Ynr=o(`Note:
Loading a model from its configuration file does `),v_e=a("strong"),Knr=o("not"),Znr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),esr=o("from_pretrained()"),osr=o(" to load the model weights."),rsr=l(),F(YF.$$.fragment),tsr=l(),Er=a("div"),F(sL.$$.fragment),asr=l(),F_e=a("p"),nsr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ssr=l(),Ua=a("p"),lsr=o("The model class to instantiate is selected based on the "),T_e=a("code"),isr=o("model_type"),dsr=o(` property of the config object (either
passed as an argument or loaded from `),M_e=a("code"),csr=o("pretrained_model_name_or_path"),fsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=a("code"),msr=o("pretrained_model_name_or_path"),gsr=o(":"),hsr=l(),ne=a("ul"),KF=a("li"),C_e=a("strong"),psr=o("albert"),usr=o(" \u2014 "),oz=a("a"),_sr=o("TFAlbertForPreTraining"),bsr=o(" (ALBERT model)"),vsr=l(),ZF=a("li"),w_e=a("strong"),Fsr=o("bart"),Tsr=o(" \u2014 "),rz=a("a"),Msr=o("TFBartForConditionalGeneration"),Esr=o(" (BART model)"),Csr=l(),eT=a("li"),A_e=a("strong"),wsr=o("bert"),Asr=o(" \u2014 "),tz=a("a"),ysr=o("TFBertForPreTraining"),Lsr=o(" (BERT model)"),xsr=l(),oT=a("li"),y_e=a("strong"),$sr=o("camembert"),ksr=o(" \u2014 "),az=a("a"),Ssr=o("TFCamembertForMaskedLM"),Rsr=o(" (CamemBERT model)"),Bsr=l(),rT=a("li"),L_e=a("strong"),Psr=o("ctrl"),Isr=o(" \u2014 "),nz=a("a"),qsr=o("TFCTRLLMHeadModel"),Nsr=o(" (CTRL model)"),jsr=l(),tT=a("li"),x_e=a("strong"),Dsr=o("distilbert"),Gsr=o(" \u2014 "),sz=a("a"),Osr=o("TFDistilBertForMaskedLM"),Vsr=o(" (DistilBERT model)"),Xsr=l(),aT=a("li"),$_e=a("strong"),zsr=o("electra"),Qsr=o(" \u2014 "),lz=a("a"),Wsr=o("TFElectraForPreTraining"),Hsr=o(" (ELECTRA model)"),Usr=l(),nT=a("li"),k_e=a("strong"),Jsr=o("flaubert"),Ysr=o(" \u2014 "),iz=a("a"),Ksr=o("TFFlaubertWithLMHeadModel"),Zsr=o(" (FlauBERT model)"),elr=l(),sT=a("li"),S_e=a("strong"),olr=o("funnel"),rlr=o(" \u2014 "),dz=a("a"),tlr=o("TFFunnelForPreTraining"),alr=o(" (Funnel Transformer model)"),nlr=l(),lT=a("li"),R_e=a("strong"),slr=o("gpt2"),llr=o(" \u2014 "),cz=a("a"),ilr=o("TFGPT2LMHeadModel"),dlr=o(" (OpenAI GPT-2 model)"),clr=l(),iT=a("li"),B_e=a("strong"),flr=o("layoutlm"),mlr=o(" \u2014 "),fz=a("a"),glr=o("TFLayoutLMForMaskedLM"),hlr=o(" (LayoutLM model)"),plr=l(),dT=a("li"),P_e=a("strong"),ulr=o("lxmert"),_lr=o(" \u2014 "),mz=a("a"),blr=o("TFLxmertForPreTraining"),vlr=o(" (LXMERT model)"),Flr=l(),cT=a("li"),I_e=a("strong"),Tlr=o("mobilebert"),Mlr=o(" \u2014 "),gz=a("a"),Elr=o("TFMobileBertForPreTraining"),Clr=o(" (MobileBERT model)"),wlr=l(),fT=a("li"),q_e=a("strong"),Alr=o("mpnet"),ylr=o(" \u2014 "),hz=a("a"),Llr=o("TFMPNetForMaskedLM"),xlr=o(" (MPNet model)"),$lr=l(),mT=a("li"),N_e=a("strong"),klr=o("openai-gpt"),Slr=o(" \u2014 "),pz=a("a"),Rlr=o("TFOpenAIGPTLMHeadModel"),Blr=o(" (OpenAI GPT model)"),Plr=l(),gT=a("li"),j_e=a("strong"),Ilr=o("roberta"),qlr=o(" \u2014 "),uz=a("a"),Nlr=o("TFRobertaForMaskedLM"),jlr=o(" (RoBERTa model)"),Dlr=l(),hT=a("li"),D_e=a("strong"),Glr=o("t5"),Olr=o(" \u2014 "),_z=a("a"),Vlr=o("TFT5ForConditionalGeneration"),Xlr=o(" (T5 model)"),zlr=l(),pT=a("li"),G_e=a("strong"),Qlr=o("tapas"),Wlr=o(" \u2014 "),bz=a("a"),Hlr=o("TFTapasForMaskedLM"),Ulr=o(" (TAPAS model)"),Jlr=l(),uT=a("li"),O_e=a("strong"),Ylr=o("transfo-xl"),Klr=o(" \u2014 "),vz=a("a"),Zlr=o("TFTransfoXLLMHeadModel"),eir=o(" (Transformer-XL model)"),oir=l(),_T=a("li"),V_e=a("strong"),rir=o("vit_mae"),tir=o(" \u2014 "),Fz=a("a"),air=o("TFViTMAEForPreTraining"),nir=o(" (ViTMAE model)"),sir=l(),bT=a("li"),X_e=a("strong"),lir=o("xlm"),iir=o(" \u2014 "),Tz=a("a"),dir=o("TFXLMWithLMHeadModel"),cir=o(" (XLM model)"),fir=l(),vT=a("li"),z_e=a("strong"),mir=o("xlm-roberta"),gir=o(" \u2014 "),Mz=a("a"),hir=o("TFXLMRobertaForMaskedLM"),pir=o(" (XLM-RoBERTa model)"),uir=l(),FT=a("li"),Q_e=a("strong"),_ir=o("xlnet"),bir=o(" \u2014 "),Ez=a("a"),vir=o("TFXLNetLMHeadModel"),Fir=o(" (XLNet model)"),Tir=l(),F(TT.$$.fragment),KBe=l(),qd=a("h2"),MT=a("a"),W_e=a("span"),F(lL.$$.fragment),Mir=l(),H_e=a("span"),Eir=o("TFAutoModelForCausalLM"),ZBe=l(),Yo=a("div"),F(iL.$$.fragment),Cir=l(),Nd=a("p"),wir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Cz=a("a"),Air=o("from_pretrained()"),yir=o(" class method or the "),wz=a("a"),Lir=o("from_config()"),xir=o(` class
method.`),$ir=l(),dL=a("p"),kir=o("This class cannot be instantiated directly using "),U_e=a("code"),Sir=o("__init__()"),Rir=o(" (throws an error)."),Bir=l(),Ct=a("div"),F(cL.$$.fragment),Pir=l(),J_e=a("p"),Iir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qir=l(),jd=a("p"),Nir=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),jir=o("not"),Dir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),Gir=o("from_pretrained()"),Oir=o(" to load the model weights."),Vir=l(),F(ET.$$.fragment),Xir=l(),Cr=a("div"),F(fL.$$.fragment),zir=l(),K_e=a("p"),Qir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wir=l(),Ja=a("p"),Hir=o("The model class to instantiate is selected based on the "),Z_e=a("code"),Uir=o("model_type"),Jir=o(` property of the config object (either
passed as an argument or loaded from `),e6e=a("code"),Yir=o("pretrained_model_name_or_path"),Kir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=a("code"),Zir=o("pretrained_model_name_or_path"),edr=o(":"),odr=l(),Te=a("ul"),CT=a("li"),r6e=a("strong"),rdr=o("bert"),tdr=o(" \u2014 "),yz=a("a"),adr=o("TFBertLMHeadModel"),ndr=o(" (BERT model)"),sdr=l(),wT=a("li"),t6e=a("strong"),ldr=o("camembert"),idr=o(" \u2014 "),Lz=a("a"),ddr=o("TFCamembertForCausalLM"),cdr=o(" (CamemBERT model)"),fdr=l(),AT=a("li"),a6e=a("strong"),mdr=o("ctrl"),gdr=o(" \u2014 "),xz=a("a"),hdr=o("TFCTRLLMHeadModel"),pdr=o(" (CTRL model)"),udr=l(),yT=a("li"),n6e=a("strong"),_dr=o("gpt2"),bdr=o(" \u2014 "),$z=a("a"),vdr=o("TFGPT2LMHeadModel"),Fdr=o(" (OpenAI GPT-2 model)"),Tdr=l(),LT=a("li"),s6e=a("strong"),Mdr=o("gptj"),Edr=o(" \u2014 "),kz=a("a"),Cdr=o("TFGPTJForCausalLM"),wdr=o(" (GPT-J model)"),Adr=l(),xT=a("li"),l6e=a("strong"),ydr=o("openai-gpt"),Ldr=o(" \u2014 "),Sz=a("a"),xdr=o("TFOpenAIGPTLMHeadModel"),$dr=o(" (OpenAI GPT model)"),kdr=l(),$T=a("li"),i6e=a("strong"),Sdr=o("rembert"),Rdr=o(" \u2014 "),Rz=a("a"),Bdr=o("TFRemBertForCausalLM"),Pdr=o(" (RemBERT model)"),Idr=l(),kT=a("li"),d6e=a("strong"),qdr=o("roberta"),Ndr=o(" \u2014 "),Bz=a("a"),jdr=o("TFRobertaForCausalLM"),Ddr=o(" (RoBERTa model)"),Gdr=l(),ST=a("li"),c6e=a("strong"),Odr=o("roformer"),Vdr=o(" \u2014 "),Pz=a("a"),Xdr=o("TFRoFormerForCausalLM"),zdr=o(" (RoFormer model)"),Qdr=l(),RT=a("li"),f6e=a("strong"),Wdr=o("transfo-xl"),Hdr=o(" \u2014 "),Iz=a("a"),Udr=o("TFTransfoXLLMHeadModel"),Jdr=o(" (Transformer-XL model)"),Ydr=l(),BT=a("li"),m6e=a("strong"),Kdr=o("xlm"),Zdr=o(" \u2014 "),qz=a("a"),ecr=o("TFXLMWithLMHeadModel"),ocr=o(" (XLM model)"),rcr=l(),PT=a("li"),g6e=a("strong"),tcr=o("xlnet"),acr=o(" \u2014 "),Nz=a("a"),ncr=o("TFXLNetLMHeadModel"),scr=o(" (XLNet model)"),lcr=l(),F(IT.$$.fragment),ePe=l(),Dd=a("h2"),qT=a("a"),h6e=a("span"),F(mL.$$.fragment),icr=l(),p6e=a("span"),dcr=o("TFAutoModelForImageClassification"),oPe=l(),Ko=a("div"),F(gL.$$.fragment),ccr=l(),Gd=a("p"),fcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jz=a("a"),mcr=o("from_pretrained()"),gcr=o(" class method or the "),Dz=a("a"),hcr=o("from_config()"),pcr=o(` class
method.`),ucr=l(),hL=a("p"),_cr=o("This class cannot be instantiated directly using "),u6e=a("code"),bcr=o("__init__()"),vcr=o(" (throws an error)."),Fcr=l(),wt=a("div"),F(pL.$$.fragment),Tcr=l(),_6e=a("p"),Mcr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ecr=l(),Od=a("p"),Ccr=o(`Note:
Loading a model from its configuration file does `),b6e=a("strong"),wcr=o("not"),Acr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),ycr=o("from_pretrained()"),Lcr=o(" to load the model weights."),xcr=l(),F(NT.$$.fragment),$cr=l(),wr=a("div"),F(uL.$$.fragment),kcr=l(),v6e=a("p"),Scr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rcr=l(),Ya=a("p"),Bcr=o("The model class to instantiate is selected based on the "),F6e=a("code"),Pcr=o("model_type"),Icr=o(` property of the config object (either
passed as an argument or loaded from `),T6e=a("code"),qcr=o("pretrained_model_name_or_path"),Ncr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=a("code"),jcr=o("pretrained_model_name_or_path"),Dcr=o(":"),Gcr=l(),_L=a("ul"),jT=a("li"),E6e=a("strong"),Ocr=o("convnext"),Vcr=o(" \u2014 "),Oz=a("a"),Xcr=o("TFConvNextForImageClassification"),zcr=o(" (ConvNext model)"),Qcr=l(),DT=a("li"),C6e=a("strong"),Wcr=o("vit"),Hcr=o(" \u2014 "),Vz=a("a"),Ucr=o("TFViTForImageClassification"),Jcr=o(" (ViT model)"),Ycr=l(),F(GT.$$.fragment),rPe=l(),Vd=a("h2"),OT=a("a"),w6e=a("span"),F(bL.$$.fragment),Kcr=l(),A6e=a("span"),Zcr=o("TFAutoModelForMaskedLM"),tPe=l(),Zo=a("div"),F(vL.$$.fragment),efr=l(),Xd=a("p"),ofr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Xz=a("a"),rfr=o("from_pretrained()"),tfr=o(" class method or the "),zz=a("a"),afr=o("from_config()"),nfr=o(` class
method.`),sfr=l(),FL=a("p"),lfr=o("This class cannot be instantiated directly using "),y6e=a("code"),ifr=o("__init__()"),dfr=o(" (throws an error)."),cfr=l(),At=a("div"),F(TL.$$.fragment),ffr=l(),L6e=a("p"),mfr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gfr=l(),zd=a("p"),hfr=o(`Note:
Loading a model from its configuration file does `),x6e=a("strong"),pfr=o("not"),ufr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),_fr=o("from_pretrained()"),bfr=o(" to load the model weights."),vfr=l(),F(VT.$$.fragment),Ffr=l(),Ar=a("div"),F(ML.$$.fragment),Tfr=l(),$6e=a("p"),Mfr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Efr=l(),Ka=a("p"),Cfr=o("The model class to instantiate is selected based on the "),k6e=a("code"),wfr=o("model_type"),Afr=o(` property of the config object (either
passed as an argument or loaded from `),S6e=a("code"),yfr=o("pretrained_model_name_or_path"),Lfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=a("code"),xfr=o("pretrained_model_name_or_path"),$fr=o(":"),kfr=l(),ie=a("ul"),XT=a("li"),B6e=a("strong"),Sfr=o("albert"),Rfr=o(" \u2014 "),Wz=a("a"),Bfr=o("TFAlbertForMaskedLM"),Pfr=o(" (ALBERT model)"),Ifr=l(),zT=a("li"),P6e=a("strong"),qfr=o("bert"),Nfr=o(" \u2014 "),Hz=a("a"),jfr=o("TFBertForMaskedLM"),Dfr=o(" (BERT model)"),Gfr=l(),QT=a("li"),I6e=a("strong"),Ofr=o("camembert"),Vfr=o(" \u2014 "),Uz=a("a"),Xfr=o("TFCamembertForMaskedLM"),zfr=o(" (CamemBERT model)"),Qfr=l(),WT=a("li"),q6e=a("strong"),Wfr=o("convbert"),Hfr=o(" \u2014 "),Jz=a("a"),Ufr=o("TFConvBertForMaskedLM"),Jfr=o(" (ConvBERT model)"),Yfr=l(),HT=a("li"),N6e=a("strong"),Kfr=o("deberta"),Zfr=o(" \u2014 "),Yz=a("a"),emr=o("TFDebertaForMaskedLM"),omr=o(" (DeBERTa model)"),rmr=l(),UT=a("li"),j6e=a("strong"),tmr=o("deberta-v2"),amr=o(" \u2014 "),Kz=a("a"),nmr=o("TFDebertaV2ForMaskedLM"),smr=o(" (DeBERTa-v2 model)"),lmr=l(),JT=a("li"),D6e=a("strong"),imr=o("distilbert"),dmr=o(" \u2014 "),Zz=a("a"),cmr=o("TFDistilBertForMaskedLM"),fmr=o(" (DistilBERT model)"),mmr=l(),YT=a("li"),G6e=a("strong"),gmr=o("electra"),hmr=o(" \u2014 "),eQ=a("a"),pmr=o("TFElectraForMaskedLM"),umr=o(" (ELECTRA model)"),_mr=l(),KT=a("li"),O6e=a("strong"),bmr=o("flaubert"),vmr=o(" \u2014 "),oQ=a("a"),Fmr=o("TFFlaubertWithLMHeadModel"),Tmr=o(" (FlauBERT model)"),Mmr=l(),ZT=a("li"),V6e=a("strong"),Emr=o("funnel"),Cmr=o(" \u2014 "),rQ=a("a"),wmr=o("TFFunnelForMaskedLM"),Amr=o(" (Funnel Transformer model)"),ymr=l(),e9=a("li"),X6e=a("strong"),Lmr=o("layoutlm"),xmr=o(" \u2014 "),tQ=a("a"),$mr=o("TFLayoutLMForMaskedLM"),kmr=o(" (LayoutLM model)"),Smr=l(),o9=a("li"),z6e=a("strong"),Rmr=o("longformer"),Bmr=o(" \u2014 "),aQ=a("a"),Pmr=o("TFLongformerForMaskedLM"),Imr=o(" (Longformer model)"),qmr=l(),r9=a("li"),Q6e=a("strong"),Nmr=o("mobilebert"),jmr=o(" \u2014 "),nQ=a("a"),Dmr=o("TFMobileBertForMaskedLM"),Gmr=o(" (MobileBERT model)"),Omr=l(),t9=a("li"),W6e=a("strong"),Vmr=o("mpnet"),Xmr=o(" \u2014 "),sQ=a("a"),zmr=o("TFMPNetForMaskedLM"),Qmr=o(" (MPNet model)"),Wmr=l(),a9=a("li"),H6e=a("strong"),Hmr=o("rembert"),Umr=o(" \u2014 "),lQ=a("a"),Jmr=o("TFRemBertForMaskedLM"),Ymr=o(" (RemBERT model)"),Kmr=l(),n9=a("li"),U6e=a("strong"),Zmr=o("roberta"),egr=o(" \u2014 "),iQ=a("a"),ogr=o("TFRobertaForMaskedLM"),rgr=o(" (RoBERTa model)"),tgr=l(),s9=a("li"),J6e=a("strong"),agr=o("roformer"),ngr=o(" \u2014 "),dQ=a("a"),sgr=o("TFRoFormerForMaskedLM"),lgr=o(" (RoFormer model)"),igr=l(),l9=a("li"),Y6e=a("strong"),dgr=o("tapas"),cgr=o(" \u2014 "),cQ=a("a"),fgr=o("TFTapasForMaskedLM"),mgr=o(" (TAPAS model)"),ggr=l(),i9=a("li"),K6e=a("strong"),hgr=o("xlm"),pgr=o(" \u2014 "),fQ=a("a"),ugr=o("TFXLMWithLMHeadModel"),_gr=o(" (XLM model)"),bgr=l(),d9=a("li"),Z6e=a("strong"),vgr=o("xlm-roberta"),Fgr=o(" \u2014 "),mQ=a("a"),Tgr=o("TFXLMRobertaForMaskedLM"),Mgr=o(" (XLM-RoBERTa model)"),Egr=l(),F(c9.$$.fragment),aPe=l(),Qd=a("h2"),f9=a("a"),e1e=a("span"),F(EL.$$.fragment),Cgr=l(),o1e=a("span"),wgr=o("TFAutoModelForSeq2SeqLM"),nPe=l(),er=a("div"),F(CL.$$.fragment),Agr=l(),Wd=a("p"),ygr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gQ=a("a"),Lgr=o("from_pretrained()"),xgr=o(" class method or the "),hQ=a("a"),$gr=o("from_config()"),kgr=o(` class
method.`),Sgr=l(),wL=a("p"),Rgr=o("This class cannot be instantiated directly using "),r1e=a("code"),Bgr=o("__init__()"),Pgr=o(" (throws an error)."),Igr=l(),yt=a("div"),F(AL.$$.fragment),qgr=l(),t1e=a("p"),Ngr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jgr=l(),Hd=a("p"),Dgr=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),Ggr=o("not"),Ogr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),Vgr=o("from_pretrained()"),Xgr=o(" to load the model weights."),zgr=l(),F(m9.$$.fragment),Qgr=l(),yr=a("div"),F(yL.$$.fragment),Wgr=l(),n1e=a("p"),Hgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ugr=l(),Za=a("p"),Jgr=o("The model class to instantiate is selected based on the "),s1e=a("code"),Ygr=o("model_type"),Kgr=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),Zgr=o("pretrained_model_name_or_path"),ehr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),ohr=o("pretrained_model_name_or_path"),rhr=o(":"),thr=l(),ye=a("ul"),g9=a("li"),d1e=a("strong"),ahr=o("bart"),nhr=o(" \u2014 "),uQ=a("a"),shr=o("TFBartForConditionalGeneration"),lhr=o(" (BART model)"),ihr=l(),h9=a("li"),c1e=a("strong"),dhr=o("blenderbot"),chr=o(" \u2014 "),_Q=a("a"),fhr=o("TFBlenderbotForConditionalGeneration"),mhr=o(" (Blenderbot model)"),ghr=l(),p9=a("li"),f1e=a("strong"),hhr=o("blenderbot-small"),phr=o(" \u2014 "),bQ=a("a"),uhr=o("TFBlenderbotSmallForConditionalGeneration"),_hr=o(" (BlenderbotSmall model)"),bhr=l(),u9=a("li"),m1e=a("strong"),vhr=o("encoder-decoder"),Fhr=o(" \u2014 "),vQ=a("a"),Thr=o("TFEncoderDecoderModel"),Mhr=o(" (Encoder decoder model)"),Ehr=l(),_9=a("li"),g1e=a("strong"),Chr=o("led"),whr=o(" \u2014 "),FQ=a("a"),Ahr=o("TFLEDForConditionalGeneration"),yhr=o(" (LED model)"),Lhr=l(),b9=a("li"),h1e=a("strong"),xhr=o("marian"),$hr=o(" \u2014 "),TQ=a("a"),khr=o("TFMarianMTModel"),Shr=o(" (Marian model)"),Rhr=l(),v9=a("li"),p1e=a("strong"),Bhr=o("mbart"),Phr=o(" \u2014 "),MQ=a("a"),Ihr=o("TFMBartForConditionalGeneration"),qhr=o(" (mBART model)"),Nhr=l(),F9=a("li"),u1e=a("strong"),jhr=o("mt5"),Dhr=o(" \u2014 "),EQ=a("a"),Ghr=o("TFMT5ForConditionalGeneration"),Ohr=o(" (mT5 model)"),Vhr=l(),T9=a("li"),_1e=a("strong"),Xhr=o("pegasus"),zhr=o(" \u2014 "),CQ=a("a"),Qhr=o("TFPegasusForConditionalGeneration"),Whr=o(" (Pegasus model)"),Hhr=l(),M9=a("li"),b1e=a("strong"),Uhr=o("t5"),Jhr=o(" \u2014 "),wQ=a("a"),Yhr=o("TFT5ForConditionalGeneration"),Khr=o(" (T5 model)"),Zhr=l(),F(E9.$$.fragment),sPe=l(),Ud=a("h2"),C9=a("a"),v1e=a("span"),F(LL.$$.fragment),epr=l(),F1e=a("span"),opr=o("TFAutoModelForSequenceClassification"),lPe=l(),or=a("div"),F(xL.$$.fragment),rpr=l(),Jd=a("p"),tpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AQ=a("a"),apr=o("from_pretrained()"),npr=o(" class method or the "),yQ=a("a"),spr=o("from_config()"),lpr=o(` class
method.`),ipr=l(),$L=a("p"),dpr=o("This class cannot be instantiated directly using "),T1e=a("code"),cpr=o("__init__()"),fpr=o(" (throws an error)."),mpr=l(),Lt=a("div"),F(kL.$$.fragment),gpr=l(),M1e=a("p"),hpr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ppr=l(),Yd=a("p"),upr=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),_pr=o("not"),bpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=a("a"),vpr=o("from_pretrained()"),Fpr=o(" to load the model weights."),Tpr=l(),F(w9.$$.fragment),Mpr=l(),Lr=a("div"),F(SL.$$.fragment),Epr=l(),C1e=a("p"),Cpr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wpr=l(),en=a("p"),Apr=o("The model class to instantiate is selected based on the "),w1e=a("code"),ypr=o("model_type"),Lpr=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),xpr=o("pretrained_model_name_or_path"),$pr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=a("code"),kpr=o("pretrained_model_name_or_path"),Spr=o(":"),Rpr=l(),Z=a("ul"),A9=a("li"),L1e=a("strong"),Bpr=o("albert"),Ppr=o(" \u2014 "),xQ=a("a"),Ipr=o("TFAlbertForSequenceClassification"),qpr=o(" (ALBERT model)"),Npr=l(),y9=a("li"),x1e=a("strong"),jpr=o("bert"),Dpr=o(" \u2014 "),$Q=a("a"),Gpr=o("TFBertForSequenceClassification"),Opr=o(" (BERT model)"),Vpr=l(),L9=a("li"),$1e=a("strong"),Xpr=o("camembert"),zpr=o(" \u2014 "),kQ=a("a"),Qpr=o("TFCamembertForSequenceClassification"),Wpr=o(" (CamemBERT model)"),Hpr=l(),x9=a("li"),k1e=a("strong"),Upr=o("convbert"),Jpr=o(" \u2014 "),SQ=a("a"),Ypr=o("TFConvBertForSequenceClassification"),Kpr=o(" (ConvBERT model)"),Zpr=l(),$9=a("li"),S1e=a("strong"),eur=o("ctrl"),our=o(" \u2014 "),RQ=a("a"),rur=o("TFCTRLForSequenceClassification"),tur=o(" (CTRL model)"),aur=l(),k9=a("li"),R1e=a("strong"),nur=o("deberta"),sur=o(" \u2014 "),BQ=a("a"),lur=o("TFDebertaForSequenceClassification"),iur=o(" (DeBERTa model)"),dur=l(),S9=a("li"),B1e=a("strong"),cur=o("deberta-v2"),fur=o(" \u2014 "),PQ=a("a"),mur=o("TFDebertaV2ForSequenceClassification"),gur=o(" (DeBERTa-v2 model)"),hur=l(),R9=a("li"),P1e=a("strong"),pur=o("distilbert"),uur=o(" \u2014 "),IQ=a("a"),_ur=o("TFDistilBertForSequenceClassification"),bur=o(" (DistilBERT model)"),vur=l(),B9=a("li"),I1e=a("strong"),Fur=o("electra"),Tur=o(" \u2014 "),qQ=a("a"),Mur=o("TFElectraForSequenceClassification"),Eur=o(" (ELECTRA model)"),Cur=l(),P9=a("li"),q1e=a("strong"),wur=o("flaubert"),Aur=o(" \u2014 "),NQ=a("a"),yur=o("TFFlaubertForSequenceClassification"),Lur=o(" (FlauBERT model)"),xur=l(),I9=a("li"),N1e=a("strong"),$ur=o("funnel"),kur=o(" \u2014 "),jQ=a("a"),Sur=o("TFFunnelForSequenceClassification"),Rur=o(" (Funnel Transformer model)"),Bur=l(),q9=a("li"),j1e=a("strong"),Pur=o("gpt2"),Iur=o(" \u2014 "),DQ=a("a"),qur=o("TFGPT2ForSequenceClassification"),Nur=o(" (OpenAI GPT-2 model)"),jur=l(),N9=a("li"),D1e=a("strong"),Dur=o("gptj"),Gur=o(" \u2014 "),GQ=a("a"),Our=o("TFGPTJForSequenceClassification"),Vur=o(" (GPT-J model)"),Xur=l(),j9=a("li"),G1e=a("strong"),zur=o("layoutlm"),Qur=o(" \u2014 "),OQ=a("a"),Wur=o("TFLayoutLMForSequenceClassification"),Hur=o(" (LayoutLM model)"),Uur=l(),D9=a("li"),O1e=a("strong"),Jur=o("longformer"),Yur=o(" \u2014 "),VQ=a("a"),Kur=o("TFLongformerForSequenceClassification"),Zur=o(" (Longformer model)"),e_r=l(),G9=a("li"),V1e=a("strong"),o_r=o("mobilebert"),r_r=o(" \u2014 "),XQ=a("a"),t_r=o("TFMobileBertForSequenceClassification"),a_r=o(" (MobileBERT model)"),n_r=l(),O9=a("li"),X1e=a("strong"),s_r=o("mpnet"),l_r=o(" \u2014 "),zQ=a("a"),i_r=o("TFMPNetForSequenceClassification"),d_r=o(" (MPNet model)"),c_r=l(),V9=a("li"),z1e=a("strong"),f_r=o("openai-gpt"),m_r=o(" \u2014 "),QQ=a("a"),g_r=o("TFOpenAIGPTForSequenceClassification"),h_r=o(" (OpenAI GPT model)"),p_r=l(),X9=a("li"),Q1e=a("strong"),u_r=o("rembert"),__r=o(" \u2014 "),WQ=a("a"),b_r=o("TFRemBertForSequenceClassification"),v_r=o(" (RemBERT model)"),F_r=l(),z9=a("li"),W1e=a("strong"),T_r=o("roberta"),M_r=o(" \u2014 "),HQ=a("a"),E_r=o("TFRobertaForSequenceClassification"),C_r=o(" (RoBERTa model)"),w_r=l(),Q9=a("li"),H1e=a("strong"),A_r=o("roformer"),y_r=o(" \u2014 "),UQ=a("a"),L_r=o("TFRoFormerForSequenceClassification"),x_r=o(" (RoFormer model)"),$_r=l(),W9=a("li"),U1e=a("strong"),k_r=o("tapas"),S_r=o(" \u2014 "),JQ=a("a"),R_r=o("TFTapasForSequenceClassification"),B_r=o(" (TAPAS model)"),P_r=l(),H9=a("li"),J1e=a("strong"),I_r=o("transfo-xl"),q_r=o(" \u2014 "),YQ=a("a"),N_r=o("TFTransfoXLForSequenceClassification"),j_r=o(" (Transformer-XL model)"),D_r=l(),U9=a("li"),Y1e=a("strong"),G_r=o("xlm"),O_r=o(" \u2014 "),KQ=a("a"),V_r=o("TFXLMForSequenceClassification"),X_r=o(" (XLM model)"),z_r=l(),J9=a("li"),K1e=a("strong"),Q_r=o("xlm-roberta"),W_r=o(" \u2014 "),ZQ=a("a"),H_r=o("TFXLMRobertaForSequenceClassification"),U_r=o(" (XLM-RoBERTa model)"),J_r=l(),Y9=a("li"),Z1e=a("strong"),Y_r=o("xlnet"),K_r=o(" \u2014 "),eW=a("a"),Z_r=o("TFXLNetForSequenceClassification"),e6r=o(" (XLNet model)"),o6r=l(),F(K9.$$.fragment),iPe=l(),Kd=a("h2"),Z9=a("a"),ebe=a("span"),F(RL.$$.fragment),r6r=l(),obe=a("span"),t6r=o("TFAutoModelForMultipleChoice"),dPe=l(),rr=a("div"),F(BL.$$.fragment),a6r=l(),Zd=a("p"),n6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oW=a("a"),s6r=o("from_pretrained()"),l6r=o(" class method or the "),rW=a("a"),i6r=o("from_config()"),d6r=o(` class
method.`),c6r=l(),PL=a("p"),f6r=o("This class cannot be instantiated directly using "),rbe=a("code"),m6r=o("__init__()"),g6r=o(" (throws an error)."),h6r=l(),xt=a("div"),F(IL.$$.fragment),p6r=l(),tbe=a("p"),u6r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_6r=l(),ec=a("p"),b6r=o(`Note:
Loading a model from its configuration file does `),abe=a("strong"),v6r=o("not"),F6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),T6r=o("from_pretrained()"),M6r=o(" to load the model weights."),E6r=l(),F(eM.$$.fragment),C6r=l(),xr=a("div"),F(qL.$$.fragment),w6r=l(),nbe=a("p"),A6r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),y6r=l(),on=a("p"),L6r=o("The model class to instantiate is selected based on the "),sbe=a("code"),x6r=o("model_type"),$6r=o(` property of the config object (either
passed as an argument or loaded from `),lbe=a("code"),k6r=o("pretrained_model_name_or_path"),S6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=a("code"),R6r=o("pretrained_model_name_or_path"),B6r=o(":"),P6r=l(),pe=a("ul"),oM=a("li"),dbe=a("strong"),I6r=o("albert"),q6r=o(" \u2014 "),aW=a("a"),N6r=o("TFAlbertForMultipleChoice"),j6r=o(" (ALBERT model)"),D6r=l(),rM=a("li"),cbe=a("strong"),G6r=o("bert"),O6r=o(" \u2014 "),nW=a("a"),V6r=o("TFBertForMultipleChoice"),X6r=o(" (BERT model)"),z6r=l(),tM=a("li"),fbe=a("strong"),Q6r=o("camembert"),W6r=o(" \u2014 "),sW=a("a"),H6r=o("TFCamembertForMultipleChoice"),U6r=o(" (CamemBERT model)"),J6r=l(),aM=a("li"),mbe=a("strong"),Y6r=o("convbert"),K6r=o(" \u2014 "),lW=a("a"),Z6r=o("TFConvBertForMultipleChoice"),e1r=o(" (ConvBERT model)"),o1r=l(),nM=a("li"),gbe=a("strong"),r1r=o("distilbert"),t1r=o(" \u2014 "),iW=a("a"),a1r=o("TFDistilBertForMultipleChoice"),n1r=o(" (DistilBERT model)"),s1r=l(),sM=a("li"),hbe=a("strong"),l1r=o("electra"),i1r=o(" \u2014 "),dW=a("a"),d1r=o("TFElectraForMultipleChoice"),c1r=o(" (ELECTRA model)"),f1r=l(),lM=a("li"),pbe=a("strong"),m1r=o("flaubert"),g1r=o(" \u2014 "),cW=a("a"),h1r=o("TFFlaubertForMultipleChoice"),p1r=o(" (FlauBERT model)"),u1r=l(),iM=a("li"),ube=a("strong"),_1r=o("funnel"),b1r=o(" \u2014 "),fW=a("a"),v1r=o("TFFunnelForMultipleChoice"),F1r=o(" (Funnel Transformer model)"),T1r=l(),dM=a("li"),_be=a("strong"),M1r=o("longformer"),E1r=o(" \u2014 "),mW=a("a"),C1r=o("TFLongformerForMultipleChoice"),w1r=o(" (Longformer model)"),A1r=l(),cM=a("li"),bbe=a("strong"),y1r=o("mobilebert"),L1r=o(" \u2014 "),gW=a("a"),x1r=o("TFMobileBertForMultipleChoice"),$1r=o(" (MobileBERT model)"),k1r=l(),fM=a("li"),vbe=a("strong"),S1r=o("mpnet"),R1r=o(" \u2014 "),hW=a("a"),B1r=o("TFMPNetForMultipleChoice"),P1r=o(" (MPNet model)"),I1r=l(),mM=a("li"),Fbe=a("strong"),q1r=o("rembert"),N1r=o(" \u2014 "),pW=a("a"),j1r=o("TFRemBertForMultipleChoice"),D1r=o(" (RemBERT model)"),G1r=l(),gM=a("li"),Tbe=a("strong"),O1r=o("roberta"),V1r=o(" \u2014 "),uW=a("a"),X1r=o("TFRobertaForMultipleChoice"),z1r=o(" (RoBERTa model)"),Q1r=l(),hM=a("li"),Mbe=a("strong"),W1r=o("roformer"),H1r=o(" \u2014 "),_W=a("a"),U1r=o("TFRoFormerForMultipleChoice"),J1r=o(" (RoFormer model)"),Y1r=l(),pM=a("li"),Ebe=a("strong"),K1r=o("xlm"),Z1r=o(" \u2014 "),bW=a("a"),ebr=o("TFXLMForMultipleChoice"),obr=o(" (XLM model)"),rbr=l(),uM=a("li"),Cbe=a("strong"),tbr=o("xlm-roberta"),abr=o(" \u2014 "),vW=a("a"),nbr=o("TFXLMRobertaForMultipleChoice"),sbr=o(" (XLM-RoBERTa model)"),lbr=l(),_M=a("li"),wbe=a("strong"),ibr=o("xlnet"),dbr=o(" \u2014 "),FW=a("a"),cbr=o("TFXLNetForMultipleChoice"),fbr=o(" (XLNet model)"),mbr=l(),F(bM.$$.fragment),cPe=l(),oc=a("h2"),vM=a("a"),Abe=a("span"),F(NL.$$.fragment),gbr=l(),ybe=a("span"),hbr=o("TFAutoModelForTableQuestionAnswering"),fPe=l(),tr=a("div"),F(jL.$$.fragment),pbr=l(),rc=a("p"),ubr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TW=a("a"),_br=o("from_pretrained()"),bbr=o(" class method or the "),MW=a("a"),vbr=o("from_config()"),Fbr=o(` class
method.`),Tbr=l(),DL=a("p"),Mbr=o("This class cannot be instantiated directly using "),Lbe=a("code"),Ebr=o("__init__()"),Cbr=o(" (throws an error)."),wbr=l(),$t=a("div"),F(GL.$$.fragment),Abr=l(),xbe=a("p"),ybr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lbr=l(),tc=a("p"),xbr=o(`Note:
Loading a model from its configuration file does `),$be=a("strong"),$br=o("not"),kbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),Sbr=o("from_pretrained()"),Rbr=o(" to load the model weights."),Bbr=l(),F(FM.$$.fragment),Pbr=l(),$r=a("div"),F(OL.$$.fragment),Ibr=l(),kbe=a("p"),qbr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Nbr=l(),rn=a("p"),jbr=o("The model class to instantiate is selected based on the "),Sbe=a("code"),Dbr=o("model_type"),Gbr=o(` property of the config object (either
passed as an argument or loaded from `),Rbe=a("code"),Obr=o("pretrained_model_name_or_path"),Vbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),Xbr=o("pretrained_model_name_or_path"),zbr=o(":"),Qbr=l(),Pbe=a("ul"),TM=a("li"),Ibe=a("strong"),Wbr=o("tapas"),Hbr=o(" \u2014 "),CW=a("a"),Ubr=o("TFTapasForQuestionAnswering"),Jbr=o(" (TAPAS model)"),Ybr=l(),F(MM.$$.fragment),mPe=l(),ac=a("h2"),EM=a("a"),qbe=a("span"),F(VL.$$.fragment),Kbr=l(),Nbe=a("span"),Zbr=o("TFAutoModelForTokenClassification"),gPe=l(),ar=a("div"),F(XL.$$.fragment),e2r=l(),nc=a("p"),o2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wW=a("a"),r2r=o("from_pretrained()"),t2r=o(" class method or the "),AW=a("a"),a2r=o("from_config()"),n2r=o(` class
method.`),s2r=l(),zL=a("p"),l2r=o("This class cannot be instantiated directly using "),jbe=a("code"),i2r=o("__init__()"),d2r=o(" (throws an error)."),c2r=l(),kt=a("div"),F(QL.$$.fragment),f2r=l(),Dbe=a("p"),m2r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),g2r=l(),sc=a("p"),h2r=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),p2r=o("not"),u2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),_2r=o("from_pretrained()"),b2r=o(" to load the model weights."),v2r=l(),F(CM.$$.fragment),F2r=l(),kr=a("div"),F(WL.$$.fragment),T2r=l(),Obe=a("p"),M2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),E2r=l(),tn=a("p"),C2r=o("The model class to instantiate is selected based on the "),Vbe=a("code"),w2r=o("model_type"),A2r=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),y2r=o("pretrained_model_name_or_path"),L2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),x2r=o("pretrained_model_name_or_path"),$2r=o(":"),k2r=l(),de=a("ul"),wM=a("li"),Qbe=a("strong"),S2r=o("albert"),R2r=o(" \u2014 "),LW=a("a"),B2r=o("TFAlbertForTokenClassification"),P2r=o(" (ALBERT model)"),I2r=l(),AM=a("li"),Wbe=a("strong"),q2r=o("bert"),N2r=o(" \u2014 "),xW=a("a"),j2r=o("TFBertForTokenClassification"),D2r=o(" (BERT model)"),G2r=l(),yM=a("li"),Hbe=a("strong"),O2r=o("camembert"),V2r=o(" \u2014 "),$W=a("a"),X2r=o("TFCamembertForTokenClassification"),z2r=o(" (CamemBERT model)"),Q2r=l(),LM=a("li"),Ube=a("strong"),W2r=o("convbert"),H2r=o(" \u2014 "),kW=a("a"),U2r=o("TFConvBertForTokenClassification"),J2r=o(" (ConvBERT model)"),Y2r=l(),xM=a("li"),Jbe=a("strong"),K2r=o("deberta"),Z2r=o(" \u2014 "),SW=a("a"),e5r=o("TFDebertaForTokenClassification"),o5r=o(" (DeBERTa model)"),r5r=l(),$M=a("li"),Ybe=a("strong"),t5r=o("deberta-v2"),a5r=o(" \u2014 "),RW=a("a"),n5r=o("TFDebertaV2ForTokenClassification"),s5r=o(" (DeBERTa-v2 model)"),l5r=l(),kM=a("li"),Kbe=a("strong"),i5r=o("distilbert"),d5r=o(" \u2014 "),BW=a("a"),c5r=o("TFDistilBertForTokenClassification"),f5r=o(" (DistilBERT model)"),m5r=l(),SM=a("li"),Zbe=a("strong"),g5r=o("electra"),h5r=o(" \u2014 "),PW=a("a"),p5r=o("TFElectraForTokenClassification"),u5r=o(" (ELECTRA model)"),_5r=l(),RM=a("li"),e2e=a("strong"),b5r=o("flaubert"),v5r=o(" \u2014 "),IW=a("a"),F5r=o("TFFlaubertForTokenClassification"),T5r=o(" (FlauBERT model)"),M5r=l(),BM=a("li"),o2e=a("strong"),E5r=o("funnel"),C5r=o(" \u2014 "),qW=a("a"),w5r=o("TFFunnelForTokenClassification"),A5r=o(" (Funnel Transformer model)"),y5r=l(),PM=a("li"),r2e=a("strong"),L5r=o("layoutlm"),x5r=o(" \u2014 "),NW=a("a"),$5r=o("TFLayoutLMForTokenClassification"),k5r=o(" (LayoutLM model)"),S5r=l(),IM=a("li"),t2e=a("strong"),R5r=o("longformer"),B5r=o(" \u2014 "),jW=a("a"),P5r=o("TFLongformerForTokenClassification"),I5r=o(" (Longformer model)"),q5r=l(),qM=a("li"),a2e=a("strong"),N5r=o("mobilebert"),j5r=o(" \u2014 "),DW=a("a"),D5r=o("TFMobileBertForTokenClassification"),G5r=o(" (MobileBERT model)"),O5r=l(),NM=a("li"),n2e=a("strong"),V5r=o("mpnet"),X5r=o(" \u2014 "),GW=a("a"),z5r=o("TFMPNetForTokenClassification"),Q5r=o(" (MPNet model)"),W5r=l(),jM=a("li"),s2e=a("strong"),H5r=o("rembert"),U5r=o(" \u2014 "),OW=a("a"),J5r=o("TFRemBertForTokenClassification"),Y5r=o(" (RemBERT model)"),K5r=l(),DM=a("li"),l2e=a("strong"),Z5r=o("roberta"),evr=o(" \u2014 "),VW=a("a"),ovr=o("TFRobertaForTokenClassification"),rvr=o(" (RoBERTa model)"),tvr=l(),GM=a("li"),i2e=a("strong"),avr=o("roformer"),nvr=o(" \u2014 "),XW=a("a"),svr=o("TFRoFormerForTokenClassification"),lvr=o(" (RoFormer model)"),ivr=l(),OM=a("li"),d2e=a("strong"),dvr=o("xlm"),cvr=o(" \u2014 "),zW=a("a"),fvr=o("TFXLMForTokenClassification"),mvr=o(" (XLM model)"),gvr=l(),VM=a("li"),c2e=a("strong"),hvr=o("xlm-roberta"),pvr=o(" \u2014 "),QW=a("a"),uvr=o("TFXLMRobertaForTokenClassification"),_vr=o(" (XLM-RoBERTa model)"),bvr=l(),XM=a("li"),f2e=a("strong"),vvr=o("xlnet"),Fvr=o(" \u2014 "),WW=a("a"),Tvr=o("TFXLNetForTokenClassification"),Mvr=o(" (XLNet model)"),Evr=l(),F(zM.$$.fragment),hPe=l(),lc=a("h2"),QM=a("a"),m2e=a("span"),F(HL.$$.fragment),Cvr=l(),g2e=a("span"),wvr=o("TFAutoModelForQuestionAnswering"),pPe=l(),nr=a("div"),F(UL.$$.fragment),Avr=l(),ic=a("p"),yvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HW=a("a"),Lvr=o("from_pretrained()"),xvr=o(" class method or the "),UW=a("a"),$vr=o("from_config()"),kvr=o(` class
method.`),Svr=l(),JL=a("p"),Rvr=o("This class cannot be instantiated directly using "),h2e=a("code"),Bvr=o("__init__()"),Pvr=o(" (throws an error)."),Ivr=l(),St=a("div"),F(YL.$$.fragment),qvr=l(),p2e=a("p"),Nvr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jvr=l(),dc=a("p"),Dvr=o(`Note:
Loading a model from its configuration file does `),u2e=a("strong"),Gvr=o("not"),Ovr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),Vvr=o("from_pretrained()"),Xvr=o(" to load the model weights."),zvr=l(),F(WM.$$.fragment),Qvr=l(),Sr=a("div"),F(KL.$$.fragment),Wvr=l(),_2e=a("p"),Hvr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Uvr=l(),an=a("p"),Jvr=o("The model class to instantiate is selected based on the "),b2e=a("code"),Yvr=o("model_type"),Kvr=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),Zvr=o("pretrained_model_name_or_path"),eFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=a("code"),oFr=o("pretrained_model_name_or_path"),rFr=o(":"),tFr=l(),ce=a("ul"),HM=a("li"),T2e=a("strong"),aFr=o("albert"),nFr=o(" \u2014 "),YW=a("a"),sFr=o("TFAlbertForQuestionAnswering"),lFr=o(" (ALBERT model)"),iFr=l(),UM=a("li"),M2e=a("strong"),dFr=o("bert"),cFr=o(" \u2014 "),KW=a("a"),fFr=o("TFBertForQuestionAnswering"),mFr=o(" (BERT model)"),gFr=l(),JM=a("li"),E2e=a("strong"),hFr=o("camembert"),pFr=o(" \u2014 "),ZW=a("a"),uFr=o("TFCamembertForQuestionAnswering"),_Fr=o(" (CamemBERT model)"),bFr=l(),YM=a("li"),C2e=a("strong"),vFr=o("convbert"),FFr=o(" \u2014 "),eH=a("a"),TFr=o("TFConvBertForQuestionAnswering"),MFr=o(" (ConvBERT model)"),EFr=l(),KM=a("li"),w2e=a("strong"),CFr=o("deberta"),wFr=o(" \u2014 "),oH=a("a"),AFr=o("TFDebertaForQuestionAnswering"),yFr=o(" (DeBERTa model)"),LFr=l(),ZM=a("li"),A2e=a("strong"),xFr=o("deberta-v2"),$Fr=o(" \u2014 "),rH=a("a"),kFr=o("TFDebertaV2ForQuestionAnswering"),SFr=o(" (DeBERTa-v2 model)"),RFr=l(),e4=a("li"),y2e=a("strong"),BFr=o("distilbert"),PFr=o(" \u2014 "),tH=a("a"),IFr=o("TFDistilBertForQuestionAnswering"),qFr=o(" (DistilBERT model)"),NFr=l(),o4=a("li"),L2e=a("strong"),jFr=o("electra"),DFr=o(" \u2014 "),aH=a("a"),GFr=o("TFElectraForQuestionAnswering"),OFr=o(" (ELECTRA model)"),VFr=l(),r4=a("li"),x2e=a("strong"),XFr=o("flaubert"),zFr=o(" \u2014 "),nH=a("a"),QFr=o("TFFlaubertForQuestionAnsweringSimple"),WFr=o(" (FlauBERT model)"),HFr=l(),t4=a("li"),$2e=a("strong"),UFr=o("funnel"),JFr=o(" \u2014 "),sH=a("a"),YFr=o("TFFunnelForQuestionAnswering"),KFr=o(" (Funnel Transformer model)"),ZFr=l(),a4=a("li"),k2e=a("strong"),eTr=o("gptj"),oTr=o(" \u2014 "),lH=a("a"),rTr=o("TFGPTJForQuestionAnswering"),tTr=o(" (GPT-J model)"),aTr=l(),n4=a("li"),S2e=a("strong"),nTr=o("longformer"),sTr=o(" \u2014 "),iH=a("a"),lTr=o("TFLongformerForQuestionAnswering"),iTr=o(" (Longformer model)"),dTr=l(),s4=a("li"),R2e=a("strong"),cTr=o("mobilebert"),fTr=o(" \u2014 "),dH=a("a"),mTr=o("TFMobileBertForQuestionAnswering"),gTr=o(" (MobileBERT model)"),hTr=l(),l4=a("li"),B2e=a("strong"),pTr=o("mpnet"),uTr=o(" \u2014 "),cH=a("a"),_Tr=o("TFMPNetForQuestionAnswering"),bTr=o(" (MPNet model)"),vTr=l(),i4=a("li"),P2e=a("strong"),FTr=o("rembert"),TTr=o(" \u2014 "),fH=a("a"),MTr=o("TFRemBertForQuestionAnswering"),ETr=o(" (RemBERT model)"),CTr=l(),d4=a("li"),I2e=a("strong"),wTr=o("roberta"),ATr=o(" \u2014 "),mH=a("a"),yTr=o("TFRobertaForQuestionAnswering"),LTr=o(" (RoBERTa model)"),xTr=l(),c4=a("li"),q2e=a("strong"),$Tr=o("roformer"),kTr=o(" \u2014 "),gH=a("a"),STr=o("TFRoFormerForQuestionAnswering"),RTr=o(" (RoFormer model)"),BTr=l(),f4=a("li"),N2e=a("strong"),PTr=o("xlm"),ITr=o(" \u2014 "),hH=a("a"),qTr=o("TFXLMForQuestionAnsweringSimple"),NTr=o(" (XLM model)"),jTr=l(),m4=a("li"),j2e=a("strong"),DTr=o("xlm-roberta"),GTr=o(" \u2014 "),pH=a("a"),OTr=o("TFXLMRobertaForQuestionAnswering"),VTr=o(" (XLM-RoBERTa model)"),XTr=l(),g4=a("li"),D2e=a("strong"),zTr=o("xlnet"),QTr=o(" \u2014 "),uH=a("a"),WTr=o("TFXLNetForQuestionAnsweringSimple"),HTr=o(" (XLNet model)"),UTr=l(),F(h4.$$.fragment),uPe=l(),cc=a("h2"),p4=a("a"),G2e=a("span"),F(ZL.$$.fragment),JTr=l(),O2e=a("span"),YTr=o("TFAutoModelForVision2Seq"),_Pe=l(),sr=a("div"),F(e8.$$.fragment),KTr=l(),fc=a("p"),ZTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_H=a("a"),e9r=o("from_pretrained()"),o9r=o(" class method or the "),bH=a("a"),r9r=o("from_config()"),t9r=o(` class
method.`),a9r=l(),o8=a("p"),n9r=o("This class cannot be instantiated directly using "),V2e=a("code"),s9r=o("__init__()"),l9r=o(" (throws an error)."),i9r=l(),Rt=a("div"),F(r8.$$.fragment),d9r=l(),X2e=a("p"),c9r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),f9r=l(),mc=a("p"),m9r=o(`Note:
Loading a model from its configuration file does `),z2e=a("strong"),g9r=o("not"),h9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),p9r=o("from_pretrained()"),u9r=o(" to load the model weights."),_9r=l(),F(u4.$$.fragment),b9r=l(),Rr=a("div"),F(t8.$$.fragment),v9r=l(),Q2e=a("p"),F9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),T9r=l(),nn=a("p"),M9r=o("The model class to instantiate is selected based on the "),W2e=a("code"),E9r=o("model_type"),C9r=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),w9r=o("pretrained_model_name_or_path"),A9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=a("code"),y9r=o("pretrained_model_name_or_path"),L9r=o(":"),x9r=l(),J2e=a("ul"),_4=a("li"),Y2e=a("strong"),$9r=o("vision-encoder-decoder"),k9r=o(" \u2014 "),FH=a("a"),S9r=o("TFVisionEncoderDecoderModel"),R9r=o(" (Vision Encoder decoder model)"),B9r=l(),F(b4.$$.fragment),bPe=l(),gc=a("h2"),v4=a("a"),K2e=a("span"),F(a8.$$.fragment),P9r=l(),Z2e=a("span"),I9r=o("TFAutoModelForSpeechSeq2Seq"),vPe=l(),lr=a("div"),F(n8.$$.fragment),q9r=l(),hc=a("p"),N9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TH=a("a"),j9r=o("from_pretrained()"),D9r=o(" class method or the "),MH=a("a"),G9r=o("from_config()"),O9r=o(` class
method.`),V9r=l(),s8=a("p"),X9r=o("This class cannot be instantiated directly using "),e5e=a("code"),z9r=o("__init__()"),Q9r=o(" (throws an error)."),W9r=l(),Bt=a("div"),F(l8.$$.fragment),H9r=l(),o5e=a("p"),U9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),J9r=l(),pc=a("p"),Y9r=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),K9r=o("not"),Z9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),eMr=o("from_pretrained()"),oMr=o(" to load the model weights."),rMr=l(),F(F4.$$.fragment),tMr=l(),Br=a("div"),F(i8.$$.fragment),aMr=l(),t5e=a("p"),nMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sMr=l(),sn=a("p"),lMr=o("The model class to instantiate is selected based on the "),a5e=a("code"),iMr=o("model_type"),dMr=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),cMr=o("pretrained_model_name_or_path"),fMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),mMr=o("pretrained_model_name_or_path"),gMr=o(":"),hMr=l(),l5e=a("ul"),T4=a("li"),i5e=a("strong"),pMr=o("speech_to_text"),uMr=o(" \u2014 "),CH=a("a"),_Mr=o("TFSpeech2TextForConditionalGeneration"),bMr=o(" (Speech2Text model)"),vMr=l(),F(M4.$$.fragment),FPe=l(),uc=a("h2"),E4=a("a"),d5e=a("span"),F(d8.$$.fragment),FMr=l(),c5e=a("span"),TMr=o("FlaxAutoModel"),TPe=l(),ir=a("div"),F(c8.$$.fragment),MMr=l(),_c=a("p"),EMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wH=a("a"),CMr=o("from_pretrained()"),wMr=o(" class method or the "),AH=a("a"),AMr=o("from_config()"),yMr=o(` class
method.`),LMr=l(),f8=a("p"),xMr=o("This class cannot be instantiated directly using "),f5e=a("code"),$Mr=o("__init__()"),kMr=o(" (throws an error)."),SMr=l(),Pt=a("div"),F(m8.$$.fragment),RMr=l(),m5e=a("p"),BMr=o("Instantiates one of the base model classes of the library from a configuration."),PMr=l(),bc=a("p"),IMr=o(`Note:
Loading a model from its configuration file does `),g5e=a("strong"),qMr=o("not"),NMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),jMr=o("from_pretrained()"),DMr=o(" to load the model weights."),GMr=l(),F(C4.$$.fragment),OMr=l(),Pr=a("div"),F(g8.$$.fragment),VMr=l(),h5e=a("p"),XMr=o("Instantiate one of the base model classes of the library from a pretrained model."),zMr=l(),ln=a("p"),QMr=o("The model class to instantiate is selected based on the "),p5e=a("code"),WMr=o("model_type"),HMr=o(` property of the config object (either
passed as an argument or loaded from `),u5e=a("code"),UMr=o("pretrained_model_name_or_path"),JMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=a("code"),YMr=o("pretrained_model_name_or_path"),KMr=o(":"),ZMr=l(),oe=a("ul"),w4=a("li"),b5e=a("strong"),e4r=o("albert"),o4r=o(" \u2014 "),LH=a("a"),r4r=o("FlaxAlbertModel"),t4r=o(" (ALBERT model)"),a4r=l(),A4=a("li"),v5e=a("strong"),n4r=o("bart"),s4r=o(" \u2014 "),xH=a("a"),l4r=o("FlaxBartModel"),i4r=o(" (BART model)"),d4r=l(),y4=a("li"),F5e=a("strong"),c4r=o("beit"),f4r=o(" \u2014 "),$H=a("a"),m4r=o("FlaxBeitModel"),g4r=o(" (BEiT model)"),h4r=l(),L4=a("li"),T5e=a("strong"),p4r=o("bert"),u4r=o(" \u2014 "),kH=a("a"),_4r=o("FlaxBertModel"),b4r=o(" (BERT model)"),v4r=l(),x4=a("li"),M5e=a("strong"),F4r=o("big_bird"),T4r=o(" \u2014 "),SH=a("a"),M4r=o("FlaxBigBirdModel"),E4r=o(" (BigBird model)"),C4r=l(),$4=a("li"),E5e=a("strong"),w4r=o("blenderbot"),A4r=o(" \u2014 "),RH=a("a"),y4r=o("FlaxBlenderbotModel"),L4r=o(" (Blenderbot model)"),x4r=l(),k4=a("li"),C5e=a("strong"),$4r=o("blenderbot-small"),k4r=o(" \u2014 "),BH=a("a"),S4r=o("FlaxBlenderbotSmallModel"),R4r=o(" (BlenderbotSmall model)"),B4r=l(),S4=a("li"),w5e=a("strong"),P4r=o("clip"),I4r=o(" \u2014 "),PH=a("a"),q4r=o("FlaxCLIPModel"),N4r=o(" (CLIP model)"),j4r=l(),R4=a("li"),A5e=a("strong"),D4r=o("distilbert"),G4r=o(" \u2014 "),IH=a("a"),O4r=o("FlaxDistilBertModel"),V4r=o(" (DistilBERT model)"),X4r=l(),B4=a("li"),y5e=a("strong"),z4r=o("electra"),Q4r=o(" \u2014 "),qH=a("a"),W4r=o("FlaxElectraModel"),H4r=o(" (ELECTRA model)"),U4r=l(),P4=a("li"),L5e=a("strong"),J4r=o("gpt2"),Y4r=o(" \u2014 "),NH=a("a"),K4r=o("FlaxGPT2Model"),Z4r=o(" (OpenAI GPT-2 model)"),eEr=l(),I4=a("li"),x5e=a("strong"),oEr=o("gpt_neo"),rEr=o(" \u2014 "),jH=a("a"),tEr=o("FlaxGPTNeoModel"),aEr=o(" (GPT Neo model)"),nEr=l(),q4=a("li"),$5e=a("strong"),sEr=o("gptj"),lEr=o(" \u2014 "),DH=a("a"),iEr=o("FlaxGPTJModel"),dEr=o(" (GPT-J model)"),cEr=l(),N4=a("li"),k5e=a("strong"),fEr=o("marian"),mEr=o(" \u2014 "),GH=a("a"),gEr=o("FlaxMarianModel"),hEr=o(" (Marian model)"),pEr=l(),j4=a("li"),S5e=a("strong"),uEr=o("mbart"),_Er=o(" \u2014 "),OH=a("a"),bEr=o("FlaxMBartModel"),vEr=o(" (mBART model)"),FEr=l(),D4=a("li"),R5e=a("strong"),TEr=o("mt5"),MEr=o(" \u2014 "),VH=a("a"),EEr=o("FlaxMT5Model"),CEr=o(" (mT5 model)"),wEr=l(),G4=a("li"),B5e=a("strong"),AEr=o("pegasus"),yEr=o(" \u2014 "),XH=a("a"),LEr=o("FlaxPegasusModel"),xEr=o(" (Pegasus model)"),$Er=l(),O4=a("li"),P5e=a("strong"),kEr=o("roberta"),SEr=o(" \u2014 "),zH=a("a"),REr=o("FlaxRobertaModel"),BEr=o(" (RoBERTa model)"),PEr=l(),V4=a("li"),I5e=a("strong"),IEr=o("roformer"),qEr=o(" \u2014 "),QH=a("a"),NEr=o("FlaxRoFormerModel"),jEr=o(" (RoFormer model)"),DEr=l(),X4=a("li"),q5e=a("strong"),GEr=o("t5"),OEr=o(" \u2014 "),WH=a("a"),VEr=o("FlaxT5Model"),XEr=o(" (T5 model)"),zEr=l(),z4=a("li"),N5e=a("strong"),QEr=o("vision-text-dual-encoder"),WEr=o(" \u2014 "),HH=a("a"),HEr=o("FlaxVisionTextDualEncoderModel"),UEr=o(" (VisionTextDualEncoder model)"),JEr=l(),Q4=a("li"),j5e=a("strong"),YEr=o("vit"),KEr=o(" \u2014 "),UH=a("a"),ZEr=o("FlaxViTModel"),eCr=o(" (ViT model)"),oCr=l(),W4=a("li"),D5e=a("strong"),rCr=o("wav2vec2"),tCr=o(" \u2014 "),JH=a("a"),aCr=o("FlaxWav2Vec2Model"),nCr=o(" (Wav2Vec2 model)"),sCr=l(),H4=a("li"),G5e=a("strong"),lCr=o("xglm"),iCr=o(" \u2014 "),YH=a("a"),dCr=o("FlaxXGLMModel"),cCr=o(" (XGLM model)"),fCr=l(),U4=a("li"),O5e=a("strong"),mCr=o("xlm-roberta"),gCr=o(" \u2014 "),KH=a("a"),hCr=o("FlaxXLMRobertaModel"),pCr=o(" (XLM-RoBERTa model)"),uCr=l(),F(J4.$$.fragment),MPe=l(),vc=a("h2"),Y4=a("a"),V5e=a("span"),F(h8.$$.fragment),_Cr=l(),X5e=a("span"),bCr=o("FlaxAutoModelForCausalLM"),EPe=l(),dr=a("div"),F(p8.$$.fragment),vCr=l(),Fc=a("p"),FCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZH=a("a"),TCr=o("from_pretrained()"),MCr=o(" class method or the "),eU=a("a"),ECr=o("from_config()"),CCr=o(` class
method.`),wCr=l(),u8=a("p"),ACr=o("This class cannot be instantiated directly using "),z5e=a("code"),yCr=o("__init__()"),LCr=o(" (throws an error)."),xCr=l(),It=a("div"),F(_8.$$.fragment),$Cr=l(),Q5e=a("p"),kCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SCr=l(),Tc=a("p"),RCr=o(`Note:
Loading a model from its configuration file does `),W5e=a("strong"),BCr=o("not"),PCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),ICr=o("from_pretrained()"),qCr=o(" to load the model weights."),NCr=l(),F(K4.$$.fragment),jCr=l(),Ir=a("div"),F(b8.$$.fragment),DCr=l(),H5e=a("p"),GCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),OCr=l(),dn=a("p"),VCr=o("The model class to instantiate is selected based on the "),U5e=a("code"),XCr=o("model_type"),zCr=o(` property of the config object (either
passed as an argument or loaded from `),J5e=a("code"),QCr=o("pretrained_model_name_or_path"),WCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=a("code"),HCr=o("pretrained_model_name_or_path"),UCr=o(":"),JCr=l(),Hr=a("ul"),Z4=a("li"),K5e=a("strong"),YCr=o("bart"),KCr=o(" \u2014 "),rU=a("a"),ZCr=o("FlaxBartForCausalLM"),e3r=o(" (BART model)"),o3r=l(),eE=a("li"),Z5e=a("strong"),r3r=o("gpt2"),t3r=o(" \u2014 "),tU=a("a"),a3r=o("FlaxGPT2LMHeadModel"),n3r=o(" (OpenAI GPT-2 model)"),s3r=l(),oE=a("li"),eve=a("strong"),l3r=o("gpt_neo"),i3r=o(" \u2014 "),aU=a("a"),d3r=o("FlaxGPTNeoForCausalLM"),c3r=o(" (GPT Neo model)"),f3r=l(),rE=a("li"),ove=a("strong"),m3r=o("gptj"),g3r=o(" \u2014 "),nU=a("a"),h3r=o("FlaxGPTJForCausalLM"),p3r=o(" (GPT-J model)"),u3r=l(),tE=a("li"),rve=a("strong"),_3r=o("xglm"),b3r=o(" \u2014 "),sU=a("a"),v3r=o("FlaxXGLMForCausalLM"),F3r=o(" (XGLM model)"),T3r=l(),F(aE.$$.fragment),CPe=l(),Mc=a("h2"),nE=a("a"),tve=a("span"),F(v8.$$.fragment),M3r=l(),ave=a("span"),E3r=o("FlaxAutoModelForPreTraining"),wPe=l(),cr=a("div"),F(F8.$$.fragment),C3r=l(),Ec=a("p"),w3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lU=a("a"),A3r=o("from_pretrained()"),y3r=o(" class method or the "),iU=a("a"),L3r=o("from_config()"),x3r=o(` class
method.`),$3r=l(),T8=a("p"),k3r=o("This class cannot be instantiated directly using "),nve=a("code"),S3r=o("__init__()"),R3r=o(" (throws an error)."),B3r=l(),qt=a("div"),F(M8.$$.fragment),P3r=l(),sve=a("p"),I3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),q3r=l(),Cc=a("p"),N3r=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),j3r=o("not"),D3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),G3r=o("from_pretrained()"),O3r=o(" to load the model weights."),V3r=l(),F(sE.$$.fragment),X3r=l(),qr=a("div"),F(E8.$$.fragment),z3r=l(),ive=a("p"),Q3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),W3r=l(),cn=a("p"),H3r=o("The model class to instantiate is selected based on the "),dve=a("code"),U3r=o("model_type"),J3r=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),Y3r=o("pretrained_model_name_or_path"),K3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),Z3r=o("pretrained_model_name_or_path"),ewr=o(":"),owr=l(),Me=a("ul"),lE=a("li"),mve=a("strong"),rwr=o("albert"),twr=o(" \u2014 "),cU=a("a"),awr=o("FlaxAlbertForPreTraining"),nwr=o(" (ALBERT model)"),swr=l(),iE=a("li"),gve=a("strong"),lwr=o("bart"),iwr=o(" \u2014 "),fU=a("a"),dwr=o("FlaxBartForConditionalGeneration"),cwr=o(" (BART model)"),fwr=l(),dE=a("li"),hve=a("strong"),mwr=o("bert"),gwr=o(" \u2014 "),mU=a("a"),hwr=o("FlaxBertForPreTraining"),pwr=o(" (BERT model)"),uwr=l(),cE=a("li"),pve=a("strong"),_wr=o("big_bird"),bwr=o(" \u2014 "),gU=a("a"),vwr=o("FlaxBigBirdForPreTraining"),Fwr=o(" (BigBird model)"),Twr=l(),fE=a("li"),uve=a("strong"),Mwr=o("electra"),Ewr=o(" \u2014 "),hU=a("a"),Cwr=o("FlaxElectraForPreTraining"),wwr=o(" (ELECTRA model)"),Awr=l(),mE=a("li"),_ve=a("strong"),ywr=o("mbart"),Lwr=o(" \u2014 "),pU=a("a"),xwr=o("FlaxMBartForConditionalGeneration"),$wr=o(" (mBART model)"),kwr=l(),gE=a("li"),bve=a("strong"),Swr=o("mt5"),Rwr=o(" \u2014 "),uU=a("a"),Bwr=o("FlaxMT5ForConditionalGeneration"),Pwr=o(" (mT5 model)"),Iwr=l(),hE=a("li"),vve=a("strong"),qwr=o("roberta"),Nwr=o(" \u2014 "),_U=a("a"),jwr=o("FlaxRobertaForMaskedLM"),Dwr=o(" (RoBERTa model)"),Gwr=l(),pE=a("li"),Fve=a("strong"),Owr=o("roformer"),Vwr=o(" \u2014 "),bU=a("a"),Xwr=o("FlaxRoFormerForMaskedLM"),zwr=o(" (RoFormer model)"),Qwr=l(),uE=a("li"),Tve=a("strong"),Wwr=o("t5"),Hwr=o(" \u2014 "),vU=a("a"),Uwr=o("FlaxT5ForConditionalGeneration"),Jwr=o(" (T5 model)"),Ywr=l(),_E=a("li"),Mve=a("strong"),Kwr=o("wav2vec2"),Zwr=o(" \u2014 "),FU=a("a"),eAr=o("FlaxWav2Vec2ForPreTraining"),oAr=o(" (Wav2Vec2 model)"),rAr=l(),bE=a("li"),Eve=a("strong"),tAr=o("xlm-roberta"),aAr=o(" \u2014 "),TU=a("a"),nAr=o("FlaxXLMRobertaForMaskedLM"),sAr=o(" (XLM-RoBERTa model)"),lAr=l(),F(vE.$$.fragment),APe=l(),wc=a("h2"),FE=a("a"),Cve=a("span"),F(C8.$$.fragment),iAr=l(),wve=a("span"),dAr=o("FlaxAutoModelForMaskedLM"),yPe=l(),fr=a("div"),F(w8.$$.fragment),cAr=l(),Ac=a("p"),fAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MU=a("a"),mAr=o("from_pretrained()"),gAr=o(" class method or the "),EU=a("a"),hAr=o("from_config()"),pAr=o(` class
method.`),uAr=l(),A8=a("p"),_Ar=o("This class cannot be instantiated directly using "),Ave=a("code"),bAr=o("__init__()"),vAr=o(" (throws an error)."),FAr=l(),Nt=a("div"),F(y8.$$.fragment),TAr=l(),yve=a("p"),MAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),EAr=l(),yc=a("p"),CAr=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),wAr=o("not"),AAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),yAr=o("from_pretrained()"),LAr=o(" to load the model weights."),xAr=l(),F(TE.$$.fragment),$Ar=l(),Nr=a("div"),F(L8.$$.fragment),kAr=l(),xve=a("p"),SAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),RAr=l(),fn=a("p"),BAr=o("The model class to instantiate is selected based on the "),$ve=a("code"),PAr=o("model_type"),IAr=o(` property of the config object (either
passed as an argument or loaded from `),kve=a("code"),qAr=o("pretrained_model_name_or_path"),NAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=a("code"),jAr=o("pretrained_model_name_or_path"),DAr=o(":"),GAr=l(),Le=a("ul"),ME=a("li"),Rve=a("strong"),OAr=o("albert"),VAr=o(" \u2014 "),wU=a("a"),XAr=o("FlaxAlbertForMaskedLM"),zAr=o(" (ALBERT model)"),QAr=l(),EE=a("li"),Bve=a("strong"),WAr=o("bart"),HAr=o(" \u2014 "),AU=a("a"),UAr=o("FlaxBartForConditionalGeneration"),JAr=o(" (BART model)"),YAr=l(),CE=a("li"),Pve=a("strong"),KAr=o("bert"),ZAr=o(" \u2014 "),yU=a("a"),e0r=o("FlaxBertForMaskedLM"),o0r=o(" (BERT model)"),r0r=l(),wE=a("li"),Ive=a("strong"),t0r=o("big_bird"),a0r=o(" \u2014 "),LU=a("a"),n0r=o("FlaxBigBirdForMaskedLM"),s0r=o(" (BigBird model)"),l0r=l(),AE=a("li"),qve=a("strong"),i0r=o("distilbert"),d0r=o(" \u2014 "),xU=a("a"),c0r=o("FlaxDistilBertForMaskedLM"),f0r=o(" (DistilBERT model)"),m0r=l(),yE=a("li"),Nve=a("strong"),g0r=o("electra"),h0r=o(" \u2014 "),$U=a("a"),p0r=o("FlaxElectraForMaskedLM"),u0r=o(" (ELECTRA model)"),_0r=l(),LE=a("li"),jve=a("strong"),b0r=o("mbart"),v0r=o(" \u2014 "),kU=a("a"),F0r=o("FlaxMBartForConditionalGeneration"),T0r=o(" (mBART model)"),M0r=l(),xE=a("li"),Dve=a("strong"),E0r=o("roberta"),C0r=o(" \u2014 "),SU=a("a"),w0r=o("FlaxRobertaForMaskedLM"),A0r=o(" (RoBERTa model)"),y0r=l(),$E=a("li"),Gve=a("strong"),L0r=o("roformer"),x0r=o(" \u2014 "),RU=a("a"),$0r=o("FlaxRoFormerForMaskedLM"),k0r=o(" (RoFormer model)"),S0r=l(),kE=a("li"),Ove=a("strong"),R0r=o("xlm-roberta"),B0r=o(" \u2014 "),BU=a("a"),P0r=o("FlaxXLMRobertaForMaskedLM"),I0r=o(" (XLM-RoBERTa model)"),q0r=l(),F(SE.$$.fragment),LPe=l(),Lc=a("h2"),RE=a("a"),Vve=a("span"),F(x8.$$.fragment),N0r=l(),Xve=a("span"),j0r=o("FlaxAutoModelForSeq2SeqLM"),xPe=l(),mr=a("div"),F($8.$$.fragment),D0r=l(),xc=a("p"),G0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PU=a("a"),O0r=o("from_pretrained()"),V0r=o(" class method or the "),IU=a("a"),X0r=o("from_config()"),z0r=o(` class
method.`),Q0r=l(),k8=a("p"),W0r=o("This class cannot be instantiated directly using "),zve=a("code"),H0r=o("__init__()"),U0r=o(" (throws an error)."),J0r=l(),jt=a("div"),F(S8.$$.fragment),Y0r=l(),Qve=a("p"),K0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Z0r=l(),$c=a("p"),eyr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),oyr=o("not"),ryr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),tyr=o("from_pretrained()"),ayr=o(" to load the model weights."),nyr=l(),F(BE.$$.fragment),syr=l(),jr=a("div"),F(R8.$$.fragment),lyr=l(),Hve=a("p"),iyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dyr=l(),mn=a("p"),cyr=o("The model class to instantiate is selected based on the "),Uve=a("code"),fyr=o("model_type"),myr=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),gyr=o("pretrained_model_name_or_path"),hyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),pyr=o("pretrained_model_name_or_path"),uyr=o(":"),_yr=l(),ke=a("ul"),PE=a("li"),Kve=a("strong"),byr=o("bart"),vyr=o(" \u2014 "),NU=a("a"),Fyr=o("FlaxBartForConditionalGeneration"),Tyr=o(" (BART model)"),Myr=l(),IE=a("li"),Zve=a("strong"),Eyr=o("blenderbot"),Cyr=o(" \u2014 "),jU=a("a"),wyr=o("FlaxBlenderbotForConditionalGeneration"),Ayr=o(" (Blenderbot model)"),yyr=l(),qE=a("li"),eFe=a("strong"),Lyr=o("blenderbot-small"),xyr=o(" \u2014 "),DU=a("a"),$yr=o("FlaxBlenderbotSmallForConditionalGeneration"),kyr=o(" (BlenderbotSmall model)"),Syr=l(),NE=a("li"),oFe=a("strong"),Ryr=o("encoder-decoder"),Byr=o(" \u2014 "),GU=a("a"),Pyr=o("FlaxEncoderDecoderModel"),Iyr=o(" (Encoder decoder model)"),qyr=l(),jE=a("li"),rFe=a("strong"),Nyr=o("marian"),jyr=o(" \u2014 "),OU=a("a"),Dyr=o("FlaxMarianMTModel"),Gyr=o(" (Marian model)"),Oyr=l(),DE=a("li"),tFe=a("strong"),Vyr=o("mbart"),Xyr=o(" \u2014 "),VU=a("a"),zyr=o("FlaxMBartForConditionalGeneration"),Qyr=o(" (mBART model)"),Wyr=l(),GE=a("li"),aFe=a("strong"),Hyr=o("mt5"),Uyr=o(" \u2014 "),XU=a("a"),Jyr=o("FlaxMT5ForConditionalGeneration"),Yyr=o(" (mT5 model)"),Kyr=l(),OE=a("li"),nFe=a("strong"),Zyr=o("pegasus"),eLr=o(" \u2014 "),zU=a("a"),oLr=o("FlaxPegasusForConditionalGeneration"),rLr=o(" (Pegasus model)"),tLr=l(),VE=a("li"),sFe=a("strong"),aLr=o("t5"),nLr=o(" \u2014 "),QU=a("a"),sLr=o("FlaxT5ForConditionalGeneration"),lLr=o(" (T5 model)"),iLr=l(),F(XE.$$.fragment),$Pe=l(),kc=a("h2"),zE=a("a"),lFe=a("span"),F(B8.$$.fragment),dLr=l(),iFe=a("span"),cLr=o("FlaxAutoModelForSequenceClassification"),kPe=l(),gr=a("div"),F(P8.$$.fragment),fLr=l(),Sc=a("p"),mLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WU=a("a"),gLr=o("from_pretrained()"),hLr=o(" class method or the "),HU=a("a"),pLr=o("from_config()"),uLr=o(` class
method.`),_Lr=l(),I8=a("p"),bLr=o("This class cannot be instantiated directly using "),dFe=a("code"),vLr=o("__init__()"),FLr=o(" (throws an error)."),TLr=l(),Dt=a("div"),F(q8.$$.fragment),MLr=l(),cFe=a("p"),ELr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CLr=l(),Rc=a("p"),wLr=o(`Note:
Loading a model from its configuration file does `),fFe=a("strong"),ALr=o("not"),yLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),LLr=o("from_pretrained()"),xLr=o(" to load the model weights."),$Lr=l(),F(QE.$$.fragment),kLr=l(),Dr=a("div"),F(N8.$$.fragment),SLr=l(),mFe=a("p"),RLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),BLr=l(),gn=a("p"),PLr=o("The model class to instantiate is selected based on the "),gFe=a("code"),ILr=o("model_type"),qLr=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),NLr=o("pretrained_model_name_or_path"),jLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=a("code"),DLr=o("pretrained_model_name_or_path"),GLr=o(":"),OLr=l(),xe=a("ul"),WE=a("li"),uFe=a("strong"),VLr=o("albert"),XLr=o(" \u2014 "),JU=a("a"),zLr=o("FlaxAlbertForSequenceClassification"),QLr=o(" (ALBERT model)"),WLr=l(),HE=a("li"),_Fe=a("strong"),HLr=o("bart"),ULr=o(" \u2014 "),YU=a("a"),JLr=o("FlaxBartForSequenceClassification"),YLr=o(" (BART model)"),KLr=l(),UE=a("li"),bFe=a("strong"),ZLr=o("bert"),e8r=o(" \u2014 "),KU=a("a"),o8r=o("FlaxBertForSequenceClassification"),r8r=o(" (BERT model)"),t8r=l(),JE=a("li"),vFe=a("strong"),a8r=o("big_bird"),n8r=o(" \u2014 "),ZU=a("a"),s8r=o("FlaxBigBirdForSequenceClassification"),l8r=o(" (BigBird model)"),i8r=l(),YE=a("li"),FFe=a("strong"),d8r=o("distilbert"),c8r=o(" \u2014 "),eJ=a("a"),f8r=o("FlaxDistilBertForSequenceClassification"),m8r=o(" (DistilBERT model)"),g8r=l(),KE=a("li"),TFe=a("strong"),h8r=o("electra"),p8r=o(" \u2014 "),oJ=a("a"),u8r=o("FlaxElectraForSequenceClassification"),_8r=o(" (ELECTRA model)"),b8r=l(),ZE=a("li"),MFe=a("strong"),v8r=o("mbart"),F8r=o(" \u2014 "),rJ=a("a"),T8r=o("FlaxMBartForSequenceClassification"),M8r=o(" (mBART model)"),E8r=l(),eC=a("li"),EFe=a("strong"),C8r=o("roberta"),w8r=o(" \u2014 "),tJ=a("a"),A8r=o("FlaxRobertaForSequenceClassification"),y8r=o(" (RoBERTa model)"),L8r=l(),oC=a("li"),CFe=a("strong"),x8r=o("roformer"),$8r=o(" \u2014 "),aJ=a("a"),k8r=o("FlaxRoFormerForSequenceClassification"),S8r=o(" (RoFormer model)"),R8r=l(),rC=a("li"),wFe=a("strong"),B8r=o("xlm-roberta"),P8r=o(" \u2014 "),nJ=a("a"),I8r=o("FlaxXLMRobertaForSequenceClassification"),q8r=o(" (XLM-RoBERTa model)"),N8r=l(),F(tC.$$.fragment),SPe=l(),Bc=a("h2"),aC=a("a"),AFe=a("span"),F(j8.$$.fragment),j8r=l(),yFe=a("span"),D8r=o("FlaxAutoModelForQuestionAnswering"),RPe=l(),hr=a("div"),F(D8.$$.fragment),G8r=l(),Pc=a("p"),O8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sJ=a("a"),V8r=o("from_pretrained()"),X8r=o(" class method or the "),lJ=a("a"),z8r=o("from_config()"),Q8r=o(` class
method.`),W8r=l(),G8=a("p"),H8r=o("This class cannot be instantiated directly using "),LFe=a("code"),U8r=o("__init__()"),J8r=o(" (throws an error)."),Y8r=l(),Gt=a("div"),F(O8.$$.fragment),K8r=l(),xFe=a("p"),Z8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),e7r=l(),Ic=a("p"),o7r=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),r7r=o("not"),t7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=a("a"),a7r=o("from_pretrained()"),n7r=o(" to load the model weights."),s7r=l(),F(nC.$$.fragment),l7r=l(),Gr=a("div"),F(V8.$$.fragment),i7r=l(),kFe=a("p"),d7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),c7r=l(),hn=a("p"),f7r=o("The model class to instantiate is selected based on the "),SFe=a("code"),m7r=o("model_type"),g7r=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),h7r=o("pretrained_model_name_or_path"),p7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),u7r=o("pretrained_model_name_or_path"),_7r=o(":"),b7r=l(),$e=a("ul"),sC=a("li"),PFe=a("strong"),v7r=o("albert"),F7r=o(" \u2014 "),dJ=a("a"),T7r=o("FlaxAlbertForQuestionAnswering"),M7r=o(" (ALBERT model)"),E7r=l(),lC=a("li"),IFe=a("strong"),C7r=o("bart"),w7r=o(" \u2014 "),cJ=a("a"),A7r=o("FlaxBartForQuestionAnswering"),y7r=o(" (BART model)"),L7r=l(),iC=a("li"),qFe=a("strong"),x7r=o("bert"),$7r=o(" \u2014 "),fJ=a("a"),k7r=o("FlaxBertForQuestionAnswering"),S7r=o(" (BERT model)"),R7r=l(),dC=a("li"),NFe=a("strong"),B7r=o("big_bird"),P7r=o(" \u2014 "),mJ=a("a"),I7r=o("FlaxBigBirdForQuestionAnswering"),q7r=o(" (BigBird model)"),N7r=l(),cC=a("li"),jFe=a("strong"),j7r=o("distilbert"),D7r=o(" \u2014 "),gJ=a("a"),G7r=o("FlaxDistilBertForQuestionAnswering"),O7r=o(" (DistilBERT model)"),V7r=l(),fC=a("li"),DFe=a("strong"),X7r=o("electra"),z7r=o(" \u2014 "),hJ=a("a"),Q7r=o("FlaxElectraForQuestionAnswering"),W7r=o(" (ELECTRA model)"),H7r=l(),mC=a("li"),GFe=a("strong"),U7r=o("mbart"),J7r=o(" \u2014 "),pJ=a("a"),Y7r=o("FlaxMBartForQuestionAnswering"),K7r=o(" (mBART model)"),Z7r=l(),gC=a("li"),OFe=a("strong"),exr=o("roberta"),oxr=o(" \u2014 "),uJ=a("a"),rxr=o("FlaxRobertaForQuestionAnswering"),txr=o(" (RoBERTa model)"),axr=l(),hC=a("li"),VFe=a("strong"),nxr=o("roformer"),sxr=o(" \u2014 "),_J=a("a"),lxr=o("FlaxRoFormerForQuestionAnswering"),ixr=o(" (RoFormer model)"),dxr=l(),pC=a("li"),XFe=a("strong"),cxr=o("xlm-roberta"),fxr=o(" \u2014 "),bJ=a("a"),mxr=o("FlaxXLMRobertaForQuestionAnswering"),gxr=o(" (XLM-RoBERTa model)"),hxr=l(),F(uC.$$.fragment),BPe=l(),qc=a("h2"),_C=a("a"),zFe=a("span"),F(X8.$$.fragment),pxr=l(),QFe=a("span"),uxr=o("FlaxAutoModelForTokenClassification"),PPe=l(),pr=a("div"),F(z8.$$.fragment),_xr=l(),Nc=a("p"),bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vJ=a("a"),vxr=o("from_pretrained()"),Fxr=o(" class method or the "),FJ=a("a"),Txr=o("from_config()"),Mxr=o(` class
method.`),Exr=l(),Q8=a("p"),Cxr=o("This class cannot be instantiated directly using "),WFe=a("code"),wxr=o("__init__()"),Axr=o(" (throws an error)."),yxr=l(),Ot=a("div"),F(W8.$$.fragment),Lxr=l(),HFe=a("p"),xxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$xr=l(),jc=a("p"),kxr=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),Sxr=o("not"),Rxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),Bxr=o("from_pretrained()"),Pxr=o(" to load the model weights."),Ixr=l(),F(bC.$$.fragment),qxr=l(),Or=a("div"),F(H8.$$.fragment),Nxr=l(),JFe=a("p"),jxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Dxr=l(),pn=a("p"),Gxr=o("The model class to instantiate is selected based on the "),YFe=a("code"),Oxr=o("model_type"),Vxr=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),Xxr=o("pretrained_model_name_or_path"),zxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),Qxr=o("pretrained_model_name_or_path"),Wxr=o(":"),Hxr=l(),je=a("ul"),vC=a("li"),eTe=a("strong"),Uxr=o("albert"),Jxr=o(" \u2014 "),MJ=a("a"),Yxr=o("FlaxAlbertForTokenClassification"),Kxr=o(" (ALBERT model)"),Zxr=l(),FC=a("li"),oTe=a("strong"),e$r=o("bert"),o$r=o(" \u2014 "),EJ=a("a"),r$r=o("FlaxBertForTokenClassification"),t$r=o(" (BERT model)"),a$r=l(),TC=a("li"),rTe=a("strong"),n$r=o("big_bird"),s$r=o(" \u2014 "),CJ=a("a"),l$r=o("FlaxBigBirdForTokenClassification"),i$r=o(" (BigBird model)"),d$r=l(),MC=a("li"),tTe=a("strong"),c$r=o("distilbert"),f$r=o(" \u2014 "),wJ=a("a"),m$r=o("FlaxDistilBertForTokenClassification"),g$r=o(" (DistilBERT model)"),h$r=l(),EC=a("li"),aTe=a("strong"),p$r=o("electra"),u$r=o(" \u2014 "),AJ=a("a"),_$r=o("FlaxElectraForTokenClassification"),b$r=o(" (ELECTRA model)"),v$r=l(),CC=a("li"),nTe=a("strong"),F$r=o("roberta"),T$r=o(" \u2014 "),yJ=a("a"),M$r=o("FlaxRobertaForTokenClassification"),E$r=o(" (RoBERTa model)"),C$r=l(),wC=a("li"),sTe=a("strong"),w$r=o("roformer"),A$r=o(" \u2014 "),LJ=a("a"),y$r=o("FlaxRoFormerForTokenClassification"),L$r=o(" (RoFormer model)"),x$r=l(),AC=a("li"),lTe=a("strong"),$$r=o("xlm-roberta"),k$r=o(" \u2014 "),xJ=a("a"),S$r=o("FlaxXLMRobertaForTokenClassification"),R$r=o(" (XLM-RoBERTa model)"),B$r=l(),F(yC.$$.fragment),IPe=l(),Dc=a("h2"),LC=a("a"),iTe=a("span"),F(U8.$$.fragment),P$r=l(),dTe=a("span"),I$r=o("FlaxAutoModelForMultipleChoice"),qPe=l(),ur=a("div"),F(J8.$$.fragment),q$r=l(),Gc=a("p"),N$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$J=a("a"),j$r=o("from_pretrained()"),D$r=o(" class method or the "),kJ=a("a"),G$r=o("from_config()"),O$r=o(` class
method.`),V$r=l(),Y8=a("p"),X$r=o("This class cannot be instantiated directly using "),cTe=a("code"),z$r=o("__init__()"),Q$r=o(" (throws an error)."),W$r=l(),Vt=a("div"),F(K8.$$.fragment),H$r=l(),fTe=a("p"),U$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),J$r=l(),Oc=a("p"),Y$r=o(`Note:
Loading a model from its configuration file does `),mTe=a("strong"),K$r=o("not"),Z$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=a("a"),ekr=o("from_pretrained()"),okr=o(" to load the model weights."),rkr=l(),F(xC.$$.fragment),tkr=l(),Vr=a("div"),F(Z8.$$.fragment),akr=l(),gTe=a("p"),nkr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),skr=l(),un=a("p"),lkr=o("The model class to instantiate is selected based on the "),hTe=a("code"),ikr=o("model_type"),dkr=o(` property of the config object (either
passed as an argument or loaded from `),pTe=a("code"),ckr=o("pretrained_model_name_or_path"),fkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=a("code"),mkr=o("pretrained_model_name_or_path"),gkr=o(":"),hkr=l(),De=a("ul"),$C=a("li"),_Te=a("strong"),pkr=o("albert"),ukr=o(" \u2014 "),RJ=a("a"),_kr=o("FlaxAlbertForMultipleChoice"),bkr=o(" (ALBERT model)"),vkr=l(),kC=a("li"),bTe=a("strong"),Fkr=o("bert"),Tkr=o(" \u2014 "),BJ=a("a"),Mkr=o("FlaxBertForMultipleChoice"),Ekr=o(" (BERT model)"),Ckr=l(),SC=a("li"),vTe=a("strong"),wkr=o("big_bird"),Akr=o(" \u2014 "),PJ=a("a"),ykr=o("FlaxBigBirdForMultipleChoice"),Lkr=o(" (BigBird model)"),xkr=l(),RC=a("li"),FTe=a("strong"),$kr=o("distilbert"),kkr=o(" \u2014 "),IJ=a("a"),Skr=o("FlaxDistilBertForMultipleChoice"),Rkr=o(" (DistilBERT model)"),Bkr=l(),BC=a("li"),TTe=a("strong"),Pkr=o("electra"),Ikr=o(" \u2014 "),qJ=a("a"),qkr=o("FlaxElectraForMultipleChoice"),Nkr=o(" (ELECTRA model)"),jkr=l(),PC=a("li"),MTe=a("strong"),Dkr=o("roberta"),Gkr=o(" \u2014 "),NJ=a("a"),Okr=o("FlaxRobertaForMultipleChoice"),Vkr=o(" (RoBERTa model)"),Xkr=l(),IC=a("li"),ETe=a("strong"),zkr=o("roformer"),Qkr=o(" \u2014 "),jJ=a("a"),Wkr=o("FlaxRoFormerForMultipleChoice"),Hkr=o(" (RoFormer model)"),Ukr=l(),qC=a("li"),CTe=a("strong"),Jkr=o("xlm-roberta"),Ykr=o(" \u2014 "),DJ=a("a"),Kkr=o("FlaxXLMRobertaForMultipleChoice"),Zkr=o(" (XLM-RoBERTa model)"),eSr=l(),F(NC.$$.fragment),NPe=l(),Vc=a("h2"),jC=a("a"),wTe=a("span"),F(e7.$$.fragment),oSr=l(),ATe=a("span"),rSr=o("FlaxAutoModelForNextSentencePrediction"),jPe=l(),_r=a("div"),F(o7.$$.fragment),tSr=l(),Xc=a("p"),aSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GJ=a("a"),nSr=o("from_pretrained()"),sSr=o(" class method or the "),OJ=a("a"),lSr=o("from_config()"),iSr=o(` class
method.`),dSr=l(),r7=a("p"),cSr=o("This class cannot be instantiated directly using "),yTe=a("code"),fSr=o("__init__()"),mSr=o(" (throws an error)."),gSr=l(),Xt=a("div"),F(t7.$$.fragment),hSr=l(),LTe=a("p"),pSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uSr=l(),zc=a("p"),_Sr=o(`Note:
Loading a model from its configuration file does `),xTe=a("strong"),bSr=o("not"),vSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),FSr=o("from_pretrained()"),TSr=o(" to load the model weights."),MSr=l(),F(DC.$$.fragment),ESr=l(),Xr=a("div"),F(a7.$$.fragment),CSr=l(),$Te=a("p"),wSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ASr=l(),_n=a("p"),ySr=o("The model class to instantiate is selected based on the "),kTe=a("code"),LSr=o("model_type"),xSr=o(` property of the config object (either
passed as an argument or loaded from `),STe=a("code"),$Sr=o("pretrained_model_name_or_path"),kSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=a("code"),SSr=o("pretrained_model_name_or_path"),RSr=o(":"),BSr=l(),BTe=a("ul"),GC=a("li"),PTe=a("strong"),PSr=o("bert"),ISr=o(" \u2014 "),XJ=a("a"),qSr=o("FlaxBertForNextSentencePrediction"),NSr=o(" (BERT model)"),jSr=l(),F(OC.$$.fragment),DPe=l(),Qc=a("h2"),VC=a("a"),ITe=a("span"),F(n7.$$.fragment),DSr=l(),qTe=a("span"),GSr=o("FlaxAutoModelForImageClassification"),GPe=l(),br=a("div"),F(s7.$$.fragment),OSr=l(),Wc=a("p"),VSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zJ=a("a"),XSr=o("from_pretrained()"),zSr=o(" class method or the "),QJ=a("a"),QSr=o("from_config()"),WSr=o(` class
method.`),HSr=l(),l7=a("p"),USr=o("This class cannot be instantiated directly using "),NTe=a("code"),JSr=o("__init__()"),YSr=o(" (throws an error)."),KSr=l(),zt=a("div"),F(i7.$$.fragment),ZSr=l(),jTe=a("p"),eRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oRr=l(),Hc=a("p"),rRr=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),tRr=o("not"),aRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),nRr=o("from_pretrained()"),sRr=o(" to load the model weights."),lRr=l(),F(XC.$$.fragment),iRr=l(),zr=a("div"),F(d7.$$.fragment),dRr=l(),GTe=a("p"),cRr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fRr=l(),bn=a("p"),mRr=o("The model class to instantiate is selected based on the "),OTe=a("code"),gRr=o("model_type"),hRr=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),pRr=o("pretrained_model_name_or_path"),uRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),_Rr=o("pretrained_model_name_or_path"),bRr=o(":"),vRr=l(),c7=a("ul"),zC=a("li"),zTe=a("strong"),FRr=o("beit"),TRr=o(" \u2014 "),HJ=a("a"),MRr=o("FlaxBeitForImageClassification"),ERr=o(" (BEiT model)"),CRr=l(),QC=a("li"),QTe=a("strong"),wRr=o("vit"),ARr=o(" \u2014 "),UJ=a("a"),yRr=o("FlaxViTForImageClassification"),LRr=o(" (ViT model)"),xRr=l(),F(WC.$$.fragment),OPe=l(),Uc=a("h2"),HC=a("a"),WTe=a("span"),F(f7.$$.fragment),$Rr=l(),HTe=a("span"),kRr=o("FlaxAutoModelForVision2Seq"),VPe=l(),vr=a("div"),F(m7.$$.fragment),SRr=l(),Jc=a("p"),RRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JJ=a("a"),BRr=o("from_pretrained()"),PRr=o(" class method or the "),YJ=a("a"),IRr=o("from_config()"),qRr=o(` class
method.`),NRr=l(),g7=a("p"),jRr=o("This class cannot be instantiated directly using "),UTe=a("code"),DRr=o("__init__()"),GRr=o(" (throws an error)."),ORr=l(),Qt=a("div"),F(h7.$$.fragment),VRr=l(),JTe=a("p"),XRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zRr=l(),Yc=a("p"),QRr=o(`Note:
Loading a model from its configuration file does `),YTe=a("strong"),WRr=o("not"),HRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),URr=o("from_pretrained()"),JRr=o(" to load the model weights."),YRr=l(),F(UC.$$.fragment),KRr=l(),Qr=a("div"),F(p7.$$.fragment),ZRr=l(),KTe=a("p"),eBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oBr=l(),vn=a("p"),rBr=o("The model class to instantiate is selected based on the "),ZTe=a("code"),tBr=o("model_type"),aBr=o(` property of the config object (either
passed as an argument or loaded from `),e9e=a("code"),nBr=o("pretrained_model_name_or_path"),sBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(":"),dBr=l(),r9e=a("ul"),JC=a("li"),t9e=a("strong"),cBr=o("vision-encoder-decoder"),fBr=o(" \u2014 "),ZJ=a("a"),mBr=o("FlaxVisionEncoderDecoderModel"),gBr=o(" (Vision Encoder decoder model)"),hBr=l(),F(YC.$$.fragment),this.h()},l(f){const _=J4t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var u7=s(p);m=n(u7,"A",{id:!0,class:!0,href:!0});var a9e=s(m);u=n(a9e,"SPAN",{});var n9e=s(u);T(d.$$.fragment,n9e),n9e.forEach(t),a9e.forEach(t),h=i(u7),Fo=n(u7,"SPAN",{});var s9e=s(Fo);oi=r(s9e,"Auto Classes"),s9e.forEach(t),u7.forEach(t),of=i(f),Yr=n(f,"P",{});var _7=s(Yr);ri=r(_7,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(_7,"CODE",{});var l9e=s(ti);gA=r(l9e,"from_pretrained()"),l9e.forEach(t),rf=r(_7,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),_7.forEach(t),Ie=i(f),Oe=n(f,"P",{});var Fn=s(Oe);ai=r(Fn,"Instantiating one of "),Tn=n(Fn,"A",{href:!0});var i9e=s(Tn);hA=r(i9e,"AutoConfig"),i9e.forEach(t),Mn=r(Fn,", "),En=n(Fn,"A",{href:!0});var d9e=s(En);pA=r(d9e,"AutoModel"),d9e.forEach(t),ni=r(Fn,`, and
`),Cn=n(Fn,"A",{href:!0});var c9e=s(Cn);uA=r(c9e,"AutoTokenizer"),c9e.forEach(t),si=r(Fn," will directly create a class of the relevant architecture. For instance"),Fn.forEach(t),tf=i(f),T(ba.$$.fragment,f),Ve=i(f),Ae=n(f,"P",{});var b7=s(Ae);Lx=r(b7,"will create a model that is an instance of "),li=n(b7,"A",{href:!0});var f9e=s(li);xx=r(f9e,"BertModel"),f9e.forEach(t),$x=r(b7,"."),b7.forEach(t),To=i(f),va=n(f,"P",{});var v7=s(va);kx=r(v7,"There is one class of "),af=n(v7,"CODE",{});var m9e=s(af);Sx=r(m9e,"AutoModel"),m9e.forEach(t),Uqe=r(v7," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),v7.forEach(t),VRe=i(f),ii=n(f,"H2",{class:!0});var F7=s(ii);nf=n(F7,"A",{id:!0,class:!0,href:!0});var g9e=s(nf);XK=n(g9e,"SPAN",{});var h9e=s(XK);T(_A.$$.fragment,h9e),h9e.forEach(t),g9e.forEach(t),Jqe=i(F7),zK=n(F7,"SPAN",{});var p9e=s(zK);Yqe=r(p9e,"Extending the Auto Classes"),p9e.forEach(t),F7.forEach(t),XRe=i(f),wn=n(f,"P",{});var Kc=s(wn);Kqe=r(Kc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),QK=n(Kc,"CODE",{});var u9e=s(QK);Zqe=r(u9e,"NewModel"),u9e.forEach(t),eNe=r(Kc,", make sure you have a "),WK=n(Kc,"CODE",{});var _9e=s(WK);oNe=r(_9e,"NewModelConfig"),_9e.forEach(t),rNe=r(Kc,` then you can add those to the auto
classes like this:`),Kc.forEach(t),zRe=i(f),T(bA.$$.fragment,f),QRe=i(f),Rx=n(f,"P",{});var b9e=s(Rx);tNe=r(b9e,"You will then be able to use the auto classes like you would usually do!"),b9e.forEach(t),WRe=i(f),T(sf.$$.fragment,f),HRe=i(f),di=n(f,"H2",{class:!0});var T7=s(di);lf=n(T7,"A",{id:!0,class:!0,href:!0});var v9e=s(lf);HK=n(v9e,"SPAN",{});var F9e=s(HK);T(vA.$$.fragment,F9e),F9e.forEach(t),v9e.forEach(t),aNe=i(T7),UK=n(T7,"SPAN",{});var T9e=s(UK);nNe=r(T9e,"AutoConfig"),T9e.forEach(t),T7.forEach(t),URe=i(f),Mo=n(f,"DIV",{class:!0});var Ur=s(Mo);T(FA.$$.fragment,Ur),sNe=i(Ur),TA=n(Ur,"P",{});var M7=s(TA);lNe=r(M7,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Bx=n(M7,"A",{href:!0});var M9e=s(Bx);iNe=r(M9e,"from_pretrained()"),M9e.forEach(t),dNe=r(M7," class method."),M7.forEach(t),cNe=i(Ur),MA=n(Ur,"P",{});var E7=s(MA);fNe=r(E7,"This class cannot be instantiated directly using "),JK=n(E7,"CODE",{});var E9e=s(JK);mNe=r(E9e,"__init__()"),E9e.forEach(t),gNe=r(E7," (throws an error)."),E7.forEach(t),hNe=i(Ur),Fr=n(Ur,"DIV",{class:!0});var Jr=s(Fr);T(EA.$$.fragment,Jr),pNe=i(Jr),YK=n(Jr,"P",{});var C9e=s(YK);uNe=r(C9e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),C9e.forEach(t),_Ne=i(Jr),ci=n(Jr,"P",{});var Zc=s(ci);bNe=r(Zc,"The configuration class to instantiate is selected based on the "),KK=n(Zc,"CODE",{});var w9e=s(KK);vNe=r(w9e,"model_type"),w9e.forEach(t),FNe=r(Zc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ZK=n(Zc,"CODE",{});var A9e=s(ZK);TNe=r(A9e,"pretrained_model_name_or_path"),A9e.forEach(t),MNe=r(Zc,":"),Zc.forEach(t),ENe=i(Jr),A=n(Jr,"UL",{});var y=s(A);df=n(y,"LI",{});var KC=s(df);eZ=n(KC,"STRONG",{});var y9e=s(eZ);CNe=r(y9e,"albert"),y9e.forEach(t),wNe=r(KC," \u2014 "),Px=n(KC,"A",{href:!0});var L9e=s(Px);ANe=r(L9e,"AlbertConfig"),L9e.forEach(t),yNe=r(KC," (ALBERT model)"),KC.forEach(t),LNe=i(y),cf=n(y,"LI",{});var ZC=s(cf);oZ=n(ZC,"STRONG",{});var x9e=s(oZ);xNe=r(x9e,"bart"),x9e.forEach(t),$Ne=r(ZC," \u2014 "),Ix=n(ZC,"A",{href:!0});var $9e=s(Ix);kNe=r($9e,"BartConfig"),$9e.forEach(t),SNe=r(ZC," (BART model)"),ZC.forEach(t),RNe=i(y),ff=n(y,"LI",{});var e3=s(ff);rZ=n(e3,"STRONG",{});var k9e=s(rZ);BNe=r(k9e,"beit"),k9e.forEach(t),PNe=r(e3," \u2014 "),qx=n(e3,"A",{href:!0});var S9e=s(qx);INe=r(S9e,"BeitConfig"),S9e.forEach(t),qNe=r(e3," (BEiT model)"),e3.forEach(t),NNe=i(y),mf=n(y,"LI",{});var o3=s(mf);tZ=n(o3,"STRONG",{});var R9e=s(tZ);jNe=r(R9e,"bert"),R9e.forEach(t),DNe=r(o3," \u2014 "),Nx=n(o3,"A",{href:!0});var B9e=s(Nx);GNe=r(B9e,"BertConfig"),B9e.forEach(t),ONe=r(o3," (BERT model)"),o3.forEach(t),VNe=i(y),gf=n(y,"LI",{});var r3=s(gf);aZ=n(r3,"STRONG",{});var P9e=s(aZ);XNe=r(P9e,"bert-generation"),P9e.forEach(t),zNe=r(r3," \u2014 "),jx=n(r3,"A",{href:!0});var I9e=s(jx);QNe=r(I9e,"BertGenerationConfig"),I9e.forEach(t),WNe=r(r3," (Bert Generation model)"),r3.forEach(t),HNe=i(y),hf=n(y,"LI",{});var t3=s(hf);nZ=n(t3,"STRONG",{});var q9e=s(nZ);UNe=r(q9e,"big_bird"),q9e.forEach(t),JNe=r(t3," \u2014 "),Dx=n(t3,"A",{href:!0});var N9e=s(Dx);YNe=r(N9e,"BigBirdConfig"),N9e.forEach(t),KNe=r(t3," (BigBird model)"),t3.forEach(t),ZNe=i(y),pf=n(y,"LI",{});var a3=s(pf);sZ=n(a3,"STRONG",{});var j9e=s(sZ);eje=r(j9e,"bigbird_pegasus"),j9e.forEach(t),oje=r(a3," \u2014 "),Gx=n(a3,"A",{href:!0});var D9e=s(Gx);rje=r(D9e,"BigBirdPegasusConfig"),D9e.forEach(t),tje=r(a3," (BigBirdPegasus model)"),a3.forEach(t),aje=i(y),uf=n(y,"LI",{});var n3=s(uf);lZ=n(n3,"STRONG",{});var G9e=s(lZ);nje=r(G9e,"blenderbot"),G9e.forEach(t),sje=r(n3," \u2014 "),Ox=n(n3,"A",{href:!0});var O9e=s(Ox);lje=r(O9e,"BlenderbotConfig"),O9e.forEach(t),ije=r(n3," (Blenderbot model)"),n3.forEach(t),dje=i(y),_f=n(y,"LI",{});var s3=s(_f);iZ=n(s3,"STRONG",{});var V9e=s(iZ);cje=r(V9e,"blenderbot-small"),V9e.forEach(t),fje=r(s3," \u2014 "),Vx=n(s3,"A",{href:!0});var X9e=s(Vx);mje=r(X9e,"BlenderbotSmallConfig"),X9e.forEach(t),gje=r(s3," (BlenderbotSmall model)"),s3.forEach(t),hje=i(y),bf=n(y,"LI",{});var l3=s(bf);dZ=n(l3,"STRONG",{});var z9e=s(dZ);pje=r(z9e,"camembert"),z9e.forEach(t),uje=r(l3," \u2014 "),Xx=n(l3,"A",{href:!0});var Q9e=s(Xx);_je=r(Q9e,"CamembertConfig"),Q9e.forEach(t),bje=r(l3," (CamemBERT model)"),l3.forEach(t),vje=i(y),vf=n(y,"LI",{});var i3=s(vf);cZ=n(i3,"STRONG",{});var W9e=s(cZ);Fje=r(W9e,"canine"),W9e.forEach(t),Tje=r(i3," \u2014 "),zx=n(i3,"A",{href:!0});var H9e=s(zx);Mje=r(H9e,"CanineConfig"),H9e.forEach(t),Eje=r(i3," (Canine model)"),i3.forEach(t),Cje=i(y),Ff=n(y,"LI",{});var d3=s(Ff);fZ=n(d3,"STRONG",{});var U9e=s(fZ);wje=r(U9e,"clip"),U9e.forEach(t),Aje=r(d3," \u2014 "),Qx=n(d3,"A",{href:!0});var J9e=s(Qx);yje=r(J9e,"CLIPConfig"),J9e.forEach(t),Lje=r(d3," (CLIP model)"),d3.forEach(t),xje=i(y),Tf=n(y,"LI",{});var c3=s(Tf);mZ=n(c3,"STRONG",{});var Y9e=s(mZ);$je=r(Y9e,"convbert"),Y9e.forEach(t),kje=r(c3," \u2014 "),Wx=n(c3,"A",{href:!0});var K9e=s(Wx);Sje=r(K9e,"ConvBertConfig"),K9e.forEach(t),Rje=r(c3," (ConvBERT model)"),c3.forEach(t),Bje=i(y),Mf=n(y,"LI",{});var f3=s(Mf);gZ=n(f3,"STRONG",{});var Z9e=s(gZ);Pje=r(Z9e,"convnext"),Z9e.forEach(t),Ije=r(f3," \u2014 "),Hx=n(f3,"A",{href:!0});var eMe=s(Hx);qje=r(eMe,"ConvNextConfig"),eMe.forEach(t),Nje=r(f3," (ConvNext model)"),f3.forEach(t),jje=i(y),Ef=n(y,"LI",{});var m3=s(Ef);hZ=n(m3,"STRONG",{});var oMe=s(hZ);Dje=r(oMe,"ctrl"),oMe.forEach(t),Gje=r(m3," \u2014 "),Ux=n(m3,"A",{href:!0});var rMe=s(Ux);Oje=r(rMe,"CTRLConfig"),rMe.forEach(t),Vje=r(m3," (CTRL model)"),m3.forEach(t),Xje=i(y),Cf=n(y,"LI",{});var g3=s(Cf);pZ=n(g3,"STRONG",{});var tMe=s(pZ);zje=r(tMe,"data2vec-audio"),tMe.forEach(t),Qje=r(g3," \u2014 "),Jx=n(g3,"A",{href:!0});var aMe=s(Jx);Wje=r(aMe,"Data2VecAudioConfig"),aMe.forEach(t),Hje=r(g3," (Data2VecAudio model)"),g3.forEach(t),Uje=i(y),wf=n(y,"LI",{});var h3=s(wf);uZ=n(h3,"STRONG",{});var nMe=s(uZ);Jje=r(nMe,"data2vec-text"),nMe.forEach(t),Yje=r(h3," \u2014 "),Yx=n(h3,"A",{href:!0});var sMe=s(Yx);Kje=r(sMe,"Data2VecTextConfig"),sMe.forEach(t),Zje=r(h3," (Data2VecText model)"),h3.forEach(t),eDe=i(y),Af=n(y,"LI",{});var p3=s(Af);_Z=n(p3,"STRONG",{});var lMe=s(_Z);oDe=r(lMe,"data2vec-vision"),lMe.forEach(t),rDe=r(p3," \u2014 "),Kx=n(p3,"A",{href:!0});var iMe=s(Kx);tDe=r(iMe,"Data2VecVisionConfig"),iMe.forEach(t),aDe=r(p3," (Data2VecVision model)"),p3.forEach(t),nDe=i(y),yf=n(y,"LI",{});var u3=s(yf);bZ=n(u3,"STRONG",{});var dMe=s(bZ);sDe=r(dMe,"deberta"),dMe.forEach(t),lDe=r(u3," \u2014 "),Zx=n(u3,"A",{href:!0});var cMe=s(Zx);iDe=r(cMe,"DebertaConfig"),cMe.forEach(t),dDe=r(u3," (DeBERTa model)"),u3.forEach(t),cDe=i(y),Lf=n(y,"LI",{});var _3=s(Lf);vZ=n(_3,"STRONG",{});var fMe=s(vZ);fDe=r(fMe,"deberta-v2"),fMe.forEach(t),mDe=r(_3," \u2014 "),e$=n(_3,"A",{href:!0});var mMe=s(e$);gDe=r(mMe,"DebertaV2Config"),mMe.forEach(t),hDe=r(_3," (DeBERTa-v2 model)"),_3.forEach(t),pDe=i(y),xf=n(y,"LI",{});var b3=s(xf);FZ=n(b3,"STRONG",{});var gMe=s(FZ);uDe=r(gMe,"decision_transformer"),gMe.forEach(t),_De=r(b3," \u2014 "),o$=n(b3,"A",{href:!0});var hMe=s(o$);bDe=r(hMe,"DecisionTransformerConfig"),hMe.forEach(t),vDe=r(b3," (Decision Transformer model)"),b3.forEach(t),FDe=i(y),$f=n(y,"LI",{});var v3=s($f);TZ=n(v3,"STRONG",{});var pMe=s(TZ);TDe=r(pMe,"deit"),pMe.forEach(t),MDe=r(v3," \u2014 "),r$=n(v3,"A",{href:!0});var uMe=s(r$);EDe=r(uMe,"DeiTConfig"),uMe.forEach(t),CDe=r(v3," (DeiT model)"),v3.forEach(t),wDe=i(y),kf=n(y,"LI",{});var _Me=s(kf);MZ=n(_Me,"STRONG",{});var uBr=s(MZ);ADe=r(uBr,"detr"),uBr.forEach(t),yDe=r(_Me," \u2014 "),t$=n(_Me,"A",{href:!0});var _Br=s(t$);LDe=r(_Br,"DetrConfig"),_Br.forEach(t),xDe=r(_Me," (DETR model)"),_Me.forEach(t),$De=i(y),Sf=n(y,"LI",{});var bMe=s(Sf);EZ=n(bMe,"STRONG",{});var bBr=s(EZ);kDe=r(bBr,"distilbert"),bBr.forEach(t),SDe=r(bMe," \u2014 "),a$=n(bMe,"A",{href:!0});var vBr=s(a$);RDe=r(vBr,"DistilBertConfig"),vBr.forEach(t),BDe=r(bMe," (DistilBERT model)"),bMe.forEach(t),PDe=i(y),Rf=n(y,"LI",{});var vMe=s(Rf);CZ=n(vMe,"STRONG",{});var FBr=s(CZ);IDe=r(FBr,"dpr"),FBr.forEach(t),qDe=r(vMe," \u2014 "),n$=n(vMe,"A",{href:!0});var TBr=s(n$);NDe=r(TBr,"DPRConfig"),TBr.forEach(t),jDe=r(vMe," (DPR model)"),vMe.forEach(t),DDe=i(y),Bf=n(y,"LI",{});var FMe=s(Bf);wZ=n(FMe,"STRONG",{});var MBr=s(wZ);GDe=r(MBr,"dpt"),MBr.forEach(t),ODe=r(FMe," \u2014 "),s$=n(FMe,"A",{href:!0});var EBr=s(s$);VDe=r(EBr,"DPTConfig"),EBr.forEach(t),XDe=r(FMe," (DPT model)"),FMe.forEach(t),zDe=i(y),Pf=n(y,"LI",{});var TMe=s(Pf);AZ=n(TMe,"STRONG",{});var CBr=s(AZ);QDe=r(CBr,"electra"),CBr.forEach(t),WDe=r(TMe," \u2014 "),l$=n(TMe,"A",{href:!0});var wBr=s(l$);HDe=r(wBr,"ElectraConfig"),wBr.forEach(t),UDe=r(TMe," (ELECTRA model)"),TMe.forEach(t),JDe=i(y),If=n(y,"LI",{});var MMe=s(If);yZ=n(MMe,"STRONG",{});var ABr=s(yZ);YDe=r(ABr,"encoder-decoder"),ABr.forEach(t),KDe=r(MMe," \u2014 "),i$=n(MMe,"A",{href:!0});var yBr=s(i$);ZDe=r(yBr,"EncoderDecoderConfig"),yBr.forEach(t),eGe=r(MMe," (Encoder decoder model)"),MMe.forEach(t),oGe=i(y),qf=n(y,"LI",{});var EMe=s(qf);LZ=n(EMe,"STRONG",{});var LBr=s(LZ);rGe=r(LBr,"flaubert"),LBr.forEach(t),tGe=r(EMe," \u2014 "),d$=n(EMe,"A",{href:!0});var xBr=s(d$);aGe=r(xBr,"FlaubertConfig"),xBr.forEach(t),nGe=r(EMe," (FlauBERT model)"),EMe.forEach(t),sGe=i(y),Nf=n(y,"LI",{});var CMe=s(Nf);xZ=n(CMe,"STRONG",{});var $Br=s(xZ);lGe=r($Br,"fnet"),$Br.forEach(t),iGe=r(CMe," \u2014 "),c$=n(CMe,"A",{href:!0});var kBr=s(c$);dGe=r(kBr,"FNetConfig"),kBr.forEach(t),cGe=r(CMe," (FNet model)"),CMe.forEach(t),fGe=i(y),jf=n(y,"LI",{});var wMe=s(jf);$Z=n(wMe,"STRONG",{});var SBr=s($Z);mGe=r(SBr,"fsmt"),SBr.forEach(t),gGe=r(wMe," \u2014 "),f$=n(wMe,"A",{href:!0});var RBr=s(f$);hGe=r(RBr,"FSMTConfig"),RBr.forEach(t),pGe=r(wMe," (FairSeq Machine-Translation model)"),wMe.forEach(t),uGe=i(y),Df=n(y,"LI",{});var AMe=s(Df);kZ=n(AMe,"STRONG",{});var BBr=s(kZ);_Ge=r(BBr,"funnel"),BBr.forEach(t),bGe=r(AMe," \u2014 "),m$=n(AMe,"A",{href:!0});var PBr=s(m$);vGe=r(PBr,"FunnelConfig"),PBr.forEach(t),FGe=r(AMe," (Funnel Transformer model)"),AMe.forEach(t),TGe=i(y),Gf=n(y,"LI",{});var yMe=s(Gf);SZ=n(yMe,"STRONG",{});var IBr=s(SZ);MGe=r(IBr,"glpn"),IBr.forEach(t),EGe=r(yMe," \u2014 "),g$=n(yMe,"A",{href:!0});var qBr=s(g$);CGe=r(qBr,"GLPNConfig"),qBr.forEach(t),wGe=r(yMe," (GLPN model)"),yMe.forEach(t),AGe=i(y),Of=n(y,"LI",{});var LMe=s(Of);RZ=n(LMe,"STRONG",{});var NBr=s(RZ);yGe=r(NBr,"gpt2"),NBr.forEach(t),LGe=r(LMe," \u2014 "),h$=n(LMe,"A",{href:!0});var jBr=s(h$);xGe=r(jBr,"GPT2Config"),jBr.forEach(t),$Ge=r(LMe," (OpenAI GPT-2 model)"),LMe.forEach(t),kGe=i(y),Vf=n(y,"LI",{});var xMe=s(Vf);BZ=n(xMe,"STRONG",{});var DBr=s(BZ);SGe=r(DBr,"gpt_neo"),DBr.forEach(t),RGe=r(xMe," \u2014 "),p$=n(xMe,"A",{href:!0});var GBr=s(p$);BGe=r(GBr,"GPTNeoConfig"),GBr.forEach(t),PGe=r(xMe," (GPT Neo model)"),xMe.forEach(t),IGe=i(y),Xf=n(y,"LI",{});var $Me=s(Xf);PZ=n($Me,"STRONG",{});var OBr=s(PZ);qGe=r(OBr,"gpt_neox"),OBr.forEach(t),NGe=r($Me," \u2014 "),u$=n($Me,"A",{href:!0});var VBr=s(u$);jGe=r(VBr,"GPTNeoXConfig"),VBr.forEach(t),DGe=r($Me," (GPTNeoX model)"),$Me.forEach(t),GGe=i(y),zf=n(y,"LI",{});var kMe=s(zf);IZ=n(kMe,"STRONG",{});var XBr=s(IZ);OGe=r(XBr,"gptj"),XBr.forEach(t),VGe=r(kMe," \u2014 "),_$=n(kMe,"A",{href:!0});var zBr=s(_$);XGe=r(zBr,"GPTJConfig"),zBr.forEach(t),zGe=r(kMe," (GPT-J model)"),kMe.forEach(t),QGe=i(y),Qf=n(y,"LI",{});var SMe=s(Qf);qZ=n(SMe,"STRONG",{});var QBr=s(qZ);WGe=r(QBr,"hubert"),QBr.forEach(t),HGe=r(SMe," \u2014 "),b$=n(SMe,"A",{href:!0});var WBr=s(b$);UGe=r(WBr,"HubertConfig"),WBr.forEach(t),JGe=r(SMe," (Hubert model)"),SMe.forEach(t),YGe=i(y),Wf=n(y,"LI",{});var RMe=s(Wf);NZ=n(RMe,"STRONG",{});var HBr=s(NZ);KGe=r(HBr,"ibert"),HBr.forEach(t),ZGe=r(RMe," \u2014 "),v$=n(RMe,"A",{href:!0});var UBr=s(v$);eOe=r(UBr,"IBertConfig"),UBr.forEach(t),oOe=r(RMe," (I-BERT model)"),RMe.forEach(t),rOe=i(y),Hf=n(y,"LI",{});var BMe=s(Hf);jZ=n(BMe,"STRONG",{});var JBr=s(jZ);tOe=r(JBr,"imagegpt"),JBr.forEach(t),aOe=r(BMe," \u2014 "),F$=n(BMe,"A",{href:!0});var YBr=s(F$);nOe=r(YBr,"ImageGPTConfig"),YBr.forEach(t),sOe=r(BMe," (ImageGPT model)"),BMe.forEach(t),lOe=i(y),Uf=n(y,"LI",{});var PMe=s(Uf);DZ=n(PMe,"STRONG",{});var KBr=s(DZ);iOe=r(KBr,"layoutlm"),KBr.forEach(t),dOe=r(PMe," \u2014 "),T$=n(PMe,"A",{href:!0});var ZBr=s(T$);cOe=r(ZBr,"LayoutLMConfig"),ZBr.forEach(t),fOe=r(PMe," (LayoutLM model)"),PMe.forEach(t),mOe=i(y),Jf=n(y,"LI",{});var IMe=s(Jf);GZ=n(IMe,"STRONG",{});var ePr=s(GZ);gOe=r(ePr,"layoutlmv2"),ePr.forEach(t),hOe=r(IMe," \u2014 "),M$=n(IMe,"A",{href:!0});var oPr=s(M$);pOe=r(oPr,"LayoutLMv2Config"),oPr.forEach(t),uOe=r(IMe," (LayoutLMv2 model)"),IMe.forEach(t),_Oe=i(y),Yf=n(y,"LI",{});var qMe=s(Yf);OZ=n(qMe,"STRONG",{});var rPr=s(OZ);bOe=r(rPr,"led"),rPr.forEach(t),vOe=r(qMe," \u2014 "),E$=n(qMe,"A",{href:!0});var tPr=s(E$);FOe=r(tPr,"LEDConfig"),tPr.forEach(t),TOe=r(qMe," (LED model)"),qMe.forEach(t),MOe=i(y),Kf=n(y,"LI",{});var NMe=s(Kf);VZ=n(NMe,"STRONG",{});var aPr=s(VZ);EOe=r(aPr,"longformer"),aPr.forEach(t),COe=r(NMe," \u2014 "),C$=n(NMe,"A",{href:!0});var nPr=s(C$);wOe=r(nPr,"LongformerConfig"),nPr.forEach(t),AOe=r(NMe," (Longformer model)"),NMe.forEach(t),yOe=i(y),Zf=n(y,"LI",{});var jMe=s(Zf);XZ=n(jMe,"STRONG",{});var sPr=s(XZ);LOe=r(sPr,"luke"),sPr.forEach(t),xOe=r(jMe," \u2014 "),w$=n(jMe,"A",{href:!0});var lPr=s(w$);$Oe=r(lPr,"LukeConfig"),lPr.forEach(t),kOe=r(jMe," (LUKE model)"),jMe.forEach(t),SOe=i(y),em=n(y,"LI",{});var DMe=s(em);zZ=n(DMe,"STRONG",{});var iPr=s(zZ);ROe=r(iPr,"lxmert"),iPr.forEach(t),BOe=r(DMe," \u2014 "),A$=n(DMe,"A",{href:!0});var dPr=s(A$);POe=r(dPr,"LxmertConfig"),dPr.forEach(t),IOe=r(DMe," (LXMERT model)"),DMe.forEach(t),qOe=i(y),om=n(y,"LI",{});var GMe=s(om);QZ=n(GMe,"STRONG",{});var cPr=s(QZ);NOe=r(cPr,"m2m_100"),cPr.forEach(t),jOe=r(GMe," \u2014 "),y$=n(GMe,"A",{href:!0});var fPr=s(y$);DOe=r(fPr,"M2M100Config"),fPr.forEach(t),GOe=r(GMe," (M2M100 model)"),GMe.forEach(t),OOe=i(y),rm=n(y,"LI",{});var OMe=s(rm);WZ=n(OMe,"STRONG",{});var mPr=s(WZ);VOe=r(mPr,"marian"),mPr.forEach(t),XOe=r(OMe," \u2014 "),L$=n(OMe,"A",{href:!0});var gPr=s(L$);zOe=r(gPr,"MarianConfig"),gPr.forEach(t),QOe=r(OMe," (Marian model)"),OMe.forEach(t),WOe=i(y),tm=n(y,"LI",{});var VMe=s(tm);HZ=n(VMe,"STRONG",{});var hPr=s(HZ);HOe=r(hPr,"maskformer"),hPr.forEach(t),UOe=r(VMe," \u2014 "),x$=n(VMe,"A",{href:!0});var pPr=s(x$);JOe=r(pPr,"MaskFormerConfig"),pPr.forEach(t),YOe=r(VMe," (MaskFormer model)"),VMe.forEach(t),KOe=i(y),am=n(y,"LI",{});var XMe=s(am);UZ=n(XMe,"STRONG",{});var uPr=s(UZ);ZOe=r(uPr,"mbart"),uPr.forEach(t),eVe=r(XMe," \u2014 "),$$=n(XMe,"A",{href:!0});var _Pr=s($$);oVe=r(_Pr,"MBartConfig"),_Pr.forEach(t),rVe=r(XMe," (mBART model)"),XMe.forEach(t),tVe=i(y),nm=n(y,"LI",{});var zMe=s(nm);JZ=n(zMe,"STRONG",{});var bPr=s(JZ);aVe=r(bPr,"megatron-bert"),bPr.forEach(t),nVe=r(zMe," \u2014 "),k$=n(zMe,"A",{href:!0});var vPr=s(k$);sVe=r(vPr,"MegatronBertConfig"),vPr.forEach(t),lVe=r(zMe," (MegatronBert model)"),zMe.forEach(t),iVe=i(y),sm=n(y,"LI",{});var QMe=s(sm);YZ=n(QMe,"STRONG",{});var FPr=s(YZ);dVe=r(FPr,"mobilebert"),FPr.forEach(t),cVe=r(QMe," \u2014 "),S$=n(QMe,"A",{href:!0});var TPr=s(S$);fVe=r(TPr,"MobileBertConfig"),TPr.forEach(t),mVe=r(QMe," (MobileBERT model)"),QMe.forEach(t),gVe=i(y),lm=n(y,"LI",{});var WMe=s(lm);KZ=n(WMe,"STRONG",{});var MPr=s(KZ);hVe=r(MPr,"mpnet"),MPr.forEach(t),pVe=r(WMe," \u2014 "),R$=n(WMe,"A",{href:!0});var EPr=s(R$);uVe=r(EPr,"MPNetConfig"),EPr.forEach(t),_Ve=r(WMe," (MPNet model)"),WMe.forEach(t),bVe=i(y),im=n(y,"LI",{});var HMe=s(im);ZZ=n(HMe,"STRONG",{});var CPr=s(ZZ);vVe=r(CPr,"mt5"),CPr.forEach(t),FVe=r(HMe," \u2014 "),B$=n(HMe,"A",{href:!0});var wPr=s(B$);TVe=r(wPr,"MT5Config"),wPr.forEach(t),MVe=r(HMe," (mT5 model)"),HMe.forEach(t),EVe=i(y),dm=n(y,"LI",{});var UMe=s(dm);eee=n(UMe,"STRONG",{});var APr=s(eee);CVe=r(APr,"nystromformer"),APr.forEach(t),wVe=r(UMe," \u2014 "),P$=n(UMe,"A",{href:!0});var yPr=s(P$);AVe=r(yPr,"NystromformerConfig"),yPr.forEach(t),yVe=r(UMe," (Nystromformer model)"),UMe.forEach(t),LVe=i(y),cm=n(y,"LI",{});var JMe=s(cm);oee=n(JMe,"STRONG",{});var LPr=s(oee);xVe=r(LPr,"openai-gpt"),LPr.forEach(t),$Ve=r(JMe," \u2014 "),I$=n(JMe,"A",{href:!0});var xPr=s(I$);kVe=r(xPr,"OpenAIGPTConfig"),xPr.forEach(t),SVe=r(JMe," (OpenAI GPT model)"),JMe.forEach(t),RVe=i(y),fm=n(y,"LI",{});var YMe=s(fm);ree=n(YMe,"STRONG",{});var $Pr=s(ree);BVe=r($Pr,"pegasus"),$Pr.forEach(t),PVe=r(YMe," \u2014 "),q$=n(YMe,"A",{href:!0});var kPr=s(q$);IVe=r(kPr,"PegasusConfig"),kPr.forEach(t),qVe=r(YMe," (Pegasus model)"),YMe.forEach(t),NVe=i(y),mm=n(y,"LI",{});var KMe=s(mm);tee=n(KMe,"STRONG",{});var SPr=s(tee);jVe=r(SPr,"perceiver"),SPr.forEach(t),DVe=r(KMe," \u2014 "),N$=n(KMe,"A",{href:!0});var RPr=s(N$);GVe=r(RPr,"PerceiverConfig"),RPr.forEach(t),OVe=r(KMe," (Perceiver model)"),KMe.forEach(t),VVe=i(y),gm=n(y,"LI",{});var ZMe=s(gm);aee=n(ZMe,"STRONG",{});var BPr=s(aee);XVe=r(BPr,"plbart"),BPr.forEach(t),zVe=r(ZMe," \u2014 "),j$=n(ZMe,"A",{href:!0});var PPr=s(j$);QVe=r(PPr,"PLBartConfig"),PPr.forEach(t),WVe=r(ZMe," (PLBart model)"),ZMe.forEach(t),HVe=i(y),hm=n(y,"LI",{});var e4e=s(hm);nee=n(e4e,"STRONG",{});var IPr=s(nee);UVe=r(IPr,"poolformer"),IPr.forEach(t),JVe=r(e4e," \u2014 "),D$=n(e4e,"A",{href:!0});var qPr=s(D$);YVe=r(qPr,"PoolFormerConfig"),qPr.forEach(t),KVe=r(e4e," (PoolFormer model)"),e4e.forEach(t),ZVe=i(y),pm=n(y,"LI",{});var o4e=s(pm);see=n(o4e,"STRONG",{});var NPr=s(see);eXe=r(NPr,"prophetnet"),NPr.forEach(t),oXe=r(o4e," \u2014 "),G$=n(o4e,"A",{href:!0});var jPr=s(G$);rXe=r(jPr,"ProphetNetConfig"),jPr.forEach(t),tXe=r(o4e," (ProphetNet model)"),o4e.forEach(t),aXe=i(y),um=n(y,"LI",{});var r4e=s(um);lee=n(r4e,"STRONG",{});var DPr=s(lee);nXe=r(DPr,"qdqbert"),DPr.forEach(t),sXe=r(r4e," \u2014 "),O$=n(r4e,"A",{href:!0});var GPr=s(O$);lXe=r(GPr,"QDQBertConfig"),GPr.forEach(t),iXe=r(r4e," (QDQBert model)"),r4e.forEach(t),dXe=i(y),_m=n(y,"LI",{});var t4e=s(_m);iee=n(t4e,"STRONG",{});var OPr=s(iee);cXe=r(OPr,"rag"),OPr.forEach(t),fXe=r(t4e," \u2014 "),V$=n(t4e,"A",{href:!0});var VPr=s(V$);mXe=r(VPr,"RagConfig"),VPr.forEach(t),gXe=r(t4e," (RAG model)"),t4e.forEach(t),hXe=i(y),bm=n(y,"LI",{});var a4e=s(bm);dee=n(a4e,"STRONG",{});var XPr=s(dee);pXe=r(XPr,"realm"),XPr.forEach(t),uXe=r(a4e," \u2014 "),X$=n(a4e,"A",{href:!0});var zPr=s(X$);_Xe=r(zPr,"RealmConfig"),zPr.forEach(t),bXe=r(a4e," (Realm model)"),a4e.forEach(t),vXe=i(y),vm=n(y,"LI",{});var n4e=s(vm);cee=n(n4e,"STRONG",{});var QPr=s(cee);FXe=r(QPr,"reformer"),QPr.forEach(t),TXe=r(n4e," \u2014 "),z$=n(n4e,"A",{href:!0});var WPr=s(z$);MXe=r(WPr,"ReformerConfig"),WPr.forEach(t),EXe=r(n4e," (Reformer model)"),n4e.forEach(t),CXe=i(y),Fm=n(y,"LI",{});var s4e=s(Fm);fee=n(s4e,"STRONG",{});var HPr=s(fee);wXe=r(HPr,"regnet"),HPr.forEach(t),AXe=r(s4e," \u2014 "),Q$=n(s4e,"A",{href:!0});var UPr=s(Q$);yXe=r(UPr,"RegNetConfig"),UPr.forEach(t),LXe=r(s4e," (RegNet model)"),s4e.forEach(t),xXe=i(y),Tm=n(y,"LI",{});var l4e=s(Tm);mee=n(l4e,"STRONG",{});var JPr=s(mee);$Xe=r(JPr,"rembert"),JPr.forEach(t),kXe=r(l4e," \u2014 "),W$=n(l4e,"A",{href:!0});var YPr=s(W$);SXe=r(YPr,"RemBertConfig"),YPr.forEach(t),RXe=r(l4e," (RemBERT model)"),l4e.forEach(t),BXe=i(y),Mm=n(y,"LI",{});var i4e=s(Mm);gee=n(i4e,"STRONG",{});var KPr=s(gee);PXe=r(KPr,"resnet"),KPr.forEach(t),IXe=r(i4e," \u2014 "),H$=n(i4e,"A",{href:!0});var ZPr=s(H$);qXe=r(ZPr,"ResNetConfig"),ZPr.forEach(t),NXe=r(i4e," (ResNet model)"),i4e.forEach(t),jXe=i(y),Em=n(y,"LI",{});var d4e=s(Em);hee=n(d4e,"STRONG",{});var eIr=s(hee);DXe=r(eIr,"retribert"),eIr.forEach(t),GXe=r(d4e," \u2014 "),U$=n(d4e,"A",{href:!0});var oIr=s(U$);OXe=r(oIr,"RetriBertConfig"),oIr.forEach(t),VXe=r(d4e," (RetriBERT model)"),d4e.forEach(t),XXe=i(y),Cm=n(y,"LI",{});var c4e=s(Cm);pee=n(c4e,"STRONG",{});var rIr=s(pee);zXe=r(rIr,"roberta"),rIr.forEach(t),QXe=r(c4e," \u2014 "),J$=n(c4e,"A",{href:!0});var tIr=s(J$);WXe=r(tIr,"RobertaConfig"),tIr.forEach(t),HXe=r(c4e," (RoBERTa model)"),c4e.forEach(t),UXe=i(y),wm=n(y,"LI",{});var f4e=s(wm);uee=n(f4e,"STRONG",{});var aIr=s(uee);JXe=r(aIr,"roformer"),aIr.forEach(t),YXe=r(f4e," \u2014 "),Y$=n(f4e,"A",{href:!0});var nIr=s(Y$);KXe=r(nIr,"RoFormerConfig"),nIr.forEach(t),ZXe=r(f4e," (RoFormer model)"),f4e.forEach(t),eze=i(y),Am=n(y,"LI",{});var m4e=s(Am);_ee=n(m4e,"STRONG",{});var sIr=s(_ee);oze=r(sIr,"segformer"),sIr.forEach(t),rze=r(m4e," \u2014 "),K$=n(m4e,"A",{href:!0});var lIr=s(K$);tze=r(lIr,"SegformerConfig"),lIr.forEach(t),aze=r(m4e," (SegFormer model)"),m4e.forEach(t),nze=i(y),ym=n(y,"LI",{});var g4e=s(ym);bee=n(g4e,"STRONG",{});var iIr=s(bee);sze=r(iIr,"sew"),iIr.forEach(t),lze=r(g4e," \u2014 "),Z$=n(g4e,"A",{href:!0});var dIr=s(Z$);ize=r(dIr,"SEWConfig"),dIr.forEach(t),dze=r(g4e," (SEW model)"),g4e.forEach(t),cze=i(y),Lm=n(y,"LI",{});var h4e=s(Lm);vee=n(h4e,"STRONG",{});var cIr=s(vee);fze=r(cIr,"sew-d"),cIr.forEach(t),mze=r(h4e," \u2014 "),ek=n(h4e,"A",{href:!0});var fIr=s(ek);gze=r(fIr,"SEWDConfig"),fIr.forEach(t),hze=r(h4e," (SEW-D model)"),h4e.forEach(t),pze=i(y),xm=n(y,"LI",{});var p4e=s(xm);Fee=n(p4e,"STRONG",{});var mIr=s(Fee);uze=r(mIr,"speech-encoder-decoder"),mIr.forEach(t),_ze=r(p4e," \u2014 "),ok=n(p4e,"A",{href:!0});var gIr=s(ok);bze=r(gIr,"SpeechEncoderDecoderConfig"),gIr.forEach(t),vze=r(p4e," (Speech Encoder decoder model)"),p4e.forEach(t),Fze=i(y),$m=n(y,"LI",{});var u4e=s($m);Tee=n(u4e,"STRONG",{});var hIr=s(Tee);Tze=r(hIr,"speech_to_text"),hIr.forEach(t),Mze=r(u4e," \u2014 "),rk=n(u4e,"A",{href:!0});var pIr=s(rk);Eze=r(pIr,"Speech2TextConfig"),pIr.forEach(t),Cze=r(u4e," (Speech2Text model)"),u4e.forEach(t),wze=i(y),km=n(y,"LI",{});var _4e=s(km);Mee=n(_4e,"STRONG",{});var uIr=s(Mee);Aze=r(uIr,"speech_to_text_2"),uIr.forEach(t),yze=r(_4e," \u2014 "),tk=n(_4e,"A",{href:!0});var _Ir=s(tk);Lze=r(_Ir,"Speech2Text2Config"),_Ir.forEach(t),xze=r(_4e," (Speech2Text2 model)"),_4e.forEach(t),$ze=i(y),Sm=n(y,"LI",{});var b4e=s(Sm);Eee=n(b4e,"STRONG",{});var bIr=s(Eee);kze=r(bIr,"splinter"),bIr.forEach(t),Sze=r(b4e," \u2014 "),ak=n(b4e,"A",{href:!0});var vIr=s(ak);Rze=r(vIr,"SplinterConfig"),vIr.forEach(t),Bze=r(b4e," (Splinter model)"),b4e.forEach(t),Pze=i(y),Rm=n(y,"LI",{});var v4e=s(Rm);Cee=n(v4e,"STRONG",{});var FIr=s(Cee);Ize=r(FIr,"squeezebert"),FIr.forEach(t),qze=r(v4e," \u2014 "),nk=n(v4e,"A",{href:!0});var TIr=s(nk);Nze=r(TIr,"SqueezeBertConfig"),TIr.forEach(t),jze=r(v4e," (SqueezeBERT model)"),v4e.forEach(t),Dze=i(y),Bm=n(y,"LI",{});var F4e=s(Bm);wee=n(F4e,"STRONG",{});var MIr=s(wee);Gze=r(MIr,"swin"),MIr.forEach(t),Oze=r(F4e," \u2014 "),sk=n(F4e,"A",{href:!0});var EIr=s(sk);Vze=r(EIr,"SwinConfig"),EIr.forEach(t),Xze=r(F4e," (Swin model)"),F4e.forEach(t),zze=i(y),Pm=n(y,"LI",{});var T4e=s(Pm);Aee=n(T4e,"STRONG",{});var CIr=s(Aee);Qze=r(CIr,"t5"),CIr.forEach(t),Wze=r(T4e," \u2014 "),lk=n(T4e,"A",{href:!0});var wIr=s(lk);Hze=r(wIr,"T5Config"),wIr.forEach(t),Uze=r(T4e," (T5 model)"),T4e.forEach(t),Jze=i(y),Im=n(y,"LI",{});var M4e=s(Im);yee=n(M4e,"STRONG",{});var AIr=s(yee);Yze=r(AIr,"tapas"),AIr.forEach(t),Kze=r(M4e," \u2014 "),ik=n(M4e,"A",{href:!0});var yIr=s(ik);Zze=r(yIr,"TapasConfig"),yIr.forEach(t),eQe=r(M4e," (TAPAS model)"),M4e.forEach(t),oQe=i(y),qm=n(y,"LI",{});var E4e=s(qm);Lee=n(E4e,"STRONG",{});var LIr=s(Lee);rQe=r(LIr,"tapex"),LIr.forEach(t),tQe=r(E4e," \u2014 "),dk=n(E4e,"A",{href:!0});var xIr=s(dk);aQe=r(xIr,"BartConfig"),xIr.forEach(t),nQe=r(E4e," (TAPEX model)"),E4e.forEach(t),sQe=i(y),Nm=n(y,"LI",{});var C4e=s(Nm);xee=n(C4e,"STRONG",{});var $Ir=s(xee);lQe=r($Ir,"transfo-xl"),$Ir.forEach(t),iQe=r(C4e," \u2014 "),ck=n(C4e,"A",{href:!0});var kIr=s(ck);dQe=r(kIr,"TransfoXLConfig"),kIr.forEach(t),cQe=r(C4e," (Transformer-XL model)"),C4e.forEach(t),fQe=i(y),jm=n(y,"LI",{});var w4e=s(jm);$ee=n(w4e,"STRONG",{});var SIr=s($ee);mQe=r(SIr,"trocr"),SIr.forEach(t),gQe=r(w4e," \u2014 "),fk=n(w4e,"A",{href:!0});var RIr=s(fk);hQe=r(RIr,"TrOCRConfig"),RIr.forEach(t),pQe=r(w4e," (TrOCR model)"),w4e.forEach(t),uQe=i(y),Dm=n(y,"LI",{});var A4e=s(Dm);kee=n(A4e,"STRONG",{});var BIr=s(kee);_Qe=r(BIr,"unispeech"),BIr.forEach(t),bQe=r(A4e," \u2014 "),mk=n(A4e,"A",{href:!0});var PIr=s(mk);vQe=r(PIr,"UniSpeechConfig"),PIr.forEach(t),FQe=r(A4e," (UniSpeech model)"),A4e.forEach(t),TQe=i(y),Gm=n(y,"LI",{});var y4e=s(Gm);See=n(y4e,"STRONG",{});var IIr=s(See);MQe=r(IIr,"unispeech-sat"),IIr.forEach(t),EQe=r(y4e," \u2014 "),gk=n(y4e,"A",{href:!0});var qIr=s(gk);CQe=r(qIr,"UniSpeechSatConfig"),qIr.forEach(t),wQe=r(y4e," (UniSpeechSat model)"),y4e.forEach(t),AQe=i(y),Om=n(y,"LI",{});var L4e=s(Om);Ree=n(L4e,"STRONG",{});var NIr=s(Ree);yQe=r(NIr,"van"),NIr.forEach(t),LQe=r(L4e," \u2014 "),hk=n(L4e,"A",{href:!0});var jIr=s(hk);xQe=r(jIr,"VanConfig"),jIr.forEach(t),$Qe=r(L4e," (VAN model)"),L4e.forEach(t),kQe=i(y),Vm=n(y,"LI",{});var x4e=s(Vm);Bee=n(x4e,"STRONG",{});var DIr=s(Bee);SQe=r(DIr,"vilt"),DIr.forEach(t),RQe=r(x4e," \u2014 "),pk=n(x4e,"A",{href:!0});var GIr=s(pk);BQe=r(GIr,"ViltConfig"),GIr.forEach(t),PQe=r(x4e," (ViLT model)"),x4e.forEach(t),IQe=i(y),Xm=n(y,"LI",{});var $4e=s(Xm);Pee=n($4e,"STRONG",{});var OIr=s(Pee);qQe=r(OIr,"vision-encoder-decoder"),OIr.forEach(t),NQe=r($4e," \u2014 "),uk=n($4e,"A",{href:!0});var VIr=s(uk);jQe=r(VIr,"VisionEncoderDecoderConfig"),VIr.forEach(t),DQe=r($4e," (Vision Encoder decoder model)"),$4e.forEach(t),GQe=i(y),zm=n(y,"LI",{});var k4e=s(zm);Iee=n(k4e,"STRONG",{});var XIr=s(Iee);OQe=r(XIr,"vision-text-dual-encoder"),XIr.forEach(t),VQe=r(k4e," \u2014 "),_k=n(k4e,"A",{href:!0});var zIr=s(_k);XQe=r(zIr,"VisionTextDualEncoderConfig"),zIr.forEach(t),zQe=r(k4e," (VisionTextDualEncoder model)"),k4e.forEach(t),QQe=i(y),Qm=n(y,"LI",{});var S4e=s(Qm);qee=n(S4e,"STRONG",{});var QIr=s(qee);WQe=r(QIr,"visual_bert"),QIr.forEach(t),HQe=r(S4e," \u2014 "),bk=n(S4e,"A",{href:!0});var WIr=s(bk);UQe=r(WIr,"VisualBertConfig"),WIr.forEach(t),JQe=r(S4e," (VisualBert model)"),S4e.forEach(t),YQe=i(y),Wm=n(y,"LI",{});var R4e=s(Wm);Nee=n(R4e,"STRONG",{});var HIr=s(Nee);KQe=r(HIr,"vit"),HIr.forEach(t),ZQe=r(R4e," \u2014 "),vk=n(R4e,"A",{href:!0});var UIr=s(vk);eWe=r(UIr,"ViTConfig"),UIr.forEach(t),oWe=r(R4e," (ViT model)"),R4e.forEach(t),rWe=i(y),Hm=n(y,"LI",{});var B4e=s(Hm);jee=n(B4e,"STRONG",{});var JIr=s(jee);tWe=r(JIr,"vit_mae"),JIr.forEach(t),aWe=r(B4e," \u2014 "),Fk=n(B4e,"A",{href:!0});var YIr=s(Fk);nWe=r(YIr,"ViTMAEConfig"),YIr.forEach(t),sWe=r(B4e," (ViTMAE model)"),B4e.forEach(t),lWe=i(y),Um=n(y,"LI",{});var P4e=s(Um);Dee=n(P4e,"STRONG",{});var KIr=s(Dee);iWe=r(KIr,"wav2vec2"),KIr.forEach(t),dWe=r(P4e," \u2014 "),Tk=n(P4e,"A",{href:!0});var ZIr=s(Tk);cWe=r(ZIr,"Wav2Vec2Config"),ZIr.forEach(t),fWe=r(P4e," (Wav2Vec2 model)"),P4e.forEach(t),mWe=i(y),Jm=n(y,"LI",{});var I4e=s(Jm);Gee=n(I4e,"STRONG",{});var eqr=s(Gee);gWe=r(eqr,"wavlm"),eqr.forEach(t),hWe=r(I4e," \u2014 "),Mk=n(I4e,"A",{href:!0});var oqr=s(Mk);pWe=r(oqr,"WavLMConfig"),oqr.forEach(t),uWe=r(I4e," (WavLM model)"),I4e.forEach(t),_We=i(y),Ym=n(y,"LI",{});var q4e=s(Ym);Oee=n(q4e,"STRONG",{});var rqr=s(Oee);bWe=r(rqr,"xglm"),rqr.forEach(t),vWe=r(q4e," \u2014 "),Ek=n(q4e,"A",{href:!0});var tqr=s(Ek);FWe=r(tqr,"XGLMConfig"),tqr.forEach(t),TWe=r(q4e," (XGLM model)"),q4e.forEach(t),MWe=i(y),Km=n(y,"LI",{});var N4e=s(Km);Vee=n(N4e,"STRONG",{});var aqr=s(Vee);EWe=r(aqr,"xlm"),aqr.forEach(t),CWe=r(N4e," \u2014 "),Ck=n(N4e,"A",{href:!0});var nqr=s(Ck);wWe=r(nqr,"XLMConfig"),nqr.forEach(t),AWe=r(N4e," (XLM model)"),N4e.forEach(t),yWe=i(y),Zm=n(y,"LI",{});var j4e=s(Zm);Xee=n(j4e,"STRONG",{});var sqr=s(Xee);LWe=r(sqr,"xlm-prophetnet"),sqr.forEach(t),xWe=r(j4e," \u2014 "),wk=n(j4e,"A",{href:!0});var lqr=s(wk);$We=r(lqr,"XLMProphetNetConfig"),lqr.forEach(t),kWe=r(j4e," (XLMProphetNet model)"),j4e.forEach(t),SWe=i(y),eg=n(y,"LI",{});var D4e=s(eg);zee=n(D4e,"STRONG",{});var iqr=s(zee);RWe=r(iqr,"xlm-roberta"),iqr.forEach(t),BWe=r(D4e," \u2014 "),Ak=n(D4e,"A",{href:!0});var dqr=s(Ak);PWe=r(dqr,"XLMRobertaConfig"),dqr.forEach(t),IWe=r(D4e," (XLM-RoBERTa model)"),D4e.forEach(t),qWe=i(y),og=n(y,"LI",{});var G4e=s(og);Qee=n(G4e,"STRONG",{});var cqr=s(Qee);NWe=r(cqr,"xlm-roberta-xl"),cqr.forEach(t),jWe=r(G4e," \u2014 "),yk=n(G4e,"A",{href:!0});var fqr=s(yk);DWe=r(fqr,"XLMRobertaXLConfig"),fqr.forEach(t),GWe=r(G4e," (XLM-RoBERTa-XL model)"),G4e.forEach(t),OWe=i(y),rg=n(y,"LI",{});var O4e=s(rg);Wee=n(O4e,"STRONG",{});var mqr=s(Wee);VWe=r(mqr,"xlnet"),mqr.forEach(t),XWe=r(O4e," \u2014 "),Lk=n(O4e,"A",{href:!0});var gqr=s(Lk);zWe=r(gqr,"XLNetConfig"),gqr.forEach(t),QWe=r(O4e," (XLNet model)"),O4e.forEach(t),WWe=i(y),tg=n(y,"LI",{});var V4e=s(tg);Hee=n(V4e,"STRONG",{});var hqr=s(Hee);HWe=r(hqr,"yoso"),hqr.forEach(t),UWe=r(V4e," \u2014 "),xk=n(V4e,"A",{href:!0});var pqr=s(xk);JWe=r(pqr,"YosoConfig"),pqr.forEach(t),YWe=r(V4e," (YOSO model)"),V4e.forEach(t),y.forEach(t),KWe=i(Jr),T(ag.$$.fragment,Jr),Jr.forEach(t),ZWe=i(Ur),ng=n(Ur,"DIV",{class:!0});var zPe=s(ng);T(CA.$$.fragment,zPe),eHe=i(zPe),Uee=n(zPe,"P",{});var uqr=s(Uee);oHe=r(uqr,"Register a new configuration for this class."),uqr.forEach(t),zPe.forEach(t),Ur.forEach(t),JRe=i(f),fi=n(f,"H2",{class:!0});var QPe=s(fi);sg=n(QPe,"A",{id:!0,class:!0,href:!0});var _qr=s(sg);Jee=n(_qr,"SPAN",{});var bqr=s(Jee);T(wA.$$.fragment,bqr),bqr.forEach(t),_qr.forEach(t),rHe=i(QPe),Yee=n(QPe,"SPAN",{});var vqr=s(Yee);tHe=r(vqr,"AutoTokenizer"),vqr.forEach(t),QPe.forEach(t),YRe=i(f),Eo=n(f,"DIV",{class:!0});var $s=s(Eo);T(AA.$$.fragment,$s),aHe=i($s),yA=n($s,"P",{});var WPe=s(yA);nHe=r(WPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$k=n(WPe,"A",{href:!0});var Fqr=s($k);sHe=r(Fqr,"AutoTokenizer.from_pretrained()"),Fqr.forEach(t),lHe=r(WPe," class method."),WPe.forEach(t),iHe=i($s),LA=n($s,"P",{});var HPe=s(LA);dHe=r(HPe,"This class cannot be instantiated directly using "),Kee=n(HPe,"CODE",{});var Tqr=s(Kee);cHe=r(Tqr,"__init__()"),Tqr.forEach(t),fHe=r(HPe," (throws an error)."),HPe.forEach(t),mHe=i($s),Tr=n($s,"DIV",{class:!0});var ks=s(Tr);T(xA.$$.fragment,ks),gHe=i(ks),Zee=n(ks,"P",{});var Mqr=s(Zee);hHe=r(Mqr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Mqr.forEach(t),pHe=i(ks),Fa=n(ks,"P",{});var F3=s(Fa);uHe=r(F3,"The tokenizer class to instantiate is selected based on the "),eoe=n(F3,"CODE",{});var Eqr=s(eoe);_He=r(Eqr,"model_type"),Eqr.forEach(t),bHe=r(F3,` property of the config object (either
passed as an argument or loaded from `),ooe=n(F3,"CODE",{});var Cqr=s(ooe);vHe=r(Cqr,"pretrained_model_name_or_path"),Cqr.forEach(t),FHe=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),roe=n(F3,"CODE",{});var wqr=s(roe);THe=r(wqr,"pretrained_model_name_or_path"),wqr.forEach(t),MHe=r(F3,":"),F3.forEach(t),EHe=i(ks),k=n(ks,"UL",{});var S=s(k);An=n(S,"LI",{});var C7=s(An);toe=n(C7,"STRONG",{});var Aqr=s(toe);CHe=r(Aqr,"albert"),Aqr.forEach(t),wHe=r(C7," \u2014 "),kk=n(C7,"A",{href:!0});var yqr=s(kk);AHe=r(yqr,"AlbertTokenizer"),yqr.forEach(t),yHe=r(C7," or "),Sk=n(C7,"A",{href:!0});var Lqr=s(Sk);LHe=r(Lqr,"AlbertTokenizerFast"),Lqr.forEach(t),xHe=r(C7," (ALBERT model)"),C7.forEach(t),$He=i(S),yn=n(S,"LI",{});var w7=s(yn);aoe=n(w7,"STRONG",{});var xqr=s(aoe);kHe=r(xqr,"bart"),xqr.forEach(t),SHe=r(w7," \u2014 "),Rk=n(w7,"A",{href:!0});var $qr=s(Rk);RHe=r($qr,"BartTokenizer"),$qr.forEach(t),BHe=r(w7," or "),Bk=n(w7,"A",{href:!0});var kqr=s(Bk);PHe=r(kqr,"BartTokenizerFast"),kqr.forEach(t),IHe=r(w7," (BART model)"),w7.forEach(t),qHe=i(S),Ln=n(S,"LI",{});var A7=s(Ln);noe=n(A7,"STRONG",{});var Sqr=s(noe);NHe=r(Sqr,"barthez"),Sqr.forEach(t),jHe=r(A7," \u2014 "),Pk=n(A7,"A",{href:!0});var Rqr=s(Pk);DHe=r(Rqr,"BarthezTokenizer"),Rqr.forEach(t),GHe=r(A7," or "),Ik=n(A7,"A",{href:!0});var Bqr=s(Ik);OHe=r(Bqr,"BarthezTokenizerFast"),Bqr.forEach(t),VHe=r(A7," (BARThez model)"),A7.forEach(t),XHe=i(S),lg=n(S,"LI",{});var X4e=s(lg);soe=n(X4e,"STRONG",{});var Pqr=s(soe);zHe=r(Pqr,"bartpho"),Pqr.forEach(t),QHe=r(X4e," \u2014 "),qk=n(X4e,"A",{href:!0});var Iqr=s(qk);WHe=r(Iqr,"BartphoTokenizer"),Iqr.forEach(t),HHe=r(X4e," (BARTpho model)"),X4e.forEach(t),UHe=i(S),xn=n(S,"LI",{});var y7=s(xn);loe=n(y7,"STRONG",{});var qqr=s(loe);JHe=r(qqr,"bert"),qqr.forEach(t),YHe=r(y7," \u2014 "),Nk=n(y7,"A",{href:!0});var Nqr=s(Nk);KHe=r(Nqr,"BertTokenizer"),Nqr.forEach(t),ZHe=r(y7," or "),jk=n(y7,"A",{href:!0});var jqr=s(jk);eUe=r(jqr,"BertTokenizerFast"),jqr.forEach(t),oUe=r(y7," (BERT model)"),y7.forEach(t),rUe=i(S),ig=n(S,"LI",{});var z4e=s(ig);ioe=n(z4e,"STRONG",{});var Dqr=s(ioe);tUe=r(Dqr,"bert-generation"),Dqr.forEach(t),aUe=r(z4e," \u2014 "),Dk=n(z4e,"A",{href:!0});var Gqr=s(Dk);nUe=r(Gqr,"BertGenerationTokenizer"),Gqr.forEach(t),sUe=r(z4e," (Bert Generation model)"),z4e.forEach(t),lUe=i(S),dg=n(S,"LI",{});var Q4e=s(dg);doe=n(Q4e,"STRONG",{});var Oqr=s(doe);iUe=r(Oqr,"bert-japanese"),Oqr.forEach(t),dUe=r(Q4e," \u2014 "),Gk=n(Q4e,"A",{href:!0});var Vqr=s(Gk);cUe=r(Vqr,"BertJapaneseTokenizer"),Vqr.forEach(t),fUe=r(Q4e," (BertJapanese model)"),Q4e.forEach(t),mUe=i(S),cg=n(S,"LI",{});var W4e=s(cg);coe=n(W4e,"STRONG",{});var Xqr=s(coe);gUe=r(Xqr,"bertweet"),Xqr.forEach(t),hUe=r(W4e," \u2014 "),Ok=n(W4e,"A",{href:!0});var zqr=s(Ok);pUe=r(zqr,"BertweetTokenizer"),zqr.forEach(t),uUe=r(W4e," (Bertweet model)"),W4e.forEach(t),_Ue=i(S),$n=n(S,"LI",{});var L7=s($n);foe=n(L7,"STRONG",{});var Qqr=s(foe);bUe=r(Qqr,"big_bird"),Qqr.forEach(t),vUe=r(L7," \u2014 "),Vk=n(L7,"A",{href:!0});var Wqr=s(Vk);FUe=r(Wqr,"BigBirdTokenizer"),Wqr.forEach(t),TUe=r(L7," or "),Xk=n(L7,"A",{href:!0});var Hqr=s(Xk);MUe=r(Hqr,"BigBirdTokenizerFast"),Hqr.forEach(t),EUe=r(L7," (BigBird model)"),L7.forEach(t),CUe=i(S),kn=n(S,"LI",{});var x7=s(kn);moe=n(x7,"STRONG",{});var Uqr=s(moe);wUe=r(Uqr,"bigbird_pegasus"),Uqr.forEach(t),AUe=r(x7," \u2014 "),zk=n(x7,"A",{href:!0});var Jqr=s(zk);yUe=r(Jqr,"PegasusTokenizer"),Jqr.forEach(t),LUe=r(x7," or "),Qk=n(x7,"A",{href:!0});var Yqr=s(Qk);xUe=r(Yqr,"PegasusTokenizerFast"),Yqr.forEach(t),$Ue=r(x7," (BigBirdPegasus model)"),x7.forEach(t),kUe=i(S),Sn=n(S,"LI",{});var $7=s(Sn);goe=n($7,"STRONG",{});var Kqr=s(goe);SUe=r(Kqr,"blenderbot"),Kqr.forEach(t),RUe=r($7," \u2014 "),Wk=n($7,"A",{href:!0});var Zqr=s(Wk);BUe=r(Zqr,"BlenderbotTokenizer"),Zqr.forEach(t),PUe=r($7," or "),Hk=n($7,"A",{href:!0});var eNr=s(Hk);IUe=r(eNr,"BlenderbotTokenizerFast"),eNr.forEach(t),qUe=r($7," (Blenderbot model)"),$7.forEach(t),NUe=i(S),fg=n(S,"LI",{});var H4e=s(fg);hoe=n(H4e,"STRONG",{});var oNr=s(hoe);jUe=r(oNr,"blenderbot-small"),oNr.forEach(t),DUe=r(H4e," \u2014 "),Uk=n(H4e,"A",{href:!0});var rNr=s(Uk);GUe=r(rNr,"BlenderbotSmallTokenizer"),rNr.forEach(t),OUe=r(H4e," (BlenderbotSmall model)"),H4e.forEach(t),VUe=i(S),mg=n(S,"LI",{});var U4e=s(mg);poe=n(U4e,"STRONG",{});var tNr=s(poe);XUe=r(tNr,"byt5"),tNr.forEach(t),zUe=r(U4e," \u2014 "),Jk=n(U4e,"A",{href:!0});var aNr=s(Jk);QUe=r(aNr,"ByT5Tokenizer"),aNr.forEach(t),WUe=r(U4e," (ByT5 model)"),U4e.forEach(t),HUe=i(S),Rn=n(S,"LI",{});var k7=s(Rn);uoe=n(k7,"STRONG",{});var nNr=s(uoe);UUe=r(nNr,"camembert"),nNr.forEach(t),JUe=r(k7," \u2014 "),Yk=n(k7,"A",{href:!0});var sNr=s(Yk);YUe=r(sNr,"CamembertTokenizer"),sNr.forEach(t),KUe=r(k7," or "),Kk=n(k7,"A",{href:!0});var lNr=s(Kk);ZUe=r(lNr,"CamembertTokenizerFast"),lNr.forEach(t),eJe=r(k7," (CamemBERT model)"),k7.forEach(t),oJe=i(S),gg=n(S,"LI",{});var J4e=s(gg);_oe=n(J4e,"STRONG",{});var iNr=s(_oe);rJe=r(iNr,"canine"),iNr.forEach(t),tJe=r(J4e," \u2014 "),Zk=n(J4e,"A",{href:!0});var dNr=s(Zk);aJe=r(dNr,"CanineTokenizer"),dNr.forEach(t),nJe=r(J4e," (Canine model)"),J4e.forEach(t),sJe=i(S),Bn=n(S,"LI",{});var S7=s(Bn);boe=n(S7,"STRONG",{});var cNr=s(boe);lJe=r(cNr,"clip"),cNr.forEach(t),iJe=r(S7," \u2014 "),eS=n(S7,"A",{href:!0});var fNr=s(eS);dJe=r(fNr,"CLIPTokenizer"),fNr.forEach(t),cJe=r(S7," or "),oS=n(S7,"A",{href:!0});var mNr=s(oS);fJe=r(mNr,"CLIPTokenizerFast"),mNr.forEach(t),mJe=r(S7," (CLIP model)"),S7.forEach(t),gJe=i(S),Pn=n(S,"LI",{});var R7=s(Pn);voe=n(R7,"STRONG",{});var gNr=s(voe);hJe=r(gNr,"convbert"),gNr.forEach(t),pJe=r(R7," \u2014 "),rS=n(R7,"A",{href:!0});var hNr=s(rS);uJe=r(hNr,"ConvBertTokenizer"),hNr.forEach(t),_Je=r(R7," or "),tS=n(R7,"A",{href:!0});var pNr=s(tS);bJe=r(pNr,"ConvBertTokenizerFast"),pNr.forEach(t),vJe=r(R7," (ConvBERT model)"),R7.forEach(t),FJe=i(S),In=n(S,"LI",{});var B7=s(In);Foe=n(B7,"STRONG",{});var uNr=s(Foe);TJe=r(uNr,"cpm"),uNr.forEach(t),MJe=r(B7," \u2014 "),aS=n(B7,"A",{href:!0});var _Nr=s(aS);EJe=r(_Nr,"CpmTokenizer"),_Nr.forEach(t),CJe=r(B7," or "),Toe=n(B7,"CODE",{});var bNr=s(Toe);wJe=r(bNr,"CpmTokenizerFast"),bNr.forEach(t),AJe=r(B7," (CPM model)"),B7.forEach(t),yJe=i(S),hg=n(S,"LI",{});var Y4e=s(hg);Moe=n(Y4e,"STRONG",{});var vNr=s(Moe);LJe=r(vNr,"ctrl"),vNr.forEach(t),xJe=r(Y4e," \u2014 "),nS=n(Y4e,"A",{href:!0});var FNr=s(nS);$Je=r(FNr,"CTRLTokenizer"),FNr.forEach(t),kJe=r(Y4e," (CTRL model)"),Y4e.forEach(t),SJe=i(S),qn=n(S,"LI",{});var P7=s(qn);Eoe=n(P7,"STRONG",{});var TNr=s(Eoe);RJe=r(TNr,"data2vec-text"),TNr.forEach(t),BJe=r(P7," \u2014 "),sS=n(P7,"A",{href:!0});var MNr=s(sS);PJe=r(MNr,"RobertaTokenizer"),MNr.forEach(t),IJe=r(P7," or "),lS=n(P7,"A",{href:!0});var ENr=s(lS);qJe=r(ENr,"RobertaTokenizerFast"),ENr.forEach(t),NJe=r(P7," (Data2VecText model)"),P7.forEach(t),jJe=i(S),Nn=n(S,"LI",{});var I7=s(Nn);Coe=n(I7,"STRONG",{});var CNr=s(Coe);DJe=r(CNr,"deberta"),CNr.forEach(t),GJe=r(I7," \u2014 "),iS=n(I7,"A",{href:!0});var wNr=s(iS);OJe=r(wNr,"DebertaTokenizer"),wNr.forEach(t),VJe=r(I7," or "),dS=n(I7,"A",{href:!0});var ANr=s(dS);XJe=r(ANr,"DebertaTokenizerFast"),ANr.forEach(t),zJe=r(I7," (DeBERTa model)"),I7.forEach(t),QJe=i(S),jn=n(S,"LI",{});var q7=s(jn);woe=n(q7,"STRONG",{});var yNr=s(woe);WJe=r(yNr,"deberta-v2"),yNr.forEach(t),HJe=r(q7," \u2014 "),cS=n(q7,"A",{href:!0});var LNr=s(cS);UJe=r(LNr,"DebertaV2Tokenizer"),LNr.forEach(t),JJe=r(q7," or "),fS=n(q7,"A",{href:!0});var xNr=s(fS);YJe=r(xNr,"DebertaV2TokenizerFast"),xNr.forEach(t),KJe=r(q7," (DeBERTa-v2 model)"),q7.forEach(t),ZJe=i(S),Dn=n(S,"LI",{});var N7=s(Dn);Aoe=n(N7,"STRONG",{});var $Nr=s(Aoe);eYe=r($Nr,"distilbert"),$Nr.forEach(t),oYe=r(N7," \u2014 "),mS=n(N7,"A",{href:!0});var kNr=s(mS);rYe=r(kNr,"DistilBertTokenizer"),kNr.forEach(t),tYe=r(N7," or "),gS=n(N7,"A",{href:!0});var SNr=s(gS);aYe=r(SNr,"DistilBertTokenizerFast"),SNr.forEach(t),nYe=r(N7," (DistilBERT model)"),N7.forEach(t),sYe=i(S),Gn=n(S,"LI",{});var j7=s(Gn);yoe=n(j7,"STRONG",{});var RNr=s(yoe);lYe=r(RNr,"dpr"),RNr.forEach(t),iYe=r(j7," \u2014 "),hS=n(j7,"A",{href:!0});var BNr=s(hS);dYe=r(BNr,"DPRQuestionEncoderTokenizer"),BNr.forEach(t),cYe=r(j7," or "),pS=n(j7,"A",{href:!0});var PNr=s(pS);fYe=r(PNr,"DPRQuestionEncoderTokenizerFast"),PNr.forEach(t),mYe=r(j7," (DPR model)"),j7.forEach(t),gYe=i(S),On=n(S,"LI",{});var D7=s(On);Loe=n(D7,"STRONG",{});var INr=s(Loe);hYe=r(INr,"electra"),INr.forEach(t),pYe=r(D7," \u2014 "),uS=n(D7,"A",{href:!0});var qNr=s(uS);uYe=r(qNr,"ElectraTokenizer"),qNr.forEach(t),_Ye=r(D7," or "),_S=n(D7,"A",{href:!0});var NNr=s(_S);bYe=r(NNr,"ElectraTokenizerFast"),NNr.forEach(t),vYe=r(D7," (ELECTRA model)"),D7.forEach(t),FYe=i(S),pg=n(S,"LI",{});var K4e=s(pg);xoe=n(K4e,"STRONG",{});var jNr=s(xoe);TYe=r(jNr,"flaubert"),jNr.forEach(t),MYe=r(K4e," \u2014 "),bS=n(K4e,"A",{href:!0});var DNr=s(bS);EYe=r(DNr,"FlaubertTokenizer"),DNr.forEach(t),CYe=r(K4e," (FlauBERT model)"),K4e.forEach(t),wYe=i(S),Vn=n(S,"LI",{});var G7=s(Vn);$oe=n(G7,"STRONG",{});var GNr=s($oe);AYe=r(GNr,"fnet"),GNr.forEach(t),yYe=r(G7," \u2014 "),vS=n(G7,"A",{href:!0});var ONr=s(vS);LYe=r(ONr,"FNetTokenizer"),ONr.forEach(t),xYe=r(G7," or "),FS=n(G7,"A",{href:!0});var VNr=s(FS);$Ye=r(VNr,"FNetTokenizerFast"),VNr.forEach(t),kYe=r(G7," (FNet model)"),G7.forEach(t),SYe=i(S),ug=n(S,"LI",{});var Z4e=s(ug);koe=n(Z4e,"STRONG",{});var XNr=s(koe);RYe=r(XNr,"fsmt"),XNr.forEach(t),BYe=r(Z4e," \u2014 "),TS=n(Z4e,"A",{href:!0});var zNr=s(TS);PYe=r(zNr,"FSMTTokenizer"),zNr.forEach(t),IYe=r(Z4e," (FairSeq Machine-Translation model)"),Z4e.forEach(t),qYe=i(S),Xn=n(S,"LI",{});var O7=s(Xn);Soe=n(O7,"STRONG",{});var QNr=s(Soe);NYe=r(QNr,"funnel"),QNr.forEach(t),jYe=r(O7," \u2014 "),MS=n(O7,"A",{href:!0});var WNr=s(MS);DYe=r(WNr,"FunnelTokenizer"),WNr.forEach(t),GYe=r(O7," or "),ES=n(O7,"A",{href:!0});var HNr=s(ES);OYe=r(HNr,"FunnelTokenizerFast"),HNr.forEach(t),VYe=r(O7," (Funnel Transformer model)"),O7.forEach(t),XYe=i(S),zn=n(S,"LI",{});var V7=s(zn);Roe=n(V7,"STRONG",{});var UNr=s(Roe);zYe=r(UNr,"gpt2"),UNr.forEach(t),QYe=r(V7," \u2014 "),CS=n(V7,"A",{href:!0});var JNr=s(CS);WYe=r(JNr,"GPT2Tokenizer"),JNr.forEach(t),HYe=r(V7," or "),wS=n(V7,"A",{href:!0});var YNr=s(wS);UYe=r(YNr,"GPT2TokenizerFast"),YNr.forEach(t),JYe=r(V7," (OpenAI GPT-2 model)"),V7.forEach(t),YYe=i(S),Qn=n(S,"LI",{});var X7=s(Qn);Boe=n(X7,"STRONG",{});var KNr=s(Boe);KYe=r(KNr,"gpt_neo"),KNr.forEach(t),ZYe=r(X7," \u2014 "),AS=n(X7,"A",{href:!0});var ZNr=s(AS);eKe=r(ZNr,"GPT2Tokenizer"),ZNr.forEach(t),oKe=r(X7," or "),yS=n(X7,"A",{href:!0});var ejr=s(yS);rKe=r(ejr,"GPT2TokenizerFast"),ejr.forEach(t),tKe=r(X7," (GPT Neo model)"),X7.forEach(t),aKe=i(S),_g=n(S,"LI",{});var eEe=s(_g);Poe=n(eEe,"STRONG",{});var ojr=s(Poe);nKe=r(ojr,"gpt_neox"),ojr.forEach(t),sKe=r(eEe," \u2014 "),LS=n(eEe,"A",{href:!0});var rjr=s(LS);lKe=r(rjr,"GPTNeoXTokenizerFast"),rjr.forEach(t),iKe=r(eEe," (GPTNeoX model)"),eEe.forEach(t),dKe=i(S),Wn=n(S,"LI",{});var z7=s(Wn);Ioe=n(z7,"STRONG",{});var tjr=s(Ioe);cKe=r(tjr,"gptj"),tjr.forEach(t),fKe=r(z7," \u2014 "),xS=n(z7,"A",{href:!0});var ajr=s(xS);mKe=r(ajr,"GPT2Tokenizer"),ajr.forEach(t),gKe=r(z7," or "),$S=n(z7,"A",{href:!0});var njr=s($S);hKe=r(njr,"GPT2TokenizerFast"),njr.forEach(t),pKe=r(z7," (GPT-J model)"),z7.forEach(t),uKe=i(S),Hn=n(S,"LI",{});var Q7=s(Hn);qoe=n(Q7,"STRONG",{});var sjr=s(qoe);_Ke=r(sjr,"herbert"),sjr.forEach(t),bKe=r(Q7," \u2014 "),kS=n(Q7,"A",{href:!0});var ljr=s(kS);vKe=r(ljr,"HerbertTokenizer"),ljr.forEach(t),FKe=r(Q7," or "),SS=n(Q7,"A",{href:!0});var ijr=s(SS);TKe=r(ijr,"HerbertTokenizerFast"),ijr.forEach(t),MKe=r(Q7," (HerBERT model)"),Q7.forEach(t),EKe=i(S),bg=n(S,"LI",{});var oEe=s(bg);Noe=n(oEe,"STRONG",{});var djr=s(Noe);CKe=r(djr,"hubert"),djr.forEach(t),wKe=r(oEe," \u2014 "),RS=n(oEe,"A",{href:!0});var cjr=s(RS);AKe=r(cjr,"Wav2Vec2CTCTokenizer"),cjr.forEach(t),yKe=r(oEe," (Hubert model)"),oEe.forEach(t),LKe=i(S),Un=n(S,"LI",{});var W7=s(Un);joe=n(W7,"STRONG",{});var fjr=s(joe);xKe=r(fjr,"ibert"),fjr.forEach(t),$Ke=r(W7," \u2014 "),BS=n(W7,"A",{href:!0});var mjr=s(BS);kKe=r(mjr,"RobertaTokenizer"),mjr.forEach(t),SKe=r(W7," or "),PS=n(W7,"A",{href:!0});var gjr=s(PS);RKe=r(gjr,"RobertaTokenizerFast"),gjr.forEach(t),BKe=r(W7," (I-BERT model)"),W7.forEach(t),PKe=i(S),Jn=n(S,"LI",{});var H7=s(Jn);Doe=n(H7,"STRONG",{});var hjr=s(Doe);IKe=r(hjr,"layoutlm"),hjr.forEach(t),qKe=r(H7," \u2014 "),IS=n(H7,"A",{href:!0});var pjr=s(IS);NKe=r(pjr,"LayoutLMTokenizer"),pjr.forEach(t),jKe=r(H7," or "),qS=n(H7,"A",{href:!0});var ujr=s(qS);DKe=r(ujr,"LayoutLMTokenizerFast"),ujr.forEach(t),GKe=r(H7," (LayoutLM model)"),H7.forEach(t),OKe=i(S),Yn=n(S,"LI",{});var U7=s(Yn);Goe=n(U7,"STRONG",{});var _jr=s(Goe);VKe=r(_jr,"layoutlmv2"),_jr.forEach(t),XKe=r(U7," \u2014 "),NS=n(U7,"A",{href:!0});var bjr=s(NS);zKe=r(bjr,"LayoutLMv2Tokenizer"),bjr.forEach(t),QKe=r(U7," or "),jS=n(U7,"A",{href:!0});var vjr=s(jS);WKe=r(vjr,"LayoutLMv2TokenizerFast"),vjr.forEach(t),HKe=r(U7," (LayoutLMv2 model)"),U7.forEach(t),UKe=i(S),Kn=n(S,"LI",{});var J7=s(Kn);Ooe=n(J7,"STRONG",{});var Fjr=s(Ooe);JKe=r(Fjr,"layoutxlm"),Fjr.forEach(t),YKe=r(J7," \u2014 "),DS=n(J7,"A",{href:!0});var Tjr=s(DS);KKe=r(Tjr,"LayoutXLMTokenizer"),Tjr.forEach(t),ZKe=r(J7," or "),GS=n(J7,"A",{href:!0});var Mjr=s(GS);eZe=r(Mjr,"LayoutXLMTokenizerFast"),Mjr.forEach(t),oZe=r(J7," (LayoutXLM model)"),J7.forEach(t),rZe=i(S),Zn=n(S,"LI",{});var Y7=s(Zn);Voe=n(Y7,"STRONG",{});var Ejr=s(Voe);tZe=r(Ejr,"led"),Ejr.forEach(t),aZe=r(Y7," \u2014 "),OS=n(Y7,"A",{href:!0});var Cjr=s(OS);nZe=r(Cjr,"LEDTokenizer"),Cjr.forEach(t),sZe=r(Y7," or "),VS=n(Y7,"A",{href:!0});var wjr=s(VS);lZe=r(wjr,"LEDTokenizerFast"),wjr.forEach(t),iZe=r(Y7," (LED model)"),Y7.forEach(t),dZe=i(S),es=n(S,"LI",{});var K7=s(es);Xoe=n(K7,"STRONG",{});var Ajr=s(Xoe);cZe=r(Ajr,"longformer"),Ajr.forEach(t),fZe=r(K7," \u2014 "),XS=n(K7,"A",{href:!0});var yjr=s(XS);mZe=r(yjr,"LongformerTokenizer"),yjr.forEach(t),gZe=r(K7," or "),zS=n(K7,"A",{href:!0});var Ljr=s(zS);hZe=r(Ljr,"LongformerTokenizerFast"),Ljr.forEach(t),pZe=r(K7," (Longformer model)"),K7.forEach(t),uZe=i(S),vg=n(S,"LI",{});var rEe=s(vg);zoe=n(rEe,"STRONG",{});var xjr=s(zoe);_Ze=r(xjr,"luke"),xjr.forEach(t),bZe=r(rEe," \u2014 "),QS=n(rEe,"A",{href:!0});var $jr=s(QS);vZe=r($jr,"LukeTokenizer"),$jr.forEach(t),FZe=r(rEe," (LUKE model)"),rEe.forEach(t),TZe=i(S),os=n(S,"LI",{});var Z7=s(os);Qoe=n(Z7,"STRONG",{});var kjr=s(Qoe);MZe=r(kjr,"lxmert"),kjr.forEach(t),EZe=r(Z7," \u2014 "),WS=n(Z7,"A",{href:!0});var Sjr=s(WS);CZe=r(Sjr,"LxmertTokenizer"),Sjr.forEach(t),wZe=r(Z7," or "),HS=n(Z7,"A",{href:!0});var Rjr=s(HS);AZe=r(Rjr,"LxmertTokenizerFast"),Rjr.forEach(t),yZe=r(Z7," (LXMERT model)"),Z7.forEach(t),LZe=i(S),Fg=n(S,"LI",{});var tEe=s(Fg);Woe=n(tEe,"STRONG",{});var Bjr=s(Woe);xZe=r(Bjr,"m2m_100"),Bjr.forEach(t),$Ze=r(tEe," \u2014 "),US=n(tEe,"A",{href:!0});var Pjr=s(US);kZe=r(Pjr,"M2M100Tokenizer"),Pjr.forEach(t),SZe=r(tEe," (M2M100 model)"),tEe.forEach(t),RZe=i(S),Tg=n(S,"LI",{});var aEe=s(Tg);Hoe=n(aEe,"STRONG",{});var Ijr=s(Hoe);BZe=r(Ijr,"marian"),Ijr.forEach(t),PZe=r(aEe," \u2014 "),JS=n(aEe,"A",{href:!0});var qjr=s(JS);IZe=r(qjr,"MarianTokenizer"),qjr.forEach(t),qZe=r(aEe," (Marian model)"),aEe.forEach(t),NZe=i(S),rs=n(S,"LI",{});var ex=s(rs);Uoe=n(ex,"STRONG",{});var Njr=s(Uoe);jZe=r(Njr,"mbart"),Njr.forEach(t),DZe=r(ex," \u2014 "),YS=n(ex,"A",{href:!0});var jjr=s(YS);GZe=r(jjr,"MBartTokenizer"),jjr.forEach(t),OZe=r(ex," or "),KS=n(ex,"A",{href:!0});var Djr=s(KS);VZe=r(Djr,"MBartTokenizerFast"),Djr.forEach(t),XZe=r(ex," (mBART model)"),ex.forEach(t),zZe=i(S),ts=n(S,"LI",{});var ox=s(ts);Joe=n(ox,"STRONG",{});var Gjr=s(Joe);QZe=r(Gjr,"mbart50"),Gjr.forEach(t),WZe=r(ox," \u2014 "),ZS=n(ox,"A",{href:!0});var Ojr=s(ZS);HZe=r(Ojr,"MBart50Tokenizer"),Ojr.forEach(t),UZe=r(ox," or "),eR=n(ox,"A",{href:!0});var Vjr=s(eR);JZe=r(Vjr,"MBart50TokenizerFast"),Vjr.forEach(t),YZe=r(ox," (mBART-50 model)"),ox.forEach(t),KZe=i(S),as=n(S,"LI",{});var rx=s(as);Yoe=n(rx,"STRONG",{});var Xjr=s(Yoe);ZZe=r(Xjr,"megatron-bert"),Xjr.forEach(t),eeo=r(rx," \u2014 "),oR=n(rx,"A",{href:!0});var zjr=s(oR);oeo=r(zjr,"BertTokenizer"),zjr.forEach(t),reo=r(rx," or "),rR=n(rx,"A",{href:!0});var Qjr=s(rR);teo=r(Qjr,"BertTokenizerFast"),Qjr.forEach(t),aeo=r(rx," (MegatronBert model)"),rx.forEach(t),neo=i(S),Mg=n(S,"LI",{});var nEe=s(Mg);Koe=n(nEe,"STRONG",{});var Wjr=s(Koe);seo=r(Wjr,"mluke"),Wjr.forEach(t),leo=r(nEe," \u2014 "),tR=n(nEe,"A",{href:!0});var Hjr=s(tR);ieo=r(Hjr,"MLukeTokenizer"),Hjr.forEach(t),deo=r(nEe," (mLUKE model)"),nEe.forEach(t),ceo=i(S),ns=n(S,"LI",{});var tx=s(ns);Zoe=n(tx,"STRONG",{});var Ujr=s(Zoe);feo=r(Ujr,"mobilebert"),Ujr.forEach(t),meo=r(tx," \u2014 "),aR=n(tx,"A",{href:!0});var Jjr=s(aR);geo=r(Jjr,"MobileBertTokenizer"),Jjr.forEach(t),heo=r(tx," or "),nR=n(tx,"A",{href:!0});var Yjr=s(nR);peo=r(Yjr,"MobileBertTokenizerFast"),Yjr.forEach(t),ueo=r(tx," (MobileBERT model)"),tx.forEach(t),_eo=i(S),ss=n(S,"LI",{});var ax=s(ss);ere=n(ax,"STRONG",{});var Kjr=s(ere);beo=r(Kjr,"mpnet"),Kjr.forEach(t),veo=r(ax," \u2014 "),sR=n(ax,"A",{href:!0});var Zjr=s(sR);Feo=r(Zjr,"MPNetTokenizer"),Zjr.forEach(t),Teo=r(ax," or "),lR=n(ax,"A",{href:!0});var eDr=s(lR);Meo=r(eDr,"MPNetTokenizerFast"),eDr.forEach(t),Eeo=r(ax," (MPNet model)"),ax.forEach(t),Ceo=i(S),ls=n(S,"LI",{});var nx=s(ls);ore=n(nx,"STRONG",{});var oDr=s(ore);weo=r(oDr,"mt5"),oDr.forEach(t),Aeo=r(nx," \u2014 "),iR=n(nx,"A",{href:!0});var rDr=s(iR);yeo=r(rDr,"MT5Tokenizer"),rDr.forEach(t),Leo=r(nx," or "),dR=n(nx,"A",{href:!0});var tDr=s(dR);xeo=r(tDr,"MT5TokenizerFast"),tDr.forEach(t),$eo=r(nx," (mT5 model)"),nx.forEach(t),keo=i(S),is=n(S,"LI",{});var sx=s(is);rre=n(sx,"STRONG",{});var aDr=s(rre);Seo=r(aDr,"nystromformer"),aDr.forEach(t),Reo=r(sx," \u2014 "),cR=n(sx,"A",{href:!0});var nDr=s(cR);Beo=r(nDr,"AlbertTokenizer"),nDr.forEach(t),Peo=r(sx," or "),fR=n(sx,"A",{href:!0});var sDr=s(fR);Ieo=r(sDr,"AlbertTokenizerFast"),sDr.forEach(t),qeo=r(sx," (Nystromformer model)"),sx.forEach(t),Neo=i(S),ds=n(S,"LI",{});var lx=s(ds);tre=n(lx,"STRONG",{});var lDr=s(tre);jeo=r(lDr,"openai-gpt"),lDr.forEach(t),Deo=r(lx," \u2014 "),mR=n(lx,"A",{href:!0});var iDr=s(mR);Geo=r(iDr,"OpenAIGPTTokenizer"),iDr.forEach(t),Oeo=r(lx," or "),gR=n(lx,"A",{href:!0});var dDr=s(gR);Veo=r(dDr,"OpenAIGPTTokenizerFast"),dDr.forEach(t),Xeo=r(lx," (OpenAI GPT model)"),lx.forEach(t),zeo=i(S),cs=n(S,"LI",{});var ix=s(cs);are=n(ix,"STRONG",{});var cDr=s(are);Qeo=r(cDr,"pegasus"),cDr.forEach(t),Weo=r(ix," \u2014 "),hR=n(ix,"A",{href:!0});var fDr=s(hR);Heo=r(fDr,"PegasusTokenizer"),fDr.forEach(t),Ueo=r(ix," or "),pR=n(ix,"A",{href:!0});var mDr=s(pR);Jeo=r(mDr,"PegasusTokenizerFast"),mDr.forEach(t),Yeo=r(ix," (Pegasus model)"),ix.forEach(t),Keo=i(S),Eg=n(S,"LI",{});var sEe=s(Eg);nre=n(sEe,"STRONG",{});var gDr=s(nre);Zeo=r(gDr,"perceiver"),gDr.forEach(t),eoo=r(sEe," \u2014 "),uR=n(sEe,"A",{href:!0});var hDr=s(uR);ooo=r(hDr,"PerceiverTokenizer"),hDr.forEach(t),roo=r(sEe," (Perceiver model)"),sEe.forEach(t),too=i(S),Cg=n(S,"LI",{});var lEe=s(Cg);sre=n(lEe,"STRONG",{});var pDr=s(sre);aoo=r(pDr,"phobert"),pDr.forEach(t),noo=r(lEe," \u2014 "),_R=n(lEe,"A",{href:!0});var uDr=s(_R);soo=r(uDr,"PhobertTokenizer"),uDr.forEach(t),loo=r(lEe," (PhoBERT model)"),lEe.forEach(t),ioo=i(S),wg=n(S,"LI",{});var iEe=s(wg);lre=n(iEe,"STRONG",{});var _Dr=s(lre);doo=r(_Dr,"plbart"),_Dr.forEach(t),coo=r(iEe," \u2014 "),bR=n(iEe,"A",{href:!0});var bDr=s(bR);foo=r(bDr,"PLBartTokenizer"),bDr.forEach(t),moo=r(iEe," (PLBart model)"),iEe.forEach(t),goo=i(S),Ag=n(S,"LI",{});var dEe=s(Ag);ire=n(dEe,"STRONG",{});var vDr=s(ire);hoo=r(vDr,"prophetnet"),vDr.forEach(t),poo=r(dEe," \u2014 "),vR=n(dEe,"A",{href:!0});var FDr=s(vR);uoo=r(FDr,"ProphetNetTokenizer"),FDr.forEach(t),_oo=r(dEe," (ProphetNet model)"),dEe.forEach(t),boo=i(S),fs=n(S,"LI",{});var dx=s(fs);dre=n(dx,"STRONG",{});var TDr=s(dre);voo=r(TDr,"qdqbert"),TDr.forEach(t),Foo=r(dx," \u2014 "),FR=n(dx,"A",{href:!0});var MDr=s(FR);Too=r(MDr,"BertTokenizer"),MDr.forEach(t),Moo=r(dx," or "),TR=n(dx,"A",{href:!0});var EDr=s(TR);Eoo=r(EDr,"BertTokenizerFast"),EDr.forEach(t),Coo=r(dx," (QDQBert model)"),dx.forEach(t),woo=i(S),yg=n(S,"LI",{});var cEe=s(yg);cre=n(cEe,"STRONG",{});var CDr=s(cre);Aoo=r(CDr,"rag"),CDr.forEach(t),yoo=r(cEe," \u2014 "),MR=n(cEe,"A",{href:!0});var wDr=s(MR);Loo=r(wDr,"RagTokenizer"),wDr.forEach(t),xoo=r(cEe," (RAG model)"),cEe.forEach(t),$oo=i(S),ms=n(S,"LI",{});var cx=s(ms);fre=n(cx,"STRONG",{});var ADr=s(fre);koo=r(ADr,"realm"),ADr.forEach(t),Soo=r(cx," \u2014 "),ER=n(cx,"A",{href:!0});var yDr=s(ER);Roo=r(yDr,"RealmTokenizer"),yDr.forEach(t),Boo=r(cx," or "),CR=n(cx,"A",{href:!0});var LDr=s(CR);Poo=r(LDr,"RealmTokenizerFast"),LDr.forEach(t),Ioo=r(cx," (Realm model)"),cx.forEach(t),qoo=i(S),gs=n(S,"LI",{});var fx=s(gs);mre=n(fx,"STRONG",{});var xDr=s(mre);Noo=r(xDr,"reformer"),xDr.forEach(t),joo=r(fx," \u2014 "),wR=n(fx,"A",{href:!0});var $Dr=s(wR);Doo=r($Dr,"ReformerTokenizer"),$Dr.forEach(t),Goo=r(fx," or "),AR=n(fx,"A",{href:!0});var kDr=s(AR);Ooo=r(kDr,"ReformerTokenizerFast"),kDr.forEach(t),Voo=r(fx," (Reformer model)"),fx.forEach(t),Xoo=i(S),hs=n(S,"LI",{});var mx=s(hs);gre=n(mx,"STRONG",{});var SDr=s(gre);zoo=r(SDr,"rembert"),SDr.forEach(t),Qoo=r(mx," \u2014 "),yR=n(mx,"A",{href:!0});var RDr=s(yR);Woo=r(RDr,"RemBertTokenizer"),RDr.forEach(t),Hoo=r(mx," or "),LR=n(mx,"A",{href:!0});var BDr=s(LR);Uoo=r(BDr,"RemBertTokenizerFast"),BDr.forEach(t),Joo=r(mx," (RemBERT model)"),mx.forEach(t),Yoo=i(S),ps=n(S,"LI",{});var gx=s(ps);hre=n(gx,"STRONG",{});var PDr=s(hre);Koo=r(PDr,"retribert"),PDr.forEach(t),Zoo=r(gx," \u2014 "),xR=n(gx,"A",{href:!0});var IDr=s(xR);ero=r(IDr,"RetriBertTokenizer"),IDr.forEach(t),oro=r(gx," or "),$R=n(gx,"A",{href:!0});var qDr=s($R);rro=r(qDr,"RetriBertTokenizerFast"),qDr.forEach(t),tro=r(gx," (RetriBERT model)"),gx.forEach(t),aro=i(S),us=n(S,"LI",{});var hx=s(us);pre=n(hx,"STRONG",{});var NDr=s(pre);nro=r(NDr,"roberta"),NDr.forEach(t),sro=r(hx," \u2014 "),kR=n(hx,"A",{href:!0});var jDr=s(kR);lro=r(jDr,"RobertaTokenizer"),jDr.forEach(t),iro=r(hx," or "),SR=n(hx,"A",{href:!0});var DDr=s(SR);dro=r(DDr,"RobertaTokenizerFast"),DDr.forEach(t),cro=r(hx," (RoBERTa model)"),hx.forEach(t),fro=i(S),_s=n(S,"LI",{});var px=s(_s);ure=n(px,"STRONG",{});var GDr=s(ure);mro=r(GDr,"roformer"),GDr.forEach(t),gro=r(px," \u2014 "),RR=n(px,"A",{href:!0});var ODr=s(RR);hro=r(ODr,"RoFormerTokenizer"),ODr.forEach(t),pro=r(px," or "),BR=n(px,"A",{href:!0});var VDr=s(BR);uro=r(VDr,"RoFormerTokenizerFast"),VDr.forEach(t),_ro=r(px," (RoFormer model)"),px.forEach(t),bro=i(S),Lg=n(S,"LI",{});var fEe=s(Lg);_re=n(fEe,"STRONG",{});var XDr=s(_re);vro=r(XDr,"speech_to_text"),XDr.forEach(t),Fro=r(fEe," \u2014 "),PR=n(fEe,"A",{href:!0});var zDr=s(PR);Tro=r(zDr,"Speech2TextTokenizer"),zDr.forEach(t),Mro=r(fEe," (Speech2Text model)"),fEe.forEach(t),Ero=i(S),xg=n(S,"LI",{});var mEe=s(xg);bre=n(mEe,"STRONG",{});var QDr=s(bre);Cro=r(QDr,"speech_to_text_2"),QDr.forEach(t),wro=r(mEe," \u2014 "),IR=n(mEe,"A",{href:!0});var WDr=s(IR);Aro=r(WDr,"Speech2Text2Tokenizer"),WDr.forEach(t),yro=r(mEe," (Speech2Text2 model)"),mEe.forEach(t),Lro=i(S),bs=n(S,"LI",{});var ux=s(bs);vre=n(ux,"STRONG",{});var HDr=s(vre);xro=r(HDr,"splinter"),HDr.forEach(t),$ro=r(ux," \u2014 "),qR=n(ux,"A",{href:!0});var UDr=s(qR);kro=r(UDr,"SplinterTokenizer"),UDr.forEach(t),Sro=r(ux," or "),NR=n(ux,"A",{href:!0});var JDr=s(NR);Rro=r(JDr,"SplinterTokenizerFast"),JDr.forEach(t),Bro=r(ux," (Splinter model)"),ux.forEach(t),Pro=i(S),vs=n(S,"LI",{});var _x=s(vs);Fre=n(_x,"STRONG",{});var YDr=s(Fre);Iro=r(YDr,"squeezebert"),YDr.forEach(t),qro=r(_x," \u2014 "),jR=n(_x,"A",{href:!0});var KDr=s(jR);Nro=r(KDr,"SqueezeBertTokenizer"),KDr.forEach(t),jro=r(_x," or "),DR=n(_x,"A",{href:!0});var ZDr=s(DR);Dro=r(ZDr,"SqueezeBertTokenizerFast"),ZDr.forEach(t),Gro=r(_x," (SqueezeBERT model)"),_x.forEach(t),Oro=i(S),Fs=n(S,"LI",{});var bx=s(Fs);Tre=n(bx,"STRONG",{});var eGr=s(Tre);Vro=r(eGr,"t5"),eGr.forEach(t),Xro=r(bx," \u2014 "),GR=n(bx,"A",{href:!0});var oGr=s(GR);zro=r(oGr,"T5Tokenizer"),oGr.forEach(t),Qro=r(bx," or "),OR=n(bx,"A",{href:!0});var rGr=s(OR);Wro=r(rGr,"T5TokenizerFast"),rGr.forEach(t),Hro=r(bx," (T5 model)"),bx.forEach(t),Uro=i(S),$g=n(S,"LI",{});var gEe=s($g);Mre=n(gEe,"STRONG",{});var tGr=s(Mre);Jro=r(tGr,"tapas"),tGr.forEach(t),Yro=r(gEe," \u2014 "),VR=n(gEe,"A",{href:!0});var aGr=s(VR);Kro=r(aGr,"TapasTokenizer"),aGr.forEach(t),Zro=r(gEe," (TAPAS model)"),gEe.forEach(t),eto=i(S),kg=n(S,"LI",{});var hEe=s(kg);Ere=n(hEe,"STRONG",{});var nGr=s(Ere);oto=r(nGr,"tapex"),nGr.forEach(t),rto=r(hEe," \u2014 "),XR=n(hEe,"A",{href:!0});var sGr=s(XR);tto=r(sGr,"TapexTokenizer"),sGr.forEach(t),ato=r(hEe," (TAPEX model)"),hEe.forEach(t),nto=i(S),Sg=n(S,"LI",{});var pEe=s(Sg);Cre=n(pEe,"STRONG",{});var lGr=s(Cre);sto=r(lGr,"transfo-xl"),lGr.forEach(t),lto=r(pEe," \u2014 "),zR=n(pEe,"A",{href:!0});var iGr=s(zR);ito=r(iGr,"TransfoXLTokenizer"),iGr.forEach(t),dto=r(pEe," (Transformer-XL model)"),pEe.forEach(t),cto=i(S),Ts=n(S,"LI",{});var vx=s(Ts);wre=n(vx,"STRONG",{});var dGr=s(wre);fto=r(dGr,"visual_bert"),dGr.forEach(t),mto=r(vx," \u2014 "),QR=n(vx,"A",{href:!0});var cGr=s(QR);gto=r(cGr,"BertTokenizer"),cGr.forEach(t),hto=r(vx," or "),WR=n(vx,"A",{href:!0});var fGr=s(WR);pto=r(fGr,"BertTokenizerFast"),fGr.forEach(t),uto=r(vx," (VisualBert model)"),vx.forEach(t),_to=i(S),Rg=n(S,"LI",{});var uEe=s(Rg);Are=n(uEe,"STRONG",{});var mGr=s(Are);bto=r(mGr,"wav2vec2"),mGr.forEach(t),vto=r(uEe," \u2014 "),HR=n(uEe,"A",{href:!0});var gGr=s(HR);Fto=r(gGr,"Wav2Vec2CTCTokenizer"),gGr.forEach(t),Tto=r(uEe," (Wav2Vec2 model)"),uEe.forEach(t),Mto=i(S),Bg=n(S,"LI",{});var _Ee=s(Bg);yre=n(_Ee,"STRONG",{});var hGr=s(yre);Eto=r(hGr,"wav2vec2_phoneme"),hGr.forEach(t),Cto=r(_Ee," \u2014 "),UR=n(_Ee,"A",{href:!0});var pGr=s(UR);wto=r(pGr,"Wav2Vec2PhonemeCTCTokenizer"),pGr.forEach(t),Ato=r(_Ee," (Wav2Vec2Phoneme model)"),_Ee.forEach(t),yto=i(S),Ms=n(S,"LI",{});var Fx=s(Ms);Lre=n(Fx,"STRONG",{});var uGr=s(Lre);Lto=r(uGr,"xglm"),uGr.forEach(t),xto=r(Fx," \u2014 "),JR=n(Fx,"A",{href:!0});var _Gr=s(JR);$to=r(_Gr,"XGLMTokenizer"),_Gr.forEach(t),kto=r(Fx," or "),YR=n(Fx,"A",{href:!0});var bGr=s(YR);Sto=r(bGr,"XGLMTokenizerFast"),bGr.forEach(t),Rto=r(Fx," (XGLM model)"),Fx.forEach(t),Bto=i(S),Pg=n(S,"LI",{});var bEe=s(Pg);xre=n(bEe,"STRONG",{});var vGr=s(xre);Pto=r(vGr,"xlm"),vGr.forEach(t),Ito=r(bEe," \u2014 "),KR=n(bEe,"A",{href:!0});var FGr=s(KR);qto=r(FGr,"XLMTokenizer"),FGr.forEach(t),Nto=r(bEe," (XLM model)"),bEe.forEach(t),jto=i(S),Ig=n(S,"LI",{});var vEe=s(Ig);$re=n(vEe,"STRONG",{});var TGr=s($re);Dto=r(TGr,"xlm-prophetnet"),TGr.forEach(t),Gto=r(vEe," \u2014 "),ZR=n(vEe,"A",{href:!0});var MGr=s(ZR);Oto=r(MGr,"XLMProphetNetTokenizer"),MGr.forEach(t),Vto=r(vEe," (XLMProphetNet model)"),vEe.forEach(t),Xto=i(S),Es=n(S,"LI",{});var Tx=s(Es);kre=n(Tx,"STRONG",{});var EGr=s(kre);zto=r(EGr,"xlm-roberta"),EGr.forEach(t),Qto=r(Tx," \u2014 "),eB=n(Tx,"A",{href:!0});var CGr=s(eB);Wto=r(CGr,"XLMRobertaTokenizer"),CGr.forEach(t),Hto=r(Tx," or "),oB=n(Tx,"A",{href:!0});var wGr=s(oB);Uto=r(wGr,"XLMRobertaTokenizerFast"),wGr.forEach(t),Jto=r(Tx," (XLM-RoBERTa model)"),Tx.forEach(t),Yto=i(S),Cs=n(S,"LI",{});var Mx=s(Cs);Sre=n(Mx,"STRONG",{});var AGr=s(Sre);Kto=r(AGr,"xlm-roberta-xl"),AGr.forEach(t),Zto=r(Mx," \u2014 "),rB=n(Mx,"A",{href:!0});var yGr=s(rB);eao=r(yGr,"RobertaTokenizer"),yGr.forEach(t),oao=r(Mx," or "),tB=n(Mx,"A",{href:!0});var LGr=s(tB);rao=r(LGr,"RobertaTokenizerFast"),LGr.forEach(t),tao=r(Mx," (XLM-RoBERTa-XL model)"),Mx.forEach(t),aao=i(S),ws=n(S,"LI",{});var Ex=s(ws);Rre=n(Ex,"STRONG",{});var xGr=s(Rre);nao=r(xGr,"xlnet"),xGr.forEach(t),sao=r(Ex," \u2014 "),aB=n(Ex,"A",{href:!0});var $Gr=s(aB);lao=r($Gr,"XLNetTokenizer"),$Gr.forEach(t),iao=r(Ex," or "),nB=n(Ex,"A",{href:!0});var kGr=s(nB);dao=r(kGr,"XLNetTokenizerFast"),kGr.forEach(t),cao=r(Ex," (XLNet model)"),Ex.forEach(t),fao=i(S),As=n(S,"LI",{});var Cx=s(As);Bre=n(Cx,"STRONG",{});var SGr=s(Bre);mao=r(SGr,"yoso"),SGr.forEach(t),gao=r(Cx," \u2014 "),sB=n(Cx,"A",{href:!0});var RGr=s(sB);hao=r(RGr,"AlbertTokenizer"),RGr.forEach(t),pao=r(Cx," or "),lB=n(Cx,"A",{href:!0});var BGr=s(lB);uao=r(BGr,"AlbertTokenizerFast"),BGr.forEach(t),_ao=r(Cx," (YOSO model)"),Cx.forEach(t),S.forEach(t),bao=i(ks),T(qg.$$.fragment,ks),ks.forEach(t),vao=i($s),Ng=n($s,"DIV",{class:!0});var UPe=s(Ng);T($A.$$.fragment,UPe),Fao=i(UPe),Pre=n(UPe,"P",{});var PGr=s(Pre);Tao=r(PGr,"Register a new tokenizer in this mapping."),PGr.forEach(t),UPe.forEach(t),$s.forEach(t),KRe=i(f),mi=n(f,"H2",{class:!0});var JPe=s(mi);jg=n(JPe,"A",{id:!0,class:!0,href:!0});var IGr=s(jg);Ire=n(IGr,"SPAN",{});var qGr=s(Ire);T(kA.$$.fragment,qGr),qGr.forEach(t),IGr.forEach(t),Mao=i(JPe),qre=n(JPe,"SPAN",{});var NGr=s(qre);Eao=r(NGr,"AutoFeatureExtractor"),NGr.forEach(t),JPe.forEach(t),ZRe=i(f),Co=n(f,"DIV",{class:!0});var Ss=s(Co);T(SA.$$.fragment,Ss),Cao=i(Ss),RA=n(Ss,"P",{});var YPe=s(RA);wao=r(YPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),iB=n(YPe,"A",{href:!0});var jGr=s(iB);Aao=r(jGr,"AutoFeatureExtractor.from_pretrained()"),jGr.forEach(t),yao=r(YPe," class method."),YPe.forEach(t),Lao=i(Ss),BA=n(Ss,"P",{});var KPe=s(BA);xao=r(KPe,"This class cannot be instantiated directly using "),Nre=n(KPe,"CODE",{});var DGr=s(Nre);$ao=r(DGr,"__init__()"),DGr.forEach(t),kao=r(KPe," (throws an error)."),KPe.forEach(t),Sao=i(Ss),Xe=n(Ss,"DIV",{class:!0});var Wt=s(Xe);T(PA.$$.fragment,Wt),Rao=i(Wt),jre=n(Wt,"P",{});var GGr=s(jre);Bao=r(GGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),GGr.forEach(t),Pao=i(Wt),Ta=n(Wt,"P",{});var T3=s(Ta);Iao=r(T3,"The feature extractor class to instantiate is selected based on the "),Dre=n(T3,"CODE",{});var OGr=s(Dre);qao=r(OGr,"model_type"),OGr.forEach(t),Nao=r(T3,` property of the config object
(either passed as an argument or loaded from `),Gre=n(T3,"CODE",{});var VGr=s(Gre);jao=r(VGr,"pretrained_model_name_or_path"),VGr.forEach(t),Dao=r(T3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ore=n(T3,"CODE",{});var XGr=s(Ore);Gao=r(XGr,"pretrained_model_name_or_path"),XGr.forEach(t),Oao=r(T3,":"),T3.forEach(t),Vao=i(Wt),ae=n(Wt,"UL",{});var se=s(ae);Dg=n(se,"LI",{});var FEe=s(Dg);Vre=n(FEe,"STRONG",{});var zGr=s(Vre);Xao=r(zGr,"beit"),zGr.forEach(t),zao=r(FEe," \u2014 "),dB=n(FEe,"A",{href:!0});var QGr=s(dB);Qao=r(QGr,"BeitFeatureExtractor"),QGr.forEach(t),Wao=r(FEe," (BEiT model)"),FEe.forEach(t),Hao=i(se),Gg=n(se,"LI",{});var TEe=s(Gg);Xre=n(TEe,"STRONG",{});var WGr=s(Xre);Uao=r(WGr,"clip"),WGr.forEach(t),Jao=r(TEe," \u2014 "),cB=n(TEe,"A",{href:!0});var HGr=s(cB);Yao=r(HGr,"CLIPFeatureExtractor"),HGr.forEach(t),Kao=r(TEe," (CLIP model)"),TEe.forEach(t),Zao=i(se),Og=n(se,"LI",{});var MEe=s(Og);zre=n(MEe,"STRONG",{});var UGr=s(zre);eno=r(UGr,"convnext"),UGr.forEach(t),ono=r(MEe," \u2014 "),fB=n(MEe,"A",{href:!0});var JGr=s(fB);rno=r(JGr,"ConvNextFeatureExtractor"),JGr.forEach(t),tno=r(MEe," (ConvNext model)"),MEe.forEach(t),ano=i(se),Vg=n(se,"LI",{});var EEe=s(Vg);Qre=n(EEe,"STRONG",{});var YGr=s(Qre);nno=r(YGr,"data2vec-audio"),YGr.forEach(t),sno=r(EEe," \u2014 "),mB=n(EEe,"A",{href:!0});var KGr=s(mB);lno=r(KGr,"Wav2Vec2FeatureExtractor"),KGr.forEach(t),ino=r(EEe," (Data2VecAudio model)"),EEe.forEach(t),dno=i(se),Xg=n(se,"LI",{});var CEe=s(Xg);Wre=n(CEe,"STRONG",{});var ZGr=s(Wre);cno=r(ZGr,"data2vec-vision"),ZGr.forEach(t),fno=r(CEe," \u2014 "),gB=n(CEe,"A",{href:!0});var eOr=s(gB);mno=r(eOr,"BeitFeatureExtractor"),eOr.forEach(t),gno=r(CEe," (Data2VecVision model)"),CEe.forEach(t),hno=i(se),zg=n(se,"LI",{});var wEe=s(zg);Hre=n(wEe,"STRONG",{});var oOr=s(Hre);pno=r(oOr,"deit"),oOr.forEach(t),uno=r(wEe," \u2014 "),hB=n(wEe,"A",{href:!0});var rOr=s(hB);_no=r(rOr,"DeiTFeatureExtractor"),rOr.forEach(t),bno=r(wEe," (DeiT model)"),wEe.forEach(t),vno=i(se),Qg=n(se,"LI",{});var AEe=s(Qg);Ure=n(AEe,"STRONG",{});var tOr=s(Ure);Fno=r(tOr,"detr"),tOr.forEach(t),Tno=r(AEe," \u2014 "),pB=n(AEe,"A",{href:!0});var aOr=s(pB);Mno=r(aOr,"DetrFeatureExtractor"),aOr.forEach(t),Eno=r(AEe," (DETR model)"),AEe.forEach(t),Cno=i(se),Wg=n(se,"LI",{});var yEe=s(Wg);Jre=n(yEe,"STRONG",{});var nOr=s(Jre);wno=r(nOr,"dpt"),nOr.forEach(t),Ano=r(yEe," \u2014 "),uB=n(yEe,"A",{href:!0});var sOr=s(uB);yno=r(sOr,"DPTFeatureExtractor"),sOr.forEach(t),Lno=r(yEe," (DPT model)"),yEe.forEach(t),xno=i(se),Hg=n(se,"LI",{});var LEe=s(Hg);Yre=n(LEe,"STRONG",{});var lOr=s(Yre);$no=r(lOr,"glpn"),lOr.forEach(t),kno=r(LEe," \u2014 "),_B=n(LEe,"A",{href:!0});var iOr=s(_B);Sno=r(iOr,"GLPNFeatureExtractor"),iOr.forEach(t),Rno=r(LEe," (GLPN model)"),LEe.forEach(t),Bno=i(se),Ug=n(se,"LI",{});var xEe=s(Ug);Kre=n(xEe,"STRONG",{});var dOr=s(Kre);Pno=r(dOr,"hubert"),dOr.forEach(t),Ino=r(xEe," \u2014 "),bB=n(xEe,"A",{href:!0});var cOr=s(bB);qno=r(cOr,"Wav2Vec2FeatureExtractor"),cOr.forEach(t),Nno=r(xEe," (Hubert model)"),xEe.forEach(t),jno=i(se),Jg=n(se,"LI",{});var $Ee=s(Jg);Zre=n($Ee,"STRONG",{});var fOr=s(Zre);Dno=r(fOr,"layoutlmv2"),fOr.forEach(t),Gno=r($Ee," \u2014 "),vB=n($Ee,"A",{href:!0});var mOr=s(vB);Ono=r(mOr,"LayoutLMv2FeatureExtractor"),mOr.forEach(t),Vno=r($Ee," (LayoutLMv2 model)"),$Ee.forEach(t),Xno=i(se),Yg=n(se,"LI",{});var kEe=s(Yg);ete=n(kEe,"STRONG",{});var gOr=s(ete);zno=r(gOr,"maskformer"),gOr.forEach(t),Qno=r(kEe," \u2014 "),FB=n(kEe,"A",{href:!0});var hOr=s(FB);Wno=r(hOr,"MaskFormerFeatureExtractor"),hOr.forEach(t),Hno=r(kEe," (MaskFormer model)"),kEe.forEach(t),Uno=i(se),Kg=n(se,"LI",{});var SEe=s(Kg);ote=n(SEe,"STRONG",{});var pOr=s(ote);Jno=r(pOr,"perceiver"),pOr.forEach(t),Yno=r(SEe," \u2014 "),TB=n(SEe,"A",{href:!0});var uOr=s(TB);Kno=r(uOr,"PerceiverFeatureExtractor"),uOr.forEach(t),Zno=r(SEe," (Perceiver model)"),SEe.forEach(t),eso=i(se),Zg=n(se,"LI",{});var REe=s(Zg);rte=n(REe,"STRONG",{});var _Or=s(rte);oso=r(_Or,"poolformer"),_Or.forEach(t),rso=r(REe," \u2014 "),MB=n(REe,"A",{href:!0});var bOr=s(MB);tso=r(bOr,"PoolFormerFeatureExtractor"),bOr.forEach(t),aso=r(REe," (PoolFormer model)"),REe.forEach(t),nso=i(se),eh=n(se,"LI",{});var BEe=s(eh);tte=n(BEe,"STRONG",{});var vOr=s(tte);sso=r(vOr,"regnet"),vOr.forEach(t),lso=r(BEe," \u2014 "),EB=n(BEe,"A",{href:!0});var FOr=s(EB);iso=r(FOr,"ConvNextFeatureExtractor"),FOr.forEach(t),dso=r(BEe," (RegNet model)"),BEe.forEach(t),cso=i(se),oh=n(se,"LI",{});var PEe=s(oh);ate=n(PEe,"STRONG",{});var TOr=s(ate);fso=r(TOr,"resnet"),TOr.forEach(t),mso=r(PEe," \u2014 "),CB=n(PEe,"A",{href:!0});var MOr=s(CB);gso=r(MOr,"ConvNextFeatureExtractor"),MOr.forEach(t),hso=r(PEe," (ResNet model)"),PEe.forEach(t),pso=i(se),rh=n(se,"LI",{});var IEe=s(rh);nte=n(IEe,"STRONG",{});var EOr=s(nte);uso=r(EOr,"segformer"),EOr.forEach(t),_so=r(IEe," \u2014 "),wB=n(IEe,"A",{href:!0});var COr=s(wB);bso=r(COr,"SegformerFeatureExtractor"),COr.forEach(t),vso=r(IEe," (SegFormer model)"),IEe.forEach(t),Fso=i(se),th=n(se,"LI",{});var qEe=s(th);ste=n(qEe,"STRONG",{});var wOr=s(ste);Tso=r(wOr,"speech_to_text"),wOr.forEach(t),Mso=r(qEe," \u2014 "),AB=n(qEe,"A",{href:!0});var AOr=s(AB);Eso=r(AOr,"Speech2TextFeatureExtractor"),AOr.forEach(t),Cso=r(qEe," (Speech2Text model)"),qEe.forEach(t),wso=i(se),ah=n(se,"LI",{});var NEe=s(ah);lte=n(NEe,"STRONG",{});var yOr=s(lte);Aso=r(yOr,"swin"),yOr.forEach(t),yso=r(NEe," \u2014 "),yB=n(NEe,"A",{href:!0});var LOr=s(yB);Lso=r(LOr,"ViTFeatureExtractor"),LOr.forEach(t),xso=r(NEe," (Swin model)"),NEe.forEach(t),$so=i(se),nh=n(se,"LI",{});var jEe=s(nh);ite=n(jEe,"STRONG",{});var xOr=s(ite);kso=r(xOr,"van"),xOr.forEach(t),Sso=r(jEe," \u2014 "),LB=n(jEe,"A",{href:!0});var $Or=s(LB);Rso=r($Or,"ConvNextFeatureExtractor"),$Or.forEach(t),Bso=r(jEe," (VAN model)"),jEe.forEach(t),Pso=i(se),sh=n(se,"LI",{});var DEe=s(sh);dte=n(DEe,"STRONG",{});var kOr=s(dte);Iso=r(kOr,"vit"),kOr.forEach(t),qso=r(DEe," \u2014 "),xB=n(DEe,"A",{href:!0});var SOr=s(xB);Nso=r(SOr,"ViTFeatureExtractor"),SOr.forEach(t),jso=r(DEe," (ViT model)"),DEe.forEach(t),Dso=i(se),lh=n(se,"LI",{});var GEe=s(lh);cte=n(GEe,"STRONG",{});var ROr=s(cte);Gso=r(ROr,"vit_mae"),ROr.forEach(t),Oso=r(GEe," \u2014 "),$B=n(GEe,"A",{href:!0});var BOr=s($B);Vso=r(BOr,"ViTFeatureExtractor"),BOr.forEach(t),Xso=r(GEe," (ViTMAE model)"),GEe.forEach(t),zso=i(se),ih=n(se,"LI",{});var OEe=s(ih);fte=n(OEe,"STRONG",{});var POr=s(fte);Qso=r(POr,"wav2vec2"),POr.forEach(t),Wso=r(OEe," \u2014 "),kB=n(OEe,"A",{href:!0});var IOr=s(kB);Hso=r(IOr,"Wav2Vec2FeatureExtractor"),IOr.forEach(t),Uso=r(OEe," (Wav2Vec2 model)"),OEe.forEach(t),se.forEach(t),Jso=i(Wt),T(dh.$$.fragment,Wt),Yso=i(Wt),T(ch.$$.fragment,Wt),Wt.forEach(t),Kso=i(Ss),fh=n(Ss,"DIV",{class:!0});var ZPe=s(fh);T(IA.$$.fragment,ZPe),Zso=i(ZPe),mte=n(ZPe,"P",{});var qOr=s(mte);elo=r(qOr,"Register a new feature extractor for this class."),qOr.forEach(t),ZPe.forEach(t),Ss.forEach(t),eBe=i(f),gi=n(f,"H2",{class:!0});var eIe=s(gi);mh=n(eIe,"A",{id:!0,class:!0,href:!0});var NOr=s(mh);gte=n(NOr,"SPAN",{});var jOr=s(gte);T(qA.$$.fragment,jOr),jOr.forEach(t),NOr.forEach(t),olo=i(eIe),hte=n(eIe,"SPAN",{});var DOr=s(hte);rlo=r(DOr,"AutoProcessor"),DOr.forEach(t),eIe.forEach(t),oBe=i(f),wo=n(f,"DIV",{class:!0});var Rs=s(wo);T(NA.$$.fragment,Rs),tlo=i(Rs),jA=n(Rs,"P",{});var oIe=s(jA);alo=r(oIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SB=n(oIe,"A",{href:!0});var GOr=s(SB);nlo=r(GOr,"AutoProcessor.from_pretrained()"),GOr.forEach(t),slo=r(oIe," class method."),oIe.forEach(t),llo=i(Rs),DA=n(Rs,"P",{});var rIe=s(DA);ilo=r(rIe,"This class cannot be instantiated directly using "),pte=n(rIe,"CODE",{});var OOr=s(pte);dlo=r(OOr,"__init__()"),OOr.forEach(t),clo=r(rIe," (throws an error)."),rIe.forEach(t),flo=i(Rs),ze=n(Rs,"DIV",{class:!0});var Ht=s(ze);T(GA.$$.fragment,Ht),mlo=i(Ht),ute=n(Ht,"P",{});var VOr=s(ute);glo=r(VOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),VOr.forEach(t),hlo=i(Ht),hi=n(Ht,"P",{});var eY=s(hi);plo=r(eY,"The processor class to instantiate is selected based on the "),_te=n(eY,"CODE",{});var XOr=s(_te);ulo=r(XOr,"model_type"),XOr.forEach(t),_lo=r(eY,` property of the config object (either
passed as an argument or loaded from `),bte=n(eY,"CODE",{});var zOr=s(bte);blo=r(zOr,"pretrained_model_name_or_path"),zOr.forEach(t),vlo=r(eY," if possible):"),eY.forEach(t),Flo=i(Ht),be=n(Ht,"UL",{});var Fe=s(be);gh=n(Fe,"LI",{});var VEe=s(gh);vte=n(VEe,"STRONG",{});var QOr=s(vte);Tlo=r(QOr,"clip"),QOr.forEach(t),Mlo=r(VEe," \u2014 "),RB=n(VEe,"A",{href:!0});var WOr=s(RB);Elo=r(WOr,"CLIPProcessor"),WOr.forEach(t),Clo=r(VEe," (CLIP model)"),VEe.forEach(t),wlo=i(Fe),hh=n(Fe,"LI",{});var XEe=s(hh);Fte=n(XEe,"STRONG",{});var HOr=s(Fte);Alo=r(HOr,"layoutlmv2"),HOr.forEach(t),ylo=r(XEe," \u2014 "),BB=n(XEe,"A",{href:!0});var UOr=s(BB);Llo=r(UOr,"LayoutLMv2Processor"),UOr.forEach(t),xlo=r(XEe," (LayoutLMv2 model)"),XEe.forEach(t),$lo=i(Fe),ph=n(Fe,"LI",{});var zEe=s(ph);Tte=n(zEe,"STRONG",{});var JOr=s(Tte);klo=r(JOr,"layoutxlm"),JOr.forEach(t),Slo=r(zEe," \u2014 "),PB=n(zEe,"A",{href:!0});var YOr=s(PB);Rlo=r(YOr,"LayoutXLMProcessor"),YOr.forEach(t),Blo=r(zEe," (LayoutXLM model)"),zEe.forEach(t),Plo=i(Fe),uh=n(Fe,"LI",{});var QEe=s(uh);Mte=n(QEe,"STRONG",{});var KOr=s(Mte);Ilo=r(KOr,"sew"),KOr.forEach(t),qlo=r(QEe," \u2014 "),IB=n(QEe,"A",{href:!0});var ZOr=s(IB);Nlo=r(ZOr,"Wav2Vec2Processor"),ZOr.forEach(t),jlo=r(QEe," (SEW model)"),QEe.forEach(t),Dlo=i(Fe),_h=n(Fe,"LI",{});var WEe=s(_h);Ete=n(WEe,"STRONG",{});var eVr=s(Ete);Glo=r(eVr,"sew-d"),eVr.forEach(t),Olo=r(WEe," \u2014 "),qB=n(WEe,"A",{href:!0});var oVr=s(qB);Vlo=r(oVr,"Wav2Vec2Processor"),oVr.forEach(t),Xlo=r(WEe," (SEW-D model)"),WEe.forEach(t),zlo=i(Fe),bh=n(Fe,"LI",{});var HEe=s(bh);Cte=n(HEe,"STRONG",{});var rVr=s(Cte);Qlo=r(rVr,"speech_to_text"),rVr.forEach(t),Wlo=r(HEe," \u2014 "),NB=n(HEe,"A",{href:!0});var tVr=s(NB);Hlo=r(tVr,"Speech2TextProcessor"),tVr.forEach(t),Ulo=r(HEe," (Speech2Text model)"),HEe.forEach(t),Jlo=i(Fe),vh=n(Fe,"LI",{});var UEe=s(vh);wte=n(UEe,"STRONG",{});var aVr=s(wte);Ylo=r(aVr,"speech_to_text_2"),aVr.forEach(t),Klo=r(UEe," \u2014 "),jB=n(UEe,"A",{href:!0});var nVr=s(jB);Zlo=r(nVr,"Speech2Text2Processor"),nVr.forEach(t),eio=r(UEe," (Speech2Text2 model)"),UEe.forEach(t),oio=i(Fe),Fh=n(Fe,"LI",{});var JEe=s(Fh);Ate=n(JEe,"STRONG",{});var sVr=s(Ate);rio=r(sVr,"trocr"),sVr.forEach(t),tio=r(JEe," \u2014 "),DB=n(JEe,"A",{href:!0});var lVr=s(DB);aio=r(lVr,"TrOCRProcessor"),lVr.forEach(t),nio=r(JEe," (TrOCR model)"),JEe.forEach(t),sio=i(Fe),Th=n(Fe,"LI",{});var YEe=s(Th);yte=n(YEe,"STRONG",{});var iVr=s(yte);lio=r(iVr,"unispeech"),iVr.forEach(t),iio=r(YEe," \u2014 "),GB=n(YEe,"A",{href:!0});var dVr=s(GB);dio=r(dVr,"Wav2Vec2Processor"),dVr.forEach(t),cio=r(YEe," (UniSpeech model)"),YEe.forEach(t),fio=i(Fe),Mh=n(Fe,"LI",{});var KEe=s(Mh);Lte=n(KEe,"STRONG",{});var cVr=s(Lte);mio=r(cVr,"unispeech-sat"),cVr.forEach(t),gio=r(KEe," \u2014 "),OB=n(KEe,"A",{href:!0});var fVr=s(OB);hio=r(fVr,"Wav2Vec2Processor"),fVr.forEach(t),pio=r(KEe," (UniSpeechSat model)"),KEe.forEach(t),uio=i(Fe),Eh=n(Fe,"LI",{});var ZEe=s(Eh);xte=n(ZEe,"STRONG",{});var mVr=s(xte);_io=r(mVr,"vilt"),mVr.forEach(t),bio=r(ZEe," \u2014 "),VB=n(ZEe,"A",{href:!0});var gVr=s(VB);vio=r(gVr,"ViltProcessor"),gVr.forEach(t),Fio=r(ZEe," (ViLT model)"),ZEe.forEach(t),Tio=i(Fe),Ch=n(Fe,"LI",{});var eCe=s(Ch);$te=n(eCe,"STRONG",{});var hVr=s($te);Mio=r(hVr,"vision-text-dual-encoder"),hVr.forEach(t),Eio=r(eCe," \u2014 "),XB=n(eCe,"A",{href:!0});var pVr=s(XB);Cio=r(pVr,"VisionTextDualEncoderProcessor"),pVr.forEach(t),wio=r(eCe," (VisionTextDualEncoder model)"),eCe.forEach(t),Aio=i(Fe),wh=n(Fe,"LI",{});var oCe=s(wh);kte=n(oCe,"STRONG",{});var uVr=s(kte);yio=r(uVr,"wav2vec2"),uVr.forEach(t),Lio=r(oCe," \u2014 "),zB=n(oCe,"A",{href:!0});var _Vr=s(zB);xio=r(_Vr,"Wav2Vec2Processor"),_Vr.forEach(t),$io=r(oCe," (Wav2Vec2 model)"),oCe.forEach(t),kio=i(Fe),Ah=n(Fe,"LI",{});var rCe=s(Ah);Ste=n(rCe,"STRONG",{});var bVr=s(Ste);Sio=r(bVr,"wavlm"),bVr.forEach(t),Rio=r(rCe," \u2014 "),QB=n(rCe,"A",{href:!0});var vVr=s(QB);Bio=r(vVr,"Wav2Vec2Processor"),vVr.forEach(t),Pio=r(rCe," (WavLM model)"),rCe.forEach(t),Fe.forEach(t),Iio=i(Ht),T(yh.$$.fragment,Ht),qio=i(Ht),T(Lh.$$.fragment,Ht),Ht.forEach(t),Nio=i(Rs),xh=n(Rs,"DIV",{class:!0});var tIe=s(xh);T(OA.$$.fragment,tIe),jio=i(tIe),Rte=n(tIe,"P",{});var FVr=s(Rte);Dio=r(FVr,"Register a new processor for this class."),FVr.forEach(t),tIe.forEach(t),Rs.forEach(t),rBe=i(f),pi=n(f,"H2",{class:!0});var aIe=s(pi);$h=n(aIe,"A",{id:!0,class:!0,href:!0});var TVr=s($h);Bte=n(TVr,"SPAN",{});var MVr=s(Bte);T(VA.$$.fragment,MVr),MVr.forEach(t),TVr.forEach(t),Gio=i(aIe),Pte=n(aIe,"SPAN",{});var EVr=s(Pte);Oio=r(EVr,"AutoModel"),EVr.forEach(t),aIe.forEach(t),tBe=i(f),Ao=n(f,"DIV",{class:!0});var Bs=s(Ao);T(XA.$$.fragment,Bs),Vio=i(Bs),ui=n(Bs,"P",{});var oY=s(ui);Xio=r(oY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WB=n(oY,"A",{href:!0});var CVr=s(WB);zio=r(CVr,"from_pretrained()"),CVr.forEach(t),Qio=r(oY," class method or the "),HB=n(oY,"A",{href:!0});var wVr=s(HB);Wio=r(wVr,"from_config()"),wVr.forEach(t),Hio=r(oY,` class
method.`),oY.forEach(t),Uio=i(Bs),zA=n(Bs,"P",{});var nIe=s(zA);Jio=r(nIe,"This class cannot be instantiated directly using "),Ite=n(nIe,"CODE",{});var AVr=s(Ite);Yio=r(AVr,"__init__()"),AVr.forEach(t),Kio=r(nIe," (throws an error)."),nIe.forEach(t),Zio=i(Bs),Kr=n(Bs,"DIV",{class:!0});var M3=s(Kr);T(QA.$$.fragment,M3),edo=i(M3),qte=n(M3,"P",{});var yVr=s(qte);odo=r(yVr,"Instantiates one of the base model classes of the library from a configuration."),yVr.forEach(t),rdo=i(M3),_i=n(M3,"P",{});var rY=s(_i);tdo=r(rY,`Note:
Loading a model from its configuration file does `),Nte=n(rY,"STRONG",{});var LVr=s(Nte);ado=r(LVr,"not"),LVr.forEach(t),ndo=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UB=n(rY,"A",{href:!0});var xVr=s(UB);sdo=r(xVr,"from_pretrained()"),xVr.forEach(t),ldo=r(rY," to load the model weights."),rY.forEach(t),ido=i(M3),T(kh.$$.fragment,M3),M3.forEach(t),ddo=i(Bs),Qe=n(Bs,"DIV",{class:!0});var Ut=s(Qe);T(WA.$$.fragment,Ut),cdo=i(Ut),jte=n(Ut,"P",{});var $Vr=s(jte);fdo=r($Vr,"Instantiate one of the base model classes of the library from a pretrained model."),$Vr.forEach(t),mdo=i(Ut),Ma=n(Ut,"P",{});var E3=s(Ma);gdo=r(E3,"The model class to instantiate is selected based on the "),Dte=n(E3,"CODE",{});var kVr=s(Dte);hdo=r(kVr,"model_type"),kVr.forEach(t),pdo=r(E3,` property of the config object (either
passed as an argument or loaded from `),Gte=n(E3,"CODE",{});var SVr=s(Gte);udo=r(SVr,"pretrained_model_name_or_path"),SVr.forEach(t),_do=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ote=n(E3,"CODE",{});var RVr=s(Ote);bdo=r(RVr,"pretrained_model_name_or_path"),RVr.forEach(t),vdo=r(E3,":"),E3.forEach(t),Fdo=i(Ut),x=n(Ut,"UL",{});var $=s(x);Sh=n($,"LI",{});var tCe=s(Sh);Vte=n(tCe,"STRONG",{});var BVr=s(Vte);Tdo=r(BVr,"albert"),BVr.forEach(t),Mdo=r(tCe," \u2014 "),JB=n(tCe,"A",{href:!0});var PVr=s(JB);Edo=r(PVr,"AlbertModel"),PVr.forEach(t),Cdo=r(tCe," (ALBERT model)"),tCe.forEach(t),wdo=i($),Rh=n($,"LI",{});var aCe=s(Rh);Xte=n(aCe,"STRONG",{});var IVr=s(Xte);Ado=r(IVr,"bart"),IVr.forEach(t),ydo=r(aCe," \u2014 "),YB=n(aCe,"A",{href:!0});var qVr=s(YB);Ldo=r(qVr,"BartModel"),qVr.forEach(t),xdo=r(aCe," (BART model)"),aCe.forEach(t),$do=i($),Bh=n($,"LI",{});var nCe=s(Bh);zte=n(nCe,"STRONG",{});var NVr=s(zte);kdo=r(NVr,"beit"),NVr.forEach(t),Sdo=r(nCe," \u2014 "),KB=n(nCe,"A",{href:!0});var jVr=s(KB);Rdo=r(jVr,"BeitModel"),jVr.forEach(t),Bdo=r(nCe," (BEiT model)"),nCe.forEach(t),Pdo=i($),Ph=n($,"LI",{});var sCe=s(Ph);Qte=n(sCe,"STRONG",{});var DVr=s(Qte);Ido=r(DVr,"bert"),DVr.forEach(t),qdo=r(sCe," \u2014 "),ZB=n(sCe,"A",{href:!0});var GVr=s(ZB);Ndo=r(GVr,"BertModel"),GVr.forEach(t),jdo=r(sCe," (BERT model)"),sCe.forEach(t),Ddo=i($),Ih=n($,"LI",{});var lCe=s(Ih);Wte=n(lCe,"STRONG",{});var OVr=s(Wte);Gdo=r(OVr,"bert-generation"),OVr.forEach(t),Odo=r(lCe," \u2014 "),eP=n(lCe,"A",{href:!0});var VVr=s(eP);Vdo=r(VVr,"BertGenerationEncoder"),VVr.forEach(t),Xdo=r(lCe," (Bert Generation model)"),lCe.forEach(t),zdo=i($),qh=n($,"LI",{});var iCe=s(qh);Hte=n(iCe,"STRONG",{});var XVr=s(Hte);Qdo=r(XVr,"big_bird"),XVr.forEach(t),Wdo=r(iCe," \u2014 "),oP=n(iCe,"A",{href:!0});var zVr=s(oP);Hdo=r(zVr,"BigBirdModel"),zVr.forEach(t),Udo=r(iCe," (BigBird model)"),iCe.forEach(t),Jdo=i($),Nh=n($,"LI",{});var dCe=s(Nh);Ute=n(dCe,"STRONG",{});var QVr=s(Ute);Ydo=r(QVr,"bigbird_pegasus"),QVr.forEach(t),Kdo=r(dCe," \u2014 "),rP=n(dCe,"A",{href:!0});var WVr=s(rP);Zdo=r(WVr,"BigBirdPegasusModel"),WVr.forEach(t),eco=r(dCe," (BigBirdPegasus model)"),dCe.forEach(t),oco=i($),jh=n($,"LI",{});var cCe=s(jh);Jte=n(cCe,"STRONG",{});var HVr=s(Jte);rco=r(HVr,"blenderbot"),HVr.forEach(t),tco=r(cCe," \u2014 "),tP=n(cCe,"A",{href:!0});var UVr=s(tP);aco=r(UVr,"BlenderbotModel"),UVr.forEach(t),nco=r(cCe," (Blenderbot model)"),cCe.forEach(t),sco=i($),Dh=n($,"LI",{});var fCe=s(Dh);Yte=n(fCe,"STRONG",{});var JVr=s(Yte);lco=r(JVr,"blenderbot-small"),JVr.forEach(t),ico=r(fCe," \u2014 "),aP=n(fCe,"A",{href:!0});var YVr=s(aP);dco=r(YVr,"BlenderbotSmallModel"),YVr.forEach(t),cco=r(fCe," (BlenderbotSmall model)"),fCe.forEach(t),fco=i($),Gh=n($,"LI",{});var mCe=s(Gh);Kte=n(mCe,"STRONG",{});var KVr=s(Kte);mco=r(KVr,"camembert"),KVr.forEach(t),gco=r(mCe," \u2014 "),nP=n(mCe,"A",{href:!0});var ZVr=s(nP);hco=r(ZVr,"CamembertModel"),ZVr.forEach(t),pco=r(mCe," (CamemBERT model)"),mCe.forEach(t),uco=i($),Oh=n($,"LI",{});var gCe=s(Oh);Zte=n(gCe,"STRONG",{});var eXr=s(Zte);_co=r(eXr,"canine"),eXr.forEach(t),bco=r(gCe," \u2014 "),sP=n(gCe,"A",{href:!0});var oXr=s(sP);vco=r(oXr,"CanineModel"),oXr.forEach(t),Fco=r(gCe," (Canine model)"),gCe.forEach(t),Tco=i($),Vh=n($,"LI",{});var hCe=s(Vh);eae=n(hCe,"STRONG",{});var rXr=s(eae);Mco=r(rXr,"clip"),rXr.forEach(t),Eco=r(hCe," \u2014 "),lP=n(hCe,"A",{href:!0});var tXr=s(lP);Cco=r(tXr,"CLIPModel"),tXr.forEach(t),wco=r(hCe," (CLIP model)"),hCe.forEach(t),Aco=i($),Xh=n($,"LI",{});var pCe=s(Xh);oae=n(pCe,"STRONG",{});var aXr=s(oae);yco=r(aXr,"convbert"),aXr.forEach(t),Lco=r(pCe," \u2014 "),iP=n(pCe,"A",{href:!0});var nXr=s(iP);xco=r(nXr,"ConvBertModel"),nXr.forEach(t),$co=r(pCe," (ConvBERT model)"),pCe.forEach(t),kco=i($),zh=n($,"LI",{});var uCe=s(zh);rae=n(uCe,"STRONG",{});var sXr=s(rae);Sco=r(sXr,"convnext"),sXr.forEach(t),Rco=r(uCe," \u2014 "),dP=n(uCe,"A",{href:!0});var lXr=s(dP);Bco=r(lXr,"ConvNextModel"),lXr.forEach(t),Pco=r(uCe," (ConvNext model)"),uCe.forEach(t),Ico=i($),Qh=n($,"LI",{});var _Ce=s(Qh);tae=n(_Ce,"STRONG",{});var iXr=s(tae);qco=r(iXr,"ctrl"),iXr.forEach(t),Nco=r(_Ce," \u2014 "),cP=n(_Ce,"A",{href:!0});var dXr=s(cP);jco=r(dXr,"CTRLModel"),dXr.forEach(t),Dco=r(_Ce," (CTRL model)"),_Ce.forEach(t),Gco=i($),Wh=n($,"LI",{});var bCe=s(Wh);aae=n(bCe,"STRONG",{});var cXr=s(aae);Oco=r(cXr,"data2vec-audio"),cXr.forEach(t),Vco=r(bCe," \u2014 "),fP=n(bCe,"A",{href:!0});var fXr=s(fP);Xco=r(fXr,"Data2VecAudioModel"),fXr.forEach(t),zco=r(bCe," (Data2VecAudio model)"),bCe.forEach(t),Qco=i($),Hh=n($,"LI",{});var vCe=s(Hh);nae=n(vCe,"STRONG",{});var mXr=s(nae);Wco=r(mXr,"data2vec-text"),mXr.forEach(t),Hco=r(vCe," \u2014 "),mP=n(vCe,"A",{href:!0});var gXr=s(mP);Uco=r(gXr,"Data2VecTextModel"),gXr.forEach(t),Jco=r(vCe," (Data2VecText model)"),vCe.forEach(t),Yco=i($),Uh=n($,"LI",{});var FCe=s(Uh);sae=n(FCe,"STRONG",{});var hXr=s(sae);Kco=r(hXr,"data2vec-vision"),hXr.forEach(t),Zco=r(FCe," \u2014 "),gP=n(FCe,"A",{href:!0});var pXr=s(gP);efo=r(pXr,"Data2VecVisionModel"),pXr.forEach(t),ofo=r(FCe," (Data2VecVision model)"),FCe.forEach(t),rfo=i($),Jh=n($,"LI",{});var TCe=s(Jh);lae=n(TCe,"STRONG",{});var uXr=s(lae);tfo=r(uXr,"deberta"),uXr.forEach(t),afo=r(TCe," \u2014 "),hP=n(TCe,"A",{href:!0});var _Xr=s(hP);nfo=r(_Xr,"DebertaModel"),_Xr.forEach(t),sfo=r(TCe," (DeBERTa model)"),TCe.forEach(t),lfo=i($),Yh=n($,"LI",{});var MCe=s(Yh);iae=n(MCe,"STRONG",{});var bXr=s(iae);ifo=r(bXr,"deberta-v2"),bXr.forEach(t),dfo=r(MCe," \u2014 "),pP=n(MCe,"A",{href:!0});var vXr=s(pP);cfo=r(vXr,"DebertaV2Model"),vXr.forEach(t),ffo=r(MCe," (DeBERTa-v2 model)"),MCe.forEach(t),mfo=i($),Kh=n($,"LI",{});var ECe=s(Kh);dae=n(ECe,"STRONG",{});var FXr=s(dae);gfo=r(FXr,"decision_transformer"),FXr.forEach(t),hfo=r(ECe," \u2014 "),uP=n(ECe,"A",{href:!0});var TXr=s(uP);pfo=r(TXr,"DecisionTransformerModel"),TXr.forEach(t),ufo=r(ECe," (Decision Transformer model)"),ECe.forEach(t),_fo=i($),Zh=n($,"LI",{});var CCe=s(Zh);cae=n(CCe,"STRONG",{});var MXr=s(cae);bfo=r(MXr,"deit"),MXr.forEach(t),vfo=r(CCe," \u2014 "),_P=n(CCe,"A",{href:!0});var EXr=s(_P);Ffo=r(EXr,"DeiTModel"),EXr.forEach(t),Tfo=r(CCe," (DeiT model)"),CCe.forEach(t),Mfo=i($),ep=n($,"LI",{});var wCe=s(ep);fae=n(wCe,"STRONG",{});var CXr=s(fae);Efo=r(CXr,"detr"),CXr.forEach(t),Cfo=r(wCe," \u2014 "),bP=n(wCe,"A",{href:!0});var wXr=s(bP);wfo=r(wXr,"DetrModel"),wXr.forEach(t),Afo=r(wCe," (DETR model)"),wCe.forEach(t),yfo=i($),op=n($,"LI",{});var ACe=s(op);mae=n(ACe,"STRONG",{});var AXr=s(mae);Lfo=r(AXr,"distilbert"),AXr.forEach(t),xfo=r(ACe," \u2014 "),vP=n(ACe,"A",{href:!0});var yXr=s(vP);$fo=r(yXr,"DistilBertModel"),yXr.forEach(t),kfo=r(ACe," (DistilBERT model)"),ACe.forEach(t),Sfo=i($),rp=n($,"LI",{});var yCe=s(rp);gae=n(yCe,"STRONG",{});var LXr=s(gae);Rfo=r(LXr,"dpr"),LXr.forEach(t),Bfo=r(yCe," \u2014 "),FP=n(yCe,"A",{href:!0});var xXr=s(FP);Pfo=r(xXr,"DPRQuestionEncoder"),xXr.forEach(t),Ifo=r(yCe," (DPR model)"),yCe.forEach(t),qfo=i($),tp=n($,"LI",{});var LCe=s(tp);hae=n(LCe,"STRONG",{});var $Xr=s(hae);Nfo=r($Xr,"dpt"),$Xr.forEach(t),jfo=r(LCe," \u2014 "),TP=n(LCe,"A",{href:!0});var kXr=s(TP);Dfo=r(kXr,"DPTModel"),kXr.forEach(t),Gfo=r(LCe," (DPT model)"),LCe.forEach(t),Ofo=i($),ap=n($,"LI",{});var xCe=s(ap);pae=n(xCe,"STRONG",{});var SXr=s(pae);Vfo=r(SXr,"electra"),SXr.forEach(t),Xfo=r(xCe," \u2014 "),MP=n(xCe,"A",{href:!0});var RXr=s(MP);zfo=r(RXr,"ElectraModel"),RXr.forEach(t),Qfo=r(xCe," (ELECTRA model)"),xCe.forEach(t),Wfo=i($),np=n($,"LI",{});var $Ce=s(np);uae=n($Ce,"STRONG",{});var BXr=s(uae);Hfo=r(BXr,"flaubert"),BXr.forEach(t),Ufo=r($Ce," \u2014 "),EP=n($Ce,"A",{href:!0});var PXr=s(EP);Jfo=r(PXr,"FlaubertModel"),PXr.forEach(t),Yfo=r($Ce," (FlauBERT model)"),$Ce.forEach(t),Kfo=i($),sp=n($,"LI",{});var kCe=s(sp);_ae=n(kCe,"STRONG",{});var IXr=s(_ae);Zfo=r(IXr,"fnet"),IXr.forEach(t),emo=r(kCe," \u2014 "),CP=n(kCe,"A",{href:!0});var qXr=s(CP);omo=r(qXr,"FNetModel"),qXr.forEach(t),rmo=r(kCe," (FNet model)"),kCe.forEach(t),tmo=i($),lp=n($,"LI",{});var SCe=s(lp);bae=n(SCe,"STRONG",{});var NXr=s(bae);amo=r(NXr,"fsmt"),NXr.forEach(t),nmo=r(SCe," \u2014 "),wP=n(SCe,"A",{href:!0});var jXr=s(wP);smo=r(jXr,"FSMTModel"),jXr.forEach(t),lmo=r(SCe," (FairSeq Machine-Translation model)"),SCe.forEach(t),imo=i($),ys=n($,"LI",{});var wx=s(ys);vae=n(wx,"STRONG",{});var DXr=s(vae);dmo=r(DXr,"funnel"),DXr.forEach(t),cmo=r(wx," \u2014 "),AP=n(wx,"A",{href:!0});var GXr=s(AP);fmo=r(GXr,"FunnelModel"),GXr.forEach(t),mmo=r(wx," or "),yP=n(wx,"A",{href:!0});var OXr=s(yP);gmo=r(OXr,"FunnelBaseModel"),OXr.forEach(t),hmo=r(wx," (Funnel Transformer model)"),wx.forEach(t),pmo=i($),ip=n($,"LI",{});var RCe=s(ip);Fae=n(RCe,"STRONG",{});var VXr=s(Fae);umo=r(VXr,"glpn"),VXr.forEach(t),_mo=r(RCe," \u2014 "),LP=n(RCe,"A",{href:!0});var XXr=s(LP);bmo=r(XXr,"GLPNModel"),XXr.forEach(t),vmo=r(RCe," (GLPN model)"),RCe.forEach(t),Fmo=i($),dp=n($,"LI",{});var BCe=s(dp);Tae=n(BCe,"STRONG",{});var zXr=s(Tae);Tmo=r(zXr,"gpt2"),zXr.forEach(t),Mmo=r(BCe," \u2014 "),xP=n(BCe,"A",{href:!0});var QXr=s(xP);Emo=r(QXr,"GPT2Model"),QXr.forEach(t),Cmo=r(BCe," (OpenAI GPT-2 model)"),BCe.forEach(t),wmo=i($),cp=n($,"LI",{});var PCe=s(cp);Mae=n(PCe,"STRONG",{});var WXr=s(Mae);Amo=r(WXr,"gpt_neo"),WXr.forEach(t),ymo=r(PCe," \u2014 "),$P=n(PCe,"A",{href:!0});var HXr=s($P);Lmo=r(HXr,"GPTNeoModel"),HXr.forEach(t),xmo=r(PCe," (GPT Neo model)"),PCe.forEach(t),$mo=i($),fp=n($,"LI",{});var ICe=s(fp);Eae=n(ICe,"STRONG",{});var UXr=s(Eae);kmo=r(UXr,"gpt_neox"),UXr.forEach(t),Smo=r(ICe," \u2014 "),kP=n(ICe,"A",{href:!0});var JXr=s(kP);Rmo=r(JXr,"GPTNeoXModel"),JXr.forEach(t),Bmo=r(ICe," (GPTNeoX model)"),ICe.forEach(t),Pmo=i($),mp=n($,"LI",{});var qCe=s(mp);Cae=n(qCe,"STRONG",{});var YXr=s(Cae);Imo=r(YXr,"gptj"),YXr.forEach(t),qmo=r(qCe," \u2014 "),SP=n(qCe,"A",{href:!0});var KXr=s(SP);Nmo=r(KXr,"GPTJModel"),KXr.forEach(t),jmo=r(qCe," (GPT-J model)"),qCe.forEach(t),Dmo=i($),gp=n($,"LI",{});var NCe=s(gp);wae=n(NCe,"STRONG",{});var ZXr=s(wae);Gmo=r(ZXr,"hubert"),ZXr.forEach(t),Omo=r(NCe," \u2014 "),RP=n(NCe,"A",{href:!0});var ezr=s(RP);Vmo=r(ezr,"HubertModel"),ezr.forEach(t),Xmo=r(NCe," (Hubert model)"),NCe.forEach(t),zmo=i($),hp=n($,"LI",{});var jCe=s(hp);Aae=n(jCe,"STRONG",{});var ozr=s(Aae);Qmo=r(ozr,"ibert"),ozr.forEach(t),Wmo=r(jCe," \u2014 "),BP=n(jCe,"A",{href:!0});var rzr=s(BP);Hmo=r(rzr,"IBertModel"),rzr.forEach(t),Umo=r(jCe," (I-BERT model)"),jCe.forEach(t),Jmo=i($),pp=n($,"LI",{});var DCe=s(pp);yae=n(DCe,"STRONG",{});var tzr=s(yae);Ymo=r(tzr,"imagegpt"),tzr.forEach(t),Kmo=r(DCe," \u2014 "),PP=n(DCe,"A",{href:!0});var azr=s(PP);Zmo=r(azr,"ImageGPTModel"),azr.forEach(t),ego=r(DCe," (ImageGPT model)"),DCe.forEach(t),ogo=i($),up=n($,"LI",{});var GCe=s(up);Lae=n(GCe,"STRONG",{});var nzr=s(Lae);rgo=r(nzr,"layoutlm"),nzr.forEach(t),tgo=r(GCe," \u2014 "),IP=n(GCe,"A",{href:!0});var szr=s(IP);ago=r(szr,"LayoutLMModel"),szr.forEach(t),ngo=r(GCe," (LayoutLM model)"),GCe.forEach(t),sgo=i($),_p=n($,"LI",{});var OCe=s(_p);xae=n(OCe,"STRONG",{});var lzr=s(xae);lgo=r(lzr,"layoutlmv2"),lzr.forEach(t),igo=r(OCe," \u2014 "),qP=n(OCe,"A",{href:!0});var izr=s(qP);dgo=r(izr,"LayoutLMv2Model"),izr.forEach(t),cgo=r(OCe," (LayoutLMv2 model)"),OCe.forEach(t),fgo=i($),bp=n($,"LI",{});var VCe=s(bp);$ae=n(VCe,"STRONG",{});var dzr=s($ae);mgo=r(dzr,"led"),dzr.forEach(t),ggo=r(VCe," \u2014 "),NP=n(VCe,"A",{href:!0});var czr=s(NP);hgo=r(czr,"LEDModel"),czr.forEach(t),pgo=r(VCe," (LED model)"),VCe.forEach(t),ugo=i($),vp=n($,"LI",{});var XCe=s(vp);kae=n(XCe,"STRONG",{});var fzr=s(kae);_go=r(fzr,"longformer"),fzr.forEach(t),bgo=r(XCe," \u2014 "),jP=n(XCe,"A",{href:!0});var mzr=s(jP);vgo=r(mzr,"LongformerModel"),mzr.forEach(t),Fgo=r(XCe," (Longformer model)"),XCe.forEach(t),Tgo=i($),Fp=n($,"LI",{});var zCe=s(Fp);Sae=n(zCe,"STRONG",{});var gzr=s(Sae);Mgo=r(gzr,"luke"),gzr.forEach(t),Ego=r(zCe," \u2014 "),DP=n(zCe,"A",{href:!0});var hzr=s(DP);Cgo=r(hzr,"LukeModel"),hzr.forEach(t),wgo=r(zCe," (LUKE model)"),zCe.forEach(t),Ago=i($),Tp=n($,"LI",{});var QCe=s(Tp);Rae=n(QCe,"STRONG",{});var pzr=s(Rae);ygo=r(pzr,"lxmert"),pzr.forEach(t),Lgo=r(QCe," \u2014 "),GP=n(QCe,"A",{href:!0});var uzr=s(GP);xgo=r(uzr,"LxmertModel"),uzr.forEach(t),$go=r(QCe," (LXMERT model)"),QCe.forEach(t),kgo=i($),Mp=n($,"LI",{});var WCe=s(Mp);Bae=n(WCe,"STRONG",{});var _zr=s(Bae);Sgo=r(_zr,"m2m_100"),_zr.forEach(t),Rgo=r(WCe," \u2014 "),OP=n(WCe,"A",{href:!0});var bzr=s(OP);Bgo=r(bzr,"M2M100Model"),bzr.forEach(t),Pgo=r(WCe," (M2M100 model)"),WCe.forEach(t),Igo=i($),Ep=n($,"LI",{});var HCe=s(Ep);Pae=n(HCe,"STRONG",{});var vzr=s(Pae);qgo=r(vzr,"marian"),vzr.forEach(t),Ngo=r(HCe," \u2014 "),VP=n(HCe,"A",{href:!0});var Fzr=s(VP);jgo=r(Fzr,"MarianModel"),Fzr.forEach(t),Dgo=r(HCe," (Marian model)"),HCe.forEach(t),Ggo=i($),Cp=n($,"LI",{});var UCe=s(Cp);Iae=n(UCe,"STRONG",{});var Tzr=s(Iae);Ogo=r(Tzr,"maskformer"),Tzr.forEach(t),Vgo=r(UCe," \u2014 "),XP=n(UCe,"A",{href:!0});var Mzr=s(XP);Xgo=r(Mzr,"MaskFormerModel"),Mzr.forEach(t),zgo=r(UCe," (MaskFormer model)"),UCe.forEach(t),Qgo=i($),wp=n($,"LI",{});var JCe=s(wp);qae=n(JCe,"STRONG",{});var Ezr=s(qae);Wgo=r(Ezr,"mbart"),Ezr.forEach(t),Hgo=r(JCe," \u2014 "),zP=n(JCe,"A",{href:!0});var Czr=s(zP);Ugo=r(Czr,"MBartModel"),Czr.forEach(t),Jgo=r(JCe," (mBART model)"),JCe.forEach(t),Ygo=i($),Ap=n($,"LI",{});var YCe=s(Ap);Nae=n(YCe,"STRONG",{});var wzr=s(Nae);Kgo=r(wzr,"megatron-bert"),wzr.forEach(t),Zgo=r(YCe," \u2014 "),QP=n(YCe,"A",{href:!0});var Azr=s(QP);eho=r(Azr,"MegatronBertModel"),Azr.forEach(t),oho=r(YCe," (MegatronBert model)"),YCe.forEach(t),rho=i($),yp=n($,"LI",{});var KCe=s(yp);jae=n(KCe,"STRONG",{});var yzr=s(jae);tho=r(yzr,"mobilebert"),yzr.forEach(t),aho=r(KCe," \u2014 "),WP=n(KCe,"A",{href:!0});var Lzr=s(WP);nho=r(Lzr,"MobileBertModel"),Lzr.forEach(t),sho=r(KCe," (MobileBERT model)"),KCe.forEach(t),lho=i($),Lp=n($,"LI",{});var ZCe=s(Lp);Dae=n(ZCe,"STRONG",{});var xzr=s(Dae);iho=r(xzr,"mpnet"),xzr.forEach(t),dho=r(ZCe," \u2014 "),HP=n(ZCe,"A",{href:!0});var $zr=s(HP);cho=r($zr,"MPNetModel"),$zr.forEach(t),fho=r(ZCe," (MPNet model)"),ZCe.forEach(t),mho=i($),xp=n($,"LI",{});var e3e=s(xp);Gae=n(e3e,"STRONG",{});var kzr=s(Gae);gho=r(kzr,"mt5"),kzr.forEach(t),hho=r(e3e," \u2014 "),UP=n(e3e,"A",{href:!0});var Szr=s(UP);pho=r(Szr,"MT5Model"),Szr.forEach(t),uho=r(e3e," (mT5 model)"),e3e.forEach(t),_ho=i($),$p=n($,"LI",{});var o3e=s($p);Oae=n(o3e,"STRONG",{});var Rzr=s(Oae);bho=r(Rzr,"nystromformer"),Rzr.forEach(t),vho=r(o3e," \u2014 "),JP=n(o3e,"A",{href:!0});var Bzr=s(JP);Fho=r(Bzr,"NystromformerModel"),Bzr.forEach(t),Tho=r(o3e," (Nystromformer model)"),o3e.forEach(t),Mho=i($),kp=n($,"LI",{});var r3e=s(kp);Vae=n(r3e,"STRONG",{});var Pzr=s(Vae);Eho=r(Pzr,"openai-gpt"),Pzr.forEach(t),Cho=r(r3e," \u2014 "),YP=n(r3e,"A",{href:!0});var Izr=s(YP);who=r(Izr,"OpenAIGPTModel"),Izr.forEach(t),Aho=r(r3e," (OpenAI GPT model)"),r3e.forEach(t),yho=i($),Sp=n($,"LI",{});var t3e=s(Sp);Xae=n(t3e,"STRONG",{});var qzr=s(Xae);Lho=r(qzr,"pegasus"),qzr.forEach(t),xho=r(t3e," \u2014 "),KP=n(t3e,"A",{href:!0});var Nzr=s(KP);$ho=r(Nzr,"PegasusModel"),Nzr.forEach(t),kho=r(t3e," (Pegasus model)"),t3e.forEach(t),Sho=i($),Rp=n($,"LI",{});var a3e=s(Rp);zae=n(a3e,"STRONG",{});var jzr=s(zae);Rho=r(jzr,"perceiver"),jzr.forEach(t),Bho=r(a3e," \u2014 "),ZP=n(a3e,"A",{href:!0});var Dzr=s(ZP);Pho=r(Dzr,"PerceiverModel"),Dzr.forEach(t),Iho=r(a3e," (Perceiver model)"),a3e.forEach(t),qho=i($),Bp=n($,"LI",{});var n3e=s(Bp);Qae=n(n3e,"STRONG",{});var Gzr=s(Qae);Nho=r(Gzr,"plbart"),Gzr.forEach(t),jho=r(n3e," \u2014 "),eI=n(n3e,"A",{href:!0});var Ozr=s(eI);Dho=r(Ozr,"PLBartModel"),Ozr.forEach(t),Gho=r(n3e," (PLBart model)"),n3e.forEach(t),Oho=i($),Pp=n($,"LI",{});var s3e=s(Pp);Wae=n(s3e,"STRONG",{});var Vzr=s(Wae);Vho=r(Vzr,"poolformer"),Vzr.forEach(t),Xho=r(s3e," \u2014 "),oI=n(s3e,"A",{href:!0});var Xzr=s(oI);zho=r(Xzr,"PoolFormerModel"),Xzr.forEach(t),Qho=r(s3e," (PoolFormer model)"),s3e.forEach(t),Who=i($),Ip=n($,"LI",{});var l3e=s(Ip);Hae=n(l3e,"STRONG",{});var zzr=s(Hae);Hho=r(zzr,"prophetnet"),zzr.forEach(t),Uho=r(l3e," \u2014 "),rI=n(l3e,"A",{href:!0});var Qzr=s(rI);Jho=r(Qzr,"ProphetNetModel"),Qzr.forEach(t),Yho=r(l3e," (ProphetNet model)"),l3e.forEach(t),Kho=i($),qp=n($,"LI",{});var i3e=s(qp);Uae=n(i3e,"STRONG",{});var Wzr=s(Uae);Zho=r(Wzr,"qdqbert"),Wzr.forEach(t),epo=r(i3e," \u2014 "),tI=n(i3e,"A",{href:!0});var Hzr=s(tI);opo=r(Hzr,"QDQBertModel"),Hzr.forEach(t),rpo=r(i3e," (QDQBert model)"),i3e.forEach(t),tpo=i($),Np=n($,"LI",{});var d3e=s(Np);Jae=n(d3e,"STRONG",{});var Uzr=s(Jae);apo=r(Uzr,"reformer"),Uzr.forEach(t),npo=r(d3e," \u2014 "),aI=n(d3e,"A",{href:!0});var Jzr=s(aI);spo=r(Jzr,"ReformerModel"),Jzr.forEach(t),lpo=r(d3e," (Reformer model)"),d3e.forEach(t),ipo=i($),jp=n($,"LI",{});var c3e=s(jp);Yae=n(c3e,"STRONG",{});var Yzr=s(Yae);dpo=r(Yzr,"regnet"),Yzr.forEach(t),cpo=r(c3e," \u2014 "),nI=n(c3e,"A",{href:!0});var Kzr=s(nI);fpo=r(Kzr,"RegNetModel"),Kzr.forEach(t),mpo=r(c3e," (RegNet model)"),c3e.forEach(t),gpo=i($),Dp=n($,"LI",{});var f3e=s(Dp);Kae=n(f3e,"STRONG",{});var Zzr=s(Kae);hpo=r(Zzr,"rembert"),Zzr.forEach(t),ppo=r(f3e," \u2014 "),sI=n(f3e,"A",{href:!0});var eQr=s(sI);upo=r(eQr,"RemBertModel"),eQr.forEach(t),_po=r(f3e," (RemBERT model)"),f3e.forEach(t),bpo=i($),Gp=n($,"LI",{});var m3e=s(Gp);Zae=n(m3e,"STRONG",{});var oQr=s(Zae);vpo=r(oQr,"resnet"),oQr.forEach(t),Fpo=r(m3e," \u2014 "),lI=n(m3e,"A",{href:!0});var rQr=s(lI);Tpo=r(rQr,"ResNetModel"),rQr.forEach(t),Mpo=r(m3e," (ResNet model)"),m3e.forEach(t),Epo=i($),Op=n($,"LI",{});var g3e=s(Op);ene=n(g3e,"STRONG",{});var tQr=s(ene);Cpo=r(tQr,"retribert"),tQr.forEach(t),wpo=r(g3e," \u2014 "),iI=n(g3e,"A",{href:!0});var aQr=s(iI);Apo=r(aQr,"RetriBertModel"),aQr.forEach(t),ypo=r(g3e," (RetriBERT model)"),g3e.forEach(t),Lpo=i($),Vp=n($,"LI",{});var h3e=s(Vp);one=n(h3e,"STRONG",{});var nQr=s(one);xpo=r(nQr,"roberta"),nQr.forEach(t),$po=r(h3e," \u2014 "),dI=n(h3e,"A",{href:!0});var sQr=s(dI);kpo=r(sQr,"RobertaModel"),sQr.forEach(t),Spo=r(h3e," (RoBERTa model)"),h3e.forEach(t),Rpo=i($),Xp=n($,"LI",{});var p3e=s(Xp);rne=n(p3e,"STRONG",{});var lQr=s(rne);Bpo=r(lQr,"roformer"),lQr.forEach(t),Ppo=r(p3e," \u2014 "),cI=n(p3e,"A",{href:!0});var iQr=s(cI);Ipo=r(iQr,"RoFormerModel"),iQr.forEach(t),qpo=r(p3e," (RoFormer model)"),p3e.forEach(t),Npo=i($),zp=n($,"LI",{});var u3e=s(zp);tne=n(u3e,"STRONG",{});var dQr=s(tne);jpo=r(dQr,"segformer"),dQr.forEach(t),Dpo=r(u3e," \u2014 "),fI=n(u3e,"A",{href:!0});var cQr=s(fI);Gpo=r(cQr,"SegformerModel"),cQr.forEach(t),Opo=r(u3e," (SegFormer model)"),u3e.forEach(t),Vpo=i($),Qp=n($,"LI",{});var _3e=s(Qp);ane=n(_3e,"STRONG",{});var fQr=s(ane);Xpo=r(fQr,"sew"),fQr.forEach(t),zpo=r(_3e," \u2014 "),mI=n(_3e,"A",{href:!0});var mQr=s(mI);Qpo=r(mQr,"SEWModel"),mQr.forEach(t),Wpo=r(_3e," (SEW model)"),_3e.forEach(t),Hpo=i($),Wp=n($,"LI",{});var b3e=s(Wp);nne=n(b3e,"STRONG",{});var gQr=s(nne);Upo=r(gQr,"sew-d"),gQr.forEach(t),Jpo=r(b3e," \u2014 "),gI=n(b3e,"A",{href:!0});var hQr=s(gI);Ypo=r(hQr,"SEWDModel"),hQr.forEach(t),Kpo=r(b3e," (SEW-D model)"),b3e.forEach(t),Zpo=i($),Hp=n($,"LI",{});var v3e=s(Hp);sne=n(v3e,"STRONG",{});var pQr=s(sne);euo=r(pQr,"speech_to_text"),pQr.forEach(t),ouo=r(v3e," \u2014 "),hI=n(v3e,"A",{href:!0});var uQr=s(hI);ruo=r(uQr,"Speech2TextModel"),uQr.forEach(t),tuo=r(v3e," (Speech2Text model)"),v3e.forEach(t),auo=i($),Up=n($,"LI",{});var F3e=s(Up);lne=n(F3e,"STRONG",{});var _Qr=s(lne);nuo=r(_Qr,"splinter"),_Qr.forEach(t),suo=r(F3e," \u2014 "),pI=n(F3e,"A",{href:!0});var bQr=s(pI);luo=r(bQr,"SplinterModel"),bQr.forEach(t),iuo=r(F3e," (Splinter model)"),F3e.forEach(t),duo=i($),Jp=n($,"LI",{});var T3e=s(Jp);ine=n(T3e,"STRONG",{});var vQr=s(ine);cuo=r(vQr,"squeezebert"),vQr.forEach(t),fuo=r(T3e," \u2014 "),uI=n(T3e,"A",{href:!0});var FQr=s(uI);muo=r(FQr,"SqueezeBertModel"),FQr.forEach(t),guo=r(T3e," (SqueezeBERT model)"),T3e.forEach(t),huo=i($),Yp=n($,"LI",{});var M3e=s(Yp);dne=n(M3e,"STRONG",{});var TQr=s(dne);puo=r(TQr,"swin"),TQr.forEach(t),uuo=r(M3e," \u2014 "),_I=n(M3e,"A",{href:!0});var MQr=s(_I);_uo=r(MQr,"SwinModel"),MQr.forEach(t),buo=r(M3e," (Swin model)"),M3e.forEach(t),vuo=i($),Kp=n($,"LI",{});var E3e=s(Kp);cne=n(E3e,"STRONG",{});var EQr=s(cne);Fuo=r(EQr,"t5"),EQr.forEach(t),Tuo=r(E3e," \u2014 "),bI=n(E3e,"A",{href:!0});var CQr=s(bI);Muo=r(CQr,"T5Model"),CQr.forEach(t),Euo=r(E3e," (T5 model)"),E3e.forEach(t),Cuo=i($),Zp=n($,"LI",{});var C3e=s(Zp);fne=n(C3e,"STRONG",{});var wQr=s(fne);wuo=r(wQr,"tapas"),wQr.forEach(t),Auo=r(C3e," \u2014 "),vI=n(C3e,"A",{href:!0});var AQr=s(vI);yuo=r(AQr,"TapasModel"),AQr.forEach(t),Luo=r(C3e," (TAPAS model)"),C3e.forEach(t),xuo=i($),eu=n($,"LI",{});var w3e=s(eu);mne=n(w3e,"STRONG",{});var yQr=s(mne);$uo=r(yQr,"transfo-xl"),yQr.forEach(t),kuo=r(w3e," \u2014 "),FI=n(w3e,"A",{href:!0});var LQr=s(FI);Suo=r(LQr,"TransfoXLModel"),LQr.forEach(t),Ruo=r(w3e," (Transformer-XL model)"),w3e.forEach(t),Buo=i($),ou=n($,"LI",{});var A3e=s(ou);gne=n(A3e,"STRONG",{});var xQr=s(gne);Puo=r(xQr,"unispeech"),xQr.forEach(t),Iuo=r(A3e," \u2014 "),TI=n(A3e,"A",{href:!0});var $Qr=s(TI);quo=r($Qr,"UniSpeechModel"),$Qr.forEach(t),Nuo=r(A3e," (UniSpeech model)"),A3e.forEach(t),juo=i($),ru=n($,"LI",{});var y3e=s(ru);hne=n(y3e,"STRONG",{});var kQr=s(hne);Duo=r(kQr,"unispeech-sat"),kQr.forEach(t),Guo=r(y3e," \u2014 "),MI=n(y3e,"A",{href:!0});var SQr=s(MI);Ouo=r(SQr,"UniSpeechSatModel"),SQr.forEach(t),Vuo=r(y3e," (UniSpeechSat model)"),y3e.forEach(t),Xuo=i($),tu=n($,"LI",{});var L3e=s(tu);pne=n(L3e,"STRONG",{});var RQr=s(pne);zuo=r(RQr,"van"),RQr.forEach(t),Quo=r(L3e," \u2014 "),EI=n(L3e,"A",{href:!0});var BQr=s(EI);Wuo=r(BQr,"VanModel"),BQr.forEach(t),Huo=r(L3e," (VAN model)"),L3e.forEach(t),Uuo=i($),au=n($,"LI",{});var x3e=s(au);une=n(x3e,"STRONG",{});var PQr=s(une);Juo=r(PQr,"vilt"),PQr.forEach(t),Yuo=r(x3e," \u2014 "),CI=n(x3e,"A",{href:!0});var IQr=s(CI);Kuo=r(IQr,"ViltModel"),IQr.forEach(t),Zuo=r(x3e," (ViLT model)"),x3e.forEach(t),e_o=i($),nu=n($,"LI",{});var $3e=s(nu);_ne=n($3e,"STRONG",{});var qQr=s(_ne);o_o=r(qQr,"vision-text-dual-encoder"),qQr.forEach(t),r_o=r($3e," \u2014 "),wI=n($3e,"A",{href:!0});var NQr=s(wI);t_o=r(NQr,"VisionTextDualEncoderModel"),NQr.forEach(t),a_o=r($3e," (VisionTextDualEncoder model)"),$3e.forEach(t),n_o=i($),su=n($,"LI",{});var k3e=s(su);bne=n(k3e,"STRONG",{});var jQr=s(bne);s_o=r(jQr,"visual_bert"),jQr.forEach(t),l_o=r(k3e," \u2014 "),AI=n(k3e,"A",{href:!0});var DQr=s(AI);i_o=r(DQr,"VisualBertModel"),DQr.forEach(t),d_o=r(k3e," (VisualBert model)"),k3e.forEach(t),c_o=i($),lu=n($,"LI",{});var S3e=s(lu);vne=n(S3e,"STRONG",{});var GQr=s(vne);f_o=r(GQr,"vit"),GQr.forEach(t),m_o=r(S3e," \u2014 "),yI=n(S3e,"A",{href:!0});var OQr=s(yI);g_o=r(OQr,"ViTModel"),OQr.forEach(t),h_o=r(S3e," (ViT model)"),S3e.forEach(t),p_o=i($),iu=n($,"LI",{});var R3e=s(iu);Fne=n(R3e,"STRONG",{});var VQr=s(Fne);u_o=r(VQr,"vit_mae"),VQr.forEach(t),__o=r(R3e," \u2014 "),LI=n(R3e,"A",{href:!0});var XQr=s(LI);b_o=r(XQr,"ViTMAEModel"),XQr.forEach(t),v_o=r(R3e," (ViTMAE model)"),R3e.forEach(t),F_o=i($),du=n($,"LI",{});var B3e=s(du);Tne=n(B3e,"STRONG",{});var zQr=s(Tne);T_o=r(zQr,"wav2vec2"),zQr.forEach(t),M_o=r(B3e," \u2014 "),xI=n(B3e,"A",{href:!0});var QQr=s(xI);E_o=r(QQr,"Wav2Vec2Model"),QQr.forEach(t),C_o=r(B3e," (Wav2Vec2 model)"),B3e.forEach(t),w_o=i($),cu=n($,"LI",{});var P3e=s(cu);Mne=n(P3e,"STRONG",{});var WQr=s(Mne);A_o=r(WQr,"wavlm"),WQr.forEach(t),y_o=r(P3e," \u2014 "),$I=n(P3e,"A",{href:!0});var HQr=s($I);L_o=r(HQr,"WavLMModel"),HQr.forEach(t),x_o=r(P3e," (WavLM model)"),P3e.forEach(t),$_o=i($),fu=n($,"LI",{});var I3e=s(fu);Ene=n(I3e,"STRONG",{});var UQr=s(Ene);k_o=r(UQr,"xglm"),UQr.forEach(t),S_o=r(I3e," \u2014 "),kI=n(I3e,"A",{href:!0});var JQr=s(kI);R_o=r(JQr,"XGLMModel"),JQr.forEach(t),B_o=r(I3e," (XGLM model)"),I3e.forEach(t),P_o=i($),mu=n($,"LI",{});var q3e=s(mu);Cne=n(q3e,"STRONG",{});var YQr=s(Cne);I_o=r(YQr,"xlm"),YQr.forEach(t),q_o=r(q3e," \u2014 "),SI=n(q3e,"A",{href:!0});var KQr=s(SI);N_o=r(KQr,"XLMModel"),KQr.forEach(t),j_o=r(q3e," (XLM model)"),q3e.forEach(t),D_o=i($),gu=n($,"LI",{});var N3e=s(gu);wne=n(N3e,"STRONG",{});var ZQr=s(wne);G_o=r(ZQr,"xlm-prophetnet"),ZQr.forEach(t),O_o=r(N3e," \u2014 "),RI=n(N3e,"A",{href:!0});var eWr=s(RI);V_o=r(eWr,"XLMProphetNetModel"),eWr.forEach(t),X_o=r(N3e," (XLMProphetNet model)"),N3e.forEach(t),z_o=i($),hu=n($,"LI",{});var j3e=s(hu);Ane=n(j3e,"STRONG",{});var oWr=s(Ane);Q_o=r(oWr,"xlm-roberta"),oWr.forEach(t),W_o=r(j3e," \u2014 "),BI=n(j3e,"A",{href:!0});var rWr=s(BI);H_o=r(rWr,"XLMRobertaModel"),rWr.forEach(t),U_o=r(j3e," (XLM-RoBERTa model)"),j3e.forEach(t),J_o=i($),pu=n($,"LI",{});var D3e=s(pu);yne=n(D3e,"STRONG",{});var tWr=s(yne);Y_o=r(tWr,"xlm-roberta-xl"),tWr.forEach(t),K_o=r(D3e," \u2014 "),PI=n(D3e,"A",{href:!0});var aWr=s(PI);Z_o=r(aWr,"XLMRobertaXLModel"),aWr.forEach(t),e6o=r(D3e," (XLM-RoBERTa-XL model)"),D3e.forEach(t),o6o=i($),uu=n($,"LI",{});var G3e=s(uu);Lne=n(G3e,"STRONG",{});var nWr=s(Lne);r6o=r(nWr,"xlnet"),nWr.forEach(t),t6o=r(G3e," \u2014 "),II=n(G3e,"A",{href:!0});var sWr=s(II);a6o=r(sWr,"XLNetModel"),sWr.forEach(t),n6o=r(G3e," (XLNet model)"),G3e.forEach(t),s6o=i($),_u=n($,"LI",{});var O3e=s(_u);xne=n(O3e,"STRONG",{});var lWr=s(xne);l6o=r(lWr,"yoso"),lWr.forEach(t),i6o=r(O3e," \u2014 "),qI=n(O3e,"A",{href:!0});var iWr=s(qI);d6o=r(iWr,"YosoModel"),iWr.forEach(t),c6o=r(O3e," (YOSO model)"),O3e.forEach(t),$.forEach(t),f6o=i(Ut),bu=n(Ut,"P",{});var V3e=s(bu);m6o=r(V3e,"The model is set in evaluation mode by default using "),$ne=n(V3e,"CODE",{});var dWr=s($ne);g6o=r(dWr,"model.eval()"),dWr.forEach(t),h6o=r(V3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kne=n(V3e,"CODE",{});var cWr=s(kne);p6o=r(cWr,"model.train()"),cWr.forEach(t),V3e.forEach(t),u6o=i(Ut),T(vu.$$.fragment,Ut),Ut.forEach(t),Bs.forEach(t),aBe=i(f),bi=n(f,"H2",{class:!0});var sIe=s(bi);Fu=n(sIe,"A",{id:!0,class:!0,href:!0});var fWr=s(Fu);Sne=n(fWr,"SPAN",{});var mWr=s(Sne);T(HA.$$.fragment,mWr),mWr.forEach(t),fWr.forEach(t),_6o=i(sIe),Rne=n(sIe,"SPAN",{});var gWr=s(Rne);b6o=r(gWr,"AutoModelForPreTraining"),gWr.forEach(t),sIe.forEach(t),nBe=i(f),yo=n(f,"DIV",{class:!0});var Ps=s(yo);T(UA.$$.fragment,Ps),v6o=i(Ps),vi=n(Ps,"P",{});var tY=s(vi);F6o=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NI=n(tY,"A",{href:!0});var hWr=s(NI);T6o=r(hWr,"from_pretrained()"),hWr.forEach(t),M6o=r(tY," class method or the "),jI=n(tY,"A",{href:!0});var pWr=s(jI);E6o=r(pWr,"from_config()"),pWr.forEach(t),C6o=r(tY,` class
method.`),tY.forEach(t),w6o=i(Ps),JA=n(Ps,"P",{});var lIe=s(JA);A6o=r(lIe,"This class cannot be instantiated directly using "),Bne=n(lIe,"CODE",{});var uWr=s(Bne);y6o=r(uWr,"__init__()"),uWr.forEach(t),L6o=r(lIe," (throws an error)."),lIe.forEach(t),x6o=i(Ps),Zr=n(Ps,"DIV",{class:!0});var C3=s(Zr);T(YA.$$.fragment,C3),$6o=i(C3),Pne=n(C3,"P",{});var _Wr=s(Pne);k6o=r(_Wr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_Wr.forEach(t),S6o=i(C3),Fi=n(C3,"P",{});var aY=s(Fi);R6o=r(aY,`Note:
Loading a model from its configuration file does `),Ine=n(aY,"STRONG",{});var bWr=s(Ine);B6o=r(bWr,"not"),bWr.forEach(t),P6o=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DI=n(aY,"A",{href:!0});var vWr=s(DI);I6o=r(vWr,"from_pretrained()"),vWr.forEach(t),q6o=r(aY," to load the model weights."),aY.forEach(t),N6o=i(C3),T(Tu.$$.fragment,C3),C3.forEach(t),j6o=i(Ps),We=n(Ps,"DIV",{class:!0});var Jt=s(We);T(KA.$$.fragment,Jt),D6o=i(Jt),qne=n(Jt,"P",{});var FWr=s(qne);G6o=r(FWr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FWr.forEach(t),O6o=i(Jt),Ea=n(Jt,"P",{});var w3=s(Ea);V6o=r(w3,"The model class to instantiate is selected based on the "),Nne=n(w3,"CODE",{});var TWr=s(Nne);X6o=r(TWr,"model_type"),TWr.forEach(t),z6o=r(w3,` property of the config object (either
passed as an argument or loaded from `),jne=n(w3,"CODE",{});var MWr=s(jne);Q6o=r(MWr,"pretrained_model_name_or_path"),MWr.forEach(t),W6o=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dne=n(w3,"CODE",{});var EWr=s(Dne);H6o=r(EWr,"pretrained_model_name_or_path"),EWr.forEach(t),U6o=r(w3,":"),w3.forEach(t),J6o=i(Jt),G=n(Jt,"UL",{});var V=s(G);Mu=n(V,"LI",{});var X3e=s(Mu);Gne=n(X3e,"STRONG",{});var CWr=s(Gne);Y6o=r(CWr,"albert"),CWr.forEach(t),K6o=r(X3e," \u2014 "),GI=n(X3e,"A",{href:!0});var wWr=s(GI);Z6o=r(wWr,"AlbertForPreTraining"),wWr.forEach(t),e1o=r(X3e," (ALBERT model)"),X3e.forEach(t),o1o=i(V),Eu=n(V,"LI",{});var z3e=s(Eu);One=n(z3e,"STRONG",{});var AWr=s(One);r1o=r(AWr,"bart"),AWr.forEach(t),t1o=r(z3e," \u2014 "),OI=n(z3e,"A",{href:!0});var yWr=s(OI);a1o=r(yWr,"BartForConditionalGeneration"),yWr.forEach(t),n1o=r(z3e," (BART model)"),z3e.forEach(t),s1o=i(V),Cu=n(V,"LI",{});var Q3e=s(Cu);Vne=n(Q3e,"STRONG",{});var LWr=s(Vne);l1o=r(LWr,"bert"),LWr.forEach(t),i1o=r(Q3e," \u2014 "),VI=n(Q3e,"A",{href:!0});var xWr=s(VI);d1o=r(xWr,"BertForPreTraining"),xWr.forEach(t),c1o=r(Q3e," (BERT model)"),Q3e.forEach(t),f1o=i(V),wu=n(V,"LI",{});var W3e=s(wu);Xne=n(W3e,"STRONG",{});var $Wr=s(Xne);m1o=r($Wr,"big_bird"),$Wr.forEach(t),g1o=r(W3e," \u2014 "),XI=n(W3e,"A",{href:!0});var kWr=s(XI);h1o=r(kWr,"BigBirdForPreTraining"),kWr.forEach(t),p1o=r(W3e," (BigBird model)"),W3e.forEach(t),u1o=i(V),Au=n(V,"LI",{});var H3e=s(Au);zne=n(H3e,"STRONG",{});var SWr=s(zne);_1o=r(SWr,"camembert"),SWr.forEach(t),b1o=r(H3e," \u2014 "),zI=n(H3e,"A",{href:!0});var RWr=s(zI);v1o=r(RWr,"CamembertForMaskedLM"),RWr.forEach(t),F1o=r(H3e," (CamemBERT model)"),H3e.forEach(t),T1o=i(V),yu=n(V,"LI",{});var U3e=s(yu);Qne=n(U3e,"STRONG",{});var BWr=s(Qne);M1o=r(BWr,"ctrl"),BWr.forEach(t),E1o=r(U3e," \u2014 "),QI=n(U3e,"A",{href:!0});var PWr=s(QI);C1o=r(PWr,"CTRLLMHeadModel"),PWr.forEach(t),w1o=r(U3e," (CTRL model)"),U3e.forEach(t),A1o=i(V),Lu=n(V,"LI",{});var J3e=s(Lu);Wne=n(J3e,"STRONG",{});var IWr=s(Wne);y1o=r(IWr,"data2vec-text"),IWr.forEach(t),L1o=r(J3e," \u2014 "),WI=n(J3e,"A",{href:!0});var qWr=s(WI);x1o=r(qWr,"Data2VecTextForMaskedLM"),qWr.forEach(t),$1o=r(J3e," (Data2VecText model)"),J3e.forEach(t),k1o=i(V),xu=n(V,"LI",{});var Y3e=s(xu);Hne=n(Y3e,"STRONG",{});var NWr=s(Hne);S1o=r(NWr,"deberta"),NWr.forEach(t),R1o=r(Y3e," \u2014 "),HI=n(Y3e,"A",{href:!0});var jWr=s(HI);B1o=r(jWr,"DebertaForMaskedLM"),jWr.forEach(t),P1o=r(Y3e," (DeBERTa model)"),Y3e.forEach(t),I1o=i(V),$u=n(V,"LI",{});var K3e=s($u);Une=n(K3e,"STRONG",{});var DWr=s(Une);q1o=r(DWr,"deberta-v2"),DWr.forEach(t),N1o=r(K3e," \u2014 "),UI=n(K3e,"A",{href:!0});var GWr=s(UI);j1o=r(GWr,"DebertaV2ForMaskedLM"),GWr.forEach(t),D1o=r(K3e," (DeBERTa-v2 model)"),K3e.forEach(t),G1o=i(V),ku=n(V,"LI",{});var Z3e=s(ku);Jne=n(Z3e,"STRONG",{});var OWr=s(Jne);O1o=r(OWr,"distilbert"),OWr.forEach(t),V1o=r(Z3e," \u2014 "),JI=n(Z3e,"A",{href:!0});var VWr=s(JI);X1o=r(VWr,"DistilBertForMaskedLM"),VWr.forEach(t),z1o=r(Z3e," (DistilBERT model)"),Z3e.forEach(t),Q1o=i(V),Su=n(V,"LI",{});var ewe=s(Su);Yne=n(ewe,"STRONG",{});var XWr=s(Yne);W1o=r(XWr,"electra"),XWr.forEach(t),H1o=r(ewe," \u2014 "),YI=n(ewe,"A",{href:!0});var zWr=s(YI);U1o=r(zWr,"ElectraForPreTraining"),zWr.forEach(t),J1o=r(ewe," (ELECTRA model)"),ewe.forEach(t),Y1o=i(V),Ru=n(V,"LI",{});var owe=s(Ru);Kne=n(owe,"STRONG",{});var QWr=s(Kne);K1o=r(QWr,"flaubert"),QWr.forEach(t),Z1o=r(owe," \u2014 "),KI=n(owe,"A",{href:!0});var WWr=s(KI);ebo=r(WWr,"FlaubertWithLMHeadModel"),WWr.forEach(t),obo=r(owe," (FlauBERT model)"),owe.forEach(t),rbo=i(V),Bu=n(V,"LI",{});var rwe=s(Bu);Zne=n(rwe,"STRONG",{});var HWr=s(Zne);tbo=r(HWr,"fnet"),HWr.forEach(t),abo=r(rwe," \u2014 "),ZI=n(rwe,"A",{href:!0});var UWr=s(ZI);nbo=r(UWr,"FNetForPreTraining"),UWr.forEach(t),sbo=r(rwe," (FNet model)"),rwe.forEach(t),lbo=i(V),Pu=n(V,"LI",{});var twe=s(Pu);ese=n(twe,"STRONG",{});var JWr=s(ese);ibo=r(JWr,"fsmt"),JWr.forEach(t),dbo=r(twe," \u2014 "),eq=n(twe,"A",{href:!0});var YWr=s(eq);cbo=r(YWr,"FSMTForConditionalGeneration"),YWr.forEach(t),fbo=r(twe," (FairSeq Machine-Translation model)"),twe.forEach(t),mbo=i(V),Iu=n(V,"LI",{});var awe=s(Iu);ose=n(awe,"STRONG",{});var KWr=s(ose);gbo=r(KWr,"funnel"),KWr.forEach(t),hbo=r(awe," \u2014 "),oq=n(awe,"A",{href:!0});var ZWr=s(oq);pbo=r(ZWr,"FunnelForPreTraining"),ZWr.forEach(t),ubo=r(awe," (Funnel Transformer model)"),awe.forEach(t),_bo=i(V),qu=n(V,"LI",{});var nwe=s(qu);rse=n(nwe,"STRONG",{});var eHr=s(rse);bbo=r(eHr,"gpt2"),eHr.forEach(t),vbo=r(nwe," \u2014 "),rq=n(nwe,"A",{href:!0});var oHr=s(rq);Fbo=r(oHr,"GPT2LMHeadModel"),oHr.forEach(t),Tbo=r(nwe," (OpenAI GPT-2 model)"),nwe.forEach(t),Mbo=i(V),Nu=n(V,"LI",{});var swe=s(Nu);tse=n(swe,"STRONG",{});var rHr=s(tse);Ebo=r(rHr,"ibert"),rHr.forEach(t),Cbo=r(swe," \u2014 "),tq=n(swe,"A",{href:!0});var tHr=s(tq);wbo=r(tHr,"IBertForMaskedLM"),tHr.forEach(t),Abo=r(swe," (I-BERT model)"),swe.forEach(t),ybo=i(V),ju=n(V,"LI",{});var lwe=s(ju);ase=n(lwe,"STRONG",{});var aHr=s(ase);Lbo=r(aHr,"layoutlm"),aHr.forEach(t),xbo=r(lwe," \u2014 "),aq=n(lwe,"A",{href:!0});var nHr=s(aq);$bo=r(nHr,"LayoutLMForMaskedLM"),nHr.forEach(t),kbo=r(lwe," (LayoutLM model)"),lwe.forEach(t),Sbo=i(V),Du=n(V,"LI",{});var iwe=s(Du);nse=n(iwe,"STRONG",{});var sHr=s(nse);Rbo=r(sHr,"longformer"),sHr.forEach(t),Bbo=r(iwe," \u2014 "),nq=n(iwe,"A",{href:!0});var lHr=s(nq);Pbo=r(lHr,"LongformerForMaskedLM"),lHr.forEach(t),Ibo=r(iwe," (Longformer model)"),iwe.forEach(t),qbo=i(V),Gu=n(V,"LI",{});var dwe=s(Gu);sse=n(dwe,"STRONG",{});var iHr=s(sse);Nbo=r(iHr,"lxmert"),iHr.forEach(t),jbo=r(dwe," \u2014 "),sq=n(dwe,"A",{href:!0});var dHr=s(sq);Dbo=r(dHr,"LxmertForPreTraining"),dHr.forEach(t),Gbo=r(dwe," (LXMERT model)"),dwe.forEach(t),Obo=i(V),Ou=n(V,"LI",{});var cwe=s(Ou);lse=n(cwe,"STRONG",{});var cHr=s(lse);Vbo=r(cHr,"megatron-bert"),cHr.forEach(t),Xbo=r(cwe," \u2014 "),lq=n(cwe,"A",{href:!0});var fHr=s(lq);zbo=r(fHr,"MegatronBertForPreTraining"),fHr.forEach(t),Qbo=r(cwe," (MegatronBert model)"),cwe.forEach(t),Wbo=i(V),Vu=n(V,"LI",{});var fwe=s(Vu);ise=n(fwe,"STRONG",{});var mHr=s(ise);Hbo=r(mHr,"mobilebert"),mHr.forEach(t),Ubo=r(fwe," \u2014 "),iq=n(fwe,"A",{href:!0});var gHr=s(iq);Jbo=r(gHr,"MobileBertForPreTraining"),gHr.forEach(t),Ybo=r(fwe," (MobileBERT model)"),fwe.forEach(t),Kbo=i(V),Xu=n(V,"LI",{});var mwe=s(Xu);dse=n(mwe,"STRONG",{});var hHr=s(dse);Zbo=r(hHr,"mpnet"),hHr.forEach(t),e2o=r(mwe," \u2014 "),dq=n(mwe,"A",{href:!0});var pHr=s(dq);o2o=r(pHr,"MPNetForMaskedLM"),pHr.forEach(t),r2o=r(mwe," (MPNet model)"),mwe.forEach(t),t2o=i(V),zu=n(V,"LI",{});var gwe=s(zu);cse=n(gwe,"STRONG",{});var uHr=s(cse);a2o=r(uHr,"openai-gpt"),uHr.forEach(t),n2o=r(gwe," \u2014 "),cq=n(gwe,"A",{href:!0});var _Hr=s(cq);s2o=r(_Hr,"OpenAIGPTLMHeadModel"),_Hr.forEach(t),l2o=r(gwe," (OpenAI GPT model)"),gwe.forEach(t),i2o=i(V),Qu=n(V,"LI",{});var hwe=s(Qu);fse=n(hwe,"STRONG",{});var bHr=s(fse);d2o=r(bHr,"retribert"),bHr.forEach(t),c2o=r(hwe," \u2014 "),fq=n(hwe,"A",{href:!0});var vHr=s(fq);f2o=r(vHr,"RetriBertModel"),vHr.forEach(t),m2o=r(hwe," (RetriBERT model)"),hwe.forEach(t),g2o=i(V),Wu=n(V,"LI",{});var pwe=s(Wu);mse=n(pwe,"STRONG",{});var FHr=s(mse);h2o=r(FHr,"roberta"),FHr.forEach(t),p2o=r(pwe," \u2014 "),mq=n(pwe,"A",{href:!0});var THr=s(mq);u2o=r(THr,"RobertaForMaskedLM"),THr.forEach(t),_2o=r(pwe," (RoBERTa model)"),pwe.forEach(t),b2o=i(V),Hu=n(V,"LI",{});var uwe=s(Hu);gse=n(uwe,"STRONG",{});var MHr=s(gse);v2o=r(MHr,"squeezebert"),MHr.forEach(t),F2o=r(uwe," \u2014 "),gq=n(uwe,"A",{href:!0});var EHr=s(gq);T2o=r(EHr,"SqueezeBertForMaskedLM"),EHr.forEach(t),M2o=r(uwe," (SqueezeBERT model)"),uwe.forEach(t),E2o=i(V),Uu=n(V,"LI",{});var _we=s(Uu);hse=n(_we,"STRONG",{});var CHr=s(hse);C2o=r(CHr,"t5"),CHr.forEach(t),w2o=r(_we," \u2014 "),hq=n(_we,"A",{href:!0});var wHr=s(hq);A2o=r(wHr,"T5ForConditionalGeneration"),wHr.forEach(t),y2o=r(_we," (T5 model)"),_we.forEach(t),L2o=i(V),Ju=n(V,"LI",{});var bwe=s(Ju);pse=n(bwe,"STRONG",{});var AHr=s(pse);x2o=r(AHr,"tapas"),AHr.forEach(t),$2o=r(bwe," \u2014 "),pq=n(bwe,"A",{href:!0});var yHr=s(pq);k2o=r(yHr,"TapasForMaskedLM"),yHr.forEach(t),S2o=r(bwe," (TAPAS model)"),bwe.forEach(t),R2o=i(V),Yu=n(V,"LI",{});var vwe=s(Yu);use=n(vwe,"STRONG",{});var LHr=s(use);B2o=r(LHr,"transfo-xl"),LHr.forEach(t),P2o=r(vwe," \u2014 "),uq=n(vwe,"A",{href:!0});var xHr=s(uq);I2o=r(xHr,"TransfoXLLMHeadModel"),xHr.forEach(t),q2o=r(vwe," (Transformer-XL model)"),vwe.forEach(t),N2o=i(V),Ku=n(V,"LI",{});var Fwe=s(Ku);_se=n(Fwe,"STRONG",{});var $Hr=s(_se);j2o=r($Hr,"unispeech"),$Hr.forEach(t),D2o=r(Fwe," \u2014 "),_q=n(Fwe,"A",{href:!0});var kHr=s(_q);G2o=r(kHr,"UniSpeechForPreTraining"),kHr.forEach(t),O2o=r(Fwe," (UniSpeech model)"),Fwe.forEach(t),V2o=i(V),Zu=n(V,"LI",{});var Twe=s(Zu);bse=n(Twe,"STRONG",{});var SHr=s(bse);X2o=r(SHr,"unispeech-sat"),SHr.forEach(t),z2o=r(Twe," \u2014 "),bq=n(Twe,"A",{href:!0});var RHr=s(bq);Q2o=r(RHr,"UniSpeechSatForPreTraining"),RHr.forEach(t),W2o=r(Twe," (UniSpeechSat model)"),Twe.forEach(t),H2o=i(V),e_=n(V,"LI",{});var Mwe=s(e_);vse=n(Mwe,"STRONG",{});var BHr=s(vse);U2o=r(BHr,"visual_bert"),BHr.forEach(t),J2o=r(Mwe," \u2014 "),vq=n(Mwe,"A",{href:!0});var PHr=s(vq);Y2o=r(PHr,"VisualBertForPreTraining"),PHr.forEach(t),K2o=r(Mwe," (VisualBert model)"),Mwe.forEach(t),Z2o=i(V),o_=n(V,"LI",{});var Ewe=s(o_);Fse=n(Ewe,"STRONG",{});var IHr=s(Fse);e5o=r(IHr,"vit_mae"),IHr.forEach(t),o5o=r(Ewe," \u2014 "),Fq=n(Ewe,"A",{href:!0});var qHr=s(Fq);r5o=r(qHr,"ViTMAEForPreTraining"),qHr.forEach(t),t5o=r(Ewe," (ViTMAE model)"),Ewe.forEach(t),a5o=i(V),r_=n(V,"LI",{});var Cwe=s(r_);Tse=n(Cwe,"STRONG",{});var NHr=s(Tse);n5o=r(NHr,"wav2vec2"),NHr.forEach(t),s5o=r(Cwe," \u2014 "),Tq=n(Cwe,"A",{href:!0});var jHr=s(Tq);l5o=r(jHr,"Wav2Vec2ForPreTraining"),jHr.forEach(t),i5o=r(Cwe," (Wav2Vec2 model)"),Cwe.forEach(t),d5o=i(V),t_=n(V,"LI",{});var wwe=s(t_);Mse=n(wwe,"STRONG",{});var DHr=s(Mse);c5o=r(DHr,"xlm"),DHr.forEach(t),f5o=r(wwe," \u2014 "),Mq=n(wwe,"A",{href:!0});var GHr=s(Mq);m5o=r(GHr,"XLMWithLMHeadModel"),GHr.forEach(t),g5o=r(wwe," (XLM model)"),wwe.forEach(t),h5o=i(V),a_=n(V,"LI",{});var Awe=s(a_);Ese=n(Awe,"STRONG",{});var OHr=s(Ese);p5o=r(OHr,"xlm-roberta"),OHr.forEach(t),u5o=r(Awe," \u2014 "),Eq=n(Awe,"A",{href:!0});var VHr=s(Eq);_5o=r(VHr,"XLMRobertaForMaskedLM"),VHr.forEach(t),b5o=r(Awe," (XLM-RoBERTa model)"),Awe.forEach(t),v5o=i(V),n_=n(V,"LI",{});var ywe=s(n_);Cse=n(ywe,"STRONG",{});var XHr=s(Cse);F5o=r(XHr,"xlm-roberta-xl"),XHr.forEach(t),T5o=r(ywe," \u2014 "),Cq=n(ywe,"A",{href:!0});var zHr=s(Cq);M5o=r(zHr,"XLMRobertaXLForMaskedLM"),zHr.forEach(t),E5o=r(ywe," (XLM-RoBERTa-XL model)"),ywe.forEach(t),C5o=i(V),s_=n(V,"LI",{});var Lwe=s(s_);wse=n(Lwe,"STRONG",{});var QHr=s(wse);w5o=r(QHr,"xlnet"),QHr.forEach(t),A5o=r(Lwe," \u2014 "),wq=n(Lwe,"A",{href:!0});var WHr=s(wq);y5o=r(WHr,"XLNetLMHeadModel"),WHr.forEach(t),L5o=r(Lwe," (XLNet model)"),Lwe.forEach(t),V.forEach(t),x5o=i(Jt),l_=n(Jt,"P",{});var xwe=s(l_);$5o=r(xwe,"The model is set in evaluation mode by default using "),Ase=n(xwe,"CODE",{});var HHr=s(Ase);k5o=r(HHr,"model.eval()"),HHr.forEach(t),S5o=r(xwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yse=n(xwe,"CODE",{});var UHr=s(yse);R5o=r(UHr,"model.train()"),UHr.forEach(t),xwe.forEach(t),B5o=i(Jt),T(i_.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),sBe=i(f),Ti=n(f,"H2",{class:!0});var iIe=s(Ti);d_=n(iIe,"A",{id:!0,class:!0,href:!0});var JHr=s(d_);Lse=n(JHr,"SPAN",{});var YHr=s(Lse);T(ZA.$$.fragment,YHr),YHr.forEach(t),JHr.forEach(t),P5o=i(iIe),xse=n(iIe,"SPAN",{});var KHr=s(xse);I5o=r(KHr,"AutoModelForCausalLM"),KHr.forEach(t),iIe.forEach(t),lBe=i(f),Lo=n(f,"DIV",{class:!0});var Is=s(Lo);T(e0.$$.fragment,Is),q5o=i(Is),Mi=n(Is,"P",{});var nY=s(Mi);N5o=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aq=n(nY,"A",{href:!0});var ZHr=s(Aq);j5o=r(ZHr,"from_pretrained()"),ZHr.forEach(t),D5o=r(nY," class method or the "),yq=n(nY,"A",{href:!0});var eUr=s(yq);G5o=r(eUr,"from_config()"),eUr.forEach(t),O5o=r(nY,` class
method.`),nY.forEach(t),V5o=i(Is),o0=n(Is,"P",{});var dIe=s(o0);X5o=r(dIe,"This class cannot be instantiated directly using "),$se=n(dIe,"CODE",{});var oUr=s($se);z5o=r(oUr,"__init__()"),oUr.forEach(t),Q5o=r(dIe," (throws an error)."),dIe.forEach(t),W5o=i(Is),et=n(Is,"DIV",{class:!0});var A3=s(et);T(r0.$$.fragment,A3),H5o=i(A3),kse=n(A3,"P",{});var rUr=s(kse);U5o=r(rUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rUr.forEach(t),J5o=i(A3),Ei=n(A3,"P",{});var sY=s(Ei);Y5o=r(sY,`Note:
Loading a model from its configuration file does `),Sse=n(sY,"STRONG",{});var tUr=s(Sse);K5o=r(tUr,"not"),tUr.forEach(t),Z5o=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lq=n(sY,"A",{href:!0});var aUr=s(Lq);evo=r(aUr,"from_pretrained()"),aUr.forEach(t),ovo=r(sY," to load the model weights."),sY.forEach(t),rvo=i(A3),T(c_.$$.fragment,A3),A3.forEach(t),tvo=i(Is),He=n(Is,"DIV",{class:!0});var Yt=s(He);T(t0.$$.fragment,Yt),avo=i(Yt),Rse=n(Yt,"P",{});var nUr=s(Rse);nvo=r(nUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nUr.forEach(t),svo=i(Yt),Ca=n(Yt,"P",{});var y3=s(Ca);lvo=r(y3,"The model class to instantiate is selected based on the "),Bse=n(y3,"CODE",{});var sUr=s(Bse);ivo=r(sUr,"model_type"),sUr.forEach(t),dvo=r(y3,` property of the config object (either
passed as an argument or loaded from `),Pse=n(y3,"CODE",{});var lUr=s(Pse);cvo=r(lUr,"pretrained_model_name_or_path"),lUr.forEach(t),fvo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ise=n(y3,"CODE",{});var iUr=s(Ise);mvo=r(iUr,"pretrained_model_name_or_path"),iUr.forEach(t),gvo=r(y3,":"),y3.forEach(t),hvo=i(Yt),z=n(Yt,"UL",{});var W=s(z);f_=n(W,"LI",{});var $we=s(f_);qse=n($we,"STRONG",{});var dUr=s(qse);pvo=r(dUr,"bart"),dUr.forEach(t),uvo=r($we," \u2014 "),xq=n($we,"A",{href:!0});var cUr=s(xq);_vo=r(cUr,"BartForCausalLM"),cUr.forEach(t),bvo=r($we," (BART model)"),$we.forEach(t),vvo=i(W),m_=n(W,"LI",{});var kwe=s(m_);Nse=n(kwe,"STRONG",{});var fUr=s(Nse);Fvo=r(fUr,"bert"),fUr.forEach(t),Tvo=r(kwe," \u2014 "),$q=n(kwe,"A",{href:!0});var mUr=s($q);Mvo=r(mUr,"BertLMHeadModel"),mUr.forEach(t),Evo=r(kwe," (BERT model)"),kwe.forEach(t),Cvo=i(W),g_=n(W,"LI",{});var Swe=s(g_);jse=n(Swe,"STRONG",{});var gUr=s(jse);wvo=r(gUr,"bert-generation"),gUr.forEach(t),Avo=r(Swe," \u2014 "),kq=n(Swe,"A",{href:!0});var hUr=s(kq);yvo=r(hUr,"BertGenerationDecoder"),hUr.forEach(t),Lvo=r(Swe," (Bert Generation model)"),Swe.forEach(t),xvo=i(W),h_=n(W,"LI",{});var Rwe=s(h_);Dse=n(Rwe,"STRONG",{});var pUr=s(Dse);$vo=r(pUr,"big_bird"),pUr.forEach(t),kvo=r(Rwe," \u2014 "),Sq=n(Rwe,"A",{href:!0});var uUr=s(Sq);Svo=r(uUr,"BigBirdForCausalLM"),uUr.forEach(t),Rvo=r(Rwe," (BigBird model)"),Rwe.forEach(t),Bvo=i(W),p_=n(W,"LI",{});var Bwe=s(p_);Gse=n(Bwe,"STRONG",{});var _Ur=s(Gse);Pvo=r(_Ur,"bigbird_pegasus"),_Ur.forEach(t),Ivo=r(Bwe," \u2014 "),Rq=n(Bwe,"A",{href:!0});var bUr=s(Rq);qvo=r(bUr,"BigBirdPegasusForCausalLM"),bUr.forEach(t),Nvo=r(Bwe," (BigBirdPegasus model)"),Bwe.forEach(t),jvo=i(W),u_=n(W,"LI",{});var Pwe=s(u_);Ose=n(Pwe,"STRONG",{});var vUr=s(Ose);Dvo=r(vUr,"blenderbot"),vUr.forEach(t),Gvo=r(Pwe," \u2014 "),Bq=n(Pwe,"A",{href:!0});var FUr=s(Bq);Ovo=r(FUr,"BlenderbotForCausalLM"),FUr.forEach(t),Vvo=r(Pwe," (Blenderbot model)"),Pwe.forEach(t),Xvo=i(W),__=n(W,"LI",{});var Iwe=s(__);Vse=n(Iwe,"STRONG",{});var TUr=s(Vse);zvo=r(TUr,"blenderbot-small"),TUr.forEach(t),Qvo=r(Iwe," \u2014 "),Pq=n(Iwe,"A",{href:!0});var MUr=s(Pq);Wvo=r(MUr,"BlenderbotSmallForCausalLM"),MUr.forEach(t),Hvo=r(Iwe," (BlenderbotSmall model)"),Iwe.forEach(t),Uvo=i(W),b_=n(W,"LI",{});var qwe=s(b_);Xse=n(qwe,"STRONG",{});var EUr=s(Xse);Jvo=r(EUr,"camembert"),EUr.forEach(t),Yvo=r(qwe," \u2014 "),Iq=n(qwe,"A",{href:!0});var CUr=s(Iq);Kvo=r(CUr,"CamembertForCausalLM"),CUr.forEach(t),Zvo=r(qwe," (CamemBERT model)"),qwe.forEach(t),eFo=i(W),v_=n(W,"LI",{});var Nwe=s(v_);zse=n(Nwe,"STRONG",{});var wUr=s(zse);oFo=r(wUr,"ctrl"),wUr.forEach(t),rFo=r(Nwe," \u2014 "),qq=n(Nwe,"A",{href:!0});var AUr=s(qq);tFo=r(AUr,"CTRLLMHeadModel"),AUr.forEach(t),aFo=r(Nwe," (CTRL model)"),Nwe.forEach(t),nFo=i(W),F_=n(W,"LI",{});var jwe=s(F_);Qse=n(jwe,"STRONG",{});var yUr=s(Qse);sFo=r(yUr,"data2vec-text"),yUr.forEach(t),lFo=r(jwe," \u2014 "),Nq=n(jwe,"A",{href:!0});var LUr=s(Nq);iFo=r(LUr,"Data2VecTextForCausalLM"),LUr.forEach(t),dFo=r(jwe," (Data2VecText model)"),jwe.forEach(t),cFo=i(W),T_=n(W,"LI",{});var Dwe=s(T_);Wse=n(Dwe,"STRONG",{});var xUr=s(Wse);fFo=r(xUr,"electra"),xUr.forEach(t),mFo=r(Dwe," \u2014 "),jq=n(Dwe,"A",{href:!0});var $Ur=s(jq);gFo=r($Ur,"ElectraForCausalLM"),$Ur.forEach(t),hFo=r(Dwe," (ELECTRA model)"),Dwe.forEach(t),pFo=i(W),M_=n(W,"LI",{});var Gwe=s(M_);Hse=n(Gwe,"STRONG",{});var kUr=s(Hse);uFo=r(kUr,"gpt2"),kUr.forEach(t),_Fo=r(Gwe," \u2014 "),Dq=n(Gwe,"A",{href:!0});var SUr=s(Dq);bFo=r(SUr,"GPT2LMHeadModel"),SUr.forEach(t),vFo=r(Gwe," (OpenAI GPT-2 model)"),Gwe.forEach(t),FFo=i(W),E_=n(W,"LI",{});var Owe=s(E_);Use=n(Owe,"STRONG",{});var RUr=s(Use);TFo=r(RUr,"gpt_neo"),RUr.forEach(t),MFo=r(Owe," \u2014 "),Gq=n(Owe,"A",{href:!0});var BUr=s(Gq);EFo=r(BUr,"GPTNeoForCausalLM"),BUr.forEach(t),CFo=r(Owe," (GPT Neo model)"),Owe.forEach(t),wFo=i(W),C_=n(W,"LI",{});var Vwe=s(C_);Jse=n(Vwe,"STRONG",{});var PUr=s(Jse);AFo=r(PUr,"gpt_neox"),PUr.forEach(t),yFo=r(Vwe," \u2014 "),Oq=n(Vwe,"A",{href:!0});var IUr=s(Oq);LFo=r(IUr,"GPTNeoXForCausalLM"),IUr.forEach(t),xFo=r(Vwe," (GPTNeoX model)"),Vwe.forEach(t),$Fo=i(W),w_=n(W,"LI",{});var Xwe=s(w_);Yse=n(Xwe,"STRONG",{});var qUr=s(Yse);kFo=r(qUr,"gptj"),qUr.forEach(t),SFo=r(Xwe," \u2014 "),Vq=n(Xwe,"A",{href:!0});var NUr=s(Vq);RFo=r(NUr,"GPTJForCausalLM"),NUr.forEach(t),BFo=r(Xwe," (GPT-J model)"),Xwe.forEach(t),PFo=i(W),A_=n(W,"LI",{});var zwe=s(A_);Kse=n(zwe,"STRONG",{});var jUr=s(Kse);IFo=r(jUr,"marian"),jUr.forEach(t),qFo=r(zwe," \u2014 "),Xq=n(zwe,"A",{href:!0});var DUr=s(Xq);NFo=r(DUr,"MarianForCausalLM"),DUr.forEach(t),jFo=r(zwe," (Marian model)"),zwe.forEach(t),DFo=i(W),y_=n(W,"LI",{});var Qwe=s(y_);Zse=n(Qwe,"STRONG",{});var GUr=s(Zse);GFo=r(GUr,"mbart"),GUr.forEach(t),OFo=r(Qwe," \u2014 "),zq=n(Qwe,"A",{href:!0});var OUr=s(zq);VFo=r(OUr,"MBartForCausalLM"),OUr.forEach(t),XFo=r(Qwe," (mBART model)"),Qwe.forEach(t),zFo=i(W),L_=n(W,"LI",{});var Wwe=s(L_);ele=n(Wwe,"STRONG",{});var VUr=s(ele);QFo=r(VUr,"megatron-bert"),VUr.forEach(t),WFo=r(Wwe," \u2014 "),Qq=n(Wwe,"A",{href:!0});var XUr=s(Qq);HFo=r(XUr,"MegatronBertForCausalLM"),XUr.forEach(t),UFo=r(Wwe," (MegatronBert model)"),Wwe.forEach(t),JFo=i(W),x_=n(W,"LI",{});var Hwe=s(x_);ole=n(Hwe,"STRONG",{});var zUr=s(ole);YFo=r(zUr,"openai-gpt"),zUr.forEach(t),KFo=r(Hwe," \u2014 "),Wq=n(Hwe,"A",{href:!0});var QUr=s(Wq);ZFo=r(QUr,"OpenAIGPTLMHeadModel"),QUr.forEach(t),eTo=r(Hwe," (OpenAI GPT model)"),Hwe.forEach(t),oTo=i(W),$_=n(W,"LI",{});var Uwe=s($_);rle=n(Uwe,"STRONG",{});var WUr=s(rle);rTo=r(WUr,"pegasus"),WUr.forEach(t),tTo=r(Uwe," \u2014 "),Hq=n(Uwe,"A",{href:!0});var HUr=s(Hq);aTo=r(HUr,"PegasusForCausalLM"),HUr.forEach(t),nTo=r(Uwe," (Pegasus model)"),Uwe.forEach(t),sTo=i(W),k_=n(W,"LI",{});var Jwe=s(k_);tle=n(Jwe,"STRONG",{});var UUr=s(tle);lTo=r(UUr,"plbart"),UUr.forEach(t),iTo=r(Jwe," \u2014 "),Uq=n(Jwe,"A",{href:!0});var JUr=s(Uq);dTo=r(JUr,"PLBartForCausalLM"),JUr.forEach(t),cTo=r(Jwe," (PLBart model)"),Jwe.forEach(t),fTo=i(W),S_=n(W,"LI",{});var Ywe=s(S_);ale=n(Ywe,"STRONG",{});var YUr=s(ale);mTo=r(YUr,"prophetnet"),YUr.forEach(t),gTo=r(Ywe," \u2014 "),Jq=n(Ywe,"A",{href:!0});var KUr=s(Jq);hTo=r(KUr,"ProphetNetForCausalLM"),KUr.forEach(t),pTo=r(Ywe," (ProphetNet model)"),Ywe.forEach(t),uTo=i(W),R_=n(W,"LI",{});var Kwe=s(R_);nle=n(Kwe,"STRONG",{});var ZUr=s(nle);_To=r(ZUr,"qdqbert"),ZUr.forEach(t),bTo=r(Kwe," \u2014 "),Yq=n(Kwe,"A",{href:!0});var eJr=s(Yq);vTo=r(eJr,"QDQBertLMHeadModel"),eJr.forEach(t),FTo=r(Kwe," (QDQBert model)"),Kwe.forEach(t),TTo=i(W),B_=n(W,"LI",{});var Zwe=s(B_);sle=n(Zwe,"STRONG",{});var oJr=s(sle);MTo=r(oJr,"reformer"),oJr.forEach(t),ETo=r(Zwe," \u2014 "),Kq=n(Zwe,"A",{href:!0});var rJr=s(Kq);CTo=r(rJr,"ReformerModelWithLMHead"),rJr.forEach(t),wTo=r(Zwe," (Reformer model)"),Zwe.forEach(t),ATo=i(W),P_=n(W,"LI",{});var eAe=s(P_);lle=n(eAe,"STRONG",{});var tJr=s(lle);yTo=r(tJr,"rembert"),tJr.forEach(t),LTo=r(eAe," \u2014 "),Zq=n(eAe,"A",{href:!0});var aJr=s(Zq);xTo=r(aJr,"RemBertForCausalLM"),aJr.forEach(t),$To=r(eAe," (RemBERT model)"),eAe.forEach(t),kTo=i(W),I_=n(W,"LI",{});var oAe=s(I_);ile=n(oAe,"STRONG",{});var nJr=s(ile);STo=r(nJr,"roberta"),nJr.forEach(t),RTo=r(oAe," \u2014 "),eN=n(oAe,"A",{href:!0});var sJr=s(eN);BTo=r(sJr,"RobertaForCausalLM"),sJr.forEach(t),PTo=r(oAe," (RoBERTa model)"),oAe.forEach(t),ITo=i(W),q_=n(W,"LI",{});var rAe=s(q_);dle=n(rAe,"STRONG",{});var lJr=s(dle);qTo=r(lJr,"roformer"),lJr.forEach(t),NTo=r(rAe," \u2014 "),oN=n(rAe,"A",{href:!0});var iJr=s(oN);jTo=r(iJr,"RoFormerForCausalLM"),iJr.forEach(t),DTo=r(rAe," (RoFormer model)"),rAe.forEach(t),GTo=i(W),N_=n(W,"LI",{});var tAe=s(N_);cle=n(tAe,"STRONG",{});var dJr=s(cle);OTo=r(dJr,"speech_to_text_2"),dJr.forEach(t),VTo=r(tAe," \u2014 "),rN=n(tAe,"A",{href:!0});var cJr=s(rN);XTo=r(cJr,"Speech2Text2ForCausalLM"),cJr.forEach(t),zTo=r(tAe," (Speech2Text2 model)"),tAe.forEach(t),QTo=i(W),j_=n(W,"LI",{});var aAe=s(j_);fle=n(aAe,"STRONG",{});var fJr=s(fle);WTo=r(fJr,"transfo-xl"),fJr.forEach(t),HTo=r(aAe," \u2014 "),tN=n(aAe,"A",{href:!0});var mJr=s(tN);UTo=r(mJr,"TransfoXLLMHeadModel"),mJr.forEach(t),JTo=r(aAe," (Transformer-XL model)"),aAe.forEach(t),YTo=i(W),D_=n(W,"LI",{});var nAe=s(D_);mle=n(nAe,"STRONG",{});var gJr=s(mle);KTo=r(gJr,"trocr"),gJr.forEach(t),ZTo=r(nAe," \u2014 "),aN=n(nAe,"A",{href:!0});var hJr=s(aN);e9o=r(hJr,"TrOCRForCausalLM"),hJr.forEach(t),o9o=r(nAe," (TrOCR model)"),nAe.forEach(t),r9o=i(W),G_=n(W,"LI",{});var sAe=s(G_);gle=n(sAe,"STRONG",{});var pJr=s(gle);t9o=r(pJr,"xglm"),pJr.forEach(t),a9o=r(sAe," \u2014 "),nN=n(sAe,"A",{href:!0});var uJr=s(nN);n9o=r(uJr,"XGLMForCausalLM"),uJr.forEach(t),s9o=r(sAe," (XGLM model)"),sAe.forEach(t),l9o=i(W),O_=n(W,"LI",{});var lAe=s(O_);hle=n(lAe,"STRONG",{});var _Jr=s(hle);i9o=r(_Jr,"xlm"),_Jr.forEach(t),d9o=r(lAe," \u2014 "),sN=n(lAe,"A",{href:!0});var bJr=s(sN);c9o=r(bJr,"XLMWithLMHeadModel"),bJr.forEach(t),f9o=r(lAe," (XLM model)"),lAe.forEach(t),m9o=i(W),V_=n(W,"LI",{});var iAe=s(V_);ple=n(iAe,"STRONG",{});var vJr=s(ple);g9o=r(vJr,"xlm-prophetnet"),vJr.forEach(t),h9o=r(iAe," \u2014 "),lN=n(iAe,"A",{href:!0});var FJr=s(lN);p9o=r(FJr,"XLMProphetNetForCausalLM"),FJr.forEach(t),u9o=r(iAe," (XLMProphetNet model)"),iAe.forEach(t),_9o=i(W),X_=n(W,"LI",{});var dAe=s(X_);ule=n(dAe,"STRONG",{});var TJr=s(ule);b9o=r(TJr,"xlm-roberta"),TJr.forEach(t),v9o=r(dAe," \u2014 "),iN=n(dAe,"A",{href:!0});var MJr=s(iN);F9o=r(MJr,"XLMRobertaForCausalLM"),MJr.forEach(t),T9o=r(dAe," (XLM-RoBERTa model)"),dAe.forEach(t),M9o=i(W),z_=n(W,"LI",{});var cAe=s(z_);_le=n(cAe,"STRONG",{});var EJr=s(_le);E9o=r(EJr,"xlm-roberta-xl"),EJr.forEach(t),C9o=r(cAe," \u2014 "),dN=n(cAe,"A",{href:!0});var CJr=s(dN);w9o=r(CJr,"XLMRobertaXLForCausalLM"),CJr.forEach(t),A9o=r(cAe," (XLM-RoBERTa-XL model)"),cAe.forEach(t),y9o=i(W),Q_=n(W,"LI",{});var fAe=s(Q_);ble=n(fAe,"STRONG",{});var wJr=s(ble);L9o=r(wJr,"xlnet"),wJr.forEach(t),x9o=r(fAe," \u2014 "),cN=n(fAe,"A",{href:!0});var AJr=s(cN);$9o=r(AJr,"XLNetLMHeadModel"),AJr.forEach(t),k9o=r(fAe," (XLNet model)"),fAe.forEach(t),W.forEach(t),S9o=i(Yt),W_=n(Yt,"P",{});var mAe=s(W_);R9o=r(mAe,"The model is set in evaluation mode by default using "),vle=n(mAe,"CODE",{});var yJr=s(vle);B9o=r(yJr,"model.eval()"),yJr.forEach(t),P9o=r(mAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fle=n(mAe,"CODE",{});var LJr=s(Fle);I9o=r(LJr,"model.train()"),LJr.forEach(t),mAe.forEach(t),q9o=i(Yt),T(H_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),iBe=i(f),Ci=n(f,"H2",{class:!0});var cIe=s(Ci);U_=n(cIe,"A",{id:!0,class:!0,href:!0});var xJr=s(U_);Tle=n(xJr,"SPAN",{});var $Jr=s(Tle);T(a0.$$.fragment,$Jr),$Jr.forEach(t),xJr.forEach(t),N9o=i(cIe),Mle=n(cIe,"SPAN",{});var kJr=s(Mle);j9o=r(kJr,"AutoModelForMaskedLM"),kJr.forEach(t),cIe.forEach(t),dBe=i(f),xo=n(f,"DIV",{class:!0});var qs=s(xo);T(n0.$$.fragment,qs),D9o=i(qs),wi=n(qs,"P",{});var lY=s(wi);G9o=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fN=n(lY,"A",{href:!0});var SJr=s(fN);O9o=r(SJr,"from_pretrained()"),SJr.forEach(t),V9o=r(lY," class method or the "),mN=n(lY,"A",{href:!0});var RJr=s(mN);X9o=r(RJr,"from_config()"),RJr.forEach(t),z9o=r(lY,` class
method.`),lY.forEach(t),Q9o=i(qs),s0=n(qs,"P",{});var fIe=s(s0);W9o=r(fIe,"This class cannot be instantiated directly using "),Ele=n(fIe,"CODE",{});var BJr=s(Ele);H9o=r(BJr,"__init__()"),BJr.forEach(t),U9o=r(fIe," (throws an error)."),fIe.forEach(t),J9o=i(qs),ot=n(qs,"DIV",{class:!0});var L3=s(ot);T(l0.$$.fragment,L3),Y9o=i(L3),Cle=n(L3,"P",{});var PJr=s(Cle);K9o=r(PJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PJr.forEach(t),Z9o=i(L3),Ai=n(L3,"P",{});var iY=s(Ai);eMo=r(iY,`Note:
Loading a model from its configuration file does `),wle=n(iY,"STRONG",{});var IJr=s(wle);oMo=r(IJr,"not"),IJr.forEach(t),rMo=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=n(iY,"A",{href:!0});var qJr=s(gN);tMo=r(qJr,"from_pretrained()"),qJr.forEach(t),aMo=r(iY," to load the model weights."),iY.forEach(t),nMo=i(L3),T(J_.$$.fragment,L3),L3.forEach(t),sMo=i(qs),Ue=n(qs,"DIV",{class:!0});var Kt=s(Ue);T(i0.$$.fragment,Kt),lMo=i(Kt),Ale=n(Kt,"P",{});var NJr=s(Ale);iMo=r(NJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),NJr.forEach(t),dMo=i(Kt),wa=n(Kt,"P",{});var x3=s(wa);cMo=r(x3,"The model class to instantiate is selected based on the "),yle=n(x3,"CODE",{});var jJr=s(yle);fMo=r(jJr,"model_type"),jJr.forEach(t),mMo=r(x3,` property of the config object (either
passed as an argument or loaded from `),Lle=n(x3,"CODE",{});var DJr=s(Lle);gMo=r(DJr,"pretrained_model_name_or_path"),DJr.forEach(t),hMo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xle=n(x3,"CODE",{});var GJr=s(xle);pMo=r(GJr,"pretrained_model_name_or_path"),GJr.forEach(t),uMo=r(x3,":"),x3.forEach(t),_Mo=i(Kt),Q=n(Kt,"UL",{});var H=s(Q);Y_=n(H,"LI",{});var gAe=s(Y_);$le=n(gAe,"STRONG",{});var OJr=s($le);bMo=r(OJr,"albert"),OJr.forEach(t),vMo=r(gAe," \u2014 "),hN=n(gAe,"A",{href:!0});var VJr=s(hN);FMo=r(VJr,"AlbertForMaskedLM"),VJr.forEach(t),TMo=r(gAe," (ALBERT model)"),gAe.forEach(t),MMo=i(H),K_=n(H,"LI",{});var hAe=s(K_);kle=n(hAe,"STRONG",{});var XJr=s(kle);EMo=r(XJr,"bart"),XJr.forEach(t),CMo=r(hAe," \u2014 "),pN=n(hAe,"A",{href:!0});var zJr=s(pN);wMo=r(zJr,"BartForConditionalGeneration"),zJr.forEach(t),AMo=r(hAe," (BART model)"),hAe.forEach(t),yMo=i(H),Z_=n(H,"LI",{});var pAe=s(Z_);Sle=n(pAe,"STRONG",{});var QJr=s(Sle);LMo=r(QJr,"bert"),QJr.forEach(t),xMo=r(pAe," \u2014 "),uN=n(pAe,"A",{href:!0});var WJr=s(uN);$Mo=r(WJr,"BertForMaskedLM"),WJr.forEach(t),kMo=r(pAe," (BERT model)"),pAe.forEach(t),SMo=i(H),e6=n(H,"LI",{});var uAe=s(e6);Rle=n(uAe,"STRONG",{});var HJr=s(Rle);RMo=r(HJr,"big_bird"),HJr.forEach(t),BMo=r(uAe," \u2014 "),_N=n(uAe,"A",{href:!0});var UJr=s(_N);PMo=r(UJr,"BigBirdForMaskedLM"),UJr.forEach(t),IMo=r(uAe," (BigBird model)"),uAe.forEach(t),qMo=i(H),o6=n(H,"LI",{});var _Ae=s(o6);Ble=n(_Ae,"STRONG",{});var JJr=s(Ble);NMo=r(JJr,"camembert"),JJr.forEach(t),jMo=r(_Ae," \u2014 "),bN=n(_Ae,"A",{href:!0});var YJr=s(bN);DMo=r(YJr,"CamembertForMaskedLM"),YJr.forEach(t),GMo=r(_Ae," (CamemBERT model)"),_Ae.forEach(t),OMo=i(H),r6=n(H,"LI",{});var bAe=s(r6);Ple=n(bAe,"STRONG",{});var KJr=s(Ple);VMo=r(KJr,"convbert"),KJr.forEach(t),XMo=r(bAe," \u2014 "),vN=n(bAe,"A",{href:!0});var ZJr=s(vN);zMo=r(ZJr,"ConvBertForMaskedLM"),ZJr.forEach(t),QMo=r(bAe," (ConvBERT model)"),bAe.forEach(t),WMo=i(H),t6=n(H,"LI",{});var vAe=s(t6);Ile=n(vAe,"STRONG",{});var eYr=s(Ile);HMo=r(eYr,"data2vec-text"),eYr.forEach(t),UMo=r(vAe," \u2014 "),FN=n(vAe,"A",{href:!0});var oYr=s(FN);JMo=r(oYr,"Data2VecTextForMaskedLM"),oYr.forEach(t),YMo=r(vAe," (Data2VecText model)"),vAe.forEach(t),KMo=i(H),a6=n(H,"LI",{});var FAe=s(a6);qle=n(FAe,"STRONG",{});var rYr=s(qle);ZMo=r(rYr,"deberta"),rYr.forEach(t),e4o=r(FAe," \u2014 "),TN=n(FAe,"A",{href:!0});var tYr=s(TN);o4o=r(tYr,"DebertaForMaskedLM"),tYr.forEach(t),r4o=r(FAe," (DeBERTa model)"),FAe.forEach(t),t4o=i(H),n6=n(H,"LI",{});var TAe=s(n6);Nle=n(TAe,"STRONG",{});var aYr=s(Nle);a4o=r(aYr,"deberta-v2"),aYr.forEach(t),n4o=r(TAe," \u2014 "),MN=n(TAe,"A",{href:!0});var nYr=s(MN);s4o=r(nYr,"DebertaV2ForMaskedLM"),nYr.forEach(t),l4o=r(TAe," (DeBERTa-v2 model)"),TAe.forEach(t),i4o=i(H),s6=n(H,"LI",{});var MAe=s(s6);jle=n(MAe,"STRONG",{});var sYr=s(jle);d4o=r(sYr,"distilbert"),sYr.forEach(t),c4o=r(MAe," \u2014 "),EN=n(MAe,"A",{href:!0});var lYr=s(EN);f4o=r(lYr,"DistilBertForMaskedLM"),lYr.forEach(t),m4o=r(MAe," (DistilBERT model)"),MAe.forEach(t),g4o=i(H),l6=n(H,"LI",{});var EAe=s(l6);Dle=n(EAe,"STRONG",{});var iYr=s(Dle);h4o=r(iYr,"electra"),iYr.forEach(t),p4o=r(EAe," \u2014 "),CN=n(EAe,"A",{href:!0});var dYr=s(CN);u4o=r(dYr,"ElectraForMaskedLM"),dYr.forEach(t),_4o=r(EAe," (ELECTRA model)"),EAe.forEach(t),b4o=i(H),i6=n(H,"LI",{});var CAe=s(i6);Gle=n(CAe,"STRONG",{});var cYr=s(Gle);v4o=r(cYr,"flaubert"),cYr.forEach(t),F4o=r(CAe," \u2014 "),wN=n(CAe,"A",{href:!0});var fYr=s(wN);T4o=r(fYr,"FlaubertWithLMHeadModel"),fYr.forEach(t),M4o=r(CAe," (FlauBERT model)"),CAe.forEach(t),E4o=i(H),d6=n(H,"LI",{});var wAe=s(d6);Ole=n(wAe,"STRONG",{});var mYr=s(Ole);C4o=r(mYr,"fnet"),mYr.forEach(t),w4o=r(wAe," \u2014 "),AN=n(wAe,"A",{href:!0});var gYr=s(AN);A4o=r(gYr,"FNetForMaskedLM"),gYr.forEach(t),y4o=r(wAe," (FNet model)"),wAe.forEach(t),L4o=i(H),c6=n(H,"LI",{});var AAe=s(c6);Vle=n(AAe,"STRONG",{});var hYr=s(Vle);x4o=r(hYr,"funnel"),hYr.forEach(t),$4o=r(AAe," \u2014 "),yN=n(AAe,"A",{href:!0});var pYr=s(yN);k4o=r(pYr,"FunnelForMaskedLM"),pYr.forEach(t),S4o=r(AAe," (Funnel Transformer model)"),AAe.forEach(t),R4o=i(H),f6=n(H,"LI",{});var yAe=s(f6);Xle=n(yAe,"STRONG",{});var uYr=s(Xle);B4o=r(uYr,"ibert"),uYr.forEach(t),P4o=r(yAe," \u2014 "),LN=n(yAe,"A",{href:!0});var _Yr=s(LN);I4o=r(_Yr,"IBertForMaskedLM"),_Yr.forEach(t),q4o=r(yAe," (I-BERT model)"),yAe.forEach(t),N4o=i(H),m6=n(H,"LI",{});var LAe=s(m6);zle=n(LAe,"STRONG",{});var bYr=s(zle);j4o=r(bYr,"layoutlm"),bYr.forEach(t),D4o=r(LAe," \u2014 "),xN=n(LAe,"A",{href:!0});var vYr=s(xN);G4o=r(vYr,"LayoutLMForMaskedLM"),vYr.forEach(t),O4o=r(LAe," (LayoutLM model)"),LAe.forEach(t),V4o=i(H),g6=n(H,"LI",{});var xAe=s(g6);Qle=n(xAe,"STRONG",{});var FYr=s(Qle);X4o=r(FYr,"longformer"),FYr.forEach(t),z4o=r(xAe," \u2014 "),$N=n(xAe,"A",{href:!0});var TYr=s($N);Q4o=r(TYr,"LongformerForMaskedLM"),TYr.forEach(t),W4o=r(xAe," (Longformer model)"),xAe.forEach(t),H4o=i(H),h6=n(H,"LI",{});var $Ae=s(h6);Wle=n($Ae,"STRONG",{});var MYr=s(Wle);U4o=r(MYr,"mbart"),MYr.forEach(t),J4o=r($Ae," \u2014 "),kN=n($Ae,"A",{href:!0});var EYr=s(kN);Y4o=r(EYr,"MBartForConditionalGeneration"),EYr.forEach(t),K4o=r($Ae," (mBART model)"),$Ae.forEach(t),Z4o=i(H),p6=n(H,"LI",{});var kAe=s(p6);Hle=n(kAe,"STRONG",{});var CYr=s(Hle);eEo=r(CYr,"megatron-bert"),CYr.forEach(t),oEo=r(kAe," \u2014 "),SN=n(kAe,"A",{href:!0});var wYr=s(SN);rEo=r(wYr,"MegatronBertForMaskedLM"),wYr.forEach(t),tEo=r(kAe," (MegatronBert model)"),kAe.forEach(t),aEo=i(H),u6=n(H,"LI",{});var SAe=s(u6);Ule=n(SAe,"STRONG",{});var AYr=s(Ule);nEo=r(AYr,"mobilebert"),AYr.forEach(t),sEo=r(SAe," \u2014 "),RN=n(SAe,"A",{href:!0});var yYr=s(RN);lEo=r(yYr,"MobileBertForMaskedLM"),yYr.forEach(t),iEo=r(SAe," (MobileBERT model)"),SAe.forEach(t),dEo=i(H),_6=n(H,"LI",{});var RAe=s(_6);Jle=n(RAe,"STRONG",{});var LYr=s(Jle);cEo=r(LYr,"mpnet"),LYr.forEach(t),fEo=r(RAe," \u2014 "),BN=n(RAe,"A",{href:!0});var xYr=s(BN);mEo=r(xYr,"MPNetForMaskedLM"),xYr.forEach(t),gEo=r(RAe," (MPNet model)"),RAe.forEach(t),hEo=i(H),b6=n(H,"LI",{});var BAe=s(b6);Yle=n(BAe,"STRONG",{});var $Yr=s(Yle);pEo=r($Yr,"nystromformer"),$Yr.forEach(t),uEo=r(BAe," \u2014 "),PN=n(BAe,"A",{href:!0});var kYr=s(PN);_Eo=r(kYr,"NystromformerForMaskedLM"),kYr.forEach(t),bEo=r(BAe," (Nystromformer model)"),BAe.forEach(t),vEo=i(H),v6=n(H,"LI",{});var PAe=s(v6);Kle=n(PAe,"STRONG",{});var SYr=s(Kle);FEo=r(SYr,"perceiver"),SYr.forEach(t),TEo=r(PAe," \u2014 "),IN=n(PAe,"A",{href:!0});var RYr=s(IN);MEo=r(RYr,"PerceiverForMaskedLM"),RYr.forEach(t),EEo=r(PAe," (Perceiver model)"),PAe.forEach(t),CEo=i(H),F6=n(H,"LI",{});var IAe=s(F6);Zle=n(IAe,"STRONG",{});var BYr=s(Zle);wEo=r(BYr,"qdqbert"),BYr.forEach(t),AEo=r(IAe," \u2014 "),qN=n(IAe,"A",{href:!0});var PYr=s(qN);yEo=r(PYr,"QDQBertForMaskedLM"),PYr.forEach(t),LEo=r(IAe," (QDQBert model)"),IAe.forEach(t),xEo=i(H),T6=n(H,"LI",{});var qAe=s(T6);eie=n(qAe,"STRONG",{});var IYr=s(eie);$Eo=r(IYr,"reformer"),IYr.forEach(t),kEo=r(qAe," \u2014 "),NN=n(qAe,"A",{href:!0});var qYr=s(NN);SEo=r(qYr,"ReformerForMaskedLM"),qYr.forEach(t),REo=r(qAe," (Reformer model)"),qAe.forEach(t),BEo=i(H),M6=n(H,"LI",{});var NAe=s(M6);oie=n(NAe,"STRONG",{});var NYr=s(oie);PEo=r(NYr,"rembert"),NYr.forEach(t),IEo=r(NAe," \u2014 "),jN=n(NAe,"A",{href:!0});var jYr=s(jN);qEo=r(jYr,"RemBertForMaskedLM"),jYr.forEach(t),NEo=r(NAe," (RemBERT model)"),NAe.forEach(t),jEo=i(H),E6=n(H,"LI",{});var jAe=s(E6);rie=n(jAe,"STRONG",{});var DYr=s(rie);DEo=r(DYr,"roberta"),DYr.forEach(t),GEo=r(jAe," \u2014 "),DN=n(jAe,"A",{href:!0});var GYr=s(DN);OEo=r(GYr,"RobertaForMaskedLM"),GYr.forEach(t),VEo=r(jAe," (RoBERTa model)"),jAe.forEach(t),XEo=i(H),C6=n(H,"LI",{});var DAe=s(C6);tie=n(DAe,"STRONG",{});var OYr=s(tie);zEo=r(OYr,"roformer"),OYr.forEach(t),QEo=r(DAe," \u2014 "),GN=n(DAe,"A",{href:!0});var VYr=s(GN);WEo=r(VYr,"RoFormerForMaskedLM"),VYr.forEach(t),HEo=r(DAe," (RoFormer model)"),DAe.forEach(t),UEo=i(H),w6=n(H,"LI",{});var GAe=s(w6);aie=n(GAe,"STRONG",{});var XYr=s(aie);JEo=r(XYr,"squeezebert"),XYr.forEach(t),YEo=r(GAe," \u2014 "),ON=n(GAe,"A",{href:!0});var zYr=s(ON);KEo=r(zYr,"SqueezeBertForMaskedLM"),zYr.forEach(t),ZEo=r(GAe," (SqueezeBERT model)"),GAe.forEach(t),eCo=i(H),A6=n(H,"LI",{});var OAe=s(A6);nie=n(OAe,"STRONG",{});var QYr=s(nie);oCo=r(QYr,"tapas"),QYr.forEach(t),rCo=r(OAe," \u2014 "),VN=n(OAe,"A",{href:!0});var WYr=s(VN);tCo=r(WYr,"TapasForMaskedLM"),WYr.forEach(t),aCo=r(OAe," (TAPAS model)"),OAe.forEach(t),nCo=i(H),y6=n(H,"LI",{});var VAe=s(y6);sie=n(VAe,"STRONG",{});var HYr=s(sie);sCo=r(HYr,"wav2vec2"),HYr.forEach(t),lCo=r(VAe," \u2014 "),lie=n(VAe,"CODE",{});var UYr=s(lie);iCo=r(UYr,"Wav2Vec2ForMaskedLM"),UYr.forEach(t),dCo=r(VAe," (Wav2Vec2 model)"),VAe.forEach(t),cCo=i(H),L6=n(H,"LI",{});var XAe=s(L6);iie=n(XAe,"STRONG",{});var JYr=s(iie);fCo=r(JYr,"xlm"),JYr.forEach(t),mCo=r(XAe," \u2014 "),XN=n(XAe,"A",{href:!0});var YYr=s(XN);gCo=r(YYr,"XLMWithLMHeadModel"),YYr.forEach(t),hCo=r(XAe," (XLM model)"),XAe.forEach(t),pCo=i(H),x6=n(H,"LI",{});var zAe=s(x6);die=n(zAe,"STRONG",{});var KYr=s(die);uCo=r(KYr,"xlm-roberta"),KYr.forEach(t),_Co=r(zAe," \u2014 "),zN=n(zAe,"A",{href:!0});var ZYr=s(zN);bCo=r(ZYr,"XLMRobertaForMaskedLM"),ZYr.forEach(t),vCo=r(zAe," (XLM-RoBERTa model)"),zAe.forEach(t),FCo=i(H),$6=n(H,"LI",{});var QAe=s($6);cie=n(QAe,"STRONG",{});var eKr=s(cie);TCo=r(eKr,"xlm-roberta-xl"),eKr.forEach(t),MCo=r(QAe," \u2014 "),QN=n(QAe,"A",{href:!0});var oKr=s(QN);ECo=r(oKr,"XLMRobertaXLForMaskedLM"),oKr.forEach(t),CCo=r(QAe," (XLM-RoBERTa-XL model)"),QAe.forEach(t),wCo=i(H),k6=n(H,"LI",{});var WAe=s(k6);fie=n(WAe,"STRONG",{});var rKr=s(fie);ACo=r(rKr,"yoso"),rKr.forEach(t),yCo=r(WAe," \u2014 "),WN=n(WAe,"A",{href:!0});var tKr=s(WN);LCo=r(tKr,"YosoForMaskedLM"),tKr.forEach(t),xCo=r(WAe," (YOSO model)"),WAe.forEach(t),H.forEach(t),$Co=i(Kt),S6=n(Kt,"P",{});var HAe=s(S6);kCo=r(HAe,"The model is set in evaluation mode by default using "),mie=n(HAe,"CODE",{});var aKr=s(mie);SCo=r(aKr,"model.eval()"),aKr.forEach(t),RCo=r(HAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gie=n(HAe,"CODE",{});var nKr=s(gie);BCo=r(nKr,"model.train()"),nKr.forEach(t),HAe.forEach(t),PCo=i(Kt),T(R6.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),cBe=i(f),yi=n(f,"H2",{class:!0});var mIe=s(yi);B6=n(mIe,"A",{id:!0,class:!0,href:!0});var sKr=s(B6);hie=n(sKr,"SPAN",{});var lKr=s(hie);T(d0.$$.fragment,lKr),lKr.forEach(t),sKr.forEach(t),ICo=i(mIe),pie=n(mIe,"SPAN",{});var iKr=s(pie);qCo=r(iKr,"AutoModelForSeq2SeqLM"),iKr.forEach(t),mIe.forEach(t),fBe=i(f),$o=n(f,"DIV",{class:!0});var Ns=s($o);T(c0.$$.fragment,Ns),NCo=i(Ns),Li=n(Ns,"P",{});var dY=s(Li);jCo=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HN=n(dY,"A",{href:!0});var dKr=s(HN);DCo=r(dKr,"from_pretrained()"),dKr.forEach(t),GCo=r(dY," class method or the "),UN=n(dY,"A",{href:!0});var cKr=s(UN);OCo=r(cKr,"from_config()"),cKr.forEach(t),VCo=r(dY,` class
method.`),dY.forEach(t),XCo=i(Ns),f0=n(Ns,"P",{});var gIe=s(f0);zCo=r(gIe,"This class cannot be instantiated directly using "),uie=n(gIe,"CODE",{});var fKr=s(uie);QCo=r(fKr,"__init__()"),fKr.forEach(t),WCo=r(gIe," (throws an error)."),gIe.forEach(t),HCo=i(Ns),rt=n(Ns,"DIV",{class:!0});var $3=s(rt);T(m0.$$.fragment,$3),UCo=i($3),_ie=n($3,"P",{});var mKr=s(_ie);JCo=r(mKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mKr.forEach(t),YCo=i($3),xi=n($3,"P",{});var cY=s(xi);KCo=r(cY,`Note:
Loading a model from its configuration file does `),bie=n(cY,"STRONG",{});var gKr=s(bie);ZCo=r(gKr,"not"),gKr.forEach(t),e3o=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),JN=n(cY,"A",{href:!0});var hKr=s(JN);o3o=r(hKr,"from_pretrained()"),hKr.forEach(t),r3o=r(cY," to load the model weights."),cY.forEach(t),t3o=i($3),T(P6.$$.fragment,$3),$3.forEach(t),a3o=i(Ns),Je=n(Ns,"DIV",{class:!0});var Zt=s(Je);T(g0.$$.fragment,Zt),n3o=i(Zt),vie=n(Zt,"P",{});var pKr=s(vie);s3o=r(pKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pKr.forEach(t),l3o=i(Zt),Aa=n(Zt,"P",{});var k3=s(Aa);i3o=r(k3,"The model class to instantiate is selected based on the "),Fie=n(k3,"CODE",{});var uKr=s(Fie);d3o=r(uKr,"model_type"),uKr.forEach(t),c3o=r(k3,` property of the config object (either
passed as an argument or loaded from `),Tie=n(k3,"CODE",{});var _Kr=s(Tie);f3o=r(_Kr,"pretrained_model_name_or_path"),_Kr.forEach(t),m3o=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=n(k3,"CODE",{});var bKr=s(Mie);g3o=r(bKr,"pretrained_model_name_or_path"),bKr.forEach(t),h3o=r(k3,":"),k3.forEach(t),p3o=i(Zt),he=n(Zt,"UL",{});var ue=s(he);I6=n(ue,"LI",{});var UAe=s(I6);Eie=n(UAe,"STRONG",{});var vKr=s(Eie);u3o=r(vKr,"bart"),vKr.forEach(t),_3o=r(UAe," \u2014 "),YN=n(UAe,"A",{href:!0});var FKr=s(YN);b3o=r(FKr,"BartForConditionalGeneration"),FKr.forEach(t),v3o=r(UAe," (BART model)"),UAe.forEach(t),F3o=i(ue),q6=n(ue,"LI",{});var JAe=s(q6);Cie=n(JAe,"STRONG",{});var TKr=s(Cie);T3o=r(TKr,"bigbird_pegasus"),TKr.forEach(t),M3o=r(JAe," \u2014 "),KN=n(JAe,"A",{href:!0});var MKr=s(KN);E3o=r(MKr,"BigBirdPegasusForConditionalGeneration"),MKr.forEach(t),C3o=r(JAe," (BigBirdPegasus model)"),JAe.forEach(t),w3o=i(ue),N6=n(ue,"LI",{});var YAe=s(N6);wie=n(YAe,"STRONG",{});var EKr=s(wie);A3o=r(EKr,"blenderbot"),EKr.forEach(t),y3o=r(YAe," \u2014 "),ZN=n(YAe,"A",{href:!0});var CKr=s(ZN);L3o=r(CKr,"BlenderbotForConditionalGeneration"),CKr.forEach(t),x3o=r(YAe," (Blenderbot model)"),YAe.forEach(t),$3o=i(ue),j6=n(ue,"LI",{});var KAe=s(j6);Aie=n(KAe,"STRONG",{});var wKr=s(Aie);k3o=r(wKr,"blenderbot-small"),wKr.forEach(t),S3o=r(KAe," \u2014 "),ej=n(KAe,"A",{href:!0});var AKr=s(ej);R3o=r(AKr,"BlenderbotSmallForConditionalGeneration"),AKr.forEach(t),B3o=r(KAe," (BlenderbotSmall model)"),KAe.forEach(t),P3o=i(ue),D6=n(ue,"LI",{});var ZAe=s(D6);yie=n(ZAe,"STRONG",{});var yKr=s(yie);I3o=r(yKr,"encoder-decoder"),yKr.forEach(t),q3o=r(ZAe," \u2014 "),oj=n(ZAe,"A",{href:!0});var LKr=s(oj);N3o=r(LKr,"EncoderDecoderModel"),LKr.forEach(t),j3o=r(ZAe," (Encoder decoder model)"),ZAe.forEach(t),D3o=i(ue),G6=n(ue,"LI",{});var e0e=s(G6);Lie=n(e0e,"STRONG",{});var xKr=s(Lie);G3o=r(xKr,"fsmt"),xKr.forEach(t),O3o=r(e0e," \u2014 "),rj=n(e0e,"A",{href:!0});var $Kr=s(rj);V3o=r($Kr,"FSMTForConditionalGeneration"),$Kr.forEach(t),X3o=r(e0e," (FairSeq Machine-Translation model)"),e0e.forEach(t),z3o=i(ue),O6=n(ue,"LI",{});var o0e=s(O6);xie=n(o0e,"STRONG",{});var kKr=s(xie);Q3o=r(kKr,"led"),kKr.forEach(t),W3o=r(o0e," \u2014 "),tj=n(o0e,"A",{href:!0});var SKr=s(tj);H3o=r(SKr,"LEDForConditionalGeneration"),SKr.forEach(t),U3o=r(o0e," (LED model)"),o0e.forEach(t),J3o=i(ue),V6=n(ue,"LI",{});var r0e=s(V6);$ie=n(r0e,"STRONG",{});var RKr=s($ie);Y3o=r(RKr,"m2m_100"),RKr.forEach(t),K3o=r(r0e," \u2014 "),aj=n(r0e,"A",{href:!0});var BKr=s(aj);Z3o=r(BKr,"M2M100ForConditionalGeneration"),BKr.forEach(t),ewo=r(r0e," (M2M100 model)"),r0e.forEach(t),owo=i(ue),X6=n(ue,"LI",{});var t0e=s(X6);kie=n(t0e,"STRONG",{});var PKr=s(kie);rwo=r(PKr,"marian"),PKr.forEach(t),two=r(t0e," \u2014 "),nj=n(t0e,"A",{href:!0});var IKr=s(nj);awo=r(IKr,"MarianMTModel"),IKr.forEach(t),nwo=r(t0e," (Marian model)"),t0e.forEach(t),swo=i(ue),z6=n(ue,"LI",{});var a0e=s(z6);Sie=n(a0e,"STRONG",{});var qKr=s(Sie);lwo=r(qKr,"mbart"),qKr.forEach(t),iwo=r(a0e," \u2014 "),sj=n(a0e,"A",{href:!0});var NKr=s(sj);dwo=r(NKr,"MBartForConditionalGeneration"),NKr.forEach(t),cwo=r(a0e," (mBART model)"),a0e.forEach(t),fwo=i(ue),Q6=n(ue,"LI",{});var n0e=s(Q6);Rie=n(n0e,"STRONG",{});var jKr=s(Rie);mwo=r(jKr,"mt5"),jKr.forEach(t),gwo=r(n0e," \u2014 "),lj=n(n0e,"A",{href:!0});var DKr=s(lj);hwo=r(DKr,"MT5ForConditionalGeneration"),DKr.forEach(t),pwo=r(n0e," (mT5 model)"),n0e.forEach(t),uwo=i(ue),W6=n(ue,"LI",{});var s0e=s(W6);Bie=n(s0e,"STRONG",{});var GKr=s(Bie);_wo=r(GKr,"pegasus"),GKr.forEach(t),bwo=r(s0e," \u2014 "),ij=n(s0e,"A",{href:!0});var OKr=s(ij);vwo=r(OKr,"PegasusForConditionalGeneration"),OKr.forEach(t),Fwo=r(s0e," (Pegasus model)"),s0e.forEach(t),Two=i(ue),H6=n(ue,"LI",{});var l0e=s(H6);Pie=n(l0e,"STRONG",{});var VKr=s(Pie);Mwo=r(VKr,"plbart"),VKr.forEach(t),Ewo=r(l0e," \u2014 "),dj=n(l0e,"A",{href:!0});var XKr=s(dj);Cwo=r(XKr,"PLBartForConditionalGeneration"),XKr.forEach(t),wwo=r(l0e," (PLBart model)"),l0e.forEach(t),Awo=i(ue),U6=n(ue,"LI",{});var i0e=s(U6);Iie=n(i0e,"STRONG",{});var zKr=s(Iie);ywo=r(zKr,"prophetnet"),zKr.forEach(t),Lwo=r(i0e," \u2014 "),cj=n(i0e,"A",{href:!0});var QKr=s(cj);xwo=r(QKr,"ProphetNetForConditionalGeneration"),QKr.forEach(t),$wo=r(i0e," (ProphetNet model)"),i0e.forEach(t),kwo=i(ue),J6=n(ue,"LI",{});var d0e=s(J6);qie=n(d0e,"STRONG",{});var WKr=s(qie);Swo=r(WKr,"t5"),WKr.forEach(t),Rwo=r(d0e," \u2014 "),fj=n(d0e,"A",{href:!0});var HKr=s(fj);Bwo=r(HKr,"T5ForConditionalGeneration"),HKr.forEach(t),Pwo=r(d0e," (T5 model)"),d0e.forEach(t),Iwo=i(ue),Y6=n(ue,"LI",{});var c0e=s(Y6);Nie=n(c0e,"STRONG",{});var UKr=s(Nie);qwo=r(UKr,"tapex"),UKr.forEach(t),Nwo=r(c0e," \u2014 "),mj=n(c0e,"A",{href:!0});var JKr=s(mj);jwo=r(JKr,"BartForConditionalGeneration"),JKr.forEach(t),Dwo=r(c0e," (TAPEX model)"),c0e.forEach(t),Gwo=i(ue),K6=n(ue,"LI",{});var f0e=s(K6);jie=n(f0e,"STRONG",{});var YKr=s(jie);Owo=r(YKr,"xlm-prophetnet"),YKr.forEach(t),Vwo=r(f0e," \u2014 "),gj=n(f0e,"A",{href:!0});var KKr=s(gj);Xwo=r(KKr,"XLMProphetNetForConditionalGeneration"),KKr.forEach(t),zwo=r(f0e," (XLMProphetNet model)"),f0e.forEach(t),ue.forEach(t),Qwo=i(Zt),Z6=n(Zt,"P",{});var m0e=s(Z6);Wwo=r(m0e,"The model is set in evaluation mode by default using "),Die=n(m0e,"CODE",{});var ZKr=s(Die);Hwo=r(ZKr,"model.eval()"),ZKr.forEach(t),Uwo=r(m0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=n(m0e,"CODE",{});var eZr=s(Gie);Jwo=r(eZr,"model.train()"),eZr.forEach(t),m0e.forEach(t),Ywo=i(Zt),T(e1.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),mBe=i(f),$i=n(f,"H2",{class:!0});var hIe=s($i);o1=n(hIe,"A",{id:!0,class:!0,href:!0});var oZr=s(o1);Oie=n(oZr,"SPAN",{});var rZr=s(Oie);T(h0.$$.fragment,rZr),rZr.forEach(t),oZr.forEach(t),Kwo=i(hIe),Vie=n(hIe,"SPAN",{});var tZr=s(Vie);Zwo=r(tZr,"AutoModelForSequenceClassification"),tZr.forEach(t),hIe.forEach(t),gBe=i(f),ko=n(f,"DIV",{class:!0});var js=s(ko);T(p0.$$.fragment,js),eAo=i(js),ki=n(js,"P",{});var fY=s(ki);oAo=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hj=n(fY,"A",{href:!0});var aZr=s(hj);rAo=r(aZr,"from_pretrained()"),aZr.forEach(t),tAo=r(fY," class method or the "),pj=n(fY,"A",{href:!0});var nZr=s(pj);aAo=r(nZr,"from_config()"),nZr.forEach(t),nAo=r(fY,` class
method.`),fY.forEach(t),sAo=i(js),u0=n(js,"P",{});var pIe=s(u0);lAo=r(pIe,"This class cannot be instantiated directly using "),Xie=n(pIe,"CODE",{});var sZr=s(Xie);iAo=r(sZr,"__init__()"),sZr.forEach(t),dAo=r(pIe," (throws an error)."),pIe.forEach(t),cAo=i(js),tt=n(js,"DIV",{class:!0});var S3=s(tt);T(_0.$$.fragment,S3),fAo=i(S3),zie=n(S3,"P",{});var lZr=s(zie);mAo=r(lZr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lZr.forEach(t),gAo=i(S3),Si=n(S3,"P",{});var mY=s(Si);hAo=r(mY,`Note:
Loading a model from its configuration file does `),Qie=n(mY,"STRONG",{});var iZr=s(Qie);pAo=r(iZr,"not"),iZr.forEach(t),uAo=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),uj=n(mY,"A",{href:!0});var dZr=s(uj);_Ao=r(dZr,"from_pretrained()"),dZr.forEach(t),bAo=r(mY," to load the model weights."),mY.forEach(t),vAo=i(S3),T(r1.$$.fragment,S3),S3.forEach(t),FAo=i(js),Ye=n(js,"DIV",{class:!0});var ea=s(Ye);T(b0.$$.fragment,ea),TAo=i(ea),Wie=n(ea,"P",{});var cZr=s(Wie);MAo=r(cZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cZr.forEach(t),EAo=i(ea),ya=n(ea,"P",{});var R3=s(ya);CAo=r(R3,"The model class to instantiate is selected based on the "),Hie=n(R3,"CODE",{});var fZr=s(Hie);wAo=r(fZr,"model_type"),fZr.forEach(t),AAo=r(R3,` property of the config object (either
passed as an argument or loaded from `),Uie=n(R3,"CODE",{});var mZr=s(Uie);yAo=r(mZr,"pretrained_model_name_or_path"),mZr.forEach(t),LAo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=n(R3,"CODE",{});var gZr=s(Jie);xAo=r(gZr,"pretrained_model_name_or_path"),gZr.forEach(t),$Ao=r(R3,":"),R3.forEach(t),kAo=i(ea),q=n(ea,"UL",{});var N=s(q);t1=n(N,"LI",{});var g0e=s(t1);Yie=n(g0e,"STRONG",{});var hZr=s(Yie);SAo=r(hZr,"albert"),hZr.forEach(t),RAo=r(g0e," \u2014 "),_j=n(g0e,"A",{href:!0});var pZr=s(_j);BAo=r(pZr,"AlbertForSequenceClassification"),pZr.forEach(t),PAo=r(g0e," (ALBERT model)"),g0e.forEach(t),IAo=i(N),a1=n(N,"LI",{});var h0e=s(a1);Kie=n(h0e,"STRONG",{});var uZr=s(Kie);qAo=r(uZr,"bart"),uZr.forEach(t),NAo=r(h0e," \u2014 "),bj=n(h0e,"A",{href:!0});var _Zr=s(bj);jAo=r(_Zr,"BartForSequenceClassification"),_Zr.forEach(t),DAo=r(h0e," (BART model)"),h0e.forEach(t),GAo=i(N),n1=n(N,"LI",{});var p0e=s(n1);Zie=n(p0e,"STRONG",{});var bZr=s(Zie);OAo=r(bZr,"bert"),bZr.forEach(t),VAo=r(p0e," \u2014 "),vj=n(p0e,"A",{href:!0});var vZr=s(vj);XAo=r(vZr,"BertForSequenceClassification"),vZr.forEach(t),zAo=r(p0e," (BERT model)"),p0e.forEach(t),QAo=i(N),s1=n(N,"LI",{});var u0e=s(s1);ede=n(u0e,"STRONG",{});var FZr=s(ede);WAo=r(FZr,"big_bird"),FZr.forEach(t),HAo=r(u0e," \u2014 "),Fj=n(u0e,"A",{href:!0});var TZr=s(Fj);UAo=r(TZr,"BigBirdForSequenceClassification"),TZr.forEach(t),JAo=r(u0e," (BigBird model)"),u0e.forEach(t),YAo=i(N),l1=n(N,"LI",{});var _0e=s(l1);ode=n(_0e,"STRONG",{});var MZr=s(ode);KAo=r(MZr,"bigbird_pegasus"),MZr.forEach(t),ZAo=r(_0e," \u2014 "),Tj=n(_0e,"A",{href:!0});var EZr=s(Tj);e0o=r(EZr,"BigBirdPegasusForSequenceClassification"),EZr.forEach(t),o0o=r(_0e," (BigBirdPegasus model)"),_0e.forEach(t),r0o=i(N),i1=n(N,"LI",{});var b0e=s(i1);rde=n(b0e,"STRONG",{});var CZr=s(rde);t0o=r(CZr,"camembert"),CZr.forEach(t),a0o=r(b0e," \u2014 "),Mj=n(b0e,"A",{href:!0});var wZr=s(Mj);n0o=r(wZr,"CamembertForSequenceClassification"),wZr.forEach(t),s0o=r(b0e," (CamemBERT model)"),b0e.forEach(t),l0o=i(N),d1=n(N,"LI",{});var v0e=s(d1);tde=n(v0e,"STRONG",{});var AZr=s(tde);i0o=r(AZr,"canine"),AZr.forEach(t),d0o=r(v0e," \u2014 "),Ej=n(v0e,"A",{href:!0});var yZr=s(Ej);c0o=r(yZr,"CanineForSequenceClassification"),yZr.forEach(t),f0o=r(v0e," (Canine model)"),v0e.forEach(t),m0o=i(N),c1=n(N,"LI",{});var F0e=s(c1);ade=n(F0e,"STRONG",{});var LZr=s(ade);g0o=r(LZr,"convbert"),LZr.forEach(t),h0o=r(F0e," \u2014 "),Cj=n(F0e,"A",{href:!0});var xZr=s(Cj);p0o=r(xZr,"ConvBertForSequenceClassification"),xZr.forEach(t),u0o=r(F0e," (ConvBERT model)"),F0e.forEach(t),_0o=i(N),f1=n(N,"LI",{});var T0e=s(f1);nde=n(T0e,"STRONG",{});var $Zr=s(nde);b0o=r($Zr,"ctrl"),$Zr.forEach(t),v0o=r(T0e," \u2014 "),wj=n(T0e,"A",{href:!0});var kZr=s(wj);F0o=r(kZr,"CTRLForSequenceClassification"),kZr.forEach(t),T0o=r(T0e," (CTRL model)"),T0e.forEach(t),M0o=i(N),m1=n(N,"LI",{});var M0e=s(m1);sde=n(M0e,"STRONG",{});var SZr=s(sde);E0o=r(SZr,"data2vec-text"),SZr.forEach(t),C0o=r(M0e," \u2014 "),Aj=n(M0e,"A",{href:!0});var RZr=s(Aj);w0o=r(RZr,"Data2VecTextForSequenceClassification"),RZr.forEach(t),A0o=r(M0e," (Data2VecText model)"),M0e.forEach(t),y0o=i(N),g1=n(N,"LI",{});var E0e=s(g1);lde=n(E0e,"STRONG",{});var BZr=s(lde);L0o=r(BZr,"deberta"),BZr.forEach(t),x0o=r(E0e," \u2014 "),yj=n(E0e,"A",{href:!0});var PZr=s(yj);$0o=r(PZr,"DebertaForSequenceClassification"),PZr.forEach(t),k0o=r(E0e," (DeBERTa model)"),E0e.forEach(t),S0o=i(N),h1=n(N,"LI",{});var C0e=s(h1);ide=n(C0e,"STRONG",{});var IZr=s(ide);R0o=r(IZr,"deberta-v2"),IZr.forEach(t),B0o=r(C0e," \u2014 "),Lj=n(C0e,"A",{href:!0});var qZr=s(Lj);P0o=r(qZr,"DebertaV2ForSequenceClassification"),qZr.forEach(t),I0o=r(C0e," (DeBERTa-v2 model)"),C0e.forEach(t),q0o=i(N),p1=n(N,"LI",{});var w0e=s(p1);dde=n(w0e,"STRONG",{});var NZr=s(dde);N0o=r(NZr,"distilbert"),NZr.forEach(t),j0o=r(w0e," \u2014 "),xj=n(w0e,"A",{href:!0});var jZr=s(xj);D0o=r(jZr,"DistilBertForSequenceClassification"),jZr.forEach(t),G0o=r(w0e," (DistilBERT model)"),w0e.forEach(t),O0o=i(N),u1=n(N,"LI",{});var A0e=s(u1);cde=n(A0e,"STRONG",{});var DZr=s(cde);V0o=r(DZr,"electra"),DZr.forEach(t),X0o=r(A0e," \u2014 "),$j=n(A0e,"A",{href:!0});var GZr=s($j);z0o=r(GZr,"ElectraForSequenceClassification"),GZr.forEach(t),Q0o=r(A0e," (ELECTRA model)"),A0e.forEach(t),W0o=i(N),_1=n(N,"LI",{});var y0e=s(_1);fde=n(y0e,"STRONG",{});var OZr=s(fde);H0o=r(OZr,"flaubert"),OZr.forEach(t),U0o=r(y0e," \u2014 "),kj=n(y0e,"A",{href:!0});var VZr=s(kj);J0o=r(VZr,"FlaubertForSequenceClassification"),VZr.forEach(t),Y0o=r(y0e," (FlauBERT model)"),y0e.forEach(t),K0o=i(N),b1=n(N,"LI",{});var L0e=s(b1);mde=n(L0e,"STRONG",{});var XZr=s(mde);Z0o=r(XZr,"fnet"),XZr.forEach(t),eyo=r(L0e," \u2014 "),Sj=n(L0e,"A",{href:!0});var zZr=s(Sj);oyo=r(zZr,"FNetForSequenceClassification"),zZr.forEach(t),ryo=r(L0e," (FNet model)"),L0e.forEach(t),tyo=i(N),v1=n(N,"LI",{});var x0e=s(v1);gde=n(x0e,"STRONG",{});var QZr=s(gde);ayo=r(QZr,"funnel"),QZr.forEach(t),nyo=r(x0e," \u2014 "),Rj=n(x0e,"A",{href:!0});var WZr=s(Rj);syo=r(WZr,"FunnelForSequenceClassification"),WZr.forEach(t),lyo=r(x0e," (Funnel Transformer model)"),x0e.forEach(t),iyo=i(N),F1=n(N,"LI",{});var $0e=s(F1);hde=n($0e,"STRONG",{});var HZr=s(hde);dyo=r(HZr,"gpt2"),HZr.forEach(t),cyo=r($0e," \u2014 "),Bj=n($0e,"A",{href:!0});var UZr=s(Bj);fyo=r(UZr,"GPT2ForSequenceClassification"),UZr.forEach(t),myo=r($0e," (OpenAI GPT-2 model)"),$0e.forEach(t),gyo=i(N),T1=n(N,"LI",{});var k0e=s(T1);pde=n(k0e,"STRONG",{});var JZr=s(pde);hyo=r(JZr,"gpt_neo"),JZr.forEach(t),pyo=r(k0e," \u2014 "),Pj=n(k0e,"A",{href:!0});var YZr=s(Pj);uyo=r(YZr,"GPTNeoForSequenceClassification"),YZr.forEach(t),_yo=r(k0e," (GPT Neo model)"),k0e.forEach(t),byo=i(N),M1=n(N,"LI",{});var S0e=s(M1);ude=n(S0e,"STRONG",{});var KZr=s(ude);vyo=r(KZr,"gptj"),KZr.forEach(t),Fyo=r(S0e," \u2014 "),Ij=n(S0e,"A",{href:!0});var ZZr=s(Ij);Tyo=r(ZZr,"GPTJForSequenceClassification"),ZZr.forEach(t),Myo=r(S0e," (GPT-J model)"),S0e.forEach(t),Eyo=i(N),E1=n(N,"LI",{});var R0e=s(E1);_de=n(R0e,"STRONG",{});var eet=s(_de);Cyo=r(eet,"ibert"),eet.forEach(t),wyo=r(R0e," \u2014 "),qj=n(R0e,"A",{href:!0});var oet=s(qj);Ayo=r(oet,"IBertForSequenceClassification"),oet.forEach(t),yyo=r(R0e," (I-BERT model)"),R0e.forEach(t),Lyo=i(N),C1=n(N,"LI",{});var B0e=s(C1);bde=n(B0e,"STRONG",{});var ret=s(bde);xyo=r(ret,"layoutlm"),ret.forEach(t),$yo=r(B0e," \u2014 "),Nj=n(B0e,"A",{href:!0});var tet=s(Nj);kyo=r(tet,"LayoutLMForSequenceClassification"),tet.forEach(t),Syo=r(B0e," (LayoutLM model)"),B0e.forEach(t),Ryo=i(N),w1=n(N,"LI",{});var P0e=s(w1);vde=n(P0e,"STRONG",{});var aet=s(vde);Byo=r(aet,"layoutlmv2"),aet.forEach(t),Pyo=r(P0e," \u2014 "),jj=n(P0e,"A",{href:!0});var net=s(jj);Iyo=r(net,"LayoutLMv2ForSequenceClassification"),net.forEach(t),qyo=r(P0e," (LayoutLMv2 model)"),P0e.forEach(t),Nyo=i(N),A1=n(N,"LI",{});var I0e=s(A1);Fde=n(I0e,"STRONG",{});var set=s(Fde);jyo=r(set,"led"),set.forEach(t),Dyo=r(I0e," \u2014 "),Dj=n(I0e,"A",{href:!0});var iet=s(Dj);Gyo=r(iet,"LEDForSequenceClassification"),iet.forEach(t),Oyo=r(I0e," (LED model)"),I0e.forEach(t),Vyo=i(N),y1=n(N,"LI",{});var q0e=s(y1);Tde=n(q0e,"STRONG",{});var det=s(Tde);Xyo=r(det,"longformer"),det.forEach(t),zyo=r(q0e," \u2014 "),Gj=n(q0e,"A",{href:!0});var cet=s(Gj);Qyo=r(cet,"LongformerForSequenceClassification"),cet.forEach(t),Wyo=r(q0e," (Longformer model)"),q0e.forEach(t),Hyo=i(N),L1=n(N,"LI",{});var N0e=s(L1);Mde=n(N0e,"STRONG",{});var fet=s(Mde);Uyo=r(fet,"mbart"),fet.forEach(t),Jyo=r(N0e," \u2014 "),Oj=n(N0e,"A",{href:!0});var met=s(Oj);Yyo=r(met,"MBartForSequenceClassification"),met.forEach(t),Kyo=r(N0e," (mBART model)"),N0e.forEach(t),Zyo=i(N),x1=n(N,"LI",{});var j0e=s(x1);Ede=n(j0e,"STRONG",{});var get=s(Ede);eLo=r(get,"megatron-bert"),get.forEach(t),oLo=r(j0e," \u2014 "),Vj=n(j0e,"A",{href:!0});var het=s(Vj);rLo=r(het,"MegatronBertForSequenceClassification"),het.forEach(t),tLo=r(j0e," (MegatronBert model)"),j0e.forEach(t),aLo=i(N),$1=n(N,"LI",{});var D0e=s($1);Cde=n(D0e,"STRONG",{});var pet=s(Cde);nLo=r(pet,"mobilebert"),pet.forEach(t),sLo=r(D0e," \u2014 "),Xj=n(D0e,"A",{href:!0});var uet=s(Xj);lLo=r(uet,"MobileBertForSequenceClassification"),uet.forEach(t),iLo=r(D0e," (MobileBERT model)"),D0e.forEach(t),dLo=i(N),k1=n(N,"LI",{});var G0e=s(k1);wde=n(G0e,"STRONG",{});var _et=s(wde);cLo=r(_et,"mpnet"),_et.forEach(t),fLo=r(G0e," \u2014 "),zj=n(G0e,"A",{href:!0});var bet=s(zj);mLo=r(bet,"MPNetForSequenceClassification"),bet.forEach(t),gLo=r(G0e," (MPNet model)"),G0e.forEach(t),hLo=i(N),S1=n(N,"LI",{});var O0e=s(S1);Ade=n(O0e,"STRONG",{});var vet=s(Ade);pLo=r(vet,"nystromformer"),vet.forEach(t),uLo=r(O0e," \u2014 "),Qj=n(O0e,"A",{href:!0});var Fet=s(Qj);_Lo=r(Fet,"NystromformerForSequenceClassification"),Fet.forEach(t),bLo=r(O0e," (Nystromformer model)"),O0e.forEach(t),vLo=i(N),R1=n(N,"LI",{});var V0e=s(R1);yde=n(V0e,"STRONG",{});var Tet=s(yde);FLo=r(Tet,"openai-gpt"),Tet.forEach(t),TLo=r(V0e," \u2014 "),Wj=n(V0e,"A",{href:!0});var Met=s(Wj);MLo=r(Met,"OpenAIGPTForSequenceClassification"),Met.forEach(t),ELo=r(V0e," (OpenAI GPT model)"),V0e.forEach(t),CLo=i(N),B1=n(N,"LI",{});var X0e=s(B1);Lde=n(X0e,"STRONG",{});var Eet=s(Lde);wLo=r(Eet,"perceiver"),Eet.forEach(t),ALo=r(X0e," \u2014 "),Hj=n(X0e,"A",{href:!0});var Cet=s(Hj);yLo=r(Cet,"PerceiverForSequenceClassification"),Cet.forEach(t),LLo=r(X0e," (Perceiver model)"),X0e.forEach(t),xLo=i(N),P1=n(N,"LI",{});var z0e=s(P1);xde=n(z0e,"STRONG",{});var wet=s(xde);$Lo=r(wet,"plbart"),wet.forEach(t),kLo=r(z0e," \u2014 "),Uj=n(z0e,"A",{href:!0});var Aet=s(Uj);SLo=r(Aet,"PLBartForSequenceClassification"),Aet.forEach(t),RLo=r(z0e," (PLBart model)"),z0e.forEach(t),BLo=i(N),I1=n(N,"LI",{});var Q0e=s(I1);$de=n(Q0e,"STRONG",{});var yet=s($de);PLo=r(yet,"qdqbert"),yet.forEach(t),ILo=r(Q0e," \u2014 "),Jj=n(Q0e,"A",{href:!0});var Let=s(Jj);qLo=r(Let,"QDQBertForSequenceClassification"),Let.forEach(t),NLo=r(Q0e," (QDQBert model)"),Q0e.forEach(t),jLo=i(N),q1=n(N,"LI",{});var W0e=s(q1);kde=n(W0e,"STRONG",{});var xet=s(kde);DLo=r(xet,"reformer"),xet.forEach(t),GLo=r(W0e," \u2014 "),Yj=n(W0e,"A",{href:!0});var $et=s(Yj);OLo=r($et,"ReformerForSequenceClassification"),$et.forEach(t),VLo=r(W0e," (Reformer model)"),W0e.forEach(t),XLo=i(N),N1=n(N,"LI",{});var H0e=s(N1);Sde=n(H0e,"STRONG",{});var ket=s(Sde);zLo=r(ket,"rembert"),ket.forEach(t),QLo=r(H0e," \u2014 "),Kj=n(H0e,"A",{href:!0});var Set=s(Kj);WLo=r(Set,"RemBertForSequenceClassification"),Set.forEach(t),HLo=r(H0e," (RemBERT model)"),H0e.forEach(t),ULo=i(N),j1=n(N,"LI",{});var U0e=s(j1);Rde=n(U0e,"STRONG",{});var Ret=s(Rde);JLo=r(Ret,"roberta"),Ret.forEach(t),YLo=r(U0e," \u2014 "),Zj=n(U0e,"A",{href:!0});var Bet=s(Zj);KLo=r(Bet,"RobertaForSequenceClassification"),Bet.forEach(t),ZLo=r(U0e," (RoBERTa model)"),U0e.forEach(t),e8o=i(N),D1=n(N,"LI",{});var J0e=s(D1);Bde=n(J0e,"STRONG",{});var Pet=s(Bde);o8o=r(Pet,"roformer"),Pet.forEach(t),r8o=r(J0e," \u2014 "),eD=n(J0e,"A",{href:!0});var Iet=s(eD);t8o=r(Iet,"RoFormerForSequenceClassification"),Iet.forEach(t),a8o=r(J0e," (RoFormer model)"),J0e.forEach(t),n8o=i(N),G1=n(N,"LI",{});var Y0e=s(G1);Pde=n(Y0e,"STRONG",{});var qet=s(Pde);s8o=r(qet,"squeezebert"),qet.forEach(t),l8o=r(Y0e," \u2014 "),oD=n(Y0e,"A",{href:!0});var Net=s(oD);i8o=r(Net,"SqueezeBertForSequenceClassification"),Net.forEach(t),d8o=r(Y0e," (SqueezeBERT model)"),Y0e.forEach(t),c8o=i(N),O1=n(N,"LI",{});var K0e=s(O1);Ide=n(K0e,"STRONG",{});var jet=s(Ide);f8o=r(jet,"tapas"),jet.forEach(t),m8o=r(K0e," \u2014 "),rD=n(K0e,"A",{href:!0});var Det=s(rD);g8o=r(Det,"TapasForSequenceClassification"),Det.forEach(t),h8o=r(K0e," (TAPAS model)"),K0e.forEach(t),p8o=i(N),V1=n(N,"LI",{});var Z0e=s(V1);qde=n(Z0e,"STRONG",{});var Get=s(qde);u8o=r(Get,"tapex"),Get.forEach(t),_8o=r(Z0e," \u2014 "),tD=n(Z0e,"A",{href:!0});var Oet=s(tD);b8o=r(Oet,"BartForSequenceClassification"),Oet.forEach(t),v8o=r(Z0e," (TAPEX model)"),Z0e.forEach(t),F8o=i(N),X1=n(N,"LI",{});var eye=s(X1);Nde=n(eye,"STRONG",{});var Vet=s(Nde);T8o=r(Vet,"transfo-xl"),Vet.forEach(t),M8o=r(eye," \u2014 "),aD=n(eye,"A",{href:!0});var Xet=s(aD);E8o=r(Xet,"TransfoXLForSequenceClassification"),Xet.forEach(t),C8o=r(eye," (Transformer-XL model)"),eye.forEach(t),w8o=i(N),z1=n(N,"LI",{});var oye=s(z1);jde=n(oye,"STRONG",{});var zet=s(jde);A8o=r(zet,"xlm"),zet.forEach(t),y8o=r(oye," \u2014 "),nD=n(oye,"A",{href:!0});var Qet=s(nD);L8o=r(Qet,"XLMForSequenceClassification"),Qet.forEach(t),x8o=r(oye," (XLM model)"),oye.forEach(t),$8o=i(N),Q1=n(N,"LI",{});var rye=s(Q1);Dde=n(rye,"STRONG",{});var Wet=s(Dde);k8o=r(Wet,"xlm-roberta"),Wet.forEach(t),S8o=r(rye," \u2014 "),sD=n(rye,"A",{href:!0});var Het=s(sD);R8o=r(Het,"XLMRobertaForSequenceClassification"),Het.forEach(t),B8o=r(rye," (XLM-RoBERTa model)"),rye.forEach(t),P8o=i(N),W1=n(N,"LI",{});var tye=s(W1);Gde=n(tye,"STRONG",{});var Uet=s(Gde);I8o=r(Uet,"xlm-roberta-xl"),Uet.forEach(t),q8o=r(tye," \u2014 "),lD=n(tye,"A",{href:!0});var Jet=s(lD);N8o=r(Jet,"XLMRobertaXLForSequenceClassification"),Jet.forEach(t),j8o=r(tye," (XLM-RoBERTa-XL model)"),tye.forEach(t),D8o=i(N),H1=n(N,"LI",{});var aye=s(H1);Ode=n(aye,"STRONG",{});var Yet=s(Ode);G8o=r(Yet,"xlnet"),Yet.forEach(t),O8o=r(aye," \u2014 "),iD=n(aye,"A",{href:!0});var Ket=s(iD);V8o=r(Ket,"XLNetForSequenceClassification"),Ket.forEach(t),X8o=r(aye," (XLNet model)"),aye.forEach(t),z8o=i(N),U1=n(N,"LI",{});var nye=s(U1);Vde=n(nye,"STRONG",{});var Zet=s(Vde);Q8o=r(Zet,"yoso"),Zet.forEach(t),W8o=r(nye," \u2014 "),dD=n(nye,"A",{href:!0});var eot=s(dD);H8o=r(eot,"YosoForSequenceClassification"),eot.forEach(t),U8o=r(nye," (YOSO model)"),nye.forEach(t),N.forEach(t),J8o=i(ea),J1=n(ea,"P",{});var sye=s(J1);Y8o=r(sye,"The model is set in evaluation mode by default using "),Xde=n(sye,"CODE",{});var oot=s(Xde);K8o=r(oot,"model.eval()"),oot.forEach(t),Z8o=r(sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=n(sye,"CODE",{});var rot=s(zde);e7o=r(rot,"model.train()"),rot.forEach(t),sye.forEach(t),o7o=i(ea),T(Y1.$$.fragment,ea),ea.forEach(t),js.forEach(t),hBe=i(f),Ri=n(f,"H2",{class:!0});var uIe=s(Ri);K1=n(uIe,"A",{id:!0,class:!0,href:!0});var tot=s(K1);Qde=n(tot,"SPAN",{});var aot=s(Qde);T(v0.$$.fragment,aot),aot.forEach(t),tot.forEach(t),r7o=i(uIe),Wde=n(uIe,"SPAN",{});var not=s(Wde);t7o=r(not,"AutoModelForMultipleChoice"),not.forEach(t),uIe.forEach(t),pBe=i(f),So=n(f,"DIV",{class:!0});var Ds=s(So);T(F0.$$.fragment,Ds),a7o=i(Ds),Bi=n(Ds,"P",{});var gY=s(Bi);n7o=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cD=n(gY,"A",{href:!0});var sot=s(cD);s7o=r(sot,"from_pretrained()"),sot.forEach(t),l7o=r(gY," class method or the "),fD=n(gY,"A",{href:!0});var lot=s(fD);i7o=r(lot,"from_config()"),lot.forEach(t),d7o=r(gY,` class
method.`),gY.forEach(t),c7o=i(Ds),T0=n(Ds,"P",{});var _Ie=s(T0);f7o=r(_Ie,"This class cannot be instantiated directly using "),Hde=n(_Ie,"CODE",{});var iot=s(Hde);m7o=r(iot,"__init__()"),iot.forEach(t),g7o=r(_Ie," (throws an error)."),_Ie.forEach(t),h7o=i(Ds),at=n(Ds,"DIV",{class:!0});var B3=s(at);T(M0.$$.fragment,B3),p7o=i(B3),Ude=n(B3,"P",{});var dot=s(Ude);u7o=r(dot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dot.forEach(t),_7o=i(B3),Pi=n(B3,"P",{});var hY=s(Pi);b7o=r(hY,`Note:
Loading a model from its configuration file does `),Jde=n(hY,"STRONG",{});var cot=s(Jde);v7o=r(cot,"not"),cot.forEach(t),F7o=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=n(hY,"A",{href:!0});var fot=s(mD);T7o=r(fot,"from_pretrained()"),fot.forEach(t),M7o=r(hY," to load the model weights."),hY.forEach(t),E7o=i(B3),T(Z1.$$.fragment,B3),B3.forEach(t),C7o=i(Ds),Ke=n(Ds,"DIV",{class:!0});var oa=s(Ke);T(E0.$$.fragment,oa),w7o=i(oa),Yde=n(oa,"P",{});var mot=s(Yde);A7o=r(mot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mot.forEach(t),y7o=i(oa),La=n(oa,"P",{});var P3=s(La);L7o=r(P3,"The model class to instantiate is selected based on the "),Kde=n(P3,"CODE",{});var got=s(Kde);x7o=r(got,"model_type"),got.forEach(t),$7o=r(P3,` property of the config object (either
passed as an argument or loaded from `),Zde=n(P3,"CODE",{});var hot=s(Zde);k7o=r(hot,"pretrained_model_name_or_path"),hot.forEach(t),S7o=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=n(P3,"CODE",{});var pot=s(ece);R7o=r(pot,"pretrained_model_name_or_path"),pot.forEach(t),B7o=r(P3,":"),P3.forEach(t),P7o=i(oa),Y=n(oa,"UL",{});var K=s(Y);eb=n(K,"LI",{});var lye=s(eb);oce=n(lye,"STRONG",{});var uot=s(oce);I7o=r(uot,"albert"),uot.forEach(t),q7o=r(lye," \u2014 "),gD=n(lye,"A",{href:!0});var _ot=s(gD);N7o=r(_ot,"AlbertForMultipleChoice"),_ot.forEach(t),j7o=r(lye," (ALBERT model)"),lye.forEach(t),D7o=i(K),ob=n(K,"LI",{});var iye=s(ob);rce=n(iye,"STRONG",{});var bot=s(rce);G7o=r(bot,"bert"),bot.forEach(t),O7o=r(iye," \u2014 "),hD=n(iye,"A",{href:!0});var vot=s(hD);V7o=r(vot,"BertForMultipleChoice"),vot.forEach(t),X7o=r(iye," (BERT model)"),iye.forEach(t),z7o=i(K),rb=n(K,"LI",{});var dye=s(rb);tce=n(dye,"STRONG",{});var Fot=s(tce);Q7o=r(Fot,"big_bird"),Fot.forEach(t),W7o=r(dye," \u2014 "),pD=n(dye,"A",{href:!0});var Tot=s(pD);H7o=r(Tot,"BigBirdForMultipleChoice"),Tot.forEach(t),U7o=r(dye," (BigBird model)"),dye.forEach(t),J7o=i(K),tb=n(K,"LI",{});var cye=s(tb);ace=n(cye,"STRONG",{});var Mot=s(ace);Y7o=r(Mot,"camembert"),Mot.forEach(t),K7o=r(cye," \u2014 "),uD=n(cye,"A",{href:!0});var Eot=s(uD);Z7o=r(Eot,"CamembertForMultipleChoice"),Eot.forEach(t),exo=r(cye," (CamemBERT model)"),cye.forEach(t),oxo=i(K),ab=n(K,"LI",{});var fye=s(ab);nce=n(fye,"STRONG",{});var Cot=s(nce);rxo=r(Cot,"canine"),Cot.forEach(t),txo=r(fye," \u2014 "),_D=n(fye,"A",{href:!0});var wot=s(_D);axo=r(wot,"CanineForMultipleChoice"),wot.forEach(t),nxo=r(fye," (Canine model)"),fye.forEach(t),sxo=i(K),nb=n(K,"LI",{});var mye=s(nb);sce=n(mye,"STRONG",{});var Aot=s(sce);lxo=r(Aot,"convbert"),Aot.forEach(t),ixo=r(mye," \u2014 "),bD=n(mye,"A",{href:!0});var yot=s(bD);dxo=r(yot,"ConvBertForMultipleChoice"),yot.forEach(t),cxo=r(mye," (ConvBERT model)"),mye.forEach(t),fxo=i(K),sb=n(K,"LI",{});var gye=s(sb);lce=n(gye,"STRONG",{});var Lot=s(lce);mxo=r(Lot,"data2vec-text"),Lot.forEach(t),gxo=r(gye," \u2014 "),vD=n(gye,"A",{href:!0});var xot=s(vD);hxo=r(xot,"Data2VecTextForMultipleChoice"),xot.forEach(t),pxo=r(gye," (Data2VecText model)"),gye.forEach(t),uxo=i(K),lb=n(K,"LI",{});var hye=s(lb);ice=n(hye,"STRONG",{});var $ot=s(ice);_xo=r($ot,"distilbert"),$ot.forEach(t),bxo=r(hye," \u2014 "),FD=n(hye,"A",{href:!0});var kot=s(FD);vxo=r(kot,"DistilBertForMultipleChoice"),kot.forEach(t),Fxo=r(hye," (DistilBERT model)"),hye.forEach(t),Txo=i(K),ib=n(K,"LI",{});var pye=s(ib);dce=n(pye,"STRONG",{});var Sot=s(dce);Mxo=r(Sot,"electra"),Sot.forEach(t),Exo=r(pye," \u2014 "),TD=n(pye,"A",{href:!0});var Rot=s(TD);Cxo=r(Rot,"ElectraForMultipleChoice"),Rot.forEach(t),wxo=r(pye," (ELECTRA model)"),pye.forEach(t),Axo=i(K),db=n(K,"LI",{});var uye=s(db);cce=n(uye,"STRONG",{});var Bot=s(cce);yxo=r(Bot,"flaubert"),Bot.forEach(t),Lxo=r(uye," \u2014 "),MD=n(uye,"A",{href:!0});var Pot=s(MD);xxo=r(Pot,"FlaubertForMultipleChoice"),Pot.forEach(t),$xo=r(uye," (FlauBERT model)"),uye.forEach(t),kxo=i(K),cb=n(K,"LI",{});var _ye=s(cb);fce=n(_ye,"STRONG",{});var Iot=s(fce);Sxo=r(Iot,"fnet"),Iot.forEach(t),Rxo=r(_ye," \u2014 "),ED=n(_ye,"A",{href:!0});var qot=s(ED);Bxo=r(qot,"FNetForMultipleChoice"),qot.forEach(t),Pxo=r(_ye," (FNet model)"),_ye.forEach(t),Ixo=i(K),fb=n(K,"LI",{});var bye=s(fb);mce=n(bye,"STRONG",{});var Not=s(mce);qxo=r(Not,"funnel"),Not.forEach(t),Nxo=r(bye," \u2014 "),CD=n(bye,"A",{href:!0});var jot=s(CD);jxo=r(jot,"FunnelForMultipleChoice"),jot.forEach(t),Dxo=r(bye," (Funnel Transformer model)"),bye.forEach(t),Gxo=i(K),mb=n(K,"LI",{});var vye=s(mb);gce=n(vye,"STRONG",{});var Dot=s(gce);Oxo=r(Dot,"ibert"),Dot.forEach(t),Vxo=r(vye," \u2014 "),wD=n(vye,"A",{href:!0});var Got=s(wD);Xxo=r(Got,"IBertForMultipleChoice"),Got.forEach(t),zxo=r(vye," (I-BERT model)"),vye.forEach(t),Qxo=i(K),gb=n(K,"LI",{});var Fye=s(gb);hce=n(Fye,"STRONG",{});var Oot=s(hce);Wxo=r(Oot,"longformer"),Oot.forEach(t),Hxo=r(Fye," \u2014 "),AD=n(Fye,"A",{href:!0});var Vot=s(AD);Uxo=r(Vot,"LongformerForMultipleChoice"),Vot.forEach(t),Jxo=r(Fye," (Longformer model)"),Fye.forEach(t),Yxo=i(K),hb=n(K,"LI",{});var Tye=s(hb);pce=n(Tye,"STRONG",{});var Xot=s(pce);Kxo=r(Xot,"megatron-bert"),Xot.forEach(t),Zxo=r(Tye," \u2014 "),yD=n(Tye,"A",{href:!0});var zot=s(yD);e$o=r(zot,"MegatronBertForMultipleChoice"),zot.forEach(t),o$o=r(Tye," (MegatronBert model)"),Tye.forEach(t),r$o=i(K),pb=n(K,"LI",{});var Mye=s(pb);uce=n(Mye,"STRONG",{});var Qot=s(uce);t$o=r(Qot,"mobilebert"),Qot.forEach(t),a$o=r(Mye," \u2014 "),LD=n(Mye,"A",{href:!0});var Wot=s(LD);n$o=r(Wot,"MobileBertForMultipleChoice"),Wot.forEach(t),s$o=r(Mye," (MobileBERT model)"),Mye.forEach(t),l$o=i(K),ub=n(K,"LI",{});var Eye=s(ub);_ce=n(Eye,"STRONG",{});var Hot=s(_ce);i$o=r(Hot,"mpnet"),Hot.forEach(t),d$o=r(Eye," \u2014 "),xD=n(Eye,"A",{href:!0});var Uot=s(xD);c$o=r(Uot,"MPNetForMultipleChoice"),Uot.forEach(t),f$o=r(Eye," (MPNet model)"),Eye.forEach(t),m$o=i(K),_b=n(K,"LI",{});var Cye=s(_b);bce=n(Cye,"STRONG",{});var Jot=s(bce);g$o=r(Jot,"nystromformer"),Jot.forEach(t),h$o=r(Cye," \u2014 "),$D=n(Cye,"A",{href:!0});var Yot=s($D);p$o=r(Yot,"NystromformerForMultipleChoice"),Yot.forEach(t),u$o=r(Cye," (Nystromformer model)"),Cye.forEach(t),_$o=i(K),bb=n(K,"LI",{});var wye=s(bb);vce=n(wye,"STRONG",{});var Kot=s(vce);b$o=r(Kot,"qdqbert"),Kot.forEach(t),v$o=r(wye," \u2014 "),kD=n(wye,"A",{href:!0});var Zot=s(kD);F$o=r(Zot,"QDQBertForMultipleChoice"),Zot.forEach(t),T$o=r(wye," (QDQBert model)"),wye.forEach(t),M$o=i(K),vb=n(K,"LI",{});var Aye=s(vb);Fce=n(Aye,"STRONG",{});var ert=s(Fce);E$o=r(ert,"rembert"),ert.forEach(t),C$o=r(Aye," \u2014 "),SD=n(Aye,"A",{href:!0});var ort=s(SD);w$o=r(ort,"RemBertForMultipleChoice"),ort.forEach(t),A$o=r(Aye," (RemBERT model)"),Aye.forEach(t),y$o=i(K),Fb=n(K,"LI",{});var yye=s(Fb);Tce=n(yye,"STRONG",{});var rrt=s(Tce);L$o=r(rrt,"roberta"),rrt.forEach(t),x$o=r(yye," \u2014 "),RD=n(yye,"A",{href:!0});var trt=s(RD);$$o=r(trt,"RobertaForMultipleChoice"),trt.forEach(t),k$o=r(yye," (RoBERTa model)"),yye.forEach(t),S$o=i(K),Tb=n(K,"LI",{});var Lye=s(Tb);Mce=n(Lye,"STRONG",{});var art=s(Mce);R$o=r(art,"roformer"),art.forEach(t),B$o=r(Lye," \u2014 "),BD=n(Lye,"A",{href:!0});var nrt=s(BD);P$o=r(nrt,"RoFormerForMultipleChoice"),nrt.forEach(t),I$o=r(Lye," (RoFormer model)"),Lye.forEach(t),q$o=i(K),Mb=n(K,"LI",{});var xye=s(Mb);Ece=n(xye,"STRONG",{});var srt=s(Ece);N$o=r(srt,"squeezebert"),srt.forEach(t),j$o=r(xye," \u2014 "),PD=n(xye,"A",{href:!0});var lrt=s(PD);D$o=r(lrt,"SqueezeBertForMultipleChoice"),lrt.forEach(t),G$o=r(xye," (SqueezeBERT model)"),xye.forEach(t),O$o=i(K),Eb=n(K,"LI",{});var $ye=s(Eb);Cce=n($ye,"STRONG",{});var irt=s(Cce);V$o=r(irt,"xlm"),irt.forEach(t),X$o=r($ye," \u2014 "),ID=n($ye,"A",{href:!0});var drt=s(ID);z$o=r(drt,"XLMForMultipleChoice"),drt.forEach(t),Q$o=r($ye," (XLM model)"),$ye.forEach(t),W$o=i(K),Cb=n(K,"LI",{});var kye=s(Cb);wce=n(kye,"STRONG",{});var crt=s(wce);H$o=r(crt,"xlm-roberta"),crt.forEach(t),U$o=r(kye," \u2014 "),qD=n(kye,"A",{href:!0});var frt=s(qD);J$o=r(frt,"XLMRobertaForMultipleChoice"),frt.forEach(t),Y$o=r(kye," (XLM-RoBERTa model)"),kye.forEach(t),K$o=i(K),wb=n(K,"LI",{});var Sye=s(wb);Ace=n(Sye,"STRONG",{});var mrt=s(Ace);Z$o=r(mrt,"xlm-roberta-xl"),mrt.forEach(t),eko=r(Sye," \u2014 "),ND=n(Sye,"A",{href:!0});var grt=s(ND);oko=r(grt,"XLMRobertaXLForMultipleChoice"),grt.forEach(t),rko=r(Sye," (XLM-RoBERTa-XL model)"),Sye.forEach(t),tko=i(K),Ab=n(K,"LI",{});var Rye=s(Ab);yce=n(Rye,"STRONG",{});var hrt=s(yce);ako=r(hrt,"xlnet"),hrt.forEach(t),nko=r(Rye," \u2014 "),jD=n(Rye,"A",{href:!0});var prt=s(jD);sko=r(prt,"XLNetForMultipleChoice"),prt.forEach(t),lko=r(Rye," (XLNet model)"),Rye.forEach(t),iko=i(K),yb=n(K,"LI",{});var Bye=s(yb);Lce=n(Bye,"STRONG",{});var urt=s(Lce);dko=r(urt,"yoso"),urt.forEach(t),cko=r(Bye," \u2014 "),DD=n(Bye,"A",{href:!0});var _rt=s(DD);fko=r(_rt,"YosoForMultipleChoice"),_rt.forEach(t),mko=r(Bye," (YOSO model)"),Bye.forEach(t),K.forEach(t),gko=i(oa),Lb=n(oa,"P",{});var Pye=s(Lb);hko=r(Pye,"The model is set in evaluation mode by default using "),xce=n(Pye,"CODE",{});var brt=s(xce);pko=r(brt,"model.eval()"),brt.forEach(t),uko=r(Pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(Pye,"CODE",{});var vrt=s($ce);_ko=r(vrt,"model.train()"),vrt.forEach(t),Pye.forEach(t),bko=i(oa),T(xb.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),uBe=i(f),Ii=n(f,"H2",{class:!0});var bIe=s(Ii);$b=n(bIe,"A",{id:!0,class:!0,href:!0});var Frt=s($b);kce=n(Frt,"SPAN",{});var Trt=s(kce);T(C0.$$.fragment,Trt),Trt.forEach(t),Frt.forEach(t),vko=i(bIe),Sce=n(bIe,"SPAN",{});var Mrt=s(Sce);Fko=r(Mrt,"AutoModelForNextSentencePrediction"),Mrt.forEach(t),bIe.forEach(t),_Be=i(f),Ro=n(f,"DIV",{class:!0});var Gs=s(Ro);T(w0.$$.fragment,Gs),Tko=i(Gs),qi=n(Gs,"P",{});var pY=s(qi);Mko=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GD=n(pY,"A",{href:!0});var Ert=s(GD);Eko=r(Ert,"from_pretrained()"),Ert.forEach(t),Cko=r(pY," class method or the "),OD=n(pY,"A",{href:!0});var Crt=s(OD);wko=r(Crt,"from_config()"),Crt.forEach(t),Ako=r(pY,` class
method.`),pY.forEach(t),yko=i(Gs),A0=n(Gs,"P",{});var vIe=s(A0);Lko=r(vIe,"This class cannot be instantiated directly using "),Rce=n(vIe,"CODE",{});var wrt=s(Rce);xko=r(wrt,"__init__()"),wrt.forEach(t),$ko=r(vIe," (throws an error)."),vIe.forEach(t),kko=i(Gs),nt=n(Gs,"DIV",{class:!0});var I3=s(nt);T(y0.$$.fragment,I3),Sko=i(I3),Bce=n(I3,"P",{});var Art=s(Bce);Rko=r(Art,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Art.forEach(t),Bko=i(I3),Ni=n(I3,"P",{});var uY=s(Ni);Pko=r(uY,`Note:
Loading a model from its configuration file does `),Pce=n(uY,"STRONG",{});var yrt=s(Pce);Iko=r(yrt,"not"),yrt.forEach(t),qko=r(uY,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(uY,"A",{href:!0});var Lrt=s(VD);Nko=r(Lrt,"from_pretrained()"),Lrt.forEach(t),jko=r(uY," to load the model weights."),uY.forEach(t),Dko=i(I3),T(kb.$$.fragment,I3),I3.forEach(t),Gko=i(Gs),Ze=n(Gs,"DIV",{class:!0});var ra=s(Ze);T(L0.$$.fragment,ra),Oko=i(ra),Ice=n(ra,"P",{});var xrt=s(Ice);Vko=r(xrt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xrt.forEach(t),Xko=i(ra),xa=n(ra,"P",{});var q3=s(xa);zko=r(q3,"The model class to instantiate is selected based on the "),qce=n(q3,"CODE",{});var $rt=s(qce);Qko=r($rt,"model_type"),$rt.forEach(t),Wko=r(q3,` property of the config object (either
passed as an argument or loaded from `),Nce=n(q3,"CODE",{});var krt=s(Nce);Hko=r(krt,"pretrained_model_name_or_path"),krt.forEach(t),Uko=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=n(q3,"CODE",{});var Srt=s(jce);Jko=r(Srt,"pretrained_model_name_or_path"),Srt.forEach(t),Yko=r(q3,":"),q3.forEach(t),Kko=i(ra),Wr=n(ra,"UL",{});var Os=s(Wr);Sb=n(Os,"LI",{});var Iye=s(Sb);Dce=n(Iye,"STRONG",{});var Rrt=s(Dce);Zko=r(Rrt,"bert"),Rrt.forEach(t),eSo=r(Iye," \u2014 "),XD=n(Iye,"A",{href:!0});var Brt=s(XD);oSo=r(Brt,"BertForNextSentencePrediction"),Brt.forEach(t),rSo=r(Iye," (BERT model)"),Iye.forEach(t),tSo=i(Os),Rb=n(Os,"LI",{});var qye=s(Rb);Gce=n(qye,"STRONG",{});var Prt=s(Gce);aSo=r(Prt,"fnet"),Prt.forEach(t),nSo=r(qye," \u2014 "),zD=n(qye,"A",{href:!0});var Irt=s(zD);sSo=r(Irt,"FNetForNextSentencePrediction"),Irt.forEach(t),lSo=r(qye," (FNet model)"),qye.forEach(t),iSo=i(Os),Bb=n(Os,"LI",{});var Nye=s(Bb);Oce=n(Nye,"STRONG",{});var qrt=s(Oce);dSo=r(qrt,"megatron-bert"),qrt.forEach(t),cSo=r(Nye," \u2014 "),QD=n(Nye,"A",{href:!0});var Nrt=s(QD);fSo=r(Nrt,"MegatronBertForNextSentencePrediction"),Nrt.forEach(t),mSo=r(Nye," (MegatronBert model)"),Nye.forEach(t),gSo=i(Os),Pb=n(Os,"LI",{});var jye=s(Pb);Vce=n(jye,"STRONG",{});var jrt=s(Vce);hSo=r(jrt,"mobilebert"),jrt.forEach(t),pSo=r(jye," \u2014 "),WD=n(jye,"A",{href:!0});var Drt=s(WD);uSo=r(Drt,"MobileBertForNextSentencePrediction"),Drt.forEach(t),_So=r(jye," (MobileBERT model)"),jye.forEach(t),bSo=i(Os),Ib=n(Os,"LI",{});var Dye=s(Ib);Xce=n(Dye,"STRONG",{});var Grt=s(Xce);vSo=r(Grt,"qdqbert"),Grt.forEach(t),FSo=r(Dye," \u2014 "),HD=n(Dye,"A",{href:!0});var Ort=s(HD);TSo=r(Ort,"QDQBertForNextSentencePrediction"),Ort.forEach(t),MSo=r(Dye," (QDQBert model)"),Dye.forEach(t),Os.forEach(t),ESo=i(ra),qb=n(ra,"P",{});var Gye=s(qb);CSo=r(Gye,"The model is set in evaluation mode by default using "),zce=n(Gye,"CODE",{});var Vrt=s(zce);wSo=r(Vrt,"model.eval()"),Vrt.forEach(t),ASo=r(Gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(Gye,"CODE",{});var Xrt=s(Qce);ySo=r(Xrt,"model.train()"),Xrt.forEach(t),Gye.forEach(t),LSo=i(ra),T(Nb.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),bBe=i(f),ji=n(f,"H2",{class:!0});var FIe=s(ji);jb=n(FIe,"A",{id:!0,class:!0,href:!0});var zrt=s(jb);Wce=n(zrt,"SPAN",{});var Qrt=s(Wce);T(x0.$$.fragment,Qrt),Qrt.forEach(t),zrt.forEach(t),xSo=i(FIe),Hce=n(FIe,"SPAN",{});var Wrt=s(Hce);$So=r(Wrt,"AutoModelForTokenClassification"),Wrt.forEach(t),FIe.forEach(t),vBe=i(f),Bo=n(f,"DIV",{class:!0});var Vs=s(Bo);T($0.$$.fragment,Vs),kSo=i(Vs),Di=n(Vs,"P",{});var _Y=s(Di);SSo=r(_Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UD=n(_Y,"A",{href:!0});var Hrt=s(UD);RSo=r(Hrt,"from_pretrained()"),Hrt.forEach(t),BSo=r(_Y," class method or the "),JD=n(_Y,"A",{href:!0});var Urt=s(JD);PSo=r(Urt,"from_config()"),Urt.forEach(t),ISo=r(_Y,` class
method.`),_Y.forEach(t),qSo=i(Vs),k0=n(Vs,"P",{});var TIe=s(k0);NSo=r(TIe,"This class cannot be instantiated directly using "),Uce=n(TIe,"CODE",{});var Jrt=s(Uce);jSo=r(Jrt,"__init__()"),Jrt.forEach(t),DSo=r(TIe," (throws an error)."),TIe.forEach(t),GSo=i(Vs),st=n(Vs,"DIV",{class:!0});var N3=s(st);T(S0.$$.fragment,N3),OSo=i(N3),Jce=n(N3,"P",{});var Yrt=s(Jce);VSo=r(Yrt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yrt.forEach(t),XSo=i(N3),Gi=n(N3,"P",{});var bY=s(Gi);zSo=r(bY,`Note:
Loading a model from its configuration file does `),Yce=n(bY,"STRONG",{});var Krt=s(Yce);QSo=r(Krt,"not"),Krt.forEach(t),WSo=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YD=n(bY,"A",{href:!0});var Zrt=s(YD);HSo=r(Zrt,"from_pretrained()"),Zrt.forEach(t),USo=r(bY," to load the model weights."),bY.forEach(t),JSo=i(N3),T(Db.$$.fragment,N3),N3.forEach(t),YSo=i(Vs),eo=n(Vs,"DIV",{class:!0});var ta=s(eo);T(R0.$$.fragment,ta),KSo=i(ta),Kce=n(ta,"P",{});var ett=s(Kce);ZSo=r(ett,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ett.forEach(t),eRo=i(ta),$a=n(ta,"P",{});var j3=s($a);oRo=r(j3,"The model class to instantiate is selected based on the "),Zce=n(j3,"CODE",{});var ott=s(Zce);rRo=r(ott,"model_type"),ott.forEach(t),tRo=r(j3,` property of the config object (either
passed as an argument or loaded from `),efe=n(j3,"CODE",{});var rtt=s(efe);aRo=r(rtt,"pretrained_model_name_or_path"),rtt.forEach(t),nRo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=n(j3,"CODE",{});var ttt=s(ofe);sRo=r(ttt,"pretrained_model_name_or_path"),ttt.forEach(t),lRo=r(j3,":"),j3.forEach(t),iRo=i(ta),U=n(ta,"UL",{});var J=s(U);Gb=n(J,"LI",{});var Oye=s(Gb);rfe=n(Oye,"STRONG",{});var att=s(rfe);dRo=r(att,"albert"),att.forEach(t),cRo=r(Oye," \u2014 "),KD=n(Oye,"A",{href:!0});var ntt=s(KD);fRo=r(ntt,"AlbertForTokenClassification"),ntt.forEach(t),mRo=r(Oye," (ALBERT model)"),Oye.forEach(t),gRo=i(J),Ob=n(J,"LI",{});var Vye=s(Ob);tfe=n(Vye,"STRONG",{});var stt=s(tfe);hRo=r(stt,"bert"),stt.forEach(t),pRo=r(Vye," \u2014 "),ZD=n(Vye,"A",{href:!0});var ltt=s(ZD);uRo=r(ltt,"BertForTokenClassification"),ltt.forEach(t),_Ro=r(Vye," (BERT model)"),Vye.forEach(t),bRo=i(J),Vb=n(J,"LI",{});var Xye=s(Vb);afe=n(Xye,"STRONG",{});var itt=s(afe);vRo=r(itt,"big_bird"),itt.forEach(t),FRo=r(Xye," \u2014 "),eG=n(Xye,"A",{href:!0});var dtt=s(eG);TRo=r(dtt,"BigBirdForTokenClassification"),dtt.forEach(t),MRo=r(Xye," (BigBird model)"),Xye.forEach(t),ERo=i(J),Xb=n(J,"LI",{});var zye=s(Xb);nfe=n(zye,"STRONG",{});var ctt=s(nfe);CRo=r(ctt,"camembert"),ctt.forEach(t),wRo=r(zye," \u2014 "),oG=n(zye,"A",{href:!0});var ftt=s(oG);ARo=r(ftt,"CamembertForTokenClassification"),ftt.forEach(t),yRo=r(zye," (CamemBERT model)"),zye.forEach(t),LRo=i(J),zb=n(J,"LI",{});var Qye=s(zb);sfe=n(Qye,"STRONG",{});var mtt=s(sfe);xRo=r(mtt,"canine"),mtt.forEach(t),$Ro=r(Qye," \u2014 "),rG=n(Qye,"A",{href:!0});var gtt=s(rG);kRo=r(gtt,"CanineForTokenClassification"),gtt.forEach(t),SRo=r(Qye," (Canine model)"),Qye.forEach(t),RRo=i(J),Qb=n(J,"LI",{});var Wye=s(Qb);lfe=n(Wye,"STRONG",{});var htt=s(lfe);BRo=r(htt,"convbert"),htt.forEach(t),PRo=r(Wye," \u2014 "),tG=n(Wye,"A",{href:!0});var ptt=s(tG);IRo=r(ptt,"ConvBertForTokenClassification"),ptt.forEach(t),qRo=r(Wye," (ConvBERT model)"),Wye.forEach(t),NRo=i(J),Wb=n(J,"LI",{});var Hye=s(Wb);ife=n(Hye,"STRONG",{});var utt=s(ife);jRo=r(utt,"data2vec-text"),utt.forEach(t),DRo=r(Hye," \u2014 "),aG=n(Hye,"A",{href:!0});var _tt=s(aG);GRo=r(_tt,"Data2VecTextForTokenClassification"),_tt.forEach(t),ORo=r(Hye," (Data2VecText model)"),Hye.forEach(t),VRo=i(J),Hb=n(J,"LI",{});var Uye=s(Hb);dfe=n(Uye,"STRONG",{});var btt=s(dfe);XRo=r(btt,"deberta"),btt.forEach(t),zRo=r(Uye," \u2014 "),nG=n(Uye,"A",{href:!0});var vtt=s(nG);QRo=r(vtt,"DebertaForTokenClassification"),vtt.forEach(t),WRo=r(Uye," (DeBERTa model)"),Uye.forEach(t),HRo=i(J),Ub=n(J,"LI",{});var Jye=s(Ub);cfe=n(Jye,"STRONG",{});var Ftt=s(cfe);URo=r(Ftt,"deberta-v2"),Ftt.forEach(t),JRo=r(Jye," \u2014 "),sG=n(Jye,"A",{href:!0});var Ttt=s(sG);YRo=r(Ttt,"DebertaV2ForTokenClassification"),Ttt.forEach(t),KRo=r(Jye," (DeBERTa-v2 model)"),Jye.forEach(t),ZRo=i(J),Jb=n(J,"LI",{});var Yye=s(Jb);ffe=n(Yye,"STRONG",{});var Mtt=s(ffe);eBo=r(Mtt,"distilbert"),Mtt.forEach(t),oBo=r(Yye," \u2014 "),lG=n(Yye,"A",{href:!0});var Ett=s(lG);rBo=r(Ett,"DistilBertForTokenClassification"),Ett.forEach(t),tBo=r(Yye," (DistilBERT model)"),Yye.forEach(t),aBo=i(J),Yb=n(J,"LI",{});var Kye=s(Yb);mfe=n(Kye,"STRONG",{});var Ctt=s(mfe);nBo=r(Ctt,"electra"),Ctt.forEach(t),sBo=r(Kye," \u2014 "),iG=n(Kye,"A",{href:!0});var wtt=s(iG);lBo=r(wtt,"ElectraForTokenClassification"),wtt.forEach(t),iBo=r(Kye," (ELECTRA model)"),Kye.forEach(t),dBo=i(J),Kb=n(J,"LI",{});var Zye=s(Kb);gfe=n(Zye,"STRONG",{});var Att=s(gfe);cBo=r(Att,"flaubert"),Att.forEach(t),fBo=r(Zye," \u2014 "),dG=n(Zye,"A",{href:!0});var ytt=s(dG);mBo=r(ytt,"FlaubertForTokenClassification"),ytt.forEach(t),gBo=r(Zye," (FlauBERT model)"),Zye.forEach(t),hBo=i(J),Zb=n(J,"LI",{});var eLe=s(Zb);hfe=n(eLe,"STRONG",{});var Ltt=s(hfe);pBo=r(Ltt,"fnet"),Ltt.forEach(t),uBo=r(eLe," \u2014 "),cG=n(eLe,"A",{href:!0});var xtt=s(cG);_Bo=r(xtt,"FNetForTokenClassification"),xtt.forEach(t),bBo=r(eLe," (FNet model)"),eLe.forEach(t),vBo=i(J),e2=n(J,"LI",{});var oLe=s(e2);pfe=n(oLe,"STRONG",{});var $tt=s(pfe);FBo=r($tt,"funnel"),$tt.forEach(t),TBo=r(oLe," \u2014 "),fG=n(oLe,"A",{href:!0});var ktt=s(fG);MBo=r(ktt,"FunnelForTokenClassification"),ktt.forEach(t),EBo=r(oLe," (Funnel Transformer model)"),oLe.forEach(t),CBo=i(J),o2=n(J,"LI",{});var rLe=s(o2);ufe=n(rLe,"STRONG",{});var Stt=s(ufe);wBo=r(Stt,"gpt2"),Stt.forEach(t),ABo=r(rLe," \u2014 "),mG=n(rLe,"A",{href:!0});var Rtt=s(mG);yBo=r(Rtt,"GPT2ForTokenClassification"),Rtt.forEach(t),LBo=r(rLe," (OpenAI GPT-2 model)"),rLe.forEach(t),xBo=i(J),r2=n(J,"LI",{});var tLe=s(r2);_fe=n(tLe,"STRONG",{});var Btt=s(_fe);$Bo=r(Btt,"ibert"),Btt.forEach(t),kBo=r(tLe," \u2014 "),gG=n(tLe,"A",{href:!0});var Ptt=s(gG);SBo=r(Ptt,"IBertForTokenClassification"),Ptt.forEach(t),RBo=r(tLe," (I-BERT model)"),tLe.forEach(t),BBo=i(J),t2=n(J,"LI",{});var aLe=s(t2);bfe=n(aLe,"STRONG",{});var Itt=s(bfe);PBo=r(Itt,"layoutlm"),Itt.forEach(t),IBo=r(aLe," \u2014 "),hG=n(aLe,"A",{href:!0});var qtt=s(hG);qBo=r(qtt,"LayoutLMForTokenClassification"),qtt.forEach(t),NBo=r(aLe," (LayoutLM model)"),aLe.forEach(t),jBo=i(J),a2=n(J,"LI",{});var nLe=s(a2);vfe=n(nLe,"STRONG",{});var Ntt=s(vfe);DBo=r(Ntt,"layoutlmv2"),Ntt.forEach(t),GBo=r(nLe," \u2014 "),pG=n(nLe,"A",{href:!0});var jtt=s(pG);OBo=r(jtt,"LayoutLMv2ForTokenClassification"),jtt.forEach(t),VBo=r(nLe," (LayoutLMv2 model)"),nLe.forEach(t),XBo=i(J),n2=n(J,"LI",{});var sLe=s(n2);Ffe=n(sLe,"STRONG",{});var Dtt=s(Ffe);zBo=r(Dtt,"longformer"),Dtt.forEach(t),QBo=r(sLe," \u2014 "),uG=n(sLe,"A",{href:!0});var Gtt=s(uG);WBo=r(Gtt,"LongformerForTokenClassification"),Gtt.forEach(t),HBo=r(sLe," (Longformer model)"),sLe.forEach(t),UBo=i(J),s2=n(J,"LI",{});var lLe=s(s2);Tfe=n(lLe,"STRONG",{});var Ott=s(Tfe);JBo=r(Ott,"megatron-bert"),Ott.forEach(t),YBo=r(lLe," \u2014 "),_G=n(lLe,"A",{href:!0});var Vtt=s(_G);KBo=r(Vtt,"MegatronBertForTokenClassification"),Vtt.forEach(t),ZBo=r(lLe," (MegatronBert model)"),lLe.forEach(t),ePo=i(J),l2=n(J,"LI",{});var iLe=s(l2);Mfe=n(iLe,"STRONG",{});var Xtt=s(Mfe);oPo=r(Xtt,"mobilebert"),Xtt.forEach(t),rPo=r(iLe," \u2014 "),bG=n(iLe,"A",{href:!0});var ztt=s(bG);tPo=r(ztt,"MobileBertForTokenClassification"),ztt.forEach(t),aPo=r(iLe," (MobileBERT model)"),iLe.forEach(t),nPo=i(J),i2=n(J,"LI",{});var dLe=s(i2);Efe=n(dLe,"STRONG",{});var Qtt=s(Efe);sPo=r(Qtt,"mpnet"),Qtt.forEach(t),lPo=r(dLe," \u2014 "),vG=n(dLe,"A",{href:!0});var Wtt=s(vG);iPo=r(Wtt,"MPNetForTokenClassification"),Wtt.forEach(t),dPo=r(dLe," (MPNet model)"),dLe.forEach(t),cPo=i(J),d2=n(J,"LI",{});var cLe=s(d2);Cfe=n(cLe,"STRONG",{});var Htt=s(Cfe);fPo=r(Htt,"nystromformer"),Htt.forEach(t),mPo=r(cLe," \u2014 "),FG=n(cLe,"A",{href:!0});var Utt=s(FG);gPo=r(Utt,"NystromformerForTokenClassification"),Utt.forEach(t),hPo=r(cLe," (Nystromformer model)"),cLe.forEach(t),pPo=i(J),c2=n(J,"LI",{});var fLe=s(c2);wfe=n(fLe,"STRONG",{});var Jtt=s(wfe);uPo=r(Jtt,"qdqbert"),Jtt.forEach(t),_Po=r(fLe," \u2014 "),TG=n(fLe,"A",{href:!0});var Ytt=s(TG);bPo=r(Ytt,"QDQBertForTokenClassification"),Ytt.forEach(t),vPo=r(fLe," (QDQBert model)"),fLe.forEach(t),FPo=i(J),f2=n(J,"LI",{});var mLe=s(f2);Afe=n(mLe,"STRONG",{});var Ktt=s(Afe);TPo=r(Ktt,"rembert"),Ktt.forEach(t),MPo=r(mLe," \u2014 "),MG=n(mLe,"A",{href:!0});var Ztt=s(MG);EPo=r(Ztt,"RemBertForTokenClassification"),Ztt.forEach(t),CPo=r(mLe," (RemBERT model)"),mLe.forEach(t),wPo=i(J),m2=n(J,"LI",{});var gLe=s(m2);yfe=n(gLe,"STRONG",{});var eat=s(yfe);APo=r(eat,"roberta"),eat.forEach(t),yPo=r(gLe," \u2014 "),EG=n(gLe,"A",{href:!0});var oat=s(EG);LPo=r(oat,"RobertaForTokenClassification"),oat.forEach(t),xPo=r(gLe," (RoBERTa model)"),gLe.forEach(t),$Po=i(J),g2=n(J,"LI",{});var hLe=s(g2);Lfe=n(hLe,"STRONG",{});var rat=s(Lfe);kPo=r(rat,"roformer"),rat.forEach(t),SPo=r(hLe," \u2014 "),CG=n(hLe,"A",{href:!0});var tat=s(CG);RPo=r(tat,"RoFormerForTokenClassification"),tat.forEach(t),BPo=r(hLe," (RoFormer model)"),hLe.forEach(t),PPo=i(J),h2=n(J,"LI",{});var pLe=s(h2);xfe=n(pLe,"STRONG",{});var aat=s(xfe);IPo=r(aat,"squeezebert"),aat.forEach(t),qPo=r(pLe," \u2014 "),wG=n(pLe,"A",{href:!0});var nat=s(wG);NPo=r(nat,"SqueezeBertForTokenClassification"),nat.forEach(t),jPo=r(pLe," (SqueezeBERT model)"),pLe.forEach(t),DPo=i(J),p2=n(J,"LI",{});var uLe=s(p2);$fe=n(uLe,"STRONG",{});var sat=s($fe);GPo=r(sat,"xlm"),sat.forEach(t),OPo=r(uLe," \u2014 "),AG=n(uLe,"A",{href:!0});var lat=s(AG);VPo=r(lat,"XLMForTokenClassification"),lat.forEach(t),XPo=r(uLe," (XLM model)"),uLe.forEach(t),zPo=i(J),u2=n(J,"LI",{});var _Le=s(u2);kfe=n(_Le,"STRONG",{});var iat=s(kfe);QPo=r(iat,"xlm-roberta"),iat.forEach(t),WPo=r(_Le," \u2014 "),yG=n(_Le,"A",{href:!0});var dat=s(yG);HPo=r(dat,"XLMRobertaForTokenClassification"),dat.forEach(t),UPo=r(_Le," (XLM-RoBERTa model)"),_Le.forEach(t),JPo=i(J),_2=n(J,"LI",{});var bLe=s(_2);Sfe=n(bLe,"STRONG",{});var cat=s(Sfe);YPo=r(cat,"xlm-roberta-xl"),cat.forEach(t),KPo=r(bLe," \u2014 "),LG=n(bLe,"A",{href:!0});var fat=s(LG);ZPo=r(fat,"XLMRobertaXLForTokenClassification"),fat.forEach(t),eIo=r(bLe," (XLM-RoBERTa-XL model)"),bLe.forEach(t),oIo=i(J),b2=n(J,"LI",{});var vLe=s(b2);Rfe=n(vLe,"STRONG",{});var mat=s(Rfe);rIo=r(mat,"xlnet"),mat.forEach(t),tIo=r(vLe," \u2014 "),xG=n(vLe,"A",{href:!0});var gat=s(xG);aIo=r(gat,"XLNetForTokenClassification"),gat.forEach(t),nIo=r(vLe," (XLNet model)"),vLe.forEach(t),sIo=i(J),v2=n(J,"LI",{});var FLe=s(v2);Bfe=n(FLe,"STRONG",{});var hat=s(Bfe);lIo=r(hat,"yoso"),hat.forEach(t),iIo=r(FLe," \u2014 "),$G=n(FLe,"A",{href:!0});var pat=s($G);dIo=r(pat,"YosoForTokenClassification"),pat.forEach(t),cIo=r(FLe," (YOSO model)"),FLe.forEach(t),J.forEach(t),fIo=i(ta),F2=n(ta,"P",{});var TLe=s(F2);mIo=r(TLe,"The model is set in evaluation mode by default using "),Pfe=n(TLe,"CODE",{});var uat=s(Pfe);gIo=r(uat,"model.eval()"),uat.forEach(t),hIo=r(TLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=n(TLe,"CODE",{});var _at=s(Ife);pIo=r(_at,"model.train()"),_at.forEach(t),TLe.forEach(t),uIo=i(ta),T(T2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),FBe=i(f),Oi=n(f,"H2",{class:!0});var MIe=s(Oi);M2=n(MIe,"A",{id:!0,class:!0,href:!0});var bat=s(M2);qfe=n(bat,"SPAN",{});var vat=s(qfe);T(B0.$$.fragment,vat),vat.forEach(t),bat.forEach(t),_Io=i(MIe),Nfe=n(MIe,"SPAN",{});var Fat=s(Nfe);bIo=r(Fat,"AutoModelForQuestionAnswering"),Fat.forEach(t),MIe.forEach(t),TBe=i(f),Po=n(f,"DIV",{class:!0});var Xs=s(Po);T(P0.$$.fragment,Xs),vIo=i(Xs),Vi=n(Xs,"P",{});var vY=s(Vi);FIo=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kG=n(vY,"A",{href:!0});var Tat=s(kG);TIo=r(Tat,"from_pretrained()"),Tat.forEach(t),MIo=r(vY," class method or the "),SG=n(vY,"A",{href:!0});var Mat=s(SG);EIo=r(Mat,"from_config()"),Mat.forEach(t),CIo=r(vY,` class
method.`),vY.forEach(t),wIo=i(Xs),I0=n(Xs,"P",{});var EIe=s(I0);AIo=r(EIe,"This class cannot be instantiated directly using "),jfe=n(EIe,"CODE",{});var Eat=s(jfe);yIo=r(Eat,"__init__()"),Eat.forEach(t),LIo=r(EIe," (throws an error)."),EIe.forEach(t),xIo=i(Xs),lt=n(Xs,"DIV",{class:!0});var D3=s(lt);T(q0.$$.fragment,D3),$Io=i(D3),Dfe=n(D3,"P",{});var Cat=s(Dfe);kIo=r(Cat,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cat.forEach(t),SIo=i(D3),Xi=n(D3,"P",{});var FY=s(Xi);RIo=r(FY,`Note:
Loading a model from its configuration file does `),Gfe=n(FY,"STRONG",{});var wat=s(Gfe);BIo=r(wat,"not"),wat.forEach(t),PIo=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=n(FY,"A",{href:!0});var Aat=s(RG);IIo=r(Aat,"from_pretrained()"),Aat.forEach(t),qIo=r(FY," to load the model weights."),FY.forEach(t),NIo=i(D3),T(E2.$$.fragment,D3),D3.forEach(t),jIo=i(Xs),oo=n(Xs,"DIV",{class:!0});var aa=s(oo);T(N0.$$.fragment,aa),DIo=i(aa),Ofe=n(aa,"P",{});var yat=s(Ofe);GIo=r(yat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yat.forEach(t),OIo=i(aa),ka=n(aa,"P",{});var G3=s(ka);VIo=r(G3,"The model class to instantiate is selected based on the "),Vfe=n(G3,"CODE",{});var Lat=s(Vfe);XIo=r(Lat,"model_type"),Lat.forEach(t),zIo=r(G3,` property of the config object (either
passed as an argument or loaded from `),Xfe=n(G3,"CODE",{});var xat=s(Xfe);QIo=r(xat,"pretrained_model_name_or_path"),xat.forEach(t),WIo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(G3,"CODE",{});var $at=s(zfe);HIo=r($at,"pretrained_model_name_or_path"),$at.forEach(t),UIo=r(G3,":"),G3.forEach(t),JIo=i(aa),O=n(aa,"UL",{});var X=s(O);C2=n(X,"LI",{});var MLe=s(C2);Qfe=n(MLe,"STRONG",{});var kat=s(Qfe);YIo=r(kat,"albert"),kat.forEach(t),KIo=r(MLe," \u2014 "),BG=n(MLe,"A",{href:!0});var Sat=s(BG);ZIo=r(Sat,"AlbertForQuestionAnswering"),Sat.forEach(t),eqo=r(MLe," (ALBERT model)"),MLe.forEach(t),oqo=i(X),w2=n(X,"LI",{});var ELe=s(w2);Wfe=n(ELe,"STRONG",{});var Rat=s(Wfe);rqo=r(Rat,"bart"),Rat.forEach(t),tqo=r(ELe," \u2014 "),PG=n(ELe,"A",{href:!0});var Bat=s(PG);aqo=r(Bat,"BartForQuestionAnswering"),Bat.forEach(t),nqo=r(ELe," (BART model)"),ELe.forEach(t),sqo=i(X),A2=n(X,"LI",{});var CLe=s(A2);Hfe=n(CLe,"STRONG",{});var Pat=s(Hfe);lqo=r(Pat,"bert"),Pat.forEach(t),iqo=r(CLe," \u2014 "),IG=n(CLe,"A",{href:!0});var Iat=s(IG);dqo=r(Iat,"BertForQuestionAnswering"),Iat.forEach(t),cqo=r(CLe," (BERT model)"),CLe.forEach(t),fqo=i(X),y2=n(X,"LI",{});var wLe=s(y2);Ufe=n(wLe,"STRONG",{});var qat=s(Ufe);mqo=r(qat,"big_bird"),qat.forEach(t),gqo=r(wLe," \u2014 "),qG=n(wLe,"A",{href:!0});var Nat=s(qG);hqo=r(Nat,"BigBirdForQuestionAnswering"),Nat.forEach(t),pqo=r(wLe," (BigBird model)"),wLe.forEach(t),uqo=i(X),L2=n(X,"LI",{});var ALe=s(L2);Jfe=n(ALe,"STRONG",{});var jat=s(Jfe);_qo=r(jat,"bigbird_pegasus"),jat.forEach(t),bqo=r(ALe," \u2014 "),NG=n(ALe,"A",{href:!0});var Dat=s(NG);vqo=r(Dat,"BigBirdPegasusForQuestionAnswering"),Dat.forEach(t),Fqo=r(ALe," (BigBirdPegasus model)"),ALe.forEach(t),Tqo=i(X),x2=n(X,"LI",{});var yLe=s(x2);Yfe=n(yLe,"STRONG",{});var Gat=s(Yfe);Mqo=r(Gat,"camembert"),Gat.forEach(t),Eqo=r(yLe," \u2014 "),jG=n(yLe,"A",{href:!0});var Oat=s(jG);Cqo=r(Oat,"CamembertForQuestionAnswering"),Oat.forEach(t),wqo=r(yLe," (CamemBERT model)"),yLe.forEach(t),Aqo=i(X),$2=n(X,"LI",{});var LLe=s($2);Kfe=n(LLe,"STRONG",{});var Vat=s(Kfe);yqo=r(Vat,"canine"),Vat.forEach(t),Lqo=r(LLe," \u2014 "),DG=n(LLe,"A",{href:!0});var Xat=s(DG);xqo=r(Xat,"CanineForQuestionAnswering"),Xat.forEach(t),$qo=r(LLe," (Canine model)"),LLe.forEach(t),kqo=i(X),k2=n(X,"LI",{});var xLe=s(k2);Zfe=n(xLe,"STRONG",{});var zat=s(Zfe);Sqo=r(zat,"convbert"),zat.forEach(t),Rqo=r(xLe," \u2014 "),GG=n(xLe,"A",{href:!0});var Qat=s(GG);Bqo=r(Qat,"ConvBertForQuestionAnswering"),Qat.forEach(t),Pqo=r(xLe," (ConvBERT model)"),xLe.forEach(t),Iqo=i(X),S2=n(X,"LI",{});var $Le=s(S2);eme=n($Le,"STRONG",{});var Wat=s(eme);qqo=r(Wat,"data2vec-text"),Wat.forEach(t),Nqo=r($Le," \u2014 "),OG=n($Le,"A",{href:!0});var Hat=s(OG);jqo=r(Hat,"Data2VecTextForQuestionAnswering"),Hat.forEach(t),Dqo=r($Le," (Data2VecText model)"),$Le.forEach(t),Gqo=i(X),R2=n(X,"LI",{});var kLe=s(R2);ome=n(kLe,"STRONG",{});var Uat=s(ome);Oqo=r(Uat,"deberta"),Uat.forEach(t),Vqo=r(kLe," \u2014 "),VG=n(kLe,"A",{href:!0});var Jat=s(VG);Xqo=r(Jat,"DebertaForQuestionAnswering"),Jat.forEach(t),zqo=r(kLe," (DeBERTa model)"),kLe.forEach(t),Qqo=i(X),B2=n(X,"LI",{});var SLe=s(B2);rme=n(SLe,"STRONG",{});var Yat=s(rme);Wqo=r(Yat,"deberta-v2"),Yat.forEach(t),Hqo=r(SLe," \u2014 "),XG=n(SLe,"A",{href:!0});var Kat=s(XG);Uqo=r(Kat,"DebertaV2ForQuestionAnswering"),Kat.forEach(t),Jqo=r(SLe," (DeBERTa-v2 model)"),SLe.forEach(t),Yqo=i(X),P2=n(X,"LI",{});var RLe=s(P2);tme=n(RLe,"STRONG",{});var Zat=s(tme);Kqo=r(Zat,"distilbert"),Zat.forEach(t),Zqo=r(RLe," \u2014 "),zG=n(RLe,"A",{href:!0});var ent=s(zG);eNo=r(ent,"DistilBertForQuestionAnswering"),ent.forEach(t),oNo=r(RLe," (DistilBERT model)"),RLe.forEach(t),rNo=i(X),I2=n(X,"LI",{});var BLe=s(I2);ame=n(BLe,"STRONG",{});var ont=s(ame);tNo=r(ont,"electra"),ont.forEach(t),aNo=r(BLe," \u2014 "),QG=n(BLe,"A",{href:!0});var rnt=s(QG);nNo=r(rnt,"ElectraForQuestionAnswering"),rnt.forEach(t),sNo=r(BLe," (ELECTRA model)"),BLe.forEach(t),lNo=i(X),q2=n(X,"LI",{});var PLe=s(q2);nme=n(PLe,"STRONG",{});var tnt=s(nme);iNo=r(tnt,"flaubert"),tnt.forEach(t),dNo=r(PLe," \u2014 "),WG=n(PLe,"A",{href:!0});var ant=s(WG);cNo=r(ant,"FlaubertForQuestionAnsweringSimple"),ant.forEach(t),fNo=r(PLe," (FlauBERT model)"),PLe.forEach(t),mNo=i(X),N2=n(X,"LI",{});var ILe=s(N2);sme=n(ILe,"STRONG",{});var nnt=s(sme);gNo=r(nnt,"fnet"),nnt.forEach(t),hNo=r(ILe," \u2014 "),HG=n(ILe,"A",{href:!0});var snt=s(HG);pNo=r(snt,"FNetForQuestionAnswering"),snt.forEach(t),uNo=r(ILe," (FNet model)"),ILe.forEach(t),_No=i(X),j2=n(X,"LI",{});var qLe=s(j2);lme=n(qLe,"STRONG",{});var lnt=s(lme);bNo=r(lnt,"funnel"),lnt.forEach(t),vNo=r(qLe," \u2014 "),UG=n(qLe,"A",{href:!0});var int=s(UG);FNo=r(int,"FunnelForQuestionAnswering"),int.forEach(t),TNo=r(qLe," (Funnel Transformer model)"),qLe.forEach(t),MNo=i(X),D2=n(X,"LI",{});var NLe=s(D2);ime=n(NLe,"STRONG",{});var dnt=s(ime);ENo=r(dnt,"gptj"),dnt.forEach(t),CNo=r(NLe," \u2014 "),JG=n(NLe,"A",{href:!0});var cnt=s(JG);wNo=r(cnt,"GPTJForQuestionAnswering"),cnt.forEach(t),ANo=r(NLe," (GPT-J model)"),NLe.forEach(t),yNo=i(X),G2=n(X,"LI",{});var jLe=s(G2);dme=n(jLe,"STRONG",{});var fnt=s(dme);LNo=r(fnt,"ibert"),fnt.forEach(t),xNo=r(jLe," \u2014 "),YG=n(jLe,"A",{href:!0});var mnt=s(YG);$No=r(mnt,"IBertForQuestionAnswering"),mnt.forEach(t),kNo=r(jLe," (I-BERT model)"),jLe.forEach(t),SNo=i(X),O2=n(X,"LI",{});var DLe=s(O2);cme=n(DLe,"STRONG",{});var gnt=s(cme);RNo=r(gnt,"layoutlmv2"),gnt.forEach(t),BNo=r(DLe," \u2014 "),KG=n(DLe,"A",{href:!0});var hnt=s(KG);PNo=r(hnt,"LayoutLMv2ForQuestionAnswering"),hnt.forEach(t),INo=r(DLe," (LayoutLMv2 model)"),DLe.forEach(t),qNo=i(X),V2=n(X,"LI",{});var GLe=s(V2);fme=n(GLe,"STRONG",{});var pnt=s(fme);NNo=r(pnt,"led"),pnt.forEach(t),jNo=r(GLe," \u2014 "),ZG=n(GLe,"A",{href:!0});var unt=s(ZG);DNo=r(unt,"LEDForQuestionAnswering"),unt.forEach(t),GNo=r(GLe," (LED model)"),GLe.forEach(t),ONo=i(X),X2=n(X,"LI",{});var OLe=s(X2);mme=n(OLe,"STRONG",{});var _nt=s(mme);VNo=r(_nt,"longformer"),_nt.forEach(t),XNo=r(OLe," \u2014 "),eO=n(OLe,"A",{href:!0});var bnt=s(eO);zNo=r(bnt,"LongformerForQuestionAnswering"),bnt.forEach(t),QNo=r(OLe," (Longformer model)"),OLe.forEach(t),WNo=i(X),z2=n(X,"LI",{});var VLe=s(z2);gme=n(VLe,"STRONG",{});var vnt=s(gme);HNo=r(vnt,"lxmert"),vnt.forEach(t),UNo=r(VLe," \u2014 "),oO=n(VLe,"A",{href:!0});var Fnt=s(oO);JNo=r(Fnt,"LxmertForQuestionAnswering"),Fnt.forEach(t),YNo=r(VLe," (LXMERT model)"),VLe.forEach(t),KNo=i(X),Q2=n(X,"LI",{});var XLe=s(Q2);hme=n(XLe,"STRONG",{});var Tnt=s(hme);ZNo=r(Tnt,"mbart"),Tnt.forEach(t),ejo=r(XLe," \u2014 "),rO=n(XLe,"A",{href:!0});var Mnt=s(rO);ojo=r(Mnt,"MBartForQuestionAnswering"),Mnt.forEach(t),rjo=r(XLe," (mBART model)"),XLe.forEach(t),tjo=i(X),W2=n(X,"LI",{});var zLe=s(W2);pme=n(zLe,"STRONG",{});var Ent=s(pme);ajo=r(Ent,"megatron-bert"),Ent.forEach(t),njo=r(zLe," \u2014 "),tO=n(zLe,"A",{href:!0});var Cnt=s(tO);sjo=r(Cnt,"MegatronBertForQuestionAnswering"),Cnt.forEach(t),ljo=r(zLe," (MegatronBert model)"),zLe.forEach(t),ijo=i(X),H2=n(X,"LI",{});var QLe=s(H2);ume=n(QLe,"STRONG",{});var wnt=s(ume);djo=r(wnt,"mobilebert"),wnt.forEach(t),cjo=r(QLe," \u2014 "),aO=n(QLe,"A",{href:!0});var Ant=s(aO);fjo=r(Ant,"MobileBertForQuestionAnswering"),Ant.forEach(t),mjo=r(QLe," (MobileBERT model)"),QLe.forEach(t),gjo=i(X),U2=n(X,"LI",{});var WLe=s(U2);_me=n(WLe,"STRONG",{});var ynt=s(_me);hjo=r(ynt,"mpnet"),ynt.forEach(t),pjo=r(WLe," \u2014 "),nO=n(WLe,"A",{href:!0});var Lnt=s(nO);ujo=r(Lnt,"MPNetForQuestionAnswering"),Lnt.forEach(t),_jo=r(WLe," (MPNet model)"),WLe.forEach(t),bjo=i(X),J2=n(X,"LI",{});var HLe=s(J2);bme=n(HLe,"STRONG",{});var xnt=s(bme);vjo=r(xnt,"nystromformer"),xnt.forEach(t),Fjo=r(HLe," \u2014 "),sO=n(HLe,"A",{href:!0});var $nt=s(sO);Tjo=r($nt,"NystromformerForQuestionAnswering"),$nt.forEach(t),Mjo=r(HLe," (Nystromformer model)"),HLe.forEach(t),Ejo=i(X),Y2=n(X,"LI",{});var ULe=s(Y2);vme=n(ULe,"STRONG",{});var knt=s(vme);Cjo=r(knt,"qdqbert"),knt.forEach(t),wjo=r(ULe," \u2014 "),lO=n(ULe,"A",{href:!0});var Snt=s(lO);Ajo=r(Snt,"QDQBertForQuestionAnswering"),Snt.forEach(t),yjo=r(ULe," (QDQBert model)"),ULe.forEach(t),Ljo=i(X),K2=n(X,"LI",{});var JLe=s(K2);Fme=n(JLe,"STRONG",{});var Rnt=s(Fme);xjo=r(Rnt,"reformer"),Rnt.forEach(t),$jo=r(JLe," \u2014 "),iO=n(JLe,"A",{href:!0});var Bnt=s(iO);kjo=r(Bnt,"ReformerForQuestionAnswering"),Bnt.forEach(t),Sjo=r(JLe," (Reformer model)"),JLe.forEach(t),Rjo=i(X),Z2=n(X,"LI",{});var YLe=s(Z2);Tme=n(YLe,"STRONG",{});var Pnt=s(Tme);Bjo=r(Pnt,"rembert"),Pnt.forEach(t),Pjo=r(YLe," \u2014 "),dO=n(YLe,"A",{href:!0});var Int=s(dO);Ijo=r(Int,"RemBertForQuestionAnswering"),Int.forEach(t),qjo=r(YLe," (RemBERT model)"),YLe.forEach(t),Njo=i(X),e5=n(X,"LI",{});var KLe=s(e5);Mme=n(KLe,"STRONG",{});var qnt=s(Mme);jjo=r(qnt,"roberta"),qnt.forEach(t),Djo=r(KLe," \u2014 "),cO=n(KLe,"A",{href:!0});var Nnt=s(cO);Gjo=r(Nnt,"RobertaForQuestionAnswering"),Nnt.forEach(t),Ojo=r(KLe," (RoBERTa model)"),KLe.forEach(t),Vjo=i(X),o5=n(X,"LI",{});var ZLe=s(o5);Eme=n(ZLe,"STRONG",{});var jnt=s(Eme);Xjo=r(jnt,"roformer"),jnt.forEach(t),zjo=r(ZLe," \u2014 "),fO=n(ZLe,"A",{href:!0});var Dnt=s(fO);Qjo=r(Dnt,"RoFormerForQuestionAnswering"),Dnt.forEach(t),Wjo=r(ZLe," (RoFormer model)"),ZLe.forEach(t),Hjo=i(X),r5=n(X,"LI",{});var e8e=s(r5);Cme=n(e8e,"STRONG",{});var Gnt=s(Cme);Ujo=r(Gnt,"splinter"),Gnt.forEach(t),Jjo=r(e8e," \u2014 "),mO=n(e8e,"A",{href:!0});var Ont=s(mO);Yjo=r(Ont,"SplinterForQuestionAnswering"),Ont.forEach(t),Kjo=r(e8e," (Splinter model)"),e8e.forEach(t),Zjo=i(X),t5=n(X,"LI",{});var o8e=s(t5);wme=n(o8e,"STRONG",{});var Vnt=s(wme);eDo=r(Vnt,"squeezebert"),Vnt.forEach(t),oDo=r(o8e," \u2014 "),gO=n(o8e,"A",{href:!0});var Xnt=s(gO);rDo=r(Xnt,"SqueezeBertForQuestionAnswering"),Xnt.forEach(t),tDo=r(o8e," (SqueezeBERT model)"),o8e.forEach(t),aDo=i(X),a5=n(X,"LI",{});var r8e=s(a5);Ame=n(r8e,"STRONG",{});var znt=s(Ame);nDo=r(znt,"xlm"),znt.forEach(t),sDo=r(r8e," \u2014 "),hO=n(r8e,"A",{href:!0});var Qnt=s(hO);lDo=r(Qnt,"XLMForQuestionAnsweringSimple"),Qnt.forEach(t),iDo=r(r8e," (XLM model)"),r8e.forEach(t),dDo=i(X),n5=n(X,"LI",{});var t8e=s(n5);yme=n(t8e,"STRONG",{});var Wnt=s(yme);cDo=r(Wnt,"xlm-roberta"),Wnt.forEach(t),fDo=r(t8e," \u2014 "),pO=n(t8e,"A",{href:!0});var Hnt=s(pO);mDo=r(Hnt,"XLMRobertaForQuestionAnswering"),Hnt.forEach(t),gDo=r(t8e," (XLM-RoBERTa model)"),t8e.forEach(t),hDo=i(X),s5=n(X,"LI",{});var a8e=s(s5);Lme=n(a8e,"STRONG",{});var Unt=s(Lme);pDo=r(Unt,"xlm-roberta-xl"),Unt.forEach(t),uDo=r(a8e," \u2014 "),uO=n(a8e,"A",{href:!0});var Jnt=s(uO);_Do=r(Jnt,"XLMRobertaXLForQuestionAnswering"),Jnt.forEach(t),bDo=r(a8e," (XLM-RoBERTa-XL model)"),a8e.forEach(t),vDo=i(X),l5=n(X,"LI",{});var n8e=s(l5);xme=n(n8e,"STRONG",{});var Ynt=s(xme);FDo=r(Ynt,"xlnet"),Ynt.forEach(t),TDo=r(n8e," \u2014 "),_O=n(n8e,"A",{href:!0});var Knt=s(_O);MDo=r(Knt,"XLNetForQuestionAnsweringSimple"),Knt.forEach(t),EDo=r(n8e," (XLNet model)"),n8e.forEach(t),CDo=i(X),i5=n(X,"LI",{});var s8e=s(i5);$me=n(s8e,"STRONG",{});var Znt=s($me);wDo=r(Znt,"yoso"),Znt.forEach(t),ADo=r(s8e," \u2014 "),bO=n(s8e,"A",{href:!0});var est=s(bO);yDo=r(est,"YosoForQuestionAnswering"),est.forEach(t),LDo=r(s8e," (YOSO model)"),s8e.forEach(t),X.forEach(t),xDo=i(aa),d5=n(aa,"P",{});var l8e=s(d5);$Do=r(l8e,"The model is set in evaluation mode by default using "),kme=n(l8e,"CODE",{});var ost=s(kme);kDo=r(ost,"model.eval()"),ost.forEach(t),SDo=r(l8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=n(l8e,"CODE",{});var rst=s(Sme);RDo=r(rst,"model.train()"),rst.forEach(t),l8e.forEach(t),BDo=i(aa),T(c5.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),MBe=i(f),zi=n(f,"H2",{class:!0});var CIe=s(zi);f5=n(CIe,"A",{id:!0,class:!0,href:!0});var tst=s(f5);Rme=n(tst,"SPAN",{});var ast=s(Rme);T(j0.$$.fragment,ast),ast.forEach(t),tst.forEach(t),PDo=i(CIe),Bme=n(CIe,"SPAN",{});var nst=s(Bme);IDo=r(nst,"AutoModelForTableQuestionAnswering"),nst.forEach(t),CIe.forEach(t),EBe=i(f),Io=n(f,"DIV",{class:!0});var zs=s(Io);T(D0.$$.fragment,zs),qDo=i(zs),Qi=n(zs,"P",{});var TY=s(Qi);NDo=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vO=n(TY,"A",{href:!0});var sst=s(vO);jDo=r(sst,"from_pretrained()"),sst.forEach(t),DDo=r(TY," class method or the "),FO=n(TY,"A",{href:!0});var lst=s(FO);GDo=r(lst,"from_config()"),lst.forEach(t),ODo=r(TY,` class
method.`),TY.forEach(t),VDo=i(zs),G0=n(zs,"P",{});var wIe=s(G0);XDo=r(wIe,"This class cannot be instantiated directly using "),Pme=n(wIe,"CODE",{});var ist=s(Pme);zDo=r(ist,"__init__()"),ist.forEach(t),QDo=r(wIe," (throws an error)."),wIe.forEach(t),WDo=i(zs),it=n(zs,"DIV",{class:!0});var O3=s(it);T(O0.$$.fragment,O3),HDo=i(O3),Ime=n(O3,"P",{});var dst=s(Ime);UDo=r(dst,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),dst.forEach(t),JDo=i(O3),Wi=n(O3,"P",{});var MY=s(Wi);YDo=r(MY,`Note:
Loading a model from its configuration file does `),qme=n(MY,"STRONG",{});var cst=s(qme);KDo=r(cst,"not"),cst.forEach(t),ZDo=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=n(MY,"A",{href:!0});var fst=s(TO);eGo=r(fst,"from_pretrained()"),fst.forEach(t),oGo=r(MY," to load the model weights."),MY.forEach(t),rGo=i(O3),T(m5.$$.fragment,O3),O3.forEach(t),tGo=i(zs),ro=n(zs,"DIV",{class:!0});var na=s(ro);T(V0.$$.fragment,na),aGo=i(na),Nme=n(na,"P",{});var mst=s(Nme);nGo=r(mst,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mst.forEach(t),sGo=i(na),Sa=n(na,"P",{});var V3=s(Sa);lGo=r(V3,"The model class to instantiate is selected based on the "),jme=n(V3,"CODE",{});var gst=s(jme);iGo=r(gst,"model_type"),gst.forEach(t),dGo=r(V3,` property of the config object (either
passed as an argument or loaded from `),Dme=n(V3,"CODE",{});var hst=s(Dme);cGo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),fGo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=n(V3,"CODE",{});var pst=s(Gme);mGo=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),gGo=r(V3,":"),V3.forEach(t),hGo=i(na),Ome=n(na,"UL",{});var ust=s(Ome);g5=n(ust,"LI",{});var i8e=s(g5);Vme=n(i8e,"STRONG",{});var _st=s(Vme);pGo=r(_st,"tapas"),_st.forEach(t),uGo=r(i8e," \u2014 "),MO=n(i8e,"A",{href:!0});var bst=s(MO);_Go=r(bst,"TapasForQuestionAnswering"),bst.forEach(t),bGo=r(i8e," (TAPAS model)"),i8e.forEach(t),ust.forEach(t),vGo=i(na),h5=n(na,"P",{});var d8e=s(h5);FGo=r(d8e,"The model is set in evaluation mode by default using "),Xme=n(d8e,"CODE",{});var vst=s(Xme);TGo=r(vst,"model.eval()"),vst.forEach(t),MGo=r(d8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=n(d8e,"CODE",{});var Fst=s(zme);EGo=r(Fst,"model.train()"),Fst.forEach(t),d8e.forEach(t),CGo=i(na),T(p5.$$.fragment,na),na.forEach(t),zs.forEach(t),CBe=i(f),Hi=n(f,"H2",{class:!0});var AIe=s(Hi);u5=n(AIe,"A",{id:!0,class:!0,href:!0});var Tst=s(u5);Qme=n(Tst,"SPAN",{});var Mst=s(Qme);T(X0.$$.fragment,Mst),Mst.forEach(t),Tst.forEach(t),wGo=i(AIe),Wme=n(AIe,"SPAN",{});var Est=s(Wme);AGo=r(Est,"AutoModelForImageClassification"),Est.forEach(t),AIe.forEach(t),wBe=i(f),qo=n(f,"DIV",{class:!0});var Qs=s(qo);T(z0.$$.fragment,Qs),yGo=i(Qs),Ui=n(Qs,"P",{});var EY=s(Ui);LGo=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EO=n(EY,"A",{href:!0});var Cst=s(EO);xGo=r(Cst,"from_pretrained()"),Cst.forEach(t),$Go=r(EY," class method or the "),CO=n(EY,"A",{href:!0});var wst=s(CO);kGo=r(wst,"from_config()"),wst.forEach(t),SGo=r(EY,` class
method.`),EY.forEach(t),RGo=i(Qs),Q0=n(Qs,"P",{});var yIe=s(Q0);BGo=r(yIe,"This class cannot be instantiated directly using "),Hme=n(yIe,"CODE",{});var Ast=s(Hme);PGo=r(Ast,"__init__()"),Ast.forEach(t),IGo=r(yIe," (throws an error)."),yIe.forEach(t),qGo=i(Qs),dt=n(Qs,"DIV",{class:!0});var X3=s(dt);T(W0.$$.fragment,X3),NGo=i(X3),Ume=n(X3,"P",{});var yst=s(Ume);jGo=r(yst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yst.forEach(t),DGo=i(X3),Ji=n(X3,"P",{});var CY=s(Ji);GGo=r(CY,`Note:
Loading a model from its configuration file does `),Jme=n(CY,"STRONG",{});var Lst=s(Jme);OGo=r(Lst,"not"),Lst.forEach(t),VGo=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(CY,"A",{href:!0});var xst=s(wO);XGo=r(xst,"from_pretrained()"),xst.forEach(t),zGo=r(CY," to load the model weights."),CY.forEach(t),QGo=i(X3),T(_5.$$.fragment,X3),X3.forEach(t),WGo=i(Qs),to=n(Qs,"DIV",{class:!0});var sa=s(to);T(H0.$$.fragment,sa),HGo=i(sa),Yme=n(sa,"P",{});var $st=s(Yme);UGo=r($st,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$st.forEach(t),JGo=i(sa),Ra=n(sa,"P",{});var z3=s(Ra);YGo=r(z3,"The model class to instantiate is selected based on the "),Kme=n(z3,"CODE",{});var kst=s(Kme);KGo=r(kst,"model_type"),kst.forEach(t),ZGo=r(z3,` property of the config object (either
passed as an argument or loaded from `),Zme=n(z3,"CODE",{});var Sst=s(Zme);eOo=r(Sst,"pretrained_model_name_or_path"),Sst.forEach(t),oOo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=n(z3,"CODE",{});var Rst=s(ege);rOo=r(Rst,"pretrained_model_name_or_path"),Rst.forEach(t),tOo=r(z3,":"),z3.forEach(t),aOo=i(sa),ve=n(sa,"UL",{});var Ee=s(ve);b5=n(Ee,"LI",{});var c8e=s(b5);oge=n(c8e,"STRONG",{});var Bst=s(oge);nOo=r(Bst,"beit"),Bst.forEach(t),sOo=r(c8e," \u2014 "),AO=n(c8e,"A",{href:!0});var Pst=s(AO);lOo=r(Pst,"BeitForImageClassification"),Pst.forEach(t),iOo=r(c8e," (BEiT model)"),c8e.forEach(t),dOo=i(Ee),v5=n(Ee,"LI",{});var f8e=s(v5);rge=n(f8e,"STRONG",{});var Ist=s(rge);cOo=r(Ist,"convnext"),Ist.forEach(t),fOo=r(f8e," \u2014 "),yO=n(f8e,"A",{href:!0});var qst=s(yO);mOo=r(qst,"ConvNextForImageClassification"),qst.forEach(t),gOo=r(f8e," (ConvNext model)"),f8e.forEach(t),hOo=i(Ee),F5=n(Ee,"LI",{});var m8e=s(F5);tge=n(m8e,"STRONG",{});var Nst=s(tge);pOo=r(Nst,"data2vec-vision"),Nst.forEach(t),uOo=r(m8e," \u2014 "),LO=n(m8e,"A",{href:!0});var jst=s(LO);_Oo=r(jst,"Data2VecVisionForImageClassification"),jst.forEach(t),bOo=r(m8e," (Data2VecVision model)"),m8e.forEach(t),vOo=i(Ee),Ls=n(Ee,"LI",{});var Ax=s(Ls);age=n(Ax,"STRONG",{});var Dst=s(age);FOo=r(Dst,"deit"),Dst.forEach(t),TOo=r(Ax," \u2014 "),xO=n(Ax,"A",{href:!0});var Gst=s(xO);MOo=r(Gst,"DeiTForImageClassification"),Gst.forEach(t),EOo=r(Ax," or "),$O=n(Ax,"A",{href:!0});var Ost=s($O);COo=r(Ost,"DeiTForImageClassificationWithTeacher"),Ost.forEach(t),wOo=r(Ax," (DeiT model)"),Ax.forEach(t),AOo=i(Ee),T5=n(Ee,"LI",{});var g8e=s(T5);nge=n(g8e,"STRONG",{});var Vst=s(nge);yOo=r(Vst,"imagegpt"),Vst.forEach(t),LOo=r(g8e," \u2014 "),kO=n(g8e,"A",{href:!0});var Xst=s(kO);xOo=r(Xst,"ImageGPTForImageClassification"),Xst.forEach(t),$Oo=r(g8e," (ImageGPT model)"),g8e.forEach(t),kOo=i(Ee),ct=n(Ee,"LI",{});var ef=s(ct);sge=n(ef,"STRONG",{});var zst=s(sge);SOo=r(zst,"perceiver"),zst.forEach(t),ROo=r(ef," \u2014 "),SO=n(ef,"A",{href:!0});var Qst=s(SO);BOo=r(Qst,"PerceiverForImageClassificationLearned"),Qst.forEach(t),POo=r(ef," or "),RO=n(ef,"A",{href:!0});var Wst=s(RO);IOo=r(Wst,"PerceiverForImageClassificationFourier"),Wst.forEach(t),qOo=r(ef," or "),BO=n(ef,"A",{href:!0});var Hst=s(BO);NOo=r(Hst,"PerceiverForImageClassificationConvProcessing"),Hst.forEach(t),jOo=r(ef," (Perceiver model)"),ef.forEach(t),DOo=i(Ee),M5=n(Ee,"LI",{});var h8e=s(M5);lge=n(h8e,"STRONG",{});var Ust=s(lge);GOo=r(Ust,"poolformer"),Ust.forEach(t),OOo=r(h8e," \u2014 "),PO=n(h8e,"A",{href:!0});var Jst=s(PO);VOo=r(Jst,"PoolFormerForImageClassification"),Jst.forEach(t),XOo=r(h8e," (PoolFormer model)"),h8e.forEach(t),zOo=i(Ee),E5=n(Ee,"LI",{});var p8e=s(E5);ige=n(p8e,"STRONG",{});var Yst=s(ige);QOo=r(Yst,"regnet"),Yst.forEach(t),WOo=r(p8e," \u2014 "),IO=n(p8e,"A",{href:!0});var Kst=s(IO);HOo=r(Kst,"RegNetForImageClassification"),Kst.forEach(t),UOo=r(p8e," (RegNet model)"),p8e.forEach(t),JOo=i(Ee),C5=n(Ee,"LI",{});var u8e=s(C5);dge=n(u8e,"STRONG",{});var Zst=s(dge);YOo=r(Zst,"resnet"),Zst.forEach(t),KOo=r(u8e," \u2014 "),qO=n(u8e,"A",{href:!0});var elt=s(qO);ZOo=r(elt,"ResNetForImageClassification"),elt.forEach(t),eVo=r(u8e," (ResNet model)"),u8e.forEach(t),oVo=i(Ee),w5=n(Ee,"LI",{});var _8e=s(w5);cge=n(_8e,"STRONG",{});var olt=s(cge);rVo=r(olt,"segformer"),olt.forEach(t),tVo=r(_8e," \u2014 "),NO=n(_8e,"A",{href:!0});var rlt=s(NO);aVo=r(rlt,"SegformerForImageClassification"),rlt.forEach(t),nVo=r(_8e," (SegFormer model)"),_8e.forEach(t),sVo=i(Ee),A5=n(Ee,"LI",{});var b8e=s(A5);fge=n(b8e,"STRONG",{});var tlt=s(fge);lVo=r(tlt,"swin"),tlt.forEach(t),iVo=r(b8e," \u2014 "),jO=n(b8e,"A",{href:!0});var alt=s(jO);dVo=r(alt,"SwinForImageClassification"),alt.forEach(t),cVo=r(b8e," (Swin model)"),b8e.forEach(t),fVo=i(Ee),y5=n(Ee,"LI",{});var v8e=s(y5);mge=n(v8e,"STRONG",{});var nlt=s(mge);mVo=r(nlt,"van"),nlt.forEach(t),gVo=r(v8e," \u2014 "),DO=n(v8e,"A",{href:!0});var slt=s(DO);hVo=r(slt,"VanForImageClassification"),slt.forEach(t),pVo=r(v8e," (VAN model)"),v8e.forEach(t),uVo=i(Ee),L5=n(Ee,"LI",{});var F8e=s(L5);gge=n(F8e,"STRONG",{});var llt=s(gge);_Vo=r(llt,"vit"),llt.forEach(t),bVo=r(F8e," \u2014 "),GO=n(F8e,"A",{href:!0});var ilt=s(GO);vVo=r(ilt,"ViTForImageClassification"),ilt.forEach(t),FVo=r(F8e," (ViT model)"),F8e.forEach(t),Ee.forEach(t),TVo=i(sa),x5=n(sa,"P",{});var T8e=s(x5);MVo=r(T8e,"The model is set in evaluation mode by default using "),hge=n(T8e,"CODE",{});var dlt=s(hge);EVo=r(dlt,"model.eval()"),dlt.forEach(t),CVo=r(T8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=n(T8e,"CODE",{});var clt=s(pge);wVo=r(clt,"model.train()"),clt.forEach(t),T8e.forEach(t),AVo=i(sa),T($5.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),ABe=i(f),Yi=n(f,"H2",{class:!0});var LIe=s(Yi);k5=n(LIe,"A",{id:!0,class:!0,href:!0});var flt=s(k5);uge=n(flt,"SPAN",{});var mlt=s(uge);T(U0.$$.fragment,mlt),mlt.forEach(t),flt.forEach(t),yVo=i(LIe),_ge=n(LIe,"SPAN",{});var glt=s(_ge);LVo=r(glt,"AutoModelForVision2Seq"),glt.forEach(t),LIe.forEach(t),yBe=i(f),No=n(f,"DIV",{class:!0});var Ws=s(No);T(J0.$$.fragment,Ws),xVo=i(Ws),Ki=n(Ws,"P",{});var wY=s(Ki);$Vo=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OO=n(wY,"A",{href:!0});var hlt=s(OO);kVo=r(hlt,"from_pretrained()"),hlt.forEach(t),SVo=r(wY," class method or the "),VO=n(wY,"A",{href:!0});var plt=s(VO);RVo=r(plt,"from_config()"),plt.forEach(t),BVo=r(wY,` class
method.`),wY.forEach(t),PVo=i(Ws),Y0=n(Ws,"P",{});var xIe=s(Y0);IVo=r(xIe,"This class cannot be instantiated directly using "),bge=n(xIe,"CODE",{});var ult=s(bge);qVo=r(ult,"__init__()"),ult.forEach(t),NVo=r(xIe," (throws an error)."),xIe.forEach(t),jVo=i(Ws),ft=n(Ws,"DIV",{class:!0});var Q3=s(ft);T(K0.$$.fragment,Q3),DVo=i(Q3),vge=n(Q3,"P",{});var _lt=s(vge);GVo=r(_lt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_lt.forEach(t),OVo=i(Q3),Zi=n(Q3,"P",{});var AY=s(Zi);VVo=r(AY,`Note:
Loading a model from its configuration file does `),Fge=n(AY,"STRONG",{});var blt=s(Fge);XVo=r(blt,"not"),blt.forEach(t),zVo=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=n(AY,"A",{href:!0});var vlt=s(XO);QVo=r(vlt,"from_pretrained()"),vlt.forEach(t),WVo=r(AY," to load the model weights."),AY.forEach(t),HVo=i(Q3),T(S5.$$.fragment,Q3),Q3.forEach(t),UVo=i(Ws),ao=n(Ws,"DIV",{class:!0});var la=s(ao);T(Z0.$$.fragment,la),JVo=i(la),Tge=n(la,"P",{});var Flt=s(Tge);YVo=r(Flt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Flt.forEach(t),KVo=i(la),Ba=n(la,"P",{});var W3=s(Ba);ZVo=r(W3,"The model class to instantiate is selected based on the "),Mge=n(W3,"CODE",{});var Tlt=s(Mge);eXo=r(Tlt,"model_type"),Tlt.forEach(t),oXo=r(W3,` property of the config object (either
passed as an argument or loaded from `),Ege=n(W3,"CODE",{});var Mlt=s(Ege);rXo=r(Mlt,"pretrained_model_name_or_path"),Mlt.forEach(t),tXo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=n(W3,"CODE",{});var Elt=s(Cge);aXo=r(Elt,"pretrained_model_name_or_path"),Elt.forEach(t),nXo=r(W3,":"),W3.forEach(t),sXo=i(la),wge=n(la,"UL",{});var Clt=s(wge);R5=n(Clt,"LI",{});var M8e=s(R5);Age=n(M8e,"STRONG",{});var wlt=s(Age);lXo=r(wlt,"vision-encoder-decoder"),wlt.forEach(t),iXo=r(M8e," \u2014 "),zO=n(M8e,"A",{href:!0});var Alt=s(zO);dXo=r(Alt,"VisionEncoderDecoderModel"),Alt.forEach(t),cXo=r(M8e," (Vision Encoder decoder model)"),M8e.forEach(t),Clt.forEach(t),fXo=i(la),B5=n(la,"P",{});var E8e=s(B5);mXo=r(E8e,"The model is set in evaluation mode by default using "),yge=n(E8e,"CODE",{});var ylt=s(yge);gXo=r(ylt,"model.eval()"),ylt.forEach(t),hXo=r(E8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=n(E8e,"CODE",{});var Llt=s(Lge);pXo=r(Llt,"model.train()"),Llt.forEach(t),E8e.forEach(t),uXo=i(la),T(P5.$$.fragment,la),la.forEach(t),Ws.forEach(t),LBe=i(f),ed=n(f,"H2",{class:!0});var $Ie=s(ed);I5=n($Ie,"A",{id:!0,class:!0,href:!0});var xlt=s(I5);xge=n(xlt,"SPAN",{});var $lt=s(xge);T(ey.$$.fragment,$lt),$lt.forEach(t),xlt.forEach(t),_Xo=i($Ie),$ge=n($Ie,"SPAN",{});var klt=s($ge);bXo=r(klt,"AutoModelForAudioClassification"),klt.forEach(t),$Ie.forEach(t),xBe=i(f),jo=n(f,"DIV",{class:!0});var Hs=s(jo);T(oy.$$.fragment,Hs),vXo=i(Hs),od=n(Hs,"P",{});var yY=s(od);FXo=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),QO=n(yY,"A",{href:!0});var Slt=s(QO);TXo=r(Slt,"from_pretrained()"),Slt.forEach(t),MXo=r(yY," class method or the "),WO=n(yY,"A",{href:!0});var Rlt=s(WO);EXo=r(Rlt,"from_config()"),Rlt.forEach(t),CXo=r(yY,` class
method.`),yY.forEach(t),wXo=i(Hs),ry=n(Hs,"P",{});var kIe=s(ry);AXo=r(kIe,"This class cannot be instantiated directly using "),kge=n(kIe,"CODE",{});var Blt=s(kge);yXo=r(Blt,"__init__()"),Blt.forEach(t),LXo=r(kIe," (throws an error)."),kIe.forEach(t),xXo=i(Hs),mt=n(Hs,"DIV",{class:!0});var H3=s(mt);T(ty.$$.fragment,H3),$Xo=i(H3),Sge=n(H3,"P",{});var Plt=s(Sge);kXo=r(Plt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Plt.forEach(t),SXo=i(H3),rd=n(H3,"P",{});var LY=s(rd);RXo=r(LY,`Note:
Loading a model from its configuration file does `),Rge=n(LY,"STRONG",{});var Ilt=s(Rge);BXo=r(Ilt,"not"),Ilt.forEach(t),PXo=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(LY,"A",{href:!0});var qlt=s(HO);IXo=r(qlt,"from_pretrained()"),qlt.forEach(t),qXo=r(LY," to load the model weights."),LY.forEach(t),NXo=i(H3),T(q5.$$.fragment,H3),H3.forEach(t),jXo=i(Hs),no=n(Hs,"DIV",{class:!0});var ia=s(no);T(ay.$$.fragment,ia),DXo=i(ia),Bge=n(ia,"P",{});var Nlt=s(Bge);GXo=r(Nlt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Nlt.forEach(t),OXo=i(ia),Pa=n(ia,"P",{});var U3=s(Pa);VXo=r(U3,"The model class to instantiate is selected based on the "),Pge=n(U3,"CODE",{});var jlt=s(Pge);XXo=r(jlt,"model_type"),jlt.forEach(t),zXo=r(U3,` property of the config object (either
passed as an argument or loaded from `),Ige=n(U3,"CODE",{});var Dlt=s(Ige);QXo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),WXo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=n(U3,"CODE",{});var Glt=s(qge);HXo=r(Glt,"pretrained_model_name_or_path"),Glt.forEach(t),UXo=r(U3,":"),U3.forEach(t),JXo=i(ia),qe=n(ia,"UL",{});var uo=s(qe);N5=n(uo,"LI",{});var C8e=s(N5);Nge=n(C8e,"STRONG",{});var Olt=s(Nge);YXo=r(Olt,"data2vec-audio"),Olt.forEach(t),KXo=r(C8e," \u2014 "),UO=n(C8e,"A",{href:!0});var Vlt=s(UO);ZXo=r(Vlt,"Data2VecAudioForSequenceClassification"),Vlt.forEach(t),ezo=r(C8e," (Data2VecAudio model)"),C8e.forEach(t),ozo=i(uo),j5=n(uo,"LI",{});var w8e=s(j5);jge=n(w8e,"STRONG",{});var Xlt=s(jge);rzo=r(Xlt,"hubert"),Xlt.forEach(t),tzo=r(w8e," \u2014 "),JO=n(w8e,"A",{href:!0});var zlt=s(JO);azo=r(zlt,"HubertForSequenceClassification"),zlt.forEach(t),nzo=r(w8e," (Hubert model)"),w8e.forEach(t),szo=i(uo),D5=n(uo,"LI",{});var A8e=s(D5);Dge=n(A8e,"STRONG",{});var Qlt=s(Dge);lzo=r(Qlt,"sew"),Qlt.forEach(t),izo=r(A8e," \u2014 "),YO=n(A8e,"A",{href:!0});var Wlt=s(YO);dzo=r(Wlt,"SEWForSequenceClassification"),Wlt.forEach(t),czo=r(A8e," (SEW model)"),A8e.forEach(t),fzo=i(uo),G5=n(uo,"LI",{});var y8e=s(G5);Gge=n(y8e,"STRONG",{});var Hlt=s(Gge);mzo=r(Hlt,"sew-d"),Hlt.forEach(t),gzo=r(y8e," \u2014 "),KO=n(y8e,"A",{href:!0});var Ult=s(KO);hzo=r(Ult,"SEWDForSequenceClassification"),Ult.forEach(t),pzo=r(y8e," (SEW-D model)"),y8e.forEach(t),uzo=i(uo),O5=n(uo,"LI",{});var L8e=s(O5);Oge=n(L8e,"STRONG",{});var Jlt=s(Oge);_zo=r(Jlt,"unispeech"),Jlt.forEach(t),bzo=r(L8e," \u2014 "),ZO=n(L8e,"A",{href:!0});var Ylt=s(ZO);vzo=r(Ylt,"UniSpeechForSequenceClassification"),Ylt.forEach(t),Fzo=r(L8e," (UniSpeech model)"),L8e.forEach(t),Tzo=i(uo),V5=n(uo,"LI",{});var x8e=s(V5);Vge=n(x8e,"STRONG",{});var Klt=s(Vge);Mzo=r(Klt,"unispeech-sat"),Klt.forEach(t),Ezo=r(x8e," \u2014 "),eV=n(x8e,"A",{href:!0});var Zlt=s(eV);Czo=r(Zlt,"UniSpeechSatForSequenceClassification"),Zlt.forEach(t),wzo=r(x8e," (UniSpeechSat model)"),x8e.forEach(t),Azo=i(uo),X5=n(uo,"LI",{});var $8e=s(X5);Xge=n($8e,"STRONG",{});var eit=s(Xge);yzo=r(eit,"wav2vec2"),eit.forEach(t),Lzo=r($8e," \u2014 "),oV=n($8e,"A",{href:!0});var oit=s(oV);xzo=r(oit,"Wav2Vec2ForSequenceClassification"),oit.forEach(t),$zo=r($8e," (Wav2Vec2 model)"),$8e.forEach(t),kzo=i(uo),z5=n(uo,"LI",{});var k8e=s(z5);zge=n(k8e,"STRONG",{});var rit=s(zge);Szo=r(rit,"wavlm"),rit.forEach(t),Rzo=r(k8e," \u2014 "),rV=n(k8e,"A",{href:!0});var tit=s(rV);Bzo=r(tit,"WavLMForSequenceClassification"),tit.forEach(t),Pzo=r(k8e," (WavLM model)"),k8e.forEach(t),uo.forEach(t),Izo=i(ia),Q5=n(ia,"P",{});var S8e=s(Q5);qzo=r(S8e,"The model is set in evaluation mode by default using "),Qge=n(S8e,"CODE",{});var ait=s(Qge);Nzo=r(ait,"model.eval()"),ait.forEach(t),jzo=r(S8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=n(S8e,"CODE",{});var nit=s(Wge);Dzo=r(nit,"model.train()"),nit.forEach(t),S8e.forEach(t),Gzo=i(ia),T(W5.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),$Be=i(f),td=n(f,"H2",{class:!0});var SIe=s(td);H5=n(SIe,"A",{id:!0,class:!0,href:!0});var sit=s(H5);Hge=n(sit,"SPAN",{});var lit=s(Hge);T(ny.$$.fragment,lit),lit.forEach(t),sit.forEach(t),Ozo=i(SIe),Uge=n(SIe,"SPAN",{});var iit=s(Uge);Vzo=r(iit,"AutoModelForAudioFrameClassification"),iit.forEach(t),SIe.forEach(t),kBe=i(f),Do=n(f,"DIV",{class:!0});var Us=s(Do);T(sy.$$.fragment,Us),Xzo=i(Us),ad=n(Us,"P",{});var xY=s(ad);zzo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),tV=n(xY,"A",{href:!0});var dit=s(tV);Qzo=r(dit,"from_pretrained()"),dit.forEach(t),Wzo=r(xY," class method or the "),aV=n(xY,"A",{href:!0});var cit=s(aV);Hzo=r(cit,"from_config()"),cit.forEach(t),Uzo=r(xY,` class
method.`),xY.forEach(t),Jzo=i(Us),ly=n(Us,"P",{});var RIe=s(ly);Yzo=r(RIe,"This class cannot be instantiated directly using "),Jge=n(RIe,"CODE",{});var fit=s(Jge);Kzo=r(fit,"__init__()"),fit.forEach(t),Zzo=r(RIe," (throws an error)."),RIe.forEach(t),eQo=i(Us),gt=n(Us,"DIV",{class:!0});var J3=s(gt);T(iy.$$.fragment,J3),oQo=i(J3),Yge=n(J3,"P",{});var mit=s(Yge);rQo=r(mit,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),mit.forEach(t),tQo=i(J3),nd=n(J3,"P",{});var $Y=s(nd);aQo=r($Y,`Note:
Loading a model from its configuration file does `),Kge=n($Y,"STRONG",{});var git=s(Kge);nQo=r(git,"not"),git.forEach(t),sQo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=n($Y,"A",{href:!0});var hit=s(nV);lQo=r(hit,"from_pretrained()"),hit.forEach(t),iQo=r($Y," to load the model weights."),$Y.forEach(t),dQo=i(J3),T(U5.$$.fragment,J3),J3.forEach(t),cQo=i(Us),so=n(Us,"DIV",{class:!0});var da=s(so);T(dy.$$.fragment,da),fQo=i(da),Zge=n(da,"P",{});var pit=s(Zge);mQo=r(pit,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pit.forEach(t),gQo=i(da),Ia=n(da,"P",{});var Y3=s(Ia);hQo=r(Y3,"The model class to instantiate is selected based on the "),ehe=n(Y3,"CODE",{});var uit=s(ehe);pQo=r(uit,"model_type"),uit.forEach(t),uQo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),ohe=n(Y3,"CODE",{});var _it=s(ohe);_Qo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),bQo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=n(Y3,"CODE",{});var bit=s(rhe);vQo=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),FQo=r(Y3,":"),Y3.forEach(t),TQo=i(da),qa=n(da,"UL",{});var K3=s(qa);J5=n(K3,"LI",{});var R8e=s(J5);the=n(R8e,"STRONG",{});var vit=s(the);MQo=r(vit,"data2vec-audio"),vit.forEach(t),EQo=r(R8e," \u2014 "),sV=n(R8e,"A",{href:!0});var Fit=s(sV);CQo=r(Fit,"Data2VecAudioForAudioFrameClassification"),Fit.forEach(t),wQo=r(R8e," (Data2VecAudio model)"),R8e.forEach(t),AQo=i(K3),Y5=n(K3,"LI",{});var B8e=s(Y5);ahe=n(B8e,"STRONG",{});var Tit=s(ahe);yQo=r(Tit,"unispeech-sat"),Tit.forEach(t),LQo=r(B8e," \u2014 "),lV=n(B8e,"A",{href:!0});var Mit=s(lV);xQo=r(Mit,"UniSpeechSatForAudioFrameClassification"),Mit.forEach(t),$Qo=r(B8e," (UniSpeechSat model)"),B8e.forEach(t),kQo=i(K3),K5=n(K3,"LI",{});var P8e=s(K5);nhe=n(P8e,"STRONG",{});var Eit=s(nhe);SQo=r(Eit,"wav2vec2"),Eit.forEach(t),RQo=r(P8e," \u2014 "),iV=n(P8e,"A",{href:!0});var Cit=s(iV);BQo=r(Cit,"Wav2Vec2ForAudioFrameClassification"),Cit.forEach(t),PQo=r(P8e," (Wav2Vec2 model)"),P8e.forEach(t),IQo=i(K3),Z5=n(K3,"LI",{});var I8e=s(Z5);she=n(I8e,"STRONG",{});var wit=s(she);qQo=r(wit,"wavlm"),wit.forEach(t),NQo=r(I8e," \u2014 "),dV=n(I8e,"A",{href:!0});var Ait=s(dV);jQo=r(Ait,"WavLMForAudioFrameClassification"),Ait.forEach(t),DQo=r(I8e," (WavLM model)"),I8e.forEach(t),K3.forEach(t),GQo=i(da),ev=n(da,"P",{});var q8e=s(ev);OQo=r(q8e,"The model is set in evaluation mode by default using "),lhe=n(q8e,"CODE",{});var yit=s(lhe);VQo=r(yit,"model.eval()"),yit.forEach(t),XQo=r(q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=n(q8e,"CODE",{});var Lit=s(ihe);zQo=r(Lit,"model.train()"),Lit.forEach(t),q8e.forEach(t),QQo=i(da),T(ov.$$.fragment,da),da.forEach(t),Us.forEach(t),SBe=i(f),sd=n(f,"H2",{class:!0});var BIe=s(sd);rv=n(BIe,"A",{id:!0,class:!0,href:!0});var xit=s(rv);dhe=n(xit,"SPAN",{});var $it=s(dhe);T(cy.$$.fragment,$it),$it.forEach(t),xit.forEach(t),WQo=i(BIe),che=n(BIe,"SPAN",{});var kit=s(che);HQo=r(kit,"AutoModelForCTC"),kit.forEach(t),BIe.forEach(t),RBe=i(f),Go=n(f,"DIV",{class:!0});var Js=s(Go);T(fy.$$.fragment,Js),UQo=i(Js),ld=n(Js,"P",{});var kY=s(ld);JQo=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cV=n(kY,"A",{href:!0});var Sit=s(cV);YQo=r(Sit,"from_pretrained()"),Sit.forEach(t),KQo=r(kY," class method or the "),fV=n(kY,"A",{href:!0});var Rit=s(fV);ZQo=r(Rit,"from_config()"),Rit.forEach(t),eWo=r(kY,` class
method.`),kY.forEach(t),oWo=i(Js),my=n(Js,"P",{});var PIe=s(my);rWo=r(PIe,"This class cannot be instantiated directly using "),fhe=n(PIe,"CODE",{});var Bit=s(fhe);tWo=r(Bit,"__init__()"),Bit.forEach(t),aWo=r(PIe," (throws an error)."),PIe.forEach(t),nWo=i(Js),ht=n(Js,"DIV",{class:!0});var Z3=s(ht);T(gy.$$.fragment,Z3),sWo=i(Z3),mhe=n(Z3,"P",{});var Pit=s(mhe);lWo=r(Pit,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Pit.forEach(t),iWo=i(Z3),id=n(Z3,"P",{});var SY=s(id);dWo=r(SY,`Note:
Loading a model from its configuration file does `),ghe=n(SY,"STRONG",{});var Iit=s(ghe);cWo=r(Iit,"not"),Iit.forEach(t),fWo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=n(SY,"A",{href:!0});var qit=s(mV);mWo=r(qit,"from_pretrained()"),qit.forEach(t),gWo=r(SY," to load the model weights."),SY.forEach(t),hWo=i(Z3),T(tv.$$.fragment,Z3),Z3.forEach(t),pWo=i(Js),lo=n(Js,"DIV",{class:!0});var ca=s(lo);T(hy.$$.fragment,ca),uWo=i(ca),hhe=n(ca,"P",{});var Nit=s(hhe);_Wo=r(Nit,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Nit.forEach(t),bWo=i(ca),Na=n(ca,"P",{});var ew=s(Na);vWo=r(ew,"The model class to instantiate is selected based on the "),phe=n(ew,"CODE",{});var jit=s(phe);FWo=r(jit,"model_type"),jit.forEach(t),TWo=r(ew,` property of the config object (either
passed as an argument or loaded from `),uhe=n(ew,"CODE",{});var Dit=s(uhe);MWo=r(Dit,"pretrained_model_name_or_path"),Dit.forEach(t),EWo=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(ew,"CODE",{});var Git=s(_he);CWo=r(Git,"pretrained_model_name_or_path"),Git.forEach(t),wWo=r(ew,":"),ew.forEach(t),AWo=i(ca),Ne=n(ca,"UL",{});var _o=s(Ne);av=n(_o,"LI",{});var N8e=s(av);bhe=n(N8e,"STRONG",{});var Oit=s(bhe);yWo=r(Oit,"data2vec-audio"),Oit.forEach(t),LWo=r(N8e," \u2014 "),gV=n(N8e,"A",{href:!0});var Vit=s(gV);xWo=r(Vit,"Data2VecAudioForCTC"),Vit.forEach(t),$Wo=r(N8e," (Data2VecAudio model)"),N8e.forEach(t),kWo=i(_o),nv=n(_o,"LI",{});var j8e=s(nv);vhe=n(j8e,"STRONG",{});var Xit=s(vhe);SWo=r(Xit,"hubert"),Xit.forEach(t),RWo=r(j8e," \u2014 "),hV=n(j8e,"A",{href:!0});var zit=s(hV);BWo=r(zit,"HubertForCTC"),zit.forEach(t),PWo=r(j8e," (Hubert model)"),j8e.forEach(t),IWo=i(_o),sv=n(_o,"LI",{});var D8e=s(sv);Fhe=n(D8e,"STRONG",{});var Qit=s(Fhe);qWo=r(Qit,"sew"),Qit.forEach(t),NWo=r(D8e," \u2014 "),pV=n(D8e,"A",{href:!0});var Wit=s(pV);jWo=r(Wit,"SEWForCTC"),Wit.forEach(t),DWo=r(D8e," (SEW model)"),D8e.forEach(t),GWo=i(_o),lv=n(_o,"LI",{});var G8e=s(lv);The=n(G8e,"STRONG",{});var Hit=s(The);OWo=r(Hit,"sew-d"),Hit.forEach(t),VWo=r(G8e," \u2014 "),uV=n(G8e,"A",{href:!0});var Uit=s(uV);XWo=r(Uit,"SEWDForCTC"),Uit.forEach(t),zWo=r(G8e," (SEW-D model)"),G8e.forEach(t),QWo=i(_o),iv=n(_o,"LI",{});var O8e=s(iv);Mhe=n(O8e,"STRONG",{});var Jit=s(Mhe);WWo=r(Jit,"unispeech"),Jit.forEach(t),HWo=r(O8e," \u2014 "),_V=n(O8e,"A",{href:!0});var Yit=s(_V);UWo=r(Yit,"UniSpeechForCTC"),Yit.forEach(t),JWo=r(O8e," (UniSpeech model)"),O8e.forEach(t),YWo=i(_o),dv=n(_o,"LI",{});var V8e=s(dv);Ehe=n(V8e,"STRONG",{});var Kit=s(Ehe);KWo=r(Kit,"unispeech-sat"),Kit.forEach(t),ZWo=r(V8e," \u2014 "),bV=n(V8e,"A",{href:!0});var Zit=s(bV);eHo=r(Zit,"UniSpeechSatForCTC"),Zit.forEach(t),oHo=r(V8e," (UniSpeechSat model)"),V8e.forEach(t),rHo=i(_o),cv=n(_o,"LI",{});var X8e=s(cv);Che=n(X8e,"STRONG",{});var edt=s(Che);tHo=r(edt,"wav2vec2"),edt.forEach(t),aHo=r(X8e," \u2014 "),vV=n(X8e,"A",{href:!0});var odt=s(vV);nHo=r(odt,"Wav2Vec2ForCTC"),odt.forEach(t),sHo=r(X8e," (Wav2Vec2 model)"),X8e.forEach(t),lHo=i(_o),fv=n(_o,"LI",{});var z8e=s(fv);whe=n(z8e,"STRONG",{});var rdt=s(whe);iHo=r(rdt,"wavlm"),rdt.forEach(t),dHo=r(z8e," \u2014 "),FV=n(z8e,"A",{href:!0});var tdt=s(FV);cHo=r(tdt,"WavLMForCTC"),tdt.forEach(t),fHo=r(z8e," (WavLM model)"),z8e.forEach(t),_o.forEach(t),mHo=i(ca),mv=n(ca,"P",{});var Q8e=s(mv);gHo=r(Q8e,"The model is set in evaluation mode by default using "),Ahe=n(Q8e,"CODE",{});var adt=s(Ahe);hHo=r(adt,"model.eval()"),adt.forEach(t),pHo=r(Q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(Q8e,"CODE",{});var ndt=s(yhe);uHo=r(ndt,"model.train()"),ndt.forEach(t),Q8e.forEach(t),_Ho=i(ca),T(gv.$$.fragment,ca),ca.forEach(t),Js.forEach(t),BBe=i(f),dd=n(f,"H2",{class:!0});var IIe=s(dd);hv=n(IIe,"A",{id:!0,class:!0,href:!0});var sdt=s(hv);Lhe=n(sdt,"SPAN",{});var ldt=s(Lhe);T(py.$$.fragment,ldt),ldt.forEach(t),sdt.forEach(t),bHo=i(IIe),xhe=n(IIe,"SPAN",{});var idt=s(xhe);vHo=r(idt,"AutoModelForSpeechSeq2Seq"),idt.forEach(t),IIe.forEach(t),PBe=i(f),Oo=n(f,"DIV",{class:!0});var Ys=s(Oo);T(uy.$$.fragment,Ys),FHo=i(Ys),cd=n(Ys,"P",{});var RY=s(cd);THo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TV=n(RY,"A",{href:!0});var ddt=s(TV);MHo=r(ddt,"from_pretrained()"),ddt.forEach(t),EHo=r(RY," class method or the "),MV=n(RY,"A",{href:!0});var cdt=s(MV);CHo=r(cdt,"from_config()"),cdt.forEach(t),wHo=r(RY,` class
method.`),RY.forEach(t),AHo=i(Ys),_y=n(Ys,"P",{});var qIe=s(_y);yHo=r(qIe,"This class cannot be instantiated directly using "),$he=n(qIe,"CODE",{});var fdt=s($he);LHo=r(fdt,"__init__()"),fdt.forEach(t),xHo=r(qIe," (throws an error)."),qIe.forEach(t),$Ho=i(Ys),pt=n(Ys,"DIV",{class:!0});var ow=s(pt);T(by.$$.fragment,ow),kHo=i(ow),khe=n(ow,"P",{});var mdt=s(khe);SHo=r(mdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mdt.forEach(t),RHo=i(ow),fd=n(ow,"P",{});var BY=s(fd);BHo=r(BY,`Note:
Loading a model from its configuration file does `),She=n(BY,"STRONG",{});var gdt=s(She);PHo=r(gdt,"not"),gdt.forEach(t),IHo=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(BY,"A",{href:!0});var hdt=s(EV);qHo=r(hdt,"from_pretrained()"),hdt.forEach(t),NHo=r(BY," to load the model weights."),BY.forEach(t),jHo=i(ow),T(pv.$$.fragment,ow),ow.forEach(t),DHo=i(Ys),io=n(Ys,"DIV",{class:!0});var fa=s(io);T(vy.$$.fragment,fa),GHo=i(fa),Rhe=n(fa,"P",{});var pdt=s(Rhe);OHo=r(pdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pdt.forEach(t),VHo=i(fa),ja=n(fa,"P",{});var rw=s(ja);XHo=r(rw,"The model class to instantiate is selected based on the "),Bhe=n(rw,"CODE",{});var udt=s(Bhe);zHo=r(udt,"model_type"),udt.forEach(t),QHo=r(rw,` property of the config object (either
passed as an argument or loaded from `),Phe=n(rw,"CODE",{});var _dt=s(Phe);WHo=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),HHo=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(rw,"CODE",{});var bdt=s(Ihe);UHo=r(bdt,"pretrained_model_name_or_path"),bdt.forEach(t),JHo=r(rw,":"),rw.forEach(t),YHo=i(fa),Fy=n(fa,"UL",{});var NIe=s(Fy);uv=n(NIe,"LI",{});var W8e=s(uv);qhe=n(W8e,"STRONG",{});var vdt=s(qhe);KHo=r(vdt,"speech-encoder-decoder"),vdt.forEach(t),ZHo=r(W8e," \u2014 "),CV=n(W8e,"A",{href:!0});var Fdt=s(CV);eUo=r(Fdt,"SpeechEncoderDecoderModel"),Fdt.forEach(t),oUo=r(W8e," (Speech Encoder decoder model)"),W8e.forEach(t),rUo=i(NIe),_v=n(NIe,"LI",{});var H8e=s(_v);Nhe=n(H8e,"STRONG",{});var Tdt=s(Nhe);tUo=r(Tdt,"speech_to_text"),Tdt.forEach(t),aUo=r(H8e," \u2014 "),wV=n(H8e,"A",{href:!0});var Mdt=s(wV);nUo=r(Mdt,"Speech2TextForConditionalGeneration"),Mdt.forEach(t),sUo=r(H8e," (Speech2Text model)"),H8e.forEach(t),NIe.forEach(t),lUo=i(fa),bv=n(fa,"P",{});var U8e=s(bv);iUo=r(U8e,"The model is set in evaluation mode by default using "),jhe=n(U8e,"CODE",{});var Edt=s(jhe);dUo=r(Edt,"model.eval()"),Edt.forEach(t),cUo=r(U8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(U8e,"CODE",{});var Cdt=s(Dhe);fUo=r(Cdt,"model.train()"),Cdt.forEach(t),U8e.forEach(t),mUo=i(fa),T(vv.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),IBe=i(f),md=n(f,"H2",{class:!0});var jIe=s(md);Fv=n(jIe,"A",{id:!0,class:!0,href:!0});var wdt=s(Fv);Ghe=n(wdt,"SPAN",{});var Adt=s(Ghe);T(Ty.$$.fragment,Adt),Adt.forEach(t),wdt.forEach(t),gUo=i(jIe),Ohe=n(jIe,"SPAN",{});var ydt=s(Ohe);hUo=r(ydt,"AutoModelForAudioXVector"),ydt.forEach(t),jIe.forEach(t),qBe=i(f),Vo=n(f,"DIV",{class:!0});var Ks=s(Vo);T(My.$$.fragment,Ks),pUo=i(Ks),gd=n(Ks,"P",{});var PY=s(gd);uUo=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),AV=n(PY,"A",{href:!0});var Ldt=s(AV);_Uo=r(Ldt,"from_pretrained()"),Ldt.forEach(t),bUo=r(PY," class method or the "),yV=n(PY,"A",{href:!0});var xdt=s(yV);vUo=r(xdt,"from_config()"),xdt.forEach(t),FUo=r(PY,` class
method.`),PY.forEach(t),TUo=i(Ks),Ey=n(Ks,"P",{});var DIe=s(Ey);MUo=r(DIe,"This class cannot be instantiated directly using "),Vhe=n(DIe,"CODE",{});var $dt=s(Vhe);EUo=r($dt,"__init__()"),$dt.forEach(t),CUo=r(DIe," (throws an error)."),DIe.forEach(t),wUo=i(Ks),ut=n(Ks,"DIV",{class:!0});var tw=s(ut);T(Cy.$$.fragment,tw),AUo=i(tw),Xhe=n(tw,"P",{});var kdt=s(Xhe);yUo=r(kdt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),kdt.forEach(t),LUo=i(tw),hd=n(tw,"P",{});var IY=s(hd);xUo=r(IY,`Note:
Loading a model from its configuration file does `),zhe=n(IY,"STRONG",{});var Sdt=s(zhe);$Uo=r(Sdt,"not"),Sdt.forEach(t),kUo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(IY,"A",{href:!0});var Rdt=s(LV);SUo=r(Rdt,"from_pretrained()"),Rdt.forEach(t),RUo=r(IY," to load the model weights."),IY.forEach(t),BUo=i(tw),T(Tv.$$.fragment,tw),tw.forEach(t),PUo=i(Ks),co=n(Ks,"DIV",{class:!0});var ma=s(co);T(wy.$$.fragment,ma),IUo=i(ma),Qhe=n(ma,"P",{});var Bdt=s(Qhe);qUo=r(Bdt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Bdt.forEach(t),NUo=i(ma),Da=n(ma,"P",{});var aw=s(Da);jUo=r(aw,"The model class to instantiate is selected based on the "),Whe=n(aw,"CODE",{});var Pdt=s(Whe);DUo=r(Pdt,"model_type"),Pdt.forEach(t),GUo=r(aw,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(aw,"CODE",{});var Idt=s(Hhe);OUo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),VUo=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(aw,"CODE",{});var qdt=s(Uhe);XUo=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),zUo=r(aw,":"),aw.forEach(t),QUo=i(ma),Ga=n(ma,"UL",{});var nw=s(Ga);Mv=n(nw,"LI",{});var J8e=s(Mv);Jhe=n(J8e,"STRONG",{});var Ndt=s(Jhe);WUo=r(Ndt,"data2vec-audio"),Ndt.forEach(t),HUo=r(J8e," \u2014 "),xV=n(J8e,"A",{href:!0});var jdt=s(xV);UUo=r(jdt,"Data2VecAudioForXVector"),jdt.forEach(t),JUo=r(J8e," (Data2VecAudio model)"),J8e.forEach(t),YUo=i(nw),Ev=n(nw,"LI",{});var Y8e=s(Ev);Yhe=n(Y8e,"STRONG",{});var Ddt=s(Yhe);KUo=r(Ddt,"unispeech-sat"),Ddt.forEach(t),ZUo=r(Y8e," \u2014 "),$V=n(Y8e,"A",{href:!0});var Gdt=s($V);eJo=r(Gdt,"UniSpeechSatForXVector"),Gdt.forEach(t),oJo=r(Y8e," (UniSpeechSat model)"),Y8e.forEach(t),rJo=i(nw),Cv=n(nw,"LI",{});var K8e=s(Cv);Khe=n(K8e,"STRONG",{});var Odt=s(Khe);tJo=r(Odt,"wav2vec2"),Odt.forEach(t),aJo=r(K8e," \u2014 "),kV=n(K8e,"A",{href:!0});var Vdt=s(kV);nJo=r(Vdt,"Wav2Vec2ForXVector"),Vdt.forEach(t),sJo=r(K8e," (Wav2Vec2 model)"),K8e.forEach(t),lJo=i(nw),wv=n(nw,"LI",{});var Z8e=s(wv);Zhe=n(Z8e,"STRONG",{});var Xdt=s(Zhe);iJo=r(Xdt,"wavlm"),Xdt.forEach(t),dJo=r(Z8e," \u2014 "),SV=n(Z8e,"A",{href:!0});var zdt=s(SV);cJo=r(zdt,"WavLMForXVector"),zdt.forEach(t),fJo=r(Z8e," (WavLM model)"),Z8e.forEach(t),nw.forEach(t),mJo=i(ma),Av=n(ma,"P",{});var e7e=s(Av);gJo=r(e7e,"The model is set in evaluation mode by default using "),epe=n(e7e,"CODE",{});var Qdt=s(epe);hJo=r(Qdt,"model.eval()"),Qdt.forEach(t),pJo=r(e7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n(e7e,"CODE",{});var Wdt=s(ope);uJo=r(Wdt,"model.train()"),Wdt.forEach(t),e7e.forEach(t),_Jo=i(ma),T(yv.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),NBe=i(f),pd=n(f,"H2",{class:!0});var GIe=s(pd);Lv=n(GIe,"A",{id:!0,class:!0,href:!0});var Hdt=s(Lv);rpe=n(Hdt,"SPAN",{});var Udt=s(rpe);T(Ay.$$.fragment,Udt),Udt.forEach(t),Hdt.forEach(t),bJo=i(GIe),tpe=n(GIe,"SPAN",{});var Jdt=s(tpe);vJo=r(Jdt,"AutoModelForMaskedImageModeling"),Jdt.forEach(t),GIe.forEach(t),jBe=i(f),Xo=n(f,"DIV",{class:!0});var Zs=s(Xo);T(yy.$$.fragment,Zs),FJo=i(Zs),ud=n(Zs,"P",{});var qY=s(ud);TJo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RV=n(qY,"A",{href:!0});var Ydt=s(RV);MJo=r(Ydt,"from_pretrained()"),Ydt.forEach(t),EJo=r(qY," class method or the "),BV=n(qY,"A",{href:!0});var Kdt=s(BV);CJo=r(Kdt,"from_config()"),Kdt.forEach(t),wJo=r(qY,` class
method.`),qY.forEach(t),AJo=i(Zs),Ly=n(Zs,"P",{});var OIe=s(Ly);yJo=r(OIe,"This class cannot be instantiated directly using "),ape=n(OIe,"CODE",{});var Zdt=s(ape);LJo=r(Zdt,"__init__()"),Zdt.forEach(t),xJo=r(OIe," (throws an error)."),OIe.forEach(t),$Jo=i(Zs),_t=n(Zs,"DIV",{class:!0});var sw=s(_t);T(xy.$$.fragment,sw),kJo=i(sw),npe=n(sw,"P",{});var ect=s(npe);SJo=r(ect,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ect.forEach(t),RJo=i(sw),_d=n(sw,"P",{});var NY=s(_d);BJo=r(NY,`Note:
Loading a model from its configuration file does `),spe=n(NY,"STRONG",{});var oct=s(spe);PJo=r(oct,"not"),oct.forEach(t),IJo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(NY,"A",{href:!0});var rct=s(PV);qJo=r(rct,"from_pretrained()"),rct.forEach(t),NJo=r(NY," to load the model weights."),NY.forEach(t),jJo=i(sw),T(xv.$$.fragment,sw),sw.forEach(t),DJo=i(Zs),fo=n(Zs,"DIV",{class:!0});var ga=s(fo);T($y.$$.fragment,ga),GJo=i(ga),lpe=n(ga,"P",{});var tct=s(lpe);OJo=r(tct,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tct.forEach(t),VJo=i(ga),Oa=n(ga,"P",{});var lw=s(Oa);XJo=r(lw,"The model class to instantiate is selected based on the "),ipe=n(lw,"CODE",{});var act=s(ipe);zJo=r(act,"model_type"),act.forEach(t),QJo=r(lw,` property of the config object (either
passed as an argument or loaded from `),dpe=n(lw,"CODE",{});var nct=s(dpe);WJo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),HJo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(lw,"CODE",{});var sct=s(cpe);UJo=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),JJo=r(lw,":"),lw.forEach(t),YJo=i(ga),bd=n(ga,"UL",{});var jY=s(bd);$v=n(jY,"LI",{});var o7e=s($v);fpe=n(o7e,"STRONG",{});var lct=s(fpe);KJo=r(lct,"deit"),lct.forEach(t),ZJo=r(o7e," \u2014 "),IV=n(o7e,"A",{href:!0});var ict=s(IV);eYo=r(ict,"DeiTForMaskedImageModeling"),ict.forEach(t),oYo=r(o7e," (DeiT model)"),o7e.forEach(t),rYo=i(jY),kv=n(jY,"LI",{});var r7e=s(kv);mpe=n(r7e,"STRONG",{});var dct=s(mpe);tYo=r(dct,"swin"),dct.forEach(t),aYo=r(r7e," \u2014 "),qV=n(r7e,"A",{href:!0});var cct=s(qV);nYo=r(cct,"SwinForMaskedImageModeling"),cct.forEach(t),sYo=r(r7e," (Swin model)"),r7e.forEach(t),lYo=i(jY),Sv=n(jY,"LI",{});var t7e=s(Sv);gpe=n(t7e,"STRONG",{});var fct=s(gpe);iYo=r(fct,"vit"),fct.forEach(t),dYo=r(t7e," \u2014 "),NV=n(t7e,"A",{href:!0});var mct=s(NV);cYo=r(mct,"ViTForMaskedImageModeling"),mct.forEach(t),fYo=r(t7e," (ViT model)"),t7e.forEach(t),jY.forEach(t),mYo=i(ga),Rv=n(ga,"P",{});var a7e=s(Rv);gYo=r(a7e,"The model is set in evaluation mode by default using "),hpe=n(a7e,"CODE",{});var gct=s(hpe);hYo=r(gct,"model.eval()"),gct.forEach(t),pYo=r(a7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=n(a7e,"CODE",{});var hct=s(ppe);uYo=r(hct,"model.train()"),hct.forEach(t),a7e.forEach(t),_Yo=i(ga),T(Bv.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),DBe=i(f),vd=n(f,"H2",{class:!0});var VIe=s(vd);Pv=n(VIe,"A",{id:!0,class:!0,href:!0});var pct=s(Pv);upe=n(pct,"SPAN",{});var uct=s(upe);T(ky.$$.fragment,uct),uct.forEach(t),pct.forEach(t),bYo=i(VIe),_pe=n(VIe,"SPAN",{});var _ct=s(_pe);vYo=r(_ct,"AutoModelForObjectDetection"),_ct.forEach(t),VIe.forEach(t),GBe=i(f),zo=n(f,"DIV",{class:!0});var el=s(zo);T(Sy.$$.fragment,el),FYo=i(el),Fd=n(el,"P",{});var DY=s(Fd);TYo=r(DY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jV=n(DY,"A",{href:!0});var bct=s(jV);MYo=r(bct,"from_pretrained()"),bct.forEach(t),EYo=r(DY," class method or the "),DV=n(DY,"A",{href:!0});var vct=s(DV);CYo=r(vct,"from_config()"),vct.forEach(t),wYo=r(DY,` class
method.`),DY.forEach(t),AYo=i(el),Ry=n(el,"P",{});var XIe=s(Ry);yYo=r(XIe,"This class cannot be instantiated directly using "),bpe=n(XIe,"CODE",{});var Fct=s(bpe);LYo=r(Fct,"__init__()"),Fct.forEach(t),xYo=r(XIe," (throws an error)."),XIe.forEach(t),$Yo=i(el),bt=n(el,"DIV",{class:!0});var iw=s(bt);T(By.$$.fragment,iw),kYo=i(iw),vpe=n(iw,"P",{});var Tct=s(vpe);SYo=r(Tct,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Tct.forEach(t),RYo=i(iw),Td=n(iw,"P",{});var GY=s(Td);BYo=r(GY,`Note:
Loading a model from its configuration file does `),Fpe=n(GY,"STRONG",{});var Mct=s(Fpe);PYo=r(Mct,"not"),Mct.forEach(t),IYo=r(GY,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(GY,"A",{href:!0});var Ect=s(GV);qYo=r(Ect,"from_pretrained()"),Ect.forEach(t),NYo=r(GY," to load the model weights."),GY.forEach(t),jYo=i(iw),T(Iv.$$.fragment,iw),iw.forEach(t),DYo=i(el),mo=n(el,"DIV",{class:!0});var ha=s(mo);T(Py.$$.fragment,ha),GYo=i(ha),Tpe=n(ha,"P",{});var Cct=s(Tpe);OYo=r(Cct,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Cct.forEach(t),VYo=i(ha),Va=n(ha,"P",{});var dw=s(Va);XYo=r(dw,"The model class to instantiate is selected based on the "),Mpe=n(dw,"CODE",{});var wct=s(Mpe);zYo=r(wct,"model_type"),wct.forEach(t),QYo=r(dw,` property of the config object (either
passed as an argument or loaded from `),Epe=n(dw,"CODE",{});var Act=s(Epe);WYo=r(Act,"pretrained_model_name_or_path"),Act.forEach(t),HYo=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(dw,"CODE",{});var yct=s(Cpe);UYo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),JYo=r(dw,":"),dw.forEach(t),YYo=i(ha),wpe=n(ha,"UL",{});var Lct=s(wpe);qv=n(Lct,"LI",{});var n7e=s(qv);Ape=n(n7e,"STRONG",{});var xct=s(Ape);KYo=r(xct,"detr"),xct.forEach(t),ZYo=r(n7e," \u2014 "),OV=n(n7e,"A",{href:!0});var $ct=s(OV);eKo=r($ct,"DetrForObjectDetection"),$ct.forEach(t),oKo=r(n7e," (DETR model)"),n7e.forEach(t),Lct.forEach(t),rKo=i(ha),Nv=n(ha,"P",{});var s7e=s(Nv);tKo=r(s7e,"The model is set in evaluation mode by default using "),ype=n(s7e,"CODE",{});var kct=s(ype);aKo=r(kct,"model.eval()"),kct.forEach(t),nKo=r(s7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=n(s7e,"CODE",{});var Sct=s(Lpe);sKo=r(Sct,"model.train()"),Sct.forEach(t),s7e.forEach(t),lKo=i(ha),T(jv.$$.fragment,ha),ha.forEach(t),el.forEach(t),OBe=i(f),Md=n(f,"H2",{class:!0});var zIe=s(Md);Dv=n(zIe,"A",{id:!0,class:!0,href:!0});var Rct=s(Dv);xpe=n(Rct,"SPAN",{});var Bct=s(xpe);T(Iy.$$.fragment,Bct),Bct.forEach(t),Rct.forEach(t),iKo=i(zIe),$pe=n(zIe,"SPAN",{});var Pct=s($pe);dKo=r(Pct,"AutoModelForImageSegmentation"),Pct.forEach(t),zIe.forEach(t),VBe=i(f),Qo=n(f,"DIV",{class:!0});var ol=s(Qo);T(qy.$$.fragment,ol),cKo=i(ol),Ed=n(ol,"P",{});var OY=s(Ed);fKo=r(OY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),VV=n(OY,"A",{href:!0});var Ict=s(VV);mKo=r(Ict,"from_pretrained()"),Ict.forEach(t),gKo=r(OY," class method or the "),XV=n(OY,"A",{href:!0});var qct=s(XV);hKo=r(qct,"from_config()"),qct.forEach(t),pKo=r(OY,` class
method.`),OY.forEach(t),uKo=i(ol),Ny=n(ol,"P",{});var QIe=s(Ny);_Ko=r(QIe,"This class cannot be instantiated directly using "),kpe=n(QIe,"CODE",{});var Nct=s(kpe);bKo=r(Nct,"__init__()"),Nct.forEach(t),vKo=r(QIe," (throws an error)."),QIe.forEach(t),FKo=i(ol),vt=n(ol,"DIV",{class:!0});var cw=s(vt);T(jy.$$.fragment,cw),TKo=i(cw),Spe=n(cw,"P",{});var jct=s(Spe);MKo=r(jct,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jct.forEach(t),EKo=i(cw),Cd=n(cw,"P",{});var VY=s(Cd);CKo=r(VY,`Note:
Loading a model from its configuration file does `),Rpe=n(VY,"STRONG",{});var Dct=s(Rpe);wKo=r(Dct,"not"),Dct.forEach(t),AKo=r(VY,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(VY,"A",{href:!0});var Gct=s(zV);yKo=r(Gct,"from_pretrained()"),Gct.forEach(t),LKo=r(VY," to load the model weights."),VY.forEach(t),xKo=i(cw),T(Gv.$$.fragment,cw),cw.forEach(t),$Ko=i(ol),go=n(ol,"DIV",{class:!0});var pa=s(go);T(Dy.$$.fragment,pa),kKo=i(pa),Bpe=n(pa,"P",{});var Oct=s(Bpe);SKo=r(Oct,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Oct.forEach(t),RKo=i(pa),Xa=n(pa,"P",{});var fw=s(Xa);BKo=r(fw,"The model class to instantiate is selected based on the "),Ppe=n(fw,"CODE",{});var Vct=s(Ppe);PKo=r(Vct,"model_type"),Vct.forEach(t),IKo=r(fw,` property of the config object (either
passed as an argument or loaded from `),Ipe=n(fw,"CODE",{});var Xct=s(Ipe);qKo=r(Xct,"pretrained_model_name_or_path"),Xct.forEach(t),NKo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=n(fw,"CODE",{});var zct=s(qpe);jKo=r(zct,"pretrained_model_name_or_path"),zct.forEach(t),DKo=r(fw,":"),fw.forEach(t),GKo=i(pa),Npe=n(pa,"UL",{});var Qct=s(Npe);Ov=n(Qct,"LI",{});var l7e=s(Ov);jpe=n(l7e,"STRONG",{});var Wct=s(jpe);OKo=r(Wct,"detr"),Wct.forEach(t),VKo=r(l7e," \u2014 "),QV=n(l7e,"A",{href:!0});var Hct=s(QV);XKo=r(Hct,"DetrForSegmentation"),Hct.forEach(t),zKo=r(l7e," (DETR model)"),l7e.forEach(t),Qct.forEach(t),QKo=i(pa),Vv=n(pa,"P",{});var i7e=s(Vv);WKo=r(i7e,"The model is set in evaluation mode by default using "),Dpe=n(i7e,"CODE",{});var Uct=s(Dpe);HKo=r(Uct,"model.eval()"),Uct.forEach(t),UKo=r(i7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(i7e,"CODE",{});var Jct=s(Gpe);JKo=r(Jct,"model.train()"),Jct.forEach(t),i7e.forEach(t),YKo=i(pa),T(Xv.$$.fragment,pa),pa.forEach(t),ol.forEach(t),XBe=i(f),wd=n(f,"H2",{class:!0});var WIe=s(wd);zv=n(WIe,"A",{id:!0,class:!0,href:!0});var Yct=s(zv);Ope=n(Yct,"SPAN",{});var Kct=s(Ope);T(Gy.$$.fragment,Kct),Kct.forEach(t),Yct.forEach(t),KKo=i(WIe),Vpe=n(WIe,"SPAN",{});var Zct=s(Vpe);ZKo=r(Zct,"AutoModelForSemanticSegmentation"),Zct.forEach(t),WIe.forEach(t),zBe=i(f),Wo=n(f,"DIV",{class:!0});var rl=s(Wo);T(Oy.$$.fragment,rl),eZo=i(rl),Ad=n(rl,"P",{});var XY=s(Ad);oZo=r(XY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),WV=n(XY,"A",{href:!0});var eft=s(WV);rZo=r(eft,"from_pretrained()"),eft.forEach(t),tZo=r(XY," class method or the "),HV=n(XY,"A",{href:!0});var oft=s(HV);aZo=r(oft,"from_config()"),oft.forEach(t),nZo=r(XY,` class
method.`),XY.forEach(t),sZo=i(rl),Vy=n(rl,"P",{});var HIe=s(Vy);lZo=r(HIe,"This class cannot be instantiated directly using "),Xpe=n(HIe,"CODE",{});var rft=s(Xpe);iZo=r(rft,"__init__()"),rft.forEach(t),dZo=r(HIe," (throws an error)."),HIe.forEach(t),cZo=i(rl),Ft=n(rl,"DIV",{class:!0});var mw=s(Ft);T(Xy.$$.fragment,mw),fZo=i(mw),zpe=n(mw,"P",{});var tft=s(zpe);mZo=r(tft,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),tft.forEach(t),gZo=i(mw),yd=n(mw,"P",{});var zY=s(yd);hZo=r(zY,`Note:
Loading a model from its configuration file does `),Qpe=n(zY,"STRONG",{});var aft=s(Qpe);pZo=r(aft,"not"),aft.forEach(t),uZo=r(zY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(zY,"A",{href:!0});var nft=s(UV);_Zo=r(nft,"from_pretrained()"),nft.forEach(t),bZo=r(zY," to load the model weights."),zY.forEach(t),vZo=i(mw),T(Qv.$$.fragment,mw),mw.forEach(t),FZo=i(rl),ho=n(rl,"DIV",{class:!0});var ua=s(ho);T(zy.$$.fragment,ua),TZo=i(ua),Wpe=n(ua,"P",{});var sft=s(Wpe);MZo=r(sft,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),sft.forEach(t),EZo=i(ua),za=n(ua,"P",{});var gw=s(za);CZo=r(gw,"The model class to instantiate is selected based on the "),Hpe=n(gw,"CODE",{});var lft=s(Hpe);wZo=r(lft,"model_type"),lft.forEach(t),AZo=r(gw,` property of the config object (either
passed as an argument or loaded from `),Upe=n(gw,"CODE",{});var ift=s(Upe);yZo=r(ift,"pretrained_model_name_or_path"),ift.forEach(t),LZo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(gw,"CODE",{});var dft=s(Jpe);xZo=r(dft,"pretrained_model_name_or_path"),dft.forEach(t),$Zo=r(gw,":"),gw.forEach(t),kZo=i(ua),Qa=n(ua,"UL",{});var hw=s(Qa);Wv=n(hw,"LI",{});var d7e=s(Wv);Ype=n(d7e,"STRONG",{});var cft=s(Ype);SZo=r(cft,"beit"),cft.forEach(t),RZo=r(d7e," \u2014 "),JV=n(d7e,"A",{href:!0});var fft=s(JV);BZo=r(fft,"BeitForSemanticSegmentation"),fft.forEach(t),PZo=r(d7e," (BEiT model)"),d7e.forEach(t),IZo=i(hw),Hv=n(hw,"LI",{});var c7e=s(Hv);Kpe=n(c7e,"STRONG",{});var mft=s(Kpe);qZo=r(mft,"data2vec-vision"),mft.forEach(t),NZo=r(c7e," \u2014 "),YV=n(c7e,"A",{href:!0});var gft=s(YV);jZo=r(gft,"Data2VecVisionForSemanticSegmentation"),gft.forEach(t),DZo=r(c7e," (Data2VecVision model)"),c7e.forEach(t),GZo=i(hw),Uv=n(hw,"LI",{});var f7e=s(Uv);Zpe=n(f7e,"STRONG",{});var hft=s(Zpe);OZo=r(hft,"dpt"),hft.forEach(t),VZo=r(f7e," \u2014 "),KV=n(f7e,"A",{href:!0});var pft=s(KV);XZo=r(pft,"DPTForSemanticSegmentation"),pft.forEach(t),zZo=r(f7e," (DPT model)"),f7e.forEach(t),QZo=i(hw),Jv=n(hw,"LI",{});var m7e=s(Jv);eue=n(m7e,"STRONG",{});var uft=s(eue);WZo=r(uft,"segformer"),uft.forEach(t),HZo=r(m7e," \u2014 "),ZV=n(m7e,"A",{href:!0});var _ft=s(ZV);UZo=r(_ft,"SegformerForSemanticSegmentation"),_ft.forEach(t),JZo=r(m7e," (SegFormer model)"),m7e.forEach(t),hw.forEach(t),YZo=i(ua),Yv=n(ua,"P",{});var g7e=s(Yv);KZo=r(g7e,"The model is set in evaluation mode by default using "),oue=n(g7e,"CODE",{});var bft=s(oue);ZZo=r(bft,"model.eval()"),bft.forEach(t),eer=r(g7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=n(g7e,"CODE",{});var vft=s(rue);oer=r(vft,"model.train()"),vft.forEach(t),g7e.forEach(t),rer=i(ua),T(Kv.$$.fragment,ua),ua.forEach(t),rl.forEach(t),QBe=i(f),Ld=n(f,"H2",{class:!0});var UIe=s(Ld);Zv=n(UIe,"A",{id:!0,class:!0,href:!0});var Fft=s(Zv);tue=n(Fft,"SPAN",{});var Tft=s(tue);T(Qy.$$.fragment,Tft),Tft.forEach(t),Fft.forEach(t),ter=i(UIe),aue=n(UIe,"SPAN",{});var Mft=s(aue);aer=r(Mft,"AutoModelForInstanceSegmentation"),Mft.forEach(t),UIe.forEach(t),WBe=i(f),Ho=n(f,"DIV",{class:!0});var tl=s(Ho);T(Wy.$$.fragment,tl),ner=i(tl),xd=n(tl,"P",{});var QY=s(xd);ser=r(QY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eX=n(QY,"A",{href:!0});var Eft=s(eX);ler=r(Eft,"from_pretrained()"),Eft.forEach(t),ier=r(QY," class method or the "),oX=n(QY,"A",{href:!0});var Cft=s(oX);der=r(Cft,"from_config()"),Cft.forEach(t),cer=r(QY,` class
method.`),QY.forEach(t),fer=i(tl),Hy=n(tl,"P",{});var JIe=s(Hy);mer=r(JIe,"This class cannot be instantiated directly using "),nue=n(JIe,"CODE",{});var wft=s(nue);ger=r(wft,"__init__()"),wft.forEach(t),her=r(JIe," (throws an error)."),JIe.forEach(t),per=i(tl),Tt=n(tl,"DIV",{class:!0});var pw=s(Tt);T(Uy.$$.fragment,pw),uer=i(pw),sue=n(pw,"P",{});var Aft=s(sue);_er=r(Aft,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Aft.forEach(t),ber=i(pw),$d=n(pw,"P",{});var WY=s($d);ver=r(WY,`Note:
Loading a model from its configuration file does `),lue=n(WY,"STRONG",{});var yft=s(lue);Fer=r(yft,"not"),yft.forEach(t),Ter=r(WY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(WY,"A",{href:!0});var Lft=s(rX);Mer=r(Lft,"from_pretrained()"),Lft.forEach(t),Eer=r(WY," to load the model weights."),WY.forEach(t),Cer=i(pw),T(eF.$$.fragment,pw),pw.forEach(t),wer=i(tl),po=n(tl,"DIV",{class:!0});var _a=s(po);T(Jy.$$.fragment,_a),Aer=i(_a),iue=n(_a,"P",{});var xft=s(iue);yer=r(xft,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),xft.forEach(t),Ler=i(_a),Wa=n(_a,"P",{});var uw=s(Wa);xer=r(uw,"The model class to instantiate is selected based on the "),due=n(uw,"CODE",{});var $ft=s(due);$er=r($ft,"model_type"),$ft.forEach(t),ker=r(uw,` property of the config object (either
passed as an argument or loaded from `),cue=n(uw,"CODE",{});var kft=s(cue);Ser=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),Rer=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(uw,"CODE",{});var Sft=s(fue);Ber=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),Per=r(uw,":"),uw.forEach(t),Ier=i(_a),mue=n(_a,"UL",{});var Rft=s(mue);oF=n(Rft,"LI",{});var h7e=s(oF);gue=n(h7e,"STRONG",{});var Bft=s(gue);qer=r(Bft,"maskformer"),Bft.forEach(t),Ner=r(h7e," \u2014 "),tX=n(h7e,"A",{href:!0});var Pft=s(tX);jer=r(Pft,"MaskFormerForInstanceSegmentation"),Pft.forEach(t),Der=r(h7e," (MaskFormer model)"),h7e.forEach(t),Rft.forEach(t),Ger=i(_a),rF=n(_a,"P",{});var p7e=s(rF);Oer=r(p7e,"The model is set in evaluation mode by default using "),hue=n(p7e,"CODE",{});var Ift=s(hue);Ver=r(Ift,"model.eval()"),Ift.forEach(t),Xer=r(p7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(p7e,"CODE",{});var qft=s(pue);zer=r(qft,"model.train()"),qft.forEach(t),p7e.forEach(t),Qer=i(_a),T(tF.$$.fragment,_a),_a.forEach(t),tl.forEach(t),HBe=i(f),kd=n(f,"H2",{class:!0});var YIe=s(kd);aF=n(YIe,"A",{id:!0,class:!0,href:!0});var Nft=s(aF);uue=n(Nft,"SPAN",{});var jft=s(uue);T(Yy.$$.fragment,jft),jft.forEach(t),Nft.forEach(t),Wer=i(YIe),_ue=n(YIe,"SPAN",{});var Dft=s(_ue);Her=r(Dft,"TFAutoModel"),Dft.forEach(t),YIe.forEach(t),UBe=i(f),Uo=n(f,"DIV",{class:!0});var al=s(Uo);T(Ky.$$.fragment,al),Uer=i(al),Sd=n(al,"P",{});var HY=s(Sd);Jer=r(HY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aX=n(HY,"A",{href:!0});var Gft=s(aX);Yer=r(Gft,"from_pretrained()"),Gft.forEach(t),Ker=r(HY," class method or the "),nX=n(HY,"A",{href:!0});var Oft=s(nX);Zer=r(Oft,"from_config()"),Oft.forEach(t),eor=r(HY,` class
method.`),HY.forEach(t),oor=i(al),Zy=n(al,"P",{});var KIe=s(Zy);ror=r(KIe,"This class cannot be instantiated directly using "),bue=n(KIe,"CODE",{});var Vft=s(bue);tor=r(Vft,"__init__()"),Vft.forEach(t),aor=r(KIe," (throws an error)."),KIe.forEach(t),nor=i(al),Mt=n(al,"DIV",{class:!0});var _w=s(Mt);T(eL.$$.fragment,_w),sor=i(_w),vue=n(_w,"P",{});var Xft=s(vue);lor=r(Xft,"Instantiates one of the base model classes of the library from a configuration."),Xft.forEach(t),ior=i(_w),Rd=n(_w,"P",{});var UY=s(Rd);dor=r(UY,`Note:
Loading a model from its configuration file does `),Fue=n(UY,"STRONG",{});var zft=s(Fue);cor=r(zft,"not"),zft.forEach(t),mor=r(UY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(UY,"A",{href:!0});var Qft=s(sX);gor=r(Qft,"from_pretrained()"),Qft.forEach(t),hor=r(UY," to load the model weights."),UY.forEach(t),por=i(_w),T(nF.$$.fragment,_w),_w.forEach(t),uor=i(al),Mr=n(al,"DIV",{class:!0});var nl=s(Mr);T(oL.$$.fragment,nl),_or=i(nl),Tue=n(nl,"P",{});var Wft=s(Tue);bor=r(Wft,"Instantiate one of the base model classes of the library from a pretrained model."),Wft.forEach(t),vor=i(nl),Ha=n(nl,"P",{});var bw=s(Ha);For=r(bw,"The model class to instantiate is selected based on the "),Mue=n(bw,"CODE",{});var Hft=s(Mue);Tor=r(Hft,"model_type"),Hft.forEach(t),Mor=r(bw,` property of the config object (either
passed as an argument or loaded from `),Eue=n(bw,"CODE",{});var Uft=s(Eue);Eor=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),Cor=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(bw,"CODE",{});var Jft=s(Cue);wor=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),Aor=r(bw,":"),bw.forEach(t),yor=i(nl),j=n(nl,"UL",{});var D=s(j);sF=n(D,"LI",{});var u7e=s(sF);wue=n(u7e,"STRONG",{});var Yft=s(wue);Lor=r(Yft,"albert"),Yft.forEach(t),xor=r(u7e," \u2014 "),lX=n(u7e,"A",{href:!0});var Kft=s(lX);$or=r(Kft,"TFAlbertModel"),Kft.forEach(t),kor=r(u7e," (ALBERT model)"),u7e.forEach(t),Sor=i(D),lF=n(D,"LI",{});var _7e=s(lF);Aue=n(_7e,"STRONG",{});var Zft=s(Aue);Ror=r(Zft,"bart"),Zft.forEach(t),Bor=r(_7e," \u2014 "),iX=n(_7e,"A",{href:!0});var emt=s(iX);Por=r(emt,"TFBartModel"),emt.forEach(t),Ior=r(_7e," (BART model)"),_7e.forEach(t),qor=i(D),iF=n(D,"LI",{});var b7e=s(iF);yue=n(b7e,"STRONG",{});var omt=s(yue);Nor=r(omt,"bert"),omt.forEach(t),jor=r(b7e," \u2014 "),dX=n(b7e,"A",{href:!0});var rmt=s(dX);Dor=r(rmt,"TFBertModel"),rmt.forEach(t),Gor=r(b7e," (BERT model)"),b7e.forEach(t),Oor=i(D),dF=n(D,"LI",{});var v7e=s(dF);Lue=n(v7e,"STRONG",{});var tmt=s(Lue);Vor=r(tmt,"blenderbot"),tmt.forEach(t),Xor=r(v7e," \u2014 "),cX=n(v7e,"A",{href:!0});var amt=s(cX);zor=r(amt,"TFBlenderbotModel"),amt.forEach(t),Qor=r(v7e," (Blenderbot model)"),v7e.forEach(t),Wor=i(D),cF=n(D,"LI",{});var F7e=s(cF);xue=n(F7e,"STRONG",{});var nmt=s(xue);Hor=r(nmt,"blenderbot-small"),nmt.forEach(t),Uor=r(F7e," \u2014 "),fX=n(F7e,"A",{href:!0});var smt=s(fX);Jor=r(smt,"TFBlenderbotSmallModel"),smt.forEach(t),Yor=r(F7e," (BlenderbotSmall model)"),F7e.forEach(t),Kor=i(D),fF=n(D,"LI",{});var T7e=s(fF);$ue=n(T7e,"STRONG",{});var lmt=s($ue);Zor=r(lmt,"camembert"),lmt.forEach(t),err=r(T7e," \u2014 "),mX=n(T7e,"A",{href:!0});var imt=s(mX);orr=r(imt,"TFCamembertModel"),imt.forEach(t),rrr=r(T7e," (CamemBERT model)"),T7e.forEach(t),trr=i(D),mF=n(D,"LI",{});var M7e=s(mF);kue=n(M7e,"STRONG",{});var dmt=s(kue);arr=r(dmt,"clip"),dmt.forEach(t),nrr=r(M7e," \u2014 "),gX=n(M7e,"A",{href:!0});var cmt=s(gX);srr=r(cmt,"TFCLIPModel"),cmt.forEach(t),lrr=r(M7e," (CLIP model)"),M7e.forEach(t),irr=i(D),gF=n(D,"LI",{});var E7e=s(gF);Sue=n(E7e,"STRONG",{});var fmt=s(Sue);drr=r(fmt,"convbert"),fmt.forEach(t),crr=r(E7e," \u2014 "),hX=n(E7e,"A",{href:!0});var mmt=s(hX);frr=r(mmt,"TFConvBertModel"),mmt.forEach(t),mrr=r(E7e," (ConvBERT model)"),E7e.forEach(t),grr=i(D),hF=n(D,"LI",{});var C7e=s(hF);Rue=n(C7e,"STRONG",{});var gmt=s(Rue);hrr=r(gmt,"convnext"),gmt.forEach(t),prr=r(C7e," \u2014 "),pX=n(C7e,"A",{href:!0});var hmt=s(pX);urr=r(hmt,"TFConvNextModel"),hmt.forEach(t),_rr=r(C7e," (ConvNext model)"),C7e.forEach(t),brr=i(D),pF=n(D,"LI",{});var w7e=s(pF);Bue=n(w7e,"STRONG",{});var pmt=s(Bue);vrr=r(pmt,"ctrl"),pmt.forEach(t),Frr=r(w7e," \u2014 "),uX=n(w7e,"A",{href:!0});var umt=s(uX);Trr=r(umt,"TFCTRLModel"),umt.forEach(t),Mrr=r(w7e," (CTRL model)"),w7e.forEach(t),Err=i(D),uF=n(D,"LI",{});var A7e=s(uF);Pue=n(A7e,"STRONG",{});var _mt=s(Pue);Crr=r(_mt,"deberta"),_mt.forEach(t),wrr=r(A7e," \u2014 "),_X=n(A7e,"A",{href:!0});var bmt=s(_X);Arr=r(bmt,"TFDebertaModel"),bmt.forEach(t),yrr=r(A7e," (DeBERTa model)"),A7e.forEach(t),Lrr=i(D),_F=n(D,"LI",{});var y7e=s(_F);Iue=n(y7e,"STRONG",{});var vmt=s(Iue);xrr=r(vmt,"deberta-v2"),vmt.forEach(t),$rr=r(y7e," \u2014 "),bX=n(y7e,"A",{href:!0});var Fmt=s(bX);krr=r(Fmt,"TFDebertaV2Model"),Fmt.forEach(t),Srr=r(y7e," (DeBERTa-v2 model)"),y7e.forEach(t),Rrr=i(D),bF=n(D,"LI",{});var L7e=s(bF);que=n(L7e,"STRONG",{});var Tmt=s(que);Brr=r(Tmt,"distilbert"),Tmt.forEach(t),Prr=r(L7e," \u2014 "),vX=n(L7e,"A",{href:!0});var Mmt=s(vX);Irr=r(Mmt,"TFDistilBertModel"),Mmt.forEach(t),qrr=r(L7e," (DistilBERT model)"),L7e.forEach(t),Nrr=i(D),vF=n(D,"LI",{});var x7e=s(vF);Nue=n(x7e,"STRONG",{});var Emt=s(Nue);jrr=r(Emt,"dpr"),Emt.forEach(t),Drr=r(x7e," \u2014 "),FX=n(x7e,"A",{href:!0});var Cmt=s(FX);Grr=r(Cmt,"TFDPRQuestionEncoder"),Cmt.forEach(t),Orr=r(x7e," (DPR model)"),x7e.forEach(t),Vrr=i(D),FF=n(D,"LI",{});var $7e=s(FF);jue=n($7e,"STRONG",{});var wmt=s(jue);Xrr=r(wmt,"electra"),wmt.forEach(t),zrr=r($7e," \u2014 "),TX=n($7e,"A",{href:!0});var Amt=s(TX);Qrr=r(Amt,"TFElectraModel"),Amt.forEach(t),Wrr=r($7e," (ELECTRA model)"),$7e.forEach(t),Hrr=i(D),TF=n(D,"LI",{});var k7e=s(TF);Due=n(k7e,"STRONG",{});var ymt=s(Due);Urr=r(ymt,"flaubert"),ymt.forEach(t),Jrr=r(k7e," \u2014 "),MX=n(k7e,"A",{href:!0});var Lmt=s(MX);Yrr=r(Lmt,"TFFlaubertModel"),Lmt.forEach(t),Krr=r(k7e," (FlauBERT model)"),k7e.forEach(t),Zrr=i(D),xs=n(D,"LI",{});var yx=s(xs);Gue=n(yx,"STRONG",{});var xmt=s(Gue);etr=r(xmt,"funnel"),xmt.forEach(t),otr=r(yx," \u2014 "),EX=n(yx,"A",{href:!0});var $mt=s(EX);rtr=r($mt,"TFFunnelModel"),$mt.forEach(t),ttr=r(yx," or "),CX=n(yx,"A",{href:!0});var kmt=s(CX);atr=r(kmt,"TFFunnelBaseModel"),kmt.forEach(t),ntr=r(yx," (Funnel Transformer model)"),yx.forEach(t),str=i(D),MF=n(D,"LI",{});var S7e=s(MF);Oue=n(S7e,"STRONG",{});var Smt=s(Oue);ltr=r(Smt,"gpt2"),Smt.forEach(t),itr=r(S7e," \u2014 "),wX=n(S7e,"A",{href:!0});var Rmt=s(wX);dtr=r(Rmt,"TFGPT2Model"),Rmt.forEach(t),ctr=r(S7e," (OpenAI GPT-2 model)"),S7e.forEach(t),ftr=i(D),EF=n(D,"LI",{});var R7e=s(EF);Vue=n(R7e,"STRONG",{});var Bmt=s(Vue);mtr=r(Bmt,"gptj"),Bmt.forEach(t),gtr=r(R7e," \u2014 "),AX=n(R7e,"A",{href:!0});var Pmt=s(AX);htr=r(Pmt,"TFGPTJModel"),Pmt.forEach(t),ptr=r(R7e," (GPT-J model)"),R7e.forEach(t),utr=i(D),CF=n(D,"LI",{});var B7e=s(CF);Xue=n(B7e,"STRONG",{});var Imt=s(Xue);_tr=r(Imt,"hubert"),Imt.forEach(t),btr=r(B7e," \u2014 "),yX=n(B7e,"A",{href:!0});var qmt=s(yX);vtr=r(qmt,"TFHubertModel"),qmt.forEach(t),Ftr=r(B7e," (Hubert model)"),B7e.forEach(t),Ttr=i(D),wF=n(D,"LI",{});var P7e=s(wF);zue=n(P7e,"STRONG",{});var Nmt=s(zue);Mtr=r(Nmt,"layoutlm"),Nmt.forEach(t),Etr=r(P7e," \u2014 "),LX=n(P7e,"A",{href:!0});var jmt=s(LX);Ctr=r(jmt,"TFLayoutLMModel"),jmt.forEach(t),wtr=r(P7e," (LayoutLM model)"),P7e.forEach(t),Atr=i(D),AF=n(D,"LI",{});var I7e=s(AF);Que=n(I7e,"STRONG",{});var Dmt=s(Que);ytr=r(Dmt,"led"),Dmt.forEach(t),Ltr=r(I7e," \u2014 "),xX=n(I7e,"A",{href:!0});var Gmt=s(xX);xtr=r(Gmt,"TFLEDModel"),Gmt.forEach(t),$tr=r(I7e," (LED model)"),I7e.forEach(t),ktr=i(D),yF=n(D,"LI",{});var q7e=s(yF);Wue=n(q7e,"STRONG",{});var Omt=s(Wue);Str=r(Omt,"longformer"),Omt.forEach(t),Rtr=r(q7e," \u2014 "),$X=n(q7e,"A",{href:!0});var Vmt=s($X);Btr=r(Vmt,"TFLongformerModel"),Vmt.forEach(t),Ptr=r(q7e," (Longformer model)"),q7e.forEach(t),Itr=i(D),LF=n(D,"LI",{});var N7e=s(LF);Hue=n(N7e,"STRONG",{});var Xmt=s(Hue);qtr=r(Xmt,"lxmert"),Xmt.forEach(t),Ntr=r(N7e," \u2014 "),kX=n(N7e,"A",{href:!0});var zmt=s(kX);jtr=r(zmt,"TFLxmertModel"),zmt.forEach(t),Dtr=r(N7e," (LXMERT model)"),N7e.forEach(t),Gtr=i(D),xF=n(D,"LI",{});var j7e=s(xF);Uue=n(j7e,"STRONG",{});var Qmt=s(Uue);Otr=r(Qmt,"marian"),Qmt.forEach(t),Vtr=r(j7e," \u2014 "),SX=n(j7e,"A",{href:!0});var Wmt=s(SX);Xtr=r(Wmt,"TFMarianModel"),Wmt.forEach(t),ztr=r(j7e," (Marian model)"),j7e.forEach(t),Qtr=i(D),$F=n(D,"LI",{});var D7e=s($F);Jue=n(D7e,"STRONG",{});var Hmt=s(Jue);Wtr=r(Hmt,"mbart"),Hmt.forEach(t),Htr=r(D7e," \u2014 "),RX=n(D7e,"A",{href:!0});var Umt=s(RX);Utr=r(Umt,"TFMBartModel"),Umt.forEach(t),Jtr=r(D7e," (mBART model)"),D7e.forEach(t),Ytr=i(D),kF=n(D,"LI",{});var G7e=s(kF);Yue=n(G7e,"STRONG",{});var Jmt=s(Yue);Ktr=r(Jmt,"mobilebert"),Jmt.forEach(t),Ztr=r(G7e," \u2014 "),BX=n(G7e,"A",{href:!0});var Ymt=s(BX);ear=r(Ymt,"TFMobileBertModel"),Ymt.forEach(t),oar=r(G7e," (MobileBERT model)"),G7e.forEach(t),rar=i(D),SF=n(D,"LI",{});var O7e=s(SF);Kue=n(O7e,"STRONG",{});var Kmt=s(Kue);tar=r(Kmt,"mpnet"),Kmt.forEach(t),aar=r(O7e," \u2014 "),PX=n(O7e,"A",{href:!0});var Zmt=s(PX);nar=r(Zmt,"TFMPNetModel"),Zmt.forEach(t),sar=r(O7e," (MPNet model)"),O7e.forEach(t),lar=i(D),RF=n(D,"LI",{});var V7e=s(RF);Zue=n(V7e,"STRONG",{});var egt=s(Zue);iar=r(egt,"mt5"),egt.forEach(t),dar=r(V7e," \u2014 "),IX=n(V7e,"A",{href:!0});var ogt=s(IX);car=r(ogt,"TFMT5Model"),ogt.forEach(t),far=r(V7e," (mT5 model)"),V7e.forEach(t),mar=i(D),BF=n(D,"LI",{});var X7e=s(BF);e_e=n(X7e,"STRONG",{});var rgt=s(e_e);gar=r(rgt,"openai-gpt"),rgt.forEach(t),har=r(X7e," \u2014 "),qX=n(X7e,"A",{href:!0});var tgt=s(qX);par=r(tgt,"TFOpenAIGPTModel"),tgt.forEach(t),uar=r(X7e," (OpenAI GPT model)"),X7e.forEach(t),_ar=i(D),PF=n(D,"LI",{});var z7e=s(PF);o_e=n(z7e,"STRONG",{});var agt=s(o_e);bar=r(agt,"pegasus"),agt.forEach(t),Far=r(z7e," \u2014 "),NX=n(z7e,"A",{href:!0});var ngt=s(NX);Tar=r(ngt,"TFPegasusModel"),ngt.forEach(t),Mar=r(z7e," (Pegasus model)"),z7e.forEach(t),Ear=i(D),IF=n(D,"LI",{});var Q7e=s(IF);r_e=n(Q7e,"STRONG",{});var sgt=s(r_e);Car=r(sgt,"rembert"),sgt.forEach(t),war=r(Q7e," \u2014 "),jX=n(Q7e,"A",{href:!0});var lgt=s(jX);Aar=r(lgt,"TFRemBertModel"),lgt.forEach(t),yar=r(Q7e," (RemBERT model)"),Q7e.forEach(t),Lar=i(D),qF=n(D,"LI",{});var W7e=s(qF);t_e=n(W7e,"STRONG",{});var igt=s(t_e);xar=r(igt,"roberta"),igt.forEach(t),$ar=r(W7e," \u2014 "),DX=n(W7e,"A",{href:!0});var dgt=s(DX);kar=r(dgt,"TFRobertaModel"),dgt.forEach(t),Sar=r(W7e," (RoBERTa model)"),W7e.forEach(t),Rar=i(D),NF=n(D,"LI",{});var H7e=s(NF);a_e=n(H7e,"STRONG",{});var cgt=s(a_e);Bar=r(cgt,"roformer"),cgt.forEach(t),Par=r(H7e," \u2014 "),GX=n(H7e,"A",{href:!0});var fgt=s(GX);Iar=r(fgt,"TFRoFormerModel"),fgt.forEach(t),qar=r(H7e," (RoFormer model)"),H7e.forEach(t),Nar=i(D),jF=n(D,"LI",{});var U7e=s(jF);n_e=n(U7e,"STRONG",{});var mgt=s(n_e);jar=r(mgt,"speech_to_text"),mgt.forEach(t),Dar=r(U7e," \u2014 "),OX=n(U7e,"A",{href:!0});var ggt=s(OX);Gar=r(ggt,"TFSpeech2TextModel"),ggt.forEach(t),Oar=r(U7e," (Speech2Text model)"),U7e.forEach(t),Var=i(D),DF=n(D,"LI",{});var J7e=s(DF);s_e=n(J7e,"STRONG",{});var hgt=s(s_e);Xar=r(hgt,"t5"),hgt.forEach(t),zar=r(J7e," \u2014 "),VX=n(J7e,"A",{href:!0});var pgt=s(VX);Qar=r(pgt,"TFT5Model"),pgt.forEach(t),War=r(J7e," (T5 model)"),J7e.forEach(t),Har=i(D),GF=n(D,"LI",{});var Y7e=s(GF);l_e=n(Y7e,"STRONG",{});var ugt=s(l_e);Uar=r(ugt,"tapas"),ugt.forEach(t),Jar=r(Y7e," \u2014 "),XX=n(Y7e,"A",{href:!0});var _gt=s(XX);Yar=r(_gt,"TFTapasModel"),_gt.forEach(t),Kar=r(Y7e," (TAPAS model)"),Y7e.forEach(t),Zar=i(D),OF=n(D,"LI",{});var K7e=s(OF);i_e=n(K7e,"STRONG",{});var bgt=s(i_e);enr=r(bgt,"transfo-xl"),bgt.forEach(t),onr=r(K7e," \u2014 "),zX=n(K7e,"A",{href:!0});var vgt=s(zX);rnr=r(vgt,"TFTransfoXLModel"),vgt.forEach(t),tnr=r(K7e," (Transformer-XL model)"),K7e.forEach(t),anr=i(D),VF=n(D,"LI",{});var Z7e=s(VF);d_e=n(Z7e,"STRONG",{});var Fgt=s(d_e);nnr=r(Fgt,"vit"),Fgt.forEach(t),snr=r(Z7e," \u2014 "),QX=n(Z7e,"A",{href:!0});var Tgt=s(QX);lnr=r(Tgt,"TFViTModel"),Tgt.forEach(t),inr=r(Z7e," (ViT model)"),Z7e.forEach(t),dnr=i(D),XF=n(D,"LI",{});var exe=s(XF);c_e=n(exe,"STRONG",{});var Mgt=s(c_e);cnr=r(Mgt,"vit_mae"),Mgt.forEach(t),fnr=r(exe," \u2014 "),WX=n(exe,"A",{href:!0});var Egt=s(WX);mnr=r(Egt,"TFViTMAEModel"),Egt.forEach(t),gnr=r(exe," (ViTMAE model)"),exe.forEach(t),hnr=i(D),zF=n(D,"LI",{});var oxe=s(zF);f_e=n(oxe,"STRONG",{});var Cgt=s(f_e);pnr=r(Cgt,"wav2vec2"),Cgt.forEach(t),unr=r(oxe," \u2014 "),HX=n(oxe,"A",{href:!0});var wgt=s(HX);_nr=r(wgt,"TFWav2Vec2Model"),wgt.forEach(t),bnr=r(oxe," (Wav2Vec2 model)"),oxe.forEach(t),vnr=i(D),QF=n(D,"LI",{});var rxe=s(QF);m_e=n(rxe,"STRONG",{});var Agt=s(m_e);Fnr=r(Agt,"xlm"),Agt.forEach(t),Tnr=r(rxe," \u2014 "),UX=n(rxe,"A",{href:!0});var ygt=s(UX);Mnr=r(ygt,"TFXLMModel"),ygt.forEach(t),Enr=r(rxe," (XLM model)"),rxe.forEach(t),Cnr=i(D),WF=n(D,"LI",{});var txe=s(WF);g_e=n(txe,"STRONG",{});var Lgt=s(g_e);wnr=r(Lgt,"xlm-roberta"),Lgt.forEach(t),Anr=r(txe," \u2014 "),JX=n(txe,"A",{href:!0});var xgt=s(JX);ynr=r(xgt,"TFXLMRobertaModel"),xgt.forEach(t),Lnr=r(txe," (XLM-RoBERTa model)"),txe.forEach(t),xnr=i(D),HF=n(D,"LI",{});var axe=s(HF);h_e=n(axe,"STRONG",{});var $gt=s(h_e);$nr=r($gt,"xlnet"),$gt.forEach(t),knr=r(axe," \u2014 "),YX=n(axe,"A",{href:!0});var kgt=s(YX);Snr=r(kgt,"TFXLNetModel"),kgt.forEach(t),Rnr=r(axe," (XLNet model)"),axe.forEach(t),D.forEach(t),Bnr=i(nl),T(UF.$$.fragment,nl),nl.forEach(t),al.forEach(t),JBe=i(f),Bd=n(f,"H2",{class:!0});var ZIe=s(Bd);JF=n(ZIe,"A",{id:!0,class:!0,href:!0});var Sgt=s(JF);p_e=n(Sgt,"SPAN",{});var Rgt=s(p_e);T(rL.$$.fragment,Rgt),Rgt.forEach(t),Sgt.forEach(t),Pnr=i(ZIe),u_e=n(ZIe,"SPAN",{});var Bgt=s(u_e);Inr=r(Bgt,"TFAutoModelForPreTraining"),Bgt.forEach(t),ZIe.forEach(t),YBe=i(f),Jo=n(f,"DIV",{class:!0});var sl=s(Jo);T(tL.$$.fragment,sl),qnr=i(sl),Pd=n(sl,"P",{});var JY=s(Pd);Nnr=r(JY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),KX=n(JY,"A",{href:!0});var Pgt=s(KX);jnr=r(Pgt,"from_pretrained()"),Pgt.forEach(t),Dnr=r(JY," class method or the "),ZX=n(JY,"A",{href:!0});var Igt=s(ZX);Gnr=r(Igt,"from_config()"),Igt.forEach(t),Onr=r(JY,` class
method.`),JY.forEach(t),Vnr=i(sl),aL=n(sl,"P",{});var eqe=s(aL);Xnr=r(eqe,"This class cannot be instantiated directly using "),__e=n(eqe,"CODE",{});var qgt=s(__e);znr=r(qgt,"__init__()"),qgt.forEach(t),Qnr=r(eqe," (throws an error)."),eqe.forEach(t),Wnr=i(sl),Et=n(sl,"DIV",{class:!0});var vw=s(Et);T(nL.$$.fragment,vw),Hnr=i(vw),b_e=n(vw,"P",{});var Ngt=s(b_e);Unr=r(Ngt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ngt.forEach(t),Jnr=i(vw),Id=n(vw,"P",{});var YY=s(Id);Ynr=r(YY,`Note:
Loading a model from its configuration file does `),v_e=n(YY,"STRONG",{});var jgt=s(v_e);Knr=r(jgt,"not"),jgt.forEach(t),Znr=r(YY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(YY,"A",{href:!0});var Dgt=s(ez);esr=r(Dgt,"from_pretrained()"),Dgt.forEach(t),osr=r(YY," to load the model weights."),YY.forEach(t),rsr=i(vw),T(YF.$$.fragment,vw),vw.forEach(t),tsr=i(sl),Er=n(sl,"DIV",{class:!0});var ll=s(Er);T(sL.$$.fragment,ll),asr=i(ll),F_e=n(ll,"P",{});var Ggt=s(F_e);nsr=r(Ggt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ggt.forEach(t),ssr=i(ll),Ua=n(ll,"P",{});var Fw=s(Ua);lsr=r(Fw,"The model class to instantiate is selected based on the "),T_e=n(Fw,"CODE",{});var Ogt=s(T_e);isr=r(Ogt,"model_type"),Ogt.forEach(t),dsr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),M_e=n(Fw,"CODE",{});var Vgt=s(M_e);csr=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),fsr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=n(Fw,"CODE",{});var Xgt=s(E_e);msr=r(Xgt,"pretrained_model_name_or_path"),Xgt.forEach(t),gsr=r(Fw,":"),Fw.forEach(t),hsr=i(ll),ne=n(ll,"UL",{});var le=s(ne);KF=n(le,"LI",{});var nxe=s(KF);C_e=n(nxe,"STRONG",{});var zgt=s(C_e);psr=r(zgt,"albert"),zgt.forEach(t),usr=r(nxe," \u2014 "),oz=n(nxe,"A",{href:!0});var Qgt=s(oz);_sr=r(Qgt,"TFAlbertForPreTraining"),Qgt.forEach(t),bsr=r(nxe," (ALBERT model)"),nxe.forEach(t),vsr=i(le),ZF=n(le,"LI",{});var sxe=s(ZF);w_e=n(sxe,"STRONG",{});var Wgt=s(w_e);Fsr=r(Wgt,"bart"),Wgt.forEach(t),Tsr=r(sxe," \u2014 "),rz=n(sxe,"A",{href:!0});var Hgt=s(rz);Msr=r(Hgt,"TFBartForConditionalGeneration"),Hgt.forEach(t),Esr=r(sxe," (BART model)"),sxe.forEach(t),Csr=i(le),eT=n(le,"LI",{});var lxe=s(eT);A_e=n(lxe,"STRONG",{});var Ugt=s(A_e);wsr=r(Ugt,"bert"),Ugt.forEach(t),Asr=r(lxe," \u2014 "),tz=n(lxe,"A",{href:!0});var Jgt=s(tz);ysr=r(Jgt,"TFBertForPreTraining"),Jgt.forEach(t),Lsr=r(lxe," (BERT model)"),lxe.forEach(t),xsr=i(le),oT=n(le,"LI",{});var ixe=s(oT);y_e=n(ixe,"STRONG",{});var Ygt=s(y_e);$sr=r(Ygt,"camembert"),Ygt.forEach(t),ksr=r(ixe," \u2014 "),az=n(ixe,"A",{href:!0});var Kgt=s(az);Ssr=r(Kgt,"TFCamembertForMaskedLM"),Kgt.forEach(t),Rsr=r(ixe," (CamemBERT model)"),ixe.forEach(t),Bsr=i(le),rT=n(le,"LI",{});var dxe=s(rT);L_e=n(dxe,"STRONG",{});var Zgt=s(L_e);Psr=r(Zgt,"ctrl"),Zgt.forEach(t),Isr=r(dxe," \u2014 "),nz=n(dxe,"A",{href:!0});var eht=s(nz);qsr=r(eht,"TFCTRLLMHeadModel"),eht.forEach(t),Nsr=r(dxe," (CTRL model)"),dxe.forEach(t),jsr=i(le),tT=n(le,"LI",{});var cxe=s(tT);x_e=n(cxe,"STRONG",{});var oht=s(x_e);Dsr=r(oht,"distilbert"),oht.forEach(t),Gsr=r(cxe," \u2014 "),sz=n(cxe,"A",{href:!0});var rht=s(sz);Osr=r(rht,"TFDistilBertForMaskedLM"),rht.forEach(t),Vsr=r(cxe," (DistilBERT model)"),cxe.forEach(t),Xsr=i(le),aT=n(le,"LI",{});var fxe=s(aT);$_e=n(fxe,"STRONG",{});var tht=s($_e);zsr=r(tht,"electra"),tht.forEach(t),Qsr=r(fxe," \u2014 "),lz=n(fxe,"A",{href:!0});var aht=s(lz);Wsr=r(aht,"TFElectraForPreTraining"),aht.forEach(t),Hsr=r(fxe," (ELECTRA model)"),fxe.forEach(t),Usr=i(le),nT=n(le,"LI",{});var mxe=s(nT);k_e=n(mxe,"STRONG",{});var nht=s(k_e);Jsr=r(nht,"flaubert"),nht.forEach(t),Ysr=r(mxe," \u2014 "),iz=n(mxe,"A",{href:!0});var sht=s(iz);Ksr=r(sht,"TFFlaubertWithLMHeadModel"),sht.forEach(t),Zsr=r(mxe," (FlauBERT model)"),mxe.forEach(t),elr=i(le),sT=n(le,"LI",{});var gxe=s(sT);S_e=n(gxe,"STRONG",{});var lht=s(S_e);olr=r(lht,"funnel"),lht.forEach(t),rlr=r(gxe," \u2014 "),dz=n(gxe,"A",{href:!0});var iht=s(dz);tlr=r(iht,"TFFunnelForPreTraining"),iht.forEach(t),alr=r(gxe," (Funnel Transformer model)"),gxe.forEach(t),nlr=i(le),lT=n(le,"LI",{});var hxe=s(lT);R_e=n(hxe,"STRONG",{});var dht=s(R_e);slr=r(dht,"gpt2"),dht.forEach(t),llr=r(hxe," \u2014 "),cz=n(hxe,"A",{href:!0});var cht=s(cz);ilr=r(cht,"TFGPT2LMHeadModel"),cht.forEach(t),dlr=r(hxe," (OpenAI GPT-2 model)"),hxe.forEach(t),clr=i(le),iT=n(le,"LI",{});var pxe=s(iT);B_e=n(pxe,"STRONG",{});var fht=s(B_e);flr=r(fht,"layoutlm"),fht.forEach(t),mlr=r(pxe," \u2014 "),fz=n(pxe,"A",{href:!0});var mht=s(fz);glr=r(mht,"TFLayoutLMForMaskedLM"),mht.forEach(t),hlr=r(pxe," (LayoutLM model)"),pxe.forEach(t),plr=i(le),dT=n(le,"LI",{});var uxe=s(dT);P_e=n(uxe,"STRONG",{});var ght=s(P_e);ulr=r(ght,"lxmert"),ght.forEach(t),_lr=r(uxe," \u2014 "),mz=n(uxe,"A",{href:!0});var hht=s(mz);blr=r(hht,"TFLxmertForPreTraining"),hht.forEach(t),vlr=r(uxe," (LXMERT model)"),uxe.forEach(t),Flr=i(le),cT=n(le,"LI",{});var _xe=s(cT);I_e=n(_xe,"STRONG",{});var pht=s(I_e);Tlr=r(pht,"mobilebert"),pht.forEach(t),Mlr=r(_xe," \u2014 "),gz=n(_xe,"A",{href:!0});var uht=s(gz);Elr=r(uht,"TFMobileBertForPreTraining"),uht.forEach(t),Clr=r(_xe," (MobileBERT model)"),_xe.forEach(t),wlr=i(le),fT=n(le,"LI",{});var bxe=s(fT);q_e=n(bxe,"STRONG",{});var _ht=s(q_e);Alr=r(_ht,"mpnet"),_ht.forEach(t),ylr=r(bxe," \u2014 "),hz=n(bxe,"A",{href:!0});var bht=s(hz);Llr=r(bht,"TFMPNetForMaskedLM"),bht.forEach(t),xlr=r(bxe," (MPNet model)"),bxe.forEach(t),$lr=i(le),mT=n(le,"LI",{});var vxe=s(mT);N_e=n(vxe,"STRONG",{});var vht=s(N_e);klr=r(vht,"openai-gpt"),vht.forEach(t),Slr=r(vxe," \u2014 "),pz=n(vxe,"A",{href:!0});var Fht=s(pz);Rlr=r(Fht,"TFOpenAIGPTLMHeadModel"),Fht.forEach(t),Blr=r(vxe," (OpenAI GPT model)"),vxe.forEach(t),Plr=i(le),gT=n(le,"LI",{});var Fxe=s(gT);j_e=n(Fxe,"STRONG",{});var Tht=s(j_e);Ilr=r(Tht,"roberta"),Tht.forEach(t),qlr=r(Fxe," \u2014 "),uz=n(Fxe,"A",{href:!0});var Mht=s(uz);Nlr=r(Mht,"TFRobertaForMaskedLM"),Mht.forEach(t),jlr=r(Fxe," (RoBERTa model)"),Fxe.forEach(t),Dlr=i(le),hT=n(le,"LI",{});var Txe=s(hT);D_e=n(Txe,"STRONG",{});var Eht=s(D_e);Glr=r(Eht,"t5"),Eht.forEach(t),Olr=r(Txe," \u2014 "),_z=n(Txe,"A",{href:!0});var Cht=s(_z);Vlr=r(Cht,"TFT5ForConditionalGeneration"),Cht.forEach(t),Xlr=r(Txe," (T5 model)"),Txe.forEach(t),zlr=i(le),pT=n(le,"LI",{});var Mxe=s(pT);G_e=n(Mxe,"STRONG",{});var wht=s(G_e);Qlr=r(wht,"tapas"),wht.forEach(t),Wlr=r(Mxe," \u2014 "),bz=n(Mxe,"A",{href:!0});var Aht=s(bz);Hlr=r(Aht,"TFTapasForMaskedLM"),Aht.forEach(t),Ulr=r(Mxe," (TAPAS model)"),Mxe.forEach(t),Jlr=i(le),uT=n(le,"LI",{});var Exe=s(uT);O_e=n(Exe,"STRONG",{});var yht=s(O_e);Ylr=r(yht,"transfo-xl"),yht.forEach(t),Klr=r(Exe," \u2014 "),vz=n(Exe,"A",{href:!0});var Lht=s(vz);Zlr=r(Lht,"TFTransfoXLLMHeadModel"),Lht.forEach(t),eir=r(Exe," (Transformer-XL model)"),Exe.forEach(t),oir=i(le),_T=n(le,"LI",{});var Cxe=s(_T);V_e=n(Cxe,"STRONG",{});var xht=s(V_e);rir=r(xht,"vit_mae"),xht.forEach(t),tir=r(Cxe," \u2014 "),Fz=n(Cxe,"A",{href:!0});var $ht=s(Fz);air=r($ht,"TFViTMAEForPreTraining"),$ht.forEach(t),nir=r(Cxe," (ViTMAE model)"),Cxe.forEach(t),sir=i(le),bT=n(le,"LI",{});var wxe=s(bT);X_e=n(wxe,"STRONG",{});var kht=s(X_e);lir=r(kht,"xlm"),kht.forEach(t),iir=r(wxe," \u2014 "),Tz=n(wxe,"A",{href:!0});var Sht=s(Tz);dir=r(Sht,"TFXLMWithLMHeadModel"),Sht.forEach(t),cir=r(wxe," (XLM model)"),wxe.forEach(t),fir=i(le),vT=n(le,"LI",{});var Axe=s(vT);z_e=n(Axe,"STRONG",{});var Rht=s(z_e);mir=r(Rht,"xlm-roberta"),Rht.forEach(t),gir=r(Axe," \u2014 "),Mz=n(Axe,"A",{href:!0});var Bht=s(Mz);hir=r(Bht,"TFXLMRobertaForMaskedLM"),Bht.forEach(t),pir=r(Axe," (XLM-RoBERTa model)"),Axe.forEach(t),uir=i(le),FT=n(le,"LI",{});var yxe=s(FT);Q_e=n(yxe,"STRONG",{});var Pht=s(Q_e);_ir=r(Pht,"xlnet"),Pht.forEach(t),bir=r(yxe," \u2014 "),Ez=n(yxe,"A",{href:!0});var Iht=s(Ez);vir=r(Iht,"TFXLNetLMHeadModel"),Iht.forEach(t),Fir=r(yxe," (XLNet model)"),yxe.forEach(t),le.forEach(t),Tir=i(ll),T(TT.$$.fragment,ll),ll.forEach(t),sl.forEach(t),KBe=i(f),qd=n(f,"H2",{class:!0});var oqe=s(qd);MT=n(oqe,"A",{id:!0,class:!0,href:!0});var qht=s(MT);W_e=n(qht,"SPAN",{});var Nht=s(W_e);T(lL.$$.fragment,Nht),Nht.forEach(t),qht.forEach(t),Mir=i(oqe),H_e=n(oqe,"SPAN",{});var jht=s(H_e);Eir=r(jht,"TFAutoModelForCausalLM"),jht.forEach(t),oqe.forEach(t),ZBe=i(f),Yo=n(f,"DIV",{class:!0});var il=s(Yo);T(iL.$$.fragment,il),Cir=i(il),Nd=n(il,"P",{});var KY=s(Nd);wir=r(KY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Cz=n(KY,"A",{href:!0});var Dht=s(Cz);Air=r(Dht,"from_pretrained()"),Dht.forEach(t),yir=r(KY," class method or the "),wz=n(KY,"A",{href:!0});var Ght=s(wz);Lir=r(Ght,"from_config()"),Ght.forEach(t),xir=r(KY,` class
method.`),KY.forEach(t),$ir=i(il),dL=n(il,"P",{});var rqe=s(dL);kir=r(rqe,"This class cannot be instantiated directly using "),U_e=n(rqe,"CODE",{});var Oht=s(U_e);Sir=r(Oht,"__init__()"),Oht.forEach(t),Rir=r(rqe," (throws an error)."),rqe.forEach(t),Bir=i(il),Ct=n(il,"DIV",{class:!0});var Tw=s(Ct);T(cL.$$.fragment,Tw),Pir=i(Tw),J_e=n(Tw,"P",{});var Vht=s(J_e);Iir=r(Vht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vht.forEach(t),qir=i(Tw),jd=n(Tw,"P",{});var ZY=s(jd);Nir=r(ZY,`Note:
Loading a model from its configuration file does `),Y_e=n(ZY,"STRONG",{});var Xht=s(Y_e);jir=r(Xht,"not"),Xht.forEach(t),Dir=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(ZY,"A",{href:!0});var zht=s(Az);Gir=r(zht,"from_pretrained()"),zht.forEach(t),Oir=r(ZY," to load the model weights."),ZY.forEach(t),Vir=i(Tw),T(ET.$$.fragment,Tw),Tw.forEach(t),Xir=i(il),Cr=n(il,"DIV",{class:!0});var dl=s(Cr);T(fL.$$.fragment,dl),zir=i(dl),K_e=n(dl,"P",{});var Qht=s(K_e);Qir=r(Qht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qht.forEach(t),Wir=i(dl),Ja=n(dl,"P",{});var Mw=s(Ja);Hir=r(Mw,"The model class to instantiate is selected based on the "),Z_e=n(Mw,"CODE",{});var Wht=s(Z_e);Uir=r(Wht,"model_type"),Wht.forEach(t),Jir=r(Mw,` property of the config object (either
passed as an argument or loaded from `),e6e=n(Mw,"CODE",{});var Hht=s(e6e);Yir=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),Kir=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=n(Mw,"CODE",{});var Uht=s(o6e);Zir=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),edr=r(Mw,":"),Mw.forEach(t),odr=i(dl),Te=n(dl,"UL",{});var Ce=s(Te);CT=n(Ce,"LI",{});var Lxe=s(CT);r6e=n(Lxe,"STRONG",{});var Jht=s(r6e);rdr=r(Jht,"bert"),Jht.forEach(t),tdr=r(Lxe," \u2014 "),yz=n(Lxe,"A",{href:!0});var Yht=s(yz);adr=r(Yht,"TFBertLMHeadModel"),Yht.forEach(t),ndr=r(Lxe," (BERT model)"),Lxe.forEach(t),sdr=i(Ce),wT=n(Ce,"LI",{});var xxe=s(wT);t6e=n(xxe,"STRONG",{});var Kht=s(t6e);ldr=r(Kht,"camembert"),Kht.forEach(t),idr=r(xxe," \u2014 "),Lz=n(xxe,"A",{href:!0});var Zht=s(Lz);ddr=r(Zht,"TFCamembertForCausalLM"),Zht.forEach(t),cdr=r(xxe," (CamemBERT model)"),xxe.forEach(t),fdr=i(Ce),AT=n(Ce,"LI",{});var $xe=s(AT);a6e=n($xe,"STRONG",{});var ept=s(a6e);mdr=r(ept,"ctrl"),ept.forEach(t),gdr=r($xe," \u2014 "),xz=n($xe,"A",{href:!0});var opt=s(xz);hdr=r(opt,"TFCTRLLMHeadModel"),opt.forEach(t),pdr=r($xe," (CTRL model)"),$xe.forEach(t),udr=i(Ce),yT=n(Ce,"LI",{});var kxe=s(yT);n6e=n(kxe,"STRONG",{});var rpt=s(n6e);_dr=r(rpt,"gpt2"),rpt.forEach(t),bdr=r(kxe," \u2014 "),$z=n(kxe,"A",{href:!0});var tpt=s($z);vdr=r(tpt,"TFGPT2LMHeadModel"),tpt.forEach(t),Fdr=r(kxe," (OpenAI GPT-2 model)"),kxe.forEach(t),Tdr=i(Ce),LT=n(Ce,"LI",{});var Sxe=s(LT);s6e=n(Sxe,"STRONG",{});var apt=s(s6e);Mdr=r(apt,"gptj"),apt.forEach(t),Edr=r(Sxe," \u2014 "),kz=n(Sxe,"A",{href:!0});var npt=s(kz);Cdr=r(npt,"TFGPTJForCausalLM"),npt.forEach(t),wdr=r(Sxe," (GPT-J model)"),Sxe.forEach(t),Adr=i(Ce),xT=n(Ce,"LI",{});var Rxe=s(xT);l6e=n(Rxe,"STRONG",{});var spt=s(l6e);ydr=r(spt,"openai-gpt"),spt.forEach(t),Ldr=r(Rxe," \u2014 "),Sz=n(Rxe,"A",{href:!0});var lpt=s(Sz);xdr=r(lpt,"TFOpenAIGPTLMHeadModel"),lpt.forEach(t),$dr=r(Rxe," (OpenAI GPT model)"),Rxe.forEach(t),kdr=i(Ce),$T=n(Ce,"LI",{});var Bxe=s($T);i6e=n(Bxe,"STRONG",{});var ipt=s(i6e);Sdr=r(ipt,"rembert"),ipt.forEach(t),Rdr=r(Bxe," \u2014 "),Rz=n(Bxe,"A",{href:!0});var dpt=s(Rz);Bdr=r(dpt,"TFRemBertForCausalLM"),dpt.forEach(t),Pdr=r(Bxe," (RemBERT model)"),Bxe.forEach(t),Idr=i(Ce),kT=n(Ce,"LI",{});var Pxe=s(kT);d6e=n(Pxe,"STRONG",{});var cpt=s(d6e);qdr=r(cpt,"roberta"),cpt.forEach(t),Ndr=r(Pxe," \u2014 "),Bz=n(Pxe,"A",{href:!0});var fpt=s(Bz);jdr=r(fpt,"TFRobertaForCausalLM"),fpt.forEach(t),Ddr=r(Pxe," (RoBERTa model)"),Pxe.forEach(t),Gdr=i(Ce),ST=n(Ce,"LI",{});var Ixe=s(ST);c6e=n(Ixe,"STRONG",{});var mpt=s(c6e);Odr=r(mpt,"roformer"),mpt.forEach(t),Vdr=r(Ixe," \u2014 "),Pz=n(Ixe,"A",{href:!0});var gpt=s(Pz);Xdr=r(gpt,"TFRoFormerForCausalLM"),gpt.forEach(t),zdr=r(Ixe," (RoFormer model)"),Ixe.forEach(t),Qdr=i(Ce),RT=n(Ce,"LI",{});var qxe=s(RT);f6e=n(qxe,"STRONG",{});var hpt=s(f6e);Wdr=r(hpt,"transfo-xl"),hpt.forEach(t),Hdr=r(qxe," \u2014 "),Iz=n(qxe,"A",{href:!0});var ppt=s(Iz);Udr=r(ppt,"TFTransfoXLLMHeadModel"),ppt.forEach(t),Jdr=r(qxe," (Transformer-XL model)"),qxe.forEach(t),Ydr=i(Ce),BT=n(Ce,"LI",{});var Nxe=s(BT);m6e=n(Nxe,"STRONG",{});var upt=s(m6e);Kdr=r(upt,"xlm"),upt.forEach(t),Zdr=r(Nxe," \u2014 "),qz=n(Nxe,"A",{href:!0});var _pt=s(qz);ecr=r(_pt,"TFXLMWithLMHeadModel"),_pt.forEach(t),ocr=r(Nxe," (XLM model)"),Nxe.forEach(t),rcr=i(Ce),PT=n(Ce,"LI",{});var jxe=s(PT);g6e=n(jxe,"STRONG",{});var bpt=s(g6e);tcr=r(bpt,"xlnet"),bpt.forEach(t),acr=r(jxe," \u2014 "),Nz=n(jxe,"A",{href:!0});var vpt=s(Nz);ncr=r(vpt,"TFXLNetLMHeadModel"),vpt.forEach(t),scr=r(jxe," (XLNet model)"),jxe.forEach(t),Ce.forEach(t),lcr=i(dl),T(IT.$$.fragment,dl),dl.forEach(t),il.forEach(t),ePe=i(f),Dd=n(f,"H2",{class:!0});var tqe=s(Dd);qT=n(tqe,"A",{id:!0,class:!0,href:!0});var Fpt=s(qT);h6e=n(Fpt,"SPAN",{});var Tpt=s(h6e);T(mL.$$.fragment,Tpt),Tpt.forEach(t),Fpt.forEach(t),icr=i(tqe),p6e=n(tqe,"SPAN",{});var Mpt=s(p6e);dcr=r(Mpt,"TFAutoModelForImageClassification"),Mpt.forEach(t),tqe.forEach(t),oPe=i(f),Ko=n(f,"DIV",{class:!0});var cl=s(Ko);T(gL.$$.fragment,cl),ccr=i(cl),Gd=n(cl,"P",{});var eK=s(Gd);fcr=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jz=n(eK,"A",{href:!0});var Ept=s(jz);mcr=r(Ept,"from_pretrained()"),Ept.forEach(t),gcr=r(eK," class method or the "),Dz=n(eK,"A",{href:!0});var Cpt=s(Dz);hcr=r(Cpt,"from_config()"),Cpt.forEach(t),pcr=r(eK,` class
method.`),eK.forEach(t),ucr=i(cl),hL=n(cl,"P",{});var aqe=s(hL);_cr=r(aqe,"This class cannot be instantiated directly using "),u6e=n(aqe,"CODE",{});var wpt=s(u6e);bcr=r(wpt,"__init__()"),wpt.forEach(t),vcr=r(aqe," (throws an error)."),aqe.forEach(t),Fcr=i(cl),wt=n(cl,"DIV",{class:!0});var Ew=s(wt);T(pL.$$.fragment,Ew),Tcr=i(Ew),_6e=n(Ew,"P",{});var Apt=s(_6e);Mcr=r(Apt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Apt.forEach(t),Ecr=i(Ew),Od=n(Ew,"P",{});var oK=s(Od);Ccr=r(oK,`Note:
Loading a model from its configuration file does `),b6e=n(oK,"STRONG",{});var ypt=s(b6e);wcr=r(ypt,"not"),ypt.forEach(t),Acr=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(oK,"A",{href:!0});var Lpt=s(Gz);ycr=r(Lpt,"from_pretrained()"),Lpt.forEach(t),Lcr=r(oK," to load the model weights."),oK.forEach(t),xcr=i(Ew),T(NT.$$.fragment,Ew),Ew.forEach(t),$cr=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(uL.$$.fragment,fl),kcr=i(fl),v6e=n(fl,"P",{});var xpt=s(v6e);Scr=r(xpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xpt.forEach(t),Rcr=i(fl),Ya=n(fl,"P",{});var Cw=s(Ya);Bcr=r(Cw,"The model class to instantiate is selected based on the "),F6e=n(Cw,"CODE",{});var $pt=s(F6e);Pcr=r($pt,"model_type"),$pt.forEach(t),Icr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),T6e=n(Cw,"CODE",{});var kpt=s(T6e);qcr=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),Ncr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=n(Cw,"CODE",{});var Spt=s(M6e);jcr=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),Dcr=r(Cw,":"),Cw.forEach(t),Gcr=i(fl),_L=n(fl,"UL",{});var nqe=s(_L);jT=n(nqe,"LI",{});var Dxe=s(jT);E6e=n(Dxe,"STRONG",{});var Rpt=s(E6e);Ocr=r(Rpt,"convnext"),Rpt.forEach(t),Vcr=r(Dxe," \u2014 "),Oz=n(Dxe,"A",{href:!0});var Bpt=s(Oz);Xcr=r(Bpt,"TFConvNextForImageClassification"),Bpt.forEach(t),zcr=r(Dxe," (ConvNext model)"),Dxe.forEach(t),Qcr=i(nqe),DT=n(nqe,"LI",{});var Gxe=s(DT);C6e=n(Gxe,"STRONG",{});var Ppt=s(C6e);Wcr=r(Ppt,"vit"),Ppt.forEach(t),Hcr=r(Gxe," \u2014 "),Vz=n(Gxe,"A",{href:!0});var Ipt=s(Vz);Ucr=r(Ipt,"TFViTForImageClassification"),Ipt.forEach(t),Jcr=r(Gxe," (ViT model)"),Gxe.forEach(t),nqe.forEach(t),Ycr=i(fl),T(GT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),rPe=i(f),Vd=n(f,"H2",{class:!0});var sqe=s(Vd);OT=n(sqe,"A",{id:!0,class:!0,href:!0});var qpt=s(OT);w6e=n(qpt,"SPAN",{});var Npt=s(w6e);T(bL.$$.fragment,Npt),Npt.forEach(t),qpt.forEach(t),Kcr=i(sqe),A6e=n(sqe,"SPAN",{});var jpt=s(A6e);Zcr=r(jpt,"TFAutoModelForMaskedLM"),jpt.forEach(t),sqe.forEach(t),tPe=i(f),Zo=n(f,"DIV",{class:!0});var ml=s(Zo);T(vL.$$.fragment,ml),efr=i(ml),Xd=n(ml,"P",{});var rK=s(Xd);ofr=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Xz=n(rK,"A",{href:!0});var Dpt=s(Xz);rfr=r(Dpt,"from_pretrained()"),Dpt.forEach(t),tfr=r(rK," class method or the "),zz=n(rK,"A",{href:!0});var Gpt=s(zz);afr=r(Gpt,"from_config()"),Gpt.forEach(t),nfr=r(rK,` class
method.`),rK.forEach(t),sfr=i(ml),FL=n(ml,"P",{});var lqe=s(FL);lfr=r(lqe,"This class cannot be instantiated directly using "),y6e=n(lqe,"CODE",{});var Opt=s(y6e);ifr=r(Opt,"__init__()"),Opt.forEach(t),dfr=r(lqe," (throws an error)."),lqe.forEach(t),cfr=i(ml),At=n(ml,"DIV",{class:!0});var ww=s(At);T(TL.$$.fragment,ww),ffr=i(ww),L6e=n(ww,"P",{});var Vpt=s(L6e);mfr=r(Vpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vpt.forEach(t),gfr=i(ww),zd=n(ww,"P",{});var tK=s(zd);hfr=r(tK,`Note:
Loading a model from its configuration file does `),x6e=n(tK,"STRONG",{});var Xpt=s(x6e);pfr=r(Xpt,"not"),Xpt.forEach(t),ufr=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(tK,"A",{href:!0});var zpt=s(Qz);_fr=r(zpt,"from_pretrained()"),zpt.forEach(t),bfr=r(tK," to load the model weights."),tK.forEach(t),vfr=i(ww),T(VT.$$.fragment,ww),ww.forEach(t),Ffr=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(ML.$$.fragment,gl),Tfr=i(gl),$6e=n(gl,"P",{});var Qpt=s($6e);Mfr=r(Qpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qpt.forEach(t),Efr=i(gl),Ka=n(gl,"P",{});var Aw=s(Ka);Cfr=r(Aw,"The model class to instantiate is selected based on the "),k6e=n(Aw,"CODE",{});var Wpt=s(k6e);wfr=r(Wpt,"model_type"),Wpt.forEach(t),Afr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),S6e=n(Aw,"CODE",{});var Hpt=s(S6e);yfr=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),Lfr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=n(Aw,"CODE",{});var Upt=s(R6e);xfr=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),$fr=r(Aw,":"),Aw.forEach(t),kfr=i(gl),ie=n(gl,"UL",{});var fe=s(ie);XT=n(fe,"LI",{});var Oxe=s(XT);B6e=n(Oxe,"STRONG",{});var Jpt=s(B6e);Sfr=r(Jpt,"albert"),Jpt.forEach(t),Rfr=r(Oxe," \u2014 "),Wz=n(Oxe,"A",{href:!0});var Ypt=s(Wz);Bfr=r(Ypt,"TFAlbertForMaskedLM"),Ypt.forEach(t),Pfr=r(Oxe," (ALBERT model)"),Oxe.forEach(t),Ifr=i(fe),zT=n(fe,"LI",{});var Vxe=s(zT);P6e=n(Vxe,"STRONG",{});var Kpt=s(P6e);qfr=r(Kpt,"bert"),Kpt.forEach(t),Nfr=r(Vxe," \u2014 "),Hz=n(Vxe,"A",{href:!0});var Zpt=s(Hz);jfr=r(Zpt,"TFBertForMaskedLM"),Zpt.forEach(t),Dfr=r(Vxe," (BERT model)"),Vxe.forEach(t),Gfr=i(fe),QT=n(fe,"LI",{});var Xxe=s(QT);I6e=n(Xxe,"STRONG",{});var eut=s(I6e);Ofr=r(eut,"camembert"),eut.forEach(t),Vfr=r(Xxe," \u2014 "),Uz=n(Xxe,"A",{href:!0});var out=s(Uz);Xfr=r(out,"TFCamembertForMaskedLM"),out.forEach(t),zfr=r(Xxe," (CamemBERT model)"),Xxe.forEach(t),Qfr=i(fe),WT=n(fe,"LI",{});var zxe=s(WT);q6e=n(zxe,"STRONG",{});var rut=s(q6e);Wfr=r(rut,"convbert"),rut.forEach(t),Hfr=r(zxe," \u2014 "),Jz=n(zxe,"A",{href:!0});var tut=s(Jz);Ufr=r(tut,"TFConvBertForMaskedLM"),tut.forEach(t),Jfr=r(zxe," (ConvBERT model)"),zxe.forEach(t),Yfr=i(fe),HT=n(fe,"LI",{});var Qxe=s(HT);N6e=n(Qxe,"STRONG",{});var aut=s(N6e);Kfr=r(aut,"deberta"),aut.forEach(t),Zfr=r(Qxe," \u2014 "),Yz=n(Qxe,"A",{href:!0});var nut=s(Yz);emr=r(nut,"TFDebertaForMaskedLM"),nut.forEach(t),omr=r(Qxe," (DeBERTa model)"),Qxe.forEach(t),rmr=i(fe),UT=n(fe,"LI",{});var Wxe=s(UT);j6e=n(Wxe,"STRONG",{});var sut=s(j6e);tmr=r(sut,"deberta-v2"),sut.forEach(t),amr=r(Wxe," \u2014 "),Kz=n(Wxe,"A",{href:!0});var lut=s(Kz);nmr=r(lut,"TFDebertaV2ForMaskedLM"),lut.forEach(t),smr=r(Wxe," (DeBERTa-v2 model)"),Wxe.forEach(t),lmr=i(fe),JT=n(fe,"LI",{});var Hxe=s(JT);D6e=n(Hxe,"STRONG",{});var iut=s(D6e);imr=r(iut,"distilbert"),iut.forEach(t),dmr=r(Hxe," \u2014 "),Zz=n(Hxe,"A",{href:!0});var dut=s(Zz);cmr=r(dut,"TFDistilBertForMaskedLM"),dut.forEach(t),fmr=r(Hxe," (DistilBERT model)"),Hxe.forEach(t),mmr=i(fe),YT=n(fe,"LI",{});var Uxe=s(YT);G6e=n(Uxe,"STRONG",{});var cut=s(G6e);gmr=r(cut,"electra"),cut.forEach(t),hmr=r(Uxe," \u2014 "),eQ=n(Uxe,"A",{href:!0});var fut=s(eQ);pmr=r(fut,"TFElectraForMaskedLM"),fut.forEach(t),umr=r(Uxe," (ELECTRA model)"),Uxe.forEach(t),_mr=i(fe),KT=n(fe,"LI",{});var Jxe=s(KT);O6e=n(Jxe,"STRONG",{});var mut=s(O6e);bmr=r(mut,"flaubert"),mut.forEach(t),vmr=r(Jxe," \u2014 "),oQ=n(Jxe,"A",{href:!0});var gut=s(oQ);Fmr=r(gut,"TFFlaubertWithLMHeadModel"),gut.forEach(t),Tmr=r(Jxe," (FlauBERT model)"),Jxe.forEach(t),Mmr=i(fe),ZT=n(fe,"LI",{});var Yxe=s(ZT);V6e=n(Yxe,"STRONG",{});var hut=s(V6e);Emr=r(hut,"funnel"),hut.forEach(t),Cmr=r(Yxe," \u2014 "),rQ=n(Yxe,"A",{href:!0});var put=s(rQ);wmr=r(put,"TFFunnelForMaskedLM"),put.forEach(t),Amr=r(Yxe," (Funnel Transformer model)"),Yxe.forEach(t),ymr=i(fe),e9=n(fe,"LI",{});var Kxe=s(e9);X6e=n(Kxe,"STRONG",{});var uut=s(X6e);Lmr=r(uut,"layoutlm"),uut.forEach(t),xmr=r(Kxe," \u2014 "),tQ=n(Kxe,"A",{href:!0});var _ut=s(tQ);$mr=r(_ut,"TFLayoutLMForMaskedLM"),_ut.forEach(t),kmr=r(Kxe," (LayoutLM model)"),Kxe.forEach(t),Smr=i(fe),o9=n(fe,"LI",{});var Zxe=s(o9);z6e=n(Zxe,"STRONG",{});var but=s(z6e);Rmr=r(but,"longformer"),but.forEach(t),Bmr=r(Zxe," \u2014 "),aQ=n(Zxe,"A",{href:!0});var vut=s(aQ);Pmr=r(vut,"TFLongformerForMaskedLM"),vut.forEach(t),Imr=r(Zxe," (Longformer model)"),Zxe.forEach(t),qmr=i(fe),r9=n(fe,"LI",{});var e$e=s(r9);Q6e=n(e$e,"STRONG",{});var Fut=s(Q6e);Nmr=r(Fut,"mobilebert"),Fut.forEach(t),jmr=r(e$e," \u2014 "),nQ=n(e$e,"A",{href:!0});var Tut=s(nQ);Dmr=r(Tut,"TFMobileBertForMaskedLM"),Tut.forEach(t),Gmr=r(e$e," (MobileBERT model)"),e$e.forEach(t),Omr=i(fe),t9=n(fe,"LI",{});var o$e=s(t9);W6e=n(o$e,"STRONG",{});var Mut=s(W6e);Vmr=r(Mut,"mpnet"),Mut.forEach(t),Xmr=r(o$e," \u2014 "),sQ=n(o$e,"A",{href:!0});var Eut=s(sQ);zmr=r(Eut,"TFMPNetForMaskedLM"),Eut.forEach(t),Qmr=r(o$e," (MPNet model)"),o$e.forEach(t),Wmr=i(fe),a9=n(fe,"LI",{});var r$e=s(a9);H6e=n(r$e,"STRONG",{});var Cut=s(H6e);Hmr=r(Cut,"rembert"),Cut.forEach(t),Umr=r(r$e," \u2014 "),lQ=n(r$e,"A",{href:!0});var wut=s(lQ);Jmr=r(wut,"TFRemBertForMaskedLM"),wut.forEach(t),Ymr=r(r$e," (RemBERT model)"),r$e.forEach(t),Kmr=i(fe),n9=n(fe,"LI",{});var t$e=s(n9);U6e=n(t$e,"STRONG",{});var Aut=s(U6e);Zmr=r(Aut,"roberta"),Aut.forEach(t),egr=r(t$e," \u2014 "),iQ=n(t$e,"A",{href:!0});var yut=s(iQ);ogr=r(yut,"TFRobertaForMaskedLM"),yut.forEach(t),rgr=r(t$e," (RoBERTa model)"),t$e.forEach(t),tgr=i(fe),s9=n(fe,"LI",{});var a$e=s(s9);J6e=n(a$e,"STRONG",{});var Lut=s(J6e);agr=r(Lut,"roformer"),Lut.forEach(t),ngr=r(a$e," \u2014 "),dQ=n(a$e,"A",{href:!0});var xut=s(dQ);sgr=r(xut,"TFRoFormerForMaskedLM"),xut.forEach(t),lgr=r(a$e," (RoFormer model)"),a$e.forEach(t),igr=i(fe),l9=n(fe,"LI",{});var n$e=s(l9);Y6e=n(n$e,"STRONG",{});var $ut=s(Y6e);dgr=r($ut,"tapas"),$ut.forEach(t),cgr=r(n$e," \u2014 "),cQ=n(n$e,"A",{href:!0});var kut=s(cQ);fgr=r(kut,"TFTapasForMaskedLM"),kut.forEach(t),mgr=r(n$e," (TAPAS model)"),n$e.forEach(t),ggr=i(fe),i9=n(fe,"LI",{});var s$e=s(i9);K6e=n(s$e,"STRONG",{});var Sut=s(K6e);hgr=r(Sut,"xlm"),Sut.forEach(t),pgr=r(s$e," \u2014 "),fQ=n(s$e,"A",{href:!0});var Rut=s(fQ);ugr=r(Rut,"TFXLMWithLMHeadModel"),Rut.forEach(t),_gr=r(s$e," (XLM model)"),s$e.forEach(t),bgr=i(fe),d9=n(fe,"LI",{});var l$e=s(d9);Z6e=n(l$e,"STRONG",{});var But=s(Z6e);vgr=r(But,"xlm-roberta"),But.forEach(t),Fgr=r(l$e," \u2014 "),mQ=n(l$e,"A",{href:!0});var Put=s(mQ);Tgr=r(Put,"TFXLMRobertaForMaskedLM"),Put.forEach(t),Mgr=r(l$e," (XLM-RoBERTa model)"),l$e.forEach(t),fe.forEach(t),Egr=i(gl),T(c9.$$.fragment,gl),gl.forEach(t),ml.forEach(t),aPe=i(f),Qd=n(f,"H2",{class:!0});var iqe=s(Qd);f9=n(iqe,"A",{id:!0,class:!0,href:!0});var Iut=s(f9);e1e=n(Iut,"SPAN",{});var qut=s(e1e);T(EL.$$.fragment,qut),qut.forEach(t),Iut.forEach(t),Cgr=i(iqe),o1e=n(iqe,"SPAN",{});var Nut=s(o1e);wgr=r(Nut,"TFAutoModelForSeq2SeqLM"),Nut.forEach(t),iqe.forEach(t),nPe=i(f),er=n(f,"DIV",{class:!0});var hl=s(er);T(CL.$$.fragment,hl),Agr=i(hl),Wd=n(hl,"P",{});var aK=s(Wd);ygr=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gQ=n(aK,"A",{href:!0});var jut=s(gQ);Lgr=r(jut,"from_pretrained()"),jut.forEach(t),xgr=r(aK," class method or the "),hQ=n(aK,"A",{href:!0});var Dut=s(hQ);$gr=r(Dut,"from_config()"),Dut.forEach(t),kgr=r(aK,` class
method.`),aK.forEach(t),Sgr=i(hl),wL=n(hl,"P",{});var dqe=s(wL);Rgr=r(dqe,"This class cannot be instantiated directly using "),r1e=n(dqe,"CODE",{});var Gut=s(r1e);Bgr=r(Gut,"__init__()"),Gut.forEach(t),Pgr=r(dqe," (throws an error)."),dqe.forEach(t),Igr=i(hl),yt=n(hl,"DIV",{class:!0});var yw=s(yt);T(AL.$$.fragment,yw),qgr=i(yw),t1e=n(yw,"P",{});var Out=s(t1e);Ngr=r(Out,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Out.forEach(t),jgr=i(yw),Hd=n(yw,"P",{});var nK=s(Hd);Dgr=r(nK,`Note:
Loading a model from its configuration file does `),a1e=n(nK,"STRONG",{});var Vut=s(a1e);Ggr=r(Vut,"not"),Vut.forEach(t),Ogr=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(nK,"A",{href:!0});var Xut=s(pQ);Vgr=r(Xut,"from_pretrained()"),Xut.forEach(t),Xgr=r(nK," to load the model weights."),nK.forEach(t),zgr=i(yw),T(m9.$$.fragment,yw),yw.forEach(t),Qgr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(yL.$$.fragment,pl),Wgr=i(pl),n1e=n(pl,"P",{});var zut=s(n1e);Hgr=r(zut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zut.forEach(t),Ugr=i(pl),Za=n(pl,"P",{});var Lw=s(Za);Jgr=r(Lw,"The model class to instantiate is selected based on the "),s1e=n(Lw,"CODE",{});var Qut=s(s1e);Ygr=r(Qut,"model_type"),Qut.forEach(t),Kgr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),l1e=n(Lw,"CODE",{});var Wut=s(l1e);Zgr=r(Wut,"pretrained_model_name_or_path"),Wut.forEach(t),ehr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n(Lw,"CODE",{});var Hut=s(i1e);ohr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),rhr=r(Lw,":"),Lw.forEach(t),thr=i(pl),ye=n(pl,"UL",{});var Se=s(ye);g9=n(Se,"LI",{});var i$e=s(g9);d1e=n(i$e,"STRONG",{});var Uut=s(d1e);ahr=r(Uut,"bart"),Uut.forEach(t),nhr=r(i$e," \u2014 "),uQ=n(i$e,"A",{href:!0});var Jut=s(uQ);shr=r(Jut,"TFBartForConditionalGeneration"),Jut.forEach(t),lhr=r(i$e," (BART model)"),i$e.forEach(t),ihr=i(Se),h9=n(Se,"LI",{});var d$e=s(h9);c1e=n(d$e,"STRONG",{});var Yut=s(c1e);dhr=r(Yut,"blenderbot"),Yut.forEach(t),chr=r(d$e," \u2014 "),_Q=n(d$e,"A",{href:!0});var Kut=s(_Q);fhr=r(Kut,"TFBlenderbotForConditionalGeneration"),Kut.forEach(t),mhr=r(d$e," (Blenderbot model)"),d$e.forEach(t),ghr=i(Se),p9=n(Se,"LI",{});var c$e=s(p9);f1e=n(c$e,"STRONG",{});var Zut=s(f1e);hhr=r(Zut,"blenderbot-small"),Zut.forEach(t),phr=r(c$e," \u2014 "),bQ=n(c$e,"A",{href:!0});var e_t=s(bQ);uhr=r(e_t,"TFBlenderbotSmallForConditionalGeneration"),e_t.forEach(t),_hr=r(c$e," (BlenderbotSmall model)"),c$e.forEach(t),bhr=i(Se),u9=n(Se,"LI",{});var f$e=s(u9);m1e=n(f$e,"STRONG",{});var o_t=s(m1e);vhr=r(o_t,"encoder-decoder"),o_t.forEach(t),Fhr=r(f$e," \u2014 "),vQ=n(f$e,"A",{href:!0});var r_t=s(vQ);Thr=r(r_t,"TFEncoderDecoderModel"),r_t.forEach(t),Mhr=r(f$e," (Encoder decoder model)"),f$e.forEach(t),Ehr=i(Se),_9=n(Se,"LI",{});var m$e=s(_9);g1e=n(m$e,"STRONG",{});var t_t=s(g1e);Chr=r(t_t,"led"),t_t.forEach(t),whr=r(m$e," \u2014 "),FQ=n(m$e,"A",{href:!0});var a_t=s(FQ);Ahr=r(a_t,"TFLEDForConditionalGeneration"),a_t.forEach(t),yhr=r(m$e," (LED model)"),m$e.forEach(t),Lhr=i(Se),b9=n(Se,"LI",{});var g$e=s(b9);h1e=n(g$e,"STRONG",{});var n_t=s(h1e);xhr=r(n_t,"marian"),n_t.forEach(t),$hr=r(g$e," \u2014 "),TQ=n(g$e,"A",{href:!0});var s_t=s(TQ);khr=r(s_t,"TFMarianMTModel"),s_t.forEach(t),Shr=r(g$e," (Marian model)"),g$e.forEach(t),Rhr=i(Se),v9=n(Se,"LI",{});var h$e=s(v9);p1e=n(h$e,"STRONG",{});var l_t=s(p1e);Bhr=r(l_t,"mbart"),l_t.forEach(t),Phr=r(h$e," \u2014 "),MQ=n(h$e,"A",{href:!0});var i_t=s(MQ);Ihr=r(i_t,"TFMBartForConditionalGeneration"),i_t.forEach(t),qhr=r(h$e," (mBART model)"),h$e.forEach(t),Nhr=i(Se),F9=n(Se,"LI",{});var p$e=s(F9);u1e=n(p$e,"STRONG",{});var d_t=s(u1e);jhr=r(d_t,"mt5"),d_t.forEach(t),Dhr=r(p$e," \u2014 "),EQ=n(p$e,"A",{href:!0});var c_t=s(EQ);Ghr=r(c_t,"TFMT5ForConditionalGeneration"),c_t.forEach(t),Ohr=r(p$e," (mT5 model)"),p$e.forEach(t),Vhr=i(Se),T9=n(Se,"LI",{});var u$e=s(T9);_1e=n(u$e,"STRONG",{});var f_t=s(_1e);Xhr=r(f_t,"pegasus"),f_t.forEach(t),zhr=r(u$e," \u2014 "),CQ=n(u$e,"A",{href:!0});var m_t=s(CQ);Qhr=r(m_t,"TFPegasusForConditionalGeneration"),m_t.forEach(t),Whr=r(u$e," (Pegasus model)"),u$e.forEach(t),Hhr=i(Se),M9=n(Se,"LI",{});var _$e=s(M9);b1e=n(_$e,"STRONG",{});var g_t=s(b1e);Uhr=r(g_t,"t5"),g_t.forEach(t),Jhr=r(_$e," \u2014 "),wQ=n(_$e,"A",{href:!0});var h_t=s(wQ);Yhr=r(h_t,"TFT5ForConditionalGeneration"),h_t.forEach(t),Khr=r(_$e," (T5 model)"),_$e.forEach(t),Se.forEach(t),Zhr=i(pl),T(E9.$$.fragment,pl),pl.forEach(t),hl.forEach(t),sPe=i(f),Ud=n(f,"H2",{class:!0});var cqe=s(Ud);C9=n(cqe,"A",{id:!0,class:!0,href:!0});var p_t=s(C9);v1e=n(p_t,"SPAN",{});var u_t=s(v1e);T(LL.$$.fragment,u_t),u_t.forEach(t),p_t.forEach(t),epr=i(cqe),F1e=n(cqe,"SPAN",{});var __t=s(F1e);opr=r(__t,"TFAutoModelForSequenceClassification"),__t.forEach(t),cqe.forEach(t),lPe=i(f),or=n(f,"DIV",{class:!0});var ul=s(or);T(xL.$$.fragment,ul),rpr=i(ul),Jd=n(ul,"P",{});var sK=s(Jd);tpr=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AQ=n(sK,"A",{href:!0});var b_t=s(AQ);apr=r(b_t,"from_pretrained()"),b_t.forEach(t),npr=r(sK," class method or the "),yQ=n(sK,"A",{href:!0});var v_t=s(yQ);spr=r(v_t,"from_config()"),v_t.forEach(t),lpr=r(sK,` class
method.`),sK.forEach(t),ipr=i(ul),$L=n(ul,"P",{});var fqe=s($L);dpr=r(fqe,"This class cannot be instantiated directly using "),T1e=n(fqe,"CODE",{});var F_t=s(T1e);cpr=r(F_t,"__init__()"),F_t.forEach(t),fpr=r(fqe," (throws an error)."),fqe.forEach(t),mpr=i(ul),Lt=n(ul,"DIV",{class:!0});var xw=s(Lt);T(kL.$$.fragment,xw),gpr=i(xw),M1e=n(xw,"P",{});var T_t=s(M1e);hpr=r(T_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),T_t.forEach(t),ppr=i(xw),Yd=n(xw,"P",{});var lK=s(Yd);upr=r(lK,`Note:
Loading a model from its configuration file does `),E1e=n(lK,"STRONG",{});var M_t=s(E1e);_pr=r(M_t,"not"),M_t.forEach(t),bpr=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=n(lK,"A",{href:!0});var E_t=s(LQ);vpr=r(E_t,"from_pretrained()"),E_t.forEach(t),Fpr=r(lK," to load the model weights."),lK.forEach(t),Tpr=i(xw),T(w9.$$.fragment,xw),xw.forEach(t),Mpr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(SL.$$.fragment,_l),Epr=i(_l),C1e=n(_l,"P",{});var C_t=s(C1e);Cpr=r(C_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C_t.forEach(t),wpr=i(_l),en=n(_l,"P",{});var $w=s(en);Apr=r($w,"The model class to instantiate is selected based on the "),w1e=n($w,"CODE",{});var w_t=s(w1e);ypr=r(w_t,"model_type"),w_t.forEach(t),Lpr=r($w,` property of the config object (either
passed as an argument or loaded from `),A1e=n($w,"CODE",{});var A_t=s(A1e);xpr=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),$pr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=n($w,"CODE",{});var y_t=s(y1e);kpr=r(y_t,"pretrained_model_name_or_path"),y_t.forEach(t),Spr=r($w,":"),$w.forEach(t),Rpr=i(_l),Z=n(_l,"UL",{});var re=s(Z);A9=n(re,"LI",{});var b$e=s(A9);L1e=n(b$e,"STRONG",{});var L_t=s(L1e);Bpr=r(L_t,"albert"),L_t.forEach(t),Ppr=r(b$e," \u2014 "),xQ=n(b$e,"A",{href:!0});var x_t=s(xQ);Ipr=r(x_t,"TFAlbertForSequenceClassification"),x_t.forEach(t),qpr=r(b$e," (ALBERT model)"),b$e.forEach(t),Npr=i(re),y9=n(re,"LI",{});var v$e=s(y9);x1e=n(v$e,"STRONG",{});var $_t=s(x1e);jpr=r($_t,"bert"),$_t.forEach(t),Dpr=r(v$e," \u2014 "),$Q=n(v$e,"A",{href:!0});var k_t=s($Q);Gpr=r(k_t,"TFBertForSequenceClassification"),k_t.forEach(t),Opr=r(v$e," (BERT model)"),v$e.forEach(t),Vpr=i(re),L9=n(re,"LI",{});var F$e=s(L9);$1e=n(F$e,"STRONG",{});var S_t=s($1e);Xpr=r(S_t,"camembert"),S_t.forEach(t),zpr=r(F$e," \u2014 "),kQ=n(F$e,"A",{href:!0});var R_t=s(kQ);Qpr=r(R_t,"TFCamembertForSequenceClassification"),R_t.forEach(t),Wpr=r(F$e," (CamemBERT model)"),F$e.forEach(t),Hpr=i(re),x9=n(re,"LI",{});var T$e=s(x9);k1e=n(T$e,"STRONG",{});var B_t=s(k1e);Upr=r(B_t,"convbert"),B_t.forEach(t),Jpr=r(T$e," \u2014 "),SQ=n(T$e,"A",{href:!0});var P_t=s(SQ);Ypr=r(P_t,"TFConvBertForSequenceClassification"),P_t.forEach(t),Kpr=r(T$e," (ConvBERT model)"),T$e.forEach(t),Zpr=i(re),$9=n(re,"LI",{});var M$e=s($9);S1e=n(M$e,"STRONG",{});var I_t=s(S1e);eur=r(I_t,"ctrl"),I_t.forEach(t),our=r(M$e," \u2014 "),RQ=n(M$e,"A",{href:!0});var q_t=s(RQ);rur=r(q_t,"TFCTRLForSequenceClassification"),q_t.forEach(t),tur=r(M$e," (CTRL model)"),M$e.forEach(t),aur=i(re),k9=n(re,"LI",{});var E$e=s(k9);R1e=n(E$e,"STRONG",{});var N_t=s(R1e);nur=r(N_t,"deberta"),N_t.forEach(t),sur=r(E$e," \u2014 "),BQ=n(E$e,"A",{href:!0});var j_t=s(BQ);lur=r(j_t,"TFDebertaForSequenceClassification"),j_t.forEach(t),iur=r(E$e," (DeBERTa model)"),E$e.forEach(t),dur=i(re),S9=n(re,"LI",{});var C$e=s(S9);B1e=n(C$e,"STRONG",{});var D_t=s(B1e);cur=r(D_t,"deberta-v2"),D_t.forEach(t),fur=r(C$e," \u2014 "),PQ=n(C$e,"A",{href:!0});var G_t=s(PQ);mur=r(G_t,"TFDebertaV2ForSequenceClassification"),G_t.forEach(t),gur=r(C$e," (DeBERTa-v2 model)"),C$e.forEach(t),hur=i(re),R9=n(re,"LI",{});var w$e=s(R9);P1e=n(w$e,"STRONG",{});var O_t=s(P1e);pur=r(O_t,"distilbert"),O_t.forEach(t),uur=r(w$e," \u2014 "),IQ=n(w$e,"A",{href:!0});var V_t=s(IQ);_ur=r(V_t,"TFDistilBertForSequenceClassification"),V_t.forEach(t),bur=r(w$e," (DistilBERT model)"),w$e.forEach(t),vur=i(re),B9=n(re,"LI",{});var A$e=s(B9);I1e=n(A$e,"STRONG",{});var X_t=s(I1e);Fur=r(X_t,"electra"),X_t.forEach(t),Tur=r(A$e," \u2014 "),qQ=n(A$e,"A",{href:!0});var z_t=s(qQ);Mur=r(z_t,"TFElectraForSequenceClassification"),z_t.forEach(t),Eur=r(A$e," (ELECTRA model)"),A$e.forEach(t),Cur=i(re),P9=n(re,"LI",{});var y$e=s(P9);q1e=n(y$e,"STRONG",{});var Q_t=s(q1e);wur=r(Q_t,"flaubert"),Q_t.forEach(t),Aur=r(y$e," \u2014 "),NQ=n(y$e,"A",{href:!0});var W_t=s(NQ);yur=r(W_t,"TFFlaubertForSequenceClassification"),W_t.forEach(t),Lur=r(y$e," (FlauBERT model)"),y$e.forEach(t),xur=i(re),I9=n(re,"LI",{});var L$e=s(I9);N1e=n(L$e,"STRONG",{});var H_t=s(N1e);$ur=r(H_t,"funnel"),H_t.forEach(t),kur=r(L$e," \u2014 "),jQ=n(L$e,"A",{href:!0});var U_t=s(jQ);Sur=r(U_t,"TFFunnelForSequenceClassification"),U_t.forEach(t),Rur=r(L$e," (Funnel Transformer model)"),L$e.forEach(t),Bur=i(re),q9=n(re,"LI",{});var x$e=s(q9);j1e=n(x$e,"STRONG",{});var J_t=s(j1e);Pur=r(J_t,"gpt2"),J_t.forEach(t),Iur=r(x$e," \u2014 "),DQ=n(x$e,"A",{href:!0});var Y_t=s(DQ);qur=r(Y_t,"TFGPT2ForSequenceClassification"),Y_t.forEach(t),Nur=r(x$e," (OpenAI GPT-2 model)"),x$e.forEach(t),jur=i(re),N9=n(re,"LI",{});var $$e=s(N9);D1e=n($$e,"STRONG",{});var K_t=s(D1e);Dur=r(K_t,"gptj"),K_t.forEach(t),Gur=r($$e," \u2014 "),GQ=n($$e,"A",{href:!0});var Z_t=s(GQ);Our=r(Z_t,"TFGPTJForSequenceClassification"),Z_t.forEach(t),Vur=r($$e," (GPT-J model)"),$$e.forEach(t),Xur=i(re),j9=n(re,"LI",{});var k$e=s(j9);G1e=n(k$e,"STRONG",{});var e6t=s(G1e);zur=r(e6t,"layoutlm"),e6t.forEach(t),Qur=r(k$e," \u2014 "),OQ=n(k$e,"A",{href:!0});var o6t=s(OQ);Wur=r(o6t,"TFLayoutLMForSequenceClassification"),o6t.forEach(t),Hur=r(k$e," (LayoutLM model)"),k$e.forEach(t),Uur=i(re),D9=n(re,"LI",{});var S$e=s(D9);O1e=n(S$e,"STRONG",{});var r6t=s(O1e);Jur=r(r6t,"longformer"),r6t.forEach(t),Yur=r(S$e," \u2014 "),VQ=n(S$e,"A",{href:!0});var t6t=s(VQ);Kur=r(t6t,"TFLongformerForSequenceClassification"),t6t.forEach(t),Zur=r(S$e," (Longformer model)"),S$e.forEach(t),e_r=i(re),G9=n(re,"LI",{});var R$e=s(G9);V1e=n(R$e,"STRONG",{});var a6t=s(V1e);o_r=r(a6t,"mobilebert"),a6t.forEach(t),r_r=r(R$e," \u2014 "),XQ=n(R$e,"A",{href:!0});var n6t=s(XQ);t_r=r(n6t,"TFMobileBertForSequenceClassification"),n6t.forEach(t),a_r=r(R$e," (MobileBERT model)"),R$e.forEach(t),n_r=i(re),O9=n(re,"LI",{});var B$e=s(O9);X1e=n(B$e,"STRONG",{});var s6t=s(X1e);s_r=r(s6t,"mpnet"),s6t.forEach(t),l_r=r(B$e," \u2014 "),zQ=n(B$e,"A",{href:!0});var l6t=s(zQ);i_r=r(l6t,"TFMPNetForSequenceClassification"),l6t.forEach(t),d_r=r(B$e," (MPNet model)"),B$e.forEach(t),c_r=i(re),V9=n(re,"LI",{});var P$e=s(V9);z1e=n(P$e,"STRONG",{});var i6t=s(z1e);f_r=r(i6t,"openai-gpt"),i6t.forEach(t),m_r=r(P$e," \u2014 "),QQ=n(P$e,"A",{href:!0});var d6t=s(QQ);g_r=r(d6t,"TFOpenAIGPTForSequenceClassification"),d6t.forEach(t),h_r=r(P$e," (OpenAI GPT model)"),P$e.forEach(t),p_r=i(re),X9=n(re,"LI",{});var I$e=s(X9);Q1e=n(I$e,"STRONG",{});var c6t=s(Q1e);u_r=r(c6t,"rembert"),c6t.forEach(t),__r=r(I$e," \u2014 "),WQ=n(I$e,"A",{href:!0});var f6t=s(WQ);b_r=r(f6t,"TFRemBertForSequenceClassification"),f6t.forEach(t),v_r=r(I$e," (RemBERT model)"),I$e.forEach(t),F_r=i(re),z9=n(re,"LI",{});var q$e=s(z9);W1e=n(q$e,"STRONG",{});var m6t=s(W1e);T_r=r(m6t,"roberta"),m6t.forEach(t),M_r=r(q$e," \u2014 "),HQ=n(q$e,"A",{href:!0});var g6t=s(HQ);E_r=r(g6t,"TFRobertaForSequenceClassification"),g6t.forEach(t),C_r=r(q$e," (RoBERTa model)"),q$e.forEach(t),w_r=i(re),Q9=n(re,"LI",{});var N$e=s(Q9);H1e=n(N$e,"STRONG",{});var h6t=s(H1e);A_r=r(h6t,"roformer"),h6t.forEach(t),y_r=r(N$e," \u2014 "),UQ=n(N$e,"A",{href:!0});var p6t=s(UQ);L_r=r(p6t,"TFRoFormerForSequenceClassification"),p6t.forEach(t),x_r=r(N$e," (RoFormer model)"),N$e.forEach(t),$_r=i(re),W9=n(re,"LI",{});var j$e=s(W9);U1e=n(j$e,"STRONG",{});var u6t=s(U1e);k_r=r(u6t,"tapas"),u6t.forEach(t),S_r=r(j$e," \u2014 "),JQ=n(j$e,"A",{href:!0});var _6t=s(JQ);R_r=r(_6t,"TFTapasForSequenceClassification"),_6t.forEach(t),B_r=r(j$e," (TAPAS model)"),j$e.forEach(t),P_r=i(re),H9=n(re,"LI",{});var D$e=s(H9);J1e=n(D$e,"STRONG",{});var b6t=s(J1e);I_r=r(b6t,"transfo-xl"),b6t.forEach(t),q_r=r(D$e," \u2014 "),YQ=n(D$e,"A",{href:!0});var v6t=s(YQ);N_r=r(v6t,"TFTransfoXLForSequenceClassification"),v6t.forEach(t),j_r=r(D$e," (Transformer-XL model)"),D$e.forEach(t),D_r=i(re),U9=n(re,"LI",{});var G$e=s(U9);Y1e=n(G$e,"STRONG",{});var F6t=s(Y1e);G_r=r(F6t,"xlm"),F6t.forEach(t),O_r=r(G$e," \u2014 "),KQ=n(G$e,"A",{href:!0});var T6t=s(KQ);V_r=r(T6t,"TFXLMForSequenceClassification"),T6t.forEach(t),X_r=r(G$e," (XLM model)"),G$e.forEach(t),z_r=i(re),J9=n(re,"LI",{});var O$e=s(J9);K1e=n(O$e,"STRONG",{});var M6t=s(K1e);Q_r=r(M6t,"xlm-roberta"),M6t.forEach(t),W_r=r(O$e," \u2014 "),ZQ=n(O$e,"A",{href:!0});var E6t=s(ZQ);H_r=r(E6t,"TFXLMRobertaForSequenceClassification"),E6t.forEach(t),U_r=r(O$e," (XLM-RoBERTa model)"),O$e.forEach(t),J_r=i(re),Y9=n(re,"LI",{});var V$e=s(Y9);Z1e=n(V$e,"STRONG",{});var C6t=s(Z1e);Y_r=r(C6t,"xlnet"),C6t.forEach(t),K_r=r(V$e," \u2014 "),eW=n(V$e,"A",{href:!0});var w6t=s(eW);Z_r=r(w6t,"TFXLNetForSequenceClassification"),w6t.forEach(t),e6r=r(V$e," (XLNet model)"),V$e.forEach(t),re.forEach(t),o6r=i(_l),T(K9.$$.fragment,_l),_l.forEach(t),ul.forEach(t),iPe=i(f),Kd=n(f,"H2",{class:!0});var mqe=s(Kd);Z9=n(mqe,"A",{id:!0,class:!0,href:!0});var A6t=s(Z9);ebe=n(A6t,"SPAN",{});var y6t=s(ebe);T(RL.$$.fragment,y6t),y6t.forEach(t),A6t.forEach(t),r6r=i(mqe),obe=n(mqe,"SPAN",{});var L6t=s(obe);t6r=r(L6t,"TFAutoModelForMultipleChoice"),L6t.forEach(t),mqe.forEach(t),dPe=i(f),rr=n(f,"DIV",{class:!0});var bl=s(rr);T(BL.$$.fragment,bl),a6r=i(bl),Zd=n(bl,"P",{});var iK=s(Zd);n6r=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oW=n(iK,"A",{href:!0});var x6t=s(oW);s6r=r(x6t,"from_pretrained()"),x6t.forEach(t),l6r=r(iK," class method or the "),rW=n(iK,"A",{href:!0});var $6t=s(rW);i6r=r($6t,"from_config()"),$6t.forEach(t),d6r=r(iK,` class
method.`),iK.forEach(t),c6r=i(bl),PL=n(bl,"P",{});var gqe=s(PL);f6r=r(gqe,"This class cannot be instantiated directly using "),rbe=n(gqe,"CODE",{});var k6t=s(rbe);m6r=r(k6t,"__init__()"),k6t.forEach(t),g6r=r(gqe," (throws an error)."),gqe.forEach(t),h6r=i(bl),xt=n(bl,"DIV",{class:!0});var kw=s(xt);T(IL.$$.fragment,kw),p6r=i(kw),tbe=n(kw,"P",{});var S6t=s(tbe);u6r=r(S6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S6t.forEach(t),_6r=i(kw),ec=n(kw,"P",{});var dK=s(ec);b6r=r(dK,`Note:
Loading a model from its configuration file does `),abe=n(dK,"STRONG",{});var R6t=s(abe);v6r=r(R6t,"not"),R6t.forEach(t),F6r=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(dK,"A",{href:!0});var B6t=s(tW);T6r=r(B6t,"from_pretrained()"),B6t.forEach(t),M6r=r(dK," to load the model weights."),dK.forEach(t),E6r=i(kw),T(eM.$$.fragment,kw),kw.forEach(t),C6r=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(qL.$$.fragment,vl),w6r=i(vl),nbe=n(vl,"P",{});var P6t=s(nbe);A6r=r(P6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),P6t.forEach(t),y6r=i(vl),on=n(vl,"P",{});var Sw=s(on);L6r=r(Sw,"The model class to instantiate is selected based on the "),sbe=n(Sw,"CODE",{});var I6t=s(sbe);x6r=r(I6t,"model_type"),I6t.forEach(t),$6r=r(Sw,` property of the config object (either
passed as an argument or loaded from `),lbe=n(Sw,"CODE",{});var q6t=s(lbe);k6r=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),S6r=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=n(Sw,"CODE",{});var N6t=s(ibe);R6r=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),B6r=r(Sw,":"),Sw.forEach(t),P6r=i(vl),pe=n(vl,"UL",{});var _e=s(pe);oM=n(_e,"LI",{});var X$e=s(oM);dbe=n(X$e,"STRONG",{});var j6t=s(dbe);I6r=r(j6t,"albert"),j6t.forEach(t),q6r=r(X$e," \u2014 "),aW=n(X$e,"A",{href:!0});var D6t=s(aW);N6r=r(D6t,"TFAlbertForMultipleChoice"),D6t.forEach(t),j6r=r(X$e," (ALBERT model)"),X$e.forEach(t),D6r=i(_e),rM=n(_e,"LI",{});var z$e=s(rM);cbe=n(z$e,"STRONG",{});var G6t=s(cbe);G6r=r(G6t,"bert"),G6t.forEach(t),O6r=r(z$e," \u2014 "),nW=n(z$e,"A",{href:!0});var O6t=s(nW);V6r=r(O6t,"TFBertForMultipleChoice"),O6t.forEach(t),X6r=r(z$e," (BERT model)"),z$e.forEach(t),z6r=i(_e),tM=n(_e,"LI",{});var Q$e=s(tM);fbe=n(Q$e,"STRONG",{});var V6t=s(fbe);Q6r=r(V6t,"camembert"),V6t.forEach(t),W6r=r(Q$e," \u2014 "),sW=n(Q$e,"A",{href:!0});var X6t=s(sW);H6r=r(X6t,"TFCamembertForMultipleChoice"),X6t.forEach(t),U6r=r(Q$e," (CamemBERT model)"),Q$e.forEach(t),J6r=i(_e),aM=n(_e,"LI",{});var W$e=s(aM);mbe=n(W$e,"STRONG",{});var z6t=s(mbe);Y6r=r(z6t,"convbert"),z6t.forEach(t),K6r=r(W$e," \u2014 "),lW=n(W$e,"A",{href:!0});var Q6t=s(lW);Z6r=r(Q6t,"TFConvBertForMultipleChoice"),Q6t.forEach(t),e1r=r(W$e," (ConvBERT model)"),W$e.forEach(t),o1r=i(_e),nM=n(_e,"LI",{});var H$e=s(nM);gbe=n(H$e,"STRONG",{});var W6t=s(gbe);r1r=r(W6t,"distilbert"),W6t.forEach(t),t1r=r(H$e," \u2014 "),iW=n(H$e,"A",{href:!0});var H6t=s(iW);a1r=r(H6t,"TFDistilBertForMultipleChoice"),H6t.forEach(t),n1r=r(H$e," (DistilBERT model)"),H$e.forEach(t),s1r=i(_e),sM=n(_e,"LI",{});var U$e=s(sM);hbe=n(U$e,"STRONG",{});var U6t=s(hbe);l1r=r(U6t,"electra"),U6t.forEach(t),i1r=r(U$e," \u2014 "),dW=n(U$e,"A",{href:!0});var J6t=s(dW);d1r=r(J6t,"TFElectraForMultipleChoice"),J6t.forEach(t),c1r=r(U$e," (ELECTRA model)"),U$e.forEach(t),f1r=i(_e),lM=n(_e,"LI",{});var J$e=s(lM);pbe=n(J$e,"STRONG",{});var Y6t=s(pbe);m1r=r(Y6t,"flaubert"),Y6t.forEach(t),g1r=r(J$e," \u2014 "),cW=n(J$e,"A",{href:!0});var K6t=s(cW);h1r=r(K6t,"TFFlaubertForMultipleChoice"),K6t.forEach(t),p1r=r(J$e," (FlauBERT model)"),J$e.forEach(t),u1r=i(_e),iM=n(_e,"LI",{});var Y$e=s(iM);ube=n(Y$e,"STRONG",{});var Z6t=s(ube);_1r=r(Z6t,"funnel"),Z6t.forEach(t),b1r=r(Y$e," \u2014 "),fW=n(Y$e,"A",{href:!0});var e1t=s(fW);v1r=r(e1t,"TFFunnelForMultipleChoice"),e1t.forEach(t),F1r=r(Y$e," (Funnel Transformer model)"),Y$e.forEach(t),T1r=i(_e),dM=n(_e,"LI",{});var K$e=s(dM);_be=n(K$e,"STRONG",{});var o1t=s(_be);M1r=r(o1t,"longformer"),o1t.forEach(t),E1r=r(K$e," \u2014 "),mW=n(K$e,"A",{href:!0});var r1t=s(mW);C1r=r(r1t,"TFLongformerForMultipleChoice"),r1t.forEach(t),w1r=r(K$e," (Longformer model)"),K$e.forEach(t),A1r=i(_e),cM=n(_e,"LI",{});var Z$e=s(cM);bbe=n(Z$e,"STRONG",{});var t1t=s(bbe);y1r=r(t1t,"mobilebert"),t1t.forEach(t),L1r=r(Z$e," \u2014 "),gW=n(Z$e,"A",{href:!0});var a1t=s(gW);x1r=r(a1t,"TFMobileBertForMultipleChoice"),a1t.forEach(t),$1r=r(Z$e," (MobileBERT model)"),Z$e.forEach(t),k1r=i(_e),fM=n(_e,"LI",{});var eke=s(fM);vbe=n(eke,"STRONG",{});var n1t=s(vbe);S1r=r(n1t,"mpnet"),n1t.forEach(t),R1r=r(eke," \u2014 "),hW=n(eke,"A",{href:!0});var s1t=s(hW);B1r=r(s1t,"TFMPNetForMultipleChoice"),s1t.forEach(t),P1r=r(eke," (MPNet model)"),eke.forEach(t),I1r=i(_e),mM=n(_e,"LI",{});var oke=s(mM);Fbe=n(oke,"STRONG",{});var l1t=s(Fbe);q1r=r(l1t,"rembert"),l1t.forEach(t),N1r=r(oke," \u2014 "),pW=n(oke,"A",{href:!0});var i1t=s(pW);j1r=r(i1t,"TFRemBertForMultipleChoice"),i1t.forEach(t),D1r=r(oke," (RemBERT model)"),oke.forEach(t),G1r=i(_e),gM=n(_e,"LI",{});var rke=s(gM);Tbe=n(rke,"STRONG",{});var d1t=s(Tbe);O1r=r(d1t,"roberta"),d1t.forEach(t),V1r=r(rke," \u2014 "),uW=n(rke,"A",{href:!0});var c1t=s(uW);X1r=r(c1t,"TFRobertaForMultipleChoice"),c1t.forEach(t),z1r=r(rke," (RoBERTa model)"),rke.forEach(t),Q1r=i(_e),hM=n(_e,"LI",{});var tke=s(hM);Mbe=n(tke,"STRONG",{});var f1t=s(Mbe);W1r=r(f1t,"roformer"),f1t.forEach(t),H1r=r(tke," \u2014 "),_W=n(tke,"A",{href:!0});var m1t=s(_W);U1r=r(m1t,"TFRoFormerForMultipleChoice"),m1t.forEach(t),J1r=r(tke," (RoFormer model)"),tke.forEach(t),Y1r=i(_e),pM=n(_e,"LI",{});var ake=s(pM);Ebe=n(ake,"STRONG",{});var g1t=s(Ebe);K1r=r(g1t,"xlm"),g1t.forEach(t),Z1r=r(ake," \u2014 "),bW=n(ake,"A",{href:!0});var h1t=s(bW);ebr=r(h1t,"TFXLMForMultipleChoice"),h1t.forEach(t),obr=r(ake," (XLM model)"),ake.forEach(t),rbr=i(_e),uM=n(_e,"LI",{});var nke=s(uM);Cbe=n(nke,"STRONG",{});var p1t=s(Cbe);tbr=r(p1t,"xlm-roberta"),p1t.forEach(t),abr=r(nke," \u2014 "),vW=n(nke,"A",{href:!0});var u1t=s(vW);nbr=r(u1t,"TFXLMRobertaForMultipleChoice"),u1t.forEach(t),sbr=r(nke," (XLM-RoBERTa model)"),nke.forEach(t),lbr=i(_e),_M=n(_e,"LI",{});var ske=s(_M);wbe=n(ske,"STRONG",{});var _1t=s(wbe);ibr=r(_1t,"xlnet"),_1t.forEach(t),dbr=r(ske," \u2014 "),FW=n(ske,"A",{href:!0});var b1t=s(FW);cbr=r(b1t,"TFXLNetForMultipleChoice"),b1t.forEach(t),fbr=r(ske," (XLNet model)"),ske.forEach(t),_e.forEach(t),mbr=i(vl),T(bM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),cPe=i(f),oc=n(f,"H2",{class:!0});var hqe=s(oc);vM=n(hqe,"A",{id:!0,class:!0,href:!0});var v1t=s(vM);Abe=n(v1t,"SPAN",{});var F1t=s(Abe);T(NL.$$.fragment,F1t),F1t.forEach(t),v1t.forEach(t),gbr=i(hqe),ybe=n(hqe,"SPAN",{});var T1t=s(ybe);hbr=r(T1t,"TFAutoModelForTableQuestionAnswering"),T1t.forEach(t),hqe.forEach(t),fPe=i(f),tr=n(f,"DIV",{class:!0});var Fl=s(tr);T(jL.$$.fragment,Fl),pbr=i(Fl),rc=n(Fl,"P",{});var cK=s(rc);ubr=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TW=n(cK,"A",{href:!0});var M1t=s(TW);_br=r(M1t,"from_pretrained()"),M1t.forEach(t),bbr=r(cK," class method or the "),MW=n(cK,"A",{href:!0});var E1t=s(MW);vbr=r(E1t,"from_config()"),E1t.forEach(t),Fbr=r(cK,` class
method.`),cK.forEach(t),Tbr=i(Fl),DL=n(Fl,"P",{});var pqe=s(DL);Mbr=r(pqe,"This class cannot be instantiated directly using "),Lbe=n(pqe,"CODE",{});var C1t=s(Lbe);Ebr=r(C1t,"__init__()"),C1t.forEach(t),Cbr=r(pqe," (throws an error)."),pqe.forEach(t),wbr=i(Fl),$t=n(Fl,"DIV",{class:!0});var Rw=s($t);T(GL.$$.fragment,Rw),Abr=i(Rw),xbe=n(Rw,"P",{});var w1t=s(xbe);ybr=r(w1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),w1t.forEach(t),Lbr=i(Rw),tc=n(Rw,"P",{});var fK=s(tc);xbr=r(fK,`Note:
Loading a model from its configuration file does `),$be=n(fK,"STRONG",{});var A1t=s($be);$br=r(A1t,"not"),A1t.forEach(t),kbr=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(fK,"A",{href:!0});var y1t=s(EW);Sbr=r(y1t,"from_pretrained()"),y1t.forEach(t),Rbr=r(fK," to load the model weights."),fK.forEach(t),Bbr=i(Rw),T(FM.$$.fragment,Rw),Rw.forEach(t),Pbr=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(OL.$$.fragment,Tl),Ibr=i(Tl),kbe=n(Tl,"P",{});var L1t=s(kbe);qbr=r(L1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),L1t.forEach(t),Nbr=i(Tl),rn=n(Tl,"P",{});var Bw=s(rn);jbr=r(Bw,"The model class to instantiate is selected based on the "),Sbe=n(Bw,"CODE",{});var x1t=s(Sbe);Dbr=r(x1t,"model_type"),x1t.forEach(t),Gbr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Rbe=n(Bw,"CODE",{});var $1t=s(Rbe);Obr=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),Vbr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(Bw,"CODE",{});var k1t=s(Bbe);Xbr=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),zbr=r(Bw,":"),Bw.forEach(t),Qbr=i(Tl),Pbe=n(Tl,"UL",{});var S1t=s(Pbe);TM=n(S1t,"LI",{});var lke=s(TM);Ibe=n(lke,"STRONG",{});var R1t=s(Ibe);Wbr=r(R1t,"tapas"),R1t.forEach(t),Hbr=r(lke," \u2014 "),CW=n(lke,"A",{href:!0});var B1t=s(CW);Ubr=r(B1t,"TFTapasForQuestionAnswering"),B1t.forEach(t),Jbr=r(lke," (TAPAS model)"),lke.forEach(t),S1t.forEach(t),Ybr=i(Tl),T(MM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),mPe=i(f),ac=n(f,"H2",{class:!0});var uqe=s(ac);EM=n(uqe,"A",{id:!0,class:!0,href:!0});var P1t=s(EM);qbe=n(P1t,"SPAN",{});var I1t=s(qbe);T(VL.$$.fragment,I1t),I1t.forEach(t),P1t.forEach(t),Kbr=i(uqe),Nbe=n(uqe,"SPAN",{});var q1t=s(Nbe);Zbr=r(q1t,"TFAutoModelForTokenClassification"),q1t.forEach(t),uqe.forEach(t),gPe=i(f),ar=n(f,"DIV",{class:!0});var Ml=s(ar);T(XL.$$.fragment,Ml),e2r=i(Ml),nc=n(Ml,"P",{});var mK=s(nc);o2r=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wW=n(mK,"A",{href:!0});var N1t=s(wW);r2r=r(N1t,"from_pretrained()"),N1t.forEach(t),t2r=r(mK," class method or the "),AW=n(mK,"A",{href:!0});var j1t=s(AW);a2r=r(j1t,"from_config()"),j1t.forEach(t),n2r=r(mK,` class
method.`),mK.forEach(t),s2r=i(Ml),zL=n(Ml,"P",{});var _qe=s(zL);l2r=r(_qe,"This class cannot be instantiated directly using "),jbe=n(_qe,"CODE",{});var D1t=s(jbe);i2r=r(D1t,"__init__()"),D1t.forEach(t),d2r=r(_qe," (throws an error)."),_qe.forEach(t),c2r=i(Ml),kt=n(Ml,"DIV",{class:!0});var Pw=s(kt);T(QL.$$.fragment,Pw),f2r=i(Pw),Dbe=n(Pw,"P",{});var G1t=s(Dbe);m2r=r(G1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),G1t.forEach(t),g2r=i(Pw),sc=n(Pw,"P",{});var gK=s(sc);h2r=r(gK,`Note:
Loading a model from its configuration file does `),Gbe=n(gK,"STRONG",{});var O1t=s(Gbe);p2r=r(O1t,"not"),O1t.forEach(t),u2r=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(gK,"A",{href:!0});var V1t=s(yW);_2r=r(V1t,"from_pretrained()"),V1t.forEach(t),b2r=r(gK," to load the model weights."),gK.forEach(t),v2r=i(Pw),T(CM.$$.fragment,Pw),Pw.forEach(t),F2r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(WL.$$.fragment,El),T2r=i(El),Obe=n(El,"P",{});var X1t=s(Obe);M2r=r(X1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),X1t.forEach(t),E2r=i(El),tn=n(El,"P",{});var Iw=s(tn);C2r=r(Iw,"The model class to instantiate is selected based on the "),Vbe=n(Iw,"CODE",{});var z1t=s(Vbe);w2r=r(z1t,"model_type"),z1t.forEach(t),A2r=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(Iw,"CODE",{});var Q1t=s(Xbe);y2r=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),L2r=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(Iw,"CODE",{});var W1t=s(zbe);x2r=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),$2r=r(Iw,":"),Iw.forEach(t),k2r=i(El),de=n(El,"UL",{});var me=s(de);wM=n(me,"LI",{});var ike=s(wM);Qbe=n(ike,"STRONG",{});var H1t=s(Qbe);S2r=r(H1t,"albert"),H1t.forEach(t),R2r=r(ike," \u2014 "),LW=n(ike,"A",{href:!0});var U1t=s(LW);B2r=r(U1t,"TFAlbertForTokenClassification"),U1t.forEach(t),P2r=r(ike," (ALBERT model)"),ike.forEach(t),I2r=i(me),AM=n(me,"LI",{});var dke=s(AM);Wbe=n(dke,"STRONG",{});var J1t=s(Wbe);q2r=r(J1t,"bert"),J1t.forEach(t),N2r=r(dke," \u2014 "),xW=n(dke,"A",{href:!0});var Y1t=s(xW);j2r=r(Y1t,"TFBertForTokenClassification"),Y1t.forEach(t),D2r=r(dke," (BERT model)"),dke.forEach(t),G2r=i(me),yM=n(me,"LI",{});var cke=s(yM);Hbe=n(cke,"STRONG",{});var K1t=s(Hbe);O2r=r(K1t,"camembert"),K1t.forEach(t),V2r=r(cke," \u2014 "),$W=n(cke,"A",{href:!0});var Z1t=s($W);X2r=r(Z1t,"TFCamembertForTokenClassification"),Z1t.forEach(t),z2r=r(cke," (CamemBERT model)"),cke.forEach(t),Q2r=i(me),LM=n(me,"LI",{});var fke=s(LM);Ube=n(fke,"STRONG",{});var ebt=s(Ube);W2r=r(ebt,"convbert"),ebt.forEach(t),H2r=r(fke," \u2014 "),kW=n(fke,"A",{href:!0});var obt=s(kW);U2r=r(obt,"TFConvBertForTokenClassification"),obt.forEach(t),J2r=r(fke," (ConvBERT model)"),fke.forEach(t),Y2r=i(me),xM=n(me,"LI",{});var mke=s(xM);Jbe=n(mke,"STRONG",{});var rbt=s(Jbe);K2r=r(rbt,"deberta"),rbt.forEach(t),Z2r=r(mke," \u2014 "),SW=n(mke,"A",{href:!0});var tbt=s(SW);e5r=r(tbt,"TFDebertaForTokenClassification"),tbt.forEach(t),o5r=r(mke," (DeBERTa model)"),mke.forEach(t),r5r=i(me),$M=n(me,"LI",{});var gke=s($M);Ybe=n(gke,"STRONG",{});var abt=s(Ybe);t5r=r(abt,"deberta-v2"),abt.forEach(t),a5r=r(gke," \u2014 "),RW=n(gke,"A",{href:!0});var nbt=s(RW);n5r=r(nbt,"TFDebertaV2ForTokenClassification"),nbt.forEach(t),s5r=r(gke," (DeBERTa-v2 model)"),gke.forEach(t),l5r=i(me),kM=n(me,"LI",{});var hke=s(kM);Kbe=n(hke,"STRONG",{});var sbt=s(Kbe);i5r=r(sbt,"distilbert"),sbt.forEach(t),d5r=r(hke," \u2014 "),BW=n(hke,"A",{href:!0});var lbt=s(BW);c5r=r(lbt,"TFDistilBertForTokenClassification"),lbt.forEach(t),f5r=r(hke," (DistilBERT model)"),hke.forEach(t),m5r=i(me),SM=n(me,"LI",{});var pke=s(SM);Zbe=n(pke,"STRONG",{});var ibt=s(Zbe);g5r=r(ibt,"electra"),ibt.forEach(t),h5r=r(pke," \u2014 "),PW=n(pke,"A",{href:!0});var dbt=s(PW);p5r=r(dbt,"TFElectraForTokenClassification"),dbt.forEach(t),u5r=r(pke," (ELECTRA model)"),pke.forEach(t),_5r=i(me),RM=n(me,"LI",{});var uke=s(RM);e2e=n(uke,"STRONG",{});var cbt=s(e2e);b5r=r(cbt,"flaubert"),cbt.forEach(t),v5r=r(uke," \u2014 "),IW=n(uke,"A",{href:!0});var fbt=s(IW);F5r=r(fbt,"TFFlaubertForTokenClassification"),fbt.forEach(t),T5r=r(uke," (FlauBERT model)"),uke.forEach(t),M5r=i(me),BM=n(me,"LI",{});var _ke=s(BM);o2e=n(_ke,"STRONG",{});var mbt=s(o2e);E5r=r(mbt,"funnel"),mbt.forEach(t),C5r=r(_ke," \u2014 "),qW=n(_ke,"A",{href:!0});var gbt=s(qW);w5r=r(gbt,"TFFunnelForTokenClassification"),gbt.forEach(t),A5r=r(_ke," (Funnel Transformer model)"),_ke.forEach(t),y5r=i(me),PM=n(me,"LI",{});var bke=s(PM);r2e=n(bke,"STRONG",{});var hbt=s(r2e);L5r=r(hbt,"layoutlm"),hbt.forEach(t),x5r=r(bke," \u2014 "),NW=n(bke,"A",{href:!0});var pbt=s(NW);$5r=r(pbt,"TFLayoutLMForTokenClassification"),pbt.forEach(t),k5r=r(bke," (LayoutLM model)"),bke.forEach(t),S5r=i(me),IM=n(me,"LI",{});var vke=s(IM);t2e=n(vke,"STRONG",{});var ubt=s(t2e);R5r=r(ubt,"longformer"),ubt.forEach(t),B5r=r(vke," \u2014 "),jW=n(vke,"A",{href:!0});var _bt=s(jW);P5r=r(_bt,"TFLongformerForTokenClassification"),_bt.forEach(t),I5r=r(vke," (Longformer model)"),vke.forEach(t),q5r=i(me),qM=n(me,"LI",{});var Fke=s(qM);a2e=n(Fke,"STRONG",{});var bbt=s(a2e);N5r=r(bbt,"mobilebert"),bbt.forEach(t),j5r=r(Fke," \u2014 "),DW=n(Fke,"A",{href:!0});var vbt=s(DW);D5r=r(vbt,"TFMobileBertForTokenClassification"),vbt.forEach(t),G5r=r(Fke," (MobileBERT model)"),Fke.forEach(t),O5r=i(me),NM=n(me,"LI",{});var Tke=s(NM);n2e=n(Tke,"STRONG",{});var Fbt=s(n2e);V5r=r(Fbt,"mpnet"),Fbt.forEach(t),X5r=r(Tke," \u2014 "),GW=n(Tke,"A",{href:!0});var Tbt=s(GW);z5r=r(Tbt,"TFMPNetForTokenClassification"),Tbt.forEach(t),Q5r=r(Tke," (MPNet model)"),Tke.forEach(t),W5r=i(me),jM=n(me,"LI",{});var Mke=s(jM);s2e=n(Mke,"STRONG",{});var Mbt=s(s2e);H5r=r(Mbt,"rembert"),Mbt.forEach(t),U5r=r(Mke," \u2014 "),OW=n(Mke,"A",{href:!0});var Ebt=s(OW);J5r=r(Ebt,"TFRemBertForTokenClassification"),Ebt.forEach(t),Y5r=r(Mke," (RemBERT model)"),Mke.forEach(t),K5r=i(me),DM=n(me,"LI",{});var Eke=s(DM);l2e=n(Eke,"STRONG",{});var Cbt=s(l2e);Z5r=r(Cbt,"roberta"),Cbt.forEach(t),evr=r(Eke," \u2014 "),VW=n(Eke,"A",{href:!0});var wbt=s(VW);ovr=r(wbt,"TFRobertaForTokenClassification"),wbt.forEach(t),rvr=r(Eke," (RoBERTa model)"),Eke.forEach(t),tvr=i(me),GM=n(me,"LI",{});var Cke=s(GM);i2e=n(Cke,"STRONG",{});var Abt=s(i2e);avr=r(Abt,"roformer"),Abt.forEach(t),nvr=r(Cke," \u2014 "),XW=n(Cke,"A",{href:!0});var ybt=s(XW);svr=r(ybt,"TFRoFormerForTokenClassification"),ybt.forEach(t),lvr=r(Cke," (RoFormer model)"),Cke.forEach(t),ivr=i(me),OM=n(me,"LI",{});var wke=s(OM);d2e=n(wke,"STRONG",{});var Lbt=s(d2e);dvr=r(Lbt,"xlm"),Lbt.forEach(t),cvr=r(wke," \u2014 "),zW=n(wke,"A",{href:!0});var xbt=s(zW);fvr=r(xbt,"TFXLMForTokenClassification"),xbt.forEach(t),mvr=r(wke," (XLM model)"),wke.forEach(t),gvr=i(me),VM=n(me,"LI",{});var Ake=s(VM);c2e=n(Ake,"STRONG",{});var $bt=s(c2e);hvr=r($bt,"xlm-roberta"),$bt.forEach(t),pvr=r(Ake," \u2014 "),QW=n(Ake,"A",{href:!0});var kbt=s(QW);uvr=r(kbt,"TFXLMRobertaForTokenClassification"),kbt.forEach(t),_vr=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),bvr=i(me),XM=n(me,"LI",{});var yke=s(XM);f2e=n(yke,"STRONG",{});var Sbt=s(f2e);vvr=r(Sbt,"xlnet"),Sbt.forEach(t),Fvr=r(yke," \u2014 "),WW=n(yke,"A",{href:!0});var Rbt=s(WW);Tvr=r(Rbt,"TFXLNetForTokenClassification"),Rbt.forEach(t),Mvr=r(yke," (XLNet model)"),yke.forEach(t),me.forEach(t),Evr=i(El),T(zM.$$.fragment,El),El.forEach(t),Ml.forEach(t),hPe=i(f),lc=n(f,"H2",{class:!0});var bqe=s(lc);QM=n(bqe,"A",{id:!0,class:!0,href:!0});var Bbt=s(QM);m2e=n(Bbt,"SPAN",{});var Pbt=s(m2e);T(HL.$$.fragment,Pbt),Pbt.forEach(t),Bbt.forEach(t),Cvr=i(bqe),g2e=n(bqe,"SPAN",{});var Ibt=s(g2e);wvr=r(Ibt,"TFAutoModelForQuestionAnswering"),Ibt.forEach(t),bqe.forEach(t),pPe=i(f),nr=n(f,"DIV",{class:!0});var Cl=s(nr);T(UL.$$.fragment,Cl),Avr=i(Cl),ic=n(Cl,"P",{});var hK=s(ic);yvr=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HW=n(hK,"A",{href:!0});var qbt=s(HW);Lvr=r(qbt,"from_pretrained()"),qbt.forEach(t),xvr=r(hK," class method or the "),UW=n(hK,"A",{href:!0});var Nbt=s(UW);$vr=r(Nbt,"from_config()"),Nbt.forEach(t),kvr=r(hK,` class
method.`),hK.forEach(t),Svr=i(Cl),JL=n(Cl,"P",{});var vqe=s(JL);Rvr=r(vqe,"This class cannot be instantiated directly using "),h2e=n(vqe,"CODE",{});var jbt=s(h2e);Bvr=r(jbt,"__init__()"),jbt.forEach(t),Pvr=r(vqe," (throws an error)."),vqe.forEach(t),Ivr=i(Cl),St=n(Cl,"DIV",{class:!0});var qw=s(St);T(YL.$$.fragment,qw),qvr=i(qw),p2e=n(qw,"P",{});var Dbt=s(p2e);Nvr=r(Dbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Dbt.forEach(t),jvr=i(qw),dc=n(qw,"P",{});var pK=s(dc);Dvr=r(pK,`Note:
Loading a model from its configuration file does `),u2e=n(pK,"STRONG",{});var Gbt=s(u2e);Gvr=r(Gbt,"not"),Gbt.forEach(t),Ovr=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(pK,"A",{href:!0});var Obt=s(JW);Vvr=r(Obt,"from_pretrained()"),Obt.forEach(t),Xvr=r(pK," to load the model weights."),pK.forEach(t),zvr=i(qw),T(WM.$$.fragment,qw),qw.forEach(t),Qvr=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(KL.$$.fragment,wl),Wvr=i(wl),_2e=n(wl,"P",{});var Vbt=s(_2e);Hvr=r(Vbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Vbt.forEach(t),Uvr=i(wl),an=n(wl,"P",{});var Nw=s(an);Jvr=r(Nw,"The model class to instantiate is selected based on the "),b2e=n(Nw,"CODE",{});var Xbt=s(b2e);Yvr=r(Xbt,"model_type"),Xbt.forEach(t),Kvr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),v2e=n(Nw,"CODE",{});var zbt=s(v2e);Zvr=r(zbt,"pretrained_model_name_or_path"),zbt.forEach(t),eFr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=n(Nw,"CODE",{});var Qbt=s(F2e);oFr=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),rFr=r(Nw,":"),Nw.forEach(t),tFr=i(wl),ce=n(wl,"UL",{});var ge=s(ce);HM=n(ge,"LI",{});var Lke=s(HM);T2e=n(Lke,"STRONG",{});var Wbt=s(T2e);aFr=r(Wbt,"albert"),Wbt.forEach(t),nFr=r(Lke," \u2014 "),YW=n(Lke,"A",{href:!0});var Hbt=s(YW);sFr=r(Hbt,"TFAlbertForQuestionAnswering"),Hbt.forEach(t),lFr=r(Lke," (ALBERT model)"),Lke.forEach(t),iFr=i(ge),UM=n(ge,"LI",{});var xke=s(UM);M2e=n(xke,"STRONG",{});var Ubt=s(M2e);dFr=r(Ubt,"bert"),Ubt.forEach(t),cFr=r(xke," \u2014 "),KW=n(xke,"A",{href:!0});var Jbt=s(KW);fFr=r(Jbt,"TFBertForQuestionAnswering"),Jbt.forEach(t),mFr=r(xke," (BERT model)"),xke.forEach(t),gFr=i(ge),JM=n(ge,"LI",{});var $ke=s(JM);E2e=n($ke,"STRONG",{});var Ybt=s(E2e);hFr=r(Ybt,"camembert"),Ybt.forEach(t),pFr=r($ke," \u2014 "),ZW=n($ke,"A",{href:!0});var Kbt=s(ZW);uFr=r(Kbt,"TFCamembertForQuestionAnswering"),Kbt.forEach(t),_Fr=r($ke," (CamemBERT model)"),$ke.forEach(t),bFr=i(ge),YM=n(ge,"LI",{});var kke=s(YM);C2e=n(kke,"STRONG",{});var Zbt=s(C2e);vFr=r(Zbt,"convbert"),Zbt.forEach(t),FFr=r(kke," \u2014 "),eH=n(kke,"A",{href:!0});var e2t=s(eH);TFr=r(e2t,"TFConvBertForQuestionAnswering"),e2t.forEach(t),MFr=r(kke," (ConvBERT model)"),kke.forEach(t),EFr=i(ge),KM=n(ge,"LI",{});var Ske=s(KM);w2e=n(Ske,"STRONG",{});var o2t=s(w2e);CFr=r(o2t,"deberta"),o2t.forEach(t),wFr=r(Ske," \u2014 "),oH=n(Ske,"A",{href:!0});var r2t=s(oH);AFr=r(r2t,"TFDebertaForQuestionAnswering"),r2t.forEach(t),yFr=r(Ske," (DeBERTa model)"),Ske.forEach(t),LFr=i(ge),ZM=n(ge,"LI",{});var Rke=s(ZM);A2e=n(Rke,"STRONG",{});var t2t=s(A2e);xFr=r(t2t,"deberta-v2"),t2t.forEach(t),$Fr=r(Rke," \u2014 "),rH=n(Rke,"A",{href:!0});var a2t=s(rH);kFr=r(a2t,"TFDebertaV2ForQuestionAnswering"),a2t.forEach(t),SFr=r(Rke," (DeBERTa-v2 model)"),Rke.forEach(t),RFr=i(ge),e4=n(ge,"LI",{});var Bke=s(e4);y2e=n(Bke,"STRONG",{});var n2t=s(y2e);BFr=r(n2t,"distilbert"),n2t.forEach(t),PFr=r(Bke," \u2014 "),tH=n(Bke,"A",{href:!0});var s2t=s(tH);IFr=r(s2t,"TFDistilBertForQuestionAnswering"),s2t.forEach(t),qFr=r(Bke," (DistilBERT model)"),Bke.forEach(t),NFr=i(ge),o4=n(ge,"LI",{});var Pke=s(o4);L2e=n(Pke,"STRONG",{});var l2t=s(L2e);jFr=r(l2t,"electra"),l2t.forEach(t),DFr=r(Pke," \u2014 "),aH=n(Pke,"A",{href:!0});var i2t=s(aH);GFr=r(i2t,"TFElectraForQuestionAnswering"),i2t.forEach(t),OFr=r(Pke," (ELECTRA model)"),Pke.forEach(t),VFr=i(ge),r4=n(ge,"LI",{});var Ike=s(r4);x2e=n(Ike,"STRONG",{});var d2t=s(x2e);XFr=r(d2t,"flaubert"),d2t.forEach(t),zFr=r(Ike," \u2014 "),nH=n(Ike,"A",{href:!0});var c2t=s(nH);QFr=r(c2t,"TFFlaubertForQuestionAnsweringSimple"),c2t.forEach(t),WFr=r(Ike," (FlauBERT model)"),Ike.forEach(t),HFr=i(ge),t4=n(ge,"LI",{});var qke=s(t4);$2e=n(qke,"STRONG",{});var f2t=s($2e);UFr=r(f2t,"funnel"),f2t.forEach(t),JFr=r(qke," \u2014 "),sH=n(qke,"A",{href:!0});var m2t=s(sH);YFr=r(m2t,"TFFunnelForQuestionAnswering"),m2t.forEach(t),KFr=r(qke," (Funnel Transformer model)"),qke.forEach(t),ZFr=i(ge),a4=n(ge,"LI",{});var Nke=s(a4);k2e=n(Nke,"STRONG",{});var g2t=s(k2e);eTr=r(g2t,"gptj"),g2t.forEach(t),oTr=r(Nke," \u2014 "),lH=n(Nke,"A",{href:!0});var h2t=s(lH);rTr=r(h2t,"TFGPTJForQuestionAnswering"),h2t.forEach(t),tTr=r(Nke," (GPT-J model)"),Nke.forEach(t),aTr=i(ge),n4=n(ge,"LI",{});var jke=s(n4);S2e=n(jke,"STRONG",{});var p2t=s(S2e);nTr=r(p2t,"longformer"),p2t.forEach(t),sTr=r(jke," \u2014 "),iH=n(jke,"A",{href:!0});var u2t=s(iH);lTr=r(u2t,"TFLongformerForQuestionAnswering"),u2t.forEach(t),iTr=r(jke," (Longformer model)"),jke.forEach(t),dTr=i(ge),s4=n(ge,"LI",{});var Dke=s(s4);R2e=n(Dke,"STRONG",{});var _2t=s(R2e);cTr=r(_2t,"mobilebert"),_2t.forEach(t),fTr=r(Dke," \u2014 "),dH=n(Dke,"A",{href:!0});var b2t=s(dH);mTr=r(b2t,"TFMobileBertForQuestionAnswering"),b2t.forEach(t),gTr=r(Dke," (MobileBERT model)"),Dke.forEach(t),hTr=i(ge),l4=n(ge,"LI",{});var Gke=s(l4);B2e=n(Gke,"STRONG",{});var v2t=s(B2e);pTr=r(v2t,"mpnet"),v2t.forEach(t),uTr=r(Gke," \u2014 "),cH=n(Gke,"A",{href:!0});var F2t=s(cH);_Tr=r(F2t,"TFMPNetForQuestionAnswering"),F2t.forEach(t),bTr=r(Gke," (MPNet model)"),Gke.forEach(t),vTr=i(ge),i4=n(ge,"LI",{});var Oke=s(i4);P2e=n(Oke,"STRONG",{});var T2t=s(P2e);FTr=r(T2t,"rembert"),T2t.forEach(t),TTr=r(Oke," \u2014 "),fH=n(Oke,"A",{href:!0});var M2t=s(fH);MTr=r(M2t,"TFRemBertForQuestionAnswering"),M2t.forEach(t),ETr=r(Oke," (RemBERT model)"),Oke.forEach(t),CTr=i(ge),d4=n(ge,"LI",{});var Vke=s(d4);I2e=n(Vke,"STRONG",{});var E2t=s(I2e);wTr=r(E2t,"roberta"),E2t.forEach(t),ATr=r(Vke," \u2014 "),mH=n(Vke,"A",{href:!0});var C2t=s(mH);yTr=r(C2t,"TFRobertaForQuestionAnswering"),C2t.forEach(t),LTr=r(Vke," (RoBERTa model)"),Vke.forEach(t),xTr=i(ge),c4=n(ge,"LI",{});var Xke=s(c4);q2e=n(Xke,"STRONG",{});var w2t=s(q2e);$Tr=r(w2t,"roformer"),w2t.forEach(t),kTr=r(Xke," \u2014 "),gH=n(Xke,"A",{href:!0});var A2t=s(gH);STr=r(A2t,"TFRoFormerForQuestionAnswering"),A2t.forEach(t),RTr=r(Xke," (RoFormer model)"),Xke.forEach(t),BTr=i(ge),f4=n(ge,"LI",{});var zke=s(f4);N2e=n(zke,"STRONG",{});var y2t=s(N2e);PTr=r(y2t,"xlm"),y2t.forEach(t),ITr=r(zke," \u2014 "),hH=n(zke,"A",{href:!0});var L2t=s(hH);qTr=r(L2t,"TFXLMForQuestionAnsweringSimple"),L2t.forEach(t),NTr=r(zke," (XLM model)"),zke.forEach(t),jTr=i(ge),m4=n(ge,"LI",{});var Qke=s(m4);j2e=n(Qke,"STRONG",{});var x2t=s(j2e);DTr=r(x2t,"xlm-roberta"),x2t.forEach(t),GTr=r(Qke," \u2014 "),pH=n(Qke,"A",{href:!0});var $2t=s(pH);OTr=r($2t,"TFXLMRobertaForQuestionAnswering"),$2t.forEach(t),VTr=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),XTr=i(ge),g4=n(ge,"LI",{});var Wke=s(g4);D2e=n(Wke,"STRONG",{});var k2t=s(D2e);zTr=r(k2t,"xlnet"),k2t.forEach(t),QTr=r(Wke," \u2014 "),uH=n(Wke,"A",{href:!0});var S2t=s(uH);WTr=r(S2t,"TFXLNetForQuestionAnsweringSimple"),S2t.forEach(t),HTr=r(Wke," (XLNet model)"),Wke.forEach(t),ge.forEach(t),UTr=i(wl),T(h4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),uPe=i(f),cc=n(f,"H2",{class:!0});var Fqe=s(cc);p4=n(Fqe,"A",{id:!0,class:!0,href:!0});var R2t=s(p4);G2e=n(R2t,"SPAN",{});var B2t=s(G2e);T(ZL.$$.fragment,B2t),B2t.forEach(t),R2t.forEach(t),JTr=i(Fqe),O2e=n(Fqe,"SPAN",{});var P2t=s(O2e);YTr=r(P2t,"TFAutoModelForVision2Seq"),P2t.forEach(t),Fqe.forEach(t),_Pe=i(f),sr=n(f,"DIV",{class:!0});var Al=s(sr);T(e8.$$.fragment,Al),KTr=i(Al),fc=n(Al,"P",{});var uK=s(fc);ZTr=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_H=n(uK,"A",{href:!0});var I2t=s(_H);e9r=r(I2t,"from_pretrained()"),I2t.forEach(t),o9r=r(uK," class method or the "),bH=n(uK,"A",{href:!0});var q2t=s(bH);r9r=r(q2t,"from_config()"),q2t.forEach(t),t9r=r(uK,` class
method.`),uK.forEach(t),a9r=i(Al),o8=n(Al,"P",{});var Tqe=s(o8);n9r=r(Tqe,"This class cannot be instantiated directly using "),V2e=n(Tqe,"CODE",{});var N2t=s(V2e);s9r=r(N2t,"__init__()"),N2t.forEach(t),l9r=r(Tqe," (throws an error)."),Tqe.forEach(t),i9r=i(Al),Rt=n(Al,"DIV",{class:!0});var jw=s(Rt);T(r8.$$.fragment,jw),d9r=i(jw),X2e=n(jw,"P",{});var j2t=s(X2e);c9r=r(j2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),j2t.forEach(t),f9r=i(jw),mc=n(jw,"P",{});var _K=s(mc);m9r=r(_K,`Note:
Loading a model from its configuration file does `),z2e=n(_K,"STRONG",{});var D2t=s(z2e);g9r=r(D2t,"not"),D2t.forEach(t),h9r=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(_K,"A",{href:!0});var G2t=s(vH);p9r=r(G2t,"from_pretrained()"),G2t.forEach(t),u9r=r(_K," to load the model weights."),_K.forEach(t),_9r=i(jw),T(u4.$$.fragment,jw),jw.forEach(t),b9r=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(t8.$$.fragment,yl),v9r=i(yl),Q2e=n(yl,"P",{});var O2t=s(Q2e);F9r=r(O2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),O2t.forEach(t),T9r=i(yl),nn=n(yl,"P",{});var Dw=s(nn);M9r=r(Dw,"The model class to instantiate is selected based on the "),W2e=n(Dw,"CODE",{});var V2t=s(W2e);E9r=r(V2t,"model_type"),V2t.forEach(t),C9r=r(Dw,` property of the config object (either
passed as an argument or loaded from `),H2e=n(Dw,"CODE",{});var X2t=s(H2e);w9r=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),A9r=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=n(Dw,"CODE",{});var z2t=s(U2e);y9r=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),L9r=r(Dw,":"),Dw.forEach(t),x9r=i(yl),J2e=n(yl,"UL",{});var Q2t=s(J2e);_4=n(Q2t,"LI",{});var Hke=s(_4);Y2e=n(Hke,"STRONG",{});var W2t=s(Y2e);$9r=r(W2t,"vision-encoder-decoder"),W2t.forEach(t),k9r=r(Hke," \u2014 "),FH=n(Hke,"A",{href:!0});var H2t=s(FH);S9r=r(H2t,"TFVisionEncoderDecoderModel"),H2t.forEach(t),R9r=r(Hke," (Vision Encoder decoder model)"),Hke.forEach(t),Q2t.forEach(t),B9r=i(yl),T(b4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),bPe=i(f),gc=n(f,"H2",{class:!0});var Mqe=s(gc);v4=n(Mqe,"A",{id:!0,class:!0,href:!0});var U2t=s(v4);K2e=n(U2t,"SPAN",{});var J2t=s(K2e);T(a8.$$.fragment,J2t),J2t.forEach(t),U2t.forEach(t),P9r=i(Mqe),Z2e=n(Mqe,"SPAN",{});var Y2t=s(Z2e);I9r=r(Y2t,"TFAutoModelForSpeechSeq2Seq"),Y2t.forEach(t),Mqe.forEach(t),vPe=i(f),lr=n(f,"DIV",{class:!0});var Ll=s(lr);T(n8.$$.fragment,Ll),q9r=i(Ll),hc=n(Ll,"P",{});var bK=s(hc);N9r=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TH=n(bK,"A",{href:!0});var K2t=s(TH);j9r=r(K2t,"from_pretrained()"),K2t.forEach(t),D9r=r(bK," class method or the "),MH=n(bK,"A",{href:!0});var Z2t=s(MH);G9r=r(Z2t,"from_config()"),Z2t.forEach(t),O9r=r(bK,` class
method.`),bK.forEach(t),V9r=i(Ll),s8=n(Ll,"P",{});var Eqe=s(s8);X9r=r(Eqe,"This class cannot be instantiated directly using "),e5e=n(Eqe,"CODE",{});var e5t=s(e5e);z9r=r(e5t,"__init__()"),e5t.forEach(t),Q9r=r(Eqe," (throws an error)."),Eqe.forEach(t),W9r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var Gw=s(Bt);T(l8.$$.fragment,Gw),H9r=i(Gw),o5e=n(Gw,"P",{});var o5t=s(o5e);U9r=r(o5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),o5t.forEach(t),J9r=i(Gw),pc=n(Gw,"P",{});var vK=s(pc);Y9r=r(vK,`Note:
Loading a model from its configuration file does `),r5e=n(vK,"STRONG",{});var r5t=s(r5e);K9r=r(r5t,"not"),r5t.forEach(t),Z9r=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(vK,"A",{href:!0});var t5t=s(EH);eMr=r(t5t,"from_pretrained()"),t5t.forEach(t),oMr=r(vK," to load the model weights."),vK.forEach(t),rMr=i(Gw),T(F4.$$.fragment,Gw),Gw.forEach(t),tMr=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(i8.$$.fragment,xl),aMr=i(xl),t5e=n(xl,"P",{});var a5t=s(t5e);nMr=r(a5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),a5t.forEach(t),sMr=i(xl),sn=n(xl,"P",{});var Ow=s(sn);lMr=r(Ow,"The model class to instantiate is selected based on the "),a5e=n(Ow,"CODE",{});var n5t=s(a5e);iMr=r(n5t,"model_type"),n5t.forEach(t),dMr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),n5e=n(Ow,"CODE",{});var s5t=s(n5e);cMr=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),fMr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(Ow,"CODE",{});var l5t=s(s5e);mMr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),gMr=r(Ow,":"),Ow.forEach(t),hMr=i(xl),l5e=n(xl,"UL",{});var i5t=s(l5e);T4=n(i5t,"LI",{});var Uke=s(T4);i5e=n(Uke,"STRONG",{});var d5t=s(i5e);pMr=r(d5t,"speech_to_text"),d5t.forEach(t),uMr=r(Uke," \u2014 "),CH=n(Uke,"A",{href:!0});var c5t=s(CH);_Mr=r(c5t,"TFSpeech2TextForConditionalGeneration"),c5t.forEach(t),bMr=r(Uke," (Speech2Text model)"),Uke.forEach(t),i5t.forEach(t),vMr=i(xl),T(M4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),FPe=i(f),uc=n(f,"H2",{class:!0});var Cqe=s(uc);E4=n(Cqe,"A",{id:!0,class:!0,href:!0});var f5t=s(E4);d5e=n(f5t,"SPAN",{});var m5t=s(d5e);T(d8.$$.fragment,m5t),m5t.forEach(t),f5t.forEach(t),FMr=i(Cqe),c5e=n(Cqe,"SPAN",{});var g5t=s(c5e);TMr=r(g5t,"FlaxAutoModel"),g5t.forEach(t),Cqe.forEach(t),TPe=i(f),ir=n(f,"DIV",{class:!0});var $l=s(ir);T(c8.$$.fragment,$l),MMr=i($l),_c=n($l,"P",{});var FK=s(_c);EMr=r(FK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wH=n(FK,"A",{href:!0});var h5t=s(wH);CMr=r(h5t,"from_pretrained()"),h5t.forEach(t),wMr=r(FK," class method or the "),AH=n(FK,"A",{href:!0});var p5t=s(AH);AMr=r(p5t,"from_config()"),p5t.forEach(t),yMr=r(FK,` class
method.`),FK.forEach(t),LMr=i($l),f8=n($l,"P",{});var wqe=s(f8);xMr=r(wqe,"This class cannot be instantiated directly using "),f5e=n(wqe,"CODE",{});var u5t=s(f5e);$Mr=r(u5t,"__init__()"),u5t.forEach(t),kMr=r(wqe," (throws an error)."),wqe.forEach(t),SMr=i($l),Pt=n($l,"DIV",{class:!0});var Vw=s(Pt);T(m8.$$.fragment,Vw),RMr=i(Vw),m5e=n(Vw,"P",{});var _5t=s(m5e);BMr=r(_5t,"Instantiates one of the base model classes of the library from a configuration."),_5t.forEach(t),PMr=i(Vw),bc=n(Vw,"P",{});var TK=s(bc);IMr=r(TK,`Note:
Loading a model from its configuration file does `),g5e=n(TK,"STRONG",{});var b5t=s(g5e);qMr=r(b5t,"not"),b5t.forEach(t),NMr=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(TK,"A",{href:!0});var v5t=s(yH);jMr=r(v5t,"from_pretrained()"),v5t.forEach(t),DMr=r(TK," to load the model weights."),TK.forEach(t),GMr=i(Vw),T(C4.$$.fragment,Vw),Vw.forEach(t),OMr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(g8.$$.fragment,kl),VMr=i(kl),h5e=n(kl,"P",{});var F5t=s(h5e);XMr=r(F5t,"Instantiate one of the base model classes of the library from a pretrained model."),F5t.forEach(t),zMr=i(kl),ln=n(kl,"P",{});var Xw=s(ln);QMr=r(Xw,"The model class to instantiate is selected based on the "),p5e=n(Xw,"CODE",{});var T5t=s(p5e);WMr=r(T5t,"model_type"),T5t.forEach(t),HMr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),u5e=n(Xw,"CODE",{});var M5t=s(u5e);UMr=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),JMr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=n(Xw,"CODE",{});var E5t=s(_5e);YMr=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),KMr=r(Xw,":"),Xw.forEach(t),ZMr=i(kl),oe=n(kl,"UL",{});var te=s(oe);w4=n(te,"LI",{});var Jke=s(w4);b5e=n(Jke,"STRONG",{});var C5t=s(b5e);e4r=r(C5t,"albert"),C5t.forEach(t),o4r=r(Jke," \u2014 "),LH=n(Jke,"A",{href:!0});var w5t=s(LH);r4r=r(w5t,"FlaxAlbertModel"),w5t.forEach(t),t4r=r(Jke," (ALBERT model)"),Jke.forEach(t),a4r=i(te),A4=n(te,"LI",{});var Yke=s(A4);v5e=n(Yke,"STRONG",{});var A5t=s(v5e);n4r=r(A5t,"bart"),A5t.forEach(t),s4r=r(Yke," \u2014 "),xH=n(Yke,"A",{href:!0});var y5t=s(xH);l4r=r(y5t,"FlaxBartModel"),y5t.forEach(t),i4r=r(Yke," (BART model)"),Yke.forEach(t),d4r=i(te),y4=n(te,"LI",{});var Kke=s(y4);F5e=n(Kke,"STRONG",{});var L5t=s(F5e);c4r=r(L5t,"beit"),L5t.forEach(t),f4r=r(Kke," \u2014 "),$H=n(Kke,"A",{href:!0});var x5t=s($H);m4r=r(x5t,"FlaxBeitModel"),x5t.forEach(t),g4r=r(Kke," (BEiT model)"),Kke.forEach(t),h4r=i(te),L4=n(te,"LI",{});var Zke=s(L4);T5e=n(Zke,"STRONG",{});var $5t=s(T5e);p4r=r($5t,"bert"),$5t.forEach(t),u4r=r(Zke," \u2014 "),kH=n(Zke,"A",{href:!0});var k5t=s(kH);_4r=r(k5t,"FlaxBertModel"),k5t.forEach(t),b4r=r(Zke," (BERT model)"),Zke.forEach(t),v4r=i(te),x4=n(te,"LI",{});var eSe=s(x4);M5e=n(eSe,"STRONG",{});var S5t=s(M5e);F4r=r(S5t,"big_bird"),S5t.forEach(t),T4r=r(eSe," \u2014 "),SH=n(eSe,"A",{href:!0});var R5t=s(SH);M4r=r(R5t,"FlaxBigBirdModel"),R5t.forEach(t),E4r=r(eSe," (BigBird model)"),eSe.forEach(t),C4r=i(te),$4=n(te,"LI",{});var oSe=s($4);E5e=n(oSe,"STRONG",{});var B5t=s(E5e);w4r=r(B5t,"blenderbot"),B5t.forEach(t),A4r=r(oSe," \u2014 "),RH=n(oSe,"A",{href:!0});var P5t=s(RH);y4r=r(P5t,"FlaxBlenderbotModel"),P5t.forEach(t),L4r=r(oSe," (Blenderbot model)"),oSe.forEach(t),x4r=i(te),k4=n(te,"LI",{});var rSe=s(k4);C5e=n(rSe,"STRONG",{});var I5t=s(C5e);$4r=r(I5t,"blenderbot-small"),I5t.forEach(t),k4r=r(rSe," \u2014 "),BH=n(rSe,"A",{href:!0});var q5t=s(BH);S4r=r(q5t,"FlaxBlenderbotSmallModel"),q5t.forEach(t),R4r=r(rSe," (BlenderbotSmall model)"),rSe.forEach(t),B4r=i(te),S4=n(te,"LI",{});var tSe=s(S4);w5e=n(tSe,"STRONG",{});var N5t=s(w5e);P4r=r(N5t,"clip"),N5t.forEach(t),I4r=r(tSe," \u2014 "),PH=n(tSe,"A",{href:!0});var j5t=s(PH);q4r=r(j5t,"FlaxCLIPModel"),j5t.forEach(t),N4r=r(tSe," (CLIP model)"),tSe.forEach(t),j4r=i(te),R4=n(te,"LI",{});var aSe=s(R4);A5e=n(aSe,"STRONG",{});var D5t=s(A5e);D4r=r(D5t,"distilbert"),D5t.forEach(t),G4r=r(aSe," \u2014 "),IH=n(aSe,"A",{href:!0});var G5t=s(IH);O4r=r(G5t,"FlaxDistilBertModel"),G5t.forEach(t),V4r=r(aSe," (DistilBERT model)"),aSe.forEach(t),X4r=i(te),B4=n(te,"LI",{});var nSe=s(B4);y5e=n(nSe,"STRONG",{});var O5t=s(y5e);z4r=r(O5t,"electra"),O5t.forEach(t),Q4r=r(nSe," \u2014 "),qH=n(nSe,"A",{href:!0});var V5t=s(qH);W4r=r(V5t,"FlaxElectraModel"),V5t.forEach(t),H4r=r(nSe," (ELECTRA model)"),nSe.forEach(t),U4r=i(te),P4=n(te,"LI",{});var sSe=s(P4);L5e=n(sSe,"STRONG",{});var X5t=s(L5e);J4r=r(X5t,"gpt2"),X5t.forEach(t),Y4r=r(sSe," \u2014 "),NH=n(sSe,"A",{href:!0});var z5t=s(NH);K4r=r(z5t,"FlaxGPT2Model"),z5t.forEach(t),Z4r=r(sSe," (OpenAI GPT-2 model)"),sSe.forEach(t),eEr=i(te),I4=n(te,"LI",{});var lSe=s(I4);x5e=n(lSe,"STRONG",{});var Q5t=s(x5e);oEr=r(Q5t,"gpt_neo"),Q5t.forEach(t),rEr=r(lSe," \u2014 "),jH=n(lSe,"A",{href:!0});var W5t=s(jH);tEr=r(W5t,"FlaxGPTNeoModel"),W5t.forEach(t),aEr=r(lSe," (GPT Neo model)"),lSe.forEach(t),nEr=i(te),q4=n(te,"LI",{});var iSe=s(q4);$5e=n(iSe,"STRONG",{});var H5t=s($5e);sEr=r(H5t,"gptj"),H5t.forEach(t),lEr=r(iSe," \u2014 "),DH=n(iSe,"A",{href:!0});var U5t=s(DH);iEr=r(U5t,"FlaxGPTJModel"),U5t.forEach(t),dEr=r(iSe," (GPT-J model)"),iSe.forEach(t),cEr=i(te),N4=n(te,"LI",{});var dSe=s(N4);k5e=n(dSe,"STRONG",{});var J5t=s(k5e);fEr=r(J5t,"marian"),J5t.forEach(t),mEr=r(dSe," \u2014 "),GH=n(dSe,"A",{href:!0});var Y5t=s(GH);gEr=r(Y5t,"FlaxMarianModel"),Y5t.forEach(t),hEr=r(dSe," (Marian model)"),dSe.forEach(t),pEr=i(te),j4=n(te,"LI",{});var cSe=s(j4);S5e=n(cSe,"STRONG",{});var K5t=s(S5e);uEr=r(K5t,"mbart"),K5t.forEach(t),_Er=r(cSe," \u2014 "),OH=n(cSe,"A",{href:!0});var Z5t=s(OH);bEr=r(Z5t,"FlaxMBartModel"),Z5t.forEach(t),vEr=r(cSe," (mBART model)"),cSe.forEach(t),FEr=i(te),D4=n(te,"LI",{});var fSe=s(D4);R5e=n(fSe,"STRONG",{});var evt=s(R5e);TEr=r(evt,"mt5"),evt.forEach(t),MEr=r(fSe," \u2014 "),VH=n(fSe,"A",{href:!0});var ovt=s(VH);EEr=r(ovt,"FlaxMT5Model"),ovt.forEach(t),CEr=r(fSe," (mT5 model)"),fSe.forEach(t),wEr=i(te),G4=n(te,"LI",{});var mSe=s(G4);B5e=n(mSe,"STRONG",{});var rvt=s(B5e);AEr=r(rvt,"pegasus"),rvt.forEach(t),yEr=r(mSe," \u2014 "),XH=n(mSe,"A",{href:!0});var tvt=s(XH);LEr=r(tvt,"FlaxPegasusModel"),tvt.forEach(t),xEr=r(mSe," (Pegasus model)"),mSe.forEach(t),$Er=i(te),O4=n(te,"LI",{});var gSe=s(O4);P5e=n(gSe,"STRONG",{});var avt=s(P5e);kEr=r(avt,"roberta"),avt.forEach(t),SEr=r(gSe," \u2014 "),zH=n(gSe,"A",{href:!0});var nvt=s(zH);REr=r(nvt,"FlaxRobertaModel"),nvt.forEach(t),BEr=r(gSe," (RoBERTa model)"),gSe.forEach(t),PEr=i(te),V4=n(te,"LI",{});var hSe=s(V4);I5e=n(hSe,"STRONG",{});var svt=s(I5e);IEr=r(svt,"roformer"),svt.forEach(t),qEr=r(hSe," \u2014 "),QH=n(hSe,"A",{href:!0});var lvt=s(QH);NEr=r(lvt,"FlaxRoFormerModel"),lvt.forEach(t),jEr=r(hSe," (RoFormer model)"),hSe.forEach(t),DEr=i(te),X4=n(te,"LI",{});var pSe=s(X4);q5e=n(pSe,"STRONG",{});var ivt=s(q5e);GEr=r(ivt,"t5"),ivt.forEach(t),OEr=r(pSe," \u2014 "),WH=n(pSe,"A",{href:!0});var dvt=s(WH);VEr=r(dvt,"FlaxT5Model"),dvt.forEach(t),XEr=r(pSe," (T5 model)"),pSe.forEach(t),zEr=i(te),z4=n(te,"LI",{});var uSe=s(z4);N5e=n(uSe,"STRONG",{});var cvt=s(N5e);QEr=r(cvt,"vision-text-dual-encoder"),cvt.forEach(t),WEr=r(uSe," \u2014 "),HH=n(uSe,"A",{href:!0});var fvt=s(HH);HEr=r(fvt,"FlaxVisionTextDualEncoderModel"),fvt.forEach(t),UEr=r(uSe," (VisionTextDualEncoder model)"),uSe.forEach(t),JEr=i(te),Q4=n(te,"LI",{});var _Se=s(Q4);j5e=n(_Se,"STRONG",{});var mvt=s(j5e);YEr=r(mvt,"vit"),mvt.forEach(t),KEr=r(_Se," \u2014 "),UH=n(_Se,"A",{href:!0});var gvt=s(UH);ZEr=r(gvt,"FlaxViTModel"),gvt.forEach(t),eCr=r(_Se," (ViT model)"),_Se.forEach(t),oCr=i(te),W4=n(te,"LI",{});var bSe=s(W4);D5e=n(bSe,"STRONG",{});var hvt=s(D5e);rCr=r(hvt,"wav2vec2"),hvt.forEach(t),tCr=r(bSe," \u2014 "),JH=n(bSe,"A",{href:!0});var pvt=s(JH);aCr=r(pvt,"FlaxWav2Vec2Model"),pvt.forEach(t),nCr=r(bSe," (Wav2Vec2 model)"),bSe.forEach(t),sCr=i(te),H4=n(te,"LI",{});var vSe=s(H4);G5e=n(vSe,"STRONG",{});var uvt=s(G5e);lCr=r(uvt,"xglm"),uvt.forEach(t),iCr=r(vSe," \u2014 "),YH=n(vSe,"A",{href:!0});var _vt=s(YH);dCr=r(_vt,"FlaxXGLMModel"),_vt.forEach(t),cCr=r(vSe," (XGLM model)"),vSe.forEach(t),fCr=i(te),U4=n(te,"LI",{});var FSe=s(U4);O5e=n(FSe,"STRONG",{});var bvt=s(O5e);mCr=r(bvt,"xlm-roberta"),bvt.forEach(t),gCr=r(FSe," \u2014 "),KH=n(FSe,"A",{href:!0});var vvt=s(KH);hCr=r(vvt,"FlaxXLMRobertaModel"),vvt.forEach(t),pCr=r(FSe," (XLM-RoBERTa model)"),FSe.forEach(t),te.forEach(t),uCr=i(kl),T(J4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),MPe=i(f),vc=n(f,"H2",{class:!0});var Aqe=s(vc);Y4=n(Aqe,"A",{id:!0,class:!0,href:!0});var Fvt=s(Y4);V5e=n(Fvt,"SPAN",{});var Tvt=s(V5e);T(h8.$$.fragment,Tvt),Tvt.forEach(t),Fvt.forEach(t),_Cr=i(Aqe),X5e=n(Aqe,"SPAN",{});var Mvt=s(X5e);bCr=r(Mvt,"FlaxAutoModelForCausalLM"),Mvt.forEach(t),Aqe.forEach(t),EPe=i(f),dr=n(f,"DIV",{class:!0});var Sl=s(dr);T(p8.$$.fragment,Sl),vCr=i(Sl),Fc=n(Sl,"P",{});var MK=s(Fc);FCr=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZH=n(MK,"A",{href:!0});var Evt=s(ZH);TCr=r(Evt,"from_pretrained()"),Evt.forEach(t),MCr=r(MK," class method or the "),eU=n(MK,"A",{href:!0});var Cvt=s(eU);ECr=r(Cvt,"from_config()"),Cvt.forEach(t),CCr=r(MK,` class
method.`),MK.forEach(t),wCr=i(Sl),u8=n(Sl,"P",{});var yqe=s(u8);ACr=r(yqe,"This class cannot be instantiated directly using "),z5e=n(yqe,"CODE",{});var wvt=s(z5e);yCr=r(wvt,"__init__()"),wvt.forEach(t),LCr=r(yqe," (throws an error)."),yqe.forEach(t),xCr=i(Sl),It=n(Sl,"DIV",{class:!0});var zw=s(It);T(_8.$$.fragment,zw),$Cr=i(zw),Q5e=n(zw,"P",{});var Avt=s(Q5e);kCr=r(Avt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Avt.forEach(t),SCr=i(zw),Tc=n(zw,"P",{});var EK=s(Tc);RCr=r(EK,`Note:
Loading a model from its configuration file does `),W5e=n(EK,"STRONG",{});var yvt=s(W5e);BCr=r(yvt,"not"),yvt.forEach(t),PCr=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(EK,"A",{href:!0});var Lvt=s(oU);ICr=r(Lvt,"from_pretrained()"),Lvt.forEach(t),qCr=r(EK," to load the model weights."),EK.forEach(t),NCr=i(zw),T(K4.$$.fragment,zw),zw.forEach(t),jCr=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(b8.$$.fragment,Rl),DCr=i(Rl),H5e=n(Rl,"P",{});var xvt=s(H5e);GCr=r(xvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xvt.forEach(t),OCr=i(Rl),dn=n(Rl,"P",{});var Qw=s(dn);VCr=r(Qw,"The model class to instantiate is selected based on the "),U5e=n(Qw,"CODE",{});var $vt=s(U5e);XCr=r($vt,"model_type"),$vt.forEach(t),zCr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),J5e=n(Qw,"CODE",{});var kvt=s(J5e);QCr=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),WCr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=n(Qw,"CODE",{});var Svt=s(Y5e);HCr=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),UCr=r(Qw,":"),Qw.forEach(t),JCr=i(Rl),Hr=n(Rl,"UL",{});var Bl=s(Hr);Z4=n(Bl,"LI",{});var TSe=s(Z4);K5e=n(TSe,"STRONG",{});var Rvt=s(K5e);YCr=r(Rvt,"bart"),Rvt.forEach(t),KCr=r(TSe," \u2014 "),rU=n(TSe,"A",{href:!0});var Bvt=s(rU);ZCr=r(Bvt,"FlaxBartForCausalLM"),Bvt.forEach(t),e3r=r(TSe," (BART model)"),TSe.forEach(t),o3r=i(Bl),eE=n(Bl,"LI",{});var MSe=s(eE);Z5e=n(MSe,"STRONG",{});var Pvt=s(Z5e);r3r=r(Pvt,"gpt2"),Pvt.forEach(t),t3r=r(MSe," \u2014 "),tU=n(MSe,"A",{href:!0});var Ivt=s(tU);a3r=r(Ivt,"FlaxGPT2LMHeadModel"),Ivt.forEach(t),n3r=r(MSe," (OpenAI GPT-2 model)"),MSe.forEach(t),s3r=i(Bl),oE=n(Bl,"LI",{});var ESe=s(oE);eve=n(ESe,"STRONG",{});var qvt=s(eve);l3r=r(qvt,"gpt_neo"),qvt.forEach(t),i3r=r(ESe," \u2014 "),aU=n(ESe,"A",{href:!0});var Nvt=s(aU);d3r=r(Nvt,"FlaxGPTNeoForCausalLM"),Nvt.forEach(t),c3r=r(ESe," (GPT Neo model)"),ESe.forEach(t),f3r=i(Bl),rE=n(Bl,"LI",{});var CSe=s(rE);ove=n(CSe,"STRONG",{});var jvt=s(ove);m3r=r(jvt,"gptj"),jvt.forEach(t),g3r=r(CSe," \u2014 "),nU=n(CSe,"A",{href:!0});var Dvt=s(nU);h3r=r(Dvt,"FlaxGPTJForCausalLM"),Dvt.forEach(t),p3r=r(CSe," (GPT-J model)"),CSe.forEach(t),u3r=i(Bl),tE=n(Bl,"LI",{});var wSe=s(tE);rve=n(wSe,"STRONG",{});var Gvt=s(rve);_3r=r(Gvt,"xglm"),Gvt.forEach(t),b3r=r(wSe," \u2014 "),sU=n(wSe,"A",{href:!0});var Ovt=s(sU);v3r=r(Ovt,"FlaxXGLMForCausalLM"),Ovt.forEach(t),F3r=r(wSe," (XGLM model)"),wSe.forEach(t),Bl.forEach(t),T3r=i(Rl),T(aE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),CPe=i(f),Mc=n(f,"H2",{class:!0});var Lqe=s(Mc);nE=n(Lqe,"A",{id:!0,class:!0,href:!0});var Vvt=s(nE);tve=n(Vvt,"SPAN",{});var Xvt=s(tve);T(v8.$$.fragment,Xvt),Xvt.forEach(t),Vvt.forEach(t),M3r=i(Lqe),ave=n(Lqe,"SPAN",{});var zvt=s(ave);E3r=r(zvt,"FlaxAutoModelForPreTraining"),zvt.forEach(t),Lqe.forEach(t),wPe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(F8.$$.fragment,Pl),C3r=i(Pl),Ec=n(Pl,"P",{});var CK=s(Ec);w3r=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lU=n(CK,"A",{href:!0});var Qvt=s(lU);A3r=r(Qvt,"from_pretrained()"),Qvt.forEach(t),y3r=r(CK," class method or the "),iU=n(CK,"A",{href:!0});var Wvt=s(iU);L3r=r(Wvt,"from_config()"),Wvt.forEach(t),x3r=r(CK,` class
method.`),CK.forEach(t),$3r=i(Pl),T8=n(Pl,"P",{});var xqe=s(T8);k3r=r(xqe,"This class cannot be instantiated directly using "),nve=n(xqe,"CODE",{});var Hvt=s(nve);S3r=r(Hvt,"__init__()"),Hvt.forEach(t),R3r=r(xqe," (throws an error)."),xqe.forEach(t),B3r=i(Pl),qt=n(Pl,"DIV",{class:!0});var Ww=s(qt);T(M8.$$.fragment,Ww),P3r=i(Ww),sve=n(Ww,"P",{});var Uvt=s(sve);I3r=r(Uvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Uvt.forEach(t),q3r=i(Ww),Cc=n(Ww,"P",{});var wK=s(Cc);N3r=r(wK,`Note:
Loading a model from its configuration file does `),lve=n(wK,"STRONG",{});var Jvt=s(lve);j3r=r(Jvt,"not"),Jvt.forEach(t),D3r=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(wK,"A",{href:!0});var Yvt=s(dU);G3r=r(Yvt,"from_pretrained()"),Yvt.forEach(t),O3r=r(wK," to load the model weights."),wK.forEach(t),V3r=i(Ww),T(sE.$$.fragment,Ww),Ww.forEach(t),X3r=i(Pl),qr=n(Pl,"DIV",{class:!0});var Il=s(qr);T(E8.$$.fragment,Il),z3r=i(Il),ive=n(Il,"P",{});var Kvt=s(ive);Q3r=r(Kvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kvt.forEach(t),W3r=i(Il),cn=n(Il,"P",{});var Hw=s(cn);H3r=r(Hw,"The model class to instantiate is selected based on the "),dve=n(Hw,"CODE",{});var Zvt=s(dve);U3r=r(Zvt,"model_type"),Zvt.forEach(t),J3r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),cve=n(Hw,"CODE",{});var eFt=s(cve);Y3r=r(eFt,"pretrained_model_name_or_path"),eFt.forEach(t),K3r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(Hw,"CODE",{});var oFt=s(fve);Z3r=r(oFt,"pretrained_model_name_or_path"),oFt.forEach(t),ewr=r(Hw,":"),Hw.forEach(t),owr=i(Il),Me=n(Il,"UL",{});var we=s(Me);lE=n(we,"LI",{});var ASe=s(lE);mve=n(ASe,"STRONG",{});var rFt=s(mve);rwr=r(rFt,"albert"),rFt.forEach(t),twr=r(ASe," \u2014 "),cU=n(ASe,"A",{href:!0});var tFt=s(cU);awr=r(tFt,"FlaxAlbertForPreTraining"),tFt.forEach(t),nwr=r(ASe," (ALBERT model)"),ASe.forEach(t),swr=i(we),iE=n(we,"LI",{});var ySe=s(iE);gve=n(ySe,"STRONG",{});var aFt=s(gve);lwr=r(aFt,"bart"),aFt.forEach(t),iwr=r(ySe," \u2014 "),fU=n(ySe,"A",{href:!0});var nFt=s(fU);dwr=r(nFt,"FlaxBartForConditionalGeneration"),nFt.forEach(t),cwr=r(ySe," (BART model)"),ySe.forEach(t),fwr=i(we),dE=n(we,"LI",{});var LSe=s(dE);hve=n(LSe,"STRONG",{});var sFt=s(hve);mwr=r(sFt,"bert"),sFt.forEach(t),gwr=r(LSe," \u2014 "),mU=n(LSe,"A",{href:!0});var lFt=s(mU);hwr=r(lFt,"FlaxBertForPreTraining"),lFt.forEach(t),pwr=r(LSe," (BERT model)"),LSe.forEach(t),uwr=i(we),cE=n(we,"LI",{});var xSe=s(cE);pve=n(xSe,"STRONG",{});var iFt=s(pve);_wr=r(iFt,"big_bird"),iFt.forEach(t),bwr=r(xSe," \u2014 "),gU=n(xSe,"A",{href:!0});var dFt=s(gU);vwr=r(dFt,"FlaxBigBirdForPreTraining"),dFt.forEach(t),Fwr=r(xSe," (BigBird model)"),xSe.forEach(t),Twr=i(we),fE=n(we,"LI",{});var $Se=s(fE);uve=n($Se,"STRONG",{});var cFt=s(uve);Mwr=r(cFt,"electra"),cFt.forEach(t),Ewr=r($Se," \u2014 "),hU=n($Se,"A",{href:!0});var fFt=s(hU);Cwr=r(fFt,"FlaxElectraForPreTraining"),fFt.forEach(t),wwr=r($Se," (ELECTRA model)"),$Se.forEach(t),Awr=i(we),mE=n(we,"LI",{});var kSe=s(mE);_ve=n(kSe,"STRONG",{});var mFt=s(_ve);ywr=r(mFt,"mbart"),mFt.forEach(t),Lwr=r(kSe," \u2014 "),pU=n(kSe,"A",{href:!0});var gFt=s(pU);xwr=r(gFt,"FlaxMBartForConditionalGeneration"),gFt.forEach(t),$wr=r(kSe," (mBART model)"),kSe.forEach(t),kwr=i(we),gE=n(we,"LI",{});var SSe=s(gE);bve=n(SSe,"STRONG",{});var hFt=s(bve);Swr=r(hFt,"mt5"),hFt.forEach(t),Rwr=r(SSe," \u2014 "),uU=n(SSe,"A",{href:!0});var pFt=s(uU);Bwr=r(pFt,"FlaxMT5ForConditionalGeneration"),pFt.forEach(t),Pwr=r(SSe," (mT5 model)"),SSe.forEach(t),Iwr=i(we),hE=n(we,"LI",{});var RSe=s(hE);vve=n(RSe,"STRONG",{});var uFt=s(vve);qwr=r(uFt,"roberta"),uFt.forEach(t),Nwr=r(RSe," \u2014 "),_U=n(RSe,"A",{href:!0});var _Ft=s(_U);jwr=r(_Ft,"FlaxRobertaForMaskedLM"),_Ft.forEach(t),Dwr=r(RSe," (RoBERTa model)"),RSe.forEach(t),Gwr=i(we),pE=n(we,"LI",{});var BSe=s(pE);Fve=n(BSe,"STRONG",{});var bFt=s(Fve);Owr=r(bFt,"roformer"),bFt.forEach(t),Vwr=r(BSe," \u2014 "),bU=n(BSe,"A",{href:!0});var vFt=s(bU);Xwr=r(vFt,"FlaxRoFormerForMaskedLM"),vFt.forEach(t),zwr=r(BSe," (RoFormer model)"),BSe.forEach(t),Qwr=i(we),uE=n(we,"LI",{});var PSe=s(uE);Tve=n(PSe,"STRONG",{});var FFt=s(Tve);Wwr=r(FFt,"t5"),FFt.forEach(t),Hwr=r(PSe," \u2014 "),vU=n(PSe,"A",{href:!0});var TFt=s(vU);Uwr=r(TFt,"FlaxT5ForConditionalGeneration"),TFt.forEach(t),Jwr=r(PSe," (T5 model)"),PSe.forEach(t),Ywr=i(we),_E=n(we,"LI",{});var ISe=s(_E);Mve=n(ISe,"STRONG",{});var MFt=s(Mve);Kwr=r(MFt,"wav2vec2"),MFt.forEach(t),Zwr=r(ISe," \u2014 "),FU=n(ISe,"A",{href:!0});var EFt=s(FU);eAr=r(EFt,"FlaxWav2Vec2ForPreTraining"),EFt.forEach(t),oAr=r(ISe," (Wav2Vec2 model)"),ISe.forEach(t),rAr=i(we),bE=n(we,"LI",{});var qSe=s(bE);Eve=n(qSe,"STRONG",{});var CFt=s(Eve);tAr=r(CFt,"xlm-roberta"),CFt.forEach(t),aAr=r(qSe," \u2014 "),TU=n(qSe,"A",{href:!0});var wFt=s(TU);nAr=r(wFt,"FlaxXLMRobertaForMaskedLM"),wFt.forEach(t),sAr=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),we.forEach(t),lAr=i(Il),T(vE.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),APe=i(f),wc=n(f,"H2",{class:!0});var $qe=s(wc);FE=n($qe,"A",{id:!0,class:!0,href:!0});var AFt=s(FE);Cve=n(AFt,"SPAN",{});var yFt=s(Cve);T(C8.$$.fragment,yFt),yFt.forEach(t),AFt.forEach(t),iAr=i($qe),wve=n($qe,"SPAN",{});var LFt=s(wve);dAr=r(LFt,"FlaxAutoModelForMaskedLM"),LFt.forEach(t),$qe.forEach(t),yPe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(w8.$$.fragment,ql),cAr=i(ql),Ac=n(ql,"P",{});var AK=s(Ac);fAr=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MU=n(AK,"A",{href:!0});var xFt=s(MU);mAr=r(xFt,"from_pretrained()"),xFt.forEach(t),gAr=r(AK," class method or the "),EU=n(AK,"A",{href:!0});var $Ft=s(EU);hAr=r($Ft,"from_config()"),$Ft.forEach(t),pAr=r(AK,` class
method.`),AK.forEach(t),uAr=i(ql),A8=n(ql,"P",{});var kqe=s(A8);_Ar=r(kqe,"This class cannot be instantiated directly using "),Ave=n(kqe,"CODE",{});var kFt=s(Ave);bAr=r(kFt,"__init__()"),kFt.forEach(t),vAr=r(kqe," (throws an error)."),kqe.forEach(t),FAr=i(ql),Nt=n(ql,"DIV",{class:!0});var Uw=s(Nt);T(y8.$$.fragment,Uw),TAr=i(Uw),yve=n(Uw,"P",{});var SFt=s(yve);MAr=r(SFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),SFt.forEach(t),EAr=i(Uw),yc=n(Uw,"P",{});var yK=s(yc);CAr=r(yK,`Note:
Loading a model from its configuration file does `),Lve=n(yK,"STRONG",{});var RFt=s(Lve);wAr=r(RFt,"not"),RFt.forEach(t),AAr=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(yK,"A",{href:!0});var BFt=s(CU);yAr=r(BFt,"from_pretrained()"),BFt.forEach(t),LAr=r(yK," to load the model weights."),yK.forEach(t),xAr=i(Uw),T(TE.$$.fragment,Uw),Uw.forEach(t),$Ar=i(ql),Nr=n(ql,"DIV",{class:!0});var Nl=s(Nr);T(L8.$$.fragment,Nl),kAr=i(Nl),xve=n(Nl,"P",{});var PFt=s(xve);SAr=r(PFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PFt.forEach(t),RAr=i(Nl),fn=n(Nl,"P",{});var Jw=s(fn);BAr=r(Jw,"The model class to instantiate is selected based on the "),$ve=n(Jw,"CODE",{});var IFt=s($ve);PAr=r(IFt,"model_type"),IFt.forEach(t),IAr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),kve=n(Jw,"CODE",{});var qFt=s(kve);qAr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),NAr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=n(Jw,"CODE",{});var NFt=s(Sve);jAr=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),DAr=r(Jw,":"),Jw.forEach(t),GAr=i(Nl),Le=n(Nl,"UL",{});var Re=s(Le);ME=n(Re,"LI",{});var NSe=s(ME);Rve=n(NSe,"STRONG",{});var jFt=s(Rve);OAr=r(jFt,"albert"),jFt.forEach(t),VAr=r(NSe," \u2014 "),wU=n(NSe,"A",{href:!0});var DFt=s(wU);XAr=r(DFt,"FlaxAlbertForMaskedLM"),DFt.forEach(t),zAr=r(NSe," (ALBERT model)"),NSe.forEach(t),QAr=i(Re),EE=n(Re,"LI",{});var jSe=s(EE);Bve=n(jSe,"STRONG",{});var GFt=s(Bve);WAr=r(GFt,"bart"),GFt.forEach(t),HAr=r(jSe," \u2014 "),AU=n(jSe,"A",{href:!0});var OFt=s(AU);UAr=r(OFt,"FlaxBartForConditionalGeneration"),OFt.forEach(t),JAr=r(jSe," (BART model)"),jSe.forEach(t),YAr=i(Re),CE=n(Re,"LI",{});var DSe=s(CE);Pve=n(DSe,"STRONG",{});var VFt=s(Pve);KAr=r(VFt,"bert"),VFt.forEach(t),ZAr=r(DSe," \u2014 "),yU=n(DSe,"A",{href:!0});var XFt=s(yU);e0r=r(XFt,"FlaxBertForMaskedLM"),XFt.forEach(t),o0r=r(DSe," (BERT model)"),DSe.forEach(t),r0r=i(Re),wE=n(Re,"LI",{});var GSe=s(wE);Ive=n(GSe,"STRONG",{});var zFt=s(Ive);t0r=r(zFt,"big_bird"),zFt.forEach(t),a0r=r(GSe," \u2014 "),LU=n(GSe,"A",{href:!0});var QFt=s(LU);n0r=r(QFt,"FlaxBigBirdForMaskedLM"),QFt.forEach(t),s0r=r(GSe," (BigBird model)"),GSe.forEach(t),l0r=i(Re),AE=n(Re,"LI",{});var OSe=s(AE);qve=n(OSe,"STRONG",{});var WFt=s(qve);i0r=r(WFt,"distilbert"),WFt.forEach(t),d0r=r(OSe," \u2014 "),xU=n(OSe,"A",{href:!0});var HFt=s(xU);c0r=r(HFt,"FlaxDistilBertForMaskedLM"),HFt.forEach(t),f0r=r(OSe," (DistilBERT model)"),OSe.forEach(t),m0r=i(Re),yE=n(Re,"LI",{});var VSe=s(yE);Nve=n(VSe,"STRONG",{});var UFt=s(Nve);g0r=r(UFt,"electra"),UFt.forEach(t),h0r=r(VSe," \u2014 "),$U=n(VSe,"A",{href:!0});var JFt=s($U);p0r=r(JFt,"FlaxElectraForMaskedLM"),JFt.forEach(t),u0r=r(VSe," (ELECTRA model)"),VSe.forEach(t),_0r=i(Re),LE=n(Re,"LI",{});var XSe=s(LE);jve=n(XSe,"STRONG",{});var YFt=s(jve);b0r=r(YFt,"mbart"),YFt.forEach(t),v0r=r(XSe," \u2014 "),kU=n(XSe,"A",{href:!0});var KFt=s(kU);F0r=r(KFt,"FlaxMBartForConditionalGeneration"),KFt.forEach(t),T0r=r(XSe," (mBART model)"),XSe.forEach(t),M0r=i(Re),xE=n(Re,"LI",{});var zSe=s(xE);Dve=n(zSe,"STRONG",{});var ZFt=s(Dve);E0r=r(ZFt,"roberta"),ZFt.forEach(t),C0r=r(zSe," \u2014 "),SU=n(zSe,"A",{href:!0});var eTt=s(SU);w0r=r(eTt,"FlaxRobertaForMaskedLM"),eTt.forEach(t),A0r=r(zSe," (RoBERTa model)"),zSe.forEach(t),y0r=i(Re),$E=n(Re,"LI",{});var QSe=s($E);Gve=n(QSe,"STRONG",{});var oTt=s(Gve);L0r=r(oTt,"roformer"),oTt.forEach(t),x0r=r(QSe," \u2014 "),RU=n(QSe,"A",{href:!0});var rTt=s(RU);$0r=r(rTt,"FlaxRoFormerForMaskedLM"),rTt.forEach(t),k0r=r(QSe," (RoFormer model)"),QSe.forEach(t),S0r=i(Re),kE=n(Re,"LI",{});var WSe=s(kE);Ove=n(WSe,"STRONG",{});var tTt=s(Ove);R0r=r(tTt,"xlm-roberta"),tTt.forEach(t),B0r=r(WSe," \u2014 "),BU=n(WSe,"A",{href:!0});var aTt=s(BU);P0r=r(aTt,"FlaxXLMRobertaForMaskedLM"),aTt.forEach(t),I0r=r(WSe," (XLM-RoBERTa model)"),WSe.forEach(t),Re.forEach(t),q0r=i(Nl),T(SE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),LPe=i(f),Lc=n(f,"H2",{class:!0});var Sqe=s(Lc);RE=n(Sqe,"A",{id:!0,class:!0,href:!0});var nTt=s(RE);Vve=n(nTt,"SPAN",{});var sTt=s(Vve);T(x8.$$.fragment,sTt),sTt.forEach(t),nTt.forEach(t),N0r=i(Sqe),Xve=n(Sqe,"SPAN",{});var lTt=s(Xve);j0r=r(lTt,"FlaxAutoModelForSeq2SeqLM"),lTt.forEach(t),Sqe.forEach(t),xPe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T($8.$$.fragment,jl),D0r=i(jl),xc=n(jl,"P",{});var LK=s(xc);G0r=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PU=n(LK,"A",{href:!0});var iTt=s(PU);O0r=r(iTt,"from_pretrained()"),iTt.forEach(t),V0r=r(LK," class method or the "),IU=n(LK,"A",{href:!0});var dTt=s(IU);X0r=r(dTt,"from_config()"),dTt.forEach(t),z0r=r(LK,` class
method.`),LK.forEach(t),Q0r=i(jl),k8=n(jl,"P",{});var Rqe=s(k8);W0r=r(Rqe,"This class cannot be instantiated directly using "),zve=n(Rqe,"CODE",{});var cTt=s(zve);H0r=r(cTt,"__init__()"),cTt.forEach(t),U0r=r(Rqe," (throws an error)."),Rqe.forEach(t),J0r=i(jl),jt=n(jl,"DIV",{class:!0});var Yw=s(jt);T(S8.$$.fragment,Yw),Y0r=i(Yw),Qve=n(Yw,"P",{});var fTt=s(Qve);K0r=r(fTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fTt.forEach(t),Z0r=i(Yw),$c=n(Yw,"P",{});var xK=s($c);eyr=r(xK,`Note:
Loading a model from its configuration file does `),Wve=n(xK,"STRONG",{});var mTt=s(Wve);oyr=r(mTt,"not"),mTt.forEach(t),ryr=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(xK,"A",{href:!0});var gTt=s(qU);tyr=r(gTt,"from_pretrained()"),gTt.forEach(t),ayr=r(xK," to load the model weights."),xK.forEach(t),nyr=i(Yw),T(BE.$$.fragment,Yw),Yw.forEach(t),syr=i(jl),jr=n(jl,"DIV",{class:!0});var Dl=s(jr);T(R8.$$.fragment,Dl),lyr=i(Dl),Hve=n(Dl,"P",{});var hTt=s(Hve);iyr=r(hTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hTt.forEach(t),dyr=i(Dl),mn=n(Dl,"P",{});var Kw=s(mn);cyr=r(Kw,"The model class to instantiate is selected based on the "),Uve=n(Kw,"CODE",{});var pTt=s(Uve);fyr=r(pTt,"model_type"),pTt.forEach(t),myr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Jve=n(Kw,"CODE",{});var uTt=s(Jve);gyr=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),hyr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(Kw,"CODE",{});var _Tt=s(Yve);pyr=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),uyr=r(Kw,":"),Kw.forEach(t),_yr=i(Dl),ke=n(Dl,"UL",{});var Ge=s(ke);PE=n(Ge,"LI",{});var HSe=s(PE);Kve=n(HSe,"STRONG",{});var bTt=s(Kve);byr=r(bTt,"bart"),bTt.forEach(t),vyr=r(HSe," \u2014 "),NU=n(HSe,"A",{href:!0});var vTt=s(NU);Fyr=r(vTt,"FlaxBartForConditionalGeneration"),vTt.forEach(t),Tyr=r(HSe," (BART model)"),HSe.forEach(t),Myr=i(Ge),IE=n(Ge,"LI",{});var USe=s(IE);Zve=n(USe,"STRONG",{});var FTt=s(Zve);Eyr=r(FTt,"blenderbot"),FTt.forEach(t),Cyr=r(USe," \u2014 "),jU=n(USe,"A",{href:!0});var TTt=s(jU);wyr=r(TTt,"FlaxBlenderbotForConditionalGeneration"),TTt.forEach(t),Ayr=r(USe," (Blenderbot model)"),USe.forEach(t),yyr=i(Ge),qE=n(Ge,"LI",{});var JSe=s(qE);eFe=n(JSe,"STRONG",{});var MTt=s(eFe);Lyr=r(MTt,"blenderbot-small"),MTt.forEach(t),xyr=r(JSe," \u2014 "),DU=n(JSe,"A",{href:!0});var ETt=s(DU);$yr=r(ETt,"FlaxBlenderbotSmallForConditionalGeneration"),ETt.forEach(t),kyr=r(JSe," (BlenderbotSmall model)"),JSe.forEach(t),Syr=i(Ge),NE=n(Ge,"LI",{});var YSe=s(NE);oFe=n(YSe,"STRONG",{});var CTt=s(oFe);Ryr=r(CTt,"encoder-decoder"),CTt.forEach(t),Byr=r(YSe," \u2014 "),GU=n(YSe,"A",{href:!0});var wTt=s(GU);Pyr=r(wTt,"FlaxEncoderDecoderModel"),wTt.forEach(t),Iyr=r(YSe," (Encoder decoder model)"),YSe.forEach(t),qyr=i(Ge),jE=n(Ge,"LI",{});var KSe=s(jE);rFe=n(KSe,"STRONG",{});var ATt=s(rFe);Nyr=r(ATt,"marian"),ATt.forEach(t),jyr=r(KSe," \u2014 "),OU=n(KSe,"A",{href:!0});var yTt=s(OU);Dyr=r(yTt,"FlaxMarianMTModel"),yTt.forEach(t),Gyr=r(KSe," (Marian model)"),KSe.forEach(t),Oyr=i(Ge),DE=n(Ge,"LI",{});var ZSe=s(DE);tFe=n(ZSe,"STRONG",{});var LTt=s(tFe);Vyr=r(LTt,"mbart"),LTt.forEach(t),Xyr=r(ZSe," \u2014 "),VU=n(ZSe,"A",{href:!0});var xTt=s(VU);zyr=r(xTt,"FlaxMBartForConditionalGeneration"),xTt.forEach(t),Qyr=r(ZSe," (mBART model)"),ZSe.forEach(t),Wyr=i(Ge),GE=n(Ge,"LI",{});var eRe=s(GE);aFe=n(eRe,"STRONG",{});var $Tt=s(aFe);Hyr=r($Tt,"mt5"),$Tt.forEach(t),Uyr=r(eRe," \u2014 "),XU=n(eRe,"A",{href:!0});var kTt=s(XU);Jyr=r(kTt,"FlaxMT5ForConditionalGeneration"),kTt.forEach(t),Yyr=r(eRe," (mT5 model)"),eRe.forEach(t),Kyr=i(Ge),OE=n(Ge,"LI",{});var oRe=s(OE);nFe=n(oRe,"STRONG",{});var STt=s(nFe);Zyr=r(STt,"pegasus"),STt.forEach(t),eLr=r(oRe," \u2014 "),zU=n(oRe,"A",{href:!0});var RTt=s(zU);oLr=r(RTt,"FlaxPegasusForConditionalGeneration"),RTt.forEach(t),rLr=r(oRe," (Pegasus model)"),oRe.forEach(t),tLr=i(Ge),VE=n(Ge,"LI",{});var rRe=s(VE);sFe=n(rRe,"STRONG",{});var BTt=s(sFe);aLr=r(BTt,"t5"),BTt.forEach(t),nLr=r(rRe," \u2014 "),QU=n(rRe,"A",{href:!0});var PTt=s(QU);sLr=r(PTt,"FlaxT5ForConditionalGeneration"),PTt.forEach(t),lLr=r(rRe," (T5 model)"),rRe.forEach(t),Ge.forEach(t),iLr=i(Dl),T(XE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),$Pe=i(f),kc=n(f,"H2",{class:!0});var Bqe=s(kc);zE=n(Bqe,"A",{id:!0,class:!0,href:!0});var ITt=s(zE);lFe=n(ITt,"SPAN",{});var qTt=s(lFe);T(B8.$$.fragment,qTt),qTt.forEach(t),ITt.forEach(t),dLr=i(Bqe),iFe=n(Bqe,"SPAN",{});var NTt=s(iFe);cLr=r(NTt,"FlaxAutoModelForSequenceClassification"),NTt.forEach(t),Bqe.forEach(t),kPe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(P8.$$.fragment,Gl),fLr=i(Gl),Sc=n(Gl,"P",{});var $K=s(Sc);mLr=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WU=n($K,"A",{href:!0});var jTt=s(WU);gLr=r(jTt,"from_pretrained()"),jTt.forEach(t),hLr=r($K," class method or the "),HU=n($K,"A",{href:!0});var DTt=s(HU);pLr=r(DTt,"from_config()"),DTt.forEach(t),uLr=r($K,` class
method.`),$K.forEach(t),_Lr=i(Gl),I8=n(Gl,"P",{});var Pqe=s(I8);bLr=r(Pqe,"This class cannot be instantiated directly using "),dFe=n(Pqe,"CODE",{});var GTt=s(dFe);vLr=r(GTt,"__init__()"),GTt.forEach(t),FLr=r(Pqe," (throws an error)."),Pqe.forEach(t),TLr=i(Gl),Dt=n(Gl,"DIV",{class:!0});var Zw=s(Dt);T(q8.$$.fragment,Zw),MLr=i(Zw),cFe=n(Zw,"P",{});var OTt=s(cFe);ELr=r(OTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),OTt.forEach(t),CLr=i(Zw),Rc=n(Zw,"P",{});var kK=s(Rc);wLr=r(kK,`Note:
Loading a model from its configuration file does `),fFe=n(kK,"STRONG",{});var VTt=s(fFe);ALr=r(VTt,"not"),VTt.forEach(t),yLr=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(kK,"A",{href:!0});var XTt=s(UU);LLr=r(XTt,"from_pretrained()"),XTt.forEach(t),xLr=r(kK," to load the model weights."),kK.forEach(t),$Lr=i(Zw),T(QE.$$.fragment,Zw),Zw.forEach(t),kLr=i(Gl),Dr=n(Gl,"DIV",{class:!0});var Ol=s(Dr);T(N8.$$.fragment,Ol),SLr=i(Ol),mFe=n(Ol,"P",{});var zTt=s(mFe);RLr=r(zTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zTt.forEach(t),BLr=i(Ol),gn=n(Ol,"P",{});var eA=s(gn);PLr=r(eA,"The model class to instantiate is selected based on the "),gFe=n(eA,"CODE",{});var QTt=s(gFe);ILr=r(QTt,"model_type"),QTt.forEach(t),qLr=r(eA,` property of the config object (either
passed as an argument or loaded from `),hFe=n(eA,"CODE",{});var WTt=s(hFe);NLr=r(WTt,"pretrained_model_name_or_path"),WTt.forEach(t),jLr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=n(eA,"CODE",{});var HTt=s(pFe);DLr=r(HTt,"pretrained_model_name_or_path"),HTt.forEach(t),GLr=r(eA,":"),eA.forEach(t),OLr=i(Ol),xe=n(Ol,"UL",{});var Be=s(xe);WE=n(Be,"LI",{});var tRe=s(WE);uFe=n(tRe,"STRONG",{});var UTt=s(uFe);VLr=r(UTt,"albert"),UTt.forEach(t),XLr=r(tRe," \u2014 "),JU=n(tRe,"A",{href:!0});var JTt=s(JU);zLr=r(JTt,"FlaxAlbertForSequenceClassification"),JTt.forEach(t),QLr=r(tRe," (ALBERT model)"),tRe.forEach(t),WLr=i(Be),HE=n(Be,"LI",{});var aRe=s(HE);_Fe=n(aRe,"STRONG",{});var YTt=s(_Fe);HLr=r(YTt,"bart"),YTt.forEach(t),ULr=r(aRe," \u2014 "),YU=n(aRe,"A",{href:!0});var KTt=s(YU);JLr=r(KTt,"FlaxBartForSequenceClassification"),KTt.forEach(t),YLr=r(aRe," (BART model)"),aRe.forEach(t),KLr=i(Be),UE=n(Be,"LI",{});var nRe=s(UE);bFe=n(nRe,"STRONG",{});var ZTt=s(bFe);ZLr=r(ZTt,"bert"),ZTt.forEach(t),e8r=r(nRe," \u2014 "),KU=n(nRe,"A",{href:!0});var e9t=s(KU);o8r=r(e9t,"FlaxBertForSequenceClassification"),e9t.forEach(t),r8r=r(nRe," (BERT model)"),nRe.forEach(t),t8r=i(Be),JE=n(Be,"LI",{});var sRe=s(JE);vFe=n(sRe,"STRONG",{});var o9t=s(vFe);a8r=r(o9t,"big_bird"),o9t.forEach(t),n8r=r(sRe," \u2014 "),ZU=n(sRe,"A",{href:!0});var r9t=s(ZU);s8r=r(r9t,"FlaxBigBirdForSequenceClassification"),r9t.forEach(t),l8r=r(sRe," (BigBird model)"),sRe.forEach(t),i8r=i(Be),YE=n(Be,"LI",{});var lRe=s(YE);FFe=n(lRe,"STRONG",{});var t9t=s(FFe);d8r=r(t9t,"distilbert"),t9t.forEach(t),c8r=r(lRe," \u2014 "),eJ=n(lRe,"A",{href:!0});var a9t=s(eJ);f8r=r(a9t,"FlaxDistilBertForSequenceClassification"),a9t.forEach(t),m8r=r(lRe," (DistilBERT model)"),lRe.forEach(t),g8r=i(Be),KE=n(Be,"LI",{});var iRe=s(KE);TFe=n(iRe,"STRONG",{});var n9t=s(TFe);h8r=r(n9t,"electra"),n9t.forEach(t),p8r=r(iRe," \u2014 "),oJ=n(iRe,"A",{href:!0});var s9t=s(oJ);u8r=r(s9t,"FlaxElectraForSequenceClassification"),s9t.forEach(t),_8r=r(iRe," (ELECTRA model)"),iRe.forEach(t),b8r=i(Be),ZE=n(Be,"LI",{});var dRe=s(ZE);MFe=n(dRe,"STRONG",{});var l9t=s(MFe);v8r=r(l9t,"mbart"),l9t.forEach(t),F8r=r(dRe," \u2014 "),rJ=n(dRe,"A",{href:!0});var i9t=s(rJ);T8r=r(i9t,"FlaxMBartForSequenceClassification"),i9t.forEach(t),M8r=r(dRe," (mBART model)"),dRe.forEach(t),E8r=i(Be),eC=n(Be,"LI",{});var cRe=s(eC);EFe=n(cRe,"STRONG",{});var d9t=s(EFe);C8r=r(d9t,"roberta"),d9t.forEach(t),w8r=r(cRe," \u2014 "),tJ=n(cRe,"A",{href:!0});var c9t=s(tJ);A8r=r(c9t,"FlaxRobertaForSequenceClassification"),c9t.forEach(t),y8r=r(cRe," (RoBERTa model)"),cRe.forEach(t),L8r=i(Be),oC=n(Be,"LI",{});var fRe=s(oC);CFe=n(fRe,"STRONG",{});var f9t=s(CFe);x8r=r(f9t,"roformer"),f9t.forEach(t),$8r=r(fRe," \u2014 "),aJ=n(fRe,"A",{href:!0});var m9t=s(aJ);k8r=r(m9t,"FlaxRoFormerForSequenceClassification"),m9t.forEach(t),S8r=r(fRe," (RoFormer model)"),fRe.forEach(t),R8r=i(Be),rC=n(Be,"LI",{});var mRe=s(rC);wFe=n(mRe,"STRONG",{});var g9t=s(wFe);B8r=r(g9t,"xlm-roberta"),g9t.forEach(t),P8r=r(mRe," \u2014 "),nJ=n(mRe,"A",{href:!0});var h9t=s(nJ);I8r=r(h9t,"FlaxXLMRobertaForSequenceClassification"),h9t.forEach(t),q8r=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),Be.forEach(t),N8r=i(Ol),T(tC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),SPe=i(f),Bc=n(f,"H2",{class:!0});var Iqe=s(Bc);aC=n(Iqe,"A",{id:!0,class:!0,href:!0});var p9t=s(aC);AFe=n(p9t,"SPAN",{});var u9t=s(AFe);T(j8.$$.fragment,u9t),u9t.forEach(t),p9t.forEach(t),j8r=i(Iqe),yFe=n(Iqe,"SPAN",{});var _9t=s(yFe);D8r=r(_9t,"FlaxAutoModelForQuestionAnswering"),_9t.forEach(t),Iqe.forEach(t),RPe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(D8.$$.fragment,Vl),G8r=i(Vl),Pc=n(Vl,"P",{});var SK=s(Pc);O8r=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sJ=n(SK,"A",{href:!0});var b9t=s(sJ);V8r=r(b9t,"from_pretrained()"),b9t.forEach(t),X8r=r(SK," class method or the "),lJ=n(SK,"A",{href:!0});var v9t=s(lJ);z8r=r(v9t,"from_config()"),v9t.forEach(t),Q8r=r(SK,` class
method.`),SK.forEach(t),W8r=i(Vl),G8=n(Vl,"P",{});var qqe=s(G8);H8r=r(qqe,"This class cannot be instantiated directly using "),LFe=n(qqe,"CODE",{});var F9t=s(LFe);U8r=r(F9t,"__init__()"),F9t.forEach(t),J8r=r(qqe," (throws an error)."),qqe.forEach(t),Y8r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var oA=s(Gt);T(O8.$$.fragment,oA),K8r=i(oA),xFe=n(oA,"P",{});var T9t=s(xFe);Z8r=r(T9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),T9t.forEach(t),e7r=i(oA),Ic=n(oA,"P",{});var RK=s(Ic);o7r=r(RK,`Note:
Loading a model from its configuration file does `),$Fe=n(RK,"STRONG",{});var M9t=s($Fe);r7r=r(M9t,"not"),M9t.forEach(t),t7r=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=n(RK,"A",{href:!0});var E9t=s(iJ);a7r=r(E9t,"from_pretrained()"),E9t.forEach(t),n7r=r(RK," to load the model weights."),RK.forEach(t),s7r=i(oA),T(nC.$$.fragment,oA),oA.forEach(t),l7r=i(Vl),Gr=n(Vl,"DIV",{class:!0});var Xl=s(Gr);T(V8.$$.fragment,Xl),i7r=i(Xl),kFe=n(Xl,"P",{});var C9t=s(kFe);d7r=r(C9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),C9t.forEach(t),c7r=i(Xl),hn=n(Xl,"P",{});var rA=s(hn);f7r=r(rA,"The model class to instantiate is selected based on the "),SFe=n(rA,"CODE",{});var w9t=s(SFe);m7r=r(w9t,"model_type"),w9t.forEach(t),g7r=r(rA,` property of the config object (either
passed as an argument or loaded from `),RFe=n(rA,"CODE",{});var A9t=s(RFe);h7r=r(A9t,"pretrained_model_name_or_path"),A9t.forEach(t),p7r=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(rA,"CODE",{});var y9t=s(BFe);u7r=r(y9t,"pretrained_model_name_or_path"),y9t.forEach(t),_7r=r(rA,":"),rA.forEach(t),b7r=i(Xl),$e=n(Xl,"UL",{});var Pe=s($e);sC=n(Pe,"LI",{});var gRe=s(sC);PFe=n(gRe,"STRONG",{});var L9t=s(PFe);v7r=r(L9t,"albert"),L9t.forEach(t),F7r=r(gRe," \u2014 "),dJ=n(gRe,"A",{href:!0});var x9t=s(dJ);T7r=r(x9t,"FlaxAlbertForQuestionAnswering"),x9t.forEach(t),M7r=r(gRe," (ALBERT model)"),gRe.forEach(t),E7r=i(Pe),lC=n(Pe,"LI",{});var hRe=s(lC);IFe=n(hRe,"STRONG",{});var $9t=s(IFe);C7r=r($9t,"bart"),$9t.forEach(t),w7r=r(hRe," \u2014 "),cJ=n(hRe,"A",{href:!0});var k9t=s(cJ);A7r=r(k9t,"FlaxBartForQuestionAnswering"),k9t.forEach(t),y7r=r(hRe," (BART model)"),hRe.forEach(t),L7r=i(Pe),iC=n(Pe,"LI",{});var pRe=s(iC);qFe=n(pRe,"STRONG",{});var S9t=s(qFe);x7r=r(S9t,"bert"),S9t.forEach(t),$7r=r(pRe," \u2014 "),fJ=n(pRe,"A",{href:!0});var R9t=s(fJ);k7r=r(R9t,"FlaxBertForQuestionAnswering"),R9t.forEach(t),S7r=r(pRe," (BERT model)"),pRe.forEach(t),R7r=i(Pe),dC=n(Pe,"LI",{});var uRe=s(dC);NFe=n(uRe,"STRONG",{});var B9t=s(NFe);B7r=r(B9t,"big_bird"),B9t.forEach(t),P7r=r(uRe," \u2014 "),mJ=n(uRe,"A",{href:!0});var P9t=s(mJ);I7r=r(P9t,"FlaxBigBirdForQuestionAnswering"),P9t.forEach(t),q7r=r(uRe," (BigBird model)"),uRe.forEach(t),N7r=i(Pe),cC=n(Pe,"LI",{});var _Re=s(cC);jFe=n(_Re,"STRONG",{});var I9t=s(jFe);j7r=r(I9t,"distilbert"),I9t.forEach(t),D7r=r(_Re," \u2014 "),gJ=n(_Re,"A",{href:!0});var q9t=s(gJ);G7r=r(q9t,"FlaxDistilBertForQuestionAnswering"),q9t.forEach(t),O7r=r(_Re," (DistilBERT model)"),_Re.forEach(t),V7r=i(Pe),fC=n(Pe,"LI",{});var bRe=s(fC);DFe=n(bRe,"STRONG",{});var N9t=s(DFe);X7r=r(N9t,"electra"),N9t.forEach(t),z7r=r(bRe," \u2014 "),hJ=n(bRe,"A",{href:!0});var j9t=s(hJ);Q7r=r(j9t,"FlaxElectraForQuestionAnswering"),j9t.forEach(t),W7r=r(bRe," (ELECTRA model)"),bRe.forEach(t),H7r=i(Pe),mC=n(Pe,"LI",{});var vRe=s(mC);GFe=n(vRe,"STRONG",{});var D9t=s(GFe);U7r=r(D9t,"mbart"),D9t.forEach(t),J7r=r(vRe," \u2014 "),pJ=n(vRe,"A",{href:!0});var G9t=s(pJ);Y7r=r(G9t,"FlaxMBartForQuestionAnswering"),G9t.forEach(t),K7r=r(vRe," (mBART model)"),vRe.forEach(t),Z7r=i(Pe),gC=n(Pe,"LI",{});var FRe=s(gC);OFe=n(FRe,"STRONG",{});var O9t=s(OFe);exr=r(O9t,"roberta"),O9t.forEach(t),oxr=r(FRe," \u2014 "),uJ=n(FRe,"A",{href:!0});var V9t=s(uJ);rxr=r(V9t,"FlaxRobertaForQuestionAnswering"),V9t.forEach(t),txr=r(FRe," (RoBERTa model)"),FRe.forEach(t),axr=i(Pe),hC=n(Pe,"LI",{});var TRe=s(hC);VFe=n(TRe,"STRONG",{});var X9t=s(VFe);nxr=r(X9t,"roformer"),X9t.forEach(t),sxr=r(TRe," \u2014 "),_J=n(TRe,"A",{href:!0});var z9t=s(_J);lxr=r(z9t,"FlaxRoFormerForQuestionAnswering"),z9t.forEach(t),ixr=r(TRe," (RoFormer model)"),TRe.forEach(t),dxr=i(Pe),pC=n(Pe,"LI",{});var MRe=s(pC);XFe=n(MRe,"STRONG",{});var Q9t=s(XFe);cxr=r(Q9t,"xlm-roberta"),Q9t.forEach(t),fxr=r(MRe," \u2014 "),bJ=n(MRe,"A",{href:!0});var W9t=s(bJ);mxr=r(W9t,"FlaxXLMRobertaForQuestionAnswering"),W9t.forEach(t),gxr=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),Pe.forEach(t),hxr=i(Xl),T(uC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),BPe=i(f),qc=n(f,"H2",{class:!0});var Nqe=s(qc);_C=n(Nqe,"A",{id:!0,class:!0,href:!0});var H9t=s(_C);zFe=n(H9t,"SPAN",{});var U9t=s(zFe);T(X8.$$.fragment,U9t),U9t.forEach(t),H9t.forEach(t),pxr=i(Nqe),QFe=n(Nqe,"SPAN",{});var J9t=s(QFe);uxr=r(J9t,"FlaxAutoModelForTokenClassification"),J9t.forEach(t),Nqe.forEach(t),PPe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(z8.$$.fragment,zl),_xr=i(zl),Nc=n(zl,"P",{});var BK=s(Nc);bxr=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vJ=n(BK,"A",{href:!0});var Y9t=s(vJ);vxr=r(Y9t,"from_pretrained()"),Y9t.forEach(t),Fxr=r(BK," class method or the "),FJ=n(BK,"A",{href:!0});var K9t=s(FJ);Txr=r(K9t,"from_config()"),K9t.forEach(t),Mxr=r(BK,` class
method.`),BK.forEach(t),Exr=i(zl),Q8=n(zl,"P",{});var jqe=s(Q8);Cxr=r(jqe,"This class cannot be instantiated directly using "),WFe=n(jqe,"CODE",{});var Z9t=s(WFe);wxr=r(Z9t,"__init__()"),Z9t.forEach(t),Axr=r(jqe," (throws an error)."),jqe.forEach(t),yxr=i(zl),Ot=n(zl,"DIV",{class:!0});var tA=s(Ot);T(W8.$$.fragment,tA),Lxr=i(tA),HFe=n(tA,"P",{});var eMt=s(HFe);xxr=r(eMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eMt.forEach(t),$xr=i(tA),jc=n(tA,"P",{});var PK=s(jc);kxr=r(PK,`Note:
Loading a model from its configuration file does `),UFe=n(PK,"STRONG",{});var oMt=s(UFe);Sxr=r(oMt,"not"),oMt.forEach(t),Rxr=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(PK,"A",{href:!0});var rMt=s(TJ);Bxr=r(rMt,"from_pretrained()"),rMt.forEach(t),Pxr=r(PK," to load the model weights."),PK.forEach(t),Ixr=i(tA),T(bC.$$.fragment,tA),tA.forEach(t),qxr=i(zl),Or=n(zl,"DIV",{class:!0});var Ql=s(Or);T(H8.$$.fragment,Ql),Nxr=i(Ql),JFe=n(Ql,"P",{});var tMt=s(JFe);jxr=r(tMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tMt.forEach(t),Dxr=i(Ql),pn=n(Ql,"P",{});var aA=s(pn);Gxr=r(aA,"The model class to instantiate is selected based on the "),YFe=n(aA,"CODE",{});var aMt=s(YFe);Oxr=r(aMt,"model_type"),aMt.forEach(t),Vxr=r(aA,` property of the config object (either
passed as an argument or loaded from `),KFe=n(aA,"CODE",{});var nMt=s(KFe);Xxr=r(nMt,"pretrained_model_name_or_path"),nMt.forEach(t),zxr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(aA,"CODE",{});var sMt=s(ZFe);Qxr=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),Wxr=r(aA,":"),aA.forEach(t),Hxr=i(Ql),je=n(Ql,"UL",{});var bo=s(je);vC=n(bo,"LI",{});var ERe=s(vC);eTe=n(ERe,"STRONG",{});var lMt=s(eTe);Uxr=r(lMt,"albert"),lMt.forEach(t),Jxr=r(ERe," \u2014 "),MJ=n(ERe,"A",{href:!0});var iMt=s(MJ);Yxr=r(iMt,"FlaxAlbertForTokenClassification"),iMt.forEach(t),Kxr=r(ERe," (ALBERT model)"),ERe.forEach(t),Zxr=i(bo),FC=n(bo,"LI",{});var CRe=s(FC);oTe=n(CRe,"STRONG",{});var dMt=s(oTe);e$r=r(dMt,"bert"),dMt.forEach(t),o$r=r(CRe," \u2014 "),EJ=n(CRe,"A",{href:!0});var cMt=s(EJ);r$r=r(cMt,"FlaxBertForTokenClassification"),cMt.forEach(t),t$r=r(CRe," (BERT model)"),CRe.forEach(t),a$r=i(bo),TC=n(bo,"LI",{});var wRe=s(TC);rTe=n(wRe,"STRONG",{});var fMt=s(rTe);n$r=r(fMt,"big_bird"),fMt.forEach(t),s$r=r(wRe," \u2014 "),CJ=n(wRe,"A",{href:!0});var mMt=s(CJ);l$r=r(mMt,"FlaxBigBirdForTokenClassification"),mMt.forEach(t),i$r=r(wRe," (BigBird model)"),wRe.forEach(t),d$r=i(bo),MC=n(bo,"LI",{});var ARe=s(MC);tTe=n(ARe,"STRONG",{});var gMt=s(tTe);c$r=r(gMt,"distilbert"),gMt.forEach(t),f$r=r(ARe," \u2014 "),wJ=n(ARe,"A",{href:!0});var hMt=s(wJ);m$r=r(hMt,"FlaxDistilBertForTokenClassification"),hMt.forEach(t),g$r=r(ARe," (DistilBERT model)"),ARe.forEach(t),h$r=i(bo),EC=n(bo,"LI",{});var yRe=s(EC);aTe=n(yRe,"STRONG",{});var pMt=s(aTe);p$r=r(pMt,"electra"),pMt.forEach(t),u$r=r(yRe," \u2014 "),AJ=n(yRe,"A",{href:!0});var uMt=s(AJ);_$r=r(uMt,"FlaxElectraForTokenClassification"),uMt.forEach(t),b$r=r(yRe," (ELECTRA model)"),yRe.forEach(t),v$r=i(bo),CC=n(bo,"LI",{});var LRe=s(CC);nTe=n(LRe,"STRONG",{});var _Mt=s(nTe);F$r=r(_Mt,"roberta"),_Mt.forEach(t),T$r=r(LRe," \u2014 "),yJ=n(LRe,"A",{href:!0});var bMt=s(yJ);M$r=r(bMt,"FlaxRobertaForTokenClassification"),bMt.forEach(t),E$r=r(LRe," (RoBERTa model)"),LRe.forEach(t),C$r=i(bo),wC=n(bo,"LI",{});var xRe=s(wC);sTe=n(xRe,"STRONG",{});var vMt=s(sTe);w$r=r(vMt,"roformer"),vMt.forEach(t),A$r=r(xRe," \u2014 "),LJ=n(xRe,"A",{href:!0});var FMt=s(LJ);y$r=r(FMt,"FlaxRoFormerForTokenClassification"),FMt.forEach(t),L$r=r(xRe," (RoFormer model)"),xRe.forEach(t),x$r=i(bo),AC=n(bo,"LI",{});var $Re=s(AC);lTe=n($Re,"STRONG",{});var TMt=s(lTe);$$r=r(TMt,"xlm-roberta"),TMt.forEach(t),k$r=r($Re," \u2014 "),xJ=n($Re,"A",{href:!0});var MMt=s(xJ);S$r=r(MMt,"FlaxXLMRobertaForTokenClassification"),MMt.forEach(t),R$r=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),bo.forEach(t),B$r=i(Ql),T(yC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),IPe=i(f),Dc=n(f,"H2",{class:!0});var Dqe=s(Dc);LC=n(Dqe,"A",{id:!0,class:!0,href:!0});var EMt=s(LC);iTe=n(EMt,"SPAN",{});var CMt=s(iTe);T(U8.$$.fragment,CMt),CMt.forEach(t),EMt.forEach(t),P$r=i(Dqe),dTe=n(Dqe,"SPAN",{});var wMt=s(dTe);I$r=r(wMt,"FlaxAutoModelForMultipleChoice"),wMt.forEach(t),Dqe.forEach(t),qPe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(J8.$$.fragment,Wl),q$r=i(Wl),Gc=n(Wl,"P",{});var IK=s(Gc);N$r=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$J=n(IK,"A",{href:!0});var AMt=s($J);j$r=r(AMt,"from_pretrained()"),AMt.forEach(t),D$r=r(IK," class method or the "),kJ=n(IK,"A",{href:!0});var yMt=s(kJ);G$r=r(yMt,"from_config()"),yMt.forEach(t),O$r=r(IK,` class
method.`),IK.forEach(t),V$r=i(Wl),Y8=n(Wl,"P",{});var Gqe=s(Y8);X$r=r(Gqe,"This class cannot be instantiated directly using "),cTe=n(Gqe,"CODE",{});var LMt=s(cTe);z$r=r(LMt,"__init__()"),LMt.forEach(t),Q$r=r(Gqe," (throws an error)."),Gqe.forEach(t),W$r=i(Wl),Vt=n(Wl,"DIV",{class:!0});var nA=s(Vt);T(K8.$$.fragment,nA),H$r=i(nA),fTe=n(nA,"P",{});var xMt=s(fTe);U$r=r(xMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xMt.forEach(t),J$r=i(nA),Oc=n(nA,"P",{});var qK=s(Oc);Y$r=r(qK,`Note:
Loading a model from its configuration file does `),mTe=n(qK,"STRONG",{});var $Mt=s(mTe);K$r=r($Mt,"not"),$Mt.forEach(t),Z$r=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=n(qK,"A",{href:!0});var kMt=s(SJ);ekr=r(kMt,"from_pretrained()"),kMt.forEach(t),okr=r(qK," to load the model weights."),qK.forEach(t),rkr=i(nA),T(xC.$$.fragment,nA),nA.forEach(t),tkr=i(Wl),Vr=n(Wl,"DIV",{class:!0});var Hl=s(Vr);T(Z8.$$.fragment,Hl),akr=i(Hl),gTe=n(Hl,"P",{});var SMt=s(gTe);nkr=r(SMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SMt.forEach(t),skr=i(Hl),un=n(Hl,"P",{});var sA=s(un);lkr=r(sA,"The model class to instantiate is selected based on the "),hTe=n(sA,"CODE",{});var RMt=s(hTe);ikr=r(RMt,"model_type"),RMt.forEach(t),dkr=r(sA,` property of the config object (either
passed as an argument or loaded from `),pTe=n(sA,"CODE",{});var BMt=s(pTe);ckr=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),fkr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=n(sA,"CODE",{});var PMt=s(uTe);mkr=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),gkr=r(sA,":"),sA.forEach(t),hkr=i(Hl),De=n(Hl,"UL",{});var vo=s(De);$C=n(vo,"LI",{});var kRe=s($C);_Te=n(kRe,"STRONG",{});var IMt=s(_Te);pkr=r(IMt,"albert"),IMt.forEach(t),ukr=r(kRe," \u2014 "),RJ=n(kRe,"A",{href:!0});var qMt=s(RJ);_kr=r(qMt,"FlaxAlbertForMultipleChoice"),qMt.forEach(t),bkr=r(kRe," (ALBERT model)"),kRe.forEach(t),vkr=i(vo),kC=n(vo,"LI",{});var SRe=s(kC);bTe=n(SRe,"STRONG",{});var NMt=s(bTe);Fkr=r(NMt,"bert"),NMt.forEach(t),Tkr=r(SRe," \u2014 "),BJ=n(SRe,"A",{href:!0});var jMt=s(BJ);Mkr=r(jMt,"FlaxBertForMultipleChoice"),jMt.forEach(t),Ekr=r(SRe," (BERT model)"),SRe.forEach(t),Ckr=i(vo),SC=n(vo,"LI",{});var RRe=s(SC);vTe=n(RRe,"STRONG",{});var DMt=s(vTe);wkr=r(DMt,"big_bird"),DMt.forEach(t),Akr=r(RRe," \u2014 "),PJ=n(RRe,"A",{href:!0});var GMt=s(PJ);ykr=r(GMt,"FlaxBigBirdForMultipleChoice"),GMt.forEach(t),Lkr=r(RRe," (BigBird model)"),RRe.forEach(t),xkr=i(vo),RC=n(vo,"LI",{});var BRe=s(RC);FTe=n(BRe,"STRONG",{});var OMt=s(FTe);$kr=r(OMt,"distilbert"),OMt.forEach(t),kkr=r(BRe," \u2014 "),IJ=n(BRe,"A",{href:!0});var VMt=s(IJ);Skr=r(VMt,"FlaxDistilBertForMultipleChoice"),VMt.forEach(t),Rkr=r(BRe," (DistilBERT model)"),BRe.forEach(t),Bkr=i(vo),BC=n(vo,"LI",{});var PRe=s(BC);TTe=n(PRe,"STRONG",{});var XMt=s(TTe);Pkr=r(XMt,"electra"),XMt.forEach(t),Ikr=r(PRe," \u2014 "),qJ=n(PRe,"A",{href:!0});var zMt=s(qJ);qkr=r(zMt,"FlaxElectraForMultipleChoice"),zMt.forEach(t),Nkr=r(PRe," (ELECTRA model)"),PRe.forEach(t),jkr=i(vo),PC=n(vo,"LI",{});var IRe=s(PC);MTe=n(IRe,"STRONG",{});var QMt=s(MTe);Dkr=r(QMt,"roberta"),QMt.forEach(t),Gkr=r(IRe," \u2014 "),NJ=n(IRe,"A",{href:!0});var WMt=s(NJ);Okr=r(WMt,"FlaxRobertaForMultipleChoice"),WMt.forEach(t),Vkr=r(IRe," (RoBERTa model)"),IRe.forEach(t),Xkr=i(vo),IC=n(vo,"LI",{});var qRe=s(IC);ETe=n(qRe,"STRONG",{});var HMt=s(ETe);zkr=r(HMt,"roformer"),HMt.forEach(t),Qkr=r(qRe," \u2014 "),jJ=n(qRe,"A",{href:!0});var UMt=s(jJ);Wkr=r(UMt,"FlaxRoFormerForMultipleChoice"),UMt.forEach(t),Hkr=r(qRe," (RoFormer model)"),qRe.forEach(t),Ukr=i(vo),qC=n(vo,"LI",{});var NRe=s(qC);CTe=n(NRe,"STRONG",{});var JMt=s(CTe);Jkr=r(JMt,"xlm-roberta"),JMt.forEach(t),Ykr=r(NRe," \u2014 "),DJ=n(NRe,"A",{href:!0});var YMt=s(DJ);Kkr=r(YMt,"FlaxXLMRobertaForMultipleChoice"),YMt.forEach(t),Zkr=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),vo.forEach(t),eSr=i(Hl),T(NC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),NPe=i(f),Vc=n(f,"H2",{class:!0});var Oqe=s(Vc);jC=n(Oqe,"A",{id:!0,class:!0,href:!0});var KMt=s(jC);wTe=n(KMt,"SPAN",{});var ZMt=s(wTe);T(e7.$$.fragment,ZMt),ZMt.forEach(t),KMt.forEach(t),oSr=i(Oqe),ATe=n(Oqe,"SPAN",{});var e4t=s(ATe);rSr=r(e4t,"FlaxAutoModelForNextSentencePrediction"),e4t.forEach(t),Oqe.forEach(t),jPe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(o7.$$.fragment,Ul),tSr=i(Ul),Xc=n(Ul,"P",{});var NK=s(Xc);aSr=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GJ=n(NK,"A",{href:!0});var o4t=s(GJ);nSr=r(o4t,"from_pretrained()"),o4t.forEach(t),sSr=r(NK," class method or the "),OJ=n(NK,"A",{href:!0});var r4t=s(OJ);lSr=r(r4t,"from_config()"),r4t.forEach(t),iSr=r(NK,` class
method.`),NK.forEach(t),dSr=i(Ul),r7=n(Ul,"P",{});var Vqe=s(r7);cSr=r(Vqe,"This class cannot be instantiated directly using "),yTe=n(Vqe,"CODE",{});var t4t=s(yTe);fSr=r(t4t,"__init__()"),t4t.forEach(t),mSr=r(Vqe," (throws an error)."),Vqe.forEach(t),gSr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var lA=s(Xt);T(t7.$$.fragment,lA),hSr=i(lA),LTe=n(lA,"P",{});var a4t=s(LTe);pSr=r(a4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),a4t.forEach(t),uSr=i(lA),zc=n(lA,"P",{});var jK=s(zc);_Sr=r(jK,`Note:
Loading a model from its configuration file does `),xTe=n(jK,"STRONG",{});var n4t=s(xTe);bSr=r(n4t,"not"),n4t.forEach(t),vSr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(jK,"A",{href:!0});var s4t=s(VJ);FSr=r(s4t,"from_pretrained()"),s4t.forEach(t),TSr=r(jK," to load the model weights."),jK.forEach(t),MSr=i(lA),T(DC.$$.fragment,lA),lA.forEach(t),ESr=i(Ul),Xr=n(Ul,"DIV",{class:!0});var Jl=s(Xr);T(a7.$$.fragment,Jl),CSr=i(Jl),$Te=n(Jl,"P",{});var l4t=s($Te);wSr=r(l4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),l4t.forEach(t),ASr=i(Jl),_n=n(Jl,"P",{});var iA=s(_n);ySr=r(iA,"The model class to instantiate is selected based on the "),kTe=n(iA,"CODE",{});var i4t=s(kTe);LSr=r(i4t,"model_type"),i4t.forEach(t),xSr=r(iA,` property of the config object (either
passed as an argument or loaded from `),STe=n(iA,"CODE",{});var d4t=s(STe);$Sr=r(d4t,"pretrained_model_name_or_path"),d4t.forEach(t),kSr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=n(iA,"CODE",{});var c4t=s(RTe);SSr=r(c4t,"pretrained_model_name_or_path"),c4t.forEach(t),RSr=r(iA,":"),iA.forEach(t),BSr=i(Jl),BTe=n(Jl,"UL",{});var f4t=s(BTe);GC=n(f4t,"LI",{});var jRe=s(GC);PTe=n(jRe,"STRONG",{});var m4t=s(PTe);PSr=r(m4t,"bert"),m4t.forEach(t),ISr=r(jRe," \u2014 "),XJ=n(jRe,"A",{href:!0});var g4t=s(XJ);qSr=r(g4t,"FlaxBertForNextSentencePrediction"),g4t.forEach(t),NSr=r(jRe," (BERT model)"),jRe.forEach(t),f4t.forEach(t),jSr=i(Jl),T(OC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),DPe=i(f),Qc=n(f,"H2",{class:!0});var Xqe=s(Qc);VC=n(Xqe,"A",{id:!0,class:!0,href:!0});var h4t=s(VC);ITe=n(h4t,"SPAN",{});var p4t=s(ITe);T(n7.$$.fragment,p4t),p4t.forEach(t),h4t.forEach(t),DSr=i(Xqe),qTe=n(Xqe,"SPAN",{});var u4t=s(qTe);GSr=r(u4t,"FlaxAutoModelForImageClassification"),u4t.forEach(t),Xqe.forEach(t),GPe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(s7.$$.fragment,Yl),OSr=i(Yl),Wc=n(Yl,"P",{});var DK=s(Wc);VSr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zJ=n(DK,"A",{href:!0});var _4t=s(zJ);XSr=r(_4t,"from_pretrained()"),_4t.forEach(t),zSr=r(DK," class method or the "),QJ=n(DK,"A",{href:!0});var b4t=s(QJ);QSr=r(b4t,"from_config()"),b4t.forEach(t),WSr=r(DK,` class
method.`),DK.forEach(t),HSr=i(Yl),l7=n(Yl,"P",{});var zqe=s(l7);USr=r(zqe,"This class cannot be instantiated directly using "),NTe=n(zqe,"CODE",{});var v4t=s(NTe);JSr=r(v4t,"__init__()"),v4t.forEach(t),YSr=r(zqe," (throws an error)."),zqe.forEach(t),KSr=i(Yl),zt=n(Yl,"DIV",{class:!0});var dA=s(zt);T(i7.$$.fragment,dA),ZSr=i(dA),jTe=n(dA,"P",{});var F4t=s(jTe);eRr=r(F4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),F4t.forEach(t),oRr=i(dA),Hc=n(dA,"P",{});var GK=s(Hc);rRr=r(GK,`Note:
Loading a model from its configuration file does `),DTe=n(GK,"STRONG",{});var T4t=s(DTe);tRr=r(T4t,"not"),T4t.forEach(t),aRr=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(GK,"A",{href:!0});var M4t=s(WJ);nRr=r(M4t,"from_pretrained()"),M4t.forEach(t),sRr=r(GK," to load the model weights."),GK.forEach(t),lRr=i(dA),T(XC.$$.fragment,dA),dA.forEach(t),iRr=i(Yl),zr=n(Yl,"DIV",{class:!0});var Kl=s(zr);T(d7.$$.fragment,Kl),dRr=i(Kl),GTe=n(Kl,"P",{});var E4t=s(GTe);cRr=r(E4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),E4t.forEach(t),fRr=i(Kl),bn=n(Kl,"P",{});var cA=s(bn);mRr=r(cA,"The model class to instantiate is selected based on the "),OTe=n(cA,"CODE",{});var C4t=s(OTe);gRr=r(C4t,"model_type"),C4t.forEach(t),hRr=r(cA,` property of the config object (either
passed as an argument or loaded from `),VTe=n(cA,"CODE",{});var w4t=s(VTe);pRr=r(w4t,"pretrained_model_name_or_path"),w4t.forEach(t),uRr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(cA,"CODE",{});var A4t=s(XTe);_Rr=r(A4t,"pretrained_model_name_or_path"),A4t.forEach(t),bRr=r(cA,":"),cA.forEach(t),vRr=i(Kl),c7=n(Kl,"UL",{});var Qqe=s(c7);zC=n(Qqe,"LI",{});var DRe=s(zC);zTe=n(DRe,"STRONG",{});var y4t=s(zTe);FRr=r(y4t,"beit"),y4t.forEach(t),TRr=r(DRe," \u2014 "),HJ=n(DRe,"A",{href:!0});var L4t=s(HJ);MRr=r(L4t,"FlaxBeitForImageClassification"),L4t.forEach(t),ERr=r(DRe," (BEiT model)"),DRe.forEach(t),CRr=i(Qqe),QC=n(Qqe,"LI",{});var GRe=s(QC);QTe=n(GRe,"STRONG",{});var x4t=s(QTe);wRr=r(x4t,"vit"),x4t.forEach(t),ARr=r(GRe," \u2014 "),UJ=n(GRe,"A",{href:!0});var $4t=s(UJ);yRr=r($4t,"FlaxViTForImageClassification"),$4t.forEach(t),LRr=r(GRe," (ViT model)"),GRe.forEach(t),Qqe.forEach(t),xRr=i(Kl),T(WC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),OPe=i(f),Uc=n(f,"H2",{class:!0});var Wqe=s(Uc);HC=n(Wqe,"A",{id:!0,class:!0,href:!0});var k4t=s(HC);WTe=n(k4t,"SPAN",{});var S4t=s(WTe);T(f7.$$.fragment,S4t),S4t.forEach(t),k4t.forEach(t),$Rr=i(Wqe),HTe=n(Wqe,"SPAN",{});var R4t=s(HTe);kRr=r(R4t,"FlaxAutoModelForVision2Seq"),R4t.forEach(t),Wqe.forEach(t),VPe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(m7.$$.fragment,Zl),SRr=i(Zl),Jc=n(Zl,"P",{});var OK=s(Jc);RRr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JJ=n(OK,"A",{href:!0});var B4t=s(JJ);BRr=r(B4t,"from_pretrained()"),B4t.forEach(t),PRr=r(OK," class method or the "),YJ=n(OK,"A",{href:!0});var P4t=s(YJ);IRr=r(P4t,"from_config()"),P4t.forEach(t),qRr=r(OK,` class
method.`),OK.forEach(t),NRr=i(Zl),g7=n(Zl,"P",{});var Hqe=s(g7);jRr=r(Hqe,"This class cannot be instantiated directly using "),UTe=n(Hqe,"CODE",{});var I4t=s(UTe);DRr=r(I4t,"__init__()"),I4t.forEach(t),GRr=r(Hqe," (throws an error)."),Hqe.forEach(t),ORr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var fA=s(Qt);T(h7.$$.fragment,fA),VRr=i(fA),JTe=n(fA,"P",{});var q4t=s(JTe);XRr=r(q4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),q4t.forEach(t),zRr=i(fA),Yc=n(fA,"P",{});var VK=s(Yc);QRr=r(VK,`Note:
Loading a model from its configuration file does `),YTe=n(VK,"STRONG",{});var N4t=s(YTe);WRr=r(N4t,"not"),N4t.forEach(t),HRr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(VK,"A",{href:!0});var j4t=s(KJ);URr=r(j4t,"from_pretrained()"),j4t.forEach(t),JRr=r(VK," to load the model weights."),VK.forEach(t),YRr=i(fA),T(UC.$$.fragment,fA),fA.forEach(t),KRr=i(Zl),Qr=n(Zl,"DIV",{class:!0});var ei=s(Qr);T(p7.$$.fragment,ei),ZRr=i(ei),KTe=n(ei,"P",{});var D4t=s(KTe);eBr=r(D4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),D4t.forEach(t),oBr=i(ei),vn=n(ei,"P",{});var mA=s(vn);rBr=r(mA,"The model class to instantiate is selected based on the "),ZTe=n(mA,"CODE",{});var G4t=s(ZTe);tBr=r(G4t,"model_type"),G4t.forEach(t),aBr=r(mA,` property of the config object (either
passed as an argument or loaded from `),e9e=n(mA,"CODE",{});var O4t=s(e9e);nBr=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),sBr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=n(mA,"CODE",{});var V4t=s(o9e);lBr=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),iBr=r(mA,":"),mA.forEach(t),dBr=i(ei),r9e=n(ei,"UL",{});var X4t=s(r9e);JC=n(X4t,"LI",{});var ORe=s(JC);t9e=n(ORe,"STRONG",{});var z4t=s(t9e);cBr=r(z4t,"vision-encoder-decoder"),z4t.forEach(t),fBr=r(ORe," \u2014 "),ZJ=n(ORe,"A",{href:!0});var Q4t=s(ZJ);mBr=r(Q4t,"FlaxVisionEncoderDecoderModel"),Q4t.forEach(t),gBr=r(ORe," (Vision Encoder decoder model)"),ORe.forEach(t),X4t.forEach(t),hBr=i(ei),T(YC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(HCt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Tn,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoConfig"),c(En,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoModel"),c(Cn,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertModel"),c(nf,"id","extending-the-auto-classes"),c(nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nf,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(lf,"id","transformers.AutoConfig"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(Bx,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Px,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertConfig"),c(Ix,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig"),c(qx,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitConfig"),c(Nx,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertConfig"),c(jx,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Dx,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Gx,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Ox,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Vx,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Xx,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertConfig"),c(zx,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineConfig"),c(Qx,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPConfig"),c(Wx,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertConfig"),c(Hx,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextConfig"),c(Ux,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLConfig"),c(Jx,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Yx,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Kx,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Zx,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaConfig"),c(e$,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(o$,"href","/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(r$,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTConfig"),c(t$,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrConfig"),c(a$,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertConfig"),c(n$,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRConfig"),c(s$,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTConfig"),c(l$,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraConfig"),c(i$,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(d$,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertConfig"),c(c$,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetConfig"),c(f$,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTConfig"),c(m$,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelConfig"),c(g$,"href","/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNConfig"),c(h$,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Config"),c(p$,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(u$,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(_$,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJConfig"),c(b$,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertConfig"),c(v$,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertConfig"),c(F$,"href","/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(T$,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(M$,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(E$,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDConfig"),c(C$,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerConfig"),c(w$,"href","/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeConfig"),c(A$,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertConfig"),c(y$,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Config"),c(L$,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianConfig"),c(x$,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerConfig"),c($$,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartConfig"),c(k$,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(S$,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(R$,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetConfig"),c(B$,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Config"),c(P$,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(I$,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(q$,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusConfig"),c(N$,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverConfig"),c(j$,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartConfig"),c(D$,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(G$,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(O$,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(V$,"href","/docs/transformers/pr_16659/en/model_doc/rag#transformers.RagConfig"),c(X$,"href","/docs/transformers/pr_16659/en/model_doc/realm#transformers.RealmConfig"),c(z$,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerConfig"),c(Q$,"href","/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetConfig"),c(W$,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertConfig"),c(H$,"href","/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetConfig"),c(U$,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertConfig"),c(J$,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaConfig"),c(Y$,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerConfig"),c(K$,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerConfig"),c(Z$,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWConfig"),c(ek,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDConfig"),c(ok,"href","/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(rk,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(tk,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(ak,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterConfig"),c(nk,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(sk,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinConfig"),c(lk,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Config"),c(ik,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasConfig"),c(dk,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartConfig"),c(ck,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(fk,"href","/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRConfig"),c(mk,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(gk,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(hk,"href","/docs/transformers/pr_16659/en/model_doc/van#transformers.VanConfig"),c(pk,"href","/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltConfig"),c(uk,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(_k,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(bk,"href","/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(vk,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTConfig"),c(Fk,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Tk,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Mk,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMConfig"),c(Ek,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMConfig"),c(Ck,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMConfig"),c(wk,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Ak,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(yk,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Lk,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetConfig"),c(xk,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoConfig"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sg,"id","transformers.AutoTokenizer"),c(sg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sg,"href","#transformers.AutoTokenizer"),c(fi,"class","relative group"),c($k,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(kk,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizer"),c(Sk,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Rk,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartTokenizer"),c(Bk,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartTokenizerFast"),c(Pk,"href","/docs/transformers/pr_16659/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Ik,"href","/docs/transformers/pr_16659/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(qk,"href","/docs/transformers/pr_16659/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Nk,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizer"),c(jk,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizerFast"),c(Dk,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Gk,"href","/docs/transformers/pr_16659/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Ok,"href","/docs/transformers/pr_16659/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Vk,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Xk,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(zk,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Qk,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Wk,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Hk,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Uk,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Jk,"href","/docs/transformers/pr_16659/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Yk,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Kk,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Zk,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineTokenizer"),c(eS,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPTokenizer"),c(oS,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(rS,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(tS,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(aS,"href","/docs/transformers/pr_16659/en/model_doc/cpm#transformers.CpmTokenizer"),c(nS,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(sS,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lS,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iS,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaTokenizer"),c(dS,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(cS,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(fS,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(mS,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(gS,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(hS,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(pS,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(uS,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraTokenizer"),c(_S,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(bS,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(vS,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetTokenizer"),c(FS,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(TS,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(MS,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelTokenizer"),c(ES,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(CS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LS,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(xS,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c($S,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(kS,"href","/docs/transformers/pr_16659/en/model_doc/herbert#transformers.HerbertTokenizer"),c(SS,"href","/docs/transformers/pr_16659/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(RS,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BS,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PS,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IS,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(qS,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(NS,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(jS,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(DS,"href","/docs/transformers/pr_16659/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(GS,"href","/docs/transformers/pr_16659/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(OS,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDTokenizer"),c(VS,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDTokenizerFast"),c(XS,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerTokenizer"),c(zS,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(QS,"href","/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeTokenizer"),c(WS,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(HS,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(US,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(JS,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianTokenizer"),c(YS,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartTokenizer"),c(KS,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(ZS,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(eR,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(oR,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizer"),c(rR,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizerFast"),c(tR,"href","/docs/transformers/pr_16659/en/model_doc/mluke#transformers.MLukeTokenizer"),c(aR,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(nR,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(sR,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(lR,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(iR,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.T5Tokenizer"),c(dR,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.T5TokenizerFast"),c(cR,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizer"),c(fR,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mR,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(gR,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(hR,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(pR,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uR,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(_R,"href","/docs/transformers/pr_16659/en/model_doc/phobert#transformers.PhobertTokenizer"),c(bR,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartTokenizer"),c(vR,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(FR,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizer"),c(TR,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizerFast"),c(MR,"href","/docs/transformers/pr_16659/en/model_doc/rag#transformers.RagTokenizer"),c(ER,"href","/docs/transformers/pr_16659/en/model_doc/realm#transformers.RealmTokenizer"),c(CR,"href","/docs/transformers/pr_16659/en/model_doc/realm#transformers.RealmTokenizerFast"),c(wR,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerTokenizer"),c(AR,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(yR,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertTokenizer"),c(LR,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(xR,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertTokenizer"),c($R,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(kR,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SR,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RR,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(BR,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(PR,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(IR,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(qR,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterTokenizer"),c(NR,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(jR,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(DR,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(GR,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.T5Tokenizer"),c(OR,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.T5TokenizerFast"),c(VR,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasTokenizer"),c(XR,"href","/docs/transformers/pr_16659/en/model_doc/tapex#transformers.TapexTokenizer"),c(zR,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(QR,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizer"),c(WR,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertTokenizerFast"),c(HR,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(UR,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(JR,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMTokenizer"),c(YR,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(KR,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMTokenizer"),c(ZR,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(eB,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(oB,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(rB,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizer"),c(tB,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(aB,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(nB,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(sB,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizer"),c(lB,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jg,"id","transformers.AutoFeatureExtractor"),c(jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jg,"href","#transformers.AutoFeatureExtractor"),c(mi,"class","relative group"),c(iB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(dB,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(cB,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(fB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gB,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(hB,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(pB,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(uB,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(_B,"href","/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(bB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(vB,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(FB,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(AB,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($B,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"id","transformers.AutoProcessor"),c(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mh,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(SB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(RB,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPProcessor"),c(BB,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(PB,"href","/docs/transformers/pr_16659/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(IB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NB,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(jB,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(DB,"href","/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRProcessor"),c(GB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VB,"href","/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltProcessor"),c(XB,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(zB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QB,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoModel"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoModel"),c(pi,"class","relative group"),c(WB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UB,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JB,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertModel"),c(YB,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartModel"),c(KB,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitModel"),c(ZB,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertModel"),c(eP,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(oP,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdModel"),c(rP,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(tP,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(aP,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(nP,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertModel"),c(sP,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineModel"),c(lP,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.CLIPModel"),c(iP,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertModel"),c(dP,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextModel"),c(cP,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLModel"),c(fP,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(mP,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(gP,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(hP,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaModel"),c(pP,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(uP,"href","/docs/transformers/pr_16659/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(_P,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTModel"),c(bP,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrModel"),c(vP,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertModel"),c(FP,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(TP,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTModel"),c(MP,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraModel"),c(EP,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertModel"),c(CP,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetModel"),c(wP,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTModel"),c(AP,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelModel"),c(yP,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelBaseModel"),c(LP,"href","/docs/transformers/pr_16659/en/model_doc/glpn#transformers.GLPNModel"),c(xP,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2Model"),c($P,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(kP,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(SP,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJModel"),c(RP,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertModel"),c(BP,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertModel"),c(PP,"href","/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(IP,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(qP,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(NP,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDModel"),c(jP,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerModel"),c(DP,"href","/docs/transformers/pr_16659/en/model_doc/luke#transformers.LukeModel"),c(GP,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertModel"),c(OP,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100Model"),c(VP,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianModel"),c(XP,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerModel"),c(zP,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartModel"),c(QP,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(WP,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertModel"),c(HP,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetModel"),c(UP,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5Model"),c(JP,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerModel"),c(YP,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(KP,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusModel"),c(ZP,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverModel"),c(eI,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartModel"),c(oI,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerModel"),c(rI,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(tI,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertModel"),c(aI,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModel"),c(nI,"href","/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetModel"),c(sI,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertModel"),c(lI,"href","/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetModel"),c(iI,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel"),c(dI,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaModel"),c(cI,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerModel"),c(fI,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerModel"),c(mI,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWModel"),c(gI,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDModel"),c(hI,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(pI,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterModel"),c(uI,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_I,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinModel"),c(bI,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5Model"),c(vI,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasModel"),c(FI,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(TI,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechModel"),c(MI,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(EI,"href","/docs/transformers/pr_16659/en/model_doc/van#transformers.VanModel"),c(CI,"href","/docs/transformers/pr_16659/en/model_doc/vilt#transformers.ViltModel"),c(wI,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(AI,"href","/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yI,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTModel"),c(LI,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(xI,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c($I,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMModel"),c(kI,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMModel"),c(SI,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMModel"),c(RI,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(BI,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(PI,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(II,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetModel"),c(qI,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoModel"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fu,"id","transformers.AutoModelForPreTraining"),c(Fu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fu,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(NI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DI,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GI,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForPreTraining"),c(OI,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(VI,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForPreTraining"),c(XI,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(zI,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(QI,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(WI,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(HI,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(UI,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(JI,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(YI,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForPreTraining"),c(KI,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ZI,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForPreTraining"),c(eq,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(oq,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(rq,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(tq,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(aq,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(nq,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(sq,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(lq,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(iq,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(dq,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(cq,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(fq,"href","/docs/transformers/pr_16659/en/model_doc/retribert#transformers.RetriBertModel"),c(mq,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(gq,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(hq,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(pq,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(uq,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(_q,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(bq,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(vq,"href","/docs/transformers/pr_16659/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Fq,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Tq,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Mq,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Eq,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Cq,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(wq,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d_,"id","transformers.AutoModelForCausalLM"),c(d_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Aq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lq,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xq,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForCausalLM"),c($q,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertLMHeadModel"),c(kq,"href","/docs/transformers/pr_16659/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Sq,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Rq,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Bq,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Pq,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Iq,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(qq,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Nq,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(jq,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Dq,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Gq,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Oq,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Vq,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Xq,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianForCausalLM"),c(zq,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Qq,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Wq,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Hq,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Uq,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Jq,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Yq,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Kq,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Zq,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(eN,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(oN,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(rN,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(tN,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(aN,"href","/docs/transformers/pr_16659/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(nN,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(sN,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(lN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(iN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(dN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(cN,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForMaskedLM"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(fN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hN,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(pN,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uN,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMaskedLM"),c(_N,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(bN,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(vN,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(FN,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(TN,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(MN,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(EN,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(CN,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(wN,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(AN,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(yN,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(LN,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(xN,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c($N,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(kN,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(SN,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(RN,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(BN,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(PN,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(IN,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(qN,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(NN,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(jN,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(DN,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(GN,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(ON,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(VN,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(XN,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(zN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(QN,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(WN,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B6,"id","transformers.AutoModelForSeq2SeqLM"),c(B6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B6,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(HN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JN,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YN,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(KN,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(ZN,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(ej,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(oj,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(rj,"href","/docs/transformers/pr_16659/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_16659/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(nj,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.MarianMTModel"),c(sj,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(lj,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(dj,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(cj,"href","/docs/transformers/pr_16659/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(fj,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(mj,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gj,"href","/docs/transformers/pr_16659/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o1,"id","transformers.AutoModelForSequenceClassification"),c(o1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o1,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(hj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uj,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_j,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(bj,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForSequenceClassification"),c(vj,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Fj,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Tj,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Mj,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(wj,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c($j,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16659/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(nD,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(sD,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(lD,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(iD,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(dD,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K1,"id","transformers.AutoModelForMultipleChoice"),c(K1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K1,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(cD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gD,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(hD,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForMultipleChoice"),c(pD,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(uD,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(_D,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(bD,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(vD,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(FD,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(TD,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(MD,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(ED,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(CD,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(wD,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(AD,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(yD,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(LD,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(xD,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c($D,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(kD,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(SD,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(RD,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(BD,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(PD,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(ID,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(qD,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(ND,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(jD,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(DD,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($b,"id","transformers.AutoModelForNextSentencePrediction"),c($b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($b,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(GD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XD,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(zD,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(QD,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(WD,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(HD,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jb,"id","transformers.AutoModelForTokenClassification"),c(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jb,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(UD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YD,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KD,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(ZD,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForTokenClassification"),c(eG,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(oG,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(rG,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForTokenClassification"),c(tG,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(aG,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(nG,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(sG,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(lG,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(iG,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(dG,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(cG,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(fG,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(mG,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(gG,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(hG,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(pG,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(uG,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(_G,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(bG,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(vG,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(FG,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(TG,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(MG,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(EG,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(CG,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(wG,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(AG,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(yG,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(LG,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(xG,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c($G,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M2,"id","transformers.AutoModelForQuestionAnswering"),c(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M2,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(kG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RG,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BG,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(PG,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(IG,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(qG,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(NG,"href","/docs/transformers/pr_16659/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(jG,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(DG,"href","/docs/transformers/pr_16659/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(GG,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(OG,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(HG,"href","/docs/transformers/pr_16659/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_16659/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_16659/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16659/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16659/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_16659/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_16659/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_16659/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_16659/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(pO,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(bO,"href","/docs/transformers/pr_16659/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f5,"id","transformers.AutoModelForTableQuestionAnswering"),c(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(vO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MO,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.AutoModelForImageClassification"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(EO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AO,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForImageClassification"),c(yO,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(LO,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(xO,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassification"),c($O,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(kO,"href","/docs/transformers/pr_16659/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(SO,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(RO,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(BO,"href","/docs/transformers/pr_16659/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(PO,"href","/docs/transformers/pr_16659/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(IO,"href","/docs/transformers/pr_16659/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(qO,"href","/docs/transformers/pr_16659/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(NO,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(jO,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForImageClassification"),c(DO,"href","/docs/transformers/pr_16659/en/model_doc/van#transformers.VanForImageClassification"),c(GO,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForImageClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.AutoModelForVision2Seq"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(OO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zO,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I5,"id","transformers.AutoModelForAudioClassification"),c(I5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I5,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(QO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(JO,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(YO,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(KO,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(eV,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(oV,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(rV,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H5,"id","transformers.AutoModelForAudioFrameClassification"),c(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H5,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(tV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sV,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(lV,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(iV,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(dV,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rv,"id","transformers.AutoModelForCTC"),c(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rv,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(cV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gV,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(hV,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.HubertForCTC"),c(pV,"href","/docs/transformers/pr_16659/en/model_doc/sew#transformers.SEWForCTC"),c(uV,"href","/docs/transformers/pr_16659/en/model_doc/sew-d#transformers.SEWDForCTC"),c(_V,"href","/docs/transformers/pr_16659/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(bV,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(vV,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(FV,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForCTC"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(TV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CV,"href","/docs/transformers/pr_16659/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(wV,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fv,"id","transformers.AutoModelForAudioXVector"),c(Fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fv,"href","#transformers.AutoModelForAudioXVector"),c(md,"class","relative group"),c(AV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xV,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c($V,"href","/docs/transformers/pr_16659/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(kV,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(SV,"href","/docs/transformers/pr_16659/en/model_doc/wavlm#transformers.WavLMForXVector"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lv,"id","transformers.AutoModelForMaskedImageModeling"),c(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lv,"href","#transformers.AutoModelForMaskedImageModeling"),c(pd,"class","relative group"),c(RV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_16659/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(qV,"href","/docs/transformers/pr_16659/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(NV,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForObjectDetection"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(jV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForObjectDetection"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForImageSegmentation"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(VV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_16659/en/model_doc/detr#transformers.DetrForSegmentation"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForSemanticSegmentation"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(WV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(YV,"href","/docs/transformers/pr_16659/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(KV,"href","/docs/transformers/pr_16659/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(ZV,"href","/docs/transformers/pr_16659/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zv,"id","transformers.AutoModelForInstanceSegmentation"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(eX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_16659/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aF,"id","transformers.TFAutoModel"),c(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aF,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(aX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertModel"),c(iX,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartModel"),c(dX,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertModel"),c(cX,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(fX,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(mX,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertModel"),c(gX,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.TFCLIPModel"),c(hX,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertModel"),c(pX,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextModel"),c(uX,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLModel"),c(_X,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaModel"),c(bX,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(vX,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(FX,"href","/docs/transformers/pr_16659/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(TX,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraModel"),c(MX,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(EX,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelModel"),c(CX,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(wX,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2Model"),c(AX,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJModel"),c(yX,"href","/docs/transformers/pr_16659/en/model_doc/hubert#transformers.TFHubertModel"),c(LX,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(xX,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDModel"),c($X,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerModel"),c(kX,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertModel"),c(SX,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianModel"),c(RX,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartModel"),c(BX,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(PX,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetModel"),c(IX,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5Model"),c(qX,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(NX,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusModel"),c(jX,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertModel"),c(DX,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaModel"),c(GX,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerModel"),c(OX,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(VX,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5Model"),c(XX,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasModel"),c(zX,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(QX,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTModel"),c(WX,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(HX,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(UX,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMModel"),c(JX,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(YX,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.TFAutoModelForPreTraining"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(KX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(rz,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(tz,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForPreTraining"),c(az,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(nz,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(sz,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(lz,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(iz,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(dz,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(cz,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(fz,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(mz,"href","/docs/transformers/pr_16659/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(gz,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(hz,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(pz,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(uz,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(_z,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(bz,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(vz,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Fz,"href","/docs/transformers/pr_16659/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Tz,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Mz,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ez,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MT,"id","transformers.TFAutoModelForCausalLM"),c(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MT,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(Cz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Lz,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(xz,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c($z,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(kz,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Sz,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Rz,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Bz,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Pz,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Iz,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qz,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Nz,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.TFAutoModelForImageClassification"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(jz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_16659/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(Vz,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.TFViTForImageClassification"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.TFAutoModelForMaskedLM"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.TFAutoModelForMaskedLM"),c(Vd,"class","relative group"),c(Xz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Hz,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Uz,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Jz,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Yz,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(Kz,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(Zz,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(eQ,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(oQ,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(rQ,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(tQ,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(aQ,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(nQ,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(sQ,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(lQ,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(iQ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(dQ,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(cQ,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(fQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(mQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(f9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Qd,"class","relative group"),c(gQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uQ,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(_Q,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(bQ,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(vQ,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(FQ,"href","/docs/transformers/pr_16659/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(TQ,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.TFMarianMTModel"),c(MQ,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(EQ,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(CQ,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(wQ,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C9,"id","transformers.TFAutoModelForSequenceClassification"),c(C9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C9,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ud,"class","relative group"),c(AQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LQ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c($Q,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(kQ,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(SQ,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(RQ,"href","/docs/transformers/pr_16659/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(BQ,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(PQ,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(IQ,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(qQ,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(NQ,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(jQ,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_16659/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_16659/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(eW,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z9,"id","transformers.TFAutoModelForMultipleChoice"),c(Z9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z9,"href","#transformers.TFAutoModelForMultipleChoice"),c(Kd,"class","relative group"),c(oW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(nW,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(sW,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(lW,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(iW,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(dW,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(cW,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(fW,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(mW,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(gW,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(hW,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(pW,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(uW,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(_W,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(bW,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(vW,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(FW,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(oc,"class","relative group"),c(TW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_16659/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.TFAutoModelForTokenClassification"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.TFAutoModelForTokenClassification"),c(ac,"class","relative group"),c(wW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(xW,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForTokenClassification"),c($W,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(kW,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(SW,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(RW,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(BW,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(PW,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(IW,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(qW,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(NW,"href","/docs/transformers/pr_16659/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(jW,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(DW,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(GW,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(OW,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(VW,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(XW,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(zW,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(QW,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(WW,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QM,"id","transformers.TFAutoModelForQuestionAnswering"),c(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(lc,"class","relative group"),c(HW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(KW,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(ZW,"href","/docs/transformers/pr_16659/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_16659/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_16659/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_16659/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_16659/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(sH,"href","/docs/transformers/pr_16659/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_16659/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_16659/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_16659/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_16659/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(mH,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(gH,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(hH,"href","/docs/transformers/pr_16659/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(pH,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_16659/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForVision2Seq"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForVision2Seq"),c(cc,"class","relative group"),c(_H,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(gc,"class","relative group"),c(TH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_16659/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.FlaxAutoModel"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.FlaxAutoModel"),c(uc,"class","relative group"),c(wH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LH,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertModel"),c(xH,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartModel"),c($H,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitModel"),c(kH,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertModel"),c(SH,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(RH,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(BH,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(PH,"href","/docs/transformers/pr_16659/en/model_doc/clip#transformers.FlaxCLIPModel"),c(IH,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(qH,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraModel"),c(NH,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(jH,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(DH,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(GH,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianModel"),c(OH,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartModel"),c(VH,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5Model"),c(XH,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(zH,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(QH,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(WH,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5Model"),c(HH,"href","/docs/transformers/pr_16659/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(UH,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTModel"),c(JH,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(YH,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(KH,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y4,"id","transformers.FlaxAutoModelForCausalLM"),c(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y4,"href","#transformers.FlaxAutoModelForCausalLM"),c(vc,"class","relative group"),c(ZH,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(tU,"href","/docs/transformers/pr_16659/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(aU,"href","/docs/transformers/pr_16659/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(nU,"href","/docs/transformers/pr_16659/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(sU,"href","/docs/transformers/pr_16659/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nE,"id","transformers.FlaxAutoModelForPreTraining"),c(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Mc,"class","relative group"),c(lU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(fU,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(mU,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(gU,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(hU,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(pU,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(uU,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(_U,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(bU,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(vU,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(FU,"href","/docs/transformers/pr_16659/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(TU,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.FlaxAutoModelForMaskedLM"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(wc,"class","relative group"),c(MU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(AU,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yU,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(LU,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(xU,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c($U,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(kU,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SU,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(RU,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(BU,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(PU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(jU,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(DU,"href","/docs/transformers/pr_16659/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(GU,"href","/docs/transformers/pr_16659/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(OU,"href","/docs/transformers/pr_16659/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(VU,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XU,"href","/docs/transformers/pr_16659/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zU,"href","/docs/transformers/pr_16659/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(QU,"href","/docs/transformers/pr_16659/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.FlaxAutoModelForSequenceClassification"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(WU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(YU,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(KU,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(ZU,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(rJ,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(tJ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(aJ,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(nJ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(sJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dJ,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_16659/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_16659/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_C,"id","transformers.FlaxAutoModelForTokenClassification"),c(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_C,"href","#transformers.FlaxAutoModelForTokenClassification"),c(qc,"class","relative group"),c(vJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(EJ,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(CJ,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(wJ,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(AJ,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(yJ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(LJ,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(xJ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Dc,"class","relative group"),c($J,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RJ,"href","/docs/transformers/pr_16659/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(BJ,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(PJ,"href","/docs/transformers/pr_16659/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(IJ,"href","/docs/transformers/pr_16659/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(qJ,"href","/docs/transformers/pr_16659/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(NJ,"href","/docs/transformers/pr_16659/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(jJ,"href","/docs/transformers/pr_16659/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(DJ,"href","/docs/transformers/pr_16659/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Vc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_16659/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.FlaxAutoModelForImageClassification"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Qc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_16659/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(UJ,"href","/docs/transformers/pr_16659/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.FlaxAutoModelForVision2Seq"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_16659/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_16659/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Fo),e(Fo,oi),b(f,of,_),b(f,Yr,_),e(Yr,ri),e(Yr,ti),e(ti,gA),e(Yr,rf),b(f,Ie,_),b(f,Oe,_),e(Oe,ai),e(Oe,Tn),e(Tn,hA),e(Oe,Mn),e(Oe,En),e(En,pA),e(Oe,ni),e(Oe,Cn),e(Cn,uA),e(Oe,si),b(f,tf,_),M(ba,f,_),b(f,Ve,_),b(f,Ae,_),e(Ae,Lx),e(Ae,li),e(li,xx),e(Ae,$x),b(f,To,_),b(f,va,_),e(va,kx),e(va,af),e(af,Sx),e(va,Uqe),b(f,VRe,_),b(f,ii,_),e(ii,nf),e(nf,XK),M(_A,XK,null),e(ii,Jqe),e(ii,zK),e(zK,Yqe),b(f,XRe,_),b(f,wn,_),e(wn,Kqe),e(wn,QK),e(QK,Zqe),e(wn,eNe),e(wn,WK),e(WK,oNe),e(wn,rNe),b(f,zRe,_),M(bA,f,_),b(f,QRe,_),b(f,Rx,_),e(Rx,tNe),b(f,WRe,_),M(sf,f,_),b(f,HRe,_),b(f,di,_),e(di,lf),e(lf,HK),M(vA,HK,null),e(di,aNe),e(di,UK),e(UK,nNe),b(f,URe,_),b(f,Mo,_),M(FA,Mo,null),e(Mo,sNe),e(Mo,TA),e(TA,lNe),e(TA,Bx),e(Bx,iNe),e(TA,dNe),e(Mo,cNe),e(Mo,MA),e(MA,fNe),e(MA,JK),e(JK,mNe),e(MA,gNe),e(Mo,hNe),e(Mo,Fr),M(EA,Fr,null),e(Fr,pNe),e(Fr,YK),e(YK,uNe),e(Fr,_Ne),e(Fr,ci),e(ci,bNe),e(ci,KK),e(KK,vNe),e(ci,FNe),e(ci,ZK),e(ZK,TNe),e(ci,MNe),e(Fr,ENe),e(Fr,A),e(A,df),e(df,eZ),e(eZ,CNe),e(df,wNe),e(df,Px),e(Px,ANe),e(df,yNe),e(A,LNe),e(A,cf),e(cf,oZ),e(oZ,xNe),e(cf,$Ne),e(cf,Ix),e(Ix,kNe),e(cf,SNe),e(A,RNe),e(A,ff),e(ff,rZ),e(rZ,BNe),e(ff,PNe),e(ff,qx),e(qx,INe),e(ff,qNe),e(A,NNe),e(A,mf),e(mf,tZ),e(tZ,jNe),e(mf,DNe),e(mf,Nx),e(Nx,GNe),e(mf,ONe),e(A,VNe),e(A,gf),e(gf,aZ),e(aZ,XNe),e(gf,zNe),e(gf,jx),e(jx,QNe),e(gf,WNe),e(A,HNe),e(A,hf),e(hf,nZ),e(nZ,UNe),e(hf,JNe),e(hf,Dx),e(Dx,YNe),e(hf,KNe),e(A,ZNe),e(A,pf),e(pf,sZ),e(sZ,eje),e(pf,oje),e(pf,Gx),e(Gx,rje),e(pf,tje),e(A,aje),e(A,uf),e(uf,lZ),e(lZ,nje),e(uf,sje),e(uf,Ox),e(Ox,lje),e(uf,ije),e(A,dje),e(A,_f),e(_f,iZ),e(iZ,cje),e(_f,fje),e(_f,Vx),e(Vx,mje),e(_f,gje),e(A,hje),e(A,bf),e(bf,dZ),e(dZ,pje),e(bf,uje),e(bf,Xx),e(Xx,_je),e(bf,bje),e(A,vje),e(A,vf),e(vf,cZ),e(cZ,Fje),e(vf,Tje),e(vf,zx),e(zx,Mje),e(vf,Eje),e(A,Cje),e(A,Ff),e(Ff,fZ),e(fZ,wje),e(Ff,Aje),e(Ff,Qx),e(Qx,yje),e(Ff,Lje),e(A,xje),e(A,Tf),e(Tf,mZ),e(mZ,$je),e(Tf,kje),e(Tf,Wx),e(Wx,Sje),e(Tf,Rje),e(A,Bje),e(A,Mf),e(Mf,gZ),e(gZ,Pje),e(Mf,Ije),e(Mf,Hx),e(Hx,qje),e(Mf,Nje),e(A,jje),e(A,Ef),e(Ef,hZ),e(hZ,Dje),e(Ef,Gje),e(Ef,Ux),e(Ux,Oje),e(Ef,Vje),e(A,Xje),e(A,Cf),e(Cf,pZ),e(pZ,zje),e(Cf,Qje),e(Cf,Jx),e(Jx,Wje),e(Cf,Hje),e(A,Uje),e(A,wf),e(wf,uZ),e(uZ,Jje),e(wf,Yje),e(wf,Yx),e(Yx,Kje),e(wf,Zje),e(A,eDe),e(A,Af),e(Af,_Z),e(_Z,oDe),e(Af,rDe),e(Af,Kx),e(Kx,tDe),e(Af,aDe),e(A,nDe),e(A,yf),e(yf,bZ),e(bZ,sDe),e(yf,lDe),e(yf,Zx),e(Zx,iDe),e(yf,dDe),e(A,cDe),e(A,Lf),e(Lf,vZ),e(vZ,fDe),e(Lf,mDe),e(Lf,e$),e(e$,gDe),e(Lf,hDe),e(A,pDe),e(A,xf),e(xf,FZ),e(FZ,uDe),e(xf,_De),e(xf,o$),e(o$,bDe),e(xf,vDe),e(A,FDe),e(A,$f),e($f,TZ),e(TZ,TDe),e($f,MDe),e($f,r$),e(r$,EDe),e($f,CDe),e(A,wDe),e(A,kf),e(kf,MZ),e(MZ,ADe),e(kf,yDe),e(kf,t$),e(t$,LDe),e(kf,xDe),e(A,$De),e(A,Sf),e(Sf,EZ),e(EZ,kDe),e(Sf,SDe),e(Sf,a$),e(a$,RDe),e(Sf,BDe),e(A,PDe),e(A,Rf),e(Rf,CZ),e(CZ,IDe),e(Rf,qDe),e(Rf,n$),e(n$,NDe),e(Rf,jDe),e(A,DDe),e(A,Bf),e(Bf,wZ),e(wZ,GDe),e(Bf,ODe),e(Bf,s$),e(s$,VDe),e(Bf,XDe),e(A,zDe),e(A,Pf),e(Pf,AZ),e(AZ,QDe),e(Pf,WDe),e(Pf,l$),e(l$,HDe),e(Pf,UDe),e(A,JDe),e(A,If),e(If,yZ),e(yZ,YDe),e(If,KDe),e(If,i$),e(i$,ZDe),e(If,eGe),e(A,oGe),e(A,qf),e(qf,LZ),e(LZ,rGe),e(qf,tGe),e(qf,d$),e(d$,aGe),e(qf,nGe),e(A,sGe),e(A,Nf),e(Nf,xZ),e(xZ,lGe),e(Nf,iGe),e(Nf,c$),e(c$,dGe),e(Nf,cGe),e(A,fGe),e(A,jf),e(jf,$Z),e($Z,mGe),e(jf,gGe),e(jf,f$),e(f$,hGe),e(jf,pGe),e(A,uGe),e(A,Df),e(Df,kZ),e(kZ,_Ge),e(Df,bGe),e(Df,m$),e(m$,vGe),e(Df,FGe),e(A,TGe),e(A,Gf),e(Gf,SZ),e(SZ,MGe),e(Gf,EGe),e(Gf,g$),e(g$,CGe),e(Gf,wGe),e(A,AGe),e(A,Of),e(Of,RZ),e(RZ,yGe),e(Of,LGe),e(Of,h$),e(h$,xGe),e(Of,$Ge),e(A,kGe),e(A,Vf),e(Vf,BZ),e(BZ,SGe),e(Vf,RGe),e(Vf,p$),e(p$,BGe),e(Vf,PGe),e(A,IGe),e(A,Xf),e(Xf,PZ),e(PZ,qGe),e(Xf,NGe),e(Xf,u$),e(u$,jGe),e(Xf,DGe),e(A,GGe),e(A,zf),e(zf,IZ),e(IZ,OGe),e(zf,VGe),e(zf,_$),e(_$,XGe),e(zf,zGe),e(A,QGe),e(A,Qf),e(Qf,qZ),e(qZ,WGe),e(Qf,HGe),e(Qf,b$),e(b$,UGe),e(Qf,JGe),e(A,YGe),e(A,Wf),e(Wf,NZ),e(NZ,KGe),e(Wf,ZGe),e(Wf,v$),e(v$,eOe),e(Wf,oOe),e(A,rOe),e(A,Hf),e(Hf,jZ),e(jZ,tOe),e(Hf,aOe),e(Hf,F$),e(F$,nOe),e(Hf,sOe),e(A,lOe),e(A,Uf),e(Uf,DZ),e(DZ,iOe),e(Uf,dOe),e(Uf,T$),e(T$,cOe),e(Uf,fOe),e(A,mOe),e(A,Jf),e(Jf,GZ),e(GZ,gOe),e(Jf,hOe),e(Jf,M$),e(M$,pOe),e(Jf,uOe),e(A,_Oe),e(A,Yf),e(Yf,OZ),e(OZ,bOe),e(Yf,vOe),e(Yf,E$),e(E$,FOe),e(Yf,TOe),e(A,MOe),e(A,Kf),e(Kf,VZ),e(VZ,EOe),e(Kf,COe),e(Kf,C$),e(C$,wOe),e(Kf,AOe),e(A,yOe),e(A,Zf),e(Zf,XZ),e(XZ,LOe),e(Zf,xOe),e(Zf,w$),e(w$,$Oe),e(Zf,kOe),e(A,SOe),e(A,em),e(em,zZ),e(zZ,ROe),e(em,BOe),e(em,A$),e(A$,POe),e(em,IOe),e(A,qOe),e(A,om),e(om,QZ),e(QZ,NOe),e(om,jOe),e(om,y$),e(y$,DOe),e(om,GOe),e(A,OOe),e(A,rm),e(rm,WZ),e(WZ,VOe),e(rm,XOe),e(rm,L$),e(L$,zOe),e(rm,QOe),e(A,WOe),e(A,tm),e(tm,HZ),e(HZ,HOe),e(tm,UOe),e(tm,x$),e(x$,JOe),e(tm,YOe),e(A,KOe),e(A,am),e(am,UZ),e(UZ,ZOe),e(am,eVe),e(am,$$),e($$,oVe),e(am,rVe),e(A,tVe),e(A,nm),e(nm,JZ),e(JZ,aVe),e(nm,nVe),e(nm,k$),e(k$,sVe),e(nm,lVe),e(A,iVe),e(A,sm),e(sm,YZ),e(YZ,dVe),e(sm,cVe),e(sm,S$),e(S$,fVe),e(sm,mVe),e(A,gVe),e(A,lm),e(lm,KZ),e(KZ,hVe),e(lm,pVe),e(lm,R$),e(R$,uVe),e(lm,_Ve),e(A,bVe),e(A,im),e(im,ZZ),e(ZZ,vVe),e(im,FVe),e(im,B$),e(B$,TVe),e(im,MVe),e(A,EVe),e(A,dm),e(dm,eee),e(eee,CVe),e(dm,wVe),e(dm,P$),e(P$,AVe),e(dm,yVe),e(A,LVe),e(A,cm),e(cm,oee),e(oee,xVe),e(cm,$Ve),e(cm,I$),e(I$,kVe),e(cm,SVe),e(A,RVe),e(A,fm),e(fm,ree),e(ree,BVe),e(fm,PVe),e(fm,q$),e(q$,IVe),e(fm,qVe),e(A,NVe),e(A,mm),e(mm,tee),e(tee,jVe),e(mm,DVe),e(mm,N$),e(N$,GVe),e(mm,OVe),e(A,VVe),e(A,gm),e(gm,aee),e(aee,XVe),e(gm,zVe),e(gm,j$),e(j$,QVe),e(gm,WVe),e(A,HVe),e(A,hm),e(hm,nee),e(nee,UVe),e(hm,JVe),e(hm,D$),e(D$,YVe),e(hm,KVe),e(A,ZVe),e(A,pm),e(pm,see),e(see,eXe),e(pm,oXe),e(pm,G$),e(G$,rXe),e(pm,tXe),e(A,aXe),e(A,um),e(um,lee),e(lee,nXe),e(um,sXe),e(um,O$),e(O$,lXe),e(um,iXe),e(A,dXe),e(A,_m),e(_m,iee),e(iee,cXe),e(_m,fXe),e(_m,V$),e(V$,mXe),e(_m,gXe),e(A,hXe),e(A,bm),e(bm,dee),e(dee,pXe),e(bm,uXe),e(bm,X$),e(X$,_Xe),e(bm,bXe),e(A,vXe),e(A,vm),e(vm,cee),e(cee,FXe),e(vm,TXe),e(vm,z$),e(z$,MXe),e(vm,EXe),e(A,CXe),e(A,Fm),e(Fm,fee),e(fee,wXe),e(Fm,AXe),e(Fm,Q$),e(Q$,yXe),e(Fm,LXe),e(A,xXe),e(A,Tm),e(Tm,mee),e(mee,$Xe),e(Tm,kXe),e(Tm,W$),e(W$,SXe),e(Tm,RXe),e(A,BXe),e(A,Mm),e(Mm,gee),e(gee,PXe),e(Mm,IXe),e(Mm,H$),e(H$,qXe),e(Mm,NXe),e(A,jXe),e(A,Em),e(Em,hee),e(hee,DXe),e(Em,GXe),e(Em,U$),e(U$,OXe),e(Em,VXe),e(A,XXe),e(A,Cm),e(Cm,pee),e(pee,zXe),e(Cm,QXe),e(Cm,J$),e(J$,WXe),e(Cm,HXe),e(A,UXe),e(A,wm),e(wm,uee),e(uee,JXe),e(wm,YXe),e(wm,Y$),e(Y$,KXe),e(wm,ZXe),e(A,eze),e(A,Am),e(Am,_ee),e(_ee,oze),e(Am,rze),e(Am,K$),e(K$,tze),e(Am,aze),e(A,nze),e(A,ym),e(ym,bee),e(bee,sze),e(ym,lze),e(ym,Z$),e(Z$,ize),e(ym,dze),e(A,cze),e(A,Lm),e(Lm,vee),e(vee,fze),e(Lm,mze),e(Lm,ek),e(ek,gze),e(Lm,hze),e(A,pze),e(A,xm),e(xm,Fee),e(Fee,uze),e(xm,_ze),e(xm,ok),e(ok,bze),e(xm,vze),e(A,Fze),e(A,$m),e($m,Tee),e(Tee,Tze),e($m,Mze),e($m,rk),e(rk,Eze),e($m,Cze),e(A,wze),e(A,km),e(km,Mee),e(Mee,Aze),e(km,yze),e(km,tk),e(tk,Lze),e(km,xze),e(A,$ze),e(A,Sm),e(Sm,Eee),e(Eee,kze),e(Sm,Sze),e(Sm,ak),e(ak,Rze),e(Sm,Bze),e(A,Pze),e(A,Rm),e(Rm,Cee),e(Cee,Ize),e(Rm,qze),e(Rm,nk),e(nk,Nze),e(Rm,jze),e(A,Dze),e(A,Bm),e(Bm,wee),e(wee,Gze),e(Bm,Oze),e(Bm,sk),e(sk,Vze),e(Bm,Xze),e(A,zze),e(A,Pm),e(Pm,Aee),e(Aee,Qze),e(Pm,Wze),e(Pm,lk),e(lk,Hze),e(Pm,Uze),e(A,Jze),e(A,Im),e(Im,yee),e(yee,Yze),e(Im,Kze),e(Im,ik),e(ik,Zze),e(Im,eQe),e(A,oQe),e(A,qm),e(qm,Lee),e(Lee,rQe),e(qm,tQe),e(qm,dk),e(dk,aQe),e(qm,nQe),e(A,sQe),e(A,Nm),e(Nm,xee),e(xee,lQe),e(Nm,iQe),e(Nm,ck),e(ck,dQe),e(Nm,cQe),e(A,fQe),e(A,jm),e(jm,$ee),e($ee,mQe),e(jm,gQe),e(jm,fk),e(fk,hQe),e(jm,pQe),e(A,uQe),e(A,Dm),e(Dm,kee),e(kee,_Qe),e(Dm,bQe),e(Dm,mk),e(mk,vQe),e(Dm,FQe),e(A,TQe),e(A,Gm),e(Gm,See),e(See,MQe),e(Gm,EQe),e(Gm,gk),e(gk,CQe),e(Gm,wQe),e(A,AQe),e(A,Om),e(Om,Ree),e(Ree,yQe),e(Om,LQe),e(Om,hk),e(hk,xQe),e(Om,$Qe),e(A,kQe),e(A,Vm),e(Vm,Bee),e(Bee,SQe),e(Vm,RQe),e(Vm,pk),e(pk,BQe),e(Vm,PQe),e(A,IQe),e(A,Xm),e(Xm,Pee),e(Pee,qQe),e(Xm,NQe),e(Xm,uk),e(uk,jQe),e(Xm,DQe),e(A,GQe),e(A,zm),e(zm,Iee),e(Iee,OQe),e(zm,VQe),e(zm,_k),e(_k,XQe),e(zm,zQe),e(A,QQe),e(A,Qm),e(Qm,qee),e(qee,WQe),e(Qm,HQe),e(Qm,bk),e(bk,UQe),e(Qm,JQe),e(A,YQe),e(A,Wm),e(Wm,Nee),e(Nee,KQe),e(Wm,ZQe),e(Wm,vk),e(vk,eWe),e(Wm,oWe),e(A,rWe),e(A,Hm),e(Hm,jee),e(jee,tWe),e(Hm,aWe),e(Hm,Fk),e(Fk,nWe),e(Hm,sWe),e(A,lWe),e(A,Um),e(Um,Dee),e(Dee,iWe),e(Um,dWe),e(Um,Tk),e(Tk,cWe),e(Um,fWe),e(A,mWe),e(A,Jm),e(Jm,Gee),e(Gee,gWe),e(Jm,hWe),e(Jm,Mk),e(Mk,pWe),e(Jm,uWe),e(A,_We),e(A,Ym),e(Ym,Oee),e(Oee,bWe),e(Ym,vWe),e(Ym,Ek),e(Ek,FWe),e(Ym,TWe),e(A,MWe),e(A,Km),e(Km,Vee),e(Vee,EWe),e(Km,CWe),e(Km,Ck),e(Ck,wWe),e(Km,AWe),e(A,yWe),e(A,Zm),e(Zm,Xee),e(Xee,LWe),e(Zm,xWe),e(Zm,wk),e(wk,$We),e(Zm,kWe),e(A,SWe),e(A,eg),e(eg,zee),e(zee,RWe),e(eg,BWe),e(eg,Ak),e(Ak,PWe),e(eg,IWe),e(A,qWe),e(A,og),e(og,Qee),e(Qee,NWe),e(og,jWe),e(og,yk),e(yk,DWe),e(og,GWe),e(A,OWe),e(A,rg),e(rg,Wee),e(Wee,VWe),e(rg,XWe),e(rg,Lk),e(Lk,zWe),e(rg,QWe),e(A,WWe),e(A,tg),e(tg,Hee),e(Hee,HWe),e(tg,UWe),e(tg,xk),e(xk,JWe),e(tg,YWe),e(Fr,KWe),M(ag,Fr,null),e(Mo,ZWe),e(Mo,ng),M(CA,ng,null),e(ng,eHe),e(ng,Uee),e(Uee,oHe),b(f,JRe,_),b(f,fi,_),e(fi,sg),e(sg,Jee),M(wA,Jee,null),e(fi,rHe),e(fi,Yee),e(Yee,tHe),b(f,YRe,_),b(f,Eo,_),M(AA,Eo,null),e(Eo,aHe),e(Eo,yA),e(yA,nHe),e(yA,$k),e($k,sHe),e(yA,lHe),e(Eo,iHe),e(Eo,LA),e(LA,dHe),e(LA,Kee),e(Kee,cHe),e(LA,fHe),e(Eo,mHe),e(Eo,Tr),M(xA,Tr,null),e(Tr,gHe),e(Tr,Zee),e(Zee,hHe),e(Tr,pHe),e(Tr,Fa),e(Fa,uHe),e(Fa,eoe),e(eoe,_He),e(Fa,bHe),e(Fa,ooe),e(ooe,vHe),e(Fa,FHe),e(Fa,roe),e(roe,THe),e(Fa,MHe),e(Tr,EHe),e(Tr,k),e(k,An),e(An,toe),e(toe,CHe),e(An,wHe),e(An,kk),e(kk,AHe),e(An,yHe),e(An,Sk),e(Sk,LHe),e(An,xHe),e(k,$He),e(k,yn),e(yn,aoe),e(aoe,kHe),e(yn,SHe),e(yn,Rk),e(Rk,RHe),e(yn,BHe),e(yn,Bk),e(Bk,PHe),e(yn,IHe),e(k,qHe),e(k,Ln),e(Ln,noe),e(noe,NHe),e(Ln,jHe),e(Ln,Pk),e(Pk,DHe),e(Ln,GHe),e(Ln,Ik),e(Ik,OHe),e(Ln,VHe),e(k,XHe),e(k,lg),e(lg,soe),e(soe,zHe),e(lg,QHe),e(lg,qk),e(qk,WHe),e(lg,HHe),e(k,UHe),e(k,xn),e(xn,loe),e(loe,JHe),e(xn,YHe),e(xn,Nk),e(Nk,KHe),e(xn,ZHe),e(xn,jk),e(jk,eUe),e(xn,oUe),e(k,rUe),e(k,ig),e(ig,ioe),e(ioe,tUe),e(ig,aUe),e(ig,Dk),e(Dk,nUe),e(ig,sUe),e(k,lUe),e(k,dg),e(dg,doe),e(doe,iUe),e(dg,dUe),e(dg,Gk),e(Gk,cUe),e(dg,fUe),e(k,mUe),e(k,cg),e(cg,coe),e(coe,gUe),e(cg,hUe),e(cg,Ok),e(Ok,pUe),e(cg,uUe),e(k,_Ue),e(k,$n),e($n,foe),e(foe,bUe),e($n,vUe),e($n,Vk),e(Vk,FUe),e($n,TUe),e($n,Xk),e(Xk,MUe),e($n,EUe),e(k,CUe),e(k,kn),e(kn,moe),e(moe,wUe),e(kn,AUe),e(kn,zk),e(zk,yUe),e(kn,LUe),e(kn,Qk),e(Qk,xUe),e(kn,$Ue),e(k,kUe),e(k,Sn),e(Sn,goe),e(goe,SUe),e(Sn,RUe),e(Sn,Wk),e(Wk,BUe),e(Sn,PUe),e(Sn,Hk),e(Hk,IUe),e(Sn,qUe),e(k,NUe),e(k,fg),e(fg,hoe),e(hoe,jUe),e(fg,DUe),e(fg,Uk),e(Uk,GUe),e(fg,OUe),e(k,VUe),e(k,mg),e(mg,poe),e(poe,XUe),e(mg,zUe),e(mg,Jk),e(Jk,QUe),e(mg,WUe),e(k,HUe),e(k,Rn),e(Rn,uoe),e(uoe,UUe),e(Rn,JUe),e(Rn,Yk),e(Yk,YUe),e(Rn,KUe),e(Rn,Kk),e(Kk,ZUe),e(Rn,eJe),e(k,oJe),e(k,gg),e(gg,_oe),e(_oe,rJe),e(gg,tJe),e(gg,Zk),e(Zk,aJe),e(gg,nJe),e(k,sJe),e(k,Bn),e(Bn,boe),e(boe,lJe),e(Bn,iJe),e(Bn,eS),e(eS,dJe),e(Bn,cJe),e(Bn,oS),e(oS,fJe),e(Bn,mJe),e(k,gJe),e(k,Pn),e(Pn,voe),e(voe,hJe),e(Pn,pJe),e(Pn,rS),e(rS,uJe),e(Pn,_Je),e(Pn,tS),e(tS,bJe),e(Pn,vJe),e(k,FJe),e(k,In),e(In,Foe),e(Foe,TJe),e(In,MJe),e(In,aS),e(aS,EJe),e(In,CJe),e(In,Toe),e(Toe,wJe),e(In,AJe),e(k,yJe),e(k,hg),e(hg,Moe),e(Moe,LJe),e(hg,xJe),e(hg,nS),e(nS,$Je),e(hg,kJe),e(k,SJe),e(k,qn),e(qn,Eoe),e(Eoe,RJe),e(qn,BJe),e(qn,sS),e(sS,PJe),e(qn,IJe),e(qn,lS),e(lS,qJe),e(qn,NJe),e(k,jJe),e(k,Nn),e(Nn,Coe),e(Coe,DJe),e(Nn,GJe),e(Nn,iS),e(iS,OJe),e(Nn,VJe),e(Nn,dS),e(dS,XJe),e(Nn,zJe),e(k,QJe),e(k,jn),e(jn,woe),e(woe,WJe),e(jn,HJe),e(jn,cS),e(cS,UJe),e(jn,JJe),e(jn,fS),e(fS,YJe),e(jn,KJe),e(k,ZJe),e(k,Dn),e(Dn,Aoe),e(Aoe,eYe),e(Dn,oYe),e(Dn,mS),e(mS,rYe),e(Dn,tYe),e(Dn,gS),e(gS,aYe),e(Dn,nYe),e(k,sYe),e(k,Gn),e(Gn,yoe),e(yoe,lYe),e(Gn,iYe),e(Gn,hS),e(hS,dYe),e(Gn,cYe),e(Gn,pS),e(pS,fYe),e(Gn,mYe),e(k,gYe),e(k,On),e(On,Loe),e(Loe,hYe),e(On,pYe),e(On,uS),e(uS,uYe),e(On,_Ye),e(On,_S),e(_S,bYe),e(On,vYe),e(k,FYe),e(k,pg),e(pg,xoe),e(xoe,TYe),e(pg,MYe),e(pg,bS),e(bS,EYe),e(pg,CYe),e(k,wYe),e(k,Vn),e(Vn,$oe),e($oe,AYe),e(Vn,yYe),e(Vn,vS),e(vS,LYe),e(Vn,xYe),e(Vn,FS),e(FS,$Ye),e(Vn,kYe),e(k,SYe),e(k,ug),e(ug,koe),e(koe,RYe),e(ug,BYe),e(ug,TS),e(TS,PYe),e(ug,IYe),e(k,qYe),e(k,Xn),e(Xn,Soe),e(Soe,NYe),e(Xn,jYe),e(Xn,MS),e(MS,DYe),e(Xn,GYe),e(Xn,ES),e(ES,OYe),e(Xn,VYe),e(k,XYe),e(k,zn),e(zn,Roe),e(Roe,zYe),e(zn,QYe),e(zn,CS),e(CS,WYe),e(zn,HYe),e(zn,wS),e(wS,UYe),e(zn,JYe),e(k,YYe),e(k,Qn),e(Qn,Boe),e(Boe,KYe),e(Qn,ZYe),e(Qn,AS),e(AS,eKe),e(Qn,oKe),e(Qn,yS),e(yS,rKe),e(Qn,tKe),e(k,aKe),e(k,_g),e(_g,Poe),e(Poe,nKe),e(_g,sKe),e(_g,LS),e(LS,lKe),e(_g,iKe),e(k,dKe),e(k,Wn),e(Wn,Ioe),e(Ioe,cKe),e(Wn,fKe),e(Wn,xS),e(xS,mKe),e(Wn,gKe),e(Wn,$S),e($S,hKe),e(Wn,pKe),e(k,uKe),e(k,Hn),e(Hn,qoe),e(qoe,_Ke),e(Hn,bKe),e(Hn,kS),e(kS,vKe),e(Hn,FKe),e(Hn,SS),e(SS,TKe),e(Hn,MKe),e(k,EKe),e(k,bg),e(bg,Noe),e(Noe,CKe),e(bg,wKe),e(bg,RS),e(RS,AKe),e(bg,yKe),e(k,LKe),e(k,Un),e(Un,joe),e(joe,xKe),e(Un,$Ke),e(Un,BS),e(BS,kKe),e(Un,SKe),e(Un,PS),e(PS,RKe),e(Un,BKe),e(k,PKe),e(k,Jn),e(Jn,Doe),e(Doe,IKe),e(Jn,qKe),e(Jn,IS),e(IS,NKe),e(Jn,jKe),e(Jn,qS),e(qS,DKe),e(Jn,GKe),e(k,OKe),e(k,Yn),e(Yn,Goe),e(Goe,VKe),e(Yn,XKe),e(Yn,NS),e(NS,zKe),e(Yn,QKe),e(Yn,jS),e(jS,WKe),e(Yn,HKe),e(k,UKe),e(k,Kn),e(Kn,Ooe),e(Ooe,JKe),e(Kn,YKe),e(Kn,DS),e(DS,KKe),e(Kn,ZKe),e(Kn,GS),e(GS,eZe),e(Kn,oZe),e(k,rZe),e(k,Zn),e(Zn,Voe),e(Voe,tZe),e(Zn,aZe),e(Zn,OS),e(OS,nZe),e(Zn,sZe),e(Zn,VS),e(VS,lZe),e(Zn,iZe),e(k,dZe),e(k,es),e(es,Xoe),e(Xoe,cZe),e(es,fZe),e(es,XS),e(XS,mZe),e(es,gZe),e(es,zS),e(zS,hZe),e(es,pZe),e(k,uZe),e(k,vg),e(vg,zoe),e(zoe,_Ze),e(vg,bZe),e(vg,QS),e(QS,vZe),e(vg,FZe),e(k,TZe),e(k,os),e(os,Qoe),e(Qoe,MZe),e(os,EZe),e(os,WS),e(WS,CZe),e(os,wZe),e(os,HS),e(HS,AZe),e(os,yZe),e(k,LZe),e(k,Fg),e(Fg,Woe),e(Woe,xZe),e(Fg,$Ze),e(Fg,US),e(US,kZe),e(Fg,SZe),e(k,RZe),e(k,Tg),e(Tg,Hoe),e(Hoe,BZe),e(Tg,PZe),e(Tg,JS),e(JS,IZe),e(Tg,qZe),e(k,NZe),e(k,rs),e(rs,Uoe),e(Uoe,jZe),e(rs,DZe),e(rs,YS),e(YS,GZe),e(rs,OZe),e(rs,KS),e(KS,VZe),e(rs,XZe),e(k,zZe),e(k,ts),e(ts,Joe),e(Joe,QZe),e(ts,WZe),e(ts,ZS),e(ZS,HZe),e(ts,UZe),e(ts,eR),e(eR,JZe),e(ts,YZe),e(k,KZe),e(k,as),e(as,Yoe),e(Yoe,ZZe),e(as,eeo),e(as,oR),e(oR,oeo),e(as,reo),e(as,rR),e(rR,teo),e(as,aeo),e(k,neo),e(k,Mg),e(Mg,Koe),e(Koe,seo),e(Mg,leo),e(Mg,tR),e(tR,ieo),e(Mg,deo),e(k,ceo),e(k,ns),e(ns,Zoe),e(Zoe,feo),e(ns,meo),e(ns,aR),e(aR,geo),e(ns,heo),e(ns,nR),e(nR,peo),e(ns,ueo),e(k,_eo),e(k,ss),e(ss,ere),e(ere,beo),e(ss,veo),e(ss,sR),e(sR,Feo),e(ss,Teo),e(ss,lR),e(lR,Meo),e(ss,Eeo),e(k,Ceo),e(k,ls),e(ls,ore),e(ore,weo),e(ls,Aeo),e(ls,iR),e(iR,yeo),e(ls,Leo),e(ls,dR),e(dR,xeo),e(ls,$eo),e(k,keo),e(k,is),e(is,rre),e(rre,Seo),e(is,Reo),e(is,cR),e(cR,Beo),e(is,Peo),e(is,fR),e(fR,Ieo),e(is,qeo),e(k,Neo),e(k,ds),e(ds,tre),e(tre,jeo),e(ds,Deo),e(ds,mR),e(mR,Geo),e(ds,Oeo),e(ds,gR),e(gR,Veo),e(ds,Xeo),e(k,zeo),e(k,cs),e(cs,are),e(are,Qeo),e(cs,Weo),e(cs,hR),e(hR,Heo),e(cs,Ueo),e(cs,pR),e(pR,Jeo),e(cs,Yeo),e(k,Keo),e(k,Eg),e(Eg,nre),e(nre,Zeo),e(Eg,eoo),e(Eg,uR),e(uR,ooo),e(Eg,roo),e(k,too),e(k,Cg),e(Cg,sre),e(sre,aoo),e(Cg,noo),e(Cg,_R),e(_R,soo),e(Cg,loo),e(k,ioo),e(k,wg),e(wg,lre),e(lre,doo),e(wg,coo),e(wg,bR),e(bR,foo),e(wg,moo),e(k,goo),e(k,Ag),e(Ag,ire),e(ire,hoo),e(Ag,poo),e(Ag,vR),e(vR,uoo),e(Ag,_oo),e(k,boo),e(k,fs),e(fs,dre),e(dre,voo),e(fs,Foo),e(fs,FR),e(FR,Too),e(fs,Moo),e(fs,TR),e(TR,Eoo),e(fs,Coo),e(k,woo),e(k,yg),e(yg,cre),e(cre,Aoo),e(yg,yoo),e(yg,MR),e(MR,Loo),e(yg,xoo),e(k,$oo),e(k,ms),e(ms,fre),e(fre,koo),e(ms,Soo),e(ms,ER),e(ER,Roo),e(ms,Boo),e(ms,CR),e(CR,Poo),e(ms,Ioo),e(k,qoo),e(k,gs),e(gs,mre),e(mre,Noo),e(gs,joo),e(gs,wR),e(wR,Doo),e(gs,Goo),e(gs,AR),e(AR,Ooo),e(gs,Voo),e(k,Xoo),e(k,hs),e(hs,gre),e(gre,zoo),e(hs,Qoo),e(hs,yR),e(yR,Woo),e(hs,Hoo),e(hs,LR),e(LR,Uoo),e(hs,Joo),e(k,Yoo),e(k,ps),e(ps,hre),e(hre,Koo),e(ps,Zoo),e(ps,xR),e(xR,ero),e(ps,oro),e(ps,$R),e($R,rro),e(ps,tro),e(k,aro),e(k,us),e(us,pre),e(pre,nro),e(us,sro),e(us,kR),e(kR,lro),e(us,iro),e(us,SR),e(SR,dro),e(us,cro),e(k,fro),e(k,_s),e(_s,ure),e(ure,mro),e(_s,gro),e(_s,RR),e(RR,hro),e(_s,pro),e(_s,BR),e(BR,uro),e(_s,_ro),e(k,bro),e(k,Lg),e(Lg,_re),e(_re,vro),e(Lg,Fro),e(Lg,PR),e(PR,Tro),e(Lg,Mro),e(k,Ero),e(k,xg),e(xg,bre),e(bre,Cro),e(xg,wro),e(xg,IR),e(IR,Aro),e(xg,yro),e(k,Lro),e(k,bs),e(bs,vre),e(vre,xro),e(bs,$ro),e(bs,qR),e(qR,kro),e(bs,Sro),e(bs,NR),e(NR,Rro),e(bs,Bro),e(k,Pro),e(k,vs),e(vs,Fre),e(Fre,Iro),e(vs,qro),e(vs,jR),e(jR,Nro),e(vs,jro),e(vs,DR),e(DR,Dro),e(vs,Gro),e(k,Oro),e(k,Fs),e(Fs,Tre),e(Tre,Vro),e(Fs,Xro),e(Fs,GR),e(GR,zro),e(Fs,Qro),e(Fs,OR),e(OR,Wro),e(Fs,Hro),e(k,Uro),e(k,$g),e($g,Mre),e(Mre,Jro),e($g,Yro),e($g,VR),e(VR,Kro),e($g,Zro),e(k,eto),e(k,kg),e(kg,Ere),e(Ere,oto),e(kg,rto),e(kg,XR),e(XR,tto),e(kg,ato),e(k,nto),e(k,Sg),e(Sg,Cre),e(Cre,sto),e(Sg,lto),e(Sg,zR),e(zR,ito),e(Sg,dto),e(k,cto),e(k,Ts),e(Ts,wre),e(wre,fto),e(Ts,mto),e(Ts,QR),e(QR,gto),e(Ts,hto),e(Ts,WR),e(WR,pto),e(Ts,uto),e(k,_to),e(k,Rg),e(Rg,Are),e(Are,bto),e(Rg,vto),e(Rg,HR),e(HR,Fto),e(Rg,Tto),e(k,Mto),e(k,Bg),e(Bg,yre),e(yre,Eto),e(Bg,Cto),e(Bg,UR),e(UR,wto),e(Bg,Ato),e(k,yto),e(k,Ms),e(Ms,Lre),e(Lre,Lto),e(Ms,xto),e(Ms,JR),e(JR,$to),e(Ms,kto),e(Ms,YR),e(YR,Sto),e(Ms,Rto),e(k,Bto),e(k,Pg),e(Pg,xre),e(xre,Pto),e(Pg,Ito),e(Pg,KR),e(KR,qto),e(Pg,Nto),e(k,jto),e(k,Ig),e(Ig,$re),e($re,Dto),e(Ig,Gto),e(Ig,ZR),e(ZR,Oto),e(Ig,Vto),e(k,Xto),e(k,Es),e(Es,kre),e(kre,zto),e(Es,Qto),e(Es,eB),e(eB,Wto),e(Es,Hto),e(Es,oB),e(oB,Uto),e(Es,Jto),e(k,Yto),e(k,Cs),e(Cs,Sre),e(Sre,Kto),e(Cs,Zto),e(Cs,rB),e(rB,eao),e(Cs,oao),e(Cs,tB),e(tB,rao),e(Cs,tao),e(k,aao),e(k,ws),e(ws,Rre),e(Rre,nao),e(ws,sao),e(ws,aB),e(aB,lao),e(ws,iao),e(ws,nB),e(nB,dao),e(ws,cao),e(k,fao),e(k,As),e(As,Bre),e(Bre,mao),e(As,gao),e(As,sB),e(sB,hao),e(As,pao),e(As,lB),e(lB,uao),e(As,_ao),e(Tr,bao),M(qg,Tr,null),e(Eo,vao),e(Eo,Ng),M($A,Ng,null),e(Ng,Fao),e(Ng,Pre),e(Pre,Tao),b(f,KRe,_),b(f,mi,_),e(mi,jg),e(jg,Ire),M(kA,Ire,null),e(mi,Mao),e(mi,qre),e(qre,Eao),b(f,ZRe,_),b(f,Co,_),M(SA,Co,null),e(Co,Cao),e(Co,RA),e(RA,wao),e(RA,iB),e(iB,Aao),e(RA,yao),e(Co,Lao),e(Co,BA),e(BA,xao),e(BA,Nre),e(Nre,$ao),e(BA,kao),e(Co,Sao),e(Co,Xe),M(PA,Xe,null),e(Xe,Rao),e(Xe,jre),e(jre,Bao),e(Xe,Pao),e(Xe,Ta),e(Ta,Iao),e(Ta,Dre),e(Dre,qao),e(Ta,Nao),e(Ta,Gre),e(Gre,jao),e(Ta,Dao),e(Ta,Ore),e(Ore,Gao),e(Ta,Oao),e(Xe,Vao),e(Xe,ae),e(ae,Dg),e(Dg,Vre),e(Vre,Xao),e(Dg,zao),e(Dg,dB),e(dB,Qao),e(Dg,Wao),e(ae,Hao),e(ae,Gg),e(Gg,Xre),e(Xre,Uao),e(Gg,Jao),e(Gg,cB),e(cB,Yao),e(Gg,Kao),e(ae,Zao),e(ae,Og),e(Og,zre),e(zre,eno),e(Og,ono),e(Og,fB),e(fB,rno),e(Og,tno),e(ae,ano),e(ae,Vg),e(Vg,Qre),e(Qre,nno),e(Vg,sno),e(Vg,mB),e(mB,lno),e(Vg,ino),e(ae,dno),e(ae,Xg),e(Xg,Wre),e(Wre,cno),e(Xg,fno),e(Xg,gB),e(gB,mno),e(Xg,gno),e(ae,hno),e(ae,zg),e(zg,Hre),e(Hre,pno),e(zg,uno),e(zg,hB),e(hB,_no),e(zg,bno),e(ae,vno),e(ae,Qg),e(Qg,Ure),e(Ure,Fno),e(Qg,Tno),e(Qg,pB),e(pB,Mno),e(Qg,Eno),e(ae,Cno),e(ae,Wg),e(Wg,Jre),e(Jre,wno),e(Wg,Ano),e(Wg,uB),e(uB,yno),e(Wg,Lno),e(ae,xno),e(ae,Hg),e(Hg,Yre),e(Yre,$no),e(Hg,kno),e(Hg,_B),e(_B,Sno),e(Hg,Rno),e(ae,Bno),e(ae,Ug),e(Ug,Kre),e(Kre,Pno),e(Ug,Ino),e(Ug,bB),e(bB,qno),e(Ug,Nno),e(ae,jno),e(ae,Jg),e(Jg,Zre),e(Zre,Dno),e(Jg,Gno),e(Jg,vB),e(vB,Ono),e(Jg,Vno),e(ae,Xno),e(ae,Yg),e(Yg,ete),e(ete,zno),e(Yg,Qno),e(Yg,FB),e(FB,Wno),e(Yg,Hno),e(ae,Uno),e(ae,Kg),e(Kg,ote),e(ote,Jno),e(Kg,Yno),e(Kg,TB),e(TB,Kno),e(Kg,Zno),e(ae,eso),e(ae,Zg),e(Zg,rte),e(rte,oso),e(Zg,rso),e(Zg,MB),e(MB,tso),e(Zg,aso),e(ae,nso),e(ae,eh),e(eh,tte),e(tte,sso),e(eh,lso),e(eh,EB),e(EB,iso),e(eh,dso),e(ae,cso),e(ae,oh),e(oh,ate),e(ate,fso),e(oh,mso),e(oh,CB),e(CB,gso),e(oh,hso),e(ae,pso),e(ae,rh),e(rh,nte),e(nte,uso),e(rh,_so),e(rh,wB),e(wB,bso),e(rh,vso),e(ae,Fso),e(ae,th),e(th,ste),e(ste,Tso),e(th,Mso),e(th,AB),e(AB,Eso),e(th,Cso),e(ae,wso),e(ae,ah),e(ah,lte),e(lte,Aso),e(ah,yso),e(ah,yB),e(yB,Lso),e(ah,xso),e(ae,$so),e(ae,nh),e(nh,ite),e(ite,kso),e(nh,Sso),e(nh,LB),e(LB,Rso),e(nh,Bso),e(ae,Pso),e(ae,sh),e(sh,dte),e(dte,Iso),e(sh,qso),e(sh,xB),e(xB,Nso),e(sh,jso),e(ae,Dso),e(ae,lh),e(lh,cte),e(cte,Gso),e(lh,Oso),e(lh,$B),e($B,Vso),e(lh,Xso),e(ae,zso),e(ae,ih),e(ih,fte),e(fte,Qso),e(ih,Wso),e(ih,kB),e(kB,Hso),e(ih,Uso),e(Xe,Jso),M(dh,Xe,null),e(Xe,Yso),M(ch,Xe,null),e(Co,Kso),e(Co,fh),M(IA,fh,null),e(fh,Zso),e(fh,mte),e(mte,elo),b(f,eBe,_),b(f,gi,_),e(gi,mh),e(mh,gte),M(qA,gte,null),e(gi,olo),e(gi,hte),e(hte,rlo),b(f,oBe,_),b(f,wo,_),M(NA,wo,null),e(wo,tlo),e(wo,jA),e(jA,alo),e(jA,SB),e(SB,nlo),e(jA,slo),e(wo,llo),e(wo,DA),e(DA,ilo),e(DA,pte),e(pte,dlo),e(DA,clo),e(wo,flo),e(wo,ze),M(GA,ze,null),e(ze,mlo),e(ze,ute),e(ute,glo),e(ze,hlo),e(ze,hi),e(hi,plo),e(hi,_te),e(_te,ulo),e(hi,_lo),e(hi,bte),e(bte,blo),e(hi,vlo),e(ze,Flo),e(ze,be),e(be,gh),e(gh,vte),e(vte,Tlo),e(gh,Mlo),e(gh,RB),e(RB,Elo),e(gh,Clo),e(be,wlo),e(be,hh),e(hh,Fte),e(Fte,Alo),e(hh,ylo),e(hh,BB),e(BB,Llo),e(hh,xlo),e(be,$lo),e(be,ph),e(ph,Tte),e(Tte,klo),e(ph,Slo),e(ph,PB),e(PB,Rlo),e(ph,Blo),e(be,Plo),e(be,uh),e(uh,Mte),e(Mte,Ilo),e(uh,qlo),e(uh,IB),e(IB,Nlo),e(uh,jlo),e(be,Dlo),e(be,_h),e(_h,Ete),e(Ete,Glo),e(_h,Olo),e(_h,qB),e(qB,Vlo),e(_h,Xlo),e(be,zlo),e(be,bh),e(bh,Cte),e(Cte,Qlo),e(bh,Wlo),e(bh,NB),e(NB,Hlo),e(bh,Ulo),e(be,Jlo),e(be,vh),e(vh,wte),e(wte,Ylo),e(vh,Klo),e(vh,jB),e(jB,Zlo),e(vh,eio),e(be,oio),e(be,Fh),e(Fh,Ate),e(Ate,rio),e(Fh,tio),e(Fh,DB),e(DB,aio),e(Fh,nio),e(be,sio),e(be,Th),e(Th,yte),e(yte,lio),e(Th,iio),e(Th,GB),e(GB,dio),e(Th,cio),e(be,fio),e(be,Mh),e(Mh,Lte),e(Lte,mio),e(Mh,gio),e(Mh,OB),e(OB,hio),e(Mh,pio),e(be,uio),e(be,Eh),e(Eh,xte),e(xte,_io),e(Eh,bio),e(Eh,VB),e(VB,vio),e(Eh,Fio),e(be,Tio),e(be,Ch),e(Ch,$te),e($te,Mio),e(Ch,Eio),e(Ch,XB),e(XB,Cio),e(Ch,wio),e(be,Aio),e(be,wh),e(wh,kte),e(kte,yio),e(wh,Lio),e(wh,zB),e(zB,xio),e(wh,$io),e(be,kio),e(be,Ah),e(Ah,Ste),e(Ste,Sio),e(Ah,Rio),e(Ah,QB),e(QB,Bio),e(Ah,Pio),e(ze,Iio),M(yh,ze,null),e(ze,qio),M(Lh,ze,null),e(wo,Nio),e(wo,xh),M(OA,xh,null),e(xh,jio),e(xh,Rte),e(Rte,Dio),b(f,rBe,_),b(f,pi,_),e(pi,$h),e($h,Bte),M(VA,Bte,null),e(pi,Gio),e(pi,Pte),e(Pte,Oio),b(f,tBe,_),b(f,Ao,_),M(XA,Ao,null),e(Ao,Vio),e(Ao,ui),e(ui,Xio),e(ui,WB),e(WB,zio),e(ui,Qio),e(ui,HB),e(HB,Wio),e(ui,Hio),e(Ao,Uio),e(Ao,zA),e(zA,Jio),e(zA,Ite),e(Ite,Yio),e(zA,Kio),e(Ao,Zio),e(Ao,Kr),M(QA,Kr,null),e(Kr,edo),e(Kr,qte),e(qte,odo),e(Kr,rdo),e(Kr,_i),e(_i,tdo),e(_i,Nte),e(Nte,ado),e(_i,ndo),e(_i,UB),e(UB,sdo),e(_i,ldo),e(Kr,ido),M(kh,Kr,null),e(Ao,ddo),e(Ao,Qe),M(WA,Qe,null),e(Qe,cdo),e(Qe,jte),e(jte,fdo),e(Qe,mdo),e(Qe,Ma),e(Ma,gdo),e(Ma,Dte),e(Dte,hdo),e(Ma,pdo),e(Ma,Gte),e(Gte,udo),e(Ma,_do),e(Ma,Ote),e(Ote,bdo),e(Ma,vdo),e(Qe,Fdo),e(Qe,x),e(x,Sh),e(Sh,Vte),e(Vte,Tdo),e(Sh,Mdo),e(Sh,JB),e(JB,Edo),e(Sh,Cdo),e(x,wdo),e(x,Rh),e(Rh,Xte),e(Xte,Ado),e(Rh,ydo),e(Rh,YB),e(YB,Ldo),e(Rh,xdo),e(x,$do),e(x,Bh),e(Bh,zte),e(zte,kdo),e(Bh,Sdo),e(Bh,KB),e(KB,Rdo),e(Bh,Bdo),e(x,Pdo),e(x,Ph),e(Ph,Qte),e(Qte,Ido),e(Ph,qdo),e(Ph,ZB),e(ZB,Ndo),e(Ph,jdo),e(x,Ddo),e(x,Ih),e(Ih,Wte),e(Wte,Gdo),e(Ih,Odo),e(Ih,eP),e(eP,Vdo),e(Ih,Xdo),e(x,zdo),e(x,qh),e(qh,Hte),e(Hte,Qdo),e(qh,Wdo),e(qh,oP),e(oP,Hdo),e(qh,Udo),e(x,Jdo),e(x,Nh),e(Nh,Ute),e(Ute,Ydo),e(Nh,Kdo),e(Nh,rP),e(rP,Zdo),e(Nh,eco),e(x,oco),e(x,jh),e(jh,Jte),e(Jte,rco),e(jh,tco),e(jh,tP),e(tP,aco),e(jh,nco),e(x,sco),e(x,Dh),e(Dh,Yte),e(Yte,lco),e(Dh,ico),e(Dh,aP),e(aP,dco),e(Dh,cco),e(x,fco),e(x,Gh),e(Gh,Kte),e(Kte,mco),e(Gh,gco),e(Gh,nP),e(nP,hco),e(Gh,pco),e(x,uco),e(x,Oh),e(Oh,Zte),e(Zte,_co),e(Oh,bco),e(Oh,sP),e(sP,vco),e(Oh,Fco),e(x,Tco),e(x,Vh),e(Vh,eae),e(eae,Mco),e(Vh,Eco),e(Vh,lP),e(lP,Cco),e(Vh,wco),e(x,Aco),e(x,Xh),e(Xh,oae),e(oae,yco),e(Xh,Lco),e(Xh,iP),e(iP,xco),e(Xh,$co),e(x,kco),e(x,zh),e(zh,rae),e(rae,Sco),e(zh,Rco),e(zh,dP),e(dP,Bco),e(zh,Pco),e(x,Ico),e(x,Qh),e(Qh,tae),e(tae,qco),e(Qh,Nco),e(Qh,cP),e(cP,jco),e(Qh,Dco),e(x,Gco),e(x,Wh),e(Wh,aae),e(aae,Oco),e(Wh,Vco),e(Wh,fP),e(fP,Xco),e(Wh,zco),e(x,Qco),e(x,Hh),e(Hh,nae),e(nae,Wco),e(Hh,Hco),e(Hh,mP),e(mP,Uco),e(Hh,Jco),e(x,Yco),e(x,Uh),e(Uh,sae),e(sae,Kco),e(Uh,Zco),e(Uh,gP),e(gP,efo),e(Uh,ofo),e(x,rfo),e(x,Jh),e(Jh,lae),e(lae,tfo),e(Jh,afo),e(Jh,hP),e(hP,nfo),e(Jh,sfo),e(x,lfo),e(x,Yh),e(Yh,iae),e(iae,ifo),e(Yh,dfo),e(Yh,pP),e(pP,cfo),e(Yh,ffo),e(x,mfo),e(x,Kh),e(Kh,dae),e(dae,gfo),e(Kh,hfo),e(Kh,uP),e(uP,pfo),e(Kh,ufo),e(x,_fo),e(x,Zh),e(Zh,cae),e(cae,bfo),e(Zh,vfo),e(Zh,_P),e(_P,Ffo),e(Zh,Tfo),e(x,Mfo),e(x,ep),e(ep,fae),e(fae,Efo),e(ep,Cfo),e(ep,bP),e(bP,wfo),e(ep,Afo),e(x,yfo),e(x,op),e(op,mae),e(mae,Lfo),e(op,xfo),e(op,vP),e(vP,$fo),e(op,kfo),e(x,Sfo),e(x,rp),e(rp,gae),e(gae,Rfo),e(rp,Bfo),e(rp,FP),e(FP,Pfo),e(rp,Ifo),e(x,qfo),e(x,tp),e(tp,hae),e(hae,Nfo),e(tp,jfo),e(tp,TP),e(TP,Dfo),e(tp,Gfo),e(x,Ofo),e(x,ap),e(ap,pae),e(pae,Vfo),e(ap,Xfo),e(ap,MP),e(MP,zfo),e(ap,Qfo),e(x,Wfo),e(x,np),e(np,uae),e(uae,Hfo),e(np,Ufo),e(np,EP),e(EP,Jfo),e(np,Yfo),e(x,Kfo),e(x,sp),e(sp,_ae),e(_ae,Zfo),e(sp,emo),e(sp,CP),e(CP,omo),e(sp,rmo),e(x,tmo),e(x,lp),e(lp,bae),e(bae,amo),e(lp,nmo),e(lp,wP),e(wP,smo),e(lp,lmo),e(x,imo),e(x,ys),e(ys,vae),e(vae,dmo),e(ys,cmo),e(ys,AP),e(AP,fmo),e(ys,mmo),e(ys,yP),e(yP,gmo),e(ys,hmo),e(x,pmo),e(x,ip),e(ip,Fae),e(Fae,umo),e(ip,_mo),e(ip,LP),e(LP,bmo),e(ip,vmo),e(x,Fmo),e(x,dp),e(dp,Tae),e(Tae,Tmo),e(dp,Mmo),e(dp,xP),e(xP,Emo),e(dp,Cmo),e(x,wmo),e(x,cp),e(cp,Mae),e(Mae,Amo),e(cp,ymo),e(cp,$P),e($P,Lmo),e(cp,xmo),e(x,$mo),e(x,fp),e(fp,Eae),e(Eae,kmo),e(fp,Smo),e(fp,kP),e(kP,Rmo),e(fp,Bmo),e(x,Pmo),e(x,mp),e(mp,Cae),e(Cae,Imo),e(mp,qmo),e(mp,SP),e(SP,Nmo),e(mp,jmo),e(x,Dmo),e(x,gp),e(gp,wae),e(wae,Gmo),e(gp,Omo),e(gp,RP),e(RP,Vmo),e(gp,Xmo),e(x,zmo),e(x,hp),e(hp,Aae),e(Aae,Qmo),e(hp,Wmo),e(hp,BP),e(BP,Hmo),e(hp,Umo),e(x,Jmo),e(x,pp),e(pp,yae),e(yae,Ymo),e(pp,Kmo),e(pp,PP),e(PP,Zmo),e(pp,ego),e(x,ogo),e(x,up),e(up,Lae),e(Lae,rgo),e(up,tgo),e(up,IP),e(IP,ago),e(up,ngo),e(x,sgo),e(x,_p),e(_p,xae),e(xae,lgo),e(_p,igo),e(_p,qP),e(qP,dgo),e(_p,cgo),e(x,fgo),e(x,bp),e(bp,$ae),e($ae,mgo),e(bp,ggo),e(bp,NP),e(NP,hgo),e(bp,pgo),e(x,ugo),e(x,vp),e(vp,kae),e(kae,_go),e(vp,bgo),e(vp,jP),e(jP,vgo),e(vp,Fgo),e(x,Tgo),e(x,Fp),e(Fp,Sae),e(Sae,Mgo),e(Fp,Ego),e(Fp,DP),e(DP,Cgo),e(Fp,wgo),e(x,Ago),e(x,Tp),e(Tp,Rae),e(Rae,ygo),e(Tp,Lgo),e(Tp,GP),e(GP,xgo),e(Tp,$go),e(x,kgo),e(x,Mp),e(Mp,Bae),e(Bae,Sgo),e(Mp,Rgo),e(Mp,OP),e(OP,Bgo),e(Mp,Pgo),e(x,Igo),e(x,Ep),e(Ep,Pae),e(Pae,qgo),e(Ep,Ngo),e(Ep,VP),e(VP,jgo),e(Ep,Dgo),e(x,Ggo),e(x,Cp),e(Cp,Iae),e(Iae,Ogo),e(Cp,Vgo),e(Cp,XP),e(XP,Xgo),e(Cp,zgo),e(x,Qgo),e(x,wp),e(wp,qae),e(qae,Wgo),e(wp,Hgo),e(wp,zP),e(zP,Ugo),e(wp,Jgo),e(x,Ygo),e(x,Ap),e(Ap,Nae),e(Nae,Kgo),e(Ap,Zgo),e(Ap,QP),e(QP,eho),e(Ap,oho),e(x,rho),e(x,yp),e(yp,jae),e(jae,tho),e(yp,aho),e(yp,WP),e(WP,nho),e(yp,sho),e(x,lho),e(x,Lp),e(Lp,Dae),e(Dae,iho),e(Lp,dho),e(Lp,HP),e(HP,cho),e(Lp,fho),e(x,mho),e(x,xp),e(xp,Gae),e(Gae,gho),e(xp,hho),e(xp,UP),e(UP,pho),e(xp,uho),e(x,_ho),e(x,$p),e($p,Oae),e(Oae,bho),e($p,vho),e($p,JP),e(JP,Fho),e($p,Tho),e(x,Mho),e(x,kp),e(kp,Vae),e(Vae,Eho),e(kp,Cho),e(kp,YP),e(YP,who),e(kp,Aho),e(x,yho),e(x,Sp),e(Sp,Xae),e(Xae,Lho),e(Sp,xho),e(Sp,KP),e(KP,$ho),e(Sp,kho),e(x,Sho),e(x,Rp),e(Rp,zae),e(zae,Rho),e(Rp,Bho),e(Rp,ZP),e(ZP,Pho),e(Rp,Iho),e(x,qho),e(x,Bp),e(Bp,Qae),e(Qae,Nho),e(Bp,jho),e(Bp,eI),e(eI,Dho),e(Bp,Gho),e(x,Oho),e(x,Pp),e(Pp,Wae),e(Wae,Vho),e(Pp,Xho),e(Pp,oI),e(oI,zho),e(Pp,Qho),e(x,Who),e(x,Ip),e(Ip,Hae),e(Hae,Hho),e(Ip,Uho),e(Ip,rI),e(rI,Jho),e(Ip,Yho),e(x,Kho),e(x,qp),e(qp,Uae),e(Uae,Zho),e(qp,epo),e(qp,tI),e(tI,opo),e(qp,rpo),e(x,tpo),e(x,Np),e(Np,Jae),e(Jae,apo),e(Np,npo),e(Np,aI),e(aI,spo),e(Np,lpo),e(x,ipo),e(x,jp),e(jp,Yae),e(Yae,dpo),e(jp,cpo),e(jp,nI),e(nI,fpo),e(jp,mpo),e(x,gpo),e(x,Dp),e(Dp,Kae),e(Kae,hpo),e(Dp,ppo),e(Dp,sI),e(sI,upo),e(Dp,_po),e(x,bpo),e(x,Gp),e(Gp,Zae),e(Zae,vpo),e(Gp,Fpo),e(Gp,lI),e(lI,Tpo),e(Gp,Mpo),e(x,Epo),e(x,Op),e(Op,ene),e(ene,Cpo),e(Op,wpo),e(Op,iI),e(iI,Apo),e(Op,ypo),e(x,Lpo),e(x,Vp),e(Vp,one),e(one,xpo),e(Vp,$po),e(Vp,dI),e(dI,kpo),e(Vp,Spo),e(x,Rpo),e(x,Xp),e(Xp,rne),e(rne,Bpo),e(Xp,Ppo),e(Xp,cI),e(cI,Ipo),e(Xp,qpo),e(x,Npo),e(x,zp),e(zp,tne),e(tne,jpo),e(zp,Dpo),e(zp,fI),e(fI,Gpo),e(zp,Opo),e(x,Vpo),e(x,Qp),e(Qp,ane),e(ane,Xpo),e(Qp,zpo),e(Qp,mI),e(mI,Qpo),e(Qp,Wpo),e(x,Hpo),e(x,Wp),e(Wp,nne),e(nne,Upo),e(Wp,Jpo),e(Wp,gI),e(gI,Ypo),e(Wp,Kpo),e(x,Zpo),e(x,Hp),e(Hp,sne),e(sne,euo),e(Hp,ouo),e(Hp,hI),e(hI,ruo),e(Hp,tuo),e(x,auo),e(x,Up),e(Up,lne),e(lne,nuo),e(Up,suo),e(Up,pI),e(pI,luo),e(Up,iuo),e(x,duo),e(x,Jp),e(Jp,ine),e(ine,cuo),e(Jp,fuo),e(Jp,uI),e(uI,muo),e(Jp,guo),e(x,huo),e(x,Yp),e(Yp,dne),e(dne,puo),e(Yp,uuo),e(Yp,_I),e(_I,_uo),e(Yp,buo),e(x,vuo),e(x,Kp),e(Kp,cne),e(cne,Fuo),e(Kp,Tuo),e(Kp,bI),e(bI,Muo),e(Kp,Euo),e(x,Cuo),e(x,Zp),e(Zp,fne),e(fne,wuo),e(Zp,Auo),e(Zp,vI),e(vI,yuo),e(Zp,Luo),e(x,xuo),e(x,eu),e(eu,mne),e(mne,$uo),e(eu,kuo),e(eu,FI),e(FI,Suo),e(eu,Ruo),e(x,Buo),e(x,ou),e(ou,gne),e(gne,Puo),e(ou,Iuo),e(ou,TI),e(TI,quo),e(ou,Nuo),e(x,juo),e(x,ru),e(ru,hne),e(hne,Duo),e(ru,Guo),e(ru,MI),e(MI,Ouo),e(ru,Vuo),e(x,Xuo),e(x,tu),e(tu,pne),e(pne,zuo),e(tu,Quo),e(tu,EI),e(EI,Wuo),e(tu,Huo),e(x,Uuo),e(x,au),e(au,une),e(une,Juo),e(au,Yuo),e(au,CI),e(CI,Kuo),e(au,Zuo),e(x,e_o),e(x,nu),e(nu,_ne),e(_ne,o_o),e(nu,r_o),e(nu,wI),e(wI,t_o),e(nu,a_o),e(x,n_o),e(x,su),e(su,bne),e(bne,s_o),e(su,l_o),e(su,AI),e(AI,i_o),e(su,d_o),e(x,c_o),e(x,lu),e(lu,vne),e(vne,f_o),e(lu,m_o),e(lu,yI),e(yI,g_o),e(lu,h_o),e(x,p_o),e(x,iu),e(iu,Fne),e(Fne,u_o),e(iu,__o),e(iu,LI),e(LI,b_o),e(iu,v_o),e(x,F_o),e(x,du),e(du,Tne),e(Tne,T_o),e(du,M_o),e(du,xI),e(xI,E_o),e(du,C_o),e(x,w_o),e(x,cu),e(cu,Mne),e(Mne,A_o),e(cu,y_o),e(cu,$I),e($I,L_o),e(cu,x_o),e(x,$_o),e(x,fu),e(fu,Ene),e(Ene,k_o),e(fu,S_o),e(fu,kI),e(kI,R_o),e(fu,B_o),e(x,P_o),e(x,mu),e(mu,Cne),e(Cne,I_o),e(mu,q_o),e(mu,SI),e(SI,N_o),e(mu,j_o),e(x,D_o),e(x,gu),e(gu,wne),e(wne,G_o),e(gu,O_o),e(gu,RI),e(RI,V_o),e(gu,X_o),e(x,z_o),e(x,hu),e(hu,Ane),e(Ane,Q_o),e(hu,W_o),e(hu,BI),e(BI,H_o),e(hu,U_o),e(x,J_o),e(x,pu),e(pu,yne),e(yne,Y_o),e(pu,K_o),e(pu,PI),e(PI,Z_o),e(pu,e6o),e(x,o6o),e(x,uu),e(uu,Lne),e(Lne,r6o),e(uu,t6o),e(uu,II),e(II,a6o),e(uu,n6o),e(x,s6o),e(x,_u),e(_u,xne),e(xne,l6o),e(_u,i6o),e(_u,qI),e(qI,d6o),e(_u,c6o),e(Qe,f6o),e(Qe,bu),e(bu,m6o),e(bu,$ne),e($ne,g6o),e(bu,h6o),e(bu,kne),e(kne,p6o),e(Qe,u6o),M(vu,Qe,null),b(f,aBe,_),b(f,bi,_),e(bi,Fu),e(Fu,Sne),M(HA,Sne,null),e(bi,_6o),e(bi,Rne),e(Rne,b6o),b(f,nBe,_),b(f,yo,_),M(UA,yo,null),e(yo,v6o),e(yo,vi),e(vi,F6o),e(vi,NI),e(NI,T6o),e(vi,M6o),e(vi,jI),e(jI,E6o),e(vi,C6o),e(yo,w6o),e(yo,JA),e(JA,A6o),e(JA,Bne),e(Bne,y6o),e(JA,L6o),e(yo,x6o),e(yo,Zr),M(YA,Zr,null),e(Zr,$6o),e(Zr,Pne),e(Pne,k6o),e(Zr,S6o),e(Zr,Fi),e(Fi,R6o),e(Fi,Ine),e(Ine,B6o),e(Fi,P6o),e(Fi,DI),e(DI,I6o),e(Fi,q6o),e(Zr,N6o),M(Tu,Zr,null),e(yo,j6o),e(yo,We),M(KA,We,null),e(We,D6o),e(We,qne),e(qne,G6o),e(We,O6o),e(We,Ea),e(Ea,V6o),e(Ea,Nne),e(Nne,X6o),e(Ea,z6o),e(Ea,jne),e(jne,Q6o),e(Ea,W6o),e(Ea,Dne),e(Dne,H6o),e(Ea,U6o),e(We,J6o),e(We,G),e(G,Mu),e(Mu,Gne),e(Gne,Y6o),e(Mu,K6o),e(Mu,GI),e(GI,Z6o),e(Mu,e1o),e(G,o1o),e(G,Eu),e(Eu,One),e(One,r1o),e(Eu,t1o),e(Eu,OI),e(OI,a1o),e(Eu,n1o),e(G,s1o),e(G,Cu),e(Cu,Vne),e(Vne,l1o),e(Cu,i1o),e(Cu,VI),e(VI,d1o),e(Cu,c1o),e(G,f1o),e(G,wu),e(wu,Xne),e(Xne,m1o),e(wu,g1o),e(wu,XI),e(XI,h1o),e(wu,p1o),e(G,u1o),e(G,Au),e(Au,zne),e(zne,_1o),e(Au,b1o),e(Au,zI),e(zI,v1o),e(Au,F1o),e(G,T1o),e(G,yu),e(yu,Qne),e(Qne,M1o),e(yu,E1o),e(yu,QI),e(QI,C1o),e(yu,w1o),e(G,A1o),e(G,Lu),e(Lu,Wne),e(Wne,y1o),e(Lu,L1o),e(Lu,WI),e(WI,x1o),e(Lu,$1o),e(G,k1o),e(G,xu),e(xu,Hne),e(Hne,S1o),e(xu,R1o),e(xu,HI),e(HI,B1o),e(xu,P1o),e(G,I1o),e(G,$u),e($u,Une),e(Une,q1o),e($u,N1o),e($u,UI),e(UI,j1o),e($u,D1o),e(G,G1o),e(G,ku),e(ku,Jne),e(Jne,O1o),e(ku,V1o),e(ku,JI),e(JI,X1o),e(ku,z1o),e(G,Q1o),e(G,Su),e(Su,Yne),e(Yne,W1o),e(Su,H1o),e(Su,YI),e(YI,U1o),e(Su,J1o),e(G,Y1o),e(G,Ru),e(Ru,Kne),e(Kne,K1o),e(Ru,Z1o),e(Ru,KI),e(KI,ebo),e(Ru,obo),e(G,rbo),e(G,Bu),e(Bu,Zne),e(Zne,tbo),e(Bu,abo),e(Bu,ZI),e(ZI,nbo),e(Bu,sbo),e(G,lbo),e(G,Pu),e(Pu,ese),e(ese,ibo),e(Pu,dbo),e(Pu,eq),e(eq,cbo),e(Pu,fbo),e(G,mbo),e(G,Iu),e(Iu,ose),e(ose,gbo),e(Iu,hbo),e(Iu,oq),e(oq,pbo),e(Iu,ubo),e(G,_bo),e(G,qu),e(qu,rse),e(rse,bbo),e(qu,vbo),e(qu,rq),e(rq,Fbo),e(qu,Tbo),e(G,Mbo),e(G,Nu),e(Nu,tse),e(tse,Ebo),e(Nu,Cbo),e(Nu,tq),e(tq,wbo),e(Nu,Abo),e(G,ybo),e(G,ju),e(ju,ase),e(ase,Lbo),e(ju,xbo),e(ju,aq),e(aq,$bo),e(ju,kbo),e(G,Sbo),e(G,Du),e(Du,nse),e(nse,Rbo),e(Du,Bbo),e(Du,nq),e(nq,Pbo),e(Du,Ibo),e(G,qbo),e(G,Gu),e(Gu,sse),e(sse,Nbo),e(Gu,jbo),e(Gu,sq),e(sq,Dbo),e(Gu,Gbo),e(G,Obo),e(G,Ou),e(Ou,lse),e(lse,Vbo),e(Ou,Xbo),e(Ou,lq),e(lq,zbo),e(Ou,Qbo),e(G,Wbo),e(G,Vu),e(Vu,ise),e(ise,Hbo),e(Vu,Ubo),e(Vu,iq),e(iq,Jbo),e(Vu,Ybo),e(G,Kbo),e(G,Xu),e(Xu,dse),e(dse,Zbo),e(Xu,e2o),e(Xu,dq),e(dq,o2o),e(Xu,r2o),e(G,t2o),e(G,zu),e(zu,cse),e(cse,a2o),e(zu,n2o),e(zu,cq),e(cq,s2o),e(zu,l2o),e(G,i2o),e(G,Qu),e(Qu,fse),e(fse,d2o),e(Qu,c2o),e(Qu,fq),e(fq,f2o),e(Qu,m2o),e(G,g2o),e(G,Wu),e(Wu,mse),e(mse,h2o),e(Wu,p2o),e(Wu,mq),e(mq,u2o),e(Wu,_2o),e(G,b2o),e(G,Hu),e(Hu,gse),e(gse,v2o),e(Hu,F2o),e(Hu,gq),e(gq,T2o),e(Hu,M2o),e(G,E2o),e(G,Uu),e(Uu,hse),e(hse,C2o),e(Uu,w2o),e(Uu,hq),e(hq,A2o),e(Uu,y2o),e(G,L2o),e(G,Ju),e(Ju,pse),e(pse,x2o),e(Ju,$2o),e(Ju,pq),e(pq,k2o),e(Ju,S2o),e(G,R2o),e(G,Yu),e(Yu,use),e(use,B2o),e(Yu,P2o),e(Yu,uq),e(uq,I2o),e(Yu,q2o),e(G,N2o),e(G,Ku),e(Ku,_se),e(_se,j2o),e(Ku,D2o),e(Ku,_q),e(_q,G2o),e(Ku,O2o),e(G,V2o),e(G,Zu),e(Zu,bse),e(bse,X2o),e(Zu,z2o),e(Zu,bq),e(bq,Q2o),e(Zu,W2o),e(G,H2o),e(G,e_),e(e_,vse),e(vse,U2o),e(e_,J2o),e(e_,vq),e(vq,Y2o),e(e_,K2o),e(G,Z2o),e(G,o_),e(o_,Fse),e(Fse,e5o),e(o_,o5o),e(o_,Fq),e(Fq,r5o),e(o_,t5o),e(G,a5o),e(G,r_),e(r_,Tse),e(Tse,n5o),e(r_,s5o),e(r_,Tq),e(Tq,l5o),e(r_,i5o),e(G,d5o),e(G,t_),e(t_,Mse),e(Mse,c5o),e(t_,f5o),e(t_,Mq),e(Mq,m5o),e(t_,g5o),e(G,h5o),e(G,a_),e(a_,Ese),e(Ese,p5o),e(a_,u5o),e(a_,Eq),e(Eq,_5o),e(a_,b5o),e(G,v5o),e(G,n_),e(n_,Cse),e(Cse,F5o),e(n_,T5o),e(n_,Cq),e(Cq,M5o),e(n_,E5o),e(G,C5o),e(G,s_),e(s_,wse),e(wse,w5o),e(s_,A5o),e(s_,wq),e(wq,y5o),e(s_,L5o),e(We,x5o),e(We,l_),e(l_,$5o),e(l_,Ase),e(Ase,k5o),e(l_,S5o),e(l_,yse),e(yse,R5o),e(We,B5o),M(i_,We,null),b(f,sBe,_),b(f,Ti,_),e(Ti,d_),e(d_,Lse),M(ZA,Lse,null),e(Ti,P5o),e(Ti,xse),e(xse,I5o),b(f,lBe,_),b(f,Lo,_),M(e0,Lo,null),e(Lo,q5o),e(Lo,Mi),e(Mi,N5o),e(Mi,Aq),e(Aq,j5o),e(Mi,D5o),e(Mi,yq),e(yq,G5o),e(Mi,O5o),e(Lo,V5o),e(Lo,o0),e(o0,X5o),e(o0,$se),e($se,z5o),e(o0,Q5o),e(Lo,W5o),e(Lo,et),M(r0,et,null),e(et,H5o),e(et,kse),e(kse,U5o),e(et,J5o),e(et,Ei),e(Ei,Y5o),e(Ei,Sse),e(Sse,K5o),e(Ei,Z5o),e(Ei,Lq),e(Lq,evo),e(Ei,ovo),e(et,rvo),M(c_,et,null),e(Lo,tvo),e(Lo,He),M(t0,He,null),e(He,avo),e(He,Rse),e(Rse,nvo),e(He,svo),e(He,Ca),e(Ca,lvo),e(Ca,Bse),e(Bse,ivo),e(Ca,dvo),e(Ca,Pse),e(Pse,cvo),e(Ca,fvo),e(Ca,Ise),e(Ise,mvo),e(Ca,gvo),e(He,hvo),e(He,z),e(z,f_),e(f_,qse),e(qse,pvo),e(f_,uvo),e(f_,xq),e(xq,_vo),e(f_,bvo),e(z,vvo),e(z,m_),e(m_,Nse),e(Nse,Fvo),e(m_,Tvo),e(m_,$q),e($q,Mvo),e(m_,Evo),e(z,Cvo),e(z,g_),e(g_,jse),e(jse,wvo),e(g_,Avo),e(g_,kq),e(kq,yvo),e(g_,Lvo),e(z,xvo),e(z,h_),e(h_,Dse),e(Dse,$vo),e(h_,kvo),e(h_,Sq),e(Sq,Svo),e(h_,Rvo),e(z,Bvo),e(z,p_),e(p_,Gse),e(Gse,Pvo),e(p_,Ivo),e(p_,Rq),e(Rq,qvo),e(p_,Nvo),e(z,jvo),e(z,u_),e(u_,Ose),e(Ose,Dvo),e(u_,Gvo),e(u_,Bq),e(Bq,Ovo),e(u_,Vvo),e(z,Xvo),e(z,__),e(__,Vse),e(Vse,zvo),e(__,Qvo),e(__,Pq),e(Pq,Wvo),e(__,Hvo),e(z,Uvo),e(z,b_),e(b_,Xse),e(Xse,Jvo),e(b_,Yvo),e(b_,Iq),e(Iq,Kvo),e(b_,Zvo),e(z,eFo),e(z,v_),e(v_,zse),e(zse,oFo),e(v_,rFo),e(v_,qq),e(qq,tFo),e(v_,aFo),e(z,nFo),e(z,F_),e(F_,Qse),e(Qse,sFo),e(F_,lFo),e(F_,Nq),e(Nq,iFo),e(F_,dFo),e(z,cFo),e(z,T_),e(T_,Wse),e(Wse,fFo),e(T_,mFo),e(T_,jq),e(jq,gFo),e(T_,hFo),e(z,pFo),e(z,M_),e(M_,Hse),e(Hse,uFo),e(M_,_Fo),e(M_,Dq),e(Dq,bFo),e(M_,vFo),e(z,FFo),e(z,E_),e(E_,Use),e(Use,TFo),e(E_,MFo),e(E_,Gq),e(Gq,EFo),e(E_,CFo),e(z,wFo),e(z,C_),e(C_,Jse),e(Jse,AFo),e(C_,yFo),e(C_,Oq),e(Oq,LFo),e(C_,xFo),e(z,$Fo),e(z,w_),e(w_,Yse),e(Yse,kFo),e(w_,SFo),e(w_,Vq),e(Vq,RFo),e(w_,BFo),e(z,PFo),e(z,A_),e(A_,Kse),e(Kse,IFo),e(A_,qFo),e(A_,Xq),e(Xq,NFo),e(A_,jFo),e(z,DFo),e(z,y_),e(y_,Zse),e(Zse,GFo),e(y_,OFo),e(y_,zq),e(zq,VFo),e(y_,XFo),e(z,zFo),e(z,L_),e(L_,ele),e(ele,QFo),e(L_,WFo),e(L_,Qq),e(Qq,HFo),e(L_,UFo),e(z,JFo),e(z,x_),e(x_,ole),e(ole,YFo),e(x_,KFo),e(x_,Wq),e(Wq,ZFo),e(x_,eTo),e(z,oTo),e(z,$_),e($_,rle),e(rle,rTo),e($_,tTo),e($_,Hq),e(Hq,aTo),e($_,nTo),e(z,sTo),e(z,k_),e(k_,tle),e(tle,lTo),e(k_,iTo),e(k_,Uq),e(Uq,dTo),e(k_,cTo),e(z,fTo),e(z,S_),e(S_,ale),e(ale,mTo),e(S_,gTo),e(S_,Jq),e(Jq,hTo),e(S_,pTo),e(z,uTo),e(z,R_),e(R_,nle),e(nle,_To),e(R_,bTo),e(R_,Yq),e(Yq,vTo),e(R_,FTo),e(z,TTo),e(z,B_),e(B_,sle),e(sle,MTo),e(B_,ETo),e(B_,Kq),e(Kq,CTo),e(B_,wTo),e(z,ATo),e(z,P_),e(P_,lle),e(lle,yTo),e(P_,LTo),e(P_,Zq),e(Zq,xTo),e(P_,$To),e(z,kTo),e(z,I_),e(I_,ile),e(ile,STo),e(I_,RTo),e(I_,eN),e(eN,BTo),e(I_,PTo),e(z,ITo),e(z,q_),e(q_,dle),e(dle,qTo),e(q_,NTo),e(q_,oN),e(oN,jTo),e(q_,DTo),e(z,GTo),e(z,N_),e(N_,cle),e(cle,OTo),e(N_,VTo),e(N_,rN),e(rN,XTo),e(N_,zTo),e(z,QTo),e(z,j_),e(j_,fle),e(fle,WTo),e(j_,HTo),e(j_,tN),e(tN,UTo),e(j_,JTo),e(z,YTo),e(z,D_),e(D_,mle),e(mle,KTo),e(D_,ZTo),e(D_,aN),e(aN,e9o),e(D_,o9o),e(z,r9o),e(z,G_),e(G_,gle),e(gle,t9o),e(G_,a9o),e(G_,nN),e(nN,n9o),e(G_,s9o),e(z,l9o),e(z,O_),e(O_,hle),e(hle,i9o),e(O_,d9o),e(O_,sN),e(sN,c9o),e(O_,f9o),e(z,m9o),e(z,V_),e(V_,ple),e(ple,g9o),e(V_,h9o),e(V_,lN),e(lN,p9o),e(V_,u9o),e(z,_9o),e(z,X_),e(X_,ule),e(ule,b9o),e(X_,v9o),e(X_,iN),e(iN,F9o),e(X_,T9o),e(z,M9o),e(z,z_),e(z_,_le),e(_le,E9o),e(z_,C9o),e(z_,dN),e(dN,w9o),e(z_,A9o),e(z,y9o),e(z,Q_),e(Q_,ble),e(ble,L9o),e(Q_,x9o),e(Q_,cN),e(cN,$9o),e(Q_,k9o),e(He,S9o),e(He,W_),e(W_,R9o),e(W_,vle),e(vle,B9o),e(W_,P9o),e(W_,Fle),e(Fle,I9o),e(He,q9o),M(H_,He,null),b(f,iBe,_),b(f,Ci,_),e(Ci,U_),e(U_,Tle),M(a0,Tle,null),e(Ci,N9o),e(Ci,Mle),e(Mle,j9o),b(f,dBe,_),b(f,xo,_),M(n0,xo,null),e(xo,D9o),e(xo,wi),e(wi,G9o),e(wi,fN),e(fN,O9o),e(wi,V9o),e(wi,mN),e(mN,X9o),e(wi,z9o),e(xo,Q9o),e(xo,s0),e(s0,W9o),e(s0,Ele),e(Ele,H9o),e(s0,U9o),e(xo,J9o),e(xo,ot),M(l0,ot,null),e(ot,Y9o),e(ot,Cle),e(Cle,K9o),e(ot,Z9o),e(ot,Ai),e(Ai,eMo),e(Ai,wle),e(wle,oMo),e(Ai,rMo),e(Ai,gN),e(gN,tMo),e(Ai,aMo),e(ot,nMo),M(J_,ot,null),e(xo,sMo),e(xo,Ue),M(i0,Ue,null),e(Ue,lMo),e(Ue,Ale),e(Ale,iMo),e(Ue,dMo),e(Ue,wa),e(wa,cMo),e(wa,yle),e(yle,fMo),e(wa,mMo),e(wa,Lle),e(Lle,gMo),e(wa,hMo),e(wa,xle),e(xle,pMo),e(wa,uMo),e(Ue,_Mo),e(Ue,Q),e(Q,Y_),e(Y_,$le),e($le,bMo),e(Y_,vMo),e(Y_,hN),e(hN,FMo),e(Y_,TMo),e(Q,MMo),e(Q,K_),e(K_,kle),e(kle,EMo),e(K_,CMo),e(K_,pN),e(pN,wMo),e(K_,AMo),e(Q,yMo),e(Q,Z_),e(Z_,Sle),e(Sle,LMo),e(Z_,xMo),e(Z_,uN),e(uN,$Mo),e(Z_,kMo),e(Q,SMo),e(Q,e6),e(e6,Rle),e(Rle,RMo),e(e6,BMo),e(e6,_N),e(_N,PMo),e(e6,IMo),e(Q,qMo),e(Q,o6),e(o6,Ble),e(Ble,NMo),e(o6,jMo),e(o6,bN),e(bN,DMo),e(o6,GMo),e(Q,OMo),e(Q,r6),e(r6,Ple),e(Ple,VMo),e(r6,XMo),e(r6,vN),e(vN,zMo),e(r6,QMo),e(Q,WMo),e(Q,t6),e(t6,Ile),e(Ile,HMo),e(t6,UMo),e(t6,FN),e(FN,JMo),e(t6,YMo),e(Q,KMo),e(Q,a6),e(a6,qle),e(qle,ZMo),e(a6,e4o),e(a6,TN),e(TN,o4o),e(a6,r4o),e(Q,t4o),e(Q,n6),e(n6,Nle),e(Nle,a4o),e(n6,n4o),e(n6,MN),e(MN,s4o),e(n6,l4o),e(Q,i4o),e(Q,s6),e(s6,jle),e(jle,d4o),e(s6,c4o),e(s6,EN),e(EN,f4o),e(s6,m4o),e(Q,g4o),e(Q,l6),e(l6,Dle),e(Dle,h4o),e(l6,p4o),e(l6,CN),e(CN,u4o),e(l6,_4o),e(Q,b4o),e(Q,i6),e(i6,Gle),e(Gle,v4o),e(i6,F4o),e(i6,wN),e(wN,T4o),e(i6,M4o),e(Q,E4o),e(Q,d6),e(d6,Ole),e(Ole,C4o),e(d6,w4o),e(d6,AN),e(AN,A4o),e(d6,y4o),e(Q,L4o),e(Q,c6),e(c6,Vle),e(Vle,x4o),e(c6,$4o),e(c6,yN),e(yN,k4o),e(c6,S4o),e(Q,R4o),e(Q,f6),e(f6,Xle),e(Xle,B4o),e(f6,P4o),e(f6,LN),e(LN,I4o),e(f6,q4o),e(Q,N4o),e(Q,m6),e(m6,zle),e(zle,j4o),e(m6,D4o),e(m6,xN),e(xN,G4o),e(m6,O4o),e(Q,V4o),e(Q,g6),e(g6,Qle),e(Qle,X4o),e(g6,z4o),e(g6,$N),e($N,Q4o),e(g6,W4o),e(Q,H4o),e(Q,h6),e(h6,Wle),e(Wle,U4o),e(h6,J4o),e(h6,kN),e(kN,Y4o),e(h6,K4o),e(Q,Z4o),e(Q,p6),e(p6,Hle),e(Hle,eEo),e(p6,oEo),e(p6,SN),e(SN,rEo),e(p6,tEo),e(Q,aEo),e(Q,u6),e(u6,Ule),e(Ule,nEo),e(u6,sEo),e(u6,RN),e(RN,lEo),e(u6,iEo),e(Q,dEo),e(Q,_6),e(_6,Jle),e(Jle,cEo),e(_6,fEo),e(_6,BN),e(BN,mEo),e(_6,gEo),e(Q,hEo),e(Q,b6),e(b6,Yle),e(Yle,pEo),e(b6,uEo),e(b6,PN),e(PN,_Eo),e(b6,bEo),e(Q,vEo),e(Q,v6),e(v6,Kle),e(Kle,FEo),e(v6,TEo),e(v6,IN),e(IN,MEo),e(v6,EEo),e(Q,CEo),e(Q,F6),e(F6,Zle),e(Zle,wEo),e(F6,AEo),e(F6,qN),e(qN,yEo),e(F6,LEo),e(Q,xEo),e(Q,T6),e(T6,eie),e(eie,$Eo),e(T6,kEo),e(T6,NN),e(NN,SEo),e(T6,REo),e(Q,BEo),e(Q,M6),e(M6,oie),e(oie,PEo),e(M6,IEo),e(M6,jN),e(jN,qEo),e(M6,NEo),e(Q,jEo),e(Q,E6),e(E6,rie),e(rie,DEo),e(E6,GEo),e(E6,DN),e(DN,OEo),e(E6,VEo),e(Q,XEo),e(Q,C6),e(C6,tie),e(tie,zEo),e(C6,QEo),e(C6,GN),e(GN,WEo),e(C6,HEo),e(Q,UEo),e(Q,w6),e(w6,aie),e(aie,JEo),e(w6,YEo),e(w6,ON),e(ON,KEo),e(w6,ZEo),e(Q,eCo),e(Q,A6),e(A6,nie),e(nie,oCo),e(A6,rCo),e(A6,VN),e(VN,tCo),e(A6,aCo),e(Q,nCo),e(Q,y6),e(y6,sie),e(sie,sCo),e(y6,lCo),e(y6,lie),e(lie,iCo),e(y6,dCo),e(Q,cCo),e(Q,L6),e(L6,iie),e(iie,fCo),e(L6,mCo),e(L6,XN),e(XN,gCo),e(L6,hCo),e(Q,pCo),e(Q,x6),e(x6,die),e(die,uCo),e(x6,_Co),e(x6,zN),e(zN,bCo),e(x6,vCo),e(Q,FCo),e(Q,$6),e($6,cie),e(cie,TCo),e($6,MCo),e($6,QN),e(QN,ECo),e($6,CCo),e(Q,wCo),e(Q,k6),e(k6,fie),e(fie,ACo),e(k6,yCo),e(k6,WN),e(WN,LCo),e(k6,xCo),e(Ue,$Co),e(Ue,S6),e(S6,kCo),e(S6,mie),e(mie,SCo),e(S6,RCo),e(S6,gie),e(gie,BCo),e(Ue,PCo),M(R6,Ue,null),b(f,cBe,_),b(f,yi,_),e(yi,B6),e(B6,hie),M(d0,hie,null),e(yi,ICo),e(yi,pie),e(pie,qCo),b(f,fBe,_),b(f,$o,_),M(c0,$o,null),e($o,NCo),e($o,Li),e(Li,jCo),e(Li,HN),e(HN,DCo),e(Li,GCo),e(Li,UN),e(UN,OCo),e(Li,VCo),e($o,XCo),e($o,f0),e(f0,zCo),e(f0,uie),e(uie,QCo),e(f0,WCo),e($o,HCo),e($o,rt),M(m0,rt,null),e(rt,UCo),e(rt,_ie),e(_ie,JCo),e(rt,YCo),e(rt,xi),e(xi,KCo),e(xi,bie),e(bie,ZCo),e(xi,e3o),e(xi,JN),e(JN,o3o),e(xi,r3o),e(rt,t3o),M(P6,rt,null),e($o,a3o),e($o,Je),M(g0,Je,null),e(Je,n3o),e(Je,vie),e(vie,s3o),e(Je,l3o),e(Je,Aa),e(Aa,i3o),e(Aa,Fie),e(Fie,d3o),e(Aa,c3o),e(Aa,Tie),e(Tie,f3o),e(Aa,m3o),e(Aa,Mie),e(Mie,g3o),e(Aa,h3o),e(Je,p3o),e(Je,he),e(he,I6),e(I6,Eie),e(Eie,u3o),e(I6,_3o),e(I6,YN),e(YN,b3o),e(I6,v3o),e(he,F3o),e(he,q6),e(q6,Cie),e(Cie,T3o),e(q6,M3o),e(q6,KN),e(KN,E3o),e(q6,C3o),e(he,w3o),e(he,N6),e(N6,wie),e(wie,A3o),e(N6,y3o),e(N6,ZN),e(ZN,L3o),e(N6,x3o),e(he,$3o),e(he,j6),e(j6,Aie),e(Aie,k3o),e(j6,S3o),e(j6,ej),e(ej,R3o),e(j6,B3o),e(he,P3o),e(he,D6),e(D6,yie),e(yie,I3o),e(D6,q3o),e(D6,oj),e(oj,N3o),e(D6,j3o),e(he,D3o),e(he,G6),e(G6,Lie),e(Lie,G3o),e(G6,O3o),e(G6,rj),e(rj,V3o),e(G6,X3o),e(he,z3o),e(he,O6),e(O6,xie),e(xie,Q3o),e(O6,W3o),e(O6,tj),e(tj,H3o),e(O6,U3o),e(he,J3o),e(he,V6),e(V6,$ie),e($ie,Y3o),e(V6,K3o),e(V6,aj),e(aj,Z3o),e(V6,ewo),e(he,owo),e(he,X6),e(X6,kie),e(kie,rwo),e(X6,two),e(X6,nj),e(nj,awo),e(X6,nwo),e(he,swo),e(he,z6),e(z6,Sie),e(Sie,lwo),e(z6,iwo),e(z6,sj),e(sj,dwo),e(z6,cwo),e(he,fwo),e(he,Q6),e(Q6,Rie),e(Rie,mwo),e(Q6,gwo),e(Q6,lj),e(lj,hwo),e(Q6,pwo),e(he,uwo),e(he,W6),e(W6,Bie),e(Bie,_wo),e(W6,bwo),e(W6,ij),e(ij,vwo),e(W6,Fwo),e(he,Two),e(he,H6),e(H6,Pie),e(Pie,Mwo),e(H6,Ewo),e(H6,dj),e(dj,Cwo),e(H6,wwo),e(he,Awo),e(he,U6),e(U6,Iie),e(Iie,ywo),e(U6,Lwo),e(U6,cj),e(cj,xwo),e(U6,$wo),e(he,kwo),e(he,J6),e(J6,qie),e(qie,Swo),e(J6,Rwo),e(J6,fj),e(fj,Bwo),e(J6,Pwo),e(he,Iwo),e(he,Y6),e(Y6,Nie),e(Nie,qwo),e(Y6,Nwo),e(Y6,mj),e(mj,jwo),e(Y6,Dwo),e(he,Gwo),e(he,K6),e(K6,jie),e(jie,Owo),e(K6,Vwo),e(K6,gj),e(gj,Xwo),e(K6,zwo),e(Je,Qwo),e(Je,Z6),e(Z6,Wwo),e(Z6,Die),e(Die,Hwo),e(Z6,Uwo),e(Z6,Gie),e(Gie,Jwo),e(Je,Ywo),M(e1,Je,null),b(f,mBe,_),b(f,$i,_),e($i,o1),e(o1,Oie),M(h0,Oie,null),e($i,Kwo),e($i,Vie),e(Vie,Zwo),b(f,gBe,_),b(f,ko,_),M(p0,ko,null),e(ko,eAo),e(ko,ki),e(ki,oAo),e(ki,hj),e(hj,rAo),e(ki,tAo),e(ki,pj),e(pj,aAo),e(ki,nAo),e(ko,sAo),e(ko,u0),e(u0,lAo),e(u0,Xie),e(Xie,iAo),e(u0,dAo),e(ko,cAo),e(ko,tt),M(_0,tt,null),e(tt,fAo),e(tt,zie),e(zie,mAo),e(tt,gAo),e(tt,Si),e(Si,hAo),e(Si,Qie),e(Qie,pAo),e(Si,uAo),e(Si,uj),e(uj,_Ao),e(Si,bAo),e(tt,vAo),M(r1,tt,null),e(ko,FAo),e(ko,Ye),M(b0,Ye,null),e(Ye,TAo),e(Ye,Wie),e(Wie,MAo),e(Ye,EAo),e(Ye,ya),e(ya,CAo),e(ya,Hie),e(Hie,wAo),e(ya,AAo),e(ya,Uie),e(Uie,yAo),e(ya,LAo),e(ya,Jie),e(Jie,xAo),e(ya,$Ao),e(Ye,kAo),e(Ye,q),e(q,t1),e(t1,Yie),e(Yie,SAo),e(t1,RAo),e(t1,_j),e(_j,BAo),e(t1,PAo),e(q,IAo),e(q,a1),e(a1,Kie),e(Kie,qAo),e(a1,NAo),e(a1,bj),e(bj,jAo),e(a1,DAo),e(q,GAo),e(q,n1),e(n1,Zie),e(Zie,OAo),e(n1,VAo),e(n1,vj),e(vj,XAo),e(n1,zAo),e(q,QAo),e(q,s1),e(s1,ede),e(ede,WAo),e(s1,HAo),e(s1,Fj),e(Fj,UAo),e(s1,JAo),e(q,YAo),e(q,l1),e(l1,ode),e(ode,KAo),e(l1,ZAo),e(l1,Tj),e(Tj,e0o),e(l1,o0o),e(q,r0o),e(q,i1),e(i1,rde),e(rde,t0o),e(i1,a0o),e(i1,Mj),e(Mj,n0o),e(i1,s0o),e(q,l0o),e(q,d1),e(d1,tde),e(tde,i0o),e(d1,d0o),e(d1,Ej),e(Ej,c0o),e(d1,f0o),e(q,m0o),e(q,c1),e(c1,ade),e(ade,g0o),e(c1,h0o),e(c1,Cj),e(Cj,p0o),e(c1,u0o),e(q,_0o),e(q,f1),e(f1,nde),e(nde,b0o),e(f1,v0o),e(f1,wj),e(wj,F0o),e(f1,T0o),e(q,M0o),e(q,m1),e(m1,sde),e(sde,E0o),e(m1,C0o),e(m1,Aj),e(Aj,w0o),e(m1,A0o),e(q,y0o),e(q,g1),e(g1,lde),e(lde,L0o),e(g1,x0o),e(g1,yj),e(yj,$0o),e(g1,k0o),e(q,S0o),e(q,h1),e(h1,ide),e(ide,R0o),e(h1,B0o),e(h1,Lj),e(Lj,P0o),e(h1,I0o),e(q,q0o),e(q,p1),e(p1,dde),e(dde,N0o),e(p1,j0o),e(p1,xj),e(xj,D0o),e(p1,G0o),e(q,O0o),e(q,u1),e(u1,cde),e(cde,V0o),e(u1,X0o),e(u1,$j),e($j,z0o),e(u1,Q0o),e(q,W0o),e(q,_1),e(_1,fde),e(fde,H0o),e(_1,U0o),e(_1,kj),e(kj,J0o),e(_1,Y0o),e(q,K0o),e(q,b1),e(b1,mde),e(mde,Z0o),e(b1,eyo),e(b1,Sj),e(Sj,oyo),e(b1,ryo),e(q,tyo),e(q,v1),e(v1,gde),e(gde,ayo),e(v1,nyo),e(v1,Rj),e(Rj,syo),e(v1,lyo),e(q,iyo),e(q,F1),e(F1,hde),e(hde,dyo),e(F1,cyo),e(F1,Bj),e(Bj,fyo),e(F1,myo),e(q,gyo),e(q,T1),e(T1,pde),e(pde,hyo),e(T1,pyo),e(T1,Pj),e(Pj,uyo),e(T1,_yo),e(q,byo),e(q,M1),e(M1,ude),e(ude,vyo),e(M1,Fyo),e(M1,Ij),e(Ij,Tyo),e(M1,Myo),e(q,Eyo),e(q,E1),e(E1,_de),e(_de,Cyo),e(E1,wyo),e(E1,qj),e(qj,Ayo),e(E1,yyo),e(q,Lyo),e(q,C1),e(C1,bde),e(bde,xyo),e(C1,$yo),e(C1,Nj),e(Nj,kyo),e(C1,Syo),e(q,Ryo),e(q,w1),e(w1,vde),e(vde,Byo),e(w1,Pyo),e(w1,jj),e(jj,Iyo),e(w1,qyo),e(q,Nyo),e(q,A1),e(A1,Fde),e(Fde,jyo),e(A1,Dyo),e(A1,Dj),e(Dj,Gyo),e(A1,Oyo),e(q,Vyo),e(q,y1),e(y1,Tde),e(Tde,Xyo),e(y1,zyo),e(y1,Gj),e(Gj,Qyo),e(y1,Wyo),e(q,Hyo),e(q,L1),e(L1,Mde),e(Mde,Uyo),e(L1,Jyo),e(L1,Oj),e(Oj,Yyo),e(L1,Kyo),e(q,Zyo),e(q,x1),e(x1,Ede),e(Ede,eLo),e(x1,oLo),e(x1,Vj),e(Vj,rLo),e(x1,tLo),e(q,aLo),e(q,$1),e($1,Cde),e(Cde,nLo),e($1,sLo),e($1,Xj),e(Xj,lLo),e($1,iLo),e(q,dLo),e(q,k1),e(k1,wde),e(wde,cLo),e(k1,fLo),e(k1,zj),e(zj,mLo),e(k1,gLo),e(q,hLo),e(q,S1),e(S1,Ade),e(Ade,pLo),e(S1,uLo),e(S1,Qj),e(Qj,_Lo),e(S1,bLo),e(q,vLo),e(q,R1),e(R1,yde),e(yde,FLo),e(R1,TLo),e(R1,Wj),e(Wj,MLo),e(R1,ELo),e(q,CLo),e(q,B1),e(B1,Lde),e(Lde,wLo),e(B1,ALo),e(B1,Hj),e(Hj,yLo),e(B1,LLo),e(q,xLo),e(q,P1),e(P1,xde),e(xde,$Lo),e(P1,kLo),e(P1,Uj),e(Uj,SLo),e(P1,RLo),e(q,BLo),e(q,I1),e(I1,$de),e($de,PLo),e(I1,ILo),e(I1,Jj),e(Jj,qLo),e(I1,NLo),e(q,jLo),e(q,q1),e(q1,kde),e(kde,DLo),e(q1,GLo),e(q1,Yj),e(Yj,OLo),e(q1,VLo),e(q,XLo),e(q,N1),e(N1,Sde),e(Sde,zLo),e(N1,QLo),e(N1,Kj),e(Kj,WLo),e(N1,HLo),e(q,ULo),e(q,j1),e(j1,Rde),e(Rde,JLo),e(j1,YLo),e(j1,Zj),e(Zj,KLo),e(j1,ZLo),e(q,e8o),e(q,D1),e(D1,Bde),e(Bde,o8o),e(D1,r8o),e(D1,eD),e(eD,t8o),e(D1,a8o),e(q,n8o),e(q,G1),e(G1,Pde),e(Pde,s8o),e(G1,l8o),e(G1,oD),e(oD,i8o),e(G1,d8o),e(q,c8o),e(q,O1),e(O1,Ide),e(Ide,f8o),e(O1,m8o),e(O1,rD),e(rD,g8o),e(O1,h8o),e(q,p8o),e(q,V1),e(V1,qde),e(qde,u8o),e(V1,_8o),e(V1,tD),e(tD,b8o),e(V1,v8o),e(q,F8o),e(q,X1),e(X1,Nde),e(Nde,T8o),e(X1,M8o),e(X1,aD),e(aD,E8o),e(X1,C8o),e(q,w8o),e(q,z1),e(z1,jde),e(jde,A8o),e(z1,y8o),e(z1,nD),e(nD,L8o),e(z1,x8o),e(q,$8o),e(q,Q1),e(Q1,Dde),e(Dde,k8o),e(Q1,S8o),e(Q1,sD),e(sD,R8o),e(Q1,B8o),e(q,P8o),e(q,W1),e(W1,Gde),e(Gde,I8o),e(W1,q8o),e(W1,lD),e(lD,N8o),e(W1,j8o),e(q,D8o),e(q,H1),e(H1,Ode),e(Ode,G8o),e(H1,O8o),e(H1,iD),e(iD,V8o),e(H1,X8o),e(q,z8o),e(q,U1),e(U1,Vde),e(Vde,Q8o),e(U1,W8o),e(U1,dD),e(dD,H8o),e(U1,U8o),e(Ye,J8o),e(Ye,J1),e(J1,Y8o),e(J1,Xde),e(Xde,K8o),e(J1,Z8o),e(J1,zde),e(zde,e7o),e(Ye,o7o),M(Y1,Ye,null),b(f,hBe,_),b(f,Ri,_),e(Ri,K1),e(K1,Qde),M(v0,Qde,null),e(Ri,r7o),e(Ri,Wde),e(Wde,t7o),b(f,pBe,_),b(f,So,_),M(F0,So,null),e(So,a7o),e(So,Bi),e(Bi,n7o),e(Bi,cD),e(cD,s7o),e(Bi,l7o),e(Bi,fD),e(fD,i7o),e(Bi,d7o),e(So,c7o),e(So,T0),e(T0,f7o),e(T0,Hde),e(Hde,m7o),e(T0,g7o),e(So,h7o),e(So,at),M(M0,at,null),e(at,p7o),e(at,Ude),e(Ude,u7o),e(at,_7o),e(at,Pi),e(Pi,b7o),e(Pi,Jde),e(Jde,v7o),e(Pi,F7o),e(Pi,mD),e(mD,T7o),e(Pi,M7o),e(at,E7o),M(Z1,at,null),e(So,C7o),e(So,Ke),M(E0,Ke,null),e(Ke,w7o),e(Ke,Yde),e(Yde,A7o),e(Ke,y7o),e(Ke,La),e(La,L7o),e(La,Kde),e(Kde,x7o),e(La,$7o),e(La,Zde),e(Zde,k7o),e(La,S7o),e(La,ece),e(ece,R7o),e(La,B7o),e(Ke,P7o),e(Ke,Y),e(Y,eb),e(eb,oce),e(oce,I7o),e(eb,q7o),e(eb,gD),e(gD,N7o),e(eb,j7o),e(Y,D7o),e(Y,ob),e(ob,rce),e(rce,G7o),e(ob,O7o),e(ob,hD),e(hD,V7o),e(ob,X7o),e(Y,z7o),e(Y,rb),e(rb,tce),e(tce,Q7o),e(rb,W7o),e(rb,pD),e(pD,H7o),e(rb,U7o),e(Y,J7o),e(Y,tb),e(tb,ace),e(ace,Y7o),e(tb,K7o),e(tb,uD),e(uD,Z7o),e(tb,exo),e(Y,oxo),e(Y,ab),e(ab,nce),e(nce,rxo),e(ab,txo),e(ab,_D),e(_D,axo),e(ab,nxo),e(Y,sxo),e(Y,nb),e(nb,sce),e(sce,lxo),e(nb,ixo),e(nb,bD),e(bD,dxo),e(nb,cxo),e(Y,fxo),e(Y,sb),e(sb,lce),e(lce,mxo),e(sb,gxo),e(sb,vD),e(vD,hxo),e(sb,pxo),e(Y,uxo),e(Y,lb),e(lb,ice),e(ice,_xo),e(lb,bxo),e(lb,FD),e(FD,vxo),e(lb,Fxo),e(Y,Txo),e(Y,ib),e(ib,dce),e(dce,Mxo),e(ib,Exo),e(ib,TD),e(TD,Cxo),e(ib,wxo),e(Y,Axo),e(Y,db),e(db,cce),e(cce,yxo),e(db,Lxo),e(db,MD),e(MD,xxo),e(db,$xo),e(Y,kxo),e(Y,cb),e(cb,fce),e(fce,Sxo),e(cb,Rxo),e(cb,ED),e(ED,Bxo),e(cb,Pxo),e(Y,Ixo),e(Y,fb),e(fb,mce),e(mce,qxo),e(fb,Nxo),e(fb,CD),e(CD,jxo),e(fb,Dxo),e(Y,Gxo),e(Y,mb),e(mb,gce),e(gce,Oxo),e(mb,Vxo),e(mb,wD),e(wD,Xxo),e(mb,zxo),e(Y,Qxo),e(Y,gb),e(gb,hce),e(hce,Wxo),e(gb,Hxo),e(gb,AD),e(AD,Uxo),e(gb,Jxo),e(Y,Yxo),e(Y,hb),e(hb,pce),e(pce,Kxo),e(hb,Zxo),e(hb,yD),e(yD,e$o),e(hb,o$o),e(Y,r$o),e(Y,pb),e(pb,uce),e(uce,t$o),e(pb,a$o),e(pb,LD),e(LD,n$o),e(pb,s$o),e(Y,l$o),e(Y,ub),e(ub,_ce),e(_ce,i$o),e(ub,d$o),e(ub,xD),e(xD,c$o),e(ub,f$o),e(Y,m$o),e(Y,_b),e(_b,bce),e(bce,g$o),e(_b,h$o),e(_b,$D),e($D,p$o),e(_b,u$o),e(Y,_$o),e(Y,bb),e(bb,vce),e(vce,b$o),e(bb,v$o),e(bb,kD),e(kD,F$o),e(bb,T$o),e(Y,M$o),e(Y,vb),e(vb,Fce),e(Fce,E$o),e(vb,C$o),e(vb,SD),e(SD,w$o),e(vb,A$o),e(Y,y$o),e(Y,Fb),e(Fb,Tce),e(Tce,L$o),e(Fb,x$o),e(Fb,RD),e(RD,$$o),e(Fb,k$o),e(Y,S$o),e(Y,Tb),e(Tb,Mce),e(Mce,R$o),e(Tb,B$o),e(Tb,BD),e(BD,P$o),e(Tb,I$o),e(Y,q$o),e(Y,Mb),e(Mb,Ece),e(Ece,N$o),e(Mb,j$o),e(Mb,PD),e(PD,D$o),e(Mb,G$o),e(Y,O$o),e(Y,Eb),e(Eb,Cce),e(Cce,V$o),e(Eb,X$o),e(Eb,ID),e(ID,z$o),e(Eb,Q$o),e(Y,W$o),e(Y,Cb),e(Cb,wce),e(wce,H$o),e(Cb,U$o),e(Cb,qD),e(qD,J$o),e(Cb,Y$o),e(Y,K$o),e(Y,wb),e(wb,Ace),e(Ace,Z$o),e(wb,eko),e(wb,ND),e(ND,oko),e(wb,rko),e(Y,tko),e(Y,Ab),e(Ab,yce),e(yce,ako),e(Ab,nko),e(Ab,jD),e(jD,sko),e(Ab,lko),e(Y,iko),e(Y,yb),e(yb,Lce),e(Lce,dko),e(yb,cko),e(yb,DD),e(DD,fko),e(yb,mko),e(Ke,gko),e(Ke,Lb),e(Lb,hko),e(Lb,xce),e(xce,pko),e(Lb,uko),e(Lb,$ce),e($ce,_ko),e(Ke,bko),M(xb,Ke,null),b(f,uBe,_),b(f,Ii,_),e(Ii,$b),e($b,kce),M(C0,kce,null),e(Ii,vko),e(Ii,Sce),e(Sce,Fko),b(f,_Be,_),b(f,Ro,_),M(w0,Ro,null),e(Ro,Tko),e(Ro,qi),e(qi,Mko),e(qi,GD),e(GD,Eko),e(qi,Cko),e(qi,OD),e(OD,wko),e(qi,Ako),e(Ro,yko),e(Ro,A0),e(A0,Lko),e(A0,Rce),e(Rce,xko),e(A0,$ko),e(Ro,kko),e(Ro,nt),M(y0,nt,null),e(nt,Sko),e(nt,Bce),e(Bce,Rko),e(nt,Bko),e(nt,Ni),e(Ni,Pko),e(Ni,Pce),e(Pce,Iko),e(Ni,qko),e(Ni,VD),e(VD,Nko),e(Ni,jko),e(nt,Dko),M(kb,nt,null),e(Ro,Gko),e(Ro,Ze),M(L0,Ze,null),e(Ze,Oko),e(Ze,Ice),e(Ice,Vko),e(Ze,Xko),e(Ze,xa),e(xa,zko),e(xa,qce),e(qce,Qko),e(xa,Wko),e(xa,Nce),e(Nce,Hko),e(xa,Uko),e(xa,jce),e(jce,Jko),e(xa,Yko),e(Ze,Kko),e(Ze,Wr),e(Wr,Sb),e(Sb,Dce),e(Dce,Zko),e(Sb,eSo),e(Sb,XD),e(XD,oSo),e(Sb,rSo),e(Wr,tSo),e(Wr,Rb),e(Rb,Gce),e(Gce,aSo),e(Rb,nSo),e(Rb,zD),e(zD,sSo),e(Rb,lSo),e(Wr,iSo),e(Wr,Bb),e(Bb,Oce),e(Oce,dSo),e(Bb,cSo),e(Bb,QD),e(QD,fSo),e(Bb,mSo),e(Wr,gSo),e(Wr,Pb),e(Pb,Vce),e(Vce,hSo),e(Pb,pSo),e(Pb,WD),e(WD,uSo),e(Pb,_So),e(Wr,bSo),e(Wr,Ib),e(Ib,Xce),e(Xce,vSo),e(Ib,FSo),e(Ib,HD),e(HD,TSo),e(Ib,MSo),e(Ze,ESo),e(Ze,qb),e(qb,CSo),e(qb,zce),e(zce,wSo),e(qb,ASo),e(qb,Qce),e(Qce,ySo),e(Ze,LSo),M(Nb,Ze,null),b(f,bBe,_),b(f,ji,_),e(ji,jb),e(jb,Wce),M(x0,Wce,null),e(ji,xSo),e(ji,Hce),e(Hce,$So),b(f,vBe,_),b(f,Bo,_),M($0,Bo,null),e(Bo,kSo),e(Bo,Di),e(Di,SSo),e(Di,UD),e(UD,RSo),e(Di,BSo),e(Di,JD),e(JD,PSo),e(Di,ISo),e(Bo,qSo),e(Bo,k0),e(k0,NSo),e(k0,Uce),e(Uce,jSo),e(k0,DSo),e(Bo,GSo),e(Bo,st),M(S0,st,null),e(st,OSo),e(st,Jce),e(Jce,VSo),e(st,XSo),e(st,Gi),e(Gi,zSo),e(Gi,Yce),e(Yce,QSo),e(Gi,WSo),e(Gi,YD),e(YD,HSo),e(Gi,USo),e(st,JSo),M(Db,st,null),e(Bo,YSo),e(Bo,eo),M(R0,eo,null),e(eo,KSo),e(eo,Kce),e(Kce,ZSo),e(eo,eRo),e(eo,$a),e($a,oRo),e($a,Zce),e(Zce,rRo),e($a,tRo),e($a,efe),e(efe,aRo),e($a,nRo),e($a,ofe),e(ofe,sRo),e($a,lRo),e(eo,iRo),e(eo,U),e(U,Gb),e(Gb,rfe),e(rfe,dRo),e(Gb,cRo),e(Gb,KD),e(KD,fRo),e(Gb,mRo),e(U,gRo),e(U,Ob),e(Ob,tfe),e(tfe,hRo),e(Ob,pRo),e(Ob,ZD),e(ZD,uRo),e(Ob,_Ro),e(U,bRo),e(U,Vb),e(Vb,afe),e(afe,vRo),e(Vb,FRo),e(Vb,eG),e(eG,TRo),e(Vb,MRo),e(U,ERo),e(U,Xb),e(Xb,nfe),e(nfe,CRo),e(Xb,wRo),e(Xb,oG),e(oG,ARo),e(Xb,yRo),e(U,LRo),e(U,zb),e(zb,sfe),e(sfe,xRo),e(zb,$Ro),e(zb,rG),e(rG,kRo),e(zb,SRo),e(U,RRo),e(U,Qb),e(Qb,lfe),e(lfe,BRo),e(Qb,PRo),e(Qb,tG),e(tG,IRo),e(Qb,qRo),e(U,NRo),e(U,Wb),e(Wb,ife),e(ife,jRo),e(Wb,DRo),e(Wb,aG),e(aG,GRo),e(Wb,ORo),e(U,VRo),e(U,Hb),e(Hb,dfe),e(dfe,XRo),e(Hb,zRo),e(Hb,nG),e(nG,QRo),e(Hb,WRo),e(U,HRo),e(U,Ub),e(Ub,cfe),e(cfe,URo),e(Ub,JRo),e(Ub,sG),e(sG,YRo),e(Ub,KRo),e(U,ZRo),e(U,Jb),e(Jb,ffe),e(ffe,eBo),e(Jb,oBo),e(Jb,lG),e(lG,rBo),e(Jb,tBo),e(U,aBo),e(U,Yb),e(Yb,mfe),e(mfe,nBo),e(Yb,sBo),e(Yb,iG),e(iG,lBo),e(Yb,iBo),e(U,dBo),e(U,Kb),e(Kb,gfe),e(gfe,cBo),e(Kb,fBo),e(Kb,dG),e(dG,mBo),e(Kb,gBo),e(U,hBo),e(U,Zb),e(Zb,hfe),e(hfe,pBo),e(Zb,uBo),e(Zb,cG),e(cG,_Bo),e(Zb,bBo),e(U,vBo),e(U,e2),e(e2,pfe),e(pfe,FBo),e(e2,TBo),e(e2,fG),e(fG,MBo),e(e2,EBo),e(U,CBo),e(U,o2),e(o2,ufe),e(ufe,wBo),e(o2,ABo),e(o2,mG),e(mG,yBo),e(o2,LBo),e(U,xBo),e(U,r2),e(r2,_fe),e(_fe,$Bo),e(r2,kBo),e(r2,gG),e(gG,SBo),e(r2,RBo),e(U,BBo),e(U,t2),e(t2,bfe),e(bfe,PBo),e(t2,IBo),e(t2,hG),e(hG,qBo),e(t2,NBo),e(U,jBo),e(U,a2),e(a2,vfe),e(vfe,DBo),e(a2,GBo),e(a2,pG),e(pG,OBo),e(a2,VBo),e(U,XBo),e(U,n2),e(n2,Ffe),e(Ffe,zBo),e(n2,QBo),e(n2,uG),e(uG,WBo),e(n2,HBo),e(U,UBo),e(U,s2),e(s2,Tfe),e(Tfe,JBo),e(s2,YBo),e(s2,_G),e(_G,KBo),e(s2,ZBo),e(U,ePo),e(U,l2),e(l2,Mfe),e(Mfe,oPo),e(l2,rPo),e(l2,bG),e(bG,tPo),e(l2,aPo),e(U,nPo),e(U,i2),e(i2,Efe),e(Efe,sPo),e(i2,lPo),e(i2,vG),e(vG,iPo),e(i2,dPo),e(U,cPo),e(U,d2),e(d2,Cfe),e(Cfe,fPo),e(d2,mPo),e(d2,FG),e(FG,gPo),e(d2,hPo),e(U,pPo),e(U,c2),e(c2,wfe),e(wfe,uPo),e(c2,_Po),e(c2,TG),e(TG,bPo),e(c2,vPo),e(U,FPo),e(U,f2),e(f2,Afe),e(Afe,TPo),e(f2,MPo),e(f2,MG),e(MG,EPo),e(f2,CPo),e(U,wPo),e(U,m2),e(m2,yfe),e(yfe,APo),e(m2,yPo),e(m2,EG),e(EG,LPo),e(m2,xPo),e(U,$Po),e(U,g2),e(g2,Lfe),e(Lfe,kPo),e(g2,SPo),e(g2,CG),e(CG,RPo),e(g2,BPo),e(U,PPo),e(U,h2),e(h2,xfe),e(xfe,IPo),e(h2,qPo),e(h2,wG),e(wG,NPo),e(h2,jPo),e(U,DPo),e(U,p2),e(p2,$fe),e($fe,GPo),e(p2,OPo),e(p2,AG),e(AG,VPo),e(p2,XPo),e(U,zPo),e(U,u2),e(u2,kfe),e(kfe,QPo),e(u2,WPo),e(u2,yG),e(yG,HPo),e(u2,UPo),e(U,JPo),e(U,_2),e(_2,Sfe),e(Sfe,YPo),e(_2,KPo),e(_2,LG),e(LG,ZPo),e(_2,eIo),e(U,oIo),e(U,b2),e(b2,Rfe),e(Rfe,rIo),e(b2,tIo),e(b2,xG),e(xG,aIo),e(b2,nIo),e(U,sIo),e(U,v2),e(v2,Bfe),e(Bfe,lIo),e(v2,iIo),e(v2,$G),e($G,dIo),e(v2,cIo),e(eo,fIo),e(eo,F2),e(F2,mIo),e(F2,Pfe),e(Pfe,gIo),e(F2,hIo),e(F2,Ife),e(Ife,pIo),e(eo,uIo),M(T2,eo,null),b(f,FBe,_),b(f,Oi,_),e(Oi,M2),e(M2,qfe),M(B0,qfe,null),e(Oi,_Io),e(Oi,Nfe),e(Nfe,bIo),b(f,TBe,_),b(f,Po,_),M(P0,Po,null),e(Po,vIo),e(Po,Vi),e(Vi,FIo),e(Vi,kG),e(kG,TIo),e(Vi,MIo),e(Vi,SG),e(SG,EIo),e(Vi,CIo),e(Po,wIo),e(Po,I0),e(I0,AIo),e(I0,jfe),e(jfe,yIo),e(I0,LIo),e(Po,xIo),e(Po,lt),M(q0,lt,null),e(lt,$Io),e(lt,Dfe),e(Dfe,kIo),e(lt,SIo),e(lt,Xi),e(Xi,RIo),e(Xi,Gfe),e(Gfe,BIo),e(Xi,PIo),e(Xi,RG),e(RG,IIo),e(Xi,qIo),e(lt,NIo),M(E2,lt,null),e(Po,jIo),e(Po,oo),M(N0,oo,null),e(oo,DIo),e(oo,Ofe),e(Ofe,GIo),e(oo,OIo),e(oo,ka),e(ka,VIo),e(ka,Vfe),e(Vfe,XIo),e(ka,zIo),e(ka,Xfe),e(Xfe,QIo),e(ka,WIo),e(ka,zfe),e(zfe,HIo),e(ka,UIo),e(oo,JIo),e(oo,O),e(O,C2),e(C2,Qfe),e(Qfe,YIo),e(C2,KIo),e(C2,BG),e(BG,ZIo),e(C2,eqo),e(O,oqo),e(O,w2),e(w2,Wfe),e(Wfe,rqo),e(w2,tqo),e(w2,PG),e(PG,aqo),e(w2,nqo),e(O,sqo),e(O,A2),e(A2,Hfe),e(Hfe,lqo),e(A2,iqo),e(A2,IG),e(IG,dqo),e(A2,cqo),e(O,fqo),e(O,y2),e(y2,Ufe),e(Ufe,mqo),e(y2,gqo),e(y2,qG),e(qG,hqo),e(y2,pqo),e(O,uqo),e(O,L2),e(L2,Jfe),e(Jfe,_qo),e(L2,bqo),e(L2,NG),e(NG,vqo),e(L2,Fqo),e(O,Tqo),e(O,x2),e(x2,Yfe),e(Yfe,Mqo),e(x2,Eqo),e(x2,jG),e(jG,Cqo),e(x2,wqo),e(O,Aqo),e(O,$2),e($2,Kfe),e(Kfe,yqo),e($2,Lqo),e($2,DG),e(DG,xqo),e($2,$qo),e(O,kqo),e(O,k2),e(k2,Zfe),e(Zfe,Sqo),e(k2,Rqo),e(k2,GG),e(GG,Bqo),e(k2,Pqo),e(O,Iqo),e(O,S2),e(S2,eme),e(eme,qqo),e(S2,Nqo),e(S2,OG),e(OG,jqo),e(S2,Dqo),e(O,Gqo),e(O,R2),e(R2,ome),e(ome,Oqo),e(R2,Vqo),e(R2,VG),e(VG,Xqo),e(R2,zqo),e(O,Qqo),e(O,B2),e(B2,rme),e(rme,Wqo),e(B2,Hqo),e(B2,XG),e(XG,Uqo),e(B2,Jqo),e(O,Yqo),e(O,P2),e(P2,tme),e(tme,Kqo),e(P2,Zqo),e(P2,zG),e(zG,eNo),e(P2,oNo),e(O,rNo),e(O,I2),e(I2,ame),e(ame,tNo),e(I2,aNo),e(I2,QG),e(QG,nNo),e(I2,sNo),e(O,lNo),e(O,q2),e(q2,nme),e(nme,iNo),e(q2,dNo),e(q2,WG),e(WG,cNo),e(q2,fNo),e(O,mNo),e(O,N2),e(N2,sme),e(sme,gNo),e(N2,hNo),e(N2,HG),e(HG,pNo),e(N2,uNo),e(O,_No),e(O,j2),e(j2,lme),e(lme,bNo),e(j2,vNo),e(j2,UG),e(UG,FNo),e(j2,TNo),e(O,MNo),e(O,D2),e(D2,ime),e(ime,ENo),e(D2,CNo),e(D2,JG),e(JG,wNo),e(D2,ANo),e(O,yNo),e(O,G2),e(G2,dme),e(dme,LNo),e(G2,xNo),e(G2,YG),e(YG,$No),e(G2,kNo),e(O,SNo),e(O,O2),e(O2,cme),e(cme,RNo),e(O2,BNo),e(O2,KG),e(KG,PNo),e(O2,INo),e(O,qNo),e(O,V2),e(V2,fme),e(fme,NNo),e(V2,jNo),e(V2,ZG),e(ZG,DNo),e(V2,GNo),e(O,ONo),e(O,X2),e(X2,mme),e(mme,VNo),e(X2,XNo),e(X2,eO),e(eO,zNo),e(X2,QNo),e(O,WNo),e(O,z2),e(z2,gme),e(gme,HNo),e(z2,UNo),e(z2,oO),e(oO,JNo),e(z2,YNo),e(O,KNo),e(O,Q2),e(Q2,hme),e(hme,ZNo),e(Q2,ejo),e(Q2,rO),e(rO,ojo),e(Q2,rjo),e(O,tjo),e(O,W2),e(W2,pme),e(pme,ajo),e(W2,njo),e(W2,tO),e(tO,sjo),e(W2,ljo),e(O,ijo),e(O,H2),e(H2,ume),e(ume,djo),e(H2,cjo),e(H2,aO),e(aO,fjo),e(H2,mjo),e(O,gjo),e(O,U2),e(U2,_me),e(_me,hjo),e(U2,pjo),e(U2,nO),e(nO,ujo),e(U2,_jo),e(O,bjo),e(O,J2),e(J2,bme),e(bme,vjo),e(J2,Fjo),e(J2,sO),e(sO,Tjo),e(J2,Mjo),e(O,Ejo),e(O,Y2),e(Y2,vme),e(vme,Cjo),e(Y2,wjo),e(Y2,lO),e(lO,Ajo),e(Y2,yjo),e(O,Ljo),e(O,K2),e(K2,Fme),e(Fme,xjo),e(K2,$jo),e(K2,iO),e(iO,kjo),e(K2,Sjo),e(O,Rjo),e(O,Z2),e(Z2,Tme),e(Tme,Bjo),e(Z2,Pjo),e(Z2,dO),e(dO,Ijo),e(Z2,qjo),e(O,Njo),e(O,e5),e(e5,Mme),e(Mme,jjo),e(e5,Djo),e(e5,cO),e(cO,Gjo),e(e5,Ojo),e(O,Vjo),e(O,o5),e(o5,Eme),e(Eme,Xjo),e(o5,zjo),e(o5,fO),e(fO,Qjo),e(o5,Wjo),e(O,Hjo),e(O,r5),e(r5,Cme),e(Cme,Ujo),e(r5,Jjo),e(r5,mO),e(mO,Yjo),e(r5,Kjo),e(O,Zjo),e(O,t5),e(t5,wme),e(wme,eDo),e(t5,oDo),e(t5,gO),e(gO,rDo),e(t5,tDo),e(O,aDo),e(O,a5),e(a5,Ame),e(Ame,nDo),e(a5,sDo),e(a5,hO),e(hO,lDo),e(a5,iDo),e(O,dDo),e(O,n5),e(n5,yme),e(yme,cDo),e(n5,fDo),e(n5,pO),e(pO,mDo),e(n5,gDo),e(O,hDo),e(O,s5),e(s5,Lme),e(Lme,pDo),e(s5,uDo),e(s5,uO),e(uO,_Do),e(s5,bDo),e(O,vDo),e(O,l5),e(l5,xme),e(xme,FDo),e(l5,TDo),e(l5,_O),e(_O,MDo),e(l5,EDo),e(O,CDo),e(O,i5),e(i5,$me),e($me,wDo),e(i5,ADo),e(i5,bO),e(bO,yDo),e(i5,LDo),e(oo,xDo),e(oo,d5),e(d5,$Do),e(d5,kme),e(kme,kDo),e(d5,SDo),e(d5,Sme),e(Sme,RDo),e(oo,BDo),M(c5,oo,null),b(f,MBe,_),b(f,zi,_),e(zi,f5),e(f5,Rme),M(j0,Rme,null),e(zi,PDo),e(zi,Bme),e(Bme,IDo),b(f,EBe,_),b(f,Io,_),M(D0,Io,null),e(Io,qDo),e(Io,Qi),e(Qi,NDo),e(Qi,vO),e(vO,jDo),e(Qi,DDo),e(Qi,FO),e(FO,GDo),e(Qi,ODo),e(Io,VDo),e(Io,G0),e(G0,XDo),e(G0,Pme),e(Pme,zDo),e(G0,QDo),e(Io,WDo),e(Io,it),M(O0,it,null),e(it,HDo),e(it,Ime),e(Ime,UDo),e(it,JDo),e(it,Wi),e(Wi,YDo),e(Wi,qme),e(qme,KDo),e(Wi,ZDo),e(Wi,TO),e(TO,eGo),e(Wi,oGo),e(it,rGo),M(m5,it,null),e(Io,tGo),e(Io,ro),M(V0,ro,null),e(ro,aGo),e(ro,Nme),e(Nme,nGo),e(ro,sGo),e(ro,Sa),e(Sa,lGo),e(Sa,jme),e(jme,iGo),e(Sa,dGo),e(Sa,Dme),e(Dme,cGo),e(Sa,fGo),e(Sa,Gme),e(Gme,mGo),e(Sa,gGo),e(ro,hGo),e(ro,Ome),e(Ome,g5),e(g5,Vme),e(Vme,pGo),e(g5,uGo),e(g5,MO),e(MO,_Go),e(g5,bGo),e(ro,vGo),e(ro,h5),e(h5,FGo),e(h5,Xme),e(Xme,TGo),e(h5,MGo),e(h5,zme),e(zme,EGo),e(ro,CGo),M(p5,ro,null),b(f,CBe,_),b(f,Hi,_),e(Hi,u5),e(u5,Qme),M(X0,Qme,null),e(Hi,wGo),e(Hi,Wme),e(Wme,AGo),b(f,wBe,_),b(f,qo,_),M(z0,qo,null),e(qo,yGo),e(qo,Ui),e(Ui,LGo),e(Ui,EO),e(EO,xGo),e(Ui,$Go),e(Ui,CO),e(CO,kGo),e(Ui,SGo),e(qo,RGo),e(qo,Q0),e(Q0,BGo),e(Q0,Hme),e(Hme,PGo),e(Q0,IGo),e(qo,qGo),e(qo,dt),M(W0,dt,null),e(dt,NGo),e(dt,Ume),e(Ume,jGo),e(dt,DGo),e(dt,Ji),e(Ji,GGo),e(Ji,Jme),e(Jme,OGo),e(Ji,VGo),e(Ji,wO),e(wO,XGo),e(Ji,zGo),e(dt,QGo),M(_5,dt,null),e(qo,WGo),e(qo,to),M(H0,to,null),e(to,HGo),e(to,Yme),e(Yme,UGo),e(to,JGo),e(to,Ra),e(Ra,YGo),e(Ra,Kme),e(Kme,KGo),e(Ra,ZGo),e(Ra,Zme),e(Zme,eOo),e(Ra,oOo),e(Ra,ege),e(ege,rOo),e(Ra,tOo),e(to,aOo),e(to,ve),e(ve,b5),e(b5,oge),e(oge,nOo),e(b5,sOo),e(b5,AO),e(AO,lOo),e(b5,iOo),e(ve,dOo),e(ve,v5),e(v5,rge),e(rge,cOo),e(v5,fOo),e(v5,yO),e(yO,mOo),e(v5,gOo),e(ve,hOo),e(ve,F5),e(F5,tge),e(tge,pOo),e(F5,uOo),e(F5,LO),e(LO,_Oo),e(F5,bOo),e(ve,vOo),e(ve,Ls),e(Ls,age),e(age,FOo),e(Ls,TOo),e(Ls,xO),e(xO,MOo),e(Ls,EOo),e(Ls,$O),e($O,COo),e(Ls,wOo),e(ve,AOo),e(ve,T5),e(T5,nge),e(nge,yOo),e(T5,LOo),e(T5,kO),e(kO,xOo),e(T5,$Oo),e(ve,kOo),e(ve,ct),e(ct,sge),e(sge,SOo),e(ct,ROo),e(ct,SO),e(SO,BOo),e(ct,POo),e(ct,RO),e(RO,IOo),e(ct,qOo),e(ct,BO),e(BO,NOo),e(ct,jOo),e(ve,DOo),e(ve,M5),e(M5,lge),e(lge,GOo),e(M5,OOo),e(M5,PO),e(PO,VOo),e(M5,XOo),e(ve,zOo),e(ve,E5),e(E5,ige),e(ige,QOo),e(E5,WOo),e(E5,IO),e(IO,HOo),e(E5,UOo),e(ve,JOo),e(ve,C5),e(C5,dge),e(dge,YOo),e(C5,KOo),e(C5,qO),e(qO,ZOo),e(C5,eVo),e(ve,oVo),e(ve,w5),e(w5,cge),e(cge,rVo),e(w5,tVo),e(w5,NO),e(NO,aVo),e(w5,nVo),e(ve,sVo),e(ve,A5),e(A5,fge),e(fge,lVo),e(A5,iVo),e(A5,jO),e(jO,dVo),e(A5,cVo),e(ve,fVo),e(ve,y5),e(y5,mge),e(mge,mVo),e(y5,gVo),e(y5,DO),e(DO,hVo),e(y5,pVo),e(ve,uVo),e(ve,L5),e(L5,gge),e(gge,_Vo),e(L5,bVo),e(L5,GO),e(GO,vVo),e(L5,FVo),e(to,TVo),e(to,x5),e(x5,MVo),e(x5,hge),e(hge,EVo),e(x5,CVo),e(x5,pge),e(pge,wVo),e(to,AVo),M($5,to,null),b(f,ABe,_),b(f,Yi,_),e(Yi,k5),e(k5,uge),M(U0,uge,null),e(Yi,yVo),e(Yi,_ge),e(_ge,LVo),b(f,yBe,_),b(f,No,_),M(J0,No,null),e(No,xVo),e(No,Ki),e(Ki,$Vo),e(Ki,OO),e(OO,kVo),e(Ki,SVo),e(Ki,VO),e(VO,RVo),e(Ki,BVo),e(No,PVo),e(No,Y0),e(Y0,IVo),e(Y0,bge),e(bge,qVo),e(Y0,NVo),e(No,jVo),e(No,ft),M(K0,ft,null),e(ft,DVo),e(ft,vge),e(vge,GVo),e(ft,OVo),e(ft,Zi),e(Zi,VVo),e(Zi,Fge),e(Fge,XVo),e(Zi,zVo),e(Zi,XO),e(XO,QVo),e(Zi,WVo),e(ft,HVo),M(S5,ft,null),e(No,UVo),e(No,ao),M(Z0,ao,null),e(ao,JVo),e(ao,Tge),e(Tge,YVo),e(ao,KVo),e(ao,Ba),e(Ba,ZVo),e(Ba,Mge),e(Mge,eXo),e(Ba,oXo),e(Ba,Ege),e(Ege,rXo),e(Ba,tXo),e(Ba,Cge),e(Cge,aXo),e(Ba,nXo),e(ao,sXo),e(ao,wge),e(wge,R5),e(R5,Age),e(Age,lXo),e(R5,iXo),e(R5,zO),e(zO,dXo),e(R5,cXo),e(ao,fXo),e(ao,B5),e(B5,mXo),e(B5,yge),e(yge,gXo),e(B5,hXo),e(B5,Lge),e(Lge,pXo),e(ao,uXo),M(P5,ao,null),b(f,LBe,_),b(f,ed,_),e(ed,I5),e(I5,xge),M(ey,xge,null),e(ed,_Xo),e(ed,$ge),e($ge,bXo),b(f,xBe,_),b(f,jo,_),M(oy,jo,null),e(jo,vXo),e(jo,od),e(od,FXo),e(od,QO),e(QO,TXo),e(od,MXo),e(od,WO),e(WO,EXo),e(od,CXo),e(jo,wXo),e(jo,ry),e(ry,AXo),e(ry,kge),e(kge,yXo),e(ry,LXo),e(jo,xXo),e(jo,mt),M(ty,mt,null),e(mt,$Xo),e(mt,Sge),e(Sge,kXo),e(mt,SXo),e(mt,rd),e(rd,RXo),e(rd,Rge),e(Rge,BXo),e(rd,PXo),e(rd,HO),e(HO,IXo),e(rd,qXo),e(mt,NXo),M(q5,mt,null),e(jo,jXo),e(jo,no),M(ay,no,null),e(no,DXo),e(no,Bge),e(Bge,GXo),e(no,OXo),e(no,Pa),e(Pa,VXo),e(Pa,Pge),e(Pge,XXo),e(Pa,zXo),e(Pa,Ige),e(Ige,QXo),e(Pa,WXo),e(Pa,qge),e(qge,HXo),e(Pa,UXo),e(no,JXo),e(no,qe),e(qe,N5),e(N5,Nge),e(Nge,YXo),e(N5,KXo),e(N5,UO),e(UO,ZXo),e(N5,ezo),e(qe,ozo),e(qe,j5),e(j5,jge),e(jge,rzo),e(j5,tzo),e(j5,JO),e(JO,azo),e(j5,nzo),e(qe,szo),e(qe,D5),e(D5,Dge),e(Dge,lzo),e(D5,izo),e(D5,YO),e(YO,dzo),e(D5,czo),e(qe,fzo),e(qe,G5),e(G5,Gge),e(Gge,mzo),e(G5,gzo),e(G5,KO),e(KO,hzo),e(G5,pzo),e(qe,uzo),e(qe,O5),e(O5,Oge),e(Oge,_zo),e(O5,bzo),e(O5,ZO),e(ZO,vzo),e(O5,Fzo),e(qe,Tzo),e(qe,V5),e(V5,Vge),e(Vge,Mzo),e(V5,Ezo),e(V5,eV),e(eV,Czo),e(V5,wzo),e(qe,Azo),e(qe,X5),e(X5,Xge),e(Xge,yzo),e(X5,Lzo),e(X5,oV),e(oV,xzo),e(X5,$zo),e(qe,kzo),e(qe,z5),e(z5,zge),e(zge,Szo),e(z5,Rzo),e(z5,rV),e(rV,Bzo),e(z5,Pzo),e(no,Izo),e(no,Q5),e(Q5,qzo),e(Q5,Qge),e(Qge,Nzo),e(Q5,jzo),e(Q5,Wge),e(Wge,Dzo),e(no,Gzo),M(W5,no,null),b(f,$Be,_),b(f,td,_),e(td,H5),e(H5,Hge),M(ny,Hge,null),e(td,Ozo),e(td,Uge),e(Uge,Vzo),b(f,kBe,_),b(f,Do,_),M(sy,Do,null),e(Do,Xzo),e(Do,ad),e(ad,zzo),e(ad,tV),e(tV,Qzo),e(ad,Wzo),e(ad,aV),e(aV,Hzo),e(ad,Uzo),e(Do,Jzo),e(Do,ly),e(ly,Yzo),e(ly,Jge),e(Jge,Kzo),e(ly,Zzo),e(Do,eQo),e(Do,gt),M(iy,gt,null),e(gt,oQo),e(gt,Yge),e(Yge,rQo),e(gt,tQo),e(gt,nd),e(nd,aQo),e(nd,Kge),e(Kge,nQo),e(nd,sQo),e(nd,nV),e(nV,lQo),e(nd,iQo),e(gt,dQo),M(U5,gt,null),e(Do,cQo),e(Do,so),M(dy,so,null),e(so,fQo),e(so,Zge),e(Zge,mQo),e(so,gQo),e(so,Ia),e(Ia,hQo),e(Ia,ehe),e(ehe,pQo),e(Ia,uQo),e(Ia,ohe),e(ohe,_Qo),e(Ia,bQo),e(Ia,rhe),e(rhe,vQo),e(Ia,FQo),e(so,TQo),e(so,qa),e(qa,J5),e(J5,the),e(the,MQo),e(J5,EQo),e(J5,sV),e(sV,CQo),e(J5,wQo),e(qa,AQo),e(qa,Y5),e(Y5,ahe),e(ahe,yQo),e(Y5,LQo),e(Y5,lV),e(lV,xQo),e(Y5,$Qo),e(qa,kQo),e(qa,K5),e(K5,nhe),e(nhe,SQo),e(K5,RQo),e(K5,iV),e(iV,BQo),e(K5,PQo),e(qa,IQo),e(qa,Z5),e(Z5,she),e(she,qQo),e(Z5,NQo),e(Z5,dV),e(dV,jQo),e(Z5,DQo),e(so,GQo),e(so,ev),e(ev,OQo),e(ev,lhe),e(lhe,VQo),e(ev,XQo),e(ev,ihe),e(ihe,zQo),e(so,QQo),M(ov,so,null),b(f,SBe,_),b(f,sd,_),e(sd,rv),e(rv,dhe),M(cy,dhe,null),e(sd,WQo),e(sd,che),e(che,HQo),b(f,RBe,_),b(f,Go,_),M(fy,Go,null),e(Go,UQo),e(Go,ld),e(ld,JQo),e(ld,cV),e(cV,YQo),e(ld,KQo),e(ld,fV),e(fV,ZQo),e(ld,eWo),e(Go,oWo),e(Go,my),e(my,rWo),e(my,fhe),e(fhe,tWo),e(my,aWo),e(Go,nWo),e(Go,ht),M(gy,ht,null),e(ht,sWo),e(ht,mhe),e(mhe,lWo),e(ht,iWo),e(ht,id),e(id,dWo),e(id,ghe),e(ghe,cWo),e(id,fWo),e(id,mV),e(mV,mWo),e(id,gWo),e(ht,hWo),M(tv,ht,null),e(Go,pWo),e(Go,lo),M(hy,lo,null),e(lo,uWo),e(lo,hhe),e(hhe,_Wo),e(lo,bWo),e(lo,Na),e(Na,vWo),e(Na,phe),e(phe,FWo),e(Na,TWo),e(Na,uhe),e(uhe,MWo),e(Na,EWo),e(Na,_he),e(_he,CWo),e(Na,wWo),e(lo,AWo),e(lo,Ne),e(Ne,av),e(av,bhe),e(bhe,yWo),e(av,LWo),e(av,gV),e(gV,xWo),e(av,$Wo),e(Ne,kWo),e(Ne,nv),e(nv,vhe),e(vhe,SWo),e(nv,RWo),e(nv,hV),e(hV,BWo),e(nv,PWo),e(Ne,IWo),e(Ne,sv),e(sv,Fhe),e(Fhe,qWo),e(sv,NWo),e(sv,pV),e(pV,jWo),e(sv,DWo),e(Ne,GWo),e(Ne,lv),e(lv,The),e(The,OWo),e(lv,VWo),e(lv,uV),e(uV,XWo),e(lv,zWo),e(Ne,QWo),e(Ne,iv),e(iv,Mhe),e(Mhe,WWo),e(iv,HWo),e(iv,_V),e(_V,UWo),e(iv,JWo),e(Ne,YWo),e(Ne,dv),e(dv,Ehe),e(Ehe,KWo),e(dv,ZWo),e(dv,bV),e(bV,eHo),e(dv,oHo),e(Ne,rHo),e(Ne,cv),e(cv,Che),e(Che,tHo),e(cv,aHo),e(cv,vV),e(vV,nHo),e(cv,sHo),e(Ne,lHo),e(Ne,fv),e(fv,whe),e(whe,iHo),e(fv,dHo),e(fv,FV),e(FV,cHo),e(fv,fHo),e(lo,mHo),e(lo,mv),e(mv,gHo),e(mv,Ahe),e(Ahe,hHo),e(mv,pHo),e(mv,yhe),e(yhe,uHo),e(lo,_Ho),M(gv,lo,null),b(f,BBe,_),b(f,dd,_),e(dd,hv),e(hv,Lhe),M(py,Lhe,null),e(dd,bHo),e(dd,xhe),e(xhe,vHo),b(f,PBe,_),b(f,Oo,_),M(uy,Oo,null),e(Oo,FHo),e(Oo,cd),e(cd,THo),e(cd,TV),e(TV,MHo),e(cd,EHo),e(cd,MV),e(MV,CHo),e(cd,wHo),e(Oo,AHo),e(Oo,_y),e(_y,yHo),e(_y,$he),e($he,LHo),e(_y,xHo),e(Oo,$Ho),e(Oo,pt),M(by,pt,null),e(pt,kHo),e(pt,khe),e(khe,SHo),e(pt,RHo),e(pt,fd),e(fd,BHo),e(fd,She),e(She,PHo),e(fd,IHo),e(fd,EV),e(EV,qHo),e(fd,NHo),e(pt,jHo),M(pv,pt,null),e(Oo,DHo),e(Oo,io),M(vy,io,null),e(io,GHo),e(io,Rhe),e(Rhe,OHo),e(io,VHo),e(io,ja),e(ja,XHo),e(ja,Bhe),e(Bhe,zHo),e(ja,QHo),e(ja,Phe),e(Phe,WHo),e(ja,HHo),e(ja,Ihe),e(Ihe,UHo),e(ja,JHo),e(io,YHo),e(io,Fy),e(Fy,uv),e(uv,qhe),e(qhe,KHo),e(uv,ZHo),e(uv,CV),e(CV,eUo),e(uv,oUo),e(Fy,rUo),e(Fy,_v),e(_v,Nhe),e(Nhe,tUo),e(_v,aUo),e(_v,wV),e(wV,nUo),e(_v,sUo),e(io,lUo),e(io,bv),e(bv,iUo),e(bv,jhe),e(jhe,dUo),e(bv,cUo),e(bv,Dhe),e(Dhe,fUo),e(io,mUo),M(vv,io,null),b(f,IBe,_),b(f,md,_),e(md,Fv),e(Fv,Ghe),M(Ty,Ghe,null),e(md,gUo),e(md,Ohe),e(Ohe,hUo),b(f,qBe,_),b(f,Vo,_),M(My,Vo,null),e(Vo,pUo),e(Vo,gd),e(gd,uUo),e(gd,AV),e(AV,_Uo),e(gd,bUo),e(gd,yV),e(yV,vUo),e(gd,FUo),e(Vo,TUo),e(Vo,Ey),e(Ey,MUo),e(Ey,Vhe),e(Vhe,EUo),e(Ey,CUo),e(Vo,wUo),e(Vo,ut),M(Cy,ut,null),e(ut,AUo),e(ut,Xhe),e(Xhe,yUo),e(ut,LUo),e(ut,hd),e(hd,xUo),e(hd,zhe),e(zhe,$Uo),e(hd,kUo),e(hd,LV),e(LV,SUo),e(hd,RUo),e(ut,BUo),M(Tv,ut,null),e(Vo,PUo),e(Vo,co),M(wy,co,null),e(co,IUo),e(co,Qhe),e(Qhe,qUo),e(co,NUo),e(co,Da),e(Da,jUo),e(Da,Whe),e(Whe,DUo),e(Da,GUo),e(Da,Hhe),e(Hhe,OUo),e(Da,VUo),e(Da,Uhe),e(Uhe,XUo),e(Da,zUo),e(co,QUo),e(co,Ga),e(Ga,Mv),e(Mv,Jhe),e(Jhe,WUo),e(Mv,HUo),e(Mv,xV),e(xV,UUo),e(Mv,JUo),e(Ga,YUo),e(Ga,Ev),e(Ev,Yhe),e(Yhe,KUo),e(Ev,ZUo),e(Ev,$V),e($V,eJo),e(Ev,oJo),e(Ga,rJo),e(Ga,Cv),e(Cv,Khe),e(Khe,tJo),e(Cv,aJo),e(Cv,kV),e(kV,nJo),e(Cv,sJo),e(Ga,lJo),e(Ga,wv),e(wv,Zhe),e(Zhe,iJo),e(wv,dJo),e(wv,SV),e(SV,cJo),e(wv,fJo),e(co,mJo),e(co,Av),e(Av,gJo),e(Av,epe),e(epe,hJo),e(Av,pJo),e(Av,ope),e(ope,uJo),e(co,_Jo),M(yv,co,null),b(f,NBe,_),b(f,pd,_),e(pd,Lv),e(Lv,rpe),M(Ay,rpe,null),e(pd,bJo),e(pd,tpe),e(tpe,vJo),b(f,jBe,_),b(f,Xo,_),M(yy,Xo,null),e(Xo,FJo),e(Xo,ud),e(ud,TJo),e(ud,RV),e(RV,MJo),e(ud,EJo),e(ud,BV),e(BV,CJo),e(ud,wJo),e(Xo,AJo),e(Xo,Ly),e(Ly,yJo),e(Ly,ape),e(ape,LJo),e(Ly,xJo),e(Xo,$Jo),e(Xo,_t),M(xy,_t,null),e(_t,kJo),e(_t,npe),e(npe,SJo),e(_t,RJo),e(_t,_d),e(_d,BJo),e(_d,spe),e(spe,PJo),e(_d,IJo),e(_d,PV),e(PV,qJo),e(_d,NJo),e(_t,jJo),M(xv,_t,null),e(Xo,DJo),e(Xo,fo),M($y,fo,null),e(fo,GJo),e(fo,lpe),e(lpe,OJo),e(fo,VJo),e(fo,Oa),e(Oa,XJo),e(Oa,ipe),e(ipe,zJo),e(Oa,QJo),e(Oa,dpe),e(dpe,WJo),e(Oa,HJo),e(Oa,cpe),e(cpe,UJo),e(Oa,JJo),e(fo,YJo),e(fo,bd),e(bd,$v),e($v,fpe),e(fpe,KJo),e($v,ZJo),e($v,IV),e(IV,eYo),e($v,oYo),e(bd,rYo),e(bd,kv),e(kv,mpe),e(mpe,tYo),e(kv,aYo),e(kv,qV),e(qV,nYo),e(kv,sYo),e(bd,lYo),e(bd,Sv),e(Sv,gpe),e(gpe,iYo),e(Sv,dYo),e(Sv,NV),e(NV,cYo),e(Sv,fYo),e(fo,mYo),e(fo,Rv),e(Rv,gYo),e(Rv,hpe),e(hpe,hYo),e(Rv,pYo),e(Rv,ppe),e(ppe,uYo),e(fo,_Yo),M(Bv,fo,null),b(f,DBe,_),b(f,vd,_),e(vd,Pv),e(Pv,upe),M(ky,upe,null),e(vd,bYo),e(vd,_pe),e(_pe,vYo),b(f,GBe,_),b(f,zo,_),M(Sy,zo,null),e(zo,FYo),e(zo,Fd),e(Fd,TYo),e(Fd,jV),e(jV,MYo),e(Fd,EYo),e(Fd,DV),e(DV,CYo),e(Fd,wYo),e(zo,AYo),e(zo,Ry),e(Ry,yYo),e(Ry,bpe),e(bpe,LYo),e(Ry,xYo),e(zo,$Yo),e(zo,bt),M(By,bt,null),e(bt,kYo),e(bt,vpe),e(vpe,SYo),e(bt,RYo),e(bt,Td),e(Td,BYo),e(Td,Fpe),e(Fpe,PYo),e(Td,IYo),e(Td,GV),e(GV,qYo),e(Td,NYo),e(bt,jYo),M(Iv,bt,null),e(zo,DYo),e(zo,mo),M(Py,mo,null),e(mo,GYo),e(mo,Tpe),e(Tpe,OYo),e(mo,VYo),e(mo,Va),e(Va,XYo),e(Va,Mpe),e(Mpe,zYo),e(Va,QYo),e(Va,Epe),e(Epe,WYo),e(Va,HYo),e(Va,Cpe),e(Cpe,UYo),e(Va,JYo),e(mo,YYo),e(mo,wpe),e(wpe,qv),e(qv,Ape),e(Ape,KYo),e(qv,ZYo),e(qv,OV),e(OV,eKo),e(qv,oKo),e(mo,rKo),e(mo,Nv),e(Nv,tKo),e(Nv,ype),e(ype,aKo),e(Nv,nKo),e(Nv,Lpe),e(Lpe,sKo),e(mo,lKo),M(jv,mo,null),b(f,OBe,_),b(f,Md,_),e(Md,Dv),e(Dv,xpe),M(Iy,xpe,null),e(Md,iKo),e(Md,$pe),e($pe,dKo),b(f,VBe,_),b(f,Qo,_),M(qy,Qo,null),e(Qo,cKo),e(Qo,Ed),e(Ed,fKo),e(Ed,VV),e(VV,mKo),e(Ed,gKo),e(Ed,XV),e(XV,hKo),e(Ed,pKo),e(Qo,uKo),e(Qo,Ny),e(Ny,_Ko),e(Ny,kpe),e(kpe,bKo),e(Ny,vKo),e(Qo,FKo),e(Qo,vt),M(jy,vt,null),e(vt,TKo),e(vt,Spe),e(Spe,MKo),e(vt,EKo),e(vt,Cd),e(Cd,CKo),e(Cd,Rpe),e(Rpe,wKo),e(Cd,AKo),e(Cd,zV),e(zV,yKo),e(Cd,LKo),e(vt,xKo),M(Gv,vt,null),e(Qo,$Ko),e(Qo,go),M(Dy,go,null),e(go,kKo),e(go,Bpe),e(Bpe,SKo),e(go,RKo),e(go,Xa),e(Xa,BKo),e(Xa,Ppe),e(Ppe,PKo),e(Xa,IKo),e(Xa,Ipe),e(Ipe,qKo),e(Xa,NKo),e(Xa,qpe),e(qpe,jKo),e(Xa,DKo),e(go,GKo),e(go,Npe),e(Npe,Ov),e(Ov,jpe),e(jpe,OKo),e(Ov,VKo),e(Ov,QV),e(QV,XKo),e(Ov,zKo),e(go,QKo),e(go,Vv),e(Vv,WKo),e(Vv,Dpe),e(Dpe,HKo),e(Vv,UKo),e(Vv,Gpe),e(Gpe,JKo),e(go,YKo),M(Xv,go,null),b(f,XBe,_),b(f,wd,_),e(wd,zv),e(zv,Ope),M(Gy,Ope,null),e(wd,KKo),e(wd,Vpe),e(Vpe,ZKo),b(f,zBe,_),b(f,Wo,_),M(Oy,Wo,null),e(Wo,eZo),e(Wo,Ad),e(Ad,oZo),e(Ad,WV),e(WV,rZo),e(Ad,tZo),e(Ad,HV),e(HV,aZo),e(Ad,nZo),e(Wo,sZo),e(Wo,Vy),e(Vy,lZo),e(Vy,Xpe),e(Xpe,iZo),e(Vy,dZo),e(Wo,cZo),e(Wo,Ft),M(Xy,Ft,null),e(Ft,fZo),e(Ft,zpe),e(zpe,mZo),e(Ft,gZo),e(Ft,yd),e(yd,hZo),e(yd,Qpe),e(Qpe,pZo),e(yd,uZo),e(yd,UV),e(UV,_Zo),e(yd,bZo),e(Ft,vZo),M(Qv,Ft,null),e(Wo,FZo),e(Wo,ho),M(zy,ho,null),e(ho,TZo),e(ho,Wpe),e(Wpe,MZo),e(ho,EZo),e(ho,za),e(za,CZo),e(za,Hpe),e(Hpe,wZo),e(za,AZo),e(za,Upe),e(Upe,yZo),e(za,LZo),e(za,Jpe),e(Jpe,xZo),e(za,$Zo),e(ho,kZo),e(ho,Qa),e(Qa,Wv),e(Wv,Ype),e(Ype,SZo),e(Wv,RZo),e(Wv,JV),e(JV,BZo),e(Wv,PZo),e(Qa,IZo),e(Qa,Hv),e(Hv,Kpe),e(Kpe,qZo),e(Hv,NZo),e(Hv,YV),e(YV,jZo),e(Hv,DZo),e(Qa,GZo),e(Qa,Uv),e(Uv,Zpe),e(Zpe,OZo),e(Uv,VZo),e(Uv,KV),e(KV,XZo),e(Uv,zZo),e(Qa,QZo),e(Qa,Jv),e(Jv,eue),e(eue,WZo),e(Jv,HZo),e(Jv,ZV),e(ZV,UZo),e(Jv,JZo),e(ho,YZo),e(ho,Yv),e(Yv,KZo),e(Yv,oue),e(oue,ZZo),e(Yv,eer),e(Yv,rue),e(rue,oer),e(ho,rer),M(Kv,ho,null),b(f,QBe,_),b(f,Ld,_),e(Ld,Zv),e(Zv,tue),M(Qy,tue,null),e(Ld,ter),e(Ld,aue),e(aue,aer),b(f,WBe,_),b(f,Ho,_),M(Wy,Ho,null),e(Ho,ner),e(Ho,xd),e(xd,ser),e(xd,eX),e(eX,ler),e(xd,ier),e(xd,oX),e(oX,der),e(xd,cer),e(Ho,fer),e(Ho,Hy),e(Hy,mer),e(Hy,nue),e(nue,ger),e(Hy,her),e(Ho,per),e(Ho,Tt),M(Uy,Tt,null),e(Tt,uer),e(Tt,sue),e(sue,_er),e(Tt,ber),e(Tt,$d),e($d,ver),e($d,lue),e(lue,Fer),e($d,Ter),e($d,rX),e(rX,Mer),e($d,Eer),e(Tt,Cer),M(eF,Tt,null),e(Ho,wer),e(Ho,po),M(Jy,po,null),e(po,Aer),e(po,iue),e(iue,yer),e(po,Ler),e(po,Wa),e(Wa,xer),e(Wa,due),e(due,$er),e(Wa,ker),e(Wa,cue),e(cue,Ser),e(Wa,Rer),e(Wa,fue),e(fue,Ber),e(Wa,Per),e(po,Ier),e(po,mue),e(mue,oF),e(oF,gue),e(gue,qer),e(oF,Ner),e(oF,tX),e(tX,jer),e(oF,Der),e(po,Ger),e(po,rF),e(rF,Oer),e(rF,hue),e(hue,Ver),e(rF,Xer),e(rF,pue),e(pue,zer),e(po,Qer),M(tF,po,null),b(f,HBe,_),b(f,kd,_),e(kd,aF),e(aF,uue),M(Yy,uue,null),e(kd,Wer),e(kd,_ue),e(_ue,Her),b(f,UBe,_),b(f,Uo,_),M(Ky,Uo,null),e(Uo,Uer),e(Uo,Sd),e(Sd,Jer),e(Sd,aX),e(aX,Yer),e(Sd,Ker),e(Sd,nX),e(nX,Zer),e(Sd,eor),e(Uo,oor),e(Uo,Zy),e(Zy,ror),e(Zy,bue),e(bue,tor),e(Zy,aor),e(Uo,nor),e(Uo,Mt),M(eL,Mt,null),e(Mt,sor),e(Mt,vue),e(vue,lor),e(Mt,ior),e(Mt,Rd),e(Rd,dor),e(Rd,Fue),e(Fue,cor),e(Rd,mor),e(Rd,sX),e(sX,gor),e(Rd,hor),e(Mt,por),M(nF,Mt,null),e(Uo,uor),e(Uo,Mr),M(oL,Mr,null),e(Mr,_or),e(Mr,Tue),e(Tue,bor),e(Mr,vor),e(Mr,Ha),e(Ha,For),e(Ha,Mue),e(Mue,Tor),e(Ha,Mor),e(Ha,Eue),e(Eue,Eor),e(Ha,Cor),e(Ha,Cue),e(Cue,wor),e(Ha,Aor),e(Mr,yor),e(Mr,j),e(j,sF),e(sF,wue),e(wue,Lor),e(sF,xor),e(sF,lX),e(lX,$or),e(sF,kor),e(j,Sor),e(j,lF),e(lF,Aue),e(Aue,Ror),e(lF,Bor),e(lF,iX),e(iX,Por),e(lF,Ior),e(j,qor),e(j,iF),e(iF,yue),e(yue,Nor),e(iF,jor),e(iF,dX),e(dX,Dor),e(iF,Gor),e(j,Oor),e(j,dF),e(dF,Lue),e(Lue,Vor),e(dF,Xor),e(dF,cX),e(cX,zor),e(dF,Qor),e(j,Wor),e(j,cF),e(cF,xue),e(xue,Hor),e(cF,Uor),e(cF,fX),e(fX,Jor),e(cF,Yor),e(j,Kor),e(j,fF),e(fF,$ue),e($ue,Zor),e(fF,err),e(fF,mX),e(mX,orr),e(fF,rrr),e(j,trr),e(j,mF),e(mF,kue),e(kue,arr),e(mF,nrr),e(mF,gX),e(gX,srr),e(mF,lrr),e(j,irr),e(j,gF),e(gF,Sue),e(Sue,drr),e(gF,crr),e(gF,hX),e(hX,frr),e(gF,mrr),e(j,grr),e(j,hF),e(hF,Rue),e(Rue,hrr),e(hF,prr),e(hF,pX),e(pX,urr),e(hF,_rr),e(j,brr),e(j,pF),e(pF,Bue),e(Bue,vrr),e(pF,Frr),e(pF,uX),e(uX,Trr),e(pF,Mrr),e(j,Err),e(j,uF),e(uF,Pue),e(Pue,Crr),e(uF,wrr),e(uF,_X),e(_X,Arr),e(uF,yrr),e(j,Lrr),e(j,_F),e(_F,Iue),e(Iue,xrr),e(_F,$rr),e(_F,bX),e(bX,krr),e(_F,Srr),e(j,Rrr),e(j,bF),e(bF,que),e(que,Brr),e(bF,Prr),e(bF,vX),e(vX,Irr),e(bF,qrr),e(j,Nrr),e(j,vF),e(vF,Nue),e(Nue,jrr),e(vF,Drr),e(vF,FX),e(FX,Grr),e(vF,Orr),e(j,Vrr),e(j,FF),e(FF,jue),e(jue,Xrr),e(FF,zrr),e(FF,TX),e(TX,Qrr),e(FF,Wrr),e(j,Hrr),e(j,TF),e(TF,Due),e(Due,Urr),e(TF,Jrr),e(TF,MX),e(MX,Yrr),e(TF,Krr),e(j,Zrr),e(j,xs),e(xs,Gue),e(Gue,etr),e(xs,otr),e(xs,EX),e(EX,rtr),e(xs,ttr),e(xs,CX),e(CX,atr),e(xs,ntr),e(j,str),e(j,MF),e(MF,Oue),e(Oue,ltr),e(MF,itr),e(MF,wX),e(wX,dtr),e(MF,ctr),e(j,ftr),e(j,EF),e(EF,Vue),e(Vue,mtr),e(EF,gtr),e(EF,AX),e(AX,htr),e(EF,ptr),e(j,utr),e(j,CF),e(CF,Xue),e(Xue,_tr),e(CF,btr),e(CF,yX),e(yX,vtr),e(CF,Ftr),e(j,Ttr),e(j,wF),e(wF,zue),e(zue,Mtr),e(wF,Etr),e(wF,LX),e(LX,Ctr),e(wF,wtr),e(j,Atr),e(j,AF),e(AF,Que),e(Que,ytr),e(AF,Ltr),e(AF,xX),e(xX,xtr),e(AF,$tr),e(j,ktr),e(j,yF),e(yF,Wue),e(Wue,Str),e(yF,Rtr),e(yF,$X),e($X,Btr),e(yF,Ptr),e(j,Itr),e(j,LF),e(LF,Hue),e(Hue,qtr),e(LF,Ntr),e(LF,kX),e(kX,jtr),e(LF,Dtr),e(j,Gtr),e(j,xF),e(xF,Uue),e(Uue,Otr),e(xF,Vtr),e(xF,SX),e(SX,Xtr),e(xF,ztr),e(j,Qtr),e(j,$F),e($F,Jue),e(Jue,Wtr),e($F,Htr),e($F,RX),e(RX,Utr),e($F,Jtr),e(j,Ytr),e(j,kF),e(kF,Yue),e(Yue,Ktr),e(kF,Ztr),e(kF,BX),e(BX,ear),e(kF,oar),e(j,rar),e(j,SF),e(SF,Kue),e(Kue,tar),e(SF,aar),e(SF,PX),e(PX,nar),e(SF,sar),e(j,lar),e(j,RF),e(RF,Zue),e(Zue,iar),e(RF,dar),e(RF,IX),e(IX,car),e(RF,far),e(j,mar),e(j,BF),e(BF,e_e),e(e_e,gar),e(BF,har),e(BF,qX),e(qX,par),e(BF,uar),e(j,_ar),e(j,PF),e(PF,o_e),e(o_e,bar),e(PF,Far),e(PF,NX),e(NX,Tar),e(PF,Mar),e(j,Ear),e(j,IF),e(IF,r_e),e(r_e,Car),e(IF,war),e(IF,jX),e(jX,Aar),e(IF,yar),e(j,Lar),e(j,qF),e(qF,t_e),e(t_e,xar),e(qF,$ar),e(qF,DX),e(DX,kar),e(qF,Sar),e(j,Rar),e(j,NF),e(NF,a_e),e(a_e,Bar),e(NF,Par),e(NF,GX),e(GX,Iar),e(NF,qar),e(j,Nar),e(j,jF),e(jF,n_e),e(n_e,jar),e(jF,Dar),e(jF,OX),e(OX,Gar),e(jF,Oar),e(j,Var),e(j,DF),e(DF,s_e),e(s_e,Xar),e(DF,zar),e(DF,VX),e(VX,Qar),e(DF,War),e(j,Har),e(j,GF),e(GF,l_e),e(l_e,Uar),e(GF,Jar),e(GF,XX),e(XX,Yar),e(GF,Kar),e(j,Zar),e(j,OF),e(OF,i_e),e(i_e,enr),e(OF,onr),e(OF,zX),e(zX,rnr),e(OF,tnr),e(j,anr),e(j,VF),e(VF,d_e),e(d_e,nnr),e(VF,snr),e(VF,QX),e(QX,lnr),e(VF,inr),e(j,dnr),e(j,XF),e(XF,c_e),e(c_e,cnr),e(XF,fnr),e(XF,WX),e(WX,mnr),e(XF,gnr),e(j,hnr),e(j,zF),e(zF,f_e),e(f_e,pnr),e(zF,unr),e(zF,HX),e(HX,_nr),e(zF,bnr),e(j,vnr),e(j,QF),e(QF,m_e),e(m_e,Fnr),e(QF,Tnr),e(QF,UX),e(UX,Mnr),e(QF,Enr),e(j,Cnr),e(j,WF),e(WF,g_e),e(g_e,wnr),e(WF,Anr),e(WF,JX),e(JX,ynr),e(WF,Lnr),e(j,xnr),e(j,HF),e(HF,h_e),e(h_e,$nr),e(HF,knr),e(HF,YX),e(YX,Snr),e(HF,Rnr),e(Mr,Bnr),M(UF,Mr,null),b(f,JBe,_),b(f,Bd,_),e(Bd,JF),e(JF,p_e),M(rL,p_e,null),e(Bd,Pnr),e(Bd,u_e),e(u_e,Inr),b(f,YBe,_),b(f,Jo,_),M(tL,Jo,null),e(Jo,qnr),e(Jo,Pd),e(Pd,Nnr),e(Pd,KX),e(KX,jnr),e(Pd,Dnr),e(Pd,ZX),e(ZX,Gnr),e(Pd,Onr),e(Jo,Vnr),e(Jo,aL),e(aL,Xnr),e(aL,__e),e(__e,znr),e(aL,Qnr),e(Jo,Wnr),e(Jo,Et),M(nL,Et,null),e(Et,Hnr),e(Et,b_e),e(b_e,Unr),e(Et,Jnr),e(Et,Id),e(Id,Ynr),e(Id,v_e),e(v_e,Knr),e(Id,Znr),e(Id,ez),e(ez,esr),e(Id,osr),e(Et,rsr),M(YF,Et,null),e(Jo,tsr),e(Jo,Er),M(sL,Er,null),e(Er,asr),e(Er,F_e),e(F_e,nsr),e(Er,ssr),e(Er,Ua),e(Ua,lsr),e(Ua,T_e),e(T_e,isr),e(Ua,dsr),e(Ua,M_e),e(M_e,csr),e(Ua,fsr),e(Ua,E_e),e(E_e,msr),e(Ua,gsr),e(Er,hsr),e(Er,ne),e(ne,KF),e(KF,C_e),e(C_e,psr),e(KF,usr),e(KF,oz),e(oz,_sr),e(KF,bsr),e(ne,vsr),e(ne,ZF),e(ZF,w_e),e(w_e,Fsr),e(ZF,Tsr),e(ZF,rz),e(rz,Msr),e(ZF,Esr),e(ne,Csr),e(ne,eT),e(eT,A_e),e(A_e,wsr),e(eT,Asr),e(eT,tz),e(tz,ysr),e(eT,Lsr),e(ne,xsr),e(ne,oT),e(oT,y_e),e(y_e,$sr),e(oT,ksr),e(oT,az),e(az,Ssr),e(oT,Rsr),e(ne,Bsr),e(ne,rT),e(rT,L_e),e(L_e,Psr),e(rT,Isr),e(rT,nz),e(nz,qsr),e(rT,Nsr),e(ne,jsr),e(ne,tT),e(tT,x_e),e(x_e,Dsr),e(tT,Gsr),e(tT,sz),e(sz,Osr),e(tT,Vsr),e(ne,Xsr),e(ne,aT),e(aT,$_e),e($_e,zsr),e(aT,Qsr),e(aT,lz),e(lz,Wsr),e(aT,Hsr),e(ne,Usr),e(ne,nT),e(nT,k_e),e(k_e,Jsr),e(nT,Ysr),e(nT,iz),e(iz,Ksr),e(nT,Zsr),e(ne,elr),e(ne,sT),e(sT,S_e),e(S_e,olr),e(sT,rlr),e(sT,dz),e(dz,tlr),e(sT,alr),e(ne,nlr),e(ne,lT),e(lT,R_e),e(R_e,slr),e(lT,llr),e(lT,cz),e(cz,ilr),e(lT,dlr),e(ne,clr),e(ne,iT),e(iT,B_e),e(B_e,flr),e(iT,mlr),e(iT,fz),e(fz,glr),e(iT,hlr),e(ne,plr),e(ne,dT),e(dT,P_e),e(P_e,ulr),e(dT,_lr),e(dT,mz),e(mz,blr),e(dT,vlr),e(ne,Flr),e(ne,cT),e(cT,I_e),e(I_e,Tlr),e(cT,Mlr),e(cT,gz),e(gz,Elr),e(cT,Clr),e(ne,wlr),e(ne,fT),e(fT,q_e),e(q_e,Alr),e(fT,ylr),e(fT,hz),e(hz,Llr),e(fT,xlr),e(ne,$lr),e(ne,mT),e(mT,N_e),e(N_e,klr),e(mT,Slr),e(mT,pz),e(pz,Rlr),e(mT,Blr),e(ne,Plr),e(ne,gT),e(gT,j_e),e(j_e,Ilr),e(gT,qlr),e(gT,uz),e(uz,Nlr),e(gT,jlr),e(ne,Dlr),e(ne,hT),e(hT,D_e),e(D_e,Glr),e(hT,Olr),e(hT,_z),e(_z,Vlr),e(hT,Xlr),e(ne,zlr),e(ne,pT),e(pT,G_e),e(G_e,Qlr),e(pT,Wlr),e(pT,bz),e(bz,Hlr),e(pT,Ulr),e(ne,Jlr),e(ne,uT),e(uT,O_e),e(O_e,Ylr),e(uT,Klr),e(uT,vz),e(vz,Zlr),e(uT,eir),e(ne,oir),e(ne,_T),e(_T,V_e),e(V_e,rir),e(_T,tir),e(_T,Fz),e(Fz,air),e(_T,nir),e(ne,sir),e(ne,bT),e(bT,X_e),e(X_e,lir),e(bT,iir),e(bT,Tz),e(Tz,dir),e(bT,cir),e(ne,fir),e(ne,vT),e(vT,z_e),e(z_e,mir),e(vT,gir),e(vT,Mz),e(Mz,hir),e(vT,pir),e(ne,uir),e(ne,FT),e(FT,Q_e),e(Q_e,_ir),e(FT,bir),e(FT,Ez),e(Ez,vir),e(FT,Fir),e(Er,Tir),M(TT,Er,null),b(f,KBe,_),b(f,qd,_),e(qd,MT),e(MT,W_e),M(lL,W_e,null),e(qd,Mir),e(qd,H_e),e(H_e,Eir),b(f,ZBe,_),b(f,Yo,_),M(iL,Yo,null),e(Yo,Cir),e(Yo,Nd),e(Nd,wir),e(Nd,Cz),e(Cz,Air),e(Nd,yir),e(Nd,wz),e(wz,Lir),e(Nd,xir),e(Yo,$ir),e(Yo,dL),e(dL,kir),e(dL,U_e),e(U_e,Sir),e(dL,Rir),e(Yo,Bir),e(Yo,Ct),M(cL,Ct,null),e(Ct,Pir),e(Ct,J_e),e(J_e,Iir),e(Ct,qir),e(Ct,jd),e(jd,Nir),e(jd,Y_e),e(Y_e,jir),e(jd,Dir),e(jd,Az),e(Az,Gir),e(jd,Oir),e(Ct,Vir),M(ET,Ct,null),e(Yo,Xir),e(Yo,Cr),M(fL,Cr,null),e(Cr,zir),e(Cr,K_e),e(K_e,Qir),e(Cr,Wir),e(Cr,Ja),e(Ja,Hir),e(Ja,Z_e),e(Z_e,Uir),e(Ja,Jir),e(Ja,e6e),e(e6e,Yir),e(Ja,Kir),e(Ja,o6e),e(o6e,Zir),e(Ja,edr),e(Cr,odr),e(Cr,Te),e(Te,CT),e(CT,r6e),e(r6e,rdr),e(CT,tdr),e(CT,yz),e(yz,adr),e(CT,ndr),e(Te,sdr),e(Te,wT),e(wT,t6e),e(t6e,ldr),e(wT,idr),e(wT,Lz),e(Lz,ddr),e(wT,cdr),e(Te,fdr),e(Te,AT),e(AT,a6e),e(a6e,mdr),e(AT,gdr),e(AT,xz),e(xz,hdr),e(AT,pdr),e(Te,udr),e(Te,yT),e(yT,n6e),e(n6e,_dr),e(yT,bdr),e(yT,$z),e($z,vdr),e(yT,Fdr),e(Te,Tdr),e(Te,LT),e(LT,s6e),e(s6e,Mdr),e(LT,Edr),e(LT,kz),e(kz,Cdr),e(LT,wdr),e(Te,Adr),e(Te,xT),e(xT,l6e),e(l6e,ydr),e(xT,Ldr),e(xT,Sz),e(Sz,xdr),e(xT,$dr),e(Te,kdr),e(Te,$T),e($T,i6e),e(i6e,Sdr),e($T,Rdr),e($T,Rz),e(Rz,Bdr),e($T,Pdr),e(Te,Idr),e(Te,kT),e(kT,d6e),e(d6e,qdr),e(kT,Ndr),e(kT,Bz),e(Bz,jdr),e(kT,Ddr),e(Te,Gdr),e(Te,ST),e(ST,c6e),e(c6e,Odr),e(ST,Vdr),e(ST,Pz),e(Pz,Xdr),e(ST,zdr),e(Te,Qdr),e(Te,RT),e(RT,f6e),e(f6e,Wdr),e(RT,Hdr),e(RT,Iz),e(Iz,Udr),e(RT,Jdr),e(Te,Ydr),e(Te,BT),e(BT,m6e),e(m6e,Kdr),e(BT,Zdr),e(BT,qz),e(qz,ecr),e(BT,ocr),e(Te,rcr),e(Te,PT),e(PT,g6e),e(g6e,tcr),e(PT,acr),e(PT,Nz),e(Nz,ncr),e(PT,scr),e(Cr,lcr),M(IT,Cr,null),b(f,ePe,_),b(f,Dd,_),e(Dd,qT),e(qT,h6e),M(mL,h6e,null),e(Dd,icr),e(Dd,p6e),e(p6e,dcr),b(f,oPe,_),b(f,Ko,_),M(gL,Ko,null),e(Ko,ccr),e(Ko,Gd),e(Gd,fcr),e(Gd,jz),e(jz,mcr),e(Gd,gcr),e(Gd,Dz),e(Dz,hcr),e(Gd,pcr),e(Ko,ucr),e(Ko,hL),e(hL,_cr),e(hL,u6e),e(u6e,bcr),e(hL,vcr),e(Ko,Fcr),e(Ko,wt),M(pL,wt,null),e(wt,Tcr),e(wt,_6e),e(_6e,Mcr),e(wt,Ecr),e(wt,Od),e(Od,Ccr),e(Od,b6e),e(b6e,wcr),e(Od,Acr),e(Od,Gz),e(Gz,ycr),e(Od,Lcr),e(wt,xcr),M(NT,wt,null),e(Ko,$cr),e(Ko,wr),M(uL,wr,null),e(wr,kcr),e(wr,v6e),e(v6e,Scr),e(wr,Rcr),e(wr,Ya),e(Ya,Bcr),e(Ya,F6e),e(F6e,Pcr),e(Ya,Icr),e(Ya,T6e),e(T6e,qcr),e(Ya,Ncr),e(Ya,M6e),e(M6e,jcr),e(Ya,Dcr),e(wr,Gcr),e(wr,_L),e(_L,jT),e(jT,E6e),e(E6e,Ocr),e(jT,Vcr),e(jT,Oz),e(Oz,Xcr),e(jT,zcr),e(_L,Qcr),e(_L,DT),e(DT,C6e),e(C6e,Wcr),e(DT,Hcr),e(DT,Vz),e(Vz,Ucr),e(DT,Jcr),e(wr,Ycr),M(GT,wr,null),b(f,rPe,_),b(f,Vd,_),e(Vd,OT),e(OT,w6e),M(bL,w6e,null),e(Vd,Kcr),e(Vd,A6e),e(A6e,Zcr),b(f,tPe,_),b(f,Zo,_),M(vL,Zo,null),e(Zo,efr),e(Zo,Xd),e(Xd,ofr),e(Xd,Xz),e(Xz,rfr),e(Xd,tfr),e(Xd,zz),e(zz,afr),e(Xd,nfr),e(Zo,sfr),e(Zo,FL),e(FL,lfr),e(FL,y6e),e(y6e,ifr),e(FL,dfr),e(Zo,cfr),e(Zo,At),M(TL,At,null),e(At,ffr),e(At,L6e),e(L6e,mfr),e(At,gfr),e(At,zd),e(zd,hfr),e(zd,x6e),e(x6e,pfr),e(zd,ufr),e(zd,Qz),e(Qz,_fr),e(zd,bfr),e(At,vfr),M(VT,At,null),e(Zo,Ffr),e(Zo,Ar),M(ML,Ar,null),e(Ar,Tfr),e(Ar,$6e),e($6e,Mfr),e(Ar,Efr),e(Ar,Ka),e(Ka,Cfr),e(Ka,k6e),e(k6e,wfr),e(Ka,Afr),e(Ka,S6e),e(S6e,yfr),e(Ka,Lfr),e(Ka,R6e),e(R6e,xfr),e(Ka,$fr),e(Ar,kfr),e(Ar,ie),e(ie,XT),e(XT,B6e),e(B6e,Sfr),e(XT,Rfr),e(XT,Wz),e(Wz,Bfr),e(XT,Pfr),e(ie,Ifr),e(ie,zT),e(zT,P6e),e(P6e,qfr),e(zT,Nfr),e(zT,Hz),e(Hz,jfr),e(zT,Dfr),e(ie,Gfr),e(ie,QT),e(QT,I6e),e(I6e,Ofr),e(QT,Vfr),e(QT,Uz),e(Uz,Xfr),e(QT,zfr),e(ie,Qfr),e(ie,WT),e(WT,q6e),e(q6e,Wfr),e(WT,Hfr),e(WT,Jz),e(Jz,Ufr),e(WT,Jfr),e(ie,Yfr),e(ie,HT),e(HT,N6e),e(N6e,Kfr),e(HT,Zfr),e(HT,Yz),e(Yz,emr),e(HT,omr),e(ie,rmr),e(ie,UT),e(UT,j6e),e(j6e,tmr),e(UT,amr),e(UT,Kz),e(Kz,nmr),e(UT,smr),e(ie,lmr),e(ie,JT),e(JT,D6e),e(D6e,imr),e(JT,dmr),e(JT,Zz),e(Zz,cmr),e(JT,fmr),e(ie,mmr),e(ie,YT),e(YT,G6e),e(G6e,gmr),e(YT,hmr),e(YT,eQ),e(eQ,pmr),e(YT,umr),e(ie,_mr),e(ie,KT),e(KT,O6e),e(O6e,bmr),e(KT,vmr),e(KT,oQ),e(oQ,Fmr),e(KT,Tmr),e(ie,Mmr),e(ie,ZT),e(ZT,V6e),e(V6e,Emr),e(ZT,Cmr),e(ZT,rQ),e(rQ,wmr),e(ZT,Amr),e(ie,ymr),e(ie,e9),e(e9,X6e),e(X6e,Lmr),e(e9,xmr),e(e9,tQ),e(tQ,$mr),e(e9,kmr),e(ie,Smr),e(ie,o9),e(o9,z6e),e(z6e,Rmr),e(o9,Bmr),e(o9,aQ),e(aQ,Pmr),e(o9,Imr),e(ie,qmr),e(ie,r9),e(r9,Q6e),e(Q6e,Nmr),e(r9,jmr),e(r9,nQ),e(nQ,Dmr),e(r9,Gmr),e(ie,Omr),e(ie,t9),e(t9,W6e),e(W6e,Vmr),e(t9,Xmr),e(t9,sQ),e(sQ,zmr),e(t9,Qmr),e(ie,Wmr),e(ie,a9),e(a9,H6e),e(H6e,Hmr),e(a9,Umr),e(a9,lQ),e(lQ,Jmr),e(a9,Ymr),e(ie,Kmr),e(ie,n9),e(n9,U6e),e(U6e,Zmr),e(n9,egr),e(n9,iQ),e(iQ,ogr),e(n9,rgr),e(ie,tgr),e(ie,s9),e(s9,J6e),e(J6e,agr),e(s9,ngr),e(s9,dQ),e(dQ,sgr),e(s9,lgr),e(ie,igr),e(ie,l9),e(l9,Y6e),e(Y6e,dgr),e(l9,cgr),e(l9,cQ),e(cQ,fgr),e(l9,mgr),e(ie,ggr),e(ie,i9),e(i9,K6e),e(K6e,hgr),e(i9,pgr),e(i9,fQ),e(fQ,ugr),e(i9,_gr),e(ie,bgr),e(ie,d9),e(d9,Z6e),e(Z6e,vgr),e(d9,Fgr),e(d9,mQ),e(mQ,Tgr),e(d9,Mgr),e(Ar,Egr),M(c9,Ar,null),b(f,aPe,_),b(f,Qd,_),e(Qd,f9),e(f9,e1e),M(EL,e1e,null),e(Qd,Cgr),e(Qd,o1e),e(o1e,wgr),b(f,nPe,_),b(f,er,_),M(CL,er,null),e(er,Agr),e(er,Wd),e(Wd,ygr),e(Wd,gQ),e(gQ,Lgr),e(Wd,xgr),e(Wd,hQ),e(hQ,$gr),e(Wd,kgr),e(er,Sgr),e(er,wL),e(wL,Rgr),e(wL,r1e),e(r1e,Bgr),e(wL,Pgr),e(er,Igr),e(er,yt),M(AL,yt,null),e(yt,qgr),e(yt,t1e),e(t1e,Ngr),e(yt,jgr),e(yt,Hd),e(Hd,Dgr),e(Hd,a1e),e(a1e,Ggr),e(Hd,Ogr),e(Hd,pQ),e(pQ,Vgr),e(Hd,Xgr),e(yt,zgr),M(m9,yt,null),e(er,Qgr),e(er,yr),M(yL,yr,null),e(yr,Wgr),e(yr,n1e),e(n1e,Hgr),e(yr,Ugr),e(yr,Za),e(Za,Jgr),e(Za,s1e),e(s1e,Ygr),e(Za,Kgr),e(Za,l1e),e(l1e,Zgr),e(Za,ehr),e(Za,i1e),e(i1e,ohr),e(Za,rhr),e(yr,thr),e(yr,ye),e(ye,g9),e(g9,d1e),e(d1e,ahr),e(g9,nhr),e(g9,uQ),e(uQ,shr),e(g9,lhr),e(ye,ihr),e(ye,h9),e(h9,c1e),e(c1e,dhr),e(h9,chr),e(h9,_Q),e(_Q,fhr),e(h9,mhr),e(ye,ghr),e(ye,p9),e(p9,f1e),e(f1e,hhr),e(p9,phr),e(p9,bQ),e(bQ,uhr),e(p9,_hr),e(ye,bhr),e(ye,u9),e(u9,m1e),e(m1e,vhr),e(u9,Fhr),e(u9,vQ),e(vQ,Thr),e(u9,Mhr),e(ye,Ehr),e(ye,_9),e(_9,g1e),e(g1e,Chr),e(_9,whr),e(_9,FQ),e(FQ,Ahr),e(_9,yhr),e(ye,Lhr),e(ye,b9),e(b9,h1e),e(h1e,xhr),e(b9,$hr),e(b9,TQ),e(TQ,khr),e(b9,Shr),e(ye,Rhr),e(ye,v9),e(v9,p1e),e(p1e,Bhr),e(v9,Phr),e(v9,MQ),e(MQ,Ihr),e(v9,qhr),e(ye,Nhr),e(ye,F9),e(F9,u1e),e(u1e,jhr),e(F9,Dhr),e(F9,EQ),e(EQ,Ghr),e(F9,Ohr),e(ye,Vhr),e(ye,T9),e(T9,_1e),e(_1e,Xhr),e(T9,zhr),e(T9,CQ),e(CQ,Qhr),e(T9,Whr),e(ye,Hhr),e(ye,M9),e(M9,b1e),e(b1e,Uhr),e(M9,Jhr),e(M9,wQ),e(wQ,Yhr),e(M9,Khr),e(yr,Zhr),M(E9,yr,null),b(f,sPe,_),b(f,Ud,_),e(Ud,C9),e(C9,v1e),M(LL,v1e,null),e(Ud,epr),e(Ud,F1e),e(F1e,opr),b(f,lPe,_),b(f,or,_),M(xL,or,null),e(or,rpr),e(or,Jd),e(Jd,tpr),e(Jd,AQ),e(AQ,apr),e(Jd,npr),e(Jd,yQ),e(yQ,spr),e(Jd,lpr),e(or,ipr),e(or,$L),e($L,dpr),e($L,T1e),e(T1e,cpr),e($L,fpr),e(or,mpr),e(or,Lt),M(kL,Lt,null),e(Lt,gpr),e(Lt,M1e),e(M1e,hpr),e(Lt,ppr),e(Lt,Yd),e(Yd,upr),e(Yd,E1e),e(E1e,_pr),e(Yd,bpr),e(Yd,LQ),e(LQ,vpr),e(Yd,Fpr),e(Lt,Tpr),M(w9,Lt,null),e(or,Mpr),e(or,Lr),M(SL,Lr,null),e(Lr,Epr),e(Lr,C1e),e(C1e,Cpr),e(Lr,wpr),e(Lr,en),e(en,Apr),e(en,w1e),e(w1e,ypr),e(en,Lpr),e(en,A1e),e(A1e,xpr),e(en,$pr),e(en,y1e),e(y1e,kpr),e(en,Spr),e(Lr,Rpr),e(Lr,Z),e(Z,A9),e(A9,L1e),e(L1e,Bpr),e(A9,Ppr),e(A9,xQ),e(xQ,Ipr),e(A9,qpr),e(Z,Npr),e(Z,y9),e(y9,x1e),e(x1e,jpr),e(y9,Dpr),e(y9,$Q),e($Q,Gpr),e(y9,Opr),e(Z,Vpr),e(Z,L9),e(L9,$1e),e($1e,Xpr),e(L9,zpr),e(L9,kQ),e(kQ,Qpr),e(L9,Wpr),e(Z,Hpr),e(Z,x9),e(x9,k1e),e(k1e,Upr),e(x9,Jpr),e(x9,SQ),e(SQ,Ypr),e(x9,Kpr),e(Z,Zpr),e(Z,$9),e($9,S1e),e(S1e,eur),e($9,our),e($9,RQ),e(RQ,rur),e($9,tur),e(Z,aur),e(Z,k9),e(k9,R1e),e(R1e,nur),e(k9,sur),e(k9,BQ),e(BQ,lur),e(k9,iur),e(Z,dur),e(Z,S9),e(S9,B1e),e(B1e,cur),e(S9,fur),e(S9,PQ),e(PQ,mur),e(S9,gur),e(Z,hur),e(Z,R9),e(R9,P1e),e(P1e,pur),e(R9,uur),e(R9,IQ),e(IQ,_ur),e(R9,bur),e(Z,vur),e(Z,B9),e(B9,I1e),e(I1e,Fur),e(B9,Tur),e(B9,qQ),e(qQ,Mur),e(B9,Eur),e(Z,Cur),e(Z,P9),e(P9,q1e),e(q1e,wur),e(P9,Aur),e(P9,NQ),e(NQ,yur),e(P9,Lur),e(Z,xur),e(Z,I9),e(I9,N1e),e(N1e,$ur),e(I9,kur),e(I9,jQ),e(jQ,Sur),e(I9,Rur),e(Z,Bur),e(Z,q9),e(q9,j1e),e(j1e,Pur),e(q9,Iur),e(q9,DQ),e(DQ,qur),e(q9,Nur),e(Z,jur),e(Z,N9),e(N9,D1e),e(D1e,Dur),e(N9,Gur),e(N9,GQ),e(GQ,Our),e(N9,Vur),e(Z,Xur),e(Z,j9),e(j9,G1e),e(G1e,zur),e(j9,Qur),e(j9,OQ),e(OQ,Wur),e(j9,Hur),e(Z,Uur),e(Z,D9),e(D9,O1e),e(O1e,Jur),e(D9,Yur),e(D9,VQ),e(VQ,Kur),e(D9,Zur),e(Z,e_r),e(Z,G9),e(G9,V1e),e(V1e,o_r),e(G9,r_r),e(G9,XQ),e(XQ,t_r),e(G9,a_r),e(Z,n_r),e(Z,O9),e(O9,X1e),e(X1e,s_r),e(O9,l_r),e(O9,zQ),e(zQ,i_r),e(O9,d_r),e(Z,c_r),e(Z,V9),e(V9,z1e),e(z1e,f_r),e(V9,m_r),e(V9,QQ),e(QQ,g_r),e(V9,h_r),e(Z,p_r),e(Z,X9),e(X9,Q1e),e(Q1e,u_r),e(X9,__r),e(X9,WQ),e(WQ,b_r),e(X9,v_r),e(Z,F_r),e(Z,z9),e(z9,W1e),e(W1e,T_r),e(z9,M_r),e(z9,HQ),e(HQ,E_r),e(z9,C_r),e(Z,w_r),e(Z,Q9),e(Q9,H1e),e(H1e,A_r),e(Q9,y_r),e(Q9,UQ),e(UQ,L_r),e(Q9,x_r),e(Z,$_r),e(Z,W9),e(W9,U1e),e(U1e,k_r),e(W9,S_r),e(W9,JQ),e(JQ,R_r),e(W9,B_r),e(Z,P_r),e(Z,H9),e(H9,J1e),e(J1e,I_r),e(H9,q_r),e(H9,YQ),e(YQ,N_r),e(H9,j_r),e(Z,D_r),e(Z,U9),e(U9,Y1e),e(Y1e,G_r),e(U9,O_r),e(U9,KQ),e(KQ,V_r),e(U9,X_r),e(Z,z_r),e(Z,J9),e(J9,K1e),e(K1e,Q_r),e(J9,W_r),e(J9,ZQ),e(ZQ,H_r),e(J9,U_r),e(Z,J_r),e(Z,Y9),e(Y9,Z1e),e(Z1e,Y_r),e(Y9,K_r),e(Y9,eW),e(eW,Z_r),e(Y9,e6r),e(Lr,o6r),M(K9,Lr,null),b(f,iPe,_),b(f,Kd,_),e(Kd,Z9),e(Z9,ebe),M(RL,ebe,null),e(Kd,r6r),e(Kd,obe),e(obe,t6r),b(f,dPe,_),b(f,rr,_),M(BL,rr,null),e(rr,a6r),e(rr,Zd),e(Zd,n6r),e(Zd,oW),e(oW,s6r),e(Zd,l6r),e(Zd,rW),e(rW,i6r),e(Zd,d6r),e(rr,c6r),e(rr,PL),e(PL,f6r),e(PL,rbe),e(rbe,m6r),e(PL,g6r),e(rr,h6r),e(rr,xt),M(IL,xt,null),e(xt,p6r),e(xt,tbe),e(tbe,u6r),e(xt,_6r),e(xt,ec),e(ec,b6r),e(ec,abe),e(abe,v6r),e(ec,F6r),e(ec,tW),e(tW,T6r),e(ec,M6r),e(xt,E6r),M(eM,xt,null),e(rr,C6r),e(rr,xr),M(qL,xr,null),e(xr,w6r),e(xr,nbe),e(nbe,A6r),e(xr,y6r),e(xr,on),e(on,L6r),e(on,sbe),e(sbe,x6r),e(on,$6r),e(on,lbe),e(lbe,k6r),e(on,S6r),e(on,ibe),e(ibe,R6r),e(on,B6r),e(xr,P6r),e(xr,pe),e(pe,oM),e(oM,dbe),e(dbe,I6r),e(oM,q6r),e(oM,aW),e(aW,N6r),e(oM,j6r),e(pe,D6r),e(pe,rM),e(rM,cbe),e(cbe,G6r),e(rM,O6r),e(rM,nW),e(nW,V6r),e(rM,X6r),e(pe,z6r),e(pe,tM),e(tM,fbe),e(fbe,Q6r),e(tM,W6r),e(tM,sW),e(sW,H6r),e(tM,U6r),e(pe,J6r),e(pe,aM),e(aM,mbe),e(mbe,Y6r),e(aM,K6r),e(aM,lW),e(lW,Z6r),e(aM,e1r),e(pe,o1r),e(pe,nM),e(nM,gbe),e(gbe,r1r),e(nM,t1r),e(nM,iW),e(iW,a1r),e(nM,n1r),e(pe,s1r),e(pe,sM),e(sM,hbe),e(hbe,l1r),e(sM,i1r),e(sM,dW),e(dW,d1r),e(sM,c1r),e(pe,f1r),e(pe,lM),e(lM,pbe),e(pbe,m1r),e(lM,g1r),e(lM,cW),e(cW,h1r),e(lM,p1r),e(pe,u1r),e(pe,iM),e(iM,ube),e(ube,_1r),e(iM,b1r),e(iM,fW),e(fW,v1r),e(iM,F1r),e(pe,T1r),e(pe,dM),e(dM,_be),e(_be,M1r),e(dM,E1r),e(dM,mW),e(mW,C1r),e(dM,w1r),e(pe,A1r),e(pe,cM),e(cM,bbe),e(bbe,y1r),e(cM,L1r),e(cM,gW),e(gW,x1r),e(cM,$1r),e(pe,k1r),e(pe,fM),e(fM,vbe),e(vbe,S1r),e(fM,R1r),e(fM,hW),e(hW,B1r),e(fM,P1r),e(pe,I1r),e(pe,mM),e(mM,Fbe),e(Fbe,q1r),e(mM,N1r),e(mM,pW),e(pW,j1r),e(mM,D1r),e(pe,G1r),e(pe,gM),e(gM,Tbe),e(Tbe,O1r),e(gM,V1r),e(gM,uW),e(uW,X1r),e(gM,z1r),e(pe,Q1r),e(pe,hM),e(hM,Mbe),e(Mbe,W1r),e(hM,H1r),e(hM,_W),e(_W,U1r),e(hM,J1r),e(pe,Y1r),e(pe,pM),e(pM,Ebe),e(Ebe,K1r),e(pM,Z1r),e(pM,bW),e(bW,ebr),e(pM,obr),e(pe,rbr),e(pe,uM),e(uM,Cbe),e(Cbe,tbr),e(uM,abr),e(uM,vW),e(vW,nbr),e(uM,sbr),e(pe,lbr),e(pe,_M),e(_M,wbe),e(wbe,ibr),e(_M,dbr),e(_M,FW),e(FW,cbr),e(_M,fbr),e(xr,mbr),M(bM,xr,null),b(f,cPe,_),b(f,oc,_),e(oc,vM),e(vM,Abe),M(NL,Abe,null),e(oc,gbr),e(oc,ybe),e(ybe,hbr),b(f,fPe,_),b(f,tr,_),M(jL,tr,null),e(tr,pbr),e(tr,rc),e(rc,ubr),e(rc,TW),e(TW,_br),e(rc,bbr),e(rc,MW),e(MW,vbr),e(rc,Fbr),e(tr,Tbr),e(tr,DL),e(DL,Mbr),e(DL,Lbe),e(Lbe,Ebr),e(DL,Cbr),e(tr,wbr),e(tr,$t),M(GL,$t,null),e($t,Abr),e($t,xbe),e(xbe,ybr),e($t,Lbr),e($t,tc),e(tc,xbr),e(tc,$be),e($be,$br),e(tc,kbr),e(tc,EW),e(EW,Sbr),e(tc,Rbr),e($t,Bbr),M(FM,$t,null),e(tr,Pbr),e(tr,$r),M(OL,$r,null),e($r,Ibr),e($r,kbe),e(kbe,qbr),e($r,Nbr),e($r,rn),e(rn,jbr),e(rn,Sbe),e(Sbe,Dbr),e(rn,Gbr),e(rn,Rbe),e(Rbe,Obr),e(rn,Vbr),e(rn,Bbe),e(Bbe,Xbr),e(rn,zbr),e($r,Qbr),e($r,Pbe),e(Pbe,TM),e(TM,Ibe),e(Ibe,Wbr),e(TM,Hbr),e(TM,CW),e(CW,Ubr),e(TM,Jbr),e($r,Ybr),M(MM,$r,null),b(f,mPe,_),b(f,ac,_),e(ac,EM),e(EM,qbe),M(VL,qbe,null),e(ac,Kbr),e(ac,Nbe),e(Nbe,Zbr),b(f,gPe,_),b(f,ar,_),M(XL,ar,null),e(ar,e2r),e(ar,nc),e(nc,o2r),e(nc,wW),e(wW,r2r),e(nc,t2r),e(nc,AW),e(AW,a2r),e(nc,n2r),e(ar,s2r),e(ar,zL),e(zL,l2r),e(zL,jbe),e(jbe,i2r),e(zL,d2r),e(ar,c2r),e(ar,kt),M(QL,kt,null),e(kt,f2r),e(kt,Dbe),e(Dbe,m2r),e(kt,g2r),e(kt,sc),e(sc,h2r),e(sc,Gbe),e(Gbe,p2r),e(sc,u2r),e(sc,yW),e(yW,_2r),e(sc,b2r),e(kt,v2r),M(CM,kt,null),e(ar,F2r),e(ar,kr),M(WL,kr,null),e(kr,T2r),e(kr,Obe),e(Obe,M2r),e(kr,E2r),e(kr,tn),e(tn,C2r),e(tn,Vbe),e(Vbe,w2r),e(tn,A2r),e(tn,Xbe),e(Xbe,y2r),e(tn,L2r),e(tn,zbe),e(zbe,x2r),e(tn,$2r),e(kr,k2r),e(kr,de),e(de,wM),e(wM,Qbe),e(Qbe,S2r),e(wM,R2r),e(wM,LW),e(LW,B2r),e(wM,P2r),e(de,I2r),e(de,AM),e(AM,Wbe),e(Wbe,q2r),e(AM,N2r),e(AM,xW),e(xW,j2r),e(AM,D2r),e(de,G2r),e(de,yM),e(yM,Hbe),e(Hbe,O2r),e(yM,V2r),e(yM,$W),e($W,X2r),e(yM,z2r),e(de,Q2r),e(de,LM),e(LM,Ube),e(Ube,W2r),e(LM,H2r),e(LM,kW),e(kW,U2r),e(LM,J2r),e(de,Y2r),e(de,xM),e(xM,Jbe),e(Jbe,K2r),e(xM,Z2r),e(xM,SW),e(SW,e5r),e(xM,o5r),e(de,r5r),e(de,$M),e($M,Ybe),e(Ybe,t5r),e($M,a5r),e($M,RW),e(RW,n5r),e($M,s5r),e(de,l5r),e(de,kM),e(kM,Kbe),e(Kbe,i5r),e(kM,d5r),e(kM,BW),e(BW,c5r),e(kM,f5r),e(de,m5r),e(de,SM),e(SM,Zbe),e(Zbe,g5r),e(SM,h5r),e(SM,PW),e(PW,p5r),e(SM,u5r),e(de,_5r),e(de,RM),e(RM,e2e),e(e2e,b5r),e(RM,v5r),e(RM,IW),e(IW,F5r),e(RM,T5r),e(de,M5r),e(de,BM),e(BM,o2e),e(o2e,E5r),e(BM,C5r),e(BM,qW),e(qW,w5r),e(BM,A5r),e(de,y5r),e(de,PM),e(PM,r2e),e(r2e,L5r),e(PM,x5r),e(PM,NW),e(NW,$5r),e(PM,k5r),e(de,S5r),e(de,IM),e(IM,t2e),e(t2e,R5r),e(IM,B5r),e(IM,jW),e(jW,P5r),e(IM,I5r),e(de,q5r),e(de,qM),e(qM,a2e),e(a2e,N5r),e(qM,j5r),e(qM,DW),e(DW,D5r),e(qM,G5r),e(de,O5r),e(de,NM),e(NM,n2e),e(n2e,V5r),e(NM,X5r),e(NM,GW),e(GW,z5r),e(NM,Q5r),e(de,W5r),e(de,jM),e(jM,s2e),e(s2e,H5r),e(jM,U5r),e(jM,OW),e(OW,J5r),e(jM,Y5r),e(de,K5r),e(de,DM),e(DM,l2e),e(l2e,Z5r),e(DM,evr),e(DM,VW),e(VW,ovr),e(DM,rvr),e(de,tvr),e(de,GM),e(GM,i2e),e(i2e,avr),e(GM,nvr),e(GM,XW),e(XW,svr),e(GM,lvr),e(de,ivr),e(de,OM),e(OM,d2e),e(d2e,dvr),e(OM,cvr),e(OM,zW),e(zW,fvr),e(OM,mvr),e(de,gvr),e(de,VM),e(VM,c2e),e(c2e,hvr),e(VM,pvr),e(VM,QW),e(QW,uvr),e(VM,_vr),e(de,bvr),e(de,XM),e(XM,f2e),e(f2e,vvr),e(XM,Fvr),e(XM,WW),e(WW,Tvr),e(XM,Mvr),e(kr,Evr),M(zM,kr,null),b(f,hPe,_),b(f,lc,_),e(lc,QM),e(QM,m2e),M(HL,m2e,null),e(lc,Cvr),e(lc,g2e),e(g2e,wvr),b(f,pPe,_),b(f,nr,_),M(UL,nr,null),e(nr,Avr),e(nr,ic),e(ic,yvr),e(ic,HW),e(HW,Lvr),e(ic,xvr),e(ic,UW),e(UW,$vr),e(ic,kvr),e(nr,Svr),e(nr,JL),e(JL,Rvr),e(JL,h2e),e(h2e,Bvr),e(JL,Pvr),e(nr,Ivr),e(nr,St),M(YL,St,null),e(St,qvr),e(St,p2e),e(p2e,Nvr),e(St,jvr),e(St,dc),e(dc,Dvr),e(dc,u2e),e(u2e,Gvr),e(dc,Ovr),e(dc,JW),e(JW,Vvr),e(dc,Xvr),e(St,zvr),M(WM,St,null),e(nr,Qvr),e(nr,Sr),M(KL,Sr,null),e(Sr,Wvr),e(Sr,_2e),e(_2e,Hvr),e(Sr,Uvr),e(Sr,an),e(an,Jvr),e(an,b2e),e(b2e,Yvr),e(an,Kvr),e(an,v2e),e(v2e,Zvr),e(an,eFr),e(an,F2e),e(F2e,oFr),e(an,rFr),e(Sr,tFr),e(Sr,ce),e(ce,HM),e(HM,T2e),e(T2e,aFr),e(HM,nFr),e(HM,YW),e(YW,sFr),e(HM,lFr),e(ce,iFr),e(ce,UM),e(UM,M2e),e(M2e,dFr),e(UM,cFr),e(UM,KW),e(KW,fFr),e(UM,mFr),e(ce,gFr),e(ce,JM),e(JM,E2e),e(E2e,hFr),e(JM,pFr),e(JM,ZW),e(ZW,uFr),e(JM,_Fr),e(ce,bFr),e(ce,YM),e(YM,C2e),e(C2e,vFr),e(YM,FFr),e(YM,eH),e(eH,TFr),e(YM,MFr),e(ce,EFr),e(ce,KM),e(KM,w2e),e(w2e,CFr),e(KM,wFr),e(KM,oH),e(oH,AFr),e(KM,yFr),e(ce,LFr),e(ce,ZM),e(ZM,A2e),e(A2e,xFr),e(ZM,$Fr),e(ZM,rH),e(rH,kFr),e(ZM,SFr),e(ce,RFr),e(ce,e4),e(e4,y2e),e(y2e,BFr),e(e4,PFr),e(e4,tH),e(tH,IFr),e(e4,qFr),e(ce,NFr),e(ce,o4),e(o4,L2e),e(L2e,jFr),e(o4,DFr),e(o4,aH),e(aH,GFr),e(o4,OFr),e(ce,VFr),e(ce,r4),e(r4,x2e),e(x2e,XFr),e(r4,zFr),e(r4,nH),e(nH,QFr),e(r4,WFr),e(ce,HFr),e(ce,t4),e(t4,$2e),e($2e,UFr),e(t4,JFr),e(t4,sH),e(sH,YFr),e(t4,KFr),e(ce,ZFr),e(ce,a4),e(a4,k2e),e(k2e,eTr),e(a4,oTr),e(a4,lH),e(lH,rTr),e(a4,tTr),e(ce,aTr),e(ce,n4),e(n4,S2e),e(S2e,nTr),e(n4,sTr),e(n4,iH),e(iH,lTr),e(n4,iTr),e(ce,dTr),e(ce,s4),e(s4,R2e),e(R2e,cTr),e(s4,fTr),e(s4,dH),e(dH,mTr),e(s4,gTr),e(ce,hTr),e(ce,l4),e(l4,B2e),e(B2e,pTr),e(l4,uTr),e(l4,cH),e(cH,_Tr),e(l4,bTr),e(ce,vTr),e(ce,i4),e(i4,P2e),e(P2e,FTr),e(i4,TTr),e(i4,fH),e(fH,MTr),e(i4,ETr),e(ce,CTr),e(ce,d4),e(d4,I2e),e(I2e,wTr),e(d4,ATr),e(d4,mH),e(mH,yTr),e(d4,LTr),e(ce,xTr),e(ce,c4),e(c4,q2e),e(q2e,$Tr),e(c4,kTr),e(c4,gH),e(gH,STr),e(c4,RTr),e(ce,BTr),e(ce,f4),e(f4,N2e),e(N2e,PTr),e(f4,ITr),e(f4,hH),e(hH,qTr),e(f4,NTr),e(ce,jTr),e(ce,m4),e(m4,j2e),e(j2e,DTr),e(m4,GTr),e(m4,pH),e(pH,OTr),e(m4,VTr),e(ce,XTr),e(ce,g4),e(g4,D2e),e(D2e,zTr),e(g4,QTr),e(g4,uH),e(uH,WTr),e(g4,HTr),e(Sr,UTr),M(h4,Sr,null),b(f,uPe,_),b(f,cc,_),e(cc,p4),e(p4,G2e),M(ZL,G2e,null),e(cc,JTr),e(cc,O2e),e(O2e,YTr),b(f,_Pe,_),b(f,sr,_),M(e8,sr,null),e(sr,KTr),e(sr,fc),e(fc,ZTr),e(fc,_H),e(_H,e9r),e(fc,o9r),e(fc,bH),e(bH,r9r),e(fc,t9r),e(sr,a9r),e(sr,o8),e(o8,n9r),e(o8,V2e),e(V2e,s9r),e(o8,l9r),e(sr,i9r),e(sr,Rt),M(r8,Rt,null),e(Rt,d9r),e(Rt,X2e),e(X2e,c9r),e(Rt,f9r),e(Rt,mc),e(mc,m9r),e(mc,z2e),e(z2e,g9r),e(mc,h9r),e(mc,vH),e(vH,p9r),e(mc,u9r),e(Rt,_9r),M(u4,Rt,null),e(sr,b9r),e(sr,Rr),M(t8,Rr,null),e(Rr,v9r),e(Rr,Q2e),e(Q2e,F9r),e(Rr,T9r),e(Rr,nn),e(nn,M9r),e(nn,W2e),e(W2e,E9r),e(nn,C9r),e(nn,H2e),e(H2e,w9r),e(nn,A9r),e(nn,U2e),e(U2e,y9r),e(nn,L9r),e(Rr,x9r),e(Rr,J2e),e(J2e,_4),e(_4,Y2e),e(Y2e,$9r),e(_4,k9r),e(_4,FH),e(FH,S9r),e(_4,R9r),e(Rr,B9r),M(b4,Rr,null),b(f,bPe,_),b(f,gc,_),e(gc,v4),e(v4,K2e),M(a8,K2e,null),e(gc,P9r),e(gc,Z2e),e(Z2e,I9r),b(f,vPe,_),b(f,lr,_),M(n8,lr,null),e(lr,q9r),e(lr,hc),e(hc,N9r),e(hc,TH),e(TH,j9r),e(hc,D9r),e(hc,MH),e(MH,G9r),e(hc,O9r),e(lr,V9r),e(lr,s8),e(s8,X9r),e(s8,e5e),e(e5e,z9r),e(s8,Q9r),e(lr,W9r),e(lr,Bt),M(l8,Bt,null),e(Bt,H9r),e(Bt,o5e),e(o5e,U9r),e(Bt,J9r),e(Bt,pc),e(pc,Y9r),e(pc,r5e),e(r5e,K9r),e(pc,Z9r),e(pc,EH),e(EH,eMr),e(pc,oMr),e(Bt,rMr),M(F4,Bt,null),e(lr,tMr),e(lr,Br),M(i8,Br,null),e(Br,aMr),e(Br,t5e),e(t5e,nMr),e(Br,sMr),e(Br,sn),e(sn,lMr),e(sn,a5e),e(a5e,iMr),e(sn,dMr),e(sn,n5e),e(n5e,cMr),e(sn,fMr),e(sn,s5e),e(s5e,mMr),e(sn,gMr),e(Br,hMr),e(Br,l5e),e(l5e,T4),e(T4,i5e),e(i5e,pMr),e(T4,uMr),e(T4,CH),e(CH,_Mr),e(T4,bMr),e(Br,vMr),M(M4,Br,null),b(f,FPe,_),b(f,uc,_),e(uc,E4),e(E4,d5e),M(d8,d5e,null),e(uc,FMr),e(uc,c5e),e(c5e,TMr),b(f,TPe,_),b(f,ir,_),M(c8,ir,null),e(ir,MMr),e(ir,_c),e(_c,EMr),e(_c,wH),e(wH,CMr),e(_c,wMr),e(_c,AH),e(AH,AMr),e(_c,yMr),e(ir,LMr),e(ir,f8),e(f8,xMr),e(f8,f5e),e(f5e,$Mr),e(f8,kMr),e(ir,SMr),e(ir,Pt),M(m8,Pt,null),e(Pt,RMr),e(Pt,m5e),e(m5e,BMr),e(Pt,PMr),e(Pt,bc),e(bc,IMr),e(bc,g5e),e(g5e,qMr),e(bc,NMr),e(bc,yH),e(yH,jMr),e(bc,DMr),e(Pt,GMr),M(C4,Pt,null),e(ir,OMr),e(ir,Pr),M(g8,Pr,null),e(Pr,VMr),e(Pr,h5e),e(h5e,XMr),e(Pr,zMr),e(Pr,ln),e(ln,QMr),e(ln,p5e),e(p5e,WMr),e(ln,HMr),e(ln,u5e),e(u5e,UMr),e(ln,JMr),e(ln,_5e),e(_5e,YMr),e(ln,KMr),e(Pr,ZMr),e(Pr,oe),e(oe,w4),e(w4,b5e),e(b5e,e4r),e(w4,o4r),e(w4,LH),e(LH,r4r),e(w4,t4r),e(oe,a4r),e(oe,A4),e(A4,v5e),e(v5e,n4r),e(A4,s4r),e(A4,xH),e(xH,l4r),e(A4,i4r),e(oe,d4r),e(oe,y4),e(y4,F5e),e(F5e,c4r),e(y4,f4r),e(y4,$H),e($H,m4r),e(y4,g4r),e(oe,h4r),e(oe,L4),e(L4,T5e),e(T5e,p4r),e(L4,u4r),e(L4,kH),e(kH,_4r),e(L4,b4r),e(oe,v4r),e(oe,x4),e(x4,M5e),e(M5e,F4r),e(x4,T4r),e(x4,SH),e(SH,M4r),e(x4,E4r),e(oe,C4r),e(oe,$4),e($4,E5e),e(E5e,w4r),e($4,A4r),e($4,RH),e(RH,y4r),e($4,L4r),e(oe,x4r),e(oe,k4),e(k4,C5e),e(C5e,$4r),e(k4,k4r),e(k4,BH),e(BH,S4r),e(k4,R4r),e(oe,B4r),e(oe,S4),e(S4,w5e),e(w5e,P4r),e(S4,I4r),e(S4,PH),e(PH,q4r),e(S4,N4r),e(oe,j4r),e(oe,R4),e(R4,A5e),e(A5e,D4r),e(R4,G4r),e(R4,IH),e(IH,O4r),e(R4,V4r),e(oe,X4r),e(oe,B4),e(B4,y5e),e(y5e,z4r),e(B4,Q4r),e(B4,qH),e(qH,W4r),e(B4,H4r),e(oe,U4r),e(oe,P4),e(P4,L5e),e(L5e,J4r),e(P4,Y4r),e(P4,NH),e(NH,K4r),e(P4,Z4r),e(oe,eEr),e(oe,I4),e(I4,x5e),e(x5e,oEr),e(I4,rEr),e(I4,jH),e(jH,tEr),e(I4,aEr),e(oe,nEr),e(oe,q4),e(q4,$5e),e($5e,sEr),e(q4,lEr),e(q4,DH),e(DH,iEr),e(q4,dEr),e(oe,cEr),e(oe,N4),e(N4,k5e),e(k5e,fEr),e(N4,mEr),e(N4,GH),e(GH,gEr),e(N4,hEr),e(oe,pEr),e(oe,j4),e(j4,S5e),e(S5e,uEr),e(j4,_Er),e(j4,OH),e(OH,bEr),e(j4,vEr),e(oe,FEr),e(oe,D4),e(D4,R5e),e(R5e,TEr),e(D4,MEr),e(D4,VH),e(VH,EEr),e(D4,CEr),e(oe,wEr),e(oe,G4),e(G4,B5e),e(B5e,AEr),e(G4,yEr),e(G4,XH),e(XH,LEr),e(G4,xEr),e(oe,$Er),e(oe,O4),e(O4,P5e),e(P5e,kEr),e(O4,SEr),e(O4,zH),e(zH,REr),e(O4,BEr),e(oe,PEr),e(oe,V4),e(V4,I5e),e(I5e,IEr),e(V4,qEr),e(V4,QH),e(QH,NEr),e(V4,jEr),e(oe,DEr),e(oe,X4),e(X4,q5e),e(q5e,GEr),e(X4,OEr),e(X4,WH),e(WH,VEr),e(X4,XEr),e(oe,zEr),e(oe,z4),e(z4,N5e),e(N5e,QEr),e(z4,WEr),e(z4,HH),e(HH,HEr),e(z4,UEr),e(oe,JEr),e(oe,Q4),e(Q4,j5e),e(j5e,YEr),e(Q4,KEr),e(Q4,UH),e(UH,ZEr),e(Q4,eCr),e(oe,oCr),e(oe,W4),e(W4,D5e),e(D5e,rCr),e(W4,tCr),e(W4,JH),e(JH,aCr),e(W4,nCr),e(oe,sCr),e(oe,H4),e(H4,G5e),e(G5e,lCr),e(H4,iCr),e(H4,YH),e(YH,dCr),e(H4,cCr),e(oe,fCr),e(oe,U4),e(U4,O5e),e(O5e,mCr),e(U4,gCr),e(U4,KH),e(KH,hCr),e(U4,pCr),e(Pr,uCr),M(J4,Pr,null),b(f,MPe,_),b(f,vc,_),e(vc,Y4),e(Y4,V5e),M(h8,V5e,null),e(vc,_Cr),e(vc,X5e),e(X5e,bCr),b(f,EPe,_),b(f,dr,_),M(p8,dr,null),e(dr,vCr),e(dr,Fc),e(Fc,FCr),e(Fc,ZH),e(ZH,TCr),e(Fc,MCr),e(Fc,eU),e(eU,ECr),e(Fc,CCr),e(dr,wCr),e(dr,u8),e(u8,ACr),e(u8,z5e),e(z5e,yCr),e(u8,LCr),e(dr,xCr),e(dr,It),M(_8,It,null),e(It,$Cr),e(It,Q5e),e(Q5e,kCr),e(It,SCr),e(It,Tc),e(Tc,RCr),e(Tc,W5e),e(W5e,BCr),e(Tc,PCr),e(Tc,oU),e(oU,ICr),e(Tc,qCr),e(It,NCr),M(K4,It,null),e(dr,jCr),e(dr,Ir),M(b8,Ir,null),e(Ir,DCr),e(Ir,H5e),e(H5e,GCr),e(Ir,OCr),e(Ir,dn),e(dn,VCr),e(dn,U5e),e(U5e,XCr),e(dn,zCr),e(dn,J5e),e(J5e,QCr),e(dn,WCr),e(dn,Y5e),e(Y5e,HCr),e(dn,UCr),e(Ir,JCr),e(Ir,Hr),e(Hr,Z4),e(Z4,K5e),e(K5e,YCr),e(Z4,KCr),e(Z4,rU),e(rU,ZCr),e(Z4,e3r),e(Hr,o3r),e(Hr,eE),e(eE,Z5e),e(Z5e,r3r),e(eE,t3r),e(eE,tU),e(tU,a3r),e(eE,n3r),e(Hr,s3r),e(Hr,oE),e(oE,eve),e(eve,l3r),e(oE,i3r),e(oE,aU),e(aU,d3r),e(oE,c3r),e(Hr,f3r),e(Hr,rE),e(rE,ove),e(ove,m3r),e(rE,g3r),e(rE,nU),e(nU,h3r),e(rE,p3r),e(Hr,u3r),e(Hr,tE),e(tE,rve),e(rve,_3r),e(tE,b3r),e(tE,sU),e(sU,v3r),e(tE,F3r),e(Ir,T3r),M(aE,Ir,null),b(f,CPe,_),b(f,Mc,_),e(Mc,nE),e(nE,tve),M(v8,tve,null),e(Mc,M3r),e(Mc,ave),e(ave,E3r),b(f,wPe,_),b(f,cr,_),M(F8,cr,null),e(cr,C3r),e(cr,Ec),e(Ec,w3r),e(Ec,lU),e(lU,A3r),e(Ec,y3r),e(Ec,iU),e(iU,L3r),e(Ec,x3r),e(cr,$3r),e(cr,T8),e(T8,k3r),e(T8,nve),e(nve,S3r),e(T8,R3r),e(cr,B3r),e(cr,qt),M(M8,qt,null),e(qt,P3r),e(qt,sve),e(sve,I3r),e(qt,q3r),e(qt,Cc),e(Cc,N3r),e(Cc,lve),e(lve,j3r),e(Cc,D3r),e(Cc,dU),e(dU,G3r),e(Cc,O3r),e(qt,V3r),M(sE,qt,null),e(cr,X3r),e(cr,qr),M(E8,qr,null),e(qr,z3r),e(qr,ive),e(ive,Q3r),e(qr,W3r),e(qr,cn),e(cn,H3r),e(cn,dve),e(dve,U3r),e(cn,J3r),e(cn,cve),e(cve,Y3r),e(cn,K3r),e(cn,fve),e(fve,Z3r),e(cn,ewr),e(qr,owr),e(qr,Me),e(Me,lE),e(lE,mve),e(mve,rwr),e(lE,twr),e(lE,cU),e(cU,awr),e(lE,nwr),e(Me,swr),e(Me,iE),e(iE,gve),e(gve,lwr),e(iE,iwr),e(iE,fU),e(fU,dwr),e(iE,cwr),e(Me,fwr),e(Me,dE),e(dE,hve),e(hve,mwr),e(dE,gwr),e(dE,mU),e(mU,hwr),e(dE,pwr),e(Me,uwr),e(Me,cE),e(cE,pve),e(pve,_wr),e(cE,bwr),e(cE,gU),e(gU,vwr),e(cE,Fwr),e(Me,Twr),e(Me,fE),e(fE,uve),e(uve,Mwr),e(fE,Ewr),e(fE,hU),e(hU,Cwr),e(fE,wwr),e(Me,Awr),e(Me,mE),e(mE,_ve),e(_ve,ywr),e(mE,Lwr),e(mE,pU),e(pU,xwr),e(mE,$wr),e(Me,kwr),e(Me,gE),e(gE,bve),e(bve,Swr),e(gE,Rwr),e(gE,uU),e(uU,Bwr),e(gE,Pwr),e(Me,Iwr),e(Me,hE),e(hE,vve),e(vve,qwr),e(hE,Nwr),e(hE,_U),e(_U,jwr),e(hE,Dwr),e(Me,Gwr),e(Me,pE),e(pE,Fve),e(Fve,Owr),e(pE,Vwr),e(pE,bU),e(bU,Xwr),e(pE,zwr),e(Me,Qwr),e(Me,uE),e(uE,Tve),e(Tve,Wwr),e(uE,Hwr),e(uE,vU),e(vU,Uwr),e(uE,Jwr),e(Me,Ywr),e(Me,_E),e(_E,Mve),e(Mve,Kwr),e(_E,Zwr),e(_E,FU),e(FU,eAr),e(_E,oAr),e(Me,rAr),e(Me,bE),e(bE,Eve),e(Eve,tAr),e(bE,aAr),e(bE,TU),e(TU,nAr),e(bE,sAr),e(qr,lAr),M(vE,qr,null),b(f,APe,_),b(f,wc,_),e(wc,FE),e(FE,Cve),M(C8,Cve,null),e(wc,iAr),e(wc,wve),e(wve,dAr),b(f,yPe,_),b(f,fr,_),M(w8,fr,null),e(fr,cAr),e(fr,Ac),e(Ac,fAr),e(Ac,MU),e(MU,mAr),e(Ac,gAr),e(Ac,EU),e(EU,hAr),e(Ac,pAr),e(fr,uAr),e(fr,A8),e(A8,_Ar),e(A8,Ave),e(Ave,bAr),e(A8,vAr),e(fr,FAr),e(fr,Nt),M(y8,Nt,null),e(Nt,TAr),e(Nt,yve),e(yve,MAr),e(Nt,EAr),e(Nt,yc),e(yc,CAr),e(yc,Lve),e(Lve,wAr),e(yc,AAr),e(yc,CU),e(CU,yAr),e(yc,LAr),e(Nt,xAr),M(TE,Nt,null),e(fr,$Ar),e(fr,Nr),M(L8,Nr,null),e(Nr,kAr),e(Nr,xve),e(xve,SAr),e(Nr,RAr),e(Nr,fn),e(fn,BAr),e(fn,$ve),e($ve,PAr),e(fn,IAr),e(fn,kve),e(kve,qAr),e(fn,NAr),e(fn,Sve),e(Sve,jAr),e(fn,DAr),e(Nr,GAr),e(Nr,Le),e(Le,ME),e(ME,Rve),e(Rve,OAr),e(ME,VAr),e(ME,wU),e(wU,XAr),e(ME,zAr),e(Le,QAr),e(Le,EE),e(EE,Bve),e(Bve,WAr),e(EE,HAr),e(EE,AU),e(AU,UAr),e(EE,JAr),e(Le,YAr),e(Le,CE),e(CE,Pve),e(Pve,KAr),e(CE,ZAr),e(CE,yU),e(yU,e0r),e(CE,o0r),e(Le,r0r),e(Le,wE),e(wE,Ive),e(Ive,t0r),e(wE,a0r),e(wE,LU),e(LU,n0r),e(wE,s0r),e(Le,l0r),e(Le,AE),e(AE,qve),e(qve,i0r),e(AE,d0r),e(AE,xU),e(xU,c0r),e(AE,f0r),e(Le,m0r),e(Le,yE),e(yE,Nve),e(Nve,g0r),e(yE,h0r),e(yE,$U),e($U,p0r),e(yE,u0r),e(Le,_0r),e(Le,LE),e(LE,jve),e(jve,b0r),e(LE,v0r),e(LE,kU),e(kU,F0r),e(LE,T0r),e(Le,M0r),e(Le,xE),e(xE,Dve),e(Dve,E0r),e(xE,C0r),e(xE,SU),e(SU,w0r),e(xE,A0r),e(Le,y0r),e(Le,$E),e($E,Gve),e(Gve,L0r),e($E,x0r),e($E,RU),e(RU,$0r),e($E,k0r),e(Le,S0r),e(Le,kE),e(kE,Ove),e(Ove,R0r),e(kE,B0r),e(kE,BU),e(BU,P0r),e(kE,I0r),e(Nr,q0r),M(SE,Nr,null),b(f,LPe,_),b(f,Lc,_),e(Lc,RE),e(RE,Vve),M(x8,Vve,null),e(Lc,N0r),e(Lc,Xve),e(Xve,j0r),b(f,xPe,_),b(f,mr,_),M($8,mr,null),e(mr,D0r),e(mr,xc),e(xc,G0r),e(xc,PU),e(PU,O0r),e(xc,V0r),e(xc,IU),e(IU,X0r),e(xc,z0r),e(mr,Q0r),e(mr,k8),e(k8,W0r),e(k8,zve),e(zve,H0r),e(k8,U0r),e(mr,J0r),e(mr,jt),M(S8,jt,null),e(jt,Y0r),e(jt,Qve),e(Qve,K0r),e(jt,Z0r),e(jt,$c),e($c,eyr),e($c,Wve),e(Wve,oyr),e($c,ryr),e($c,qU),e(qU,tyr),e($c,ayr),e(jt,nyr),M(BE,jt,null),e(mr,syr),e(mr,jr),M(R8,jr,null),e(jr,lyr),e(jr,Hve),e(Hve,iyr),e(jr,dyr),e(jr,mn),e(mn,cyr),e(mn,Uve),e(Uve,fyr),e(mn,myr),e(mn,Jve),e(Jve,gyr),e(mn,hyr),e(mn,Yve),e(Yve,pyr),e(mn,uyr),e(jr,_yr),e(jr,ke),e(ke,PE),e(PE,Kve),e(Kve,byr),e(PE,vyr),e(PE,NU),e(NU,Fyr),e(PE,Tyr),e(ke,Myr),e(ke,IE),e(IE,Zve),e(Zve,Eyr),e(IE,Cyr),e(IE,jU),e(jU,wyr),e(IE,Ayr),e(ke,yyr),e(ke,qE),e(qE,eFe),e(eFe,Lyr),e(qE,xyr),e(qE,DU),e(DU,$yr),e(qE,kyr),e(ke,Syr),e(ke,NE),e(NE,oFe),e(oFe,Ryr),e(NE,Byr),e(NE,GU),e(GU,Pyr),e(NE,Iyr),e(ke,qyr),e(ke,jE),e(jE,rFe),e(rFe,Nyr),e(jE,jyr),e(jE,OU),e(OU,Dyr),e(jE,Gyr),e(ke,Oyr),e(ke,DE),e(DE,tFe),e(tFe,Vyr),e(DE,Xyr),e(DE,VU),e(VU,zyr),e(DE,Qyr),e(ke,Wyr),e(ke,GE),e(GE,aFe),e(aFe,Hyr),e(GE,Uyr),e(GE,XU),e(XU,Jyr),e(GE,Yyr),e(ke,Kyr),e(ke,OE),e(OE,nFe),e(nFe,Zyr),e(OE,eLr),e(OE,zU),e(zU,oLr),e(OE,rLr),e(ke,tLr),e(ke,VE),e(VE,sFe),e(sFe,aLr),e(VE,nLr),e(VE,QU),e(QU,sLr),e(VE,lLr),e(jr,iLr),M(XE,jr,null),b(f,$Pe,_),b(f,kc,_),e(kc,zE),e(zE,lFe),M(B8,lFe,null),e(kc,dLr),e(kc,iFe),e(iFe,cLr),b(f,kPe,_),b(f,gr,_),M(P8,gr,null),e(gr,fLr),e(gr,Sc),e(Sc,mLr),e(Sc,WU),e(WU,gLr),e(Sc,hLr),e(Sc,HU),e(HU,pLr),e(Sc,uLr),e(gr,_Lr),e(gr,I8),e(I8,bLr),e(I8,dFe),e(dFe,vLr),e(I8,FLr),e(gr,TLr),e(gr,Dt),M(q8,Dt,null),e(Dt,MLr),e(Dt,cFe),e(cFe,ELr),e(Dt,CLr),e(Dt,Rc),e(Rc,wLr),e(Rc,fFe),e(fFe,ALr),e(Rc,yLr),e(Rc,UU),e(UU,LLr),e(Rc,xLr),e(Dt,$Lr),M(QE,Dt,null),e(gr,kLr),e(gr,Dr),M(N8,Dr,null),e(Dr,SLr),e(Dr,mFe),e(mFe,RLr),e(Dr,BLr),e(Dr,gn),e(gn,PLr),e(gn,gFe),e(gFe,ILr),e(gn,qLr),e(gn,hFe),e(hFe,NLr),e(gn,jLr),e(gn,pFe),e(pFe,DLr),e(gn,GLr),e(Dr,OLr),e(Dr,xe),e(xe,WE),e(WE,uFe),e(uFe,VLr),e(WE,XLr),e(WE,JU),e(JU,zLr),e(WE,QLr),e(xe,WLr),e(xe,HE),e(HE,_Fe),e(_Fe,HLr),e(HE,ULr),e(HE,YU),e(YU,JLr),e(HE,YLr),e(xe,KLr),e(xe,UE),e(UE,bFe),e(bFe,ZLr),e(UE,e8r),e(UE,KU),e(KU,o8r),e(UE,r8r),e(xe,t8r),e(xe,JE),e(JE,vFe),e(vFe,a8r),e(JE,n8r),e(JE,ZU),e(ZU,s8r),e(JE,l8r),e(xe,i8r),e(xe,YE),e(YE,FFe),e(FFe,d8r),e(YE,c8r),e(YE,eJ),e(eJ,f8r),e(YE,m8r),e(xe,g8r),e(xe,KE),e(KE,TFe),e(TFe,h8r),e(KE,p8r),e(KE,oJ),e(oJ,u8r),e(KE,_8r),e(xe,b8r),e(xe,ZE),e(ZE,MFe),e(MFe,v8r),e(ZE,F8r),e(ZE,rJ),e(rJ,T8r),e(ZE,M8r),e(xe,E8r),e(xe,eC),e(eC,EFe),e(EFe,C8r),e(eC,w8r),e(eC,tJ),e(tJ,A8r),e(eC,y8r),e(xe,L8r),e(xe,oC),e(oC,CFe),e(CFe,x8r),e(oC,$8r),e(oC,aJ),e(aJ,k8r),e(oC,S8r),e(xe,R8r),e(xe,rC),e(rC,wFe),e(wFe,B8r),e(rC,P8r),e(rC,nJ),e(nJ,I8r),e(rC,q8r),e(Dr,N8r),M(tC,Dr,null),b(f,SPe,_),b(f,Bc,_),e(Bc,aC),e(aC,AFe),M(j8,AFe,null),e(Bc,j8r),e(Bc,yFe),e(yFe,D8r),b(f,RPe,_),b(f,hr,_),M(D8,hr,null),e(hr,G8r),e(hr,Pc),e(Pc,O8r),e(Pc,sJ),e(sJ,V8r),e(Pc,X8r),e(Pc,lJ),e(lJ,z8r),e(Pc,Q8r),e(hr,W8r),e(hr,G8),e(G8,H8r),e(G8,LFe),e(LFe,U8r),e(G8,J8r),e(hr,Y8r),e(hr,Gt),M(O8,Gt,null),e(Gt,K8r),e(Gt,xFe),e(xFe,Z8r),e(Gt,e7r),e(Gt,Ic),e(Ic,o7r),e(Ic,$Fe),e($Fe,r7r),e(Ic,t7r),e(Ic,iJ),e(iJ,a7r),e(Ic,n7r),e(Gt,s7r),M(nC,Gt,null),e(hr,l7r),e(hr,Gr),M(V8,Gr,null),e(Gr,i7r),e(Gr,kFe),e(kFe,d7r),e(Gr,c7r),e(Gr,hn),e(hn,f7r),e(hn,SFe),e(SFe,m7r),e(hn,g7r),e(hn,RFe),e(RFe,h7r),e(hn,p7r),e(hn,BFe),e(BFe,u7r),e(hn,_7r),e(Gr,b7r),e(Gr,$e),e($e,sC),e(sC,PFe),e(PFe,v7r),e(sC,F7r),e(sC,dJ),e(dJ,T7r),e(sC,M7r),e($e,E7r),e($e,lC),e(lC,IFe),e(IFe,C7r),e(lC,w7r),e(lC,cJ),e(cJ,A7r),e(lC,y7r),e($e,L7r),e($e,iC),e(iC,qFe),e(qFe,x7r),e(iC,$7r),e(iC,fJ),e(fJ,k7r),e(iC,S7r),e($e,R7r),e($e,dC),e(dC,NFe),e(NFe,B7r),e(dC,P7r),e(dC,mJ),e(mJ,I7r),e(dC,q7r),e($e,N7r),e($e,cC),e(cC,jFe),e(jFe,j7r),e(cC,D7r),e(cC,gJ),e(gJ,G7r),e(cC,O7r),e($e,V7r),e($e,fC),e(fC,DFe),e(DFe,X7r),e(fC,z7r),e(fC,hJ),e(hJ,Q7r),e(fC,W7r),e($e,H7r),e($e,mC),e(mC,GFe),e(GFe,U7r),e(mC,J7r),e(mC,pJ),e(pJ,Y7r),e(mC,K7r),e($e,Z7r),e($e,gC),e(gC,OFe),e(OFe,exr),e(gC,oxr),e(gC,uJ),e(uJ,rxr),e(gC,txr),e($e,axr),e($e,hC),e(hC,VFe),e(VFe,nxr),e(hC,sxr),e(hC,_J),e(_J,lxr),e(hC,ixr),e($e,dxr),e($e,pC),e(pC,XFe),e(XFe,cxr),e(pC,fxr),e(pC,bJ),e(bJ,mxr),e(pC,gxr),e(Gr,hxr),M(uC,Gr,null),b(f,BPe,_),b(f,qc,_),e(qc,_C),e(_C,zFe),M(X8,zFe,null),e(qc,pxr),e(qc,QFe),e(QFe,uxr),b(f,PPe,_),b(f,pr,_),M(z8,pr,null),e(pr,_xr),e(pr,Nc),e(Nc,bxr),e(Nc,vJ),e(vJ,vxr),e(Nc,Fxr),e(Nc,FJ),e(FJ,Txr),e(Nc,Mxr),e(pr,Exr),e(pr,Q8),e(Q8,Cxr),e(Q8,WFe),e(WFe,wxr),e(Q8,Axr),e(pr,yxr),e(pr,Ot),M(W8,Ot,null),e(Ot,Lxr),e(Ot,HFe),e(HFe,xxr),e(Ot,$xr),e(Ot,jc),e(jc,kxr),e(jc,UFe),e(UFe,Sxr),e(jc,Rxr),e(jc,TJ),e(TJ,Bxr),e(jc,Pxr),e(Ot,Ixr),M(bC,Ot,null),e(pr,qxr),e(pr,Or),M(H8,Or,null),e(Or,Nxr),e(Or,JFe),e(JFe,jxr),e(Or,Dxr),e(Or,pn),e(pn,Gxr),e(pn,YFe),e(YFe,Oxr),e(pn,Vxr),e(pn,KFe),e(KFe,Xxr),e(pn,zxr),e(pn,ZFe),e(ZFe,Qxr),e(pn,Wxr),e(Or,Hxr),e(Or,je),e(je,vC),e(vC,eTe),e(eTe,Uxr),e(vC,Jxr),e(vC,MJ),e(MJ,Yxr),e(vC,Kxr),e(je,Zxr),e(je,FC),e(FC,oTe),e(oTe,e$r),e(FC,o$r),e(FC,EJ),e(EJ,r$r),e(FC,t$r),e(je,a$r),e(je,TC),e(TC,rTe),e(rTe,n$r),e(TC,s$r),e(TC,CJ),e(CJ,l$r),e(TC,i$r),e(je,d$r),e(je,MC),e(MC,tTe),e(tTe,c$r),e(MC,f$r),e(MC,wJ),e(wJ,m$r),e(MC,g$r),e(je,h$r),e(je,EC),e(EC,aTe),e(aTe,p$r),e(EC,u$r),e(EC,AJ),e(AJ,_$r),e(EC,b$r),e(je,v$r),e(je,CC),e(CC,nTe),e(nTe,F$r),e(CC,T$r),e(CC,yJ),e(yJ,M$r),e(CC,E$r),e(je,C$r),e(je,wC),e(wC,sTe),e(sTe,w$r),e(wC,A$r),e(wC,LJ),e(LJ,y$r),e(wC,L$r),e(je,x$r),e(je,AC),e(AC,lTe),e(lTe,$$r),e(AC,k$r),e(AC,xJ),e(xJ,S$r),e(AC,R$r),e(Or,B$r),M(yC,Or,null),b(f,IPe,_),b(f,Dc,_),e(Dc,LC),e(LC,iTe),M(U8,iTe,null),e(Dc,P$r),e(Dc,dTe),e(dTe,I$r),b(f,qPe,_),b(f,ur,_),M(J8,ur,null),e(ur,q$r),e(ur,Gc),e(Gc,N$r),e(Gc,$J),e($J,j$r),e(Gc,D$r),e(Gc,kJ),e(kJ,G$r),e(Gc,O$r),e(ur,V$r),e(ur,Y8),e(Y8,X$r),e(Y8,cTe),e(cTe,z$r),e(Y8,Q$r),e(ur,W$r),e(ur,Vt),M(K8,Vt,null),e(Vt,H$r),e(Vt,fTe),e(fTe,U$r),e(Vt,J$r),e(Vt,Oc),e(Oc,Y$r),e(Oc,mTe),e(mTe,K$r),e(Oc,Z$r),e(Oc,SJ),e(SJ,ekr),e(Oc,okr),e(Vt,rkr),M(xC,Vt,null),e(ur,tkr),e(ur,Vr),M(Z8,Vr,null),e(Vr,akr),e(Vr,gTe),e(gTe,nkr),e(Vr,skr),e(Vr,un),e(un,lkr),e(un,hTe),e(hTe,ikr),e(un,dkr),e(un,pTe),e(pTe,ckr),e(un,fkr),e(un,uTe),e(uTe,mkr),e(un,gkr),e(Vr,hkr),e(Vr,De),e(De,$C),e($C,_Te),e(_Te,pkr),e($C,ukr),e($C,RJ),e(RJ,_kr),e($C,bkr),e(De,vkr),e(De,kC),e(kC,bTe),e(bTe,Fkr),e(kC,Tkr),e(kC,BJ),e(BJ,Mkr),e(kC,Ekr),e(De,Ckr),e(De,SC),e(SC,vTe),e(vTe,wkr),e(SC,Akr),e(SC,PJ),e(PJ,ykr),e(SC,Lkr),e(De,xkr),e(De,RC),e(RC,FTe),e(FTe,$kr),e(RC,kkr),e(RC,IJ),e(IJ,Skr),e(RC,Rkr),e(De,Bkr),e(De,BC),e(BC,TTe),e(TTe,Pkr),e(BC,Ikr),e(BC,qJ),e(qJ,qkr),e(BC,Nkr),e(De,jkr),e(De,PC),e(PC,MTe),e(MTe,Dkr),e(PC,Gkr),e(PC,NJ),e(NJ,Okr),e(PC,Vkr),e(De,Xkr),e(De,IC),e(IC,ETe),e(ETe,zkr),e(IC,Qkr),e(IC,jJ),e(jJ,Wkr),e(IC,Hkr),e(De,Ukr),e(De,qC),e(qC,CTe),e(CTe,Jkr),e(qC,Ykr),e(qC,DJ),e(DJ,Kkr),e(qC,Zkr),e(Vr,eSr),M(NC,Vr,null),b(f,NPe,_),b(f,Vc,_),e(Vc,jC),e(jC,wTe),M(e7,wTe,null),e(Vc,oSr),e(Vc,ATe),e(ATe,rSr),b(f,jPe,_),b(f,_r,_),M(o7,_r,null),e(_r,tSr),e(_r,Xc),e(Xc,aSr),e(Xc,GJ),e(GJ,nSr),e(Xc,sSr),e(Xc,OJ),e(OJ,lSr),e(Xc,iSr),e(_r,dSr),e(_r,r7),e(r7,cSr),e(r7,yTe),e(yTe,fSr),e(r7,mSr),e(_r,gSr),e(_r,Xt),M(t7,Xt,null),e(Xt,hSr),e(Xt,LTe),e(LTe,pSr),e(Xt,uSr),e(Xt,zc),e(zc,_Sr),e(zc,xTe),e(xTe,bSr),e(zc,vSr),e(zc,VJ),e(VJ,FSr),e(zc,TSr),e(Xt,MSr),M(DC,Xt,null),e(_r,ESr),e(_r,Xr),M(a7,Xr,null),e(Xr,CSr),e(Xr,$Te),e($Te,wSr),e(Xr,ASr),e(Xr,_n),e(_n,ySr),e(_n,kTe),e(kTe,LSr),e(_n,xSr),e(_n,STe),e(STe,$Sr),e(_n,kSr),e(_n,RTe),e(RTe,SSr),e(_n,RSr),e(Xr,BSr),e(Xr,BTe),e(BTe,GC),e(GC,PTe),e(PTe,PSr),e(GC,ISr),e(GC,XJ),e(XJ,qSr),e(GC,NSr),e(Xr,jSr),M(OC,Xr,null),b(f,DPe,_),b(f,Qc,_),e(Qc,VC),e(VC,ITe),M(n7,ITe,null),e(Qc,DSr),e(Qc,qTe),e(qTe,GSr),b(f,GPe,_),b(f,br,_),M(s7,br,null),e(br,OSr),e(br,Wc),e(Wc,VSr),e(Wc,zJ),e(zJ,XSr),e(Wc,zSr),e(Wc,QJ),e(QJ,QSr),e(Wc,WSr),e(br,HSr),e(br,l7),e(l7,USr),e(l7,NTe),e(NTe,JSr),e(l7,YSr),e(br,KSr),e(br,zt),M(i7,zt,null),e(zt,ZSr),e(zt,jTe),e(jTe,eRr),e(zt,oRr),e(zt,Hc),e(Hc,rRr),e(Hc,DTe),e(DTe,tRr),e(Hc,aRr),e(Hc,WJ),e(WJ,nRr),e(Hc,sRr),e(zt,lRr),M(XC,zt,null),e(br,iRr),e(br,zr),M(d7,zr,null),e(zr,dRr),e(zr,GTe),e(GTe,cRr),e(zr,fRr),e(zr,bn),e(bn,mRr),e(bn,OTe),e(OTe,gRr),e(bn,hRr),e(bn,VTe),e(VTe,pRr),e(bn,uRr),e(bn,XTe),e(XTe,_Rr),e(bn,bRr),e(zr,vRr),e(zr,c7),e(c7,zC),e(zC,zTe),e(zTe,FRr),e(zC,TRr),e(zC,HJ),e(HJ,MRr),e(zC,ERr),e(c7,CRr),e(c7,QC),e(QC,QTe),e(QTe,wRr),e(QC,ARr),e(QC,UJ),e(UJ,yRr),e(QC,LRr),e(zr,xRr),M(WC,zr,null),b(f,OPe,_),b(f,Uc,_),e(Uc,HC),e(HC,WTe),M(f7,WTe,null),e(Uc,$Rr),e(Uc,HTe),e(HTe,kRr),b(f,VPe,_),b(f,vr,_),M(m7,vr,null),e(vr,SRr),e(vr,Jc),e(Jc,RRr),e(Jc,JJ),e(JJ,BRr),e(Jc,PRr),e(Jc,YJ),e(YJ,IRr),e(Jc,qRr),e(vr,NRr),e(vr,g7),e(g7,jRr),e(g7,UTe),e(UTe,DRr),e(g7,GRr),e(vr,ORr),e(vr,Qt),M(h7,Qt,null),e(Qt,VRr),e(Qt,JTe),e(JTe,XRr),e(Qt,zRr),e(Qt,Yc),e(Yc,QRr),e(Yc,YTe),e(YTe,WRr),e(Yc,HRr),e(Yc,KJ),e(KJ,URr),e(Yc,JRr),e(Qt,YRr),M(UC,Qt,null),e(vr,KRr),e(vr,Qr),M(p7,Qr,null),e(Qr,ZRr),e(Qr,KTe),e(KTe,eBr),e(Qr,oBr),e(Qr,vn),e(vn,rBr),e(vn,ZTe),e(ZTe,tBr),e(vn,aBr),e(vn,e9e),e(e9e,nBr),e(vn,sBr),e(vn,o9e),e(o9e,lBr),e(vn,iBr),e(Qr,dBr),e(Qr,r9e),e(r9e,JC),e(JC,t9e),e(t9e,cBr),e(JC,fBr),e(JC,ZJ),e(ZJ,mBr),e(JC,gBr),e(Qr,hBr),M(YC,Qr,null),XPe=!0},p(f,[_]){const u7={};_&2&&(u7.$$scope={dirty:_,ctx:f}),sf.$set(u7);const a9e={};_&2&&(a9e.$$scope={dirty:_,ctx:f}),ag.$set(a9e);const n9e={};_&2&&(n9e.$$scope={dirty:_,ctx:f}),qg.$set(n9e);const s9e={};_&2&&(s9e.$$scope={dirty:_,ctx:f}),dh.$set(s9e);const _7={};_&2&&(_7.$$scope={dirty:_,ctx:f}),ch.$set(_7);const l9e={};_&2&&(l9e.$$scope={dirty:_,ctx:f}),yh.$set(l9e);const Fn={};_&2&&(Fn.$$scope={dirty:_,ctx:f}),Lh.$set(Fn);const i9e={};_&2&&(i9e.$$scope={dirty:_,ctx:f}),kh.$set(i9e);const d9e={};_&2&&(d9e.$$scope={dirty:_,ctx:f}),vu.$set(d9e);const c9e={};_&2&&(c9e.$$scope={dirty:_,ctx:f}),Tu.$set(c9e);const b7={};_&2&&(b7.$$scope={dirty:_,ctx:f}),i_.$set(b7);const f9e={};_&2&&(f9e.$$scope={dirty:_,ctx:f}),c_.$set(f9e);const v7={};_&2&&(v7.$$scope={dirty:_,ctx:f}),H_.$set(v7);const m9e={};_&2&&(m9e.$$scope={dirty:_,ctx:f}),J_.$set(m9e);const F7={};_&2&&(F7.$$scope={dirty:_,ctx:f}),R6.$set(F7);const g9e={};_&2&&(g9e.$$scope={dirty:_,ctx:f}),P6.$set(g9e);const h9e={};_&2&&(h9e.$$scope={dirty:_,ctx:f}),e1.$set(h9e);const p9e={};_&2&&(p9e.$$scope={dirty:_,ctx:f}),r1.$set(p9e);const Kc={};_&2&&(Kc.$$scope={dirty:_,ctx:f}),Y1.$set(Kc);const u9e={};_&2&&(u9e.$$scope={dirty:_,ctx:f}),Z1.$set(u9e);const _9e={};_&2&&(_9e.$$scope={dirty:_,ctx:f}),xb.$set(_9e);const b9e={};_&2&&(b9e.$$scope={dirty:_,ctx:f}),kb.$set(b9e);const T7={};_&2&&(T7.$$scope={dirty:_,ctx:f}),Nb.$set(T7);const v9e={};_&2&&(v9e.$$scope={dirty:_,ctx:f}),Db.$set(v9e);const F9e={};_&2&&(F9e.$$scope={dirty:_,ctx:f}),T2.$set(F9e);const T9e={};_&2&&(T9e.$$scope={dirty:_,ctx:f}),E2.$set(T9e);const Ur={};_&2&&(Ur.$$scope={dirty:_,ctx:f}),c5.$set(Ur);const M7={};_&2&&(M7.$$scope={dirty:_,ctx:f}),m5.$set(M7);const M9e={};_&2&&(M9e.$$scope={dirty:_,ctx:f}),p5.$set(M9e);const E7={};_&2&&(E7.$$scope={dirty:_,ctx:f}),_5.$set(E7);const E9e={};_&2&&(E9e.$$scope={dirty:_,ctx:f}),$5.$set(E9e);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),S5.$set(Jr);const C9e={};_&2&&(C9e.$$scope={dirty:_,ctx:f}),P5.$set(C9e);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),q5.$set(Zc);const w9e={};_&2&&(w9e.$$scope={dirty:_,ctx:f}),W5.$set(w9e);const A9e={};_&2&&(A9e.$$scope={dirty:_,ctx:f}),U5.$set(A9e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),ov.$set(y);const KC={};_&2&&(KC.$$scope={dirty:_,ctx:f}),tv.$set(KC);const y9e={};_&2&&(y9e.$$scope={dirty:_,ctx:f}),gv.$set(y9e);const L9e={};_&2&&(L9e.$$scope={dirty:_,ctx:f}),pv.$set(L9e);const ZC={};_&2&&(ZC.$$scope={dirty:_,ctx:f}),vv.$set(ZC);const x9e={};_&2&&(x9e.$$scope={dirty:_,ctx:f}),Tv.$set(x9e);const $9e={};_&2&&($9e.$$scope={dirty:_,ctx:f}),yv.$set($9e);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),xv.$set(e3);const k9e={};_&2&&(k9e.$$scope={dirty:_,ctx:f}),Bv.$set(k9e);const S9e={};_&2&&(S9e.$$scope={dirty:_,ctx:f}),Iv.$set(S9e);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),jv.$set(o3);const R9e={};_&2&&(R9e.$$scope={dirty:_,ctx:f}),Gv.$set(R9e);const B9e={};_&2&&(B9e.$$scope={dirty:_,ctx:f}),Xv.$set(B9e);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),Qv.$set(r3);const P9e={};_&2&&(P9e.$$scope={dirty:_,ctx:f}),Kv.$set(P9e);const I9e={};_&2&&(I9e.$$scope={dirty:_,ctx:f}),eF.$set(I9e);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),tF.$set(t3);const q9e={};_&2&&(q9e.$$scope={dirty:_,ctx:f}),nF.$set(q9e);const N9e={};_&2&&(N9e.$$scope={dirty:_,ctx:f}),UF.$set(N9e);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),YF.$set(a3);const j9e={};_&2&&(j9e.$$scope={dirty:_,ctx:f}),TT.$set(j9e);const D9e={};_&2&&(D9e.$$scope={dirty:_,ctx:f}),ET.$set(D9e);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),IT.$set(n3);const G9e={};_&2&&(G9e.$$scope={dirty:_,ctx:f}),NT.$set(G9e);const O9e={};_&2&&(O9e.$$scope={dirty:_,ctx:f}),GT.$set(O9e);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),VT.$set(s3);const V9e={};_&2&&(V9e.$$scope={dirty:_,ctx:f}),c9.$set(V9e);const X9e={};_&2&&(X9e.$$scope={dirty:_,ctx:f}),m9.$set(X9e);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),E9.$set(l3);const z9e={};_&2&&(z9e.$$scope={dirty:_,ctx:f}),w9.$set(z9e);const Q9e={};_&2&&(Q9e.$$scope={dirty:_,ctx:f}),K9.$set(Q9e);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),eM.$set(i3);const W9e={};_&2&&(W9e.$$scope={dirty:_,ctx:f}),bM.$set(W9e);const H9e={};_&2&&(H9e.$$scope={dirty:_,ctx:f}),FM.$set(H9e);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),MM.$set(d3);const U9e={};_&2&&(U9e.$$scope={dirty:_,ctx:f}),CM.$set(U9e);const J9e={};_&2&&(J9e.$$scope={dirty:_,ctx:f}),zM.$set(J9e);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),WM.$set(c3);const Y9e={};_&2&&(Y9e.$$scope={dirty:_,ctx:f}),h4.$set(Y9e);const K9e={};_&2&&(K9e.$$scope={dirty:_,ctx:f}),u4.$set(K9e);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),b4.$set(f3);const Z9e={};_&2&&(Z9e.$$scope={dirty:_,ctx:f}),F4.$set(Z9e);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),M4.$set(eMe);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),C4.$set(m3);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),J4.$set(oMe);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),K4.$set(rMe);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),aE.$set(g3);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),sE.$set(tMe);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),vE.$set(aMe);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),TE.$set(h3);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),SE.$set(nMe);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),BE.$set(sMe);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),XE.$set(p3);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),QE.$set(lMe);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),tC.$set(iMe);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),nC.$set(u3);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),uC.$set(dMe);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),bC.$set(cMe);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),yC.$set(_3);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),xC.$set(fMe);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),NC.$set(mMe);const b3={};_&2&&(b3.$$scope={dirty:_,ctx:f}),DC.$set(b3);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),OC.$set(gMe);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),XC.$set(hMe);const v3={};_&2&&(v3.$$scope={dirty:_,ctx:f}),WC.$set(v3);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),UC.$set(pMe);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),YC.$set(uMe)},i(f){XPe||(E(d.$$.fragment,f),E(ba.$$.fragment,f),E(_A.$$.fragment,f),E(bA.$$.fragment,f),E(sf.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(EA.$$.fragment,f),E(ag.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(xA.$$.fragment,f),E(qg.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(PA.$$.fragment,f),E(dh.$$.fragment,f),E(ch.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(GA.$$.fragment,f),E(yh.$$.fragment,f),E(Lh.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(kh.$$.fragment,f),E(WA.$$.fragment,f),E(vu.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(Tu.$$.fragment,f),E(KA.$$.fragment,f),E(i_.$$.fragment,f),E(ZA.$$.fragment,f),E(e0.$$.fragment,f),E(r0.$$.fragment,f),E(c_.$$.fragment,f),E(t0.$$.fragment,f),E(H_.$$.fragment,f),E(a0.$$.fragment,f),E(n0.$$.fragment,f),E(l0.$$.fragment,f),E(J_.$$.fragment,f),E(i0.$$.fragment,f),E(R6.$$.fragment,f),E(d0.$$.fragment,f),E(c0.$$.fragment,f),E(m0.$$.fragment,f),E(P6.$$.fragment,f),E(g0.$$.fragment,f),E(e1.$$.fragment,f),E(h0.$$.fragment,f),E(p0.$$.fragment,f),E(_0.$$.fragment,f),E(r1.$$.fragment,f),E(b0.$$.fragment,f),E(Y1.$$.fragment,f),E(v0.$$.fragment,f),E(F0.$$.fragment,f),E(M0.$$.fragment,f),E(Z1.$$.fragment,f),E(E0.$$.fragment,f),E(xb.$$.fragment,f),E(C0.$$.fragment,f),E(w0.$$.fragment,f),E(y0.$$.fragment,f),E(kb.$$.fragment,f),E(L0.$$.fragment,f),E(Nb.$$.fragment,f),E(x0.$$.fragment,f),E($0.$$.fragment,f),E(S0.$$.fragment,f),E(Db.$$.fragment,f),E(R0.$$.fragment,f),E(T2.$$.fragment,f),E(B0.$$.fragment,f),E(P0.$$.fragment,f),E(q0.$$.fragment,f),E(E2.$$.fragment,f),E(N0.$$.fragment,f),E(c5.$$.fragment,f),E(j0.$$.fragment,f),E(D0.$$.fragment,f),E(O0.$$.fragment,f),E(m5.$$.fragment,f),E(V0.$$.fragment,f),E(p5.$$.fragment,f),E(X0.$$.fragment,f),E(z0.$$.fragment,f),E(W0.$$.fragment,f),E(_5.$$.fragment,f),E(H0.$$.fragment,f),E($5.$$.fragment,f),E(U0.$$.fragment,f),E(J0.$$.fragment,f),E(K0.$$.fragment,f),E(S5.$$.fragment,f),E(Z0.$$.fragment,f),E(P5.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(q5.$$.fragment,f),E(ay.$$.fragment,f),E(W5.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(U5.$$.fragment,f),E(dy.$$.fragment,f),E(ov.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(tv.$$.fragment,f),E(hy.$$.fragment,f),E(gv.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(pv.$$.fragment,f),E(vy.$$.fragment,f),E(vv.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(Tv.$$.fragment,f),E(wy.$$.fragment,f),E(yv.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(xv.$$.fragment,f),E($y.$$.fragment,f),E(Bv.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(By.$$.fragment,f),E(Iv.$$.fragment,f),E(Py.$$.fragment,f),E(jv.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gv.$$.fragment,f),E(Dy.$$.fragment,f),E(Xv.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qv.$$.fragment,f),E(zy.$$.fragment,f),E(Kv.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(eF.$$.fragment,f),E(Jy.$$.fragment,f),E(tF.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(nF.$$.fragment,f),E(oL.$$.fragment,f),E(UF.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(YF.$$.fragment,f),E(sL.$$.fragment,f),E(TT.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(ET.$$.fragment,f),E(fL.$$.fragment,f),E(IT.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(NT.$$.fragment,f),E(uL.$$.fragment,f),E(GT.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(VT.$$.fragment,f),E(ML.$$.fragment,f),E(c9.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(m9.$$.fragment,f),E(yL.$$.fragment,f),E(E9.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(w9.$$.fragment,f),E(SL.$$.fragment,f),E(K9.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(eM.$$.fragment,f),E(qL.$$.fragment,f),E(bM.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(FM.$$.fragment,f),E(OL.$$.fragment,f),E(MM.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(QL.$$.fragment,f),E(CM.$$.fragment,f),E(WL.$$.fragment,f),E(zM.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(WM.$$.fragment,f),E(KL.$$.fragment,f),E(h4.$$.fragment,f),E(ZL.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(u4.$$.fragment,f),E(t8.$$.fragment,f),E(b4.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(F4.$$.fragment,f),E(i8.$$.fragment,f),E(M4.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(C4.$$.fragment,f),E(g8.$$.fragment,f),E(J4.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(K4.$$.fragment,f),E(b8.$$.fragment,f),E(aE.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(sE.$$.fragment,f),E(E8.$$.fragment,f),E(vE.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(TE.$$.fragment,f),E(L8.$$.fragment,f),E(SE.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(BE.$$.fragment,f),E(R8.$$.fragment,f),E(XE.$$.fragment,f),E(B8.$$.fragment,f),E(P8.$$.fragment,f),E(q8.$$.fragment,f),E(QE.$$.fragment,f),E(N8.$$.fragment,f),E(tC.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(nC.$$.fragment,f),E(V8.$$.fragment,f),E(uC.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(bC.$$.fragment,f),E(H8.$$.fragment,f),E(yC.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(xC.$$.fragment,f),E(Z8.$$.fragment,f),E(NC.$$.fragment,f),E(e7.$$.fragment,f),E(o7.$$.fragment,f),E(t7.$$.fragment,f),E(DC.$$.fragment,f),E(a7.$$.fragment,f),E(OC.$$.fragment,f),E(n7.$$.fragment,f),E(s7.$$.fragment,f),E(i7.$$.fragment,f),E(XC.$$.fragment,f),E(d7.$$.fragment,f),E(WC.$$.fragment,f),E(f7.$$.fragment,f),E(m7.$$.fragment,f),E(h7.$$.fragment,f),E(UC.$$.fragment,f),E(p7.$$.fragment,f),E(YC.$$.fragment,f),XPe=!0)},o(f){C(d.$$.fragment,f),C(ba.$$.fragment,f),C(_A.$$.fragment,f),C(bA.$$.fragment,f),C(sf.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(EA.$$.fragment,f),C(ag.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(xA.$$.fragment,f),C(qg.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(PA.$$.fragment,f),C(dh.$$.fragment,f),C(ch.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(GA.$$.fragment,f),C(yh.$$.fragment,f),C(Lh.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(kh.$$.fragment,f),C(WA.$$.fragment,f),C(vu.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(Tu.$$.fragment,f),C(KA.$$.fragment,f),C(i_.$$.fragment,f),C(ZA.$$.fragment,f),C(e0.$$.fragment,f),C(r0.$$.fragment,f),C(c_.$$.fragment,f),C(t0.$$.fragment,f),C(H_.$$.fragment,f),C(a0.$$.fragment,f),C(n0.$$.fragment,f),C(l0.$$.fragment,f),C(J_.$$.fragment,f),C(i0.$$.fragment,f),C(R6.$$.fragment,f),C(d0.$$.fragment,f),C(c0.$$.fragment,f),C(m0.$$.fragment,f),C(P6.$$.fragment,f),C(g0.$$.fragment,f),C(e1.$$.fragment,f),C(h0.$$.fragment,f),C(p0.$$.fragment,f),C(_0.$$.fragment,f),C(r1.$$.fragment,f),C(b0.$$.fragment,f),C(Y1.$$.fragment,f),C(v0.$$.fragment,f),C(F0.$$.fragment,f),C(M0.$$.fragment,f),C(Z1.$$.fragment,f),C(E0.$$.fragment,f),C(xb.$$.fragment,f),C(C0.$$.fragment,f),C(w0.$$.fragment,f),C(y0.$$.fragment,f),C(kb.$$.fragment,f),C(L0.$$.fragment,f),C(Nb.$$.fragment,f),C(x0.$$.fragment,f),C($0.$$.fragment,f),C(S0.$$.fragment,f),C(Db.$$.fragment,f),C(R0.$$.fragment,f),C(T2.$$.fragment,f),C(B0.$$.fragment,f),C(P0.$$.fragment,f),C(q0.$$.fragment,f),C(E2.$$.fragment,f),C(N0.$$.fragment,f),C(c5.$$.fragment,f),C(j0.$$.fragment,f),C(D0.$$.fragment,f),C(O0.$$.fragment,f),C(m5.$$.fragment,f),C(V0.$$.fragment,f),C(p5.$$.fragment,f),C(X0.$$.fragment,f),C(z0.$$.fragment,f),C(W0.$$.fragment,f),C(_5.$$.fragment,f),C(H0.$$.fragment,f),C($5.$$.fragment,f),C(U0.$$.fragment,f),C(J0.$$.fragment,f),C(K0.$$.fragment,f),C(S5.$$.fragment,f),C(Z0.$$.fragment,f),C(P5.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(q5.$$.fragment,f),C(ay.$$.fragment,f),C(W5.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(U5.$$.fragment,f),C(dy.$$.fragment,f),C(ov.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(tv.$$.fragment,f),C(hy.$$.fragment,f),C(gv.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(pv.$$.fragment,f),C(vy.$$.fragment,f),C(vv.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(Tv.$$.fragment,f),C(wy.$$.fragment,f),C(yv.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(xv.$$.fragment,f),C($y.$$.fragment,f),C(Bv.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(By.$$.fragment,f),C(Iv.$$.fragment,f),C(Py.$$.fragment,f),C(jv.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gv.$$.fragment,f),C(Dy.$$.fragment,f),C(Xv.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qv.$$.fragment,f),C(zy.$$.fragment,f),C(Kv.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(eF.$$.fragment,f),C(Jy.$$.fragment,f),C(tF.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(nF.$$.fragment,f),C(oL.$$.fragment,f),C(UF.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(YF.$$.fragment,f),C(sL.$$.fragment,f),C(TT.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(ET.$$.fragment,f),C(fL.$$.fragment,f),C(IT.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(NT.$$.fragment,f),C(uL.$$.fragment,f),C(GT.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(VT.$$.fragment,f),C(ML.$$.fragment,f),C(c9.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(m9.$$.fragment,f),C(yL.$$.fragment,f),C(E9.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(w9.$$.fragment,f),C(SL.$$.fragment,f),C(K9.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(eM.$$.fragment,f),C(qL.$$.fragment,f),C(bM.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(FM.$$.fragment,f),C(OL.$$.fragment,f),C(MM.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(QL.$$.fragment,f),C(CM.$$.fragment,f),C(WL.$$.fragment,f),C(zM.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(WM.$$.fragment,f),C(KL.$$.fragment,f),C(h4.$$.fragment,f),C(ZL.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(u4.$$.fragment,f),C(t8.$$.fragment,f),C(b4.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(F4.$$.fragment,f),C(i8.$$.fragment,f),C(M4.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(C4.$$.fragment,f),C(g8.$$.fragment,f),C(J4.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(K4.$$.fragment,f),C(b8.$$.fragment,f),C(aE.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(sE.$$.fragment,f),C(E8.$$.fragment,f),C(vE.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(TE.$$.fragment,f),C(L8.$$.fragment,f),C(SE.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(BE.$$.fragment,f),C(R8.$$.fragment,f),C(XE.$$.fragment,f),C(B8.$$.fragment,f),C(P8.$$.fragment,f),C(q8.$$.fragment,f),C(QE.$$.fragment,f),C(N8.$$.fragment,f),C(tC.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(nC.$$.fragment,f),C(V8.$$.fragment,f),C(uC.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(bC.$$.fragment,f),C(H8.$$.fragment,f),C(yC.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(xC.$$.fragment,f),C(Z8.$$.fragment,f),C(NC.$$.fragment,f),C(e7.$$.fragment,f),C(o7.$$.fragment,f),C(t7.$$.fragment,f),C(DC.$$.fragment,f),C(a7.$$.fragment,f),C(OC.$$.fragment,f),C(n7.$$.fragment,f),C(s7.$$.fragment,f),C(i7.$$.fragment,f),C(XC.$$.fragment,f),C(d7.$$.fragment,f),C(WC.$$.fragment,f),C(f7.$$.fragment,f),C(m7.$$.fragment,f),C(h7.$$.fragment,f),C(UC.$$.fragment,f),C(p7.$$.fragment,f),C(YC.$$.fragment,f),XPe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(of),f&&t(Yr),f&&t(Ie),f&&t(Oe),f&&t(tf),w(ba,f),f&&t(Ve),f&&t(Ae),f&&t(To),f&&t(va),f&&t(VRe),f&&t(ii),w(_A),f&&t(XRe),f&&t(wn),f&&t(zRe),w(bA,f),f&&t(QRe),f&&t(Rx),f&&t(WRe),w(sf,f),f&&t(HRe),f&&t(di),w(vA),f&&t(URe),f&&t(Mo),w(FA),w(EA),w(ag),w(CA),f&&t(JRe),f&&t(fi),w(wA),f&&t(YRe),f&&t(Eo),w(AA),w(xA),w(qg),w($A),f&&t(KRe),f&&t(mi),w(kA),f&&t(ZRe),f&&t(Co),w(SA),w(PA),w(dh),w(ch),w(IA),f&&t(eBe),f&&t(gi),w(qA),f&&t(oBe),f&&t(wo),w(NA),w(GA),w(yh),w(Lh),w(OA),f&&t(rBe),f&&t(pi),w(VA),f&&t(tBe),f&&t(Ao),w(XA),w(QA),w(kh),w(WA),w(vu),f&&t(aBe),f&&t(bi),w(HA),f&&t(nBe),f&&t(yo),w(UA),w(YA),w(Tu),w(KA),w(i_),f&&t(sBe),f&&t(Ti),w(ZA),f&&t(lBe),f&&t(Lo),w(e0),w(r0),w(c_),w(t0),w(H_),f&&t(iBe),f&&t(Ci),w(a0),f&&t(dBe),f&&t(xo),w(n0),w(l0),w(J_),w(i0),w(R6),f&&t(cBe),f&&t(yi),w(d0),f&&t(fBe),f&&t($o),w(c0),w(m0),w(P6),w(g0),w(e1),f&&t(mBe),f&&t($i),w(h0),f&&t(gBe),f&&t(ko),w(p0),w(_0),w(r1),w(b0),w(Y1),f&&t(hBe),f&&t(Ri),w(v0),f&&t(pBe),f&&t(So),w(F0),w(M0),w(Z1),w(E0),w(xb),f&&t(uBe),f&&t(Ii),w(C0),f&&t(_Be),f&&t(Ro),w(w0),w(y0),w(kb),w(L0),w(Nb),f&&t(bBe),f&&t(ji),w(x0),f&&t(vBe),f&&t(Bo),w($0),w(S0),w(Db),w(R0),w(T2),f&&t(FBe),f&&t(Oi),w(B0),f&&t(TBe),f&&t(Po),w(P0),w(q0),w(E2),w(N0),w(c5),f&&t(MBe),f&&t(zi),w(j0),f&&t(EBe),f&&t(Io),w(D0),w(O0),w(m5),w(V0),w(p5),f&&t(CBe),f&&t(Hi),w(X0),f&&t(wBe),f&&t(qo),w(z0),w(W0),w(_5),w(H0),w($5),f&&t(ABe),f&&t(Yi),w(U0),f&&t(yBe),f&&t(No),w(J0),w(K0),w(S5),w(Z0),w(P5),f&&t(LBe),f&&t(ed),w(ey),f&&t(xBe),f&&t(jo),w(oy),w(ty),w(q5),w(ay),w(W5),f&&t($Be),f&&t(td),w(ny),f&&t(kBe),f&&t(Do),w(sy),w(iy),w(U5),w(dy),w(ov),f&&t(SBe),f&&t(sd),w(cy),f&&t(RBe),f&&t(Go),w(fy),w(gy),w(tv),w(hy),w(gv),f&&t(BBe),f&&t(dd),w(py),f&&t(PBe),f&&t(Oo),w(uy),w(by),w(pv),w(vy),w(vv),f&&t(IBe),f&&t(md),w(Ty),f&&t(qBe),f&&t(Vo),w(My),w(Cy),w(Tv),w(wy),w(yv),f&&t(NBe),f&&t(pd),w(Ay),f&&t(jBe),f&&t(Xo),w(yy),w(xy),w(xv),w($y),w(Bv),f&&t(DBe),f&&t(vd),w(ky),f&&t(GBe),f&&t(zo),w(Sy),w(By),w(Iv),w(Py),w(jv),f&&t(OBe),f&&t(Md),w(Iy),f&&t(VBe),f&&t(Qo),w(qy),w(jy),w(Gv),w(Dy),w(Xv),f&&t(XBe),f&&t(wd),w(Gy),f&&t(zBe),f&&t(Wo),w(Oy),w(Xy),w(Qv),w(zy),w(Kv),f&&t(QBe),f&&t(Ld),w(Qy),f&&t(WBe),f&&t(Ho),w(Wy),w(Uy),w(eF),w(Jy),w(tF),f&&t(HBe),f&&t(kd),w(Yy),f&&t(UBe),f&&t(Uo),w(Ky),w(eL),w(nF),w(oL),w(UF),f&&t(JBe),f&&t(Bd),w(rL),f&&t(YBe),f&&t(Jo),w(tL),w(nL),w(YF),w(sL),w(TT),f&&t(KBe),f&&t(qd),w(lL),f&&t(ZBe),f&&t(Yo),w(iL),w(cL),w(ET),w(fL),w(IT),f&&t(ePe),f&&t(Dd),w(mL),f&&t(oPe),f&&t(Ko),w(gL),w(pL),w(NT),w(uL),w(GT),f&&t(rPe),f&&t(Vd),w(bL),f&&t(tPe),f&&t(Zo),w(vL),w(TL),w(VT),w(ML),w(c9),f&&t(aPe),f&&t(Qd),w(EL),f&&t(nPe),f&&t(er),w(CL),w(AL),w(m9),w(yL),w(E9),f&&t(sPe),f&&t(Ud),w(LL),f&&t(lPe),f&&t(or),w(xL),w(kL),w(w9),w(SL),w(K9),f&&t(iPe),f&&t(Kd),w(RL),f&&t(dPe),f&&t(rr),w(BL),w(IL),w(eM),w(qL),w(bM),f&&t(cPe),f&&t(oc),w(NL),f&&t(fPe),f&&t(tr),w(jL),w(GL),w(FM),w(OL),w(MM),f&&t(mPe),f&&t(ac),w(VL),f&&t(gPe),f&&t(ar),w(XL),w(QL),w(CM),w(WL),w(zM),f&&t(hPe),f&&t(lc),w(HL),f&&t(pPe),f&&t(nr),w(UL),w(YL),w(WM),w(KL),w(h4),f&&t(uPe),f&&t(cc),w(ZL),f&&t(_Pe),f&&t(sr),w(e8),w(r8),w(u4),w(t8),w(b4),f&&t(bPe),f&&t(gc),w(a8),f&&t(vPe),f&&t(lr),w(n8),w(l8),w(F4),w(i8),w(M4),f&&t(FPe),f&&t(uc),w(d8),f&&t(TPe),f&&t(ir),w(c8),w(m8),w(C4),w(g8),w(J4),f&&t(MPe),f&&t(vc),w(h8),f&&t(EPe),f&&t(dr),w(p8),w(_8),w(K4),w(b8),w(aE),f&&t(CPe),f&&t(Mc),w(v8),f&&t(wPe),f&&t(cr),w(F8),w(M8),w(sE),w(E8),w(vE),f&&t(APe),f&&t(wc),w(C8),f&&t(yPe),f&&t(fr),w(w8),w(y8),w(TE),w(L8),w(SE),f&&t(LPe),f&&t(Lc),w(x8),f&&t(xPe),f&&t(mr),w($8),w(S8),w(BE),w(R8),w(XE),f&&t($Pe),f&&t(kc),w(B8),f&&t(kPe),f&&t(gr),w(P8),w(q8),w(QE),w(N8),w(tC),f&&t(SPe),f&&t(Bc),w(j8),f&&t(RPe),f&&t(hr),w(D8),w(O8),w(nC),w(V8),w(uC),f&&t(BPe),f&&t(qc),w(X8),f&&t(PPe),f&&t(pr),w(z8),w(W8),w(bC),w(H8),w(yC),f&&t(IPe),f&&t(Dc),w(U8),f&&t(qPe),f&&t(ur),w(J8),w(K8),w(xC),w(Z8),w(NC),f&&t(NPe),f&&t(Vc),w(e7),f&&t(jPe),f&&t(_r),w(o7),w(t7),w(DC),w(a7),w(OC),f&&t(DPe),f&&t(Qc),w(n7),f&&t(GPe),f&&t(br),w(s7),w(i7),w(XC),w(d7),w(WC),f&&t(OPe),f&&t(Uc),w(f7),f&&t(VPe),f&&t(vr),w(m7),w(h7),w(UC),w(p7),w(YC)}}}const HCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function UCt(L){return Y4t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class r3t extends W4t{constructor(g){super();H4t(this,g,UCt,WCt,U4t,{})}}export{r3t as default,HCt as metadata};
