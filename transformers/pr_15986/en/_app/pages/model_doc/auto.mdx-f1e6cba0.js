import{S as $Tt,i as ITt,s as jTt,e as a,k as l,w as f,t as o,M as DTt,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as iBr}from"../../chunks/Tip-fffd6df1.js";import{D as M}from"../../chunks/Docstring-4f315ed9.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as X}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function NTt(Ii){let J,Pe,de,he,io,fe,Fe,Vo,ji,If,fa,Di,Ni,QM,jf,Le,co,qi,On,HM,Gn,Xn,UM,Oi,Vn,JM,Gi,Df,qa;return{c(){J=a("p"),Pe=o("If your "),de=a("code"),he=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Fe=o("PretrainedConfig"),Vo=o(`, make sure its
`),ji=a("code"),If=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Ni=o('"new-model"'),QM=o(")."),jf=l(),Le=a("p"),co=o("Likewise, if your "),qi=a("code"),On=o("NewModel"),HM=o(" is a subclass of "),Gn=a("a"),Xn=o("PreTrainedModel"),UM=o(`, make sure its
`),Oi=a("code"),Vn=o("config_class"),JM=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Df=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){J=n(fo,"P",{});var pe=s(J);Pe=r(pe,"If your "),de=n(pe,"CODE",{});var qL=s(de);he=r(qL,"NewModelConfig"),qL.forEach(t),io=r(pe," is a subclass of "),fe=n(pe,"CODE",{});var Xi=s(fe);Fe=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(pe,`, make sure its
`),ji=n(pe,"CODE",{});var OL=s(ji);If=r(OL,"model_type"),OL.forEach(t),fa=r(pe," attribute is set to the same key you use when registering the config (here "),Di=n(pe,"CODE",{});var GL=s(Di);Ni=r(GL,'"new-model"'),GL.forEach(t),QM=r(pe,")."),pe.forEach(t),jf=i(fo),Le=n(fo,"P",{});var zo=s(Le);co=r(zo,"Likewise, if your "),qi=n(zo,"CODE",{});var Oa=s(qi);On=r(Oa,"NewModel"),Oa.forEach(t),HM=r(zo," is a subclass of "),Gn=n(zo,"A",{href:!0});var XL=s(Gn);Xn=r(XL,"PreTrainedModel"),XL.forEach(t),UM=r(zo,`, make sure its
`),Oi=n(zo,"CODE",{});var Nf=s(Oi);Vn=r(Nf,"config_class"),Nf.forEach(t),JM=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var VL=s(Gi);Df=r(VL,"NewModelConfig"),VL.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){c(Gn,"href","/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel")},m(fo,pe){b(fo,J,pe),e(J,Pe),e(J,de),e(de,he),e(J,io),e(J,fe),e(fe,Fe),e(J,Vo),e(J,ji),e(ji,If),e(J,fa),e(J,Di),e(Di,Ni),e(J,QM),b(fo,jf,pe),b(fo,Le,pe),e(Le,co),e(Le,qi),e(qi,On),e(Le,HM),e(Le,Gn),e(Gn,Xn),e(Le,UM),e(Le,Oi),e(Oi,Vn),e(Le,JM),e(Le,Gi),e(Gi,Df),e(Le,qa)},d(fo){fo&&t(J),fo&&t(jf),fo&&t(Le)}}}function qTt(Ii){let J,Pe,de,he,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),he=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Fe=s(J);Pe=r(Fe,"Passing "),de=n(Fe,"CODE",{});var Vo=s(de);he=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Fe," is required when you want to use a private model."),Fe.forEach(t)},m(fe,Fe){b(fe,J,Fe),e(J,Pe),e(J,de),e(de,he),e(J,io)},d(fe){fe&&t(J)}}}function OTt(Ii){let J,Pe,de,he,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),he=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Fe=s(J);Pe=r(Fe,"Passing "),de=n(Fe,"CODE",{});var Vo=s(de);he=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Fe," is required when you want to use a private model."),Fe.forEach(t)},m(fe,Fe){b(fe,J,Fe),e(J,Pe),e(J,de),e(de,he),e(J,io)},d(fe){fe&&t(J)}}}function GTt(Ii){let J,Pe,de,he,io,fe,Fe,Vo,ji,If,fa,Di,Ni,QM,jf,Le,co,qi,On,HM,Gn,Xn,UM,Oi,Vn,JM,Gi,Df,qa,fo,pe,qL,Xi,OL,GL,zo,Oa,XL,Nf,VL,TPe,sxe,Vi,qf,hQ,YM,FPe,pQ,CPe,lxe,zn,MPe,_Q,EPe,yPe,uQ,wPe,APe,ixe,KM,dxe,zL,LPe,cxe,Of,fxe,zi,Gf,bQ,ZM,BPe,vQ,xPe,mxe,Wo,e4,kPe,o4,RPe,WL,SPe,PPe,$Pe,r4,IPe,TQ,jPe,DPe,NPe,mo,t4,qPe,FQ,OPe,GPe,Wi,XPe,CQ,VPe,zPe,MQ,WPe,QPe,HPe,v,Xf,EQ,UPe,JPe,QL,YPe,KPe,ZPe,Vf,yQ,e$e,o$e,HL,r$e,t$e,a$e,zf,wQ,n$e,s$e,UL,l$e,i$e,d$e,Wf,AQ,c$e,f$e,JL,m$e,g$e,h$e,Qf,LQ,p$e,_$e,YL,u$e,b$e,v$e,Hf,BQ,T$e,F$e,KL,C$e,M$e,E$e,Uf,xQ,y$e,w$e,ZL,A$e,L$e,B$e,Jf,kQ,x$e,k$e,e7,R$e,S$e,P$e,Yf,RQ,$$e,I$e,o7,j$e,D$e,N$e,Kf,SQ,q$e,O$e,r7,G$e,X$e,V$e,Zf,PQ,z$e,W$e,t7,Q$e,H$e,U$e,em,$Q,J$e,Y$e,a7,K$e,Z$e,eIe,om,IQ,oIe,rIe,n7,tIe,aIe,nIe,rm,jQ,sIe,lIe,s7,iIe,dIe,cIe,tm,DQ,fIe,mIe,l7,gIe,hIe,pIe,am,NQ,_Ie,uIe,i7,bIe,vIe,TIe,nm,qQ,FIe,CIe,d7,MIe,EIe,yIe,sm,OQ,wIe,AIe,c7,LIe,BIe,xIe,lm,GQ,kIe,RIe,f7,SIe,PIe,$Ie,im,XQ,IIe,jIe,m7,DIe,NIe,qIe,dm,VQ,OIe,GIe,g7,XIe,VIe,zIe,cm,zQ,WIe,QIe,h7,HIe,UIe,JIe,fm,WQ,YIe,KIe,p7,ZIe,eje,oje,mm,QQ,rje,tje,_7,aje,nje,sje,gm,HQ,lje,ije,u7,dje,cje,fje,hm,UQ,mje,gje,b7,hje,pje,_je,pm,JQ,uje,bje,v7,vje,Tje,Fje,_m,YQ,Cje,Mje,T7,Eje,yje,wje,um,KQ,Aje,Lje,F7,Bje,xje,kje,bm,ZQ,Rje,Sje,C7,Pje,$je,Ije,vm,eH,jje,Dje,M7,Nje,qje,Oje,Tm,oH,Gje,Xje,E7,Vje,zje,Wje,Fm,rH,Qje,Hje,y7,Uje,Jje,Yje,Cm,tH,Kje,Zje,w7,eDe,oDe,rDe,Mm,aH,tDe,aDe,A7,nDe,sDe,lDe,Em,nH,iDe,dDe,L7,cDe,fDe,mDe,ym,sH,gDe,hDe,B7,pDe,_De,uDe,wm,lH,bDe,vDe,x7,TDe,FDe,CDe,Am,iH,MDe,EDe,k7,yDe,wDe,ADe,Lm,dH,LDe,BDe,R7,xDe,kDe,RDe,Bm,cH,SDe,PDe,S7,$De,IDe,jDe,xm,fH,DDe,NDe,P7,qDe,ODe,GDe,km,mH,XDe,VDe,$7,zDe,WDe,QDe,Rm,gH,HDe,UDe,I7,JDe,YDe,KDe,Sm,hH,ZDe,eNe,j7,oNe,rNe,tNe,Pm,pH,aNe,nNe,D7,sNe,lNe,iNe,$m,_H,dNe,cNe,N7,fNe,mNe,gNe,Im,uH,hNe,pNe,q7,_Ne,uNe,bNe,jm,bH,vNe,TNe,O7,FNe,CNe,MNe,Dm,vH,ENe,yNe,G7,wNe,ANe,LNe,Nm,TH,BNe,xNe,X7,kNe,RNe,SNe,qm,FH,PNe,$Ne,V7,INe,jNe,DNe,Om,CH,NNe,qNe,z7,ONe,GNe,XNe,Gm,MH,VNe,zNe,W7,WNe,QNe,HNe,Xm,EH,UNe,JNe,Q7,YNe,KNe,ZNe,Vm,yH,eqe,oqe,H7,rqe,tqe,aqe,zm,wH,nqe,sqe,U7,lqe,iqe,dqe,Wm,AH,cqe,fqe,J7,mqe,gqe,hqe,Qm,LH,pqe,_qe,Y7,uqe,bqe,vqe,Hm,BH,Tqe,Fqe,K7,Cqe,Mqe,Eqe,Um,xH,yqe,wqe,Z7,Aqe,Lqe,Bqe,Jm,kH,xqe,kqe,eB,Rqe,Sqe,Pqe,Ym,RH,$qe,Iqe,oB,jqe,Dqe,Nqe,Km,SH,qqe,Oqe,rB,Gqe,Xqe,Vqe,Zm,PH,zqe,Wqe,tB,Qqe,Hqe,Uqe,eg,$H,Jqe,Yqe,aB,Kqe,Zqe,eOe,og,IH,oOe,rOe,nB,tOe,aOe,nOe,rg,jH,sOe,lOe,sB,iOe,dOe,cOe,tg,DH,fOe,mOe,lB,gOe,hOe,pOe,ag,NH,_Oe,uOe,iB,bOe,vOe,TOe,ng,qH,FOe,COe,dB,MOe,EOe,yOe,sg,OH,wOe,AOe,cB,LOe,BOe,xOe,lg,GH,kOe,ROe,fB,SOe,POe,$Oe,ig,XH,IOe,jOe,mB,DOe,NOe,qOe,dg,VH,OOe,GOe,gB,XOe,VOe,zOe,cg,zH,WOe,QOe,hB,HOe,UOe,JOe,fg,WH,YOe,KOe,pB,ZOe,eGe,oGe,mg,QH,rGe,tGe,_B,aGe,nGe,sGe,gg,HH,lGe,iGe,uB,dGe,cGe,fGe,hg,UH,mGe,gGe,bB,hGe,pGe,_Ge,pg,JH,uGe,bGe,vB,vGe,TGe,FGe,_g,YH,CGe,MGe,TB,EGe,yGe,wGe,ug,KH,AGe,LGe,FB,BGe,xGe,kGe,bg,ZH,RGe,SGe,CB,PGe,$Ge,IGe,vg,eU,jGe,DGe,MB,NGe,qGe,OGe,Tg,oU,GGe,XGe,EB,VGe,zGe,WGe,Fg,rU,QGe,HGe,yB,UGe,JGe,YGe,Cg,tU,KGe,ZGe,wB,eXe,oXe,rXe,Mg,aU,tXe,aXe,AB,nXe,sXe,lXe,Eg,nU,iXe,dXe,LB,cXe,fXe,mXe,yg,sU,gXe,hXe,BB,pXe,_Xe,uXe,wg,lU,bXe,vXe,xB,TXe,FXe,CXe,Ag,iU,MXe,EXe,kB,yXe,wXe,AXe,Lg,dU,LXe,BXe,RB,xXe,kXe,RXe,cU,SXe,PXe,a4,$Xe,Bg,n4,IXe,fU,jXe,gxe,Qi,xg,mU,s4,DXe,gU,NXe,hxe,Qo,l4,qXe,i4,OXe,SB,GXe,XXe,VXe,d4,zXe,hU,WXe,QXe,HXe,go,c4,UXe,pU,JXe,YXe,Ga,KXe,_U,ZXe,eVe,uU,oVe,rVe,bU,tVe,aVe,nVe,E,Wn,vU,sVe,lVe,PB,iVe,dVe,$B,cVe,fVe,mVe,Qn,TU,gVe,hVe,IB,pVe,_Ve,jB,uVe,bVe,vVe,Hn,FU,TVe,FVe,DB,CVe,MVe,NB,EVe,yVe,wVe,kg,CU,AVe,LVe,qB,BVe,xVe,kVe,Un,MU,RVe,SVe,OB,PVe,$Ve,GB,IVe,jVe,DVe,Rg,EU,NVe,qVe,XB,OVe,GVe,XVe,Sg,yU,VVe,zVe,VB,WVe,QVe,HVe,Pg,wU,UVe,JVe,zB,YVe,KVe,ZVe,Jn,AU,eze,oze,WB,rze,tze,QB,aze,nze,sze,Yn,LU,lze,ize,HB,dze,cze,UB,fze,mze,gze,Kn,BU,hze,pze,JB,_ze,uze,YB,bze,vze,Tze,$g,xU,Fze,Cze,KB,Mze,Eze,yze,Ig,kU,wze,Aze,ZB,Lze,Bze,xze,Zn,RU,kze,Rze,ex,Sze,Pze,ox,$ze,Ize,jze,jg,SU,Dze,Nze,rx,qze,Oze,Gze,es,PU,Xze,Vze,tx,zze,Wze,ax,Qze,Hze,Uze,os,$U,Jze,Yze,nx,Kze,Zze,sx,eWe,oWe,rWe,rs,IU,tWe,aWe,lx,nWe,sWe,jU,lWe,iWe,dWe,Dg,DU,cWe,fWe,ix,mWe,gWe,hWe,ts,NU,pWe,_We,dx,uWe,bWe,cx,vWe,TWe,FWe,Ng,qU,CWe,MWe,fx,EWe,yWe,wWe,as,OU,AWe,LWe,mx,BWe,xWe,gx,kWe,RWe,SWe,ns,GU,PWe,$We,hx,IWe,jWe,px,DWe,NWe,qWe,ss,XU,OWe,GWe,_x,XWe,VWe,ux,zWe,WWe,QWe,qg,VU,HWe,UWe,bx,JWe,YWe,KWe,ls,zU,ZWe,eQe,vx,oQe,rQe,Tx,tQe,aQe,nQe,Og,WU,sQe,lQe,Fx,iQe,dQe,cQe,is,QU,fQe,mQe,Cx,gQe,hQe,Mx,pQe,_Qe,uQe,ds,HU,bQe,vQe,Ex,TQe,FQe,yx,CQe,MQe,EQe,cs,UU,yQe,wQe,wx,AQe,LQe,Ax,BQe,xQe,kQe,fs,JU,RQe,SQe,Lx,PQe,$Qe,Bx,IQe,jQe,DQe,Gg,YU,NQe,qQe,xx,OQe,GQe,XQe,ms,KU,VQe,zQe,kx,WQe,QQe,Rx,HQe,UQe,JQe,gs,ZU,YQe,KQe,Sx,ZQe,eHe,Px,oHe,rHe,tHe,hs,eJ,aHe,nHe,$x,sHe,lHe,Ix,iHe,dHe,cHe,ps,oJ,fHe,mHe,jx,gHe,hHe,Dx,pHe,_He,uHe,_s,rJ,bHe,vHe,Nx,THe,FHe,qx,CHe,MHe,EHe,us,tJ,yHe,wHe,Ox,AHe,LHe,Gx,BHe,xHe,kHe,Xg,aJ,RHe,SHe,Xx,PHe,$He,IHe,bs,nJ,jHe,DHe,Vx,NHe,qHe,zx,OHe,GHe,XHe,Vg,sJ,VHe,zHe,Wx,WHe,QHe,HHe,zg,lJ,UHe,JHe,Qx,YHe,KHe,ZHe,vs,iJ,eUe,oUe,Hx,rUe,tUe,Ux,aUe,nUe,sUe,Ts,dJ,lUe,iUe,Jx,dUe,cUe,Yx,fUe,mUe,gUe,Wg,cJ,hUe,pUe,Kx,_Ue,uUe,bUe,Fs,fJ,vUe,TUe,Zx,FUe,CUe,ek,MUe,EUe,yUe,Cs,mJ,wUe,AUe,ok,LUe,BUe,rk,xUe,kUe,RUe,Ms,gJ,SUe,PUe,tk,$Ue,IUe,ak,jUe,DUe,NUe,Es,hJ,qUe,OUe,nk,GUe,XUe,sk,VUe,zUe,WUe,ys,pJ,QUe,HUe,lk,UUe,JUe,ik,YUe,KUe,ZUe,Qg,_J,eJe,oJe,dk,rJe,tJe,aJe,Hg,uJ,nJe,sJe,ck,lJe,iJe,dJe,Ug,bJ,cJe,fJe,fk,mJe,gJe,hJe,Jg,vJ,pJe,_Je,mk,uJe,bJe,vJe,ws,TJ,TJe,FJe,gk,CJe,MJe,hk,EJe,yJe,wJe,Yg,FJ,AJe,LJe,pk,BJe,xJe,kJe,As,CJ,RJe,SJe,_k,PJe,$Je,uk,IJe,jJe,DJe,Ls,MJ,NJe,qJe,bk,OJe,GJe,vk,XJe,VJe,zJe,Bs,EJ,WJe,QJe,Tk,HJe,UJe,Fk,JJe,YJe,KJe,xs,yJ,ZJe,eYe,Ck,oYe,rYe,Mk,tYe,aYe,nYe,ks,wJ,sYe,lYe,Ek,iYe,dYe,yk,cYe,fYe,mYe,Rs,AJ,gYe,hYe,wk,pYe,_Ye,Ak,uYe,bYe,vYe,Kg,LJ,TYe,FYe,Lk,CYe,MYe,EYe,Zg,BJ,yYe,wYe,Bk,AYe,LYe,BYe,Ss,xJ,xYe,kYe,xk,RYe,SYe,kk,PYe,$Ye,IYe,Ps,kJ,jYe,DYe,Rk,NYe,qYe,Sk,OYe,GYe,XYe,$s,RJ,VYe,zYe,Pk,WYe,QYe,$k,HYe,UYe,JYe,eh,SJ,YYe,KYe,Ik,ZYe,eKe,oKe,oh,PJ,rKe,tKe,jk,aKe,nKe,sKe,rh,$J,lKe,iKe,Dk,dKe,cKe,fKe,th,IJ,mKe,gKe,Nk,hKe,pKe,_Ke,Is,jJ,uKe,bKe,qk,vKe,TKe,Ok,FKe,CKe,MKe,ah,DJ,EKe,yKe,Gk,wKe,AKe,LKe,nh,NJ,BKe,xKe,Xk,kKe,RKe,SKe,js,qJ,PKe,$Ke,Vk,IKe,jKe,zk,DKe,NKe,qKe,Ds,OJ,OKe,GKe,Wk,XKe,VKe,Qk,zKe,WKe,QKe,GJ,HKe,UKe,f4,JKe,sh,m4,YKe,XJ,KKe,pxe,Hi,lh,VJ,g4,ZKe,zJ,eZe,_xe,Ho,h4,oZe,p4,rZe,Hk,tZe,aZe,nZe,_4,sZe,WJ,lZe,iZe,dZe,$e,u4,cZe,QJ,fZe,mZe,Xa,gZe,HJ,hZe,pZe,UJ,_Ze,uZe,JJ,bZe,vZe,TZe,ae,ih,YJ,FZe,CZe,Uk,MZe,EZe,yZe,dh,KJ,wZe,AZe,Jk,LZe,BZe,xZe,ch,ZJ,kZe,RZe,Yk,SZe,PZe,$Ze,fh,eY,IZe,jZe,Kk,DZe,NZe,qZe,mh,oY,OZe,GZe,Zk,XZe,VZe,zZe,gh,rY,WZe,QZe,eR,HZe,UZe,JZe,hh,tY,YZe,KZe,oR,ZZe,eeo,oeo,ph,aY,reo,teo,rR,aeo,neo,seo,_h,nY,leo,ieo,tR,deo,ceo,feo,uh,sY,meo,geo,aR,heo,peo,_eo,bh,lY,ueo,beo,nR,veo,Teo,Feo,vh,iY,Ceo,Meo,sR,Eeo,yeo,weo,Th,dY,Aeo,Leo,lR,Beo,xeo,keo,Fh,cY,Reo,Seo,iR,Peo,$eo,Ieo,Ch,fY,jeo,Deo,dR,Neo,qeo,Oeo,Mh,mY,Geo,Xeo,cR,Veo,zeo,Weo,Eh,Qeo,gY,Heo,Ueo,b4,Jeo,yh,v4,Yeo,hY,Keo,uxe,Ui,wh,pY,T4,Zeo,_Y,eoo,bxe,Uo,F4,ooo,C4,roo,fR,too,aoo,noo,M4,soo,uY,loo,ioo,doo,Ie,E4,coo,bY,foo,moo,Ji,goo,vY,hoo,poo,TY,_oo,uoo,boo,Be,Ah,FY,voo,Too,mR,Foo,Coo,Moo,Lh,CY,Eoo,yoo,gR,woo,Aoo,Loo,Bh,MY,Boo,xoo,hR,koo,Roo,Soo,xh,EY,Poo,$oo,pR,Ioo,joo,Doo,kh,yY,Noo,qoo,_R,Ooo,Goo,Xoo,Rh,wY,Voo,zoo,uR,Woo,Qoo,Hoo,Sh,AY,Uoo,Joo,bR,Yoo,Koo,Zoo,Ph,LY,ero,oro,vR,rro,tro,aro,$h,nro,BY,sro,lro,y4,iro,Ih,w4,dro,xY,cro,vxe,Yi,jh,kY,A4,fro,RY,mro,Txe,Jo,L4,gro,Ki,hro,SY,pro,_ro,PY,uro,bro,vro,B4,Tro,$Y,Fro,Cro,Mro,Vr,x4,Ero,IY,yro,wro,Zi,Aro,jY,Lro,Bro,DY,xro,kro,Rro,NY,Sro,Pro,k4,$ro,je,R4,Iro,qY,jro,Dro,Va,Nro,OY,qro,Oro,GY,Gro,Xro,XY,Vro,zro,Wro,F,Dh,VY,Qro,Hro,TR,Uro,Jro,Yro,Nh,zY,Kro,Zro,FR,eto,oto,rto,qh,WY,tto,ato,CR,nto,sto,lto,Oh,QY,ito,dto,MR,cto,fto,mto,Gh,HY,gto,hto,ER,pto,_to,uto,Xh,UY,bto,vto,yR,Tto,Fto,Cto,Vh,JY,Mto,Eto,wR,yto,wto,Ato,zh,YY,Lto,Bto,AR,xto,kto,Rto,Wh,KY,Sto,Pto,LR,$to,Ito,jto,Qh,ZY,Dto,Nto,BR,qto,Oto,Gto,Hh,eK,Xto,Vto,xR,zto,Wto,Qto,Uh,oK,Hto,Uto,kR,Jto,Yto,Kto,Jh,rK,Zto,eao,RR,oao,rao,tao,Yh,tK,aao,nao,SR,sao,lao,iao,Kh,aK,dao,cao,PR,fao,mao,gao,Zh,nK,hao,pao,$R,_ao,uao,bao,ep,sK,vao,Tao,IR,Fao,Cao,Mao,op,lK,Eao,yao,jR,wao,Aao,Lao,rp,iK,Bao,xao,DR,kao,Rao,Sao,tp,dK,Pao,$ao,NR,Iao,jao,Dao,ap,cK,Nao,qao,qR,Oao,Gao,Xao,np,fK,Vao,zao,OR,Wao,Qao,Hao,sp,mK,Uao,Jao,GR,Yao,Kao,Zao,lp,gK,eno,ono,XR,rno,tno,ano,ip,hK,nno,sno,VR,lno,ino,dno,dp,pK,cno,fno,zR,mno,gno,hno,cp,_K,pno,_no,WR,uno,bno,vno,Ns,uK,Tno,Fno,QR,Cno,Mno,HR,Eno,yno,wno,fp,bK,Ano,Lno,UR,Bno,xno,kno,mp,vK,Rno,Sno,JR,Pno,$no,Ino,gp,TK,jno,Dno,YR,Nno,qno,Ono,hp,FK,Gno,Xno,KR,Vno,zno,Wno,pp,CK,Qno,Hno,ZR,Uno,Jno,Yno,_p,MK,Kno,Zno,eS,eso,oso,rso,up,EK,tso,aso,oS,nso,sso,lso,bp,yK,iso,dso,rS,cso,fso,mso,vp,wK,gso,hso,tS,pso,_so,uso,Tp,AK,bso,vso,aS,Tso,Fso,Cso,Fp,LK,Mso,Eso,nS,yso,wso,Aso,Cp,BK,Lso,Bso,sS,xso,kso,Rso,Mp,xK,Sso,Pso,lS,$so,Iso,jso,Ep,kK,Dso,Nso,iS,qso,Oso,Gso,yp,RK,Xso,Vso,dS,zso,Wso,Qso,wp,SK,Hso,Uso,cS,Jso,Yso,Kso,Ap,PK,Zso,elo,fS,olo,rlo,tlo,Lp,$K,alo,nlo,mS,slo,llo,ilo,Bp,IK,dlo,clo,gS,flo,mlo,glo,xp,jK,hlo,plo,hS,_lo,ulo,blo,kp,DK,vlo,Tlo,pS,Flo,Clo,Mlo,Rp,NK,Elo,ylo,_S,wlo,Alo,Llo,Sp,qK,Blo,xlo,uS,klo,Rlo,Slo,Pp,OK,Plo,$lo,bS,Ilo,jlo,Dlo,$p,GK,Nlo,qlo,vS,Olo,Glo,Xlo,Ip,XK,Vlo,zlo,TS,Wlo,Qlo,Hlo,jp,VK,Ulo,Jlo,FS,Ylo,Klo,Zlo,Dp,zK,eio,oio,CS,rio,tio,aio,Np,WK,nio,sio,MS,lio,iio,dio,qp,QK,cio,fio,ES,mio,gio,hio,Op,HK,pio,_io,yS,uio,bio,vio,Gp,UK,Tio,Fio,wS,Cio,Mio,Eio,Xp,JK,yio,wio,AS,Aio,Lio,Bio,Vp,YK,xio,kio,LS,Rio,Sio,Pio,zp,KK,$io,Iio,BS,jio,Dio,Nio,Wp,ZK,qio,Oio,xS,Gio,Xio,Vio,Qp,eZ,zio,Wio,kS,Qio,Hio,Uio,Hp,oZ,Jio,Yio,RS,Kio,Zio,edo,Up,rZ,odo,rdo,SS,tdo,ado,ndo,Jp,tZ,sdo,ldo,PS,ido,ddo,cdo,Yp,aZ,fdo,mdo,$S,gdo,hdo,pdo,Kp,nZ,_do,udo,IS,bdo,vdo,Tdo,Zp,sZ,Fdo,Cdo,jS,Mdo,Edo,ydo,e_,lZ,wdo,Ado,DS,Ldo,Bdo,xdo,o_,iZ,kdo,Rdo,NS,Sdo,Pdo,$do,r_,dZ,Ido,jdo,qS,Ddo,Ndo,qdo,t_,cZ,Odo,Gdo,OS,Xdo,Vdo,zdo,a_,fZ,Wdo,Qdo,GS,Hdo,Udo,Jdo,n_,mZ,Ydo,Kdo,XS,Zdo,eco,oco,s_,gZ,rco,tco,VS,aco,nco,sco,l_,hZ,lco,ico,zS,dco,cco,fco,i_,pZ,mco,gco,WS,hco,pco,_co,d_,_Z,uco,bco,QS,vco,Tco,Fco,c_,uZ,Cco,Mco,HS,Eco,yco,wco,f_,bZ,Aco,Lco,US,Bco,xco,kco,m_,vZ,Rco,Sco,JS,Pco,$co,Ico,g_,TZ,jco,Dco,YS,Nco,qco,Oco,h_,FZ,Gco,Xco,KS,Vco,zco,Wco,p_,CZ,Qco,Hco,ZS,Uco,Jco,Yco,__,Kco,MZ,Zco,efo,EZ,ofo,rfo,yZ,tfo,afo,S4,Fxe,ed,u_,wZ,P4,nfo,AZ,sfo,Cxe,Yo,$4,lfo,od,ifo,LZ,dfo,cfo,BZ,ffo,mfo,gfo,I4,hfo,xZ,pfo,_fo,ufo,zr,j4,bfo,kZ,vfo,Tfo,rd,Ffo,RZ,Cfo,Mfo,SZ,Efo,yfo,wfo,PZ,Afo,Lfo,D4,Bfo,De,N4,xfo,$Z,kfo,Rfo,za,Sfo,IZ,Pfo,$fo,jZ,Ifo,jfo,DZ,Dfo,Nfo,qfo,k,b_,NZ,Ofo,Gfo,eP,Xfo,Vfo,zfo,v_,qZ,Wfo,Qfo,oP,Hfo,Ufo,Jfo,T_,OZ,Yfo,Kfo,rP,Zfo,emo,omo,F_,GZ,rmo,tmo,tP,amo,nmo,smo,C_,XZ,lmo,imo,aP,dmo,cmo,fmo,M_,VZ,mmo,gmo,nP,hmo,pmo,_mo,E_,zZ,umo,bmo,sP,vmo,Tmo,Fmo,y_,WZ,Cmo,Mmo,lP,Emo,ymo,wmo,w_,QZ,Amo,Lmo,iP,Bmo,xmo,kmo,A_,HZ,Rmo,Smo,dP,Pmo,$mo,Imo,L_,UZ,jmo,Dmo,cP,Nmo,qmo,Omo,B_,JZ,Gmo,Xmo,fP,Vmo,zmo,Wmo,x_,YZ,Qmo,Hmo,mP,Umo,Jmo,Ymo,k_,KZ,Kmo,Zmo,gP,ego,ogo,rgo,R_,ZZ,tgo,ago,hP,ngo,sgo,lgo,S_,eee,igo,dgo,pP,cgo,fgo,mgo,P_,oee,ggo,hgo,_P,pgo,_go,ugo,$_,ree,bgo,vgo,uP,Tgo,Fgo,Cgo,I_,tee,Mgo,Ego,bP,ygo,wgo,Ago,j_,aee,Lgo,Bgo,vP,xgo,kgo,Rgo,D_,nee,Sgo,Pgo,TP,$go,Igo,jgo,N_,see,Dgo,Ngo,FP,qgo,Ogo,Ggo,q_,lee,Xgo,Vgo,CP,zgo,Wgo,Qgo,O_,iee,Hgo,Ugo,MP,Jgo,Ygo,Kgo,G_,dee,Zgo,eho,EP,oho,rho,tho,X_,cee,aho,nho,yP,sho,lho,iho,V_,fee,dho,cho,wP,fho,mho,gho,z_,mee,hho,pho,AP,_ho,uho,bho,W_,gee,vho,Tho,LP,Fho,Cho,Mho,Q_,hee,Eho,yho,BP,who,Aho,Lho,H_,pee,Bho,xho,xP,kho,Rho,Sho,U_,_ee,Pho,$ho,kP,Iho,jho,Dho,J_,uee,Nho,qho,RP,Oho,Gho,Xho,Y_,bee,Vho,zho,SP,Who,Qho,Hho,K_,vee,Uho,Jho,PP,Yho,Kho,Zho,Z_,Tee,epo,opo,$P,rpo,tpo,apo,eu,Fee,npo,spo,IP,lpo,ipo,dpo,ou,Cee,cpo,fpo,jP,mpo,gpo,hpo,ru,Mee,ppo,_po,DP,upo,bpo,vpo,tu,Tpo,Eee,Fpo,Cpo,yee,Mpo,Epo,wee,ypo,wpo,q4,Mxe,td,au,Aee,O4,Apo,Lee,Lpo,Exe,Ko,G4,Bpo,ad,xpo,Bee,kpo,Rpo,xee,Spo,Ppo,$po,X4,Ipo,kee,jpo,Dpo,Npo,Wr,V4,qpo,Ree,Opo,Gpo,nd,Xpo,See,Vpo,zpo,Pee,Wpo,Qpo,Hpo,$ee,Upo,Jpo,z4,Ypo,Ne,W4,Kpo,Iee,Zpo,e_o,Wa,o_o,jee,r_o,t_o,Dee,a_o,n_o,Nee,s_o,l_o,i_o,$,nu,qee,d_o,c_o,NP,f_o,m_o,g_o,su,Oee,h_o,p_o,qP,__o,u_o,b_o,lu,Gee,v_o,T_o,OP,F_o,C_o,M_o,iu,Xee,E_o,y_o,GP,w_o,A_o,L_o,du,Vee,B_o,x_o,XP,k_o,R_o,S_o,cu,zee,P_o,$_o,VP,I_o,j_o,D_o,fu,Wee,N_o,q_o,zP,O_o,G_o,X_o,mu,Qee,V_o,z_o,WP,W_o,Q_o,H_o,gu,Hee,U_o,J_o,QP,Y_o,K_o,Z_o,hu,Uee,euo,ouo,HP,ruo,tuo,auo,pu,Jee,nuo,suo,UP,luo,iuo,duo,_u,Yee,cuo,fuo,JP,muo,guo,huo,uu,Kee,puo,_uo,YP,uuo,buo,vuo,bu,Zee,Tuo,Fuo,KP,Cuo,Muo,Euo,vu,eoe,yuo,wuo,ZP,Auo,Luo,Buo,Tu,ooe,xuo,kuo,e$,Ruo,Suo,Puo,Fu,roe,$uo,Iuo,o$,juo,Duo,Nuo,Cu,toe,quo,Ouo,r$,Guo,Xuo,Vuo,Mu,aoe,zuo,Wuo,t$,Quo,Huo,Uuo,Eu,noe,Juo,Yuo,a$,Kuo,Zuo,e1o,yu,soe,o1o,r1o,n$,t1o,a1o,n1o,wu,loe,s1o,l1o,s$,i1o,d1o,c1o,Au,ioe,f1o,m1o,l$,g1o,h1o,p1o,Lu,doe,_1o,u1o,i$,b1o,v1o,T1o,Bu,coe,F1o,C1o,d$,M1o,E1o,y1o,xu,foe,w1o,A1o,c$,L1o,B1o,x1o,ku,moe,k1o,R1o,f$,S1o,P1o,$1o,Ru,goe,I1o,j1o,m$,D1o,N1o,q1o,Su,hoe,O1o,G1o,g$,X1o,V1o,z1o,Pu,poe,W1o,Q1o,h$,H1o,U1o,J1o,$u,_oe,Y1o,K1o,p$,Z1o,ebo,obo,Iu,uoe,rbo,tbo,_$,abo,nbo,sbo,ju,boe,lbo,ibo,u$,dbo,cbo,fbo,Du,voe,mbo,gbo,b$,hbo,pbo,_bo,Nu,Toe,ubo,bbo,v$,vbo,Tbo,Fbo,qu,Cbo,Foe,Mbo,Ebo,Coe,ybo,wbo,Moe,Abo,Lbo,Q4,yxe,sd,Ou,Eoe,H4,Bbo,yoe,xbo,wxe,Zo,U4,kbo,ld,Rbo,woe,Sbo,Pbo,Aoe,$bo,Ibo,jbo,J4,Dbo,Loe,Nbo,qbo,Obo,Qr,Y4,Gbo,Boe,Xbo,Vbo,id,zbo,xoe,Wbo,Qbo,koe,Hbo,Ubo,Jbo,Roe,Ybo,Kbo,K4,Zbo,qe,Z4,e5o,Soe,o5o,r5o,Qa,t5o,Poe,a5o,n5o,$oe,s5o,l5o,Ioe,i5o,d5o,c5o,I,Gu,joe,f5o,m5o,T$,g5o,h5o,p5o,Xu,Doe,_5o,u5o,F$,b5o,v5o,T5o,Vu,Noe,F5o,C5o,C$,M5o,E5o,y5o,zu,qoe,w5o,A5o,M$,L5o,B5o,x5o,Wu,Ooe,k5o,R5o,E$,S5o,P5o,$5o,Qu,Goe,I5o,j5o,y$,D5o,N5o,q5o,Hu,Xoe,O5o,G5o,w$,X5o,V5o,z5o,Uu,Voe,W5o,Q5o,A$,H5o,U5o,J5o,Ju,zoe,Y5o,K5o,L$,Z5o,e2o,o2o,Yu,Woe,r2o,t2o,B$,a2o,n2o,s2o,Ku,Qoe,l2o,i2o,x$,d2o,c2o,f2o,Zu,Hoe,m2o,g2o,k$,h2o,p2o,_2o,e1,Uoe,u2o,b2o,R$,v2o,T2o,F2o,o1,Joe,C2o,M2o,S$,E2o,y2o,w2o,r1,Yoe,A2o,L2o,P$,B2o,x2o,k2o,t1,Koe,R2o,S2o,$$,P2o,$2o,I2o,a1,Zoe,j2o,D2o,I$,N2o,q2o,O2o,n1,ere,G2o,X2o,j$,V2o,z2o,W2o,s1,ore,Q2o,H2o,D$,U2o,J2o,Y2o,l1,rre,K2o,Z2o,N$,evo,ovo,rvo,i1,tre,tvo,avo,q$,nvo,svo,lvo,d1,are,ivo,dvo,O$,cvo,fvo,mvo,c1,nre,gvo,hvo,G$,pvo,_vo,uvo,f1,sre,bvo,vvo,X$,Tvo,Fvo,Cvo,m1,lre,Mvo,Evo,V$,yvo,wvo,Avo,g1,ire,Lvo,Bvo,z$,xvo,kvo,Rvo,h1,dre,Svo,Pvo,W$,$vo,Ivo,jvo,p1,cre,Dvo,Nvo,Q$,qvo,Ovo,Gvo,_1,fre,Xvo,Vvo,H$,zvo,Wvo,Qvo,u1,mre,Hvo,Uvo,U$,Jvo,Yvo,Kvo,b1,gre,Zvo,e6o,hre,o6o,r6o,t6o,v1,pre,a6o,n6o,J$,s6o,l6o,i6o,T1,_re,d6o,c6o,Y$,f6o,m6o,g6o,F1,ure,h6o,p6o,K$,_6o,u6o,b6o,C1,bre,v6o,T6o,Z$,F6o,C6o,M6o,M1,E6o,vre,y6o,w6o,Tre,A6o,L6o,Fre,B6o,x6o,eE,Axe,dd,E1,Cre,oE,k6o,Mre,R6o,Lxe,er,rE,S6o,cd,P6o,Ere,$6o,I6o,yre,j6o,D6o,N6o,tE,q6o,wre,O6o,G6o,X6o,Hr,aE,V6o,Are,z6o,W6o,fd,Q6o,Lre,H6o,U6o,Bre,J6o,Y6o,K6o,xre,Z6o,eTo,nE,oTo,Oe,sE,rTo,kre,tTo,aTo,Ha,nTo,Rre,sTo,lTo,Sre,iTo,dTo,Pre,cTo,fTo,mTo,ne,y1,$re,gTo,hTo,eI,pTo,_To,uTo,w1,Ire,bTo,vTo,oI,TTo,FTo,CTo,A1,jre,MTo,ETo,rI,yTo,wTo,ATo,L1,Dre,LTo,BTo,tI,xTo,kTo,RTo,B1,Nre,STo,PTo,aI,$To,ITo,jTo,x1,qre,DTo,NTo,nI,qTo,OTo,GTo,k1,Ore,XTo,VTo,sI,zTo,WTo,QTo,R1,Gre,HTo,UTo,lI,JTo,YTo,KTo,S1,Xre,ZTo,e8o,iI,o8o,r8o,t8o,P1,Vre,a8o,n8o,dI,s8o,l8o,i8o,$1,zre,d8o,c8o,cI,f8o,m8o,g8o,I1,Wre,h8o,p8o,fI,_8o,u8o,b8o,j1,Qre,v8o,T8o,mI,F8o,C8o,M8o,D1,Hre,E8o,y8o,gI,w8o,A8o,L8o,N1,Ure,B8o,x8o,hI,k8o,R8o,S8o,q1,Jre,P8o,$8o,pI,I8o,j8o,D8o,O1,N8o,Yre,q8o,O8o,Kre,G8o,X8o,Zre,V8o,z8o,lE,Bxe,md,G1,ete,iE,W8o,ote,Q8o,xxe,or,dE,H8o,gd,U8o,rte,J8o,Y8o,tte,K8o,Z8o,eFo,cE,oFo,ate,rFo,tFo,aFo,Ur,fE,nFo,nte,sFo,lFo,hd,iFo,ste,dFo,cFo,lte,fFo,mFo,gFo,ite,hFo,pFo,mE,_Fo,Ge,gE,uFo,dte,bFo,vFo,Ua,TFo,cte,FFo,CFo,fte,MFo,EFo,mte,yFo,wFo,AFo,A,X1,gte,LFo,BFo,_I,xFo,kFo,RFo,V1,hte,SFo,PFo,uI,$Fo,IFo,jFo,z1,pte,DFo,NFo,bI,qFo,OFo,GFo,W1,_te,XFo,VFo,vI,zFo,WFo,QFo,Q1,ute,HFo,UFo,TI,JFo,YFo,KFo,H1,bte,ZFo,e9o,FI,o9o,r9o,t9o,U1,vte,a9o,n9o,CI,s9o,l9o,i9o,J1,Tte,d9o,c9o,MI,f9o,m9o,g9o,Y1,Fte,h9o,p9o,EI,_9o,u9o,b9o,K1,Cte,v9o,T9o,yI,F9o,C9o,M9o,Z1,Mte,E9o,y9o,wI,w9o,A9o,L9o,eb,Ete,B9o,x9o,AI,k9o,R9o,S9o,ob,yte,P9o,$9o,LI,I9o,j9o,D9o,rb,wte,N9o,q9o,BI,O9o,G9o,X9o,tb,Ate,V9o,z9o,xI,W9o,Q9o,H9o,ab,Lte,U9o,J9o,kI,Y9o,K9o,Z9o,nb,Bte,eCo,oCo,RI,rCo,tCo,aCo,sb,xte,nCo,sCo,SI,lCo,iCo,dCo,lb,kte,cCo,fCo,PI,mCo,gCo,hCo,ib,Rte,pCo,_Co,$I,uCo,bCo,vCo,db,Ste,TCo,FCo,II,CCo,MCo,ECo,cb,Pte,yCo,wCo,jI,ACo,LCo,BCo,fb,$te,xCo,kCo,DI,RCo,SCo,PCo,mb,Ite,$Co,ICo,NI,jCo,DCo,NCo,gb,jte,qCo,OCo,qI,GCo,XCo,VCo,hb,Dte,zCo,WCo,OI,QCo,HCo,UCo,pb,Nte,JCo,YCo,GI,KCo,ZCo,eMo,_b,qte,oMo,rMo,XI,tMo,aMo,nMo,ub,Ote,sMo,lMo,VI,iMo,dMo,cMo,bb,Gte,fMo,mMo,zI,gMo,hMo,pMo,vb,Xte,_Mo,uMo,WI,bMo,vMo,TMo,Tb,Vte,FMo,CMo,QI,MMo,EMo,yMo,Fb,zte,wMo,AMo,HI,LMo,BMo,xMo,Cb,Wte,kMo,RMo,UI,SMo,PMo,$Mo,Mb,Qte,IMo,jMo,JI,DMo,NMo,qMo,Eb,Hte,OMo,GMo,YI,XMo,VMo,zMo,yb,Ute,WMo,QMo,KI,HMo,UMo,JMo,wb,Jte,YMo,KMo,ZI,ZMo,e4o,o4o,Ab,Yte,r4o,t4o,ej,a4o,n4o,s4o,Lb,Kte,l4o,i4o,oj,d4o,c4o,f4o,Bb,Zte,m4o,g4o,rj,h4o,p4o,_4o,xb,eae,u4o,b4o,tj,v4o,T4o,F4o,kb,oae,C4o,M4o,aj,E4o,y4o,w4o,Rb,rae,A4o,L4o,nj,B4o,x4o,k4o,Sb,tae,R4o,S4o,sj,P4o,$4o,I4o,Pb,aae,j4o,D4o,lj,N4o,q4o,O4o,$b,G4o,nae,X4o,V4o,sae,z4o,W4o,lae,Q4o,H4o,hE,kxe,pd,Ib,iae,pE,U4o,dae,J4o,Rxe,rr,_E,Y4o,_d,K4o,cae,Z4o,eEo,fae,oEo,rEo,tEo,uE,aEo,mae,nEo,sEo,lEo,Jr,bE,iEo,gae,dEo,cEo,ud,fEo,hae,mEo,gEo,pae,hEo,pEo,_Eo,_ae,uEo,bEo,vE,vEo,Xe,TE,TEo,uae,FEo,CEo,Ja,MEo,bae,EEo,yEo,vae,wEo,AEo,Tae,LEo,BEo,xEo,O,jb,Fae,kEo,REo,ij,SEo,PEo,$Eo,Db,Cae,IEo,jEo,dj,DEo,NEo,qEo,Nb,Mae,OEo,GEo,cj,XEo,VEo,zEo,qb,Eae,WEo,QEo,fj,HEo,UEo,JEo,Ob,yae,YEo,KEo,mj,ZEo,e3o,o3o,Gb,wae,r3o,t3o,gj,a3o,n3o,s3o,Xb,Aae,l3o,i3o,hj,d3o,c3o,f3o,Vb,Lae,m3o,g3o,pj,h3o,p3o,_3o,zb,Bae,u3o,b3o,_j,v3o,T3o,F3o,Wb,xae,C3o,M3o,uj,E3o,y3o,w3o,Qb,kae,A3o,L3o,bj,B3o,x3o,k3o,Hb,Rae,R3o,S3o,vj,P3o,$3o,I3o,Ub,Sae,j3o,D3o,Tj,N3o,q3o,O3o,Jb,Pae,G3o,X3o,Fj,V3o,z3o,W3o,Yb,$ae,Q3o,H3o,Cj,U3o,J3o,Y3o,Kb,Iae,K3o,Z3o,Mj,eyo,oyo,ryo,Zb,jae,tyo,ayo,Ej,nyo,syo,lyo,e5,Dae,iyo,dyo,yj,cyo,fyo,myo,o5,Nae,gyo,hyo,wj,pyo,_yo,uyo,r5,qae,byo,vyo,Aj,Tyo,Fyo,Cyo,t5,Oae,Myo,Eyo,Lj,yyo,wyo,Ayo,a5,Gae,Lyo,Byo,Bj,xyo,kyo,Ryo,n5,Xae,Syo,Pyo,xj,$yo,Iyo,jyo,s5,Vae,Dyo,Nyo,kj,qyo,Oyo,Gyo,l5,zae,Xyo,Vyo,Rj,zyo,Wyo,Qyo,i5,Wae,Hyo,Uyo,Sj,Jyo,Yyo,Kyo,d5,Qae,Zyo,ewo,Pj,owo,rwo,two,c5,Hae,awo,nwo,$j,swo,lwo,iwo,f5,dwo,Uae,cwo,fwo,Jae,mwo,gwo,Yae,hwo,pwo,FE,Sxe,bd,m5,Kae,CE,_wo,Zae,uwo,Pxe,tr,ME,bwo,vd,vwo,ene,Two,Fwo,one,Cwo,Mwo,Ewo,EE,ywo,rne,wwo,Awo,Lwo,Yr,yE,Bwo,tne,xwo,kwo,Td,Rwo,ane,Swo,Pwo,nne,$wo,Iwo,jwo,sne,Dwo,Nwo,wE,qwo,Ve,AE,Owo,lne,Gwo,Xwo,Ya,Vwo,ine,zwo,Wwo,dne,Qwo,Hwo,cne,Uwo,Jwo,Ywo,da,g5,fne,Kwo,Zwo,Ij,eAo,oAo,rAo,h5,mne,tAo,aAo,jj,nAo,sAo,lAo,p5,gne,iAo,dAo,Dj,cAo,fAo,mAo,_5,hne,gAo,hAo,Nj,pAo,_Ao,uAo,u5,pne,bAo,vAo,qj,TAo,FAo,CAo,b5,MAo,_ne,EAo,yAo,une,wAo,AAo,bne,LAo,BAo,LE,$xe,Fd,v5,vne,BE,xAo,Tne,kAo,Ixe,ar,xE,RAo,Cd,SAo,Fne,PAo,$Ao,Cne,IAo,jAo,DAo,kE,NAo,Mne,qAo,OAo,GAo,Kr,RE,XAo,Ene,VAo,zAo,Md,WAo,yne,QAo,HAo,wne,UAo,JAo,YAo,Ane,KAo,ZAo,SE,e0o,ze,PE,o0o,Lne,r0o,t0o,Ka,a0o,Bne,n0o,s0o,xne,l0o,i0o,kne,d0o,c0o,f0o,N,T5,Rne,m0o,g0o,Oj,h0o,p0o,_0o,F5,Sne,u0o,b0o,Gj,v0o,T0o,F0o,C5,Pne,C0o,M0o,Xj,E0o,y0o,w0o,M5,$ne,A0o,L0o,Vj,B0o,x0o,k0o,E5,Ine,R0o,S0o,zj,P0o,$0o,I0o,y5,jne,j0o,D0o,Wj,N0o,q0o,O0o,w5,Dne,G0o,X0o,Qj,V0o,z0o,W0o,A5,Nne,Q0o,H0o,Hj,U0o,J0o,Y0o,L5,qne,K0o,Z0o,Uj,eLo,oLo,rLo,B5,One,tLo,aLo,Jj,nLo,sLo,lLo,x5,Gne,iLo,dLo,Yj,cLo,fLo,mLo,k5,Xne,gLo,hLo,Kj,pLo,_Lo,uLo,R5,Vne,bLo,vLo,Zj,TLo,FLo,CLo,S5,zne,MLo,ELo,eD,yLo,wLo,ALo,P5,Wne,LLo,BLo,oD,xLo,kLo,RLo,$5,Qne,SLo,PLo,rD,$Lo,ILo,jLo,I5,Hne,DLo,NLo,tD,qLo,OLo,GLo,j5,Une,XLo,VLo,aD,zLo,WLo,QLo,D5,Jne,HLo,ULo,nD,JLo,YLo,KLo,N5,Yne,ZLo,e7o,sD,o7o,r7o,t7o,q5,Kne,a7o,n7o,lD,s7o,l7o,i7o,O5,Zne,d7o,c7o,iD,f7o,m7o,g7o,G5,ese,h7o,p7o,dD,_7o,u7o,b7o,X5,ose,v7o,T7o,cD,F7o,C7o,M7o,V5,rse,E7o,y7o,fD,w7o,A7o,L7o,z5,tse,B7o,x7o,mD,k7o,R7o,S7o,W5,ase,P7o,$7o,gD,I7o,j7o,D7o,Q5,nse,N7o,q7o,hD,O7o,G7o,X7o,H5,sse,V7o,z7o,pD,W7o,Q7o,H7o,U5,lse,U7o,J7o,_D,Y7o,K7o,Z7o,J5,ise,eBo,oBo,uD,rBo,tBo,aBo,Y5,dse,nBo,sBo,bD,lBo,iBo,dBo,K5,cse,cBo,fBo,vD,mBo,gBo,hBo,Z5,pBo,fse,_Bo,uBo,mse,bBo,vBo,gse,TBo,FBo,$E,jxe,Ed,e2,hse,IE,CBo,pse,MBo,Dxe,nr,jE,EBo,yd,yBo,_se,wBo,ABo,use,LBo,BBo,xBo,DE,kBo,bse,RBo,SBo,PBo,Zr,NE,$Bo,vse,IBo,jBo,wd,DBo,Tse,NBo,qBo,Fse,OBo,GBo,XBo,Cse,VBo,zBo,qE,WBo,We,OE,QBo,Mse,HBo,UBo,Za,JBo,Ese,YBo,KBo,yse,ZBo,exo,wse,oxo,rxo,txo,R,o2,Ase,axo,nxo,TD,sxo,lxo,ixo,r2,Lse,dxo,cxo,FD,fxo,mxo,gxo,t2,Bse,hxo,pxo,CD,_xo,uxo,bxo,a2,xse,vxo,Txo,MD,Fxo,Cxo,Mxo,n2,kse,Exo,yxo,ED,wxo,Axo,Lxo,s2,Rse,Bxo,xxo,yD,kxo,Rxo,Sxo,l2,Sse,Pxo,$xo,wD,Ixo,jxo,Dxo,i2,Pse,Nxo,qxo,AD,Oxo,Gxo,Xxo,d2,$se,Vxo,zxo,LD,Wxo,Qxo,Hxo,c2,Ise,Uxo,Jxo,BD,Yxo,Kxo,Zxo,f2,jse,eko,oko,xD,rko,tko,ako,m2,Dse,nko,sko,kD,lko,iko,dko,g2,Nse,cko,fko,RD,mko,gko,hko,h2,qse,pko,_ko,SD,uko,bko,vko,p2,Ose,Tko,Fko,PD,Cko,Mko,Eko,_2,Gse,yko,wko,$D,Ako,Lko,Bko,u2,Xse,xko,kko,ID,Rko,Sko,Pko,b2,Vse,$ko,Iko,jD,jko,Dko,Nko,v2,zse,qko,Oko,DD,Gko,Xko,Vko,T2,Wse,zko,Wko,ND,Qko,Hko,Uko,F2,Qse,Jko,Yko,qD,Kko,Zko,eRo,C2,Hse,oRo,rRo,OD,tRo,aRo,nRo,M2,Use,sRo,lRo,GD,iRo,dRo,cRo,E2,Jse,fRo,mRo,XD,gRo,hRo,pRo,y2,Yse,_Ro,uRo,VD,bRo,vRo,TRo,w2,Kse,FRo,CRo,zD,MRo,ERo,yRo,A2,Zse,wRo,ARo,WD,LRo,BRo,xRo,L2,ele,kRo,RRo,QD,SRo,PRo,$Ro,B2,ole,IRo,jRo,HD,DRo,NRo,qRo,x2,rle,ORo,GRo,UD,XRo,VRo,zRo,k2,tle,WRo,QRo,JD,HRo,URo,JRo,R2,ale,YRo,KRo,YD,ZRo,eSo,oSo,S2,nle,rSo,tSo,KD,aSo,nSo,sSo,P2,sle,lSo,iSo,ZD,dSo,cSo,fSo,$2,lle,mSo,gSo,eN,hSo,pSo,_So,I2,ile,uSo,bSo,oN,vSo,TSo,FSo,j2,dle,CSo,MSo,rN,ESo,ySo,wSo,D2,cle,ASo,LSo,tN,BSo,xSo,kSo,N2,fle,RSo,SSo,aN,PSo,$So,ISo,q2,jSo,mle,DSo,NSo,gle,qSo,OSo,hle,GSo,XSo,GE,Nxe,Ad,O2,ple,XE,VSo,_le,zSo,qxe,sr,VE,WSo,Ld,QSo,ule,HSo,USo,ble,JSo,YSo,KSo,zE,ZSo,vle,ePo,oPo,rPo,et,WE,tPo,Tle,aPo,nPo,Bd,sPo,Fle,lPo,iPo,Cle,dPo,cPo,fPo,Mle,mPo,gPo,QE,hPo,Qe,HE,pPo,Ele,_Po,uPo,en,bPo,yle,vPo,TPo,wle,FPo,CPo,Ale,MPo,EPo,yPo,Lle,G2,Ble,wPo,APo,nN,LPo,BPo,xPo,X2,kPo,xle,RPo,SPo,kle,PPo,$Po,Rle,IPo,jPo,UE,Oxe,xd,V2,Sle,JE,DPo,Ple,NPo,Gxe,lr,YE,qPo,kd,OPo,$le,GPo,XPo,Ile,VPo,zPo,WPo,KE,QPo,jle,HPo,UPo,JPo,ot,ZE,YPo,Dle,KPo,ZPo,Rd,e$o,Nle,o$o,r$o,qle,t$o,a$o,n$o,Ole,s$o,l$o,e3,i$o,He,o3,d$o,Gle,c$o,f$o,on,m$o,Xle,g$o,h$o,Vle,p$o,_$o,zle,u$o,b$o,v$o,Ce,z2,Wle,T$o,F$o,sN,C$o,M$o,E$o,W2,Qle,y$o,w$o,lN,A$o,L$o,B$o,qs,Hle,x$o,k$o,iN,R$o,S$o,dN,P$o,$$o,I$o,Q2,Ule,j$o,D$o,cN,N$o,q$o,O$o,ma,Jle,G$o,X$o,fN,V$o,z$o,mN,W$o,Q$o,gN,H$o,U$o,J$o,H2,Yle,Y$o,K$o,hN,Z$o,eIo,oIo,U2,Kle,rIo,tIo,pN,aIo,nIo,sIo,J2,Zle,lIo,iIo,_N,dIo,cIo,fIo,Y2,eie,mIo,gIo,uN,hIo,pIo,_Io,K2,uIo,oie,bIo,vIo,rie,TIo,FIo,tie,CIo,MIo,r3,Xxe,Sd,Z2,aie,t3,EIo,nie,yIo,Vxe,ir,a3,wIo,Pd,AIo,sie,LIo,BIo,lie,xIo,kIo,RIo,n3,SIo,iie,PIo,$Io,IIo,rt,s3,jIo,die,DIo,NIo,$d,qIo,cie,OIo,GIo,fie,XIo,VIo,zIo,mie,WIo,QIo,l3,HIo,Ue,i3,UIo,gie,JIo,YIo,rn,KIo,hie,ZIo,ejo,pie,ojo,rjo,_ie,tjo,ajo,njo,uie,ev,bie,sjo,ljo,bN,ijo,djo,cjo,ov,fjo,vie,mjo,gjo,Tie,hjo,pjo,Fie,_jo,ujo,d3,zxe,Id,rv,Cie,c3,bjo,Mie,vjo,Wxe,dr,f3,Tjo,jd,Fjo,Eie,Cjo,Mjo,yie,Ejo,yjo,wjo,m3,Ajo,wie,Ljo,Bjo,xjo,tt,g3,kjo,Aie,Rjo,Sjo,Dd,Pjo,Lie,$jo,Ijo,Bie,jjo,Djo,Njo,xie,qjo,Ojo,h3,Gjo,Je,p3,Xjo,kie,Vjo,zjo,tn,Wjo,Rie,Qjo,Hjo,Sie,Ujo,Jjo,Pie,Yjo,Kjo,Zjo,xe,tv,$ie,eDo,oDo,vN,rDo,tDo,aDo,av,Iie,nDo,sDo,TN,lDo,iDo,dDo,nv,jie,cDo,fDo,FN,mDo,gDo,hDo,sv,Die,pDo,_Do,CN,uDo,bDo,vDo,lv,Nie,TDo,FDo,MN,CDo,MDo,EDo,iv,qie,yDo,wDo,EN,ADo,LDo,BDo,dv,Oie,xDo,kDo,yN,RDo,SDo,PDo,cv,Gie,$Do,IDo,wN,jDo,DDo,NDo,fv,qDo,Xie,ODo,GDo,Vie,XDo,VDo,zie,zDo,WDo,_3,Qxe,Nd,mv,Wie,u3,QDo,Qie,HDo,Hxe,cr,b3,UDo,qd,JDo,Hie,YDo,KDo,Uie,ZDo,eNo,oNo,v3,rNo,Jie,tNo,aNo,nNo,at,T3,sNo,Yie,lNo,iNo,Od,dNo,Kie,cNo,fNo,Zie,mNo,gNo,hNo,ede,pNo,_No,F3,uNo,Ye,C3,bNo,ode,vNo,TNo,an,FNo,rde,CNo,MNo,tde,ENo,yNo,ade,wNo,ANo,LNo,nn,gv,nde,BNo,xNo,AN,kNo,RNo,SNo,hv,sde,PNo,$No,LN,INo,jNo,DNo,pv,lde,NNo,qNo,BN,ONo,GNo,XNo,_v,ide,VNo,zNo,xN,WNo,QNo,HNo,uv,UNo,dde,JNo,YNo,cde,KNo,ZNo,fde,eqo,oqo,M3,Uxe,Gd,bv,mde,E3,rqo,gde,tqo,Jxe,fr,y3,aqo,Xd,nqo,hde,sqo,lqo,pde,iqo,dqo,cqo,w3,fqo,_de,mqo,gqo,hqo,nt,A3,pqo,ude,_qo,uqo,Vd,bqo,bde,vqo,Tqo,vde,Fqo,Cqo,Mqo,Tde,Eqo,yqo,L3,wqo,Ke,B3,Aqo,Fde,Lqo,Bqo,sn,xqo,Cde,kqo,Rqo,Mde,Sqo,Pqo,Ede,$qo,Iqo,jqo,ke,vv,yde,Dqo,Nqo,kN,qqo,Oqo,Gqo,Tv,wde,Xqo,Vqo,RN,zqo,Wqo,Qqo,Fv,Ade,Hqo,Uqo,SN,Jqo,Yqo,Kqo,Cv,Lde,Zqo,eOo,PN,oOo,rOo,tOo,Mv,Bde,aOo,nOo,$N,sOo,lOo,iOo,Ev,xde,dOo,cOo,IN,fOo,mOo,gOo,yv,kde,hOo,pOo,jN,_Oo,uOo,bOo,wv,Rde,vOo,TOo,DN,FOo,COo,MOo,Av,EOo,Sde,yOo,wOo,Pde,AOo,LOo,$de,BOo,xOo,x3,Yxe,zd,Lv,Ide,k3,kOo,jde,ROo,Kxe,mr,R3,SOo,Wd,POo,Dde,$Oo,IOo,Nde,jOo,DOo,NOo,S3,qOo,qde,OOo,GOo,XOo,st,P3,VOo,Ode,zOo,WOo,Qd,QOo,Gde,HOo,UOo,Xde,JOo,YOo,KOo,Vde,ZOo,eGo,$3,oGo,Ze,I3,rGo,zde,tGo,aGo,ln,nGo,Wde,sGo,lGo,Qde,iGo,dGo,Hde,cGo,fGo,mGo,j3,Bv,Ude,gGo,hGo,NN,pGo,_Go,uGo,xv,Jde,bGo,vGo,qN,TGo,FGo,CGo,kv,MGo,Yde,EGo,yGo,Kde,wGo,AGo,Zde,LGo,BGo,D3,Zxe,Hd,Rv,ece,N3,xGo,oce,kGo,eke,gr,q3,RGo,Ud,SGo,rce,PGo,$Go,tce,IGo,jGo,DGo,O3,NGo,ace,qGo,OGo,GGo,lt,G3,XGo,nce,VGo,zGo,Jd,WGo,sce,QGo,HGo,lce,UGo,JGo,YGo,ice,KGo,ZGo,X3,eXo,eo,V3,oXo,dce,rXo,tXo,dn,aXo,cce,nXo,sXo,fce,lXo,iXo,mce,dXo,cXo,fXo,cn,Sv,gce,mXo,gXo,ON,hXo,pXo,_Xo,Pv,hce,uXo,bXo,GN,vXo,TXo,FXo,$v,pce,CXo,MXo,XN,EXo,yXo,wXo,Iv,_ce,AXo,LXo,VN,BXo,xXo,kXo,jv,RXo,uce,SXo,PXo,bce,$Xo,IXo,vce,jXo,DXo,z3,oke,Yd,Dv,Tce,W3,NXo,Fce,qXo,rke,hr,Q3,OXo,Kd,GXo,Cce,XXo,VXo,Mce,zXo,WXo,QXo,H3,HXo,Ece,UXo,JXo,YXo,it,U3,KXo,yce,ZXo,eVo,Zd,oVo,wce,rVo,tVo,Ace,aVo,nVo,sVo,Lce,lVo,iVo,J3,dVo,oo,Y3,cVo,Bce,fVo,mVo,fn,gVo,xce,hVo,pVo,kce,_Vo,uVo,Rce,bVo,vVo,TVo,ec,Nv,Sce,FVo,CVo,zN,MVo,EVo,yVo,qv,Pce,wVo,AVo,WN,LVo,BVo,xVo,Ov,$ce,kVo,RVo,QN,SVo,PVo,$Vo,Gv,IVo,Ice,jVo,DVo,jce,NVo,qVo,Dce,OVo,GVo,K3,tke,oc,Xv,Nce,Z3,XVo,qce,VVo,ake,pr,ey,zVo,rc,WVo,Oce,QVo,HVo,Gce,UVo,JVo,YVo,oy,KVo,Xce,ZVo,ezo,ozo,dt,ry,rzo,Vce,tzo,azo,tc,nzo,zce,szo,lzo,Wce,izo,dzo,czo,Qce,fzo,mzo,ty,gzo,ro,ay,hzo,Hce,pzo,_zo,mn,uzo,Uce,bzo,vzo,Jce,Tzo,Fzo,Yce,Czo,Mzo,Ezo,Kce,Vv,Zce,yzo,wzo,HN,Azo,Lzo,Bzo,zv,xzo,efe,kzo,Rzo,ofe,Szo,Pzo,rfe,$zo,Izo,ny,nke,ac,Wv,tfe,sy,jzo,afe,Dzo,ske,_r,ly,Nzo,nc,qzo,nfe,Ozo,Gzo,sfe,Xzo,Vzo,zzo,iy,Wzo,lfe,Qzo,Hzo,Uzo,ct,dy,Jzo,ife,Yzo,Kzo,sc,Zzo,dfe,eWo,oWo,cfe,rWo,tWo,aWo,ffe,nWo,sWo,cy,lWo,to,fy,iWo,mfe,dWo,cWo,gn,fWo,gfe,mWo,gWo,hfe,hWo,pWo,pfe,_Wo,uWo,bWo,_fe,Qv,ufe,vWo,TWo,UN,FWo,CWo,MWo,Hv,EWo,bfe,yWo,wWo,vfe,AWo,LWo,Tfe,BWo,xWo,my,lke,lc,Uv,Ffe,gy,kWo,Cfe,RWo,ike,ur,hy,SWo,ic,PWo,Mfe,$Wo,IWo,Efe,jWo,DWo,NWo,py,qWo,yfe,OWo,GWo,XWo,ft,_y,VWo,wfe,zWo,WWo,dc,QWo,Afe,HWo,UWo,Lfe,JWo,YWo,KWo,Bfe,ZWo,eQo,uy,oQo,ao,by,rQo,xfe,tQo,aQo,hn,nQo,kfe,sQo,lQo,Rfe,iQo,dQo,Sfe,cQo,fQo,mQo,vy,Jv,Pfe,gQo,hQo,JN,pQo,_Qo,uQo,Yv,$fe,bQo,vQo,YN,TQo,FQo,CQo,Kv,MQo,Ife,EQo,yQo,jfe,wQo,AQo,Dfe,LQo,BQo,Ty,dke,cc,Zv,Nfe,Fy,xQo,qfe,kQo,cke,br,Cy,RQo,fc,SQo,Ofe,PQo,$Qo,Gfe,IQo,jQo,DQo,My,NQo,Xfe,qQo,OQo,GQo,mt,Ey,XQo,Vfe,VQo,zQo,mc,WQo,zfe,QQo,HQo,Wfe,UQo,JQo,YQo,Qfe,KQo,ZQo,yy,eHo,no,wy,oHo,Hfe,rHo,tHo,pn,aHo,Ufe,nHo,sHo,Jfe,lHo,iHo,Yfe,dHo,cHo,fHo,Kfe,e6,Zfe,mHo,gHo,KN,hHo,pHo,_Ho,o6,uHo,eme,bHo,vHo,ome,THo,FHo,rme,CHo,MHo,Ay,fke,gc,r6,tme,Ly,EHo,ame,yHo,mke,vr,By,wHo,hc,AHo,nme,LHo,BHo,sme,xHo,kHo,RHo,xy,SHo,lme,PHo,$Ho,IHo,gt,ky,jHo,ime,DHo,NHo,pc,qHo,dme,OHo,GHo,cme,XHo,VHo,zHo,fme,WHo,QHo,Ry,HHo,ho,Sy,UHo,mme,JHo,YHo,_n,KHo,gme,ZHo,eUo,hme,oUo,rUo,pme,tUo,aUo,nUo,B,t6,_me,sUo,lUo,ZN,iUo,dUo,cUo,a6,ume,fUo,mUo,eq,gUo,hUo,pUo,n6,bme,_Uo,uUo,oq,bUo,vUo,TUo,s6,vme,FUo,CUo,rq,MUo,EUo,yUo,l6,Tme,wUo,AUo,tq,LUo,BUo,xUo,i6,Fme,kUo,RUo,aq,SUo,PUo,$Uo,d6,Cme,IUo,jUo,nq,DUo,NUo,qUo,c6,Mme,OUo,GUo,sq,XUo,VUo,zUo,f6,Eme,WUo,QUo,lq,HUo,UUo,JUo,m6,yme,YUo,KUo,iq,ZUo,eJo,oJo,g6,wme,rJo,tJo,dq,aJo,nJo,sJo,h6,Ame,lJo,iJo,cq,dJo,cJo,fJo,p6,Lme,mJo,gJo,fq,hJo,pJo,_Jo,_6,Bme,uJo,bJo,mq,vJo,TJo,FJo,u6,xme,CJo,MJo,gq,EJo,yJo,wJo,b6,kme,AJo,LJo,hq,BJo,xJo,kJo,Os,Rme,RJo,SJo,pq,PJo,$Jo,_q,IJo,jJo,DJo,v6,Sme,NJo,qJo,uq,OJo,GJo,XJo,T6,Pme,VJo,zJo,bq,WJo,QJo,HJo,F6,$me,UJo,JJo,vq,YJo,KJo,ZJo,C6,Ime,eYo,oYo,Tq,rYo,tYo,aYo,M6,jme,nYo,sYo,Fq,lYo,iYo,dYo,E6,Dme,cYo,fYo,Cq,mYo,gYo,hYo,y6,Nme,pYo,_Yo,Mq,uYo,bYo,vYo,w6,qme,TYo,FYo,Eq,CYo,MYo,EYo,A6,Ome,yYo,wYo,yq,AYo,LYo,BYo,L6,Gme,xYo,kYo,wq,RYo,SYo,PYo,B6,Xme,$Yo,IYo,Aq,jYo,DYo,NYo,x6,Vme,qYo,OYo,Lq,GYo,XYo,VYo,k6,zme,zYo,WYo,Bq,QYo,HYo,UYo,R6,Wme,JYo,YYo,xq,KYo,ZYo,eKo,S6,Qme,oKo,rKo,kq,tKo,aKo,nKo,P6,Hme,sKo,lKo,Rq,iKo,dKo,cKo,$6,Ume,fKo,mKo,Sq,gKo,hKo,pKo,I6,Jme,_Ko,uKo,Pq,bKo,vKo,TKo,j6,Yme,FKo,CKo,$q,MKo,EKo,yKo,D6,Kme,wKo,AKo,Iq,LKo,BKo,xKo,N6,Zme,kKo,RKo,jq,SKo,PKo,$Ko,q6,ege,IKo,jKo,Dq,DKo,NKo,qKo,O6,oge,OKo,GKo,Nq,XKo,VKo,zKo,G6,rge,WKo,QKo,qq,HKo,UKo,JKo,X6,tge,YKo,KKo,Oq,ZKo,eZo,oZo,age,rZo,tZo,Py,gke,_c,V6,nge,$y,aZo,sge,nZo,hke,Tr,Iy,sZo,uc,lZo,lge,iZo,dZo,ige,cZo,fZo,mZo,jy,gZo,dge,hZo,pZo,_Zo,ht,Dy,uZo,cge,bZo,vZo,bc,TZo,fge,FZo,CZo,mge,MZo,EZo,yZo,gge,wZo,AZo,Ny,LZo,po,qy,BZo,hge,xZo,kZo,un,RZo,pge,SZo,PZo,_ge,$Zo,IZo,uge,jZo,DZo,NZo,H,z6,bge,qZo,OZo,Gq,GZo,XZo,VZo,W6,vge,zZo,WZo,Xq,QZo,HZo,UZo,Q6,Tge,JZo,YZo,Vq,KZo,ZZo,eer,H6,Fge,oer,rer,zq,ter,aer,ner,U6,Cge,ser,ler,Wq,ier,der,cer,J6,Mge,fer,mer,Qq,ger,her,per,Y6,Ege,_er,uer,Hq,ber,ver,Ter,K6,yge,Fer,Cer,Uq,Mer,Eer,yer,Z6,wge,wer,Aer,Jq,Ler,Ber,xer,eT,Age,ker,Rer,Yq,Ser,Per,$er,oT,Lge,Ier,jer,Kq,Der,Ner,qer,rT,Bge,Oer,Ger,Zq,Xer,Ver,zer,tT,xge,Wer,Qer,eO,Her,Uer,Jer,aT,kge,Yer,Ker,oO,Zer,eor,oor,nT,Rge,ror,tor,rO,aor,nor,sor,sT,Sge,lor,ior,tO,dor,cor,mor,lT,Pge,gor,hor,aO,por,_or,uor,iT,$ge,bor,vor,nO,Tor,For,Cor,dT,Ige,Mor,Eor,sO,yor,wor,Aor,cT,jge,Lor,Bor,lO,xor,kor,Ror,fT,Dge,Sor,Por,iO,$or,Ior,jor,mT,Nge,Dor,Nor,dO,qor,Oor,Gor,qge,Xor,Vor,Oy,pke,vc,gT,Oge,Gy,zor,Gge,Wor,_ke,Fr,Xy,Qor,Tc,Hor,Xge,Uor,Jor,Vge,Yor,Kor,Zor,Vy,err,zge,orr,rrr,trr,pt,zy,arr,Wge,nrr,srr,Fc,lrr,Qge,irr,drr,Hge,crr,frr,mrr,Uge,grr,hrr,Wy,prr,_o,Qy,_rr,Jge,urr,brr,bn,vrr,Yge,Trr,Frr,Kge,Crr,Mrr,Zge,Err,yrr,wrr,me,hT,ehe,Arr,Lrr,cO,Brr,xrr,krr,pT,ohe,Rrr,Srr,fO,Prr,$rr,Irr,_T,rhe,jrr,Drr,mO,Nrr,qrr,Orr,uT,the,Grr,Xrr,gO,Vrr,zrr,Wrr,bT,ahe,Qrr,Hrr,hO,Urr,Jrr,Yrr,vT,nhe,Krr,Zrr,pO,etr,otr,rtr,TT,she,ttr,atr,_O,ntr,str,ltr,FT,lhe,itr,dtr,uO,ctr,ftr,mtr,CT,ihe,gtr,htr,bO,ptr,_tr,utr,MT,dhe,btr,vtr,vO,Ttr,Ftr,Ctr,ET,che,Mtr,Etr,TO,ytr,wtr,Atr,fhe,Ltr,Btr,Hy,uke,Cc,yT,mhe,Uy,xtr,ghe,ktr,bke,Cr,Jy,Rtr,Mc,Str,hhe,Ptr,$tr,phe,Itr,jtr,Dtr,Yy,Ntr,_he,qtr,Otr,Gtr,_t,Ky,Xtr,uhe,Vtr,ztr,Ec,Wtr,bhe,Qtr,Htr,vhe,Utr,Jtr,Ytr,The,Ktr,Ztr,Zy,ear,uo,ew,oar,Fhe,rar,tar,vn,aar,Che,nar,sar,Mhe,lar,iar,Ehe,dar,car,far,ow,wT,yhe,mar,gar,FO,har,par,_ar,AT,whe,uar,bar,CO,Tar,Far,Car,Ahe,Mar,Ear,rw,vke,yc,LT,Lhe,tw,yar,Bhe,war,Tke,Mr,aw,Aar,wc,Lar,xhe,Bar,xar,khe,kar,Rar,Sar,nw,Par,Rhe,$ar,Iar,jar,ut,sw,Dar,She,Nar,qar,Ac,Oar,Phe,Gar,Xar,$he,Var,zar,War,Ihe,Qar,Har,lw,Uar,bo,iw,Jar,jhe,Yar,Kar,Tn,Zar,Dhe,enr,onr,Nhe,rnr,tnr,qhe,anr,nnr,snr,Y,BT,Ohe,lnr,inr,MO,dnr,cnr,fnr,xT,Ghe,mnr,gnr,EO,hnr,pnr,_nr,kT,Xhe,unr,bnr,yO,vnr,Tnr,Fnr,RT,Vhe,Cnr,Mnr,wO,Enr,ynr,wnr,ST,zhe,Anr,Lnr,AO,Bnr,xnr,knr,PT,Whe,Rnr,Snr,LO,Pnr,$nr,Inr,$T,Qhe,jnr,Dnr,BO,Nnr,qnr,Onr,IT,Hhe,Gnr,Xnr,xO,Vnr,znr,Wnr,jT,Uhe,Qnr,Hnr,kO,Unr,Jnr,Ynr,DT,Jhe,Knr,Znr,RO,esr,osr,rsr,NT,Yhe,tsr,asr,SO,nsr,ssr,lsr,qT,Khe,isr,dsr,PO,csr,fsr,msr,OT,Zhe,gsr,hsr,$O,psr,_sr,usr,GT,epe,bsr,vsr,IO,Tsr,Fsr,Csr,XT,ope,Msr,Esr,jO,ysr,wsr,Asr,VT,rpe,Lsr,Bsr,DO,xsr,ksr,Rsr,zT,tpe,Ssr,Psr,NO,$sr,Isr,jsr,WT,ape,Dsr,Nsr,qO,qsr,Osr,Gsr,QT,npe,Xsr,Vsr,OO,zsr,Wsr,Qsr,HT,spe,Hsr,Usr,GO,Jsr,Ysr,Ksr,lpe,Zsr,elr,dw,Fke,Lc,UT,ipe,cw,olr,dpe,rlr,Cke,Er,fw,tlr,Bc,alr,cpe,nlr,slr,fpe,llr,ilr,dlr,mw,clr,mpe,flr,mlr,glr,bt,gw,hlr,gpe,plr,_lr,xc,ulr,hpe,blr,vlr,ppe,Tlr,Flr,Clr,_pe,Mlr,Elr,hw,ylr,vo,pw,wlr,upe,Alr,Llr,Fn,Blr,bpe,xlr,klr,vpe,Rlr,Slr,Tpe,Plr,$lr,Ilr,_e,JT,Fpe,jlr,Dlr,XO,Nlr,qlr,Olr,YT,Cpe,Glr,Xlr,VO,Vlr,zlr,Wlr,KT,Mpe,Qlr,Hlr,zO,Ulr,Jlr,Ylr,ZT,Epe,Klr,Zlr,WO,eir,oir,rir,e8,ype,tir,air,QO,nir,sir,lir,o8,wpe,iir,dir,HO,cir,fir,mir,r8,Ape,gir,hir,UO,pir,_ir,uir,t8,Lpe,bir,vir,JO,Tir,Fir,Cir,a8,Bpe,Mir,Eir,YO,yir,wir,Air,n8,xpe,Lir,Bir,KO,xir,kir,Rir,kpe,Sir,Pir,_w,Mke,kc,s8,Rpe,uw,$ir,Spe,Iir,Eke,yr,bw,jir,Rc,Dir,Ppe,Nir,qir,$pe,Oir,Gir,Xir,vw,Vir,Ipe,zir,Wir,Qir,vt,Tw,Hir,jpe,Uir,Jir,Sc,Yir,Dpe,Kir,Zir,Npe,edr,odr,rdr,qpe,tdr,adr,Fw,ndr,To,Cw,sdr,Ope,ldr,idr,Cn,ddr,Gpe,cdr,fdr,Xpe,mdr,gdr,Vpe,hdr,pdr,_dr,V,l8,zpe,udr,bdr,ZO,vdr,Tdr,Fdr,i8,Wpe,Cdr,Mdr,eG,Edr,ydr,wdr,d8,Qpe,Adr,Ldr,oG,Bdr,xdr,kdr,c8,Hpe,Rdr,Sdr,rG,Pdr,$dr,Idr,f8,Upe,jdr,Ddr,tG,Ndr,qdr,Odr,m8,Jpe,Gdr,Xdr,aG,Vdr,zdr,Wdr,g8,Ype,Qdr,Hdr,nG,Udr,Jdr,Ydr,h8,Kpe,Kdr,Zdr,sG,ecr,ocr,rcr,p8,Zpe,tcr,acr,lG,ncr,scr,lcr,_8,e_e,icr,dcr,iG,ccr,fcr,mcr,u8,o_e,gcr,hcr,dG,pcr,_cr,ucr,b8,r_e,bcr,vcr,cG,Tcr,Fcr,Ccr,v8,t_e,Mcr,Ecr,fG,ycr,wcr,Acr,T8,a_e,Lcr,Bcr,mG,xcr,kcr,Rcr,F8,n_e,Scr,Pcr,gG,$cr,Icr,jcr,C8,s_e,Dcr,Ncr,hG,qcr,Ocr,Gcr,M8,l_e,Xcr,Vcr,pG,zcr,Wcr,Qcr,E8,i_e,Hcr,Ucr,_G,Jcr,Ycr,Kcr,y8,d_e,Zcr,efr,uG,ofr,rfr,tfr,w8,c_e,afr,nfr,bG,sfr,lfr,ifr,A8,f_e,dfr,cfr,vG,ffr,mfr,gfr,L8,m_e,hfr,pfr,TG,_fr,ufr,bfr,B8,g_e,vfr,Tfr,FG,Ffr,Cfr,Mfr,x8,h_e,Efr,yfr,CG,wfr,Afr,Lfr,k8,p_e,Bfr,xfr,MG,kfr,Rfr,Sfr,__e,Pfr,$fr,Mw,yke,Pc,R8,u_e,Ew,Ifr,b_e,jfr,wke,wr,yw,Dfr,$c,Nfr,v_e,qfr,Ofr,T_e,Gfr,Xfr,Vfr,ww,zfr,F_e,Wfr,Qfr,Hfr,Tt,Aw,Ufr,C_e,Jfr,Yfr,Ic,Kfr,M_e,Zfr,emr,E_e,omr,rmr,tmr,y_e,amr,nmr,Lw,smr,Fo,Bw,lmr,w_e,imr,dmr,Mn,cmr,A_e,fmr,mmr,L_e,gmr,hmr,B_e,pmr,_mr,umr,te,S8,x_e,bmr,vmr,EG,Tmr,Fmr,Cmr,P8,k_e,Mmr,Emr,yG,ymr,wmr,Amr,$8,R_e,Lmr,Bmr,wG,xmr,kmr,Rmr,I8,S_e,Smr,Pmr,AG,$mr,Imr,jmr,j8,P_e,Dmr,Nmr,LG,qmr,Omr,Gmr,D8,$_e,Xmr,Vmr,BG,zmr,Wmr,Qmr,N8,I_e,Hmr,Umr,xG,Jmr,Ymr,Kmr,q8,j_e,Zmr,egr,kG,ogr,rgr,tgr,O8,D_e,agr,ngr,RG,sgr,lgr,igr,G8,N_e,dgr,cgr,SG,fgr,mgr,ggr,X8,q_e,hgr,pgr,PG,_gr,ugr,bgr,V8,O_e,vgr,Tgr,$G,Fgr,Cgr,Mgr,z8,G_e,Egr,ygr,IG,wgr,Agr,Lgr,W8,X_e,Bgr,xgr,jG,kgr,Rgr,Sgr,Q8,V_e,Pgr,$gr,DG,Igr,jgr,Dgr,H8,z_e,Ngr,qgr,NG,Ogr,Ggr,Xgr,U8,W_e,Vgr,zgr,qG,Wgr,Qgr,Hgr,Q_e,Ugr,Jgr,xw,Ake,jc,J8,H_e,kw,Ygr,U_e,Kgr,Lke,Ar,Rw,Zgr,Dc,ehr,J_e,ohr,rhr,Y_e,thr,ahr,nhr,Sw,shr,K_e,lhr,ihr,dhr,Ft,Pw,chr,Z_e,fhr,mhr,Nc,ghr,eue,hhr,phr,oue,_hr,uhr,bhr,rue,vhr,Thr,$w,Fhr,Co,Iw,Chr,tue,Mhr,Ehr,En,yhr,aue,whr,Ahr,nue,Lhr,Bhr,sue,xhr,khr,Rhr,lue,Y8,iue,Shr,Phr,OG,$hr,Ihr,jhr,due,Dhr,Nhr,jw,Bke,qc,K8,cue,Dw,qhr,fue,Ohr,xke,Lr,Nw,Ghr,Oc,Xhr,mue,Vhr,zhr,gue,Whr,Qhr,Hhr,qw,Uhr,hue,Jhr,Yhr,Khr,Ct,Ow,Zhr,pue,epr,opr,Gc,rpr,_ue,tpr,apr,uue,npr,spr,lpr,bue,ipr,dpr,Gw,cpr,Mo,Xw,fpr,vue,mpr,gpr,yn,hpr,Tue,ppr,_pr,Fue,upr,bpr,Cue,vpr,Tpr,Fpr,K,Z8,Mue,Cpr,Mpr,GG,Epr,ypr,wpr,eF,Eue,Apr,Lpr,XG,Bpr,xpr,kpr,oF,yue,Rpr,Spr,VG,Ppr,$pr,Ipr,rF,wue,jpr,Dpr,zG,Npr,qpr,Opr,tF,Aue,Gpr,Xpr,WG,Vpr,zpr,Wpr,aF,Lue,Qpr,Hpr,QG,Upr,Jpr,Ypr,nF,Bue,Kpr,Zpr,HG,e_r,o_r,r_r,sF,xue,t_r,a_r,UG,n_r,s_r,l_r,lF,kue,i_r,d_r,JG,c_r,f_r,m_r,iF,Rue,g_r,h_r,YG,p_r,__r,u_r,dF,Sue,b_r,v_r,KG,T_r,F_r,C_r,cF,Pue,M_r,E_r,ZG,y_r,w_r,A_r,fF,$ue,L_r,B_r,eX,x_r,k_r,R_r,mF,Iue,S_r,P_r,oX,$_r,I_r,j_r,gF,jue,D_r,N_r,rX,q_r,O_r,G_r,hF,Due,X_r,V_r,tX,z_r,W_r,Q_r,pF,Nue,H_r,U_r,aX,J_r,Y_r,K_r,_F,que,Z_r,eur,nX,our,rur,tur,uF,Oue,aur,nur,sX,sur,lur,iur,bF,Gue,dur,cur,lX,fur,mur,gur,Xue,hur,pur,Vw,kke,Xc,vF,Vue,zw,_ur,zue,uur,Rke,Br,Ww,bur,Vc,vur,Wue,Tur,Fur,Que,Cur,Mur,Eur,Qw,yur,Hue,wur,Aur,Lur,Mt,Hw,Bur,Uue,xur,kur,zc,Rur,Jue,Sur,Pur,Yue,$ur,Iur,jur,Kue,Dur,Nur,Uw,qur,Eo,Jw,Our,Zue,Gur,Xur,wn,Vur,e1e,zur,Wur,o1e,Qur,Hur,r1e,Uur,Jur,Yur,Z,TF,t1e,Kur,Zur,iX,e1r,o1r,r1r,FF,a1e,t1r,a1r,dX,n1r,s1r,l1r,CF,n1e,i1r,d1r,cX,c1r,f1r,m1r,MF,s1e,g1r,h1r,fX,p1r,_1r,u1r,EF,l1e,b1r,v1r,mX,T1r,F1r,C1r,yF,i1e,M1r,E1r,gX,y1r,w1r,A1r,wF,d1e,L1r,B1r,hX,x1r,k1r,R1r,AF,c1e,S1r,P1r,pX,$1r,I1r,j1r,LF,f1e,D1r,N1r,_X,q1r,O1r,G1r,BF,m1e,X1r,V1r,uX,z1r,W1r,Q1r,xF,g1e,H1r,U1r,bX,J1r,Y1r,K1r,kF,h1e,Z1r,ebr,vX,obr,rbr,tbr,RF,p1e,abr,nbr,TX,sbr,lbr,ibr,SF,_1e,dbr,cbr,FX,fbr,mbr,gbr,PF,u1e,hbr,pbr,CX,_br,ubr,bbr,$F,b1e,vbr,Tbr,MX,Fbr,Cbr,Mbr,IF,v1e,Ebr,ybr,EX,wbr,Abr,Lbr,jF,T1e,Bbr,xbr,yX,kbr,Rbr,Sbr,DF,F1e,Pbr,$br,wX,Ibr,jbr,Dbr,C1e,Nbr,qbr,Yw,Ske,Wc,NF,M1e,Kw,Obr,E1e,Gbr,Pke,xr,Zw,Xbr,Qc,Vbr,y1e,zbr,Wbr,w1e,Qbr,Hbr,Ubr,eA,Jbr,A1e,Ybr,Kbr,Zbr,Et,oA,e5r,L1e,o5r,r5r,Hc,t5r,B1e,a5r,n5r,x1e,s5r,l5r,i5r,k1e,d5r,c5r,rA,f5r,yo,tA,m5r,R1e,g5r,h5r,An,p5r,S1e,_5r,u5r,P1e,b5r,v5r,$1e,T5r,F5r,C5r,I1e,qF,j1e,M5r,E5r,AX,y5r,w5r,A5r,D1e,L5r,B5r,aA,$ke,Uc,OF,N1e,nA,x5r,q1e,k5r,Ike,kr,sA,R5r,Jc,S5r,O1e,P5r,$5r,G1e,I5r,j5r,D5r,lA,N5r,X1e,q5r,O5r,G5r,yt,iA,X5r,V1e,V5r,z5r,Yc,W5r,z1e,Q5r,H5r,W1e,U5r,J5r,Y5r,Q1e,K5r,Z5r,dA,e2r,wo,cA,o2r,H1e,r2r,t2r,Ln,a2r,U1e,n2r,s2r,J1e,l2r,i2r,Y1e,d2r,c2r,f2r,K1e,GF,Z1e,m2r,g2r,LX,h2r,p2r,_2r,ebe,u2r,b2r,fA,jke,Kc,XF,obe,mA,v2r,rbe,T2r,Dke,Rr,gA,F2r,Zc,C2r,tbe,M2r,E2r,abe,y2r,w2r,A2r,hA,L2r,nbe,B2r,x2r,k2r,wt,pA,R2r,sbe,S2r,P2r,ef,$2r,lbe,I2r,j2r,ibe,D2r,N2r,q2r,dbe,O2r,G2r,_A,X2r,Ao,uA,V2r,cbe,z2r,W2r,Bn,Q2r,fbe,H2r,U2r,mbe,J2r,Y2r,gbe,K2r,Z2r,evr,z,VF,hbe,ovr,rvr,BX,tvr,avr,nvr,zF,pbe,svr,lvr,xX,ivr,dvr,cvr,WF,_be,fvr,mvr,kX,gvr,hvr,pvr,QF,ube,_vr,uvr,RX,bvr,vvr,Tvr,HF,bbe,Fvr,Cvr,SX,Mvr,Evr,yvr,UF,vbe,wvr,Avr,PX,Lvr,Bvr,xvr,JF,Tbe,kvr,Rvr,$X,Svr,Pvr,$vr,YF,Fbe,Ivr,jvr,IX,Dvr,Nvr,qvr,KF,Cbe,Ovr,Gvr,jX,Xvr,Vvr,zvr,ZF,Mbe,Wvr,Qvr,DX,Hvr,Uvr,Jvr,e9,Ebe,Yvr,Kvr,NX,Zvr,e6r,o6r,o9,ybe,r6r,t6r,qX,a6r,n6r,s6r,r9,wbe,l6r,i6r,OX,d6r,c6r,f6r,t9,Abe,m6r,g6r,GX,h6r,p6r,_6r,a9,Lbe,u6r,b6r,XX,v6r,T6r,F6r,n9,Bbe,C6r,M6r,VX,E6r,y6r,w6r,s9,xbe,A6r,L6r,zX,B6r,x6r,k6r,l9,kbe,R6r,S6r,WX,P6r,$6r,I6r,i9,Rbe,j6r,D6r,QX,N6r,q6r,O6r,d9,Sbe,G6r,X6r,HX,V6r,z6r,W6r,c9,Pbe,Q6r,H6r,UX,U6r,J6r,Y6r,f9,$be,K6r,Z6r,JX,eTr,oTr,rTr,m9,Ibe,tTr,aTr,YX,nTr,sTr,lTr,g9,jbe,iTr,dTr,KX,cTr,fTr,mTr,h9,Dbe,gTr,hTr,ZX,pTr,_Tr,uTr,Nbe,bTr,vTr,bA,Nke,of,p9,qbe,vA,TTr,Obe,FTr,qke,Sr,TA,CTr,rf,MTr,Gbe,ETr,yTr,Xbe,wTr,ATr,LTr,FA,BTr,Vbe,xTr,kTr,RTr,At,CA,STr,zbe,PTr,$Tr,tf,ITr,Wbe,jTr,DTr,Qbe,NTr,qTr,OTr,Hbe,GTr,XTr,MA,VTr,Lo,EA,zTr,Ube,WTr,QTr,xn,HTr,Jbe,UTr,JTr,Ybe,YTr,KTr,Kbe,ZTr,e8r,o8r,ca,_9,Zbe,r8r,t8r,eV,a8r,n8r,s8r,u9,e5e,l8r,i8r,oV,d8r,c8r,f8r,b9,o5e,m8r,g8r,rV,h8r,p8r,_8r,v9,r5e,u8r,b8r,tV,v8r,T8r,F8r,T9,t5e,C8r,M8r,aV,E8r,y8r,w8r,a5e,A8r,L8r,yA,Oke,af,F9,n5e,wA,B8r,s5e,x8r,Gke,Pr,AA,k8r,nf,R8r,l5e,S8r,P8r,i5e,$8r,I8r,j8r,LA,D8r,d5e,N8r,q8r,O8r,Lt,BA,G8r,c5e,X8r,V8r,sf,z8r,f5e,W8r,Q8r,m5e,H8r,U8r,J8r,g5e,Y8r,K8r,xA,Z8r,Bo,kA,eFr,h5e,oFr,rFr,kn,tFr,p5e,aFr,nFr,_5e,sFr,lFr,u5e,iFr,dFr,cFr,ce,C9,b5e,fFr,mFr,nV,gFr,hFr,pFr,M9,v5e,_Fr,uFr,sV,bFr,vFr,TFr,E9,T5e,FFr,CFr,lV,MFr,EFr,yFr,y9,F5e,wFr,AFr,iV,LFr,BFr,xFr,w9,C5e,kFr,RFr,dV,SFr,PFr,$Fr,A9,M5e,IFr,jFr,cV,DFr,NFr,qFr,L9,E5e,OFr,GFr,fV,XFr,VFr,zFr,B9,y5e,WFr,QFr,mV,HFr,UFr,JFr,x9,w5e,YFr,KFr,gV,ZFr,e9r,o9r,k9,A5e,r9r,t9r,hV,a9r,n9r,s9r,R9,L5e,l9r,i9r,pV,d9r,c9r,f9r,S9,B5e,m9r,g9r,_V,h9r,p9r,_9r,x5e,u9r,b9r,RA,Xke,lf,P9,k5e,SA,v9r,R5e,T9r,Vke,$r,PA,F9r,df,C9r,S5e,M9r,E9r,P5e,y9r,w9r,A9r,$A,L9r,$5e,B9r,x9r,k9r,Bt,IA,R9r,I5e,S9r,P9r,cf,$9r,j5e,I9r,j9r,D5e,D9r,N9r,q9r,N5e,O9r,G9r,jA,X9r,xo,DA,V9r,q5e,z9r,W9r,Rn,Q9r,O5e,H9r,U9r,G5e,J9r,Y9r,X5e,K9r,Z9r,eCr,ue,$9,V5e,oCr,rCr,uV,tCr,aCr,nCr,I9,z5e,sCr,lCr,bV,iCr,dCr,cCr,j9,W5e,fCr,mCr,vV,gCr,hCr,pCr,D9,Q5e,_Cr,uCr,TV,bCr,vCr,TCr,N9,H5e,FCr,CCr,FV,MCr,ECr,yCr,q9,U5e,wCr,ACr,CV,LCr,BCr,xCr,O9,J5e,kCr,RCr,MV,SCr,PCr,$Cr,G9,Y5e,ICr,jCr,EV,DCr,NCr,qCr,X9,K5e,OCr,GCr,yV,XCr,VCr,zCr,V9,Z5e,WCr,QCr,wV,HCr,UCr,JCr,e2e,YCr,KCr,NA,zke,ff,z9,o2e,qA,ZCr,r2e,eMr,Wke,Ir,OA,oMr,mf,rMr,t2e,tMr,aMr,a2e,nMr,sMr,lMr,GA,iMr,n2e,dMr,cMr,fMr,xt,XA,mMr,s2e,gMr,hMr,gf,pMr,l2e,_Mr,uMr,i2e,bMr,vMr,TMr,d2e,FMr,CMr,VA,MMr,ko,zA,EMr,c2e,yMr,wMr,Sn,AMr,f2e,LMr,BMr,m2e,xMr,kMr,g2e,RMr,SMr,PMr,Me,W9,h2e,$Mr,IMr,AV,jMr,DMr,NMr,Q9,p2e,qMr,OMr,LV,GMr,XMr,VMr,H9,_2e,zMr,WMr,BV,QMr,HMr,UMr,U9,u2e,JMr,YMr,xV,KMr,ZMr,e4r,J9,b2e,o4r,r4r,kV,t4r,a4r,n4r,Y9,v2e,s4r,l4r,RV,i4r,d4r,c4r,K9,T2e,f4r,m4r,SV,g4r,h4r,p4r,Z9,F2e,_4r,u4r,PV,b4r,v4r,T4r,eC,C2e,F4r,C4r,$V,M4r,E4r,y4r,M2e,w4r,A4r,WA,Qke,hf,oC,E2e,QA,L4r,y2e,B4r,Hke,jr,HA,x4r,pf,k4r,w2e,R4r,S4r,A2e,P4r,$4r,I4r,UA,j4r,L2e,D4r,N4r,q4r,kt,JA,O4r,B2e,G4r,X4r,_f,V4r,x2e,z4r,W4r,k2e,Q4r,H4r,U4r,R2e,J4r,Y4r,YA,K4r,Ro,KA,Z4r,S2e,eEr,oEr,Pn,rEr,P2e,tEr,aEr,$2e,nEr,sEr,I2e,lEr,iEr,dEr,be,rC,j2e,cEr,fEr,IV,mEr,gEr,hEr,tC,D2e,pEr,_Er,jV,uEr,bEr,vEr,aC,N2e,TEr,FEr,DV,CEr,MEr,EEr,nC,q2e,yEr,wEr,NV,AEr,LEr,BEr,sC,O2e,xEr,kEr,qV,REr,SEr,PEr,lC,G2e,$Er,IEr,OV,jEr,DEr,NEr,iC,X2e,qEr,OEr,GV,GEr,XEr,VEr,dC,V2e,zEr,WEr,XV,QEr,HEr,UEr,cC,z2e,JEr,YEr,VV,KEr,ZEr,e3r,fC,W2e,o3r,r3r,zV,t3r,a3r,n3r,Q2e,s3r,l3r,ZA,Uke,uf,mC,H2e,e0,i3r,U2e,d3r,Jke,Dr,o0,c3r,bf,f3r,J2e,m3r,g3r,Y2e,h3r,p3r,_3r,r0,u3r,K2e,b3r,v3r,T3r,Rt,t0,F3r,Z2e,C3r,M3r,vf,E3r,eve,y3r,w3r,ove,A3r,L3r,B3r,rve,x3r,k3r,a0,R3r,So,n0,S3r,tve,P3r,$3r,$n,I3r,ave,j3r,D3r,nve,N3r,q3r,sve,O3r,G3r,X3r,ve,gC,lve,V3r,z3r,WV,W3r,Q3r,H3r,hC,ive,U3r,J3r,QV,Y3r,K3r,Z3r,pC,dve,eyr,oyr,HV,ryr,tyr,ayr,_C,cve,nyr,syr,UV,lyr,iyr,dyr,uC,fve,cyr,fyr,JV,myr,gyr,hyr,bC,mve,pyr,_yr,YV,uyr,byr,vyr,vC,gve,Tyr,Fyr,KV,Cyr,Myr,Eyr,TC,hve,yyr,wyr,ZV,Ayr,Lyr,Byr,FC,pve,xyr,kyr,ez,Ryr,Syr,Pyr,CC,_ve,$yr,Iyr,oz,jyr,Dyr,Nyr,uve,qyr,Oyr,s0,Yke,Tf,MC,bve,l0,Gyr,vve,Xyr,Kke,Nr,i0,Vyr,Ff,zyr,Tve,Wyr,Qyr,Fve,Hyr,Uyr,Jyr,d0,Yyr,Cve,Kyr,Zyr,ewr,St,c0,owr,Mve,rwr,twr,Cf,awr,Eve,nwr,swr,yve,lwr,iwr,dwr,wve,cwr,fwr,f0,mwr,Po,m0,gwr,Ave,hwr,pwr,In,_wr,Lve,uwr,bwr,Bve,vwr,Twr,xve,Fwr,Cwr,Mwr,Re,EC,kve,Ewr,ywr,rz,wwr,Awr,Lwr,yC,Rve,Bwr,xwr,tz,kwr,Rwr,Swr,wC,Sve,Pwr,$wr,az,Iwr,jwr,Dwr,AC,Pve,Nwr,qwr,nz,Owr,Gwr,Xwr,LC,$ve,Vwr,zwr,sz,Wwr,Qwr,Hwr,BC,Ive,Uwr,Jwr,lz,Ywr,Kwr,Zwr,xC,jve,eAr,oAr,iz,rAr,tAr,aAr,kC,Dve,nAr,sAr,dz,lAr,iAr,dAr,Nve,cAr,fAr,g0,Zke,Mf,RC,qve,h0,mAr,Ove,gAr,eRe,qr,p0,hAr,Ef,pAr,Gve,_Ar,uAr,Xve,bAr,vAr,TAr,_0,FAr,Vve,CAr,MAr,EAr,Pt,u0,yAr,zve,wAr,AAr,yf,LAr,Wve,BAr,xAr,Qve,kAr,RAr,SAr,Hve,PAr,$Ar,b0,IAr,$o,v0,jAr,Uve,DAr,NAr,jn,qAr,Jve,OAr,GAr,Yve,XAr,VAr,Kve,zAr,WAr,QAr,Se,SC,Zve,HAr,UAr,cz,JAr,YAr,KAr,PC,e6e,ZAr,e0r,fz,o0r,r0r,t0r,$C,o6e,a0r,n0r,mz,s0r,l0r,i0r,IC,r6e,d0r,c0r,gz,f0r,m0r,g0r,jC,t6e,h0r,p0r,hz,_0r,u0r,b0r,DC,a6e,v0r,T0r,pz,F0r,C0r,M0r,NC,n6e,E0r,y0r,_z,w0r,A0r,L0r,qC,s6e,B0r,x0r,uz,k0r,R0r,S0r,l6e,P0r,$0r,T0,oRe,wf,OC,i6e,F0,I0r,d6e,j0r,rRe,Or,C0,D0r,Af,N0r,c6e,q0r,O0r,f6e,G0r,X0r,V0r,M0,z0r,m6e,W0r,Q0r,H0r,$t,E0,U0r,g6e,J0r,Y0r,Lf,K0r,h6e,Z0r,eLr,p6e,oLr,rLr,tLr,_6e,aLr,nLr,y0,sLr,Io,w0,lLr,u6e,iLr,dLr,Dn,cLr,b6e,fLr,mLr,v6e,gLr,hLr,T6e,pLr,_Lr,uLr,F6e,GC,C6e,bLr,vLr,bz,TLr,FLr,CLr,M6e,MLr,ELr,A0,tRe,Bf,XC,E6e,L0,yLr,y6e,wLr,aRe,Gr,B0,ALr,xf,LLr,w6e,BLr,xLr,A6e,kLr,RLr,SLr,x0,PLr,L6e,$Lr,ILr,jLr,It,k0,DLr,B6e,NLr,qLr,kf,OLr,x6e,GLr,XLr,k6e,VLr,zLr,WLr,R6e,QLr,HLr,R0,ULr,jo,S0,JLr,S6e,YLr,KLr,Nn,ZLr,P6e,e7r,o7r,$6e,r7r,t7r,I6e,a7r,n7r,s7r,P0,VC,j6e,l7r,i7r,vz,d7r,c7r,f7r,zC,D6e,m7r,g7r,Tz,h7r,p7r,_7r,N6e,u7r,b7r,$0,nRe,Rf,WC,q6e,I0,v7r,O6e,T7r,sRe,Xr,j0,F7r,Sf,C7r,G6e,M7r,E7r,X6e,y7r,w7r,A7r,D0,L7r,V6e,B7r,x7r,k7r,jt,N0,R7r,z6e,S7r,P7r,Pf,$7r,W6e,I7r,j7r,Q6e,D7r,N7r,q7r,H6e,O7r,G7r,q0,X7r,Do,O0,V7r,U6e,z7r,W7r,qn,Q7r,J6e,H7r,U7r,Y6e,J7r,Y7r,K6e,K7r,Z7r,eBr,Z6e,QC,eTe,oBr,rBr,Fz,tBr,aBr,nBr,oTe,sBr,lBr,G0,lRe;return fe=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),YM=new X({}),KM=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new iBr({props:{warning:"&lcub;true}",$$slots:{default:[NTt]},$$scope:{ctx:Ii}}}),ZM=new X({}),e4=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/configuration_auto.py#L527"}}),t4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/configuration_auto.py#L550",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),a4=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),n4=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/configuration_auto.py#L672",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),s4=new X({}),l4=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/tokenization_auto.py#L352"}}),c4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15986/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),f4=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),m4=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),g4=new X({}),h4=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/feature_extraction_auto.py#L170"}}),u4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/feature_extraction_auto.py#L184",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15986/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Eh=new iBr({props:{$$slots:{default:[qTt]},$$scope:{ctx:Ii}}}),b4=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),v4=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/feature_extraction_auto.py#L311",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),T4=new X({}),F4=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/processing_auto.py#L71"}}),E4=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),$h=new iBr({props:{$$slots:{default:[OTt]},$$scope:{ctx:Ii}}}),y4=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),w4=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),A4=new X({}),L4=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L697"}}),x4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),k4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),R4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S4=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P4=new X({}),$4=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L704"}}),j4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),D4=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),N4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q4=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O4=new X({}),G4=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L719"}}),V4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),z4=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),W4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q4=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H4=new X({}),U4=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L726"}}),Y4=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),K4=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Z4=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oE=new X({}),rE=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L733"}}),aE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),nE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),sE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iE=new X({}),dE=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L742"}}),fE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),mE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),gE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pE=new X({}),_E=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L776"}}),bE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),vE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),TE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CE=new X({}),ME=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L783"}}),yE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),wE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),AE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BE=new X({}),xE=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L769"}}),RE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),SE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),PE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$E=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IE=new X({}),jE=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L751"}}),NE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),qE=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),OE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GE=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XE=new X({}),VE=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L758"}}),WE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),QE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),HE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JE=new X({}),YE=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L792"}}),ZE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15986/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),e3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),o3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t3=new X({}),a3=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L831"}}),s3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),l3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),i3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d3=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c3=new X({}),f3=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L838"}}),g3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),h3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),p3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u3=new X({}),b3=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L861"}}),T3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),F3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),C3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E3=new X({}),y3=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L845"}}),A3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),L3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),B3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k3=new X({}),R3=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L852"}}),P3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),$3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),I3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N3=new X({}),q3=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L870"}}),G3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),X3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),V3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W3=new X({}),Q3=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L877"}}),U3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),J3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Y3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z3=new X({}),ey=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L824"}}),ry=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),ay=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new X({}),ly=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L799"}}),dy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),fy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),my=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new X({}),hy=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L806"}}),_y=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),by=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fy=new X({}),Cy=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_auto.py#L815"}}),Ey=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),wy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ay=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ly=new X({}),By=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),ky=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ry=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Sy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Py=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$y=new X({}),Iy=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),Dy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),qy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gy=new X({}),Xy=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),zy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Wy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Qy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uy=new X({}),Jy=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),Ky=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Zy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),ew=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tw=new X({}),aw=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),sw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),iw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cw=new X({}),fw=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),gw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),pw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_w=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uw=new X({}),bw=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),Tw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Cw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Mw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ew=new X({}),yw=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),Aw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Bw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kw=new X({}),Rw=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),Pw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),$w=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),Iw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dw=new X({}),Nw=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),Ow=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Gw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Xw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zw=new X({}),Ww=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),Hw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Uw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),Jw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Kw=new X({}),Zw=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),oA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),rA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),tA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nA=new X({}),sA=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),iA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),dA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),cA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mA=new X({}),gA=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),pA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),_A=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),uA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vA=new X({}),TA=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),CA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),MA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),EA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wA=new X({}),AA=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),BA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),kA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SA=new X({}),PA=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),IA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),jA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),DA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qA=new X({}),OA=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),XA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),zA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new X({}),HA=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),JA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),KA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e0=new X({}),o0=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),t0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),a0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),n0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l0=new X({}),i0=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),c0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),f0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),m0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h0=new X({}),p0=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),u0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),b0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),v0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F0=new X({}),C0=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),E0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),y0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),w0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L0=new X({}),B0=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),k0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),R0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),S0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I0=new X({}),j0=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),N0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15986/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15986/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),q0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),O0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15986/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15986/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15986/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Pe=l(),de=a("h1"),he=a("a"),io=a("span"),f(fe.$$.fragment),Fe=l(),Vo=a("span"),ji=o("Auto Classes"),If=l(),fa=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),QM=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Le=l(),co=a("p"),qi=o("Instantiating one of "),On=a("a"),HM=o("AutoConfig"),Gn=o(", "),Xn=a("a"),UM=o("AutoModel"),Oi=o(`, and
`),Vn=a("a"),JM=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(qa.$$.fragment),fo=l(),pe=a("p"),qL=o("will create a model that is an instance of "),Xi=a("a"),OL=o("BertModel"),GL=o("."),zo=l(),Oa=a("p"),XL=o("There is one class of "),Nf=a("code"),VL=o("AutoModel"),TPe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),sxe=l(),Vi=a("h2"),qf=a("a"),hQ=a("span"),f(YM.$$.fragment),FPe=l(),pQ=a("span"),CPe=o("Extending the Auto Classes"),lxe=l(),zn=a("p"),MPe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),_Q=a("code"),EPe=o("NewModel"),yPe=o(", make sure you have a "),uQ=a("code"),wPe=o("NewModelConfig"),APe=o(` then you can add those to the auto
classes like this:`),ixe=l(),f(KM.$$.fragment),dxe=l(),zL=a("p"),LPe=o("You will then be able to use the auto classes like you would usually do!"),cxe=l(),f(Of.$$.fragment),fxe=l(),zi=a("h2"),Gf=a("a"),bQ=a("span"),f(ZM.$$.fragment),BPe=l(),vQ=a("span"),xPe=o("AutoConfig"),mxe=l(),Wo=a("div"),f(e4.$$.fragment),kPe=l(),o4=a("p"),RPe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),WL=a("a"),SPe=o("from_pretrained()"),PPe=o(" class method."),$Pe=l(),r4=a("p"),IPe=o("This class cannot be instantiated directly using "),TQ=a("code"),jPe=o("__init__()"),DPe=o(" (throws an error)."),NPe=l(),mo=a("div"),f(t4.$$.fragment),qPe=l(),FQ=a("p"),OPe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),GPe=l(),Wi=a("p"),XPe=o("The configuration class to instantiate is selected based on the "),CQ=a("code"),VPe=o("model_type"),zPe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),MQ=a("code"),WPe=o("pretrained_model_name_or_path"),QPe=o(":"),HPe=l(),v=a("ul"),Xf=a("li"),EQ=a("strong"),UPe=o("albert"),JPe=o(" \u2014 "),QL=a("a"),YPe=o("AlbertConfig"),KPe=o(" (ALBERT model)"),ZPe=l(),Vf=a("li"),yQ=a("strong"),e$e=o("bart"),o$e=o(" \u2014 "),HL=a("a"),r$e=o("BartConfig"),t$e=o(" (BART model)"),a$e=l(),zf=a("li"),wQ=a("strong"),n$e=o("beit"),s$e=o(" \u2014 "),UL=a("a"),l$e=o("BeitConfig"),i$e=o(" (BEiT model)"),d$e=l(),Wf=a("li"),AQ=a("strong"),c$e=o("bert"),f$e=o(" \u2014 "),JL=a("a"),m$e=o("BertConfig"),g$e=o(" (BERT model)"),h$e=l(),Qf=a("li"),LQ=a("strong"),p$e=o("bert-generation"),_$e=o(" \u2014 "),YL=a("a"),u$e=o("BertGenerationConfig"),b$e=o(" (Bert Generation model)"),v$e=l(),Hf=a("li"),BQ=a("strong"),T$e=o("big_bird"),F$e=o(" \u2014 "),KL=a("a"),C$e=o("BigBirdConfig"),M$e=o(" (BigBird model)"),E$e=l(),Uf=a("li"),xQ=a("strong"),y$e=o("bigbird_pegasus"),w$e=o(" \u2014 "),ZL=a("a"),A$e=o("BigBirdPegasusConfig"),L$e=o(" (BigBirdPegasus model)"),B$e=l(),Jf=a("li"),kQ=a("strong"),x$e=o("blenderbot"),k$e=o(" \u2014 "),e7=a("a"),R$e=o("BlenderbotConfig"),S$e=o(" (Blenderbot model)"),P$e=l(),Yf=a("li"),RQ=a("strong"),$$e=o("blenderbot-small"),I$e=o(" \u2014 "),o7=a("a"),j$e=o("BlenderbotSmallConfig"),D$e=o(" (BlenderbotSmall model)"),N$e=l(),Kf=a("li"),SQ=a("strong"),q$e=o("camembert"),O$e=o(" \u2014 "),r7=a("a"),G$e=o("CamembertConfig"),X$e=o(" (CamemBERT model)"),V$e=l(),Zf=a("li"),PQ=a("strong"),z$e=o("canine"),W$e=o(" \u2014 "),t7=a("a"),Q$e=o("CanineConfig"),H$e=o(" (Canine model)"),U$e=l(),em=a("li"),$Q=a("strong"),J$e=o("clip"),Y$e=o(" \u2014 "),a7=a("a"),K$e=o("CLIPConfig"),Z$e=o(" (CLIP model)"),eIe=l(),om=a("li"),IQ=a("strong"),oIe=o("convbert"),rIe=o(" \u2014 "),n7=a("a"),tIe=o("ConvBertConfig"),aIe=o(" (ConvBERT model)"),nIe=l(),rm=a("li"),jQ=a("strong"),sIe=o("convnext"),lIe=o(" \u2014 "),s7=a("a"),iIe=o("ConvNextConfig"),dIe=o(" (ConvNext model)"),cIe=l(),tm=a("li"),DQ=a("strong"),fIe=o("ctrl"),mIe=o(" \u2014 "),l7=a("a"),gIe=o("CTRLConfig"),hIe=o(" (CTRL model)"),pIe=l(),am=a("li"),NQ=a("strong"),_Ie=o("data2vec-audio"),uIe=o(" \u2014 "),i7=a("a"),bIe=o("Data2VecAudioConfig"),vIe=o(" (Data2VecAudio model)"),TIe=l(),nm=a("li"),qQ=a("strong"),FIe=o("data2vec-text"),CIe=o(" \u2014 "),d7=a("a"),MIe=o("Data2VecTextConfig"),EIe=o(" (Data2VecText model)"),yIe=l(),sm=a("li"),OQ=a("strong"),wIe=o("deberta"),AIe=o(" \u2014 "),c7=a("a"),LIe=o("DebertaConfig"),BIe=o(" (DeBERTa model)"),xIe=l(),lm=a("li"),GQ=a("strong"),kIe=o("deberta-v2"),RIe=o(" \u2014 "),f7=a("a"),SIe=o("DebertaV2Config"),PIe=o(" (DeBERTa-v2 model)"),$Ie=l(),im=a("li"),XQ=a("strong"),IIe=o("deit"),jIe=o(" \u2014 "),m7=a("a"),DIe=o("DeiTConfig"),NIe=o(" (DeiT model)"),qIe=l(),dm=a("li"),VQ=a("strong"),OIe=o("detr"),GIe=o(" \u2014 "),g7=a("a"),XIe=o("DetrConfig"),VIe=o(" (DETR model)"),zIe=l(),cm=a("li"),zQ=a("strong"),WIe=o("distilbert"),QIe=o(" \u2014 "),h7=a("a"),HIe=o("DistilBertConfig"),UIe=o(" (DistilBERT model)"),JIe=l(),fm=a("li"),WQ=a("strong"),YIe=o("dpr"),KIe=o(" \u2014 "),p7=a("a"),ZIe=o("DPRConfig"),eje=o(" (DPR model)"),oje=l(),mm=a("li"),QQ=a("strong"),rje=o("electra"),tje=o(" \u2014 "),_7=a("a"),aje=o("ElectraConfig"),nje=o(" (ELECTRA model)"),sje=l(),gm=a("li"),HQ=a("strong"),lje=o("encoder-decoder"),ije=o(" \u2014 "),u7=a("a"),dje=o("EncoderDecoderConfig"),cje=o(" (Encoder decoder model)"),fje=l(),hm=a("li"),UQ=a("strong"),mje=o("flaubert"),gje=o(" \u2014 "),b7=a("a"),hje=o("FlaubertConfig"),pje=o(" (FlauBERT model)"),_je=l(),pm=a("li"),JQ=a("strong"),uje=o("fnet"),bje=o(" \u2014 "),v7=a("a"),vje=o("FNetConfig"),Tje=o(" (FNet model)"),Fje=l(),_m=a("li"),YQ=a("strong"),Cje=o("fsmt"),Mje=o(" \u2014 "),T7=a("a"),Eje=o("FSMTConfig"),yje=o(" (FairSeq Machine-Translation model)"),wje=l(),um=a("li"),KQ=a("strong"),Aje=o("funnel"),Lje=o(" \u2014 "),F7=a("a"),Bje=o("FunnelConfig"),xje=o(" (Funnel Transformer model)"),kje=l(),bm=a("li"),ZQ=a("strong"),Rje=o("gpt2"),Sje=o(" \u2014 "),C7=a("a"),Pje=o("GPT2Config"),$je=o(" (OpenAI GPT-2 model)"),Ije=l(),vm=a("li"),eH=a("strong"),jje=o("gpt_neo"),Dje=o(" \u2014 "),M7=a("a"),Nje=o("GPTNeoConfig"),qje=o(" (GPT Neo model)"),Oje=l(),Tm=a("li"),oH=a("strong"),Gje=o("gptj"),Xje=o(" \u2014 "),E7=a("a"),Vje=o("GPTJConfig"),zje=o(" (GPT-J model)"),Wje=l(),Fm=a("li"),rH=a("strong"),Qje=o("hubert"),Hje=o(" \u2014 "),y7=a("a"),Uje=o("HubertConfig"),Jje=o(" (Hubert model)"),Yje=l(),Cm=a("li"),tH=a("strong"),Kje=o("ibert"),Zje=o(" \u2014 "),w7=a("a"),eDe=o("IBertConfig"),oDe=o(" (I-BERT model)"),rDe=l(),Mm=a("li"),aH=a("strong"),tDe=o("imagegpt"),aDe=o(" \u2014 "),A7=a("a"),nDe=o("ImageGPTConfig"),sDe=o(" (ImageGPT model)"),lDe=l(),Em=a("li"),nH=a("strong"),iDe=o("layoutlm"),dDe=o(" \u2014 "),L7=a("a"),cDe=o("LayoutLMConfig"),fDe=o(" (LayoutLM model)"),mDe=l(),ym=a("li"),sH=a("strong"),gDe=o("layoutlmv2"),hDe=o(" \u2014 "),B7=a("a"),pDe=o("LayoutLMv2Config"),_De=o(" (LayoutLMv2 model)"),uDe=l(),wm=a("li"),lH=a("strong"),bDe=o("led"),vDe=o(" \u2014 "),x7=a("a"),TDe=o("LEDConfig"),FDe=o(" (LED model)"),CDe=l(),Am=a("li"),iH=a("strong"),MDe=o("longformer"),EDe=o(" \u2014 "),k7=a("a"),yDe=o("LongformerConfig"),wDe=o(" (Longformer model)"),ADe=l(),Lm=a("li"),dH=a("strong"),LDe=o("luke"),BDe=o(" \u2014 "),R7=a("a"),xDe=o("LukeConfig"),kDe=o(" (LUKE model)"),RDe=l(),Bm=a("li"),cH=a("strong"),SDe=o("lxmert"),PDe=o(" \u2014 "),S7=a("a"),$De=o("LxmertConfig"),IDe=o(" (LXMERT model)"),jDe=l(),xm=a("li"),fH=a("strong"),DDe=o("m2m_100"),NDe=o(" \u2014 "),P7=a("a"),qDe=o("M2M100Config"),ODe=o(" (M2M100 model)"),GDe=l(),km=a("li"),mH=a("strong"),XDe=o("marian"),VDe=o(" \u2014 "),$7=a("a"),zDe=o("MarianConfig"),WDe=o(" (Marian model)"),QDe=l(),Rm=a("li"),gH=a("strong"),HDe=o("maskformer"),UDe=o(" \u2014 "),I7=a("a"),JDe=o("MaskFormerConfig"),YDe=o(" (MaskFormer model)"),KDe=l(),Sm=a("li"),hH=a("strong"),ZDe=o("mbart"),eNe=o(" \u2014 "),j7=a("a"),oNe=o("MBartConfig"),rNe=o(" (mBART model)"),tNe=l(),Pm=a("li"),pH=a("strong"),aNe=o("megatron-bert"),nNe=o(" \u2014 "),D7=a("a"),sNe=o("MegatronBertConfig"),lNe=o(" (MegatronBert model)"),iNe=l(),$m=a("li"),_H=a("strong"),dNe=o("mobilebert"),cNe=o(" \u2014 "),N7=a("a"),fNe=o("MobileBertConfig"),mNe=o(" (MobileBERT model)"),gNe=l(),Im=a("li"),uH=a("strong"),hNe=o("mpnet"),pNe=o(" \u2014 "),q7=a("a"),_Ne=o("MPNetConfig"),uNe=o(" (MPNet model)"),bNe=l(),jm=a("li"),bH=a("strong"),vNe=o("mt5"),TNe=o(" \u2014 "),O7=a("a"),FNe=o("MT5Config"),CNe=o(" (mT5 model)"),MNe=l(),Dm=a("li"),vH=a("strong"),ENe=o("nystromformer"),yNe=o(" \u2014 "),G7=a("a"),wNe=o("NystromformerConfig"),ANe=o(" (Nystromformer model)"),LNe=l(),Nm=a("li"),TH=a("strong"),BNe=o("openai-gpt"),xNe=o(" \u2014 "),X7=a("a"),kNe=o("OpenAIGPTConfig"),RNe=o(" (OpenAI GPT model)"),SNe=l(),qm=a("li"),FH=a("strong"),PNe=o("pegasus"),$Ne=o(" \u2014 "),V7=a("a"),INe=o("PegasusConfig"),jNe=o(" (Pegasus model)"),DNe=l(),Om=a("li"),CH=a("strong"),NNe=o("perceiver"),qNe=o(" \u2014 "),z7=a("a"),ONe=o("PerceiverConfig"),GNe=o(" (Perceiver model)"),XNe=l(),Gm=a("li"),MH=a("strong"),VNe=o("plbart"),zNe=o(" \u2014 "),W7=a("a"),WNe=o("PLBartConfig"),QNe=o(" (PLBart model)"),HNe=l(),Xm=a("li"),EH=a("strong"),UNe=o("poolformer"),JNe=o(" \u2014 "),Q7=a("a"),YNe=o("PoolFormerConfig"),KNe=o(" (PoolFormer model)"),ZNe=l(),Vm=a("li"),yH=a("strong"),eqe=o("prophetnet"),oqe=o(" \u2014 "),H7=a("a"),rqe=o("ProphetNetConfig"),tqe=o(" (ProphetNet model)"),aqe=l(),zm=a("li"),wH=a("strong"),nqe=o("qdqbert"),sqe=o(" \u2014 "),U7=a("a"),lqe=o("QDQBertConfig"),iqe=o(" (QDQBert model)"),dqe=l(),Wm=a("li"),AH=a("strong"),cqe=o("rag"),fqe=o(" \u2014 "),J7=a("a"),mqe=o("RagConfig"),gqe=o(" (RAG model)"),hqe=l(),Qm=a("li"),LH=a("strong"),pqe=o("realm"),_qe=o(" \u2014 "),Y7=a("a"),uqe=o("RealmConfig"),bqe=o(" (Realm model)"),vqe=l(),Hm=a("li"),BH=a("strong"),Tqe=o("reformer"),Fqe=o(" \u2014 "),K7=a("a"),Cqe=o("ReformerConfig"),Mqe=o(" (Reformer model)"),Eqe=l(),Um=a("li"),xH=a("strong"),yqe=o("rembert"),wqe=o(" \u2014 "),Z7=a("a"),Aqe=o("RemBertConfig"),Lqe=o(" (RemBERT model)"),Bqe=l(),Jm=a("li"),kH=a("strong"),xqe=o("retribert"),kqe=o(" \u2014 "),eB=a("a"),Rqe=o("RetriBertConfig"),Sqe=o(" (RetriBERT model)"),Pqe=l(),Ym=a("li"),RH=a("strong"),$qe=o("roberta"),Iqe=o(" \u2014 "),oB=a("a"),jqe=o("RobertaConfig"),Dqe=o(" (RoBERTa model)"),Nqe=l(),Km=a("li"),SH=a("strong"),qqe=o("roformer"),Oqe=o(" \u2014 "),rB=a("a"),Gqe=o("RoFormerConfig"),Xqe=o(" (RoFormer model)"),Vqe=l(),Zm=a("li"),PH=a("strong"),zqe=o("segformer"),Wqe=o(" \u2014 "),tB=a("a"),Qqe=o("SegformerConfig"),Hqe=o(" (SegFormer model)"),Uqe=l(),eg=a("li"),$H=a("strong"),Jqe=o("sew"),Yqe=o(" \u2014 "),aB=a("a"),Kqe=o("SEWConfig"),Zqe=o(" (SEW model)"),eOe=l(),og=a("li"),IH=a("strong"),oOe=o("sew-d"),rOe=o(" \u2014 "),nB=a("a"),tOe=o("SEWDConfig"),aOe=o(" (SEW-D model)"),nOe=l(),rg=a("li"),jH=a("strong"),sOe=o("speech-encoder-decoder"),lOe=o(" \u2014 "),sB=a("a"),iOe=o("SpeechEncoderDecoderConfig"),dOe=o(" (Speech Encoder decoder model)"),cOe=l(),tg=a("li"),DH=a("strong"),fOe=o("speech_to_text"),mOe=o(" \u2014 "),lB=a("a"),gOe=o("Speech2TextConfig"),hOe=o(" (Speech2Text model)"),pOe=l(),ag=a("li"),NH=a("strong"),_Oe=o("speech_to_text_2"),uOe=o(" \u2014 "),iB=a("a"),bOe=o("Speech2Text2Config"),vOe=o(" (Speech2Text2 model)"),TOe=l(),ng=a("li"),qH=a("strong"),FOe=o("splinter"),COe=o(" \u2014 "),dB=a("a"),MOe=o("SplinterConfig"),EOe=o(" (Splinter model)"),yOe=l(),sg=a("li"),OH=a("strong"),wOe=o("squeezebert"),AOe=o(" \u2014 "),cB=a("a"),LOe=o("SqueezeBertConfig"),BOe=o(" (SqueezeBERT model)"),xOe=l(),lg=a("li"),GH=a("strong"),kOe=o("swin"),ROe=o(" \u2014 "),fB=a("a"),SOe=o("SwinConfig"),POe=o(" (Swin model)"),$Oe=l(),ig=a("li"),XH=a("strong"),IOe=o("t5"),jOe=o(" \u2014 "),mB=a("a"),DOe=o("T5Config"),NOe=o(" (T5 model)"),qOe=l(),dg=a("li"),VH=a("strong"),OOe=o("tapas"),GOe=o(" \u2014 "),gB=a("a"),XOe=o("TapasConfig"),VOe=o(" (TAPAS model)"),zOe=l(),cg=a("li"),zH=a("strong"),WOe=o("transfo-xl"),QOe=o(" \u2014 "),hB=a("a"),HOe=o("TransfoXLConfig"),UOe=o(" (Transformer-XL model)"),JOe=l(),fg=a("li"),WH=a("strong"),YOe=o("trocr"),KOe=o(" \u2014 "),pB=a("a"),ZOe=o("TrOCRConfig"),eGe=o(" (TrOCR model)"),oGe=l(),mg=a("li"),QH=a("strong"),rGe=o("unispeech"),tGe=o(" \u2014 "),_B=a("a"),aGe=o("UniSpeechConfig"),nGe=o(" (UniSpeech model)"),sGe=l(),gg=a("li"),HH=a("strong"),lGe=o("unispeech-sat"),iGe=o(" \u2014 "),uB=a("a"),dGe=o("UniSpeechSatConfig"),cGe=o(" (UniSpeechSat model)"),fGe=l(),hg=a("li"),UH=a("strong"),mGe=o("vilt"),gGe=o(" \u2014 "),bB=a("a"),hGe=o("ViltConfig"),pGe=o(" (ViLT model)"),_Ge=l(),pg=a("li"),JH=a("strong"),uGe=o("vision-encoder-decoder"),bGe=o(" \u2014 "),vB=a("a"),vGe=o("VisionEncoderDecoderConfig"),TGe=o(" (Vision Encoder decoder model)"),FGe=l(),_g=a("li"),YH=a("strong"),CGe=o("vision-text-dual-encoder"),MGe=o(" \u2014 "),TB=a("a"),EGe=o("VisionTextDualEncoderConfig"),yGe=o(" (VisionTextDualEncoder model)"),wGe=l(),ug=a("li"),KH=a("strong"),AGe=o("visual_bert"),LGe=o(" \u2014 "),FB=a("a"),BGe=o("VisualBertConfig"),xGe=o(" (VisualBert model)"),kGe=l(),bg=a("li"),ZH=a("strong"),RGe=o("vit"),SGe=o(" \u2014 "),CB=a("a"),PGe=o("ViTConfig"),$Ge=o(" (ViT model)"),IGe=l(),vg=a("li"),eU=a("strong"),jGe=o("vit_mae"),DGe=o(" \u2014 "),MB=a("a"),NGe=o("ViTMAEConfig"),qGe=o(" (ViTMAE model)"),OGe=l(),Tg=a("li"),oU=a("strong"),GGe=o("wav2vec2"),XGe=o(" \u2014 "),EB=a("a"),VGe=o("Wav2Vec2Config"),zGe=o(" (Wav2Vec2 model)"),WGe=l(),Fg=a("li"),rU=a("strong"),QGe=o("wavlm"),HGe=o(" \u2014 "),yB=a("a"),UGe=o("WavLMConfig"),JGe=o(" (WavLM model)"),YGe=l(),Cg=a("li"),tU=a("strong"),KGe=o("xglm"),ZGe=o(" \u2014 "),wB=a("a"),eXe=o("XGLMConfig"),oXe=o(" (XGLM model)"),rXe=l(),Mg=a("li"),aU=a("strong"),tXe=o("xlm"),aXe=o(" \u2014 "),AB=a("a"),nXe=o("XLMConfig"),sXe=o(" (XLM model)"),lXe=l(),Eg=a("li"),nU=a("strong"),iXe=o("xlm-prophetnet"),dXe=o(" \u2014 "),LB=a("a"),cXe=o("XLMProphetNetConfig"),fXe=o(" (XLMProphetNet model)"),mXe=l(),yg=a("li"),sU=a("strong"),gXe=o("xlm-roberta"),hXe=o(" \u2014 "),BB=a("a"),pXe=o("XLMRobertaConfig"),_Xe=o(" (XLM-RoBERTa model)"),uXe=l(),wg=a("li"),lU=a("strong"),bXe=o("xlm-roberta-xl"),vXe=o(" \u2014 "),xB=a("a"),TXe=o("XLMRobertaXLConfig"),FXe=o(" (XLM-RoBERTa-XL model)"),CXe=l(),Ag=a("li"),iU=a("strong"),MXe=o("xlnet"),EXe=o(" \u2014 "),kB=a("a"),yXe=o("XLNetConfig"),wXe=o(" (XLNet model)"),AXe=l(),Lg=a("li"),dU=a("strong"),LXe=o("yoso"),BXe=o(" \u2014 "),RB=a("a"),xXe=o("YosoConfig"),kXe=o(" (YOSO model)"),RXe=l(),cU=a("p"),SXe=o("Examples:"),PXe=l(),f(a4.$$.fragment),$Xe=l(),Bg=a("div"),f(n4.$$.fragment),IXe=l(),fU=a("p"),jXe=o("Register a new configuration for this class."),gxe=l(),Qi=a("h2"),xg=a("a"),mU=a("span"),f(s4.$$.fragment),DXe=l(),gU=a("span"),NXe=o("AutoTokenizer"),hxe=l(),Qo=a("div"),f(l4.$$.fragment),qXe=l(),i4=a("p"),OXe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),SB=a("a"),GXe=o("AutoTokenizer.from_pretrained()"),XXe=o(" class method."),VXe=l(),d4=a("p"),zXe=o("This class cannot be instantiated directly using "),hU=a("code"),WXe=o("__init__()"),QXe=o(" (throws an error)."),HXe=l(),go=a("div"),f(c4.$$.fragment),UXe=l(),pU=a("p"),JXe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),YXe=l(),Ga=a("p"),KXe=o("The tokenizer class to instantiate is selected based on the "),_U=a("code"),ZXe=o("model_type"),eVe=o(` property of the config object (either
passed as an argument or loaded from `),uU=a("code"),oVe=o("pretrained_model_name_or_path"),rVe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bU=a("code"),tVe=o("pretrained_model_name_or_path"),aVe=o(":"),nVe=l(),E=a("ul"),Wn=a("li"),vU=a("strong"),sVe=o("albert"),lVe=o(" \u2014 "),PB=a("a"),iVe=o("AlbertTokenizer"),dVe=o(" or "),$B=a("a"),cVe=o("AlbertTokenizerFast"),fVe=o(" (ALBERT model)"),mVe=l(),Qn=a("li"),TU=a("strong"),gVe=o("bart"),hVe=o(" \u2014 "),IB=a("a"),pVe=o("BartTokenizer"),_Ve=o(" or "),jB=a("a"),uVe=o("BartTokenizerFast"),bVe=o(" (BART model)"),vVe=l(),Hn=a("li"),FU=a("strong"),TVe=o("barthez"),FVe=o(" \u2014 "),DB=a("a"),CVe=o("BarthezTokenizer"),MVe=o(" or "),NB=a("a"),EVe=o("BarthezTokenizerFast"),yVe=o(" (BARThez model)"),wVe=l(),kg=a("li"),CU=a("strong"),AVe=o("bartpho"),LVe=o(" \u2014 "),qB=a("a"),BVe=o("BartphoTokenizer"),xVe=o(" (BARTpho model)"),kVe=l(),Un=a("li"),MU=a("strong"),RVe=o("bert"),SVe=o(" \u2014 "),OB=a("a"),PVe=o("BertTokenizer"),$Ve=o(" or "),GB=a("a"),IVe=o("BertTokenizerFast"),jVe=o(" (BERT model)"),DVe=l(),Rg=a("li"),EU=a("strong"),NVe=o("bert-generation"),qVe=o(" \u2014 "),XB=a("a"),OVe=o("BertGenerationTokenizer"),GVe=o(" (Bert Generation model)"),XVe=l(),Sg=a("li"),yU=a("strong"),VVe=o("bert-japanese"),zVe=o(" \u2014 "),VB=a("a"),WVe=o("BertJapaneseTokenizer"),QVe=o(" (BertJapanese model)"),HVe=l(),Pg=a("li"),wU=a("strong"),UVe=o("bertweet"),JVe=o(" \u2014 "),zB=a("a"),YVe=o("BertweetTokenizer"),KVe=o(" (Bertweet model)"),ZVe=l(),Jn=a("li"),AU=a("strong"),eze=o("big_bird"),oze=o(" \u2014 "),WB=a("a"),rze=o("BigBirdTokenizer"),tze=o(" or "),QB=a("a"),aze=o("BigBirdTokenizerFast"),nze=o(" (BigBird model)"),sze=l(),Yn=a("li"),LU=a("strong"),lze=o("bigbird_pegasus"),ize=o(" \u2014 "),HB=a("a"),dze=o("PegasusTokenizer"),cze=o(" or "),UB=a("a"),fze=o("PegasusTokenizerFast"),mze=o(" (BigBirdPegasus model)"),gze=l(),Kn=a("li"),BU=a("strong"),hze=o("blenderbot"),pze=o(" \u2014 "),JB=a("a"),_ze=o("BlenderbotTokenizer"),uze=o(" or "),YB=a("a"),bze=o("BlenderbotTokenizerFast"),vze=o(" (Blenderbot model)"),Tze=l(),$g=a("li"),xU=a("strong"),Fze=o("blenderbot-small"),Cze=o(" \u2014 "),KB=a("a"),Mze=o("BlenderbotSmallTokenizer"),Eze=o(" (BlenderbotSmall model)"),yze=l(),Ig=a("li"),kU=a("strong"),wze=o("byt5"),Aze=o(" \u2014 "),ZB=a("a"),Lze=o("ByT5Tokenizer"),Bze=o(" (ByT5 model)"),xze=l(),Zn=a("li"),RU=a("strong"),kze=o("camembert"),Rze=o(" \u2014 "),ex=a("a"),Sze=o("CamembertTokenizer"),Pze=o(" or "),ox=a("a"),$ze=o("CamembertTokenizerFast"),Ize=o(" (CamemBERT model)"),jze=l(),jg=a("li"),SU=a("strong"),Dze=o("canine"),Nze=o(" \u2014 "),rx=a("a"),qze=o("CanineTokenizer"),Oze=o(" (Canine model)"),Gze=l(),es=a("li"),PU=a("strong"),Xze=o("clip"),Vze=o(" \u2014 "),tx=a("a"),zze=o("CLIPTokenizer"),Wze=o(" or "),ax=a("a"),Qze=o("CLIPTokenizerFast"),Hze=o(" (CLIP model)"),Uze=l(),os=a("li"),$U=a("strong"),Jze=o("convbert"),Yze=o(" \u2014 "),nx=a("a"),Kze=o("ConvBertTokenizer"),Zze=o(" or "),sx=a("a"),eWe=o("ConvBertTokenizerFast"),oWe=o(" (ConvBERT model)"),rWe=l(),rs=a("li"),IU=a("strong"),tWe=o("cpm"),aWe=o(" \u2014 "),lx=a("a"),nWe=o("CpmTokenizer"),sWe=o(" or "),jU=a("code"),lWe=o("CpmTokenizerFast"),iWe=o(" (CPM model)"),dWe=l(),Dg=a("li"),DU=a("strong"),cWe=o("ctrl"),fWe=o(" \u2014 "),ix=a("a"),mWe=o("CTRLTokenizer"),gWe=o(" (CTRL model)"),hWe=l(),ts=a("li"),NU=a("strong"),pWe=o("deberta"),_We=o(" \u2014 "),dx=a("a"),uWe=o("DebertaTokenizer"),bWe=o(" or "),cx=a("a"),vWe=o("DebertaTokenizerFast"),TWe=o(" (DeBERTa model)"),FWe=l(),Ng=a("li"),qU=a("strong"),CWe=o("deberta-v2"),MWe=o(" \u2014 "),fx=a("a"),EWe=o("DebertaV2Tokenizer"),yWe=o(" (DeBERTa-v2 model)"),wWe=l(),as=a("li"),OU=a("strong"),AWe=o("distilbert"),LWe=o(" \u2014 "),mx=a("a"),BWe=o("DistilBertTokenizer"),xWe=o(" or "),gx=a("a"),kWe=o("DistilBertTokenizerFast"),RWe=o(" (DistilBERT model)"),SWe=l(),ns=a("li"),GU=a("strong"),PWe=o("dpr"),$We=o(" \u2014 "),hx=a("a"),IWe=o("DPRQuestionEncoderTokenizer"),jWe=o(" or "),px=a("a"),DWe=o("DPRQuestionEncoderTokenizerFast"),NWe=o(" (DPR model)"),qWe=l(),ss=a("li"),XU=a("strong"),OWe=o("electra"),GWe=o(" \u2014 "),_x=a("a"),XWe=o("ElectraTokenizer"),VWe=o(" or "),ux=a("a"),zWe=o("ElectraTokenizerFast"),WWe=o(" (ELECTRA model)"),QWe=l(),qg=a("li"),VU=a("strong"),HWe=o("flaubert"),UWe=o(" \u2014 "),bx=a("a"),JWe=o("FlaubertTokenizer"),YWe=o(" (FlauBERT model)"),KWe=l(),ls=a("li"),zU=a("strong"),ZWe=o("fnet"),eQe=o(" \u2014 "),vx=a("a"),oQe=o("FNetTokenizer"),rQe=o(" or "),Tx=a("a"),tQe=o("FNetTokenizerFast"),aQe=o(" (FNet model)"),nQe=l(),Og=a("li"),WU=a("strong"),sQe=o("fsmt"),lQe=o(" \u2014 "),Fx=a("a"),iQe=o("FSMTTokenizer"),dQe=o(" (FairSeq Machine-Translation model)"),cQe=l(),is=a("li"),QU=a("strong"),fQe=o("funnel"),mQe=o(" \u2014 "),Cx=a("a"),gQe=o("FunnelTokenizer"),hQe=o(" or "),Mx=a("a"),pQe=o("FunnelTokenizerFast"),_Qe=o(" (Funnel Transformer model)"),uQe=l(),ds=a("li"),HU=a("strong"),bQe=o("gpt2"),vQe=o(" \u2014 "),Ex=a("a"),TQe=o("GPT2Tokenizer"),FQe=o(" or "),yx=a("a"),CQe=o("GPT2TokenizerFast"),MQe=o(" (OpenAI GPT-2 model)"),EQe=l(),cs=a("li"),UU=a("strong"),yQe=o("gpt_neo"),wQe=o(" \u2014 "),wx=a("a"),AQe=o("GPT2Tokenizer"),LQe=o(" or "),Ax=a("a"),BQe=o("GPT2TokenizerFast"),xQe=o(" (GPT Neo model)"),kQe=l(),fs=a("li"),JU=a("strong"),RQe=o("herbert"),SQe=o(" \u2014 "),Lx=a("a"),PQe=o("HerbertTokenizer"),$Qe=o(" or "),Bx=a("a"),IQe=o("HerbertTokenizerFast"),jQe=o(" (HerBERT model)"),DQe=l(),Gg=a("li"),YU=a("strong"),NQe=o("hubert"),qQe=o(" \u2014 "),xx=a("a"),OQe=o("Wav2Vec2CTCTokenizer"),GQe=o(" (Hubert model)"),XQe=l(),ms=a("li"),KU=a("strong"),VQe=o("ibert"),zQe=o(" \u2014 "),kx=a("a"),WQe=o("RobertaTokenizer"),QQe=o(" or "),Rx=a("a"),HQe=o("RobertaTokenizerFast"),UQe=o(" (I-BERT model)"),JQe=l(),gs=a("li"),ZU=a("strong"),YQe=o("layoutlm"),KQe=o(" \u2014 "),Sx=a("a"),ZQe=o("LayoutLMTokenizer"),eHe=o(" or "),Px=a("a"),oHe=o("LayoutLMTokenizerFast"),rHe=o(" (LayoutLM model)"),tHe=l(),hs=a("li"),eJ=a("strong"),aHe=o("layoutlmv2"),nHe=o(" \u2014 "),$x=a("a"),sHe=o("LayoutLMv2Tokenizer"),lHe=o(" or "),Ix=a("a"),iHe=o("LayoutLMv2TokenizerFast"),dHe=o(" (LayoutLMv2 model)"),cHe=l(),ps=a("li"),oJ=a("strong"),fHe=o("layoutxlm"),mHe=o(" \u2014 "),jx=a("a"),gHe=o("LayoutXLMTokenizer"),hHe=o(" or "),Dx=a("a"),pHe=o("LayoutXLMTokenizerFast"),_He=o(" (LayoutXLM model)"),uHe=l(),_s=a("li"),rJ=a("strong"),bHe=o("led"),vHe=o(" \u2014 "),Nx=a("a"),THe=o("LEDTokenizer"),FHe=o(" or "),qx=a("a"),CHe=o("LEDTokenizerFast"),MHe=o(" (LED model)"),EHe=l(),us=a("li"),tJ=a("strong"),yHe=o("longformer"),wHe=o(" \u2014 "),Ox=a("a"),AHe=o("LongformerTokenizer"),LHe=o(" or "),Gx=a("a"),BHe=o("LongformerTokenizerFast"),xHe=o(" (Longformer model)"),kHe=l(),Xg=a("li"),aJ=a("strong"),RHe=o("luke"),SHe=o(" \u2014 "),Xx=a("a"),PHe=o("LukeTokenizer"),$He=o(" (LUKE model)"),IHe=l(),bs=a("li"),nJ=a("strong"),jHe=o("lxmert"),DHe=o(" \u2014 "),Vx=a("a"),NHe=o("LxmertTokenizer"),qHe=o(" or "),zx=a("a"),OHe=o("LxmertTokenizerFast"),GHe=o(" (LXMERT model)"),XHe=l(),Vg=a("li"),sJ=a("strong"),VHe=o("m2m_100"),zHe=o(" \u2014 "),Wx=a("a"),WHe=o("M2M100Tokenizer"),QHe=o(" (M2M100 model)"),HHe=l(),zg=a("li"),lJ=a("strong"),UHe=o("marian"),JHe=o(" \u2014 "),Qx=a("a"),YHe=o("MarianTokenizer"),KHe=o(" (Marian model)"),ZHe=l(),vs=a("li"),iJ=a("strong"),eUe=o("mbart"),oUe=o(" \u2014 "),Hx=a("a"),rUe=o("MBartTokenizer"),tUe=o(" or "),Ux=a("a"),aUe=o("MBartTokenizerFast"),nUe=o(" (mBART model)"),sUe=l(),Ts=a("li"),dJ=a("strong"),lUe=o("mbart50"),iUe=o(" \u2014 "),Jx=a("a"),dUe=o("MBart50Tokenizer"),cUe=o(" or "),Yx=a("a"),fUe=o("MBart50TokenizerFast"),mUe=o(" (mBART-50 model)"),gUe=l(),Wg=a("li"),cJ=a("strong"),hUe=o("mluke"),pUe=o(" \u2014 "),Kx=a("a"),_Ue=o("MLukeTokenizer"),uUe=o(" (mLUKE model)"),bUe=l(),Fs=a("li"),fJ=a("strong"),vUe=o("mobilebert"),TUe=o(" \u2014 "),Zx=a("a"),FUe=o("MobileBertTokenizer"),CUe=o(" or "),ek=a("a"),MUe=o("MobileBertTokenizerFast"),EUe=o(" (MobileBERT model)"),yUe=l(),Cs=a("li"),mJ=a("strong"),wUe=o("mpnet"),AUe=o(" \u2014 "),ok=a("a"),LUe=o("MPNetTokenizer"),BUe=o(" or "),rk=a("a"),xUe=o("MPNetTokenizerFast"),kUe=o(" (MPNet model)"),RUe=l(),Ms=a("li"),gJ=a("strong"),SUe=o("mt5"),PUe=o(" \u2014 "),tk=a("a"),$Ue=o("MT5Tokenizer"),IUe=o(" or "),ak=a("a"),jUe=o("MT5TokenizerFast"),DUe=o(" (mT5 model)"),NUe=l(),Es=a("li"),hJ=a("strong"),qUe=o("openai-gpt"),OUe=o(" \u2014 "),nk=a("a"),GUe=o("OpenAIGPTTokenizer"),XUe=o(" or "),sk=a("a"),VUe=o("OpenAIGPTTokenizerFast"),zUe=o(" (OpenAI GPT model)"),WUe=l(),ys=a("li"),pJ=a("strong"),QUe=o("pegasus"),HUe=o(" \u2014 "),lk=a("a"),UUe=o("PegasusTokenizer"),JUe=o(" or "),ik=a("a"),YUe=o("PegasusTokenizerFast"),KUe=o(" (Pegasus model)"),ZUe=l(),Qg=a("li"),_J=a("strong"),eJe=o("perceiver"),oJe=o(" \u2014 "),dk=a("a"),rJe=o("PerceiverTokenizer"),tJe=o(" (Perceiver model)"),aJe=l(),Hg=a("li"),uJ=a("strong"),nJe=o("phobert"),sJe=o(" \u2014 "),ck=a("a"),lJe=o("PhobertTokenizer"),iJe=o(" (PhoBERT model)"),dJe=l(),Ug=a("li"),bJ=a("strong"),cJe=o("plbart"),fJe=o(" \u2014 "),fk=a("a"),mJe=o("PLBartTokenizer"),gJe=o(" (PLBart model)"),hJe=l(),Jg=a("li"),vJ=a("strong"),pJe=o("prophetnet"),_Je=o(" \u2014 "),mk=a("a"),uJe=o("ProphetNetTokenizer"),bJe=o(" (ProphetNet model)"),vJe=l(),ws=a("li"),TJ=a("strong"),TJe=o("qdqbert"),FJe=o(" \u2014 "),gk=a("a"),CJe=o("BertTokenizer"),MJe=o(" or "),hk=a("a"),EJe=o("BertTokenizerFast"),yJe=o(" (QDQBert model)"),wJe=l(),Yg=a("li"),FJ=a("strong"),AJe=o("rag"),LJe=o(" \u2014 "),pk=a("a"),BJe=o("RagTokenizer"),xJe=o(" (RAG model)"),kJe=l(),As=a("li"),CJ=a("strong"),RJe=o("realm"),SJe=o(" \u2014 "),_k=a("a"),PJe=o("RealmTokenizer"),$Je=o(" or "),uk=a("a"),IJe=o("RealmTokenizerFast"),jJe=o(" (Realm model)"),DJe=l(),Ls=a("li"),MJ=a("strong"),NJe=o("reformer"),qJe=o(" \u2014 "),bk=a("a"),OJe=o("ReformerTokenizer"),GJe=o(" or "),vk=a("a"),XJe=o("ReformerTokenizerFast"),VJe=o(" (Reformer model)"),zJe=l(),Bs=a("li"),EJ=a("strong"),WJe=o("rembert"),QJe=o(" \u2014 "),Tk=a("a"),HJe=o("RemBertTokenizer"),UJe=o(" or "),Fk=a("a"),JJe=o("RemBertTokenizerFast"),YJe=o(" (RemBERT model)"),KJe=l(),xs=a("li"),yJ=a("strong"),ZJe=o("retribert"),eYe=o(" \u2014 "),Ck=a("a"),oYe=o("RetriBertTokenizer"),rYe=o(" or "),Mk=a("a"),tYe=o("RetriBertTokenizerFast"),aYe=o(" (RetriBERT model)"),nYe=l(),ks=a("li"),wJ=a("strong"),sYe=o("roberta"),lYe=o(" \u2014 "),Ek=a("a"),iYe=o("RobertaTokenizer"),dYe=o(" or "),yk=a("a"),cYe=o("RobertaTokenizerFast"),fYe=o(" (RoBERTa model)"),mYe=l(),Rs=a("li"),AJ=a("strong"),gYe=o("roformer"),hYe=o(" \u2014 "),wk=a("a"),pYe=o("RoFormerTokenizer"),_Ye=o(" or "),Ak=a("a"),uYe=o("RoFormerTokenizerFast"),bYe=o(" (RoFormer model)"),vYe=l(),Kg=a("li"),LJ=a("strong"),TYe=o("speech_to_text"),FYe=o(" \u2014 "),Lk=a("a"),CYe=o("Speech2TextTokenizer"),MYe=o(" (Speech2Text model)"),EYe=l(),Zg=a("li"),BJ=a("strong"),yYe=o("speech_to_text_2"),wYe=o(" \u2014 "),Bk=a("a"),AYe=o("Speech2Text2Tokenizer"),LYe=o(" (Speech2Text2 model)"),BYe=l(),Ss=a("li"),xJ=a("strong"),xYe=o("splinter"),kYe=o(" \u2014 "),xk=a("a"),RYe=o("SplinterTokenizer"),SYe=o(" or "),kk=a("a"),PYe=o("SplinterTokenizerFast"),$Ye=o(" (Splinter model)"),IYe=l(),Ps=a("li"),kJ=a("strong"),jYe=o("squeezebert"),DYe=o(" \u2014 "),Rk=a("a"),NYe=o("SqueezeBertTokenizer"),qYe=o(" or "),Sk=a("a"),OYe=o("SqueezeBertTokenizerFast"),GYe=o(" (SqueezeBERT model)"),XYe=l(),$s=a("li"),RJ=a("strong"),VYe=o("t5"),zYe=o(" \u2014 "),Pk=a("a"),WYe=o("T5Tokenizer"),QYe=o(" or "),$k=a("a"),HYe=o("T5TokenizerFast"),UYe=o(" (T5 model)"),JYe=l(),eh=a("li"),SJ=a("strong"),YYe=o("tapas"),KYe=o(" \u2014 "),Ik=a("a"),ZYe=o("TapasTokenizer"),eKe=o(" (TAPAS model)"),oKe=l(),oh=a("li"),PJ=a("strong"),rKe=o("transfo-xl"),tKe=o(" \u2014 "),jk=a("a"),aKe=o("TransfoXLTokenizer"),nKe=o(" (Transformer-XL model)"),sKe=l(),rh=a("li"),$J=a("strong"),lKe=o("wav2vec2"),iKe=o(" \u2014 "),Dk=a("a"),dKe=o("Wav2Vec2CTCTokenizer"),cKe=o(" (Wav2Vec2 model)"),fKe=l(),th=a("li"),IJ=a("strong"),mKe=o("wav2vec2_phoneme"),gKe=o(" \u2014 "),Nk=a("a"),hKe=o("Wav2Vec2PhonemeCTCTokenizer"),pKe=o(" (Wav2Vec2Phoneme model)"),_Ke=l(),Is=a("li"),jJ=a("strong"),uKe=o("xglm"),bKe=o(" \u2014 "),qk=a("a"),vKe=o("XGLMTokenizer"),TKe=o(" or "),Ok=a("a"),FKe=o("XGLMTokenizerFast"),CKe=o(" (XGLM model)"),MKe=l(),ah=a("li"),DJ=a("strong"),EKe=o("xlm"),yKe=o(" \u2014 "),Gk=a("a"),wKe=o("XLMTokenizer"),AKe=o(" (XLM model)"),LKe=l(),nh=a("li"),NJ=a("strong"),BKe=o("xlm-prophetnet"),xKe=o(" \u2014 "),Xk=a("a"),kKe=o("XLMProphetNetTokenizer"),RKe=o(" (XLMProphetNet model)"),SKe=l(),js=a("li"),qJ=a("strong"),PKe=o("xlm-roberta"),$Ke=o(" \u2014 "),Vk=a("a"),IKe=o("XLMRobertaTokenizer"),jKe=o(" or "),zk=a("a"),DKe=o("XLMRobertaTokenizerFast"),NKe=o(" (XLM-RoBERTa model)"),qKe=l(),Ds=a("li"),OJ=a("strong"),OKe=o("xlnet"),GKe=o(" \u2014 "),Wk=a("a"),XKe=o("XLNetTokenizer"),VKe=o(" or "),Qk=a("a"),zKe=o("XLNetTokenizerFast"),WKe=o(" (XLNet model)"),QKe=l(),GJ=a("p"),HKe=o("Examples:"),UKe=l(),f(f4.$$.fragment),JKe=l(),sh=a("div"),f(m4.$$.fragment),YKe=l(),XJ=a("p"),KKe=o("Register a new tokenizer in this mapping."),pxe=l(),Hi=a("h2"),lh=a("a"),VJ=a("span"),f(g4.$$.fragment),ZKe=l(),zJ=a("span"),eZe=o("AutoFeatureExtractor"),_xe=l(),Ho=a("div"),f(h4.$$.fragment),oZe=l(),p4=a("p"),rZe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Hk=a("a"),tZe=o("AutoFeatureExtractor.from_pretrained()"),aZe=o(" class method."),nZe=l(),_4=a("p"),sZe=o("This class cannot be instantiated directly using "),WJ=a("code"),lZe=o("__init__()"),iZe=o(" (throws an error)."),dZe=l(),$e=a("div"),f(u4.$$.fragment),cZe=l(),QJ=a("p"),fZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),mZe=l(),Xa=a("p"),gZe=o("The feature extractor class to instantiate is selected based on the "),HJ=a("code"),hZe=o("model_type"),pZe=o(` property of the config object
(either passed as an argument or loaded from `),UJ=a("code"),_Ze=o("pretrained_model_name_or_path"),uZe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),JJ=a("code"),bZe=o("pretrained_model_name_or_path"),vZe=o(":"),TZe=l(),ae=a("ul"),ih=a("li"),YJ=a("strong"),FZe=o("beit"),CZe=o(" \u2014 "),Uk=a("a"),MZe=o("BeitFeatureExtractor"),EZe=o(" (BEiT model)"),yZe=l(),dh=a("li"),KJ=a("strong"),wZe=o("clip"),AZe=o(" \u2014 "),Jk=a("a"),LZe=o("CLIPFeatureExtractor"),BZe=o(" (CLIP model)"),xZe=l(),ch=a("li"),ZJ=a("strong"),kZe=o("convnext"),RZe=o(" \u2014 "),Yk=a("a"),SZe=o("ConvNextFeatureExtractor"),PZe=o(" (ConvNext model)"),$Ze=l(),fh=a("li"),eY=a("strong"),IZe=o("deit"),jZe=o(" \u2014 "),Kk=a("a"),DZe=o("DeiTFeatureExtractor"),NZe=o(" (DeiT model)"),qZe=l(),mh=a("li"),oY=a("strong"),OZe=o("detr"),GZe=o(" \u2014 "),Zk=a("a"),XZe=o("DetrFeatureExtractor"),VZe=o(" (DETR model)"),zZe=l(),gh=a("li"),rY=a("strong"),WZe=o("hubert"),QZe=o(" \u2014 "),eR=a("a"),HZe=o("Wav2Vec2FeatureExtractor"),UZe=o(" (Hubert model)"),JZe=l(),hh=a("li"),tY=a("strong"),YZe=o("layoutlmv2"),KZe=o(" \u2014 "),oR=a("a"),ZZe=o("LayoutLMv2FeatureExtractor"),eeo=o(" (LayoutLMv2 model)"),oeo=l(),ph=a("li"),aY=a("strong"),reo=o("maskformer"),teo=o(" \u2014 "),rR=a("a"),aeo=o("MaskFormerFeatureExtractor"),neo=o(" (MaskFormer model)"),seo=l(),_h=a("li"),nY=a("strong"),leo=o("perceiver"),ieo=o(" \u2014 "),tR=a("a"),deo=o("PerceiverFeatureExtractor"),ceo=o(" (Perceiver model)"),feo=l(),uh=a("li"),sY=a("strong"),meo=o("poolformer"),geo=o(" \u2014 "),aR=a("a"),heo=o("PoolFormerFeatureExtractor"),peo=o(" (PoolFormer model)"),_eo=l(),bh=a("li"),lY=a("strong"),ueo=o("segformer"),beo=o(" \u2014 "),nR=a("a"),veo=o("SegformerFeatureExtractor"),Teo=o(" (SegFormer model)"),Feo=l(),vh=a("li"),iY=a("strong"),Ceo=o("speech_to_text"),Meo=o(" \u2014 "),sR=a("a"),Eeo=o("Speech2TextFeatureExtractor"),yeo=o(" (Speech2Text model)"),weo=l(),Th=a("li"),dY=a("strong"),Aeo=o("swin"),Leo=o(" \u2014 "),lR=a("a"),Beo=o("ViTFeatureExtractor"),xeo=o(" (Swin model)"),keo=l(),Fh=a("li"),cY=a("strong"),Reo=o("vit"),Seo=o(" \u2014 "),iR=a("a"),Peo=o("ViTFeatureExtractor"),$eo=o(" (ViT model)"),Ieo=l(),Ch=a("li"),fY=a("strong"),jeo=o("vit_mae"),Deo=o(" \u2014 "),dR=a("a"),Neo=o("ViTFeatureExtractor"),qeo=o(" (ViTMAE model)"),Oeo=l(),Mh=a("li"),mY=a("strong"),Geo=o("wav2vec2"),Xeo=o(" \u2014 "),cR=a("a"),Veo=o("Wav2Vec2FeatureExtractor"),zeo=o(" (Wav2Vec2 model)"),Weo=l(),f(Eh.$$.fragment),Qeo=l(),gY=a("p"),Heo=o("Examples:"),Ueo=l(),f(b4.$$.fragment),Jeo=l(),yh=a("div"),f(v4.$$.fragment),Yeo=l(),hY=a("p"),Keo=o("Register a new feature extractor for this class."),uxe=l(),Ui=a("h2"),wh=a("a"),pY=a("span"),f(T4.$$.fragment),Zeo=l(),_Y=a("span"),eoo=o("AutoProcessor"),bxe=l(),Uo=a("div"),f(F4.$$.fragment),ooo=l(),C4=a("p"),roo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fR=a("a"),too=o("AutoProcessor.from_pretrained()"),aoo=o(" class method."),noo=l(),M4=a("p"),soo=o("This class cannot be instantiated directly using "),uY=a("code"),loo=o("__init__()"),ioo=o(" (throws an error)."),doo=l(),Ie=a("div"),f(E4.$$.fragment),coo=l(),bY=a("p"),foo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),moo=l(),Ji=a("p"),goo=o("The processor class to instantiate is selected based on the "),vY=a("code"),hoo=o("model_type"),poo=o(` property of the config object (either
passed as an argument or loaded from `),TY=a("code"),_oo=o("pretrained_model_name_or_path"),uoo=o(" if possible):"),boo=l(),Be=a("ul"),Ah=a("li"),FY=a("strong"),voo=o("clip"),Too=o(" \u2014 "),mR=a("a"),Foo=o("CLIPProcessor"),Coo=o(" (CLIP model)"),Moo=l(),Lh=a("li"),CY=a("strong"),Eoo=o("layoutlmv2"),yoo=o(" \u2014 "),gR=a("a"),woo=o("LayoutLMv2Processor"),Aoo=o(" (LayoutLMv2 model)"),Loo=l(),Bh=a("li"),MY=a("strong"),Boo=o("layoutxlm"),xoo=o(" \u2014 "),hR=a("a"),koo=o("LayoutXLMProcessor"),Roo=o(" (LayoutXLM model)"),Soo=l(),xh=a("li"),EY=a("strong"),Poo=o("speech_to_text"),$oo=o(" \u2014 "),pR=a("a"),Ioo=o("Speech2TextProcessor"),joo=o(" (Speech2Text model)"),Doo=l(),kh=a("li"),yY=a("strong"),Noo=o("speech_to_text_2"),qoo=o(" \u2014 "),_R=a("a"),Ooo=o("Speech2Text2Processor"),Goo=o(" (Speech2Text2 model)"),Xoo=l(),Rh=a("li"),wY=a("strong"),Voo=o("trocr"),zoo=o(" \u2014 "),uR=a("a"),Woo=o("TrOCRProcessor"),Qoo=o(" (TrOCR model)"),Hoo=l(),Sh=a("li"),AY=a("strong"),Uoo=o("vision-text-dual-encoder"),Joo=o(" \u2014 "),bR=a("a"),Yoo=o("VisionTextDualEncoderProcessor"),Koo=o(" (VisionTextDualEncoder model)"),Zoo=l(),Ph=a("li"),LY=a("strong"),ero=o("wav2vec2"),oro=o(" \u2014 "),vR=a("a"),rro=o("Wav2Vec2Processor"),tro=o(" (Wav2Vec2 model)"),aro=l(),f($h.$$.fragment),nro=l(),BY=a("p"),sro=o("Examples:"),lro=l(),f(y4.$$.fragment),iro=l(),Ih=a("div"),f(w4.$$.fragment),dro=l(),xY=a("p"),cro=o("Register a new processor for this class."),vxe=l(),Yi=a("h2"),jh=a("a"),kY=a("span"),f(A4.$$.fragment),fro=l(),RY=a("span"),mro=o("AutoModel"),Txe=l(),Jo=a("div"),f(L4.$$.fragment),gro=l(),Ki=a("p"),hro=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SY=a("code"),pro=o("from_pretrained()"),_ro=o("class method or the "),PY=a("code"),uro=o("from_config()"),bro=o(`class
method.`),vro=l(),B4=a("p"),Tro=o("This class cannot be instantiated directly using "),$Y=a("code"),Fro=o("__init__()"),Cro=o(" (throws an error)."),Mro=l(),Vr=a("div"),f(x4.$$.fragment),Ero=l(),IY=a("p"),yro=o("Instantiates one of the base model classes of the library from a configuration."),wro=l(),Zi=a("p"),Aro=o(`Note:
Loading a model from its configuration file does `),jY=a("strong"),Lro=o("not"),Bro=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("code"),xro=o("from_pretrained()"),kro=o("to load the model weights."),Rro=l(),NY=a("p"),Sro=o("Examples:"),Pro=l(),f(k4.$$.fragment),$ro=l(),je=a("div"),f(R4.$$.fragment),Iro=l(),qY=a("p"),jro=o("Instantiate one of the base model classes of the library from a pretrained model."),Dro=l(),Va=a("p"),Nro=o("The model class to instantiate is selected based on the "),OY=a("code"),qro=o("model_type"),Oro=o(` property of the config object (either
passed as an argument or loaded from `),GY=a("code"),Gro=o("pretrained_model_name_or_path"),Xro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XY=a("code"),Vro=o("pretrained_model_name_or_path"),zro=o(":"),Wro=l(),F=a("ul"),Dh=a("li"),VY=a("strong"),Qro=o("albert"),Hro=o(" \u2014 "),TR=a("a"),Uro=o("AlbertModel"),Jro=o(" (ALBERT model)"),Yro=l(),Nh=a("li"),zY=a("strong"),Kro=o("bart"),Zro=o(" \u2014 "),FR=a("a"),eto=o("BartModel"),oto=o(" (BART model)"),rto=l(),qh=a("li"),WY=a("strong"),tto=o("beit"),ato=o(" \u2014 "),CR=a("a"),nto=o("BeitModel"),sto=o(" (BEiT model)"),lto=l(),Oh=a("li"),QY=a("strong"),ito=o("bert"),dto=o(" \u2014 "),MR=a("a"),cto=o("BertModel"),fto=o(" (BERT model)"),mto=l(),Gh=a("li"),HY=a("strong"),gto=o("bert-generation"),hto=o(" \u2014 "),ER=a("a"),pto=o("BertGenerationEncoder"),_to=o(" (Bert Generation model)"),uto=l(),Xh=a("li"),UY=a("strong"),bto=o("big_bird"),vto=o(" \u2014 "),yR=a("a"),Tto=o("BigBirdModel"),Fto=o(" (BigBird model)"),Cto=l(),Vh=a("li"),JY=a("strong"),Mto=o("bigbird_pegasus"),Eto=o(" \u2014 "),wR=a("a"),yto=o("BigBirdPegasusModel"),wto=o(" (BigBirdPegasus model)"),Ato=l(),zh=a("li"),YY=a("strong"),Lto=o("blenderbot"),Bto=o(" \u2014 "),AR=a("a"),xto=o("BlenderbotModel"),kto=o(" (Blenderbot model)"),Rto=l(),Wh=a("li"),KY=a("strong"),Sto=o("blenderbot-small"),Pto=o(" \u2014 "),LR=a("a"),$to=o("BlenderbotSmallModel"),Ito=o(" (BlenderbotSmall model)"),jto=l(),Qh=a("li"),ZY=a("strong"),Dto=o("camembert"),Nto=o(" \u2014 "),BR=a("a"),qto=o("CamembertModel"),Oto=o(" (CamemBERT model)"),Gto=l(),Hh=a("li"),eK=a("strong"),Xto=o("canine"),Vto=o(" \u2014 "),xR=a("a"),zto=o("CanineModel"),Wto=o(" (Canine model)"),Qto=l(),Uh=a("li"),oK=a("strong"),Hto=o("clip"),Uto=o(" \u2014 "),kR=a("a"),Jto=o("CLIPModel"),Yto=o(" (CLIP model)"),Kto=l(),Jh=a("li"),rK=a("strong"),Zto=o("convbert"),eao=o(" \u2014 "),RR=a("a"),oao=o("ConvBertModel"),rao=o(" (ConvBERT model)"),tao=l(),Yh=a("li"),tK=a("strong"),aao=o("convnext"),nao=o(" \u2014 "),SR=a("a"),sao=o("ConvNextModel"),lao=o(" (ConvNext model)"),iao=l(),Kh=a("li"),aK=a("strong"),dao=o("ctrl"),cao=o(" \u2014 "),PR=a("a"),fao=o("CTRLModel"),mao=o(" (CTRL model)"),gao=l(),Zh=a("li"),nK=a("strong"),hao=o("data2vec-audio"),pao=o(" \u2014 "),$R=a("a"),_ao=o("Data2VecAudioModel"),uao=o(" (Data2VecAudio model)"),bao=l(),ep=a("li"),sK=a("strong"),vao=o("data2vec-text"),Tao=o(" \u2014 "),IR=a("a"),Fao=o("Data2VecTextModel"),Cao=o(" (Data2VecText model)"),Mao=l(),op=a("li"),lK=a("strong"),Eao=o("deberta"),yao=o(" \u2014 "),jR=a("a"),wao=o("DebertaModel"),Aao=o(" (DeBERTa model)"),Lao=l(),rp=a("li"),iK=a("strong"),Bao=o("deberta-v2"),xao=o(" \u2014 "),DR=a("a"),kao=o("DebertaV2Model"),Rao=o(" (DeBERTa-v2 model)"),Sao=l(),tp=a("li"),dK=a("strong"),Pao=o("deit"),$ao=o(" \u2014 "),NR=a("a"),Iao=o("DeiTModel"),jao=o(" (DeiT model)"),Dao=l(),ap=a("li"),cK=a("strong"),Nao=o("detr"),qao=o(" \u2014 "),qR=a("a"),Oao=o("DetrModel"),Gao=o(" (DETR model)"),Xao=l(),np=a("li"),fK=a("strong"),Vao=o("distilbert"),zao=o(" \u2014 "),OR=a("a"),Wao=o("DistilBertModel"),Qao=o(" (DistilBERT model)"),Hao=l(),sp=a("li"),mK=a("strong"),Uao=o("dpr"),Jao=o(" \u2014 "),GR=a("a"),Yao=o("DPRQuestionEncoder"),Kao=o(" (DPR model)"),Zao=l(),lp=a("li"),gK=a("strong"),eno=o("electra"),ono=o(" \u2014 "),XR=a("a"),rno=o("ElectraModel"),tno=o(" (ELECTRA model)"),ano=l(),ip=a("li"),hK=a("strong"),nno=o("flaubert"),sno=o(" \u2014 "),VR=a("a"),lno=o("FlaubertModel"),ino=o(" (FlauBERT model)"),dno=l(),dp=a("li"),pK=a("strong"),cno=o("fnet"),fno=o(" \u2014 "),zR=a("a"),mno=o("FNetModel"),gno=o(" (FNet model)"),hno=l(),cp=a("li"),_K=a("strong"),pno=o("fsmt"),_no=o(" \u2014 "),WR=a("a"),uno=o("FSMTModel"),bno=o(" (FairSeq Machine-Translation model)"),vno=l(),Ns=a("li"),uK=a("strong"),Tno=o("funnel"),Fno=o(" \u2014 "),QR=a("a"),Cno=o("FunnelModel"),Mno=o(" or "),HR=a("a"),Eno=o("FunnelBaseModel"),yno=o(" (Funnel Transformer model)"),wno=l(),fp=a("li"),bK=a("strong"),Ano=o("gpt2"),Lno=o(" \u2014 "),UR=a("a"),Bno=o("GPT2Model"),xno=o(" (OpenAI GPT-2 model)"),kno=l(),mp=a("li"),vK=a("strong"),Rno=o("gpt_neo"),Sno=o(" \u2014 "),JR=a("a"),Pno=o("GPTNeoModel"),$no=o(" (GPT Neo model)"),Ino=l(),gp=a("li"),TK=a("strong"),jno=o("gptj"),Dno=o(" \u2014 "),YR=a("a"),Nno=o("GPTJModel"),qno=o(" (GPT-J model)"),Ono=l(),hp=a("li"),FK=a("strong"),Gno=o("hubert"),Xno=o(" \u2014 "),KR=a("a"),Vno=o("HubertModel"),zno=o(" (Hubert model)"),Wno=l(),pp=a("li"),CK=a("strong"),Qno=o("ibert"),Hno=o(" \u2014 "),ZR=a("a"),Uno=o("IBertModel"),Jno=o(" (I-BERT model)"),Yno=l(),_p=a("li"),MK=a("strong"),Kno=o("imagegpt"),Zno=o(" \u2014 "),eS=a("a"),eso=o("ImageGPTModel"),oso=o(" (ImageGPT model)"),rso=l(),up=a("li"),EK=a("strong"),tso=o("layoutlm"),aso=o(" \u2014 "),oS=a("a"),nso=o("LayoutLMModel"),sso=o(" (LayoutLM model)"),lso=l(),bp=a("li"),yK=a("strong"),iso=o("layoutlmv2"),dso=o(" \u2014 "),rS=a("a"),cso=o("LayoutLMv2Model"),fso=o(" (LayoutLMv2 model)"),mso=l(),vp=a("li"),wK=a("strong"),gso=o("led"),hso=o(" \u2014 "),tS=a("a"),pso=o("LEDModel"),_so=o(" (LED model)"),uso=l(),Tp=a("li"),AK=a("strong"),bso=o("longformer"),vso=o(" \u2014 "),aS=a("a"),Tso=o("LongformerModel"),Fso=o(" (Longformer model)"),Cso=l(),Fp=a("li"),LK=a("strong"),Mso=o("luke"),Eso=o(" \u2014 "),nS=a("a"),yso=o("LukeModel"),wso=o(" (LUKE model)"),Aso=l(),Cp=a("li"),BK=a("strong"),Lso=o("lxmert"),Bso=o(" \u2014 "),sS=a("a"),xso=o("LxmertModel"),kso=o(" (LXMERT model)"),Rso=l(),Mp=a("li"),xK=a("strong"),Sso=o("m2m_100"),Pso=o(" \u2014 "),lS=a("a"),$so=o("M2M100Model"),Iso=o(" (M2M100 model)"),jso=l(),Ep=a("li"),kK=a("strong"),Dso=o("marian"),Nso=o(" \u2014 "),iS=a("a"),qso=o("MarianModel"),Oso=o(" (Marian model)"),Gso=l(),yp=a("li"),RK=a("strong"),Xso=o("maskformer"),Vso=o(" \u2014 "),dS=a("a"),zso=o("MaskFormerModel"),Wso=o(" (MaskFormer model)"),Qso=l(),wp=a("li"),SK=a("strong"),Hso=o("mbart"),Uso=o(" \u2014 "),cS=a("a"),Jso=o("MBartModel"),Yso=o(" (mBART model)"),Kso=l(),Ap=a("li"),PK=a("strong"),Zso=o("megatron-bert"),elo=o(" \u2014 "),fS=a("a"),olo=o("MegatronBertModel"),rlo=o(" (MegatronBert model)"),tlo=l(),Lp=a("li"),$K=a("strong"),alo=o("mobilebert"),nlo=o(" \u2014 "),mS=a("a"),slo=o("MobileBertModel"),llo=o(" (MobileBERT model)"),ilo=l(),Bp=a("li"),IK=a("strong"),dlo=o("mpnet"),clo=o(" \u2014 "),gS=a("a"),flo=o("MPNetModel"),mlo=o(" (MPNet model)"),glo=l(),xp=a("li"),jK=a("strong"),hlo=o("mt5"),plo=o(" \u2014 "),hS=a("a"),_lo=o("MT5Model"),ulo=o(" (mT5 model)"),blo=l(),kp=a("li"),DK=a("strong"),vlo=o("nystromformer"),Tlo=o(" \u2014 "),pS=a("a"),Flo=o("NystromformerModel"),Clo=o(" (Nystromformer model)"),Mlo=l(),Rp=a("li"),NK=a("strong"),Elo=o("openai-gpt"),ylo=o(" \u2014 "),_S=a("a"),wlo=o("OpenAIGPTModel"),Alo=o(" (OpenAI GPT model)"),Llo=l(),Sp=a("li"),qK=a("strong"),Blo=o("pegasus"),xlo=o(" \u2014 "),uS=a("a"),klo=o("PegasusModel"),Rlo=o(" (Pegasus model)"),Slo=l(),Pp=a("li"),OK=a("strong"),Plo=o("perceiver"),$lo=o(" \u2014 "),bS=a("a"),Ilo=o("PerceiverModel"),jlo=o(" (Perceiver model)"),Dlo=l(),$p=a("li"),GK=a("strong"),Nlo=o("plbart"),qlo=o(" \u2014 "),vS=a("a"),Olo=o("PLBartModel"),Glo=o(" (PLBart model)"),Xlo=l(),Ip=a("li"),XK=a("strong"),Vlo=o("poolformer"),zlo=o(" \u2014 "),TS=a("a"),Wlo=o("PoolFormerModel"),Qlo=o(" (PoolFormer model)"),Hlo=l(),jp=a("li"),VK=a("strong"),Ulo=o("prophetnet"),Jlo=o(" \u2014 "),FS=a("a"),Ylo=o("ProphetNetModel"),Klo=o(" (ProphetNet model)"),Zlo=l(),Dp=a("li"),zK=a("strong"),eio=o("qdqbert"),oio=o(" \u2014 "),CS=a("a"),rio=o("QDQBertModel"),tio=o(" (QDQBert model)"),aio=l(),Np=a("li"),WK=a("strong"),nio=o("reformer"),sio=o(" \u2014 "),MS=a("a"),lio=o("ReformerModel"),iio=o(" (Reformer model)"),dio=l(),qp=a("li"),QK=a("strong"),cio=o("rembert"),fio=o(" \u2014 "),ES=a("a"),mio=o("RemBertModel"),gio=o(" (RemBERT model)"),hio=l(),Op=a("li"),HK=a("strong"),pio=o("retribert"),_io=o(" \u2014 "),yS=a("a"),uio=o("RetriBertModel"),bio=o(" (RetriBERT model)"),vio=l(),Gp=a("li"),UK=a("strong"),Tio=o("roberta"),Fio=o(" \u2014 "),wS=a("a"),Cio=o("RobertaModel"),Mio=o(" (RoBERTa model)"),Eio=l(),Xp=a("li"),JK=a("strong"),yio=o("roformer"),wio=o(" \u2014 "),AS=a("a"),Aio=o("RoFormerModel"),Lio=o(" (RoFormer model)"),Bio=l(),Vp=a("li"),YK=a("strong"),xio=o("segformer"),kio=o(" \u2014 "),LS=a("a"),Rio=o("SegformerModel"),Sio=o(" (SegFormer model)"),Pio=l(),zp=a("li"),KK=a("strong"),$io=o("sew"),Iio=o(" \u2014 "),BS=a("a"),jio=o("SEWModel"),Dio=o(" (SEW model)"),Nio=l(),Wp=a("li"),ZK=a("strong"),qio=o("sew-d"),Oio=o(" \u2014 "),xS=a("a"),Gio=o("SEWDModel"),Xio=o(" (SEW-D model)"),Vio=l(),Qp=a("li"),eZ=a("strong"),zio=o("speech_to_text"),Wio=o(" \u2014 "),kS=a("a"),Qio=o("Speech2TextModel"),Hio=o(" (Speech2Text model)"),Uio=l(),Hp=a("li"),oZ=a("strong"),Jio=o("splinter"),Yio=o(" \u2014 "),RS=a("a"),Kio=o("SplinterModel"),Zio=o(" (Splinter model)"),edo=l(),Up=a("li"),rZ=a("strong"),odo=o("squeezebert"),rdo=o(" \u2014 "),SS=a("a"),tdo=o("SqueezeBertModel"),ado=o(" (SqueezeBERT model)"),ndo=l(),Jp=a("li"),tZ=a("strong"),sdo=o("swin"),ldo=o(" \u2014 "),PS=a("a"),ido=o("SwinModel"),ddo=o(" (Swin model)"),cdo=l(),Yp=a("li"),aZ=a("strong"),fdo=o("t5"),mdo=o(" \u2014 "),$S=a("a"),gdo=o("T5Model"),hdo=o(" (T5 model)"),pdo=l(),Kp=a("li"),nZ=a("strong"),_do=o("tapas"),udo=o(" \u2014 "),IS=a("a"),bdo=o("TapasModel"),vdo=o(" (TAPAS model)"),Tdo=l(),Zp=a("li"),sZ=a("strong"),Fdo=o("transfo-xl"),Cdo=o(" \u2014 "),jS=a("a"),Mdo=o("TransfoXLModel"),Edo=o(" (Transformer-XL model)"),ydo=l(),e_=a("li"),lZ=a("strong"),wdo=o("unispeech"),Ado=o(" \u2014 "),DS=a("a"),Ldo=o("UniSpeechModel"),Bdo=o(" (UniSpeech model)"),xdo=l(),o_=a("li"),iZ=a("strong"),kdo=o("unispeech-sat"),Rdo=o(" \u2014 "),NS=a("a"),Sdo=o("UniSpeechSatModel"),Pdo=o(" (UniSpeechSat model)"),$do=l(),r_=a("li"),dZ=a("strong"),Ido=o("vilt"),jdo=o(" \u2014 "),qS=a("a"),Ddo=o("ViltModel"),Ndo=o(" (ViLT model)"),qdo=l(),t_=a("li"),cZ=a("strong"),Odo=o("vision-text-dual-encoder"),Gdo=o(" \u2014 "),OS=a("a"),Xdo=o("VisionTextDualEncoderModel"),Vdo=o(" (VisionTextDualEncoder model)"),zdo=l(),a_=a("li"),fZ=a("strong"),Wdo=o("visual_bert"),Qdo=o(" \u2014 "),GS=a("a"),Hdo=o("VisualBertModel"),Udo=o(" (VisualBert model)"),Jdo=l(),n_=a("li"),mZ=a("strong"),Ydo=o("vit"),Kdo=o(" \u2014 "),XS=a("a"),Zdo=o("ViTModel"),eco=o(" (ViT model)"),oco=l(),s_=a("li"),gZ=a("strong"),rco=o("vit_mae"),tco=o(" \u2014 "),VS=a("a"),aco=o("ViTMAEModel"),nco=o(" (ViTMAE model)"),sco=l(),l_=a("li"),hZ=a("strong"),lco=o("wav2vec2"),ico=o(" \u2014 "),zS=a("a"),dco=o("Wav2Vec2Model"),cco=o(" (Wav2Vec2 model)"),fco=l(),i_=a("li"),pZ=a("strong"),mco=o("wavlm"),gco=o(" \u2014 "),WS=a("a"),hco=o("WavLMModel"),pco=o(" (WavLM model)"),_co=l(),d_=a("li"),_Z=a("strong"),uco=o("xglm"),bco=o(" \u2014 "),QS=a("a"),vco=o("XGLMModel"),Tco=o(" (XGLM model)"),Fco=l(),c_=a("li"),uZ=a("strong"),Cco=o("xlm"),Mco=o(" \u2014 "),HS=a("a"),Eco=o("XLMModel"),yco=o(" (XLM model)"),wco=l(),f_=a("li"),bZ=a("strong"),Aco=o("xlm-prophetnet"),Lco=o(" \u2014 "),US=a("a"),Bco=o("XLMProphetNetModel"),xco=o(" (XLMProphetNet model)"),kco=l(),m_=a("li"),vZ=a("strong"),Rco=o("xlm-roberta"),Sco=o(" \u2014 "),JS=a("a"),Pco=o("XLMRobertaModel"),$co=o(" (XLM-RoBERTa model)"),Ico=l(),g_=a("li"),TZ=a("strong"),jco=o("xlm-roberta-xl"),Dco=o(" \u2014 "),YS=a("a"),Nco=o("XLMRobertaXLModel"),qco=o(" (XLM-RoBERTa-XL model)"),Oco=l(),h_=a("li"),FZ=a("strong"),Gco=o("xlnet"),Xco=o(" \u2014 "),KS=a("a"),Vco=o("XLNetModel"),zco=o(" (XLNet model)"),Wco=l(),p_=a("li"),CZ=a("strong"),Qco=o("yoso"),Hco=o(" \u2014 "),ZS=a("a"),Uco=o("YosoModel"),Jco=o(" (YOSO model)"),Yco=l(),__=a("p"),Kco=o("The model is set in evaluation mode by default using "),MZ=a("code"),Zco=o("model.eval()"),efo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EZ=a("code"),ofo=o("model.train()"),rfo=l(),yZ=a("p"),tfo=o("Examples:"),afo=l(),f(S4.$$.fragment),Fxe=l(),ed=a("h2"),u_=a("a"),wZ=a("span"),f(P4.$$.fragment),nfo=l(),AZ=a("span"),sfo=o("AutoModelForPreTraining"),Cxe=l(),Yo=a("div"),f($4.$$.fragment),lfo=l(),od=a("p"),ifo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LZ=a("code"),dfo=o("from_pretrained()"),cfo=o("class method or the "),BZ=a("code"),ffo=o("from_config()"),mfo=o(`class
method.`),gfo=l(),I4=a("p"),hfo=o("This class cannot be instantiated directly using "),xZ=a("code"),pfo=o("__init__()"),_fo=o(" (throws an error)."),ufo=l(),zr=a("div"),f(j4.$$.fragment),bfo=l(),kZ=a("p"),vfo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tfo=l(),rd=a("p"),Ffo=o(`Note:
Loading a model from its configuration file does `),RZ=a("strong"),Cfo=o("not"),Mfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("code"),Efo=o("from_pretrained()"),yfo=o("to load the model weights."),wfo=l(),PZ=a("p"),Afo=o("Examples:"),Lfo=l(),f(D4.$$.fragment),Bfo=l(),De=a("div"),f(N4.$$.fragment),xfo=l(),$Z=a("p"),kfo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rfo=l(),za=a("p"),Sfo=o("The model class to instantiate is selected based on the "),IZ=a("code"),Pfo=o("model_type"),$fo=o(` property of the config object (either
passed as an argument or loaded from `),jZ=a("code"),Ifo=o("pretrained_model_name_or_path"),jfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DZ=a("code"),Dfo=o("pretrained_model_name_or_path"),Nfo=o(":"),qfo=l(),k=a("ul"),b_=a("li"),NZ=a("strong"),Ofo=o("albert"),Gfo=o(" \u2014 "),eP=a("a"),Xfo=o("AlbertForPreTraining"),Vfo=o(" (ALBERT model)"),zfo=l(),v_=a("li"),qZ=a("strong"),Wfo=o("bart"),Qfo=o(" \u2014 "),oP=a("a"),Hfo=o("BartForConditionalGeneration"),Ufo=o(" (BART model)"),Jfo=l(),T_=a("li"),OZ=a("strong"),Yfo=o("bert"),Kfo=o(" \u2014 "),rP=a("a"),Zfo=o("BertForPreTraining"),emo=o(" (BERT model)"),omo=l(),F_=a("li"),GZ=a("strong"),rmo=o("big_bird"),tmo=o(" \u2014 "),tP=a("a"),amo=o("BigBirdForPreTraining"),nmo=o(" (BigBird model)"),smo=l(),C_=a("li"),XZ=a("strong"),lmo=o("camembert"),imo=o(" \u2014 "),aP=a("a"),dmo=o("CamembertForMaskedLM"),cmo=o(" (CamemBERT model)"),fmo=l(),M_=a("li"),VZ=a("strong"),mmo=o("ctrl"),gmo=o(" \u2014 "),nP=a("a"),hmo=o("CTRLLMHeadModel"),pmo=o(" (CTRL model)"),_mo=l(),E_=a("li"),zZ=a("strong"),umo=o("data2vec-text"),bmo=o(" \u2014 "),sP=a("a"),vmo=o("Data2VecTextForMaskedLM"),Tmo=o(" (Data2VecText model)"),Fmo=l(),y_=a("li"),WZ=a("strong"),Cmo=o("deberta"),Mmo=o(" \u2014 "),lP=a("a"),Emo=o("DebertaForMaskedLM"),ymo=o(" (DeBERTa model)"),wmo=l(),w_=a("li"),QZ=a("strong"),Amo=o("deberta-v2"),Lmo=o(" \u2014 "),iP=a("a"),Bmo=o("DebertaV2ForMaskedLM"),xmo=o(" (DeBERTa-v2 model)"),kmo=l(),A_=a("li"),HZ=a("strong"),Rmo=o("distilbert"),Smo=o(" \u2014 "),dP=a("a"),Pmo=o("DistilBertForMaskedLM"),$mo=o(" (DistilBERT model)"),Imo=l(),L_=a("li"),UZ=a("strong"),jmo=o("electra"),Dmo=o(" \u2014 "),cP=a("a"),Nmo=o("ElectraForPreTraining"),qmo=o(" (ELECTRA model)"),Omo=l(),B_=a("li"),JZ=a("strong"),Gmo=o("flaubert"),Xmo=o(" \u2014 "),fP=a("a"),Vmo=o("FlaubertWithLMHeadModel"),zmo=o(" (FlauBERT model)"),Wmo=l(),x_=a("li"),YZ=a("strong"),Qmo=o("fnet"),Hmo=o(" \u2014 "),mP=a("a"),Umo=o("FNetForPreTraining"),Jmo=o(" (FNet model)"),Ymo=l(),k_=a("li"),KZ=a("strong"),Kmo=o("fsmt"),Zmo=o(" \u2014 "),gP=a("a"),ego=o("FSMTForConditionalGeneration"),ogo=o(" (FairSeq Machine-Translation model)"),rgo=l(),R_=a("li"),ZZ=a("strong"),tgo=o("funnel"),ago=o(" \u2014 "),hP=a("a"),ngo=o("FunnelForPreTraining"),sgo=o(" (Funnel Transformer model)"),lgo=l(),S_=a("li"),eee=a("strong"),igo=o("gpt2"),dgo=o(" \u2014 "),pP=a("a"),cgo=o("GPT2LMHeadModel"),fgo=o(" (OpenAI GPT-2 model)"),mgo=l(),P_=a("li"),oee=a("strong"),ggo=o("ibert"),hgo=o(" \u2014 "),_P=a("a"),pgo=o("IBertForMaskedLM"),_go=o(" (I-BERT model)"),ugo=l(),$_=a("li"),ree=a("strong"),bgo=o("layoutlm"),vgo=o(" \u2014 "),uP=a("a"),Tgo=o("LayoutLMForMaskedLM"),Fgo=o(" (LayoutLM model)"),Cgo=l(),I_=a("li"),tee=a("strong"),Mgo=o("longformer"),Ego=o(" \u2014 "),bP=a("a"),ygo=o("LongformerForMaskedLM"),wgo=o(" (Longformer model)"),Ago=l(),j_=a("li"),aee=a("strong"),Lgo=o("lxmert"),Bgo=o(" \u2014 "),vP=a("a"),xgo=o("LxmertForPreTraining"),kgo=o(" (LXMERT model)"),Rgo=l(),D_=a("li"),nee=a("strong"),Sgo=o("megatron-bert"),Pgo=o(" \u2014 "),TP=a("a"),$go=o("MegatronBertForPreTraining"),Igo=o(" (MegatronBert model)"),jgo=l(),N_=a("li"),see=a("strong"),Dgo=o("mobilebert"),Ngo=o(" \u2014 "),FP=a("a"),qgo=o("MobileBertForPreTraining"),Ogo=o(" (MobileBERT model)"),Ggo=l(),q_=a("li"),lee=a("strong"),Xgo=o("mpnet"),Vgo=o(" \u2014 "),CP=a("a"),zgo=o("MPNetForMaskedLM"),Wgo=o(" (MPNet model)"),Qgo=l(),O_=a("li"),iee=a("strong"),Hgo=o("openai-gpt"),Ugo=o(" \u2014 "),MP=a("a"),Jgo=o("OpenAIGPTLMHeadModel"),Ygo=o(" (OpenAI GPT model)"),Kgo=l(),G_=a("li"),dee=a("strong"),Zgo=o("retribert"),eho=o(" \u2014 "),EP=a("a"),oho=o("RetriBertModel"),rho=o(" (RetriBERT model)"),tho=l(),X_=a("li"),cee=a("strong"),aho=o("roberta"),nho=o(" \u2014 "),yP=a("a"),sho=o("RobertaForMaskedLM"),lho=o(" (RoBERTa model)"),iho=l(),V_=a("li"),fee=a("strong"),dho=o("squeezebert"),cho=o(" \u2014 "),wP=a("a"),fho=o("SqueezeBertForMaskedLM"),mho=o(" (SqueezeBERT model)"),gho=l(),z_=a("li"),mee=a("strong"),hho=o("t5"),pho=o(" \u2014 "),AP=a("a"),_ho=o("T5ForConditionalGeneration"),uho=o(" (T5 model)"),bho=l(),W_=a("li"),gee=a("strong"),vho=o("tapas"),Tho=o(" \u2014 "),LP=a("a"),Fho=o("TapasForMaskedLM"),Cho=o(" (TAPAS model)"),Mho=l(),Q_=a("li"),hee=a("strong"),Eho=o("transfo-xl"),yho=o(" \u2014 "),BP=a("a"),who=o("TransfoXLLMHeadModel"),Aho=o(" (Transformer-XL model)"),Lho=l(),H_=a("li"),pee=a("strong"),Bho=o("unispeech"),xho=o(" \u2014 "),xP=a("a"),kho=o("UniSpeechForPreTraining"),Rho=o(" (UniSpeech model)"),Sho=l(),U_=a("li"),_ee=a("strong"),Pho=o("unispeech-sat"),$ho=o(" \u2014 "),kP=a("a"),Iho=o("UniSpeechSatForPreTraining"),jho=o(" (UniSpeechSat model)"),Dho=l(),J_=a("li"),uee=a("strong"),Nho=o("visual_bert"),qho=o(" \u2014 "),RP=a("a"),Oho=o("VisualBertForPreTraining"),Gho=o(" (VisualBert model)"),Xho=l(),Y_=a("li"),bee=a("strong"),Vho=o("vit_mae"),zho=o(" \u2014 "),SP=a("a"),Who=o("ViTMAEForPreTraining"),Qho=o(" (ViTMAE model)"),Hho=l(),K_=a("li"),vee=a("strong"),Uho=o("wav2vec2"),Jho=o(" \u2014 "),PP=a("a"),Yho=o("Wav2Vec2ForPreTraining"),Kho=o(" (Wav2Vec2 model)"),Zho=l(),Z_=a("li"),Tee=a("strong"),epo=o("xlm"),opo=o(" \u2014 "),$P=a("a"),rpo=o("XLMWithLMHeadModel"),tpo=o(" (XLM model)"),apo=l(),eu=a("li"),Fee=a("strong"),npo=o("xlm-roberta"),spo=o(" \u2014 "),IP=a("a"),lpo=o("XLMRobertaForMaskedLM"),ipo=o(" (XLM-RoBERTa model)"),dpo=l(),ou=a("li"),Cee=a("strong"),cpo=o("xlm-roberta-xl"),fpo=o(" \u2014 "),jP=a("a"),mpo=o("XLMRobertaXLForMaskedLM"),gpo=o(" (XLM-RoBERTa-XL model)"),hpo=l(),ru=a("li"),Mee=a("strong"),ppo=o("xlnet"),_po=o(" \u2014 "),DP=a("a"),upo=o("XLNetLMHeadModel"),bpo=o(" (XLNet model)"),vpo=l(),tu=a("p"),Tpo=o("The model is set in evaluation mode by default using "),Eee=a("code"),Fpo=o("model.eval()"),Cpo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yee=a("code"),Mpo=o("model.train()"),Epo=l(),wee=a("p"),ypo=o("Examples:"),wpo=l(),f(q4.$$.fragment),Mxe=l(),td=a("h2"),au=a("a"),Aee=a("span"),f(O4.$$.fragment),Apo=l(),Lee=a("span"),Lpo=o("AutoModelForCausalLM"),Exe=l(),Ko=a("div"),f(G4.$$.fragment),Bpo=l(),ad=a("p"),xpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bee=a("code"),kpo=o("from_pretrained()"),Rpo=o("class method or the "),xee=a("code"),Spo=o("from_config()"),Ppo=o(`class
method.`),$po=l(),X4=a("p"),Ipo=o("This class cannot be instantiated directly using "),kee=a("code"),jpo=o("__init__()"),Dpo=o(" (throws an error)."),Npo=l(),Wr=a("div"),f(V4.$$.fragment),qpo=l(),Ree=a("p"),Opo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Gpo=l(),nd=a("p"),Xpo=o(`Note:
Loading a model from its configuration file does `),See=a("strong"),Vpo=o("not"),zpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("code"),Wpo=o("from_pretrained()"),Qpo=o("to load the model weights."),Hpo=l(),$ee=a("p"),Upo=o("Examples:"),Jpo=l(),f(z4.$$.fragment),Ypo=l(),Ne=a("div"),f(W4.$$.fragment),Kpo=l(),Iee=a("p"),Zpo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),e_o=l(),Wa=a("p"),o_o=o("The model class to instantiate is selected based on the "),jee=a("code"),r_o=o("model_type"),t_o=o(` property of the config object (either
passed as an argument or loaded from `),Dee=a("code"),a_o=o("pretrained_model_name_or_path"),n_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nee=a("code"),s_o=o("pretrained_model_name_or_path"),l_o=o(":"),i_o=l(),$=a("ul"),nu=a("li"),qee=a("strong"),d_o=o("bart"),c_o=o(" \u2014 "),NP=a("a"),f_o=o("BartForCausalLM"),m_o=o(" (BART model)"),g_o=l(),su=a("li"),Oee=a("strong"),h_o=o("bert"),p_o=o(" \u2014 "),qP=a("a"),__o=o("BertLMHeadModel"),u_o=o(" (BERT model)"),b_o=l(),lu=a("li"),Gee=a("strong"),v_o=o("bert-generation"),T_o=o(" \u2014 "),OP=a("a"),F_o=o("BertGenerationDecoder"),C_o=o(" (Bert Generation model)"),M_o=l(),iu=a("li"),Xee=a("strong"),E_o=o("big_bird"),y_o=o(" \u2014 "),GP=a("a"),w_o=o("BigBirdForCausalLM"),A_o=o(" (BigBird model)"),L_o=l(),du=a("li"),Vee=a("strong"),B_o=o("bigbird_pegasus"),x_o=o(" \u2014 "),XP=a("a"),k_o=o("BigBirdPegasusForCausalLM"),R_o=o(" (BigBirdPegasus model)"),S_o=l(),cu=a("li"),zee=a("strong"),P_o=o("blenderbot"),$_o=o(" \u2014 "),VP=a("a"),I_o=o("BlenderbotForCausalLM"),j_o=o(" (Blenderbot model)"),D_o=l(),fu=a("li"),Wee=a("strong"),N_o=o("blenderbot-small"),q_o=o(" \u2014 "),zP=a("a"),O_o=o("BlenderbotSmallForCausalLM"),G_o=o(" (BlenderbotSmall model)"),X_o=l(),mu=a("li"),Qee=a("strong"),V_o=o("camembert"),z_o=o(" \u2014 "),WP=a("a"),W_o=o("CamembertForCausalLM"),Q_o=o(" (CamemBERT model)"),H_o=l(),gu=a("li"),Hee=a("strong"),U_o=o("ctrl"),J_o=o(" \u2014 "),QP=a("a"),Y_o=o("CTRLLMHeadModel"),K_o=o(" (CTRL model)"),Z_o=l(),hu=a("li"),Uee=a("strong"),euo=o("data2vec-text"),ouo=o(" \u2014 "),HP=a("a"),ruo=o("Data2VecTextForCausalLM"),tuo=o(" (Data2VecText model)"),auo=l(),pu=a("li"),Jee=a("strong"),nuo=o("electra"),suo=o(" \u2014 "),UP=a("a"),luo=o("ElectraForCausalLM"),iuo=o(" (ELECTRA model)"),duo=l(),_u=a("li"),Yee=a("strong"),cuo=o("gpt2"),fuo=o(" \u2014 "),JP=a("a"),muo=o("GPT2LMHeadModel"),guo=o(" (OpenAI GPT-2 model)"),huo=l(),uu=a("li"),Kee=a("strong"),puo=o("gpt_neo"),_uo=o(" \u2014 "),YP=a("a"),uuo=o("GPTNeoForCausalLM"),buo=o(" (GPT Neo model)"),vuo=l(),bu=a("li"),Zee=a("strong"),Tuo=o("gptj"),Fuo=o(" \u2014 "),KP=a("a"),Cuo=o("GPTJForCausalLM"),Muo=o(" (GPT-J model)"),Euo=l(),vu=a("li"),eoe=a("strong"),yuo=o("marian"),wuo=o(" \u2014 "),ZP=a("a"),Auo=o("MarianForCausalLM"),Luo=o(" (Marian model)"),Buo=l(),Tu=a("li"),ooe=a("strong"),xuo=o("mbart"),kuo=o(" \u2014 "),e$=a("a"),Ruo=o("MBartForCausalLM"),Suo=o(" (mBART model)"),Puo=l(),Fu=a("li"),roe=a("strong"),$uo=o("megatron-bert"),Iuo=o(" \u2014 "),o$=a("a"),juo=o("MegatronBertForCausalLM"),Duo=o(" (MegatronBert model)"),Nuo=l(),Cu=a("li"),toe=a("strong"),quo=o("openai-gpt"),Ouo=o(" \u2014 "),r$=a("a"),Guo=o("OpenAIGPTLMHeadModel"),Xuo=o(" (OpenAI GPT model)"),Vuo=l(),Mu=a("li"),aoe=a("strong"),zuo=o("pegasus"),Wuo=o(" \u2014 "),t$=a("a"),Quo=o("PegasusForCausalLM"),Huo=o(" (Pegasus model)"),Uuo=l(),Eu=a("li"),noe=a("strong"),Juo=o("plbart"),Yuo=o(" \u2014 "),a$=a("a"),Kuo=o("PLBartForCausalLM"),Zuo=o(" (PLBart model)"),e1o=l(),yu=a("li"),soe=a("strong"),o1o=o("prophetnet"),r1o=o(" \u2014 "),n$=a("a"),t1o=o("ProphetNetForCausalLM"),a1o=o(" (ProphetNet model)"),n1o=l(),wu=a("li"),loe=a("strong"),s1o=o("qdqbert"),l1o=o(" \u2014 "),s$=a("a"),i1o=o("QDQBertLMHeadModel"),d1o=o(" (QDQBert model)"),c1o=l(),Au=a("li"),ioe=a("strong"),f1o=o("reformer"),m1o=o(" \u2014 "),l$=a("a"),g1o=o("ReformerModelWithLMHead"),h1o=o(" (Reformer model)"),p1o=l(),Lu=a("li"),doe=a("strong"),_1o=o("rembert"),u1o=o(" \u2014 "),i$=a("a"),b1o=o("RemBertForCausalLM"),v1o=o(" (RemBERT model)"),T1o=l(),Bu=a("li"),coe=a("strong"),F1o=o("roberta"),C1o=o(" \u2014 "),d$=a("a"),M1o=o("RobertaForCausalLM"),E1o=o(" (RoBERTa model)"),y1o=l(),xu=a("li"),foe=a("strong"),w1o=o("roformer"),A1o=o(" \u2014 "),c$=a("a"),L1o=o("RoFormerForCausalLM"),B1o=o(" (RoFormer model)"),x1o=l(),ku=a("li"),moe=a("strong"),k1o=o("speech_to_text_2"),R1o=o(" \u2014 "),f$=a("a"),S1o=o("Speech2Text2ForCausalLM"),P1o=o(" (Speech2Text2 model)"),$1o=l(),Ru=a("li"),goe=a("strong"),I1o=o("transfo-xl"),j1o=o(" \u2014 "),m$=a("a"),D1o=o("TransfoXLLMHeadModel"),N1o=o(" (Transformer-XL model)"),q1o=l(),Su=a("li"),hoe=a("strong"),O1o=o("trocr"),G1o=o(" \u2014 "),g$=a("a"),X1o=o("TrOCRForCausalLM"),V1o=o(" (TrOCR model)"),z1o=l(),Pu=a("li"),poe=a("strong"),W1o=o("xglm"),Q1o=o(" \u2014 "),h$=a("a"),H1o=o("XGLMForCausalLM"),U1o=o(" (XGLM model)"),J1o=l(),$u=a("li"),_oe=a("strong"),Y1o=o("xlm"),K1o=o(" \u2014 "),p$=a("a"),Z1o=o("XLMWithLMHeadModel"),ebo=o(" (XLM model)"),obo=l(),Iu=a("li"),uoe=a("strong"),rbo=o("xlm-prophetnet"),tbo=o(" \u2014 "),_$=a("a"),abo=o("XLMProphetNetForCausalLM"),nbo=o(" (XLMProphetNet model)"),sbo=l(),ju=a("li"),boe=a("strong"),lbo=o("xlm-roberta"),ibo=o(" \u2014 "),u$=a("a"),dbo=o("XLMRobertaForCausalLM"),cbo=o(" (XLM-RoBERTa model)"),fbo=l(),Du=a("li"),voe=a("strong"),mbo=o("xlm-roberta-xl"),gbo=o(" \u2014 "),b$=a("a"),hbo=o("XLMRobertaXLForCausalLM"),pbo=o(" (XLM-RoBERTa-XL model)"),_bo=l(),Nu=a("li"),Toe=a("strong"),ubo=o("xlnet"),bbo=o(" \u2014 "),v$=a("a"),vbo=o("XLNetLMHeadModel"),Tbo=o(" (XLNet model)"),Fbo=l(),qu=a("p"),Cbo=o("The model is set in evaluation mode by default using "),Foe=a("code"),Mbo=o("model.eval()"),Ebo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Coe=a("code"),ybo=o("model.train()"),wbo=l(),Moe=a("p"),Abo=o("Examples:"),Lbo=l(),f(Q4.$$.fragment),yxe=l(),sd=a("h2"),Ou=a("a"),Eoe=a("span"),f(H4.$$.fragment),Bbo=l(),yoe=a("span"),xbo=o("AutoModelForMaskedLM"),wxe=l(),Zo=a("div"),f(U4.$$.fragment),kbo=l(),ld=a("p"),Rbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),woe=a("code"),Sbo=o("from_pretrained()"),Pbo=o("class method or the "),Aoe=a("code"),$bo=o("from_config()"),Ibo=o(`class
method.`),jbo=l(),J4=a("p"),Dbo=o("This class cannot be instantiated directly using "),Loe=a("code"),Nbo=o("__init__()"),qbo=o(" (throws an error)."),Obo=l(),Qr=a("div"),f(Y4.$$.fragment),Gbo=l(),Boe=a("p"),Xbo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vbo=l(),id=a("p"),zbo=o(`Note:
Loading a model from its configuration file does `),xoe=a("strong"),Wbo=o("not"),Qbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=a("code"),Hbo=o("from_pretrained()"),Ubo=o("to load the model weights."),Jbo=l(),Roe=a("p"),Ybo=o("Examples:"),Kbo=l(),f(K4.$$.fragment),Zbo=l(),qe=a("div"),f(Z4.$$.fragment),e5o=l(),Soe=a("p"),o5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),r5o=l(),Qa=a("p"),t5o=o("The model class to instantiate is selected based on the "),Poe=a("code"),a5o=o("model_type"),n5o=o(` property of the config object (either
passed as an argument or loaded from `),$oe=a("code"),s5o=o("pretrained_model_name_or_path"),l5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=a("code"),i5o=o("pretrained_model_name_or_path"),d5o=o(":"),c5o=l(),I=a("ul"),Gu=a("li"),joe=a("strong"),f5o=o("albert"),m5o=o(" \u2014 "),T$=a("a"),g5o=o("AlbertForMaskedLM"),h5o=o(" (ALBERT model)"),p5o=l(),Xu=a("li"),Doe=a("strong"),_5o=o("bart"),u5o=o(" \u2014 "),F$=a("a"),b5o=o("BartForConditionalGeneration"),v5o=o(" (BART model)"),T5o=l(),Vu=a("li"),Noe=a("strong"),F5o=o("bert"),C5o=o(" \u2014 "),C$=a("a"),M5o=o("BertForMaskedLM"),E5o=o(" (BERT model)"),y5o=l(),zu=a("li"),qoe=a("strong"),w5o=o("big_bird"),A5o=o(" \u2014 "),M$=a("a"),L5o=o("BigBirdForMaskedLM"),B5o=o(" (BigBird model)"),x5o=l(),Wu=a("li"),Ooe=a("strong"),k5o=o("camembert"),R5o=o(" \u2014 "),E$=a("a"),S5o=o("CamembertForMaskedLM"),P5o=o(" (CamemBERT model)"),$5o=l(),Qu=a("li"),Goe=a("strong"),I5o=o("convbert"),j5o=o(" \u2014 "),y$=a("a"),D5o=o("ConvBertForMaskedLM"),N5o=o(" (ConvBERT model)"),q5o=l(),Hu=a("li"),Xoe=a("strong"),O5o=o("data2vec-text"),G5o=o(" \u2014 "),w$=a("a"),X5o=o("Data2VecTextForMaskedLM"),V5o=o(" (Data2VecText model)"),z5o=l(),Uu=a("li"),Voe=a("strong"),W5o=o("deberta"),Q5o=o(" \u2014 "),A$=a("a"),H5o=o("DebertaForMaskedLM"),U5o=o(" (DeBERTa model)"),J5o=l(),Ju=a("li"),zoe=a("strong"),Y5o=o("deberta-v2"),K5o=o(" \u2014 "),L$=a("a"),Z5o=o("DebertaV2ForMaskedLM"),e2o=o(" (DeBERTa-v2 model)"),o2o=l(),Yu=a("li"),Woe=a("strong"),r2o=o("distilbert"),t2o=o(" \u2014 "),B$=a("a"),a2o=o("DistilBertForMaskedLM"),n2o=o(" (DistilBERT model)"),s2o=l(),Ku=a("li"),Qoe=a("strong"),l2o=o("electra"),i2o=o(" \u2014 "),x$=a("a"),d2o=o("ElectraForMaskedLM"),c2o=o(" (ELECTRA model)"),f2o=l(),Zu=a("li"),Hoe=a("strong"),m2o=o("flaubert"),g2o=o(" \u2014 "),k$=a("a"),h2o=o("FlaubertWithLMHeadModel"),p2o=o(" (FlauBERT model)"),_2o=l(),e1=a("li"),Uoe=a("strong"),u2o=o("fnet"),b2o=o(" \u2014 "),R$=a("a"),v2o=o("FNetForMaskedLM"),T2o=o(" (FNet model)"),F2o=l(),o1=a("li"),Joe=a("strong"),C2o=o("funnel"),M2o=o(" \u2014 "),S$=a("a"),E2o=o("FunnelForMaskedLM"),y2o=o(" (Funnel Transformer model)"),w2o=l(),r1=a("li"),Yoe=a("strong"),A2o=o("ibert"),L2o=o(" \u2014 "),P$=a("a"),B2o=o("IBertForMaskedLM"),x2o=o(" (I-BERT model)"),k2o=l(),t1=a("li"),Koe=a("strong"),R2o=o("layoutlm"),S2o=o(" \u2014 "),$$=a("a"),P2o=o("LayoutLMForMaskedLM"),$2o=o(" (LayoutLM model)"),I2o=l(),a1=a("li"),Zoe=a("strong"),j2o=o("longformer"),D2o=o(" \u2014 "),I$=a("a"),N2o=o("LongformerForMaskedLM"),q2o=o(" (Longformer model)"),O2o=l(),n1=a("li"),ere=a("strong"),G2o=o("mbart"),X2o=o(" \u2014 "),j$=a("a"),V2o=o("MBartForConditionalGeneration"),z2o=o(" (mBART model)"),W2o=l(),s1=a("li"),ore=a("strong"),Q2o=o("megatron-bert"),H2o=o(" \u2014 "),D$=a("a"),U2o=o("MegatronBertForMaskedLM"),J2o=o(" (MegatronBert model)"),Y2o=l(),l1=a("li"),rre=a("strong"),K2o=o("mobilebert"),Z2o=o(" \u2014 "),N$=a("a"),evo=o("MobileBertForMaskedLM"),ovo=o(" (MobileBERT model)"),rvo=l(),i1=a("li"),tre=a("strong"),tvo=o("mpnet"),avo=o(" \u2014 "),q$=a("a"),nvo=o("MPNetForMaskedLM"),svo=o(" (MPNet model)"),lvo=l(),d1=a("li"),are=a("strong"),ivo=o("nystromformer"),dvo=o(" \u2014 "),O$=a("a"),cvo=o("NystromformerForMaskedLM"),fvo=o(" (Nystromformer model)"),mvo=l(),c1=a("li"),nre=a("strong"),gvo=o("perceiver"),hvo=o(" \u2014 "),G$=a("a"),pvo=o("PerceiverForMaskedLM"),_vo=o(" (Perceiver model)"),uvo=l(),f1=a("li"),sre=a("strong"),bvo=o("qdqbert"),vvo=o(" \u2014 "),X$=a("a"),Tvo=o("QDQBertForMaskedLM"),Fvo=o(" (QDQBert model)"),Cvo=l(),m1=a("li"),lre=a("strong"),Mvo=o("reformer"),Evo=o(" \u2014 "),V$=a("a"),yvo=o("ReformerForMaskedLM"),wvo=o(" (Reformer model)"),Avo=l(),g1=a("li"),ire=a("strong"),Lvo=o("rembert"),Bvo=o(" \u2014 "),z$=a("a"),xvo=o("RemBertForMaskedLM"),kvo=o(" (RemBERT model)"),Rvo=l(),h1=a("li"),dre=a("strong"),Svo=o("roberta"),Pvo=o(" \u2014 "),W$=a("a"),$vo=o("RobertaForMaskedLM"),Ivo=o(" (RoBERTa model)"),jvo=l(),p1=a("li"),cre=a("strong"),Dvo=o("roformer"),Nvo=o(" \u2014 "),Q$=a("a"),qvo=o("RoFormerForMaskedLM"),Ovo=o(" (RoFormer model)"),Gvo=l(),_1=a("li"),fre=a("strong"),Xvo=o("squeezebert"),Vvo=o(" \u2014 "),H$=a("a"),zvo=o("SqueezeBertForMaskedLM"),Wvo=o(" (SqueezeBERT model)"),Qvo=l(),u1=a("li"),mre=a("strong"),Hvo=o("tapas"),Uvo=o(" \u2014 "),U$=a("a"),Jvo=o("TapasForMaskedLM"),Yvo=o(" (TAPAS model)"),Kvo=l(),b1=a("li"),gre=a("strong"),Zvo=o("wav2vec2"),e6o=o(" \u2014 "),hre=a("code"),o6o=o("Wav2Vec2ForMaskedLM"),r6o=o("(Wav2Vec2 model)"),t6o=l(),v1=a("li"),pre=a("strong"),a6o=o("xlm"),n6o=o(" \u2014 "),J$=a("a"),s6o=o("XLMWithLMHeadModel"),l6o=o(" (XLM model)"),i6o=l(),T1=a("li"),_re=a("strong"),d6o=o("xlm-roberta"),c6o=o(" \u2014 "),Y$=a("a"),f6o=o("XLMRobertaForMaskedLM"),m6o=o(" (XLM-RoBERTa model)"),g6o=l(),F1=a("li"),ure=a("strong"),h6o=o("xlm-roberta-xl"),p6o=o(" \u2014 "),K$=a("a"),_6o=o("XLMRobertaXLForMaskedLM"),u6o=o(" (XLM-RoBERTa-XL model)"),b6o=l(),C1=a("li"),bre=a("strong"),v6o=o("yoso"),T6o=o(" \u2014 "),Z$=a("a"),F6o=o("YosoForMaskedLM"),C6o=o(" (YOSO model)"),M6o=l(),M1=a("p"),E6o=o("The model is set in evaluation mode by default using "),vre=a("code"),y6o=o("model.eval()"),w6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tre=a("code"),A6o=o("model.train()"),L6o=l(),Fre=a("p"),B6o=o("Examples:"),x6o=l(),f(eE.$$.fragment),Axe=l(),dd=a("h2"),E1=a("a"),Cre=a("span"),f(oE.$$.fragment),k6o=l(),Mre=a("span"),R6o=o("AutoModelForSeq2SeqLM"),Lxe=l(),er=a("div"),f(rE.$$.fragment),S6o=l(),cd=a("p"),P6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ere=a("code"),$6o=o("from_pretrained()"),I6o=o("class method or the "),yre=a("code"),j6o=o("from_config()"),D6o=o(`class
method.`),N6o=l(),tE=a("p"),q6o=o("This class cannot be instantiated directly using "),wre=a("code"),O6o=o("__init__()"),G6o=o(" (throws an error)."),X6o=l(),Hr=a("div"),f(aE.$$.fragment),V6o=l(),Are=a("p"),z6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W6o=l(),fd=a("p"),Q6o=o(`Note:
Loading a model from its configuration file does `),Lre=a("strong"),H6o=o("not"),U6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=a("code"),J6o=o("from_pretrained()"),Y6o=o("to load the model weights."),K6o=l(),xre=a("p"),Z6o=o("Examples:"),eTo=l(),f(nE.$$.fragment),oTo=l(),Oe=a("div"),f(sE.$$.fragment),rTo=l(),kre=a("p"),tTo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aTo=l(),Ha=a("p"),nTo=o("The model class to instantiate is selected based on the "),Rre=a("code"),sTo=o("model_type"),lTo=o(` property of the config object (either
passed as an argument or loaded from `),Sre=a("code"),iTo=o("pretrained_model_name_or_path"),dTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=a("code"),cTo=o("pretrained_model_name_or_path"),fTo=o(":"),mTo=l(),ne=a("ul"),y1=a("li"),$re=a("strong"),gTo=o("bart"),hTo=o(" \u2014 "),eI=a("a"),pTo=o("BartForConditionalGeneration"),_To=o(" (BART model)"),uTo=l(),w1=a("li"),Ire=a("strong"),bTo=o("bigbird_pegasus"),vTo=o(" \u2014 "),oI=a("a"),TTo=o("BigBirdPegasusForConditionalGeneration"),FTo=o(" (BigBirdPegasus model)"),CTo=l(),A1=a("li"),jre=a("strong"),MTo=o("blenderbot"),ETo=o(" \u2014 "),rI=a("a"),yTo=o("BlenderbotForConditionalGeneration"),wTo=o(" (Blenderbot model)"),ATo=l(),L1=a("li"),Dre=a("strong"),LTo=o("blenderbot-small"),BTo=o(" \u2014 "),tI=a("a"),xTo=o("BlenderbotSmallForConditionalGeneration"),kTo=o(" (BlenderbotSmall model)"),RTo=l(),B1=a("li"),Nre=a("strong"),STo=o("encoder-decoder"),PTo=o(" \u2014 "),aI=a("a"),$To=o("EncoderDecoderModel"),ITo=o(" (Encoder decoder model)"),jTo=l(),x1=a("li"),qre=a("strong"),DTo=o("fsmt"),NTo=o(" \u2014 "),nI=a("a"),qTo=o("FSMTForConditionalGeneration"),OTo=o(" (FairSeq Machine-Translation model)"),GTo=l(),k1=a("li"),Ore=a("strong"),XTo=o("led"),VTo=o(" \u2014 "),sI=a("a"),zTo=o("LEDForConditionalGeneration"),WTo=o(" (LED model)"),QTo=l(),R1=a("li"),Gre=a("strong"),HTo=o("m2m_100"),UTo=o(" \u2014 "),lI=a("a"),JTo=o("M2M100ForConditionalGeneration"),YTo=o(" (M2M100 model)"),KTo=l(),S1=a("li"),Xre=a("strong"),ZTo=o("marian"),e8o=o(" \u2014 "),iI=a("a"),o8o=o("MarianMTModel"),r8o=o(" (Marian model)"),t8o=l(),P1=a("li"),Vre=a("strong"),a8o=o("mbart"),n8o=o(" \u2014 "),dI=a("a"),s8o=o("MBartForConditionalGeneration"),l8o=o(" (mBART model)"),i8o=l(),$1=a("li"),zre=a("strong"),d8o=o("mt5"),c8o=o(" \u2014 "),cI=a("a"),f8o=o("MT5ForConditionalGeneration"),m8o=o(" (mT5 model)"),g8o=l(),I1=a("li"),Wre=a("strong"),h8o=o("pegasus"),p8o=o(" \u2014 "),fI=a("a"),_8o=o("PegasusForConditionalGeneration"),u8o=o(" (Pegasus model)"),b8o=l(),j1=a("li"),Qre=a("strong"),v8o=o("plbart"),T8o=o(" \u2014 "),mI=a("a"),F8o=o("PLBartForConditionalGeneration"),C8o=o(" (PLBart model)"),M8o=l(),D1=a("li"),Hre=a("strong"),E8o=o("prophetnet"),y8o=o(" \u2014 "),gI=a("a"),w8o=o("ProphetNetForConditionalGeneration"),A8o=o(" (ProphetNet model)"),L8o=l(),N1=a("li"),Ure=a("strong"),B8o=o("t5"),x8o=o(" \u2014 "),hI=a("a"),k8o=o("T5ForConditionalGeneration"),R8o=o(" (T5 model)"),S8o=l(),q1=a("li"),Jre=a("strong"),P8o=o("xlm-prophetnet"),$8o=o(" \u2014 "),pI=a("a"),I8o=o("XLMProphetNetForConditionalGeneration"),j8o=o(" (XLMProphetNet model)"),D8o=l(),O1=a("p"),N8o=o("The model is set in evaluation mode by default using "),Yre=a("code"),q8o=o("model.eval()"),O8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kre=a("code"),G8o=o("model.train()"),X8o=l(),Zre=a("p"),V8o=o("Examples:"),z8o=l(),f(lE.$$.fragment),Bxe=l(),md=a("h2"),G1=a("a"),ete=a("span"),f(iE.$$.fragment),W8o=l(),ote=a("span"),Q8o=o("AutoModelForSequenceClassification"),xxe=l(),or=a("div"),f(dE.$$.fragment),H8o=l(),gd=a("p"),U8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rte=a("code"),J8o=o("from_pretrained()"),Y8o=o("class method or the "),tte=a("code"),K8o=o("from_config()"),Z8o=o(`class
method.`),eFo=l(),cE=a("p"),oFo=o("This class cannot be instantiated directly using "),ate=a("code"),rFo=o("__init__()"),tFo=o(" (throws an error)."),aFo=l(),Ur=a("div"),f(fE.$$.fragment),nFo=l(),nte=a("p"),sFo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lFo=l(),hd=a("p"),iFo=o(`Note:
Loading a model from its configuration file does `),ste=a("strong"),dFo=o("not"),cFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lte=a("code"),fFo=o("from_pretrained()"),mFo=o("to load the model weights."),gFo=l(),ite=a("p"),hFo=o("Examples:"),pFo=l(),f(mE.$$.fragment),_Fo=l(),Ge=a("div"),f(gE.$$.fragment),uFo=l(),dte=a("p"),bFo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vFo=l(),Ua=a("p"),TFo=o("The model class to instantiate is selected based on the "),cte=a("code"),FFo=o("model_type"),CFo=o(` property of the config object (either
passed as an argument or loaded from `),fte=a("code"),MFo=o("pretrained_model_name_or_path"),EFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mte=a("code"),yFo=o("pretrained_model_name_or_path"),wFo=o(":"),AFo=l(),A=a("ul"),X1=a("li"),gte=a("strong"),LFo=o("albert"),BFo=o(" \u2014 "),_I=a("a"),xFo=o("AlbertForSequenceClassification"),kFo=o(" (ALBERT model)"),RFo=l(),V1=a("li"),hte=a("strong"),SFo=o("bart"),PFo=o(" \u2014 "),uI=a("a"),$Fo=o("BartForSequenceClassification"),IFo=o(" (BART model)"),jFo=l(),z1=a("li"),pte=a("strong"),DFo=o("bert"),NFo=o(" \u2014 "),bI=a("a"),qFo=o("BertForSequenceClassification"),OFo=o(" (BERT model)"),GFo=l(),W1=a("li"),_te=a("strong"),XFo=o("big_bird"),VFo=o(" \u2014 "),vI=a("a"),zFo=o("BigBirdForSequenceClassification"),WFo=o(" (BigBird model)"),QFo=l(),Q1=a("li"),ute=a("strong"),HFo=o("bigbird_pegasus"),UFo=o(" \u2014 "),TI=a("a"),JFo=o("BigBirdPegasusForSequenceClassification"),YFo=o(" (BigBirdPegasus model)"),KFo=l(),H1=a("li"),bte=a("strong"),ZFo=o("camembert"),e9o=o(" \u2014 "),FI=a("a"),o9o=o("CamembertForSequenceClassification"),r9o=o(" (CamemBERT model)"),t9o=l(),U1=a("li"),vte=a("strong"),a9o=o("canine"),n9o=o(" \u2014 "),CI=a("a"),s9o=o("CanineForSequenceClassification"),l9o=o(" (Canine model)"),i9o=l(),J1=a("li"),Tte=a("strong"),d9o=o("convbert"),c9o=o(" \u2014 "),MI=a("a"),f9o=o("ConvBertForSequenceClassification"),m9o=o(" (ConvBERT model)"),g9o=l(),Y1=a("li"),Fte=a("strong"),h9o=o("ctrl"),p9o=o(" \u2014 "),EI=a("a"),_9o=o("CTRLForSequenceClassification"),u9o=o(" (CTRL model)"),b9o=l(),K1=a("li"),Cte=a("strong"),v9o=o("data2vec-text"),T9o=o(" \u2014 "),yI=a("a"),F9o=o("Data2VecTextForSequenceClassification"),C9o=o(" (Data2VecText model)"),M9o=l(),Z1=a("li"),Mte=a("strong"),E9o=o("deberta"),y9o=o(" \u2014 "),wI=a("a"),w9o=o("DebertaForSequenceClassification"),A9o=o(" (DeBERTa model)"),L9o=l(),eb=a("li"),Ete=a("strong"),B9o=o("deberta-v2"),x9o=o(" \u2014 "),AI=a("a"),k9o=o("DebertaV2ForSequenceClassification"),R9o=o(" (DeBERTa-v2 model)"),S9o=l(),ob=a("li"),yte=a("strong"),P9o=o("distilbert"),$9o=o(" \u2014 "),LI=a("a"),I9o=o("DistilBertForSequenceClassification"),j9o=o(" (DistilBERT model)"),D9o=l(),rb=a("li"),wte=a("strong"),N9o=o("electra"),q9o=o(" \u2014 "),BI=a("a"),O9o=o("ElectraForSequenceClassification"),G9o=o(" (ELECTRA model)"),X9o=l(),tb=a("li"),Ate=a("strong"),V9o=o("flaubert"),z9o=o(" \u2014 "),xI=a("a"),W9o=o("FlaubertForSequenceClassification"),Q9o=o(" (FlauBERT model)"),H9o=l(),ab=a("li"),Lte=a("strong"),U9o=o("fnet"),J9o=o(" \u2014 "),kI=a("a"),Y9o=o("FNetForSequenceClassification"),K9o=o(" (FNet model)"),Z9o=l(),nb=a("li"),Bte=a("strong"),eCo=o("funnel"),oCo=o(" \u2014 "),RI=a("a"),rCo=o("FunnelForSequenceClassification"),tCo=o(" (Funnel Transformer model)"),aCo=l(),sb=a("li"),xte=a("strong"),nCo=o("gpt2"),sCo=o(" \u2014 "),SI=a("a"),lCo=o("GPT2ForSequenceClassification"),iCo=o(" (OpenAI GPT-2 model)"),dCo=l(),lb=a("li"),kte=a("strong"),cCo=o("gpt_neo"),fCo=o(" \u2014 "),PI=a("a"),mCo=o("GPTNeoForSequenceClassification"),gCo=o(" (GPT Neo model)"),hCo=l(),ib=a("li"),Rte=a("strong"),pCo=o("gptj"),_Co=o(" \u2014 "),$I=a("a"),uCo=o("GPTJForSequenceClassification"),bCo=o(" (GPT-J model)"),vCo=l(),db=a("li"),Ste=a("strong"),TCo=o("ibert"),FCo=o(" \u2014 "),II=a("a"),CCo=o("IBertForSequenceClassification"),MCo=o(" (I-BERT model)"),ECo=l(),cb=a("li"),Pte=a("strong"),yCo=o("layoutlm"),wCo=o(" \u2014 "),jI=a("a"),ACo=o("LayoutLMForSequenceClassification"),LCo=o(" (LayoutLM model)"),BCo=l(),fb=a("li"),$te=a("strong"),xCo=o("layoutlmv2"),kCo=o(" \u2014 "),DI=a("a"),RCo=o("LayoutLMv2ForSequenceClassification"),SCo=o(" (LayoutLMv2 model)"),PCo=l(),mb=a("li"),Ite=a("strong"),$Co=o("led"),ICo=o(" \u2014 "),NI=a("a"),jCo=o("LEDForSequenceClassification"),DCo=o(" (LED model)"),NCo=l(),gb=a("li"),jte=a("strong"),qCo=o("longformer"),OCo=o(" \u2014 "),qI=a("a"),GCo=o("LongformerForSequenceClassification"),XCo=o(" (Longformer model)"),VCo=l(),hb=a("li"),Dte=a("strong"),zCo=o("mbart"),WCo=o(" \u2014 "),OI=a("a"),QCo=o("MBartForSequenceClassification"),HCo=o(" (mBART model)"),UCo=l(),pb=a("li"),Nte=a("strong"),JCo=o("megatron-bert"),YCo=o(" \u2014 "),GI=a("a"),KCo=o("MegatronBertForSequenceClassification"),ZCo=o(" (MegatronBert model)"),eMo=l(),_b=a("li"),qte=a("strong"),oMo=o("mobilebert"),rMo=o(" \u2014 "),XI=a("a"),tMo=o("MobileBertForSequenceClassification"),aMo=o(" (MobileBERT model)"),nMo=l(),ub=a("li"),Ote=a("strong"),sMo=o("mpnet"),lMo=o(" \u2014 "),VI=a("a"),iMo=o("MPNetForSequenceClassification"),dMo=o(" (MPNet model)"),cMo=l(),bb=a("li"),Gte=a("strong"),fMo=o("nystromformer"),mMo=o(" \u2014 "),zI=a("a"),gMo=o("NystromformerForSequenceClassification"),hMo=o(" (Nystromformer model)"),pMo=l(),vb=a("li"),Xte=a("strong"),_Mo=o("openai-gpt"),uMo=o(" \u2014 "),WI=a("a"),bMo=o("OpenAIGPTForSequenceClassification"),vMo=o(" (OpenAI GPT model)"),TMo=l(),Tb=a("li"),Vte=a("strong"),FMo=o("perceiver"),CMo=o(" \u2014 "),QI=a("a"),MMo=o("PerceiverForSequenceClassification"),EMo=o(" (Perceiver model)"),yMo=l(),Fb=a("li"),zte=a("strong"),wMo=o("plbart"),AMo=o(" \u2014 "),HI=a("a"),LMo=o("PLBartForSequenceClassification"),BMo=o(" (PLBart model)"),xMo=l(),Cb=a("li"),Wte=a("strong"),kMo=o("qdqbert"),RMo=o(" \u2014 "),UI=a("a"),SMo=o("QDQBertForSequenceClassification"),PMo=o(" (QDQBert model)"),$Mo=l(),Mb=a("li"),Qte=a("strong"),IMo=o("reformer"),jMo=o(" \u2014 "),JI=a("a"),DMo=o("ReformerForSequenceClassification"),NMo=o(" (Reformer model)"),qMo=l(),Eb=a("li"),Hte=a("strong"),OMo=o("rembert"),GMo=o(" \u2014 "),YI=a("a"),XMo=o("RemBertForSequenceClassification"),VMo=o(" (RemBERT model)"),zMo=l(),yb=a("li"),Ute=a("strong"),WMo=o("roberta"),QMo=o(" \u2014 "),KI=a("a"),HMo=o("RobertaForSequenceClassification"),UMo=o(" (RoBERTa model)"),JMo=l(),wb=a("li"),Jte=a("strong"),YMo=o("roformer"),KMo=o(" \u2014 "),ZI=a("a"),ZMo=o("RoFormerForSequenceClassification"),e4o=o(" (RoFormer model)"),o4o=l(),Ab=a("li"),Yte=a("strong"),r4o=o("squeezebert"),t4o=o(" \u2014 "),ej=a("a"),a4o=o("SqueezeBertForSequenceClassification"),n4o=o(" (SqueezeBERT model)"),s4o=l(),Lb=a("li"),Kte=a("strong"),l4o=o("tapas"),i4o=o(" \u2014 "),oj=a("a"),d4o=o("TapasForSequenceClassification"),c4o=o(" (TAPAS model)"),f4o=l(),Bb=a("li"),Zte=a("strong"),m4o=o("transfo-xl"),g4o=o(" \u2014 "),rj=a("a"),h4o=o("TransfoXLForSequenceClassification"),p4o=o(" (Transformer-XL model)"),_4o=l(),xb=a("li"),eae=a("strong"),u4o=o("xlm"),b4o=o(" \u2014 "),tj=a("a"),v4o=o("XLMForSequenceClassification"),T4o=o(" (XLM model)"),F4o=l(),kb=a("li"),oae=a("strong"),C4o=o("xlm-roberta"),M4o=o(" \u2014 "),aj=a("a"),E4o=o("XLMRobertaForSequenceClassification"),y4o=o(" (XLM-RoBERTa model)"),w4o=l(),Rb=a("li"),rae=a("strong"),A4o=o("xlm-roberta-xl"),L4o=o(" \u2014 "),nj=a("a"),B4o=o("XLMRobertaXLForSequenceClassification"),x4o=o(" (XLM-RoBERTa-XL model)"),k4o=l(),Sb=a("li"),tae=a("strong"),R4o=o("xlnet"),S4o=o(" \u2014 "),sj=a("a"),P4o=o("XLNetForSequenceClassification"),$4o=o(" (XLNet model)"),I4o=l(),Pb=a("li"),aae=a("strong"),j4o=o("yoso"),D4o=o(" \u2014 "),lj=a("a"),N4o=o("YosoForSequenceClassification"),q4o=o(" (YOSO model)"),O4o=l(),$b=a("p"),G4o=o("The model is set in evaluation mode by default using "),nae=a("code"),X4o=o("model.eval()"),V4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sae=a("code"),z4o=o("model.train()"),W4o=l(),lae=a("p"),Q4o=o("Examples:"),H4o=l(),f(hE.$$.fragment),kxe=l(),pd=a("h2"),Ib=a("a"),iae=a("span"),f(pE.$$.fragment),U4o=l(),dae=a("span"),J4o=o("AutoModelForMultipleChoice"),Rxe=l(),rr=a("div"),f(_E.$$.fragment),Y4o=l(),_d=a("p"),K4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cae=a("code"),Z4o=o("from_pretrained()"),eEo=o("class method or the "),fae=a("code"),oEo=o("from_config()"),rEo=o(`class
method.`),tEo=l(),uE=a("p"),aEo=o("This class cannot be instantiated directly using "),mae=a("code"),nEo=o("__init__()"),sEo=o(" (throws an error)."),lEo=l(),Jr=a("div"),f(bE.$$.fragment),iEo=l(),gae=a("p"),dEo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cEo=l(),ud=a("p"),fEo=o(`Note:
Loading a model from its configuration file does `),hae=a("strong"),mEo=o("not"),gEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pae=a("code"),hEo=o("from_pretrained()"),pEo=o("to load the model weights."),_Eo=l(),_ae=a("p"),uEo=o("Examples:"),bEo=l(),f(vE.$$.fragment),vEo=l(),Xe=a("div"),f(TE.$$.fragment),TEo=l(),uae=a("p"),FEo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CEo=l(),Ja=a("p"),MEo=o("The model class to instantiate is selected based on the "),bae=a("code"),EEo=o("model_type"),yEo=o(` property of the config object (either
passed as an argument or loaded from `),vae=a("code"),wEo=o("pretrained_model_name_or_path"),AEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tae=a("code"),LEo=o("pretrained_model_name_or_path"),BEo=o(":"),xEo=l(),O=a("ul"),jb=a("li"),Fae=a("strong"),kEo=o("albert"),REo=o(" \u2014 "),ij=a("a"),SEo=o("AlbertForMultipleChoice"),PEo=o(" (ALBERT model)"),$Eo=l(),Db=a("li"),Cae=a("strong"),IEo=o("bert"),jEo=o(" \u2014 "),dj=a("a"),DEo=o("BertForMultipleChoice"),NEo=o(" (BERT model)"),qEo=l(),Nb=a("li"),Mae=a("strong"),OEo=o("big_bird"),GEo=o(" \u2014 "),cj=a("a"),XEo=o("BigBirdForMultipleChoice"),VEo=o(" (BigBird model)"),zEo=l(),qb=a("li"),Eae=a("strong"),WEo=o("camembert"),QEo=o(" \u2014 "),fj=a("a"),HEo=o("CamembertForMultipleChoice"),UEo=o(" (CamemBERT model)"),JEo=l(),Ob=a("li"),yae=a("strong"),YEo=o("canine"),KEo=o(" \u2014 "),mj=a("a"),ZEo=o("CanineForMultipleChoice"),e3o=o(" (Canine model)"),o3o=l(),Gb=a("li"),wae=a("strong"),r3o=o("convbert"),t3o=o(" \u2014 "),gj=a("a"),a3o=o("ConvBertForMultipleChoice"),n3o=o(" (ConvBERT model)"),s3o=l(),Xb=a("li"),Aae=a("strong"),l3o=o("data2vec-text"),i3o=o(" \u2014 "),hj=a("a"),d3o=o("Data2VecTextForMultipleChoice"),c3o=o(" (Data2VecText model)"),f3o=l(),Vb=a("li"),Lae=a("strong"),m3o=o("distilbert"),g3o=o(" \u2014 "),pj=a("a"),h3o=o("DistilBertForMultipleChoice"),p3o=o(" (DistilBERT model)"),_3o=l(),zb=a("li"),Bae=a("strong"),u3o=o("electra"),b3o=o(" \u2014 "),_j=a("a"),v3o=o("ElectraForMultipleChoice"),T3o=o(" (ELECTRA model)"),F3o=l(),Wb=a("li"),xae=a("strong"),C3o=o("flaubert"),M3o=o(" \u2014 "),uj=a("a"),E3o=o("FlaubertForMultipleChoice"),y3o=o(" (FlauBERT model)"),w3o=l(),Qb=a("li"),kae=a("strong"),A3o=o("fnet"),L3o=o(" \u2014 "),bj=a("a"),B3o=o("FNetForMultipleChoice"),x3o=o(" (FNet model)"),k3o=l(),Hb=a("li"),Rae=a("strong"),R3o=o("funnel"),S3o=o(" \u2014 "),vj=a("a"),P3o=o("FunnelForMultipleChoice"),$3o=o(" (Funnel Transformer model)"),I3o=l(),Ub=a("li"),Sae=a("strong"),j3o=o("ibert"),D3o=o(" \u2014 "),Tj=a("a"),N3o=o("IBertForMultipleChoice"),q3o=o(" (I-BERT model)"),O3o=l(),Jb=a("li"),Pae=a("strong"),G3o=o("longformer"),X3o=o(" \u2014 "),Fj=a("a"),V3o=o("LongformerForMultipleChoice"),z3o=o(" (Longformer model)"),W3o=l(),Yb=a("li"),$ae=a("strong"),Q3o=o("megatron-bert"),H3o=o(" \u2014 "),Cj=a("a"),U3o=o("MegatronBertForMultipleChoice"),J3o=o(" (MegatronBert model)"),Y3o=l(),Kb=a("li"),Iae=a("strong"),K3o=o("mobilebert"),Z3o=o(" \u2014 "),Mj=a("a"),eyo=o("MobileBertForMultipleChoice"),oyo=o(" (MobileBERT model)"),ryo=l(),Zb=a("li"),jae=a("strong"),tyo=o("mpnet"),ayo=o(" \u2014 "),Ej=a("a"),nyo=o("MPNetForMultipleChoice"),syo=o(" (MPNet model)"),lyo=l(),e5=a("li"),Dae=a("strong"),iyo=o("nystromformer"),dyo=o(" \u2014 "),yj=a("a"),cyo=o("NystromformerForMultipleChoice"),fyo=o(" (Nystromformer model)"),myo=l(),o5=a("li"),Nae=a("strong"),gyo=o("qdqbert"),hyo=o(" \u2014 "),wj=a("a"),pyo=o("QDQBertForMultipleChoice"),_yo=o(" (QDQBert model)"),uyo=l(),r5=a("li"),qae=a("strong"),byo=o("rembert"),vyo=o(" \u2014 "),Aj=a("a"),Tyo=o("RemBertForMultipleChoice"),Fyo=o(" (RemBERT model)"),Cyo=l(),t5=a("li"),Oae=a("strong"),Myo=o("roberta"),Eyo=o(" \u2014 "),Lj=a("a"),yyo=o("RobertaForMultipleChoice"),wyo=o(" (RoBERTa model)"),Ayo=l(),a5=a("li"),Gae=a("strong"),Lyo=o("roformer"),Byo=o(" \u2014 "),Bj=a("a"),xyo=o("RoFormerForMultipleChoice"),kyo=o(" (RoFormer model)"),Ryo=l(),n5=a("li"),Xae=a("strong"),Syo=o("squeezebert"),Pyo=o(" \u2014 "),xj=a("a"),$yo=o("SqueezeBertForMultipleChoice"),Iyo=o(" (SqueezeBERT model)"),jyo=l(),s5=a("li"),Vae=a("strong"),Dyo=o("xlm"),Nyo=o(" \u2014 "),kj=a("a"),qyo=o("XLMForMultipleChoice"),Oyo=o(" (XLM model)"),Gyo=l(),l5=a("li"),zae=a("strong"),Xyo=o("xlm-roberta"),Vyo=o(" \u2014 "),Rj=a("a"),zyo=o("XLMRobertaForMultipleChoice"),Wyo=o(" (XLM-RoBERTa model)"),Qyo=l(),i5=a("li"),Wae=a("strong"),Hyo=o("xlm-roberta-xl"),Uyo=o(" \u2014 "),Sj=a("a"),Jyo=o("XLMRobertaXLForMultipleChoice"),Yyo=o(" (XLM-RoBERTa-XL model)"),Kyo=l(),d5=a("li"),Qae=a("strong"),Zyo=o("xlnet"),ewo=o(" \u2014 "),Pj=a("a"),owo=o("XLNetForMultipleChoice"),rwo=o(" (XLNet model)"),two=l(),c5=a("li"),Hae=a("strong"),awo=o("yoso"),nwo=o(" \u2014 "),$j=a("a"),swo=o("YosoForMultipleChoice"),lwo=o(" (YOSO model)"),iwo=l(),f5=a("p"),dwo=o("The model is set in evaluation mode by default using "),Uae=a("code"),cwo=o("model.eval()"),fwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jae=a("code"),mwo=o("model.train()"),gwo=l(),Yae=a("p"),hwo=o("Examples:"),pwo=l(),f(FE.$$.fragment),Sxe=l(),bd=a("h2"),m5=a("a"),Kae=a("span"),f(CE.$$.fragment),_wo=l(),Zae=a("span"),uwo=o("AutoModelForNextSentencePrediction"),Pxe=l(),tr=a("div"),f(ME.$$.fragment),bwo=l(),vd=a("p"),vwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ene=a("code"),Two=o("from_pretrained()"),Fwo=o("class method or the "),one=a("code"),Cwo=o("from_config()"),Mwo=o(`class
method.`),Ewo=l(),EE=a("p"),ywo=o("This class cannot be instantiated directly using "),rne=a("code"),wwo=o("__init__()"),Awo=o(" (throws an error)."),Lwo=l(),Yr=a("div"),f(yE.$$.fragment),Bwo=l(),tne=a("p"),xwo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kwo=l(),Td=a("p"),Rwo=o(`Note:
Loading a model from its configuration file does `),ane=a("strong"),Swo=o("not"),Pwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nne=a("code"),$wo=o("from_pretrained()"),Iwo=o("to load the model weights."),jwo=l(),sne=a("p"),Dwo=o("Examples:"),Nwo=l(),f(wE.$$.fragment),qwo=l(),Ve=a("div"),f(AE.$$.fragment),Owo=l(),lne=a("p"),Gwo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xwo=l(),Ya=a("p"),Vwo=o("The model class to instantiate is selected based on the "),ine=a("code"),zwo=o("model_type"),Wwo=o(` property of the config object (either
passed as an argument or loaded from `),dne=a("code"),Qwo=o("pretrained_model_name_or_path"),Hwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cne=a("code"),Uwo=o("pretrained_model_name_or_path"),Jwo=o(":"),Ywo=l(),da=a("ul"),g5=a("li"),fne=a("strong"),Kwo=o("bert"),Zwo=o(" \u2014 "),Ij=a("a"),eAo=o("BertForNextSentencePrediction"),oAo=o(" (BERT model)"),rAo=l(),h5=a("li"),mne=a("strong"),tAo=o("fnet"),aAo=o(" \u2014 "),jj=a("a"),nAo=o("FNetForNextSentencePrediction"),sAo=o(" (FNet model)"),lAo=l(),p5=a("li"),gne=a("strong"),iAo=o("megatron-bert"),dAo=o(" \u2014 "),Dj=a("a"),cAo=o("MegatronBertForNextSentencePrediction"),fAo=o(" (MegatronBert model)"),mAo=l(),_5=a("li"),hne=a("strong"),gAo=o("mobilebert"),hAo=o(" \u2014 "),Nj=a("a"),pAo=o("MobileBertForNextSentencePrediction"),_Ao=o(" (MobileBERT model)"),uAo=l(),u5=a("li"),pne=a("strong"),bAo=o("qdqbert"),vAo=o(" \u2014 "),qj=a("a"),TAo=o("QDQBertForNextSentencePrediction"),FAo=o(" (QDQBert model)"),CAo=l(),b5=a("p"),MAo=o("The model is set in evaluation mode by default using "),_ne=a("code"),EAo=o("model.eval()"),yAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),une=a("code"),wAo=o("model.train()"),AAo=l(),bne=a("p"),LAo=o("Examples:"),BAo=l(),f(LE.$$.fragment),$xe=l(),Fd=a("h2"),v5=a("a"),vne=a("span"),f(BE.$$.fragment),xAo=l(),Tne=a("span"),kAo=o("AutoModelForTokenClassification"),Ixe=l(),ar=a("div"),f(xE.$$.fragment),RAo=l(),Cd=a("p"),SAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fne=a("code"),PAo=o("from_pretrained()"),$Ao=o("class method or the "),Cne=a("code"),IAo=o("from_config()"),jAo=o(`class
method.`),DAo=l(),kE=a("p"),NAo=o("This class cannot be instantiated directly using "),Mne=a("code"),qAo=o("__init__()"),OAo=o(" (throws an error)."),GAo=l(),Kr=a("div"),f(RE.$$.fragment),XAo=l(),Ene=a("p"),VAo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zAo=l(),Md=a("p"),WAo=o(`Note:
Loading a model from its configuration file does `),yne=a("strong"),QAo=o("not"),HAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wne=a("code"),UAo=o("from_pretrained()"),JAo=o("to load the model weights."),YAo=l(),Ane=a("p"),KAo=o("Examples:"),ZAo=l(),f(SE.$$.fragment),e0o=l(),ze=a("div"),f(PE.$$.fragment),o0o=l(),Lne=a("p"),r0o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),t0o=l(),Ka=a("p"),a0o=o("The model class to instantiate is selected based on the "),Bne=a("code"),n0o=o("model_type"),s0o=o(` property of the config object (either
passed as an argument or loaded from `),xne=a("code"),l0o=o("pretrained_model_name_or_path"),i0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=a("code"),d0o=o("pretrained_model_name_or_path"),c0o=o(":"),f0o=l(),N=a("ul"),T5=a("li"),Rne=a("strong"),m0o=o("albert"),g0o=o(" \u2014 "),Oj=a("a"),h0o=o("AlbertForTokenClassification"),p0o=o(" (ALBERT model)"),_0o=l(),F5=a("li"),Sne=a("strong"),u0o=o("bert"),b0o=o(" \u2014 "),Gj=a("a"),v0o=o("BertForTokenClassification"),T0o=o(" (BERT model)"),F0o=l(),C5=a("li"),Pne=a("strong"),C0o=o("big_bird"),M0o=o(" \u2014 "),Xj=a("a"),E0o=o("BigBirdForTokenClassification"),y0o=o(" (BigBird model)"),w0o=l(),M5=a("li"),$ne=a("strong"),A0o=o("camembert"),L0o=o(" \u2014 "),Vj=a("a"),B0o=o("CamembertForTokenClassification"),x0o=o(" (CamemBERT model)"),k0o=l(),E5=a("li"),Ine=a("strong"),R0o=o("canine"),S0o=o(" \u2014 "),zj=a("a"),P0o=o("CanineForTokenClassification"),$0o=o(" (Canine model)"),I0o=l(),y5=a("li"),jne=a("strong"),j0o=o("convbert"),D0o=o(" \u2014 "),Wj=a("a"),N0o=o("ConvBertForTokenClassification"),q0o=o(" (ConvBERT model)"),O0o=l(),w5=a("li"),Dne=a("strong"),G0o=o("data2vec-text"),X0o=o(" \u2014 "),Qj=a("a"),V0o=o("Data2VecTextForTokenClassification"),z0o=o(" (Data2VecText model)"),W0o=l(),A5=a("li"),Nne=a("strong"),Q0o=o("deberta"),H0o=o(" \u2014 "),Hj=a("a"),U0o=o("DebertaForTokenClassification"),J0o=o(" (DeBERTa model)"),Y0o=l(),L5=a("li"),qne=a("strong"),K0o=o("deberta-v2"),Z0o=o(" \u2014 "),Uj=a("a"),eLo=o("DebertaV2ForTokenClassification"),oLo=o(" (DeBERTa-v2 model)"),rLo=l(),B5=a("li"),One=a("strong"),tLo=o("distilbert"),aLo=o(" \u2014 "),Jj=a("a"),nLo=o("DistilBertForTokenClassification"),sLo=o(" (DistilBERT model)"),lLo=l(),x5=a("li"),Gne=a("strong"),iLo=o("electra"),dLo=o(" \u2014 "),Yj=a("a"),cLo=o("ElectraForTokenClassification"),fLo=o(" (ELECTRA model)"),mLo=l(),k5=a("li"),Xne=a("strong"),gLo=o("flaubert"),hLo=o(" \u2014 "),Kj=a("a"),pLo=o("FlaubertForTokenClassification"),_Lo=o(" (FlauBERT model)"),uLo=l(),R5=a("li"),Vne=a("strong"),bLo=o("fnet"),vLo=o(" \u2014 "),Zj=a("a"),TLo=o("FNetForTokenClassification"),FLo=o(" (FNet model)"),CLo=l(),S5=a("li"),zne=a("strong"),MLo=o("funnel"),ELo=o(" \u2014 "),eD=a("a"),yLo=o("FunnelForTokenClassification"),wLo=o(" (Funnel Transformer model)"),ALo=l(),P5=a("li"),Wne=a("strong"),LLo=o("gpt2"),BLo=o(" \u2014 "),oD=a("a"),xLo=o("GPT2ForTokenClassification"),kLo=o(" (OpenAI GPT-2 model)"),RLo=l(),$5=a("li"),Qne=a("strong"),SLo=o("ibert"),PLo=o(" \u2014 "),rD=a("a"),$Lo=o("IBertForTokenClassification"),ILo=o(" (I-BERT model)"),jLo=l(),I5=a("li"),Hne=a("strong"),DLo=o("layoutlm"),NLo=o(" \u2014 "),tD=a("a"),qLo=o("LayoutLMForTokenClassification"),OLo=o(" (LayoutLM model)"),GLo=l(),j5=a("li"),Une=a("strong"),XLo=o("layoutlmv2"),VLo=o(" \u2014 "),aD=a("a"),zLo=o("LayoutLMv2ForTokenClassification"),WLo=o(" (LayoutLMv2 model)"),QLo=l(),D5=a("li"),Jne=a("strong"),HLo=o("longformer"),ULo=o(" \u2014 "),nD=a("a"),JLo=o("LongformerForTokenClassification"),YLo=o(" (Longformer model)"),KLo=l(),N5=a("li"),Yne=a("strong"),ZLo=o("megatron-bert"),e7o=o(" \u2014 "),sD=a("a"),o7o=o("MegatronBertForTokenClassification"),r7o=o(" (MegatronBert model)"),t7o=l(),q5=a("li"),Kne=a("strong"),a7o=o("mobilebert"),n7o=o(" \u2014 "),lD=a("a"),s7o=o("MobileBertForTokenClassification"),l7o=o(" (MobileBERT model)"),i7o=l(),O5=a("li"),Zne=a("strong"),d7o=o("mpnet"),c7o=o(" \u2014 "),iD=a("a"),f7o=o("MPNetForTokenClassification"),m7o=o(" (MPNet model)"),g7o=l(),G5=a("li"),ese=a("strong"),h7o=o("nystromformer"),p7o=o(" \u2014 "),dD=a("a"),_7o=o("NystromformerForTokenClassification"),u7o=o(" (Nystromformer model)"),b7o=l(),X5=a("li"),ose=a("strong"),v7o=o("qdqbert"),T7o=o(" \u2014 "),cD=a("a"),F7o=o("QDQBertForTokenClassification"),C7o=o(" (QDQBert model)"),M7o=l(),V5=a("li"),rse=a("strong"),E7o=o("rembert"),y7o=o(" \u2014 "),fD=a("a"),w7o=o("RemBertForTokenClassification"),A7o=o(" (RemBERT model)"),L7o=l(),z5=a("li"),tse=a("strong"),B7o=o("roberta"),x7o=o(" \u2014 "),mD=a("a"),k7o=o("RobertaForTokenClassification"),R7o=o(" (RoBERTa model)"),S7o=l(),W5=a("li"),ase=a("strong"),P7o=o("roformer"),$7o=o(" \u2014 "),gD=a("a"),I7o=o("RoFormerForTokenClassification"),j7o=o(" (RoFormer model)"),D7o=l(),Q5=a("li"),nse=a("strong"),N7o=o("squeezebert"),q7o=o(" \u2014 "),hD=a("a"),O7o=o("SqueezeBertForTokenClassification"),G7o=o(" (SqueezeBERT model)"),X7o=l(),H5=a("li"),sse=a("strong"),V7o=o("xlm"),z7o=o(" \u2014 "),pD=a("a"),W7o=o("XLMForTokenClassification"),Q7o=o(" (XLM model)"),H7o=l(),U5=a("li"),lse=a("strong"),U7o=o("xlm-roberta"),J7o=o(" \u2014 "),_D=a("a"),Y7o=o("XLMRobertaForTokenClassification"),K7o=o(" (XLM-RoBERTa model)"),Z7o=l(),J5=a("li"),ise=a("strong"),eBo=o("xlm-roberta-xl"),oBo=o(" \u2014 "),uD=a("a"),rBo=o("XLMRobertaXLForTokenClassification"),tBo=o(" (XLM-RoBERTa-XL model)"),aBo=l(),Y5=a("li"),dse=a("strong"),nBo=o("xlnet"),sBo=o(" \u2014 "),bD=a("a"),lBo=o("XLNetForTokenClassification"),iBo=o(" (XLNet model)"),dBo=l(),K5=a("li"),cse=a("strong"),cBo=o("yoso"),fBo=o(" \u2014 "),vD=a("a"),mBo=o("YosoForTokenClassification"),gBo=o(" (YOSO model)"),hBo=l(),Z5=a("p"),pBo=o("The model is set in evaluation mode by default using "),fse=a("code"),_Bo=o("model.eval()"),uBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mse=a("code"),bBo=o("model.train()"),vBo=l(),gse=a("p"),TBo=o("Examples:"),FBo=l(),f($E.$$.fragment),jxe=l(),Ed=a("h2"),e2=a("a"),hse=a("span"),f(IE.$$.fragment),CBo=l(),pse=a("span"),MBo=o("AutoModelForQuestionAnswering"),Dxe=l(),nr=a("div"),f(jE.$$.fragment),EBo=l(),yd=a("p"),yBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_se=a("code"),wBo=o("from_pretrained()"),ABo=o("class method or the "),use=a("code"),LBo=o("from_config()"),BBo=o(`class
method.`),xBo=l(),DE=a("p"),kBo=o("This class cannot be instantiated directly using "),bse=a("code"),RBo=o("__init__()"),SBo=o(" (throws an error)."),PBo=l(),Zr=a("div"),f(NE.$$.fragment),$Bo=l(),vse=a("p"),IBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jBo=l(),wd=a("p"),DBo=o(`Note:
Loading a model from its configuration file does `),Tse=a("strong"),NBo=o("not"),qBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fse=a("code"),OBo=o("from_pretrained()"),GBo=o("to load the model weights."),XBo=l(),Cse=a("p"),VBo=o("Examples:"),zBo=l(),f(qE.$$.fragment),WBo=l(),We=a("div"),f(OE.$$.fragment),QBo=l(),Mse=a("p"),HBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UBo=l(),Za=a("p"),JBo=o("The model class to instantiate is selected based on the "),Ese=a("code"),YBo=o("model_type"),KBo=o(` property of the config object (either
passed as an argument or loaded from `),yse=a("code"),ZBo=o("pretrained_model_name_or_path"),exo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wse=a("code"),oxo=o("pretrained_model_name_or_path"),rxo=o(":"),txo=l(),R=a("ul"),o2=a("li"),Ase=a("strong"),axo=o("albert"),nxo=o(" \u2014 "),TD=a("a"),sxo=o("AlbertForQuestionAnswering"),lxo=o(" (ALBERT model)"),ixo=l(),r2=a("li"),Lse=a("strong"),dxo=o("bart"),cxo=o(" \u2014 "),FD=a("a"),fxo=o("BartForQuestionAnswering"),mxo=o(" (BART model)"),gxo=l(),t2=a("li"),Bse=a("strong"),hxo=o("bert"),pxo=o(" \u2014 "),CD=a("a"),_xo=o("BertForQuestionAnswering"),uxo=o(" (BERT model)"),bxo=l(),a2=a("li"),xse=a("strong"),vxo=o("big_bird"),Txo=o(" \u2014 "),MD=a("a"),Fxo=o("BigBirdForQuestionAnswering"),Cxo=o(" (BigBird model)"),Mxo=l(),n2=a("li"),kse=a("strong"),Exo=o("bigbird_pegasus"),yxo=o(" \u2014 "),ED=a("a"),wxo=o("BigBirdPegasusForQuestionAnswering"),Axo=o(" (BigBirdPegasus model)"),Lxo=l(),s2=a("li"),Rse=a("strong"),Bxo=o("camembert"),xxo=o(" \u2014 "),yD=a("a"),kxo=o("CamembertForQuestionAnswering"),Rxo=o(" (CamemBERT model)"),Sxo=l(),l2=a("li"),Sse=a("strong"),Pxo=o("canine"),$xo=o(" \u2014 "),wD=a("a"),Ixo=o("CanineForQuestionAnswering"),jxo=o(" (Canine model)"),Dxo=l(),i2=a("li"),Pse=a("strong"),Nxo=o("convbert"),qxo=o(" \u2014 "),AD=a("a"),Oxo=o("ConvBertForQuestionAnswering"),Gxo=o(" (ConvBERT model)"),Xxo=l(),d2=a("li"),$se=a("strong"),Vxo=o("data2vec-text"),zxo=o(" \u2014 "),LD=a("a"),Wxo=o("Data2VecTextForQuestionAnswering"),Qxo=o(" (Data2VecText model)"),Hxo=l(),c2=a("li"),Ise=a("strong"),Uxo=o("deberta"),Jxo=o(" \u2014 "),BD=a("a"),Yxo=o("DebertaForQuestionAnswering"),Kxo=o(" (DeBERTa model)"),Zxo=l(),f2=a("li"),jse=a("strong"),eko=o("deberta-v2"),oko=o(" \u2014 "),xD=a("a"),rko=o("DebertaV2ForQuestionAnswering"),tko=o(" (DeBERTa-v2 model)"),ako=l(),m2=a("li"),Dse=a("strong"),nko=o("distilbert"),sko=o(" \u2014 "),kD=a("a"),lko=o("DistilBertForQuestionAnswering"),iko=o(" (DistilBERT model)"),dko=l(),g2=a("li"),Nse=a("strong"),cko=o("electra"),fko=o(" \u2014 "),RD=a("a"),mko=o("ElectraForQuestionAnswering"),gko=o(" (ELECTRA model)"),hko=l(),h2=a("li"),qse=a("strong"),pko=o("flaubert"),_ko=o(" \u2014 "),SD=a("a"),uko=o("FlaubertForQuestionAnsweringSimple"),bko=o(" (FlauBERT model)"),vko=l(),p2=a("li"),Ose=a("strong"),Tko=o("fnet"),Fko=o(" \u2014 "),PD=a("a"),Cko=o("FNetForQuestionAnswering"),Mko=o(" (FNet model)"),Eko=l(),_2=a("li"),Gse=a("strong"),yko=o("funnel"),wko=o(" \u2014 "),$D=a("a"),Ako=o("FunnelForQuestionAnswering"),Lko=o(" (Funnel Transformer model)"),Bko=l(),u2=a("li"),Xse=a("strong"),xko=o("gptj"),kko=o(" \u2014 "),ID=a("a"),Rko=o("GPTJForQuestionAnswering"),Sko=o(" (GPT-J model)"),Pko=l(),b2=a("li"),Vse=a("strong"),$ko=o("ibert"),Iko=o(" \u2014 "),jD=a("a"),jko=o("IBertForQuestionAnswering"),Dko=o(" (I-BERT model)"),Nko=l(),v2=a("li"),zse=a("strong"),qko=o("layoutlmv2"),Oko=o(" \u2014 "),DD=a("a"),Gko=o("LayoutLMv2ForQuestionAnswering"),Xko=o(" (LayoutLMv2 model)"),Vko=l(),T2=a("li"),Wse=a("strong"),zko=o("led"),Wko=o(" \u2014 "),ND=a("a"),Qko=o("LEDForQuestionAnswering"),Hko=o(" (LED model)"),Uko=l(),F2=a("li"),Qse=a("strong"),Jko=o("longformer"),Yko=o(" \u2014 "),qD=a("a"),Kko=o("LongformerForQuestionAnswering"),Zko=o(" (Longformer model)"),eRo=l(),C2=a("li"),Hse=a("strong"),oRo=o("lxmert"),rRo=o(" \u2014 "),OD=a("a"),tRo=o("LxmertForQuestionAnswering"),aRo=o(" (LXMERT model)"),nRo=l(),M2=a("li"),Use=a("strong"),sRo=o("mbart"),lRo=o(" \u2014 "),GD=a("a"),iRo=o("MBartForQuestionAnswering"),dRo=o(" (mBART model)"),cRo=l(),E2=a("li"),Jse=a("strong"),fRo=o("megatron-bert"),mRo=o(" \u2014 "),XD=a("a"),gRo=o("MegatronBertForQuestionAnswering"),hRo=o(" (MegatronBert model)"),pRo=l(),y2=a("li"),Yse=a("strong"),_Ro=o("mobilebert"),uRo=o(" \u2014 "),VD=a("a"),bRo=o("MobileBertForQuestionAnswering"),vRo=o(" (MobileBERT model)"),TRo=l(),w2=a("li"),Kse=a("strong"),FRo=o("mpnet"),CRo=o(" \u2014 "),zD=a("a"),MRo=o("MPNetForQuestionAnswering"),ERo=o(" (MPNet model)"),yRo=l(),A2=a("li"),Zse=a("strong"),wRo=o("nystromformer"),ARo=o(" \u2014 "),WD=a("a"),LRo=o("NystromformerForQuestionAnswering"),BRo=o(" (Nystromformer model)"),xRo=l(),L2=a("li"),ele=a("strong"),kRo=o("qdqbert"),RRo=o(" \u2014 "),QD=a("a"),SRo=o("QDQBertForQuestionAnswering"),PRo=o(" (QDQBert model)"),$Ro=l(),B2=a("li"),ole=a("strong"),IRo=o("reformer"),jRo=o(" \u2014 "),HD=a("a"),DRo=o("ReformerForQuestionAnswering"),NRo=o(" (Reformer model)"),qRo=l(),x2=a("li"),rle=a("strong"),ORo=o("rembert"),GRo=o(" \u2014 "),UD=a("a"),XRo=o("RemBertForQuestionAnswering"),VRo=o(" (RemBERT model)"),zRo=l(),k2=a("li"),tle=a("strong"),WRo=o("roberta"),QRo=o(" \u2014 "),JD=a("a"),HRo=o("RobertaForQuestionAnswering"),URo=o(" (RoBERTa model)"),JRo=l(),R2=a("li"),ale=a("strong"),YRo=o("roformer"),KRo=o(" \u2014 "),YD=a("a"),ZRo=o("RoFormerForQuestionAnswering"),eSo=o(" (RoFormer model)"),oSo=l(),S2=a("li"),nle=a("strong"),rSo=o("splinter"),tSo=o(" \u2014 "),KD=a("a"),aSo=o("SplinterForQuestionAnswering"),nSo=o(" (Splinter model)"),sSo=l(),P2=a("li"),sle=a("strong"),lSo=o("squeezebert"),iSo=o(" \u2014 "),ZD=a("a"),dSo=o("SqueezeBertForQuestionAnswering"),cSo=o(" (SqueezeBERT model)"),fSo=l(),$2=a("li"),lle=a("strong"),mSo=o("xlm"),gSo=o(" \u2014 "),eN=a("a"),hSo=o("XLMForQuestionAnsweringSimple"),pSo=o(" (XLM model)"),_So=l(),I2=a("li"),ile=a("strong"),uSo=o("xlm-roberta"),bSo=o(" \u2014 "),oN=a("a"),vSo=o("XLMRobertaForQuestionAnswering"),TSo=o(" (XLM-RoBERTa model)"),FSo=l(),j2=a("li"),dle=a("strong"),CSo=o("xlm-roberta-xl"),MSo=o(" \u2014 "),rN=a("a"),ESo=o("XLMRobertaXLForQuestionAnswering"),ySo=o(" (XLM-RoBERTa-XL model)"),wSo=l(),D2=a("li"),cle=a("strong"),ASo=o("xlnet"),LSo=o(" \u2014 "),tN=a("a"),BSo=o("XLNetForQuestionAnsweringSimple"),xSo=o(" (XLNet model)"),kSo=l(),N2=a("li"),fle=a("strong"),RSo=o("yoso"),SSo=o(" \u2014 "),aN=a("a"),PSo=o("YosoForQuestionAnswering"),$So=o(" (YOSO model)"),ISo=l(),q2=a("p"),jSo=o("The model is set in evaluation mode by default using "),mle=a("code"),DSo=o("model.eval()"),NSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gle=a("code"),qSo=o("model.train()"),OSo=l(),hle=a("p"),GSo=o("Examples:"),XSo=l(),f(GE.$$.fragment),Nxe=l(),Ad=a("h2"),O2=a("a"),ple=a("span"),f(XE.$$.fragment),VSo=l(),_le=a("span"),zSo=o("AutoModelForTableQuestionAnswering"),qxe=l(),sr=a("div"),f(VE.$$.fragment),WSo=l(),Ld=a("p"),QSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ule=a("code"),HSo=o("from_pretrained()"),USo=o("class method or the "),ble=a("code"),JSo=o("from_config()"),YSo=o(`class
method.`),KSo=l(),zE=a("p"),ZSo=o("This class cannot be instantiated directly using "),vle=a("code"),ePo=o("__init__()"),oPo=o(" (throws an error)."),rPo=l(),et=a("div"),f(WE.$$.fragment),tPo=l(),Tle=a("p"),aPo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nPo=l(),Bd=a("p"),sPo=o(`Note:
Loading a model from its configuration file does `),Fle=a("strong"),lPo=o("not"),iPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cle=a("code"),dPo=o("from_pretrained()"),cPo=o("to load the model weights."),fPo=l(),Mle=a("p"),mPo=o("Examples:"),gPo=l(),f(QE.$$.fragment),hPo=l(),Qe=a("div"),f(HE.$$.fragment),pPo=l(),Ele=a("p"),_Po=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uPo=l(),en=a("p"),bPo=o("The model class to instantiate is selected based on the "),yle=a("code"),vPo=o("model_type"),TPo=o(` property of the config object (either
passed as an argument or loaded from `),wle=a("code"),FPo=o("pretrained_model_name_or_path"),CPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ale=a("code"),MPo=o("pretrained_model_name_or_path"),EPo=o(":"),yPo=l(),Lle=a("ul"),G2=a("li"),Ble=a("strong"),wPo=o("tapas"),APo=o(" \u2014 "),nN=a("a"),LPo=o("TapasForQuestionAnswering"),BPo=o(" (TAPAS model)"),xPo=l(),X2=a("p"),kPo=o("The model is set in evaluation mode by default using "),xle=a("code"),RPo=o("model.eval()"),SPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kle=a("code"),PPo=o("model.train()"),$Po=l(),Rle=a("p"),IPo=o("Examples:"),jPo=l(),f(UE.$$.fragment),Oxe=l(),xd=a("h2"),V2=a("a"),Sle=a("span"),f(JE.$$.fragment),DPo=l(),Ple=a("span"),NPo=o("AutoModelForImageClassification"),Gxe=l(),lr=a("div"),f(YE.$$.fragment),qPo=l(),kd=a("p"),OPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$le=a("code"),GPo=o("from_pretrained()"),XPo=o("class method or the "),Ile=a("code"),VPo=o("from_config()"),zPo=o(`class
method.`),WPo=l(),KE=a("p"),QPo=o("This class cannot be instantiated directly using "),jle=a("code"),HPo=o("__init__()"),UPo=o(" (throws an error)."),JPo=l(),ot=a("div"),f(ZE.$$.fragment),YPo=l(),Dle=a("p"),KPo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZPo=l(),Rd=a("p"),e$o=o(`Note:
Loading a model from its configuration file does `),Nle=a("strong"),o$o=o("not"),r$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qle=a("code"),t$o=o("from_pretrained()"),a$o=o("to load the model weights."),n$o=l(),Ole=a("p"),s$o=o("Examples:"),l$o=l(),f(e3.$$.fragment),i$o=l(),He=a("div"),f(o3.$$.fragment),d$o=l(),Gle=a("p"),c$o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),f$o=l(),on=a("p"),m$o=o("The model class to instantiate is selected based on the "),Xle=a("code"),g$o=o("model_type"),h$o=o(` property of the config object (either
passed as an argument or loaded from `),Vle=a("code"),p$o=o("pretrained_model_name_or_path"),_$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zle=a("code"),u$o=o("pretrained_model_name_or_path"),b$o=o(":"),v$o=l(),Ce=a("ul"),z2=a("li"),Wle=a("strong"),T$o=o("beit"),F$o=o(" \u2014 "),sN=a("a"),C$o=o("BeitForImageClassification"),M$o=o(" (BEiT model)"),E$o=l(),W2=a("li"),Qle=a("strong"),y$o=o("convnext"),w$o=o(" \u2014 "),lN=a("a"),A$o=o("ConvNextForImageClassification"),L$o=o(" (ConvNext model)"),B$o=l(),qs=a("li"),Hle=a("strong"),x$o=o("deit"),k$o=o(" \u2014 "),iN=a("a"),R$o=o("DeiTForImageClassification"),S$o=o(" or "),dN=a("a"),P$o=o("DeiTForImageClassificationWithTeacher"),$$o=o(" (DeiT model)"),I$o=l(),Q2=a("li"),Ule=a("strong"),j$o=o("imagegpt"),D$o=o(" \u2014 "),cN=a("a"),N$o=o("ImageGPTForImageClassification"),q$o=o(" (ImageGPT model)"),O$o=l(),ma=a("li"),Jle=a("strong"),G$o=o("perceiver"),X$o=o(" \u2014 "),fN=a("a"),V$o=o("PerceiverForImageClassificationLearned"),z$o=o(" or "),mN=a("a"),W$o=o("PerceiverForImageClassificationFourier"),Q$o=o(" or "),gN=a("a"),H$o=o("PerceiverForImageClassificationConvProcessing"),U$o=o(" (Perceiver model)"),J$o=l(),H2=a("li"),Yle=a("strong"),Y$o=o("poolformer"),K$o=o(" \u2014 "),hN=a("a"),Z$o=o("PoolFormerForImageClassification"),eIo=o(" (PoolFormer model)"),oIo=l(),U2=a("li"),Kle=a("strong"),rIo=o("segformer"),tIo=o(" \u2014 "),pN=a("a"),aIo=o("SegformerForImageClassification"),nIo=o(" (SegFormer model)"),sIo=l(),J2=a("li"),Zle=a("strong"),lIo=o("swin"),iIo=o(" \u2014 "),_N=a("a"),dIo=o("SwinForImageClassification"),cIo=o(" (Swin model)"),fIo=l(),Y2=a("li"),eie=a("strong"),mIo=o("vit"),gIo=o(" \u2014 "),uN=a("a"),hIo=o("ViTForImageClassification"),pIo=o(" (ViT model)"),_Io=l(),K2=a("p"),uIo=o("The model is set in evaluation mode by default using "),oie=a("code"),bIo=o("model.eval()"),vIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=a("code"),TIo=o("model.train()"),FIo=l(),tie=a("p"),CIo=o("Examples:"),MIo=l(),f(r3.$$.fragment),Xxe=l(),Sd=a("h2"),Z2=a("a"),aie=a("span"),f(t3.$$.fragment),EIo=l(),nie=a("span"),yIo=o("AutoModelForVision2Seq"),Vxe=l(),ir=a("div"),f(a3.$$.fragment),wIo=l(),Pd=a("p"),AIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sie=a("code"),LIo=o("from_pretrained()"),BIo=o("class method or the "),lie=a("code"),xIo=o("from_config()"),kIo=o(`class
method.`),RIo=l(),n3=a("p"),SIo=o("This class cannot be instantiated directly using "),iie=a("code"),PIo=o("__init__()"),$Io=o(" (throws an error)."),IIo=l(),rt=a("div"),f(s3.$$.fragment),jIo=l(),die=a("p"),DIo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NIo=l(),$d=a("p"),qIo=o(`Note:
Loading a model from its configuration file does `),cie=a("strong"),OIo=o("not"),GIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fie=a("code"),XIo=o("from_pretrained()"),VIo=o("to load the model weights."),zIo=l(),mie=a("p"),WIo=o("Examples:"),QIo=l(),f(l3.$$.fragment),HIo=l(),Ue=a("div"),f(i3.$$.fragment),UIo=l(),gie=a("p"),JIo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YIo=l(),rn=a("p"),KIo=o("The model class to instantiate is selected based on the "),hie=a("code"),ZIo=o("model_type"),ejo=o(` property of the config object (either
passed as an argument or loaded from `),pie=a("code"),ojo=o("pretrained_model_name_or_path"),rjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ie=a("code"),tjo=o("pretrained_model_name_or_path"),ajo=o(":"),njo=l(),uie=a("ul"),ev=a("li"),bie=a("strong"),sjo=o("vision-encoder-decoder"),ljo=o(" \u2014 "),bN=a("a"),ijo=o("VisionEncoderDecoderModel"),djo=o(" (Vision Encoder decoder model)"),cjo=l(),ov=a("p"),fjo=o("The model is set in evaluation mode by default using "),vie=a("code"),mjo=o("model.eval()"),gjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=a("code"),hjo=o("model.train()"),pjo=l(),Fie=a("p"),_jo=o("Examples:"),ujo=l(),f(d3.$$.fragment),zxe=l(),Id=a("h2"),rv=a("a"),Cie=a("span"),f(c3.$$.fragment),bjo=l(),Mie=a("span"),vjo=o("AutoModelForAudioClassification"),Wxe=l(),dr=a("div"),f(f3.$$.fragment),Tjo=l(),jd=a("p"),Fjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Eie=a("code"),Cjo=o("from_pretrained()"),Mjo=o("class method or the "),yie=a("code"),Ejo=o("from_config()"),yjo=o(`class
method.`),wjo=l(),m3=a("p"),Ajo=o("This class cannot be instantiated directly using "),wie=a("code"),Ljo=o("__init__()"),Bjo=o(" (throws an error)."),xjo=l(),tt=a("div"),f(g3.$$.fragment),kjo=l(),Aie=a("p"),Rjo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Sjo=l(),Dd=a("p"),Pjo=o(`Note:
Loading a model from its configuration file does `),Lie=a("strong"),$jo=o("not"),Ijo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bie=a("code"),jjo=o("from_pretrained()"),Djo=o("to load the model weights."),Njo=l(),xie=a("p"),qjo=o("Examples:"),Ojo=l(),f(h3.$$.fragment),Gjo=l(),Je=a("div"),f(p3.$$.fragment),Xjo=l(),kie=a("p"),Vjo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zjo=l(),tn=a("p"),Wjo=o("The model class to instantiate is selected based on the "),Rie=a("code"),Qjo=o("model_type"),Hjo=o(` property of the config object (either
passed as an argument or loaded from `),Sie=a("code"),Ujo=o("pretrained_model_name_or_path"),Jjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=a("code"),Yjo=o("pretrained_model_name_or_path"),Kjo=o(":"),Zjo=l(),xe=a("ul"),tv=a("li"),$ie=a("strong"),eDo=o("data2vec-audio"),oDo=o(" \u2014 "),vN=a("a"),rDo=o("Data2VecAudioForSequenceClassification"),tDo=o(" (Data2VecAudio model)"),aDo=l(),av=a("li"),Iie=a("strong"),nDo=o("hubert"),sDo=o(" \u2014 "),TN=a("a"),lDo=o("HubertForSequenceClassification"),iDo=o(" (Hubert model)"),dDo=l(),nv=a("li"),jie=a("strong"),cDo=o("sew"),fDo=o(" \u2014 "),FN=a("a"),mDo=o("SEWForSequenceClassification"),gDo=o(" (SEW model)"),hDo=l(),sv=a("li"),Die=a("strong"),pDo=o("sew-d"),_Do=o(" \u2014 "),CN=a("a"),uDo=o("SEWDForSequenceClassification"),bDo=o(" (SEW-D model)"),vDo=l(),lv=a("li"),Nie=a("strong"),TDo=o("unispeech"),FDo=o(" \u2014 "),MN=a("a"),CDo=o("UniSpeechForSequenceClassification"),MDo=o(" (UniSpeech model)"),EDo=l(),iv=a("li"),qie=a("strong"),yDo=o("unispeech-sat"),wDo=o(" \u2014 "),EN=a("a"),ADo=o("UniSpeechSatForSequenceClassification"),LDo=o(" (UniSpeechSat model)"),BDo=l(),dv=a("li"),Oie=a("strong"),xDo=o("wav2vec2"),kDo=o(" \u2014 "),yN=a("a"),RDo=o("Wav2Vec2ForSequenceClassification"),SDo=o(" (Wav2Vec2 model)"),PDo=l(),cv=a("li"),Gie=a("strong"),$Do=o("wavlm"),IDo=o(" \u2014 "),wN=a("a"),jDo=o("WavLMForSequenceClassification"),DDo=o(" (WavLM model)"),NDo=l(),fv=a("p"),qDo=o("The model is set in evaluation mode by default using "),Xie=a("code"),ODo=o("model.eval()"),GDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=a("code"),XDo=o("model.train()"),VDo=l(),zie=a("p"),zDo=o("Examples:"),WDo=l(),f(_3.$$.fragment),Qxe=l(),Nd=a("h2"),mv=a("a"),Wie=a("span"),f(u3.$$.fragment),QDo=l(),Qie=a("span"),HDo=o("AutoModelForAudioFrameClassification"),Hxe=l(),cr=a("div"),f(b3.$$.fragment),UDo=l(),qd=a("p"),JDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Hie=a("code"),YDo=o("from_pretrained()"),KDo=o("class method or the "),Uie=a("code"),ZDo=o("from_config()"),eNo=o(`class
method.`),oNo=l(),v3=a("p"),rNo=o("This class cannot be instantiated directly using "),Jie=a("code"),tNo=o("__init__()"),aNo=o(" (throws an error)."),nNo=l(),at=a("div"),f(T3.$$.fragment),sNo=l(),Yie=a("p"),lNo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),iNo=l(),Od=a("p"),dNo=o(`Note:
Loading a model from its configuration file does `),Kie=a("strong"),cNo=o("not"),fNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=a("code"),mNo=o("from_pretrained()"),gNo=o("to load the model weights."),hNo=l(),ede=a("p"),pNo=o("Examples:"),_No=l(),f(F3.$$.fragment),uNo=l(),Ye=a("div"),f(C3.$$.fragment),bNo=l(),ode=a("p"),vNo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),TNo=l(),an=a("p"),FNo=o("The model class to instantiate is selected based on the "),rde=a("code"),CNo=o("model_type"),MNo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),ENo=o("pretrained_model_name_or_path"),yNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),wNo=o("pretrained_model_name_or_path"),ANo=o(":"),LNo=l(),nn=a("ul"),gv=a("li"),nde=a("strong"),BNo=o("data2vec-audio"),xNo=o(" \u2014 "),AN=a("a"),kNo=o("Data2VecAudioForAudioFrameClassification"),RNo=o(" (Data2VecAudio model)"),SNo=l(),hv=a("li"),sde=a("strong"),PNo=o("unispeech-sat"),$No=o(" \u2014 "),LN=a("a"),INo=o("UniSpeechSatForAudioFrameClassification"),jNo=o(" (UniSpeechSat model)"),DNo=l(),pv=a("li"),lde=a("strong"),NNo=o("wav2vec2"),qNo=o(" \u2014 "),BN=a("a"),ONo=o("Wav2Vec2ForAudioFrameClassification"),GNo=o(" (Wav2Vec2 model)"),XNo=l(),_v=a("li"),ide=a("strong"),VNo=o("wavlm"),zNo=o(" \u2014 "),xN=a("a"),WNo=o("WavLMForAudioFrameClassification"),QNo=o(" (WavLM model)"),HNo=l(),uv=a("p"),UNo=o("The model is set in evaluation mode by default using "),dde=a("code"),JNo=o("model.eval()"),YNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=a("code"),KNo=o("model.train()"),ZNo=l(),fde=a("p"),eqo=o("Examples:"),oqo=l(),f(M3.$$.fragment),Uxe=l(),Gd=a("h2"),bv=a("a"),mde=a("span"),f(E3.$$.fragment),rqo=l(),gde=a("span"),tqo=o("AutoModelForCTC"),Jxe=l(),fr=a("div"),f(y3.$$.fragment),aqo=l(),Xd=a("p"),nqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),hde=a("code"),sqo=o("from_pretrained()"),lqo=o("class method or the "),pde=a("code"),iqo=o("from_config()"),dqo=o(`class
method.`),cqo=l(),w3=a("p"),fqo=o("This class cannot be instantiated directly using "),_de=a("code"),mqo=o("__init__()"),gqo=o(" (throws an error)."),hqo=l(),nt=a("div"),f(A3.$$.fragment),pqo=l(),ude=a("p"),_qo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),uqo=l(),Vd=a("p"),bqo=o(`Note:
Loading a model from its configuration file does `),bde=a("strong"),vqo=o("not"),Tqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vde=a("code"),Fqo=o("from_pretrained()"),Cqo=o("to load the model weights."),Mqo=l(),Tde=a("p"),Eqo=o("Examples:"),yqo=l(),f(L3.$$.fragment),wqo=l(),Ke=a("div"),f(B3.$$.fragment),Aqo=l(),Fde=a("p"),Lqo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Bqo=l(),sn=a("p"),xqo=o("The model class to instantiate is selected based on the "),Cde=a("code"),kqo=o("model_type"),Rqo=o(` property of the config object (either
passed as an argument or loaded from `),Mde=a("code"),Sqo=o("pretrained_model_name_or_path"),Pqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=a("code"),$qo=o("pretrained_model_name_or_path"),Iqo=o(":"),jqo=l(),ke=a("ul"),vv=a("li"),yde=a("strong"),Dqo=o("data2vec-audio"),Nqo=o(" \u2014 "),kN=a("a"),qqo=o("Data2VecAudioForCTC"),Oqo=o(" (Data2VecAudio model)"),Gqo=l(),Tv=a("li"),wde=a("strong"),Xqo=o("hubert"),Vqo=o(" \u2014 "),RN=a("a"),zqo=o("HubertForCTC"),Wqo=o(" (Hubert model)"),Qqo=l(),Fv=a("li"),Ade=a("strong"),Hqo=o("sew"),Uqo=o(" \u2014 "),SN=a("a"),Jqo=o("SEWForCTC"),Yqo=o(" (SEW model)"),Kqo=l(),Cv=a("li"),Lde=a("strong"),Zqo=o("sew-d"),eOo=o(" \u2014 "),PN=a("a"),oOo=o("SEWDForCTC"),rOo=o(" (SEW-D model)"),tOo=l(),Mv=a("li"),Bde=a("strong"),aOo=o("unispeech"),nOo=o(" \u2014 "),$N=a("a"),sOo=o("UniSpeechForCTC"),lOo=o(" (UniSpeech model)"),iOo=l(),Ev=a("li"),xde=a("strong"),dOo=o("unispeech-sat"),cOo=o(" \u2014 "),IN=a("a"),fOo=o("UniSpeechSatForCTC"),mOo=o(" (UniSpeechSat model)"),gOo=l(),yv=a("li"),kde=a("strong"),hOo=o("wav2vec2"),pOo=o(" \u2014 "),jN=a("a"),_Oo=o("Wav2Vec2ForCTC"),uOo=o(" (Wav2Vec2 model)"),bOo=l(),wv=a("li"),Rde=a("strong"),vOo=o("wavlm"),TOo=o(" \u2014 "),DN=a("a"),FOo=o("WavLMForCTC"),COo=o(" (WavLM model)"),MOo=l(),Av=a("p"),EOo=o("The model is set in evaluation mode by default using "),Sde=a("code"),yOo=o("model.eval()"),wOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),AOo=o("model.train()"),LOo=l(),$de=a("p"),BOo=o("Examples:"),xOo=l(),f(x3.$$.fragment),Yxe=l(),zd=a("h2"),Lv=a("a"),Ide=a("span"),f(k3.$$.fragment),kOo=l(),jde=a("span"),ROo=o("AutoModelForSpeechSeq2Seq"),Kxe=l(),mr=a("div"),f(R3.$$.fragment),SOo=l(),Wd=a("p"),POo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Dde=a("code"),$Oo=o("from_pretrained()"),IOo=o("class method or the "),Nde=a("code"),jOo=o("from_config()"),DOo=o(`class
method.`),NOo=l(),S3=a("p"),qOo=o("This class cannot be instantiated directly using "),qde=a("code"),OOo=o("__init__()"),GOo=o(" (throws an error)."),XOo=l(),st=a("div"),f(P3.$$.fragment),VOo=l(),Ode=a("p"),zOo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WOo=l(),Qd=a("p"),QOo=o(`Note:
Loading a model from its configuration file does `),Gde=a("strong"),HOo=o("not"),UOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=a("code"),JOo=o("from_pretrained()"),YOo=o("to load the model weights."),KOo=l(),Vde=a("p"),ZOo=o("Examples:"),eGo=l(),f($3.$$.fragment),oGo=l(),Ze=a("div"),f(I3.$$.fragment),rGo=l(),zde=a("p"),tGo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),aGo=l(),ln=a("p"),nGo=o("The model class to instantiate is selected based on the "),Wde=a("code"),sGo=o("model_type"),lGo=o(` property of the config object (either
passed as an argument or loaded from `),Qde=a("code"),iGo=o("pretrained_model_name_or_path"),dGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=a("code"),cGo=o("pretrained_model_name_or_path"),fGo=o(":"),mGo=l(),j3=a("ul"),Bv=a("li"),Ude=a("strong"),gGo=o("speech-encoder-decoder"),hGo=o(" \u2014 "),NN=a("a"),pGo=o("SpeechEncoderDecoderModel"),_Go=o(" (Speech Encoder decoder model)"),uGo=l(),xv=a("li"),Jde=a("strong"),bGo=o("speech_to_text"),vGo=o(" \u2014 "),qN=a("a"),TGo=o("Speech2TextForConditionalGeneration"),FGo=o(" (Speech2Text model)"),CGo=l(),kv=a("p"),MGo=o("The model is set in evaluation mode by default using "),Yde=a("code"),EGo=o("model.eval()"),yGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kde=a("code"),wGo=o("model.train()"),AGo=l(),Zde=a("p"),LGo=o("Examples:"),BGo=l(),f(D3.$$.fragment),Zxe=l(),Hd=a("h2"),Rv=a("a"),ece=a("span"),f(N3.$$.fragment),xGo=l(),oce=a("span"),kGo=o("AutoModelForAudioXVector"),eke=l(),gr=a("div"),f(q3.$$.fragment),RGo=l(),Ud=a("p"),SGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),rce=a("code"),PGo=o("from_pretrained()"),$Go=o("class method or the "),tce=a("code"),IGo=o("from_config()"),jGo=o(`class
method.`),DGo=l(),O3=a("p"),NGo=o("This class cannot be instantiated directly using "),ace=a("code"),qGo=o("__init__()"),OGo=o(" (throws an error)."),GGo=l(),lt=a("div"),f(G3.$$.fragment),XGo=l(),nce=a("p"),VGo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zGo=l(),Jd=a("p"),WGo=o(`Note:
Loading a model from its configuration file does `),sce=a("strong"),QGo=o("not"),HGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lce=a("code"),UGo=o("from_pretrained()"),JGo=o("to load the model weights."),YGo=l(),ice=a("p"),KGo=o("Examples:"),ZGo=l(),f(X3.$$.fragment),eXo=l(),eo=a("div"),f(V3.$$.fragment),oXo=l(),dce=a("p"),rXo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tXo=l(),dn=a("p"),aXo=o("The model class to instantiate is selected based on the "),cce=a("code"),nXo=o("model_type"),sXo=o(` property of the config object (either
passed as an argument or loaded from `),fce=a("code"),lXo=o("pretrained_model_name_or_path"),iXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=a("code"),dXo=o("pretrained_model_name_or_path"),cXo=o(":"),fXo=l(),cn=a("ul"),Sv=a("li"),gce=a("strong"),mXo=o("data2vec-audio"),gXo=o(" \u2014 "),ON=a("a"),hXo=o("Data2VecAudioForXVector"),pXo=o(" (Data2VecAudio model)"),_Xo=l(),Pv=a("li"),hce=a("strong"),uXo=o("unispeech-sat"),bXo=o(" \u2014 "),GN=a("a"),vXo=o("UniSpeechSatForXVector"),TXo=o(" (UniSpeechSat model)"),FXo=l(),$v=a("li"),pce=a("strong"),CXo=o("wav2vec2"),MXo=o(" \u2014 "),XN=a("a"),EXo=o("Wav2Vec2ForXVector"),yXo=o(" (Wav2Vec2 model)"),wXo=l(),Iv=a("li"),_ce=a("strong"),AXo=o("wavlm"),LXo=o(" \u2014 "),VN=a("a"),BXo=o("WavLMForXVector"),xXo=o(" (WavLM model)"),kXo=l(),jv=a("p"),RXo=o("The model is set in evaluation mode by default using "),uce=a("code"),SXo=o("model.eval()"),PXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bce=a("code"),$Xo=o("model.train()"),IXo=l(),vce=a("p"),jXo=o("Examples:"),DXo=l(),f(z3.$$.fragment),oke=l(),Yd=a("h2"),Dv=a("a"),Tce=a("span"),f(W3.$$.fragment),NXo=l(),Fce=a("span"),qXo=o("AutoModelForMaskedImageModeling"),rke=l(),hr=a("div"),f(Q3.$$.fragment),OXo=l(),Kd=a("p"),GXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Cce=a("code"),XXo=o("from_pretrained()"),VXo=o("class method or the "),Mce=a("code"),zXo=o("from_config()"),WXo=o(`class
method.`),QXo=l(),H3=a("p"),HXo=o("This class cannot be instantiated directly using "),Ece=a("code"),UXo=o("__init__()"),JXo=o(" (throws an error)."),YXo=l(),it=a("div"),f(U3.$$.fragment),KXo=l(),yce=a("p"),ZXo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),eVo=l(),Zd=a("p"),oVo=o(`Note:
Loading a model from its configuration file does `),wce=a("strong"),rVo=o("not"),tVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ace=a("code"),aVo=o("from_pretrained()"),nVo=o("to load the model weights."),sVo=l(),Lce=a("p"),lVo=o("Examples:"),iVo=l(),f(J3.$$.fragment),dVo=l(),oo=a("div"),f(Y3.$$.fragment),cVo=l(),Bce=a("p"),fVo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mVo=l(),fn=a("p"),gVo=o("The model class to instantiate is selected based on the "),xce=a("code"),hVo=o("model_type"),pVo=o(` property of the config object (either
passed as an argument or loaded from `),kce=a("code"),_Vo=o("pretrained_model_name_or_path"),uVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=a("code"),bVo=o("pretrained_model_name_or_path"),vVo=o(":"),TVo=l(),ec=a("ul"),Nv=a("li"),Sce=a("strong"),FVo=o("deit"),CVo=o(" \u2014 "),zN=a("a"),MVo=o("DeiTForMaskedImageModeling"),EVo=o(" (DeiT model)"),yVo=l(),qv=a("li"),Pce=a("strong"),wVo=o("swin"),AVo=o(" \u2014 "),WN=a("a"),LVo=o("SwinForMaskedImageModeling"),BVo=o(" (Swin model)"),xVo=l(),Ov=a("li"),$ce=a("strong"),kVo=o("vit"),RVo=o(" \u2014 "),QN=a("a"),SVo=o("ViTForMaskedImageModeling"),PVo=o(" (ViT model)"),$Vo=l(),Gv=a("p"),IVo=o("The model is set in evaluation mode by default using "),Ice=a("code"),jVo=o("model.eval()"),DVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jce=a("code"),NVo=o("model.train()"),qVo=l(),Dce=a("p"),OVo=o("Examples:"),GVo=l(),f(K3.$$.fragment),tke=l(),oc=a("h2"),Xv=a("a"),Nce=a("span"),f(Z3.$$.fragment),XVo=l(),qce=a("span"),VVo=o("AutoModelForObjectDetection"),ake=l(),pr=a("div"),f(ey.$$.fragment),zVo=l(),rc=a("p"),WVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Oce=a("code"),QVo=o("from_pretrained()"),HVo=o("class method or the "),Gce=a("code"),UVo=o("from_config()"),JVo=o(`class
method.`),YVo=l(),oy=a("p"),KVo=o("This class cannot be instantiated directly using "),Xce=a("code"),ZVo=o("__init__()"),ezo=o(" (throws an error)."),ozo=l(),dt=a("div"),f(ry.$$.fragment),rzo=l(),Vce=a("p"),tzo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),azo=l(),tc=a("p"),nzo=o(`Note:
Loading a model from its configuration file does `),zce=a("strong"),szo=o("not"),lzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wce=a("code"),izo=o("from_pretrained()"),dzo=o("to load the model weights."),czo=l(),Qce=a("p"),fzo=o("Examples:"),mzo=l(),f(ty.$$.fragment),gzo=l(),ro=a("div"),f(ay.$$.fragment),hzo=l(),Hce=a("p"),pzo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_zo=l(),mn=a("p"),uzo=o("The model class to instantiate is selected based on the "),Uce=a("code"),bzo=o("model_type"),vzo=o(` property of the config object (either
passed as an argument or loaded from `),Jce=a("code"),Tzo=o("pretrained_model_name_or_path"),Fzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=a("code"),Czo=o("pretrained_model_name_or_path"),Mzo=o(":"),Ezo=l(),Kce=a("ul"),Vv=a("li"),Zce=a("strong"),yzo=o("detr"),wzo=o(" \u2014 "),HN=a("a"),Azo=o("DetrForObjectDetection"),Lzo=o(" (DETR model)"),Bzo=l(),zv=a("p"),xzo=o("The model is set in evaluation mode by default using "),efe=a("code"),kzo=o("model.eval()"),Rzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=a("code"),Szo=o("model.train()"),Pzo=l(),rfe=a("p"),$zo=o("Examples:"),Izo=l(),f(ny.$$.fragment),nke=l(),ac=a("h2"),Wv=a("a"),tfe=a("span"),f(sy.$$.fragment),jzo=l(),afe=a("span"),Dzo=o("AutoModelForImageSegmentation"),ske=l(),_r=a("div"),f(ly.$$.fragment),Nzo=l(),nc=a("p"),qzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nfe=a("code"),Ozo=o("from_pretrained()"),Gzo=o("class method or the "),sfe=a("code"),Xzo=o("from_config()"),Vzo=o(`class
method.`),zzo=l(),iy=a("p"),Wzo=o("This class cannot be instantiated directly using "),lfe=a("code"),Qzo=o("__init__()"),Hzo=o(" (throws an error)."),Uzo=l(),ct=a("div"),f(dy.$$.fragment),Jzo=l(),ife=a("p"),Yzo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Kzo=l(),sc=a("p"),Zzo=o(`Note:
Loading a model from its configuration file does `),dfe=a("strong"),eWo=o("not"),oWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cfe=a("code"),rWo=o("from_pretrained()"),tWo=o("to load the model weights."),aWo=l(),ffe=a("p"),nWo=o("Examples:"),sWo=l(),f(cy.$$.fragment),lWo=l(),to=a("div"),f(fy.$$.fragment),iWo=l(),mfe=a("p"),dWo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),cWo=l(),gn=a("p"),fWo=o("The model class to instantiate is selected based on the "),gfe=a("code"),mWo=o("model_type"),gWo=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),hWo=o("pretrained_model_name_or_path"),pWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),_Wo=o("pretrained_model_name_or_path"),uWo=o(":"),bWo=l(),_fe=a("ul"),Qv=a("li"),ufe=a("strong"),vWo=o("detr"),TWo=o(" \u2014 "),UN=a("a"),FWo=o("DetrForSegmentation"),CWo=o(" (DETR model)"),MWo=l(),Hv=a("p"),EWo=o("The model is set in evaluation mode by default using "),bfe=a("code"),yWo=o("model.eval()"),wWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),AWo=o("model.train()"),LWo=l(),Tfe=a("p"),BWo=o("Examples:"),xWo=l(),f(my.$$.fragment),lke=l(),lc=a("h2"),Uv=a("a"),Ffe=a("span"),f(gy.$$.fragment),kWo=l(),Cfe=a("span"),RWo=o("AutoModelForSemanticSegmentation"),ike=l(),ur=a("div"),f(hy.$$.fragment),SWo=l(),ic=a("p"),PWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Mfe=a("code"),$Wo=o("from_pretrained()"),IWo=o("class method or the "),Efe=a("code"),jWo=o("from_config()"),DWo=o(`class
method.`),NWo=l(),py=a("p"),qWo=o("This class cannot be instantiated directly using "),yfe=a("code"),OWo=o("__init__()"),GWo=o(" (throws an error)."),XWo=l(),ft=a("div"),f(_y.$$.fragment),VWo=l(),wfe=a("p"),zWo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),WWo=l(),dc=a("p"),QWo=o(`Note:
Loading a model from its configuration file does `),Afe=a("strong"),HWo=o("not"),UWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lfe=a("code"),JWo=o("from_pretrained()"),YWo=o("to load the model weights."),KWo=l(),Bfe=a("p"),ZWo=o("Examples:"),eQo=l(),f(uy.$$.fragment),oQo=l(),ao=a("div"),f(by.$$.fragment),rQo=l(),xfe=a("p"),tQo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),aQo=l(),hn=a("p"),nQo=o("The model class to instantiate is selected based on the "),kfe=a("code"),sQo=o("model_type"),lQo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),iQo=o("pretrained_model_name_or_path"),dQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),cQo=o("pretrained_model_name_or_path"),fQo=o(":"),mQo=l(),vy=a("ul"),Jv=a("li"),Pfe=a("strong"),gQo=o("beit"),hQo=o(" \u2014 "),JN=a("a"),pQo=o("BeitForSemanticSegmentation"),_Qo=o(" (BEiT model)"),uQo=l(),Yv=a("li"),$fe=a("strong"),bQo=o("segformer"),vQo=o(" \u2014 "),YN=a("a"),TQo=o("SegformerForSemanticSegmentation"),FQo=o(" (SegFormer model)"),CQo=l(),Kv=a("p"),MQo=o("The model is set in evaluation mode by default using "),Ife=a("code"),EQo=o("model.eval()"),yQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=a("code"),wQo=o("model.train()"),AQo=l(),Dfe=a("p"),LQo=o("Examples:"),BQo=l(),f(Ty.$$.fragment),dke=l(),cc=a("h2"),Zv=a("a"),Nfe=a("span"),f(Fy.$$.fragment),xQo=l(),qfe=a("span"),kQo=o("AutoModelForInstanceSegmentation"),cke=l(),br=a("div"),f(Cy.$$.fragment),RQo=l(),fc=a("p"),SQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Ofe=a("code"),PQo=o("from_pretrained()"),$Qo=o("class method or the "),Gfe=a("code"),IQo=o("from_config()"),jQo=o(`class
method.`),DQo=l(),My=a("p"),NQo=o("This class cannot be instantiated directly using "),Xfe=a("code"),qQo=o("__init__()"),OQo=o(" (throws an error)."),GQo=l(),mt=a("div"),f(Ey.$$.fragment),XQo=l(),Vfe=a("p"),VQo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zQo=l(),mc=a("p"),WQo=o(`Note:
Loading a model from its configuration file does `),zfe=a("strong"),QQo=o("not"),HQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wfe=a("code"),UQo=o("from_pretrained()"),JQo=o("to load the model weights."),YQo=l(),Qfe=a("p"),KQo=o("Examples:"),ZQo=l(),f(yy.$$.fragment),eHo=l(),no=a("div"),f(wy.$$.fragment),oHo=l(),Hfe=a("p"),rHo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tHo=l(),pn=a("p"),aHo=o("The model class to instantiate is selected based on the "),Ufe=a("code"),nHo=o("model_type"),sHo=o(` property of the config object (either
passed as an argument or loaded from `),Jfe=a("code"),lHo=o("pretrained_model_name_or_path"),iHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=a("code"),dHo=o("pretrained_model_name_or_path"),cHo=o(":"),fHo=l(),Kfe=a("ul"),e6=a("li"),Zfe=a("strong"),mHo=o("maskformer"),gHo=o(" \u2014 "),KN=a("a"),hHo=o("MaskFormerForInstanceSegmentation"),pHo=o(" (MaskFormer model)"),_Ho=l(),o6=a("p"),uHo=o("The model is set in evaluation mode by default using "),eme=a("code"),bHo=o("model.eval()"),vHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=a("code"),THo=o("model.train()"),FHo=l(),rme=a("p"),CHo=o("Examples:"),MHo=l(),f(Ay.$$.fragment),fke=l(),gc=a("h2"),r6=a("a"),tme=a("span"),f(Ly.$$.fragment),EHo=l(),ame=a("span"),yHo=o("TFAutoModel"),mke=l(),vr=a("div"),f(By.$$.fragment),wHo=l(),hc=a("p"),AHo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nme=a("code"),LHo=o("from_pretrained()"),BHo=o("class method or the "),sme=a("code"),xHo=o("from_config()"),kHo=o(`class
method.`),RHo=l(),xy=a("p"),SHo=o("This class cannot be instantiated directly using "),lme=a("code"),PHo=o("__init__()"),$Ho=o(" (throws an error)."),IHo=l(),gt=a("div"),f(ky.$$.fragment),jHo=l(),ime=a("p"),DHo=o("Instantiates one of the base model classes of the library from a configuration."),NHo=l(),pc=a("p"),qHo=o(`Note:
Loading a model from its configuration file does `),dme=a("strong"),OHo=o("not"),GHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cme=a("code"),XHo=o("from_pretrained()"),VHo=o("to load the model weights."),zHo=l(),fme=a("p"),WHo=o("Examples:"),QHo=l(),f(Ry.$$.fragment),HHo=l(),ho=a("div"),f(Sy.$$.fragment),UHo=l(),mme=a("p"),JHo=o("Instantiate one of the base model classes of the library from a pretrained model."),YHo=l(),_n=a("p"),KHo=o("The model class to instantiate is selected based on the "),gme=a("code"),ZHo=o("model_type"),eUo=o(` property of the config object (either
passed as an argument or loaded from `),hme=a("code"),oUo=o("pretrained_model_name_or_path"),rUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=a("code"),tUo=o("pretrained_model_name_or_path"),aUo=o(":"),nUo=l(),B=a("ul"),t6=a("li"),_me=a("strong"),sUo=o("albert"),lUo=o(" \u2014 "),ZN=a("a"),iUo=o("TFAlbertModel"),dUo=o(" (ALBERT model)"),cUo=l(),a6=a("li"),ume=a("strong"),fUo=o("bart"),mUo=o(" \u2014 "),eq=a("a"),gUo=o("TFBartModel"),hUo=o(" (BART model)"),pUo=l(),n6=a("li"),bme=a("strong"),_Uo=o("bert"),uUo=o(" \u2014 "),oq=a("a"),bUo=o("TFBertModel"),vUo=o(" (BERT model)"),TUo=l(),s6=a("li"),vme=a("strong"),FUo=o("blenderbot"),CUo=o(" \u2014 "),rq=a("a"),MUo=o("TFBlenderbotModel"),EUo=o(" (Blenderbot model)"),yUo=l(),l6=a("li"),Tme=a("strong"),wUo=o("blenderbot-small"),AUo=o(" \u2014 "),tq=a("a"),LUo=o("TFBlenderbotSmallModel"),BUo=o(" (BlenderbotSmall model)"),xUo=l(),i6=a("li"),Fme=a("strong"),kUo=o("camembert"),RUo=o(" \u2014 "),aq=a("a"),SUo=o("TFCamembertModel"),PUo=o(" (CamemBERT model)"),$Uo=l(),d6=a("li"),Cme=a("strong"),IUo=o("clip"),jUo=o(" \u2014 "),nq=a("a"),DUo=o("TFCLIPModel"),NUo=o(" (CLIP model)"),qUo=l(),c6=a("li"),Mme=a("strong"),OUo=o("convbert"),GUo=o(" \u2014 "),sq=a("a"),XUo=o("TFConvBertModel"),VUo=o(" (ConvBERT model)"),zUo=l(),f6=a("li"),Eme=a("strong"),WUo=o("convnext"),QUo=o(" \u2014 "),lq=a("a"),HUo=o("TFConvNextModel"),UUo=o(" (ConvNext model)"),JUo=l(),m6=a("li"),yme=a("strong"),YUo=o("ctrl"),KUo=o(" \u2014 "),iq=a("a"),ZUo=o("TFCTRLModel"),eJo=o(" (CTRL model)"),oJo=l(),g6=a("li"),wme=a("strong"),rJo=o("deberta"),tJo=o(" \u2014 "),dq=a("a"),aJo=o("TFDebertaModel"),nJo=o(" (DeBERTa model)"),sJo=l(),h6=a("li"),Ame=a("strong"),lJo=o("deberta-v2"),iJo=o(" \u2014 "),cq=a("a"),dJo=o("TFDebertaV2Model"),cJo=o(" (DeBERTa-v2 model)"),fJo=l(),p6=a("li"),Lme=a("strong"),mJo=o("distilbert"),gJo=o(" \u2014 "),fq=a("a"),hJo=o("TFDistilBertModel"),pJo=o(" (DistilBERT model)"),_Jo=l(),_6=a("li"),Bme=a("strong"),uJo=o("dpr"),bJo=o(" \u2014 "),mq=a("a"),vJo=o("TFDPRQuestionEncoder"),TJo=o(" (DPR model)"),FJo=l(),u6=a("li"),xme=a("strong"),CJo=o("electra"),MJo=o(" \u2014 "),gq=a("a"),EJo=o("TFElectraModel"),yJo=o(" (ELECTRA model)"),wJo=l(),b6=a("li"),kme=a("strong"),AJo=o("flaubert"),LJo=o(" \u2014 "),hq=a("a"),BJo=o("TFFlaubertModel"),xJo=o(" (FlauBERT model)"),kJo=l(),Os=a("li"),Rme=a("strong"),RJo=o("funnel"),SJo=o(" \u2014 "),pq=a("a"),PJo=o("TFFunnelModel"),$Jo=o(" or "),_q=a("a"),IJo=o("TFFunnelBaseModel"),jJo=o(" (Funnel Transformer model)"),DJo=l(),v6=a("li"),Sme=a("strong"),NJo=o("gpt2"),qJo=o(" \u2014 "),uq=a("a"),OJo=o("TFGPT2Model"),GJo=o(" (OpenAI GPT-2 model)"),XJo=l(),T6=a("li"),Pme=a("strong"),VJo=o("hubert"),zJo=o(" \u2014 "),bq=a("a"),WJo=o("TFHubertModel"),QJo=o(" (Hubert model)"),HJo=l(),F6=a("li"),$me=a("strong"),UJo=o("layoutlm"),JJo=o(" \u2014 "),vq=a("a"),YJo=o("TFLayoutLMModel"),KJo=o(" (LayoutLM model)"),ZJo=l(),C6=a("li"),Ime=a("strong"),eYo=o("led"),oYo=o(" \u2014 "),Tq=a("a"),rYo=o("TFLEDModel"),tYo=o(" (LED model)"),aYo=l(),M6=a("li"),jme=a("strong"),nYo=o("longformer"),sYo=o(" \u2014 "),Fq=a("a"),lYo=o("TFLongformerModel"),iYo=o(" (Longformer model)"),dYo=l(),E6=a("li"),Dme=a("strong"),cYo=o("lxmert"),fYo=o(" \u2014 "),Cq=a("a"),mYo=o("TFLxmertModel"),gYo=o(" (LXMERT model)"),hYo=l(),y6=a("li"),Nme=a("strong"),pYo=o("marian"),_Yo=o(" \u2014 "),Mq=a("a"),uYo=o("TFMarianModel"),bYo=o(" (Marian model)"),vYo=l(),w6=a("li"),qme=a("strong"),TYo=o("mbart"),FYo=o(" \u2014 "),Eq=a("a"),CYo=o("TFMBartModel"),MYo=o(" (mBART model)"),EYo=l(),A6=a("li"),Ome=a("strong"),yYo=o("mobilebert"),wYo=o(" \u2014 "),yq=a("a"),AYo=o("TFMobileBertModel"),LYo=o(" (MobileBERT model)"),BYo=l(),L6=a("li"),Gme=a("strong"),xYo=o("mpnet"),kYo=o(" \u2014 "),wq=a("a"),RYo=o("TFMPNetModel"),SYo=o(" (MPNet model)"),PYo=l(),B6=a("li"),Xme=a("strong"),$Yo=o("mt5"),IYo=o(" \u2014 "),Aq=a("a"),jYo=o("TFMT5Model"),DYo=o(" (mT5 model)"),NYo=l(),x6=a("li"),Vme=a("strong"),qYo=o("openai-gpt"),OYo=o(" \u2014 "),Lq=a("a"),GYo=o("TFOpenAIGPTModel"),XYo=o(" (OpenAI GPT model)"),VYo=l(),k6=a("li"),zme=a("strong"),zYo=o("pegasus"),WYo=o(" \u2014 "),Bq=a("a"),QYo=o("TFPegasusModel"),HYo=o(" (Pegasus model)"),UYo=l(),R6=a("li"),Wme=a("strong"),JYo=o("rembert"),YYo=o(" \u2014 "),xq=a("a"),KYo=o("TFRemBertModel"),ZYo=o(" (RemBERT model)"),eKo=l(),S6=a("li"),Qme=a("strong"),oKo=o("roberta"),rKo=o(" \u2014 "),kq=a("a"),tKo=o("TFRobertaModel"),aKo=o(" (RoBERTa model)"),nKo=l(),P6=a("li"),Hme=a("strong"),sKo=o("roformer"),lKo=o(" \u2014 "),Rq=a("a"),iKo=o("TFRoFormerModel"),dKo=o(" (RoFormer model)"),cKo=l(),$6=a("li"),Ume=a("strong"),fKo=o("speech_to_text"),mKo=o(" \u2014 "),Sq=a("a"),gKo=o("TFSpeech2TextModel"),hKo=o(" (Speech2Text model)"),pKo=l(),I6=a("li"),Jme=a("strong"),_Ko=o("t5"),uKo=o(" \u2014 "),Pq=a("a"),bKo=o("TFT5Model"),vKo=o(" (T5 model)"),TKo=l(),j6=a("li"),Yme=a("strong"),FKo=o("tapas"),CKo=o(" \u2014 "),$q=a("a"),MKo=o("TFTapasModel"),EKo=o(" (TAPAS model)"),yKo=l(),D6=a("li"),Kme=a("strong"),wKo=o("transfo-xl"),AKo=o(" \u2014 "),Iq=a("a"),LKo=o("TFTransfoXLModel"),BKo=o(" (Transformer-XL model)"),xKo=l(),N6=a("li"),Zme=a("strong"),kKo=o("vit"),RKo=o(" \u2014 "),jq=a("a"),SKo=o("TFViTModel"),PKo=o(" (ViT model)"),$Ko=l(),q6=a("li"),ege=a("strong"),IKo=o("wav2vec2"),jKo=o(" \u2014 "),Dq=a("a"),DKo=o("TFWav2Vec2Model"),NKo=o(" (Wav2Vec2 model)"),qKo=l(),O6=a("li"),oge=a("strong"),OKo=o("xlm"),GKo=o(" \u2014 "),Nq=a("a"),XKo=o("TFXLMModel"),VKo=o(" (XLM model)"),zKo=l(),G6=a("li"),rge=a("strong"),WKo=o("xlm-roberta"),QKo=o(" \u2014 "),qq=a("a"),HKo=o("TFXLMRobertaModel"),UKo=o(" (XLM-RoBERTa model)"),JKo=l(),X6=a("li"),tge=a("strong"),YKo=o("xlnet"),KKo=o(" \u2014 "),Oq=a("a"),ZKo=o("TFXLNetModel"),eZo=o(" (XLNet model)"),oZo=l(),age=a("p"),rZo=o("Examples:"),tZo=l(),f(Py.$$.fragment),gke=l(),_c=a("h2"),V6=a("a"),nge=a("span"),f($y.$$.fragment),aZo=l(),sge=a("span"),nZo=o("TFAutoModelForPreTraining"),hke=l(),Tr=a("div"),f(Iy.$$.fragment),sZo=l(),uc=a("p"),lZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lge=a("code"),iZo=o("from_pretrained()"),dZo=o("class method or the "),ige=a("code"),cZo=o("from_config()"),fZo=o(`class
method.`),mZo=l(),jy=a("p"),gZo=o("This class cannot be instantiated directly using "),dge=a("code"),hZo=o("__init__()"),pZo=o(" (throws an error)."),_Zo=l(),ht=a("div"),f(Dy.$$.fragment),uZo=l(),cge=a("p"),bZo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vZo=l(),bc=a("p"),TZo=o(`Note:
Loading a model from its configuration file does `),fge=a("strong"),FZo=o("not"),CZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mge=a("code"),MZo=o("from_pretrained()"),EZo=o("to load the model weights."),yZo=l(),gge=a("p"),wZo=o("Examples:"),AZo=l(),f(Ny.$$.fragment),LZo=l(),po=a("div"),f(qy.$$.fragment),BZo=l(),hge=a("p"),xZo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kZo=l(),un=a("p"),RZo=o("The model class to instantiate is selected based on the "),pge=a("code"),SZo=o("model_type"),PZo=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),$Zo=o("pretrained_model_name_or_path"),IZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=a("code"),jZo=o("pretrained_model_name_or_path"),DZo=o(":"),NZo=l(),H=a("ul"),z6=a("li"),bge=a("strong"),qZo=o("albert"),OZo=o(" \u2014 "),Gq=a("a"),GZo=o("TFAlbertForPreTraining"),XZo=o(" (ALBERT model)"),VZo=l(),W6=a("li"),vge=a("strong"),zZo=o("bart"),WZo=o(" \u2014 "),Xq=a("a"),QZo=o("TFBartForConditionalGeneration"),HZo=o(" (BART model)"),UZo=l(),Q6=a("li"),Tge=a("strong"),JZo=o("bert"),YZo=o(" \u2014 "),Vq=a("a"),KZo=o("TFBertForPreTraining"),ZZo=o(" (BERT model)"),eer=l(),H6=a("li"),Fge=a("strong"),oer=o("camembert"),rer=o(" \u2014 "),zq=a("a"),ter=o("TFCamembertForMaskedLM"),aer=o(" (CamemBERT model)"),ner=l(),U6=a("li"),Cge=a("strong"),ser=o("ctrl"),ler=o(" \u2014 "),Wq=a("a"),ier=o("TFCTRLLMHeadModel"),der=o(" (CTRL model)"),cer=l(),J6=a("li"),Mge=a("strong"),fer=o("distilbert"),mer=o(" \u2014 "),Qq=a("a"),ger=o("TFDistilBertForMaskedLM"),her=o(" (DistilBERT model)"),per=l(),Y6=a("li"),Ege=a("strong"),_er=o("electra"),uer=o(" \u2014 "),Hq=a("a"),ber=o("TFElectraForPreTraining"),ver=o(" (ELECTRA model)"),Ter=l(),K6=a("li"),yge=a("strong"),Fer=o("flaubert"),Cer=o(" \u2014 "),Uq=a("a"),Mer=o("TFFlaubertWithLMHeadModel"),Eer=o(" (FlauBERT model)"),yer=l(),Z6=a("li"),wge=a("strong"),wer=o("funnel"),Aer=o(" \u2014 "),Jq=a("a"),Ler=o("TFFunnelForPreTraining"),Ber=o(" (Funnel Transformer model)"),xer=l(),eT=a("li"),Age=a("strong"),ker=o("gpt2"),Rer=o(" \u2014 "),Yq=a("a"),Ser=o("TFGPT2LMHeadModel"),Per=o(" (OpenAI GPT-2 model)"),$er=l(),oT=a("li"),Lge=a("strong"),Ier=o("layoutlm"),jer=o(" \u2014 "),Kq=a("a"),Der=o("TFLayoutLMForMaskedLM"),Ner=o(" (LayoutLM model)"),qer=l(),rT=a("li"),Bge=a("strong"),Oer=o("lxmert"),Ger=o(" \u2014 "),Zq=a("a"),Xer=o("TFLxmertForPreTraining"),Ver=o(" (LXMERT model)"),zer=l(),tT=a("li"),xge=a("strong"),Wer=o("mobilebert"),Qer=o(" \u2014 "),eO=a("a"),Her=o("TFMobileBertForPreTraining"),Uer=o(" (MobileBERT model)"),Jer=l(),aT=a("li"),kge=a("strong"),Yer=o("mpnet"),Ker=o(" \u2014 "),oO=a("a"),Zer=o("TFMPNetForMaskedLM"),eor=o(" (MPNet model)"),oor=l(),nT=a("li"),Rge=a("strong"),ror=o("openai-gpt"),tor=o(" \u2014 "),rO=a("a"),aor=o("TFOpenAIGPTLMHeadModel"),nor=o(" (OpenAI GPT model)"),sor=l(),sT=a("li"),Sge=a("strong"),lor=o("roberta"),ior=o(" \u2014 "),tO=a("a"),dor=o("TFRobertaForMaskedLM"),cor=o(" (RoBERTa model)"),mor=l(),lT=a("li"),Pge=a("strong"),gor=o("t5"),hor=o(" \u2014 "),aO=a("a"),por=o("TFT5ForConditionalGeneration"),_or=o(" (T5 model)"),uor=l(),iT=a("li"),$ge=a("strong"),bor=o("tapas"),vor=o(" \u2014 "),nO=a("a"),Tor=o("TFTapasForMaskedLM"),For=o(" (TAPAS model)"),Cor=l(),dT=a("li"),Ige=a("strong"),Mor=o("transfo-xl"),Eor=o(" \u2014 "),sO=a("a"),yor=o("TFTransfoXLLMHeadModel"),wor=o(" (Transformer-XL model)"),Aor=l(),cT=a("li"),jge=a("strong"),Lor=o("xlm"),Bor=o(" \u2014 "),lO=a("a"),xor=o("TFXLMWithLMHeadModel"),kor=o(" (XLM model)"),Ror=l(),fT=a("li"),Dge=a("strong"),Sor=o("xlm-roberta"),Por=o(" \u2014 "),iO=a("a"),$or=o("TFXLMRobertaForMaskedLM"),Ior=o(" (XLM-RoBERTa model)"),jor=l(),mT=a("li"),Nge=a("strong"),Dor=o("xlnet"),Nor=o(" \u2014 "),dO=a("a"),qor=o("TFXLNetLMHeadModel"),Oor=o(" (XLNet model)"),Gor=l(),qge=a("p"),Xor=o("Examples:"),Vor=l(),f(Oy.$$.fragment),pke=l(),vc=a("h2"),gT=a("a"),Oge=a("span"),f(Gy.$$.fragment),zor=l(),Gge=a("span"),Wor=o("TFAutoModelForCausalLM"),_ke=l(),Fr=a("div"),f(Xy.$$.fragment),Qor=l(),Tc=a("p"),Hor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Xge=a("code"),Uor=o("from_pretrained()"),Jor=o("class method or the "),Vge=a("code"),Yor=o("from_config()"),Kor=o(`class
method.`),Zor=l(),Vy=a("p"),err=o("This class cannot be instantiated directly using "),zge=a("code"),orr=o("__init__()"),rrr=o(" (throws an error)."),trr=l(),pt=a("div"),f(zy.$$.fragment),arr=l(),Wge=a("p"),nrr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),srr=l(),Fc=a("p"),lrr=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),irr=o("not"),drr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hge=a("code"),crr=o("from_pretrained()"),frr=o("to load the model weights."),mrr=l(),Uge=a("p"),grr=o("Examples:"),hrr=l(),f(Wy.$$.fragment),prr=l(),_o=a("div"),f(Qy.$$.fragment),_rr=l(),Jge=a("p"),urr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),brr=l(),bn=a("p"),vrr=o("The model class to instantiate is selected based on the "),Yge=a("code"),Trr=o("model_type"),Frr=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),Crr=o("pretrained_model_name_or_path"),Mrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),Err=o("pretrained_model_name_or_path"),yrr=o(":"),wrr=l(),me=a("ul"),hT=a("li"),ehe=a("strong"),Arr=o("bert"),Lrr=o(" \u2014 "),cO=a("a"),Brr=o("TFBertLMHeadModel"),xrr=o(" (BERT model)"),krr=l(),pT=a("li"),ohe=a("strong"),Rrr=o("camembert"),Srr=o(" \u2014 "),fO=a("a"),Prr=o("TFCamembertForCausalLM"),$rr=o(" (CamemBERT model)"),Irr=l(),_T=a("li"),rhe=a("strong"),jrr=o("ctrl"),Drr=o(" \u2014 "),mO=a("a"),Nrr=o("TFCTRLLMHeadModel"),qrr=o(" (CTRL model)"),Orr=l(),uT=a("li"),the=a("strong"),Grr=o("gpt2"),Xrr=o(" \u2014 "),gO=a("a"),Vrr=o("TFGPT2LMHeadModel"),zrr=o(" (OpenAI GPT-2 model)"),Wrr=l(),bT=a("li"),ahe=a("strong"),Qrr=o("openai-gpt"),Hrr=o(" \u2014 "),hO=a("a"),Urr=o("TFOpenAIGPTLMHeadModel"),Jrr=o(" (OpenAI GPT model)"),Yrr=l(),vT=a("li"),nhe=a("strong"),Krr=o("rembert"),Zrr=o(" \u2014 "),pO=a("a"),etr=o("TFRemBertForCausalLM"),otr=o(" (RemBERT model)"),rtr=l(),TT=a("li"),she=a("strong"),ttr=o("roberta"),atr=o(" \u2014 "),_O=a("a"),ntr=o("TFRobertaForCausalLM"),str=o(" (RoBERTa model)"),ltr=l(),FT=a("li"),lhe=a("strong"),itr=o("roformer"),dtr=o(" \u2014 "),uO=a("a"),ctr=o("TFRoFormerForCausalLM"),ftr=o(" (RoFormer model)"),mtr=l(),CT=a("li"),ihe=a("strong"),gtr=o("transfo-xl"),htr=o(" \u2014 "),bO=a("a"),ptr=o("TFTransfoXLLMHeadModel"),_tr=o(" (Transformer-XL model)"),utr=l(),MT=a("li"),dhe=a("strong"),btr=o("xlm"),vtr=o(" \u2014 "),vO=a("a"),Ttr=o("TFXLMWithLMHeadModel"),Ftr=o(" (XLM model)"),Ctr=l(),ET=a("li"),che=a("strong"),Mtr=o("xlnet"),Etr=o(" \u2014 "),TO=a("a"),ytr=o("TFXLNetLMHeadModel"),wtr=o(" (XLNet model)"),Atr=l(),fhe=a("p"),Ltr=o("Examples:"),Btr=l(),f(Hy.$$.fragment),uke=l(),Cc=a("h2"),yT=a("a"),mhe=a("span"),f(Uy.$$.fragment),xtr=l(),ghe=a("span"),ktr=o("TFAutoModelForImageClassification"),bke=l(),Cr=a("div"),f(Jy.$$.fragment),Rtr=l(),Mc=a("p"),Str=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hhe=a("code"),Ptr=o("from_pretrained()"),$tr=o("class method or the "),phe=a("code"),Itr=o("from_config()"),jtr=o(`class
method.`),Dtr=l(),Yy=a("p"),Ntr=o("This class cannot be instantiated directly using "),_he=a("code"),qtr=o("__init__()"),Otr=o(" (throws an error)."),Gtr=l(),_t=a("div"),f(Ky.$$.fragment),Xtr=l(),uhe=a("p"),Vtr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ztr=l(),Ec=a("p"),Wtr=o(`Note:
Loading a model from its configuration file does `),bhe=a("strong"),Qtr=o("not"),Htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vhe=a("code"),Utr=o("from_pretrained()"),Jtr=o("to load the model weights."),Ytr=l(),The=a("p"),Ktr=o("Examples:"),Ztr=l(),f(Zy.$$.fragment),ear=l(),uo=a("div"),f(ew.$$.fragment),oar=l(),Fhe=a("p"),rar=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tar=l(),vn=a("p"),aar=o("The model class to instantiate is selected based on the "),Che=a("code"),nar=o("model_type"),sar=o(` property of the config object (either
passed as an argument or loaded from `),Mhe=a("code"),lar=o("pretrained_model_name_or_path"),iar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=a("code"),dar=o("pretrained_model_name_or_path"),car=o(":"),far=l(),ow=a("ul"),wT=a("li"),yhe=a("strong"),mar=o("convnext"),gar=o(" \u2014 "),FO=a("a"),har=o("TFConvNextForImageClassification"),par=o(" (ConvNext model)"),_ar=l(),AT=a("li"),whe=a("strong"),uar=o("vit"),bar=o(" \u2014 "),CO=a("a"),Tar=o("TFViTForImageClassification"),Far=o(" (ViT model)"),Car=l(),Ahe=a("p"),Mar=o("Examples:"),Ear=l(),f(rw.$$.fragment),vke=l(),yc=a("h2"),LT=a("a"),Lhe=a("span"),f(tw.$$.fragment),yar=l(),Bhe=a("span"),war=o("TFAutoModelForMaskedLM"),Tke=l(),Mr=a("div"),f(aw.$$.fragment),Aar=l(),wc=a("p"),Lar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xhe=a("code"),Bar=o("from_pretrained()"),xar=o("class method or the "),khe=a("code"),kar=o("from_config()"),Rar=o(`class
method.`),Sar=l(),nw=a("p"),Par=o("This class cannot be instantiated directly using "),Rhe=a("code"),$ar=o("__init__()"),Iar=o(" (throws an error)."),jar=l(),ut=a("div"),f(sw.$$.fragment),Dar=l(),She=a("p"),Nar=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qar=l(),Ac=a("p"),Oar=o(`Note:
Loading a model from its configuration file does `),Phe=a("strong"),Gar=o("not"),Xar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$he=a("code"),Var=o("from_pretrained()"),zar=o("to load the model weights."),War=l(),Ihe=a("p"),Qar=o("Examples:"),Har=l(),f(lw.$$.fragment),Uar=l(),bo=a("div"),f(iw.$$.fragment),Jar=l(),jhe=a("p"),Yar=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kar=l(),Tn=a("p"),Zar=o("The model class to instantiate is selected based on the "),Dhe=a("code"),enr=o("model_type"),onr=o(` property of the config object (either
passed as an argument or loaded from `),Nhe=a("code"),rnr=o("pretrained_model_name_or_path"),tnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),anr=o("pretrained_model_name_or_path"),nnr=o(":"),snr=l(),Y=a("ul"),BT=a("li"),Ohe=a("strong"),lnr=o("albert"),inr=o(" \u2014 "),MO=a("a"),dnr=o("TFAlbertForMaskedLM"),cnr=o(" (ALBERT model)"),fnr=l(),xT=a("li"),Ghe=a("strong"),mnr=o("bert"),gnr=o(" \u2014 "),EO=a("a"),hnr=o("TFBertForMaskedLM"),pnr=o(" (BERT model)"),_nr=l(),kT=a("li"),Xhe=a("strong"),unr=o("camembert"),bnr=o(" \u2014 "),yO=a("a"),vnr=o("TFCamembertForMaskedLM"),Tnr=o(" (CamemBERT model)"),Fnr=l(),RT=a("li"),Vhe=a("strong"),Cnr=o("convbert"),Mnr=o(" \u2014 "),wO=a("a"),Enr=o("TFConvBertForMaskedLM"),ynr=o(" (ConvBERT model)"),wnr=l(),ST=a("li"),zhe=a("strong"),Anr=o("deberta"),Lnr=o(" \u2014 "),AO=a("a"),Bnr=o("TFDebertaForMaskedLM"),xnr=o(" (DeBERTa model)"),knr=l(),PT=a("li"),Whe=a("strong"),Rnr=o("deberta-v2"),Snr=o(" \u2014 "),LO=a("a"),Pnr=o("TFDebertaV2ForMaskedLM"),$nr=o(" (DeBERTa-v2 model)"),Inr=l(),$T=a("li"),Qhe=a("strong"),jnr=o("distilbert"),Dnr=o(" \u2014 "),BO=a("a"),Nnr=o("TFDistilBertForMaskedLM"),qnr=o(" (DistilBERT model)"),Onr=l(),IT=a("li"),Hhe=a("strong"),Gnr=o("electra"),Xnr=o(" \u2014 "),xO=a("a"),Vnr=o("TFElectraForMaskedLM"),znr=o(" (ELECTRA model)"),Wnr=l(),jT=a("li"),Uhe=a("strong"),Qnr=o("flaubert"),Hnr=o(" \u2014 "),kO=a("a"),Unr=o("TFFlaubertWithLMHeadModel"),Jnr=o(" (FlauBERT model)"),Ynr=l(),DT=a("li"),Jhe=a("strong"),Knr=o("funnel"),Znr=o(" \u2014 "),RO=a("a"),esr=o("TFFunnelForMaskedLM"),osr=o(" (Funnel Transformer model)"),rsr=l(),NT=a("li"),Yhe=a("strong"),tsr=o("layoutlm"),asr=o(" \u2014 "),SO=a("a"),nsr=o("TFLayoutLMForMaskedLM"),ssr=o(" (LayoutLM model)"),lsr=l(),qT=a("li"),Khe=a("strong"),isr=o("longformer"),dsr=o(" \u2014 "),PO=a("a"),csr=o("TFLongformerForMaskedLM"),fsr=o(" (Longformer model)"),msr=l(),OT=a("li"),Zhe=a("strong"),gsr=o("mobilebert"),hsr=o(" \u2014 "),$O=a("a"),psr=o("TFMobileBertForMaskedLM"),_sr=o(" (MobileBERT model)"),usr=l(),GT=a("li"),epe=a("strong"),bsr=o("mpnet"),vsr=o(" \u2014 "),IO=a("a"),Tsr=o("TFMPNetForMaskedLM"),Fsr=o(" (MPNet model)"),Csr=l(),XT=a("li"),ope=a("strong"),Msr=o("rembert"),Esr=o(" \u2014 "),jO=a("a"),ysr=o("TFRemBertForMaskedLM"),wsr=o(" (RemBERT model)"),Asr=l(),VT=a("li"),rpe=a("strong"),Lsr=o("roberta"),Bsr=o(" \u2014 "),DO=a("a"),xsr=o("TFRobertaForMaskedLM"),ksr=o(" (RoBERTa model)"),Rsr=l(),zT=a("li"),tpe=a("strong"),Ssr=o("roformer"),Psr=o(" \u2014 "),NO=a("a"),$sr=o("TFRoFormerForMaskedLM"),Isr=o(" (RoFormer model)"),jsr=l(),WT=a("li"),ape=a("strong"),Dsr=o("tapas"),Nsr=o(" \u2014 "),qO=a("a"),qsr=o("TFTapasForMaskedLM"),Osr=o(" (TAPAS model)"),Gsr=l(),QT=a("li"),npe=a("strong"),Xsr=o("xlm"),Vsr=o(" \u2014 "),OO=a("a"),zsr=o("TFXLMWithLMHeadModel"),Wsr=o(" (XLM model)"),Qsr=l(),HT=a("li"),spe=a("strong"),Hsr=o("xlm-roberta"),Usr=o(" \u2014 "),GO=a("a"),Jsr=o("TFXLMRobertaForMaskedLM"),Ysr=o(" (XLM-RoBERTa model)"),Ksr=l(),lpe=a("p"),Zsr=o("Examples:"),elr=l(),f(dw.$$.fragment),Fke=l(),Lc=a("h2"),UT=a("a"),ipe=a("span"),f(cw.$$.fragment),olr=l(),dpe=a("span"),rlr=o("TFAutoModelForSeq2SeqLM"),Cke=l(),Er=a("div"),f(fw.$$.fragment),tlr=l(),Bc=a("p"),alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cpe=a("code"),nlr=o("from_pretrained()"),slr=o("class method or the "),fpe=a("code"),llr=o("from_config()"),ilr=o(`class
method.`),dlr=l(),mw=a("p"),clr=o("This class cannot be instantiated directly using "),mpe=a("code"),flr=o("__init__()"),mlr=o(" (throws an error)."),glr=l(),bt=a("div"),f(gw.$$.fragment),hlr=l(),gpe=a("p"),plr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_lr=l(),xc=a("p"),ulr=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),blr=o("not"),vlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ppe=a("code"),Tlr=o("from_pretrained()"),Flr=o("to load the model weights."),Clr=l(),_pe=a("p"),Mlr=o("Examples:"),Elr=l(),f(hw.$$.fragment),ylr=l(),vo=a("div"),f(pw.$$.fragment),wlr=l(),upe=a("p"),Alr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Llr=l(),Fn=a("p"),Blr=o("The model class to instantiate is selected based on the "),bpe=a("code"),xlr=o("model_type"),klr=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),Rlr=o("pretrained_model_name_or_path"),Slr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),Plr=o("pretrained_model_name_or_path"),$lr=o(":"),Ilr=l(),_e=a("ul"),JT=a("li"),Fpe=a("strong"),jlr=o("bart"),Dlr=o(" \u2014 "),XO=a("a"),Nlr=o("TFBartForConditionalGeneration"),qlr=o(" (BART model)"),Olr=l(),YT=a("li"),Cpe=a("strong"),Glr=o("blenderbot"),Xlr=o(" \u2014 "),VO=a("a"),Vlr=o("TFBlenderbotForConditionalGeneration"),zlr=o(" (Blenderbot model)"),Wlr=l(),KT=a("li"),Mpe=a("strong"),Qlr=o("blenderbot-small"),Hlr=o(" \u2014 "),zO=a("a"),Ulr=o("TFBlenderbotSmallForConditionalGeneration"),Jlr=o(" (BlenderbotSmall model)"),Ylr=l(),ZT=a("li"),Epe=a("strong"),Klr=o("encoder-decoder"),Zlr=o(" \u2014 "),WO=a("a"),eir=o("TFEncoderDecoderModel"),oir=o(" (Encoder decoder model)"),rir=l(),e8=a("li"),ype=a("strong"),tir=o("led"),air=o(" \u2014 "),QO=a("a"),nir=o("TFLEDForConditionalGeneration"),sir=o(" (LED model)"),lir=l(),o8=a("li"),wpe=a("strong"),iir=o("marian"),dir=o(" \u2014 "),HO=a("a"),cir=o("TFMarianMTModel"),fir=o(" (Marian model)"),mir=l(),r8=a("li"),Ape=a("strong"),gir=o("mbart"),hir=o(" \u2014 "),UO=a("a"),pir=o("TFMBartForConditionalGeneration"),_ir=o(" (mBART model)"),uir=l(),t8=a("li"),Lpe=a("strong"),bir=o("mt5"),vir=o(" \u2014 "),JO=a("a"),Tir=o("TFMT5ForConditionalGeneration"),Fir=o(" (mT5 model)"),Cir=l(),a8=a("li"),Bpe=a("strong"),Mir=o("pegasus"),Eir=o(" \u2014 "),YO=a("a"),yir=o("TFPegasusForConditionalGeneration"),wir=o(" (Pegasus model)"),Air=l(),n8=a("li"),xpe=a("strong"),Lir=o("t5"),Bir=o(" \u2014 "),KO=a("a"),xir=o("TFT5ForConditionalGeneration"),kir=o(" (T5 model)"),Rir=l(),kpe=a("p"),Sir=o("Examples:"),Pir=l(),f(_w.$$.fragment),Mke=l(),kc=a("h2"),s8=a("a"),Rpe=a("span"),f(uw.$$.fragment),$ir=l(),Spe=a("span"),Iir=o("TFAutoModelForSequenceClassification"),Eke=l(),yr=a("div"),f(bw.$$.fragment),jir=l(),Rc=a("p"),Dir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ppe=a("code"),Nir=o("from_pretrained()"),qir=o("class method or the "),$pe=a("code"),Oir=o("from_config()"),Gir=o(`class
method.`),Xir=l(),vw=a("p"),Vir=o("This class cannot be instantiated directly using "),Ipe=a("code"),zir=o("__init__()"),Wir=o(" (throws an error)."),Qir=l(),vt=a("div"),f(Tw.$$.fragment),Hir=l(),jpe=a("p"),Uir=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Jir=l(),Sc=a("p"),Yir=o(`Note:
Loading a model from its configuration file does `),Dpe=a("strong"),Kir=o("not"),Zir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Npe=a("code"),edr=o("from_pretrained()"),odr=o("to load the model weights."),rdr=l(),qpe=a("p"),tdr=o("Examples:"),adr=l(),f(Fw.$$.fragment),ndr=l(),To=a("div"),f(Cw.$$.fragment),sdr=l(),Ope=a("p"),ldr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),idr=l(),Cn=a("p"),ddr=o("The model class to instantiate is selected based on the "),Gpe=a("code"),cdr=o("model_type"),fdr=o(` property of the config object (either
passed as an argument or loaded from `),Xpe=a("code"),mdr=o("pretrained_model_name_or_path"),gdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),hdr=o("pretrained_model_name_or_path"),pdr=o(":"),_dr=l(),V=a("ul"),l8=a("li"),zpe=a("strong"),udr=o("albert"),bdr=o(" \u2014 "),ZO=a("a"),vdr=o("TFAlbertForSequenceClassification"),Tdr=o(" (ALBERT model)"),Fdr=l(),i8=a("li"),Wpe=a("strong"),Cdr=o("bert"),Mdr=o(" \u2014 "),eG=a("a"),Edr=o("TFBertForSequenceClassification"),ydr=o(" (BERT model)"),wdr=l(),d8=a("li"),Qpe=a("strong"),Adr=o("camembert"),Ldr=o(" \u2014 "),oG=a("a"),Bdr=o("TFCamembertForSequenceClassification"),xdr=o(" (CamemBERT model)"),kdr=l(),c8=a("li"),Hpe=a("strong"),Rdr=o("convbert"),Sdr=o(" \u2014 "),rG=a("a"),Pdr=o("TFConvBertForSequenceClassification"),$dr=o(" (ConvBERT model)"),Idr=l(),f8=a("li"),Upe=a("strong"),jdr=o("ctrl"),Ddr=o(" \u2014 "),tG=a("a"),Ndr=o("TFCTRLForSequenceClassification"),qdr=o(" (CTRL model)"),Odr=l(),m8=a("li"),Jpe=a("strong"),Gdr=o("deberta"),Xdr=o(" \u2014 "),aG=a("a"),Vdr=o("TFDebertaForSequenceClassification"),zdr=o(" (DeBERTa model)"),Wdr=l(),g8=a("li"),Ype=a("strong"),Qdr=o("deberta-v2"),Hdr=o(" \u2014 "),nG=a("a"),Udr=o("TFDebertaV2ForSequenceClassification"),Jdr=o(" (DeBERTa-v2 model)"),Ydr=l(),h8=a("li"),Kpe=a("strong"),Kdr=o("distilbert"),Zdr=o(" \u2014 "),sG=a("a"),ecr=o("TFDistilBertForSequenceClassification"),ocr=o(" (DistilBERT model)"),rcr=l(),p8=a("li"),Zpe=a("strong"),tcr=o("electra"),acr=o(" \u2014 "),lG=a("a"),ncr=o("TFElectraForSequenceClassification"),scr=o(" (ELECTRA model)"),lcr=l(),_8=a("li"),e_e=a("strong"),icr=o("flaubert"),dcr=o(" \u2014 "),iG=a("a"),ccr=o("TFFlaubertForSequenceClassification"),fcr=o(" (FlauBERT model)"),mcr=l(),u8=a("li"),o_e=a("strong"),gcr=o("funnel"),hcr=o(" \u2014 "),dG=a("a"),pcr=o("TFFunnelForSequenceClassification"),_cr=o(" (Funnel Transformer model)"),ucr=l(),b8=a("li"),r_e=a("strong"),bcr=o("gpt2"),vcr=o(" \u2014 "),cG=a("a"),Tcr=o("TFGPT2ForSequenceClassification"),Fcr=o(" (OpenAI GPT-2 model)"),Ccr=l(),v8=a("li"),t_e=a("strong"),Mcr=o("layoutlm"),Ecr=o(" \u2014 "),fG=a("a"),ycr=o("TFLayoutLMForSequenceClassification"),wcr=o(" (LayoutLM model)"),Acr=l(),T8=a("li"),a_e=a("strong"),Lcr=o("longformer"),Bcr=o(" \u2014 "),mG=a("a"),xcr=o("TFLongformerForSequenceClassification"),kcr=o(" (Longformer model)"),Rcr=l(),F8=a("li"),n_e=a("strong"),Scr=o("mobilebert"),Pcr=o(" \u2014 "),gG=a("a"),$cr=o("TFMobileBertForSequenceClassification"),Icr=o(" (MobileBERT model)"),jcr=l(),C8=a("li"),s_e=a("strong"),Dcr=o("mpnet"),Ncr=o(" \u2014 "),hG=a("a"),qcr=o("TFMPNetForSequenceClassification"),Ocr=o(" (MPNet model)"),Gcr=l(),M8=a("li"),l_e=a("strong"),Xcr=o("openai-gpt"),Vcr=o(" \u2014 "),pG=a("a"),zcr=o("TFOpenAIGPTForSequenceClassification"),Wcr=o(" (OpenAI GPT model)"),Qcr=l(),E8=a("li"),i_e=a("strong"),Hcr=o("rembert"),Ucr=o(" \u2014 "),_G=a("a"),Jcr=o("TFRemBertForSequenceClassification"),Ycr=o(" (RemBERT model)"),Kcr=l(),y8=a("li"),d_e=a("strong"),Zcr=o("roberta"),efr=o(" \u2014 "),uG=a("a"),ofr=o("TFRobertaForSequenceClassification"),rfr=o(" (RoBERTa model)"),tfr=l(),w8=a("li"),c_e=a("strong"),afr=o("roformer"),nfr=o(" \u2014 "),bG=a("a"),sfr=o("TFRoFormerForSequenceClassification"),lfr=o(" (RoFormer model)"),ifr=l(),A8=a("li"),f_e=a("strong"),dfr=o("tapas"),cfr=o(" \u2014 "),vG=a("a"),ffr=o("TFTapasForSequenceClassification"),mfr=o(" (TAPAS model)"),gfr=l(),L8=a("li"),m_e=a("strong"),hfr=o("transfo-xl"),pfr=o(" \u2014 "),TG=a("a"),_fr=o("TFTransfoXLForSequenceClassification"),ufr=o(" (Transformer-XL model)"),bfr=l(),B8=a("li"),g_e=a("strong"),vfr=o("xlm"),Tfr=o(" \u2014 "),FG=a("a"),Ffr=o("TFXLMForSequenceClassification"),Cfr=o(" (XLM model)"),Mfr=l(),x8=a("li"),h_e=a("strong"),Efr=o("xlm-roberta"),yfr=o(" \u2014 "),CG=a("a"),wfr=o("TFXLMRobertaForSequenceClassification"),Afr=o(" (XLM-RoBERTa model)"),Lfr=l(),k8=a("li"),p_e=a("strong"),Bfr=o("xlnet"),xfr=o(" \u2014 "),MG=a("a"),kfr=o("TFXLNetForSequenceClassification"),Rfr=o(" (XLNet model)"),Sfr=l(),__e=a("p"),Pfr=o("Examples:"),$fr=l(),f(Mw.$$.fragment),yke=l(),Pc=a("h2"),R8=a("a"),u_e=a("span"),f(Ew.$$.fragment),Ifr=l(),b_e=a("span"),jfr=o("TFAutoModelForMultipleChoice"),wke=l(),wr=a("div"),f(yw.$$.fragment),Dfr=l(),$c=a("p"),Nfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),v_e=a("code"),qfr=o("from_pretrained()"),Ofr=o("class method or the "),T_e=a("code"),Gfr=o("from_config()"),Xfr=o(`class
method.`),Vfr=l(),ww=a("p"),zfr=o("This class cannot be instantiated directly using "),F_e=a("code"),Wfr=o("__init__()"),Qfr=o(" (throws an error)."),Hfr=l(),Tt=a("div"),f(Aw.$$.fragment),Ufr=l(),C_e=a("p"),Jfr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Yfr=l(),Ic=a("p"),Kfr=o(`Note:
Loading a model from its configuration file does `),M_e=a("strong"),Zfr=o("not"),emr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),E_e=a("code"),omr=o("from_pretrained()"),rmr=o("to load the model weights."),tmr=l(),y_e=a("p"),amr=o("Examples:"),nmr=l(),f(Lw.$$.fragment),smr=l(),Fo=a("div"),f(Bw.$$.fragment),lmr=l(),w_e=a("p"),imr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dmr=l(),Mn=a("p"),cmr=o("The model class to instantiate is selected based on the "),A_e=a("code"),fmr=o("model_type"),mmr=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),gmr=o("pretrained_model_name_or_path"),hmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),pmr=o("pretrained_model_name_or_path"),_mr=o(":"),umr=l(),te=a("ul"),S8=a("li"),x_e=a("strong"),bmr=o("albert"),vmr=o(" \u2014 "),EG=a("a"),Tmr=o("TFAlbertForMultipleChoice"),Fmr=o(" (ALBERT model)"),Cmr=l(),P8=a("li"),k_e=a("strong"),Mmr=o("bert"),Emr=o(" \u2014 "),yG=a("a"),ymr=o("TFBertForMultipleChoice"),wmr=o(" (BERT model)"),Amr=l(),$8=a("li"),R_e=a("strong"),Lmr=o("camembert"),Bmr=o(" \u2014 "),wG=a("a"),xmr=o("TFCamembertForMultipleChoice"),kmr=o(" (CamemBERT model)"),Rmr=l(),I8=a("li"),S_e=a("strong"),Smr=o("convbert"),Pmr=o(" \u2014 "),AG=a("a"),$mr=o("TFConvBertForMultipleChoice"),Imr=o(" (ConvBERT model)"),jmr=l(),j8=a("li"),P_e=a("strong"),Dmr=o("distilbert"),Nmr=o(" \u2014 "),LG=a("a"),qmr=o("TFDistilBertForMultipleChoice"),Omr=o(" (DistilBERT model)"),Gmr=l(),D8=a("li"),$_e=a("strong"),Xmr=o("electra"),Vmr=o(" \u2014 "),BG=a("a"),zmr=o("TFElectraForMultipleChoice"),Wmr=o(" (ELECTRA model)"),Qmr=l(),N8=a("li"),I_e=a("strong"),Hmr=o("flaubert"),Umr=o(" \u2014 "),xG=a("a"),Jmr=o("TFFlaubertForMultipleChoice"),Ymr=o(" (FlauBERT model)"),Kmr=l(),q8=a("li"),j_e=a("strong"),Zmr=o("funnel"),egr=o(" \u2014 "),kG=a("a"),ogr=o("TFFunnelForMultipleChoice"),rgr=o(" (Funnel Transformer model)"),tgr=l(),O8=a("li"),D_e=a("strong"),agr=o("longformer"),ngr=o(" \u2014 "),RG=a("a"),sgr=o("TFLongformerForMultipleChoice"),lgr=o(" (Longformer model)"),igr=l(),G8=a("li"),N_e=a("strong"),dgr=o("mobilebert"),cgr=o(" \u2014 "),SG=a("a"),fgr=o("TFMobileBertForMultipleChoice"),mgr=o(" (MobileBERT model)"),ggr=l(),X8=a("li"),q_e=a("strong"),hgr=o("mpnet"),pgr=o(" \u2014 "),PG=a("a"),_gr=o("TFMPNetForMultipleChoice"),ugr=o(" (MPNet model)"),bgr=l(),V8=a("li"),O_e=a("strong"),vgr=o("rembert"),Tgr=o(" \u2014 "),$G=a("a"),Fgr=o("TFRemBertForMultipleChoice"),Cgr=o(" (RemBERT model)"),Mgr=l(),z8=a("li"),G_e=a("strong"),Egr=o("roberta"),ygr=o(" \u2014 "),IG=a("a"),wgr=o("TFRobertaForMultipleChoice"),Agr=o(" (RoBERTa model)"),Lgr=l(),W8=a("li"),X_e=a("strong"),Bgr=o("roformer"),xgr=o(" \u2014 "),jG=a("a"),kgr=o("TFRoFormerForMultipleChoice"),Rgr=o(" (RoFormer model)"),Sgr=l(),Q8=a("li"),V_e=a("strong"),Pgr=o("xlm"),$gr=o(" \u2014 "),DG=a("a"),Igr=o("TFXLMForMultipleChoice"),jgr=o(" (XLM model)"),Dgr=l(),H8=a("li"),z_e=a("strong"),Ngr=o("xlm-roberta"),qgr=o(" \u2014 "),NG=a("a"),Ogr=o("TFXLMRobertaForMultipleChoice"),Ggr=o(" (XLM-RoBERTa model)"),Xgr=l(),U8=a("li"),W_e=a("strong"),Vgr=o("xlnet"),zgr=o(" \u2014 "),qG=a("a"),Wgr=o("TFXLNetForMultipleChoice"),Qgr=o(" (XLNet model)"),Hgr=l(),Q_e=a("p"),Ugr=o("Examples:"),Jgr=l(),f(xw.$$.fragment),Ake=l(),jc=a("h2"),J8=a("a"),H_e=a("span"),f(kw.$$.fragment),Ygr=l(),U_e=a("span"),Kgr=o("TFAutoModelForTableQuestionAnswering"),Lke=l(),Ar=a("div"),f(Rw.$$.fragment),Zgr=l(),Dc=a("p"),ehr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),J_e=a("code"),ohr=o("from_pretrained()"),rhr=o("class method or the "),Y_e=a("code"),thr=o("from_config()"),ahr=o(`class
method.`),nhr=l(),Sw=a("p"),shr=o("This class cannot be instantiated directly using "),K_e=a("code"),lhr=o("__init__()"),ihr=o(" (throws an error)."),dhr=l(),Ft=a("div"),f(Pw.$$.fragment),chr=l(),Z_e=a("p"),fhr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mhr=l(),Nc=a("p"),ghr=o(`Note:
Loading a model from its configuration file does `),eue=a("strong"),hhr=o("not"),phr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oue=a("code"),_hr=o("from_pretrained()"),uhr=o("to load the model weights."),bhr=l(),rue=a("p"),vhr=o("Examples:"),Thr=l(),f($w.$$.fragment),Fhr=l(),Co=a("div"),f(Iw.$$.fragment),Chr=l(),tue=a("p"),Mhr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ehr=l(),En=a("p"),yhr=o("The model class to instantiate is selected based on the "),aue=a("code"),whr=o("model_type"),Ahr=o(` property of the config object (either
passed as an argument or loaded from `),nue=a("code"),Lhr=o("pretrained_model_name_or_path"),Bhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),xhr=o("pretrained_model_name_or_path"),khr=o(":"),Rhr=l(),lue=a("ul"),Y8=a("li"),iue=a("strong"),Shr=o("tapas"),Phr=o(" \u2014 "),OG=a("a"),$hr=o("TFTapasForQuestionAnswering"),Ihr=o(" (TAPAS model)"),jhr=l(),due=a("p"),Dhr=o("Examples:"),Nhr=l(),f(jw.$$.fragment),Bke=l(),qc=a("h2"),K8=a("a"),cue=a("span"),f(Dw.$$.fragment),qhr=l(),fue=a("span"),Ohr=o("TFAutoModelForTokenClassification"),xke=l(),Lr=a("div"),f(Nw.$$.fragment),Ghr=l(),Oc=a("p"),Xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mue=a("code"),Vhr=o("from_pretrained()"),zhr=o("class method or the "),gue=a("code"),Whr=o("from_config()"),Qhr=o(`class
method.`),Hhr=l(),qw=a("p"),Uhr=o("This class cannot be instantiated directly using "),hue=a("code"),Jhr=o("__init__()"),Yhr=o(" (throws an error)."),Khr=l(),Ct=a("div"),f(Ow.$$.fragment),Zhr=l(),pue=a("p"),epr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),opr=l(),Gc=a("p"),rpr=o(`Note:
Loading a model from its configuration file does `),_ue=a("strong"),tpr=o("not"),apr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uue=a("code"),npr=o("from_pretrained()"),spr=o("to load the model weights."),lpr=l(),bue=a("p"),ipr=o("Examples:"),dpr=l(),f(Gw.$$.fragment),cpr=l(),Mo=a("div"),f(Xw.$$.fragment),fpr=l(),vue=a("p"),mpr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gpr=l(),yn=a("p"),hpr=o("The model class to instantiate is selected based on the "),Tue=a("code"),ppr=o("model_type"),_pr=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),upr=o("pretrained_model_name_or_path"),bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),vpr=o("pretrained_model_name_or_path"),Tpr=o(":"),Fpr=l(),K=a("ul"),Z8=a("li"),Mue=a("strong"),Cpr=o("albert"),Mpr=o(" \u2014 "),GG=a("a"),Epr=o("TFAlbertForTokenClassification"),ypr=o(" (ALBERT model)"),wpr=l(),eF=a("li"),Eue=a("strong"),Apr=o("bert"),Lpr=o(" \u2014 "),XG=a("a"),Bpr=o("TFBertForTokenClassification"),xpr=o(" (BERT model)"),kpr=l(),oF=a("li"),yue=a("strong"),Rpr=o("camembert"),Spr=o(" \u2014 "),VG=a("a"),Ppr=o("TFCamembertForTokenClassification"),$pr=o(" (CamemBERT model)"),Ipr=l(),rF=a("li"),wue=a("strong"),jpr=o("convbert"),Dpr=o(" \u2014 "),zG=a("a"),Npr=o("TFConvBertForTokenClassification"),qpr=o(" (ConvBERT model)"),Opr=l(),tF=a("li"),Aue=a("strong"),Gpr=o("deberta"),Xpr=o(" \u2014 "),WG=a("a"),Vpr=o("TFDebertaForTokenClassification"),zpr=o(" (DeBERTa model)"),Wpr=l(),aF=a("li"),Lue=a("strong"),Qpr=o("deberta-v2"),Hpr=o(" \u2014 "),QG=a("a"),Upr=o("TFDebertaV2ForTokenClassification"),Jpr=o(" (DeBERTa-v2 model)"),Ypr=l(),nF=a("li"),Bue=a("strong"),Kpr=o("distilbert"),Zpr=o(" \u2014 "),HG=a("a"),e_r=o("TFDistilBertForTokenClassification"),o_r=o(" (DistilBERT model)"),r_r=l(),sF=a("li"),xue=a("strong"),t_r=o("electra"),a_r=o(" \u2014 "),UG=a("a"),n_r=o("TFElectraForTokenClassification"),s_r=o(" (ELECTRA model)"),l_r=l(),lF=a("li"),kue=a("strong"),i_r=o("flaubert"),d_r=o(" \u2014 "),JG=a("a"),c_r=o("TFFlaubertForTokenClassification"),f_r=o(" (FlauBERT model)"),m_r=l(),iF=a("li"),Rue=a("strong"),g_r=o("funnel"),h_r=o(" \u2014 "),YG=a("a"),p_r=o("TFFunnelForTokenClassification"),__r=o(" (Funnel Transformer model)"),u_r=l(),dF=a("li"),Sue=a("strong"),b_r=o("layoutlm"),v_r=o(" \u2014 "),KG=a("a"),T_r=o("TFLayoutLMForTokenClassification"),F_r=o(" (LayoutLM model)"),C_r=l(),cF=a("li"),Pue=a("strong"),M_r=o("longformer"),E_r=o(" \u2014 "),ZG=a("a"),y_r=o("TFLongformerForTokenClassification"),w_r=o(" (Longformer model)"),A_r=l(),fF=a("li"),$ue=a("strong"),L_r=o("mobilebert"),B_r=o(" \u2014 "),eX=a("a"),x_r=o("TFMobileBertForTokenClassification"),k_r=o(" (MobileBERT model)"),R_r=l(),mF=a("li"),Iue=a("strong"),S_r=o("mpnet"),P_r=o(" \u2014 "),oX=a("a"),$_r=o("TFMPNetForTokenClassification"),I_r=o(" (MPNet model)"),j_r=l(),gF=a("li"),jue=a("strong"),D_r=o("rembert"),N_r=o(" \u2014 "),rX=a("a"),q_r=o("TFRemBertForTokenClassification"),O_r=o(" (RemBERT model)"),G_r=l(),hF=a("li"),Due=a("strong"),X_r=o("roberta"),V_r=o(" \u2014 "),tX=a("a"),z_r=o("TFRobertaForTokenClassification"),W_r=o(" (RoBERTa model)"),Q_r=l(),pF=a("li"),Nue=a("strong"),H_r=o("roformer"),U_r=o(" \u2014 "),aX=a("a"),J_r=o("TFRoFormerForTokenClassification"),Y_r=o(" (RoFormer model)"),K_r=l(),_F=a("li"),que=a("strong"),Z_r=o("xlm"),eur=o(" \u2014 "),nX=a("a"),our=o("TFXLMForTokenClassification"),rur=o(" (XLM model)"),tur=l(),uF=a("li"),Oue=a("strong"),aur=o("xlm-roberta"),nur=o(" \u2014 "),sX=a("a"),sur=o("TFXLMRobertaForTokenClassification"),lur=o(" (XLM-RoBERTa model)"),iur=l(),bF=a("li"),Gue=a("strong"),dur=o("xlnet"),cur=o(" \u2014 "),lX=a("a"),fur=o("TFXLNetForTokenClassification"),mur=o(" (XLNet model)"),gur=l(),Xue=a("p"),hur=o("Examples:"),pur=l(),f(Vw.$$.fragment),kke=l(),Xc=a("h2"),vF=a("a"),Vue=a("span"),f(zw.$$.fragment),_ur=l(),zue=a("span"),uur=o("TFAutoModelForQuestionAnswering"),Rke=l(),Br=a("div"),f(Ww.$$.fragment),bur=l(),Vc=a("p"),vur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Wue=a("code"),Tur=o("from_pretrained()"),Fur=o("class method or the "),Que=a("code"),Cur=o("from_config()"),Mur=o(`class
method.`),Eur=l(),Qw=a("p"),yur=o("This class cannot be instantiated directly using "),Hue=a("code"),wur=o("__init__()"),Aur=o(" (throws an error)."),Lur=l(),Mt=a("div"),f(Hw.$$.fragment),Bur=l(),Uue=a("p"),xur=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kur=l(),zc=a("p"),Rur=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),Sur=o("not"),Pur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yue=a("code"),$ur=o("from_pretrained()"),Iur=o("to load the model weights."),jur=l(),Kue=a("p"),Dur=o("Examples:"),Nur=l(),f(Uw.$$.fragment),qur=l(),Eo=a("div"),f(Jw.$$.fragment),Our=l(),Zue=a("p"),Gur=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xur=l(),wn=a("p"),Vur=o("The model class to instantiate is selected based on the "),e1e=a("code"),zur=o("model_type"),Wur=o(` property of the config object (either
passed as an argument or loaded from `),o1e=a("code"),Qur=o("pretrained_model_name_or_path"),Hur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=a("code"),Uur=o("pretrained_model_name_or_path"),Jur=o(":"),Yur=l(),Z=a("ul"),TF=a("li"),t1e=a("strong"),Kur=o("albert"),Zur=o(" \u2014 "),iX=a("a"),e1r=o("TFAlbertForQuestionAnswering"),o1r=o(" (ALBERT model)"),r1r=l(),FF=a("li"),a1e=a("strong"),t1r=o("bert"),a1r=o(" \u2014 "),dX=a("a"),n1r=o("TFBertForQuestionAnswering"),s1r=o(" (BERT model)"),l1r=l(),CF=a("li"),n1e=a("strong"),i1r=o("camembert"),d1r=o(" \u2014 "),cX=a("a"),c1r=o("TFCamembertForQuestionAnswering"),f1r=o(" (CamemBERT model)"),m1r=l(),MF=a("li"),s1e=a("strong"),g1r=o("convbert"),h1r=o(" \u2014 "),fX=a("a"),p1r=o("TFConvBertForQuestionAnswering"),_1r=o(" (ConvBERT model)"),u1r=l(),EF=a("li"),l1e=a("strong"),b1r=o("deberta"),v1r=o(" \u2014 "),mX=a("a"),T1r=o("TFDebertaForQuestionAnswering"),F1r=o(" (DeBERTa model)"),C1r=l(),yF=a("li"),i1e=a("strong"),M1r=o("deberta-v2"),E1r=o(" \u2014 "),gX=a("a"),y1r=o("TFDebertaV2ForQuestionAnswering"),w1r=o(" (DeBERTa-v2 model)"),A1r=l(),wF=a("li"),d1e=a("strong"),L1r=o("distilbert"),B1r=o(" \u2014 "),hX=a("a"),x1r=o("TFDistilBertForQuestionAnswering"),k1r=o(" (DistilBERT model)"),R1r=l(),AF=a("li"),c1e=a("strong"),S1r=o("electra"),P1r=o(" \u2014 "),pX=a("a"),$1r=o("TFElectraForQuestionAnswering"),I1r=o(" (ELECTRA model)"),j1r=l(),LF=a("li"),f1e=a("strong"),D1r=o("flaubert"),N1r=o(" \u2014 "),_X=a("a"),q1r=o("TFFlaubertForQuestionAnsweringSimple"),O1r=o(" (FlauBERT model)"),G1r=l(),BF=a("li"),m1e=a("strong"),X1r=o("funnel"),V1r=o(" \u2014 "),uX=a("a"),z1r=o("TFFunnelForQuestionAnswering"),W1r=o(" (Funnel Transformer model)"),Q1r=l(),xF=a("li"),g1e=a("strong"),H1r=o("longformer"),U1r=o(" \u2014 "),bX=a("a"),J1r=o("TFLongformerForQuestionAnswering"),Y1r=o(" (Longformer model)"),K1r=l(),kF=a("li"),h1e=a("strong"),Z1r=o("mobilebert"),ebr=o(" \u2014 "),vX=a("a"),obr=o("TFMobileBertForQuestionAnswering"),rbr=o(" (MobileBERT model)"),tbr=l(),RF=a("li"),p1e=a("strong"),abr=o("mpnet"),nbr=o(" \u2014 "),TX=a("a"),sbr=o("TFMPNetForQuestionAnswering"),lbr=o(" (MPNet model)"),ibr=l(),SF=a("li"),_1e=a("strong"),dbr=o("rembert"),cbr=o(" \u2014 "),FX=a("a"),fbr=o("TFRemBertForQuestionAnswering"),mbr=o(" (RemBERT model)"),gbr=l(),PF=a("li"),u1e=a("strong"),hbr=o("roberta"),pbr=o(" \u2014 "),CX=a("a"),_br=o("TFRobertaForQuestionAnswering"),ubr=o(" (RoBERTa model)"),bbr=l(),$F=a("li"),b1e=a("strong"),vbr=o("roformer"),Tbr=o(" \u2014 "),MX=a("a"),Fbr=o("TFRoFormerForQuestionAnswering"),Cbr=o(" (RoFormer model)"),Mbr=l(),IF=a("li"),v1e=a("strong"),Ebr=o("xlm"),ybr=o(" \u2014 "),EX=a("a"),wbr=o("TFXLMForQuestionAnsweringSimple"),Abr=o(" (XLM model)"),Lbr=l(),jF=a("li"),T1e=a("strong"),Bbr=o("xlm-roberta"),xbr=o(" \u2014 "),yX=a("a"),kbr=o("TFXLMRobertaForQuestionAnswering"),Rbr=o(" (XLM-RoBERTa model)"),Sbr=l(),DF=a("li"),F1e=a("strong"),Pbr=o("xlnet"),$br=o(" \u2014 "),wX=a("a"),Ibr=o("TFXLNetForQuestionAnsweringSimple"),jbr=o(" (XLNet model)"),Dbr=l(),C1e=a("p"),Nbr=o("Examples:"),qbr=l(),f(Yw.$$.fragment),Ske=l(),Wc=a("h2"),NF=a("a"),M1e=a("span"),f(Kw.$$.fragment),Obr=l(),E1e=a("span"),Gbr=o("TFAutoModelForVision2Seq"),Pke=l(),xr=a("div"),f(Zw.$$.fragment),Xbr=l(),Qc=a("p"),Vbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),y1e=a("code"),zbr=o("from_pretrained()"),Wbr=o("class method or the "),w1e=a("code"),Qbr=o("from_config()"),Hbr=o(`class
method.`),Ubr=l(),eA=a("p"),Jbr=o("This class cannot be instantiated directly using "),A1e=a("code"),Ybr=o("__init__()"),Kbr=o(" (throws an error)."),Zbr=l(),Et=a("div"),f(oA.$$.fragment),e5r=l(),L1e=a("p"),o5r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),r5r=l(),Hc=a("p"),t5r=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),a5r=o("not"),n5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),x1e=a("code"),s5r=o("from_pretrained()"),l5r=o("to load the model weights."),i5r=l(),k1e=a("p"),d5r=o("Examples:"),c5r=l(),f(rA.$$.fragment),f5r=l(),yo=a("div"),f(tA.$$.fragment),m5r=l(),R1e=a("p"),g5r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),h5r=l(),An=a("p"),p5r=o("The model class to instantiate is selected based on the "),S1e=a("code"),_5r=o("model_type"),u5r=o(` property of the config object (either
passed as an argument or loaded from `),P1e=a("code"),b5r=o("pretrained_model_name_or_path"),v5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),T5r=o("pretrained_model_name_or_path"),F5r=o(":"),C5r=l(),I1e=a("ul"),qF=a("li"),j1e=a("strong"),M5r=o("vision-encoder-decoder"),E5r=o(" \u2014 "),AX=a("a"),y5r=o("TFVisionEncoderDecoderModel"),w5r=o(" (Vision Encoder decoder model)"),A5r=l(),D1e=a("p"),L5r=o("Examples:"),B5r=l(),f(aA.$$.fragment),$ke=l(),Uc=a("h2"),OF=a("a"),N1e=a("span"),f(nA.$$.fragment),x5r=l(),q1e=a("span"),k5r=o("TFAutoModelForSpeechSeq2Seq"),Ike=l(),kr=a("div"),f(sA.$$.fragment),R5r=l(),Jc=a("p"),S5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),O1e=a("code"),P5r=o("from_pretrained()"),$5r=o("class method or the "),G1e=a("code"),I5r=o("from_config()"),j5r=o(`class
method.`),D5r=l(),lA=a("p"),N5r=o("This class cannot be instantiated directly using "),X1e=a("code"),q5r=o("__init__()"),O5r=o(" (throws an error)."),G5r=l(),yt=a("div"),f(iA.$$.fragment),X5r=l(),V1e=a("p"),V5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),z5r=l(),Yc=a("p"),W5r=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),Q5r=o("not"),H5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),W1e=a("code"),U5r=o("from_pretrained()"),J5r=o("to load the model weights."),Y5r=l(),Q1e=a("p"),K5r=o("Examples:"),Z5r=l(),f(dA.$$.fragment),e2r=l(),wo=a("div"),f(cA.$$.fragment),o2r=l(),H1e=a("p"),r2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),t2r=l(),Ln=a("p"),a2r=o("The model class to instantiate is selected based on the "),U1e=a("code"),n2r=o("model_type"),s2r=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),l2r=o("pretrained_model_name_or_path"),i2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),d2r=o("pretrained_model_name_or_path"),c2r=o(":"),f2r=l(),K1e=a("ul"),GF=a("li"),Z1e=a("strong"),m2r=o("speech_to_text"),g2r=o(" \u2014 "),LX=a("a"),h2r=o("TFSpeech2TextForConditionalGeneration"),p2r=o(" (Speech2Text model)"),_2r=l(),ebe=a("p"),u2r=o("Examples:"),b2r=l(),f(fA.$$.fragment),jke=l(),Kc=a("h2"),XF=a("a"),obe=a("span"),f(mA.$$.fragment),v2r=l(),rbe=a("span"),T2r=o("FlaxAutoModel"),Dke=l(),Rr=a("div"),f(gA.$$.fragment),F2r=l(),Zc=a("p"),C2r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tbe=a("code"),M2r=o("from_pretrained()"),E2r=o("class method or the "),abe=a("code"),y2r=o("from_config()"),w2r=o(`class
method.`),A2r=l(),hA=a("p"),L2r=o("This class cannot be instantiated directly using "),nbe=a("code"),B2r=o("__init__()"),x2r=o(" (throws an error)."),k2r=l(),wt=a("div"),f(pA.$$.fragment),R2r=l(),sbe=a("p"),S2r=o("Instantiates one of the base model classes of the library from a configuration."),P2r=l(),ef=a("p"),$2r=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),I2r=o("not"),j2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ibe=a("code"),D2r=o("from_pretrained()"),N2r=o("to load the model weights."),q2r=l(),dbe=a("p"),O2r=o("Examples:"),G2r=l(),f(_A.$$.fragment),X2r=l(),Ao=a("div"),f(uA.$$.fragment),V2r=l(),cbe=a("p"),z2r=o("Instantiate one of the base model classes of the library from a pretrained model."),W2r=l(),Bn=a("p"),Q2r=o("The model class to instantiate is selected based on the "),fbe=a("code"),H2r=o("model_type"),U2r=o(` property of the config object (either
passed as an argument or loaded from `),mbe=a("code"),J2r=o("pretrained_model_name_or_path"),Y2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=a("code"),K2r=o("pretrained_model_name_or_path"),Z2r=o(":"),evr=l(),z=a("ul"),VF=a("li"),hbe=a("strong"),ovr=o("albert"),rvr=o(" \u2014 "),BX=a("a"),tvr=o("FlaxAlbertModel"),avr=o(" (ALBERT model)"),nvr=l(),zF=a("li"),pbe=a("strong"),svr=o("bart"),lvr=o(" \u2014 "),xX=a("a"),ivr=o("FlaxBartModel"),dvr=o(" (BART model)"),cvr=l(),WF=a("li"),_be=a("strong"),fvr=o("beit"),mvr=o(" \u2014 "),kX=a("a"),gvr=o("FlaxBeitModel"),hvr=o(" (BEiT model)"),pvr=l(),QF=a("li"),ube=a("strong"),_vr=o("bert"),uvr=o(" \u2014 "),RX=a("a"),bvr=o("FlaxBertModel"),vvr=o(" (BERT model)"),Tvr=l(),HF=a("li"),bbe=a("strong"),Fvr=o("big_bird"),Cvr=o(" \u2014 "),SX=a("a"),Mvr=o("FlaxBigBirdModel"),Evr=o(" (BigBird model)"),yvr=l(),UF=a("li"),vbe=a("strong"),wvr=o("blenderbot"),Avr=o(" \u2014 "),PX=a("a"),Lvr=o("FlaxBlenderbotModel"),Bvr=o(" (Blenderbot model)"),xvr=l(),JF=a("li"),Tbe=a("strong"),kvr=o("blenderbot-small"),Rvr=o(" \u2014 "),$X=a("a"),Svr=o("FlaxBlenderbotSmallModel"),Pvr=o(" (BlenderbotSmall model)"),$vr=l(),YF=a("li"),Fbe=a("strong"),Ivr=o("clip"),jvr=o(" \u2014 "),IX=a("a"),Dvr=o("FlaxCLIPModel"),Nvr=o(" (CLIP model)"),qvr=l(),KF=a("li"),Cbe=a("strong"),Ovr=o("distilbert"),Gvr=o(" \u2014 "),jX=a("a"),Xvr=o("FlaxDistilBertModel"),Vvr=o(" (DistilBERT model)"),zvr=l(),ZF=a("li"),Mbe=a("strong"),Wvr=o("electra"),Qvr=o(" \u2014 "),DX=a("a"),Hvr=o("FlaxElectraModel"),Uvr=o(" (ELECTRA model)"),Jvr=l(),e9=a("li"),Ebe=a("strong"),Yvr=o("gpt2"),Kvr=o(" \u2014 "),NX=a("a"),Zvr=o("FlaxGPT2Model"),e6r=o(" (OpenAI GPT-2 model)"),o6r=l(),o9=a("li"),ybe=a("strong"),r6r=o("gpt_neo"),t6r=o(" \u2014 "),qX=a("a"),a6r=o("FlaxGPTNeoModel"),n6r=o(" (GPT Neo model)"),s6r=l(),r9=a("li"),wbe=a("strong"),l6r=o("gptj"),i6r=o(" \u2014 "),OX=a("a"),d6r=o("FlaxGPTJModel"),c6r=o(" (GPT-J model)"),f6r=l(),t9=a("li"),Abe=a("strong"),m6r=o("marian"),g6r=o(" \u2014 "),GX=a("a"),h6r=o("FlaxMarianModel"),p6r=o(" (Marian model)"),_6r=l(),a9=a("li"),Lbe=a("strong"),u6r=o("mbart"),b6r=o(" \u2014 "),XX=a("a"),v6r=o("FlaxMBartModel"),T6r=o(" (mBART model)"),F6r=l(),n9=a("li"),Bbe=a("strong"),C6r=o("mt5"),M6r=o(" \u2014 "),VX=a("a"),E6r=o("FlaxMT5Model"),y6r=o(" (mT5 model)"),w6r=l(),s9=a("li"),xbe=a("strong"),A6r=o("pegasus"),L6r=o(" \u2014 "),zX=a("a"),B6r=o("FlaxPegasusModel"),x6r=o(" (Pegasus model)"),k6r=l(),l9=a("li"),kbe=a("strong"),R6r=o("roberta"),S6r=o(" \u2014 "),WX=a("a"),P6r=o("FlaxRobertaModel"),$6r=o(" (RoBERTa model)"),I6r=l(),i9=a("li"),Rbe=a("strong"),j6r=o("roformer"),D6r=o(" \u2014 "),QX=a("a"),N6r=o("FlaxRoFormerModel"),q6r=o(" (RoFormer model)"),O6r=l(),d9=a("li"),Sbe=a("strong"),G6r=o("t5"),X6r=o(" \u2014 "),HX=a("a"),V6r=o("FlaxT5Model"),z6r=o(" (T5 model)"),W6r=l(),c9=a("li"),Pbe=a("strong"),Q6r=o("vision-text-dual-encoder"),H6r=o(" \u2014 "),UX=a("a"),U6r=o("FlaxVisionTextDualEncoderModel"),J6r=o(" (VisionTextDualEncoder model)"),Y6r=l(),f9=a("li"),$be=a("strong"),K6r=o("vit"),Z6r=o(" \u2014 "),JX=a("a"),eTr=o("FlaxViTModel"),oTr=o(" (ViT model)"),rTr=l(),m9=a("li"),Ibe=a("strong"),tTr=o("wav2vec2"),aTr=o(" \u2014 "),YX=a("a"),nTr=o("FlaxWav2Vec2Model"),sTr=o(" (Wav2Vec2 model)"),lTr=l(),g9=a("li"),jbe=a("strong"),iTr=o("xglm"),dTr=o(" \u2014 "),KX=a("a"),cTr=o("FlaxXGLMModel"),fTr=o(" (XGLM model)"),mTr=l(),h9=a("li"),Dbe=a("strong"),gTr=o("xlm-roberta"),hTr=o(" \u2014 "),ZX=a("a"),pTr=o("FlaxXLMRobertaModel"),_Tr=o(" (XLM-RoBERTa model)"),uTr=l(),Nbe=a("p"),bTr=o("Examples:"),vTr=l(),f(bA.$$.fragment),Nke=l(),of=a("h2"),p9=a("a"),qbe=a("span"),f(vA.$$.fragment),TTr=l(),Obe=a("span"),FTr=o("FlaxAutoModelForCausalLM"),qke=l(),Sr=a("div"),f(TA.$$.fragment),CTr=l(),rf=a("p"),MTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Gbe=a("code"),ETr=o("from_pretrained()"),yTr=o("class method or the "),Xbe=a("code"),wTr=o("from_config()"),ATr=o(`class
method.`),LTr=l(),FA=a("p"),BTr=o("This class cannot be instantiated directly using "),Vbe=a("code"),xTr=o("__init__()"),kTr=o(" (throws an error)."),RTr=l(),At=a("div"),f(CA.$$.fragment),STr=l(),zbe=a("p"),PTr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Tr=l(),tf=a("p"),ITr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),jTr=o("not"),DTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qbe=a("code"),NTr=o("from_pretrained()"),qTr=o("to load the model weights."),OTr=l(),Hbe=a("p"),GTr=o("Examples:"),XTr=l(),f(MA.$$.fragment),VTr=l(),Lo=a("div"),f(EA.$$.fragment),zTr=l(),Ube=a("p"),WTr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QTr=l(),xn=a("p"),HTr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),UTr=o("model_type"),JTr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),YTr=o("pretrained_model_name_or_path"),KTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),ZTr=o("pretrained_model_name_or_path"),e8r=o(":"),o8r=l(),ca=a("ul"),_9=a("li"),Zbe=a("strong"),r8r=o("bart"),t8r=o(" \u2014 "),eV=a("a"),a8r=o("FlaxBartForCausalLM"),n8r=o(" (BART model)"),s8r=l(),u9=a("li"),e5e=a("strong"),l8r=o("gpt2"),i8r=o(" \u2014 "),oV=a("a"),d8r=o("FlaxGPT2LMHeadModel"),c8r=o(" (OpenAI GPT-2 model)"),f8r=l(),b9=a("li"),o5e=a("strong"),m8r=o("gpt_neo"),g8r=o(" \u2014 "),rV=a("a"),h8r=o("FlaxGPTNeoForCausalLM"),p8r=o(" (GPT Neo model)"),_8r=l(),v9=a("li"),r5e=a("strong"),u8r=o("gptj"),b8r=o(" \u2014 "),tV=a("a"),v8r=o("FlaxGPTJForCausalLM"),T8r=o(" (GPT-J model)"),F8r=l(),T9=a("li"),t5e=a("strong"),C8r=o("xglm"),M8r=o(" \u2014 "),aV=a("a"),E8r=o("FlaxXGLMForCausalLM"),y8r=o(" (XGLM model)"),w8r=l(),a5e=a("p"),A8r=o("Examples:"),L8r=l(),f(yA.$$.fragment),Oke=l(),af=a("h2"),F9=a("a"),n5e=a("span"),f(wA.$$.fragment),B8r=l(),s5e=a("span"),x8r=o("FlaxAutoModelForPreTraining"),Gke=l(),Pr=a("div"),f(AA.$$.fragment),k8r=l(),nf=a("p"),R8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),l5e=a("code"),S8r=o("from_pretrained()"),P8r=o("class method or the "),i5e=a("code"),$8r=o("from_config()"),I8r=o(`class
method.`),j8r=l(),LA=a("p"),D8r=o("This class cannot be instantiated directly using "),d5e=a("code"),N8r=o("__init__()"),q8r=o(" (throws an error)."),O8r=l(),Lt=a("div"),f(BA.$$.fragment),G8r=l(),c5e=a("p"),X8r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),V8r=l(),sf=a("p"),z8r=o(`Note:
Loading a model from its configuration file does `),f5e=a("strong"),W8r=o("not"),Q8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),m5e=a("code"),H8r=o("from_pretrained()"),U8r=o("to load the model weights."),J8r=l(),g5e=a("p"),Y8r=o("Examples:"),K8r=l(),f(xA.$$.fragment),Z8r=l(),Bo=a("div"),f(kA.$$.fragment),eFr=l(),h5e=a("p"),oFr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rFr=l(),kn=a("p"),tFr=o("The model class to instantiate is selected based on the "),p5e=a("code"),aFr=o("model_type"),nFr=o(` property of the config object (either
passed as an argument or loaded from `),_5e=a("code"),sFr=o("pretrained_model_name_or_path"),lFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=a("code"),iFr=o("pretrained_model_name_or_path"),dFr=o(":"),cFr=l(),ce=a("ul"),C9=a("li"),b5e=a("strong"),fFr=o("albert"),mFr=o(" \u2014 "),nV=a("a"),gFr=o("FlaxAlbertForPreTraining"),hFr=o(" (ALBERT model)"),pFr=l(),M9=a("li"),v5e=a("strong"),_Fr=o("bart"),uFr=o(" \u2014 "),sV=a("a"),bFr=o("FlaxBartForConditionalGeneration"),vFr=o(" (BART model)"),TFr=l(),E9=a("li"),T5e=a("strong"),FFr=o("bert"),CFr=o(" \u2014 "),lV=a("a"),MFr=o("FlaxBertForPreTraining"),EFr=o(" (BERT model)"),yFr=l(),y9=a("li"),F5e=a("strong"),wFr=o("big_bird"),AFr=o(" \u2014 "),iV=a("a"),LFr=o("FlaxBigBirdForPreTraining"),BFr=o(" (BigBird model)"),xFr=l(),w9=a("li"),C5e=a("strong"),kFr=o("electra"),RFr=o(" \u2014 "),dV=a("a"),SFr=o("FlaxElectraForPreTraining"),PFr=o(" (ELECTRA model)"),$Fr=l(),A9=a("li"),M5e=a("strong"),IFr=o("mbart"),jFr=o(" \u2014 "),cV=a("a"),DFr=o("FlaxMBartForConditionalGeneration"),NFr=o(" (mBART model)"),qFr=l(),L9=a("li"),E5e=a("strong"),OFr=o("mt5"),GFr=o(" \u2014 "),fV=a("a"),XFr=o("FlaxMT5ForConditionalGeneration"),VFr=o(" (mT5 model)"),zFr=l(),B9=a("li"),y5e=a("strong"),WFr=o("roberta"),QFr=o(" \u2014 "),mV=a("a"),HFr=o("FlaxRobertaForMaskedLM"),UFr=o(" (RoBERTa model)"),JFr=l(),x9=a("li"),w5e=a("strong"),YFr=o("roformer"),KFr=o(" \u2014 "),gV=a("a"),ZFr=o("FlaxRoFormerForMaskedLM"),e9r=o(" (RoFormer model)"),o9r=l(),k9=a("li"),A5e=a("strong"),r9r=o("t5"),t9r=o(" \u2014 "),hV=a("a"),a9r=o("FlaxT5ForConditionalGeneration"),n9r=o(" (T5 model)"),s9r=l(),R9=a("li"),L5e=a("strong"),l9r=o("wav2vec2"),i9r=o(" \u2014 "),pV=a("a"),d9r=o("FlaxWav2Vec2ForPreTraining"),c9r=o(" (Wav2Vec2 model)"),f9r=l(),S9=a("li"),B5e=a("strong"),m9r=o("xlm-roberta"),g9r=o(" \u2014 "),_V=a("a"),h9r=o("FlaxXLMRobertaForMaskedLM"),p9r=o(" (XLM-RoBERTa model)"),_9r=l(),x5e=a("p"),u9r=o("Examples:"),b9r=l(),f(RA.$$.fragment),Xke=l(),lf=a("h2"),P9=a("a"),k5e=a("span"),f(SA.$$.fragment),v9r=l(),R5e=a("span"),T9r=o("FlaxAutoModelForMaskedLM"),Vke=l(),$r=a("div"),f(PA.$$.fragment),F9r=l(),df=a("p"),C9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),S5e=a("code"),M9r=o("from_pretrained()"),E9r=o("class method or the "),P5e=a("code"),y9r=o("from_config()"),w9r=o(`class
method.`),A9r=l(),$A=a("p"),L9r=o("This class cannot be instantiated directly using "),$5e=a("code"),B9r=o("__init__()"),x9r=o(" (throws an error)."),k9r=l(),Bt=a("div"),f(IA.$$.fragment),R9r=l(),I5e=a("p"),S9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P9r=l(),cf=a("p"),$9r=o(`Note:
Loading a model from its configuration file does `),j5e=a("strong"),I9r=o("not"),j9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),D5e=a("code"),D9r=o("from_pretrained()"),N9r=o("to load the model weights."),q9r=l(),N5e=a("p"),O9r=o("Examples:"),G9r=l(),f(jA.$$.fragment),X9r=l(),xo=a("div"),f(DA.$$.fragment),V9r=l(),q5e=a("p"),z9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),W9r=l(),Rn=a("p"),Q9r=o("The model class to instantiate is selected based on the "),O5e=a("code"),H9r=o("model_type"),U9r=o(` property of the config object (either
passed as an argument or loaded from `),G5e=a("code"),J9r=o("pretrained_model_name_or_path"),Y9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=a("code"),K9r=o("pretrained_model_name_or_path"),Z9r=o(":"),eCr=l(),ue=a("ul"),$9=a("li"),V5e=a("strong"),oCr=o("albert"),rCr=o(" \u2014 "),uV=a("a"),tCr=o("FlaxAlbertForMaskedLM"),aCr=o(" (ALBERT model)"),nCr=l(),I9=a("li"),z5e=a("strong"),sCr=o("bart"),lCr=o(" \u2014 "),bV=a("a"),iCr=o("FlaxBartForConditionalGeneration"),dCr=o(" (BART model)"),cCr=l(),j9=a("li"),W5e=a("strong"),fCr=o("bert"),mCr=o(" \u2014 "),vV=a("a"),gCr=o("FlaxBertForMaskedLM"),hCr=o(" (BERT model)"),pCr=l(),D9=a("li"),Q5e=a("strong"),_Cr=o("big_bird"),uCr=o(" \u2014 "),TV=a("a"),bCr=o("FlaxBigBirdForMaskedLM"),vCr=o(" (BigBird model)"),TCr=l(),N9=a("li"),H5e=a("strong"),FCr=o("distilbert"),CCr=o(" \u2014 "),FV=a("a"),MCr=o("FlaxDistilBertForMaskedLM"),ECr=o(" (DistilBERT model)"),yCr=l(),q9=a("li"),U5e=a("strong"),wCr=o("electra"),ACr=o(" \u2014 "),CV=a("a"),LCr=o("FlaxElectraForMaskedLM"),BCr=o(" (ELECTRA model)"),xCr=l(),O9=a("li"),J5e=a("strong"),kCr=o("mbart"),RCr=o(" \u2014 "),MV=a("a"),SCr=o("FlaxMBartForConditionalGeneration"),PCr=o(" (mBART model)"),$Cr=l(),G9=a("li"),Y5e=a("strong"),ICr=o("roberta"),jCr=o(" \u2014 "),EV=a("a"),DCr=o("FlaxRobertaForMaskedLM"),NCr=o(" (RoBERTa model)"),qCr=l(),X9=a("li"),K5e=a("strong"),OCr=o("roformer"),GCr=o(" \u2014 "),yV=a("a"),XCr=o("FlaxRoFormerForMaskedLM"),VCr=o(" (RoFormer model)"),zCr=l(),V9=a("li"),Z5e=a("strong"),WCr=o("xlm-roberta"),QCr=o(" \u2014 "),wV=a("a"),HCr=o("FlaxXLMRobertaForMaskedLM"),UCr=o(" (XLM-RoBERTa model)"),JCr=l(),e2e=a("p"),YCr=o("Examples:"),KCr=l(),f(NA.$$.fragment),zke=l(),ff=a("h2"),z9=a("a"),o2e=a("span"),f(qA.$$.fragment),ZCr=l(),r2e=a("span"),eMr=o("FlaxAutoModelForSeq2SeqLM"),Wke=l(),Ir=a("div"),f(OA.$$.fragment),oMr=l(),mf=a("p"),rMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),t2e=a("code"),tMr=o("from_pretrained()"),aMr=o("class method or the "),a2e=a("code"),nMr=o("from_config()"),sMr=o(`class
method.`),lMr=l(),GA=a("p"),iMr=o("This class cannot be instantiated directly using "),n2e=a("code"),dMr=o("__init__()"),cMr=o(" (throws an error)."),fMr=l(),xt=a("div"),f(XA.$$.fragment),mMr=l(),s2e=a("p"),gMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hMr=l(),gf=a("p"),pMr=o(`Note:
Loading a model from its configuration file does `),l2e=a("strong"),_Mr=o("not"),uMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),i2e=a("code"),bMr=o("from_pretrained()"),vMr=o("to load the model weights."),TMr=l(),d2e=a("p"),FMr=o("Examples:"),CMr=l(),f(VA.$$.fragment),MMr=l(),ko=a("div"),f(zA.$$.fragment),EMr=l(),c2e=a("p"),yMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wMr=l(),Sn=a("p"),AMr=o("The model class to instantiate is selected based on the "),f2e=a("code"),LMr=o("model_type"),BMr=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),xMr=o("pretrained_model_name_or_path"),kMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),RMr=o("pretrained_model_name_or_path"),SMr=o(":"),PMr=l(),Me=a("ul"),W9=a("li"),h2e=a("strong"),$Mr=o("bart"),IMr=o(" \u2014 "),AV=a("a"),jMr=o("FlaxBartForConditionalGeneration"),DMr=o(" (BART model)"),NMr=l(),Q9=a("li"),p2e=a("strong"),qMr=o("blenderbot"),OMr=o(" \u2014 "),LV=a("a"),GMr=o("FlaxBlenderbotForConditionalGeneration"),XMr=o(" (Blenderbot model)"),VMr=l(),H9=a("li"),_2e=a("strong"),zMr=o("blenderbot-small"),WMr=o(" \u2014 "),BV=a("a"),QMr=o("FlaxBlenderbotSmallForConditionalGeneration"),HMr=o(" (BlenderbotSmall model)"),UMr=l(),U9=a("li"),u2e=a("strong"),JMr=o("encoder-decoder"),YMr=o(" \u2014 "),xV=a("a"),KMr=o("FlaxEncoderDecoderModel"),ZMr=o(" (Encoder decoder model)"),e4r=l(),J9=a("li"),b2e=a("strong"),o4r=o("marian"),r4r=o(" \u2014 "),kV=a("a"),t4r=o("FlaxMarianMTModel"),a4r=o(" (Marian model)"),n4r=l(),Y9=a("li"),v2e=a("strong"),s4r=o("mbart"),l4r=o(" \u2014 "),RV=a("a"),i4r=o("FlaxMBartForConditionalGeneration"),d4r=o(" (mBART model)"),c4r=l(),K9=a("li"),T2e=a("strong"),f4r=o("mt5"),m4r=o(" \u2014 "),SV=a("a"),g4r=o("FlaxMT5ForConditionalGeneration"),h4r=o(" (mT5 model)"),p4r=l(),Z9=a("li"),F2e=a("strong"),_4r=o("pegasus"),u4r=o(" \u2014 "),PV=a("a"),b4r=o("FlaxPegasusForConditionalGeneration"),v4r=o(" (Pegasus model)"),T4r=l(),eC=a("li"),C2e=a("strong"),F4r=o("t5"),C4r=o(" \u2014 "),$V=a("a"),M4r=o("FlaxT5ForConditionalGeneration"),E4r=o(" (T5 model)"),y4r=l(),M2e=a("p"),w4r=o("Examples:"),A4r=l(),f(WA.$$.fragment),Qke=l(),hf=a("h2"),oC=a("a"),E2e=a("span"),f(QA.$$.fragment),L4r=l(),y2e=a("span"),B4r=o("FlaxAutoModelForSequenceClassification"),Hke=l(),jr=a("div"),f(HA.$$.fragment),x4r=l(),pf=a("p"),k4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),w2e=a("code"),R4r=o("from_pretrained()"),S4r=o("class method or the "),A2e=a("code"),P4r=o("from_config()"),$4r=o(`class
method.`),I4r=l(),UA=a("p"),j4r=o("This class cannot be instantiated directly using "),L2e=a("code"),D4r=o("__init__()"),N4r=o(" (throws an error)."),q4r=l(),kt=a("div"),f(JA.$$.fragment),O4r=l(),B2e=a("p"),G4r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X4r=l(),_f=a("p"),V4r=o(`Note:
Loading a model from its configuration file does `),x2e=a("strong"),z4r=o("not"),W4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k2e=a("code"),Q4r=o("from_pretrained()"),H4r=o("to load the model weights."),U4r=l(),R2e=a("p"),J4r=o("Examples:"),Y4r=l(),f(YA.$$.fragment),K4r=l(),Ro=a("div"),f(KA.$$.fragment),Z4r=l(),S2e=a("p"),eEr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oEr=l(),Pn=a("p"),rEr=o("The model class to instantiate is selected based on the "),P2e=a("code"),tEr=o("model_type"),aEr=o(` property of the config object (either
passed as an argument or loaded from `),$2e=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),lEr=o("pretrained_model_name_or_path"),iEr=o(":"),dEr=l(),be=a("ul"),rC=a("li"),j2e=a("strong"),cEr=o("albert"),fEr=o(" \u2014 "),IV=a("a"),mEr=o("FlaxAlbertForSequenceClassification"),gEr=o(" (ALBERT model)"),hEr=l(),tC=a("li"),D2e=a("strong"),pEr=o("bart"),_Er=o(" \u2014 "),jV=a("a"),uEr=o("FlaxBartForSequenceClassification"),bEr=o(" (BART model)"),vEr=l(),aC=a("li"),N2e=a("strong"),TEr=o("bert"),FEr=o(" \u2014 "),DV=a("a"),CEr=o("FlaxBertForSequenceClassification"),MEr=o(" (BERT model)"),EEr=l(),nC=a("li"),q2e=a("strong"),yEr=o("big_bird"),wEr=o(" \u2014 "),NV=a("a"),AEr=o("FlaxBigBirdForSequenceClassification"),LEr=o(" (BigBird model)"),BEr=l(),sC=a("li"),O2e=a("strong"),xEr=o("distilbert"),kEr=o(" \u2014 "),qV=a("a"),REr=o("FlaxDistilBertForSequenceClassification"),SEr=o(" (DistilBERT model)"),PEr=l(),lC=a("li"),G2e=a("strong"),$Er=o("electra"),IEr=o(" \u2014 "),OV=a("a"),jEr=o("FlaxElectraForSequenceClassification"),DEr=o(" (ELECTRA model)"),NEr=l(),iC=a("li"),X2e=a("strong"),qEr=o("mbart"),OEr=o(" \u2014 "),GV=a("a"),GEr=o("FlaxMBartForSequenceClassification"),XEr=o(" (mBART model)"),VEr=l(),dC=a("li"),V2e=a("strong"),zEr=o("roberta"),WEr=o(" \u2014 "),XV=a("a"),QEr=o("FlaxRobertaForSequenceClassification"),HEr=o(" (RoBERTa model)"),UEr=l(),cC=a("li"),z2e=a("strong"),JEr=o("roformer"),YEr=o(" \u2014 "),VV=a("a"),KEr=o("FlaxRoFormerForSequenceClassification"),ZEr=o(" (RoFormer model)"),e3r=l(),fC=a("li"),W2e=a("strong"),o3r=o("xlm-roberta"),r3r=o(" \u2014 "),zV=a("a"),t3r=o("FlaxXLMRobertaForSequenceClassification"),a3r=o(" (XLM-RoBERTa model)"),n3r=l(),Q2e=a("p"),s3r=o("Examples:"),l3r=l(),f(ZA.$$.fragment),Uke=l(),uf=a("h2"),mC=a("a"),H2e=a("span"),f(e0.$$.fragment),i3r=l(),U2e=a("span"),d3r=o("FlaxAutoModelForQuestionAnswering"),Jke=l(),Dr=a("div"),f(o0.$$.fragment),c3r=l(),bf=a("p"),f3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),J2e=a("code"),m3r=o("from_pretrained()"),g3r=o("class method or the "),Y2e=a("code"),h3r=o("from_config()"),p3r=o(`class
method.`),_3r=l(),r0=a("p"),u3r=o("This class cannot be instantiated directly using "),K2e=a("code"),b3r=o("__init__()"),v3r=o(" (throws an error)."),T3r=l(),Rt=a("div"),f(t0.$$.fragment),F3r=l(),Z2e=a("p"),C3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M3r=l(),vf=a("p"),E3r=o(`Note:
Loading a model from its configuration file does `),eve=a("strong"),y3r=o("not"),w3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ove=a("code"),A3r=o("from_pretrained()"),L3r=o("to load the model weights."),B3r=l(),rve=a("p"),x3r=o("Examples:"),k3r=l(),f(a0.$$.fragment),R3r=l(),So=a("div"),f(n0.$$.fragment),S3r=l(),tve=a("p"),P3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$3r=l(),$n=a("p"),I3r=o("The model class to instantiate is selected based on the "),ave=a("code"),j3r=o("model_type"),D3r=o(` property of the config object (either
passed as an argument or loaded from `),nve=a("code"),N3r=o("pretrained_model_name_or_path"),q3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=a("code"),O3r=o("pretrained_model_name_or_path"),G3r=o(":"),X3r=l(),ve=a("ul"),gC=a("li"),lve=a("strong"),V3r=o("albert"),z3r=o(" \u2014 "),WV=a("a"),W3r=o("FlaxAlbertForQuestionAnswering"),Q3r=o(" (ALBERT model)"),H3r=l(),hC=a("li"),ive=a("strong"),U3r=o("bart"),J3r=o(" \u2014 "),QV=a("a"),Y3r=o("FlaxBartForQuestionAnswering"),K3r=o(" (BART model)"),Z3r=l(),pC=a("li"),dve=a("strong"),eyr=o("bert"),oyr=o(" \u2014 "),HV=a("a"),ryr=o("FlaxBertForQuestionAnswering"),tyr=o(" (BERT model)"),ayr=l(),_C=a("li"),cve=a("strong"),nyr=o("big_bird"),syr=o(" \u2014 "),UV=a("a"),lyr=o("FlaxBigBirdForQuestionAnswering"),iyr=o(" (BigBird model)"),dyr=l(),uC=a("li"),fve=a("strong"),cyr=o("distilbert"),fyr=o(" \u2014 "),JV=a("a"),myr=o("FlaxDistilBertForQuestionAnswering"),gyr=o(" (DistilBERT model)"),hyr=l(),bC=a("li"),mve=a("strong"),pyr=o("electra"),_yr=o(" \u2014 "),YV=a("a"),uyr=o("FlaxElectraForQuestionAnswering"),byr=o(" (ELECTRA model)"),vyr=l(),vC=a("li"),gve=a("strong"),Tyr=o("mbart"),Fyr=o(" \u2014 "),KV=a("a"),Cyr=o("FlaxMBartForQuestionAnswering"),Myr=o(" (mBART model)"),Eyr=l(),TC=a("li"),hve=a("strong"),yyr=o("roberta"),wyr=o(" \u2014 "),ZV=a("a"),Ayr=o("FlaxRobertaForQuestionAnswering"),Lyr=o(" (RoBERTa model)"),Byr=l(),FC=a("li"),pve=a("strong"),xyr=o("roformer"),kyr=o(" \u2014 "),ez=a("a"),Ryr=o("FlaxRoFormerForQuestionAnswering"),Syr=o(" (RoFormer model)"),Pyr=l(),CC=a("li"),_ve=a("strong"),$yr=o("xlm-roberta"),Iyr=o(" \u2014 "),oz=a("a"),jyr=o("FlaxXLMRobertaForQuestionAnswering"),Dyr=o(" (XLM-RoBERTa model)"),Nyr=l(),uve=a("p"),qyr=o("Examples:"),Oyr=l(),f(s0.$$.fragment),Yke=l(),Tf=a("h2"),MC=a("a"),bve=a("span"),f(l0.$$.fragment),Gyr=l(),vve=a("span"),Xyr=o("FlaxAutoModelForTokenClassification"),Kke=l(),Nr=a("div"),f(i0.$$.fragment),Vyr=l(),Ff=a("p"),zyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tve=a("code"),Wyr=o("from_pretrained()"),Qyr=o("class method or the "),Fve=a("code"),Hyr=o("from_config()"),Uyr=o(`class
method.`),Jyr=l(),d0=a("p"),Yyr=o("This class cannot be instantiated directly using "),Cve=a("code"),Kyr=o("__init__()"),Zyr=o(" (throws an error)."),ewr=l(),St=a("div"),f(c0.$$.fragment),owr=l(),Mve=a("p"),rwr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),twr=l(),Cf=a("p"),awr=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),nwr=o("not"),swr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yve=a("code"),lwr=o("from_pretrained()"),iwr=o("to load the model weights."),dwr=l(),wve=a("p"),cwr=o("Examples:"),fwr=l(),f(f0.$$.fragment),mwr=l(),Po=a("div"),f(m0.$$.fragment),gwr=l(),Ave=a("p"),hwr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pwr=l(),In=a("p"),_wr=o("The model class to instantiate is selected based on the "),Lve=a("code"),uwr=o("model_type"),bwr=o(` property of the config object (either
passed as an argument or loaded from `),Bve=a("code"),vwr=o("pretrained_model_name_or_path"),Twr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),Fwr=o("pretrained_model_name_or_path"),Cwr=o(":"),Mwr=l(),Re=a("ul"),EC=a("li"),kve=a("strong"),Ewr=o("albert"),ywr=o(" \u2014 "),rz=a("a"),wwr=o("FlaxAlbertForTokenClassification"),Awr=o(" (ALBERT model)"),Lwr=l(),yC=a("li"),Rve=a("strong"),Bwr=o("bert"),xwr=o(" \u2014 "),tz=a("a"),kwr=o("FlaxBertForTokenClassification"),Rwr=o(" (BERT model)"),Swr=l(),wC=a("li"),Sve=a("strong"),Pwr=o("big_bird"),$wr=o(" \u2014 "),az=a("a"),Iwr=o("FlaxBigBirdForTokenClassification"),jwr=o(" (BigBird model)"),Dwr=l(),AC=a("li"),Pve=a("strong"),Nwr=o("distilbert"),qwr=o(" \u2014 "),nz=a("a"),Owr=o("FlaxDistilBertForTokenClassification"),Gwr=o(" (DistilBERT model)"),Xwr=l(),LC=a("li"),$ve=a("strong"),Vwr=o("electra"),zwr=o(" \u2014 "),sz=a("a"),Wwr=o("FlaxElectraForTokenClassification"),Qwr=o(" (ELECTRA model)"),Hwr=l(),BC=a("li"),Ive=a("strong"),Uwr=o("roberta"),Jwr=o(" \u2014 "),lz=a("a"),Ywr=o("FlaxRobertaForTokenClassification"),Kwr=o(" (RoBERTa model)"),Zwr=l(),xC=a("li"),jve=a("strong"),eAr=o("roformer"),oAr=o(" \u2014 "),iz=a("a"),rAr=o("FlaxRoFormerForTokenClassification"),tAr=o(" (RoFormer model)"),aAr=l(),kC=a("li"),Dve=a("strong"),nAr=o("xlm-roberta"),sAr=o(" \u2014 "),dz=a("a"),lAr=o("FlaxXLMRobertaForTokenClassification"),iAr=o(" (XLM-RoBERTa model)"),dAr=l(),Nve=a("p"),cAr=o("Examples:"),fAr=l(),f(g0.$$.fragment),Zke=l(),Mf=a("h2"),RC=a("a"),qve=a("span"),f(h0.$$.fragment),mAr=l(),Ove=a("span"),gAr=o("FlaxAutoModelForMultipleChoice"),eRe=l(),qr=a("div"),f(p0.$$.fragment),hAr=l(),Ef=a("p"),pAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Gve=a("code"),_Ar=o("from_pretrained()"),uAr=o("class method or the "),Xve=a("code"),bAr=o("from_config()"),vAr=o(`class
method.`),TAr=l(),_0=a("p"),FAr=o("This class cannot be instantiated directly using "),Vve=a("code"),CAr=o("__init__()"),MAr=o(" (throws an error)."),EAr=l(),Pt=a("div"),f(u0.$$.fragment),yAr=l(),zve=a("p"),wAr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),AAr=l(),yf=a("p"),LAr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),BAr=o("not"),xAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qve=a("code"),kAr=o("from_pretrained()"),RAr=o("to load the model weights."),SAr=l(),Hve=a("p"),PAr=o("Examples:"),$Ar=l(),f(b0.$$.fragment),IAr=l(),$o=a("div"),f(v0.$$.fragment),jAr=l(),Uve=a("p"),DAr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NAr=l(),jn=a("p"),qAr=o("The model class to instantiate is selected based on the "),Jve=a("code"),OAr=o("model_type"),GAr=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),XAr=o("pretrained_model_name_or_path"),VAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),zAr=o("pretrained_model_name_or_path"),WAr=o(":"),QAr=l(),Se=a("ul"),SC=a("li"),Zve=a("strong"),HAr=o("albert"),UAr=o(" \u2014 "),cz=a("a"),JAr=o("FlaxAlbertForMultipleChoice"),YAr=o(" (ALBERT model)"),KAr=l(),PC=a("li"),e6e=a("strong"),ZAr=o("bert"),e0r=o(" \u2014 "),fz=a("a"),o0r=o("FlaxBertForMultipleChoice"),r0r=o(" (BERT model)"),t0r=l(),$C=a("li"),o6e=a("strong"),a0r=o("big_bird"),n0r=o(" \u2014 "),mz=a("a"),s0r=o("FlaxBigBirdForMultipleChoice"),l0r=o(" (BigBird model)"),i0r=l(),IC=a("li"),r6e=a("strong"),d0r=o("distilbert"),c0r=o(" \u2014 "),gz=a("a"),f0r=o("FlaxDistilBertForMultipleChoice"),m0r=o(" (DistilBERT model)"),g0r=l(),jC=a("li"),t6e=a("strong"),h0r=o("electra"),p0r=o(" \u2014 "),hz=a("a"),_0r=o("FlaxElectraForMultipleChoice"),u0r=o(" (ELECTRA model)"),b0r=l(),DC=a("li"),a6e=a("strong"),v0r=o("roberta"),T0r=o(" \u2014 "),pz=a("a"),F0r=o("FlaxRobertaForMultipleChoice"),C0r=o(" (RoBERTa model)"),M0r=l(),NC=a("li"),n6e=a("strong"),E0r=o("roformer"),y0r=o(" \u2014 "),_z=a("a"),w0r=o("FlaxRoFormerForMultipleChoice"),A0r=o(" (RoFormer model)"),L0r=l(),qC=a("li"),s6e=a("strong"),B0r=o("xlm-roberta"),x0r=o(" \u2014 "),uz=a("a"),k0r=o("FlaxXLMRobertaForMultipleChoice"),R0r=o(" (XLM-RoBERTa model)"),S0r=l(),l6e=a("p"),P0r=o("Examples:"),$0r=l(),f(T0.$$.fragment),oRe=l(),wf=a("h2"),OC=a("a"),i6e=a("span"),f(F0.$$.fragment),I0r=l(),d6e=a("span"),j0r=o("FlaxAutoModelForNextSentencePrediction"),rRe=l(),Or=a("div"),f(C0.$$.fragment),D0r=l(),Af=a("p"),N0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),c6e=a("code"),q0r=o("from_pretrained()"),O0r=o("class method or the "),f6e=a("code"),G0r=o("from_config()"),X0r=o(`class
method.`),V0r=l(),M0=a("p"),z0r=o("This class cannot be instantiated directly using "),m6e=a("code"),W0r=o("__init__()"),Q0r=o(" (throws an error)."),H0r=l(),$t=a("div"),f(E0.$$.fragment),U0r=l(),g6e=a("p"),J0r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Y0r=l(),Lf=a("p"),K0r=o(`Note:
Loading a model from its configuration file does `),h6e=a("strong"),Z0r=o("not"),eLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),p6e=a("code"),oLr=o("from_pretrained()"),rLr=o("to load the model weights."),tLr=l(),_6e=a("p"),aLr=o("Examples:"),nLr=l(),f(y0.$$.fragment),sLr=l(),Io=a("div"),f(w0.$$.fragment),lLr=l(),u6e=a("p"),iLr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dLr=l(),Dn=a("p"),cLr=o("The model class to instantiate is selected based on the "),b6e=a("code"),fLr=o("model_type"),mLr=o(` property of the config object (either
passed as an argument or loaded from `),v6e=a("code"),gLr=o("pretrained_model_name_or_path"),hLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=a("code"),pLr=o("pretrained_model_name_or_path"),_Lr=o(":"),uLr=l(),F6e=a("ul"),GC=a("li"),C6e=a("strong"),bLr=o("bert"),vLr=o(" \u2014 "),bz=a("a"),TLr=o("FlaxBertForNextSentencePrediction"),FLr=o(" (BERT model)"),CLr=l(),M6e=a("p"),MLr=o("Examples:"),ELr=l(),f(A0.$$.fragment),tRe=l(),Bf=a("h2"),XC=a("a"),E6e=a("span"),f(L0.$$.fragment),yLr=l(),y6e=a("span"),wLr=o("FlaxAutoModelForImageClassification"),aRe=l(),Gr=a("div"),f(B0.$$.fragment),ALr=l(),xf=a("p"),LLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),w6e=a("code"),BLr=o("from_pretrained()"),xLr=o("class method or the "),A6e=a("code"),kLr=o("from_config()"),RLr=o(`class
method.`),SLr=l(),x0=a("p"),PLr=o("This class cannot be instantiated directly using "),L6e=a("code"),$Lr=o("__init__()"),ILr=o(" (throws an error)."),jLr=l(),It=a("div"),f(k0.$$.fragment),DLr=l(),B6e=a("p"),NLr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qLr=l(),kf=a("p"),OLr=o(`Note:
Loading a model from its configuration file does `),x6e=a("strong"),GLr=o("not"),XLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k6e=a("code"),VLr=o("from_pretrained()"),zLr=o("to load the model weights."),WLr=l(),R6e=a("p"),QLr=o("Examples:"),HLr=l(),f(R0.$$.fragment),ULr=l(),jo=a("div"),f(S0.$$.fragment),JLr=l(),S6e=a("p"),YLr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KLr=l(),Nn=a("p"),ZLr=o("The model class to instantiate is selected based on the "),P6e=a("code"),e7r=o("model_type"),o7r=o(` property of the config object (either
passed as an argument or loaded from `),$6e=a("code"),r7r=o("pretrained_model_name_or_path"),t7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=a("code"),a7r=o("pretrained_model_name_or_path"),n7r=o(":"),s7r=l(),P0=a("ul"),VC=a("li"),j6e=a("strong"),l7r=o("beit"),i7r=o(" \u2014 "),vz=a("a"),d7r=o("FlaxBeitForImageClassification"),c7r=o(" (BEiT model)"),f7r=l(),zC=a("li"),D6e=a("strong"),m7r=o("vit"),g7r=o(" \u2014 "),Tz=a("a"),h7r=o("FlaxViTForImageClassification"),p7r=o(" (ViT model)"),_7r=l(),N6e=a("p"),u7r=o("Examples:"),b7r=l(),f($0.$$.fragment),nRe=l(),Rf=a("h2"),WC=a("a"),q6e=a("span"),f(I0.$$.fragment),v7r=l(),O6e=a("span"),T7r=o("FlaxAutoModelForVision2Seq"),sRe=l(),Xr=a("div"),f(j0.$$.fragment),F7r=l(),Sf=a("p"),C7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),G6e=a("code"),M7r=o("from_pretrained()"),E7r=o("class method or the "),X6e=a("code"),y7r=o("from_config()"),w7r=o(`class
method.`),A7r=l(),D0=a("p"),L7r=o("This class cannot be instantiated directly using "),V6e=a("code"),B7r=o("__init__()"),x7r=o(" (throws an error)."),k7r=l(),jt=a("div"),f(N0.$$.fragment),R7r=l(),z6e=a("p"),S7r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),P7r=l(),Pf=a("p"),$7r=o(`Note:
Loading a model from its configuration file does `),W6e=a("strong"),I7r=o("not"),j7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Q6e=a("code"),D7r=o("from_pretrained()"),N7r=o("to load the model weights."),q7r=l(),H6e=a("p"),O7r=o("Examples:"),G7r=l(),f(q0.$$.fragment),X7r=l(),Do=a("div"),f(O0.$$.fragment),V7r=l(),U6e=a("p"),z7r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),W7r=l(),qn=a("p"),Q7r=o("The model class to instantiate is selected based on the "),J6e=a("code"),H7r=o("model_type"),U7r=o(` property of the config object (either
passed as an argument or loaded from `),Y6e=a("code"),J7r=o("pretrained_model_name_or_path"),Y7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=a("code"),K7r=o("pretrained_model_name_or_path"),Z7r=o(":"),eBr=l(),Z6e=a("ul"),QC=a("li"),eTe=a("strong"),oBr=o("vision-encoder-decoder"),rBr=o(" \u2014 "),Fz=a("a"),tBr=o("FlaxVisionEncoderDecoderModel"),aBr=o(" (Vision Encoder decoder model)"),nBr=l(),oTe=a("p"),sBr=o("Examples:"),lBr=l(),f(G0.$$.fragment),this.h()},l(d){const u=DTt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Pe=i(d),de=n(d,"H1",{class:!0});var X0=s(de);he=n(X0,"A",{id:!0,class:!0,href:!0});var rTe=s(he);io=n(rTe,"SPAN",{});var tTe=s(io);m(fe.$$.fragment,tTe),tTe.forEach(t),rTe.forEach(t),Fe=i(X0),Vo=n(X0,"SPAN",{});var dBr=s(Vo);ji=r(dBr,"Auto Classes"),dBr.forEach(t),X0.forEach(t),If=i(d),fa=n(d,"P",{});var iRe=s(fa);Di=r(iRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(iRe,"CODE",{});var cBr=s(Ni);QM=r(cBr,"from_pretrained()"),cBr.forEach(t),jf=r(iRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),iRe.forEach(t),Le=i(d),co=n(d,"P",{});var HC=s(co);qi=r(HC,"Instantiating one of "),On=n(HC,"A",{href:!0});var fBr=s(On);HM=r(fBr,"AutoConfig"),fBr.forEach(t),Gn=r(HC,", "),Xn=n(HC,"A",{href:!0});var mBr=s(Xn);UM=r(mBr,"AutoModel"),mBr.forEach(t),Oi=r(HC,`, and
`),Vn=n(HC,"A",{href:!0});var gBr=s(Vn);JM=r(gBr,"AutoTokenizer"),gBr.forEach(t),Gi=r(HC," will directly create a class of the relevant architecture. For instance"),HC.forEach(t),Df=i(d),m(qa.$$.fragment,d),fo=i(d),pe=n(d,"P",{});var dRe=s(pe);qL=r(dRe,"will create a model that is an instance of "),Xi=n(dRe,"A",{href:!0});var hBr=s(Xi);OL=r(hBr,"BertModel"),hBr.forEach(t),GL=r(dRe,"."),dRe.forEach(t),zo=i(d),Oa=n(d,"P",{});var cRe=s(Oa);XL=r(cRe,"There is one class of "),Nf=n(cRe,"CODE",{});var pBr=s(Nf);VL=r(pBr,"AutoModel"),pBr.forEach(t),TPe=r(cRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cRe.forEach(t),sxe=i(d),Vi=n(d,"H2",{class:!0});var fRe=s(Vi);qf=n(fRe,"A",{id:!0,class:!0,href:!0});var _Br=s(qf);hQ=n(_Br,"SPAN",{});var uBr=s(hQ);m(YM.$$.fragment,uBr),uBr.forEach(t),_Br.forEach(t),FPe=i(fRe),pQ=n(fRe,"SPAN",{});var bBr=s(pQ);CPe=r(bBr,"Extending the Auto Classes"),bBr.forEach(t),fRe.forEach(t),lxe=i(d),zn=n(d,"P",{});var Cz=s(zn);MPe=r(Cz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),_Q=n(Cz,"CODE",{});var vBr=s(_Q);EPe=r(vBr,"NewModel"),vBr.forEach(t),yPe=r(Cz,", make sure you have a "),uQ=n(Cz,"CODE",{});var TBr=s(uQ);wPe=r(TBr,"NewModelConfig"),TBr.forEach(t),APe=r(Cz,` then you can add those to the auto
classes like this:`),Cz.forEach(t),ixe=i(d),m(KM.$$.fragment,d),dxe=i(d),zL=n(d,"P",{});var FBr=s(zL);LPe=r(FBr,"You will then be able to use the auto classes like you would usually do!"),FBr.forEach(t),cxe=i(d),m(Of.$$.fragment,d),fxe=i(d),zi=n(d,"H2",{class:!0});var mRe=s(zi);Gf=n(mRe,"A",{id:!0,class:!0,href:!0});var CBr=s(Gf);bQ=n(CBr,"SPAN",{});var MBr=s(bQ);m(ZM.$$.fragment,MBr),MBr.forEach(t),CBr.forEach(t),BPe=i(mRe),vQ=n(mRe,"SPAN",{});var EBr=s(vQ);xPe=r(EBr,"AutoConfig"),EBr.forEach(t),mRe.forEach(t),mxe=i(d),Wo=n(d,"DIV",{class:!0});var Gs=s(Wo);m(e4.$$.fragment,Gs),kPe=i(Gs),o4=n(Gs,"P",{});var gRe=s(o4);RPe=r(gRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),WL=n(gRe,"A",{href:!0});var yBr=s(WL);SPe=r(yBr,"from_pretrained()"),yBr.forEach(t),PPe=r(gRe," class method."),gRe.forEach(t),$Pe=i(Gs),r4=n(Gs,"P",{});var hRe=s(r4);IPe=r(hRe,"This class cannot be instantiated directly using "),TQ=n(hRe,"CODE",{});var wBr=s(TQ);jPe=r(wBr,"__init__()"),wBr.forEach(t),DPe=r(hRe," (throws an error)."),hRe.forEach(t),NPe=i(Gs),mo=n(Gs,"DIV",{class:!0});var ga=s(mo);m(t4.$$.fragment,ga),qPe=i(ga),FQ=n(ga,"P",{});var ABr=s(FQ);OPe=r(ABr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ABr.forEach(t),GPe=i(ga),Wi=n(ga,"P",{});var Mz=s(Wi);XPe=r(Mz,"The configuration class to instantiate is selected based on the "),CQ=n(Mz,"CODE",{});var LBr=s(CQ);VPe=r(LBr,"model_type"),LBr.forEach(t),zPe=r(Mz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),MQ=n(Mz,"CODE",{});var BBr=s(MQ);WPe=r(BBr,"pretrained_model_name_or_path"),BBr.forEach(t),QPe=r(Mz,":"),Mz.forEach(t),HPe=i(ga),v=n(ga,"UL",{});var T=s(v);Xf=n(T,"LI",{});var aTe=s(Xf);EQ=n(aTe,"STRONG",{});var xBr=s(EQ);UPe=r(xBr,"albert"),xBr.forEach(t),JPe=r(aTe," \u2014 "),QL=n(aTe,"A",{href:!0});var kBr=s(QL);YPe=r(kBr,"AlbertConfig"),kBr.forEach(t),KPe=r(aTe," (ALBERT model)"),aTe.forEach(t),ZPe=i(T),Vf=n(T,"LI",{});var nTe=s(Vf);yQ=n(nTe,"STRONG",{});var RBr=s(yQ);e$e=r(RBr,"bart"),RBr.forEach(t),o$e=r(nTe," \u2014 "),HL=n(nTe,"A",{href:!0});var SBr=s(HL);r$e=r(SBr,"BartConfig"),SBr.forEach(t),t$e=r(nTe," (BART model)"),nTe.forEach(t),a$e=i(T),zf=n(T,"LI",{});var sTe=s(zf);wQ=n(sTe,"STRONG",{});var PBr=s(wQ);n$e=r(PBr,"beit"),PBr.forEach(t),s$e=r(sTe," \u2014 "),UL=n(sTe,"A",{href:!0});var $Br=s(UL);l$e=r($Br,"BeitConfig"),$Br.forEach(t),i$e=r(sTe," (BEiT model)"),sTe.forEach(t),d$e=i(T),Wf=n(T,"LI",{});var lTe=s(Wf);AQ=n(lTe,"STRONG",{});var IBr=s(AQ);c$e=r(IBr,"bert"),IBr.forEach(t),f$e=r(lTe," \u2014 "),JL=n(lTe,"A",{href:!0});var jBr=s(JL);m$e=r(jBr,"BertConfig"),jBr.forEach(t),g$e=r(lTe," (BERT model)"),lTe.forEach(t),h$e=i(T),Qf=n(T,"LI",{});var iTe=s(Qf);LQ=n(iTe,"STRONG",{});var DBr=s(LQ);p$e=r(DBr,"bert-generation"),DBr.forEach(t),_$e=r(iTe," \u2014 "),YL=n(iTe,"A",{href:!0});var NBr=s(YL);u$e=r(NBr,"BertGenerationConfig"),NBr.forEach(t),b$e=r(iTe," (Bert Generation model)"),iTe.forEach(t),v$e=i(T),Hf=n(T,"LI",{});var dTe=s(Hf);BQ=n(dTe,"STRONG",{});var qBr=s(BQ);T$e=r(qBr,"big_bird"),qBr.forEach(t),F$e=r(dTe," \u2014 "),KL=n(dTe,"A",{href:!0});var OBr=s(KL);C$e=r(OBr,"BigBirdConfig"),OBr.forEach(t),M$e=r(dTe," (BigBird model)"),dTe.forEach(t),E$e=i(T),Uf=n(T,"LI",{});var cTe=s(Uf);xQ=n(cTe,"STRONG",{});var GBr=s(xQ);y$e=r(GBr,"bigbird_pegasus"),GBr.forEach(t),w$e=r(cTe," \u2014 "),ZL=n(cTe,"A",{href:!0});var XBr=s(ZL);A$e=r(XBr,"BigBirdPegasusConfig"),XBr.forEach(t),L$e=r(cTe," (BigBirdPegasus model)"),cTe.forEach(t),B$e=i(T),Jf=n(T,"LI",{});var fTe=s(Jf);kQ=n(fTe,"STRONG",{});var VBr=s(kQ);x$e=r(VBr,"blenderbot"),VBr.forEach(t),k$e=r(fTe," \u2014 "),e7=n(fTe,"A",{href:!0});var zBr=s(e7);R$e=r(zBr,"BlenderbotConfig"),zBr.forEach(t),S$e=r(fTe," (Blenderbot model)"),fTe.forEach(t),P$e=i(T),Yf=n(T,"LI",{});var mTe=s(Yf);RQ=n(mTe,"STRONG",{});var WBr=s(RQ);$$e=r(WBr,"blenderbot-small"),WBr.forEach(t),I$e=r(mTe," \u2014 "),o7=n(mTe,"A",{href:!0});var QBr=s(o7);j$e=r(QBr,"BlenderbotSmallConfig"),QBr.forEach(t),D$e=r(mTe," (BlenderbotSmall model)"),mTe.forEach(t),N$e=i(T),Kf=n(T,"LI",{});var gTe=s(Kf);SQ=n(gTe,"STRONG",{});var HBr=s(SQ);q$e=r(HBr,"camembert"),HBr.forEach(t),O$e=r(gTe," \u2014 "),r7=n(gTe,"A",{href:!0});var UBr=s(r7);G$e=r(UBr,"CamembertConfig"),UBr.forEach(t),X$e=r(gTe," (CamemBERT model)"),gTe.forEach(t),V$e=i(T),Zf=n(T,"LI",{});var hTe=s(Zf);PQ=n(hTe,"STRONG",{});var JBr=s(PQ);z$e=r(JBr,"canine"),JBr.forEach(t),W$e=r(hTe," \u2014 "),t7=n(hTe,"A",{href:!0});var YBr=s(t7);Q$e=r(YBr,"CanineConfig"),YBr.forEach(t),H$e=r(hTe," (Canine model)"),hTe.forEach(t),U$e=i(T),em=n(T,"LI",{});var pTe=s(em);$Q=n(pTe,"STRONG",{});var KBr=s($Q);J$e=r(KBr,"clip"),KBr.forEach(t),Y$e=r(pTe," \u2014 "),a7=n(pTe,"A",{href:!0});var ZBr=s(a7);K$e=r(ZBr,"CLIPConfig"),ZBr.forEach(t),Z$e=r(pTe," (CLIP model)"),pTe.forEach(t),eIe=i(T),om=n(T,"LI",{});var _Te=s(om);IQ=n(_Te,"STRONG",{});var exr=s(IQ);oIe=r(exr,"convbert"),exr.forEach(t),rIe=r(_Te," \u2014 "),n7=n(_Te,"A",{href:!0});var oxr=s(n7);tIe=r(oxr,"ConvBertConfig"),oxr.forEach(t),aIe=r(_Te," (ConvBERT model)"),_Te.forEach(t),nIe=i(T),rm=n(T,"LI",{});var uTe=s(rm);jQ=n(uTe,"STRONG",{});var rxr=s(jQ);sIe=r(rxr,"convnext"),rxr.forEach(t),lIe=r(uTe," \u2014 "),s7=n(uTe,"A",{href:!0});var txr=s(s7);iIe=r(txr,"ConvNextConfig"),txr.forEach(t),dIe=r(uTe," (ConvNext model)"),uTe.forEach(t),cIe=i(T),tm=n(T,"LI",{});var bTe=s(tm);DQ=n(bTe,"STRONG",{});var axr=s(DQ);fIe=r(axr,"ctrl"),axr.forEach(t),mIe=r(bTe," \u2014 "),l7=n(bTe,"A",{href:!0});var nxr=s(l7);gIe=r(nxr,"CTRLConfig"),nxr.forEach(t),hIe=r(bTe," (CTRL model)"),bTe.forEach(t),pIe=i(T),am=n(T,"LI",{});var vTe=s(am);NQ=n(vTe,"STRONG",{});var sxr=s(NQ);_Ie=r(sxr,"data2vec-audio"),sxr.forEach(t),uIe=r(vTe," \u2014 "),i7=n(vTe,"A",{href:!0});var lxr=s(i7);bIe=r(lxr,"Data2VecAudioConfig"),lxr.forEach(t),vIe=r(vTe," (Data2VecAudio model)"),vTe.forEach(t),TIe=i(T),nm=n(T,"LI",{});var TTe=s(nm);qQ=n(TTe,"STRONG",{});var ixr=s(qQ);FIe=r(ixr,"data2vec-text"),ixr.forEach(t),CIe=r(TTe," \u2014 "),d7=n(TTe,"A",{href:!0});var dxr=s(d7);MIe=r(dxr,"Data2VecTextConfig"),dxr.forEach(t),EIe=r(TTe," (Data2VecText model)"),TTe.forEach(t),yIe=i(T),sm=n(T,"LI",{});var FTe=s(sm);OQ=n(FTe,"STRONG",{});var cxr=s(OQ);wIe=r(cxr,"deberta"),cxr.forEach(t),AIe=r(FTe," \u2014 "),c7=n(FTe,"A",{href:!0});var fxr=s(c7);LIe=r(fxr,"DebertaConfig"),fxr.forEach(t),BIe=r(FTe," (DeBERTa model)"),FTe.forEach(t),xIe=i(T),lm=n(T,"LI",{});var CTe=s(lm);GQ=n(CTe,"STRONG",{});var mxr=s(GQ);kIe=r(mxr,"deberta-v2"),mxr.forEach(t),RIe=r(CTe," \u2014 "),f7=n(CTe,"A",{href:!0});var gxr=s(f7);SIe=r(gxr,"DebertaV2Config"),gxr.forEach(t),PIe=r(CTe," (DeBERTa-v2 model)"),CTe.forEach(t),$Ie=i(T),im=n(T,"LI",{});var MTe=s(im);XQ=n(MTe,"STRONG",{});var hxr=s(XQ);IIe=r(hxr,"deit"),hxr.forEach(t),jIe=r(MTe," \u2014 "),m7=n(MTe,"A",{href:!0});var pxr=s(m7);DIe=r(pxr,"DeiTConfig"),pxr.forEach(t),NIe=r(MTe," (DeiT model)"),MTe.forEach(t),qIe=i(T),dm=n(T,"LI",{});var ETe=s(dm);VQ=n(ETe,"STRONG",{});var _xr=s(VQ);OIe=r(_xr,"detr"),_xr.forEach(t),GIe=r(ETe," \u2014 "),g7=n(ETe,"A",{href:!0});var uxr=s(g7);XIe=r(uxr,"DetrConfig"),uxr.forEach(t),VIe=r(ETe," (DETR model)"),ETe.forEach(t),zIe=i(T),cm=n(T,"LI",{});var yTe=s(cm);zQ=n(yTe,"STRONG",{});var bxr=s(zQ);WIe=r(bxr,"distilbert"),bxr.forEach(t),QIe=r(yTe," \u2014 "),h7=n(yTe,"A",{href:!0});var vxr=s(h7);HIe=r(vxr,"DistilBertConfig"),vxr.forEach(t),UIe=r(yTe," (DistilBERT model)"),yTe.forEach(t),JIe=i(T),fm=n(T,"LI",{});var wTe=s(fm);WQ=n(wTe,"STRONG",{});var Txr=s(WQ);YIe=r(Txr,"dpr"),Txr.forEach(t),KIe=r(wTe," \u2014 "),p7=n(wTe,"A",{href:!0});var Fxr=s(p7);ZIe=r(Fxr,"DPRConfig"),Fxr.forEach(t),eje=r(wTe," (DPR model)"),wTe.forEach(t),oje=i(T),mm=n(T,"LI",{});var ATe=s(mm);QQ=n(ATe,"STRONG",{});var Cxr=s(QQ);rje=r(Cxr,"electra"),Cxr.forEach(t),tje=r(ATe," \u2014 "),_7=n(ATe,"A",{href:!0});var Mxr=s(_7);aje=r(Mxr,"ElectraConfig"),Mxr.forEach(t),nje=r(ATe," (ELECTRA model)"),ATe.forEach(t),sje=i(T),gm=n(T,"LI",{});var LTe=s(gm);HQ=n(LTe,"STRONG",{});var Exr=s(HQ);lje=r(Exr,"encoder-decoder"),Exr.forEach(t),ije=r(LTe," \u2014 "),u7=n(LTe,"A",{href:!0});var yxr=s(u7);dje=r(yxr,"EncoderDecoderConfig"),yxr.forEach(t),cje=r(LTe," (Encoder decoder model)"),LTe.forEach(t),fje=i(T),hm=n(T,"LI",{});var BTe=s(hm);UQ=n(BTe,"STRONG",{});var wxr=s(UQ);mje=r(wxr,"flaubert"),wxr.forEach(t),gje=r(BTe," \u2014 "),b7=n(BTe,"A",{href:!0});var Axr=s(b7);hje=r(Axr,"FlaubertConfig"),Axr.forEach(t),pje=r(BTe," (FlauBERT model)"),BTe.forEach(t),_je=i(T),pm=n(T,"LI",{});var xTe=s(pm);JQ=n(xTe,"STRONG",{});var Lxr=s(JQ);uje=r(Lxr,"fnet"),Lxr.forEach(t),bje=r(xTe," \u2014 "),v7=n(xTe,"A",{href:!0});var Bxr=s(v7);vje=r(Bxr,"FNetConfig"),Bxr.forEach(t),Tje=r(xTe," (FNet model)"),xTe.forEach(t),Fje=i(T),_m=n(T,"LI",{});var kTe=s(_m);YQ=n(kTe,"STRONG",{});var xxr=s(YQ);Cje=r(xxr,"fsmt"),xxr.forEach(t),Mje=r(kTe," \u2014 "),T7=n(kTe,"A",{href:!0});var kxr=s(T7);Eje=r(kxr,"FSMTConfig"),kxr.forEach(t),yje=r(kTe," (FairSeq Machine-Translation model)"),kTe.forEach(t),wje=i(T),um=n(T,"LI",{});var RTe=s(um);KQ=n(RTe,"STRONG",{});var Rxr=s(KQ);Aje=r(Rxr,"funnel"),Rxr.forEach(t),Lje=r(RTe," \u2014 "),F7=n(RTe,"A",{href:!0});var Sxr=s(F7);Bje=r(Sxr,"FunnelConfig"),Sxr.forEach(t),xje=r(RTe," (Funnel Transformer model)"),RTe.forEach(t),kje=i(T),bm=n(T,"LI",{});var STe=s(bm);ZQ=n(STe,"STRONG",{});var Pxr=s(ZQ);Rje=r(Pxr,"gpt2"),Pxr.forEach(t),Sje=r(STe," \u2014 "),C7=n(STe,"A",{href:!0});var $xr=s(C7);Pje=r($xr,"GPT2Config"),$xr.forEach(t),$je=r(STe," (OpenAI GPT-2 model)"),STe.forEach(t),Ije=i(T),vm=n(T,"LI",{});var PTe=s(vm);eH=n(PTe,"STRONG",{});var Ixr=s(eH);jje=r(Ixr,"gpt_neo"),Ixr.forEach(t),Dje=r(PTe," \u2014 "),M7=n(PTe,"A",{href:!0});var jxr=s(M7);Nje=r(jxr,"GPTNeoConfig"),jxr.forEach(t),qje=r(PTe," (GPT Neo model)"),PTe.forEach(t),Oje=i(T),Tm=n(T,"LI",{});var $Te=s(Tm);oH=n($Te,"STRONG",{});var Dxr=s(oH);Gje=r(Dxr,"gptj"),Dxr.forEach(t),Xje=r($Te," \u2014 "),E7=n($Te,"A",{href:!0});var Nxr=s(E7);Vje=r(Nxr,"GPTJConfig"),Nxr.forEach(t),zje=r($Te," (GPT-J model)"),$Te.forEach(t),Wje=i(T),Fm=n(T,"LI",{});var ITe=s(Fm);rH=n(ITe,"STRONG",{});var qxr=s(rH);Qje=r(qxr,"hubert"),qxr.forEach(t),Hje=r(ITe," \u2014 "),y7=n(ITe,"A",{href:!0});var Oxr=s(y7);Uje=r(Oxr,"HubertConfig"),Oxr.forEach(t),Jje=r(ITe," (Hubert model)"),ITe.forEach(t),Yje=i(T),Cm=n(T,"LI",{});var jTe=s(Cm);tH=n(jTe,"STRONG",{});var Gxr=s(tH);Kje=r(Gxr,"ibert"),Gxr.forEach(t),Zje=r(jTe," \u2014 "),w7=n(jTe,"A",{href:!0});var Xxr=s(w7);eDe=r(Xxr,"IBertConfig"),Xxr.forEach(t),oDe=r(jTe," (I-BERT model)"),jTe.forEach(t),rDe=i(T),Mm=n(T,"LI",{});var DTe=s(Mm);aH=n(DTe,"STRONG",{});var Vxr=s(aH);tDe=r(Vxr,"imagegpt"),Vxr.forEach(t),aDe=r(DTe," \u2014 "),A7=n(DTe,"A",{href:!0});var zxr=s(A7);nDe=r(zxr,"ImageGPTConfig"),zxr.forEach(t),sDe=r(DTe," (ImageGPT model)"),DTe.forEach(t),lDe=i(T),Em=n(T,"LI",{});var NTe=s(Em);nH=n(NTe,"STRONG",{});var Wxr=s(nH);iDe=r(Wxr,"layoutlm"),Wxr.forEach(t),dDe=r(NTe," \u2014 "),L7=n(NTe,"A",{href:!0});var Qxr=s(L7);cDe=r(Qxr,"LayoutLMConfig"),Qxr.forEach(t),fDe=r(NTe," (LayoutLM model)"),NTe.forEach(t),mDe=i(T),ym=n(T,"LI",{});var qTe=s(ym);sH=n(qTe,"STRONG",{});var Hxr=s(sH);gDe=r(Hxr,"layoutlmv2"),Hxr.forEach(t),hDe=r(qTe," \u2014 "),B7=n(qTe,"A",{href:!0});var Uxr=s(B7);pDe=r(Uxr,"LayoutLMv2Config"),Uxr.forEach(t),_De=r(qTe," (LayoutLMv2 model)"),qTe.forEach(t),uDe=i(T),wm=n(T,"LI",{});var OTe=s(wm);lH=n(OTe,"STRONG",{});var Jxr=s(lH);bDe=r(Jxr,"led"),Jxr.forEach(t),vDe=r(OTe," \u2014 "),x7=n(OTe,"A",{href:!0});var Yxr=s(x7);TDe=r(Yxr,"LEDConfig"),Yxr.forEach(t),FDe=r(OTe," (LED model)"),OTe.forEach(t),CDe=i(T),Am=n(T,"LI",{});var GTe=s(Am);iH=n(GTe,"STRONG",{});var Kxr=s(iH);MDe=r(Kxr,"longformer"),Kxr.forEach(t),EDe=r(GTe," \u2014 "),k7=n(GTe,"A",{href:!0});var Zxr=s(k7);yDe=r(Zxr,"LongformerConfig"),Zxr.forEach(t),wDe=r(GTe," (Longformer model)"),GTe.forEach(t),ADe=i(T),Lm=n(T,"LI",{});var XTe=s(Lm);dH=n(XTe,"STRONG",{});var ekr=s(dH);LDe=r(ekr,"luke"),ekr.forEach(t),BDe=r(XTe," \u2014 "),R7=n(XTe,"A",{href:!0});var okr=s(R7);xDe=r(okr,"LukeConfig"),okr.forEach(t),kDe=r(XTe," (LUKE model)"),XTe.forEach(t),RDe=i(T),Bm=n(T,"LI",{});var VTe=s(Bm);cH=n(VTe,"STRONG",{});var rkr=s(cH);SDe=r(rkr,"lxmert"),rkr.forEach(t),PDe=r(VTe," \u2014 "),S7=n(VTe,"A",{href:!0});var tkr=s(S7);$De=r(tkr,"LxmertConfig"),tkr.forEach(t),IDe=r(VTe," (LXMERT model)"),VTe.forEach(t),jDe=i(T),xm=n(T,"LI",{});var zTe=s(xm);fH=n(zTe,"STRONG",{});var akr=s(fH);DDe=r(akr,"m2m_100"),akr.forEach(t),NDe=r(zTe," \u2014 "),P7=n(zTe,"A",{href:!0});var nkr=s(P7);qDe=r(nkr,"M2M100Config"),nkr.forEach(t),ODe=r(zTe," (M2M100 model)"),zTe.forEach(t),GDe=i(T),km=n(T,"LI",{});var WTe=s(km);mH=n(WTe,"STRONG",{});var skr=s(mH);XDe=r(skr,"marian"),skr.forEach(t),VDe=r(WTe," \u2014 "),$7=n(WTe,"A",{href:!0});var lkr=s($7);zDe=r(lkr,"MarianConfig"),lkr.forEach(t),WDe=r(WTe," (Marian model)"),WTe.forEach(t),QDe=i(T),Rm=n(T,"LI",{});var QTe=s(Rm);gH=n(QTe,"STRONG",{});var ikr=s(gH);HDe=r(ikr,"maskformer"),ikr.forEach(t),UDe=r(QTe," \u2014 "),I7=n(QTe,"A",{href:!0});var dkr=s(I7);JDe=r(dkr,"MaskFormerConfig"),dkr.forEach(t),YDe=r(QTe," (MaskFormer model)"),QTe.forEach(t),KDe=i(T),Sm=n(T,"LI",{});var HTe=s(Sm);hH=n(HTe,"STRONG",{});var ckr=s(hH);ZDe=r(ckr,"mbart"),ckr.forEach(t),eNe=r(HTe," \u2014 "),j7=n(HTe,"A",{href:!0});var fkr=s(j7);oNe=r(fkr,"MBartConfig"),fkr.forEach(t),rNe=r(HTe," (mBART model)"),HTe.forEach(t),tNe=i(T),Pm=n(T,"LI",{});var UTe=s(Pm);pH=n(UTe,"STRONG",{});var mkr=s(pH);aNe=r(mkr,"megatron-bert"),mkr.forEach(t),nNe=r(UTe," \u2014 "),D7=n(UTe,"A",{href:!0});var gkr=s(D7);sNe=r(gkr,"MegatronBertConfig"),gkr.forEach(t),lNe=r(UTe," (MegatronBert model)"),UTe.forEach(t),iNe=i(T),$m=n(T,"LI",{});var JTe=s($m);_H=n(JTe,"STRONG",{});var hkr=s(_H);dNe=r(hkr,"mobilebert"),hkr.forEach(t),cNe=r(JTe," \u2014 "),N7=n(JTe,"A",{href:!0});var pkr=s(N7);fNe=r(pkr,"MobileBertConfig"),pkr.forEach(t),mNe=r(JTe," (MobileBERT model)"),JTe.forEach(t),gNe=i(T),Im=n(T,"LI",{});var YTe=s(Im);uH=n(YTe,"STRONG",{});var _kr=s(uH);hNe=r(_kr,"mpnet"),_kr.forEach(t),pNe=r(YTe," \u2014 "),q7=n(YTe,"A",{href:!0});var ukr=s(q7);_Ne=r(ukr,"MPNetConfig"),ukr.forEach(t),uNe=r(YTe," (MPNet model)"),YTe.forEach(t),bNe=i(T),jm=n(T,"LI",{});var KTe=s(jm);bH=n(KTe,"STRONG",{});var bkr=s(bH);vNe=r(bkr,"mt5"),bkr.forEach(t),TNe=r(KTe," \u2014 "),O7=n(KTe,"A",{href:!0});var vkr=s(O7);FNe=r(vkr,"MT5Config"),vkr.forEach(t),CNe=r(KTe," (mT5 model)"),KTe.forEach(t),MNe=i(T),Dm=n(T,"LI",{});var ZTe=s(Dm);vH=n(ZTe,"STRONG",{});var Tkr=s(vH);ENe=r(Tkr,"nystromformer"),Tkr.forEach(t),yNe=r(ZTe," \u2014 "),G7=n(ZTe,"A",{href:!0});var Fkr=s(G7);wNe=r(Fkr,"NystromformerConfig"),Fkr.forEach(t),ANe=r(ZTe," (Nystromformer model)"),ZTe.forEach(t),LNe=i(T),Nm=n(T,"LI",{});var e8e=s(Nm);TH=n(e8e,"STRONG",{});var Ckr=s(TH);BNe=r(Ckr,"openai-gpt"),Ckr.forEach(t),xNe=r(e8e," \u2014 "),X7=n(e8e,"A",{href:!0});var Mkr=s(X7);kNe=r(Mkr,"OpenAIGPTConfig"),Mkr.forEach(t),RNe=r(e8e," (OpenAI GPT model)"),e8e.forEach(t),SNe=i(T),qm=n(T,"LI",{});var o8e=s(qm);FH=n(o8e,"STRONG",{});var Ekr=s(FH);PNe=r(Ekr,"pegasus"),Ekr.forEach(t),$Ne=r(o8e," \u2014 "),V7=n(o8e,"A",{href:!0});var ykr=s(V7);INe=r(ykr,"PegasusConfig"),ykr.forEach(t),jNe=r(o8e," (Pegasus model)"),o8e.forEach(t),DNe=i(T),Om=n(T,"LI",{});var r8e=s(Om);CH=n(r8e,"STRONG",{});var wkr=s(CH);NNe=r(wkr,"perceiver"),wkr.forEach(t),qNe=r(r8e," \u2014 "),z7=n(r8e,"A",{href:!0});var Akr=s(z7);ONe=r(Akr,"PerceiverConfig"),Akr.forEach(t),GNe=r(r8e," (Perceiver model)"),r8e.forEach(t),XNe=i(T),Gm=n(T,"LI",{});var t8e=s(Gm);MH=n(t8e,"STRONG",{});var Lkr=s(MH);VNe=r(Lkr,"plbart"),Lkr.forEach(t),zNe=r(t8e," \u2014 "),W7=n(t8e,"A",{href:!0});var Bkr=s(W7);WNe=r(Bkr,"PLBartConfig"),Bkr.forEach(t),QNe=r(t8e," (PLBart model)"),t8e.forEach(t),HNe=i(T),Xm=n(T,"LI",{});var a8e=s(Xm);EH=n(a8e,"STRONG",{});var xkr=s(EH);UNe=r(xkr,"poolformer"),xkr.forEach(t),JNe=r(a8e," \u2014 "),Q7=n(a8e,"A",{href:!0});var kkr=s(Q7);YNe=r(kkr,"PoolFormerConfig"),kkr.forEach(t),KNe=r(a8e," (PoolFormer model)"),a8e.forEach(t),ZNe=i(T),Vm=n(T,"LI",{});var n8e=s(Vm);yH=n(n8e,"STRONG",{});var Rkr=s(yH);eqe=r(Rkr,"prophetnet"),Rkr.forEach(t),oqe=r(n8e," \u2014 "),H7=n(n8e,"A",{href:!0});var Skr=s(H7);rqe=r(Skr,"ProphetNetConfig"),Skr.forEach(t),tqe=r(n8e," (ProphetNet model)"),n8e.forEach(t),aqe=i(T),zm=n(T,"LI",{});var s8e=s(zm);wH=n(s8e,"STRONG",{});var Pkr=s(wH);nqe=r(Pkr,"qdqbert"),Pkr.forEach(t),sqe=r(s8e," \u2014 "),U7=n(s8e,"A",{href:!0});var $kr=s(U7);lqe=r($kr,"QDQBertConfig"),$kr.forEach(t),iqe=r(s8e," (QDQBert model)"),s8e.forEach(t),dqe=i(T),Wm=n(T,"LI",{});var l8e=s(Wm);AH=n(l8e,"STRONG",{});var Ikr=s(AH);cqe=r(Ikr,"rag"),Ikr.forEach(t),fqe=r(l8e," \u2014 "),J7=n(l8e,"A",{href:!0});var jkr=s(J7);mqe=r(jkr,"RagConfig"),jkr.forEach(t),gqe=r(l8e," (RAG model)"),l8e.forEach(t),hqe=i(T),Qm=n(T,"LI",{});var i8e=s(Qm);LH=n(i8e,"STRONG",{});var Dkr=s(LH);pqe=r(Dkr,"realm"),Dkr.forEach(t),_qe=r(i8e," \u2014 "),Y7=n(i8e,"A",{href:!0});var Nkr=s(Y7);uqe=r(Nkr,"RealmConfig"),Nkr.forEach(t),bqe=r(i8e," (Realm model)"),i8e.forEach(t),vqe=i(T),Hm=n(T,"LI",{});var d8e=s(Hm);BH=n(d8e,"STRONG",{});var qkr=s(BH);Tqe=r(qkr,"reformer"),qkr.forEach(t),Fqe=r(d8e," \u2014 "),K7=n(d8e,"A",{href:!0});var Okr=s(K7);Cqe=r(Okr,"ReformerConfig"),Okr.forEach(t),Mqe=r(d8e," (Reformer model)"),d8e.forEach(t),Eqe=i(T),Um=n(T,"LI",{});var c8e=s(Um);xH=n(c8e,"STRONG",{});var Gkr=s(xH);yqe=r(Gkr,"rembert"),Gkr.forEach(t),wqe=r(c8e," \u2014 "),Z7=n(c8e,"A",{href:!0});var Xkr=s(Z7);Aqe=r(Xkr,"RemBertConfig"),Xkr.forEach(t),Lqe=r(c8e," (RemBERT model)"),c8e.forEach(t),Bqe=i(T),Jm=n(T,"LI",{});var f8e=s(Jm);kH=n(f8e,"STRONG",{});var Vkr=s(kH);xqe=r(Vkr,"retribert"),Vkr.forEach(t),kqe=r(f8e," \u2014 "),eB=n(f8e,"A",{href:!0});var zkr=s(eB);Rqe=r(zkr,"RetriBertConfig"),zkr.forEach(t),Sqe=r(f8e," (RetriBERT model)"),f8e.forEach(t),Pqe=i(T),Ym=n(T,"LI",{});var m8e=s(Ym);RH=n(m8e,"STRONG",{});var Wkr=s(RH);$qe=r(Wkr,"roberta"),Wkr.forEach(t),Iqe=r(m8e," \u2014 "),oB=n(m8e,"A",{href:!0});var Qkr=s(oB);jqe=r(Qkr,"RobertaConfig"),Qkr.forEach(t),Dqe=r(m8e," (RoBERTa model)"),m8e.forEach(t),Nqe=i(T),Km=n(T,"LI",{});var g8e=s(Km);SH=n(g8e,"STRONG",{});var Hkr=s(SH);qqe=r(Hkr,"roformer"),Hkr.forEach(t),Oqe=r(g8e," \u2014 "),rB=n(g8e,"A",{href:!0});var Ukr=s(rB);Gqe=r(Ukr,"RoFormerConfig"),Ukr.forEach(t),Xqe=r(g8e," (RoFormer model)"),g8e.forEach(t),Vqe=i(T),Zm=n(T,"LI",{});var h8e=s(Zm);PH=n(h8e,"STRONG",{});var Jkr=s(PH);zqe=r(Jkr,"segformer"),Jkr.forEach(t),Wqe=r(h8e," \u2014 "),tB=n(h8e,"A",{href:!0});var Ykr=s(tB);Qqe=r(Ykr,"SegformerConfig"),Ykr.forEach(t),Hqe=r(h8e," (SegFormer model)"),h8e.forEach(t),Uqe=i(T),eg=n(T,"LI",{});var p8e=s(eg);$H=n(p8e,"STRONG",{});var Kkr=s($H);Jqe=r(Kkr,"sew"),Kkr.forEach(t),Yqe=r(p8e," \u2014 "),aB=n(p8e,"A",{href:!0});var Zkr=s(aB);Kqe=r(Zkr,"SEWConfig"),Zkr.forEach(t),Zqe=r(p8e," (SEW model)"),p8e.forEach(t),eOe=i(T),og=n(T,"LI",{});var _8e=s(og);IH=n(_8e,"STRONG",{});var eRr=s(IH);oOe=r(eRr,"sew-d"),eRr.forEach(t),rOe=r(_8e," \u2014 "),nB=n(_8e,"A",{href:!0});var oRr=s(nB);tOe=r(oRr,"SEWDConfig"),oRr.forEach(t),aOe=r(_8e," (SEW-D model)"),_8e.forEach(t),nOe=i(T),rg=n(T,"LI",{});var u8e=s(rg);jH=n(u8e,"STRONG",{});var rRr=s(jH);sOe=r(rRr,"speech-encoder-decoder"),rRr.forEach(t),lOe=r(u8e," \u2014 "),sB=n(u8e,"A",{href:!0});var tRr=s(sB);iOe=r(tRr,"SpeechEncoderDecoderConfig"),tRr.forEach(t),dOe=r(u8e," (Speech Encoder decoder model)"),u8e.forEach(t),cOe=i(T),tg=n(T,"LI",{});var b8e=s(tg);DH=n(b8e,"STRONG",{});var aRr=s(DH);fOe=r(aRr,"speech_to_text"),aRr.forEach(t),mOe=r(b8e," \u2014 "),lB=n(b8e,"A",{href:!0});var nRr=s(lB);gOe=r(nRr,"Speech2TextConfig"),nRr.forEach(t),hOe=r(b8e," (Speech2Text model)"),b8e.forEach(t),pOe=i(T),ag=n(T,"LI",{});var v8e=s(ag);NH=n(v8e,"STRONG",{});var sRr=s(NH);_Oe=r(sRr,"speech_to_text_2"),sRr.forEach(t),uOe=r(v8e," \u2014 "),iB=n(v8e,"A",{href:!0});var lRr=s(iB);bOe=r(lRr,"Speech2Text2Config"),lRr.forEach(t),vOe=r(v8e," (Speech2Text2 model)"),v8e.forEach(t),TOe=i(T),ng=n(T,"LI",{});var T8e=s(ng);qH=n(T8e,"STRONG",{});var iRr=s(qH);FOe=r(iRr,"splinter"),iRr.forEach(t),COe=r(T8e," \u2014 "),dB=n(T8e,"A",{href:!0});var dRr=s(dB);MOe=r(dRr,"SplinterConfig"),dRr.forEach(t),EOe=r(T8e," (Splinter model)"),T8e.forEach(t),yOe=i(T),sg=n(T,"LI",{});var F8e=s(sg);OH=n(F8e,"STRONG",{});var cRr=s(OH);wOe=r(cRr,"squeezebert"),cRr.forEach(t),AOe=r(F8e," \u2014 "),cB=n(F8e,"A",{href:!0});var fRr=s(cB);LOe=r(fRr,"SqueezeBertConfig"),fRr.forEach(t),BOe=r(F8e," (SqueezeBERT model)"),F8e.forEach(t),xOe=i(T),lg=n(T,"LI",{});var C8e=s(lg);GH=n(C8e,"STRONG",{});var mRr=s(GH);kOe=r(mRr,"swin"),mRr.forEach(t),ROe=r(C8e," \u2014 "),fB=n(C8e,"A",{href:!0});var gRr=s(fB);SOe=r(gRr,"SwinConfig"),gRr.forEach(t),POe=r(C8e," (Swin model)"),C8e.forEach(t),$Oe=i(T),ig=n(T,"LI",{});var M8e=s(ig);XH=n(M8e,"STRONG",{});var hRr=s(XH);IOe=r(hRr,"t5"),hRr.forEach(t),jOe=r(M8e," \u2014 "),mB=n(M8e,"A",{href:!0});var pRr=s(mB);DOe=r(pRr,"T5Config"),pRr.forEach(t),NOe=r(M8e," (T5 model)"),M8e.forEach(t),qOe=i(T),dg=n(T,"LI",{});var E8e=s(dg);VH=n(E8e,"STRONG",{});var _Rr=s(VH);OOe=r(_Rr,"tapas"),_Rr.forEach(t),GOe=r(E8e," \u2014 "),gB=n(E8e,"A",{href:!0});var uRr=s(gB);XOe=r(uRr,"TapasConfig"),uRr.forEach(t),VOe=r(E8e," (TAPAS model)"),E8e.forEach(t),zOe=i(T),cg=n(T,"LI",{});var y8e=s(cg);zH=n(y8e,"STRONG",{});var bRr=s(zH);WOe=r(bRr,"transfo-xl"),bRr.forEach(t),QOe=r(y8e," \u2014 "),hB=n(y8e,"A",{href:!0});var vRr=s(hB);HOe=r(vRr,"TransfoXLConfig"),vRr.forEach(t),UOe=r(y8e," (Transformer-XL model)"),y8e.forEach(t),JOe=i(T),fg=n(T,"LI",{});var w8e=s(fg);WH=n(w8e,"STRONG",{});var TRr=s(WH);YOe=r(TRr,"trocr"),TRr.forEach(t),KOe=r(w8e," \u2014 "),pB=n(w8e,"A",{href:!0});var FRr=s(pB);ZOe=r(FRr,"TrOCRConfig"),FRr.forEach(t),eGe=r(w8e," (TrOCR model)"),w8e.forEach(t),oGe=i(T),mg=n(T,"LI",{});var A8e=s(mg);QH=n(A8e,"STRONG",{});var CRr=s(QH);rGe=r(CRr,"unispeech"),CRr.forEach(t),tGe=r(A8e," \u2014 "),_B=n(A8e,"A",{href:!0});var MRr=s(_B);aGe=r(MRr,"UniSpeechConfig"),MRr.forEach(t),nGe=r(A8e," (UniSpeech model)"),A8e.forEach(t),sGe=i(T),gg=n(T,"LI",{});var L8e=s(gg);HH=n(L8e,"STRONG",{});var ERr=s(HH);lGe=r(ERr,"unispeech-sat"),ERr.forEach(t),iGe=r(L8e," \u2014 "),uB=n(L8e,"A",{href:!0});var yRr=s(uB);dGe=r(yRr,"UniSpeechSatConfig"),yRr.forEach(t),cGe=r(L8e," (UniSpeechSat model)"),L8e.forEach(t),fGe=i(T),hg=n(T,"LI",{});var B8e=s(hg);UH=n(B8e,"STRONG",{});var wRr=s(UH);mGe=r(wRr,"vilt"),wRr.forEach(t),gGe=r(B8e," \u2014 "),bB=n(B8e,"A",{href:!0});var ARr=s(bB);hGe=r(ARr,"ViltConfig"),ARr.forEach(t),pGe=r(B8e," (ViLT model)"),B8e.forEach(t),_Ge=i(T),pg=n(T,"LI",{});var x8e=s(pg);JH=n(x8e,"STRONG",{});var LRr=s(JH);uGe=r(LRr,"vision-encoder-decoder"),LRr.forEach(t),bGe=r(x8e," \u2014 "),vB=n(x8e,"A",{href:!0});var BRr=s(vB);vGe=r(BRr,"VisionEncoderDecoderConfig"),BRr.forEach(t),TGe=r(x8e," (Vision Encoder decoder model)"),x8e.forEach(t),FGe=i(T),_g=n(T,"LI",{});var k8e=s(_g);YH=n(k8e,"STRONG",{});var xRr=s(YH);CGe=r(xRr,"vision-text-dual-encoder"),xRr.forEach(t),MGe=r(k8e," \u2014 "),TB=n(k8e,"A",{href:!0});var kRr=s(TB);EGe=r(kRr,"VisionTextDualEncoderConfig"),kRr.forEach(t),yGe=r(k8e," (VisionTextDualEncoder model)"),k8e.forEach(t),wGe=i(T),ug=n(T,"LI",{});var R8e=s(ug);KH=n(R8e,"STRONG",{});var RRr=s(KH);AGe=r(RRr,"visual_bert"),RRr.forEach(t),LGe=r(R8e," \u2014 "),FB=n(R8e,"A",{href:!0});var SRr=s(FB);BGe=r(SRr,"VisualBertConfig"),SRr.forEach(t),xGe=r(R8e," (VisualBert model)"),R8e.forEach(t),kGe=i(T),bg=n(T,"LI",{});var S8e=s(bg);ZH=n(S8e,"STRONG",{});var PRr=s(ZH);RGe=r(PRr,"vit"),PRr.forEach(t),SGe=r(S8e," \u2014 "),CB=n(S8e,"A",{href:!0});var $Rr=s(CB);PGe=r($Rr,"ViTConfig"),$Rr.forEach(t),$Ge=r(S8e," (ViT model)"),S8e.forEach(t),IGe=i(T),vg=n(T,"LI",{});var P8e=s(vg);eU=n(P8e,"STRONG",{});var IRr=s(eU);jGe=r(IRr,"vit_mae"),IRr.forEach(t),DGe=r(P8e," \u2014 "),MB=n(P8e,"A",{href:!0});var jRr=s(MB);NGe=r(jRr,"ViTMAEConfig"),jRr.forEach(t),qGe=r(P8e," (ViTMAE model)"),P8e.forEach(t),OGe=i(T),Tg=n(T,"LI",{});var $8e=s(Tg);oU=n($8e,"STRONG",{});var DRr=s(oU);GGe=r(DRr,"wav2vec2"),DRr.forEach(t),XGe=r($8e," \u2014 "),EB=n($8e,"A",{href:!0});var NRr=s(EB);VGe=r(NRr,"Wav2Vec2Config"),NRr.forEach(t),zGe=r($8e," (Wav2Vec2 model)"),$8e.forEach(t),WGe=i(T),Fg=n(T,"LI",{});var I8e=s(Fg);rU=n(I8e,"STRONG",{});var qRr=s(rU);QGe=r(qRr,"wavlm"),qRr.forEach(t),HGe=r(I8e," \u2014 "),yB=n(I8e,"A",{href:!0});var ORr=s(yB);UGe=r(ORr,"WavLMConfig"),ORr.forEach(t),JGe=r(I8e," (WavLM model)"),I8e.forEach(t),YGe=i(T),Cg=n(T,"LI",{});var j8e=s(Cg);tU=n(j8e,"STRONG",{});var GRr=s(tU);KGe=r(GRr,"xglm"),GRr.forEach(t),ZGe=r(j8e," \u2014 "),wB=n(j8e,"A",{href:!0});var XRr=s(wB);eXe=r(XRr,"XGLMConfig"),XRr.forEach(t),oXe=r(j8e," (XGLM model)"),j8e.forEach(t),rXe=i(T),Mg=n(T,"LI",{});var D8e=s(Mg);aU=n(D8e,"STRONG",{});var VRr=s(aU);tXe=r(VRr,"xlm"),VRr.forEach(t),aXe=r(D8e," \u2014 "),AB=n(D8e,"A",{href:!0});var zRr=s(AB);nXe=r(zRr,"XLMConfig"),zRr.forEach(t),sXe=r(D8e," (XLM model)"),D8e.forEach(t),lXe=i(T),Eg=n(T,"LI",{});var N8e=s(Eg);nU=n(N8e,"STRONG",{});var WRr=s(nU);iXe=r(WRr,"xlm-prophetnet"),WRr.forEach(t),dXe=r(N8e," \u2014 "),LB=n(N8e,"A",{href:!0});var QRr=s(LB);cXe=r(QRr,"XLMProphetNetConfig"),QRr.forEach(t),fXe=r(N8e," (XLMProphetNet model)"),N8e.forEach(t),mXe=i(T),yg=n(T,"LI",{});var q8e=s(yg);sU=n(q8e,"STRONG",{});var HRr=s(sU);gXe=r(HRr,"xlm-roberta"),HRr.forEach(t),hXe=r(q8e," \u2014 "),BB=n(q8e,"A",{href:!0});var URr=s(BB);pXe=r(URr,"XLMRobertaConfig"),URr.forEach(t),_Xe=r(q8e," (XLM-RoBERTa model)"),q8e.forEach(t),uXe=i(T),wg=n(T,"LI",{});var O8e=s(wg);lU=n(O8e,"STRONG",{});var JRr=s(lU);bXe=r(JRr,"xlm-roberta-xl"),JRr.forEach(t),vXe=r(O8e," \u2014 "),xB=n(O8e,"A",{href:!0});var YRr=s(xB);TXe=r(YRr,"XLMRobertaXLConfig"),YRr.forEach(t),FXe=r(O8e," (XLM-RoBERTa-XL model)"),O8e.forEach(t),CXe=i(T),Ag=n(T,"LI",{});var G8e=s(Ag);iU=n(G8e,"STRONG",{});var KRr=s(iU);MXe=r(KRr,"xlnet"),KRr.forEach(t),EXe=r(G8e," \u2014 "),kB=n(G8e,"A",{href:!0});var ZRr=s(kB);yXe=r(ZRr,"XLNetConfig"),ZRr.forEach(t),wXe=r(G8e," (XLNet model)"),G8e.forEach(t),AXe=i(T),Lg=n(T,"LI",{});var X8e=s(Lg);dU=n(X8e,"STRONG",{});var eSr=s(dU);LXe=r(eSr,"yoso"),eSr.forEach(t),BXe=r(X8e," \u2014 "),RB=n(X8e,"A",{href:!0});var oSr=s(RB);xXe=r(oSr,"YosoConfig"),oSr.forEach(t),kXe=r(X8e," (YOSO model)"),X8e.forEach(t),T.forEach(t),RXe=i(ga),cU=n(ga,"P",{});var rSr=s(cU);SXe=r(rSr,"Examples:"),rSr.forEach(t),PXe=i(ga),m(a4.$$.fragment,ga),ga.forEach(t),$Xe=i(Gs),Bg=n(Gs,"DIV",{class:!0});var pRe=s(Bg);m(n4.$$.fragment,pRe),IXe=i(pRe),fU=n(pRe,"P",{});var tSr=s(fU);jXe=r(tSr,"Register a new configuration for this class."),tSr.forEach(t),pRe.forEach(t),Gs.forEach(t),gxe=i(d),Qi=n(d,"H2",{class:!0});var _Re=s(Qi);xg=n(_Re,"A",{id:!0,class:!0,href:!0});var aSr=s(xg);mU=n(aSr,"SPAN",{});var nSr=s(mU);m(s4.$$.fragment,nSr),nSr.forEach(t),aSr.forEach(t),DXe=i(_Re),gU=n(_Re,"SPAN",{});var sSr=s(gU);NXe=r(sSr,"AutoTokenizer"),sSr.forEach(t),_Re.forEach(t),hxe=i(d),Qo=n(d,"DIV",{class:!0});var Xs=s(Qo);m(l4.$$.fragment,Xs),qXe=i(Xs),i4=n(Xs,"P",{});var uRe=s(i4);OXe=r(uRe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),SB=n(uRe,"A",{href:!0});var lSr=s(SB);GXe=r(lSr,"AutoTokenizer.from_pretrained()"),lSr.forEach(t),XXe=r(uRe," class method."),uRe.forEach(t),VXe=i(Xs),d4=n(Xs,"P",{});var bRe=s(d4);zXe=r(bRe,"This class cannot be instantiated directly using "),hU=n(bRe,"CODE",{});var iSr=s(hU);WXe=r(iSr,"__init__()"),iSr.forEach(t),QXe=r(bRe," (throws an error)."),bRe.forEach(t),HXe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(c4.$$.fragment,ha),UXe=i(ha),pU=n(ha,"P",{});var dSr=s(pU);JXe=r(dSr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),dSr.forEach(t),YXe=i(ha),Ga=n(ha,"P",{});var UC=s(Ga);KXe=r(UC,"The tokenizer class to instantiate is selected based on the "),_U=n(UC,"CODE",{});var cSr=s(_U);ZXe=r(cSr,"model_type"),cSr.forEach(t),eVe=r(UC,` property of the config object (either
passed as an argument or loaded from `),uU=n(UC,"CODE",{});var fSr=s(uU);oVe=r(fSr,"pretrained_model_name_or_path"),fSr.forEach(t),rVe=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bU=n(UC,"CODE",{});var mSr=s(bU);tVe=r(mSr,"pretrained_model_name_or_path"),mSr.forEach(t),aVe=r(UC,":"),UC.forEach(t),nVe=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var V0=s(Wn);vU=n(V0,"STRONG",{});var gSr=s(vU);sVe=r(gSr,"albert"),gSr.forEach(t),lVe=r(V0," \u2014 "),PB=n(V0,"A",{href:!0});var hSr=s(PB);iVe=r(hSr,"AlbertTokenizer"),hSr.forEach(t),dVe=r(V0," or "),$B=n(V0,"A",{href:!0});var pSr=s($B);cVe=r(pSr,"AlbertTokenizerFast"),pSr.forEach(t),fVe=r(V0," (ALBERT model)"),V0.forEach(t),mVe=i(y),Qn=n(y,"LI",{});var z0=s(Qn);TU=n(z0,"STRONG",{});var _Sr=s(TU);gVe=r(_Sr,"bart"),_Sr.forEach(t),hVe=r(z0," \u2014 "),IB=n(z0,"A",{href:!0});var uSr=s(IB);pVe=r(uSr,"BartTokenizer"),uSr.forEach(t),_Ve=r(z0," or "),jB=n(z0,"A",{href:!0});var bSr=s(jB);uVe=r(bSr,"BartTokenizerFast"),bSr.forEach(t),bVe=r(z0," (BART model)"),z0.forEach(t),vVe=i(y),Hn=n(y,"LI",{});var W0=s(Hn);FU=n(W0,"STRONG",{});var vSr=s(FU);TVe=r(vSr,"barthez"),vSr.forEach(t),FVe=r(W0," \u2014 "),DB=n(W0,"A",{href:!0});var TSr=s(DB);CVe=r(TSr,"BarthezTokenizer"),TSr.forEach(t),MVe=r(W0," or "),NB=n(W0,"A",{href:!0});var FSr=s(NB);EVe=r(FSr,"BarthezTokenizerFast"),FSr.forEach(t),yVe=r(W0," (BARThez model)"),W0.forEach(t),wVe=i(y),kg=n(y,"LI",{});var V8e=s(kg);CU=n(V8e,"STRONG",{});var CSr=s(CU);AVe=r(CSr,"bartpho"),CSr.forEach(t),LVe=r(V8e," \u2014 "),qB=n(V8e,"A",{href:!0});var MSr=s(qB);BVe=r(MSr,"BartphoTokenizer"),MSr.forEach(t),xVe=r(V8e," (BARTpho model)"),V8e.forEach(t),kVe=i(y),Un=n(y,"LI",{});var Q0=s(Un);MU=n(Q0,"STRONG",{});var ESr=s(MU);RVe=r(ESr,"bert"),ESr.forEach(t),SVe=r(Q0," \u2014 "),OB=n(Q0,"A",{href:!0});var ySr=s(OB);PVe=r(ySr,"BertTokenizer"),ySr.forEach(t),$Ve=r(Q0," or "),GB=n(Q0,"A",{href:!0});var wSr=s(GB);IVe=r(wSr,"BertTokenizerFast"),wSr.forEach(t),jVe=r(Q0," (BERT model)"),Q0.forEach(t),DVe=i(y),Rg=n(y,"LI",{});var z8e=s(Rg);EU=n(z8e,"STRONG",{});var ASr=s(EU);NVe=r(ASr,"bert-generation"),ASr.forEach(t),qVe=r(z8e," \u2014 "),XB=n(z8e,"A",{href:!0});var LSr=s(XB);OVe=r(LSr,"BertGenerationTokenizer"),LSr.forEach(t),GVe=r(z8e," (Bert Generation model)"),z8e.forEach(t),XVe=i(y),Sg=n(y,"LI",{});var W8e=s(Sg);yU=n(W8e,"STRONG",{});var BSr=s(yU);VVe=r(BSr,"bert-japanese"),BSr.forEach(t),zVe=r(W8e," \u2014 "),VB=n(W8e,"A",{href:!0});var xSr=s(VB);WVe=r(xSr,"BertJapaneseTokenizer"),xSr.forEach(t),QVe=r(W8e," (BertJapanese model)"),W8e.forEach(t),HVe=i(y),Pg=n(y,"LI",{});var Q8e=s(Pg);wU=n(Q8e,"STRONG",{});var kSr=s(wU);UVe=r(kSr,"bertweet"),kSr.forEach(t),JVe=r(Q8e," \u2014 "),zB=n(Q8e,"A",{href:!0});var RSr=s(zB);YVe=r(RSr,"BertweetTokenizer"),RSr.forEach(t),KVe=r(Q8e," (Bertweet model)"),Q8e.forEach(t),ZVe=i(y),Jn=n(y,"LI",{});var H0=s(Jn);AU=n(H0,"STRONG",{});var SSr=s(AU);eze=r(SSr,"big_bird"),SSr.forEach(t),oze=r(H0," \u2014 "),WB=n(H0,"A",{href:!0});var PSr=s(WB);rze=r(PSr,"BigBirdTokenizer"),PSr.forEach(t),tze=r(H0," or "),QB=n(H0,"A",{href:!0});var $Sr=s(QB);aze=r($Sr,"BigBirdTokenizerFast"),$Sr.forEach(t),nze=r(H0," (BigBird model)"),H0.forEach(t),sze=i(y),Yn=n(y,"LI",{});var U0=s(Yn);LU=n(U0,"STRONG",{});var ISr=s(LU);lze=r(ISr,"bigbird_pegasus"),ISr.forEach(t),ize=r(U0," \u2014 "),HB=n(U0,"A",{href:!0});var jSr=s(HB);dze=r(jSr,"PegasusTokenizer"),jSr.forEach(t),cze=r(U0," or "),UB=n(U0,"A",{href:!0});var DSr=s(UB);fze=r(DSr,"PegasusTokenizerFast"),DSr.forEach(t),mze=r(U0," (BigBirdPegasus model)"),U0.forEach(t),gze=i(y),Kn=n(y,"LI",{});var J0=s(Kn);BU=n(J0,"STRONG",{});var NSr=s(BU);hze=r(NSr,"blenderbot"),NSr.forEach(t),pze=r(J0," \u2014 "),JB=n(J0,"A",{href:!0});var qSr=s(JB);_ze=r(qSr,"BlenderbotTokenizer"),qSr.forEach(t),uze=r(J0," or "),YB=n(J0,"A",{href:!0});var OSr=s(YB);bze=r(OSr,"BlenderbotTokenizerFast"),OSr.forEach(t),vze=r(J0," (Blenderbot model)"),J0.forEach(t),Tze=i(y),$g=n(y,"LI",{});var H8e=s($g);xU=n(H8e,"STRONG",{});var GSr=s(xU);Fze=r(GSr,"blenderbot-small"),GSr.forEach(t),Cze=r(H8e," \u2014 "),KB=n(H8e,"A",{href:!0});var XSr=s(KB);Mze=r(XSr,"BlenderbotSmallTokenizer"),XSr.forEach(t),Eze=r(H8e," (BlenderbotSmall model)"),H8e.forEach(t),yze=i(y),Ig=n(y,"LI",{});var U8e=s(Ig);kU=n(U8e,"STRONG",{});var VSr=s(kU);wze=r(VSr,"byt5"),VSr.forEach(t),Aze=r(U8e," \u2014 "),ZB=n(U8e,"A",{href:!0});var zSr=s(ZB);Lze=r(zSr,"ByT5Tokenizer"),zSr.forEach(t),Bze=r(U8e," (ByT5 model)"),U8e.forEach(t),xze=i(y),Zn=n(y,"LI",{});var Y0=s(Zn);RU=n(Y0,"STRONG",{});var WSr=s(RU);kze=r(WSr,"camembert"),WSr.forEach(t),Rze=r(Y0," \u2014 "),ex=n(Y0,"A",{href:!0});var QSr=s(ex);Sze=r(QSr,"CamembertTokenizer"),QSr.forEach(t),Pze=r(Y0," or "),ox=n(Y0,"A",{href:!0});var HSr=s(ox);$ze=r(HSr,"CamembertTokenizerFast"),HSr.forEach(t),Ize=r(Y0," (CamemBERT model)"),Y0.forEach(t),jze=i(y),jg=n(y,"LI",{});var J8e=s(jg);SU=n(J8e,"STRONG",{});var USr=s(SU);Dze=r(USr,"canine"),USr.forEach(t),Nze=r(J8e," \u2014 "),rx=n(J8e,"A",{href:!0});var JSr=s(rx);qze=r(JSr,"CanineTokenizer"),JSr.forEach(t),Oze=r(J8e," (Canine model)"),J8e.forEach(t),Gze=i(y),es=n(y,"LI",{});var K0=s(es);PU=n(K0,"STRONG",{});var YSr=s(PU);Xze=r(YSr,"clip"),YSr.forEach(t),Vze=r(K0," \u2014 "),tx=n(K0,"A",{href:!0});var KSr=s(tx);zze=r(KSr,"CLIPTokenizer"),KSr.forEach(t),Wze=r(K0," or "),ax=n(K0,"A",{href:!0});var ZSr=s(ax);Qze=r(ZSr,"CLIPTokenizerFast"),ZSr.forEach(t),Hze=r(K0," (CLIP model)"),K0.forEach(t),Uze=i(y),os=n(y,"LI",{});var Z0=s(os);$U=n(Z0,"STRONG",{});var ePr=s($U);Jze=r(ePr,"convbert"),ePr.forEach(t),Yze=r(Z0," \u2014 "),nx=n(Z0,"A",{href:!0});var oPr=s(nx);Kze=r(oPr,"ConvBertTokenizer"),oPr.forEach(t),Zze=r(Z0," or "),sx=n(Z0,"A",{href:!0});var rPr=s(sx);eWe=r(rPr,"ConvBertTokenizerFast"),rPr.forEach(t),oWe=r(Z0," (ConvBERT model)"),Z0.forEach(t),rWe=i(y),rs=n(y,"LI",{});var eL=s(rs);IU=n(eL,"STRONG",{});var tPr=s(IU);tWe=r(tPr,"cpm"),tPr.forEach(t),aWe=r(eL," \u2014 "),lx=n(eL,"A",{href:!0});var aPr=s(lx);nWe=r(aPr,"CpmTokenizer"),aPr.forEach(t),sWe=r(eL," or "),jU=n(eL,"CODE",{});var nPr=s(jU);lWe=r(nPr,"CpmTokenizerFast"),nPr.forEach(t),iWe=r(eL," (CPM model)"),eL.forEach(t),dWe=i(y),Dg=n(y,"LI",{});var Y8e=s(Dg);DU=n(Y8e,"STRONG",{});var sPr=s(DU);cWe=r(sPr,"ctrl"),sPr.forEach(t),fWe=r(Y8e," \u2014 "),ix=n(Y8e,"A",{href:!0});var lPr=s(ix);mWe=r(lPr,"CTRLTokenizer"),lPr.forEach(t),gWe=r(Y8e," (CTRL model)"),Y8e.forEach(t),hWe=i(y),ts=n(y,"LI",{});var oL=s(ts);NU=n(oL,"STRONG",{});var iPr=s(NU);pWe=r(iPr,"deberta"),iPr.forEach(t),_We=r(oL," \u2014 "),dx=n(oL,"A",{href:!0});var dPr=s(dx);uWe=r(dPr,"DebertaTokenizer"),dPr.forEach(t),bWe=r(oL," or "),cx=n(oL,"A",{href:!0});var cPr=s(cx);vWe=r(cPr,"DebertaTokenizerFast"),cPr.forEach(t),TWe=r(oL," (DeBERTa model)"),oL.forEach(t),FWe=i(y),Ng=n(y,"LI",{});var K8e=s(Ng);qU=n(K8e,"STRONG",{});var fPr=s(qU);CWe=r(fPr,"deberta-v2"),fPr.forEach(t),MWe=r(K8e," \u2014 "),fx=n(K8e,"A",{href:!0});var mPr=s(fx);EWe=r(mPr,"DebertaV2Tokenizer"),mPr.forEach(t),yWe=r(K8e," (DeBERTa-v2 model)"),K8e.forEach(t),wWe=i(y),as=n(y,"LI",{});var rL=s(as);OU=n(rL,"STRONG",{});var gPr=s(OU);AWe=r(gPr,"distilbert"),gPr.forEach(t),LWe=r(rL," \u2014 "),mx=n(rL,"A",{href:!0});var hPr=s(mx);BWe=r(hPr,"DistilBertTokenizer"),hPr.forEach(t),xWe=r(rL," or "),gx=n(rL,"A",{href:!0});var pPr=s(gx);kWe=r(pPr,"DistilBertTokenizerFast"),pPr.forEach(t),RWe=r(rL," (DistilBERT model)"),rL.forEach(t),SWe=i(y),ns=n(y,"LI",{});var tL=s(ns);GU=n(tL,"STRONG",{});var _Pr=s(GU);PWe=r(_Pr,"dpr"),_Pr.forEach(t),$We=r(tL," \u2014 "),hx=n(tL,"A",{href:!0});var uPr=s(hx);IWe=r(uPr,"DPRQuestionEncoderTokenizer"),uPr.forEach(t),jWe=r(tL," or "),px=n(tL,"A",{href:!0});var bPr=s(px);DWe=r(bPr,"DPRQuestionEncoderTokenizerFast"),bPr.forEach(t),NWe=r(tL," (DPR model)"),tL.forEach(t),qWe=i(y),ss=n(y,"LI",{});var aL=s(ss);XU=n(aL,"STRONG",{});var vPr=s(XU);OWe=r(vPr,"electra"),vPr.forEach(t),GWe=r(aL," \u2014 "),_x=n(aL,"A",{href:!0});var TPr=s(_x);XWe=r(TPr,"ElectraTokenizer"),TPr.forEach(t),VWe=r(aL," or "),ux=n(aL,"A",{href:!0});var FPr=s(ux);zWe=r(FPr,"ElectraTokenizerFast"),FPr.forEach(t),WWe=r(aL," (ELECTRA model)"),aL.forEach(t),QWe=i(y),qg=n(y,"LI",{});var Z8e=s(qg);VU=n(Z8e,"STRONG",{});var CPr=s(VU);HWe=r(CPr,"flaubert"),CPr.forEach(t),UWe=r(Z8e," \u2014 "),bx=n(Z8e,"A",{href:!0});var MPr=s(bx);JWe=r(MPr,"FlaubertTokenizer"),MPr.forEach(t),YWe=r(Z8e," (FlauBERT model)"),Z8e.forEach(t),KWe=i(y),ls=n(y,"LI",{});var nL=s(ls);zU=n(nL,"STRONG",{});var EPr=s(zU);ZWe=r(EPr,"fnet"),EPr.forEach(t),eQe=r(nL," \u2014 "),vx=n(nL,"A",{href:!0});var yPr=s(vx);oQe=r(yPr,"FNetTokenizer"),yPr.forEach(t),rQe=r(nL," or "),Tx=n(nL,"A",{href:!0});var wPr=s(Tx);tQe=r(wPr,"FNetTokenizerFast"),wPr.forEach(t),aQe=r(nL," (FNet model)"),nL.forEach(t),nQe=i(y),Og=n(y,"LI",{});var eFe=s(Og);WU=n(eFe,"STRONG",{});var APr=s(WU);sQe=r(APr,"fsmt"),APr.forEach(t),lQe=r(eFe," \u2014 "),Fx=n(eFe,"A",{href:!0});var LPr=s(Fx);iQe=r(LPr,"FSMTTokenizer"),LPr.forEach(t),dQe=r(eFe," (FairSeq Machine-Translation model)"),eFe.forEach(t),cQe=i(y),is=n(y,"LI",{});var sL=s(is);QU=n(sL,"STRONG",{});var BPr=s(QU);fQe=r(BPr,"funnel"),BPr.forEach(t),mQe=r(sL," \u2014 "),Cx=n(sL,"A",{href:!0});var xPr=s(Cx);gQe=r(xPr,"FunnelTokenizer"),xPr.forEach(t),hQe=r(sL," or "),Mx=n(sL,"A",{href:!0});var kPr=s(Mx);pQe=r(kPr,"FunnelTokenizerFast"),kPr.forEach(t),_Qe=r(sL," (Funnel Transformer model)"),sL.forEach(t),uQe=i(y),ds=n(y,"LI",{});var lL=s(ds);HU=n(lL,"STRONG",{});var RPr=s(HU);bQe=r(RPr,"gpt2"),RPr.forEach(t),vQe=r(lL," \u2014 "),Ex=n(lL,"A",{href:!0});var SPr=s(Ex);TQe=r(SPr,"GPT2Tokenizer"),SPr.forEach(t),FQe=r(lL," or "),yx=n(lL,"A",{href:!0});var PPr=s(yx);CQe=r(PPr,"GPT2TokenizerFast"),PPr.forEach(t),MQe=r(lL," (OpenAI GPT-2 model)"),lL.forEach(t),EQe=i(y),cs=n(y,"LI",{});var iL=s(cs);UU=n(iL,"STRONG",{});var $Pr=s(UU);yQe=r($Pr,"gpt_neo"),$Pr.forEach(t),wQe=r(iL," \u2014 "),wx=n(iL,"A",{href:!0});var IPr=s(wx);AQe=r(IPr,"GPT2Tokenizer"),IPr.forEach(t),LQe=r(iL," or "),Ax=n(iL,"A",{href:!0});var jPr=s(Ax);BQe=r(jPr,"GPT2TokenizerFast"),jPr.forEach(t),xQe=r(iL," (GPT Neo model)"),iL.forEach(t),kQe=i(y),fs=n(y,"LI",{});var dL=s(fs);JU=n(dL,"STRONG",{});var DPr=s(JU);RQe=r(DPr,"herbert"),DPr.forEach(t),SQe=r(dL," \u2014 "),Lx=n(dL,"A",{href:!0});var NPr=s(Lx);PQe=r(NPr,"HerbertTokenizer"),NPr.forEach(t),$Qe=r(dL," or "),Bx=n(dL,"A",{href:!0});var qPr=s(Bx);IQe=r(qPr,"HerbertTokenizerFast"),qPr.forEach(t),jQe=r(dL," (HerBERT model)"),dL.forEach(t),DQe=i(y),Gg=n(y,"LI",{});var oFe=s(Gg);YU=n(oFe,"STRONG",{});var OPr=s(YU);NQe=r(OPr,"hubert"),OPr.forEach(t),qQe=r(oFe," \u2014 "),xx=n(oFe,"A",{href:!0});var GPr=s(xx);OQe=r(GPr,"Wav2Vec2CTCTokenizer"),GPr.forEach(t),GQe=r(oFe," (Hubert model)"),oFe.forEach(t),XQe=i(y),ms=n(y,"LI",{});var cL=s(ms);KU=n(cL,"STRONG",{});var XPr=s(KU);VQe=r(XPr,"ibert"),XPr.forEach(t),zQe=r(cL," \u2014 "),kx=n(cL,"A",{href:!0});var VPr=s(kx);WQe=r(VPr,"RobertaTokenizer"),VPr.forEach(t),QQe=r(cL," or "),Rx=n(cL,"A",{href:!0});var zPr=s(Rx);HQe=r(zPr,"RobertaTokenizerFast"),zPr.forEach(t),UQe=r(cL," (I-BERT model)"),cL.forEach(t),JQe=i(y),gs=n(y,"LI",{});var fL=s(gs);ZU=n(fL,"STRONG",{});var WPr=s(ZU);YQe=r(WPr,"layoutlm"),WPr.forEach(t),KQe=r(fL," \u2014 "),Sx=n(fL,"A",{href:!0});var QPr=s(Sx);ZQe=r(QPr,"LayoutLMTokenizer"),QPr.forEach(t),eHe=r(fL," or "),Px=n(fL,"A",{href:!0});var HPr=s(Px);oHe=r(HPr,"LayoutLMTokenizerFast"),HPr.forEach(t),rHe=r(fL," (LayoutLM model)"),fL.forEach(t),tHe=i(y),hs=n(y,"LI",{});var mL=s(hs);eJ=n(mL,"STRONG",{});var UPr=s(eJ);aHe=r(UPr,"layoutlmv2"),UPr.forEach(t),nHe=r(mL," \u2014 "),$x=n(mL,"A",{href:!0});var JPr=s($x);sHe=r(JPr,"LayoutLMv2Tokenizer"),JPr.forEach(t),lHe=r(mL," or "),Ix=n(mL,"A",{href:!0});var YPr=s(Ix);iHe=r(YPr,"LayoutLMv2TokenizerFast"),YPr.forEach(t),dHe=r(mL," (LayoutLMv2 model)"),mL.forEach(t),cHe=i(y),ps=n(y,"LI",{});var gL=s(ps);oJ=n(gL,"STRONG",{});var KPr=s(oJ);fHe=r(KPr,"layoutxlm"),KPr.forEach(t),mHe=r(gL," \u2014 "),jx=n(gL,"A",{href:!0});var ZPr=s(jx);gHe=r(ZPr,"LayoutXLMTokenizer"),ZPr.forEach(t),hHe=r(gL," or "),Dx=n(gL,"A",{href:!0});var e$r=s(Dx);pHe=r(e$r,"LayoutXLMTokenizerFast"),e$r.forEach(t),_He=r(gL," (LayoutXLM model)"),gL.forEach(t),uHe=i(y),_s=n(y,"LI",{});var hL=s(_s);rJ=n(hL,"STRONG",{});var o$r=s(rJ);bHe=r(o$r,"led"),o$r.forEach(t),vHe=r(hL," \u2014 "),Nx=n(hL,"A",{href:!0});var r$r=s(Nx);THe=r(r$r,"LEDTokenizer"),r$r.forEach(t),FHe=r(hL," or "),qx=n(hL,"A",{href:!0});var t$r=s(qx);CHe=r(t$r,"LEDTokenizerFast"),t$r.forEach(t),MHe=r(hL," (LED model)"),hL.forEach(t),EHe=i(y),us=n(y,"LI",{});var pL=s(us);tJ=n(pL,"STRONG",{});var a$r=s(tJ);yHe=r(a$r,"longformer"),a$r.forEach(t),wHe=r(pL," \u2014 "),Ox=n(pL,"A",{href:!0});var n$r=s(Ox);AHe=r(n$r,"LongformerTokenizer"),n$r.forEach(t),LHe=r(pL," or "),Gx=n(pL,"A",{href:!0});var s$r=s(Gx);BHe=r(s$r,"LongformerTokenizerFast"),s$r.forEach(t),xHe=r(pL," (Longformer model)"),pL.forEach(t),kHe=i(y),Xg=n(y,"LI",{});var rFe=s(Xg);aJ=n(rFe,"STRONG",{});var l$r=s(aJ);RHe=r(l$r,"luke"),l$r.forEach(t),SHe=r(rFe," \u2014 "),Xx=n(rFe,"A",{href:!0});var i$r=s(Xx);PHe=r(i$r,"LukeTokenizer"),i$r.forEach(t),$He=r(rFe," (LUKE model)"),rFe.forEach(t),IHe=i(y),bs=n(y,"LI",{});var _L=s(bs);nJ=n(_L,"STRONG",{});var d$r=s(nJ);jHe=r(d$r,"lxmert"),d$r.forEach(t),DHe=r(_L," \u2014 "),Vx=n(_L,"A",{href:!0});var c$r=s(Vx);NHe=r(c$r,"LxmertTokenizer"),c$r.forEach(t),qHe=r(_L," or "),zx=n(_L,"A",{href:!0});var f$r=s(zx);OHe=r(f$r,"LxmertTokenizerFast"),f$r.forEach(t),GHe=r(_L," (LXMERT model)"),_L.forEach(t),XHe=i(y),Vg=n(y,"LI",{});var tFe=s(Vg);sJ=n(tFe,"STRONG",{});var m$r=s(sJ);VHe=r(m$r,"m2m_100"),m$r.forEach(t),zHe=r(tFe," \u2014 "),Wx=n(tFe,"A",{href:!0});var g$r=s(Wx);WHe=r(g$r,"M2M100Tokenizer"),g$r.forEach(t),QHe=r(tFe," (M2M100 model)"),tFe.forEach(t),HHe=i(y),zg=n(y,"LI",{});var aFe=s(zg);lJ=n(aFe,"STRONG",{});var h$r=s(lJ);UHe=r(h$r,"marian"),h$r.forEach(t),JHe=r(aFe," \u2014 "),Qx=n(aFe,"A",{href:!0});var p$r=s(Qx);YHe=r(p$r,"MarianTokenizer"),p$r.forEach(t),KHe=r(aFe," (Marian model)"),aFe.forEach(t),ZHe=i(y),vs=n(y,"LI",{});var uL=s(vs);iJ=n(uL,"STRONG",{});var _$r=s(iJ);eUe=r(_$r,"mbart"),_$r.forEach(t),oUe=r(uL," \u2014 "),Hx=n(uL,"A",{href:!0});var u$r=s(Hx);rUe=r(u$r,"MBartTokenizer"),u$r.forEach(t),tUe=r(uL," or "),Ux=n(uL,"A",{href:!0});var b$r=s(Ux);aUe=r(b$r,"MBartTokenizerFast"),b$r.forEach(t),nUe=r(uL," (mBART model)"),uL.forEach(t),sUe=i(y),Ts=n(y,"LI",{});var bL=s(Ts);dJ=n(bL,"STRONG",{});var v$r=s(dJ);lUe=r(v$r,"mbart50"),v$r.forEach(t),iUe=r(bL," \u2014 "),Jx=n(bL,"A",{href:!0});var T$r=s(Jx);dUe=r(T$r,"MBart50Tokenizer"),T$r.forEach(t),cUe=r(bL," or "),Yx=n(bL,"A",{href:!0});var F$r=s(Yx);fUe=r(F$r,"MBart50TokenizerFast"),F$r.forEach(t),mUe=r(bL," (mBART-50 model)"),bL.forEach(t),gUe=i(y),Wg=n(y,"LI",{});var nFe=s(Wg);cJ=n(nFe,"STRONG",{});var C$r=s(cJ);hUe=r(C$r,"mluke"),C$r.forEach(t),pUe=r(nFe," \u2014 "),Kx=n(nFe,"A",{href:!0});var M$r=s(Kx);_Ue=r(M$r,"MLukeTokenizer"),M$r.forEach(t),uUe=r(nFe," (mLUKE model)"),nFe.forEach(t),bUe=i(y),Fs=n(y,"LI",{});var vL=s(Fs);fJ=n(vL,"STRONG",{});var E$r=s(fJ);vUe=r(E$r,"mobilebert"),E$r.forEach(t),TUe=r(vL," \u2014 "),Zx=n(vL,"A",{href:!0});var y$r=s(Zx);FUe=r(y$r,"MobileBertTokenizer"),y$r.forEach(t),CUe=r(vL," or "),ek=n(vL,"A",{href:!0});var w$r=s(ek);MUe=r(w$r,"MobileBertTokenizerFast"),w$r.forEach(t),EUe=r(vL," (MobileBERT model)"),vL.forEach(t),yUe=i(y),Cs=n(y,"LI",{});var TL=s(Cs);mJ=n(TL,"STRONG",{});var A$r=s(mJ);wUe=r(A$r,"mpnet"),A$r.forEach(t),AUe=r(TL," \u2014 "),ok=n(TL,"A",{href:!0});var L$r=s(ok);LUe=r(L$r,"MPNetTokenizer"),L$r.forEach(t),BUe=r(TL," or "),rk=n(TL,"A",{href:!0});var B$r=s(rk);xUe=r(B$r,"MPNetTokenizerFast"),B$r.forEach(t),kUe=r(TL," (MPNet model)"),TL.forEach(t),RUe=i(y),Ms=n(y,"LI",{});var FL=s(Ms);gJ=n(FL,"STRONG",{});var x$r=s(gJ);SUe=r(x$r,"mt5"),x$r.forEach(t),PUe=r(FL," \u2014 "),tk=n(FL,"A",{href:!0});var k$r=s(tk);$Ue=r(k$r,"MT5Tokenizer"),k$r.forEach(t),IUe=r(FL," or "),ak=n(FL,"A",{href:!0});var R$r=s(ak);jUe=r(R$r,"MT5TokenizerFast"),R$r.forEach(t),DUe=r(FL," (mT5 model)"),FL.forEach(t),NUe=i(y),Es=n(y,"LI",{});var CL=s(Es);hJ=n(CL,"STRONG",{});var S$r=s(hJ);qUe=r(S$r,"openai-gpt"),S$r.forEach(t),OUe=r(CL," \u2014 "),nk=n(CL,"A",{href:!0});var P$r=s(nk);GUe=r(P$r,"OpenAIGPTTokenizer"),P$r.forEach(t),XUe=r(CL," or "),sk=n(CL,"A",{href:!0});var $$r=s(sk);VUe=r($$r,"OpenAIGPTTokenizerFast"),$$r.forEach(t),zUe=r(CL," (OpenAI GPT model)"),CL.forEach(t),WUe=i(y),ys=n(y,"LI",{});var ML=s(ys);pJ=n(ML,"STRONG",{});var I$r=s(pJ);QUe=r(I$r,"pegasus"),I$r.forEach(t),HUe=r(ML," \u2014 "),lk=n(ML,"A",{href:!0});var j$r=s(lk);UUe=r(j$r,"PegasusTokenizer"),j$r.forEach(t),JUe=r(ML," or "),ik=n(ML,"A",{href:!0});var D$r=s(ik);YUe=r(D$r,"PegasusTokenizerFast"),D$r.forEach(t),KUe=r(ML," (Pegasus model)"),ML.forEach(t),ZUe=i(y),Qg=n(y,"LI",{});var sFe=s(Qg);_J=n(sFe,"STRONG",{});var N$r=s(_J);eJe=r(N$r,"perceiver"),N$r.forEach(t),oJe=r(sFe," \u2014 "),dk=n(sFe,"A",{href:!0});var q$r=s(dk);rJe=r(q$r,"PerceiverTokenizer"),q$r.forEach(t),tJe=r(sFe," (Perceiver model)"),sFe.forEach(t),aJe=i(y),Hg=n(y,"LI",{});var lFe=s(Hg);uJ=n(lFe,"STRONG",{});var O$r=s(uJ);nJe=r(O$r,"phobert"),O$r.forEach(t),sJe=r(lFe," \u2014 "),ck=n(lFe,"A",{href:!0});var G$r=s(ck);lJe=r(G$r,"PhobertTokenizer"),G$r.forEach(t),iJe=r(lFe," (PhoBERT model)"),lFe.forEach(t),dJe=i(y),Ug=n(y,"LI",{});var iFe=s(Ug);bJ=n(iFe,"STRONG",{});var X$r=s(bJ);cJe=r(X$r,"plbart"),X$r.forEach(t),fJe=r(iFe," \u2014 "),fk=n(iFe,"A",{href:!0});var V$r=s(fk);mJe=r(V$r,"PLBartTokenizer"),V$r.forEach(t),gJe=r(iFe," (PLBart model)"),iFe.forEach(t),hJe=i(y),Jg=n(y,"LI",{});var dFe=s(Jg);vJ=n(dFe,"STRONG",{});var z$r=s(vJ);pJe=r(z$r,"prophetnet"),z$r.forEach(t),_Je=r(dFe," \u2014 "),mk=n(dFe,"A",{href:!0});var W$r=s(mk);uJe=r(W$r,"ProphetNetTokenizer"),W$r.forEach(t),bJe=r(dFe," (ProphetNet model)"),dFe.forEach(t),vJe=i(y),ws=n(y,"LI",{});var EL=s(ws);TJ=n(EL,"STRONG",{});var Q$r=s(TJ);TJe=r(Q$r,"qdqbert"),Q$r.forEach(t),FJe=r(EL," \u2014 "),gk=n(EL,"A",{href:!0});var H$r=s(gk);CJe=r(H$r,"BertTokenizer"),H$r.forEach(t),MJe=r(EL," or "),hk=n(EL,"A",{href:!0});var U$r=s(hk);EJe=r(U$r,"BertTokenizerFast"),U$r.forEach(t),yJe=r(EL," (QDQBert model)"),EL.forEach(t),wJe=i(y),Yg=n(y,"LI",{});var cFe=s(Yg);FJ=n(cFe,"STRONG",{});var J$r=s(FJ);AJe=r(J$r,"rag"),J$r.forEach(t),LJe=r(cFe," \u2014 "),pk=n(cFe,"A",{href:!0});var Y$r=s(pk);BJe=r(Y$r,"RagTokenizer"),Y$r.forEach(t),xJe=r(cFe," (RAG model)"),cFe.forEach(t),kJe=i(y),As=n(y,"LI",{});var yL=s(As);CJ=n(yL,"STRONG",{});var K$r=s(CJ);RJe=r(K$r,"realm"),K$r.forEach(t),SJe=r(yL," \u2014 "),_k=n(yL,"A",{href:!0});var Z$r=s(_k);PJe=r(Z$r,"RealmTokenizer"),Z$r.forEach(t),$Je=r(yL," or "),uk=n(yL,"A",{href:!0});var eIr=s(uk);IJe=r(eIr,"RealmTokenizerFast"),eIr.forEach(t),jJe=r(yL," (Realm model)"),yL.forEach(t),DJe=i(y),Ls=n(y,"LI",{});var wL=s(Ls);MJ=n(wL,"STRONG",{});var oIr=s(MJ);NJe=r(oIr,"reformer"),oIr.forEach(t),qJe=r(wL," \u2014 "),bk=n(wL,"A",{href:!0});var rIr=s(bk);OJe=r(rIr,"ReformerTokenizer"),rIr.forEach(t),GJe=r(wL," or "),vk=n(wL,"A",{href:!0});var tIr=s(vk);XJe=r(tIr,"ReformerTokenizerFast"),tIr.forEach(t),VJe=r(wL," (Reformer model)"),wL.forEach(t),zJe=i(y),Bs=n(y,"LI",{});var AL=s(Bs);EJ=n(AL,"STRONG",{});var aIr=s(EJ);WJe=r(aIr,"rembert"),aIr.forEach(t),QJe=r(AL," \u2014 "),Tk=n(AL,"A",{href:!0});var nIr=s(Tk);HJe=r(nIr,"RemBertTokenizer"),nIr.forEach(t),UJe=r(AL," or "),Fk=n(AL,"A",{href:!0});var sIr=s(Fk);JJe=r(sIr,"RemBertTokenizerFast"),sIr.forEach(t),YJe=r(AL," (RemBERT model)"),AL.forEach(t),KJe=i(y),xs=n(y,"LI",{});var LL=s(xs);yJ=n(LL,"STRONG",{});var lIr=s(yJ);ZJe=r(lIr,"retribert"),lIr.forEach(t),eYe=r(LL," \u2014 "),Ck=n(LL,"A",{href:!0});var iIr=s(Ck);oYe=r(iIr,"RetriBertTokenizer"),iIr.forEach(t),rYe=r(LL," or "),Mk=n(LL,"A",{href:!0});var dIr=s(Mk);tYe=r(dIr,"RetriBertTokenizerFast"),dIr.forEach(t),aYe=r(LL," (RetriBERT model)"),LL.forEach(t),nYe=i(y),ks=n(y,"LI",{});var BL=s(ks);wJ=n(BL,"STRONG",{});var cIr=s(wJ);sYe=r(cIr,"roberta"),cIr.forEach(t),lYe=r(BL," \u2014 "),Ek=n(BL,"A",{href:!0});var fIr=s(Ek);iYe=r(fIr,"RobertaTokenizer"),fIr.forEach(t),dYe=r(BL," or "),yk=n(BL,"A",{href:!0});var mIr=s(yk);cYe=r(mIr,"RobertaTokenizerFast"),mIr.forEach(t),fYe=r(BL," (RoBERTa model)"),BL.forEach(t),mYe=i(y),Rs=n(y,"LI",{});var xL=s(Rs);AJ=n(xL,"STRONG",{});var gIr=s(AJ);gYe=r(gIr,"roformer"),gIr.forEach(t),hYe=r(xL," \u2014 "),wk=n(xL,"A",{href:!0});var hIr=s(wk);pYe=r(hIr,"RoFormerTokenizer"),hIr.forEach(t),_Ye=r(xL," or "),Ak=n(xL,"A",{href:!0});var pIr=s(Ak);uYe=r(pIr,"RoFormerTokenizerFast"),pIr.forEach(t),bYe=r(xL," (RoFormer model)"),xL.forEach(t),vYe=i(y),Kg=n(y,"LI",{});var fFe=s(Kg);LJ=n(fFe,"STRONG",{});var _Ir=s(LJ);TYe=r(_Ir,"speech_to_text"),_Ir.forEach(t),FYe=r(fFe," \u2014 "),Lk=n(fFe,"A",{href:!0});var uIr=s(Lk);CYe=r(uIr,"Speech2TextTokenizer"),uIr.forEach(t),MYe=r(fFe," (Speech2Text model)"),fFe.forEach(t),EYe=i(y),Zg=n(y,"LI",{});var mFe=s(Zg);BJ=n(mFe,"STRONG",{});var bIr=s(BJ);yYe=r(bIr,"speech_to_text_2"),bIr.forEach(t),wYe=r(mFe," \u2014 "),Bk=n(mFe,"A",{href:!0});var vIr=s(Bk);AYe=r(vIr,"Speech2Text2Tokenizer"),vIr.forEach(t),LYe=r(mFe," (Speech2Text2 model)"),mFe.forEach(t),BYe=i(y),Ss=n(y,"LI",{});var kL=s(Ss);xJ=n(kL,"STRONG",{});var TIr=s(xJ);xYe=r(TIr,"splinter"),TIr.forEach(t),kYe=r(kL," \u2014 "),xk=n(kL,"A",{href:!0});var FIr=s(xk);RYe=r(FIr,"SplinterTokenizer"),FIr.forEach(t),SYe=r(kL," or "),kk=n(kL,"A",{href:!0});var CIr=s(kk);PYe=r(CIr,"SplinterTokenizerFast"),CIr.forEach(t),$Ye=r(kL," (Splinter model)"),kL.forEach(t),IYe=i(y),Ps=n(y,"LI",{});var RL=s(Ps);kJ=n(RL,"STRONG",{});var MIr=s(kJ);jYe=r(MIr,"squeezebert"),MIr.forEach(t),DYe=r(RL," \u2014 "),Rk=n(RL,"A",{href:!0});var EIr=s(Rk);NYe=r(EIr,"SqueezeBertTokenizer"),EIr.forEach(t),qYe=r(RL," or "),Sk=n(RL,"A",{href:!0});var yIr=s(Sk);OYe=r(yIr,"SqueezeBertTokenizerFast"),yIr.forEach(t),GYe=r(RL," (SqueezeBERT model)"),RL.forEach(t),XYe=i(y),$s=n(y,"LI",{});var SL=s($s);RJ=n(SL,"STRONG",{});var wIr=s(RJ);VYe=r(wIr,"t5"),wIr.forEach(t),zYe=r(SL," \u2014 "),Pk=n(SL,"A",{href:!0});var AIr=s(Pk);WYe=r(AIr,"T5Tokenizer"),AIr.forEach(t),QYe=r(SL," or "),$k=n(SL,"A",{href:!0});var LIr=s($k);HYe=r(LIr,"T5TokenizerFast"),LIr.forEach(t),UYe=r(SL," (T5 model)"),SL.forEach(t),JYe=i(y),eh=n(y,"LI",{});var gFe=s(eh);SJ=n(gFe,"STRONG",{});var BIr=s(SJ);YYe=r(BIr,"tapas"),BIr.forEach(t),KYe=r(gFe," \u2014 "),Ik=n(gFe,"A",{href:!0});var xIr=s(Ik);ZYe=r(xIr,"TapasTokenizer"),xIr.forEach(t),eKe=r(gFe," (TAPAS model)"),gFe.forEach(t),oKe=i(y),oh=n(y,"LI",{});var hFe=s(oh);PJ=n(hFe,"STRONG",{});var kIr=s(PJ);rKe=r(kIr,"transfo-xl"),kIr.forEach(t),tKe=r(hFe," \u2014 "),jk=n(hFe,"A",{href:!0});var RIr=s(jk);aKe=r(RIr,"TransfoXLTokenizer"),RIr.forEach(t),nKe=r(hFe," (Transformer-XL model)"),hFe.forEach(t),sKe=i(y),rh=n(y,"LI",{});var pFe=s(rh);$J=n(pFe,"STRONG",{});var SIr=s($J);lKe=r(SIr,"wav2vec2"),SIr.forEach(t),iKe=r(pFe," \u2014 "),Dk=n(pFe,"A",{href:!0});var PIr=s(Dk);dKe=r(PIr,"Wav2Vec2CTCTokenizer"),PIr.forEach(t),cKe=r(pFe," (Wav2Vec2 model)"),pFe.forEach(t),fKe=i(y),th=n(y,"LI",{});var _Fe=s(th);IJ=n(_Fe,"STRONG",{});var $Ir=s(IJ);mKe=r($Ir,"wav2vec2_phoneme"),$Ir.forEach(t),gKe=r(_Fe," \u2014 "),Nk=n(_Fe,"A",{href:!0});var IIr=s(Nk);hKe=r(IIr,"Wav2Vec2PhonemeCTCTokenizer"),IIr.forEach(t),pKe=r(_Fe," (Wav2Vec2Phoneme model)"),_Fe.forEach(t),_Ke=i(y),Is=n(y,"LI",{});var PL=s(Is);jJ=n(PL,"STRONG",{});var jIr=s(jJ);uKe=r(jIr,"xglm"),jIr.forEach(t),bKe=r(PL," \u2014 "),qk=n(PL,"A",{href:!0});var DIr=s(qk);vKe=r(DIr,"XGLMTokenizer"),DIr.forEach(t),TKe=r(PL," or "),Ok=n(PL,"A",{href:!0});var NIr=s(Ok);FKe=r(NIr,"XGLMTokenizerFast"),NIr.forEach(t),CKe=r(PL," (XGLM model)"),PL.forEach(t),MKe=i(y),ah=n(y,"LI",{});var uFe=s(ah);DJ=n(uFe,"STRONG",{});var qIr=s(DJ);EKe=r(qIr,"xlm"),qIr.forEach(t),yKe=r(uFe," \u2014 "),Gk=n(uFe,"A",{href:!0});var OIr=s(Gk);wKe=r(OIr,"XLMTokenizer"),OIr.forEach(t),AKe=r(uFe," (XLM model)"),uFe.forEach(t),LKe=i(y),nh=n(y,"LI",{});var bFe=s(nh);NJ=n(bFe,"STRONG",{});var GIr=s(NJ);BKe=r(GIr,"xlm-prophetnet"),GIr.forEach(t),xKe=r(bFe," \u2014 "),Xk=n(bFe,"A",{href:!0});var XIr=s(Xk);kKe=r(XIr,"XLMProphetNetTokenizer"),XIr.forEach(t),RKe=r(bFe," (XLMProphetNet model)"),bFe.forEach(t),SKe=i(y),js=n(y,"LI",{});var $L=s(js);qJ=n($L,"STRONG",{});var VIr=s(qJ);PKe=r(VIr,"xlm-roberta"),VIr.forEach(t),$Ke=r($L," \u2014 "),Vk=n($L,"A",{href:!0});var zIr=s(Vk);IKe=r(zIr,"XLMRobertaTokenizer"),zIr.forEach(t),jKe=r($L," or "),zk=n($L,"A",{href:!0});var WIr=s(zk);DKe=r(WIr,"XLMRobertaTokenizerFast"),WIr.forEach(t),NKe=r($L," (XLM-RoBERTa model)"),$L.forEach(t),qKe=i(y),Ds=n(y,"LI",{});var IL=s(Ds);OJ=n(IL,"STRONG",{});var QIr=s(OJ);OKe=r(QIr,"xlnet"),QIr.forEach(t),GKe=r(IL," \u2014 "),Wk=n(IL,"A",{href:!0});var HIr=s(Wk);XKe=r(HIr,"XLNetTokenizer"),HIr.forEach(t),VKe=r(IL," or "),Qk=n(IL,"A",{href:!0});var UIr=s(Qk);zKe=r(UIr,"XLNetTokenizerFast"),UIr.forEach(t),WKe=r(IL," (XLNet model)"),IL.forEach(t),y.forEach(t),QKe=i(ha),GJ=n(ha,"P",{});var JIr=s(GJ);HKe=r(JIr,"Examples:"),JIr.forEach(t),UKe=i(ha),m(f4.$$.fragment,ha),ha.forEach(t),JKe=i(Xs),sh=n(Xs,"DIV",{class:!0});var vRe=s(sh);m(m4.$$.fragment,vRe),YKe=i(vRe),XJ=n(vRe,"P",{});var YIr=s(XJ);KKe=r(YIr,"Register a new tokenizer in this mapping."),YIr.forEach(t),vRe.forEach(t),Xs.forEach(t),pxe=i(d),Hi=n(d,"H2",{class:!0});var TRe=s(Hi);lh=n(TRe,"A",{id:!0,class:!0,href:!0});var KIr=s(lh);VJ=n(KIr,"SPAN",{});var ZIr=s(VJ);m(g4.$$.fragment,ZIr),ZIr.forEach(t),KIr.forEach(t),ZKe=i(TRe),zJ=n(TRe,"SPAN",{});var ejr=s(zJ);eZe=r(ejr,"AutoFeatureExtractor"),ejr.forEach(t),TRe.forEach(t),_xe=i(d),Ho=n(d,"DIV",{class:!0});var Vs=s(Ho);m(h4.$$.fragment,Vs),oZe=i(Vs),p4=n(Vs,"P",{});var FRe=s(p4);rZe=r(FRe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Hk=n(FRe,"A",{href:!0});var ojr=s(Hk);tZe=r(ojr,"AutoFeatureExtractor.from_pretrained()"),ojr.forEach(t),aZe=r(FRe," class method."),FRe.forEach(t),nZe=i(Vs),_4=n(Vs,"P",{});var CRe=s(_4);sZe=r(CRe,"This class cannot be instantiated directly using "),WJ=n(CRe,"CODE",{});var rjr=s(WJ);lZe=r(rjr,"__init__()"),rjr.forEach(t),iZe=r(CRe," (throws an error)."),CRe.forEach(t),dZe=i(Vs),$e=n(Vs,"DIV",{class:!0});var Dt=s($e);m(u4.$$.fragment,Dt),cZe=i(Dt),QJ=n(Dt,"P",{});var tjr=s(QJ);fZe=r(tjr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),tjr.forEach(t),mZe=i(Dt),Xa=n(Dt,"P",{});var JC=s(Xa);gZe=r(JC,"The feature extractor class to instantiate is selected based on the "),HJ=n(JC,"CODE",{});var ajr=s(HJ);hZe=r(ajr,"model_type"),ajr.forEach(t),pZe=r(JC,` property of the config object
(either passed as an argument or loaded from `),UJ=n(JC,"CODE",{});var njr=s(UJ);_Ze=r(njr,"pretrained_model_name_or_path"),njr.forEach(t),uZe=r(JC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),JJ=n(JC,"CODE",{});var sjr=s(JJ);bZe=r(sjr,"pretrained_model_name_or_path"),sjr.forEach(t),vZe=r(JC,":"),JC.forEach(t),TZe=i(Dt),ae=n(Dt,"UL",{});var le=s(ae);ih=n(le,"LI",{});var vFe=s(ih);YJ=n(vFe,"STRONG",{});var ljr=s(YJ);FZe=r(ljr,"beit"),ljr.forEach(t),CZe=r(vFe," \u2014 "),Uk=n(vFe,"A",{href:!0});var ijr=s(Uk);MZe=r(ijr,"BeitFeatureExtractor"),ijr.forEach(t),EZe=r(vFe," (BEiT model)"),vFe.forEach(t),yZe=i(le),dh=n(le,"LI",{});var TFe=s(dh);KJ=n(TFe,"STRONG",{});var djr=s(KJ);wZe=r(djr,"clip"),djr.forEach(t),AZe=r(TFe," \u2014 "),Jk=n(TFe,"A",{href:!0});var cjr=s(Jk);LZe=r(cjr,"CLIPFeatureExtractor"),cjr.forEach(t),BZe=r(TFe," (CLIP model)"),TFe.forEach(t),xZe=i(le),ch=n(le,"LI",{});var FFe=s(ch);ZJ=n(FFe,"STRONG",{});var fjr=s(ZJ);kZe=r(fjr,"convnext"),fjr.forEach(t),RZe=r(FFe," \u2014 "),Yk=n(FFe,"A",{href:!0});var mjr=s(Yk);SZe=r(mjr,"ConvNextFeatureExtractor"),mjr.forEach(t),PZe=r(FFe," (ConvNext model)"),FFe.forEach(t),$Ze=i(le),fh=n(le,"LI",{});var CFe=s(fh);eY=n(CFe,"STRONG",{});var gjr=s(eY);IZe=r(gjr,"deit"),gjr.forEach(t),jZe=r(CFe," \u2014 "),Kk=n(CFe,"A",{href:!0});var hjr=s(Kk);DZe=r(hjr,"DeiTFeatureExtractor"),hjr.forEach(t),NZe=r(CFe," (DeiT model)"),CFe.forEach(t),qZe=i(le),mh=n(le,"LI",{});var MFe=s(mh);oY=n(MFe,"STRONG",{});var pjr=s(oY);OZe=r(pjr,"detr"),pjr.forEach(t),GZe=r(MFe," \u2014 "),Zk=n(MFe,"A",{href:!0});var _jr=s(Zk);XZe=r(_jr,"DetrFeatureExtractor"),_jr.forEach(t),VZe=r(MFe," (DETR model)"),MFe.forEach(t),zZe=i(le),gh=n(le,"LI",{});var EFe=s(gh);rY=n(EFe,"STRONG",{});var ujr=s(rY);WZe=r(ujr,"hubert"),ujr.forEach(t),QZe=r(EFe," \u2014 "),eR=n(EFe,"A",{href:!0});var bjr=s(eR);HZe=r(bjr,"Wav2Vec2FeatureExtractor"),bjr.forEach(t),UZe=r(EFe," (Hubert model)"),EFe.forEach(t),JZe=i(le),hh=n(le,"LI",{});var yFe=s(hh);tY=n(yFe,"STRONG",{});var vjr=s(tY);YZe=r(vjr,"layoutlmv2"),vjr.forEach(t),KZe=r(yFe," \u2014 "),oR=n(yFe,"A",{href:!0});var Tjr=s(oR);ZZe=r(Tjr,"LayoutLMv2FeatureExtractor"),Tjr.forEach(t),eeo=r(yFe," (LayoutLMv2 model)"),yFe.forEach(t),oeo=i(le),ph=n(le,"LI",{});var wFe=s(ph);aY=n(wFe,"STRONG",{});var Fjr=s(aY);reo=r(Fjr,"maskformer"),Fjr.forEach(t),teo=r(wFe," \u2014 "),rR=n(wFe,"A",{href:!0});var Cjr=s(rR);aeo=r(Cjr,"MaskFormerFeatureExtractor"),Cjr.forEach(t),neo=r(wFe," (MaskFormer model)"),wFe.forEach(t),seo=i(le),_h=n(le,"LI",{});var AFe=s(_h);nY=n(AFe,"STRONG",{});var Mjr=s(nY);leo=r(Mjr,"perceiver"),Mjr.forEach(t),ieo=r(AFe," \u2014 "),tR=n(AFe,"A",{href:!0});var Ejr=s(tR);deo=r(Ejr,"PerceiverFeatureExtractor"),Ejr.forEach(t),ceo=r(AFe," (Perceiver model)"),AFe.forEach(t),feo=i(le),uh=n(le,"LI",{});var LFe=s(uh);sY=n(LFe,"STRONG",{});var yjr=s(sY);meo=r(yjr,"poolformer"),yjr.forEach(t),geo=r(LFe," \u2014 "),aR=n(LFe,"A",{href:!0});var wjr=s(aR);heo=r(wjr,"PoolFormerFeatureExtractor"),wjr.forEach(t),peo=r(LFe," (PoolFormer model)"),LFe.forEach(t),_eo=i(le),bh=n(le,"LI",{});var BFe=s(bh);lY=n(BFe,"STRONG",{});var Ajr=s(lY);ueo=r(Ajr,"segformer"),Ajr.forEach(t),beo=r(BFe," \u2014 "),nR=n(BFe,"A",{href:!0});var Ljr=s(nR);veo=r(Ljr,"SegformerFeatureExtractor"),Ljr.forEach(t),Teo=r(BFe," (SegFormer model)"),BFe.forEach(t),Feo=i(le),vh=n(le,"LI",{});var xFe=s(vh);iY=n(xFe,"STRONG",{});var Bjr=s(iY);Ceo=r(Bjr,"speech_to_text"),Bjr.forEach(t),Meo=r(xFe," \u2014 "),sR=n(xFe,"A",{href:!0});var xjr=s(sR);Eeo=r(xjr,"Speech2TextFeatureExtractor"),xjr.forEach(t),yeo=r(xFe," (Speech2Text model)"),xFe.forEach(t),weo=i(le),Th=n(le,"LI",{});var kFe=s(Th);dY=n(kFe,"STRONG",{});var kjr=s(dY);Aeo=r(kjr,"swin"),kjr.forEach(t),Leo=r(kFe," \u2014 "),lR=n(kFe,"A",{href:!0});var Rjr=s(lR);Beo=r(Rjr,"ViTFeatureExtractor"),Rjr.forEach(t),xeo=r(kFe," (Swin model)"),kFe.forEach(t),keo=i(le),Fh=n(le,"LI",{});var RFe=s(Fh);cY=n(RFe,"STRONG",{});var Sjr=s(cY);Reo=r(Sjr,"vit"),Sjr.forEach(t),Seo=r(RFe," \u2014 "),iR=n(RFe,"A",{href:!0});var Pjr=s(iR);Peo=r(Pjr,"ViTFeatureExtractor"),Pjr.forEach(t),$eo=r(RFe," (ViT model)"),RFe.forEach(t),Ieo=i(le),Ch=n(le,"LI",{});var SFe=s(Ch);fY=n(SFe,"STRONG",{});var $jr=s(fY);jeo=r($jr,"vit_mae"),$jr.forEach(t),Deo=r(SFe," \u2014 "),dR=n(SFe,"A",{href:!0});var Ijr=s(dR);Neo=r(Ijr,"ViTFeatureExtractor"),Ijr.forEach(t),qeo=r(SFe," (ViTMAE model)"),SFe.forEach(t),Oeo=i(le),Mh=n(le,"LI",{});var PFe=s(Mh);mY=n(PFe,"STRONG",{});var jjr=s(mY);Geo=r(jjr,"wav2vec2"),jjr.forEach(t),Xeo=r(PFe," \u2014 "),cR=n(PFe,"A",{href:!0});var Djr=s(cR);Veo=r(Djr,"Wav2Vec2FeatureExtractor"),Djr.forEach(t),zeo=r(PFe," (Wav2Vec2 model)"),PFe.forEach(t),le.forEach(t),Weo=i(Dt),m(Eh.$$.fragment,Dt),Qeo=i(Dt),gY=n(Dt,"P",{});var Njr=s(gY);Heo=r(Njr,"Examples:"),Njr.forEach(t),Ueo=i(Dt),m(b4.$$.fragment,Dt),Dt.forEach(t),Jeo=i(Vs),yh=n(Vs,"DIV",{class:!0});var MRe=s(yh);m(v4.$$.fragment,MRe),Yeo=i(MRe),hY=n(MRe,"P",{});var qjr=s(hY);Keo=r(qjr,"Register a new feature extractor for this class."),qjr.forEach(t),MRe.forEach(t),Vs.forEach(t),uxe=i(d),Ui=n(d,"H2",{class:!0});var ERe=s(Ui);wh=n(ERe,"A",{id:!0,class:!0,href:!0});var Ojr=s(wh);pY=n(Ojr,"SPAN",{});var Gjr=s(pY);m(T4.$$.fragment,Gjr),Gjr.forEach(t),Ojr.forEach(t),Zeo=i(ERe),_Y=n(ERe,"SPAN",{});var Xjr=s(_Y);eoo=r(Xjr,"AutoProcessor"),Xjr.forEach(t),ERe.forEach(t),bxe=i(d),Uo=n(d,"DIV",{class:!0});var zs=s(Uo);m(F4.$$.fragment,zs),ooo=i(zs),C4=n(zs,"P",{});var yRe=s(C4);roo=r(yRe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),fR=n(yRe,"A",{href:!0});var Vjr=s(fR);too=r(Vjr,"AutoProcessor.from_pretrained()"),Vjr.forEach(t),aoo=r(yRe," class method."),yRe.forEach(t),noo=i(zs),M4=n(zs,"P",{});var wRe=s(M4);soo=r(wRe,"This class cannot be instantiated directly using "),uY=n(wRe,"CODE",{});var zjr=s(uY);loo=r(zjr,"__init__()"),zjr.forEach(t),ioo=r(wRe," (throws an error)."),wRe.forEach(t),doo=i(zs),Ie=n(zs,"DIV",{class:!0});var Nt=s(Ie);m(E4.$$.fragment,Nt),coo=i(Nt),bY=n(Nt,"P",{});var Wjr=s(bY);foo=r(Wjr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Wjr.forEach(t),moo=i(Nt),Ji=n(Nt,"P",{});var Ez=s(Ji);goo=r(Ez,"The processor class to instantiate is selected based on the "),vY=n(Ez,"CODE",{});var Qjr=s(vY);hoo=r(Qjr,"model_type"),Qjr.forEach(t),poo=r(Ez,` property of the config object (either
passed as an argument or loaded from `),TY=n(Ez,"CODE",{});var Hjr=s(TY);_oo=r(Hjr,"pretrained_model_name_or_path"),Hjr.forEach(t),uoo=r(Ez," if possible):"),Ez.forEach(t),boo=i(Nt),Be=n(Nt,"UL",{});var No=s(Be);Ah=n(No,"LI",{});var $Fe=s(Ah);FY=n($Fe,"STRONG",{});var Ujr=s(FY);voo=r(Ujr,"clip"),Ujr.forEach(t),Too=r($Fe," \u2014 "),mR=n($Fe,"A",{href:!0});var Jjr=s(mR);Foo=r(Jjr,"CLIPProcessor"),Jjr.forEach(t),Coo=r($Fe," (CLIP model)"),$Fe.forEach(t),Moo=i(No),Lh=n(No,"LI",{});var IFe=s(Lh);CY=n(IFe,"STRONG",{});var Yjr=s(CY);Eoo=r(Yjr,"layoutlmv2"),Yjr.forEach(t),yoo=r(IFe," \u2014 "),gR=n(IFe,"A",{href:!0});var Kjr=s(gR);woo=r(Kjr,"LayoutLMv2Processor"),Kjr.forEach(t),Aoo=r(IFe," (LayoutLMv2 model)"),IFe.forEach(t),Loo=i(No),Bh=n(No,"LI",{});var jFe=s(Bh);MY=n(jFe,"STRONG",{});var Zjr=s(MY);Boo=r(Zjr,"layoutxlm"),Zjr.forEach(t),xoo=r(jFe," \u2014 "),hR=n(jFe,"A",{href:!0});var eDr=s(hR);koo=r(eDr,"LayoutXLMProcessor"),eDr.forEach(t),Roo=r(jFe," (LayoutXLM model)"),jFe.forEach(t),Soo=i(No),xh=n(No,"LI",{});var DFe=s(xh);EY=n(DFe,"STRONG",{});var oDr=s(EY);Poo=r(oDr,"speech_to_text"),oDr.forEach(t),$oo=r(DFe," \u2014 "),pR=n(DFe,"A",{href:!0});var rDr=s(pR);Ioo=r(rDr,"Speech2TextProcessor"),rDr.forEach(t),joo=r(DFe," (Speech2Text model)"),DFe.forEach(t),Doo=i(No),kh=n(No,"LI",{});var NFe=s(kh);yY=n(NFe,"STRONG",{});var tDr=s(yY);Noo=r(tDr,"speech_to_text_2"),tDr.forEach(t),qoo=r(NFe," \u2014 "),_R=n(NFe,"A",{href:!0});var aDr=s(_R);Ooo=r(aDr,"Speech2Text2Processor"),aDr.forEach(t),Goo=r(NFe," (Speech2Text2 model)"),NFe.forEach(t),Xoo=i(No),Rh=n(No,"LI",{});var qFe=s(Rh);wY=n(qFe,"STRONG",{});var nDr=s(wY);Voo=r(nDr,"trocr"),nDr.forEach(t),zoo=r(qFe," \u2014 "),uR=n(qFe,"A",{href:!0});var sDr=s(uR);Woo=r(sDr,"TrOCRProcessor"),sDr.forEach(t),Qoo=r(qFe," (TrOCR model)"),qFe.forEach(t),Hoo=i(No),Sh=n(No,"LI",{});var OFe=s(Sh);AY=n(OFe,"STRONG",{});var lDr=s(AY);Uoo=r(lDr,"vision-text-dual-encoder"),lDr.forEach(t),Joo=r(OFe," \u2014 "),bR=n(OFe,"A",{href:!0});var iDr=s(bR);Yoo=r(iDr,"VisionTextDualEncoderProcessor"),iDr.forEach(t),Koo=r(OFe," (VisionTextDualEncoder model)"),OFe.forEach(t),Zoo=i(No),Ph=n(No,"LI",{});var GFe=s(Ph);LY=n(GFe,"STRONG",{});var dDr=s(LY);ero=r(dDr,"wav2vec2"),dDr.forEach(t),oro=r(GFe," \u2014 "),vR=n(GFe,"A",{href:!0});var cDr=s(vR);rro=r(cDr,"Wav2Vec2Processor"),cDr.forEach(t),tro=r(GFe," (Wav2Vec2 model)"),GFe.forEach(t),No.forEach(t),aro=i(Nt),m($h.$$.fragment,Nt),nro=i(Nt),BY=n(Nt,"P",{});var fDr=s(BY);sro=r(fDr,"Examples:"),fDr.forEach(t),lro=i(Nt),m(y4.$$.fragment,Nt),Nt.forEach(t),iro=i(zs),Ih=n(zs,"DIV",{class:!0});var ARe=s(Ih);m(w4.$$.fragment,ARe),dro=i(ARe),xY=n(ARe,"P",{});var mDr=s(xY);cro=r(mDr,"Register a new processor for this class."),mDr.forEach(t),ARe.forEach(t),zs.forEach(t),vxe=i(d),Yi=n(d,"H2",{class:!0});var LRe=s(Yi);jh=n(LRe,"A",{id:!0,class:!0,href:!0});var gDr=s(jh);kY=n(gDr,"SPAN",{});var hDr=s(kY);m(A4.$$.fragment,hDr),hDr.forEach(t),gDr.forEach(t),fro=i(LRe),RY=n(LRe,"SPAN",{});var pDr=s(RY);mro=r(pDr,"AutoModel"),pDr.forEach(t),LRe.forEach(t),Txe=i(d),Jo=n(d,"DIV",{class:!0});var Ws=s(Jo);m(L4.$$.fragment,Ws),gro=i(Ws),Ki=n(Ws,"P",{});var yz=s(Ki);hro=r(yz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SY=n(yz,"CODE",{});var _Dr=s(SY);pro=r(_Dr,"from_pretrained()"),_Dr.forEach(t),_ro=r(yz,"class method or the "),PY=n(yz,"CODE",{});var uDr=s(PY);uro=r(uDr,"from_config()"),uDr.forEach(t),bro=r(yz,`class
method.`),yz.forEach(t),vro=i(Ws),B4=n(Ws,"P",{});var BRe=s(B4);Tro=r(BRe,"This class cannot be instantiated directly using "),$Y=n(BRe,"CODE",{});var bDr=s($Y);Fro=r(bDr,"__init__()"),bDr.forEach(t),Cro=r(BRe," (throws an error)."),BRe.forEach(t),Mro=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(x4.$$.fragment,Qs),Ero=i(Qs),IY=n(Qs,"P",{});var vDr=s(IY);yro=r(vDr,"Instantiates one of the base model classes of the library from a configuration."),vDr.forEach(t),wro=i(Qs),Zi=n(Qs,"P",{});var wz=s(Zi);Aro=r(wz,`Note:
Loading a model from its configuration file does `),jY=n(wz,"STRONG",{});var TDr=s(jY);Lro=r(TDr,"not"),TDr.forEach(t),Bro=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(wz,"CODE",{});var FDr=s(DY);xro=r(FDr,"from_pretrained()"),FDr.forEach(t),kro=r(wz,"to load the model weights."),wz.forEach(t),Rro=i(Qs),NY=n(Qs,"P",{});var CDr=s(NY);Sro=r(CDr,"Examples:"),CDr.forEach(t),Pro=i(Qs),m(k4.$$.fragment,Qs),Qs.forEach(t),$ro=i(Ws),je=n(Ws,"DIV",{class:!0});var qt=s(je);m(R4.$$.fragment,qt),Iro=i(qt),qY=n(qt,"P",{});var MDr=s(qY);jro=r(MDr,"Instantiate one of the base model classes of the library from a pretrained model."),MDr.forEach(t),Dro=i(qt),Va=n(qt,"P",{});var YC=s(Va);Nro=r(YC,"The model class to instantiate is selected based on the "),OY=n(YC,"CODE",{});var EDr=s(OY);qro=r(EDr,"model_type"),EDr.forEach(t),Oro=r(YC,` property of the config object (either
passed as an argument or loaded from `),GY=n(YC,"CODE",{});var yDr=s(GY);Gro=r(yDr,"pretrained_model_name_or_path"),yDr.forEach(t),Xro=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XY=n(YC,"CODE",{});var wDr=s(XY);Vro=r(wDr,"pretrained_model_name_or_path"),wDr.forEach(t),zro=r(YC,":"),YC.forEach(t),Wro=i(qt),F=n(qt,"UL",{});var C=s(F);Dh=n(C,"LI",{});var XFe=s(Dh);VY=n(XFe,"STRONG",{});var ADr=s(VY);Qro=r(ADr,"albert"),ADr.forEach(t),Hro=r(XFe," \u2014 "),TR=n(XFe,"A",{href:!0});var LDr=s(TR);Uro=r(LDr,"AlbertModel"),LDr.forEach(t),Jro=r(XFe," (ALBERT model)"),XFe.forEach(t),Yro=i(C),Nh=n(C,"LI",{});var VFe=s(Nh);zY=n(VFe,"STRONG",{});var BDr=s(zY);Kro=r(BDr,"bart"),BDr.forEach(t),Zro=r(VFe," \u2014 "),FR=n(VFe,"A",{href:!0});var xDr=s(FR);eto=r(xDr,"BartModel"),xDr.forEach(t),oto=r(VFe," (BART model)"),VFe.forEach(t),rto=i(C),qh=n(C,"LI",{});var zFe=s(qh);WY=n(zFe,"STRONG",{});var kDr=s(WY);tto=r(kDr,"beit"),kDr.forEach(t),ato=r(zFe," \u2014 "),CR=n(zFe,"A",{href:!0});var RDr=s(CR);nto=r(RDr,"BeitModel"),RDr.forEach(t),sto=r(zFe," (BEiT model)"),zFe.forEach(t),lto=i(C),Oh=n(C,"LI",{});var WFe=s(Oh);QY=n(WFe,"STRONG",{});var SDr=s(QY);ito=r(SDr,"bert"),SDr.forEach(t),dto=r(WFe," \u2014 "),MR=n(WFe,"A",{href:!0});var PDr=s(MR);cto=r(PDr,"BertModel"),PDr.forEach(t),fto=r(WFe," (BERT model)"),WFe.forEach(t),mto=i(C),Gh=n(C,"LI",{});var QFe=s(Gh);HY=n(QFe,"STRONG",{});var $Dr=s(HY);gto=r($Dr,"bert-generation"),$Dr.forEach(t),hto=r(QFe," \u2014 "),ER=n(QFe,"A",{href:!0});var IDr=s(ER);pto=r(IDr,"BertGenerationEncoder"),IDr.forEach(t),_to=r(QFe," (Bert Generation model)"),QFe.forEach(t),uto=i(C),Xh=n(C,"LI",{});var HFe=s(Xh);UY=n(HFe,"STRONG",{});var jDr=s(UY);bto=r(jDr,"big_bird"),jDr.forEach(t),vto=r(HFe," \u2014 "),yR=n(HFe,"A",{href:!0});var DDr=s(yR);Tto=r(DDr,"BigBirdModel"),DDr.forEach(t),Fto=r(HFe," (BigBird model)"),HFe.forEach(t),Cto=i(C),Vh=n(C,"LI",{});var UFe=s(Vh);JY=n(UFe,"STRONG",{});var NDr=s(JY);Mto=r(NDr,"bigbird_pegasus"),NDr.forEach(t),Eto=r(UFe," \u2014 "),wR=n(UFe,"A",{href:!0});var qDr=s(wR);yto=r(qDr,"BigBirdPegasusModel"),qDr.forEach(t),wto=r(UFe," (BigBirdPegasus model)"),UFe.forEach(t),Ato=i(C),zh=n(C,"LI",{});var JFe=s(zh);YY=n(JFe,"STRONG",{});var ODr=s(YY);Lto=r(ODr,"blenderbot"),ODr.forEach(t),Bto=r(JFe," \u2014 "),AR=n(JFe,"A",{href:!0});var GDr=s(AR);xto=r(GDr,"BlenderbotModel"),GDr.forEach(t),kto=r(JFe," (Blenderbot model)"),JFe.forEach(t),Rto=i(C),Wh=n(C,"LI",{});var YFe=s(Wh);KY=n(YFe,"STRONG",{});var XDr=s(KY);Sto=r(XDr,"blenderbot-small"),XDr.forEach(t),Pto=r(YFe," \u2014 "),LR=n(YFe,"A",{href:!0});var VDr=s(LR);$to=r(VDr,"BlenderbotSmallModel"),VDr.forEach(t),Ito=r(YFe," (BlenderbotSmall model)"),YFe.forEach(t),jto=i(C),Qh=n(C,"LI",{});var KFe=s(Qh);ZY=n(KFe,"STRONG",{});var zDr=s(ZY);Dto=r(zDr,"camembert"),zDr.forEach(t),Nto=r(KFe," \u2014 "),BR=n(KFe,"A",{href:!0});var WDr=s(BR);qto=r(WDr,"CamembertModel"),WDr.forEach(t),Oto=r(KFe," (CamemBERT model)"),KFe.forEach(t),Gto=i(C),Hh=n(C,"LI",{});var ZFe=s(Hh);eK=n(ZFe,"STRONG",{});var QDr=s(eK);Xto=r(QDr,"canine"),QDr.forEach(t),Vto=r(ZFe," \u2014 "),xR=n(ZFe,"A",{href:!0});var HDr=s(xR);zto=r(HDr,"CanineModel"),HDr.forEach(t),Wto=r(ZFe," (Canine model)"),ZFe.forEach(t),Qto=i(C),Uh=n(C,"LI",{});var e9e=s(Uh);oK=n(e9e,"STRONG",{});var UDr=s(oK);Hto=r(UDr,"clip"),UDr.forEach(t),Uto=r(e9e," \u2014 "),kR=n(e9e,"A",{href:!0});var JDr=s(kR);Jto=r(JDr,"CLIPModel"),JDr.forEach(t),Yto=r(e9e," (CLIP model)"),e9e.forEach(t),Kto=i(C),Jh=n(C,"LI",{});var o9e=s(Jh);rK=n(o9e,"STRONG",{});var YDr=s(rK);Zto=r(YDr,"convbert"),YDr.forEach(t),eao=r(o9e," \u2014 "),RR=n(o9e,"A",{href:!0});var KDr=s(RR);oao=r(KDr,"ConvBertModel"),KDr.forEach(t),rao=r(o9e," (ConvBERT model)"),o9e.forEach(t),tao=i(C),Yh=n(C,"LI",{});var r9e=s(Yh);tK=n(r9e,"STRONG",{});var ZDr=s(tK);aao=r(ZDr,"convnext"),ZDr.forEach(t),nao=r(r9e," \u2014 "),SR=n(r9e,"A",{href:!0});var eNr=s(SR);sao=r(eNr,"ConvNextModel"),eNr.forEach(t),lao=r(r9e," (ConvNext model)"),r9e.forEach(t),iao=i(C),Kh=n(C,"LI",{});var t9e=s(Kh);aK=n(t9e,"STRONG",{});var oNr=s(aK);dao=r(oNr,"ctrl"),oNr.forEach(t),cao=r(t9e," \u2014 "),PR=n(t9e,"A",{href:!0});var rNr=s(PR);fao=r(rNr,"CTRLModel"),rNr.forEach(t),mao=r(t9e," (CTRL model)"),t9e.forEach(t),gao=i(C),Zh=n(C,"LI",{});var a9e=s(Zh);nK=n(a9e,"STRONG",{});var tNr=s(nK);hao=r(tNr,"data2vec-audio"),tNr.forEach(t),pao=r(a9e," \u2014 "),$R=n(a9e,"A",{href:!0});var aNr=s($R);_ao=r(aNr,"Data2VecAudioModel"),aNr.forEach(t),uao=r(a9e," (Data2VecAudio model)"),a9e.forEach(t),bao=i(C),ep=n(C,"LI",{});var n9e=s(ep);sK=n(n9e,"STRONG",{});var nNr=s(sK);vao=r(nNr,"data2vec-text"),nNr.forEach(t),Tao=r(n9e," \u2014 "),IR=n(n9e,"A",{href:!0});var sNr=s(IR);Fao=r(sNr,"Data2VecTextModel"),sNr.forEach(t),Cao=r(n9e," (Data2VecText model)"),n9e.forEach(t),Mao=i(C),op=n(C,"LI",{});var s9e=s(op);lK=n(s9e,"STRONG",{});var lNr=s(lK);Eao=r(lNr,"deberta"),lNr.forEach(t),yao=r(s9e," \u2014 "),jR=n(s9e,"A",{href:!0});var iNr=s(jR);wao=r(iNr,"DebertaModel"),iNr.forEach(t),Aao=r(s9e," (DeBERTa model)"),s9e.forEach(t),Lao=i(C),rp=n(C,"LI",{});var l9e=s(rp);iK=n(l9e,"STRONG",{});var dNr=s(iK);Bao=r(dNr,"deberta-v2"),dNr.forEach(t),xao=r(l9e," \u2014 "),DR=n(l9e,"A",{href:!0});var cNr=s(DR);kao=r(cNr,"DebertaV2Model"),cNr.forEach(t),Rao=r(l9e," (DeBERTa-v2 model)"),l9e.forEach(t),Sao=i(C),tp=n(C,"LI",{});var i9e=s(tp);dK=n(i9e,"STRONG",{});var fNr=s(dK);Pao=r(fNr,"deit"),fNr.forEach(t),$ao=r(i9e," \u2014 "),NR=n(i9e,"A",{href:!0});var mNr=s(NR);Iao=r(mNr,"DeiTModel"),mNr.forEach(t),jao=r(i9e," (DeiT model)"),i9e.forEach(t),Dao=i(C),ap=n(C,"LI",{});var d9e=s(ap);cK=n(d9e,"STRONG",{});var gNr=s(cK);Nao=r(gNr,"detr"),gNr.forEach(t),qao=r(d9e," \u2014 "),qR=n(d9e,"A",{href:!0});var hNr=s(qR);Oao=r(hNr,"DetrModel"),hNr.forEach(t),Gao=r(d9e," (DETR model)"),d9e.forEach(t),Xao=i(C),np=n(C,"LI",{});var c9e=s(np);fK=n(c9e,"STRONG",{});var pNr=s(fK);Vao=r(pNr,"distilbert"),pNr.forEach(t),zao=r(c9e," \u2014 "),OR=n(c9e,"A",{href:!0});var _Nr=s(OR);Wao=r(_Nr,"DistilBertModel"),_Nr.forEach(t),Qao=r(c9e," (DistilBERT model)"),c9e.forEach(t),Hao=i(C),sp=n(C,"LI",{});var f9e=s(sp);mK=n(f9e,"STRONG",{});var uNr=s(mK);Uao=r(uNr,"dpr"),uNr.forEach(t),Jao=r(f9e," \u2014 "),GR=n(f9e,"A",{href:!0});var bNr=s(GR);Yao=r(bNr,"DPRQuestionEncoder"),bNr.forEach(t),Kao=r(f9e," (DPR model)"),f9e.forEach(t),Zao=i(C),lp=n(C,"LI",{});var m9e=s(lp);gK=n(m9e,"STRONG",{});var vNr=s(gK);eno=r(vNr,"electra"),vNr.forEach(t),ono=r(m9e," \u2014 "),XR=n(m9e,"A",{href:!0});var TNr=s(XR);rno=r(TNr,"ElectraModel"),TNr.forEach(t),tno=r(m9e," (ELECTRA model)"),m9e.forEach(t),ano=i(C),ip=n(C,"LI",{});var g9e=s(ip);hK=n(g9e,"STRONG",{});var FNr=s(hK);nno=r(FNr,"flaubert"),FNr.forEach(t),sno=r(g9e," \u2014 "),VR=n(g9e,"A",{href:!0});var CNr=s(VR);lno=r(CNr,"FlaubertModel"),CNr.forEach(t),ino=r(g9e," (FlauBERT model)"),g9e.forEach(t),dno=i(C),dp=n(C,"LI",{});var h9e=s(dp);pK=n(h9e,"STRONG",{});var MNr=s(pK);cno=r(MNr,"fnet"),MNr.forEach(t),fno=r(h9e," \u2014 "),zR=n(h9e,"A",{href:!0});var ENr=s(zR);mno=r(ENr,"FNetModel"),ENr.forEach(t),gno=r(h9e," (FNet model)"),h9e.forEach(t),hno=i(C),cp=n(C,"LI",{});var p9e=s(cp);_K=n(p9e,"STRONG",{});var yNr=s(_K);pno=r(yNr,"fsmt"),yNr.forEach(t),_no=r(p9e," \u2014 "),WR=n(p9e,"A",{href:!0});var wNr=s(WR);uno=r(wNr,"FSMTModel"),wNr.forEach(t),bno=r(p9e," (FairSeq Machine-Translation model)"),p9e.forEach(t),vno=i(C),Ns=n(C,"LI",{});var jL=s(Ns);uK=n(jL,"STRONG",{});var ANr=s(uK);Tno=r(ANr,"funnel"),ANr.forEach(t),Fno=r(jL," \u2014 "),QR=n(jL,"A",{href:!0});var LNr=s(QR);Cno=r(LNr,"FunnelModel"),LNr.forEach(t),Mno=r(jL," or "),HR=n(jL,"A",{href:!0});var BNr=s(HR);Eno=r(BNr,"FunnelBaseModel"),BNr.forEach(t),yno=r(jL," (Funnel Transformer model)"),jL.forEach(t),wno=i(C),fp=n(C,"LI",{});var _9e=s(fp);bK=n(_9e,"STRONG",{});var xNr=s(bK);Ano=r(xNr,"gpt2"),xNr.forEach(t),Lno=r(_9e," \u2014 "),UR=n(_9e,"A",{href:!0});var kNr=s(UR);Bno=r(kNr,"GPT2Model"),kNr.forEach(t),xno=r(_9e," (OpenAI GPT-2 model)"),_9e.forEach(t),kno=i(C),mp=n(C,"LI",{});var u9e=s(mp);vK=n(u9e,"STRONG",{});var RNr=s(vK);Rno=r(RNr,"gpt_neo"),RNr.forEach(t),Sno=r(u9e," \u2014 "),JR=n(u9e,"A",{href:!0});var SNr=s(JR);Pno=r(SNr,"GPTNeoModel"),SNr.forEach(t),$no=r(u9e," (GPT Neo model)"),u9e.forEach(t),Ino=i(C),gp=n(C,"LI",{});var b9e=s(gp);TK=n(b9e,"STRONG",{});var PNr=s(TK);jno=r(PNr,"gptj"),PNr.forEach(t),Dno=r(b9e," \u2014 "),YR=n(b9e,"A",{href:!0});var $Nr=s(YR);Nno=r($Nr,"GPTJModel"),$Nr.forEach(t),qno=r(b9e," (GPT-J model)"),b9e.forEach(t),Ono=i(C),hp=n(C,"LI",{});var v9e=s(hp);FK=n(v9e,"STRONG",{});var INr=s(FK);Gno=r(INr,"hubert"),INr.forEach(t),Xno=r(v9e," \u2014 "),KR=n(v9e,"A",{href:!0});var jNr=s(KR);Vno=r(jNr,"HubertModel"),jNr.forEach(t),zno=r(v9e," (Hubert model)"),v9e.forEach(t),Wno=i(C),pp=n(C,"LI",{});var T9e=s(pp);CK=n(T9e,"STRONG",{});var DNr=s(CK);Qno=r(DNr,"ibert"),DNr.forEach(t),Hno=r(T9e," \u2014 "),ZR=n(T9e,"A",{href:!0});var NNr=s(ZR);Uno=r(NNr,"IBertModel"),NNr.forEach(t),Jno=r(T9e," (I-BERT model)"),T9e.forEach(t),Yno=i(C),_p=n(C,"LI",{});var F9e=s(_p);MK=n(F9e,"STRONG",{});var qNr=s(MK);Kno=r(qNr,"imagegpt"),qNr.forEach(t),Zno=r(F9e," \u2014 "),eS=n(F9e,"A",{href:!0});var ONr=s(eS);eso=r(ONr,"ImageGPTModel"),ONr.forEach(t),oso=r(F9e," (ImageGPT model)"),F9e.forEach(t),rso=i(C),up=n(C,"LI",{});var C9e=s(up);EK=n(C9e,"STRONG",{});var GNr=s(EK);tso=r(GNr,"layoutlm"),GNr.forEach(t),aso=r(C9e," \u2014 "),oS=n(C9e,"A",{href:!0});var XNr=s(oS);nso=r(XNr,"LayoutLMModel"),XNr.forEach(t),sso=r(C9e," (LayoutLM model)"),C9e.forEach(t),lso=i(C),bp=n(C,"LI",{});var M9e=s(bp);yK=n(M9e,"STRONG",{});var VNr=s(yK);iso=r(VNr,"layoutlmv2"),VNr.forEach(t),dso=r(M9e," \u2014 "),rS=n(M9e,"A",{href:!0});var zNr=s(rS);cso=r(zNr,"LayoutLMv2Model"),zNr.forEach(t),fso=r(M9e," (LayoutLMv2 model)"),M9e.forEach(t),mso=i(C),vp=n(C,"LI",{});var E9e=s(vp);wK=n(E9e,"STRONG",{});var WNr=s(wK);gso=r(WNr,"led"),WNr.forEach(t),hso=r(E9e," \u2014 "),tS=n(E9e,"A",{href:!0});var QNr=s(tS);pso=r(QNr,"LEDModel"),QNr.forEach(t),_so=r(E9e," (LED model)"),E9e.forEach(t),uso=i(C),Tp=n(C,"LI",{});var y9e=s(Tp);AK=n(y9e,"STRONG",{});var HNr=s(AK);bso=r(HNr,"longformer"),HNr.forEach(t),vso=r(y9e," \u2014 "),aS=n(y9e,"A",{href:!0});var UNr=s(aS);Tso=r(UNr,"LongformerModel"),UNr.forEach(t),Fso=r(y9e," (Longformer model)"),y9e.forEach(t),Cso=i(C),Fp=n(C,"LI",{});var w9e=s(Fp);LK=n(w9e,"STRONG",{});var JNr=s(LK);Mso=r(JNr,"luke"),JNr.forEach(t),Eso=r(w9e," \u2014 "),nS=n(w9e,"A",{href:!0});var YNr=s(nS);yso=r(YNr,"LukeModel"),YNr.forEach(t),wso=r(w9e," (LUKE model)"),w9e.forEach(t),Aso=i(C),Cp=n(C,"LI",{});var A9e=s(Cp);BK=n(A9e,"STRONG",{});var KNr=s(BK);Lso=r(KNr,"lxmert"),KNr.forEach(t),Bso=r(A9e," \u2014 "),sS=n(A9e,"A",{href:!0});var ZNr=s(sS);xso=r(ZNr,"LxmertModel"),ZNr.forEach(t),kso=r(A9e," (LXMERT model)"),A9e.forEach(t),Rso=i(C),Mp=n(C,"LI",{});var L9e=s(Mp);xK=n(L9e,"STRONG",{});var eqr=s(xK);Sso=r(eqr,"m2m_100"),eqr.forEach(t),Pso=r(L9e," \u2014 "),lS=n(L9e,"A",{href:!0});var oqr=s(lS);$so=r(oqr,"M2M100Model"),oqr.forEach(t),Iso=r(L9e," (M2M100 model)"),L9e.forEach(t),jso=i(C),Ep=n(C,"LI",{});var B9e=s(Ep);kK=n(B9e,"STRONG",{});var rqr=s(kK);Dso=r(rqr,"marian"),rqr.forEach(t),Nso=r(B9e," \u2014 "),iS=n(B9e,"A",{href:!0});var tqr=s(iS);qso=r(tqr,"MarianModel"),tqr.forEach(t),Oso=r(B9e," (Marian model)"),B9e.forEach(t),Gso=i(C),yp=n(C,"LI",{});var x9e=s(yp);RK=n(x9e,"STRONG",{});var aqr=s(RK);Xso=r(aqr,"maskformer"),aqr.forEach(t),Vso=r(x9e," \u2014 "),dS=n(x9e,"A",{href:!0});var nqr=s(dS);zso=r(nqr,"MaskFormerModel"),nqr.forEach(t),Wso=r(x9e," (MaskFormer model)"),x9e.forEach(t),Qso=i(C),wp=n(C,"LI",{});var k9e=s(wp);SK=n(k9e,"STRONG",{});var sqr=s(SK);Hso=r(sqr,"mbart"),sqr.forEach(t),Uso=r(k9e," \u2014 "),cS=n(k9e,"A",{href:!0});var lqr=s(cS);Jso=r(lqr,"MBartModel"),lqr.forEach(t),Yso=r(k9e," (mBART model)"),k9e.forEach(t),Kso=i(C),Ap=n(C,"LI",{});var R9e=s(Ap);PK=n(R9e,"STRONG",{});var iqr=s(PK);Zso=r(iqr,"megatron-bert"),iqr.forEach(t),elo=r(R9e," \u2014 "),fS=n(R9e,"A",{href:!0});var dqr=s(fS);olo=r(dqr,"MegatronBertModel"),dqr.forEach(t),rlo=r(R9e," (MegatronBert model)"),R9e.forEach(t),tlo=i(C),Lp=n(C,"LI",{});var S9e=s(Lp);$K=n(S9e,"STRONG",{});var cqr=s($K);alo=r(cqr,"mobilebert"),cqr.forEach(t),nlo=r(S9e," \u2014 "),mS=n(S9e,"A",{href:!0});var fqr=s(mS);slo=r(fqr,"MobileBertModel"),fqr.forEach(t),llo=r(S9e," (MobileBERT model)"),S9e.forEach(t),ilo=i(C),Bp=n(C,"LI",{});var P9e=s(Bp);IK=n(P9e,"STRONG",{});var mqr=s(IK);dlo=r(mqr,"mpnet"),mqr.forEach(t),clo=r(P9e," \u2014 "),gS=n(P9e,"A",{href:!0});var gqr=s(gS);flo=r(gqr,"MPNetModel"),gqr.forEach(t),mlo=r(P9e," (MPNet model)"),P9e.forEach(t),glo=i(C),xp=n(C,"LI",{});var $9e=s(xp);jK=n($9e,"STRONG",{});var hqr=s(jK);hlo=r(hqr,"mt5"),hqr.forEach(t),plo=r($9e," \u2014 "),hS=n($9e,"A",{href:!0});var pqr=s(hS);_lo=r(pqr,"MT5Model"),pqr.forEach(t),ulo=r($9e," (mT5 model)"),$9e.forEach(t),blo=i(C),kp=n(C,"LI",{});var I9e=s(kp);DK=n(I9e,"STRONG",{});var _qr=s(DK);vlo=r(_qr,"nystromformer"),_qr.forEach(t),Tlo=r(I9e," \u2014 "),pS=n(I9e,"A",{href:!0});var uqr=s(pS);Flo=r(uqr,"NystromformerModel"),uqr.forEach(t),Clo=r(I9e," (Nystromformer model)"),I9e.forEach(t),Mlo=i(C),Rp=n(C,"LI",{});var j9e=s(Rp);NK=n(j9e,"STRONG",{});var bqr=s(NK);Elo=r(bqr,"openai-gpt"),bqr.forEach(t),ylo=r(j9e," \u2014 "),_S=n(j9e,"A",{href:!0});var vqr=s(_S);wlo=r(vqr,"OpenAIGPTModel"),vqr.forEach(t),Alo=r(j9e," (OpenAI GPT model)"),j9e.forEach(t),Llo=i(C),Sp=n(C,"LI",{});var D9e=s(Sp);qK=n(D9e,"STRONG",{});var Tqr=s(qK);Blo=r(Tqr,"pegasus"),Tqr.forEach(t),xlo=r(D9e," \u2014 "),uS=n(D9e,"A",{href:!0});var Fqr=s(uS);klo=r(Fqr,"PegasusModel"),Fqr.forEach(t),Rlo=r(D9e," (Pegasus model)"),D9e.forEach(t),Slo=i(C),Pp=n(C,"LI",{});var N9e=s(Pp);OK=n(N9e,"STRONG",{});var Cqr=s(OK);Plo=r(Cqr,"perceiver"),Cqr.forEach(t),$lo=r(N9e," \u2014 "),bS=n(N9e,"A",{href:!0});var Mqr=s(bS);Ilo=r(Mqr,"PerceiverModel"),Mqr.forEach(t),jlo=r(N9e," (Perceiver model)"),N9e.forEach(t),Dlo=i(C),$p=n(C,"LI",{});var q9e=s($p);GK=n(q9e,"STRONG",{});var Eqr=s(GK);Nlo=r(Eqr,"plbart"),Eqr.forEach(t),qlo=r(q9e," \u2014 "),vS=n(q9e,"A",{href:!0});var yqr=s(vS);Olo=r(yqr,"PLBartModel"),yqr.forEach(t),Glo=r(q9e," (PLBart model)"),q9e.forEach(t),Xlo=i(C),Ip=n(C,"LI",{});var O9e=s(Ip);XK=n(O9e,"STRONG",{});var wqr=s(XK);Vlo=r(wqr,"poolformer"),wqr.forEach(t),zlo=r(O9e," \u2014 "),TS=n(O9e,"A",{href:!0});var Aqr=s(TS);Wlo=r(Aqr,"PoolFormerModel"),Aqr.forEach(t),Qlo=r(O9e," (PoolFormer model)"),O9e.forEach(t),Hlo=i(C),jp=n(C,"LI",{});var G9e=s(jp);VK=n(G9e,"STRONG",{});var Lqr=s(VK);Ulo=r(Lqr,"prophetnet"),Lqr.forEach(t),Jlo=r(G9e," \u2014 "),FS=n(G9e,"A",{href:!0});var Bqr=s(FS);Ylo=r(Bqr,"ProphetNetModel"),Bqr.forEach(t),Klo=r(G9e," (ProphetNet model)"),G9e.forEach(t),Zlo=i(C),Dp=n(C,"LI",{});var X9e=s(Dp);zK=n(X9e,"STRONG",{});var xqr=s(zK);eio=r(xqr,"qdqbert"),xqr.forEach(t),oio=r(X9e," \u2014 "),CS=n(X9e,"A",{href:!0});var kqr=s(CS);rio=r(kqr,"QDQBertModel"),kqr.forEach(t),tio=r(X9e," (QDQBert model)"),X9e.forEach(t),aio=i(C),Np=n(C,"LI",{});var V9e=s(Np);WK=n(V9e,"STRONG",{});var Rqr=s(WK);nio=r(Rqr,"reformer"),Rqr.forEach(t),sio=r(V9e," \u2014 "),MS=n(V9e,"A",{href:!0});var Sqr=s(MS);lio=r(Sqr,"ReformerModel"),Sqr.forEach(t),iio=r(V9e," (Reformer model)"),V9e.forEach(t),dio=i(C),qp=n(C,"LI",{});var z9e=s(qp);QK=n(z9e,"STRONG",{});var Pqr=s(QK);cio=r(Pqr,"rembert"),Pqr.forEach(t),fio=r(z9e," \u2014 "),ES=n(z9e,"A",{href:!0});var $qr=s(ES);mio=r($qr,"RemBertModel"),$qr.forEach(t),gio=r(z9e," (RemBERT model)"),z9e.forEach(t),hio=i(C),Op=n(C,"LI",{});var W9e=s(Op);HK=n(W9e,"STRONG",{});var Iqr=s(HK);pio=r(Iqr,"retribert"),Iqr.forEach(t),_io=r(W9e," \u2014 "),yS=n(W9e,"A",{href:!0});var jqr=s(yS);uio=r(jqr,"RetriBertModel"),jqr.forEach(t),bio=r(W9e," (RetriBERT model)"),W9e.forEach(t),vio=i(C),Gp=n(C,"LI",{});var Q9e=s(Gp);UK=n(Q9e,"STRONG",{});var Dqr=s(UK);Tio=r(Dqr,"roberta"),Dqr.forEach(t),Fio=r(Q9e," \u2014 "),wS=n(Q9e,"A",{href:!0});var Nqr=s(wS);Cio=r(Nqr,"RobertaModel"),Nqr.forEach(t),Mio=r(Q9e," (RoBERTa model)"),Q9e.forEach(t),Eio=i(C),Xp=n(C,"LI",{});var H9e=s(Xp);JK=n(H9e,"STRONG",{});var qqr=s(JK);yio=r(qqr,"roformer"),qqr.forEach(t),wio=r(H9e," \u2014 "),AS=n(H9e,"A",{href:!0});var Oqr=s(AS);Aio=r(Oqr,"RoFormerModel"),Oqr.forEach(t),Lio=r(H9e," (RoFormer model)"),H9e.forEach(t),Bio=i(C),Vp=n(C,"LI",{});var U9e=s(Vp);YK=n(U9e,"STRONG",{});var Gqr=s(YK);xio=r(Gqr,"segformer"),Gqr.forEach(t),kio=r(U9e," \u2014 "),LS=n(U9e,"A",{href:!0});var Xqr=s(LS);Rio=r(Xqr,"SegformerModel"),Xqr.forEach(t),Sio=r(U9e," (SegFormer model)"),U9e.forEach(t),Pio=i(C),zp=n(C,"LI",{});var J9e=s(zp);KK=n(J9e,"STRONG",{});var Vqr=s(KK);$io=r(Vqr,"sew"),Vqr.forEach(t),Iio=r(J9e," \u2014 "),BS=n(J9e,"A",{href:!0});var zqr=s(BS);jio=r(zqr,"SEWModel"),zqr.forEach(t),Dio=r(J9e," (SEW model)"),J9e.forEach(t),Nio=i(C),Wp=n(C,"LI",{});var Y9e=s(Wp);ZK=n(Y9e,"STRONG",{});var Wqr=s(ZK);qio=r(Wqr,"sew-d"),Wqr.forEach(t),Oio=r(Y9e," \u2014 "),xS=n(Y9e,"A",{href:!0});var Qqr=s(xS);Gio=r(Qqr,"SEWDModel"),Qqr.forEach(t),Xio=r(Y9e," (SEW-D model)"),Y9e.forEach(t),Vio=i(C),Qp=n(C,"LI",{});var K9e=s(Qp);eZ=n(K9e,"STRONG",{});var Hqr=s(eZ);zio=r(Hqr,"speech_to_text"),Hqr.forEach(t),Wio=r(K9e," \u2014 "),kS=n(K9e,"A",{href:!0});var Uqr=s(kS);Qio=r(Uqr,"Speech2TextModel"),Uqr.forEach(t),Hio=r(K9e," (Speech2Text model)"),K9e.forEach(t),Uio=i(C),Hp=n(C,"LI",{});var Z9e=s(Hp);oZ=n(Z9e,"STRONG",{});var Jqr=s(oZ);Jio=r(Jqr,"splinter"),Jqr.forEach(t),Yio=r(Z9e," \u2014 "),RS=n(Z9e,"A",{href:!0});var Yqr=s(RS);Kio=r(Yqr,"SplinterModel"),Yqr.forEach(t),Zio=r(Z9e," (Splinter model)"),Z9e.forEach(t),edo=i(C),Up=n(C,"LI",{});var eCe=s(Up);rZ=n(eCe,"STRONG",{});var Kqr=s(rZ);odo=r(Kqr,"squeezebert"),Kqr.forEach(t),rdo=r(eCe," \u2014 "),SS=n(eCe,"A",{href:!0});var Zqr=s(SS);tdo=r(Zqr,"SqueezeBertModel"),Zqr.forEach(t),ado=r(eCe," (SqueezeBERT model)"),eCe.forEach(t),ndo=i(C),Jp=n(C,"LI",{});var oCe=s(Jp);tZ=n(oCe,"STRONG",{});var eOr=s(tZ);sdo=r(eOr,"swin"),eOr.forEach(t),ldo=r(oCe," \u2014 "),PS=n(oCe,"A",{href:!0});var oOr=s(PS);ido=r(oOr,"SwinModel"),oOr.forEach(t),ddo=r(oCe," (Swin model)"),oCe.forEach(t),cdo=i(C),Yp=n(C,"LI",{});var rCe=s(Yp);aZ=n(rCe,"STRONG",{});var rOr=s(aZ);fdo=r(rOr,"t5"),rOr.forEach(t),mdo=r(rCe," \u2014 "),$S=n(rCe,"A",{href:!0});var tOr=s($S);gdo=r(tOr,"T5Model"),tOr.forEach(t),hdo=r(rCe," (T5 model)"),rCe.forEach(t),pdo=i(C),Kp=n(C,"LI",{});var tCe=s(Kp);nZ=n(tCe,"STRONG",{});var aOr=s(nZ);_do=r(aOr,"tapas"),aOr.forEach(t),udo=r(tCe," \u2014 "),IS=n(tCe,"A",{href:!0});var nOr=s(IS);bdo=r(nOr,"TapasModel"),nOr.forEach(t),vdo=r(tCe," (TAPAS model)"),tCe.forEach(t),Tdo=i(C),Zp=n(C,"LI",{});var aCe=s(Zp);sZ=n(aCe,"STRONG",{});var sOr=s(sZ);Fdo=r(sOr,"transfo-xl"),sOr.forEach(t),Cdo=r(aCe," \u2014 "),jS=n(aCe,"A",{href:!0});var lOr=s(jS);Mdo=r(lOr,"TransfoXLModel"),lOr.forEach(t),Edo=r(aCe," (Transformer-XL model)"),aCe.forEach(t),ydo=i(C),e_=n(C,"LI",{});var nCe=s(e_);lZ=n(nCe,"STRONG",{});var iOr=s(lZ);wdo=r(iOr,"unispeech"),iOr.forEach(t),Ado=r(nCe," \u2014 "),DS=n(nCe,"A",{href:!0});var dOr=s(DS);Ldo=r(dOr,"UniSpeechModel"),dOr.forEach(t),Bdo=r(nCe," (UniSpeech model)"),nCe.forEach(t),xdo=i(C),o_=n(C,"LI",{});var sCe=s(o_);iZ=n(sCe,"STRONG",{});var cOr=s(iZ);kdo=r(cOr,"unispeech-sat"),cOr.forEach(t),Rdo=r(sCe," \u2014 "),NS=n(sCe,"A",{href:!0});var fOr=s(NS);Sdo=r(fOr,"UniSpeechSatModel"),fOr.forEach(t),Pdo=r(sCe," (UniSpeechSat model)"),sCe.forEach(t),$do=i(C),r_=n(C,"LI",{});var lCe=s(r_);dZ=n(lCe,"STRONG",{});var mOr=s(dZ);Ido=r(mOr,"vilt"),mOr.forEach(t),jdo=r(lCe," \u2014 "),qS=n(lCe,"A",{href:!0});var gOr=s(qS);Ddo=r(gOr,"ViltModel"),gOr.forEach(t),Ndo=r(lCe," (ViLT model)"),lCe.forEach(t),qdo=i(C),t_=n(C,"LI",{});var iCe=s(t_);cZ=n(iCe,"STRONG",{});var hOr=s(cZ);Odo=r(hOr,"vision-text-dual-encoder"),hOr.forEach(t),Gdo=r(iCe," \u2014 "),OS=n(iCe,"A",{href:!0});var pOr=s(OS);Xdo=r(pOr,"VisionTextDualEncoderModel"),pOr.forEach(t),Vdo=r(iCe," (VisionTextDualEncoder model)"),iCe.forEach(t),zdo=i(C),a_=n(C,"LI",{});var dCe=s(a_);fZ=n(dCe,"STRONG",{});var _Or=s(fZ);Wdo=r(_Or,"visual_bert"),_Or.forEach(t),Qdo=r(dCe," \u2014 "),GS=n(dCe,"A",{href:!0});var uOr=s(GS);Hdo=r(uOr,"VisualBertModel"),uOr.forEach(t),Udo=r(dCe," (VisualBert model)"),dCe.forEach(t),Jdo=i(C),n_=n(C,"LI",{});var cCe=s(n_);mZ=n(cCe,"STRONG",{});var bOr=s(mZ);Ydo=r(bOr,"vit"),bOr.forEach(t),Kdo=r(cCe," \u2014 "),XS=n(cCe,"A",{href:!0});var vOr=s(XS);Zdo=r(vOr,"ViTModel"),vOr.forEach(t),eco=r(cCe," (ViT model)"),cCe.forEach(t),oco=i(C),s_=n(C,"LI",{});var fCe=s(s_);gZ=n(fCe,"STRONG",{});var TOr=s(gZ);rco=r(TOr,"vit_mae"),TOr.forEach(t),tco=r(fCe," \u2014 "),VS=n(fCe,"A",{href:!0});var FOr=s(VS);aco=r(FOr,"ViTMAEModel"),FOr.forEach(t),nco=r(fCe," (ViTMAE model)"),fCe.forEach(t),sco=i(C),l_=n(C,"LI",{});var mCe=s(l_);hZ=n(mCe,"STRONG",{});var COr=s(hZ);lco=r(COr,"wav2vec2"),COr.forEach(t),ico=r(mCe," \u2014 "),zS=n(mCe,"A",{href:!0});var MOr=s(zS);dco=r(MOr,"Wav2Vec2Model"),MOr.forEach(t),cco=r(mCe," (Wav2Vec2 model)"),mCe.forEach(t),fco=i(C),i_=n(C,"LI",{});var gCe=s(i_);pZ=n(gCe,"STRONG",{});var EOr=s(pZ);mco=r(EOr,"wavlm"),EOr.forEach(t),gco=r(gCe," \u2014 "),WS=n(gCe,"A",{href:!0});var yOr=s(WS);hco=r(yOr,"WavLMModel"),yOr.forEach(t),pco=r(gCe," (WavLM model)"),gCe.forEach(t),_co=i(C),d_=n(C,"LI",{});var hCe=s(d_);_Z=n(hCe,"STRONG",{});var wOr=s(_Z);uco=r(wOr,"xglm"),wOr.forEach(t),bco=r(hCe," \u2014 "),QS=n(hCe,"A",{href:!0});var AOr=s(QS);vco=r(AOr,"XGLMModel"),AOr.forEach(t),Tco=r(hCe," (XGLM model)"),hCe.forEach(t),Fco=i(C),c_=n(C,"LI",{});var pCe=s(c_);uZ=n(pCe,"STRONG",{});var LOr=s(uZ);Cco=r(LOr,"xlm"),LOr.forEach(t),Mco=r(pCe," \u2014 "),HS=n(pCe,"A",{href:!0});var BOr=s(HS);Eco=r(BOr,"XLMModel"),BOr.forEach(t),yco=r(pCe," (XLM model)"),pCe.forEach(t),wco=i(C),f_=n(C,"LI",{});var _Ce=s(f_);bZ=n(_Ce,"STRONG",{});var xOr=s(bZ);Aco=r(xOr,"xlm-prophetnet"),xOr.forEach(t),Lco=r(_Ce," \u2014 "),US=n(_Ce,"A",{href:!0});var kOr=s(US);Bco=r(kOr,"XLMProphetNetModel"),kOr.forEach(t),xco=r(_Ce," (XLMProphetNet model)"),_Ce.forEach(t),kco=i(C),m_=n(C,"LI",{});var uCe=s(m_);vZ=n(uCe,"STRONG",{});var ROr=s(vZ);Rco=r(ROr,"xlm-roberta"),ROr.forEach(t),Sco=r(uCe," \u2014 "),JS=n(uCe,"A",{href:!0});var SOr=s(JS);Pco=r(SOr,"XLMRobertaModel"),SOr.forEach(t),$co=r(uCe," (XLM-RoBERTa model)"),uCe.forEach(t),Ico=i(C),g_=n(C,"LI",{});var bCe=s(g_);TZ=n(bCe,"STRONG",{});var POr=s(TZ);jco=r(POr,"xlm-roberta-xl"),POr.forEach(t),Dco=r(bCe," \u2014 "),YS=n(bCe,"A",{href:!0});var $Or=s(YS);Nco=r($Or,"XLMRobertaXLModel"),$Or.forEach(t),qco=r(bCe," (XLM-RoBERTa-XL model)"),bCe.forEach(t),Oco=i(C),h_=n(C,"LI",{});var vCe=s(h_);FZ=n(vCe,"STRONG",{});var IOr=s(FZ);Gco=r(IOr,"xlnet"),IOr.forEach(t),Xco=r(vCe," \u2014 "),KS=n(vCe,"A",{href:!0});var jOr=s(KS);Vco=r(jOr,"XLNetModel"),jOr.forEach(t),zco=r(vCe," (XLNet model)"),vCe.forEach(t),Wco=i(C),p_=n(C,"LI",{});var TCe=s(p_);CZ=n(TCe,"STRONG",{});var DOr=s(CZ);Qco=r(DOr,"yoso"),DOr.forEach(t),Hco=r(TCe," \u2014 "),ZS=n(TCe,"A",{href:!0});var NOr=s(ZS);Uco=r(NOr,"YosoModel"),NOr.forEach(t),Jco=r(TCe," (YOSO model)"),TCe.forEach(t),C.forEach(t),Yco=i(qt),__=n(qt,"P",{});var FCe=s(__);Kco=r(FCe,"The model is set in evaluation mode by default using "),MZ=n(FCe,"CODE",{});var qOr=s(MZ);Zco=r(qOr,"model.eval()"),qOr.forEach(t),efo=r(FCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EZ=n(FCe,"CODE",{});var OOr=s(EZ);ofo=r(OOr,"model.train()"),OOr.forEach(t),FCe.forEach(t),rfo=i(qt),yZ=n(qt,"P",{});var GOr=s(yZ);tfo=r(GOr,"Examples:"),GOr.forEach(t),afo=i(qt),m(S4.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),Fxe=i(d),ed=n(d,"H2",{class:!0});var xRe=s(ed);u_=n(xRe,"A",{id:!0,class:!0,href:!0});var XOr=s(u_);wZ=n(XOr,"SPAN",{});var VOr=s(wZ);m(P4.$$.fragment,VOr),VOr.forEach(t),XOr.forEach(t),nfo=i(xRe),AZ=n(xRe,"SPAN",{});var zOr=s(AZ);sfo=r(zOr,"AutoModelForPreTraining"),zOr.forEach(t),xRe.forEach(t),Cxe=i(d),Yo=n(d,"DIV",{class:!0});var Hs=s(Yo);m($4.$$.fragment,Hs),lfo=i(Hs),od=n(Hs,"P",{});var Az=s(od);ifo=r(Az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LZ=n(Az,"CODE",{});var WOr=s(LZ);dfo=r(WOr,"from_pretrained()"),WOr.forEach(t),cfo=r(Az,"class method or the "),BZ=n(Az,"CODE",{});var QOr=s(BZ);ffo=r(QOr,"from_config()"),QOr.forEach(t),mfo=r(Az,`class
method.`),Az.forEach(t),gfo=i(Hs),I4=n(Hs,"P",{});var kRe=s(I4);hfo=r(kRe,"This class cannot be instantiated directly using "),xZ=n(kRe,"CODE",{});var HOr=s(xZ);pfo=r(HOr,"__init__()"),HOr.forEach(t),_fo=r(kRe," (throws an error)."),kRe.forEach(t),ufo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(j4.$$.fragment,Us),bfo=i(Us),kZ=n(Us,"P",{});var UOr=s(kZ);vfo=r(UOr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),UOr.forEach(t),Tfo=i(Us),rd=n(Us,"P",{});var Lz=s(rd);Ffo=r(Lz,`Note:
Loading a model from its configuration file does `),RZ=n(Lz,"STRONG",{});var JOr=s(RZ);Cfo=r(JOr,"not"),JOr.forEach(t),Mfo=r(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(Lz,"CODE",{});var YOr=s(SZ);Efo=r(YOr,"from_pretrained()"),YOr.forEach(t),yfo=r(Lz,"to load the model weights."),Lz.forEach(t),wfo=i(Us),PZ=n(Us,"P",{});var KOr=s(PZ);Afo=r(KOr,"Examples:"),KOr.forEach(t),Lfo=i(Us),m(D4.$$.fragment,Us),Us.forEach(t),Bfo=i(Hs),De=n(Hs,"DIV",{class:!0});var Ot=s(De);m(N4.$$.fragment,Ot),xfo=i(Ot),$Z=n(Ot,"P",{});var ZOr=s($Z);kfo=r(ZOr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZOr.forEach(t),Rfo=i(Ot),za=n(Ot,"P",{});var KC=s(za);Sfo=r(KC,"The model class to instantiate is selected based on the "),IZ=n(KC,"CODE",{});var eGr=s(IZ);Pfo=r(eGr,"model_type"),eGr.forEach(t),$fo=r(KC,` property of the config object (either
passed as an argument or loaded from `),jZ=n(KC,"CODE",{});var oGr=s(jZ);Ifo=r(oGr,"pretrained_model_name_or_path"),oGr.forEach(t),jfo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DZ=n(KC,"CODE",{});var rGr=s(DZ);Dfo=r(rGr,"pretrained_model_name_or_path"),rGr.forEach(t),Nfo=r(KC,":"),KC.forEach(t),qfo=i(Ot),k=n(Ot,"UL",{});var S=s(k);b_=n(S,"LI",{});var CCe=s(b_);NZ=n(CCe,"STRONG",{});var tGr=s(NZ);Ofo=r(tGr,"albert"),tGr.forEach(t),Gfo=r(CCe," \u2014 "),eP=n(CCe,"A",{href:!0});var aGr=s(eP);Xfo=r(aGr,"AlbertForPreTraining"),aGr.forEach(t),Vfo=r(CCe," (ALBERT model)"),CCe.forEach(t),zfo=i(S),v_=n(S,"LI",{});var MCe=s(v_);qZ=n(MCe,"STRONG",{});var nGr=s(qZ);Wfo=r(nGr,"bart"),nGr.forEach(t),Qfo=r(MCe," \u2014 "),oP=n(MCe,"A",{href:!0});var sGr=s(oP);Hfo=r(sGr,"BartForConditionalGeneration"),sGr.forEach(t),Ufo=r(MCe," (BART model)"),MCe.forEach(t),Jfo=i(S),T_=n(S,"LI",{});var ECe=s(T_);OZ=n(ECe,"STRONG",{});var lGr=s(OZ);Yfo=r(lGr,"bert"),lGr.forEach(t),Kfo=r(ECe," \u2014 "),rP=n(ECe,"A",{href:!0});var iGr=s(rP);Zfo=r(iGr,"BertForPreTraining"),iGr.forEach(t),emo=r(ECe," (BERT model)"),ECe.forEach(t),omo=i(S),F_=n(S,"LI",{});var yCe=s(F_);GZ=n(yCe,"STRONG",{});var dGr=s(GZ);rmo=r(dGr,"big_bird"),dGr.forEach(t),tmo=r(yCe," \u2014 "),tP=n(yCe,"A",{href:!0});var cGr=s(tP);amo=r(cGr,"BigBirdForPreTraining"),cGr.forEach(t),nmo=r(yCe," (BigBird model)"),yCe.forEach(t),smo=i(S),C_=n(S,"LI",{});var wCe=s(C_);XZ=n(wCe,"STRONG",{});var fGr=s(XZ);lmo=r(fGr,"camembert"),fGr.forEach(t),imo=r(wCe," \u2014 "),aP=n(wCe,"A",{href:!0});var mGr=s(aP);dmo=r(mGr,"CamembertForMaskedLM"),mGr.forEach(t),cmo=r(wCe," (CamemBERT model)"),wCe.forEach(t),fmo=i(S),M_=n(S,"LI",{});var ACe=s(M_);VZ=n(ACe,"STRONG",{});var gGr=s(VZ);mmo=r(gGr,"ctrl"),gGr.forEach(t),gmo=r(ACe," \u2014 "),nP=n(ACe,"A",{href:!0});var hGr=s(nP);hmo=r(hGr,"CTRLLMHeadModel"),hGr.forEach(t),pmo=r(ACe," (CTRL model)"),ACe.forEach(t),_mo=i(S),E_=n(S,"LI",{});var LCe=s(E_);zZ=n(LCe,"STRONG",{});var pGr=s(zZ);umo=r(pGr,"data2vec-text"),pGr.forEach(t),bmo=r(LCe," \u2014 "),sP=n(LCe,"A",{href:!0});var _Gr=s(sP);vmo=r(_Gr,"Data2VecTextForMaskedLM"),_Gr.forEach(t),Tmo=r(LCe," (Data2VecText model)"),LCe.forEach(t),Fmo=i(S),y_=n(S,"LI",{});var BCe=s(y_);WZ=n(BCe,"STRONG",{});var uGr=s(WZ);Cmo=r(uGr,"deberta"),uGr.forEach(t),Mmo=r(BCe," \u2014 "),lP=n(BCe,"A",{href:!0});var bGr=s(lP);Emo=r(bGr,"DebertaForMaskedLM"),bGr.forEach(t),ymo=r(BCe," (DeBERTa model)"),BCe.forEach(t),wmo=i(S),w_=n(S,"LI",{});var xCe=s(w_);QZ=n(xCe,"STRONG",{});var vGr=s(QZ);Amo=r(vGr,"deberta-v2"),vGr.forEach(t),Lmo=r(xCe," \u2014 "),iP=n(xCe,"A",{href:!0});var TGr=s(iP);Bmo=r(TGr,"DebertaV2ForMaskedLM"),TGr.forEach(t),xmo=r(xCe," (DeBERTa-v2 model)"),xCe.forEach(t),kmo=i(S),A_=n(S,"LI",{});var kCe=s(A_);HZ=n(kCe,"STRONG",{});var FGr=s(HZ);Rmo=r(FGr,"distilbert"),FGr.forEach(t),Smo=r(kCe," \u2014 "),dP=n(kCe,"A",{href:!0});var CGr=s(dP);Pmo=r(CGr,"DistilBertForMaskedLM"),CGr.forEach(t),$mo=r(kCe," (DistilBERT model)"),kCe.forEach(t),Imo=i(S),L_=n(S,"LI",{});var RCe=s(L_);UZ=n(RCe,"STRONG",{});var MGr=s(UZ);jmo=r(MGr,"electra"),MGr.forEach(t),Dmo=r(RCe," \u2014 "),cP=n(RCe,"A",{href:!0});var EGr=s(cP);Nmo=r(EGr,"ElectraForPreTraining"),EGr.forEach(t),qmo=r(RCe," (ELECTRA model)"),RCe.forEach(t),Omo=i(S),B_=n(S,"LI",{});var SCe=s(B_);JZ=n(SCe,"STRONG",{});var yGr=s(JZ);Gmo=r(yGr,"flaubert"),yGr.forEach(t),Xmo=r(SCe," \u2014 "),fP=n(SCe,"A",{href:!0});var wGr=s(fP);Vmo=r(wGr,"FlaubertWithLMHeadModel"),wGr.forEach(t),zmo=r(SCe," (FlauBERT model)"),SCe.forEach(t),Wmo=i(S),x_=n(S,"LI",{});var PCe=s(x_);YZ=n(PCe,"STRONG",{});var AGr=s(YZ);Qmo=r(AGr,"fnet"),AGr.forEach(t),Hmo=r(PCe," \u2014 "),mP=n(PCe,"A",{href:!0});var LGr=s(mP);Umo=r(LGr,"FNetForPreTraining"),LGr.forEach(t),Jmo=r(PCe," (FNet model)"),PCe.forEach(t),Ymo=i(S),k_=n(S,"LI",{});var $Ce=s(k_);KZ=n($Ce,"STRONG",{});var BGr=s(KZ);Kmo=r(BGr,"fsmt"),BGr.forEach(t),Zmo=r($Ce," \u2014 "),gP=n($Ce,"A",{href:!0});var xGr=s(gP);ego=r(xGr,"FSMTForConditionalGeneration"),xGr.forEach(t),ogo=r($Ce," (FairSeq Machine-Translation model)"),$Ce.forEach(t),rgo=i(S),R_=n(S,"LI",{});var ICe=s(R_);ZZ=n(ICe,"STRONG",{});var kGr=s(ZZ);tgo=r(kGr,"funnel"),kGr.forEach(t),ago=r(ICe," \u2014 "),hP=n(ICe,"A",{href:!0});var RGr=s(hP);ngo=r(RGr,"FunnelForPreTraining"),RGr.forEach(t),sgo=r(ICe," (Funnel Transformer model)"),ICe.forEach(t),lgo=i(S),S_=n(S,"LI",{});var jCe=s(S_);eee=n(jCe,"STRONG",{});var SGr=s(eee);igo=r(SGr,"gpt2"),SGr.forEach(t),dgo=r(jCe," \u2014 "),pP=n(jCe,"A",{href:!0});var PGr=s(pP);cgo=r(PGr,"GPT2LMHeadModel"),PGr.forEach(t),fgo=r(jCe," (OpenAI GPT-2 model)"),jCe.forEach(t),mgo=i(S),P_=n(S,"LI",{});var DCe=s(P_);oee=n(DCe,"STRONG",{});var $Gr=s(oee);ggo=r($Gr,"ibert"),$Gr.forEach(t),hgo=r(DCe," \u2014 "),_P=n(DCe,"A",{href:!0});var IGr=s(_P);pgo=r(IGr,"IBertForMaskedLM"),IGr.forEach(t),_go=r(DCe," (I-BERT model)"),DCe.forEach(t),ugo=i(S),$_=n(S,"LI",{});var NCe=s($_);ree=n(NCe,"STRONG",{});var jGr=s(ree);bgo=r(jGr,"layoutlm"),jGr.forEach(t),vgo=r(NCe," \u2014 "),uP=n(NCe,"A",{href:!0});var DGr=s(uP);Tgo=r(DGr,"LayoutLMForMaskedLM"),DGr.forEach(t),Fgo=r(NCe," (LayoutLM model)"),NCe.forEach(t),Cgo=i(S),I_=n(S,"LI",{});var qCe=s(I_);tee=n(qCe,"STRONG",{});var NGr=s(tee);Mgo=r(NGr,"longformer"),NGr.forEach(t),Ego=r(qCe," \u2014 "),bP=n(qCe,"A",{href:!0});var qGr=s(bP);ygo=r(qGr,"LongformerForMaskedLM"),qGr.forEach(t),wgo=r(qCe," (Longformer model)"),qCe.forEach(t),Ago=i(S),j_=n(S,"LI",{});var OCe=s(j_);aee=n(OCe,"STRONG",{});var OGr=s(aee);Lgo=r(OGr,"lxmert"),OGr.forEach(t),Bgo=r(OCe," \u2014 "),vP=n(OCe,"A",{href:!0});var GGr=s(vP);xgo=r(GGr,"LxmertForPreTraining"),GGr.forEach(t),kgo=r(OCe," (LXMERT model)"),OCe.forEach(t),Rgo=i(S),D_=n(S,"LI",{});var GCe=s(D_);nee=n(GCe,"STRONG",{});var XGr=s(nee);Sgo=r(XGr,"megatron-bert"),XGr.forEach(t),Pgo=r(GCe," \u2014 "),TP=n(GCe,"A",{href:!0});var VGr=s(TP);$go=r(VGr,"MegatronBertForPreTraining"),VGr.forEach(t),Igo=r(GCe," (MegatronBert model)"),GCe.forEach(t),jgo=i(S),N_=n(S,"LI",{});var XCe=s(N_);see=n(XCe,"STRONG",{});var zGr=s(see);Dgo=r(zGr,"mobilebert"),zGr.forEach(t),Ngo=r(XCe," \u2014 "),FP=n(XCe,"A",{href:!0});var WGr=s(FP);qgo=r(WGr,"MobileBertForPreTraining"),WGr.forEach(t),Ogo=r(XCe," (MobileBERT model)"),XCe.forEach(t),Ggo=i(S),q_=n(S,"LI",{});var VCe=s(q_);lee=n(VCe,"STRONG",{});var QGr=s(lee);Xgo=r(QGr,"mpnet"),QGr.forEach(t),Vgo=r(VCe," \u2014 "),CP=n(VCe,"A",{href:!0});var HGr=s(CP);zgo=r(HGr,"MPNetForMaskedLM"),HGr.forEach(t),Wgo=r(VCe," (MPNet model)"),VCe.forEach(t),Qgo=i(S),O_=n(S,"LI",{});var zCe=s(O_);iee=n(zCe,"STRONG",{});var UGr=s(iee);Hgo=r(UGr,"openai-gpt"),UGr.forEach(t),Ugo=r(zCe," \u2014 "),MP=n(zCe,"A",{href:!0});var JGr=s(MP);Jgo=r(JGr,"OpenAIGPTLMHeadModel"),JGr.forEach(t),Ygo=r(zCe," (OpenAI GPT model)"),zCe.forEach(t),Kgo=i(S),G_=n(S,"LI",{});var WCe=s(G_);dee=n(WCe,"STRONG",{});var YGr=s(dee);Zgo=r(YGr,"retribert"),YGr.forEach(t),eho=r(WCe," \u2014 "),EP=n(WCe,"A",{href:!0});var KGr=s(EP);oho=r(KGr,"RetriBertModel"),KGr.forEach(t),rho=r(WCe," (RetriBERT model)"),WCe.forEach(t),tho=i(S),X_=n(S,"LI",{});var QCe=s(X_);cee=n(QCe,"STRONG",{});var ZGr=s(cee);aho=r(ZGr,"roberta"),ZGr.forEach(t),nho=r(QCe," \u2014 "),yP=n(QCe,"A",{href:!0});var eXr=s(yP);sho=r(eXr,"RobertaForMaskedLM"),eXr.forEach(t),lho=r(QCe," (RoBERTa model)"),QCe.forEach(t),iho=i(S),V_=n(S,"LI",{});var HCe=s(V_);fee=n(HCe,"STRONG",{});var oXr=s(fee);dho=r(oXr,"squeezebert"),oXr.forEach(t),cho=r(HCe," \u2014 "),wP=n(HCe,"A",{href:!0});var rXr=s(wP);fho=r(rXr,"SqueezeBertForMaskedLM"),rXr.forEach(t),mho=r(HCe," (SqueezeBERT model)"),HCe.forEach(t),gho=i(S),z_=n(S,"LI",{});var UCe=s(z_);mee=n(UCe,"STRONG",{});var tXr=s(mee);hho=r(tXr,"t5"),tXr.forEach(t),pho=r(UCe," \u2014 "),AP=n(UCe,"A",{href:!0});var aXr=s(AP);_ho=r(aXr,"T5ForConditionalGeneration"),aXr.forEach(t),uho=r(UCe," (T5 model)"),UCe.forEach(t),bho=i(S),W_=n(S,"LI",{});var JCe=s(W_);gee=n(JCe,"STRONG",{});var nXr=s(gee);vho=r(nXr,"tapas"),nXr.forEach(t),Tho=r(JCe," \u2014 "),LP=n(JCe,"A",{href:!0});var sXr=s(LP);Fho=r(sXr,"TapasForMaskedLM"),sXr.forEach(t),Cho=r(JCe," (TAPAS model)"),JCe.forEach(t),Mho=i(S),Q_=n(S,"LI",{});var YCe=s(Q_);hee=n(YCe,"STRONG",{});var lXr=s(hee);Eho=r(lXr,"transfo-xl"),lXr.forEach(t),yho=r(YCe," \u2014 "),BP=n(YCe,"A",{href:!0});var iXr=s(BP);who=r(iXr,"TransfoXLLMHeadModel"),iXr.forEach(t),Aho=r(YCe," (Transformer-XL model)"),YCe.forEach(t),Lho=i(S),H_=n(S,"LI",{});var KCe=s(H_);pee=n(KCe,"STRONG",{});var dXr=s(pee);Bho=r(dXr,"unispeech"),dXr.forEach(t),xho=r(KCe," \u2014 "),xP=n(KCe,"A",{href:!0});var cXr=s(xP);kho=r(cXr,"UniSpeechForPreTraining"),cXr.forEach(t),Rho=r(KCe," (UniSpeech model)"),KCe.forEach(t),Sho=i(S),U_=n(S,"LI",{});var ZCe=s(U_);_ee=n(ZCe,"STRONG",{});var fXr=s(_ee);Pho=r(fXr,"unispeech-sat"),fXr.forEach(t),$ho=r(ZCe," \u2014 "),kP=n(ZCe,"A",{href:!0});var mXr=s(kP);Iho=r(mXr,"UniSpeechSatForPreTraining"),mXr.forEach(t),jho=r(ZCe," (UniSpeechSat model)"),ZCe.forEach(t),Dho=i(S),J_=n(S,"LI",{});var eMe=s(J_);uee=n(eMe,"STRONG",{});var gXr=s(uee);Nho=r(gXr,"visual_bert"),gXr.forEach(t),qho=r(eMe," \u2014 "),RP=n(eMe,"A",{href:!0});var hXr=s(RP);Oho=r(hXr,"VisualBertForPreTraining"),hXr.forEach(t),Gho=r(eMe," (VisualBert model)"),eMe.forEach(t),Xho=i(S),Y_=n(S,"LI",{});var oMe=s(Y_);bee=n(oMe,"STRONG",{});var pXr=s(bee);Vho=r(pXr,"vit_mae"),pXr.forEach(t),zho=r(oMe," \u2014 "),SP=n(oMe,"A",{href:!0});var _Xr=s(SP);Who=r(_Xr,"ViTMAEForPreTraining"),_Xr.forEach(t),Qho=r(oMe," (ViTMAE model)"),oMe.forEach(t),Hho=i(S),K_=n(S,"LI",{});var rMe=s(K_);vee=n(rMe,"STRONG",{});var uXr=s(vee);Uho=r(uXr,"wav2vec2"),uXr.forEach(t),Jho=r(rMe," \u2014 "),PP=n(rMe,"A",{href:!0});var bXr=s(PP);Yho=r(bXr,"Wav2Vec2ForPreTraining"),bXr.forEach(t),Kho=r(rMe," (Wav2Vec2 model)"),rMe.forEach(t),Zho=i(S),Z_=n(S,"LI",{});var tMe=s(Z_);Tee=n(tMe,"STRONG",{});var vXr=s(Tee);epo=r(vXr,"xlm"),vXr.forEach(t),opo=r(tMe," \u2014 "),$P=n(tMe,"A",{href:!0});var TXr=s($P);rpo=r(TXr,"XLMWithLMHeadModel"),TXr.forEach(t),tpo=r(tMe," (XLM model)"),tMe.forEach(t),apo=i(S),eu=n(S,"LI",{});var aMe=s(eu);Fee=n(aMe,"STRONG",{});var FXr=s(Fee);npo=r(FXr,"xlm-roberta"),FXr.forEach(t),spo=r(aMe," \u2014 "),IP=n(aMe,"A",{href:!0});var CXr=s(IP);lpo=r(CXr,"XLMRobertaForMaskedLM"),CXr.forEach(t),ipo=r(aMe," (XLM-RoBERTa model)"),aMe.forEach(t),dpo=i(S),ou=n(S,"LI",{});var nMe=s(ou);Cee=n(nMe,"STRONG",{});var MXr=s(Cee);cpo=r(MXr,"xlm-roberta-xl"),MXr.forEach(t),fpo=r(nMe," \u2014 "),jP=n(nMe,"A",{href:!0});var EXr=s(jP);mpo=r(EXr,"XLMRobertaXLForMaskedLM"),EXr.forEach(t),gpo=r(nMe," (XLM-RoBERTa-XL model)"),nMe.forEach(t),hpo=i(S),ru=n(S,"LI",{});var sMe=s(ru);Mee=n(sMe,"STRONG",{});var yXr=s(Mee);ppo=r(yXr,"xlnet"),yXr.forEach(t),_po=r(sMe," \u2014 "),DP=n(sMe,"A",{href:!0});var wXr=s(DP);upo=r(wXr,"XLNetLMHeadModel"),wXr.forEach(t),bpo=r(sMe," (XLNet model)"),sMe.forEach(t),S.forEach(t),vpo=i(Ot),tu=n(Ot,"P",{});var lMe=s(tu);Tpo=r(lMe,"The model is set in evaluation mode by default using "),Eee=n(lMe,"CODE",{});var AXr=s(Eee);Fpo=r(AXr,"model.eval()"),AXr.forEach(t),Cpo=r(lMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yee=n(lMe,"CODE",{});var LXr=s(yee);Mpo=r(LXr,"model.train()"),LXr.forEach(t),lMe.forEach(t),Epo=i(Ot),wee=n(Ot,"P",{});var BXr=s(wee);ypo=r(BXr,"Examples:"),BXr.forEach(t),wpo=i(Ot),m(q4.$$.fragment,Ot),Ot.forEach(t),Hs.forEach(t),Mxe=i(d),td=n(d,"H2",{class:!0});var RRe=s(td);au=n(RRe,"A",{id:!0,class:!0,href:!0});var xXr=s(au);Aee=n(xXr,"SPAN",{});var kXr=s(Aee);m(O4.$$.fragment,kXr),kXr.forEach(t),xXr.forEach(t),Apo=i(RRe),Lee=n(RRe,"SPAN",{});var RXr=s(Lee);Lpo=r(RXr,"AutoModelForCausalLM"),RXr.forEach(t),RRe.forEach(t),Exe=i(d),Ko=n(d,"DIV",{class:!0});var Js=s(Ko);m(G4.$$.fragment,Js),Bpo=i(Js),ad=n(Js,"P",{});var Bz=s(ad);xpo=r(Bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bee=n(Bz,"CODE",{});var SXr=s(Bee);kpo=r(SXr,"from_pretrained()"),SXr.forEach(t),Rpo=r(Bz,"class method or the "),xee=n(Bz,"CODE",{});var PXr=s(xee);Spo=r(PXr,"from_config()"),PXr.forEach(t),Ppo=r(Bz,`class
method.`),Bz.forEach(t),$po=i(Js),X4=n(Js,"P",{});var SRe=s(X4);Ipo=r(SRe,"This class cannot be instantiated directly using "),kee=n(SRe,"CODE",{});var $Xr=s(kee);jpo=r($Xr,"__init__()"),$Xr.forEach(t),Dpo=r(SRe," (throws an error)."),SRe.forEach(t),Npo=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(V4.$$.fragment,Ys),qpo=i(Ys),Ree=n(Ys,"P",{});var IXr=s(Ree);Opo=r(IXr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),IXr.forEach(t),Gpo=i(Ys),nd=n(Ys,"P",{});var xz=s(nd);Xpo=r(xz,`Note:
Loading a model from its configuration file does `),See=n(xz,"STRONG",{});var jXr=s(See);Vpo=r(jXr,"not"),jXr.forEach(t),zpo=r(xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(xz,"CODE",{});var DXr=s(Pee);Wpo=r(DXr,"from_pretrained()"),DXr.forEach(t),Qpo=r(xz,"to load the model weights."),xz.forEach(t),Hpo=i(Ys),$ee=n(Ys,"P",{});var NXr=s($ee);Upo=r(NXr,"Examples:"),NXr.forEach(t),Jpo=i(Ys),m(z4.$$.fragment,Ys),Ys.forEach(t),Ypo=i(Js),Ne=n(Js,"DIV",{class:!0});var Gt=s(Ne);m(W4.$$.fragment,Gt),Kpo=i(Gt),Iee=n(Gt,"P",{});var qXr=s(Iee);Zpo=r(qXr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qXr.forEach(t),e_o=i(Gt),Wa=n(Gt,"P",{});var ZC=s(Wa);o_o=r(ZC,"The model class to instantiate is selected based on the "),jee=n(ZC,"CODE",{});var OXr=s(jee);r_o=r(OXr,"model_type"),OXr.forEach(t),t_o=r(ZC,` property of the config object (either
passed as an argument or loaded from `),Dee=n(ZC,"CODE",{});var GXr=s(Dee);a_o=r(GXr,"pretrained_model_name_or_path"),GXr.forEach(t),n_o=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nee=n(ZC,"CODE",{});var XXr=s(Nee);s_o=r(XXr,"pretrained_model_name_or_path"),XXr.forEach(t),l_o=r(ZC,":"),ZC.forEach(t),i_o=i(Gt),$=n(Gt,"UL",{});var j=s($);nu=n(j,"LI",{});var iMe=s(nu);qee=n(iMe,"STRONG",{});var VXr=s(qee);d_o=r(VXr,"bart"),VXr.forEach(t),c_o=r(iMe," \u2014 "),NP=n(iMe,"A",{href:!0});var zXr=s(NP);f_o=r(zXr,"BartForCausalLM"),zXr.forEach(t),m_o=r(iMe," (BART model)"),iMe.forEach(t),g_o=i(j),su=n(j,"LI",{});var dMe=s(su);Oee=n(dMe,"STRONG",{});var WXr=s(Oee);h_o=r(WXr,"bert"),WXr.forEach(t),p_o=r(dMe," \u2014 "),qP=n(dMe,"A",{href:!0});var QXr=s(qP);__o=r(QXr,"BertLMHeadModel"),QXr.forEach(t),u_o=r(dMe," (BERT model)"),dMe.forEach(t),b_o=i(j),lu=n(j,"LI",{});var cMe=s(lu);Gee=n(cMe,"STRONG",{});var HXr=s(Gee);v_o=r(HXr,"bert-generation"),HXr.forEach(t),T_o=r(cMe," \u2014 "),OP=n(cMe,"A",{href:!0});var UXr=s(OP);F_o=r(UXr,"BertGenerationDecoder"),UXr.forEach(t),C_o=r(cMe," (Bert Generation model)"),cMe.forEach(t),M_o=i(j),iu=n(j,"LI",{});var fMe=s(iu);Xee=n(fMe,"STRONG",{});var JXr=s(Xee);E_o=r(JXr,"big_bird"),JXr.forEach(t),y_o=r(fMe," \u2014 "),GP=n(fMe,"A",{href:!0});var YXr=s(GP);w_o=r(YXr,"BigBirdForCausalLM"),YXr.forEach(t),A_o=r(fMe," (BigBird model)"),fMe.forEach(t),L_o=i(j),du=n(j,"LI",{});var mMe=s(du);Vee=n(mMe,"STRONG",{});var KXr=s(Vee);B_o=r(KXr,"bigbird_pegasus"),KXr.forEach(t),x_o=r(mMe," \u2014 "),XP=n(mMe,"A",{href:!0});var ZXr=s(XP);k_o=r(ZXr,"BigBirdPegasusForCausalLM"),ZXr.forEach(t),R_o=r(mMe," (BigBirdPegasus model)"),mMe.forEach(t),S_o=i(j),cu=n(j,"LI",{});var gMe=s(cu);zee=n(gMe,"STRONG",{});var eVr=s(zee);P_o=r(eVr,"blenderbot"),eVr.forEach(t),$_o=r(gMe," \u2014 "),VP=n(gMe,"A",{href:!0});var oVr=s(VP);I_o=r(oVr,"BlenderbotForCausalLM"),oVr.forEach(t),j_o=r(gMe," (Blenderbot model)"),gMe.forEach(t),D_o=i(j),fu=n(j,"LI",{});var hMe=s(fu);Wee=n(hMe,"STRONG",{});var rVr=s(Wee);N_o=r(rVr,"blenderbot-small"),rVr.forEach(t),q_o=r(hMe," \u2014 "),zP=n(hMe,"A",{href:!0});var tVr=s(zP);O_o=r(tVr,"BlenderbotSmallForCausalLM"),tVr.forEach(t),G_o=r(hMe," (BlenderbotSmall model)"),hMe.forEach(t),X_o=i(j),mu=n(j,"LI",{});var pMe=s(mu);Qee=n(pMe,"STRONG",{});var aVr=s(Qee);V_o=r(aVr,"camembert"),aVr.forEach(t),z_o=r(pMe," \u2014 "),WP=n(pMe,"A",{href:!0});var nVr=s(WP);W_o=r(nVr,"CamembertForCausalLM"),nVr.forEach(t),Q_o=r(pMe," (CamemBERT model)"),pMe.forEach(t),H_o=i(j),gu=n(j,"LI",{});var _Me=s(gu);Hee=n(_Me,"STRONG",{});var sVr=s(Hee);U_o=r(sVr,"ctrl"),sVr.forEach(t),J_o=r(_Me," \u2014 "),QP=n(_Me,"A",{href:!0});var lVr=s(QP);Y_o=r(lVr,"CTRLLMHeadModel"),lVr.forEach(t),K_o=r(_Me," (CTRL model)"),_Me.forEach(t),Z_o=i(j),hu=n(j,"LI",{});var uMe=s(hu);Uee=n(uMe,"STRONG",{});var iVr=s(Uee);euo=r(iVr,"data2vec-text"),iVr.forEach(t),ouo=r(uMe," \u2014 "),HP=n(uMe,"A",{href:!0});var dVr=s(HP);ruo=r(dVr,"Data2VecTextForCausalLM"),dVr.forEach(t),tuo=r(uMe," (Data2VecText model)"),uMe.forEach(t),auo=i(j),pu=n(j,"LI",{});var bMe=s(pu);Jee=n(bMe,"STRONG",{});var cVr=s(Jee);nuo=r(cVr,"electra"),cVr.forEach(t),suo=r(bMe," \u2014 "),UP=n(bMe,"A",{href:!0});var fVr=s(UP);luo=r(fVr,"ElectraForCausalLM"),fVr.forEach(t),iuo=r(bMe," (ELECTRA model)"),bMe.forEach(t),duo=i(j),_u=n(j,"LI",{});var vMe=s(_u);Yee=n(vMe,"STRONG",{});var mVr=s(Yee);cuo=r(mVr,"gpt2"),mVr.forEach(t),fuo=r(vMe," \u2014 "),JP=n(vMe,"A",{href:!0});var gVr=s(JP);muo=r(gVr,"GPT2LMHeadModel"),gVr.forEach(t),guo=r(vMe," (OpenAI GPT-2 model)"),vMe.forEach(t),huo=i(j),uu=n(j,"LI",{});var TMe=s(uu);Kee=n(TMe,"STRONG",{});var hVr=s(Kee);puo=r(hVr,"gpt_neo"),hVr.forEach(t),_uo=r(TMe," \u2014 "),YP=n(TMe,"A",{href:!0});var pVr=s(YP);uuo=r(pVr,"GPTNeoForCausalLM"),pVr.forEach(t),buo=r(TMe," (GPT Neo model)"),TMe.forEach(t),vuo=i(j),bu=n(j,"LI",{});var FMe=s(bu);Zee=n(FMe,"STRONG",{});var _Vr=s(Zee);Tuo=r(_Vr,"gptj"),_Vr.forEach(t),Fuo=r(FMe," \u2014 "),KP=n(FMe,"A",{href:!0});var uVr=s(KP);Cuo=r(uVr,"GPTJForCausalLM"),uVr.forEach(t),Muo=r(FMe," (GPT-J model)"),FMe.forEach(t),Euo=i(j),vu=n(j,"LI",{});var CMe=s(vu);eoe=n(CMe,"STRONG",{});var bVr=s(eoe);yuo=r(bVr,"marian"),bVr.forEach(t),wuo=r(CMe," \u2014 "),ZP=n(CMe,"A",{href:!0});var vVr=s(ZP);Auo=r(vVr,"MarianForCausalLM"),vVr.forEach(t),Luo=r(CMe," (Marian model)"),CMe.forEach(t),Buo=i(j),Tu=n(j,"LI",{});var MMe=s(Tu);ooe=n(MMe,"STRONG",{});var TVr=s(ooe);xuo=r(TVr,"mbart"),TVr.forEach(t),kuo=r(MMe," \u2014 "),e$=n(MMe,"A",{href:!0});var FVr=s(e$);Ruo=r(FVr,"MBartForCausalLM"),FVr.forEach(t),Suo=r(MMe," (mBART model)"),MMe.forEach(t),Puo=i(j),Fu=n(j,"LI",{});var EMe=s(Fu);roe=n(EMe,"STRONG",{});var CVr=s(roe);$uo=r(CVr,"megatron-bert"),CVr.forEach(t),Iuo=r(EMe," \u2014 "),o$=n(EMe,"A",{href:!0});var MVr=s(o$);juo=r(MVr,"MegatronBertForCausalLM"),MVr.forEach(t),Duo=r(EMe," (MegatronBert model)"),EMe.forEach(t),Nuo=i(j),Cu=n(j,"LI",{});var yMe=s(Cu);toe=n(yMe,"STRONG",{});var EVr=s(toe);quo=r(EVr,"openai-gpt"),EVr.forEach(t),Ouo=r(yMe," \u2014 "),r$=n(yMe,"A",{href:!0});var yVr=s(r$);Guo=r(yVr,"OpenAIGPTLMHeadModel"),yVr.forEach(t),Xuo=r(yMe," (OpenAI GPT model)"),yMe.forEach(t),Vuo=i(j),Mu=n(j,"LI",{});var wMe=s(Mu);aoe=n(wMe,"STRONG",{});var wVr=s(aoe);zuo=r(wVr,"pegasus"),wVr.forEach(t),Wuo=r(wMe," \u2014 "),t$=n(wMe,"A",{href:!0});var AVr=s(t$);Quo=r(AVr,"PegasusForCausalLM"),AVr.forEach(t),Huo=r(wMe," (Pegasus model)"),wMe.forEach(t),Uuo=i(j),Eu=n(j,"LI",{});var AMe=s(Eu);noe=n(AMe,"STRONG",{});var LVr=s(noe);Juo=r(LVr,"plbart"),LVr.forEach(t),Yuo=r(AMe," \u2014 "),a$=n(AMe,"A",{href:!0});var BVr=s(a$);Kuo=r(BVr,"PLBartForCausalLM"),BVr.forEach(t),Zuo=r(AMe," (PLBart model)"),AMe.forEach(t),e1o=i(j),yu=n(j,"LI",{});var LMe=s(yu);soe=n(LMe,"STRONG",{});var xVr=s(soe);o1o=r(xVr,"prophetnet"),xVr.forEach(t),r1o=r(LMe," \u2014 "),n$=n(LMe,"A",{href:!0});var kVr=s(n$);t1o=r(kVr,"ProphetNetForCausalLM"),kVr.forEach(t),a1o=r(LMe," (ProphetNet model)"),LMe.forEach(t),n1o=i(j),wu=n(j,"LI",{});var BMe=s(wu);loe=n(BMe,"STRONG",{});var RVr=s(loe);s1o=r(RVr,"qdqbert"),RVr.forEach(t),l1o=r(BMe," \u2014 "),s$=n(BMe,"A",{href:!0});var SVr=s(s$);i1o=r(SVr,"QDQBertLMHeadModel"),SVr.forEach(t),d1o=r(BMe," (QDQBert model)"),BMe.forEach(t),c1o=i(j),Au=n(j,"LI",{});var xMe=s(Au);ioe=n(xMe,"STRONG",{});var PVr=s(ioe);f1o=r(PVr,"reformer"),PVr.forEach(t),m1o=r(xMe," \u2014 "),l$=n(xMe,"A",{href:!0});var $Vr=s(l$);g1o=r($Vr,"ReformerModelWithLMHead"),$Vr.forEach(t),h1o=r(xMe," (Reformer model)"),xMe.forEach(t),p1o=i(j),Lu=n(j,"LI",{});var kMe=s(Lu);doe=n(kMe,"STRONG",{});var IVr=s(doe);_1o=r(IVr,"rembert"),IVr.forEach(t),u1o=r(kMe," \u2014 "),i$=n(kMe,"A",{href:!0});var jVr=s(i$);b1o=r(jVr,"RemBertForCausalLM"),jVr.forEach(t),v1o=r(kMe," (RemBERT model)"),kMe.forEach(t),T1o=i(j),Bu=n(j,"LI",{});var RMe=s(Bu);coe=n(RMe,"STRONG",{});var DVr=s(coe);F1o=r(DVr,"roberta"),DVr.forEach(t),C1o=r(RMe," \u2014 "),d$=n(RMe,"A",{href:!0});var NVr=s(d$);M1o=r(NVr,"RobertaForCausalLM"),NVr.forEach(t),E1o=r(RMe," (RoBERTa model)"),RMe.forEach(t),y1o=i(j),xu=n(j,"LI",{});var SMe=s(xu);foe=n(SMe,"STRONG",{});var qVr=s(foe);w1o=r(qVr,"roformer"),qVr.forEach(t),A1o=r(SMe," \u2014 "),c$=n(SMe,"A",{href:!0});var OVr=s(c$);L1o=r(OVr,"RoFormerForCausalLM"),OVr.forEach(t),B1o=r(SMe," (RoFormer model)"),SMe.forEach(t),x1o=i(j),ku=n(j,"LI",{});var PMe=s(ku);moe=n(PMe,"STRONG",{});var GVr=s(moe);k1o=r(GVr,"speech_to_text_2"),GVr.forEach(t),R1o=r(PMe," \u2014 "),f$=n(PMe,"A",{href:!0});var XVr=s(f$);S1o=r(XVr,"Speech2Text2ForCausalLM"),XVr.forEach(t),P1o=r(PMe," (Speech2Text2 model)"),PMe.forEach(t),$1o=i(j),Ru=n(j,"LI",{});var $Me=s(Ru);goe=n($Me,"STRONG",{});var VVr=s(goe);I1o=r(VVr,"transfo-xl"),VVr.forEach(t),j1o=r($Me," \u2014 "),m$=n($Me,"A",{href:!0});var zVr=s(m$);D1o=r(zVr,"TransfoXLLMHeadModel"),zVr.forEach(t),N1o=r($Me," (Transformer-XL model)"),$Me.forEach(t),q1o=i(j),Su=n(j,"LI",{});var IMe=s(Su);hoe=n(IMe,"STRONG",{});var WVr=s(hoe);O1o=r(WVr,"trocr"),WVr.forEach(t),G1o=r(IMe," \u2014 "),g$=n(IMe,"A",{href:!0});var QVr=s(g$);X1o=r(QVr,"TrOCRForCausalLM"),QVr.forEach(t),V1o=r(IMe," (TrOCR model)"),IMe.forEach(t),z1o=i(j),Pu=n(j,"LI",{});var jMe=s(Pu);poe=n(jMe,"STRONG",{});var HVr=s(poe);W1o=r(HVr,"xglm"),HVr.forEach(t),Q1o=r(jMe," \u2014 "),h$=n(jMe,"A",{href:!0});var UVr=s(h$);H1o=r(UVr,"XGLMForCausalLM"),UVr.forEach(t),U1o=r(jMe," (XGLM model)"),jMe.forEach(t),J1o=i(j),$u=n(j,"LI",{});var DMe=s($u);_oe=n(DMe,"STRONG",{});var JVr=s(_oe);Y1o=r(JVr,"xlm"),JVr.forEach(t),K1o=r(DMe," \u2014 "),p$=n(DMe,"A",{href:!0});var YVr=s(p$);Z1o=r(YVr,"XLMWithLMHeadModel"),YVr.forEach(t),ebo=r(DMe," (XLM model)"),DMe.forEach(t),obo=i(j),Iu=n(j,"LI",{});var NMe=s(Iu);uoe=n(NMe,"STRONG",{});var KVr=s(uoe);rbo=r(KVr,"xlm-prophetnet"),KVr.forEach(t),tbo=r(NMe," \u2014 "),_$=n(NMe,"A",{href:!0});var ZVr=s(_$);abo=r(ZVr,"XLMProphetNetForCausalLM"),ZVr.forEach(t),nbo=r(NMe," (XLMProphetNet model)"),NMe.forEach(t),sbo=i(j),ju=n(j,"LI",{});var qMe=s(ju);boe=n(qMe,"STRONG",{});var ezr=s(boe);lbo=r(ezr,"xlm-roberta"),ezr.forEach(t),ibo=r(qMe," \u2014 "),u$=n(qMe,"A",{href:!0});var ozr=s(u$);dbo=r(ozr,"XLMRobertaForCausalLM"),ozr.forEach(t),cbo=r(qMe," (XLM-RoBERTa model)"),qMe.forEach(t),fbo=i(j),Du=n(j,"LI",{});var OMe=s(Du);voe=n(OMe,"STRONG",{});var rzr=s(voe);mbo=r(rzr,"xlm-roberta-xl"),rzr.forEach(t),gbo=r(OMe," \u2014 "),b$=n(OMe,"A",{href:!0});var tzr=s(b$);hbo=r(tzr,"XLMRobertaXLForCausalLM"),tzr.forEach(t),pbo=r(OMe," (XLM-RoBERTa-XL model)"),OMe.forEach(t),_bo=i(j),Nu=n(j,"LI",{});var GMe=s(Nu);Toe=n(GMe,"STRONG",{});var azr=s(Toe);ubo=r(azr,"xlnet"),azr.forEach(t),bbo=r(GMe," \u2014 "),v$=n(GMe,"A",{href:!0});var nzr=s(v$);vbo=r(nzr,"XLNetLMHeadModel"),nzr.forEach(t),Tbo=r(GMe," (XLNet model)"),GMe.forEach(t),j.forEach(t),Fbo=i(Gt),qu=n(Gt,"P",{});var XMe=s(qu);Cbo=r(XMe,"The model is set in evaluation mode by default using "),Foe=n(XMe,"CODE",{});var szr=s(Foe);Mbo=r(szr,"model.eval()"),szr.forEach(t),Ebo=r(XMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Coe=n(XMe,"CODE",{});var lzr=s(Coe);ybo=r(lzr,"model.train()"),lzr.forEach(t),XMe.forEach(t),wbo=i(Gt),Moe=n(Gt,"P",{});var izr=s(Moe);Abo=r(izr,"Examples:"),izr.forEach(t),Lbo=i(Gt),m(Q4.$$.fragment,Gt),Gt.forEach(t),Js.forEach(t),yxe=i(d),sd=n(d,"H2",{class:!0});var PRe=s(sd);Ou=n(PRe,"A",{id:!0,class:!0,href:!0});var dzr=s(Ou);Eoe=n(dzr,"SPAN",{});var czr=s(Eoe);m(H4.$$.fragment,czr),czr.forEach(t),dzr.forEach(t),Bbo=i(PRe),yoe=n(PRe,"SPAN",{});var fzr=s(yoe);xbo=r(fzr,"AutoModelForMaskedLM"),fzr.forEach(t),PRe.forEach(t),wxe=i(d),Zo=n(d,"DIV",{class:!0});var Ks=s(Zo);m(U4.$$.fragment,Ks),kbo=i(Ks),ld=n(Ks,"P",{});var kz=s(ld);Rbo=r(kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),woe=n(kz,"CODE",{});var mzr=s(woe);Sbo=r(mzr,"from_pretrained()"),mzr.forEach(t),Pbo=r(kz,"class method or the "),Aoe=n(kz,"CODE",{});var gzr=s(Aoe);$bo=r(gzr,"from_config()"),gzr.forEach(t),Ibo=r(kz,`class
method.`),kz.forEach(t),jbo=i(Ks),J4=n(Ks,"P",{});var $Re=s(J4);Dbo=r($Re,"This class cannot be instantiated directly using "),Loe=n($Re,"CODE",{});var hzr=s(Loe);Nbo=r(hzr,"__init__()"),hzr.forEach(t),qbo=r($Re," (throws an error)."),$Re.forEach(t),Obo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(Y4.$$.fragment,Zs),Gbo=i(Zs),Boe=n(Zs,"P",{});var pzr=s(Boe);Xbo=r(pzr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pzr.forEach(t),Vbo=i(Zs),id=n(Zs,"P",{});var Rz=s(id);zbo=r(Rz,`Note:
Loading a model from its configuration file does `),xoe=n(Rz,"STRONG",{});var _zr=s(xoe);Wbo=r(_zr,"not"),_zr.forEach(t),Qbo=r(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=n(Rz,"CODE",{});var uzr=s(koe);Hbo=r(uzr,"from_pretrained()"),uzr.forEach(t),Ubo=r(Rz,"to load the model weights."),Rz.forEach(t),Jbo=i(Zs),Roe=n(Zs,"P",{});var bzr=s(Roe);Ybo=r(bzr,"Examples:"),bzr.forEach(t),Kbo=i(Zs),m(K4.$$.fragment,Zs),Zs.forEach(t),Zbo=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);m(Z4.$$.fragment,Xt),e5o=i(Xt),Soe=n(Xt,"P",{});var vzr=s(Soe);o5o=r(vzr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vzr.forEach(t),r5o=i(Xt),Qa=n(Xt,"P",{});var eM=s(Qa);t5o=r(eM,"The model class to instantiate is selected based on the "),Poe=n(eM,"CODE",{});var Tzr=s(Poe);a5o=r(Tzr,"model_type"),Tzr.forEach(t),n5o=r(eM,` property of the config object (either
passed as an argument or loaded from `),$oe=n(eM,"CODE",{});var Fzr=s($oe);s5o=r(Fzr,"pretrained_model_name_or_path"),Fzr.forEach(t),l5o=r(eM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=n(eM,"CODE",{});var Czr=s(Ioe);i5o=r(Czr,"pretrained_model_name_or_path"),Czr.forEach(t),d5o=r(eM,":"),eM.forEach(t),c5o=i(Xt),I=n(Xt,"UL",{});var D=s(I);Gu=n(D,"LI",{});var VMe=s(Gu);joe=n(VMe,"STRONG",{});var Mzr=s(joe);f5o=r(Mzr,"albert"),Mzr.forEach(t),m5o=r(VMe," \u2014 "),T$=n(VMe,"A",{href:!0});var Ezr=s(T$);g5o=r(Ezr,"AlbertForMaskedLM"),Ezr.forEach(t),h5o=r(VMe," (ALBERT model)"),VMe.forEach(t),p5o=i(D),Xu=n(D,"LI",{});var zMe=s(Xu);Doe=n(zMe,"STRONG",{});var yzr=s(Doe);_5o=r(yzr,"bart"),yzr.forEach(t),u5o=r(zMe," \u2014 "),F$=n(zMe,"A",{href:!0});var wzr=s(F$);b5o=r(wzr,"BartForConditionalGeneration"),wzr.forEach(t),v5o=r(zMe," (BART model)"),zMe.forEach(t),T5o=i(D),Vu=n(D,"LI",{});var WMe=s(Vu);Noe=n(WMe,"STRONG",{});var Azr=s(Noe);F5o=r(Azr,"bert"),Azr.forEach(t),C5o=r(WMe," \u2014 "),C$=n(WMe,"A",{href:!0});var Lzr=s(C$);M5o=r(Lzr,"BertForMaskedLM"),Lzr.forEach(t),E5o=r(WMe," (BERT model)"),WMe.forEach(t),y5o=i(D),zu=n(D,"LI",{});var QMe=s(zu);qoe=n(QMe,"STRONG",{});var Bzr=s(qoe);w5o=r(Bzr,"big_bird"),Bzr.forEach(t),A5o=r(QMe," \u2014 "),M$=n(QMe,"A",{href:!0});var xzr=s(M$);L5o=r(xzr,"BigBirdForMaskedLM"),xzr.forEach(t),B5o=r(QMe," (BigBird model)"),QMe.forEach(t),x5o=i(D),Wu=n(D,"LI",{});var HMe=s(Wu);Ooe=n(HMe,"STRONG",{});var kzr=s(Ooe);k5o=r(kzr,"camembert"),kzr.forEach(t),R5o=r(HMe," \u2014 "),E$=n(HMe,"A",{href:!0});var Rzr=s(E$);S5o=r(Rzr,"CamembertForMaskedLM"),Rzr.forEach(t),P5o=r(HMe," (CamemBERT model)"),HMe.forEach(t),$5o=i(D),Qu=n(D,"LI",{});var UMe=s(Qu);Goe=n(UMe,"STRONG",{});var Szr=s(Goe);I5o=r(Szr,"convbert"),Szr.forEach(t),j5o=r(UMe," \u2014 "),y$=n(UMe,"A",{href:!0});var Pzr=s(y$);D5o=r(Pzr,"ConvBertForMaskedLM"),Pzr.forEach(t),N5o=r(UMe," (ConvBERT model)"),UMe.forEach(t),q5o=i(D),Hu=n(D,"LI",{});var JMe=s(Hu);Xoe=n(JMe,"STRONG",{});var $zr=s(Xoe);O5o=r($zr,"data2vec-text"),$zr.forEach(t),G5o=r(JMe," \u2014 "),w$=n(JMe,"A",{href:!0});var Izr=s(w$);X5o=r(Izr,"Data2VecTextForMaskedLM"),Izr.forEach(t),V5o=r(JMe," (Data2VecText model)"),JMe.forEach(t),z5o=i(D),Uu=n(D,"LI",{});var YMe=s(Uu);Voe=n(YMe,"STRONG",{});var jzr=s(Voe);W5o=r(jzr,"deberta"),jzr.forEach(t),Q5o=r(YMe," \u2014 "),A$=n(YMe,"A",{href:!0});var Dzr=s(A$);H5o=r(Dzr,"DebertaForMaskedLM"),Dzr.forEach(t),U5o=r(YMe," (DeBERTa model)"),YMe.forEach(t),J5o=i(D),Ju=n(D,"LI",{});var KMe=s(Ju);zoe=n(KMe,"STRONG",{});var Nzr=s(zoe);Y5o=r(Nzr,"deberta-v2"),Nzr.forEach(t),K5o=r(KMe," \u2014 "),L$=n(KMe,"A",{href:!0});var qzr=s(L$);Z5o=r(qzr,"DebertaV2ForMaskedLM"),qzr.forEach(t),e2o=r(KMe," (DeBERTa-v2 model)"),KMe.forEach(t),o2o=i(D),Yu=n(D,"LI",{});var ZMe=s(Yu);Woe=n(ZMe,"STRONG",{});var Ozr=s(Woe);r2o=r(Ozr,"distilbert"),Ozr.forEach(t),t2o=r(ZMe," \u2014 "),B$=n(ZMe,"A",{href:!0});var Gzr=s(B$);a2o=r(Gzr,"DistilBertForMaskedLM"),Gzr.forEach(t),n2o=r(ZMe," (DistilBERT model)"),ZMe.forEach(t),s2o=i(D),Ku=n(D,"LI",{});var e4e=s(Ku);Qoe=n(e4e,"STRONG",{});var Xzr=s(Qoe);l2o=r(Xzr,"electra"),Xzr.forEach(t),i2o=r(e4e," \u2014 "),x$=n(e4e,"A",{href:!0});var Vzr=s(x$);d2o=r(Vzr,"ElectraForMaskedLM"),Vzr.forEach(t),c2o=r(e4e," (ELECTRA model)"),e4e.forEach(t),f2o=i(D),Zu=n(D,"LI",{});var o4e=s(Zu);Hoe=n(o4e,"STRONG",{});var zzr=s(Hoe);m2o=r(zzr,"flaubert"),zzr.forEach(t),g2o=r(o4e," \u2014 "),k$=n(o4e,"A",{href:!0});var Wzr=s(k$);h2o=r(Wzr,"FlaubertWithLMHeadModel"),Wzr.forEach(t),p2o=r(o4e," (FlauBERT model)"),o4e.forEach(t),_2o=i(D),e1=n(D,"LI",{});var r4e=s(e1);Uoe=n(r4e,"STRONG",{});var Qzr=s(Uoe);u2o=r(Qzr,"fnet"),Qzr.forEach(t),b2o=r(r4e," \u2014 "),R$=n(r4e,"A",{href:!0});var Hzr=s(R$);v2o=r(Hzr,"FNetForMaskedLM"),Hzr.forEach(t),T2o=r(r4e," (FNet model)"),r4e.forEach(t),F2o=i(D),o1=n(D,"LI",{});var t4e=s(o1);Joe=n(t4e,"STRONG",{});var Uzr=s(Joe);C2o=r(Uzr,"funnel"),Uzr.forEach(t),M2o=r(t4e," \u2014 "),S$=n(t4e,"A",{href:!0});var Jzr=s(S$);E2o=r(Jzr,"FunnelForMaskedLM"),Jzr.forEach(t),y2o=r(t4e," (Funnel Transformer model)"),t4e.forEach(t),w2o=i(D),r1=n(D,"LI",{});var a4e=s(r1);Yoe=n(a4e,"STRONG",{});var Yzr=s(Yoe);A2o=r(Yzr,"ibert"),Yzr.forEach(t),L2o=r(a4e," \u2014 "),P$=n(a4e,"A",{href:!0});var Kzr=s(P$);B2o=r(Kzr,"IBertForMaskedLM"),Kzr.forEach(t),x2o=r(a4e," (I-BERT model)"),a4e.forEach(t),k2o=i(D),t1=n(D,"LI",{});var n4e=s(t1);Koe=n(n4e,"STRONG",{});var Zzr=s(Koe);R2o=r(Zzr,"layoutlm"),Zzr.forEach(t),S2o=r(n4e," \u2014 "),$$=n(n4e,"A",{href:!0});var eWr=s($$);P2o=r(eWr,"LayoutLMForMaskedLM"),eWr.forEach(t),$2o=r(n4e," (LayoutLM model)"),n4e.forEach(t),I2o=i(D),a1=n(D,"LI",{});var s4e=s(a1);Zoe=n(s4e,"STRONG",{});var oWr=s(Zoe);j2o=r(oWr,"longformer"),oWr.forEach(t),D2o=r(s4e," \u2014 "),I$=n(s4e,"A",{href:!0});var rWr=s(I$);N2o=r(rWr,"LongformerForMaskedLM"),rWr.forEach(t),q2o=r(s4e," (Longformer model)"),s4e.forEach(t),O2o=i(D),n1=n(D,"LI",{});var l4e=s(n1);ere=n(l4e,"STRONG",{});var tWr=s(ere);G2o=r(tWr,"mbart"),tWr.forEach(t),X2o=r(l4e," \u2014 "),j$=n(l4e,"A",{href:!0});var aWr=s(j$);V2o=r(aWr,"MBartForConditionalGeneration"),aWr.forEach(t),z2o=r(l4e," (mBART model)"),l4e.forEach(t),W2o=i(D),s1=n(D,"LI",{});var i4e=s(s1);ore=n(i4e,"STRONG",{});var nWr=s(ore);Q2o=r(nWr,"megatron-bert"),nWr.forEach(t),H2o=r(i4e," \u2014 "),D$=n(i4e,"A",{href:!0});var sWr=s(D$);U2o=r(sWr,"MegatronBertForMaskedLM"),sWr.forEach(t),J2o=r(i4e," (MegatronBert model)"),i4e.forEach(t),Y2o=i(D),l1=n(D,"LI",{});var d4e=s(l1);rre=n(d4e,"STRONG",{});var lWr=s(rre);K2o=r(lWr,"mobilebert"),lWr.forEach(t),Z2o=r(d4e," \u2014 "),N$=n(d4e,"A",{href:!0});var iWr=s(N$);evo=r(iWr,"MobileBertForMaskedLM"),iWr.forEach(t),ovo=r(d4e," (MobileBERT model)"),d4e.forEach(t),rvo=i(D),i1=n(D,"LI",{});var c4e=s(i1);tre=n(c4e,"STRONG",{});var dWr=s(tre);tvo=r(dWr,"mpnet"),dWr.forEach(t),avo=r(c4e," \u2014 "),q$=n(c4e,"A",{href:!0});var cWr=s(q$);nvo=r(cWr,"MPNetForMaskedLM"),cWr.forEach(t),svo=r(c4e," (MPNet model)"),c4e.forEach(t),lvo=i(D),d1=n(D,"LI",{});var f4e=s(d1);are=n(f4e,"STRONG",{});var fWr=s(are);ivo=r(fWr,"nystromformer"),fWr.forEach(t),dvo=r(f4e," \u2014 "),O$=n(f4e,"A",{href:!0});var mWr=s(O$);cvo=r(mWr,"NystromformerForMaskedLM"),mWr.forEach(t),fvo=r(f4e," (Nystromformer model)"),f4e.forEach(t),mvo=i(D),c1=n(D,"LI",{});var m4e=s(c1);nre=n(m4e,"STRONG",{});var gWr=s(nre);gvo=r(gWr,"perceiver"),gWr.forEach(t),hvo=r(m4e," \u2014 "),G$=n(m4e,"A",{href:!0});var hWr=s(G$);pvo=r(hWr,"PerceiverForMaskedLM"),hWr.forEach(t),_vo=r(m4e," (Perceiver model)"),m4e.forEach(t),uvo=i(D),f1=n(D,"LI",{});var g4e=s(f1);sre=n(g4e,"STRONG",{});var pWr=s(sre);bvo=r(pWr,"qdqbert"),pWr.forEach(t),vvo=r(g4e," \u2014 "),X$=n(g4e,"A",{href:!0});var _Wr=s(X$);Tvo=r(_Wr,"QDQBertForMaskedLM"),_Wr.forEach(t),Fvo=r(g4e," (QDQBert model)"),g4e.forEach(t),Cvo=i(D),m1=n(D,"LI",{});var h4e=s(m1);lre=n(h4e,"STRONG",{});var uWr=s(lre);Mvo=r(uWr,"reformer"),uWr.forEach(t),Evo=r(h4e," \u2014 "),V$=n(h4e,"A",{href:!0});var bWr=s(V$);yvo=r(bWr,"ReformerForMaskedLM"),bWr.forEach(t),wvo=r(h4e," (Reformer model)"),h4e.forEach(t),Avo=i(D),g1=n(D,"LI",{});var p4e=s(g1);ire=n(p4e,"STRONG",{});var vWr=s(ire);Lvo=r(vWr,"rembert"),vWr.forEach(t),Bvo=r(p4e," \u2014 "),z$=n(p4e,"A",{href:!0});var TWr=s(z$);xvo=r(TWr,"RemBertForMaskedLM"),TWr.forEach(t),kvo=r(p4e," (RemBERT model)"),p4e.forEach(t),Rvo=i(D),h1=n(D,"LI",{});var _4e=s(h1);dre=n(_4e,"STRONG",{});var FWr=s(dre);Svo=r(FWr,"roberta"),FWr.forEach(t),Pvo=r(_4e," \u2014 "),W$=n(_4e,"A",{href:!0});var CWr=s(W$);$vo=r(CWr,"RobertaForMaskedLM"),CWr.forEach(t),Ivo=r(_4e," (RoBERTa model)"),_4e.forEach(t),jvo=i(D),p1=n(D,"LI",{});var u4e=s(p1);cre=n(u4e,"STRONG",{});var MWr=s(cre);Dvo=r(MWr,"roformer"),MWr.forEach(t),Nvo=r(u4e," \u2014 "),Q$=n(u4e,"A",{href:!0});var EWr=s(Q$);qvo=r(EWr,"RoFormerForMaskedLM"),EWr.forEach(t),Ovo=r(u4e," (RoFormer model)"),u4e.forEach(t),Gvo=i(D),_1=n(D,"LI",{});var b4e=s(_1);fre=n(b4e,"STRONG",{});var yWr=s(fre);Xvo=r(yWr,"squeezebert"),yWr.forEach(t),Vvo=r(b4e," \u2014 "),H$=n(b4e,"A",{href:!0});var wWr=s(H$);zvo=r(wWr,"SqueezeBertForMaskedLM"),wWr.forEach(t),Wvo=r(b4e," (SqueezeBERT model)"),b4e.forEach(t),Qvo=i(D),u1=n(D,"LI",{});var v4e=s(u1);mre=n(v4e,"STRONG",{});var AWr=s(mre);Hvo=r(AWr,"tapas"),AWr.forEach(t),Uvo=r(v4e," \u2014 "),U$=n(v4e,"A",{href:!0});var LWr=s(U$);Jvo=r(LWr,"TapasForMaskedLM"),LWr.forEach(t),Yvo=r(v4e," (TAPAS model)"),v4e.forEach(t),Kvo=i(D),b1=n(D,"LI",{});var T4e=s(b1);gre=n(T4e,"STRONG",{});var BWr=s(gre);Zvo=r(BWr,"wav2vec2"),BWr.forEach(t),e6o=r(T4e," \u2014 "),hre=n(T4e,"CODE",{});var xWr=s(hre);o6o=r(xWr,"Wav2Vec2ForMaskedLM"),xWr.forEach(t),r6o=r(T4e,"(Wav2Vec2 model)"),T4e.forEach(t),t6o=i(D),v1=n(D,"LI",{});var F4e=s(v1);pre=n(F4e,"STRONG",{});var kWr=s(pre);a6o=r(kWr,"xlm"),kWr.forEach(t),n6o=r(F4e," \u2014 "),J$=n(F4e,"A",{href:!0});var RWr=s(J$);s6o=r(RWr,"XLMWithLMHeadModel"),RWr.forEach(t),l6o=r(F4e," (XLM model)"),F4e.forEach(t),i6o=i(D),T1=n(D,"LI",{});var C4e=s(T1);_re=n(C4e,"STRONG",{});var SWr=s(_re);d6o=r(SWr,"xlm-roberta"),SWr.forEach(t),c6o=r(C4e," \u2014 "),Y$=n(C4e,"A",{href:!0});var PWr=s(Y$);f6o=r(PWr,"XLMRobertaForMaskedLM"),PWr.forEach(t),m6o=r(C4e," (XLM-RoBERTa model)"),C4e.forEach(t),g6o=i(D),F1=n(D,"LI",{});var M4e=s(F1);ure=n(M4e,"STRONG",{});var $Wr=s(ure);h6o=r($Wr,"xlm-roberta-xl"),$Wr.forEach(t),p6o=r(M4e," \u2014 "),K$=n(M4e,"A",{href:!0});var IWr=s(K$);_6o=r(IWr,"XLMRobertaXLForMaskedLM"),IWr.forEach(t),u6o=r(M4e," (XLM-RoBERTa-XL model)"),M4e.forEach(t),b6o=i(D),C1=n(D,"LI",{});var E4e=s(C1);bre=n(E4e,"STRONG",{});var jWr=s(bre);v6o=r(jWr,"yoso"),jWr.forEach(t),T6o=r(E4e," \u2014 "),Z$=n(E4e,"A",{href:!0});var DWr=s(Z$);F6o=r(DWr,"YosoForMaskedLM"),DWr.forEach(t),C6o=r(E4e," (YOSO model)"),E4e.forEach(t),D.forEach(t),M6o=i(Xt),M1=n(Xt,"P",{});var y4e=s(M1);E6o=r(y4e,"The model is set in evaluation mode by default using "),vre=n(y4e,"CODE",{});var NWr=s(vre);y6o=r(NWr,"model.eval()"),NWr.forEach(t),w6o=r(y4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tre=n(y4e,"CODE",{});var qWr=s(Tre);A6o=r(qWr,"model.train()"),qWr.forEach(t),y4e.forEach(t),L6o=i(Xt),Fre=n(Xt,"P",{});var OWr=s(Fre);B6o=r(OWr,"Examples:"),OWr.forEach(t),x6o=i(Xt),m(eE.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),Axe=i(d),dd=n(d,"H2",{class:!0});var IRe=s(dd);E1=n(IRe,"A",{id:!0,class:!0,href:!0});var GWr=s(E1);Cre=n(GWr,"SPAN",{});var XWr=s(Cre);m(oE.$$.fragment,XWr),XWr.forEach(t),GWr.forEach(t),k6o=i(IRe),Mre=n(IRe,"SPAN",{});var VWr=s(Mre);R6o=r(VWr,"AutoModelForSeq2SeqLM"),VWr.forEach(t),IRe.forEach(t),Lxe=i(d),er=n(d,"DIV",{class:!0});var el=s(er);m(rE.$$.fragment,el),S6o=i(el),cd=n(el,"P",{});var Sz=s(cd);P6o=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ere=n(Sz,"CODE",{});var zWr=s(Ere);$6o=r(zWr,"from_pretrained()"),zWr.forEach(t),I6o=r(Sz,"class method or the "),yre=n(Sz,"CODE",{});var WWr=s(yre);j6o=r(WWr,"from_config()"),WWr.forEach(t),D6o=r(Sz,`class
method.`),Sz.forEach(t),N6o=i(el),tE=n(el,"P",{});var jRe=s(tE);q6o=r(jRe,"This class cannot be instantiated directly using "),wre=n(jRe,"CODE",{});var QWr=s(wre);O6o=r(QWr,"__init__()"),QWr.forEach(t),G6o=r(jRe," (throws an error)."),jRe.forEach(t),X6o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(aE.$$.fragment,ol),V6o=i(ol),Are=n(ol,"P",{});var HWr=s(Are);z6o=r(HWr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),HWr.forEach(t),W6o=i(ol),fd=n(ol,"P",{});var Pz=s(fd);Q6o=r(Pz,`Note:
Loading a model from its configuration file does `),Lre=n(Pz,"STRONG",{});var UWr=s(Lre);H6o=r(UWr,"not"),UWr.forEach(t),U6o=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=n(Pz,"CODE",{});var JWr=s(Bre);J6o=r(JWr,"from_pretrained()"),JWr.forEach(t),Y6o=r(Pz,"to load the model weights."),Pz.forEach(t),K6o=i(ol),xre=n(ol,"P",{});var YWr=s(xre);Z6o=r(YWr,"Examples:"),YWr.forEach(t),eTo=i(ol),m(nE.$$.fragment,ol),ol.forEach(t),oTo=i(el),Oe=n(el,"DIV",{class:!0});var Vt=s(Oe);m(sE.$$.fragment,Vt),rTo=i(Vt),kre=n(Vt,"P",{});var KWr=s(kre);tTo=r(KWr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),KWr.forEach(t),aTo=i(Vt),Ha=n(Vt,"P",{});var oM=s(Ha);nTo=r(oM,"The model class to instantiate is selected based on the "),Rre=n(oM,"CODE",{});var ZWr=s(Rre);sTo=r(ZWr,"model_type"),ZWr.forEach(t),lTo=r(oM,` property of the config object (either
passed as an argument or loaded from `),Sre=n(oM,"CODE",{});var eQr=s(Sre);iTo=r(eQr,"pretrained_model_name_or_path"),eQr.forEach(t),dTo=r(oM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=n(oM,"CODE",{});var oQr=s(Pre);cTo=r(oQr,"pretrained_model_name_or_path"),oQr.forEach(t),fTo=r(oM,":"),oM.forEach(t),mTo=i(Vt),ne=n(Vt,"UL",{});var ie=s(ne);y1=n(ie,"LI",{});var w4e=s(y1);$re=n(w4e,"STRONG",{});var rQr=s($re);gTo=r(rQr,"bart"),rQr.forEach(t),hTo=r(w4e," \u2014 "),eI=n(w4e,"A",{href:!0});var tQr=s(eI);pTo=r(tQr,"BartForConditionalGeneration"),tQr.forEach(t),_To=r(w4e," (BART model)"),w4e.forEach(t),uTo=i(ie),w1=n(ie,"LI",{});var A4e=s(w1);Ire=n(A4e,"STRONG",{});var aQr=s(Ire);bTo=r(aQr,"bigbird_pegasus"),aQr.forEach(t),vTo=r(A4e," \u2014 "),oI=n(A4e,"A",{href:!0});var nQr=s(oI);TTo=r(nQr,"BigBirdPegasusForConditionalGeneration"),nQr.forEach(t),FTo=r(A4e," (BigBirdPegasus model)"),A4e.forEach(t),CTo=i(ie),A1=n(ie,"LI",{});var L4e=s(A1);jre=n(L4e,"STRONG",{});var sQr=s(jre);MTo=r(sQr,"blenderbot"),sQr.forEach(t),ETo=r(L4e," \u2014 "),rI=n(L4e,"A",{href:!0});var lQr=s(rI);yTo=r(lQr,"BlenderbotForConditionalGeneration"),lQr.forEach(t),wTo=r(L4e," (Blenderbot model)"),L4e.forEach(t),ATo=i(ie),L1=n(ie,"LI",{});var B4e=s(L1);Dre=n(B4e,"STRONG",{});var iQr=s(Dre);LTo=r(iQr,"blenderbot-small"),iQr.forEach(t),BTo=r(B4e," \u2014 "),tI=n(B4e,"A",{href:!0});var dQr=s(tI);xTo=r(dQr,"BlenderbotSmallForConditionalGeneration"),dQr.forEach(t),kTo=r(B4e," (BlenderbotSmall model)"),B4e.forEach(t),RTo=i(ie),B1=n(ie,"LI",{});var x4e=s(B1);Nre=n(x4e,"STRONG",{});var cQr=s(Nre);STo=r(cQr,"encoder-decoder"),cQr.forEach(t),PTo=r(x4e," \u2014 "),aI=n(x4e,"A",{href:!0});var fQr=s(aI);$To=r(fQr,"EncoderDecoderModel"),fQr.forEach(t),ITo=r(x4e," (Encoder decoder model)"),x4e.forEach(t),jTo=i(ie),x1=n(ie,"LI",{});var k4e=s(x1);qre=n(k4e,"STRONG",{});var mQr=s(qre);DTo=r(mQr,"fsmt"),mQr.forEach(t),NTo=r(k4e," \u2014 "),nI=n(k4e,"A",{href:!0});var gQr=s(nI);qTo=r(gQr,"FSMTForConditionalGeneration"),gQr.forEach(t),OTo=r(k4e," (FairSeq Machine-Translation model)"),k4e.forEach(t),GTo=i(ie),k1=n(ie,"LI",{});var R4e=s(k1);Ore=n(R4e,"STRONG",{});var hQr=s(Ore);XTo=r(hQr,"led"),hQr.forEach(t),VTo=r(R4e," \u2014 "),sI=n(R4e,"A",{href:!0});var pQr=s(sI);zTo=r(pQr,"LEDForConditionalGeneration"),pQr.forEach(t),WTo=r(R4e," (LED model)"),R4e.forEach(t),QTo=i(ie),R1=n(ie,"LI",{});var S4e=s(R1);Gre=n(S4e,"STRONG",{});var _Qr=s(Gre);HTo=r(_Qr,"m2m_100"),_Qr.forEach(t),UTo=r(S4e," \u2014 "),lI=n(S4e,"A",{href:!0});var uQr=s(lI);JTo=r(uQr,"M2M100ForConditionalGeneration"),uQr.forEach(t),YTo=r(S4e," (M2M100 model)"),S4e.forEach(t),KTo=i(ie),S1=n(ie,"LI",{});var P4e=s(S1);Xre=n(P4e,"STRONG",{});var bQr=s(Xre);ZTo=r(bQr,"marian"),bQr.forEach(t),e8o=r(P4e," \u2014 "),iI=n(P4e,"A",{href:!0});var vQr=s(iI);o8o=r(vQr,"MarianMTModel"),vQr.forEach(t),r8o=r(P4e," (Marian model)"),P4e.forEach(t),t8o=i(ie),P1=n(ie,"LI",{});var $4e=s(P1);Vre=n($4e,"STRONG",{});var TQr=s(Vre);a8o=r(TQr,"mbart"),TQr.forEach(t),n8o=r($4e," \u2014 "),dI=n($4e,"A",{href:!0});var FQr=s(dI);s8o=r(FQr,"MBartForConditionalGeneration"),FQr.forEach(t),l8o=r($4e," (mBART model)"),$4e.forEach(t),i8o=i(ie),$1=n(ie,"LI",{});var I4e=s($1);zre=n(I4e,"STRONG",{});var CQr=s(zre);d8o=r(CQr,"mt5"),CQr.forEach(t),c8o=r(I4e," \u2014 "),cI=n(I4e,"A",{href:!0});var MQr=s(cI);f8o=r(MQr,"MT5ForConditionalGeneration"),MQr.forEach(t),m8o=r(I4e," (mT5 model)"),I4e.forEach(t),g8o=i(ie),I1=n(ie,"LI",{});var j4e=s(I1);Wre=n(j4e,"STRONG",{});var EQr=s(Wre);h8o=r(EQr,"pegasus"),EQr.forEach(t),p8o=r(j4e," \u2014 "),fI=n(j4e,"A",{href:!0});var yQr=s(fI);_8o=r(yQr,"PegasusForConditionalGeneration"),yQr.forEach(t),u8o=r(j4e," (Pegasus model)"),j4e.forEach(t),b8o=i(ie),j1=n(ie,"LI",{});var D4e=s(j1);Qre=n(D4e,"STRONG",{});var wQr=s(Qre);v8o=r(wQr,"plbart"),wQr.forEach(t),T8o=r(D4e," \u2014 "),mI=n(D4e,"A",{href:!0});var AQr=s(mI);F8o=r(AQr,"PLBartForConditionalGeneration"),AQr.forEach(t),C8o=r(D4e," (PLBart model)"),D4e.forEach(t),M8o=i(ie),D1=n(ie,"LI",{});var N4e=s(D1);Hre=n(N4e,"STRONG",{});var LQr=s(Hre);E8o=r(LQr,"prophetnet"),LQr.forEach(t),y8o=r(N4e," \u2014 "),gI=n(N4e,"A",{href:!0});var BQr=s(gI);w8o=r(BQr,"ProphetNetForConditionalGeneration"),BQr.forEach(t),A8o=r(N4e," (ProphetNet model)"),N4e.forEach(t),L8o=i(ie),N1=n(ie,"LI",{});var q4e=s(N1);Ure=n(q4e,"STRONG",{});var xQr=s(Ure);B8o=r(xQr,"t5"),xQr.forEach(t),x8o=r(q4e," \u2014 "),hI=n(q4e,"A",{href:!0});var kQr=s(hI);k8o=r(kQr,"T5ForConditionalGeneration"),kQr.forEach(t),R8o=r(q4e," (T5 model)"),q4e.forEach(t),S8o=i(ie),q1=n(ie,"LI",{});var O4e=s(q1);Jre=n(O4e,"STRONG",{});var RQr=s(Jre);P8o=r(RQr,"xlm-prophetnet"),RQr.forEach(t),$8o=r(O4e," \u2014 "),pI=n(O4e,"A",{href:!0});var SQr=s(pI);I8o=r(SQr,"XLMProphetNetForConditionalGeneration"),SQr.forEach(t),j8o=r(O4e," (XLMProphetNet model)"),O4e.forEach(t),ie.forEach(t),D8o=i(Vt),O1=n(Vt,"P",{});var G4e=s(O1);N8o=r(G4e,"The model is set in evaluation mode by default using "),Yre=n(G4e,"CODE",{});var PQr=s(Yre);q8o=r(PQr,"model.eval()"),PQr.forEach(t),O8o=r(G4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kre=n(G4e,"CODE",{});var $Qr=s(Kre);G8o=r($Qr,"model.train()"),$Qr.forEach(t),G4e.forEach(t),X8o=i(Vt),Zre=n(Vt,"P",{});var IQr=s(Zre);V8o=r(IQr,"Examples:"),IQr.forEach(t),z8o=i(Vt),m(lE.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Bxe=i(d),md=n(d,"H2",{class:!0});var DRe=s(md);G1=n(DRe,"A",{id:!0,class:!0,href:!0});var jQr=s(G1);ete=n(jQr,"SPAN",{});var DQr=s(ete);m(iE.$$.fragment,DQr),DQr.forEach(t),jQr.forEach(t),W8o=i(DRe),ote=n(DRe,"SPAN",{});var NQr=s(ote);Q8o=r(NQr,"AutoModelForSequenceClassification"),NQr.forEach(t),DRe.forEach(t),xxe=i(d),or=n(d,"DIV",{class:!0});var rl=s(or);m(dE.$$.fragment,rl),H8o=i(rl),gd=n(rl,"P",{});var $z=s(gd);U8o=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rte=n($z,"CODE",{});var qQr=s(rte);J8o=r(qQr,"from_pretrained()"),qQr.forEach(t),Y8o=r($z,"class method or the "),tte=n($z,"CODE",{});var OQr=s(tte);K8o=r(OQr,"from_config()"),OQr.forEach(t),Z8o=r($z,`class
method.`),$z.forEach(t),eFo=i(rl),cE=n(rl,"P",{});var NRe=s(cE);oFo=r(NRe,"This class cannot be instantiated directly using "),ate=n(NRe,"CODE",{});var GQr=s(ate);rFo=r(GQr,"__init__()"),GQr.forEach(t),tFo=r(NRe," (throws an error)."),NRe.forEach(t),aFo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(fE.$$.fragment,tl),nFo=i(tl),nte=n(tl,"P",{});var XQr=s(nte);sFo=r(XQr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XQr.forEach(t),lFo=i(tl),hd=n(tl,"P",{});var Iz=s(hd);iFo=r(Iz,`Note:
Loading a model from its configuration file does `),ste=n(Iz,"STRONG",{});var VQr=s(ste);dFo=r(VQr,"not"),VQr.forEach(t),cFo=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),lte=n(Iz,"CODE",{});var zQr=s(lte);fFo=r(zQr,"from_pretrained()"),zQr.forEach(t),mFo=r(Iz,"to load the model weights."),Iz.forEach(t),gFo=i(tl),ite=n(tl,"P",{});var WQr=s(ite);hFo=r(WQr,"Examples:"),WQr.forEach(t),pFo=i(tl),m(mE.$$.fragment,tl),tl.forEach(t),_Fo=i(rl),Ge=n(rl,"DIV",{class:!0});var zt=s(Ge);m(gE.$$.fragment,zt),uFo=i(zt),dte=n(zt,"P",{});var QQr=s(dte);bFo=r(QQr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QQr.forEach(t),vFo=i(zt),Ua=n(zt,"P",{});var rM=s(Ua);TFo=r(rM,"The model class to instantiate is selected based on the "),cte=n(rM,"CODE",{});var HQr=s(cte);FFo=r(HQr,"model_type"),HQr.forEach(t),CFo=r(rM,` property of the config object (either
passed as an argument or loaded from `),fte=n(rM,"CODE",{});var UQr=s(fte);MFo=r(UQr,"pretrained_model_name_or_path"),UQr.forEach(t),EFo=r(rM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mte=n(rM,"CODE",{});var JQr=s(mte);yFo=r(JQr,"pretrained_model_name_or_path"),JQr.forEach(t),wFo=r(rM,":"),rM.forEach(t),AFo=i(zt),A=n(zt,"UL",{});var L=s(A);X1=n(L,"LI",{});var X4e=s(X1);gte=n(X4e,"STRONG",{});var YQr=s(gte);LFo=r(YQr,"albert"),YQr.forEach(t),BFo=r(X4e," \u2014 "),_I=n(X4e,"A",{href:!0});var KQr=s(_I);xFo=r(KQr,"AlbertForSequenceClassification"),KQr.forEach(t),kFo=r(X4e," (ALBERT model)"),X4e.forEach(t),RFo=i(L),V1=n(L,"LI",{});var V4e=s(V1);hte=n(V4e,"STRONG",{});var ZQr=s(hte);SFo=r(ZQr,"bart"),ZQr.forEach(t),PFo=r(V4e," \u2014 "),uI=n(V4e,"A",{href:!0});var eHr=s(uI);$Fo=r(eHr,"BartForSequenceClassification"),eHr.forEach(t),IFo=r(V4e," (BART model)"),V4e.forEach(t),jFo=i(L),z1=n(L,"LI",{});var z4e=s(z1);pte=n(z4e,"STRONG",{});var oHr=s(pte);DFo=r(oHr,"bert"),oHr.forEach(t),NFo=r(z4e," \u2014 "),bI=n(z4e,"A",{href:!0});var rHr=s(bI);qFo=r(rHr,"BertForSequenceClassification"),rHr.forEach(t),OFo=r(z4e," (BERT model)"),z4e.forEach(t),GFo=i(L),W1=n(L,"LI",{});var W4e=s(W1);_te=n(W4e,"STRONG",{});var tHr=s(_te);XFo=r(tHr,"big_bird"),tHr.forEach(t),VFo=r(W4e," \u2014 "),vI=n(W4e,"A",{href:!0});var aHr=s(vI);zFo=r(aHr,"BigBirdForSequenceClassification"),aHr.forEach(t),WFo=r(W4e," (BigBird model)"),W4e.forEach(t),QFo=i(L),Q1=n(L,"LI",{});var Q4e=s(Q1);ute=n(Q4e,"STRONG",{});var nHr=s(ute);HFo=r(nHr,"bigbird_pegasus"),nHr.forEach(t),UFo=r(Q4e," \u2014 "),TI=n(Q4e,"A",{href:!0});var sHr=s(TI);JFo=r(sHr,"BigBirdPegasusForSequenceClassification"),sHr.forEach(t),YFo=r(Q4e," (BigBirdPegasus model)"),Q4e.forEach(t),KFo=i(L),H1=n(L,"LI",{});var H4e=s(H1);bte=n(H4e,"STRONG",{});var lHr=s(bte);ZFo=r(lHr,"camembert"),lHr.forEach(t),e9o=r(H4e," \u2014 "),FI=n(H4e,"A",{href:!0});var iHr=s(FI);o9o=r(iHr,"CamembertForSequenceClassification"),iHr.forEach(t),r9o=r(H4e," (CamemBERT model)"),H4e.forEach(t),t9o=i(L),U1=n(L,"LI",{});var U4e=s(U1);vte=n(U4e,"STRONG",{});var dHr=s(vte);a9o=r(dHr,"canine"),dHr.forEach(t),n9o=r(U4e," \u2014 "),CI=n(U4e,"A",{href:!0});var cHr=s(CI);s9o=r(cHr,"CanineForSequenceClassification"),cHr.forEach(t),l9o=r(U4e," (Canine model)"),U4e.forEach(t),i9o=i(L),J1=n(L,"LI",{});var J4e=s(J1);Tte=n(J4e,"STRONG",{});var fHr=s(Tte);d9o=r(fHr,"convbert"),fHr.forEach(t),c9o=r(J4e," \u2014 "),MI=n(J4e,"A",{href:!0});var mHr=s(MI);f9o=r(mHr,"ConvBertForSequenceClassification"),mHr.forEach(t),m9o=r(J4e," (ConvBERT model)"),J4e.forEach(t),g9o=i(L),Y1=n(L,"LI",{});var Y4e=s(Y1);Fte=n(Y4e,"STRONG",{});var gHr=s(Fte);h9o=r(gHr,"ctrl"),gHr.forEach(t),p9o=r(Y4e," \u2014 "),EI=n(Y4e,"A",{href:!0});var hHr=s(EI);_9o=r(hHr,"CTRLForSequenceClassification"),hHr.forEach(t),u9o=r(Y4e," (CTRL model)"),Y4e.forEach(t),b9o=i(L),K1=n(L,"LI",{});var K4e=s(K1);Cte=n(K4e,"STRONG",{});var pHr=s(Cte);v9o=r(pHr,"data2vec-text"),pHr.forEach(t),T9o=r(K4e," \u2014 "),yI=n(K4e,"A",{href:!0});var _Hr=s(yI);F9o=r(_Hr,"Data2VecTextForSequenceClassification"),_Hr.forEach(t),C9o=r(K4e," (Data2VecText model)"),K4e.forEach(t),M9o=i(L),Z1=n(L,"LI",{});var Z4e=s(Z1);Mte=n(Z4e,"STRONG",{});var uHr=s(Mte);E9o=r(uHr,"deberta"),uHr.forEach(t),y9o=r(Z4e," \u2014 "),wI=n(Z4e,"A",{href:!0});var bHr=s(wI);w9o=r(bHr,"DebertaForSequenceClassification"),bHr.forEach(t),A9o=r(Z4e," (DeBERTa model)"),Z4e.forEach(t),L9o=i(L),eb=n(L,"LI",{});var eEe=s(eb);Ete=n(eEe,"STRONG",{});var vHr=s(Ete);B9o=r(vHr,"deberta-v2"),vHr.forEach(t),x9o=r(eEe," \u2014 "),AI=n(eEe,"A",{href:!0});var THr=s(AI);k9o=r(THr,"DebertaV2ForSequenceClassification"),THr.forEach(t),R9o=r(eEe," (DeBERTa-v2 model)"),eEe.forEach(t),S9o=i(L),ob=n(L,"LI",{});var oEe=s(ob);yte=n(oEe,"STRONG",{});var FHr=s(yte);P9o=r(FHr,"distilbert"),FHr.forEach(t),$9o=r(oEe," \u2014 "),LI=n(oEe,"A",{href:!0});var CHr=s(LI);I9o=r(CHr,"DistilBertForSequenceClassification"),CHr.forEach(t),j9o=r(oEe," (DistilBERT model)"),oEe.forEach(t),D9o=i(L),rb=n(L,"LI",{});var rEe=s(rb);wte=n(rEe,"STRONG",{});var MHr=s(wte);N9o=r(MHr,"electra"),MHr.forEach(t),q9o=r(rEe," \u2014 "),BI=n(rEe,"A",{href:!0});var EHr=s(BI);O9o=r(EHr,"ElectraForSequenceClassification"),EHr.forEach(t),G9o=r(rEe," (ELECTRA model)"),rEe.forEach(t),X9o=i(L),tb=n(L,"LI",{});var tEe=s(tb);Ate=n(tEe,"STRONG",{});var yHr=s(Ate);V9o=r(yHr,"flaubert"),yHr.forEach(t),z9o=r(tEe," \u2014 "),xI=n(tEe,"A",{href:!0});var wHr=s(xI);W9o=r(wHr,"FlaubertForSequenceClassification"),wHr.forEach(t),Q9o=r(tEe," (FlauBERT model)"),tEe.forEach(t),H9o=i(L),ab=n(L,"LI",{});var aEe=s(ab);Lte=n(aEe,"STRONG",{});var AHr=s(Lte);U9o=r(AHr,"fnet"),AHr.forEach(t),J9o=r(aEe," \u2014 "),kI=n(aEe,"A",{href:!0});var LHr=s(kI);Y9o=r(LHr,"FNetForSequenceClassification"),LHr.forEach(t),K9o=r(aEe," (FNet model)"),aEe.forEach(t),Z9o=i(L),nb=n(L,"LI",{});var nEe=s(nb);Bte=n(nEe,"STRONG",{});var BHr=s(Bte);eCo=r(BHr,"funnel"),BHr.forEach(t),oCo=r(nEe," \u2014 "),RI=n(nEe,"A",{href:!0});var xHr=s(RI);rCo=r(xHr,"FunnelForSequenceClassification"),xHr.forEach(t),tCo=r(nEe," (Funnel Transformer model)"),nEe.forEach(t),aCo=i(L),sb=n(L,"LI",{});var sEe=s(sb);xte=n(sEe,"STRONG",{});var kHr=s(xte);nCo=r(kHr,"gpt2"),kHr.forEach(t),sCo=r(sEe," \u2014 "),SI=n(sEe,"A",{href:!0});var RHr=s(SI);lCo=r(RHr,"GPT2ForSequenceClassification"),RHr.forEach(t),iCo=r(sEe," (OpenAI GPT-2 model)"),sEe.forEach(t),dCo=i(L),lb=n(L,"LI",{});var lEe=s(lb);kte=n(lEe,"STRONG",{});var SHr=s(kte);cCo=r(SHr,"gpt_neo"),SHr.forEach(t),fCo=r(lEe," \u2014 "),PI=n(lEe,"A",{href:!0});var PHr=s(PI);mCo=r(PHr,"GPTNeoForSequenceClassification"),PHr.forEach(t),gCo=r(lEe," (GPT Neo model)"),lEe.forEach(t),hCo=i(L),ib=n(L,"LI",{});var iEe=s(ib);Rte=n(iEe,"STRONG",{});var $Hr=s(Rte);pCo=r($Hr,"gptj"),$Hr.forEach(t),_Co=r(iEe," \u2014 "),$I=n(iEe,"A",{href:!0});var IHr=s($I);uCo=r(IHr,"GPTJForSequenceClassification"),IHr.forEach(t),bCo=r(iEe," (GPT-J model)"),iEe.forEach(t),vCo=i(L),db=n(L,"LI",{});var dEe=s(db);Ste=n(dEe,"STRONG",{});var jHr=s(Ste);TCo=r(jHr,"ibert"),jHr.forEach(t),FCo=r(dEe," \u2014 "),II=n(dEe,"A",{href:!0});var DHr=s(II);CCo=r(DHr,"IBertForSequenceClassification"),DHr.forEach(t),MCo=r(dEe," (I-BERT model)"),dEe.forEach(t),ECo=i(L),cb=n(L,"LI",{});var cEe=s(cb);Pte=n(cEe,"STRONG",{});var NHr=s(Pte);yCo=r(NHr,"layoutlm"),NHr.forEach(t),wCo=r(cEe," \u2014 "),jI=n(cEe,"A",{href:!0});var qHr=s(jI);ACo=r(qHr,"LayoutLMForSequenceClassification"),qHr.forEach(t),LCo=r(cEe," (LayoutLM model)"),cEe.forEach(t),BCo=i(L),fb=n(L,"LI",{});var fEe=s(fb);$te=n(fEe,"STRONG",{});var OHr=s($te);xCo=r(OHr,"layoutlmv2"),OHr.forEach(t),kCo=r(fEe," \u2014 "),DI=n(fEe,"A",{href:!0});var GHr=s(DI);RCo=r(GHr,"LayoutLMv2ForSequenceClassification"),GHr.forEach(t),SCo=r(fEe," (LayoutLMv2 model)"),fEe.forEach(t),PCo=i(L),mb=n(L,"LI",{});var mEe=s(mb);Ite=n(mEe,"STRONG",{});var XHr=s(Ite);$Co=r(XHr,"led"),XHr.forEach(t),ICo=r(mEe," \u2014 "),NI=n(mEe,"A",{href:!0});var VHr=s(NI);jCo=r(VHr,"LEDForSequenceClassification"),VHr.forEach(t),DCo=r(mEe," (LED model)"),mEe.forEach(t),NCo=i(L),gb=n(L,"LI",{});var gEe=s(gb);jte=n(gEe,"STRONG",{});var zHr=s(jte);qCo=r(zHr,"longformer"),zHr.forEach(t),OCo=r(gEe," \u2014 "),qI=n(gEe,"A",{href:!0});var WHr=s(qI);GCo=r(WHr,"LongformerForSequenceClassification"),WHr.forEach(t),XCo=r(gEe," (Longformer model)"),gEe.forEach(t),VCo=i(L),hb=n(L,"LI",{});var hEe=s(hb);Dte=n(hEe,"STRONG",{});var QHr=s(Dte);zCo=r(QHr,"mbart"),QHr.forEach(t),WCo=r(hEe," \u2014 "),OI=n(hEe,"A",{href:!0});var HHr=s(OI);QCo=r(HHr,"MBartForSequenceClassification"),HHr.forEach(t),HCo=r(hEe," (mBART model)"),hEe.forEach(t),UCo=i(L),pb=n(L,"LI",{});var pEe=s(pb);Nte=n(pEe,"STRONG",{});var UHr=s(Nte);JCo=r(UHr,"megatron-bert"),UHr.forEach(t),YCo=r(pEe," \u2014 "),GI=n(pEe,"A",{href:!0});var JHr=s(GI);KCo=r(JHr,"MegatronBertForSequenceClassification"),JHr.forEach(t),ZCo=r(pEe," (MegatronBert model)"),pEe.forEach(t),eMo=i(L),_b=n(L,"LI",{});var _Ee=s(_b);qte=n(_Ee,"STRONG",{});var YHr=s(qte);oMo=r(YHr,"mobilebert"),YHr.forEach(t),rMo=r(_Ee," \u2014 "),XI=n(_Ee,"A",{href:!0});var KHr=s(XI);tMo=r(KHr,"MobileBertForSequenceClassification"),KHr.forEach(t),aMo=r(_Ee," (MobileBERT model)"),_Ee.forEach(t),nMo=i(L),ub=n(L,"LI",{});var uEe=s(ub);Ote=n(uEe,"STRONG",{});var ZHr=s(Ote);sMo=r(ZHr,"mpnet"),ZHr.forEach(t),lMo=r(uEe," \u2014 "),VI=n(uEe,"A",{href:!0});var eUr=s(VI);iMo=r(eUr,"MPNetForSequenceClassification"),eUr.forEach(t),dMo=r(uEe," (MPNet model)"),uEe.forEach(t),cMo=i(L),bb=n(L,"LI",{});var bEe=s(bb);Gte=n(bEe,"STRONG",{});var oUr=s(Gte);fMo=r(oUr,"nystromformer"),oUr.forEach(t),mMo=r(bEe," \u2014 "),zI=n(bEe,"A",{href:!0});var rUr=s(zI);gMo=r(rUr,"NystromformerForSequenceClassification"),rUr.forEach(t),hMo=r(bEe," (Nystromformer model)"),bEe.forEach(t),pMo=i(L),vb=n(L,"LI",{});var vEe=s(vb);Xte=n(vEe,"STRONG",{});var tUr=s(Xte);_Mo=r(tUr,"openai-gpt"),tUr.forEach(t),uMo=r(vEe," \u2014 "),WI=n(vEe,"A",{href:!0});var aUr=s(WI);bMo=r(aUr,"OpenAIGPTForSequenceClassification"),aUr.forEach(t),vMo=r(vEe," (OpenAI GPT model)"),vEe.forEach(t),TMo=i(L),Tb=n(L,"LI",{});var TEe=s(Tb);Vte=n(TEe,"STRONG",{});var nUr=s(Vte);FMo=r(nUr,"perceiver"),nUr.forEach(t),CMo=r(TEe," \u2014 "),QI=n(TEe,"A",{href:!0});var sUr=s(QI);MMo=r(sUr,"PerceiverForSequenceClassification"),sUr.forEach(t),EMo=r(TEe," (Perceiver model)"),TEe.forEach(t),yMo=i(L),Fb=n(L,"LI",{});var FEe=s(Fb);zte=n(FEe,"STRONG",{});var lUr=s(zte);wMo=r(lUr,"plbart"),lUr.forEach(t),AMo=r(FEe," \u2014 "),HI=n(FEe,"A",{href:!0});var iUr=s(HI);LMo=r(iUr,"PLBartForSequenceClassification"),iUr.forEach(t),BMo=r(FEe," (PLBart model)"),FEe.forEach(t),xMo=i(L),Cb=n(L,"LI",{});var CEe=s(Cb);Wte=n(CEe,"STRONG",{});var dUr=s(Wte);kMo=r(dUr,"qdqbert"),dUr.forEach(t),RMo=r(CEe," \u2014 "),UI=n(CEe,"A",{href:!0});var cUr=s(UI);SMo=r(cUr,"QDQBertForSequenceClassification"),cUr.forEach(t),PMo=r(CEe," (QDQBert model)"),CEe.forEach(t),$Mo=i(L),Mb=n(L,"LI",{});var MEe=s(Mb);Qte=n(MEe,"STRONG",{});var fUr=s(Qte);IMo=r(fUr,"reformer"),fUr.forEach(t),jMo=r(MEe," \u2014 "),JI=n(MEe,"A",{href:!0});var mUr=s(JI);DMo=r(mUr,"ReformerForSequenceClassification"),mUr.forEach(t),NMo=r(MEe," (Reformer model)"),MEe.forEach(t),qMo=i(L),Eb=n(L,"LI",{});var EEe=s(Eb);Hte=n(EEe,"STRONG",{});var gUr=s(Hte);OMo=r(gUr,"rembert"),gUr.forEach(t),GMo=r(EEe," \u2014 "),YI=n(EEe,"A",{href:!0});var hUr=s(YI);XMo=r(hUr,"RemBertForSequenceClassification"),hUr.forEach(t),VMo=r(EEe," (RemBERT model)"),EEe.forEach(t),zMo=i(L),yb=n(L,"LI",{});var yEe=s(yb);Ute=n(yEe,"STRONG",{});var pUr=s(Ute);WMo=r(pUr,"roberta"),pUr.forEach(t),QMo=r(yEe," \u2014 "),KI=n(yEe,"A",{href:!0});var _Ur=s(KI);HMo=r(_Ur,"RobertaForSequenceClassification"),_Ur.forEach(t),UMo=r(yEe," (RoBERTa model)"),yEe.forEach(t),JMo=i(L),wb=n(L,"LI",{});var wEe=s(wb);Jte=n(wEe,"STRONG",{});var uUr=s(Jte);YMo=r(uUr,"roformer"),uUr.forEach(t),KMo=r(wEe," \u2014 "),ZI=n(wEe,"A",{href:!0});var bUr=s(ZI);ZMo=r(bUr,"RoFormerForSequenceClassification"),bUr.forEach(t),e4o=r(wEe," (RoFormer model)"),wEe.forEach(t),o4o=i(L),Ab=n(L,"LI",{});var AEe=s(Ab);Yte=n(AEe,"STRONG",{});var vUr=s(Yte);r4o=r(vUr,"squeezebert"),vUr.forEach(t),t4o=r(AEe," \u2014 "),ej=n(AEe,"A",{href:!0});var TUr=s(ej);a4o=r(TUr,"SqueezeBertForSequenceClassification"),TUr.forEach(t),n4o=r(AEe," (SqueezeBERT model)"),AEe.forEach(t),s4o=i(L),Lb=n(L,"LI",{});var LEe=s(Lb);Kte=n(LEe,"STRONG",{});var FUr=s(Kte);l4o=r(FUr,"tapas"),FUr.forEach(t),i4o=r(LEe," \u2014 "),oj=n(LEe,"A",{href:!0});var CUr=s(oj);d4o=r(CUr,"TapasForSequenceClassification"),CUr.forEach(t),c4o=r(LEe," (TAPAS model)"),LEe.forEach(t),f4o=i(L),Bb=n(L,"LI",{});var BEe=s(Bb);Zte=n(BEe,"STRONG",{});var MUr=s(Zte);m4o=r(MUr,"transfo-xl"),MUr.forEach(t),g4o=r(BEe," \u2014 "),rj=n(BEe,"A",{href:!0});var EUr=s(rj);h4o=r(EUr,"TransfoXLForSequenceClassification"),EUr.forEach(t),p4o=r(BEe," (Transformer-XL model)"),BEe.forEach(t),_4o=i(L),xb=n(L,"LI",{});var xEe=s(xb);eae=n(xEe,"STRONG",{});var yUr=s(eae);u4o=r(yUr,"xlm"),yUr.forEach(t),b4o=r(xEe," \u2014 "),tj=n(xEe,"A",{href:!0});var wUr=s(tj);v4o=r(wUr,"XLMForSequenceClassification"),wUr.forEach(t),T4o=r(xEe," (XLM model)"),xEe.forEach(t),F4o=i(L),kb=n(L,"LI",{});var kEe=s(kb);oae=n(kEe,"STRONG",{});var AUr=s(oae);C4o=r(AUr,"xlm-roberta"),AUr.forEach(t),M4o=r(kEe," \u2014 "),aj=n(kEe,"A",{href:!0});var LUr=s(aj);E4o=r(LUr,"XLMRobertaForSequenceClassification"),LUr.forEach(t),y4o=r(kEe," (XLM-RoBERTa model)"),kEe.forEach(t),w4o=i(L),Rb=n(L,"LI",{});var REe=s(Rb);rae=n(REe,"STRONG",{});var BUr=s(rae);A4o=r(BUr,"xlm-roberta-xl"),BUr.forEach(t),L4o=r(REe," \u2014 "),nj=n(REe,"A",{href:!0});var xUr=s(nj);B4o=r(xUr,"XLMRobertaXLForSequenceClassification"),xUr.forEach(t),x4o=r(REe," (XLM-RoBERTa-XL model)"),REe.forEach(t),k4o=i(L),Sb=n(L,"LI",{});var SEe=s(Sb);tae=n(SEe,"STRONG",{});var kUr=s(tae);R4o=r(kUr,"xlnet"),kUr.forEach(t),S4o=r(SEe," \u2014 "),sj=n(SEe,"A",{href:!0});var RUr=s(sj);P4o=r(RUr,"XLNetForSequenceClassification"),RUr.forEach(t),$4o=r(SEe," (XLNet model)"),SEe.forEach(t),I4o=i(L),Pb=n(L,"LI",{});var PEe=s(Pb);aae=n(PEe,"STRONG",{});var SUr=s(aae);j4o=r(SUr,"yoso"),SUr.forEach(t),D4o=r(PEe," \u2014 "),lj=n(PEe,"A",{href:!0});var PUr=s(lj);N4o=r(PUr,"YosoForSequenceClassification"),PUr.forEach(t),q4o=r(PEe," (YOSO model)"),PEe.forEach(t),L.forEach(t),O4o=i(zt),$b=n(zt,"P",{});var $Ee=s($b);G4o=r($Ee,"The model is set in evaluation mode by default using "),nae=n($Ee,"CODE",{});var $Ur=s(nae);X4o=r($Ur,"model.eval()"),$Ur.forEach(t),V4o=r($Ee,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sae=n($Ee,"CODE",{});var IUr=s(sae);z4o=r(IUr,"model.train()"),IUr.forEach(t),$Ee.forEach(t),W4o=i(zt),lae=n(zt,"P",{});var jUr=s(lae);Q4o=r(jUr,"Examples:"),jUr.forEach(t),H4o=i(zt),m(hE.$$.fragment,zt),zt.forEach(t),rl.forEach(t),kxe=i(d),pd=n(d,"H2",{class:!0});var qRe=s(pd);Ib=n(qRe,"A",{id:!0,class:!0,href:!0});var DUr=s(Ib);iae=n(DUr,"SPAN",{});var NUr=s(iae);m(pE.$$.fragment,NUr),NUr.forEach(t),DUr.forEach(t),U4o=i(qRe),dae=n(qRe,"SPAN",{});var qUr=s(dae);J4o=r(qUr,"AutoModelForMultipleChoice"),qUr.forEach(t),qRe.forEach(t),Rxe=i(d),rr=n(d,"DIV",{class:!0});var al=s(rr);m(_E.$$.fragment,al),Y4o=i(al),_d=n(al,"P",{});var jz=s(_d);K4o=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cae=n(jz,"CODE",{});var OUr=s(cae);Z4o=r(OUr,"from_pretrained()"),OUr.forEach(t),eEo=r(jz,"class method or the "),fae=n(jz,"CODE",{});var GUr=s(fae);oEo=r(GUr,"from_config()"),GUr.forEach(t),rEo=r(jz,`class
method.`),jz.forEach(t),tEo=i(al),uE=n(al,"P",{});var ORe=s(uE);aEo=r(ORe,"This class cannot be instantiated directly using "),mae=n(ORe,"CODE",{});var XUr=s(mae);nEo=r(XUr,"__init__()"),XUr.forEach(t),sEo=r(ORe," (throws an error)."),ORe.forEach(t),lEo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(bE.$$.fragment,nl),iEo=i(nl),gae=n(nl,"P",{});var VUr=s(gae);dEo=r(VUr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),VUr.forEach(t),cEo=i(nl),ud=n(nl,"P",{});var Dz=s(ud);fEo=r(Dz,`Note:
Loading a model from its configuration file does `),hae=n(Dz,"STRONG",{});var zUr=s(hae);mEo=r(zUr,"not"),zUr.forEach(t),gEo=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),pae=n(Dz,"CODE",{});var WUr=s(pae);hEo=r(WUr,"from_pretrained()"),WUr.forEach(t),pEo=r(Dz,"to load the model weights."),Dz.forEach(t),_Eo=i(nl),_ae=n(nl,"P",{});var QUr=s(_ae);uEo=r(QUr,"Examples:"),QUr.forEach(t),bEo=i(nl),m(vE.$$.fragment,nl),nl.forEach(t),vEo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);m(TE.$$.fragment,Wt),TEo=i(Wt),uae=n(Wt,"P",{});var HUr=s(uae);FEo=r(HUr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HUr.forEach(t),CEo=i(Wt),Ja=n(Wt,"P",{});var tM=s(Ja);MEo=r(tM,"The model class to instantiate is selected based on the "),bae=n(tM,"CODE",{});var UUr=s(bae);EEo=r(UUr,"model_type"),UUr.forEach(t),yEo=r(tM,` property of the config object (either
passed as an argument or loaded from `),vae=n(tM,"CODE",{});var JUr=s(vae);wEo=r(JUr,"pretrained_model_name_or_path"),JUr.forEach(t),AEo=r(tM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tae=n(tM,"CODE",{});var YUr=s(Tae);LEo=r(YUr,"pretrained_model_name_or_path"),YUr.forEach(t),BEo=r(tM,":"),tM.forEach(t),xEo=i(Wt),O=n(Wt,"UL",{});var G=s(O);jb=n(G,"LI",{});var IEe=s(jb);Fae=n(IEe,"STRONG",{});var KUr=s(Fae);kEo=r(KUr,"albert"),KUr.forEach(t),REo=r(IEe," \u2014 "),ij=n(IEe,"A",{href:!0});var ZUr=s(ij);SEo=r(ZUr,"AlbertForMultipleChoice"),ZUr.forEach(t),PEo=r(IEe," (ALBERT model)"),IEe.forEach(t),$Eo=i(G),Db=n(G,"LI",{});var jEe=s(Db);Cae=n(jEe,"STRONG",{});var eJr=s(Cae);IEo=r(eJr,"bert"),eJr.forEach(t),jEo=r(jEe," \u2014 "),dj=n(jEe,"A",{href:!0});var oJr=s(dj);DEo=r(oJr,"BertForMultipleChoice"),oJr.forEach(t),NEo=r(jEe," (BERT model)"),jEe.forEach(t),qEo=i(G),Nb=n(G,"LI",{});var DEe=s(Nb);Mae=n(DEe,"STRONG",{});var rJr=s(Mae);OEo=r(rJr,"big_bird"),rJr.forEach(t),GEo=r(DEe," \u2014 "),cj=n(DEe,"A",{href:!0});var tJr=s(cj);XEo=r(tJr,"BigBirdForMultipleChoice"),tJr.forEach(t),VEo=r(DEe," (BigBird model)"),DEe.forEach(t),zEo=i(G),qb=n(G,"LI",{});var NEe=s(qb);Eae=n(NEe,"STRONG",{});var aJr=s(Eae);WEo=r(aJr,"camembert"),aJr.forEach(t),QEo=r(NEe," \u2014 "),fj=n(NEe,"A",{href:!0});var nJr=s(fj);HEo=r(nJr,"CamembertForMultipleChoice"),nJr.forEach(t),UEo=r(NEe," (CamemBERT model)"),NEe.forEach(t),JEo=i(G),Ob=n(G,"LI",{});var qEe=s(Ob);yae=n(qEe,"STRONG",{});var sJr=s(yae);YEo=r(sJr,"canine"),sJr.forEach(t),KEo=r(qEe," \u2014 "),mj=n(qEe,"A",{href:!0});var lJr=s(mj);ZEo=r(lJr,"CanineForMultipleChoice"),lJr.forEach(t),e3o=r(qEe," (Canine model)"),qEe.forEach(t),o3o=i(G),Gb=n(G,"LI",{});var OEe=s(Gb);wae=n(OEe,"STRONG",{});var iJr=s(wae);r3o=r(iJr,"convbert"),iJr.forEach(t),t3o=r(OEe," \u2014 "),gj=n(OEe,"A",{href:!0});var dJr=s(gj);a3o=r(dJr,"ConvBertForMultipleChoice"),dJr.forEach(t),n3o=r(OEe," (ConvBERT model)"),OEe.forEach(t),s3o=i(G),Xb=n(G,"LI",{});var GEe=s(Xb);Aae=n(GEe,"STRONG",{});var cJr=s(Aae);l3o=r(cJr,"data2vec-text"),cJr.forEach(t),i3o=r(GEe," \u2014 "),hj=n(GEe,"A",{href:!0});var fJr=s(hj);d3o=r(fJr,"Data2VecTextForMultipleChoice"),fJr.forEach(t),c3o=r(GEe," (Data2VecText model)"),GEe.forEach(t),f3o=i(G),Vb=n(G,"LI",{});var XEe=s(Vb);Lae=n(XEe,"STRONG",{});var mJr=s(Lae);m3o=r(mJr,"distilbert"),mJr.forEach(t),g3o=r(XEe," \u2014 "),pj=n(XEe,"A",{href:!0});var gJr=s(pj);h3o=r(gJr,"DistilBertForMultipleChoice"),gJr.forEach(t),p3o=r(XEe," (DistilBERT model)"),XEe.forEach(t),_3o=i(G),zb=n(G,"LI",{});var VEe=s(zb);Bae=n(VEe,"STRONG",{});var hJr=s(Bae);u3o=r(hJr,"electra"),hJr.forEach(t),b3o=r(VEe," \u2014 "),_j=n(VEe,"A",{href:!0});var pJr=s(_j);v3o=r(pJr,"ElectraForMultipleChoice"),pJr.forEach(t),T3o=r(VEe," (ELECTRA model)"),VEe.forEach(t),F3o=i(G),Wb=n(G,"LI",{});var zEe=s(Wb);xae=n(zEe,"STRONG",{});var _Jr=s(xae);C3o=r(_Jr,"flaubert"),_Jr.forEach(t),M3o=r(zEe," \u2014 "),uj=n(zEe,"A",{href:!0});var uJr=s(uj);E3o=r(uJr,"FlaubertForMultipleChoice"),uJr.forEach(t),y3o=r(zEe," (FlauBERT model)"),zEe.forEach(t),w3o=i(G),Qb=n(G,"LI",{});var WEe=s(Qb);kae=n(WEe,"STRONG",{});var bJr=s(kae);A3o=r(bJr,"fnet"),bJr.forEach(t),L3o=r(WEe," \u2014 "),bj=n(WEe,"A",{href:!0});var vJr=s(bj);B3o=r(vJr,"FNetForMultipleChoice"),vJr.forEach(t),x3o=r(WEe," (FNet model)"),WEe.forEach(t),k3o=i(G),Hb=n(G,"LI",{});var QEe=s(Hb);Rae=n(QEe,"STRONG",{});var TJr=s(Rae);R3o=r(TJr,"funnel"),TJr.forEach(t),S3o=r(QEe," \u2014 "),vj=n(QEe,"A",{href:!0});var FJr=s(vj);P3o=r(FJr,"FunnelForMultipleChoice"),FJr.forEach(t),$3o=r(QEe," (Funnel Transformer model)"),QEe.forEach(t),I3o=i(G),Ub=n(G,"LI",{});var HEe=s(Ub);Sae=n(HEe,"STRONG",{});var CJr=s(Sae);j3o=r(CJr,"ibert"),CJr.forEach(t),D3o=r(HEe," \u2014 "),Tj=n(HEe,"A",{href:!0});var MJr=s(Tj);N3o=r(MJr,"IBertForMultipleChoice"),MJr.forEach(t),q3o=r(HEe," (I-BERT model)"),HEe.forEach(t),O3o=i(G),Jb=n(G,"LI",{});var UEe=s(Jb);Pae=n(UEe,"STRONG",{});var EJr=s(Pae);G3o=r(EJr,"longformer"),EJr.forEach(t),X3o=r(UEe," \u2014 "),Fj=n(UEe,"A",{href:!0});var yJr=s(Fj);V3o=r(yJr,"LongformerForMultipleChoice"),yJr.forEach(t),z3o=r(UEe," (Longformer model)"),UEe.forEach(t),W3o=i(G),Yb=n(G,"LI",{});var JEe=s(Yb);$ae=n(JEe,"STRONG",{});var wJr=s($ae);Q3o=r(wJr,"megatron-bert"),wJr.forEach(t),H3o=r(JEe," \u2014 "),Cj=n(JEe,"A",{href:!0});var AJr=s(Cj);U3o=r(AJr,"MegatronBertForMultipleChoice"),AJr.forEach(t),J3o=r(JEe," (MegatronBert model)"),JEe.forEach(t),Y3o=i(G),Kb=n(G,"LI",{});var YEe=s(Kb);Iae=n(YEe,"STRONG",{});var LJr=s(Iae);K3o=r(LJr,"mobilebert"),LJr.forEach(t),Z3o=r(YEe," \u2014 "),Mj=n(YEe,"A",{href:!0});var BJr=s(Mj);eyo=r(BJr,"MobileBertForMultipleChoice"),BJr.forEach(t),oyo=r(YEe," (MobileBERT model)"),YEe.forEach(t),ryo=i(G),Zb=n(G,"LI",{});var KEe=s(Zb);jae=n(KEe,"STRONG",{});var xJr=s(jae);tyo=r(xJr,"mpnet"),xJr.forEach(t),ayo=r(KEe," \u2014 "),Ej=n(KEe,"A",{href:!0});var kJr=s(Ej);nyo=r(kJr,"MPNetForMultipleChoice"),kJr.forEach(t),syo=r(KEe," (MPNet model)"),KEe.forEach(t),lyo=i(G),e5=n(G,"LI",{});var ZEe=s(e5);Dae=n(ZEe,"STRONG",{});var RJr=s(Dae);iyo=r(RJr,"nystromformer"),RJr.forEach(t),dyo=r(ZEe," \u2014 "),yj=n(ZEe,"A",{href:!0});var SJr=s(yj);cyo=r(SJr,"NystromformerForMultipleChoice"),SJr.forEach(t),fyo=r(ZEe," (Nystromformer model)"),ZEe.forEach(t),myo=i(G),o5=n(G,"LI",{});var e3e=s(o5);Nae=n(e3e,"STRONG",{});var PJr=s(Nae);gyo=r(PJr,"qdqbert"),PJr.forEach(t),hyo=r(e3e," \u2014 "),wj=n(e3e,"A",{href:!0});var $Jr=s(wj);pyo=r($Jr,"QDQBertForMultipleChoice"),$Jr.forEach(t),_yo=r(e3e," (QDQBert model)"),e3e.forEach(t),uyo=i(G),r5=n(G,"LI",{});var o3e=s(r5);qae=n(o3e,"STRONG",{});var IJr=s(qae);byo=r(IJr,"rembert"),IJr.forEach(t),vyo=r(o3e," \u2014 "),Aj=n(o3e,"A",{href:!0});var jJr=s(Aj);Tyo=r(jJr,"RemBertForMultipleChoice"),jJr.forEach(t),Fyo=r(o3e," (RemBERT model)"),o3e.forEach(t),Cyo=i(G),t5=n(G,"LI",{});var r3e=s(t5);Oae=n(r3e,"STRONG",{});var DJr=s(Oae);Myo=r(DJr,"roberta"),DJr.forEach(t),Eyo=r(r3e," \u2014 "),Lj=n(r3e,"A",{href:!0});var NJr=s(Lj);yyo=r(NJr,"RobertaForMultipleChoice"),NJr.forEach(t),wyo=r(r3e," (RoBERTa model)"),r3e.forEach(t),Ayo=i(G),a5=n(G,"LI",{});var t3e=s(a5);Gae=n(t3e,"STRONG",{});var qJr=s(Gae);Lyo=r(qJr,"roformer"),qJr.forEach(t),Byo=r(t3e," \u2014 "),Bj=n(t3e,"A",{href:!0});var OJr=s(Bj);xyo=r(OJr,"RoFormerForMultipleChoice"),OJr.forEach(t),kyo=r(t3e," (RoFormer model)"),t3e.forEach(t),Ryo=i(G),n5=n(G,"LI",{});var a3e=s(n5);Xae=n(a3e,"STRONG",{});var GJr=s(Xae);Syo=r(GJr,"squeezebert"),GJr.forEach(t),Pyo=r(a3e," \u2014 "),xj=n(a3e,"A",{href:!0});var XJr=s(xj);$yo=r(XJr,"SqueezeBertForMultipleChoice"),XJr.forEach(t),Iyo=r(a3e," (SqueezeBERT model)"),a3e.forEach(t),jyo=i(G),s5=n(G,"LI",{});var n3e=s(s5);Vae=n(n3e,"STRONG",{});var VJr=s(Vae);Dyo=r(VJr,"xlm"),VJr.forEach(t),Nyo=r(n3e," \u2014 "),kj=n(n3e,"A",{href:!0});var zJr=s(kj);qyo=r(zJr,"XLMForMultipleChoice"),zJr.forEach(t),Oyo=r(n3e," (XLM model)"),n3e.forEach(t),Gyo=i(G),l5=n(G,"LI",{});var s3e=s(l5);zae=n(s3e,"STRONG",{});var WJr=s(zae);Xyo=r(WJr,"xlm-roberta"),WJr.forEach(t),Vyo=r(s3e," \u2014 "),Rj=n(s3e,"A",{href:!0});var QJr=s(Rj);zyo=r(QJr,"XLMRobertaForMultipleChoice"),QJr.forEach(t),Wyo=r(s3e," (XLM-RoBERTa model)"),s3e.forEach(t),Qyo=i(G),i5=n(G,"LI",{});var l3e=s(i5);Wae=n(l3e,"STRONG",{});var HJr=s(Wae);Hyo=r(HJr,"xlm-roberta-xl"),HJr.forEach(t),Uyo=r(l3e," \u2014 "),Sj=n(l3e,"A",{href:!0});var UJr=s(Sj);Jyo=r(UJr,"XLMRobertaXLForMultipleChoice"),UJr.forEach(t),Yyo=r(l3e," (XLM-RoBERTa-XL model)"),l3e.forEach(t),Kyo=i(G),d5=n(G,"LI",{});var i3e=s(d5);Qae=n(i3e,"STRONG",{});var JJr=s(Qae);Zyo=r(JJr,"xlnet"),JJr.forEach(t),ewo=r(i3e," \u2014 "),Pj=n(i3e,"A",{href:!0});var YJr=s(Pj);owo=r(YJr,"XLNetForMultipleChoice"),YJr.forEach(t),rwo=r(i3e," (XLNet model)"),i3e.forEach(t),two=i(G),c5=n(G,"LI",{});var d3e=s(c5);Hae=n(d3e,"STRONG",{});var KJr=s(Hae);awo=r(KJr,"yoso"),KJr.forEach(t),nwo=r(d3e," \u2014 "),$j=n(d3e,"A",{href:!0});var ZJr=s($j);swo=r(ZJr,"YosoForMultipleChoice"),ZJr.forEach(t),lwo=r(d3e," (YOSO model)"),d3e.forEach(t),G.forEach(t),iwo=i(Wt),f5=n(Wt,"P",{});var c3e=s(f5);dwo=r(c3e,"The model is set in evaluation mode by default using "),Uae=n(c3e,"CODE",{});var eYr=s(Uae);cwo=r(eYr,"model.eval()"),eYr.forEach(t),fwo=r(c3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jae=n(c3e,"CODE",{});var oYr=s(Jae);mwo=r(oYr,"model.train()"),oYr.forEach(t),c3e.forEach(t),gwo=i(Wt),Yae=n(Wt,"P",{});var rYr=s(Yae);hwo=r(rYr,"Examples:"),rYr.forEach(t),pwo=i(Wt),m(FE.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Sxe=i(d),bd=n(d,"H2",{class:!0});var GRe=s(bd);m5=n(GRe,"A",{id:!0,class:!0,href:!0});var tYr=s(m5);Kae=n(tYr,"SPAN",{});var aYr=s(Kae);m(CE.$$.fragment,aYr),aYr.forEach(t),tYr.forEach(t),_wo=i(GRe),Zae=n(GRe,"SPAN",{});var nYr=s(Zae);uwo=r(nYr,"AutoModelForNextSentencePrediction"),nYr.forEach(t),GRe.forEach(t),Pxe=i(d),tr=n(d,"DIV",{class:!0});var sl=s(tr);m(ME.$$.fragment,sl),bwo=i(sl),vd=n(sl,"P",{});var Nz=s(vd);vwo=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ene=n(Nz,"CODE",{});var sYr=s(ene);Two=r(sYr,"from_pretrained()"),sYr.forEach(t),Fwo=r(Nz,"class method or the "),one=n(Nz,"CODE",{});var lYr=s(one);Cwo=r(lYr,"from_config()"),lYr.forEach(t),Mwo=r(Nz,`class
method.`),Nz.forEach(t),Ewo=i(sl),EE=n(sl,"P",{});var XRe=s(EE);ywo=r(XRe,"This class cannot be instantiated directly using "),rne=n(XRe,"CODE",{});var iYr=s(rne);wwo=r(iYr,"__init__()"),iYr.forEach(t),Awo=r(XRe," (throws an error)."),XRe.forEach(t),Lwo=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(yE.$$.fragment,ll),Bwo=i(ll),tne=n(ll,"P",{});var dYr=s(tne);xwo=r(dYr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dYr.forEach(t),kwo=i(ll),Td=n(ll,"P",{});var qz=s(Td);Rwo=r(qz,`Note:
Loading a model from its configuration file does `),ane=n(qz,"STRONG",{});var cYr=s(ane);Swo=r(cYr,"not"),cYr.forEach(t),Pwo=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),nne=n(qz,"CODE",{});var fYr=s(nne);$wo=r(fYr,"from_pretrained()"),fYr.forEach(t),Iwo=r(qz,"to load the model weights."),qz.forEach(t),jwo=i(ll),sne=n(ll,"P",{});var mYr=s(sne);Dwo=r(mYr,"Examples:"),mYr.forEach(t),Nwo=i(ll),m(wE.$$.fragment,ll),ll.forEach(t),qwo=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(AE.$$.fragment,Qt),Owo=i(Qt),lne=n(Qt,"P",{});var gYr=s(lne);Gwo=r(gYr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gYr.forEach(t),Xwo=i(Qt),Ya=n(Qt,"P",{});var aM=s(Ya);Vwo=r(aM,"The model class to instantiate is selected based on the "),ine=n(aM,"CODE",{});var hYr=s(ine);zwo=r(hYr,"model_type"),hYr.forEach(t),Wwo=r(aM,` property of the config object (either
passed as an argument or loaded from `),dne=n(aM,"CODE",{});var pYr=s(dne);Qwo=r(pYr,"pretrained_model_name_or_path"),pYr.forEach(t),Hwo=r(aM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cne=n(aM,"CODE",{});var _Yr=s(cne);Uwo=r(_Yr,"pretrained_model_name_or_path"),_Yr.forEach(t),Jwo=r(aM,":"),aM.forEach(t),Ywo=i(Qt),da=n(Qt,"UL",{});var il=s(da);g5=n(il,"LI",{});var f3e=s(g5);fne=n(f3e,"STRONG",{});var uYr=s(fne);Kwo=r(uYr,"bert"),uYr.forEach(t),Zwo=r(f3e," \u2014 "),Ij=n(f3e,"A",{href:!0});var bYr=s(Ij);eAo=r(bYr,"BertForNextSentencePrediction"),bYr.forEach(t),oAo=r(f3e," (BERT model)"),f3e.forEach(t),rAo=i(il),h5=n(il,"LI",{});var m3e=s(h5);mne=n(m3e,"STRONG",{});var vYr=s(mne);tAo=r(vYr,"fnet"),vYr.forEach(t),aAo=r(m3e," \u2014 "),jj=n(m3e,"A",{href:!0});var TYr=s(jj);nAo=r(TYr,"FNetForNextSentencePrediction"),TYr.forEach(t),sAo=r(m3e," (FNet model)"),m3e.forEach(t),lAo=i(il),p5=n(il,"LI",{});var g3e=s(p5);gne=n(g3e,"STRONG",{});var FYr=s(gne);iAo=r(FYr,"megatron-bert"),FYr.forEach(t),dAo=r(g3e," \u2014 "),Dj=n(g3e,"A",{href:!0});var CYr=s(Dj);cAo=r(CYr,"MegatronBertForNextSentencePrediction"),CYr.forEach(t),fAo=r(g3e," (MegatronBert model)"),g3e.forEach(t),mAo=i(il),_5=n(il,"LI",{});var h3e=s(_5);hne=n(h3e,"STRONG",{});var MYr=s(hne);gAo=r(MYr,"mobilebert"),MYr.forEach(t),hAo=r(h3e," \u2014 "),Nj=n(h3e,"A",{href:!0});var EYr=s(Nj);pAo=r(EYr,"MobileBertForNextSentencePrediction"),EYr.forEach(t),_Ao=r(h3e," (MobileBERT model)"),h3e.forEach(t),uAo=i(il),u5=n(il,"LI",{});var p3e=s(u5);pne=n(p3e,"STRONG",{});var yYr=s(pne);bAo=r(yYr,"qdqbert"),yYr.forEach(t),vAo=r(p3e," \u2014 "),qj=n(p3e,"A",{href:!0});var wYr=s(qj);TAo=r(wYr,"QDQBertForNextSentencePrediction"),wYr.forEach(t),FAo=r(p3e," (QDQBert model)"),p3e.forEach(t),il.forEach(t),CAo=i(Qt),b5=n(Qt,"P",{});var _3e=s(b5);MAo=r(_3e,"The model is set in evaluation mode by default using "),_ne=n(_3e,"CODE",{});var AYr=s(_ne);EAo=r(AYr,"model.eval()"),AYr.forEach(t),yAo=r(_3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),une=n(_3e,"CODE",{});var LYr=s(une);wAo=r(LYr,"model.train()"),LYr.forEach(t),_3e.forEach(t),AAo=i(Qt),bne=n(Qt,"P",{});var BYr=s(bne);LAo=r(BYr,"Examples:"),BYr.forEach(t),BAo=i(Qt),m(LE.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),$xe=i(d),Fd=n(d,"H2",{class:!0});var VRe=s(Fd);v5=n(VRe,"A",{id:!0,class:!0,href:!0});var xYr=s(v5);vne=n(xYr,"SPAN",{});var kYr=s(vne);m(BE.$$.fragment,kYr),kYr.forEach(t),xYr.forEach(t),xAo=i(VRe),Tne=n(VRe,"SPAN",{});var RYr=s(Tne);kAo=r(RYr,"AutoModelForTokenClassification"),RYr.forEach(t),VRe.forEach(t),Ixe=i(d),ar=n(d,"DIV",{class:!0});var dl=s(ar);m(xE.$$.fragment,dl),RAo=i(dl),Cd=n(dl,"P",{});var Oz=s(Cd);SAo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fne=n(Oz,"CODE",{});var SYr=s(Fne);PAo=r(SYr,"from_pretrained()"),SYr.forEach(t),$Ao=r(Oz,"class method or the "),Cne=n(Oz,"CODE",{});var PYr=s(Cne);IAo=r(PYr,"from_config()"),PYr.forEach(t),jAo=r(Oz,`class
method.`),Oz.forEach(t),DAo=i(dl),kE=n(dl,"P",{});var zRe=s(kE);NAo=r(zRe,"This class cannot be instantiated directly using "),Mne=n(zRe,"CODE",{});var $Yr=s(Mne);qAo=r($Yr,"__init__()"),$Yr.forEach(t),OAo=r(zRe," (throws an error)."),zRe.forEach(t),GAo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(RE.$$.fragment,cl),XAo=i(cl),Ene=n(cl,"P",{});var IYr=s(Ene);VAo=r(IYr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IYr.forEach(t),zAo=i(cl),Md=n(cl,"P",{});var Gz=s(Md);WAo=r(Gz,`Note:
Loading a model from its configuration file does `),yne=n(Gz,"STRONG",{});var jYr=s(yne);QAo=r(jYr,"not"),jYr.forEach(t),HAo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),wne=n(Gz,"CODE",{});var DYr=s(wne);UAo=r(DYr,"from_pretrained()"),DYr.forEach(t),JAo=r(Gz,"to load the model weights."),Gz.forEach(t),YAo=i(cl),Ane=n(cl,"P",{});var NYr=s(Ane);KAo=r(NYr,"Examples:"),NYr.forEach(t),ZAo=i(cl),m(SE.$$.fragment,cl),cl.forEach(t),e0o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(PE.$$.fragment,Ht),o0o=i(Ht),Lne=n(Ht,"P",{});var qYr=s(Lne);r0o=r(qYr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qYr.forEach(t),t0o=i(Ht),Ka=n(Ht,"P",{});var nM=s(Ka);a0o=r(nM,"The model class to instantiate is selected based on the "),Bne=n(nM,"CODE",{});var OYr=s(Bne);n0o=r(OYr,"model_type"),OYr.forEach(t),s0o=r(nM,` property of the config object (either
passed as an argument or loaded from `),xne=n(nM,"CODE",{});var GYr=s(xne);l0o=r(GYr,"pretrained_model_name_or_path"),GYr.forEach(t),i0o=r(nM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=n(nM,"CODE",{});var XYr=s(kne);d0o=r(XYr,"pretrained_model_name_or_path"),XYr.forEach(t),c0o=r(nM,":"),nM.forEach(t),f0o=i(Ht),N=n(Ht,"UL",{});var q=s(N);T5=n(q,"LI",{});var u3e=s(T5);Rne=n(u3e,"STRONG",{});var VYr=s(Rne);m0o=r(VYr,"albert"),VYr.forEach(t),g0o=r(u3e," \u2014 "),Oj=n(u3e,"A",{href:!0});var zYr=s(Oj);h0o=r(zYr,"AlbertForTokenClassification"),zYr.forEach(t),p0o=r(u3e," (ALBERT model)"),u3e.forEach(t),_0o=i(q),F5=n(q,"LI",{});var b3e=s(F5);Sne=n(b3e,"STRONG",{});var WYr=s(Sne);u0o=r(WYr,"bert"),WYr.forEach(t),b0o=r(b3e," \u2014 "),Gj=n(b3e,"A",{href:!0});var QYr=s(Gj);v0o=r(QYr,"BertForTokenClassification"),QYr.forEach(t),T0o=r(b3e," (BERT model)"),b3e.forEach(t),F0o=i(q),C5=n(q,"LI",{});var v3e=s(C5);Pne=n(v3e,"STRONG",{});var HYr=s(Pne);C0o=r(HYr,"big_bird"),HYr.forEach(t),M0o=r(v3e," \u2014 "),Xj=n(v3e,"A",{href:!0});var UYr=s(Xj);E0o=r(UYr,"BigBirdForTokenClassification"),UYr.forEach(t),y0o=r(v3e," (BigBird model)"),v3e.forEach(t),w0o=i(q),M5=n(q,"LI",{});var T3e=s(M5);$ne=n(T3e,"STRONG",{});var JYr=s($ne);A0o=r(JYr,"camembert"),JYr.forEach(t),L0o=r(T3e," \u2014 "),Vj=n(T3e,"A",{href:!0});var YYr=s(Vj);B0o=r(YYr,"CamembertForTokenClassification"),YYr.forEach(t),x0o=r(T3e," (CamemBERT model)"),T3e.forEach(t),k0o=i(q),E5=n(q,"LI",{});var F3e=s(E5);Ine=n(F3e,"STRONG",{});var KYr=s(Ine);R0o=r(KYr,"canine"),KYr.forEach(t),S0o=r(F3e," \u2014 "),zj=n(F3e,"A",{href:!0});var ZYr=s(zj);P0o=r(ZYr,"CanineForTokenClassification"),ZYr.forEach(t),$0o=r(F3e," (Canine model)"),F3e.forEach(t),I0o=i(q),y5=n(q,"LI",{});var C3e=s(y5);jne=n(C3e,"STRONG",{});var eKr=s(jne);j0o=r(eKr,"convbert"),eKr.forEach(t),D0o=r(C3e," \u2014 "),Wj=n(C3e,"A",{href:!0});var oKr=s(Wj);N0o=r(oKr,"ConvBertForTokenClassification"),oKr.forEach(t),q0o=r(C3e," (ConvBERT model)"),C3e.forEach(t),O0o=i(q),w5=n(q,"LI",{});var M3e=s(w5);Dne=n(M3e,"STRONG",{});var rKr=s(Dne);G0o=r(rKr,"data2vec-text"),rKr.forEach(t),X0o=r(M3e," \u2014 "),Qj=n(M3e,"A",{href:!0});var tKr=s(Qj);V0o=r(tKr,"Data2VecTextForTokenClassification"),tKr.forEach(t),z0o=r(M3e," (Data2VecText model)"),M3e.forEach(t),W0o=i(q),A5=n(q,"LI",{});var E3e=s(A5);Nne=n(E3e,"STRONG",{});var aKr=s(Nne);Q0o=r(aKr,"deberta"),aKr.forEach(t),H0o=r(E3e," \u2014 "),Hj=n(E3e,"A",{href:!0});var nKr=s(Hj);U0o=r(nKr,"DebertaForTokenClassification"),nKr.forEach(t),J0o=r(E3e," (DeBERTa model)"),E3e.forEach(t),Y0o=i(q),L5=n(q,"LI",{});var y3e=s(L5);qne=n(y3e,"STRONG",{});var sKr=s(qne);K0o=r(sKr,"deberta-v2"),sKr.forEach(t),Z0o=r(y3e," \u2014 "),Uj=n(y3e,"A",{href:!0});var lKr=s(Uj);eLo=r(lKr,"DebertaV2ForTokenClassification"),lKr.forEach(t),oLo=r(y3e," (DeBERTa-v2 model)"),y3e.forEach(t),rLo=i(q),B5=n(q,"LI",{});var w3e=s(B5);One=n(w3e,"STRONG",{});var iKr=s(One);tLo=r(iKr,"distilbert"),iKr.forEach(t),aLo=r(w3e," \u2014 "),Jj=n(w3e,"A",{href:!0});var dKr=s(Jj);nLo=r(dKr,"DistilBertForTokenClassification"),dKr.forEach(t),sLo=r(w3e," (DistilBERT model)"),w3e.forEach(t),lLo=i(q),x5=n(q,"LI",{});var A3e=s(x5);Gne=n(A3e,"STRONG",{});var cKr=s(Gne);iLo=r(cKr,"electra"),cKr.forEach(t),dLo=r(A3e," \u2014 "),Yj=n(A3e,"A",{href:!0});var fKr=s(Yj);cLo=r(fKr,"ElectraForTokenClassification"),fKr.forEach(t),fLo=r(A3e," (ELECTRA model)"),A3e.forEach(t),mLo=i(q),k5=n(q,"LI",{});var L3e=s(k5);Xne=n(L3e,"STRONG",{});var mKr=s(Xne);gLo=r(mKr,"flaubert"),mKr.forEach(t),hLo=r(L3e," \u2014 "),Kj=n(L3e,"A",{href:!0});var gKr=s(Kj);pLo=r(gKr,"FlaubertForTokenClassification"),gKr.forEach(t),_Lo=r(L3e," (FlauBERT model)"),L3e.forEach(t),uLo=i(q),R5=n(q,"LI",{});var B3e=s(R5);Vne=n(B3e,"STRONG",{});var hKr=s(Vne);bLo=r(hKr,"fnet"),hKr.forEach(t),vLo=r(B3e," \u2014 "),Zj=n(B3e,"A",{href:!0});var pKr=s(Zj);TLo=r(pKr,"FNetForTokenClassification"),pKr.forEach(t),FLo=r(B3e," (FNet model)"),B3e.forEach(t),CLo=i(q),S5=n(q,"LI",{});var x3e=s(S5);zne=n(x3e,"STRONG",{});var _Kr=s(zne);MLo=r(_Kr,"funnel"),_Kr.forEach(t),ELo=r(x3e," \u2014 "),eD=n(x3e,"A",{href:!0});var uKr=s(eD);yLo=r(uKr,"FunnelForTokenClassification"),uKr.forEach(t),wLo=r(x3e," (Funnel Transformer model)"),x3e.forEach(t),ALo=i(q),P5=n(q,"LI",{});var k3e=s(P5);Wne=n(k3e,"STRONG",{});var bKr=s(Wne);LLo=r(bKr,"gpt2"),bKr.forEach(t),BLo=r(k3e," \u2014 "),oD=n(k3e,"A",{href:!0});var vKr=s(oD);xLo=r(vKr,"GPT2ForTokenClassification"),vKr.forEach(t),kLo=r(k3e," (OpenAI GPT-2 model)"),k3e.forEach(t),RLo=i(q),$5=n(q,"LI",{});var R3e=s($5);Qne=n(R3e,"STRONG",{});var TKr=s(Qne);SLo=r(TKr,"ibert"),TKr.forEach(t),PLo=r(R3e," \u2014 "),rD=n(R3e,"A",{href:!0});var FKr=s(rD);$Lo=r(FKr,"IBertForTokenClassification"),FKr.forEach(t),ILo=r(R3e," (I-BERT model)"),R3e.forEach(t),jLo=i(q),I5=n(q,"LI",{});var S3e=s(I5);Hne=n(S3e,"STRONG",{});var CKr=s(Hne);DLo=r(CKr,"layoutlm"),CKr.forEach(t),NLo=r(S3e," \u2014 "),tD=n(S3e,"A",{href:!0});var MKr=s(tD);qLo=r(MKr,"LayoutLMForTokenClassification"),MKr.forEach(t),OLo=r(S3e," (LayoutLM model)"),S3e.forEach(t),GLo=i(q),j5=n(q,"LI",{});var P3e=s(j5);Une=n(P3e,"STRONG",{});var EKr=s(Une);XLo=r(EKr,"layoutlmv2"),EKr.forEach(t),VLo=r(P3e," \u2014 "),aD=n(P3e,"A",{href:!0});var yKr=s(aD);zLo=r(yKr,"LayoutLMv2ForTokenClassification"),yKr.forEach(t),WLo=r(P3e," (LayoutLMv2 model)"),P3e.forEach(t),QLo=i(q),D5=n(q,"LI",{});var $3e=s(D5);Jne=n($3e,"STRONG",{});var wKr=s(Jne);HLo=r(wKr,"longformer"),wKr.forEach(t),ULo=r($3e," \u2014 "),nD=n($3e,"A",{href:!0});var AKr=s(nD);JLo=r(AKr,"LongformerForTokenClassification"),AKr.forEach(t),YLo=r($3e," (Longformer model)"),$3e.forEach(t),KLo=i(q),N5=n(q,"LI",{});var I3e=s(N5);Yne=n(I3e,"STRONG",{});var LKr=s(Yne);ZLo=r(LKr,"megatron-bert"),LKr.forEach(t),e7o=r(I3e," \u2014 "),sD=n(I3e,"A",{href:!0});var BKr=s(sD);o7o=r(BKr,"MegatronBertForTokenClassification"),BKr.forEach(t),r7o=r(I3e," (MegatronBert model)"),I3e.forEach(t),t7o=i(q),q5=n(q,"LI",{});var j3e=s(q5);Kne=n(j3e,"STRONG",{});var xKr=s(Kne);a7o=r(xKr,"mobilebert"),xKr.forEach(t),n7o=r(j3e," \u2014 "),lD=n(j3e,"A",{href:!0});var kKr=s(lD);s7o=r(kKr,"MobileBertForTokenClassification"),kKr.forEach(t),l7o=r(j3e," (MobileBERT model)"),j3e.forEach(t),i7o=i(q),O5=n(q,"LI",{});var D3e=s(O5);Zne=n(D3e,"STRONG",{});var RKr=s(Zne);d7o=r(RKr,"mpnet"),RKr.forEach(t),c7o=r(D3e," \u2014 "),iD=n(D3e,"A",{href:!0});var SKr=s(iD);f7o=r(SKr,"MPNetForTokenClassification"),SKr.forEach(t),m7o=r(D3e," (MPNet model)"),D3e.forEach(t),g7o=i(q),G5=n(q,"LI",{});var N3e=s(G5);ese=n(N3e,"STRONG",{});var PKr=s(ese);h7o=r(PKr,"nystromformer"),PKr.forEach(t),p7o=r(N3e," \u2014 "),dD=n(N3e,"A",{href:!0});var $Kr=s(dD);_7o=r($Kr,"NystromformerForTokenClassification"),$Kr.forEach(t),u7o=r(N3e," (Nystromformer model)"),N3e.forEach(t),b7o=i(q),X5=n(q,"LI",{});var q3e=s(X5);ose=n(q3e,"STRONG",{});var IKr=s(ose);v7o=r(IKr,"qdqbert"),IKr.forEach(t),T7o=r(q3e," \u2014 "),cD=n(q3e,"A",{href:!0});var jKr=s(cD);F7o=r(jKr,"QDQBertForTokenClassification"),jKr.forEach(t),C7o=r(q3e," (QDQBert model)"),q3e.forEach(t),M7o=i(q),V5=n(q,"LI",{});var O3e=s(V5);rse=n(O3e,"STRONG",{});var DKr=s(rse);E7o=r(DKr,"rembert"),DKr.forEach(t),y7o=r(O3e," \u2014 "),fD=n(O3e,"A",{href:!0});var NKr=s(fD);w7o=r(NKr,"RemBertForTokenClassification"),NKr.forEach(t),A7o=r(O3e," (RemBERT model)"),O3e.forEach(t),L7o=i(q),z5=n(q,"LI",{});var G3e=s(z5);tse=n(G3e,"STRONG",{});var qKr=s(tse);B7o=r(qKr,"roberta"),qKr.forEach(t),x7o=r(G3e," \u2014 "),mD=n(G3e,"A",{href:!0});var OKr=s(mD);k7o=r(OKr,"RobertaForTokenClassification"),OKr.forEach(t),R7o=r(G3e," (RoBERTa model)"),G3e.forEach(t),S7o=i(q),W5=n(q,"LI",{});var X3e=s(W5);ase=n(X3e,"STRONG",{});var GKr=s(ase);P7o=r(GKr,"roformer"),GKr.forEach(t),$7o=r(X3e," \u2014 "),gD=n(X3e,"A",{href:!0});var XKr=s(gD);I7o=r(XKr,"RoFormerForTokenClassification"),XKr.forEach(t),j7o=r(X3e," (RoFormer model)"),X3e.forEach(t),D7o=i(q),Q5=n(q,"LI",{});var V3e=s(Q5);nse=n(V3e,"STRONG",{});var VKr=s(nse);N7o=r(VKr,"squeezebert"),VKr.forEach(t),q7o=r(V3e," \u2014 "),hD=n(V3e,"A",{href:!0});var zKr=s(hD);O7o=r(zKr,"SqueezeBertForTokenClassification"),zKr.forEach(t),G7o=r(V3e," (SqueezeBERT model)"),V3e.forEach(t),X7o=i(q),H5=n(q,"LI",{});var z3e=s(H5);sse=n(z3e,"STRONG",{});var WKr=s(sse);V7o=r(WKr,"xlm"),WKr.forEach(t),z7o=r(z3e," \u2014 "),pD=n(z3e,"A",{href:!0});var QKr=s(pD);W7o=r(QKr,"XLMForTokenClassification"),QKr.forEach(t),Q7o=r(z3e," (XLM model)"),z3e.forEach(t),H7o=i(q),U5=n(q,"LI",{});var W3e=s(U5);lse=n(W3e,"STRONG",{});var HKr=s(lse);U7o=r(HKr,"xlm-roberta"),HKr.forEach(t),J7o=r(W3e," \u2014 "),_D=n(W3e,"A",{href:!0});var UKr=s(_D);Y7o=r(UKr,"XLMRobertaForTokenClassification"),UKr.forEach(t),K7o=r(W3e," (XLM-RoBERTa model)"),W3e.forEach(t),Z7o=i(q),J5=n(q,"LI",{});var Q3e=s(J5);ise=n(Q3e,"STRONG",{});var JKr=s(ise);eBo=r(JKr,"xlm-roberta-xl"),JKr.forEach(t),oBo=r(Q3e," \u2014 "),uD=n(Q3e,"A",{href:!0});var YKr=s(uD);rBo=r(YKr,"XLMRobertaXLForTokenClassification"),YKr.forEach(t),tBo=r(Q3e," (XLM-RoBERTa-XL model)"),Q3e.forEach(t),aBo=i(q),Y5=n(q,"LI",{});var H3e=s(Y5);dse=n(H3e,"STRONG",{});var KKr=s(dse);nBo=r(KKr,"xlnet"),KKr.forEach(t),sBo=r(H3e," \u2014 "),bD=n(H3e,"A",{href:!0});var ZKr=s(bD);lBo=r(ZKr,"XLNetForTokenClassification"),ZKr.forEach(t),iBo=r(H3e," (XLNet model)"),H3e.forEach(t),dBo=i(q),K5=n(q,"LI",{});var U3e=s(K5);cse=n(U3e,"STRONG",{});var eZr=s(cse);cBo=r(eZr,"yoso"),eZr.forEach(t),fBo=r(U3e," \u2014 "),vD=n(U3e,"A",{href:!0});var oZr=s(vD);mBo=r(oZr,"YosoForTokenClassification"),oZr.forEach(t),gBo=r(U3e," (YOSO model)"),U3e.forEach(t),q.forEach(t),hBo=i(Ht),Z5=n(Ht,"P",{});var J3e=s(Z5);pBo=r(J3e,"The model is set in evaluation mode by default using "),fse=n(J3e,"CODE",{});var rZr=s(fse);_Bo=r(rZr,"model.eval()"),rZr.forEach(t),uBo=r(J3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mse=n(J3e,"CODE",{});var tZr=s(mse);bBo=r(tZr,"model.train()"),tZr.forEach(t),J3e.forEach(t),vBo=i(Ht),gse=n(Ht,"P",{});var aZr=s(gse);TBo=r(aZr,"Examples:"),aZr.forEach(t),FBo=i(Ht),m($E.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),jxe=i(d),Ed=n(d,"H2",{class:!0});var WRe=s(Ed);e2=n(WRe,"A",{id:!0,class:!0,href:!0});var nZr=s(e2);hse=n(nZr,"SPAN",{});var sZr=s(hse);m(IE.$$.fragment,sZr),sZr.forEach(t),nZr.forEach(t),CBo=i(WRe),pse=n(WRe,"SPAN",{});var lZr=s(pse);MBo=r(lZr,"AutoModelForQuestionAnswering"),lZr.forEach(t),WRe.forEach(t),Dxe=i(d),nr=n(d,"DIV",{class:!0});var fl=s(nr);m(jE.$$.fragment,fl),EBo=i(fl),yd=n(fl,"P",{});var Xz=s(yd);yBo=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_se=n(Xz,"CODE",{});var iZr=s(_se);wBo=r(iZr,"from_pretrained()"),iZr.forEach(t),ABo=r(Xz,"class method or the "),use=n(Xz,"CODE",{});var dZr=s(use);LBo=r(dZr,"from_config()"),dZr.forEach(t),BBo=r(Xz,`class
method.`),Xz.forEach(t),xBo=i(fl),DE=n(fl,"P",{});var QRe=s(DE);kBo=r(QRe,"This class cannot be instantiated directly using "),bse=n(QRe,"CODE",{});var cZr=s(bse);RBo=r(cZr,"__init__()"),cZr.forEach(t),SBo=r(QRe," (throws an error)."),QRe.forEach(t),PBo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(NE.$$.fragment,ml),$Bo=i(ml),vse=n(ml,"P",{});var fZr=s(vse);IBo=r(fZr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fZr.forEach(t),jBo=i(ml),wd=n(ml,"P",{});var Vz=s(wd);DBo=r(Vz,`Note:
Loading a model from its configuration file does `),Tse=n(Vz,"STRONG",{});var mZr=s(Tse);NBo=r(mZr,"not"),mZr.forEach(t),qBo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fse=n(Vz,"CODE",{});var gZr=s(Fse);OBo=r(gZr,"from_pretrained()"),gZr.forEach(t),GBo=r(Vz,"to load the model weights."),Vz.forEach(t),XBo=i(ml),Cse=n(ml,"P",{});var hZr=s(Cse);VBo=r(hZr,"Examples:"),hZr.forEach(t),zBo=i(ml),m(qE.$$.fragment,ml),ml.forEach(t),WBo=i(fl),We=n(fl,"DIV",{class:!0});var Ut=s(We);m(OE.$$.fragment,Ut),QBo=i(Ut),Mse=n(Ut,"P",{});var pZr=s(Mse);HBo=r(pZr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pZr.forEach(t),UBo=i(Ut),Za=n(Ut,"P",{});var sM=s(Za);JBo=r(sM,"The model class to instantiate is selected based on the "),Ese=n(sM,"CODE",{});var _Zr=s(Ese);YBo=r(_Zr,"model_type"),_Zr.forEach(t),KBo=r(sM,` property of the config object (either
passed as an argument or loaded from `),yse=n(sM,"CODE",{});var uZr=s(yse);ZBo=r(uZr,"pretrained_model_name_or_path"),uZr.forEach(t),exo=r(sM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wse=n(sM,"CODE",{});var bZr=s(wse);oxo=r(bZr,"pretrained_model_name_or_path"),bZr.forEach(t),rxo=r(sM,":"),sM.forEach(t),txo=i(Ut),R=n(Ut,"UL",{});var P=s(R);o2=n(P,"LI",{});var Y3e=s(o2);Ase=n(Y3e,"STRONG",{});var vZr=s(Ase);axo=r(vZr,"albert"),vZr.forEach(t),nxo=r(Y3e," \u2014 "),TD=n(Y3e,"A",{href:!0});var TZr=s(TD);sxo=r(TZr,"AlbertForQuestionAnswering"),TZr.forEach(t),lxo=r(Y3e," (ALBERT model)"),Y3e.forEach(t),ixo=i(P),r2=n(P,"LI",{});var K3e=s(r2);Lse=n(K3e,"STRONG",{});var FZr=s(Lse);dxo=r(FZr,"bart"),FZr.forEach(t),cxo=r(K3e," \u2014 "),FD=n(K3e,"A",{href:!0});var CZr=s(FD);fxo=r(CZr,"BartForQuestionAnswering"),CZr.forEach(t),mxo=r(K3e," (BART model)"),K3e.forEach(t),gxo=i(P),t2=n(P,"LI",{});var Z3e=s(t2);Bse=n(Z3e,"STRONG",{});var MZr=s(Bse);hxo=r(MZr,"bert"),MZr.forEach(t),pxo=r(Z3e," \u2014 "),CD=n(Z3e,"A",{href:!0});var EZr=s(CD);_xo=r(EZr,"BertForQuestionAnswering"),EZr.forEach(t),uxo=r(Z3e," (BERT model)"),Z3e.forEach(t),bxo=i(P),a2=n(P,"LI",{});var eye=s(a2);xse=n(eye,"STRONG",{});var yZr=s(xse);vxo=r(yZr,"big_bird"),yZr.forEach(t),Txo=r(eye," \u2014 "),MD=n(eye,"A",{href:!0});var wZr=s(MD);Fxo=r(wZr,"BigBirdForQuestionAnswering"),wZr.forEach(t),Cxo=r(eye," (BigBird model)"),eye.forEach(t),Mxo=i(P),n2=n(P,"LI",{});var oye=s(n2);kse=n(oye,"STRONG",{});var AZr=s(kse);Exo=r(AZr,"bigbird_pegasus"),AZr.forEach(t),yxo=r(oye," \u2014 "),ED=n(oye,"A",{href:!0});var LZr=s(ED);wxo=r(LZr,"BigBirdPegasusForQuestionAnswering"),LZr.forEach(t),Axo=r(oye," (BigBirdPegasus model)"),oye.forEach(t),Lxo=i(P),s2=n(P,"LI",{});var rye=s(s2);Rse=n(rye,"STRONG",{});var BZr=s(Rse);Bxo=r(BZr,"camembert"),BZr.forEach(t),xxo=r(rye," \u2014 "),yD=n(rye,"A",{href:!0});var xZr=s(yD);kxo=r(xZr,"CamembertForQuestionAnswering"),xZr.forEach(t),Rxo=r(rye," (CamemBERT model)"),rye.forEach(t),Sxo=i(P),l2=n(P,"LI",{});var tye=s(l2);Sse=n(tye,"STRONG",{});var kZr=s(Sse);Pxo=r(kZr,"canine"),kZr.forEach(t),$xo=r(tye," \u2014 "),wD=n(tye,"A",{href:!0});var RZr=s(wD);Ixo=r(RZr,"CanineForQuestionAnswering"),RZr.forEach(t),jxo=r(tye," (Canine model)"),tye.forEach(t),Dxo=i(P),i2=n(P,"LI",{});var aye=s(i2);Pse=n(aye,"STRONG",{});var SZr=s(Pse);Nxo=r(SZr,"convbert"),SZr.forEach(t),qxo=r(aye," \u2014 "),AD=n(aye,"A",{href:!0});var PZr=s(AD);Oxo=r(PZr,"ConvBertForQuestionAnswering"),PZr.forEach(t),Gxo=r(aye," (ConvBERT model)"),aye.forEach(t),Xxo=i(P),d2=n(P,"LI",{});var nye=s(d2);$se=n(nye,"STRONG",{});var $Zr=s($se);Vxo=r($Zr,"data2vec-text"),$Zr.forEach(t),zxo=r(nye," \u2014 "),LD=n(nye,"A",{href:!0});var IZr=s(LD);Wxo=r(IZr,"Data2VecTextForQuestionAnswering"),IZr.forEach(t),Qxo=r(nye," (Data2VecText model)"),nye.forEach(t),Hxo=i(P),c2=n(P,"LI",{});var sye=s(c2);Ise=n(sye,"STRONG",{});var jZr=s(Ise);Uxo=r(jZr,"deberta"),jZr.forEach(t),Jxo=r(sye," \u2014 "),BD=n(sye,"A",{href:!0});var DZr=s(BD);Yxo=r(DZr,"DebertaForQuestionAnswering"),DZr.forEach(t),Kxo=r(sye," (DeBERTa model)"),sye.forEach(t),Zxo=i(P),f2=n(P,"LI",{});var lye=s(f2);jse=n(lye,"STRONG",{});var NZr=s(jse);eko=r(NZr,"deberta-v2"),NZr.forEach(t),oko=r(lye," \u2014 "),xD=n(lye,"A",{href:!0});var qZr=s(xD);rko=r(qZr,"DebertaV2ForQuestionAnswering"),qZr.forEach(t),tko=r(lye," (DeBERTa-v2 model)"),lye.forEach(t),ako=i(P),m2=n(P,"LI",{});var iye=s(m2);Dse=n(iye,"STRONG",{});var OZr=s(Dse);nko=r(OZr,"distilbert"),OZr.forEach(t),sko=r(iye," \u2014 "),kD=n(iye,"A",{href:!0});var GZr=s(kD);lko=r(GZr,"DistilBertForQuestionAnswering"),GZr.forEach(t),iko=r(iye," (DistilBERT model)"),iye.forEach(t),dko=i(P),g2=n(P,"LI",{});var dye=s(g2);Nse=n(dye,"STRONG",{});var XZr=s(Nse);cko=r(XZr,"electra"),XZr.forEach(t),fko=r(dye," \u2014 "),RD=n(dye,"A",{href:!0});var VZr=s(RD);mko=r(VZr,"ElectraForQuestionAnswering"),VZr.forEach(t),gko=r(dye," (ELECTRA model)"),dye.forEach(t),hko=i(P),h2=n(P,"LI",{});var cye=s(h2);qse=n(cye,"STRONG",{});var zZr=s(qse);pko=r(zZr,"flaubert"),zZr.forEach(t),_ko=r(cye," \u2014 "),SD=n(cye,"A",{href:!0});var WZr=s(SD);uko=r(WZr,"FlaubertForQuestionAnsweringSimple"),WZr.forEach(t),bko=r(cye," (FlauBERT model)"),cye.forEach(t),vko=i(P),p2=n(P,"LI",{});var fye=s(p2);Ose=n(fye,"STRONG",{});var QZr=s(Ose);Tko=r(QZr,"fnet"),QZr.forEach(t),Fko=r(fye," \u2014 "),PD=n(fye,"A",{href:!0});var HZr=s(PD);Cko=r(HZr,"FNetForQuestionAnswering"),HZr.forEach(t),Mko=r(fye," (FNet model)"),fye.forEach(t),Eko=i(P),_2=n(P,"LI",{});var mye=s(_2);Gse=n(mye,"STRONG",{});var UZr=s(Gse);yko=r(UZr,"funnel"),UZr.forEach(t),wko=r(mye," \u2014 "),$D=n(mye,"A",{href:!0});var JZr=s($D);Ako=r(JZr,"FunnelForQuestionAnswering"),JZr.forEach(t),Lko=r(mye," (Funnel Transformer model)"),mye.forEach(t),Bko=i(P),u2=n(P,"LI",{});var gye=s(u2);Xse=n(gye,"STRONG",{});var YZr=s(Xse);xko=r(YZr,"gptj"),YZr.forEach(t),kko=r(gye," \u2014 "),ID=n(gye,"A",{href:!0});var KZr=s(ID);Rko=r(KZr,"GPTJForQuestionAnswering"),KZr.forEach(t),Sko=r(gye," (GPT-J model)"),gye.forEach(t),Pko=i(P),b2=n(P,"LI",{});var hye=s(b2);Vse=n(hye,"STRONG",{});var ZZr=s(Vse);$ko=r(ZZr,"ibert"),ZZr.forEach(t),Iko=r(hye," \u2014 "),jD=n(hye,"A",{href:!0});var eet=s(jD);jko=r(eet,"IBertForQuestionAnswering"),eet.forEach(t),Dko=r(hye," (I-BERT model)"),hye.forEach(t),Nko=i(P),v2=n(P,"LI",{});var pye=s(v2);zse=n(pye,"STRONG",{});var oet=s(zse);qko=r(oet,"layoutlmv2"),oet.forEach(t),Oko=r(pye," \u2014 "),DD=n(pye,"A",{href:!0});var ret=s(DD);Gko=r(ret,"LayoutLMv2ForQuestionAnswering"),ret.forEach(t),Xko=r(pye," (LayoutLMv2 model)"),pye.forEach(t),Vko=i(P),T2=n(P,"LI",{});var _ye=s(T2);Wse=n(_ye,"STRONG",{});var tet=s(Wse);zko=r(tet,"led"),tet.forEach(t),Wko=r(_ye," \u2014 "),ND=n(_ye,"A",{href:!0});var aet=s(ND);Qko=r(aet,"LEDForQuestionAnswering"),aet.forEach(t),Hko=r(_ye," (LED model)"),_ye.forEach(t),Uko=i(P),F2=n(P,"LI",{});var uye=s(F2);Qse=n(uye,"STRONG",{});var net=s(Qse);Jko=r(net,"longformer"),net.forEach(t),Yko=r(uye," \u2014 "),qD=n(uye,"A",{href:!0});var set=s(qD);Kko=r(set,"LongformerForQuestionAnswering"),set.forEach(t),Zko=r(uye," (Longformer model)"),uye.forEach(t),eRo=i(P),C2=n(P,"LI",{});var bye=s(C2);Hse=n(bye,"STRONG",{});var iet=s(Hse);oRo=r(iet,"lxmert"),iet.forEach(t),rRo=r(bye," \u2014 "),OD=n(bye,"A",{href:!0});var det=s(OD);tRo=r(det,"LxmertForQuestionAnswering"),det.forEach(t),aRo=r(bye," (LXMERT model)"),bye.forEach(t),nRo=i(P),M2=n(P,"LI",{});var vye=s(M2);Use=n(vye,"STRONG",{});var cet=s(Use);sRo=r(cet,"mbart"),cet.forEach(t),lRo=r(vye," \u2014 "),GD=n(vye,"A",{href:!0});var fet=s(GD);iRo=r(fet,"MBartForQuestionAnswering"),fet.forEach(t),dRo=r(vye," (mBART model)"),vye.forEach(t),cRo=i(P),E2=n(P,"LI",{});var Tye=s(E2);Jse=n(Tye,"STRONG",{});var met=s(Jse);fRo=r(met,"megatron-bert"),met.forEach(t),mRo=r(Tye," \u2014 "),XD=n(Tye,"A",{href:!0});var get=s(XD);gRo=r(get,"MegatronBertForQuestionAnswering"),get.forEach(t),hRo=r(Tye," (MegatronBert model)"),Tye.forEach(t),pRo=i(P),y2=n(P,"LI",{});var Fye=s(y2);Yse=n(Fye,"STRONG",{});var het=s(Yse);_Ro=r(het,"mobilebert"),het.forEach(t),uRo=r(Fye," \u2014 "),VD=n(Fye,"A",{href:!0});var pet=s(VD);bRo=r(pet,"MobileBertForQuestionAnswering"),pet.forEach(t),vRo=r(Fye," (MobileBERT model)"),Fye.forEach(t),TRo=i(P),w2=n(P,"LI",{});var Cye=s(w2);Kse=n(Cye,"STRONG",{});var _et=s(Kse);FRo=r(_et,"mpnet"),_et.forEach(t),CRo=r(Cye," \u2014 "),zD=n(Cye,"A",{href:!0});var uet=s(zD);MRo=r(uet,"MPNetForQuestionAnswering"),uet.forEach(t),ERo=r(Cye," (MPNet model)"),Cye.forEach(t),yRo=i(P),A2=n(P,"LI",{});var Mye=s(A2);Zse=n(Mye,"STRONG",{});var bet=s(Zse);wRo=r(bet,"nystromformer"),bet.forEach(t),ARo=r(Mye," \u2014 "),WD=n(Mye,"A",{href:!0});var vet=s(WD);LRo=r(vet,"NystromformerForQuestionAnswering"),vet.forEach(t),BRo=r(Mye," (Nystromformer model)"),Mye.forEach(t),xRo=i(P),L2=n(P,"LI",{});var Eye=s(L2);ele=n(Eye,"STRONG",{});var Tet=s(ele);kRo=r(Tet,"qdqbert"),Tet.forEach(t),RRo=r(Eye," \u2014 "),QD=n(Eye,"A",{href:!0});var Fet=s(QD);SRo=r(Fet,"QDQBertForQuestionAnswering"),Fet.forEach(t),PRo=r(Eye," (QDQBert model)"),Eye.forEach(t),$Ro=i(P),B2=n(P,"LI",{});var yye=s(B2);ole=n(yye,"STRONG",{});var Cet=s(ole);IRo=r(Cet,"reformer"),Cet.forEach(t),jRo=r(yye," \u2014 "),HD=n(yye,"A",{href:!0});var Met=s(HD);DRo=r(Met,"ReformerForQuestionAnswering"),Met.forEach(t),NRo=r(yye," (Reformer model)"),yye.forEach(t),qRo=i(P),x2=n(P,"LI",{});var wye=s(x2);rle=n(wye,"STRONG",{});var Eet=s(rle);ORo=r(Eet,"rembert"),Eet.forEach(t),GRo=r(wye," \u2014 "),UD=n(wye,"A",{href:!0});var yet=s(UD);XRo=r(yet,"RemBertForQuestionAnswering"),yet.forEach(t),VRo=r(wye," (RemBERT model)"),wye.forEach(t),zRo=i(P),k2=n(P,"LI",{});var Aye=s(k2);tle=n(Aye,"STRONG",{});var wet=s(tle);WRo=r(wet,"roberta"),wet.forEach(t),QRo=r(Aye," \u2014 "),JD=n(Aye,"A",{href:!0});var Aet=s(JD);HRo=r(Aet,"RobertaForQuestionAnswering"),Aet.forEach(t),URo=r(Aye," (RoBERTa model)"),Aye.forEach(t),JRo=i(P),R2=n(P,"LI",{});var Lye=s(R2);ale=n(Lye,"STRONG",{});var Let=s(ale);YRo=r(Let,"roformer"),Let.forEach(t),KRo=r(Lye," \u2014 "),YD=n(Lye,"A",{href:!0});var Bet=s(YD);ZRo=r(Bet,"RoFormerForQuestionAnswering"),Bet.forEach(t),eSo=r(Lye," (RoFormer model)"),Lye.forEach(t),oSo=i(P),S2=n(P,"LI",{});var Bye=s(S2);nle=n(Bye,"STRONG",{});var xet=s(nle);rSo=r(xet,"splinter"),xet.forEach(t),tSo=r(Bye," \u2014 "),KD=n(Bye,"A",{href:!0});var ket=s(KD);aSo=r(ket,"SplinterForQuestionAnswering"),ket.forEach(t),nSo=r(Bye," (Splinter model)"),Bye.forEach(t),sSo=i(P),P2=n(P,"LI",{});var xye=s(P2);sle=n(xye,"STRONG",{});var Ret=s(sle);lSo=r(Ret,"squeezebert"),Ret.forEach(t),iSo=r(xye," \u2014 "),ZD=n(xye,"A",{href:!0});var Set=s(ZD);dSo=r(Set,"SqueezeBertForQuestionAnswering"),Set.forEach(t),cSo=r(xye," (SqueezeBERT model)"),xye.forEach(t),fSo=i(P),$2=n(P,"LI",{});var kye=s($2);lle=n(kye,"STRONG",{});var Pet=s(lle);mSo=r(Pet,"xlm"),Pet.forEach(t),gSo=r(kye," \u2014 "),eN=n(kye,"A",{href:!0});var $et=s(eN);hSo=r($et,"XLMForQuestionAnsweringSimple"),$et.forEach(t),pSo=r(kye," (XLM model)"),kye.forEach(t),_So=i(P),I2=n(P,"LI",{});var Rye=s(I2);ile=n(Rye,"STRONG",{});var Iet=s(ile);uSo=r(Iet,"xlm-roberta"),Iet.forEach(t),bSo=r(Rye," \u2014 "),oN=n(Rye,"A",{href:!0});var jet=s(oN);vSo=r(jet,"XLMRobertaForQuestionAnswering"),jet.forEach(t),TSo=r(Rye," (XLM-RoBERTa model)"),Rye.forEach(t),FSo=i(P),j2=n(P,"LI",{});var Sye=s(j2);dle=n(Sye,"STRONG",{});var Det=s(dle);CSo=r(Det,"xlm-roberta-xl"),Det.forEach(t),MSo=r(Sye," \u2014 "),rN=n(Sye,"A",{href:!0});var Net=s(rN);ESo=r(Net,"XLMRobertaXLForQuestionAnswering"),Net.forEach(t),ySo=r(Sye," (XLM-RoBERTa-XL model)"),Sye.forEach(t),wSo=i(P),D2=n(P,"LI",{});var Pye=s(D2);cle=n(Pye,"STRONG",{});var qet=s(cle);ASo=r(qet,"xlnet"),qet.forEach(t),LSo=r(Pye," \u2014 "),tN=n(Pye,"A",{href:!0});var Oet=s(tN);BSo=r(Oet,"XLNetForQuestionAnsweringSimple"),Oet.forEach(t),xSo=r(Pye," (XLNet model)"),Pye.forEach(t),kSo=i(P),N2=n(P,"LI",{});var $ye=s(N2);fle=n($ye,"STRONG",{});var Get=s(fle);RSo=r(Get,"yoso"),Get.forEach(t),SSo=r($ye," \u2014 "),aN=n($ye,"A",{href:!0});var Xet=s(aN);PSo=r(Xet,"YosoForQuestionAnswering"),Xet.forEach(t),$So=r($ye," (YOSO model)"),$ye.forEach(t),P.forEach(t),ISo=i(Ut),q2=n(Ut,"P",{});var Iye=s(q2);jSo=r(Iye,"The model is set in evaluation mode by default using "),mle=n(Iye,"CODE",{});var Vet=s(mle);DSo=r(Vet,"model.eval()"),Vet.forEach(t),NSo=r(Iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gle=n(Iye,"CODE",{});var zet=s(gle);qSo=r(zet,"model.train()"),zet.forEach(t),Iye.forEach(t),OSo=i(Ut),hle=n(Ut,"P",{});var Wet=s(hle);GSo=r(Wet,"Examples:"),Wet.forEach(t),XSo=i(Ut),m(GE.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),Nxe=i(d),Ad=n(d,"H2",{class:!0});var HRe=s(Ad);O2=n(HRe,"A",{id:!0,class:!0,href:!0});var Qet=s(O2);ple=n(Qet,"SPAN",{});var Het=s(ple);m(XE.$$.fragment,Het),Het.forEach(t),Qet.forEach(t),VSo=i(HRe),_le=n(HRe,"SPAN",{});var Uet=s(_le);zSo=r(Uet,"AutoModelForTableQuestionAnswering"),Uet.forEach(t),HRe.forEach(t),qxe=i(d),sr=n(d,"DIV",{class:!0});var gl=s(sr);m(VE.$$.fragment,gl),WSo=i(gl),Ld=n(gl,"P",{});var zz=s(Ld);QSo=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ule=n(zz,"CODE",{});var Jet=s(ule);HSo=r(Jet,"from_pretrained()"),Jet.forEach(t),USo=r(zz,"class method or the "),ble=n(zz,"CODE",{});var Yet=s(ble);JSo=r(Yet,"from_config()"),Yet.forEach(t),YSo=r(zz,`class
method.`),zz.forEach(t),KSo=i(gl),zE=n(gl,"P",{});var URe=s(zE);ZSo=r(URe,"This class cannot be instantiated directly using "),vle=n(URe,"CODE",{});var Ket=s(vle);ePo=r(Ket,"__init__()"),Ket.forEach(t),oPo=r(URe," (throws an error)."),URe.forEach(t),rPo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(WE.$$.fragment,hl),tPo=i(hl),Tle=n(hl,"P",{});var Zet=s(Tle);aPo=r(Zet,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Zet.forEach(t),nPo=i(hl),Bd=n(hl,"P",{});var Wz=s(Bd);sPo=r(Wz,`Note:
Loading a model from its configuration file does `),Fle=n(Wz,"STRONG",{});var eot=s(Fle);lPo=r(eot,"not"),eot.forEach(t),iPo=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cle=n(Wz,"CODE",{});var oot=s(Cle);dPo=r(oot,"from_pretrained()"),oot.forEach(t),cPo=r(Wz,"to load the model weights."),Wz.forEach(t),fPo=i(hl),Mle=n(hl,"P",{});var rot=s(Mle);mPo=r(rot,"Examples:"),rot.forEach(t),gPo=i(hl),m(QE.$$.fragment,hl),hl.forEach(t),hPo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);m(HE.$$.fragment,Jt),pPo=i(Jt),Ele=n(Jt,"P",{});var tot=s(Ele);_Po=r(tot,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tot.forEach(t),uPo=i(Jt),en=n(Jt,"P",{});var lM=s(en);bPo=r(lM,"The model class to instantiate is selected based on the "),yle=n(lM,"CODE",{});var aot=s(yle);vPo=r(aot,"model_type"),aot.forEach(t),TPo=r(lM,` property of the config object (either
passed as an argument or loaded from `),wle=n(lM,"CODE",{});var not=s(wle);FPo=r(not,"pretrained_model_name_or_path"),not.forEach(t),CPo=r(lM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ale=n(lM,"CODE",{});var sot=s(Ale);MPo=r(sot,"pretrained_model_name_or_path"),sot.forEach(t),EPo=r(lM,":"),lM.forEach(t),yPo=i(Jt),Lle=n(Jt,"UL",{});var lot=s(Lle);G2=n(lot,"LI",{});var jye=s(G2);Ble=n(jye,"STRONG",{});var iot=s(Ble);wPo=r(iot,"tapas"),iot.forEach(t),APo=r(jye," \u2014 "),nN=n(jye,"A",{href:!0});var dot=s(nN);LPo=r(dot,"TapasForQuestionAnswering"),dot.forEach(t),BPo=r(jye," (TAPAS model)"),jye.forEach(t),lot.forEach(t),xPo=i(Jt),X2=n(Jt,"P",{});var Dye=s(X2);kPo=r(Dye,"The model is set in evaluation mode by default using "),xle=n(Dye,"CODE",{});var cot=s(xle);RPo=r(cot,"model.eval()"),cot.forEach(t),SPo=r(Dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kle=n(Dye,"CODE",{});var fot=s(kle);PPo=r(fot,"model.train()"),fot.forEach(t),Dye.forEach(t),$Po=i(Jt),Rle=n(Jt,"P",{});var mot=s(Rle);IPo=r(mot,"Examples:"),mot.forEach(t),jPo=i(Jt),m(UE.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),Oxe=i(d),xd=n(d,"H2",{class:!0});var JRe=s(xd);V2=n(JRe,"A",{id:!0,class:!0,href:!0});var got=s(V2);Sle=n(got,"SPAN",{});var hot=s(Sle);m(JE.$$.fragment,hot),hot.forEach(t),got.forEach(t),DPo=i(JRe),Ple=n(JRe,"SPAN",{});var pot=s(Ple);NPo=r(pot,"AutoModelForImageClassification"),pot.forEach(t),JRe.forEach(t),Gxe=i(d),lr=n(d,"DIV",{class:!0});var pl=s(lr);m(YE.$$.fragment,pl),qPo=i(pl),kd=n(pl,"P",{});var Qz=s(kd);OPo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$le=n(Qz,"CODE",{});var _ot=s($le);GPo=r(_ot,"from_pretrained()"),_ot.forEach(t),XPo=r(Qz,"class method or the "),Ile=n(Qz,"CODE",{});var uot=s(Ile);VPo=r(uot,"from_config()"),uot.forEach(t),zPo=r(Qz,`class
method.`),Qz.forEach(t),WPo=i(pl),KE=n(pl,"P",{});var YRe=s(KE);QPo=r(YRe,"This class cannot be instantiated directly using "),jle=n(YRe,"CODE",{});var bot=s(jle);HPo=r(bot,"__init__()"),bot.forEach(t),UPo=r(YRe," (throws an error)."),YRe.forEach(t),JPo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(ZE.$$.fragment,_l),YPo=i(_l),Dle=n(_l,"P",{});var vot=s(Dle);KPo=r(vot,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vot.forEach(t),ZPo=i(_l),Rd=n(_l,"P",{});var Hz=s(Rd);e$o=r(Hz,`Note:
Loading a model from its configuration file does `),Nle=n(Hz,"STRONG",{});var Tot=s(Nle);o$o=r(Tot,"not"),Tot.forEach(t),r$o=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),qle=n(Hz,"CODE",{});var Fot=s(qle);t$o=r(Fot,"from_pretrained()"),Fot.forEach(t),a$o=r(Hz,"to load the model weights."),Hz.forEach(t),n$o=i(_l),Ole=n(_l,"P",{});var Cot=s(Ole);s$o=r(Cot,"Examples:"),Cot.forEach(t),l$o=i(_l),m(e3.$$.fragment,_l),_l.forEach(t),i$o=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(o3.$$.fragment,Yt),d$o=i(Yt),Gle=n(Yt,"P",{});var Mot=s(Gle);c$o=r(Mot,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mot.forEach(t),f$o=i(Yt),on=n(Yt,"P",{});var iM=s(on);m$o=r(iM,"The model class to instantiate is selected based on the "),Xle=n(iM,"CODE",{});var Eot=s(Xle);g$o=r(Eot,"model_type"),Eot.forEach(t),h$o=r(iM,` property of the config object (either
passed as an argument or loaded from `),Vle=n(iM,"CODE",{});var yot=s(Vle);p$o=r(yot,"pretrained_model_name_or_path"),yot.forEach(t),_$o=r(iM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zle=n(iM,"CODE",{});var wot=s(zle);u$o=r(wot,"pretrained_model_name_or_path"),wot.forEach(t),b$o=r(iM,":"),iM.forEach(t),v$o=i(Yt),Ce=n(Yt,"UL",{});var so=s(Ce);z2=n(so,"LI",{});var Nye=s(z2);Wle=n(Nye,"STRONG",{});var Aot=s(Wle);T$o=r(Aot,"beit"),Aot.forEach(t),F$o=r(Nye," \u2014 "),sN=n(Nye,"A",{href:!0});var Lot=s(sN);C$o=r(Lot,"BeitForImageClassification"),Lot.forEach(t),M$o=r(Nye," (BEiT model)"),Nye.forEach(t),E$o=i(so),W2=n(so,"LI",{});var qye=s(W2);Qle=n(qye,"STRONG",{});var Bot=s(Qle);y$o=r(Bot,"convnext"),Bot.forEach(t),w$o=r(qye," \u2014 "),lN=n(qye,"A",{href:!0});var xot=s(lN);A$o=r(xot,"ConvNextForImageClassification"),xot.forEach(t),L$o=r(qye," (ConvNext model)"),qye.forEach(t),B$o=i(so),qs=n(so,"LI",{});var DL=s(qs);Hle=n(DL,"STRONG",{});var kot=s(Hle);x$o=r(kot,"deit"),kot.forEach(t),k$o=r(DL," \u2014 "),iN=n(DL,"A",{href:!0});var Rot=s(iN);R$o=r(Rot,"DeiTForImageClassification"),Rot.forEach(t),S$o=r(DL," or "),dN=n(DL,"A",{href:!0});var Sot=s(dN);P$o=r(Sot,"DeiTForImageClassificationWithTeacher"),Sot.forEach(t),$$o=r(DL," (DeiT model)"),DL.forEach(t),I$o=i(so),Q2=n(so,"LI",{});var Oye=s(Q2);Ule=n(Oye,"STRONG",{});var Pot=s(Ule);j$o=r(Pot,"imagegpt"),Pot.forEach(t),D$o=r(Oye," \u2014 "),cN=n(Oye,"A",{href:!0});var $ot=s(cN);N$o=r($ot,"ImageGPTForImageClassification"),$ot.forEach(t),q$o=r(Oye," (ImageGPT model)"),Oye.forEach(t),O$o=i(so),ma=n(so,"LI",{});var $f=s(ma);Jle=n($f,"STRONG",{});var Iot=s(Jle);G$o=r(Iot,"perceiver"),Iot.forEach(t),X$o=r($f," \u2014 "),fN=n($f,"A",{href:!0});var jot=s(fN);V$o=r(jot,"PerceiverForImageClassificationLearned"),jot.forEach(t),z$o=r($f," or "),mN=n($f,"A",{href:!0});var Dot=s(mN);W$o=r(Dot,"PerceiverForImageClassificationFourier"),Dot.forEach(t),Q$o=r($f," or "),gN=n($f,"A",{href:!0});var Not=s(gN);H$o=r(Not,"PerceiverForImageClassificationConvProcessing"),Not.forEach(t),U$o=r($f," (Perceiver model)"),$f.forEach(t),J$o=i(so),H2=n(so,"LI",{});var Gye=s(H2);Yle=n(Gye,"STRONG",{});var qot=s(Yle);Y$o=r(qot,"poolformer"),qot.forEach(t),K$o=r(Gye," \u2014 "),hN=n(Gye,"A",{href:!0});var Oot=s(hN);Z$o=r(Oot,"PoolFormerForImageClassification"),Oot.forEach(t),eIo=r(Gye," (PoolFormer model)"),Gye.forEach(t),oIo=i(so),U2=n(so,"LI",{});var Xye=s(U2);Kle=n(Xye,"STRONG",{});var Got=s(Kle);rIo=r(Got,"segformer"),Got.forEach(t),tIo=r(Xye," \u2014 "),pN=n(Xye,"A",{href:!0});var Xot=s(pN);aIo=r(Xot,"SegformerForImageClassification"),Xot.forEach(t),nIo=r(Xye," (SegFormer model)"),Xye.forEach(t),sIo=i(so),J2=n(so,"LI",{});var Vye=s(J2);Zle=n(Vye,"STRONG",{});var Vot=s(Zle);lIo=r(Vot,"swin"),Vot.forEach(t),iIo=r(Vye," \u2014 "),_N=n(Vye,"A",{href:!0});var zot=s(_N);dIo=r(zot,"SwinForImageClassification"),zot.forEach(t),cIo=r(Vye," (Swin model)"),Vye.forEach(t),fIo=i(so),Y2=n(so,"LI",{});var zye=s(Y2);eie=n(zye,"STRONG",{});var Wot=s(eie);mIo=r(Wot,"vit"),Wot.forEach(t),gIo=r(zye," \u2014 "),uN=n(zye,"A",{href:!0});var Qot=s(uN);hIo=r(Qot,"ViTForImageClassification"),Qot.forEach(t),pIo=r(zye," (ViT model)"),zye.forEach(t),so.forEach(t),_Io=i(Yt),K2=n(Yt,"P",{});var Wye=s(K2);uIo=r(Wye,"The model is set in evaluation mode by default using "),oie=n(Wye,"CODE",{});var Hot=s(oie);bIo=r(Hot,"model.eval()"),Hot.forEach(t),vIo=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=n(Wye,"CODE",{});var Uot=s(rie);TIo=r(Uot,"model.train()"),Uot.forEach(t),Wye.forEach(t),FIo=i(Yt),tie=n(Yt,"P",{});var Jot=s(tie);CIo=r(Jot,"Examples:"),Jot.forEach(t),MIo=i(Yt),m(r3.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),Xxe=i(d),Sd=n(d,"H2",{class:!0});var KRe=s(Sd);Z2=n(KRe,"A",{id:!0,class:!0,href:!0});var Yot=s(Z2);aie=n(Yot,"SPAN",{});var Kot=s(aie);m(t3.$$.fragment,Kot),Kot.forEach(t),Yot.forEach(t),EIo=i(KRe),nie=n(KRe,"SPAN",{});var Zot=s(nie);yIo=r(Zot,"AutoModelForVision2Seq"),Zot.forEach(t),KRe.forEach(t),Vxe=i(d),ir=n(d,"DIV",{class:!0});var ul=s(ir);m(a3.$$.fragment,ul),wIo=i(ul),Pd=n(ul,"P",{});var Uz=s(Pd);AIo=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sie=n(Uz,"CODE",{});var ert=s(sie);LIo=r(ert,"from_pretrained()"),ert.forEach(t),BIo=r(Uz,"class method or the "),lie=n(Uz,"CODE",{});var ort=s(lie);xIo=r(ort,"from_config()"),ort.forEach(t),kIo=r(Uz,`class
method.`),Uz.forEach(t),RIo=i(ul),n3=n(ul,"P",{});var ZRe=s(n3);SIo=r(ZRe,"This class cannot be instantiated directly using "),iie=n(ZRe,"CODE",{});var rrt=s(iie);PIo=r(rrt,"__init__()"),rrt.forEach(t),$Io=r(ZRe," (throws an error)."),ZRe.forEach(t),IIo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(s3.$$.fragment,bl),jIo=i(bl),die=n(bl,"P",{});var trt=s(die);DIo=r(trt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),trt.forEach(t),NIo=i(bl),$d=n(bl,"P",{});var Jz=s($d);qIo=r(Jz,`Note:
Loading a model from its configuration file does `),cie=n(Jz,"STRONG",{});var art=s(cie);OIo=r(art,"not"),art.forEach(t),GIo=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),fie=n(Jz,"CODE",{});var nrt=s(fie);XIo=r(nrt,"from_pretrained()"),nrt.forEach(t),VIo=r(Jz,"to load the model weights."),Jz.forEach(t),zIo=i(bl),mie=n(bl,"P",{});var srt=s(mie);WIo=r(srt,"Examples:"),srt.forEach(t),QIo=i(bl),m(l3.$$.fragment,bl),bl.forEach(t),HIo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(i3.$$.fragment,Kt),UIo=i(Kt),gie=n(Kt,"P",{});var lrt=s(gie);JIo=r(lrt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lrt.forEach(t),YIo=i(Kt),rn=n(Kt,"P",{});var dM=s(rn);KIo=r(dM,"The model class to instantiate is selected based on the "),hie=n(dM,"CODE",{});var irt=s(hie);ZIo=r(irt,"model_type"),irt.forEach(t),ejo=r(dM,` property of the config object (either
passed as an argument or loaded from `),pie=n(dM,"CODE",{});var drt=s(pie);ojo=r(drt,"pretrained_model_name_or_path"),drt.forEach(t),rjo=r(dM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ie=n(dM,"CODE",{});var crt=s(_ie);tjo=r(crt,"pretrained_model_name_or_path"),crt.forEach(t),ajo=r(dM,":"),dM.forEach(t),njo=i(Kt),uie=n(Kt,"UL",{});var frt=s(uie);ev=n(frt,"LI",{});var Qye=s(ev);bie=n(Qye,"STRONG",{});var mrt=s(bie);sjo=r(mrt,"vision-encoder-decoder"),mrt.forEach(t),ljo=r(Qye," \u2014 "),bN=n(Qye,"A",{href:!0});var grt=s(bN);ijo=r(grt,"VisionEncoderDecoderModel"),grt.forEach(t),djo=r(Qye," (Vision Encoder decoder model)"),Qye.forEach(t),frt.forEach(t),cjo=i(Kt),ov=n(Kt,"P",{});var Hye=s(ov);fjo=r(Hye,"The model is set in evaluation mode by default using "),vie=n(Hye,"CODE",{});var hrt=s(vie);mjo=r(hrt,"model.eval()"),hrt.forEach(t),gjo=r(Hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=n(Hye,"CODE",{});var prt=s(Tie);hjo=r(prt,"model.train()"),prt.forEach(t),Hye.forEach(t),pjo=i(Kt),Fie=n(Kt,"P",{});var _rt=s(Fie);_jo=r(_rt,"Examples:"),_rt.forEach(t),ujo=i(Kt),m(d3.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),zxe=i(d),Id=n(d,"H2",{class:!0});var eSe=s(Id);rv=n(eSe,"A",{id:!0,class:!0,href:!0});var urt=s(rv);Cie=n(urt,"SPAN",{});var brt=s(Cie);m(c3.$$.fragment,brt),brt.forEach(t),urt.forEach(t),bjo=i(eSe),Mie=n(eSe,"SPAN",{});var vrt=s(Mie);vjo=r(vrt,"AutoModelForAudioClassification"),vrt.forEach(t),eSe.forEach(t),Wxe=i(d),dr=n(d,"DIV",{class:!0});var vl=s(dr);m(f3.$$.fragment,vl),Tjo=i(vl),jd=n(vl,"P",{});var Yz=s(jd);Fjo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Eie=n(Yz,"CODE",{});var Trt=s(Eie);Cjo=r(Trt,"from_pretrained()"),Trt.forEach(t),Mjo=r(Yz,"class method or the "),yie=n(Yz,"CODE",{});var Frt=s(yie);Ejo=r(Frt,"from_config()"),Frt.forEach(t),yjo=r(Yz,`class
method.`),Yz.forEach(t),wjo=i(vl),m3=n(vl,"P",{});var oSe=s(m3);Ajo=r(oSe,"This class cannot be instantiated directly using "),wie=n(oSe,"CODE",{});var Crt=s(wie);Ljo=r(Crt,"__init__()"),Crt.forEach(t),Bjo=r(oSe," (throws an error)."),oSe.forEach(t),xjo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(g3.$$.fragment,Tl),kjo=i(Tl),Aie=n(Tl,"P",{});var Mrt=s(Aie);Rjo=r(Mrt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mrt.forEach(t),Sjo=i(Tl),Dd=n(Tl,"P",{});var Kz=s(Dd);Pjo=r(Kz,`Note:
Loading a model from its configuration file does `),Lie=n(Kz,"STRONG",{});var Ert=s(Lie);$jo=r(Ert,"not"),Ert.forEach(t),Ijo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bie=n(Kz,"CODE",{});var yrt=s(Bie);jjo=r(yrt,"from_pretrained()"),yrt.forEach(t),Djo=r(Kz,"to load the model weights."),Kz.forEach(t),Njo=i(Tl),xie=n(Tl,"P",{});var wrt=s(xie);qjo=r(wrt,"Examples:"),wrt.forEach(t),Ojo=i(Tl),m(h3.$$.fragment,Tl),Tl.forEach(t),Gjo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(p3.$$.fragment,Zt),Xjo=i(Zt),kie=n(Zt,"P",{});var Art=s(kie);Vjo=r(Art,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Art.forEach(t),zjo=i(Zt),tn=n(Zt,"P",{});var cM=s(tn);Wjo=r(cM,"The model class to instantiate is selected based on the "),Rie=n(cM,"CODE",{});var Lrt=s(Rie);Qjo=r(Lrt,"model_type"),Lrt.forEach(t),Hjo=r(cM,` property of the config object (either
passed as an argument or loaded from `),Sie=n(cM,"CODE",{});var Brt=s(Sie);Ujo=r(Brt,"pretrained_model_name_or_path"),Brt.forEach(t),Jjo=r(cM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=n(cM,"CODE",{});var xrt=s(Pie);Yjo=r(xrt,"pretrained_model_name_or_path"),xrt.forEach(t),Kjo=r(cM,":"),cM.forEach(t),Zjo=i(Zt),xe=n(Zt,"UL",{});var qo=s(xe);tv=n(qo,"LI",{});var Uye=s(tv);$ie=n(Uye,"STRONG",{});var krt=s($ie);eDo=r(krt,"data2vec-audio"),krt.forEach(t),oDo=r(Uye," \u2014 "),vN=n(Uye,"A",{href:!0});var Rrt=s(vN);rDo=r(Rrt,"Data2VecAudioForSequenceClassification"),Rrt.forEach(t),tDo=r(Uye," (Data2VecAudio model)"),Uye.forEach(t),aDo=i(qo),av=n(qo,"LI",{});var Jye=s(av);Iie=n(Jye,"STRONG",{});var Srt=s(Iie);nDo=r(Srt,"hubert"),Srt.forEach(t),sDo=r(Jye," \u2014 "),TN=n(Jye,"A",{href:!0});var Prt=s(TN);lDo=r(Prt,"HubertForSequenceClassification"),Prt.forEach(t),iDo=r(Jye," (Hubert model)"),Jye.forEach(t),dDo=i(qo),nv=n(qo,"LI",{});var Yye=s(nv);jie=n(Yye,"STRONG",{});var $rt=s(jie);cDo=r($rt,"sew"),$rt.forEach(t),fDo=r(Yye," \u2014 "),FN=n(Yye,"A",{href:!0});var Irt=s(FN);mDo=r(Irt,"SEWForSequenceClassification"),Irt.forEach(t),gDo=r(Yye," (SEW model)"),Yye.forEach(t),hDo=i(qo),sv=n(qo,"LI",{});var Kye=s(sv);Die=n(Kye,"STRONG",{});var jrt=s(Die);pDo=r(jrt,"sew-d"),jrt.forEach(t),_Do=r(Kye," \u2014 "),CN=n(Kye,"A",{href:!0});var Drt=s(CN);uDo=r(Drt,"SEWDForSequenceClassification"),Drt.forEach(t),bDo=r(Kye," (SEW-D model)"),Kye.forEach(t),vDo=i(qo),lv=n(qo,"LI",{});var Zye=s(lv);Nie=n(Zye,"STRONG",{});var Nrt=s(Nie);TDo=r(Nrt,"unispeech"),Nrt.forEach(t),FDo=r(Zye," \u2014 "),MN=n(Zye,"A",{href:!0});var qrt=s(MN);CDo=r(qrt,"UniSpeechForSequenceClassification"),qrt.forEach(t),MDo=r(Zye," (UniSpeech model)"),Zye.forEach(t),EDo=i(qo),iv=n(qo,"LI",{});var ewe=s(iv);qie=n(ewe,"STRONG",{});var Ort=s(qie);yDo=r(Ort,"unispeech-sat"),Ort.forEach(t),wDo=r(ewe," \u2014 "),EN=n(ewe,"A",{href:!0});var Grt=s(EN);ADo=r(Grt,"UniSpeechSatForSequenceClassification"),Grt.forEach(t),LDo=r(ewe," (UniSpeechSat model)"),ewe.forEach(t),BDo=i(qo),dv=n(qo,"LI",{});var owe=s(dv);Oie=n(owe,"STRONG",{});var Xrt=s(Oie);xDo=r(Xrt,"wav2vec2"),Xrt.forEach(t),kDo=r(owe," \u2014 "),yN=n(owe,"A",{href:!0});var Vrt=s(yN);RDo=r(Vrt,"Wav2Vec2ForSequenceClassification"),Vrt.forEach(t),SDo=r(owe," (Wav2Vec2 model)"),owe.forEach(t),PDo=i(qo),cv=n(qo,"LI",{});var rwe=s(cv);Gie=n(rwe,"STRONG",{});var zrt=s(Gie);$Do=r(zrt,"wavlm"),zrt.forEach(t),IDo=r(rwe," \u2014 "),wN=n(rwe,"A",{href:!0});var Wrt=s(wN);jDo=r(Wrt,"WavLMForSequenceClassification"),Wrt.forEach(t),DDo=r(rwe," (WavLM model)"),rwe.forEach(t),qo.forEach(t),NDo=i(Zt),fv=n(Zt,"P",{});var twe=s(fv);qDo=r(twe,"The model is set in evaluation mode by default using "),Xie=n(twe,"CODE",{});var Qrt=s(Xie);ODo=r(Qrt,"model.eval()"),Qrt.forEach(t),GDo=r(twe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=n(twe,"CODE",{});var Hrt=s(Vie);XDo=r(Hrt,"model.train()"),Hrt.forEach(t),twe.forEach(t),VDo=i(Zt),zie=n(Zt,"P",{});var Urt=s(zie);zDo=r(Urt,"Examples:"),Urt.forEach(t),WDo=i(Zt),m(_3.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),Qxe=i(d),Nd=n(d,"H2",{class:!0});var rSe=s(Nd);mv=n(rSe,"A",{id:!0,class:!0,href:!0});var Jrt=s(mv);Wie=n(Jrt,"SPAN",{});var Yrt=s(Wie);m(u3.$$.fragment,Yrt),Yrt.forEach(t),Jrt.forEach(t),QDo=i(rSe),Qie=n(rSe,"SPAN",{});var Krt=s(Qie);HDo=r(Krt,"AutoModelForAudioFrameClassification"),Krt.forEach(t),rSe.forEach(t),Hxe=i(d),cr=n(d,"DIV",{class:!0});var Fl=s(cr);m(b3.$$.fragment,Fl),UDo=i(Fl),qd=n(Fl,"P",{});var Zz=s(qd);JDo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Hie=n(Zz,"CODE",{});var Zrt=s(Hie);YDo=r(Zrt,"from_pretrained()"),Zrt.forEach(t),KDo=r(Zz,"class method or the "),Uie=n(Zz,"CODE",{});var ett=s(Uie);ZDo=r(ett,"from_config()"),ett.forEach(t),eNo=r(Zz,`class
method.`),Zz.forEach(t),oNo=i(Fl),v3=n(Fl,"P",{});var tSe=s(v3);rNo=r(tSe,"This class cannot be instantiated directly using "),Jie=n(tSe,"CODE",{});var ott=s(Jie);tNo=r(ott,"__init__()"),ott.forEach(t),aNo=r(tSe," (throws an error)."),tSe.forEach(t),nNo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(T3.$$.fragment,Cl),sNo=i(Cl),Yie=n(Cl,"P",{});var rtt=s(Yie);lNo=r(rtt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),rtt.forEach(t),iNo=i(Cl),Od=n(Cl,"P",{});var eW=s(Od);dNo=r(eW,`Note:
Loading a model from its configuration file does `),Kie=n(eW,"STRONG",{});var ttt=s(Kie);cNo=r(ttt,"not"),ttt.forEach(t),fNo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=n(eW,"CODE",{});var att=s(Zie);mNo=r(att,"from_pretrained()"),att.forEach(t),gNo=r(eW,"to load the model weights."),eW.forEach(t),hNo=i(Cl),ede=n(Cl,"P",{});var ntt=s(ede);pNo=r(ntt,"Examples:"),ntt.forEach(t),_No=i(Cl),m(F3.$$.fragment,Cl),Cl.forEach(t),uNo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);m(C3.$$.fragment,ea),bNo=i(ea),ode=n(ea,"P",{});var stt=s(ode);vNo=r(stt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),stt.forEach(t),TNo=i(ea),an=n(ea,"P",{});var fM=s(an);FNo=r(fM,"The model class to instantiate is selected based on the "),rde=n(fM,"CODE",{});var ltt=s(rde);CNo=r(ltt,"model_type"),ltt.forEach(t),MNo=r(fM,` property of the config object (either
passed as an argument or loaded from `),tde=n(fM,"CODE",{});var itt=s(tde);ENo=r(itt,"pretrained_model_name_or_path"),itt.forEach(t),yNo=r(fM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(fM,"CODE",{});var dtt=s(ade);wNo=r(dtt,"pretrained_model_name_or_path"),dtt.forEach(t),ANo=r(fM,":"),fM.forEach(t),LNo=i(ea),nn=n(ea,"UL",{});var mM=s(nn);gv=n(mM,"LI",{});var awe=s(gv);nde=n(awe,"STRONG",{});var ctt=s(nde);BNo=r(ctt,"data2vec-audio"),ctt.forEach(t),xNo=r(awe," \u2014 "),AN=n(awe,"A",{href:!0});var ftt=s(AN);kNo=r(ftt,"Data2VecAudioForAudioFrameClassification"),ftt.forEach(t),RNo=r(awe," (Data2VecAudio model)"),awe.forEach(t),SNo=i(mM),hv=n(mM,"LI",{});var nwe=s(hv);sde=n(nwe,"STRONG",{});var mtt=s(sde);PNo=r(mtt,"unispeech-sat"),mtt.forEach(t),$No=r(nwe," \u2014 "),LN=n(nwe,"A",{href:!0});var gtt=s(LN);INo=r(gtt,"UniSpeechSatForAudioFrameClassification"),gtt.forEach(t),jNo=r(nwe," (UniSpeechSat model)"),nwe.forEach(t),DNo=i(mM),pv=n(mM,"LI",{});var swe=s(pv);lde=n(swe,"STRONG",{});var htt=s(lde);NNo=r(htt,"wav2vec2"),htt.forEach(t),qNo=r(swe," \u2014 "),BN=n(swe,"A",{href:!0});var ptt=s(BN);ONo=r(ptt,"Wav2Vec2ForAudioFrameClassification"),ptt.forEach(t),GNo=r(swe," (Wav2Vec2 model)"),swe.forEach(t),XNo=i(mM),_v=n(mM,"LI",{});var lwe=s(_v);ide=n(lwe,"STRONG",{});var _tt=s(ide);VNo=r(_tt,"wavlm"),_tt.forEach(t),zNo=r(lwe," \u2014 "),xN=n(lwe,"A",{href:!0});var utt=s(xN);WNo=r(utt,"WavLMForAudioFrameClassification"),utt.forEach(t),QNo=r(lwe," (WavLM model)"),lwe.forEach(t),mM.forEach(t),HNo=i(ea),uv=n(ea,"P",{});var iwe=s(uv);UNo=r(iwe,"The model is set in evaluation mode by default using "),dde=n(iwe,"CODE",{});var btt=s(dde);JNo=r(btt,"model.eval()"),btt.forEach(t),YNo=r(iwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=n(iwe,"CODE",{});var vtt=s(cde);KNo=r(vtt,"model.train()"),vtt.forEach(t),iwe.forEach(t),ZNo=i(ea),fde=n(ea,"P",{});var Ttt=s(fde);eqo=r(Ttt,"Examples:"),Ttt.forEach(t),oqo=i(ea),m(M3.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),Uxe=i(d),Gd=n(d,"H2",{class:!0});var aSe=s(Gd);bv=n(aSe,"A",{id:!0,class:!0,href:!0});var Ftt=s(bv);mde=n(Ftt,"SPAN",{});var Ctt=s(mde);m(E3.$$.fragment,Ctt),Ctt.forEach(t),Ftt.forEach(t),rqo=i(aSe),gde=n(aSe,"SPAN",{});var Mtt=s(gde);tqo=r(Mtt,"AutoModelForCTC"),Mtt.forEach(t),aSe.forEach(t),Jxe=i(d),fr=n(d,"DIV",{class:!0});var Ml=s(fr);m(y3.$$.fragment,Ml),aqo=i(Ml),Xd=n(Ml,"P",{});var oW=s(Xd);nqo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),hde=n(oW,"CODE",{});var Ett=s(hde);sqo=r(Ett,"from_pretrained()"),Ett.forEach(t),lqo=r(oW,"class method or the "),pde=n(oW,"CODE",{});var ytt=s(pde);iqo=r(ytt,"from_config()"),ytt.forEach(t),dqo=r(oW,`class
method.`),oW.forEach(t),cqo=i(Ml),w3=n(Ml,"P",{});var nSe=s(w3);fqo=r(nSe,"This class cannot be instantiated directly using "),_de=n(nSe,"CODE",{});var wtt=s(_de);mqo=r(wtt,"__init__()"),wtt.forEach(t),gqo=r(nSe," (throws an error)."),nSe.forEach(t),hqo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(A3.$$.fragment,El),pqo=i(El),ude=n(El,"P",{});var Att=s(ude);_qo=r(Att,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Att.forEach(t),uqo=i(El),Vd=n(El,"P",{});var rW=s(Vd);bqo=r(rW,`Note:
Loading a model from its configuration file does `),bde=n(rW,"STRONG",{});var Ltt=s(bde);vqo=r(Ltt,"not"),Ltt.forEach(t),Tqo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vde=n(rW,"CODE",{});var Btt=s(vde);Fqo=r(Btt,"from_pretrained()"),Btt.forEach(t),Cqo=r(rW,"to load the model weights."),rW.forEach(t),Mqo=i(El),Tde=n(El,"P",{});var xtt=s(Tde);Eqo=r(xtt,"Examples:"),xtt.forEach(t),yqo=i(El),m(L3.$$.fragment,El),El.forEach(t),wqo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);m(B3.$$.fragment,oa),Aqo=i(oa),Fde=n(oa,"P",{});var ktt=s(Fde);Lqo=r(ktt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ktt.forEach(t),Bqo=i(oa),sn=n(oa,"P",{});var gM=s(sn);xqo=r(gM,"The model class to instantiate is selected based on the "),Cde=n(gM,"CODE",{});var Rtt=s(Cde);kqo=r(Rtt,"model_type"),Rtt.forEach(t),Rqo=r(gM,` property of the config object (either
passed as an argument or loaded from `),Mde=n(gM,"CODE",{});var Stt=s(Mde);Sqo=r(Stt,"pretrained_model_name_or_path"),Stt.forEach(t),Pqo=r(gM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=n(gM,"CODE",{});var Ptt=s(Ede);$qo=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),Iqo=r(gM,":"),gM.forEach(t),jqo=i(oa),ke=n(oa,"UL",{});var Oo=s(ke);vv=n(Oo,"LI",{});var dwe=s(vv);yde=n(dwe,"STRONG",{});var $tt=s(yde);Dqo=r($tt,"data2vec-audio"),$tt.forEach(t),Nqo=r(dwe," \u2014 "),kN=n(dwe,"A",{href:!0});var Itt=s(kN);qqo=r(Itt,"Data2VecAudioForCTC"),Itt.forEach(t),Oqo=r(dwe," (Data2VecAudio model)"),dwe.forEach(t),Gqo=i(Oo),Tv=n(Oo,"LI",{});var cwe=s(Tv);wde=n(cwe,"STRONG",{});var jtt=s(wde);Xqo=r(jtt,"hubert"),jtt.forEach(t),Vqo=r(cwe," \u2014 "),RN=n(cwe,"A",{href:!0});var Dtt=s(RN);zqo=r(Dtt,"HubertForCTC"),Dtt.forEach(t),Wqo=r(cwe," (Hubert model)"),cwe.forEach(t),Qqo=i(Oo),Fv=n(Oo,"LI",{});var fwe=s(Fv);Ade=n(fwe,"STRONG",{});var Ntt=s(Ade);Hqo=r(Ntt,"sew"),Ntt.forEach(t),Uqo=r(fwe," \u2014 "),SN=n(fwe,"A",{href:!0});var qtt=s(SN);Jqo=r(qtt,"SEWForCTC"),qtt.forEach(t),Yqo=r(fwe," (SEW model)"),fwe.forEach(t),Kqo=i(Oo),Cv=n(Oo,"LI",{});var mwe=s(Cv);Lde=n(mwe,"STRONG",{});var Ott=s(Lde);Zqo=r(Ott,"sew-d"),Ott.forEach(t),eOo=r(mwe," \u2014 "),PN=n(mwe,"A",{href:!0});var Gtt=s(PN);oOo=r(Gtt,"SEWDForCTC"),Gtt.forEach(t),rOo=r(mwe," (SEW-D model)"),mwe.forEach(t),tOo=i(Oo),Mv=n(Oo,"LI",{});var gwe=s(Mv);Bde=n(gwe,"STRONG",{});var Xtt=s(Bde);aOo=r(Xtt,"unispeech"),Xtt.forEach(t),nOo=r(gwe," \u2014 "),$N=n(gwe,"A",{href:!0});var Vtt=s($N);sOo=r(Vtt,"UniSpeechForCTC"),Vtt.forEach(t),lOo=r(gwe," (UniSpeech model)"),gwe.forEach(t),iOo=i(Oo),Ev=n(Oo,"LI",{});var hwe=s(Ev);xde=n(hwe,"STRONG",{});var ztt=s(xde);dOo=r(ztt,"unispeech-sat"),ztt.forEach(t),cOo=r(hwe," \u2014 "),IN=n(hwe,"A",{href:!0});var Wtt=s(IN);fOo=r(Wtt,"UniSpeechSatForCTC"),Wtt.forEach(t),mOo=r(hwe," (UniSpeechSat model)"),hwe.forEach(t),gOo=i(Oo),yv=n(Oo,"LI",{});var pwe=s(yv);kde=n(pwe,"STRONG",{});var Qtt=s(kde);hOo=r(Qtt,"wav2vec2"),Qtt.forEach(t),pOo=r(pwe," \u2014 "),jN=n(pwe,"A",{href:!0});var Htt=s(jN);_Oo=r(Htt,"Wav2Vec2ForCTC"),Htt.forEach(t),uOo=r(pwe," (Wav2Vec2 model)"),pwe.forEach(t),bOo=i(Oo),wv=n(Oo,"LI",{});var _we=s(wv);Rde=n(_we,"STRONG",{});var Utt=s(Rde);vOo=r(Utt,"wavlm"),Utt.forEach(t),TOo=r(_we," \u2014 "),DN=n(_we,"A",{href:!0});var Jtt=s(DN);FOo=r(Jtt,"WavLMForCTC"),Jtt.forEach(t),COo=r(_we," (WavLM model)"),_we.forEach(t),Oo.forEach(t),MOo=i(oa),Av=n(oa,"P",{});var uwe=s(Av);EOo=r(uwe,"The model is set in evaluation mode by default using "),Sde=n(uwe,"CODE",{});var Ytt=s(Sde);yOo=r(Ytt,"model.eval()"),Ytt.forEach(t),wOo=r(uwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(uwe,"CODE",{});var Ktt=s(Pde);AOo=r(Ktt,"model.train()"),Ktt.forEach(t),uwe.forEach(t),LOo=i(oa),$de=n(oa,"P",{});var Ztt=s($de);BOo=r(Ztt,"Examples:"),Ztt.forEach(t),xOo=i(oa),m(x3.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),Yxe=i(d),zd=n(d,"H2",{class:!0});var sSe=s(zd);Lv=n(sSe,"A",{id:!0,class:!0,href:!0});var eat=s(Lv);Ide=n(eat,"SPAN",{});var oat=s(Ide);m(k3.$$.fragment,oat),oat.forEach(t),eat.forEach(t),kOo=i(sSe),jde=n(sSe,"SPAN",{});var rat=s(jde);ROo=r(rat,"AutoModelForSpeechSeq2Seq"),rat.forEach(t),sSe.forEach(t),Kxe=i(d),mr=n(d,"DIV",{class:!0});var yl=s(mr);m(R3.$$.fragment,yl),SOo=i(yl),Wd=n(yl,"P",{});var tW=s(Wd);POo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Dde=n(tW,"CODE",{});var tat=s(Dde);$Oo=r(tat,"from_pretrained()"),tat.forEach(t),IOo=r(tW,"class method or the "),Nde=n(tW,"CODE",{});var aat=s(Nde);jOo=r(aat,"from_config()"),aat.forEach(t),DOo=r(tW,`class
method.`),tW.forEach(t),NOo=i(yl),S3=n(yl,"P",{});var lSe=s(S3);qOo=r(lSe,"This class cannot be instantiated directly using "),qde=n(lSe,"CODE",{});var nat=s(qde);OOo=r(nat,"__init__()"),nat.forEach(t),GOo=r(lSe," (throws an error)."),lSe.forEach(t),XOo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(P3.$$.fragment,wl),VOo=i(wl),Ode=n(wl,"P",{});var sat=s(Ode);zOo=r(sat,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sat.forEach(t),WOo=i(wl),Qd=n(wl,"P",{});var aW=s(Qd);QOo=r(aW,`Note:
Loading a model from its configuration file does `),Gde=n(aW,"STRONG",{});var lat=s(Gde);HOo=r(lat,"not"),lat.forEach(t),UOo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=n(aW,"CODE",{});var iat=s(Xde);JOo=r(iat,"from_pretrained()"),iat.forEach(t),YOo=r(aW,"to load the model weights."),aW.forEach(t),KOo=i(wl),Vde=n(wl,"P",{});var dat=s(Vde);ZOo=r(dat,"Examples:"),dat.forEach(t),eGo=i(wl),m($3.$$.fragment,wl),wl.forEach(t),oGo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(I3.$$.fragment,ra),rGo=i(ra),zde=n(ra,"P",{});var cat=s(zde);tGo=r(cat,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cat.forEach(t),aGo=i(ra),ln=n(ra,"P",{});var hM=s(ln);nGo=r(hM,"The model class to instantiate is selected based on the "),Wde=n(hM,"CODE",{});var fat=s(Wde);sGo=r(fat,"model_type"),fat.forEach(t),lGo=r(hM,` property of the config object (either
passed as an argument or loaded from `),Qde=n(hM,"CODE",{});var mat=s(Qde);iGo=r(mat,"pretrained_model_name_or_path"),mat.forEach(t),dGo=r(hM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=n(hM,"CODE",{});var gat=s(Hde);cGo=r(gat,"pretrained_model_name_or_path"),gat.forEach(t),fGo=r(hM,":"),hM.forEach(t),mGo=i(ra),j3=n(ra,"UL",{});var iSe=s(j3);Bv=n(iSe,"LI",{});var bwe=s(Bv);Ude=n(bwe,"STRONG",{});var hat=s(Ude);gGo=r(hat,"speech-encoder-decoder"),hat.forEach(t),hGo=r(bwe," \u2014 "),NN=n(bwe,"A",{href:!0});var pat=s(NN);pGo=r(pat,"SpeechEncoderDecoderModel"),pat.forEach(t),_Go=r(bwe," (Speech Encoder decoder model)"),bwe.forEach(t),uGo=i(iSe),xv=n(iSe,"LI",{});var vwe=s(xv);Jde=n(vwe,"STRONG",{});var _at=s(Jde);bGo=r(_at,"speech_to_text"),_at.forEach(t),vGo=r(vwe," \u2014 "),qN=n(vwe,"A",{href:!0});var uat=s(qN);TGo=r(uat,"Speech2TextForConditionalGeneration"),uat.forEach(t),FGo=r(vwe," (Speech2Text model)"),vwe.forEach(t),iSe.forEach(t),CGo=i(ra),kv=n(ra,"P",{});var Twe=s(kv);MGo=r(Twe,"The model is set in evaluation mode by default using "),Yde=n(Twe,"CODE",{});var bat=s(Yde);EGo=r(bat,"model.eval()"),bat.forEach(t),yGo=r(Twe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kde=n(Twe,"CODE",{});var vat=s(Kde);wGo=r(vat,"model.train()"),vat.forEach(t),Twe.forEach(t),AGo=i(ra),Zde=n(ra,"P",{});var Tat=s(Zde);LGo=r(Tat,"Examples:"),Tat.forEach(t),BGo=i(ra),m(D3.$$.fragment,ra),ra.forEach(t),yl.forEach(t),Zxe=i(d),Hd=n(d,"H2",{class:!0});var dSe=s(Hd);Rv=n(dSe,"A",{id:!0,class:!0,href:!0});var Fat=s(Rv);ece=n(Fat,"SPAN",{});var Cat=s(ece);m(N3.$$.fragment,Cat),Cat.forEach(t),Fat.forEach(t),xGo=i(dSe),oce=n(dSe,"SPAN",{});var Mat=s(oce);kGo=r(Mat,"AutoModelForAudioXVector"),Mat.forEach(t),dSe.forEach(t),eke=i(d),gr=n(d,"DIV",{class:!0});var Al=s(gr);m(q3.$$.fragment,Al),RGo=i(Al),Ud=n(Al,"P",{});var nW=s(Ud);SGo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),rce=n(nW,"CODE",{});var Eat=s(rce);PGo=r(Eat,"from_pretrained()"),Eat.forEach(t),$Go=r(nW,"class method or the "),tce=n(nW,"CODE",{});var yat=s(tce);IGo=r(yat,"from_config()"),yat.forEach(t),jGo=r(nW,`class
method.`),nW.forEach(t),DGo=i(Al),O3=n(Al,"P",{});var cSe=s(O3);NGo=r(cSe,"This class cannot be instantiated directly using "),ace=n(cSe,"CODE",{});var wat=s(ace);qGo=r(wat,"__init__()"),wat.forEach(t),OGo=r(cSe," (throws an error)."),cSe.forEach(t),GGo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(G3.$$.fragment,Ll),XGo=i(Ll),nce=n(Ll,"P",{});var Aat=s(nce);VGo=r(Aat,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Aat.forEach(t),zGo=i(Ll),Jd=n(Ll,"P",{});var sW=s(Jd);WGo=r(sW,`Note:
Loading a model from its configuration file does `),sce=n(sW,"STRONG",{});var Lat=s(sce);QGo=r(Lat,"not"),Lat.forEach(t),HGo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),lce=n(sW,"CODE",{});var Bat=s(lce);UGo=r(Bat,"from_pretrained()"),Bat.forEach(t),JGo=r(sW,"to load the model weights."),sW.forEach(t),YGo=i(Ll),ice=n(Ll,"P",{});var xat=s(ice);KGo=r(xat,"Examples:"),xat.forEach(t),ZGo=i(Ll),m(X3.$$.fragment,Ll),Ll.forEach(t),eXo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);m(V3.$$.fragment,ta),oXo=i(ta),dce=n(ta,"P",{});var kat=s(dce);rXo=r(kat,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),kat.forEach(t),tXo=i(ta),dn=n(ta,"P",{});var pM=s(dn);aXo=r(pM,"The model class to instantiate is selected based on the "),cce=n(pM,"CODE",{});var Rat=s(cce);nXo=r(Rat,"model_type"),Rat.forEach(t),sXo=r(pM,` property of the config object (either
passed as an argument or loaded from `),fce=n(pM,"CODE",{});var Sat=s(fce);lXo=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),iXo=r(pM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mce=n(pM,"CODE",{});var Pat=s(mce);dXo=r(Pat,"pretrained_model_name_or_path"),Pat.forEach(t),cXo=r(pM,":"),pM.forEach(t),fXo=i(ta),cn=n(ta,"UL",{});var _M=s(cn);Sv=n(_M,"LI",{});var Fwe=s(Sv);gce=n(Fwe,"STRONG",{});var $at=s(gce);mXo=r($at,"data2vec-audio"),$at.forEach(t),gXo=r(Fwe," \u2014 "),ON=n(Fwe,"A",{href:!0});var Iat=s(ON);hXo=r(Iat,"Data2VecAudioForXVector"),Iat.forEach(t),pXo=r(Fwe," (Data2VecAudio model)"),Fwe.forEach(t),_Xo=i(_M),Pv=n(_M,"LI",{});var Cwe=s(Pv);hce=n(Cwe,"STRONG",{});var jat=s(hce);uXo=r(jat,"unispeech-sat"),jat.forEach(t),bXo=r(Cwe," \u2014 "),GN=n(Cwe,"A",{href:!0});var Dat=s(GN);vXo=r(Dat,"UniSpeechSatForXVector"),Dat.forEach(t),TXo=r(Cwe," (UniSpeechSat model)"),Cwe.forEach(t),FXo=i(_M),$v=n(_M,"LI",{});var Mwe=s($v);pce=n(Mwe,"STRONG",{});var Nat=s(pce);CXo=r(Nat,"wav2vec2"),Nat.forEach(t),MXo=r(Mwe," \u2014 "),XN=n(Mwe,"A",{href:!0});var qat=s(XN);EXo=r(qat,"Wav2Vec2ForXVector"),qat.forEach(t),yXo=r(Mwe," (Wav2Vec2 model)"),Mwe.forEach(t),wXo=i(_M),Iv=n(_M,"LI",{});var Ewe=s(Iv);_ce=n(Ewe,"STRONG",{});var Oat=s(_ce);AXo=r(Oat,"wavlm"),Oat.forEach(t),LXo=r(Ewe," \u2014 "),VN=n(Ewe,"A",{href:!0});var Gat=s(VN);BXo=r(Gat,"WavLMForXVector"),Gat.forEach(t),xXo=r(Ewe," (WavLM model)"),Ewe.forEach(t),_M.forEach(t),kXo=i(ta),jv=n(ta,"P",{});var ywe=s(jv);RXo=r(ywe,"The model is set in evaluation mode by default using "),uce=n(ywe,"CODE",{});var Xat=s(uce);SXo=r(Xat,"model.eval()"),Xat.forEach(t),PXo=r(ywe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bce=n(ywe,"CODE",{});var Vat=s(bce);$Xo=r(Vat,"model.train()"),Vat.forEach(t),ywe.forEach(t),IXo=i(ta),vce=n(ta,"P",{});var zat=s(vce);jXo=r(zat,"Examples:"),zat.forEach(t),DXo=i(ta),m(z3.$$.fragment,ta),ta.forEach(t),Al.forEach(t),oke=i(d),Yd=n(d,"H2",{class:!0});var fSe=s(Yd);Dv=n(fSe,"A",{id:!0,class:!0,href:!0});var Wat=s(Dv);Tce=n(Wat,"SPAN",{});var Qat=s(Tce);m(W3.$$.fragment,Qat),Qat.forEach(t),Wat.forEach(t),NXo=i(fSe),Fce=n(fSe,"SPAN",{});var Hat=s(Fce);qXo=r(Hat,"AutoModelForMaskedImageModeling"),Hat.forEach(t),fSe.forEach(t),rke=i(d),hr=n(d,"DIV",{class:!0});var Bl=s(hr);m(Q3.$$.fragment,Bl),OXo=i(Bl),Kd=n(Bl,"P",{});var lW=s(Kd);GXo=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Cce=n(lW,"CODE",{});var Uat=s(Cce);XXo=r(Uat,"from_pretrained()"),Uat.forEach(t),VXo=r(lW,"class method or the "),Mce=n(lW,"CODE",{});var Jat=s(Mce);zXo=r(Jat,"from_config()"),Jat.forEach(t),WXo=r(lW,`class
method.`),lW.forEach(t),QXo=i(Bl),H3=n(Bl,"P",{});var mSe=s(H3);HXo=r(mSe,"This class cannot be instantiated directly using "),Ece=n(mSe,"CODE",{});var Yat=s(Ece);UXo=r(Yat,"__init__()"),Yat.forEach(t),JXo=r(mSe," (throws an error)."),mSe.forEach(t),YXo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(U3.$$.fragment,xl),KXo=i(xl),yce=n(xl,"P",{});var Kat=s(yce);ZXo=r(Kat,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Kat.forEach(t),eVo=i(xl),Zd=n(xl,"P",{});var iW=s(Zd);oVo=r(iW,`Note:
Loading a model from its configuration file does `),wce=n(iW,"STRONG",{});var Zat=s(wce);rVo=r(Zat,"not"),Zat.forEach(t),tVo=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ace=n(iW,"CODE",{});var ent=s(Ace);aVo=r(ent,"from_pretrained()"),ent.forEach(t),nVo=r(iW,"to load the model weights."),iW.forEach(t),sVo=i(xl),Lce=n(xl,"P",{});var ont=s(Lce);lVo=r(ont,"Examples:"),ont.forEach(t),iVo=i(xl),m(J3.$$.fragment,xl),xl.forEach(t),dVo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(Y3.$$.fragment,aa),cVo=i(aa),Bce=n(aa,"P",{});var rnt=s(Bce);fVo=r(rnt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),rnt.forEach(t),mVo=i(aa),fn=n(aa,"P",{});var uM=s(fn);gVo=r(uM,"The model class to instantiate is selected based on the "),xce=n(uM,"CODE",{});var tnt=s(xce);hVo=r(tnt,"model_type"),tnt.forEach(t),pVo=r(uM,` property of the config object (either
passed as an argument or loaded from `),kce=n(uM,"CODE",{});var ant=s(kce);_Vo=r(ant,"pretrained_model_name_or_path"),ant.forEach(t),uVo=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=n(uM,"CODE",{});var nnt=s(Rce);bVo=r(nnt,"pretrained_model_name_or_path"),nnt.forEach(t),vVo=r(uM,":"),uM.forEach(t),TVo=i(aa),ec=n(aa,"UL",{});var dW=s(ec);Nv=n(dW,"LI",{});var wwe=s(Nv);Sce=n(wwe,"STRONG",{});var snt=s(Sce);FVo=r(snt,"deit"),snt.forEach(t),CVo=r(wwe," \u2014 "),zN=n(wwe,"A",{href:!0});var lnt=s(zN);MVo=r(lnt,"DeiTForMaskedImageModeling"),lnt.forEach(t),EVo=r(wwe," (DeiT model)"),wwe.forEach(t),yVo=i(dW),qv=n(dW,"LI",{});var Awe=s(qv);Pce=n(Awe,"STRONG",{});var int=s(Pce);wVo=r(int,"swin"),int.forEach(t),AVo=r(Awe," \u2014 "),WN=n(Awe,"A",{href:!0});var dnt=s(WN);LVo=r(dnt,"SwinForMaskedImageModeling"),dnt.forEach(t),BVo=r(Awe," (Swin model)"),Awe.forEach(t),xVo=i(dW),Ov=n(dW,"LI",{});var Lwe=s(Ov);$ce=n(Lwe,"STRONG",{});var cnt=s($ce);kVo=r(cnt,"vit"),cnt.forEach(t),RVo=r(Lwe," \u2014 "),QN=n(Lwe,"A",{href:!0});var fnt=s(QN);SVo=r(fnt,"ViTForMaskedImageModeling"),fnt.forEach(t),PVo=r(Lwe," (ViT model)"),Lwe.forEach(t),dW.forEach(t),$Vo=i(aa),Gv=n(aa,"P",{});var Bwe=s(Gv);IVo=r(Bwe,"The model is set in evaluation mode by default using "),Ice=n(Bwe,"CODE",{});var mnt=s(Ice);jVo=r(mnt,"model.eval()"),mnt.forEach(t),DVo=r(Bwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jce=n(Bwe,"CODE",{});var gnt=s(jce);NVo=r(gnt,"model.train()"),gnt.forEach(t),Bwe.forEach(t),qVo=i(aa),Dce=n(aa,"P",{});var hnt=s(Dce);OVo=r(hnt,"Examples:"),hnt.forEach(t),GVo=i(aa),m(K3.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),tke=i(d),oc=n(d,"H2",{class:!0});var gSe=s(oc);Xv=n(gSe,"A",{id:!0,class:!0,href:!0});var pnt=s(Xv);Nce=n(pnt,"SPAN",{});var _nt=s(Nce);m(Z3.$$.fragment,_nt),_nt.forEach(t),pnt.forEach(t),XVo=i(gSe),qce=n(gSe,"SPAN",{});var unt=s(qce);VVo=r(unt,"AutoModelForObjectDetection"),unt.forEach(t),gSe.forEach(t),ake=i(d),pr=n(d,"DIV",{class:!0});var kl=s(pr);m(ey.$$.fragment,kl),zVo=i(kl),rc=n(kl,"P",{});var cW=s(rc);WVo=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Oce=n(cW,"CODE",{});var bnt=s(Oce);QVo=r(bnt,"from_pretrained()"),bnt.forEach(t),HVo=r(cW,"class method or the "),Gce=n(cW,"CODE",{});var vnt=s(Gce);UVo=r(vnt,"from_config()"),vnt.forEach(t),JVo=r(cW,`class
method.`),cW.forEach(t),YVo=i(kl),oy=n(kl,"P",{});var hSe=s(oy);KVo=r(hSe,"This class cannot be instantiated directly using "),Xce=n(hSe,"CODE",{});var Tnt=s(Xce);ZVo=r(Tnt,"__init__()"),Tnt.forEach(t),ezo=r(hSe," (throws an error)."),hSe.forEach(t),ozo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(ry.$$.fragment,Rl),rzo=i(Rl),Vce=n(Rl,"P",{});var Fnt=s(Vce);tzo=r(Fnt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Fnt.forEach(t),azo=i(Rl),tc=n(Rl,"P",{});var fW=s(tc);nzo=r(fW,`Note:
Loading a model from its configuration file does `),zce=n(fW,"STRONG",{});var Cnt=s(zce);szo=r(Cnt,"not"),Cnt.forEach(t),lzo=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wce=n(fW,"CODE",{});var Mnt=s(Wce);izo=r(Mnt,"from_pretrained()"),Mnt.forEach(t),dzo=r(fW,"to load the model weights."),fW.forEach(t),czo=i(Rl),Qce=n(Rl,"P",{});var Ent=s(Qce);fzo=r(Ent,"Examples:"),Ent.forEach(t),mzo=i(Rl),m(ty.$$.fragment,Rl),Rl.forEach(t),gzo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);m(ay.$$.fragment,na),hzo=i(na),Hce=n(na,"P",{});var ynt=s(Hce);pzo=r(ynt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ynt.forEach(t),_zo=i(na),mn=n(na,"P",{});var bM=s(mn);uzo=r(bM,"The model class to instantiate is selected based on the "),Uce=n(bM,"CODE",{});var wnt=s(Uce);bzo=r(wnt,"model_type"),wnt.forEach(t),vzo=r(bM,` property of the config object (either
passed as an argument or loaded from `),Jce=n(bM,"CODE",{});var Ant=s(Jce);Tzo=r(Ant,"pretrained_model_name_or_path"),Ant.forEach(t),Fzo=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=n(bM,"CODE",{});var Lnt=s(Yce);Czo=r(Lnt,"pretrained_model_name_or_path"),Lnt.forEach(t),Mzo=r(bM,":"),bM.forEach(t),Ezo=i(na),Kce=n(na,"UL",{});var Bnt=s(Kce);Vv=n(Bnt,"LI",{});var xwe=s(Vv);Zce=n(xwe,"STRONG",{});var xnt=s(Zce);yzo=r(xnt,"detr"),xnt.forEach(t),wzo=r(xwe," \u2014 "),HN=n(xwe,"A",{href:!0});var knt=s(HN);Azo=r(knt,"DetrForObjectDetection"),knt.forEach(t),Lzo=r(xwe," (DETR model)"),xwe.forEach(t),Bnt.forEach(t),Bzo=i(na),zv=n(na,"P",{});var kwe=s(zv);xzo=r(kwe,"The model is set in evaluation mode by default using "),efe=n(kwe,"CODE",{});var Rnt=s(efe);kzo=r(Rnt,"model.eval()"),Rnt.forEach(t),Rzo=r(kwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=n(kwe,"CODE",{});var Snt=s(ofe);Szo=r(Snt,"model.train()"),Snt.forEach(t),kwe.forEach(t),Pzo=i(na),rfe=n(na,"P",{});var Pnt=s(rfe);$zo=r(Pnt,"Examples:"),Pnt.forEach(t),Izo=i(na),m(ny.$$.fragment,na),na.forEach(t),kl.forEach(t),nke=i(d),ac=n(d,"H2",{class:!0});var pSe=s(ac);Wv=n(pSe,"A",{id:!0,class:!0,href:!0});var $nt=s(Wv);tfe=n($nt,"SPAN",{});var Int=s(tfe);m(sy.$$.fragment,Int),Int.forEach(t),$nt.forEach(t),jzo=i(pSe),afe=n(pSe,"SPAN",{});var jnt=s(afe);Dzo=r(jnt,"AutoModelForImageSegmentation"),jnt.forEach(t),pSe.forEach(t),ske=i(d),_r=n(d,"DIV",{class:!0});var Sl=s(_r);m(ly.$$.fragment,Sl),Nzo=i(Sl),nc=n(Sl,"P",{});var mW=s(nc);qzo=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nfe=n(mW,"CODE",{});var Dnt=s(nfe);Ozo=r(Dnt,"from_pretrained()"),Dnt.forEach(t),Gzo=r(mW,"class method or the "),sfe=n(mW,"CODE",{});var Nnt=s(sfe);Xzo=r(Nnt,"from_config()"),Nnt.forEach(t),Vzo=r(mW,`class
method.`),mW.forEach(t),zzo=i(Sl),iy=n(Sl,"P",{});var _Se=s(iy);Wzo=r(_Se,"This class cannot be instantiated directly using "),lfe=n(_Se,"CODE",{});var qnt=s(lfe);Qzo=r(qnt,"__init__()"),qnt.forEach(t),Hzo=r(_Se," (throws an error)."),_Se.forEach(t),Uzo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(dy.$$.fragment,Pl),Jzo=i(Pl),ife=n(Pl,"P",{});var Ont=s(ife);Yzo=r(Ont,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ont.forEach(t),Kzo=i(Pl),sc=n(Pl,"P",{});var gW=s(sc);Zzo=r(gW,`Note:
Loading a model from its configuration file does `),dfe=n(gW,"STRONG",{});var Gnt=s(dfe);eWo=r(Gnt,"not"),Gnt.forEach(t),oWo=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cfe=n(gW,"CODE",{});var Xnt=s(cfe);rWo=r(Xnt,"from_pretrained()"),Xnt.forEach(t),tWo=r(gW,"to load the model weights."),gW.forEach(t),aWo=i(Pl),ffe=n(Pl,"P",{});var Vnt=s(ffe);nWo=r(Vnt,"Examples:"),Vnt.forEach(t),sWo=i(Pl),m(cy.$$.fragment,Pl),Pl.forEach(t),lWo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);m(fy.$$.fragment,sa),iWo=i(sa),mfe=n(sa,"P",{});var znt=s(mfe);dWo=r(znt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),znt.forEach(t),cWo=i(sa),gn=n(sa,"P",{});var vM=s(gn);fWo=r(vM,"The model class to instantiate is selected based on the "),gfe=n(vM,"CODE",{});var Wnt=s(gfe);mWo=r(Wnt,"model_type"),Wnt.forEach(t),gWo=r(vM,` property of the config object (either
passed as an argument or loaded from `),hfe=n(vM,"CODE",{});var Qnt=s(hfe);hWo=r(Qnt,"pretrained_model_name_or_path"),Qnt.forEach(t),pWo=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(vM,"CODE",{});var Hnt=s(pfe);_Wo=r(Hnt,"pretrained_model_name_or_path"),Hnt.forEach(t),uWo=r(vM,":"),vM.forEach(t),bWo=i(sa),_fe=n(sa,"UL",{});var Unt=s(_fe);Qv=n(Unt,"LI",{});var Rwe=s(Qv);ufe=n(Rwe,"STRONG",{});var Jnt=s(ufe);vWo=r(Jnt,"detr"),Jnt.forEach(t),TWo=r(Rwe," \u2014 "),UN=n(Rwe,"A",{href:!0});var Ynt=s(UN);FWo=r(Ynt,"DetrForSegmentation"),Ynt.forEach(t),CWo=r(Rwe," (DETR model)"),Rwe.forEach(t),Unt.forEach(t),MWo=i(sa),Hv=n(sa,"P",{});var Swe=s(Hv);EWo=r(Swe,"The model is set in evaluation mode by default using "),bfe=n(Swe,"CODE",{});var Knt=s(bfe);yWo=r(Knt,"model.eval()"),Knt.forEach(t),wWo=r(Swe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(Swe,"CODE",{});var Znt=s(vfe);AWo=r(Znt,"model.train()"),Znt.forEach(t),Swe.forEach(t),LWo=i(sa),Tfe=n(sa,"P",{});var est=s(Tfe);BWo=r(est,"Examples:"),est.forEach(t),xWo=i(sa),m(my.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),lke=i(d),lc=n(d,"H2",{class:!0});var uSe=s(lc);Uv=n(uSe,"A",{id:!0,class:!0,href:!0});var ost=s(Uv);Ffe=n(ost,"SPAN",{});var rst=s(Ffe);m(gy.$$.fragment,rst),rst.forEach(t),ost.forEach(t),kWo=i(uSe),Cfe=n(uSe,"SPAN",{});var tst=s(Cfe);RWo=r(tst,"AutoModelForSemanticSegmentation"),tst.forEach(t),uSe.forEach(t),ike=i(d),ur=n(d,"DIV",{class:!0});var $l=s(ur);m(hy.$$.fragment,$l),SWo=i($l),ic=n($l,"P",{});var hW=s(ic);PWo=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Mfe=n(hW,"CODE",{});var ast=s(Mfe);$Wo=r(ast,"from_pretrained()"),ast.forEach(t),IWo=r(hW,"class method or the "),Efe=n(hW,"CODE",{});var nst=s(Efe);jWo=r(nst,"from_config()"),nst.forEach(t),DWo=r(hW,`class
method.`),hW.forEach(t),NWo=i($l),py=n($l,"P",{});var bSe=s(py);qWo=r(bSe,"This class cannot be instantiated directly using "),yfe=n(bSe,"CODE",{});var sst=s(yfe);OWo=r(sst,"__init__()"),sst.forEach(t),GWo=r(bSe," (throws an error)."),bSe.forEach(t),XWo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(_y.$$.fragment,Il),VWo=i(Il),wfe=n(Il,"P",{});var lst=s(wfe);zWo=r(lst,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),lst.forEach(t),WWo=i(Il),dc=n(Il,"P",{});var pW=s(dc);QWo=r(pW,`Note:
Loading a model from its configuration file does `),Afe=n(pW,"STRONG",{});var ist=s(Afe);HWo=r(ist,"not"),ist.forEach(t),UWo=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lfe=n(pW,"CODE",{});var dst=s(Lfe);JWo=r(dst,"from_pretrained()"),dst.forEach(t),YWo=r(pW,"to load the model weights."),pW.forEach(t),KWo=i(Il),Bfe=n(Il,"P",{});var cst=s(Bfe);ZWo=r(cst,"Examples:"),cst.forEach(t),eQo=i(Il),m(uy.$$.fragment,Il),Il.forEach(t),oQo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(by.$$.fragment,la),rQo=i(la),xfe=n(la,"P",{});var fst=s(xfe);tQo=r(fst,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),fst.forEach(t),aQo=i(la),hn=n(la,"P",{});var TM=s(hn);nQo=r(TM,"The model class to instantiate is selected based on the "),kfe=n(TM,"CODE",{});var mst=s(kfe);sQo=r(mst,"model_type"),mst.forEach(t),lQo=r(TM,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(TM,"CODE",{});var gst=s(Rfe);iQo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),dQo=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(TM,"CODE",{});var hst=s(Sfe);cQo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),fQo=r(TM,":"),TM.forEach(t),mQo=i(la),vy=n(la,"UL",{});var vSe=s(vy);Jv=n(vSe,"LI",{});var Pwe=s(Jv);Pfe=n(Pwe,"STRONG",{});var pst=s(Pfe);gQo=r(pst,"beit"),pst.forEach(t),hQo=r(Pwe," \u2014 "),JN=n(Pwe,"A",{href:!0});var _st=s(JN);pQo=r(_st,"BeitForSemanticSegmentation"),_st.forEach(t),_Qo=r(Pwe," (BEiT model)"),Pwe.forEach(t),uQo=i(vSe),Yv=n(vSe,"LI",{});var $we=s(Yv);$fe=n($we,"STRONG",{});var ust=s($fe);bQo=r(ust,"segformer"),ust.forEach(t),vQo=r($we," \u2014 "),YN=n($we,"A",{href:!0});var bst=s(YN);TQo=r(bst,"SegformerForSemanticSegmentation"),bst.forEach(t),FQo=r($we," (SegFormer model)"),$we.forEach(t),vSe.forEach(t),CQo=i(la),Kv=n(la,"P",{});var Iwe=s(Kv);MQo=r(Iwe,"The model is set in evaluation mode by default using "),Ife=n(Iwe,"CODE",{});var vst=s(Ife);EQo=r(vst,"model.eval()"),vst.forEach(t),yQo=r(Iwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=n(Iwe,"CODE",{});var Tst=s(jfe);wQo=r(Tst,"model.train()"),Tst.forEach(t),Iwe.forEach(t),AQo=i(la),Dfe=n(la,"P",{});var Fst=s(Dfe);LQo=r(Fst,"Examples:"),Fst.forEach(t),BQo=i(la),m(Ty.$$.fragment,la),la.forEach(t),$l.forEach(t),dke=i(d),cc=n(d,"H2",{class:!0});var TSe=s(cc);Zv=n(TSe,"A",{id:!0,class:!0,href:!0});var Cst=s(Zv);Nfe=n(Cst,"SPAN",{});var Mst=s(Nfe);m(Fy.$$.fragment,Mst),Mst.forEach(t),Cst.forEach(t),xQo=i(TSe),qfe=n(TSe,"SPAN",{});var Est=s(qfe);kQo=r(Est,"AutoModelForInstanceSegmentation"),Est.forEach(t),TSe.forEach(t),cke=i(d),br=n(d,"DIV",{class:!0});var jl=s(br);m(Cy.$$.fragment,jl),RQo=i(jl),fc=n(jl,"P",{});var _W=s(fc);SQo=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Ofe=n(_W,"CODE",{});var yst=s(Ofe);PQo=r(yst,"from_pretrained()"),yst.forEach(t),$Qo=r(_W,"class method or the "),Gfe=n(_W,"CODE",{});var wst=s(Gfe);IQo=r(wst,"from_config()"),wst.forEach(t),jQo=r(_W,`class
method.`),_W.forEach(t),DQo=i(jl),My=n(jl,"P",{});var FSe=s(My);NQo=r(FSe,"This class cannot be instantiated directly using "),Xfe=n(FSe,"CODE",{});var Ast=s(Xfe);qQo=r(Ast,"__init__()"),Ast.forEach(t),OQo=r(FSe," (throws an error)."),FSe.forEach(t),GQo=i(jl),mt=n(jl,"DIV",{class:!0});var Dl=s(mt);m(Ey.$$.fragment,Dl),XQo=i(Dl),Vfe=n(Dl,"P",{});var Lst=s(Vfe);VQo=r(Lst,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Lst.forEach(t),zQo=i(Dl),mc=n(Dl,"P",{});var uW=s(mc);WQo=r(uW,`Note:
Loading a model from its configuration file does `),zfe=n(uW,"STRONG",{});var Bst=s(zfe);QQo=r(Bst,"not"),Bst.forEach(t),HQo=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wfe=n(uW,"CODE",{});var xst=s(Wfe);UQo=r(xst,"from_pretrained()"),xst.forEach(t),JQo=r(uW,"to load the model weights."),uW.forEach(t),YQo=i(Dl),Qfe=n(Dl,"P",{});var kst=s(Qfe);KQo=r(kst,"Examples:"),kst.forEach(t),ZQo=i(Dl),m(yy.$$.fragment,Dl),Dl.forEach(t),eHo=i(jl),no=n(jl,"DIV",{class:!0});var ia=s(no);m(wy.$$.fragment,ia),oHo=i(ia),Hfe=n(ia,"P",{});var Rst=s(Hfe);rHo=r(Rst,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Rst.forEach(t),tHo=i(ia),pn=n(ia,"P",{});var FM=s(pn);aHo=r(FM,"The model class to instantiate is selected based on the "),Ufe=n(FM,"CODE",{});var Sst=s(Ufe);nHo=r(Sst,"model_type"),Sst.forEach(t),sHo=r(FM,` property of the config object (either
passed as an argument or loaded from `),Jfe=n(FM,"CODE",{});var Pst=s(Jfe);lHo=r(Pst,"pretrained_model_name_or_path"),Pst.forEach(t),iHo=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yfe=n(FM,"CODE",{});var $st=s(Yfe);dHo=r($st,"pretrained_model_name_or_path"),$st.forEach(t),cHo=r(FM,":"),FM.forEach(t),fHo=i(ia),Kfe=n(ia,"UL",{});var Ist=s(Kfe);e6=n(Ist,"LI",{});var jwe=s(e6);Zfe=n(jwe,"STRONG",{});var jst=s(Zfe);mHo=r(jst,"maskformer"),jst.forEach(t),gHo=r(jwe," \u2014 "),KN=n(jwe,"A",{href:!0});var Dst=s(KN);hHo=r(Dst,"MaskFormerForInstanceSegmentation"),Dst.forEach(t),pHo=r(jwe," (MaskFormer model)"),jwe.forEach(t),Ist.forEach(t),_Ho=i(ia),o6=n(ia,"P",{});var Dwe=s(o6);uHo=r(Dwe,"The model is set in evaluation mode by default using "),eme=n(Dwe,"CODE",{});var Nst=s(eme);bHo=r(Nst,"model.eval()"),Nst.forEach(t),vHo=r(Dwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=n(Dwe,"CODE",{});var qst=s(ome);THo=r(qst,"model.train()"),qst.forEach(t),Dwe.forEach(t),FHo=i(ia),rme=n(ia,"P",{});var Ost=s(rme);CHo=r(Ost,"Examples:"),Ost.forEach(t),MHo=i(ia),m(Ay.$$.fragment,ia),ia.forEach(t),jl.forEach(t),fke=i(d),gc=n(d,"H2",{class:!0});var CSe=s(gc);r6=n(CSe,"A",{id:!0,class:!0,href:!0});var Gst=s(r6);tme=n(Gst,"SPAN",{});var Xst=s(tme);m(Ly.$$.fragment,Xst),Xst.forEach(t),Gst.forEach(t),EHo=i(CSe),ame=n(CSe,"SPAN",{});var Vst=s(ame);yHo=r(Vst,"TFAutoModel"),Vst.forEach(t),CSe.forEach(t),mke=i(d),vr=n(d,"DIV",{class:!0});var Nl=s(vr);m(By.$$.fragment,Nl),wHo=i(Nl),hc=n(Nl,"P",{});var bW=s(hc);AHo=r(bW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nme=n(bW,"CODE",{});var zst=s(nme);LHo=r(zst,"from_pretrained()"),zst.forEach(t),BHo=r(bW,"class method or the "),sme=n(bW,"CODE",{});var Wst=s(sme);xHo=r(Wst,"from_config()"),Wst.forEach(t),kHo=r(bW,`class
method.`),bW.forEach(t),RHo=i(Nl),xy=n(Nl,"P",{});var MSe=s(xy);SHo=r(MSe,"This class cannot be instantiated directly using "),lme=n(MSe,"CODE",{});var Qst=s(lme);PHo=r(Qst,"__init__()"),Qst.forEach(t),$Ho=r(MSe," (throws an error)."),MSe.forEach(t),IHo=i(Nl),gt=n(Nl,"DIV",{class:!0});var ql=s(gt);m(ky.$$.fragment,ql),jHo=i(ql),ime=n(ql,"P",{});var Hst=s(ime);DHo=r(Hst,"Instantiates one of the base model classes of the library from a configuration."),Hst.forEach(t),NHo=i(ql),pc=n(ql,"P",{});var vW=s(pc);qHo=r(vW,`Note:
Loading a model from its configuration file does `),dme=n(vW,"STRONG",{});var Ust=s(dme);OHo=r(Ust,"not"),Ust.forEach(t),GHo=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cme=n(vW,"CODE",{});var Jst=s(cme);XHo=r(Jst,"from_pretrained()"),Jst.forEach(t),VHo=r(vW,"to load the model weights."),vW.forEach(t),zHo=i(ql),fme=n(ql,"P",{});var Yst=s(fme);WHo=r(Yst,"Examples:"),Yst.forEach(t),QHo=i(ql),m(Ry.$$.fragment,ql),ql.forEach(t),HHo=i(Nl),ho=n(Nl,"DIV",{class:!0});var pa=s(ho);m(Sy.$$.fragment,pa),UHo=i(pa),mme=n(pa,"P",{});var Kst=s(mme);JHo=r(Kst,"Instantiate one of the base model classes of the library from a pretrained model."),Kst.forEach(t),YHo=i(pa),_n=n(pa,"P",{});var CM=s(_n);KHo=r(CM,"The model class to instantiate is selected based on the "),gme=n(CM,"CODE",{});var Zst=s(gme);ZHo=r(Zst,"model_type"),Zst.forEach(t),eUo=r(CM,` property of the config object (either
passed as an argument or loaded from `),hme=n(CM,"CODE",{});var elt=s(hme);oUo=r(elt,"pretrained_model_name_or_path"),elt.forEach(t),rUo=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=n(CM,"CODE",{});var olt=s(pme);tUo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),aUo=r(CM,":"),CM.forEach(t),nUo=i(pa),B=n(pa,"UL",{});var x=s(B);t6=n(x,"LI",{});var Nwe=s(t6);_me=n(Nwe,"STRONG",{});var rlt=s(_me);sUo=r(rlt,"albert"),rlt.forEach(t),lUo=r(Nwe," \u2014 "),ZN=n(Nwe,"A",{href:!0});var tlt=s(ZN);iUo=r(tlt,"TFAlbertModel"),tlt.forEach(t),dUo=r(Nwe," (ALBERT model)"),Nwe.forEach(t),cUo=i(x),a6=n(x,"LI",{});var qwe=s(a6);ume=n(qwe,"STRONG",{});var alt=s(ume);fUo=r(alt,"bart"),alt.forEach(t),mUo=r(qwe," \u2014 "),eq=n(qwe,"A",{href:!0});var nlt=s(eq);gUo=r(nlt,"TFBartModel"),nlt.forEach(t),hUo=r(qwe," (BART model)"),qwe.forEach(t),pUo=i(x),n6=n(x,"LI",{});var Owe=s(n6);bme=n(Owe,"STRONG",{});var slt=s(bme);_Uo=r(slt,"bert"),slt.forEach(t),uUo=r(Owe," \u2014 "),oq=n(Owe,"A",{href:!0});var llt=s(oq);bUo=r(llt,"TFBertModel"),llt.forEach(t),vUo=r(Owe," (BERT model)"),Owe.forEach(t),TUo=i(x),s6=n(x,"LI",{});var Gwe=s(s6);vme=n(Gwe,"STRONG",{});var ilt=s(vme);FUo=r(ilt,"blenderbot"),ilt.forEach(t),CUo=r(Gwe," \u2014 "),rq=n(Gwe,"A",{href:!0});var dlt=s(rq);MUo=r(dlt,"TFBlenderbotModel"),dlt.forEach(t),EUo=r(Gwe," (Blenderbot model)"),Gwe.forEach(t),yUo=i(x),l6=n(x,"LI",{});var Xwe=s(l6);Tme=n(Xwe,"STRONG",{});var clt=s(Tme);wUo=r(clt,"blenderbot-small"),clt.forEach(t),AUo=r(Xwe," \u2014 "),tq=n(Xwe,"A",{href:!0});var flt=s(tq);LUo=r(flt,"TFBlenderbotSmallModel"),flt.forEach(t),BUo=r(Xwe," (BlenderbotSmall model)"),Xwe.forEach(t),xUo=i(x),i6=n(x,"LI",{});var Vwe=s(i6);Fme=n(Vwe,"STRONG",{});var mlt=s(Fme);kUo=r(mlt,"camembert"),mlt.forEach(t),RUo=r(Vwe," \u2014 "),aq=n(Vwe,"A",{href:!0});var glt=s(aq);SUo=r(glt,"TFCamembertModel"),glt.forEach(t),PUo=r(Vwe," (CamemBERT model)"),Vwe.forEach(t),$Uo=i(x),d6=n(x,"LI",{});var zwe=s(d6);Cme=n(zwe,"STRONG",{});var hlt=s(Cme);IUo=r(hlt,"clip"),hlt.forEach(t),jUo=r(zwe," \u2014 "),nq=n(zwe,"A",{href:!0});var plt=s(nq);DUo=r(plt,"TFCLIPModel"),plt.forEach(t),NUo=r(zwe," (CLIP model)"),zwe.forEach(t),qUo=i(x),c6=n(x,"LI",{});var Wwe=s(c6);Mme=n(Wwe,"STRONG",{});var _lt=s(Mme);OUo=r(_lt,"convbert"),_lt.forEach(t),GUo=r(Wwe," \u2014 "),sq=n(Wwe,"A",{href:!0});var ult=s(sq);XUo=r(ult,"TFConvBertModel"),ult.forEach(t),VUo=r(Wwe," (ConvBERT model)"),Wwe.forEach(t),zUo=i(x),f6=n(x,"LI",{});var Qwe=s(f6);Eme=n(Qwe,"STRONG",{});var blt=s(Eme);WUo=r(blt,"convnext"),blt.forEach(t),QUo=r(Qwe," \u2014 "),lq=n(Qwe,"A",{href:!0});var vlt=s(lq);HUo=r(vlt,"TFConvNextModel"),vlt.forEach(t),UUo=r(Qwe," (ConvNext model)"),Qwe.forEach(t),JUo=i(x),m6=n(x,"LI",{});var Hwe=s(m6);yme=n(Hwe,"STRONG",{});var Tlt=s(yme);YUo=r(Tlt,"ctrl"),Tlt.forEach(t),KUo=r(Hwe," \u2014 "),iq=n(Hwe,"A",{href:!0});var Flt=s(iq);ZUo=r(Flt,"TFCTRLModel"),Flt.forEach(t),eJo=r(Hwe," (CTRL model)"),Hwe.forEach(t),oJo=i(x),g6=n(x,"LI",{});var Uwe=s(g6);wme=n(Uwe,"STRONG",{});var Clt=s(wme);rJo=r(Clt,"deberta"),Clt.forEach(t),tJo=r(Uwe," \u2014 "),dq=n(Uwe,"A",{href:!0});var Mlt=s(dq);aJo=r(Mlt,"TFDebertaModel"),Mlt.forEach(t),nJo=r(Uwe," (DeBERTa model)"),Uwe.forEach(t),sJo=i(x),h6=n(x,"LI",{});var Jwe=s(h6);Ame=n(Jwe,"STRONG",{});var Elt=s(Ame);lJo=r(Elt,"deberta-v2"),Elt.forEach(t),iJo=r(Jwe," \u2014 "),cq=n(Jwe,"A",{href:!0});var ylt=s(cq);dJo=r(ylt,"TFDebertaV2Model"),ylt.forEach(t),cJo=r(Jwe," (DeBERTa-v2 model)"),Jwe.forEach(t),fJo=i(x),p6=n(x,"LI",{});var Ywe=s(p6);Lme=n(Ywe,"STRONG",{});var wlt=s(Lme);mJo=r(wlt,"distilbert"),wlt.forEach(t),gJo=r(Ywe," \u2014 "),fq=n(Ywe,"A",{href:!0});var Alt=s(fq);hJo=r(Alt,"TFDistilBertModel"),Alt.forEach(t),pJo=r(Ywe," (DistilBERT model)"),Ywe.forEach(t),_Jo=i(x),_6=n(x,"LI",{});var Kwe=s(_6);Bme=n(Kwe,"STRONG",{});var Llt=s(Bme);uJo=r(Llt,"dpr"),Llt.forEach(t),bJo=r(Kwe," \u2014 "),mq=n(Kwe,"A",{href:!0});var Blt=s(mq);vJo=r(Blt,"TFDPRQuestionEncoder"),Blt.forEach(t),TJo=r(Kwe," (DPR model)"),Kwe.forEach(t),FJo=i(x),u6=n(x,"LI",{});var Zwe=s(u6);xme=n(Zwe,"STRONG",{});var xlt=s(xme);CJo=r(xlt,"electra"),xlt.forEach(t),MJo=r(Zwe," \u2014 "),gq=n(Zwe,"A",{href:!0});var klt=s(gq);EJo=r(klt,"TFElectraModel"),klt.forEach(t),yJo=r(Zwe," (ELECTRA model)"),Zwe.forEach(t),wJo=i(x),b6=n(x,"LI",{});var eAe=s(b6);kme=n(eAe,"STRONG",{});var Rlt=s(kme);AJo=r(Rlt,"flaubert"),Rlt.forEach(t),LJo=r(eAe," \u2014 "),hq=n(eAe,"A",{href:!0});var Slt=s(hq);BJo=r(Slt,"TFFlaubertModel"),Slt.forEach(t),xJo=r(eAe," (FlauBERT model)"),eAe.forEach(t),kJo=i(x),Os=n(x,"LI",{});var NL=s(Os);Rme=n(NL,"STRONG",{});var Plt=s(Rme);RJo=r(Plt,"funnel"),Plt.forEach(t),SJo=r(NL," \u2014 "),pq=n(NL,"A",{href:!0});var $lt=s(pq);PJo=r($lt,"TFFunnelModel"),$lt.forEach(t),$Jo=r(NL," or "),_q=n(NL,"A",{href:!0});var Ilt=s(_q);IJo=r(Ilt,"TFFunnelBaseModel"),Ilt.forEach(t),jJo=r(NL," (Funnel Transformer model)"),NL.forEach(t),DJo=i(x),v6=n(x,"LI",{});var oAe=s(v6);Sme=n(oAe,"STRONG",{});var jlt=s(Sme);NJo=r(jlt,"gpt2"),jlt.forEach(t),qJo=r(oAe," \u2014 "),uq=n(oAe,"A",{href:!0});var Dlt=s(uq);OJo=r(Dlt,"TFGPT2Model"),Dlt.forEach(t),GJo=r(oAe," (OpenAI GPT-2 model)"),oAe.forEach(t),XJo=i(x),T6=n(x,"LI",{});var rAe=s(T6);Pme=n(rAe,"STRONG",{});var Nlt=s(Pme);VJo=r(Nlt,"hubert"),Nlt.forEach(t),zJo=r(rAe," \u2014 "),bq=n(rAe,"A",{href:!0});var qlt=s(bq);WJo=r(qlt,"TFHubertModel"),qlt.forEach(t),QJo=r(rAe," (Hubert model)"),rAe.forEach(t),HJo=i(x),F6=n(x,"LI",{});var tAe=s(F6);$me=n(tAe,"STRONG",{});var Olt=s($me);UJo=r(Olt,"layoutlm"),Olt.forEach(t),JJo=r(tAe," \u2014 "),vq=n(tAe,"A",{href:!0});var Glt=s(vq);YJo=r(Glt,"TFLayoutLMModel"),Glt.forEach(t),KJo=r(tAe," (LayoutLM model)"),tAe.forEach(t),ZJo=i(x),C6=n(x,"LI",{});var aAe=s(C6);Ime=n(aAe,"STRONG",{});var Xlt=s(Ime);eYo=r(Xlt,"led"),Xlt.forEach(t),oYo=r(aAe," \u2014 "),Tq=n(aAe,"A",{href:!0});var Vlt=s(Tq);rYo=r(Vlt,"TFLEDModel"),Vlt.forEach(t),tYo=r(aAe," (LED model)"),aAe.forEach(t),aYo=i(x),M6=n(x,"LI",{});var nAe=s(M6);jme=n(nAe,"STRONG",{});var zlt=s(jme);nYo=r(zlt,"longformer"),zlt.forEach(t),sYo=r(nAe," \u2014 "),Fq=n(nAe,"A",{href:!0});var Wlt=s(Fq);lYo=r(Wlt,"TFLongformerModel"),Wlt.forEach(t),iYo=r(nAe," (Longformer model)"),nAe.forEach(t),dYo=i(x),E6=n(x,"LI",{});var sAe=s(E6);Dme=n(sAe,"STRONG",{});var Qlt=s(Dme);cYo=r(Qlt,"lxmert"),Qlt.forEach(t),fYo=r(sAe," \u2014 "),Cq=n(sAe,"A",{href:!0});var Hlt=s(Cq);mYo=r(Hlt,"TFLxmertModel"),Hlt.forEach(t),gYo=r(sAe," (LXMERT model)"),sAe.forEach(t),hYo=i(x),y6=n(x,"LI",{});var lAe=s(y6);Nme=n(lAe,"STRONG",{});var Ult=s(Nme);pYo=r(Ult,"marian"),Ult.forEach(t),_Yo=r(lAe," \u2014 "),Mq=n(lAe,"A",{href:!0});var Jlt=s(Mq);uYo=r(Jlt,"TFMarianModel"),Jlt.forEach(t),bYo=r(lAe," (Marian model)"),lAe.forEach(t),vYo=i(x),w6=n(x,"LI",{});var iAe=s(w6);qme=n(iAe,"STRONG",{});var Ylt=s(qme);TYo=r(Ylt,"mbart"),Ylt.forEach(t),FYo=r(iAe," \u2014 "),Eq=n(iAe,"A",{href:!0});var Klt=s(Eq);CYo=r(Klt,"TFMBartModel"),Klt.forEach(t),MYo=r(iAe," (mBART model)"),iAe.forEach(t),EYo=i(x),A6=n(x,"LI",{});var dAe=s(A6);Ome=n(dAe,"STRONG",{});var Zlt=s(Ome);yYo=r(Zlt,"mobilebert"),Zlt.forEach(t),wYo=r(dAe," \u2014 "),yq=n(dAe,"A",{href:!0});var eit=s(yq);AYo=r(eit,"TFMobileBertModel"),eit.forEach(t),LYo=r(dAe," (MobileBERT model)"),dAe.forEach(t),BYo=i(x),L6=n(x,"LI",{});var cAe=s(L6);Gme=n(cAe,"STRONG",{});var oit=s(Gme);xYo=r(oit,"mpnet"),oit.forEach(t),kYo=r(cAe," \u2014 "),wq=n(cAe,"A",{href:!0});var rit=s(wq);RYo=r(rit,"TFMPNetModel"),rit.forEach(t),SYo=r(cAe," (MPNet model)"),cAe.forEach(t),PYo=i(x),B6=n(x,"LI",{});var fAe=s(B6);Xme=n(fAe,"STRONG",{});var tit=s(Xme);$Yo=r(tit,"mt5"),tit.forEach(t),IYo=r(fAe," \u2014 "),Aq=n(fAe,"A",{href:!0});var ait=s(Aq);jYo=r(ait,"TFMT5Model"),ait.forEach(t),DYo=r(fAe," (mT5 model)"),fAe.forEach(t),NYo=i(x),x6=n(x,"LI",{});var mAe=s(x6);Vme=n(mAe,"STRONG",{});var nit=s(Vme);qYo=r(nit,"openai-gpt"),nit.forEach(t),OYo=r(mAe," \u2014 "),Lq=n(mAe,"A",{href:!0});var sit=s(Lq);GYo=r(sit,"TFOpenAIGPTModel"),sit.forEach(t),XYo=r(mAe," (OpenAI GPT model)"),mAe.forEach(t),VYo=i(x),k6=n(x,"LI",{});var gAe=s(k6);zme=n(gAe,"STRONG",{});var lit=s(zme);zYo=r(lit,"pegasus"),lit.forEach(t),WYo=r(gAe," \u2014 "),Bq=n(gAe,"A",{href:!0});var iit=s(Bq);QYo=r(iit,"TFPegasusModel"),iit.forEach(t),HYo=r(gAe," (Pegasus model)"),gAe.forEach(t),UYo=i(x),R6=n(x,"LI",{});var hAe=s(R6);Wme=n(hAe,"STRONG",{});var dit=s(Wme);JYo=r(dit,"rembert"),dit.forEach(t),YYo=r(hAe," \u2014 "),xq=n(hAe,"A",{href:!0});var cit=s(xq);KYo=r(cit,"TFRemBertModel"),cit.forEach(t),ZYo=r(hAe," (RemBERT model)"),hAe.forEach(t),eKo=i(x),S6=n(x,"LI",{});var pAe=s(S6);Qme=n(pAe,"STRONG",{});var fit=s(Qme);oKo=r(fit,"roberta"),fit.forEach(t),rKo=r(pAe," \u2014 "),kq=n(pAe,"A",{href:!0});var mit=s(kq);tKo=r(mit,"TFRobertaModel"),mit.forEach(t),aKo=r(pAe," (RoBERTa model)"),pAe.forEach(t),nKo=i(x),P6=n(x,"LI",{});var _Ae=s(P6);Hme=n(_Ae,"STRONG",{});var git=s(Hme);sKo=r(git,"roformer"),git.forEach(t),lKo=r(_Ae," \u2014 "),Rq=n(_Ae,"A",{href:!0});var hit=s(Rq);iKo=r(hit,"TFRoFormerModel"),hit.forEach(t),dKo=r(_Ae," (RoFormer model)"),_Ae.forEach(t),cKo=i(x),$6=n(x,"LI",{});var uAe=s($6);Ume=n(uAe,"STRONG",{});var pit=s(Ume);fKo=r(pit,"speech_to_text"),pit.forEach(t),mKo=r(uAe," \u2014 "),Sq=n(uAe,"A",{href:!0});var _it=s(Sq);gKo=r(_it,"TFSpeech2TextModel"),_it.forEach(t),hKo=r(uAe," (Speech2Text model)"),uAe.forEach(t),pKo=i(x),I6=n(x,"LI",{});var bAe=s(I6);Jme=n(bAe,"STRONG",{});var uit=s(Jme);_Ko=r(uit,"t5"),uit.forEach(t),uKo=r(bAe," \u2014 "),Pq=n(bAe,"A",{href:!0});var bit=s(Pq);bKo=r(bit,"TFT5Model"),bit.forEach(t),vKo=r(bAe," (T5 model)"),bAe.forEach(t),TKo=i(x),j6=n(x,"LI",{});var vAe=s(j6);Yme=n(vAe,"STRONG",{});var vit=s(Yme);FKo=r(vit,"tapas"),vit.forEach(t),CKo=r(vAe," \u2014 "),$q=n(vAe,"A",{href:!0});var Tit=s($q);MKo=r(Tit,"TFTapasModel"),Tit.forEach(t),EKo=r(vAe," (TAPAS model)"),vAe.forEach(t),yKo=i(x),D6=n(x,"LI",{});var TAe=s(D6);Kme=n(TAe,"STRONG",{});var Fit=s(Kme);wKo=r(Fit,"transfo-xl"),Fit.forEach(t),AKo=r(TAe," \u2014 "),Iq=n(TAe,"A",{href:!0});var Cit=s(Iq);LKo=r(Cit,"TFTransfoXLModel"),Cit.forEach(t),BKo=r(TAe," (Transformer-XL model)"),TAe.forEach(t),xKo=i(x),N6=n(x,"LI",{});var FAe=s(N6);Zme=n(FAe,"STRONG",{});var Mit=s(Zme);kKo=r(Mit,"vit"),Mit.forEach(t),RKo=r(FAe," \u2014 "),jq=n(FAe,"A",{href:!0});var Eit=s(jq);SKo=r(Eit,"TFViTModel"),Eit.forEach(t),PKo=r(FAe," (ViT model)"),FAe.forEach(t),$Ko=i(x),q6=n(x,"LI",{});var CAe=s(q6);ege=n(CAe,"STRONG",{});var yit=s(ege);IKo=r(yit,"wav2vec2"),yit.forEach(t),jKo=r(CAe," \u2014 "),Dq=n(CAe,"A",{href:!0});var wit=s(Dq);DKo=r(wit,"TFWav2Vec2Model"),wit.forEach(t),NKo=r(CAe," (Wav2Vec2 model)"),CAe.forEach(t),qKo=i(x),O6=n(x,"LI",{});var MAe=s(O6);oge=n(MAe,"STRONG",{});var Ait=s(oge);OKo=r(Ait,"xlm"),Ait.forEach(t),GKo=r(MAe," \u2014 "),Nq=n(MAe,"A",{href:!0});var Lit=s(Nq);XKo=r(Lit,"TFXLMModel"),Lit.forEach(t),VKo=r(MAe," (XLM model)"),MAe.forEach(t),zKo=i(x),G6=n(x,"LI",{});var EAe=s(G6);rge=n(EAe,"STRONG",{});var Bit=s(rge);WKo=r(Bit,"xlm-roberta"),Bit.forEach(t),QKo=r(EAe," \u2014 "),qq=n(EAe,"A",{href:!0});var xit=s(qq);HKo=r(xit,"TFXLMRobertaModel"),xit.forEach(t),UKo=r(EAe," (XLM-RoBERTa model)"),EAe.forEach(t),JKo=i(x),X6=n(x,"LI",{});var yAe=s(X6);tge=n(yAe,"STRONG",{});var kit=s(tge);YKo=r(kit,"xlnet"),kit.forEach(t),KKo=r(yAe," \u2014 "),Oq=n(yAe,"A",{href:!0});var Rit=s(Oq);ZKo=r(Rit,"TFXLNetModel"),Rit.forEach(t),eZo=r(yAe," (XLNet model)"),yAe.forEach(t),x.forEach(t),oZo=i(pa),age=n(pa,"P",{});var Sit=s(age);rZo=r(Sit,"Examples:"),Sit.forEach(t),tZo=i(pa),m(Py.$$.fragment,pa),pa.forEach(t),Nl.forEach(t),gke=i(d),_c=n(d,"H2",{class:!0});var ESe=s(_c);V6=n(ESe,"A",{id:!0,class:!0,href:!0});var Pit=s(V6);nge=n(Pit,"SPAN",{});var $it=s(nge);m($y.$$.fragment,$it),$it.forEach(t),Pit.forEach(t),aZo=i(ESe),sge=n(ESe,"SPAN",{});var Iit=s(sge);nZo=r(Iit,"TFAutoModelForPreTraining"),Iit.forEach(t),ESe.forEach(t),hke=i(d),Tr=n(d,"DIV",{class:!0});var Ol=s(Tr);m(Iy.$$.fragment,Ol),sZo=i(Ol),uc=n(Ol,"P",{});var TW=s(uc);lZo=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lge=n(TW,"CODE",{});var jit=s(lge);iZo=r(jit,"from_pretrained()"),jit.forEach(t),dZo=r(TW,"class method or the "),ige=n(TW,"CODE",{});var Dit=s(ige);cZo=r(Dit,"from_config()"),Dit.forEach(t),fZo=r(TW,`class
method.`),TW.forEach(t),mZo=i(Ol),jy=n(Ol,"P",{});var ySe=s(jy);gZo=r(ySe,"This class cannot be instantiated directly using "),dge=n(ySe,"CODE",{});var Nit=s(dge);hZo=r(Nit,"__init__()"),Nit.forEach(t),pZo=r(ySe," (throws an error)."),ySe.forEach(t),_Zo=i(Ol),ht=n(Ol,"DIV",{class:!0});var Gl=s(ht);m(Dy.$$.fragment,Gl),uZo=i(Gl),cge=n(Gl,"P",{});var qit=s(cge);bZo=r(qit,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qit.forEach(t),vZo=i(Gl),bc=n(Gl,"P",{});var FW=s(bc);TZo=r(FW,`Note:
Loading a model from its configuration file does `),fge=n(FW,"STRONG",{});var Oit=s(fge);FZo=r(Oit,"not"),Oit.forEach(t),CZo=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mge=n(FW,"CODE",{});var Git=s(mge);MZo=r(Git,"from_pretrained()"),Git.forEach(t),EZo=r(FW,"to load the model weights."),FW.forEach(t),yZo=i(Gl),gge=n(Gl,"P",{});var Xit=s(gge);wZo=r(Xit,"Examples:"),Xit.forEach(t),AZo=i(Gl),m(Ny.$$.fragment,Gl),Gl.forEach(t),LZo=i(Ol),po=n(Ol,"DIV",{class:!0});var _a=s(po);m(qy.$$.fragment,_a),BZo=i(_a),hge=n(_a,"P",{});var Vit=s(hge);xZo=r(Vit,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vit.forEach(t),kZo=i(_a),un=n(_a,"P",{});var MM=s(un);RZo=r(MM,"The model class to instantiate is selected based on the "),pge=n(MM,"CODE",{});var zit=s(pge);SZo=r(zit,"model_type"),zit.forEach(t),PZo=r(MM,` property of the config object (either
passed as an argument or loaded from `),_ge=n(MM,"CODE",{});var Wit=s(_ge);$Zo=r(Wit,"pretrained_model_name_or_path"),Wit.forEach(t),IZo=r(MM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=n(MM,"CODE",{});var Qit=s(uge);jZo=r(Qit,"pretrained_model_name_or_path"),Qit.forEach(t),DZo=r(MM,":"),MM.forEach(t),NZo=i(_a),H=n(_a,"UL",{});var U=s(H);z6=n(U,"LI",{});var wAe=s(z6);bge=n(wAe,"STRONG",{});var Hit=s(bge);qZo=r(Hit,"albert"),Hit.forEach(t),OZo=r(wAe," \u2014 "),Gq=n(wAe,"A",{href:!0});var Uit=s(Gq);GZo=r(Uit,"TFAlbertForPreTraining"),Uit.forEach(t),XZo=r(wAe," (ALBERT model)"),wAe.forEach(t),VZo=i(U),W6=n(U,"LI",{});var AAe=s(W6);vge=n(AAe,"STRONG",{});var Jit=s(vge);zZo=r(Jit,"bart"),Jit.forEach(t),WZo=r(AAe," \u2014 "),Xq=n(AAe,"A",{href:!0});var Yit=s(Xq);QZo=r(Yit,"TFBartForConditionalGeneration"),Yit.forEach(t),HZo=r(AAe," (BART model)"),AAe.forEach(t),UZo=i(U),Q6=n(U,"LI",{});var LAe=s(Q6);Tge=n(LAe,"STRONG",{});var Kit=s(Tge);JZo=r(Kit,"bert"),Kit.forEach(t),YZo=r(LAe," \u2014 "),Vq=n(LAe,"A",{href:!0});var Zit=s(Vq);KZo=r(Zit,"TFBertForPreTraining"),Zit.forEach(t),ZZo=r(LAe," (BERT model)"),LAe.forEach(t),eer=i(U),H6=n(U,"LI",{});var BAe=s(H6);Fge=n(BAe,"STRONG",{});var edt=s(Fge);oer=r(edt,"camembert"),edt.forEach(t),rer=r(BAe," \u2014 "),zq=n(BAe,"A",{href:!0});var odt=s(zq);ter=r(odt,"TFCamembertForMaskedLM"),odt.forEach(t),aer=r(BAe," (CamemBERT model)"),BAe.forEach(t),ner=i(U),U6=n(U,"LI",{});var xAe=s(U6);Cge=n(xAe,"STRONG",{});var rdt=s(Cge);ser=r(rdt,"ctrl"),rdt.forEach(t),ler=r(xAe," \u2014 "),Wq=n(xAe,"A",{href:!0});var tdt=s(Wq);ier=r(tdt,"TFCTRLLMHeadModel"),tdt.forEach(t),der=r(xAe," (CTRL model)"),xAe.forEach(t),cer=i(U),J6=n(U,"LI",{});var kAe=s(J6);Mge=n(kAe,"STRONG",{});var adt=s(Mge);fer=r(adt,"distilbert"),adt.forEach(t),mer=r(kAe," \u2014 "),Qq=n(kAe,"A",{href:!0});var ndt=s(Qq);ger=r(ndt,"TFDistilBertForMaskedLM"),ndt.forEach(t),her=r(kAe," (DistilBERT model)"),kAe.forEach(t),per=i(U),Y6=n(U,"LI",{});var RAe=s(Y6);Ege=n(RAe,"STRONG",{});var sdt=s(Ege);_er=r(sdt,"electra"),sdt.forEach(t),uer=r(RAe," \u2014 "),Hq=n(RAe,"A",{href:!0});var ldt=s(Hq);ber=r(ldt,"TFElectraForPreTraining"),ldt.forEach(t),ver=r(RAe," (ELECTRA model)"),RAe.forEach(t),Ter=i(U),K6=n(U,"LI",{});var SAe=s(K6);yge=n(SAe,"STRONG",{});var idt=s(yge);Fer=r(idt,"flaubert"),idt.forEach(t),Cer=r(SAe," \u2014 "),Uq=n(SAe,"A",{href:!0});var ddt=s(Uq);Mer=r(ddt,"TFFlaubertWithLMHeadModel"),ddt.forEach(t),Eer=r(SAe," (FlauBERT model)"),SAe.forEach(t),yer=i(U),Z6=n(U,"LI",{});var PAe=s(Z6);wge=n(PAe,"STRONG",{});var cdt=s(wge);wer=r(cdt,"funnel"),cdt.forEach(t),Aer=r(PAe," \u2014 "),Jq=n(PAe,"A",{href:!0});var fdt=s(Jq);Ler=r(fdt,"TFFunnelForPreTraining"),fdt.forEach(t),Ber=r(PAe," (Funnel Transformer model)"),PAe.forEach(t),xer=i(U),eT=n(U,"LI",{});var $Ae=s(eT);Age=n($Ae,"STRONG",{});var mdt=s(Age);ker=r(mdt,"gpt2"),mdt.forEach(t),Rer=r($Ae," \u2014 "),Yq=n($Ae,"A",{href:!0});var gdt=s(Yq);Ser=r(gdt,"TFGPT2LMHeadModel"),gdt.forEach(t),Per=r($Ae," (OpenAI GPT-2 model)"),$Ae.forEach(t),$er=i(U),oT=n(U,"LI",{});var IAe=s(oT);Lge=n(IAe,"STRONG",{});var hdt=s(Lge);Ier=r(hdt,"layoutlm"),hdt.forEach(t),jer=r(IAe," \u2014 "),Kq=n(IAe,"A",{href:!0});var pdt=s(Kq);Der=r(pdt,"TFLayoutLMForMaskedLM"),pdt.forEach(t),Ner=r(IAe," (LayoutLM model)"),IAe.forEach(t),qer=i(U),rT=n(U,"LI",{});var jAe=s(rT);Bge=n(jAe,"STRONG",{});var _dt=s(Bge);Oer=r(_dt,"lxmert"),_dt.forEach(t),Ger=r(jAe," \u2014 "),Zq=n(jAe,"A",{href:!0});var udt=s(Zq);Xer=r(udt,"TFLxmertForPreTraining"),udt.forEach(t),Ver=r(jAe," (LXMERT model)"),jAe.forEach(t),zer=i(U),tT=n(U,"LI",{});var DAe=s(tT);xge=n(DAe,"STRONG",{});var bdt=s(xge);Wer=r(bdt,"mobilebert"),bdt.forEach(t),Qer=r(DAe," \u2014 "),eO=n(DAe,"A",{href:!0});var vdt=s(eO);Her=r(vdt,"TFMobileBertForPreTraining"),vdt.forEach(t),Uer=r(DAe," (MobileBERT model)"),DAe.forEach(t),Jer=i(U),aT=n(U,"LI",{});var NAe=s(aT);kge=n(NAe,"STRONG",{});var Tdt=s(kge);Yer=r(Tdt,"mpnet"),Tdt.forEach(t),Ker=r(NAe," \u2014 "),oO=n(NAe,"A",{href:!0});var Fdt=s(oO);Zer=r(Fdt,"TFMPNetForMaskedLM"),Fdt.forEach(t),eor=r(NAe," (MPNet model)"),NAe.forEach(t),oor=i(U),nT=n(U,"LI",{});var qAe=s(nT);Rge=n(qAe,"STRONG",{});var Cdt=s(Rge);ror=r(Cdt,"openai-gpt"),Cdt.forEach(t),tor=r(qAe," \u2014 "),rO=n(qAe,"A",{href:!0});var Mdt=s(rO);aor=r(Mdt,"TFOpenAIGPTLMHeadModel"),Mdt.forEach(t),nor=r(qAe," (OpenAI GPT model)"),qAe.forEach(t),sor=i(U),sT=n(U,"LI",{});var OAe=s(sT);Sge=n(OAe,"STRONG",{});var Edt=s(Sge);lor=r(Edt,"roberta"),Edt.forEach(t),ior=r(OAe," \u2014 "),tO=n(OAe,"A",{href:!0});var ydt=s(tO);dor=r(ydt,"TFRobertaForMaskedLM"),ydt.forEach(t),cor=r(OAe," (RoBERTa model)"),OAe.forEach(t),mor=i(U),lT=n(U,"LI",{});var GAe=s(lT);Pge=n(GAe,"STRONG",{});var wdt=s(Pge);gor=r(wdt,"t5"),wdt.forEach(t),hor=r(GAe," \u2014 "),aO=n(GAe,"A",{href:!0});var Adt=s(aO);por=r(Adt,"TFT5ForConditionalGeneration"),Adt.forEach(t),_or=r(GAe," (T5 model)"),GAe.forEach(t),uor=i(U),iT=n(U,"LI",{});var XAe=s(iT);$ge=n(XAe,"STRONG",{});var Ldt=s($ge);bor=r(Ldt,"tapas"),Ldt.forEach(t),vor=r(XAe," \u2014 "),nO=n(XAe,"A",{href:!0});var Bdt=s(nO);Tor=r(Bdt,"TFTapasForMaskedLM"),Bdt.forEach(t),For=r(XAe," (TAPAS model)"),XAe.forEach(t),Cor=i(U),dT=n(U,"LI",{});var VAe=s(dT);Ige=n(VAe,"STRONG",{});var xdt=s(Ige);Mor=r(xdt,"transfo-xl"),xdt.forEach(t),Eor=r(VAe," \u2014 "),sO=n(VAe,"A",{href:!0});var kdt=s(sO);yor=r(kdt,"TFTransfoXLLMHeadModel"),kdt.forEach(t),wor=r(VAe," (Transformer-XL model)"),VAe.forEach(t),Aor=i(U),cT=n(U,"LI",{});var zAe=s(cT);jge=n(zAe,"STRONG",{});var Rdt=s(jge);Lor=r(Rdt,"xlm"),Rdt.forEach(t),Bor=r(zAe," \u2014 "),lO=n(zAe,"A",{href:!0});var Sdt=s(lO);xor=r(Sdt,"TFXLMWithLMHeadModel"),Sdt.forEach(t),kor=r(zAe," (XLM model)"),zAe.forEach(t),Ror=i(U),fT=n(U,"LI",{});var WAe=s(fT);Dge=n(WAe,"STRONG",{});var Pdt=s(Dge);Sor=r(Pdt,"xlm-roberta"),Pdt.forEach(t),Por=r(WAe," \u2014 "),iO=n(WAe,"A",{href:!0});var $dt=s(iO);$or=r($dt,"TFXLMRobertaForMaskedLM"),$dt.forEach(t),Ior=r(WAe," (XLM-RoBERTa model)"),WAe.forEach(t),jor=i(U),mT=n(U,"LI",{});var QAe=s(mT);Nge=n(QAe,"STRONG",{});var Idt=s(Nge);Dor=r(Idt,"xlnet"),Idt.forEach(t),Nor=r(QAe," \u2014 "),dO=n(QAe,"A",{href:!0});var jdt=s(dO);qor=r(jdt,"TFXLNetLMHeadModel"),jdt.forEach(t),Oor=r(QAe," (XLNet model)"),QAe.forEach(t),U.forEach(t),Gor=i(_a),qge=n(_a,"P",{});var Ddt=s(qge);Xor=r(Ddt,"Examples:"),Ddt.forEach(t),Vor=i(_a),m(Oy.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),pke=i(d),vc=n(d,"H2",{class:!0});var wSe=s(vc);gT=n(wSe,"A",{id:!0,class:!0,href:!0});var Ndt=s(gT);Oge=n(Ndt,"SPAN",{});var qdt=s(Oge);m(Gy.$$.fragment,qdt),qdt.forEach(t),Ndt.forEach(t),zor=i(wSe),Gge=n(wSe,"SPAN",{});var Odt=s(Gge);Wor=r(Odt,"TFAutoModelForCausalLM"),Odt.forEach(t),wSe.forEach(t),_ke=i(d),Fr=n(d,"DIV",{class:!0});var Xl=s(Fr);m(Xy.$$.fragment,Xl),Qor=i(Xl),Tc=n(Xl,"P",{});var CW=s(Tc);Hor=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Xge=n(CW,"CODE",{});var Gdt=s(Xge);Uor=r(Gdt,"from_pretrained()"),Gdt.forEach(t),Jor=r(CW,"class method or the "),Vge=n(CW,"CODE",{});var Xdt=s(Vge);Yor=r(Xdt,"from_config()"),Xdt.forEach(t),Kor=r(CW,`class
method.`),CW.forEach(t),Zor=i(Xl),Vy=n(Xl,"P",{});var ASe=s(Vy);err=r(ASe,"This class cannot be instantiated directly using "),zge=n(ASe,"CODE",{});var Vdt=s(zge);orr=r(Vdt,"__init__()"),Vdt.forEach(t),rrr=r(ASe," (throws an error)."),ASe.forEach(t),trr=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(zy.$$.fragment,Vl),arr=i(Vl),Wge=n(Vl,"P",{});var zdt=s(Wge);nrr=r(zdt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zdt.forEach(t),srr=i(Vl),Fc=n(Vl,"P",{});var MW=s(Fc);lrr=r(MW,`Note:
Loading a model from its configuration file does `),Qge=n(MW,"STRONG",{});var Wdt=s(Qge);irr=r(Wdt,"not"),Wdt.forEach(t),drr=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hge=n(MW,"CODE",{});var Qdt=s(Hge);crr=r(Qdt,"from_pretrained()"),Qdt.forEach(t),frr=r(MW,"to load the model weights."),MW.forEach(t),mrr=i(Vl),Uge=n(Vl,"P",{});var Hdt=s(Uge);grr=r(Hdt,"Examples:"),Hdt.forEach(t),hrr=i(Vl),m(Wy.$$.fragment,Vl),Vl.forEach(t),prr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(Qy.$$.fragment,ua),_rr=i(ua),Jge=n(ua,"P",{});var Udt=s(Jge);urr=r(Udt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Udt.forEach(t),brr=i(ua),bn=n(ua,"P",{});var EM=s(bn);vrr=r(EM,"The model class to instantiate is selected based on the "),Yge=n(EM,"CODE",{});var Jdt=s(Yge);Trr=r(Jdt,"model_type"),Jdt.forEach(t),Frr=r(EM,` property of the config object (either
passed as an argument or loaded from `),Kge=n(EM,"CODE",{});var Ydt=s(Kge);Crr=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),Mrr=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=n(EM,"CODE",{});var Kdt=s(Zge);Err=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),yrr=r(EM,":"),EM.forEach(t),wrr=i(ua),me=n(ua,"UL",{});var Te=s(me);hT=n(Te,"LI",{});var HAe=s(hT);ehe=n(HAe,"STRONG",{});var Zdt=s(ehe);Arr=r(Zdt,"bert"),Zdt.forEach(t),Lrr=r(HAe," \u2014 "),cO=n(HAe,"A",{href:!0});var ect=s(cO);Brr=r(ect,"TFBertLMHeadModel"),ect.forEach(t),xrr=r(HAe," (BERT model)"),HAe.forEach(t),krr=i(Te),pT=n(Te,"LI",{});var UAe=s(pT);ohe=n(UAe,"STRONG",{});var oct=s(ohe);Rrr=r(oct,"camembert"),oct.forEach(t),Srr=r(UAe," \u2014 "),fO=n(UAe,"A",{href:!0});var rct=s(fO);Prr=r(rct,"TFCamembertForCausalLM"),rct.forEach(t),$rr=r(UAe," (CamemBERT model)"),UAe.forEach(t),Irr=i(Te),_T=n(Te,"LI",{});var JAe=s(_T);rhe=n(JAe,"STRONG",{});var tct=s(rhe);jrr=r(tct,"ctrl"),tct.forEach(t),Drr=r(JAe," \u2014 "),mO=n(JAe,"A",{href:!0});var act=s(mO);Nrr=r(act,"TFCTRLLMHeadModel"),act.forEach(t),qrr=r(JAe," (CTRL model)"),JAe.forEach(t),Orr=i(Te),uT=n(Te,"LI",{});var YAe=s(uT);the=n(YAe,"STRONG",{});var nct=s(the);Grr=r(nct,"gpt2"),nct.forEach(t),Xrr=r(YAe," \u2014 "),gO=n(YAe,"A",{href:!0});var sct=s(gO);Vrr=r(sct,"TFGPT2LMHeadModel"),sct.forEach(t),zrr=r(YAe," (OpenAI GPT-2 model)"),YAe.forEach(t),Wrr=i(Te),bT=n(Te,"LI",{});var KAe=s(bT);ahe=n(KAe,"STRONG",{});var lct=s(ahe);Qrr=r(lct,"openai-gpt"),lct.forEach(t),Hrr=r(KAe," \u2014 "),hO=n(KAe,"A",{href:!0});var ict=s(hO);Urr=r(ict,"TFOpenAIGPTLMHeadModel"),ict.forEach(t),Jrr=r(KAe," (OpenAI GPT model)"),KAe.forEach(t),Yrr=i(Te),vT=n(Te,"LI",{});var ZAe=s(vT);nhe=n(ZAe,"STRONG",{});var dct=s(nhe);Krr=r(dct,"rembert"),dct.forEach(t),Zrr=r(ZAe," \u2014 "),pO=n(ZAe,"A",{href:!0});var cct=s(pO);etr=r(cct,"TFRemBertForCausalLM"),cct.forEach(t),otr=r(ZAe," (RemBERT model)"),ZAe.forEach(t),rtr=i(Te),TT=n(Te,"LI",{});var e0e=s(TT);she=n(e0e,"STRONG",{});var fct=s(she);ttr=r(fct,"roberta"),fct.forEach(t),atr=r(e0e," \u2014 "),_O=n(e0e,"A",{href:!0});var mct=s(_O);ntr=r(mct,"TFRobertaForCausalLM"),mct.forEach(t),str=r(e0e," (RoBERTa model)"),e0e.forEach(t),ltr=i(Te),FT=n(Te,"LI",{});var o0e=s(FT);lhe=n(o0e,"STRONG",{});var gct=s(lhe);itr=r(gct,"roformer"),gct.forEach(t),dtr=r(o0e," \u2014 "),uO=n(o0e,"A",{href:!0});var hct=s(uO);ctr=r(hct,"TFRoFormerForCausalLM"),hct.forEach(t),ftr=r(o0e," (RoFormer model)"),o0e.forEach(t),mtr=i(Te),CT=n(Te,"LI",{});var r0e=s(CT);ihe=n(r0e,"STRONG",{});var pct=s(ihe);gtr=r(pct,"transfo-xl"),pct.forEach(t),htr=r(r0e," \u2014 "),bO=n(r0e,"A",{href:!0});var _ct=s(bO);ptr=r(_ct,"TFTransfoXLLMHeadModel"),_ct.forEach(t),_tr=r(r0e," (Transformer-XL model)"),r0e.forEach(t),utr=i(Te),MT=n(Te,"LI",{});var t0e=s(MT);dhe=n(t0e,"STRONG",{});var uct=s(dhe);btr=r(uct,"xlm"),uct.forEach(t),vtr=r(t0e," \u2014 "),vO=n(t0e,"A",{href:!0});var bct=s(vO);Ttr=r(bct,"TFXLMWithLMHeadModel"),bct.forEach(t),Ftr=r(t0e," (XLM model)"),t0e.forEach(t),Ctr=i(Te),ET=n(Te,"LI",{});var a0e=s(ET);che=n(a0e,"STRONG",{});var vct=s(che);Mtr=r(vct,"xlnet"),vct.forEach(t),Etr=r(a0e," \u2014 "),TO=n(a0e,"A",{href:!0});var Tct=s(TO);ytr=r(Tct,"TFXLNetLMHeadModel"),Tct.forEach(t),wtr=r(a0e," (XLNet model)"),a0e.forEach(t),Te.forEach(t),Atr=i(ua),fhe=n(ua,"P",{});var Fct=s(fhe);Ltr=r(Fct,"Examples:"),Fct.forEach(t),Btr=i(ua),m(Hy.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),uke=i(d),Cc=n(d,"H2",{class:!0});var LSe=s(Cc);yT=n(LSe,"A",{id:!0,class:!0,href:!0});var Cct=s(yT);mhe=n(Cct,"SPAN",{});var Mct=s(mhe);m(Uy.$$.fragment,Mct),Mct.forEach(t),Cct.forEach(t),xtr=i(LSe),ghe=n(LSe,"SPAN",{});var Ect=s(ghe);ktr=r(Ect,"TFAutoModelForImageClassification"),Ect.forEach(t),LSe.forEach(t),bke=i(d),Cr=n(d,"DIV",{class:!0});var zl=s(Cr);m(Jy.$$.fragment,zl),Rtr=i(zl),Mc=n(zl,"P",{});var EW=s(Mc);Str=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hhe=n(EW,"CODE",{});var yct=s(hhe);Ptr=r(yct,"from_pretrained()"),yct.forEach(t),$tr=r(EW,"class method or the "),phe=n(EW,"CODE",{});var wct=s(phe);Itr=r(wct,"from_config()"),wct.forEach(t),jtr=r(EW,`class
method.`),EW.forEach(t),Dtr=i(zl),Yy=n(zl,"P",{});var BSe=s(Yy);Ntr=r(BSe,"This class cannot be instantiated directly using "),_he=n(BSe,"CODE",{});var Act=s(_he);qtr=r(Act,"__init__()"),Act.forEach(t),Otr=r(BSe," (throws an error)."),BSe.forEach(t),Gtr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(Ky.$$.fragment,Wl),Xtr=i(Wl),uhe=n(Wl,"P",{});var Lct=s(uhe);Vtr=r(Lct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lct.forEach(t),ztr=i(Wl),Ec=n(Wl,"P",{});var yW=s(Ec);Wtr=r(yW,`Note:
Loading a model from its configuration file does `),bhe=n(yW,"STRONG",{});var Bct=s(bhe);Qtr=r(Bct,"not"),Bct.forEach(t),Htr=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vhe=n(yW,"CODE",{});var xct=s(vhe);Utr=r(xct,"from_pretrained()"),xct.forEach(t),Jtr=r(yW,"to load the model weights."),yW.forEach(t),Ytr=i(Wl),The=n(Wl,"P",{});var kct=s(The);Ktr=r(kct,"Examples:"),kct.forEach(t),Ztr=i(Wl),m(Zy.$$.fragment,Wl),Wl.forEach(t),ear=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(ew.$$.fragment,ba),oar=i(ba),Fhe=n(ba,"P",{});var Rct=s(Fhe);rar=r(Rct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rct.forEach(t),tar=i(ba),vn=n(ba,"P",{});var yM=s(vn);aar=r(yM,"The model class to instantiate is selected based on the "),Che=n(yM,"CODE",{});var Sct=s(Che);nar=r(Sct,"model_type"),Sct.forEach(t),sar=r(yM,` property of the config object (either
passed as an argument or loaded from `),Mhe=n(yM,"CODE",{});var Pct=s(Mhe);lar=r(Pct,"pretrained_model_name_or_path"),Pct.forEach(t),iar=r(yM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=n(yM,"CODE",{});var $ct=s(Ehe);dar=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),car=r(yM,":"),yM.forEach(t),far=i(ba),ow=n(ba,"UL",{});var xSe=s(ow);wT=n(xSe,"LI",{});var n0e=s(wT);yhe=n(n0e,"STRONG",{});var Ict=s(yhe);mar=r(Ict,"convnext"),Ict.forEach(t),gar=r(n0e," \u2014 "),FO=n(n0e,"A",{href:!0});var jct=s(FO);har=r(jct,"TFConvNextForImageClassification"),jct.forEach(t),par=r(n0e," (ConvNext model)"),n0e.forEach(t),_ar=i(xSe),AT=n(xSe,"LI",{});var s0e=s(AT);whe=n(s0e,"STRONG",{});var Dct=s(whe);uar=r(Dct,"vit"),Dct.forEach(t),bar=r(s0e," \u2014 "),CO=n(s0e,"A",{href:!0});var Nct=s(CO);Tar=r(Nct,"TFViTForImageClassification"),Nct.forEach(t),Far=r(s0e," (ViT model)"),s0e.forEach(t),xSe.forEach(t),Car=i(ba),Ahe=n(ba,"P",{});var qct=s(Ahe);Mar=r(qct,"Examples:"),qct.forEach(t),Ear=i(ba),m(rw.$$.fragment,ba),ba.forEach(t),zl.forEach(t),vke=i(d),yc=n(d,"H2",{class:!0});var kSe=s(yc);LT=n(kSe,"A",{id:!0,class:!0,href:!0});var Oct=s(LT);Lhe=n(Oct,"SPAN",{});var Gct=s(Lhe);m(tw.$$.fragment,Gct),Gct.forEach(t),Oct.forEach(t),yar=i(kSe),Bhe=n(kSe,"SPAN",{});var Xct=s(Bhe);war=r(Xct,"TFAutoModelForMaskedLM"),Xct.forEach(t),kSe.forEach(t),Tke=i(d),Mr=n(d,"DIV",{class:!0});var Ql=s(Mr);m(aw.$$.fragment,Ql),Aar=i(Ql),wc=n(Ql,"P",{});var wW=s(wc);Lar=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xhe=n(wW,"CODE",{});var Vct=s(xhe);Bar=r(Vct,"from_pretrained()"),Vct.forEach(t),xar=r(wW,"class method or the "),khe=n(wW,"CODE",{});var zct=s(khe);kar=r(zct,"from_config()"),zct.forEach(t),Rar=r(wW,`class
method.`),wW.forEach(t),Sar=i(Ql),nw=n(Ql,"P",{});var RSe=s(nw);Par=r(RSe,"This class cannot be instantiated directly using "),Rhe=n(RSe,"CODE",{});var Wct=s(Rhe);$ar=r(Wct,"__init__()"),Wct.forEach(t),Iar=r(RSe," (throws an error)."),RSe.forEach(t),jar=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(sw.$$.fragment,Hl),Dar=i(Hl),She=n(Hl,"P",{});var Qct=s(She);Nar=r(Qct,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Qct.forEach(t),qar=i(Hl),Ac=n(Hl,"P",{});var AW=s(Ac);Oar=r(AW,`Note:
Loading a model from its configuration file does `),Phe=n(AW,"STRONG",{});var Hct=s(Phe);Gar=r(Hct,"not"),Hct.forEach(t),Xar=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$he=n(AW,"CODE",{});var Uct=s($he);Var=r(Uct,"from_pretrained()"),Uct.forEach(t),zar=r(AW,"to load the model weights."),AW.forEach(t),War=i(Hl),Ihe=n(Hl,"P",{});var Jct=s(Ihe);Qar=r(Jct,"Examples:"),Jct.forEach(t),Har=i(Hl),m(lw.$$.fragment,Hl),Hl.forEach(t),Uar=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(iw.$$.fragment,va),Jar=i(va),jhe=n(va,"P",{});var Yct=s(jhe);Yar=r(Yct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Yct.forEach(t),Kar=i(va),Tn=n(va,"P",{});var wM=s(Tn);Zar=r(wM,"The model class to instantiate is selected based on the "),Dhe=n(wM,"CODE",{});var Kct=s(Dhe);enr=r(Kct,"model_type"),Kct.forEach(t),onr=r(wM,` property of the config object (either
passed as an argument or loaded from `),Nhe=n(wM,"CODE",{});var Zct=s(Nhe);rnr=r(Zct,"pretrained_model_name_or_path"),Zct.forEach(t),tnr=r(wM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(wM,"CODE",{});var eft=s(qhe);anr=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),nnr=r(wM,":"),wM.forEach(t),snr=i(va),Y=n(va,"UL",{});var ee=s(Y);BT=n(ee,"LI",{});var l0e=s(BT);Ohe=n(l0e,"STRONG",{});var oft=s(Ohe);lnr=r(oft,"albert"),oft.forEach(t),inr=r(l0e," \u2014 "),MO=n(l0e,"A",{href:!0});var rft=s(MO);dnr=r(rft,"TFAlbertForMaskedLM"),rft.forEach(t),cnr=r(l0e," (ALBERT model)"),l0e.forEach(t),fnr=i(ee),xT=n(ee,"LI",{});var i0e=s(xT);Ghe=n(i0e,"STRONG",{});var tft=s(Ghe);mnr=r(tft,"bert"),tft.forEach(t),gnr=r(i0e," \u2014 "),EO=n(i0e,"A",{href:!0});var aft=s(EO);hnr=r(aft,"TFBertForMaskedLM"),aft.forEach(t),pnr=r(i0e," (BERT model)"),i0e.forEach(t),_nr=i(ee),kT=n(ee,"LI",{});var d0e=s(kT);Xhe=n(d0e,"STRONG",{});var nft=s(Xhe);unr=r(nft,"camembert"),nft.forEach(t),bnr=r(d0e," \u2014 "),yO=n(d0e,"A",{href:!0});var sft=s(yO);vnr=r(sft,"TFCamembertForMaskedLM"),sft.forEach(t),Tnr=r(d0e," (CamemBERT model)"),d0e.forEach(t),Fnr=i(ee),RT=n(ee,"LI",{});var c0e=s(RT);Vhe=n(c0e,"STRONG",{});var lft=s(Vhe);Cnr=r(lft,"convbert"),lft.forEach(t),Mnr=r(c0e," \u2014 "),wO=n(c0e,"A",{href:!0});var ift=s(wO);Enr=r(ift,"TFConvBertForMaskedLM"),ift.forEach(t),ynr=r(c0e," (ConvBERT model)"),c0e.forEach(t),wnr=i(ee),ST=n(ee,"LI",{});var f0e=s(ST);zhe=n(f0e,"STRONG",{});var dft=s(zhe);Anr=r(dft,"deberta"),dft.forEach(t),Lnr=r(f0e," \u2014 "),AO=n(f0e,"A",{href:!0});var cft=s(AO);Bnr=r(cft,"TFDebertaForMaskedLM"),cft.forEach(t),xnr=r(f0e," (DeBERTa model)"),f0e.forEach(t),knr=i(ee),PT=n(ee,"LI",{});var m0e=s(PT);Whe=n(m0e,"STRONG",{});var fft=s(Whe);Rnr=r(fft,"deberta-v2"),fft.forEach(t),Snr=r(m0e," \u2014 "),LO=n(m0e,"A",{href:!0});var mft=s(LO);Pnr=r(mft,"TFDebertaV2ForMaskedLM"),mft.forEach(t),$nr=r(m0e," (DeBERTa-v2 model)"),m0e.forEach(t),Inr=i(ee),$T=n(ee,"LI",{});var g0e=s($T);Qhe=n(g0e,"STRONG",{});var gft=s(Qhe);jnr=r(gft,"distilbert"),gft.forEach(t),Dnr=r(g0e," \u2014 "),BO=n(g0e,"A",{href:!0});var hft=s(BO);Nnr=r(hft,"TFDistilBertForMaskedLM"),hft.forEach(t),qnr=r(g0e," (DistilBERT model)"),g0e.forEach(t),Onr=i(ee),IT=n(ee,"LI",{});var h0e=s(IT);Hhe=n(h0e,"STRONG",{});var pft=s(Hhe);Gnr=r(pft,"electra"),pft.forEach(t),Xnr=r(h0e," \u2014 "),xO=n(h0e,"A",{href:!0});var _ft=s(xO);Vnr=r(_ft,"TFElectraForMaskedLM"),_ft.forEach(t),znr=r(h0e," (ELECTRA model)"),h0e.forEach(t),Wnr=i(ee),jT=n(ee,"LI",{});var p0e=s(jT);Uhe=n(p0e,"STRONG",{});var uft=s(Uhe);Qnr=r(uft,"flaubert"),uft.forEach(t),Hnr=r(p0e," \u2014 "),kO=n(p0e,"A",{href:!0});var bft=s(kO);Unr=r(bft,"TFFlaubertWithLMHeadModel"),bft.forEach(t),Jnr=r(p0e," (FlauBERT model)"),p0e.forEach(t),Ynr=i(ee),DT=n(ee,"LI",{});var _0e=s(DT);Jhe=n(_0e,"STRONG",{});var vft=s(Jhe);Knr=r(vft,"funnel"),vft.forEach(t),Znr=r(_0e," \u2014 "),RO=n(_0e,"A",{href:!0});var Tft=s(RO);esr=r(Tft,"TFFunnelForMaskedLM"),Tft.forEach(t),osr=r(_0e," (Funnel Transformer model)"),_0e.forEach(t),rsr=i(ee),NT=n(ee,"LI",{});var u0e=s(NT);Yhe=n(u0e,"STRONG",{});var Fft=s(Yhe);tsr=r(Fft,"layoutlm"),Fft.forEach(t),asr=r(u0e," \u2014 "),SO=n(u0e,"A",{href:!0});var Cft=s(SO);nsr=r(Cft,"TFLayoutLMForMaskedLM"),Cft.forEach(t),ssr=r(u0e," (LayoutLM model)"),u0e.forEach(t),lsr=i(ee),qT=n(ee,"LI",{});var b0e=s(qT);Khe=n(b0e,"STRONG",{});var Mft=s(Khe);isr=r(Mft,"longformer"),Mft.forEach(t),dsr=r(b0e," \u2014 "),PO=n(b0e,"A",{href:!0});var Eft=s(PO);csr=r(Eft,"TFLongformerForMaskedLM"),Eft.forEach(t),fsr=r(b0e," (Longformer model)"),b0e.forEach(t),msr=i(ee),OT=n(ee,"LI",{});var v0e=s(OT);Zhe=n(v0e,"STRONG",{});var yft=s(Zhe);gsr=r(yft,"mobilebert"),yft.forEach(t),hsr=r(v0e," \u2014 "),$O=n(v0e,"A",{href:!0});var wft=s($O);psr=r(wft,"TFMobileBertForMaskedLM"),wft.forEach(t),_sr=r(v0e," (MobileBERT model)"),v0e.forEach(t),usr=i(ee),GT=n(ee,"LI",{});var T0e=s(GT);epe=n(T0e,"STRONG",{});var Aft=s(epe);bsr=r(Aft,"mpnet"),Aft.forEach(t),vsr=r(T0e," \u2014 "),IO=n(T0e,"A",{href:!0});var Lft=s(IO);Tsr=r(Lft,"TFMPNetForMaskedLM"),Lft.forEach(t),Fsr=r(T0e," (MPNet model)"),T0e.forEach(t),Csr=i(ee),XT=n(ee,"LI",{});var F0e=s(XT);ope=n(F0e,"STRONG",{});var Bft=s(ope);Msr=r(Bft,"rembert"),Bft.forEach(t),Esr=r(F0e," \u2014 "),jO=n(F0e,"A",{href:!0});var xft=s(jO);ysr=r(xft,"TFRemBertForMaskedLM"),xft.forEach(t),wsr=r(F0e," (RemBERT model)"),F0e.forEach(t),Asr=i(ee),VT=n(ee,"LI",{});var C0e=s(VT);rpe=n(C0e,"STRONG",{});var kft=s(rpe);Lsr=r(kft,"roberta"),kft.forEach(t),Bsr=r(C0e," \u2014 "),DO=n(C0e,"A",{href:!0});var Rft=s(DO);xsr=r(Rft,"TFRobertaForMaskedLM"),Rft.forEach(t),ksr=r(C0e," (RoBERTa model)"),C0e.forEach(t),Rsr=i(ee),zT=n(ee,"LI",{});var M0e=s(zT);tpe=n(M0e,"STRONG",{});var Sft=s(tpe);Ssr=r(Sft,"roformer"),Sft.forEach(t),Psr=r(M0e," \u2014 "),NO=n(M0e,"A",{href:!0});var Pft=s(NO);$sr=r(Pft,"TFRoFormerForMaskedLM"),Pft.forEach(t),Isr=r(M0e," (RoFormer model)"),M0e.forEach(t),jsr=i(ee),WT=n(ee,"LI",{});var E0e=s(WT);ape=n(E0e,"STRONG",{});var $ft=s(ape);Dsr=r($ft,"tapas"),$ft.forEach(t),Nsr=r(E0e," \u2014 "),qO=n(E0e,"A",{href:!0});var Ift=s(qO);qsr=r(Ift,"TFTapasForMaskedLM"),Ift.forEach(t),Osr=r(E0e," (TAPAS model)"),E0e.forEach(t),Gsr=i(ee),QT=n(ee,"LI",{});var y0e=s(QT);npe=n(y0e,"STRONG",{});var jft=s(npe);Xsr=r(jft,"xlm"),jft.forEach(t),Vsr=r(y0e," \u2014 "),OO=n(y0e,"A",{href:!0});var Dft=s(OO);zsr=r(Dft,"TFXLMWithLMHeadModel"),Dft.forEach(t),Wsr=r(y0e," (XLM model)"),y0e.forEach(t),Qsr=i(ee),HT=n(ee,"LI",{});var w0e=s(HT);spe=n(w0e,"STRONG",{});var Nft=s(spe);Hsr=r(Nft,"xlm-roberta"),Nft.forEach(t),Usr=r(w0e," \u2014 "),GO=n(w0e,"A",{href:!0});var qft=s(GO);Jsr=r(qft,"TFXLMRobertaForMaskedLM"),qft.forEach(t),Ysr=r(w0e," (XLM-RoBERTa model)"),w0e.forEach(t),ee.forEach(t),Ksr=i(va),lpe=n(va,"P",{});var Oft=s(lpe);Zsr=r(Oft,"Examples:"),Oft.forEach(t),elr=i(va),m(dw.$$.fragment,va),va.forEach(t),Ql.forEach(t),Fke=i(d),Lc=n(d,"H2",{class:!0});var SSe=s(Lc);UT=n(SSe,"A",{id:!0,class:!0,href:!0});var Gft=s(UT);ipe=n(Gft,"SPAN",{});var Xft=s(ipe);m(cw.$$.fragment,Xft),Xft.forEach(t),Gft.forEach(t),olr=i(SSe),dpe=n(SSe,"SPAN",{});var Vft=s(dpe);rlr=r(Vft,"TFAutoModelForSeq2SeqLM"),Vft.forEach(t),SSe.forEach(t),Cke=i(d),Er=n(d,"DIV",{class:!0});var Ul=s(Er);m(fw.$$.fragment,Ul),tlr=i(Ul),Bc=n(Ul,"P",{});var LW=s(Bc);alr=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cpe=n(LW,"CODE",{});var zft=s(cpe);nlr=r(zft,"from_pretrained()"),zft.forEach(t),slr=r(LW,"class method or the "),fpe=n(LW,"CODE",{});var Wft=s(fpe);llr=r(Wft,"from_config()"),Wft.forEach(t),ilr=r(LW,`class
method.`),LW.forEach(t),dlr=i(Ul),mw=n(Ul,"P",{});var PSe=s(mw);clr=r(PSe,"This class cannot be instantiated directly using "),mpe=n(PSe,"CODE",{});var Qft=s(mpe);flr=r(Qft,"__init__()"),Qft.forEach(t),mlr=r(PSe," (throws an error)."),PSe.forEach(t),glr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(gw.$$.fragment,Jl),hlr=i(Jl),gpe=n(Jl,"P",{});var Hft=s(gpe);plr=r(Hft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Hft.forEach(t),_lr=i(Jl),xc=n(Jl,"P",{});var BW=s(xc);ulr=r(BW,`Note:
Loading a model from its configuration file does `),hpe=n(BW,"STRONG",{});var Uft=s(hpe);blr=r(Uft,"not"),Uft.forEach(t),vlr=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ppe=n(BW,"CODE",{});var Jft=s(ppe);Tlr=r(Jft,"from_pretrained()"),Jft.forEach(t),Flr=r(BW,"to load the model weights."),BW.forEach(t),Clr=i(Jl),_pe=n(Jl,"P",{});var Yft=s(_pe);Mlr=r(Yft,"Examples:"),Yft.forEach(t),Elr=i(Jl),m(hw.$$.fragment,Jl),Jl.forEach(t),ylr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(pw.$$.fragment,Ta),wlr=i(Ta),upe=n(Ta,"P",{});var Kft=s(upe);Alr=r(Kft,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Kft.forEach(t),Llr=i(Ta),Fn=n(Ta,"P",{});var AM=s(Fn);Blr=r(AM,"The model class to instantiate is selected based on the "),bpe=n(AM,"CODE",{});var Zft=s(bpe);xlr=r(Zft,"model_type"),Zft.forEach(t),klr=r(AM,` property of the config object (either
passed as an argument or loaded from `),vpe=n(AM,"CODE",{});var emt=s(vpe);Rlr=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),Slr=r(AM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(AM,"CODE",{});var omt=s(Tpe);Plr=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),$lr=r(AM,":"),AM.forEach(t),Ilr=i(Ta),_e=n(Ta,"UL",{});var Ee=s(_e);JT=n(Ee,"LI",{});var A0e=s(JT);Fpe=n(A0e,"STRONG",{});var rmt=s(Fpe);jlr=r(rmt,"bart"),rmt.forEach(t),Dlr=r(A0e," \u2014 "),XO=n(A0e,"A",{href:!0});var tmt=s(XO);Nlr=r(tmt,"TFBartForConditionalGeneration"),tmt.forEach(t),qlr=r(A0e," (BART model)"),A0e.forEach(t),Olr=i(Ee),YT=n(Ee,"LI",{});var L0e=s(YT);Cpe=n(L0e,"STRONG",{});var amt=s(Cpe);Glr=r(amt,"blenderbot"),amt.forEach(t),Xlr=r(L0e," \u2014 "),VO=n(L0e,"A",{href:!0});var nmt=s(VO);Vlr=r(nmt,"TFBlenderbotForConditionalGeneration"),nmt.forEach(t),zlr=r(L0e," (Blenderbot model)"),L0e.forEach(t),Wlr=i(Ee),KT=n(Ee,"LI",{});var B0e=s(KT);Mpe=n(B0e,"STRONG",{});var smt=s(Mpe);Qlr=r(smt,"blenderbot-small"),smt.forEach(t),Hlr=r(B0e," \u2014 "),zO=n(B0e,"A",{href:!0});var lmt=s(zO);Ulr=r(lmt,"TFBlenderbotSmallForConditionalGeneration"),lmt.forEach(t),Jlr=r(B0e," (BlenderbotSmall model)"),B0e.forEach(t),Ylr=i(Ee),ZT=n(Ee,"LI",{});var x0e=s(ZT);Epe=n(x0e,"STRONG",{});var imt=s(Epe);Klr=r(imt,"encoder-decoder"),imt.forEach(t),Zlr=r(x0e," \u2014 "),WO=n(x0e,"A",{href:!0});var dmt=s(WO);eir=r(dmt,"TFEncoderDecoderModel"),dmt.forEach(t),oir=r(x0e," (Encoder decoder model)"),x0e.forEach(t),rir=i(Ee),e8=n(Ee,"LI",{});var k0e=s(e8);ype=n(k0e,"STRONG",{});var cmt=s(ype);tir=r(cmt,"led"),cmt.forEach(t),air=r(k0e," \u2014 "),QO=n(k0e,"A",{href:!0});var fmt=s(QO);nir=r(fmt,"TFLEDForConditionalGeneration"),fmt.forEach(t),sir=r(k0e," (LED model)"),k0e.forEach(t),lir=i(Ee),o8=n(Ee,"LI",{});var R0e=s(o8);wpe=n(R0e,"STRONG",{});var mmt=s(wpe);iir=r(mmt,"marian"),mmt.forEach(t),dir=r(R0e," \u2014 "),HO=n(R0e,"A",{href:!0});var gmt=s(HO);cir=r(gmt,"TFMarianMTModel"),gmt.forEach(t),fir=r(R0e," (Marian model)"),R0e.forEach(t),mir=i(Ee),r8=n(Ee,"LI",{});var S0e=s(r8);Ape=n(S0e,"STRONG",{});var hmt=s(Ape);gir=r(hmt,"mbart"),hmt.forEach(t),hir=r(S0e," \u2014 "),UO=n(S0e,"A",{href:!0});var pmt=s(UO);pir=r(pmt,"TFMBartForConditionalGeneration"),pmt.forEach(t),_ir=r(S0e," (mBART model)"),S0e.forEach(t),uir=i(Ee),t8=n(Ee,"LI",{});var P0e=s(t8);Lpe=n(P0e,"STRONG",{});var _mt=s(Lpe);bir=r(_mt,"mt5"),_mt.forEach(t),vir=r(P0e," \u2014 "),JO=n(P0e,"A",{href:!0});var umt=s(JO);Tir=r(umt,"TFMT5ForConditionalGeneration"),umt.forEach(t),Fir=r(P0e," (mT5 model)"),P0e.forEach(t),Cir=i(Ee),a8=n(Ee,"LI",{});var $0e=s(a8);Bpe=n($0e,"STRONG",{});var bmt=s(Bpe);Mir=r(bmt,"pegasus"),bmt.forEach(t),Eir=r($0e," \u2014 "),YO=n($0e,"A",{href:!0});var vmt=s(YO);yir=r(vmt,"TFPegasusForConditionalGeneration"),vmt.forEach(t),wir=r($0e," (Pegasus model)"),$0e.forEach(t),Air=i(Ee),n8=n(Ee,"LI",{});var I0e=s(n8);xpe=n(I0e,"STRONG",{});var Tmt=s(xpe);Lir=r(Tmt,"t5"),Tmt.forEach(t),Bir=r(I0e," \u2014 "),KO=n(I0e,"A",{href:!0});var Fmt=s(KO);xir=r(Fmt,"TFT5ForConditionalGeneration"),Fmt.forEach(t),kir=r(I0e," (T5 model)"),I0e.forEach(t),Ee.forEach(t),Rir=i(Ta),kpe=n(Ta,"P",{});var Cmt=s(kpe);Sir=r(Cmt,"Examples:"),Cmt.forEach(t),Pir=i(Ta),m(_w.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),Mke=i(d),kc=n(d,"H2",{class:!0});var $Se=s(kc);s8=n($Se,"A",{id:!0,class:!0,href:!0});var Mmt=s(s8);Rpe=n(Mmt,"SPAN",{});var Emt=s(Rpe);m(uw.$$.fragment,Emt),Emt.forEach(t),Mmt.forEach(t),$ir=i($Se),Spe=n($Se,"SPAN",{});var ymt=s(Spe);Iir=r(ymt,"TFAutoModelForSequenceClassification"),ymt.forEach(t),$Se.forEach(t),Eke=i(d),yr=n(d,"DIV",{class:!0});var Yl=s(yr);m(bw.$$.fragment,Yl),jir=i(Yl),Rc=n(Yl,"P",{});var xW=s(Rc);Dir=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ppe=n(xW,"CODE",{});var wmt=s(Ppe);Nir=r(wmt,"from_pretrained()"),wmt.forEach(t),qir=r(xW,"class method or the "),$pe=n(xW,"CODE",{});var Amt=s($pe);Oir=r(Amt,"from_config()"),Amt.forEach(t),Gir=r(xW,`class
method.`),xW.forEach(t),Xir=i(Yl),vw=n(Yl,"P",{});var ISe=s(vw);Vir=r(ISe,"This class cannot be instantiated directly using "),Ipe=n(ISe,"CODE",{});var Lmt=s(Ipe);zir=r(Lmt,"__init__()"),Lmt.forEach(t),Wir=r(ISe," (throws an error)."),ISe.forEach(t),Qir=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(Tw.$$.fragment,Kl),Hir=i(Kl),jpe=n(Kl,"P",{});var Bmt=s(jpe);Uir=r(Bmt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Bmt.forEach(t),Jir=i(Kl),Sc=n(Kl,"P",{});var kW=s(Sc);Yir=r(kW,`Note:
Loading a model from its configuration file does `),Dpe=n(kW,"STRONG",{});var xmt=s(Dpe);Kir=r(xmt,"not"),xmt.forEach(t),Zir=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Npe=n(kW,"CODE",{});var kmt=s(Npe);edr=r(kmt,"from_pretrained()"),kmt.forEach(t),odr=r(kW,"to load the model weights."),kW.forEach(t),rdr=i(Kl),qpe=n(Kl,"P",{});var Rmt=s(qpe);tdr=r(Rmt,"Examples:"),Rmt.forEach(t),adr=i(Kl),m(Fw.$$.fragment,Kl),Kl.forEach(t),ndr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(Cw.$$.fragment,Fa),sdr=i(Fa),Ope=n(Fa,"P",{});var Smt=s(Ope);ldr=r(Smt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Smt.forEach(t),idr=i(Fa),Cn=n(Fa,"P",{});var LM=s(Cn);ddr=r(LM,"The model class to instantiate is selected based on the "),Gpe=n(LM,"CODE",{});var Pmt=s(Gpe);cdr=r(Pmt,"model_type"),Pmt.forEach(t),fdr=r(LM,` property of the config object (either
passed as an argument or loaded from `),Xpe=n(LM,"CODE",{});var $mt=s(Xpe);mdr=r($mt,"pretrained_model_name_or_path"),$mt.forEach(t),gdr=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n(LM,"CODE",{});var Imt=s(Vpe);hdr=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),pdr=r(LM,":"),LM.forEach(t),_dr=i(Fa),V=n(Fa,"UL",{});var W=s(V);l8=n(W,"LI",{});var j0e=s(l8);zpe=n(j0e,"STRONG",{});var jmt=s(zpe);udr=r(jmt,"albert"),jmt.forEach(t),bdr=r(j0e," \u2014 "),ZO=n(j0e,"A",{href:!0});var Dmt=s(ZO);vdr=r(Dmt,"TFAlbertForSequenceClassification"),Dmt.forEach(t),Tdr=r(j0e," (ALBERT model)"),j0e.forEach(t),Fdr=i(W),i8=n(W,"LI",{});var D0e=s(i8);Wpe=n(D0e,"STRONG",{});var Nmt=s(Wpe);Cdr=r(Nmt,"bert"),Nmt.forEach(t),Mdr=r(D0e," \u2014 "),eG=n(D0e,"A",{href:!0});var qmt=s(eG);Edr=r(qmt,"TFBertForSequenceClassification"),qmt.forEach(t),ydr=r(D0e," (BERT model)"),D0e.forEach(t),wdr=i(W),d8=n(W,"LI",{});var N0e=s(d8);Qpe=n(N0e,"STRONG",{});var Omt=s(Qpe);Adr=r(Omt,"camembert"),Omt.forEach(t),Ldr=r(N0e," \u2014 "),oG=n(N0e,"A",{href:!0});var Gmt=s(oG);Bdr=r(Gmt,"TFCamembertForSequenceClassification"),Gmt.forEach(t),xdr=r(N0e," (CamemBERT model)"),N0e.forEach(t),kdr=i(W),c8=n(W,"LI",{});var q0e=s(c8);Hpe=n(q0e,"STRONG",{});var Xmt=s(Hpe);Rdr=r(Xmt,"convbert"),Xmt.forEach(t),Sdr=r(q0e," \u2014 "),rG=n(q0e,"A",{href:!0});var Vmt=s(rG);Pdr=r(Vmt,"TFConvBertForSequenceClassification"),Vmt.forEach(t),$dr=r(q0e," (ConvBERT model)"),q0e.forEach(t),Idr=i(W),f8=n(W,"LI",{});var O0e=s(f8);Upe=n(O0e,"STRONG",{});var zmt=s(Upe);jdr=r(zmt,"ctrl"),zmt.forEach(t),Ddr=r(O0e," \u2014 "),tG=n(O0e,"A",{href:!0});var Wmt=s(tG);Ndr=r(Wmt,"TFCTRLForSequenceClassification"),Wmt.forEach(t),qdr=r(O0e," (CTRL model)"),O0e.forEach(t),Odr=i(W),m8=n(W,"LI",{});var G0e=s(m8);Jpe=n(G0e,"STRONG",{});var Qmt=s(Jpe);Gdr=r(Qmt,"deberta"),Qmt.forEach(t),Xdr=r(G0e," \u2014 "),aG=n(G0e,"A",{href:!0});var Hmt=s(aG);Vdr=r(Hmt,"TFDebertaForSequenceClassification"),Hmt.forEach(t),zdr=r(G0e," (DeBERTa model)"),G0e.forEach(t),Wdr=i(W),g8=n(W,"LI",{});var X0e=s(g8);Ype=n(X0e,"STRONG",{});var Umt=s(Ype);Qdr=r(Umt,"deberta-v2"),Umt.forEach(t),Hdr=r(X0e," \u2014 "),nG=n(X0e,"A",{href:!0});var Jmt=s(nG);Udr=r(Jmt,"TFDebertaV2ForSequenceClassification"),Jmt.forEach(t),Jdr=r(X0e," (DeBERTa-v2 model)"),X0e.forEach(t),Ydr=i(W),h8=n(W,"LI",{});var V0e=s(h8);Kpe=n(V0e,"STRONG",{});var Ymt=s(Kpe);Kdr=r(Ymt,"distilbert"),Ymt.forEach(t),Zdr=r(V0e," \u2014 "),sG=n(V0e,"A",{href:!0});var Kmt=s(sG);ecr=r(Kmt,"TFDistilBertForSequenceClassification"),Kmt.forEach(t),ocr=r(V0e," (DistilBERT model)"),V0e.forEach(t),rcr=i(W),p8=n(W,"LI",{});var z0e=s(p8);Zpe=n(z0e,"STRONG",{});var Zmt=s(Zpe);tcr=r(Zmt,"electra"),Zmt.forEach(t),acr=r(z0e," \u2014 "),lG=n(z0e,"A",{href:!0});var egt=s(lG);ncr=r(egt,"TFElectraForSequenceClassification"),egt.forEach(t),scr=r(z0e," (ELECTRA model)"),z0e.forEach(t),lcr=i(W),_8=n(W,"LI",{});var W0e=s(_8);e_e=n(W0e,"STRONG",{});var ogt=s(e_e);icr=r(ogt,"flaubert"),ogt.forEach(t),dcr=r(W0e," \u2014 "),iG=n(W0e,"A",{href:!0});var rgt=s(iG);ccr=r(rgt,"TFFlaubertForSequenceClassification"),rgt.forEach(t),fcr=r(W0e," (FlauBERT model)"),W0e.forEach(t),mcr=i(W),u8=n(W,"LI",{});var Q0e=s(u8);o_e=n(Q0e,"STRONG",{});var tgt=s(o_e);gcr=r(tgt,"funnel"),tgt.forEach(t),hcr=r(Q0e," \u2014 "),dG=n(Q0e,"A",{href:!0});var agt=s(dG);pcr=r(agt,"TFFunnelForSequenceClassification"),agt.forEach(t),_cr=r(Q0e," (Funnel Transformer model)"),Q0e.forEach(t),ucr=i(W),b8=n(W,"LI",{});var H0e=s(b8);r_e=n(H0e,"STRONG",{});var ngt=s(r_e);bcr=r(ngt,"gpt2"),ngt.forEach(t),vcr=r(H0e," \u2014 "),cG=n(H0e,"A",{href:!0});var sgt=s(cG);Tcr=r(sgt,"TFGPT2ForSequenceClassification"),sgt.forEach(t),Fcr=r(H0e," (OpenAI GPT-2 model)"),H0e.forEach(t),Ccr=i(W),v8=n(W,"LI",{});var U0e=s(v8);t_e=n(U0e,"STRONG",{});var lgt=s(t_e);Mcr=r(lgt,"layoutlm"),lgt.forEach(t),Ecr=r(U0e," \u2014 "),fG=n(U0e,"A",{href:!0});var igt=s(fG);ycr=r(igt,"TFLayoutLMForSequenceClassification"),igt.forEach(t),wcr=r(U0e," (LayoutLM model)"),U0e.forEach(t),Acr=i(W),T8=n(W,"LI",{});var J0e=s(T8);a_e=n(J0e,"STRONG",{});var dgt=s(a_e);Lcr=r(dgt,"longformer"),dgt.forEach(t),Bcr=r(J0e," \u2014 "),mG=n(J0e,"A",{href:!0});var cgt=s(mG);xcr=r(cgt,"TFLongformerForSequenceClassification"),cgt.forEach(t),kcr=r(J0e," (Longformer model)"),J0e.forEach(t),Rcr=i(W),F8=n(W,"LI",{});var Y0e=s(F8);n_e=n(Y0e,"STRONG",{});var fgt=s(n_e);Scr=r(fgt,"mobilebert"),fgt.forEach(t),Pcr=r(Y0e," \u2014 "),gG=n(Y0e,"A",{href:!0});var mgt=s(gG);$cr=r(mgt,"TFMobileBertForSequenceClassification"),mgt.forEach(t),Icr=r(Y0e," (MobileBERT model)"),Y0e.forEach(t),jcr=i(W),C8=n(W,"LI",{});var K0e=s(C8);s_e=n(K0e,"STRONG",{});var ggt=s(s_e);Dcr=r(ggt,"mpnet"),ggt.forEach(t),Ncr=r(K0e," \u2014 "),hG=n(K0e,"A",{href:!0});var hgt=s(hG);qcr=r(hgt,"TFMPNetForSequenceClassification"),hgt.forEach(t),Ocr=r(K0e," (MPNet model)"),K0e.forEach(t),Gcr=i(W),M8=n(W,"LI",{});var Z0e=s(M8);l_e=n(Z0e,"STRONG",{});var pgt=s(l_e);Xcr=r(pgt,"openai-gpt"),pgt.forEach(t),Vcr=r(Z0e," \u2014 "),pG=n(Z0e,"A",{href:!0});var _gt=s(pG);zcr=r(_gt,"TFOpenAIGPTForSequenceClassification"),_gt.forEach(t),Wcr=r(Z0e," (OpenAI GPT model)"),Z0e.forEach(t),Qcr=i(W),E8=n(W,"LI",{});var eLe=s(E8);i_e=n(eLe,"STRONG",{});var ugt=s(i_e);Hcr=r(ugt,"rembert"),ugt.forEach(t),Ucr=r(eLe," \u2014 "),_G=n(eLe,"A",{href:!0});var bgt=s(_G);Jcr=r(bgt,"TFRemBertForSequenceClassification"),bgt.forEach(t),Ycr=r(eLe," (RemBERT model)"),eLe.forEach(t),Kcr=i(W),y8=n(W,"LI",{});var oLe=s(y8);d_e=n(oLe,"STRONG",{});var vgt=s(d_e);Zcr=r(vgt,"roberta"),vgt.forEach(t),efr=r(oLe," \u2014 "),uG=n(oLe,"A",{href:!0});var Tgt=s(uG);ofr=r(Tgt,"TFRobertaForSequenceClassification"),Tgt.forEach(t),rfr=r(oLe," (RoBERTa model)"),oLe.forEach(t),tfr=i(W),w8=n(W,"LI",{});var rLe=s(w8);c_e=n(rLe,"STRONG",{});var Fgt=s(c_e);afr=r(Fgt,"roformer"),Fgt.forEach(t),nfr=r(rLe," \u2014 "),bG=n(rLe,"A",{href:!0});var Cgt=s(bG);sfr=r(Cgt,"TFRoFormerForSequenceClassification"),Cgt.forEach(t),lfr=r(rLe," (RoFormer model)"),rLe.forEach(t),ifr=i(W),A8=n(W,"LI",{});var tLe=s(A8);f_e=n(tLe,"STRONG",{});var Mgt=s(f_e);dfr=r(Mgt,"tapas"),Mgt.forEach(t),cfr=r(tLe," \u2014 "),vG=n(tLe,"A",{href:!0});var Egt=s(vG);ffr=r(Egt,"TFTapasForSequenceClassification"),Egt.forEach(t),mfr=r(tLe," (TAPAS model)"),tLe.forEach(t),gfr=i(W),L8=n(W,"LI",{});var aLe=s(L8);m_e=n(aLe,"STRONG",{});var ygt=s(m_e);hfr=r(ygt,"transfo-xl"),ygt.forEach(t),pfr=r(aLe," \u2014 "),TG=n(aLe,"A",{href:!0});var wgt=s(TG);_fr=r(wgt,"TFTransfoXLForSequenceClassification"),wgt.forEach(t),ufr=r(aLe," (Transformer-XL model)"),aLe.forEach(t),bfr=i(W),B8=n(W,"LI",{});var nLe=s(B8);g_e=n(nLe,"STRONG",{});var Agt=s(g_e);vfr=r(Agt,"xlm"),Agt.forEach(t),Tfr=r(nLe," \u2014 "),FG=n(nLe,"A",{href:!0});var Lgt=s(FG);Ffr=r(Lgt,"TFXLMForSequenceClassification"),Lgt.forEach(t),Cfr=r(nLe," (XLM model)"),nLe.forEach(t),Mfr=i(W),x8=n(W,"LI",{});var sLe=s(x8);h_e=n(sLe,"STRONG",{});var Bgt=s(h_e);Efr=r(Bgt,"xlm-roberta"),Bgt.forEach(t),yfr=r(sLe," \u2014 "),CG=n(sLe,"A",{href:!0});var xgt=s(CG);wfr=r(xgt,"TFXLMRobertaForSequenceClassification"),xgt.forEach(t),Afr=r(sLe," (XLM-RoBERTa model)"),sLe.forEach(t),Lfr=i(W),k8=n(W,"LI",{});var lLe=s(k8);p_e=n(lLe,"STRONG",{});var kgt=s(p_e);Bfr=r(kgt,"xlnet"),kgt.forEach(t),xfr=r(lLe," \u2014 "),MG=n(lLe,"A",{href:!0});var Rgt=s(MG);kfr=r(Rgt,"TFXLNetForSequenceClassification"),Rgt.forEach(t),Rfr=r(lLe," (XLNet model)"),lLe.forEach(t),W.forEach(t),Sfr=i(Fa),__e=n(Fa,"P",{});var Sgt=s(__e);Pfr=r(Sgt,"Examples:"),Sgt.forEach(t),$fr=i(Fa),m(Mw.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),yke=i(d),Pc=n(d,"H2",{class:!0});var jSe=s(Pc);R8=n(jSe,"A",{id:!0,class:!0,href:!0});var Pgt=s(R8);u_e=n(Pgt,"SPAN",{});var $gt=s(u_e);m(Ew.$$.fragment,$gt),$gt.forEach(t),Pgt.forEach(t),Ifr=i(jSe),b_e=n(jSe,"SPAN",{});var Igt=s(b_e);jfr=r(Igt,"TFAutoModelForMultipleChoice"),Igt.forEach(t),jSe.forEach(t),wke=i(d),wr=n(d,"DIV",{class:!0});var Zl=s(wr);m(yw.$$.fragment,Zl),Dfr=i(Zl),$c=n(Zl,"P",{});var RW=s($c);Nfr=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),v_e=n(RW,"CODE",{});var jgt=s(v_e);qfr=r(jgt,"from_pretrained()"),jgt.forEach(t),Ofr=r(RW,"class method or the "),T_e=n(RW,"CODE",{});var Dgt=s(T_e);Gfr=r(Dgt,"from_config()"),Dgt.forEach(t),Xfr=r(RW,`class
method.`),RW.forEach(t),Vfr=i(Zl),ww=n(Zl,"P",{});var DSe=s(ww);zfr=r(DSe,"This class cannot be instantiated directly using "),F_e=n(DSe,"CODE",{});var Ngt=s(F_e);Wfr=r(Ngt,"__init__()"),Ngt.forEach(t),Qfr=r(DSe," (throws an error)."),DSe.forEach(t),Hfr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(Aw.$$.fragment,ei),Ufr=i(ei),C_e=n(ei,"P",{});var qgt=s(C_e);Jfr=r(qgt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qgt.forEach(t),Yfr=i(ei),Ic=n(ei,"P",{});var SW=s(Ic);Kfr=r(SW,`Note:
Loading a model from its configuration file does `),M_e=n(SW,"STRONG",{});var Ogt=s(M_e);Zfr=r(Ogt,"not"),Ogt.forEach(t),emr=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),E_e=n(SW,"CODE",{});var Ggt=s(E_e);omr=r(Ggt,"from_pretrained()"),Ggt.forEach(t),rmr=r(SW,"to load the model weights."),SW.forEach(t),tmr=i(ei),y_e=n(ei,"P",{});var Xgt=s(y_e);amr=r(Xgt,"Examples:"),Xgt.forEach(t),nmr=i(ei),m(Lw.$$.fragment,ei),ei.forEach(t),smr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(Bw.$$.fragment,Ca),lmr=i(Ca),w_e=n(Ca,"P",{});var Vgt=s(w_e);imr=r(Vgt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vgt.forEach(t),dmr=i(Ca),Mn=n(Ca,"P",{});var BM=s(Mn);cmr=r(BM,"The model class to instantiate is selected based on the "),A_e=n(BM,"CODE",{});var zgt=s(A_e);fmr=r(zgt,"model_type"),zgt.forEach(t),mmr=r(BM,` property of the config object (either
passed as an argument or loaded from `),L_e=n(BM,"CODE",{});var Wgt=s(L_e);gmr=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),hmr=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(BM,"CODE",{});var Qgt=s(B_e);pmr=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),_mr=r(BM,":"),BM.forEach(t),umr=i(Ca),te=n(Ca,"UL",{});var se=s(te);S8=n(se,"LI",{});var iLe=s(S8);x_e=n(iLe,"STRONG",{});var Hgt=s(x_e);bmr=r(Hgt,"albert"),Hgt.forEach(t),vmr=r(iLe," \u2014 "),EG=n(iLe,"A",{href:!0});var Ugt=s(EG);Tmr=r(Ugt,"TFAlbertForMultipleChoice"),Ugt.forEach(t),Fmr=r(iLe," (ALBERT model)"),iLe.forEach(t),Cmr=i(se),P8=n(se,"LI",{});var dLe=s(P8);k_e=n(dLe,"STRONG",{});var Jgt=s(k_e);Mmr=r(Jgt,"bert"),Jgt.forEach(t),Emr=r(dLe," \u2014 "),yG=n(dLe,"A",{href:!0});var Ygt=s(yG);ymr=r(Ygt,"TFBertForMultipleChoice"),Ygt.forEach(t),wmr=r(dLe," (BERT model)"),dLe.forEach(t),Amr=i(se),$8=n(se,"LI",{});var cLe=s($8);R_e=n(cLe,"STRONG",{});var Kgt=s(R_e);Lmr=r(Kgt,"camembert"),Kgt.forEach(t),Bmr=r(cLe," \u2014 "),wG=n(cLe,"A",{href:!0});var Zgt=s(wG);xmr=r(Zgt,"TFCamembertForMultipleChoice"),Zgt.forEach(t),kmr=r(cLe," (CamemBERT model)"),cLe.forEach(t),Rmr=i(se),I8=n(se,"LI",{});var fLe=s(I8);S_e=n(fLe,"STRONG",{});var eht=s(S_e);Smr=r(eht,"convbert"),eht.forEach(t),Pmr=r(fLe," \u2014 "),AG=n(fLe,"A",{href:!0});var oht=s(AG);$mr=r(oht,"TFConvBertForMultipleChoice"),oht.forEach(t),Imr=r(fLe," (ConvBERT model)"),fLe.forEach(t),jmr=i(se),j8=n(se,"LI",{});var mLe=s(j8);P_e=n(mLe,"STRONG",{});var rht=s(P_e);Dmr=r(rht,"distilbert"),rht.forEach(t),Nmr=r(mLe," \u2014 "),LG=n(mLe,"A",{href:!0});var tht=s(LG);qmr=r(tht,"TFDistilBertForMultipleChoice"),tht.forEach(t),Omr=r(mLe," (DistilBERT model)"),mLe.forEach(t),Gmr=i(se),D8=n(se,"LI",{});var gLe=s(D8);$_e=n(gLe,"STRONG",{});var aht=s($_e);Xmr=r(aht,"electra"),aht.forEach(t),Vmr=r(gLe," \u2014 "),BG=n(gLe,"A",{href:!0});var nht=s(BG);zmr=r(nht,"TFElectraForMultipleChoice"),nht.forEach(t),Wmr=r(gLe," (ELECTRA model)"),gLe.forEach(t),Qmr=i(se),N8=n(se,"LI",{});var hLe=s(N8);I_e=n(hLe,"STRONG",{});var sht=s(I_e);Hmr=r(sht,"flaubert"),sht.forEach(t),Umr=r(hLe," \u2014 "),xG=n(hLe,"A",{href:!0});var lht=s(xG);Jmr=r(lht,"TFFlaubertForMultipleChoice"),lht.forEach(t),Ymr=r(hLe," (FlauBERT model)"),hLe.forEach(t),Kmr=i(se),q8=n(se,"LI",{});var pLe=s(q8);j_e=n(pLe,"STRONG",{});var iht=s(j_e);Zmr=r(iht,"funnel"),iht.forEach(t),egr=r(pLe," \u2014 "),kG=n(pLe,"A",{href:!0});var dht=s(kG);ogr=r(dht,"TFFunnelForMultipleChoice"),dht.forEach(t),rgr=r(pLe," (Funnel Transformer model)"),pLe.forEach(t),tgr=i(se),O8=n(se,"LI",{});var _Le=s(O8);D_e=n(_Le,"STRONG",{});var cht=s(D_e);agr=r(cht,"longformer"),cht.forEach(t),ngr=r(_Le," \u2014 "),RG=n(_Le,"A",{href:!0});var fht=s(RG);sgr=r(fht,"TFLongformerForMultipleChoice"),fht.forEach(t),lgr=r(_Le," (Longformer model)"),_Le.forEach(t),igr=i(se),G8=n(se,"LI",{});var uLe=s(G8);N_e=n(uLe,"STRONG",{});var mht=s(N_e);dgr=r(mht,"mobilebert"),mht.forEach(t),cgr=r(uLe," \u2014 "),SG=n(uLe,"A",{href:!0});var ght=s(SG);fgr=r(ght,"TFMobileBertForMultipleChoice"),ght.forEach(t),mgr=r(uLe," (MobileBERT model)"),uLe.forEach(t),ggr=i(se),X8=n(se,"LI",{});var bLe=s(X8);q_e=n(bLe,"STRONG",{});var hht=s(q_e);hgr=r(hht,"mpnet"),hht.forEach(t),pgr=r(bLe," \u2014 "),PG=n(bLe,"A",{href:!0});var pht=s(PG);_gr=r(pht,"TFMPNetForMultipleChoice"),pht.forEach(t),ugr=r(bLe," (MPNet model)"),bLe.forEach(t),bgr=i(se),V8=n(se,"LI",{});var vLe=s(V8);O_e=n(vLe,"STRONG",{});var _ht=s(O_e);vgr=r(_ht,"rembert"),_ht.forEach(t),Tgr=r(vLe," \u2014 "),$G=n(vLe,"A",{href:!0});var uht=s($G);Fgr=r(uht,"TFRemBertForMultipleChoice"),uht.forEach(t),Cgr=r(vLe," (RemBERT model)"),vLe.forEach(t),Mgr=i(se),z8=n(se,"LI",{});var TLe=s(z8);G_e=n(TLe,"STRONG",{});var bht=s(G_e);Egr=r(bht,"roberta"),bht.forEach(t),ygr=r(TLe," \u2014 "),IG=n(TLe,"A",{href:!0});var vht=s(IG);wgr=r(vht,"TFRobertaForMultipleChoice"),vht.forEach(t),Agr=r(TLe," (RoBERTa model)"),TLe.forEach(t),Lgr=i(se),W8=n(se,"LI",{});var FLe=s(W8);X_e=n(FLe,"STRONG",{});var Tht=s(X_e);Bgr=r(Tht,"roformer"),Tht.forEach(t),xgr=r(FLe," \u2014 "),jG=n(FLe,"A",{href:!0});var Fht=s(jG);kgr=r(Fht,"TFRoFormerForMultipleChoice"),Fht.forEach(t),Rgr=r(FLe," (RoFormer model)"),FLe.forEach(t),Sgr=i(se),Q8=n(se,"LI",{});var CLe=s(Q8);V_e=n(CLe,"STRONG",{});var Cht=s(V_e);Pgr=r(Cht,"xlm"),Cht.forEach(t),$gr=r(CLe," \u2014 "),DG=n(CLe,"A",{href:!0});var Mht=s(DG);Igr=r(Mht,"TFXLMForMultipleChoice"),Mht.forEach(t),jgr=r(CLe," (XLM model)"),CLe.forEach(t),Dgr=i(se),H8=n(se,"LI",{});var MLe=s(H8);z_e=n(MLe,"STRONG",{});var Eht=s(z_e);Ngr=r(Eht,"xlm-roberta"),Eht.forEach(t),qgr=r(MLe," \u2014 "),NG=n(MLe,"A",{href:!0});var yht=s(NG);Ogr=r(yht,"TFXLMRobertaForMultipleChoice"),yht.forEach(t),Ggr=r(MLe," (XLM-RoBERTa model)"),MLe.forEach(t),Xgr=i(se),U8=n(se,"LI",{});var ELe=s(U8);W_e=n(ELe,"STRONG",{});var wht=s(W_e);Vgr=r(wht,"xlnet"),wht.forEach(t),zgr=r(ELe," \u2014 "),qG=n(ELe,"A",{href:!0});var Aht=s(qG);Wgr=r(Aht,"TFXLNetForMultipleChoice"),Aht.forEach(t),Qgr=r(ELe," (XLNet model)"),ELe.forEach(t),se.forEach(t),Hgr=i(Ca),Q_e=n(Ca,"P",{});var Lht=s(Q_e);Ugr=r(Lht,"Examples:"),Lht.forEach(t),Jgr=i(Ca),m(xw.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),Ake=i(d),jc=n(d,"H2",{class:!0});var NSe=s(jc);J8=n(NSe,"A",{id:!0,class:!0,href:!0});var Bht=s(J8);H_e=n(Bht,"SPAN",{});var xht=s(H_e);m(kw.$$.fragment,xht),xht.forEach(t),Bht.forEach(t),Ygr=i(NSe),U_e=n(NSe,"SPAN",{});var kht=s(U_e);Kgr=r(kht,"TFAutoModelForTableQuestionAnswering"),kht.forEach(t),NSe.forEach(t),Lke=i(d),Ar=n(d,"DIV",{class:!0});var oi=s(Ar);m(Rw.$$.fragment,oi),Zgr=i(oi),Dc=n(oi,"P",{});var PW=s(Dc);ehr=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),J_e=n(PW,"CODE",{});var Rht=s(J_e);ohr=r(Rht,"from_pretrained()"),Rht.forEach(t),rhr=r(PW,"class method or the "),Y_e=n(PW,"CODE",{});var Sht=s(Y_e);thr=r(Sht,"from_config()"),Sht.forEach(t),ahr=r(PW,`class
method.`),PW.forEach(t),nhr=i(oi),Sw=n(oi,"P",{});var qSe=s(Sw);shr=r(qSe,"This class cannot be instantiated directly using "),K_e=n(qSe,"CODE",{});var Pht=s(K_e);lhr=r(Pht,"__init__()"),Pht.forEach(t),ihr=r(qSe," (throws an error)."),qSe.forEach(t),dhr=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(Pw.$$.fragment,ri),chr=i(ri),Z_e=n(ri,"P",{});var $ht=s(Z_e);fhr=r($ht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$ht.forEach(t),mhr=i(ri),Nc=n(ri,"P",{});var $W=s(Nc);ghr=r($W,`Note:
Loading a model from its configuration file does `),eue=n($W,"STRONG",{});var Iht=s(eue);hhr=r(Iht,"not"),Iht.forEach(t),phr=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),oue=n($W,"CODE",{});var jht=s(oue);_hr=r(jht,"from_pretrained()"),jht.forEach(t),uhr=r($W,"to load the model weights."),$W.forEach(t),bhr=i(ri),rue=n(ri,"P",{});var Dht=s(rue);vhr=r(Dht,"Examples:"),Dht.forEach(t),Thr=i(ri),m($w.$$.fragment,ri),ri.forEach(t),Fhr=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(Iw.$$.fragment,Ma),Chr=i(Ma),tue=n(Ma,"P",{});var Nht=s(tue);Mhr=r(Nht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Nht.forEach(t),Ehr=i(Ma),En=n(Ma,"P",{});var xM=s(En);yhr=r(xM,"The model class to instantiate is selected based on the "),aue=n(xM,"CODE",{});var qht=s(aue);whr=r(qht,"model_type"),qht.forEach(t),Ahr=r(xM,` property of the config object (either
passed as an argument or loaded from `),nue=n(xM,"CODE",{});var Oht=s(nue);Lhr=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),Bhr=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=n(xM,"CODE",{});var Ght=s(sue);xhr=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),khr=r(xM,":"),xM.forEach(t),Rhr=i(Ma),lue=n(Ma,"UL",{});var Xht=s(lue);Y8=n(Xht,"LI",{});var yLe=s(Y8);iue=n(yLe,"STRONG",{});var Vht=s(iue);Shr=r(Vht,"tapas"),Vht.forEach(t),Phr=r(yLe," \u2014 "),OG=n(yLe,"A",{href:!0});var zht=s(OG);$hr=r(zht,"TFTapasForQuestionAnswering"),zht.forEach(t),Ihr=r(yLe," (TAPAS model)"),yLe.forEach(t),Xht.forEach(t),jhr=i(Ma),due=n(Ma,"P",{});var Wht=s(due);Dhr=r(Wht,"Examples:"),Wht.forEach(t),Nhr=i(Ma),m(jw.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),Bke=i(d),qc=n(d,"H2",{class:!0});var OSe=s(qc);K8=n(OSe,"A",{id:!0,class:!0,href:!0});var Qht=s(K8);cue=n(Qht,"SPAN",{});var Hht=s(cue);m(Dw.$$.fragment,Hht),Hht.forEach(t),Qht.forEach(t),qhr=i(OSe),fue=n(OSe,"SPAN",{});var Uht=s(fue);Ohr=r(Uht,"TFAutoModelForTokenClassification"),Uht.forEach(t),OSe.forEach(t),xke=i(d),Lr=n(d,"DIV",{class:!0});var ti=s(Lr);m(Nw.$$.fragment,ti),Ghr=i(ti),Oc=n(ti,"P",{});var IW=s(Oc);Xhr=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mue=n(IW,"CODE",{});var Jht=s(mue);Vhr=r(Jht,"from_pretrained()"),Jht.forEach(t),zhr=r(IW,"class method or the "),gue=n(IW,"CODE",{});var Yht=s(gue);Whr=r(Yht,"from_config()"),Yht.forEach(t),Qhr=r(IW,`class
method.`),IW.forEach(t),Hhr=i(ti),qw=n(ti,"P",{});var GSe=s(qw);Uhr=r(GSe,"This class cannot be instantiated directly using "),hue=n(GSe,"CODE",{});var Kht=s(hue);Jhr=r(Kht,"__init__()"),Kht.forEach(t),Yhr=r(GSe," (throws an error)."),GSe.forEach(t),Khr=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(Ow.$$.fragment,ai),Zhr=i(ai),pue=n(ai,"P",{});var Zht=s(pue);epr=r(Zht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zht.forEach(t),opr=i(ai),Gc=n(ai,"P",{});var jW=s(Gc);rpr=r(jW,`Note:
Loading a model from its configuration file does `),_ue=n(jW,"STRONG",{});var ept=s(_ue);tpr=r(ept,"not"),ept.forEach(t),apr=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),uue=n(jW,"CODE",{});var opt=s(uue);npr=r(opt,"from_pretrained()"),opt.forEach(t),spr=r(jW,"to load the model weights."),jW.forEach(t),lpr=i(ai),bue=n(ai,"P",{});var rpt=s(bue);ipr=r(rpt,"Examples:"),rpt.forEach(t),dpr=i(ai),m(Gw.$$.fragment,ai),ai.forEach(t),cpr=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(Xw.$$.fragment,Ea),fpr=i(Ea),vue=n(Ea,"P",{});var tpt=s(vue);mpr=r(tpt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tpt.forEach(t),gpr=i(Ea),yn=n(Ea,"P",{});var kM=s(yn);hpr=r(kM,"The model class to instantiate is selected based on the "),Tue=n(kM,"CODE",{});var apt=s(Tue);ppr=r(apt,"model_type"),apt.forEach(t),_pr=r(kM,` property of the config object (either
passed as an argument or loaded from `),Fue=n(kM,"CODE",{});var npt=s(Fue);upr=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),bpr=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(kM,"CODE",{});var spt=s(Cue);vpr=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),Tpr=r(kM,":"),kM.forEach(t),Fpr=i(Ea),K=n(Ea,"UL",{});var oe=s(K);Z8=n(oe,"LI",{});var wLe=s(Z8);Mue=n(wLe,"STRONG",{});var lpt=s(Mue);Cpr=r(lpt,"albert"),lpt.forEach(t),Mpr=r(wLe," \u2014 "),GG=n(wLe,"A",{href:!0});var ipt=s(GG);Epr=r(ipt,"TFAlbertForTokenClassification"),ipt.forEach(t),ypr=r(wLe," (ALBERT model)"),wLe.forEach(t),wpr=i(oe),eF=n(oe,"LI",{});var ALe=s(eF);Eue=n(ALe,"STRONG",{});var dpt=s(Eue);Apr=r(dpt,"bert"),dpt.forEach(t),Lpr=r(ALe," \u2014 "),XG=n(ALe,"A",{href:!0});var cpt=s(XG);Bpr=r(cpt,"TFBertForTokenClassification"),cpt.forEach(t),xpr=r(ALe," (BERT model)"),ALe.forEach(t),kpr=i(oe),oF=n(oe,"LI",{});var LLe=s(oF);yue=n(LLe,"STRONG",{});var fpt=s(yue);Rpr=r(fpt,"camembert"),fpt.forEach(t),Spr=r(LLe," \u2014 "),VG=n(LLe,"A",{href:!0});var mpt=s(VG);Ppr=r(mpt,"TFCamembertForTokenClassification"),mpt.forEach(t),$pr=r(LLe," (CamemBERT model)"),LLe.forEach(t),Ipr=i(oe),rF=n(oe,"LI",{});var BLe=s(rF);wue=n(BLe,"STRONG",{});var gpt=s(wue);jpr=r(gpt,"convbert"),gpt.forEach(t),Dpr=r(BLe," \u2014 "),zG=n(BLe,"A",{href:!0});var hpt=s(zG);Npr=r(hpt,"TFConvBertForTokenClassification"),hpt.forEach(t),qpr=r(BLe," (ConvBERT model)"),BLe.forEach(t),Opr=i(oe),tF=n(oe,"LI",{});var xLe=s(tF);Aue=n(xLe,"STRONG",{});var ppt=s(Aue);Gpr=r(ppt,"deberta"),ppt.forEach(t),Xpr=r(xLe," \u2014 "),WG=n(xLe,"A",{href:!0});var _pt=s(WG);Vpr=r(_pt,"TFDebertaForTokenClassification"),_pt.forEach(t),zpr=r(xLe," (DeBERTa model)"),xLe.forEach(t),Wpr=i(oe),aF=n(oe,"LI",{});var kLe=s(aF);Lue=n(kLe,"STRONG",{});var upt=s(Lue);Qpr=r(upt,"deberta-v2"),upt.forEach(t),Hpr=r(kLe," \u2014 "),QG=n(kLe,"A",{href:!0});var bpt=s(QG);Upr=r(bpt,"TFDebertaV2ForTokenClassification"),bpt.forEach(t),Jpr=r(kLe," (DeBERTa-v2 model)"),kLe.forEach(t),Ypr=i(oe),nF=n(oe,"LI",{});var RLe=s(nF);Bue=n(RLe,"STRONG",{});var vpt=s(Bue);Kpr=r(vpt,"distilbert"),vpt.forEach(t),Zpr=r(RLe," \u2014 "),HG=n(RLe,"A",{href:!0});var Tpt=s(HG);e_r=r(Tpt,"TFDistilBertForTokenClassification"),Tpt.forEach(t),o_r=r(RLe," (DistilBERT model)"),RLe.forEach(t),r_r=i(oe),sF=n(oe,"LI",{});var SLe=s(sF);xue=n(SLe,"STRONG",{});var Fpt=s(xue);t_r=r(Fpt,"electra"),Fpt.forEach(t),a_r=r(SLe," \u2014 "),UG=n(SLe,"A",{href:!0});var Cpt=s(UG);n_r=r(Cpt,"TFElectraForTokenClassification"),Cpt.forEach(t),s_r=r(SLe," (ELECTRA model)"),SLe.forEach(t),l_r=i(oe),lF=n(oe,"LI",{});var PLe=s(lF);kue=n(PLe,"STRONG",{});var Mpt=s(kue);i_r=r(Mpt,"flaubert"),Mpt.forEach(t),d_r=r(PLe," \u2014 "),JG=n(PLe,"A",{href:!0});var Ept=s(JG);c_r=r(Ept,"TFFlaubertForTokenClassification"),Ept.forEach(t),f_r=r(PLe," (FlauBERT model)"),PLe.forEach(t),m_r=i(oe),iF=n(oe,"LI",{});var $Le=s(iF);Rue=n($Le,"STRONG",{});var ypt=s(Rue);g_r=r(ypt,"funnel"),ypt.forEach(t),h_r=r($Le," \u2014 "),YG=n($Le,"A",{href:!0});var wpt=s(YG);p_r=r(wpt,"TFFunnelForTokenClassification"),wpt.forEach(t),__r=r($Le," (Funnel Transformer model)"),$Le.forEach(t),u_r=i(oe),dF=n(oe,"LI",{});var ILe=s(dF);Sue=n(ILe,"STRONG",{});var Apt=s(Sue);b_r=r(Apt,"layoutlm"),Apt.forEach(t),v_r=r(ILe," \u2014 "),KG=n(ILe,"A",{href:!0});var Lpt=s(KG);T_r=r(Lpt,"TFLayoutLMForTokenClassification"),Lpt.forEach(t),F_r=r(ILe," (LayoutLM model)"),ILe.forEach(t),C_r=i(oe),cF=n(oe,"LI",{});var jLe=s(cF);Pue=n(jLe,"STRONG",{});var Bpt=s(Pue);M_r=r(Bpt,"longformer"),Bpt.forEach(t),E_r=r(jLe," \u2014 "),ZG=n(jLe,"A",{href:!0});var xpt=s(ZG);y_r=r(xpt,"TFLongformerForTokenClassification"),xpt.forEach(t),w_r=r(jLe," (Longformer model)"),jLe.forEach(t),A_r=i(oe),fF=n(oe,"LI",{});var DLe=s(fF);$ue=n(DLe,"STRONG",{});var kpt=s($ue);L_r=r(kpt,"mobilebert"),kpt.forEach(t),B_r=r(DLe," \u2014 "),eX=n(DLe,"A",{href:!0});var Rpt=s(eX);x_r=r(Rpt,"TFMobileBertForTokenClassification"),Rpt.forEach(t),k_r=r(DLe," (MobileBERT model)"),DLe.forEach(t),R_r=i(oe),mF=n(oe,"LI",{});var NLe=s(mF);Iue=n(NLe,"STRONG",{});var Spt=s(Iue);S_r=r(Spt,"mpnet"),Spt.forEach(t),P_r=r(NLe," \u2014 "),oX=n(NLe,"A",{href:!0});var Ppt=s(oX);$_r=r(Ppt,"TFMPNetForTokenClassification"),Ppt.forEach(t),I_r=r(NLe," (MPNet model)"),NLe.forEach(t),j_r=i(oe),gF=n(oe,"LI",{});var qLe=s(gF);jue=n(qLe,"STRONG",{});var $pt=s(jue);D_r=r($pt,"rembert"),$pt.forEach(t),N_r=r(qLe," \u2014 "),rX=n(qLe,"A",{href:!0});var Ipt=s(rX);q_r=r(Ipt,"TFRemBertForTokenClassification"),Ipt.forEach(t),O_r=r(qLe," (RemBERT model)"),qLe.forEach(t),G_r=i(oe),hF=n(oe,"LI",{});var OLe=s(hF);Due=n(OLe,"STRONG",{});var jpt=s(Due);X_r=r(jpt,"roberta"),jpt.forEach(t),V_r=r(OLe," \u2014 "),tX=n(OLe,"A",{href:!0});var Dpt=s(tX);z_r=r(Dpt,"TFRobertaForTokenClassification"),Dpt.forEach(t),W_r=r(OLe," (RoBERTa model)"),OLe.forEach(t),Q_r=i(oe),pF=n(oe,"LI",{});var GLe=s(pF);Nue=n(GLe,"STRONG",{});var Npt=s(Nue);H_r=r(Npt,"roformer"),Npt.forEach(t),U_r=r(GLe," \u2014 "),aX=n(GLe,"A",{href:!0});var qpt=s(aX);J_r=r(qpt,"TFRoFormerForTokenClassification"),qpt.forEach(t),Y_r=r(GLe," (RoFormer model)"),GLe.forEach(t),K_r=i(oe),_F=n(oe,"LI",{});var XLe=s(_F);que=n(XLe,"STRONG",{});var Opt=s(que);Z_r=r(Opt,"xlm"),Opt.forEach(t),eur=r(XLe," \u2014 "),nX=n(XLe,"A",{href:!0});var Gpt=s(nX);our=r(Gpt,"TFXLMForTokenClassification"),Gpt.forEach(t),rur=r(XLe," (XLM model)"),XLe.forEach(t),tur=i(oe),uF=n(oe,"LI",{});var VLe=s(uF);Oue=n(VLe,"STRONG",{});var Xpt=s(Oue);aur=r(Xpt,"xlm-roberta"),Xpt.forEach(t),nur=r(VLe," \u2014 "),sX=n(VLe,"A",{href:!0});var Vpt=s(sX);sur=r(Vpt,"TFXLMRobertaForTokenClassification"),Vpt.forEach(t),lur=r(VLe," (XLM-RoBERTa model)"),VLe.forEach(t),iur=i(oe),bF=n(oe,"LI",{});var zLe=s(bF);Gue=n(zLe,"STRONG",{});var zpt=s(Gue);dur=r(zpt,"xlnet"),zpt.forEach(t),cur=r(zLe," \u2014 "),lX=n(zLe,"A",{href:!0});var Wpt=s(lX);fur=r(Wpt,"TFXLNetForTokenClassification"),Wpt.forEach(t),mur=r(zLe," (XLNet model)"),zLe.forEach(t),oe.forEach(t),gur=i(Ea),Xue=n(Ea,"P",{});var Qpt=s(Xue);hur=r(Qpt,"Examples:"),Qpt.forEach(t),pur=i(Ea),m(Vw.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),kke=i(d),Xc=n(d,"H2",{class:!0});var XSe=s(Xc);vF=n(XSe,"A",{id:!0,class:!0,href:!0});var Hpt=s(vF);Vue=n(Hpt,"SPAN",{});var Upt=s(Vue);m(zw.$$.fragment,Upt),Upt.forEach(t),Hpt.forEach(t),_ur=i(XSe),zue=n(XSe,"SPAN",{});var Jpt=s(zue);uur=r(Jpt,"TFAutoModelForQuestionAnswering"),Jpt.forEach(t),XSe.forEach(t),Rke=i(d),Br=n(d,"DIV",{class:!0});var ni=s(Br);m(Ww.$$.fragment,ni),bur=i(ni),Vc=n(ni,"P",{});var DW=s(Vc);vur=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Wue=n(DW,"CODE",{});var Ypt=s(Wue);Tur=r(Ypt,"from_pretrained()"),Ypt.forEach(t),Fur=r(DW,"class method or the "),Que=n(DW,"CODE",{});var Kpt=s(Que);Cur=r(Kpt,"from_config()"),Kpt.forEach(t),Mur=r(DW,`class
method.`),DW.forEach(t),Eur=i(ni),Qw=n(ni,"P",{});var VSe=s(Qw);yur=r(VSe,"This class cannot be instantiated directly using "),Hue=n(VSe,"CODE",{});var Zpt=s(Hue);wur=r(Zpt,"__init__()"),Zpt.forEach(t),Aur=r(VSe," (throws an error)."),VSe.forEach(t),Lur=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(Hw.$$.fragment,si),Bur=i(si),Uue=n(si,"P",{});var e_t=s(Uue);xur=r(e_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),e_t.forEach(t),kur=i(si),zc=n(si,"P",{});var NW=s(zc);Rur=r(NW,`Note:
Loading a model from its configuration file does `),Jue=n(NW,"STRONG",{});var o_t=s(Jue);Sur=r(o_t,"not"),o_t.forEach(t),Pur=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yue=n(NW,"CODE",{});var r_t=s(Yue);$ur=r(r_t,"from_pretrained()"),r_t.forEach(t),Iur=r(NW,"to load the model weights."),NW.forEach(t),jur=i(si),Kue=n(si,"P",{});var t_t=s(Kue);Dur=r(t_t,"Examples:"),t_t.forEach(t),Nur=i(si),m(Uw.$$.fragment,si),si.forEach(t),qur=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(Jw.$$.fragment,ya),Our=i(ya),Zue=n(ya,"P",{});var a_t=s(Zue);Gur=r(a_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),a_t.forEach(t),Xur=i(ya),wn=n(ya,"P",{});var RM=s(wn);Vur=r(RM,"The model class to instantiate is selected based on the "),e1e=n(RM,"CODE",{});var n_t=s(e1e);zur=r(n_t,"model_type"),n_t.forEach(t),Wur=r(RM,` property of the config object (either
passed as an argument or loaded from `),o1e=n(RM,"CODE",{});var s_t=s(o1e);Qur=r(s_t,"pretrained_model_name_or_path"),s_t.forEach(t),Hur=r(RM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r1e=n(RM,"CODE",{});var l_t=s(r1e);Uur=r(l_t,"pretrained_model_name_or_path"),l_t.forEach(t),Jur=r(RM,":"),RM.forEach(t),Yur=i(ya),Z=n(ya,"UL",{});var re=s(Z);TF=n(re,"LI",{});var WLe=s(TF);t1e=n(WLe,"STRONG",{});var i_t=s(t1e);Kur=r(i_t,"albert"),i_t.forEach(t),Zur=r(WLe," \u2014 "),iX=n(WLe,"A",{href:!0});var d_t=s(iX);e1r=r(d_t,"TFAlbertForQuestionAnswering"),d_t.forEach(t),o1r=r(WLe," (ALBERT model)"),WLe.forEach(t),r1r=i(re),FF=n(re,"LI",{});var QLe=s(FF);a1e=n(QLe,"STRONG",{});var c_t=s(a1e);t1r=r(c_t,"bert"),c_t.forEach(t),a1r=r(QLe," \u2014 "),dX=n(QLe,"A",{href:!0});var f_t=s(dX);n1r=r(f_t,"TFBertForQuestionAnswering"),f_t.forEach(t),s1r=r(QLe," (BERT model)"),QLe.forEach(t),l1r=i(re),CF=n(re,"LI",{});var HLe=s(CF);n1e=n(HLe,"STRONG",{});var m_t=s(n1e);i1r=r(m_t,"camembert"),m_t.forEach(t),d1r=r(HLe," \u2014 "),cX=n(HLe,"A",{href:!0});var g_t=s(cX);c1r=r(g_t,"TFCamembertForQuestionAnswering"),g_t.forEach(t),f1r=r(HLe," (CamemBERT model)"),HLe.forEach(t),m1r=i(re),MF=n(re,"LI",{});var ULe=s(MF);s1e=n(ULe,"STRONG",{});var h_t=s(s1e);g1r=r(h_t,"convbert"),h_t.forEach(t),h1r=r(ULe," \u2014 "),fX=n(ULe,"A",{href:!0});var p_t=s(fX);p1r=r(p_t,"TFConvBertForQuestionAnswering"),p_t.forEach(t),_1r=r(ULe," (ConvBERT model)"),ULe.forEach(t),u1r=i(re),EF=n(re,"LI",{});var JLe=s(EF);l1e=n(JLe,"STRONG",{});var __t=s(l1e);b1r=r(__t,"deberta"),__t.forEach(t),v1r=r(JLe," \u2014 "),mX=n(JLe,"A",{href:!0});var u_t=s(mX);T1r=r(u_t,"TFDebertaForQuestionAnswering"),u_t.forEach(t),F1r=r(JLe," (DeBERTa model)"),JLe.forEach(t),C1r=i(re),yF=n(re,"LI",{});var YLe=s(yF);i1e=n(YLe,"STRONG",{});var b_t=s(i1e);M1r=r(b_t,"deberta-v2"),b_t.forEach(t),E1r=r(YLe," \u2014 "),gX=n(YLe,"A",{href:!0});var v_t=s(gX);y1r=r(v_t,"TFDebertaV2ForQuestionAnswering"),v_t.forEach(t),w1r=r(YLe," (DeBERTa-v2 model)"),YLe.forEach(t),A1r=i(re),wF=n(re,"LI",{});var KLe=s(wF);d1e=n(KLe,"STRONG",{});var T_t=s(d1e);L1r=r(T_t,"distilbert"),T_t.forEach(t),B1r=r(KLe," \u2014 "),hX=n(KLe,"A",{href:!0});var F_t=s(hX);x1r=r(F_t,"TFDistilBertForQuestionAnswering"),F_t.forEach(t),k1r=r(KLe," (DistilBERT model)"),KLe.forEach(t),R1r=i(re),AF=n(re,"LI",{});var ZLe=s(AF);c1e=n(ZLe,"STRONG",{});var C_t=s(c1e);S1r=r(C_t,"electra"),C_t.forEach(t),P1r=r(ZLe," \u2014 "),pX=n(ZLe,"A",{href:!0});var M_t=s(pX);$1r=r(M_t,"TFElectraForQuestionAnswering"),M_t.forEach(t),I1r=r(ZLe," (ELECTRA model)"),ZLe.forEach(t),j1r=i(re),LF=n(re,"LI",{});var e7e=s(LF);f1e=n(e7e,"STRONG",{});var E_t=s(f1e);D1r=r(E_t,"flaubert"),E_t.forEach(t),N1r=r(e7e," \u2014 "),_X=n(e7e,"A",{href:!0});var y_t=s(_X);q1r=r(y_t,"TFFlaubertForQuestionAnsweringSimple"),y_t.forEach(t),O1r=r(e7e," (FlauBERT model)"),e7e.forEach(t),G1r=i(re),BF=n(re,"LI",{});var o7e=s(BF);m1e=n(o7e,"STRONG",{});var w_t=s(m1e);X1r=r(w_t,"funnel"),w_t.forEach(t),V1r=r(o7e," \u2014 "),uX=n(o7e,"A",{href:!0});var A_t=s(uX);z1r=r(A_t,"TFFunnelForQuestionAnswering"),A_t.forEach(t),W1r=r(o7e," (Funnel Transformer model)"),o7e.forEach(t),Q1r=i(re),xF=n(re,"LI",{});var r7e=s(xF);g1e=n(r7e,"STRONG",{});var L_t=s(g1e);H1r=r(L_t,"longformer"),L_t.forEach(t),U1r=r(r7e," \u2014 "),bX=n(r7e,"A",{href:!0});var B_t=s(bX);J1r=r(B_t,"TFLongformerForQuestionAnswering"),B_t.forEach(t),Y1r=r(r7e," (Longformer model)"),r7e.forEach(t),K1r=i(re),kF=n(re,"LI",{});var t7e=s(kF);h1e=n(t7e,"STRONG",{});var x_t=s(h1e);Z1r=r(x_t,"mobilebert"),x_t.forEach(t),ebr=r(t7e," \u2014 "),vX=n(t7e,"A",{href:!0});var k_t=s(vX);obr=r(k_t,"TFMobileBertForQuestionAnswering"),k_t.forEach(t),rbr=r(t7e," (MobileBERT model)"),t7e.forEach(t),tbr=i(re),RF=n(re,"LI",{});var a7e=s(RF);p1e=n(a7e,"STRONG",{});var R_t=s(p1e);abr=r(R_t,"mpnet"),R_t.forEach(t),nbr=r(a7e," \u2014 "),TX=n(a7e,"A",{href:!0});var S_t=s(TX);sbr=r(S_t,"TFMPNetForQuestionAnswering"),S_t.forEach(t),lbr=r(a7e," (MPNet model)"),a7e.forEach(t),ibr=i(re),SF=n(re,"LI",{});var n7e=s(SF);_1e=n(n7e,"STRONG",{});var P_t=s(_1e);dbr=r(P_t,"rembert"),P_t.forEach(t),cbr=r(n7e," \u2014 "),FX=n(n7e,"A",{href:!0});var $_t=s(FX);fbr=r($_t,"TFRemBertForQuestionAnswering"),$_t.forEach(t),mbr=r(n7e," (RemBERT model)"),n7e.forEach(t),gbr=i(re),PF=n(re,"LI",{});var s7e=s(PF);u1e=n(s7e,"STRONG",{});var I_t=s(u1e);hbr=r(I_t,"roberta"),I_t.forEach(t),pbr=r(s7e," \u2014 "),CX=n(s7e,"A",{href:!0});var j_t=s(CX);_br=r(j_t,"TFRobertaForQuestionAnswering"),j_t.forEach(t),ubr=r(s7e," (RoBERTa model)"),s7e.forEach(t),bbr=i(re),$F=n(re,"LI",{});var l7e=s($F);b1e=n(l7e,"STRONG",{});var D_t=s(b1e);vbr=r(D_t,"roformer"),D_t.forEach(t),Tbr=r(l7e," \u2014 "),MX=n(l7e,"A",{href:!0});var N_t=s(MX);Fbr=r(N_t,"TFRoFormerForQuestionAnswering"),N_t.forEach(t),Cbr=r(l7e," (RoFormer model)"),l7e.forEach(t),Mbr=i(re),IF=n(re,"LI",{});var i7e=s(IF);v1e=n(i7e,"STRONG",{});var q_t=s(v1e);Ebr=r(q_t,"xlm"),q_t.forEach(t),ybr=r(i7e," \u2014 "),EX=n(i7e,"A",{href:!0});var O_t=s(EX);wbr=r(O_t,"TFXLMForQuestionAnsweringSimple"),O_t.forEach(t),Abr=r(i7e," (XLM model)"),i7e.forEach(t),Lbr=i(re),jF=n(re,"LI",{});var d7e=s(jF);T1e=n(d7e,"STRONG",{});var G_t=s(T1e);Bbr=r(G_t,"xlm-roberta"),G_t.forEach(t),xbr=r(d7e," \u2014 "),yX=n(d7e,"A",{href:!0});var X_t=s(yX);kbr=r(X_t,"TFXLMRobertaForQuestionAnswering"),X_t.forEach(t),Rbr=r(d7e," (XLM-RoBERTa model)"),d7e.forEach(t),Sbr=i(re),DF=n(re,"LI",{});var c7e=s(DF);F1e=n(c7e,"STRONG",{});var V_t=s(F1e);Pbr=r(V_t,"xlnet"),V_t.forEach(t),$br=r(c7e," \u2014 "),wX=n(c7e,"A",{href:!0});var z_t=s(wX);Ibr=r(z_t,"TFXLNetForQuestionAnsweringSimple"),z_t.forEach(t),jbr=r(c7e," (XLNet model)"),c7e.forEach(t),re.forEach(t),Dbr=i(ya),C1e=n(ya,"P",{});var W_t=s(C1e);Nbr=r(W_t,"Examples:"),W_t.forEach(t),qbr=i(ya),m(Yw.$$.fragment,ya),ya.forEach(t),ni.forEach(t),Ske=i(d),Wc=n(d,"H2",{class:!0});var zSe=s(Wc);NF=n(zSe,"A",{id:!0,class:!0,href:!0});var Q_t=s(NF);M1e=n(Q_t,"SPAN",{});var H_t=s(M1e);m(Kw.$$.fragment,H_t),H_t.forEach(t),Q_t.forEach(t),Obr=i(zSe),E1e=n(zSe,"SPAN",{});var U_t=s(E1e);Gbr=r(U_t,"TFAutoModelForVision2Seq"),U_t.forEach(t),zSe.forEach(t),Pke=i(d),xr=n(d,"DIV",{class:!0});var li=s(xr);m(Zw.$$.fragment,li),Xbr=i(li),Qc=n(li,"P",{});var qW=s(Qc);Vbr=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),y1e=n(qW,"CODE",{});var J_t=s(y1e);zbr=r(J_t,"from_pretrained()"),J_t.forEach(t),Wbr=r(qW,"class method or the "),w1e=n(qW,"CODE",{});var Y_t=s(w1e);Qbr=r(Y_t,"from_config()"),Y_t.forEach(t),Hbr=r(qW,`class
method.`),qW.forEach(t),Ubr=i(li),eA=n(li,"P",{});var WSe=s(eA);Jbr=r(WSe,"This class cannot be instantiated directly using "),A1e=n(WSe,"CODE",{});var K_t=s(A1e);Ybr=r(K_t,"__init__()"),K_t.forEach(t),Kbr=r(WSe," (throws an error)."),WSe.forEach(t),Zbr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(oA.$$.fragment,ii),e5r=i(ii),L1e=n(ii,"P",{});var Z_t=s(L1e);o5r=r(Z_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Z_t.forEach(t),r5r=i(ii),Hc=n(ii,"P",{});var OW=s(Hc);t5r=r(OW,`Note:
Loading a model from its configuration file does `),B1e=n(OW,"STRONG",{});var eut=s(B1e);a5r=r(eut,"not"),eut.forEach(t),n5r=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),x1e=n(OW,"CODE",{});var out=s(x1e);s5r=r(out,"from_pretrained()"),out.forEach(t),l5r=r(OW,"to load the model weights."),OW.forEach(t),i5r=i(ii),k1e=n(ii,"P",{});var rut=s(k1e);d5r=r(rut,"Examples:"),rut.forEach(t),c5r=i(ii),m(rA.$$.fragment,ii),ii.forEach(t),f5r=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(tA.$$.fragment,wa),m5r=i(wa),R1e=n(wa,"P",{});var tut=s(R1e);g5r=r(tut,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tut.forEach(t),h5r=i(wa),An=n(wa,"P",{});var SM=s(An);p5r=r(SM,"The model class to instantiate is selected based on the "),S1e=n(SM,"CODE",{});var aut=s(S1e);_5r=r(aut,"model_type"),aut.forEach(t),u5r=r(SM,` property of the config object (either
passed as an argument or loaded from `),P1e=n(SM,"CODE",{});var nut=s(P1e);b5r=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),v5r=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(SM,"CODE",{});var sut=s($1e);T5r=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),F5r=r(SM,":"),SM.forEach(t),C5r=i(wa),I1e=n(wa,"UL",{});var lut=s(I1e);qF=n(lut,"LI",{});var f7e=s(qF);j1e=n(f7e,"STRONG",{});var iut=s(j1e);M5r=r(iut,"vision-encoder-decoder"),iut.forEach(t),E5r=r(f7e," \u2014 "),AX=n(f7e,"A",{href:!0});var dut=s(AX);y5r=r(dut,"TFVisionEncoderDecoderModel"),dut.forEach(t),w5r=r(f7e," (Vision Encoder decoder model)"),f7e.forEach(t),lut.forEach(t),A5r=i(wa),D1e=n(wa,"P",{});var cut=s(D1e);L5r=r(cut,"Examples:"),cut.forEach(t),B5r=i(wa),m(aA.$$.fragment,wa),wa.forEach(t),li.forEach(t),$ke=i(d),Uc=n(d,"H2",{class:!0});var QSe=s(Uc);OF=n(QSe,"A",{id:!0,class:!0,href:!0});var fut=s(OF);N1e=n(fut,"SPAN",{});var mut=s(N1e);m(nA.$$.fragment,mut),mut.forEach(t),fut.forEach(t),x5r=i(QSe),q1e=n(QSe,"SPAN",{});var gut=s(q1e);k5r=r(gut,"TFAutoModelForSpeechSeq2Seq"),gut.forEach(t),QSe.forEach(t),Ike=i(d),kr=n(d,"DIV",{class:!0});var di=s(kr);m(sA.$$.fragment,di),R5r=i(di),Jc=n(di,"P",{});var GW=s(Jc);S5r=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),O1e=n(GW,"CODE",{});var hut=s(O1e);P5r=r(hut,"from_pretrained()"),hut.forEach(t),$5r=r(GW,"class method or the "),G1e=n(GW,"CODE",{});var put=s(G1e);I5r=r(put,"from_config()"),put.forEach(t),j5r=r(GW,`class
method.`),GW.forEach(t),D5r=i(di),lA=n(di,"P",{});var HSe=s(lA);N5r=r(HSe,"This class cannot be instantiated directly using "),X1e=n(HSe,"CODE",{});var _ut=s(X1e);q5r=r(_ut,"__init__()"),_ut.forEach(t),O5r=r(HSe," (throws an error)."),HSe.forEach(t),G5r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(iA.$$.fragment,ci),X5r=i(ci),V1e=n(ci,"P",{});var uut=s(V1e);V5r=r(uut,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),uut.forEach(t),z5r=i(ci),Yc=n(ci,"P",{});var XW=s(Yc);W5r=r(XW,`Note:
Loading a model from its configuration file does `),z1e=n(XW,"STRONG",{});var but=s(z1e);Q5r=r(but,"not"),but.forEach(t),H5r=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),W1e=n(XW,"CODE",{});var vut=s(W1e);U5r=r(vut,"from_pretrained()"),vut.forEach(t),J5r=r(XW,"to load the model weights."),XW.forEach(t),Y5r=i(ci),Q1e=n(ci,"P",{});var Tut=s(Q1e);K5r=r(Tut,"Examples:"),Tut.forEach(t),Z5r=i(ci),m(dA.$$.fragment,ci),ci.forEach(t),e2r=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(cA.$$.fragment,Aa),o2r=i(Aa),H1e=n(Aa,"P",{});var Fut=s(H1e);r2r=r(Fut,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Fut.forEach(t),t2r=i(Aa),Ln=n(Aa,"P",{});var PM=s(Ln);a2r=r(PM,"The model class to instantiate is selected based on the "),U1e=n(PM,"CODE",{});var Cut=s(U1e);n2r=r(Cut,"model_type"),Cut.forEach(t),s2r=r(PM,` property of the config object (either
passed as an argument or loaded from `),J1e=n(PM,"CODE",{});var Mut=s(J1e);l2r=r(Mut,"pretrained_model_name_or_path"),Mut.forEach(t),i2r=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(PM,"CODE",{});var Eut=s(Y1e);d2r=r(Eut,"pretrained_model_name_or_path"),Eut.forEach(t),c2r=r(PM,":"),PM.forEach(t),f2r=i(Aa),K1e=n(Aa,"UL",{});var yut=s(K1e);GF=n(yut,"LI",{});var m7e=s(GF);Z1e=n(m7e,"STRONG",{});var wut=s(Z1e);m2r=r(wut,"speech_to_text"),wut.forEach(t),g2r=r(m7e," \u2014 "),LX=n(m7e,"A",{href:!0});var Aut=s(LX);h2r=r(Aut,"TFSpeech2TextForConditionalGeneration"),Aut.forEach(t),p2r=r(m7e," (Speech2Text model)"),m7e.forEach(t),yut.forEach(t),_2r=i(Aa),ebe=n(Aa,"P",{});var Lut=s(ebe);u2r=r(Lut,"Examples:"),Lut.forEach(t),b2r=i(Aa),m(fA.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),jke=i(d),Kc=n(d,"H2",{class:!0});var USe=s(Kc);XF=n(USe,"A",{id:!0,class:!0,href:!0});var But=s(XF);obe=n(But,"SPAN",{});var xut=s(obe);m(mA.$$.fragment,xut),xut.forEach(t),But.forEach(t),v2r=i(USe),rbe=n(USe,"SPAN",{});var kut=s(rbe);T2r=r(kut,"FlaxAutoModel"),kut.forEach(t),USe.forEach(t),Dke=i(d),Rr=n(d,"DIV",{class:!0});var fi=s(Rr);m(gA.$$.fragment,fi),F2r=i(fi),Zc=n(fi,"P",{});var VW=s(Zc);C2r=r(VW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tbe=n(VW,"CODE",{});var Rut=s(tbe);M2r=r(Rut,"from_pretrained()"),Rut.forEach(t),E2r=r(VW,"class method or the "),abe=n(VW,"CODE",{});var Sut=s(abe);y2r=r(Sut,"from_config()"),Sut.forEach(t),w2r=r(VW,`class
method.`),VW.forEach(t),A2r=i(fi),hA=n(fi,"P",{});var JSe=s(hA);L2r=r(JSe,"This class cannot be instantiated directly using "),nbe=n(JSe,"CODE",{});var Put=s(nbe);B2r=r(Put,"__init__()"),Put.forEach(t),x2r=r(JSe," (throws an error)."),JSe.forEach(t),k2r=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(pA.$$.fragment,mi),R2r=i(mi),sbe=n(mi,"P",{});var $ut=s(sbe);S2r=r($ut,"Instantiates one of the base model classes of the library from a configuration."),$ut.forEach(t),P2r=i(mi),ef=n(mi,"P",{});var zW=s(ef);$2r=r(zW,`Note:
Loading a model from its configuration file does `),lbe=n(zW,"STRONG",{});var Iut=s(lbe);I2r=r(Iut,"not"),Iut.forEach(t),j2r=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ibe=n(zW,"CODE",{});var jut=s(ibe);D2r=r(jut,"from_pretrained()"),jut.forEach(t),N2r=r(zW,"to load the model weights."),zW.forEach(t),q2r=i(mi),dbe=n(mi,"P",{});var Dut=s(dbe);O2r=r(Dut,"Examples:"),Dut.forEach(t),G2r=i(mi),m(_A.$$.fragment,mi),mi.forEach(t),X2r=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(uA.$$.fragment,La),V2r=i(La),cbe=n(La,"P",{});var Nut=s(cbe);z2r=r(Nut,"Instantiate one of the base model classes of the library from a pretrained model."),Nut.forEach(t),W2r=i(La),Bn=n(La,"P",{});var $M=s(Bn);Q2r=r($M,"The model class to instantiate is selected based on the "),fbe=n($M,"CODE",{});var qut=s(fbe);H2r=r(qut,"model_type"),qut.forEach(t),U2r=r($M,` property of the config object (either
passed as an argument or loaded from `),mbe=n($M,"CODE",{});var Out=s(mbe);J2r=r(Out,"pretrained_model_name_or_path"),Out.forEach(t),Y2r=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=n($M,"CODE",{});var Gut=s(gbe);K2r=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),Z2r=r($M,":"),$M.forEach(t),evr=i(La),z=n(La,"UL",{});var Q=s(z);VF=n(Q,"LI",{});var g7e=s(VF);hbe=n(g7e,"STRONG",{});var Xut=s(hbe);ovr=r(Xut,"albert"),Xut.forEach(t),rvr=r(g7e," \u2014 "),BX=n(g7e,"A",{href:!0});var Vut=s(BX);tvr=r(Vut,"FlaxAlbertModel"),Vut.forEach(t),avr=r(g7e," (ALBERT model)"),g7e.forEach(t),nvr=i(Q),zF=n(Q,"LI",{});var h7e=s(zF);pbe=n(h7e,"STRONG",{});var zut=s(pbe);svr=r(zut,"bart"),zut.forEach(t),lvr=r(h7e," \u2014 "),xX=n(h7e,"A",{href:!0});var Wut=s(xX);ivr=r(Wut,"FlaxBartModel"),Wut.forEach(t),dvr=r(h7e," (BART model)"),h7e.forEach(t),cvr=i(Q),WF=n(Q,"LI",{});var p7e=s(WF);_be=n(p7e,"STRONG",{});var Qut=s(_be);fvr=r(Qut,"beit"),Qut.forEach(t),mvr=r(p7e," \u2014 "),kX=n(p7e,"A",{href:!0});var Hut=s(kX);gvr=r(Hut,"FlaxBeitModel"),Hut.forEach(t),hvr=r(p7e," (BEiT model)"),p7e.forEach(t),pvr=i(Q),QF=n(Q,"LI",{});var _7e=s(QF);ube=n(_7e,"STRONG",{});var Uut=s(ube);_vr=r(Uut,"bert"),Uut.forEach(t),uvr=r(_7e," \u2014 "),RX=n(_7e,"A",{href:!0});var Jut=s(RX);bvr=r(Jut,"FlaxBertModel"),Jut.forEach(t),vvr=r(_7e," (BERT model)"),_7e.forEach(t),Tvr=i(Q),HF=n(Q,"LI",{});var u7e=s(HF);bbe=n(u7e,"STRONG",{});var Yut=s(bbe);Fvr=r(Yut,"big_bird"),Yut.forEach(t),Cvr=r(u7e," \u2014 "),SX=n(u7e,"A",{href:!0});var Kut=s(SX);Mvr=r(Kut,"FlaxBigBirdModel"),Kut.forEach(t),Evr=r(u7e," (BigBird model)"),u7e.forEach(t),yvr=i(Q),UF=n(Q,"LI",{});var b7e=s(UF);vbe=n(b7e,"STRONG",{});var Zut=s(vbe);wvr=r(Zut,"blenderbot"),Zut.forEach(t),Avr=r(b7e," \u2014 "),PX=n(b7e,"A",{href:!0});var e1t=s(PX);Lvr=r(e1t,"FlaxBlenderbotModel"),e1t.forEach(t),Bvr=r(b7e," (Blenderbot model)"),b7e.forEach(t),xvr=i(Q),JF=n(Q,"LI",{});var v7e=s(JF);Tbe=n(v7e,"STRONG",{});var o1t=s(Tbe);kvr=r(o1t,"blenderbot-small"),o1t.forEach(t),Rvr=r(v7e," \u2014 "),$X=n(v7e,"A",{href:!0});var r1t=s($X);Svr=r(r1t,"FlaxBlenderbotSmallModel"),r1t.forEach(t),Pvr=r(v7e," (BlenderbotSmall model)"),v7e.forEach(t),$vr=i(Q),YF=n(Q,"LI",{});var T7e=s(YF);Fbe=n(T7e,"STRONG",{});var t1t=s(Fbe);Ivr=r(t1t,"clip"),t1t.forEach(t),jvr=r(T7e," \u2014 "),IX=n(T7e,"A",{href:!0});var a1t=s(IX);Dvr=r(a1t,"FlaxCLIPModel"),a1t.forEach(t),Nvr=r(T7e," (CLIP model)"),T7e.forEach(t),qvr=i(Q),KF=n(Q,"LI",{});var F7e=s(KF);Cbe=n(F7e,"STRONG",{});var n1t=s(Cbe);Ovr=r(n1t,"distilbert"),n1t.forEach(t),Gvr=r(F7e," \u2014 "),jX=n(F7e,"A",{href:!0});var s1t=s(jX);Xvr=r(s1t,"FlaxDistilBertModel"),s1t.forEach(t),Vvr=r(F7e," (DistilBERT model)"),F7e.forEach(t),zvr=i(Q),ZF=n(Q,"LI",{});var C7e=s(ZF);Mbe=n(C7e,"STRONG",{});var l1t=s(Mbe);Wvr=r(l1t,"electra"),l1t.forEach(t),Qvr=r(C7e," \u2014 "),DX=n(C7e,"A",{href:!0});var i1t=s(DX);Hvr=r(i1t,"FlaxElectraModel"),i1t.forEach(t),Uvr=r(C7e," (ELECTRA model)"),C7e.forEach(t),Jvr=i(Q),e9=n(Q,"LI",{});var M7e=s(e9);Ebe=n(M7e,"STRONG",{});var d1t=s(Ebe);Yvr=r(d1t,"gpt2"),d1t.forEach(t),Kvr=r(M7e," \u2014 "),NX=n(M7e,"A",{href:!0});var c1t=s(NX);Zvr=r(c1t,"FlaxGPT2Model"),c1t.forEach(t),e6r=r(M7e," (OpenAI GPT-2 model)"),M7e.forEach(t),o6r=i(Q),o9=n(Q,"LI",{});var E7e=s(o9);ybe=n(E7e,"STRONG",{});var f1t=s(ybe);r6r=r(f1t,"gpt_neo"),f1t.forEach(t),t6r=r(E7e," \u2014 "),qX=n(E7e,"A",{href:!0});var m1t=s(qX);a6r=r(m1t,"FlaxGPTNeoModel"),m1t.forEach(t),n6r=r(E7e," (GPT Neo model)"),E7e.forEach(t),s6r=i(Q),r9=n(Q,"LI",{});var y7e=s(r9);wbe=n(y7e,"STRONG",{});var g1t=s(wbe);l6r=r(g1t,"gptj"),g1t.forEach(t),i6r=r(y7e," \u2014 "),OX=n(y7e,"A",{href:!0});var h1t=s(OX);d6r=r(h1t,"FlaxGPTJModel"),h1t.forEach(t),c6r=r(y7e," (GPT-J model)"),y7e.forEach(t),f6r=i(Q),t9=n(Q,"LI",{});var w7e=s(t9);Abe=n(w7e,"STRONG",{});var p1t=s(Abe);m6r=r(p1t,"marian"),p1t.forEach(t),g6r=r(w7e," \u2014 "),GX=n(w7e,"A",{href:!0});var _1t=s(GX);h6r=r(_1t,"FlaxMarianModel"),_1t.forEach(t),p6r=r(w7e," (Marian model)"),w7e.forEach(t),_6r=i(Q),a9=n(Q,"LI",{});var A7e=s(a9);Lbe=n(A7e,"STRONG",{});var u1t=s(Lbe);u6r=r(u1t,"mbart"),u1t.forEach(t),b6r=r(A7e," \u2014 "),XX=n(A7e,"A",{href:!0});var b1t=s(XX);v6r=r(b1t,"FlaxMBartModel"),b1t.forEach(t),T6r=r(A7e," (mBART model)"),A7e.forEach(t),F6r=i(Q),n9=n(Q,"LI",{});var L7e=s(n9);Bbe=n(L7e,"STRONG",{});var v1t=s(Bbe);C6r=r(v1t,"mt5"),v1t.forEach(t),M6r=r(L7e," \u2014 "),VX=n(L7e,"A",{href:!0});var T1t=s(VX);E6r=r(T1t,"FlaxMT5Model"),T1t.forEach(t),y6r=r(L7e," (mT5 model)"),L7e.forEach(t),w6r=i(Q),s9=n(Q,"LI",{});var B7e=s(s9);xbe=n(B7e,"STRONG",{});var F1t=s(xbe);A6r=r(F1t,"pegasus"),F1t.forEach(t),L6r=r(B7e," \u2014 "),zX=n(B7e,"A",{href:!0});var C1t=s(zX);B6r=r(C1t,"FlaxPegasusModel"),C1t.forEach(t),x6r=r(B7e," (Pegasus model)"),B7e.forEach(t),k6r=i(Q),l9=n(Q,"LI",{});var x7e=s(l9);kbe=n(x7e,"STRONG",{});var M1t=s(kbe);R6r=r(M1t,"roberta"),M1t.forEach(t),S6r=r(x7e," \u2014 "),WX=n(x7e,"A",{href:!0});var E1t=s(WX);P6r=r(E1t,"FlaxRobertaModel"),E1t.forEach(t),$6r=r(x7e," (RoBERTa model)"),x7e.forEach(t),I6r=i(Q),i9=n(Q,"LI",{});var k7e=s(i9);Rbe=n(k7e,"STRONG",{});var y1t=s(Rbe);j6r=r(y1t,"roformer"),y1t.forEach(t),D6r=r(k7e," \u2014 "),QX=n(k7e,"A",{href:!0});var w1t=s(QX);N6r=r(w1t,"FlaxRoFormerModel"),w1t.forEach(t),q6r=r(k7e," (RoFormer model)"),k7e.forEach(t),O6r=i(Q),d9=n(Q,"LI",{});var R7e=s(d9);Sbe=n(R7e,"STRONG",{});var A1t=s(Sbe);G6r=r(A1t,"t5"),A1t.forEach(t),X6r=r(R7e," \u2014 "),HX=n(R7e,"A",{href:!0});var L1t=s(HX);V6r=r(L1t,"FlaxT5Model"),L1t.forEach(t),z6r=r(R7e," (T5 model)"),R7e.forEach(t),W6r=i(Q),c9=n(Q,"LI",{});var S7e=s(c9);Pbe=n(S7e,"STRONG",{});var B1t=s(Pbe);Q6r=r(B1t,"vision-text-dual-encoder"),B1t.forEach(t),H6r=r(S7e," \u2014 "),UX=n(S7e,"A",{href:!0});var x1t=s(UX);U6r=r(x1t,"FlaxVisionTextDualEncoderModel"),x1t.forEach(t),J6r=r(S7e," (VisionTextDualEncoder model)"),S7e.forEach(t),Y6r=i(Q),f9=n(Q,"LI",{});var P7e=s(f9);$be=n(P7e,"STRONG",{});var k1t=s($be);K6r=r(k1t,"vit"),k1t.forEach(t),Z6r=r(P7e," \u2014 "),JX=n(P7e,"A",{href:!0});var R1t=s(JX);eTr=r(R1t,"FlaxViTModel"),R1t.forEach(t),oTr=r(P7e," (ViT model)"),P7e.forEach(t),rTr=i(Q),m9=n(Q,"LI",{});var $7e=s(m9);Ibe=n($7e,"STRONG",{});var S1t=s(Ibe);tTr=r(S1t,"wav2vec2"),S1t.forEach(t),aTr=r($7e," \u2014 "),YX=n($7e,"A",{href:!0});var P1t=s(YX);nTr=r(P1t,"FlaxWav2Vec2Model"),P1t.forEach(t),sTr=r($7e," (Wav2Vec2 model)"),$7e.forEach(t),lTr=i(Q),g9=n(Q,"LI",{});var I7e=s(g9);jbe=n(I7e,"STRONG",{});var $1t=s(jbe);iTr=r($1t,"xglm"),$1t.forEach(t),dTr=r(I7e," \u2014 "),KX=n(I7e,"A",{href:!0});var I1t=s(KX);cTr=r(I1t,"FlaxXGLMModel"),I1t.forEach(t),fTr=r(I7e," (XGLM model)"),I7e.forEach(t),mTr=i(Q),h9=n(Q,"LI",{});var j7e=s(h9);Dbe=n(j7e,"STRONG",{});var j1t=s(Dbe);gTr=r(j1t,"xlm-roberta"),j1t.forEach(t),hTr=r(j7e," \u2014 "),ZX=n(j7e,"A",{href:!0});var D1t=s(ZX);pTr=r(D1t,"FlaxXLMRobertaModel"),D1t.forEach(t),_Tr=r(j7e," (XLM-RoBERTa model)"),j7e.forEach(t),Q.forEach(t),uTr=i(La),Nbe=n(La,"P",{});var N1t=s(Nbe);bTr=r(N1t,"Examples:"),N1t.forEach(t),vTr=i(La),m(bA.$$.fragment,La),La.forEach(t),fi.forEach(t),Nke=i(d),of=n(d,"H2",{class:!0});var YSe=s(of);p9=n(YSe,"A",{id:!0,class:!0,href:!0});var q1t=s(p9);qbe=n(q1t,"SPAN",{});var O1t=s(qbe);m(vA.$$.fragment,O1t),O1t.forEach(t),q1t.forEach(t),TTr=i(YSe),Obe=n(YSe,"SPAN",{});var G1t=s(Obe);FTr=r(G1t,"FlaxAutoModelForCausalLM"),G1t.forEach(t),YSe.forEach(t),qke=i(d),Sr=n(d,"DIV",{class:!0});var gi=s(Sr);m(TA.$$.fragment,gi),CTr=i(gi),rf=n(gi,"P",{});var WW=s(rf);MTr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Gbe=n(WW,"CODE",{});var X1t=s(Gbe);ETr=r(X1t,"from_pretrained()"),X1t.forEach(t),yTr=r(WW,"class method or the "),Xbe=n(WW,"CODE",{});var V1t=s(Xbe);wTr=r(V1t,"from_config()"),V1t.forEach(t),ATr=r(WW,`class
method.`),WW.forEach(t),LTr=i(gi),FA=n(gi,"P",{});var KSe=s(FA);BTr=r(KSe,"This class cannot be instantiated directly using "),Vbe=n(KSe,"CODE",{});var z1t=s(Vbe);xTr=r(z1t,"__init__()"),z1t.forEach(t),kTr=r(KSe," (throws an error)."),KSe.forEach(t),RTr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(CA.$$.fragment,hi),STr=i(hi),zbe=n(hi,"P",{});var W1t=s(zbe);PTr=r(W1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),W1t.forEach(t),$Tr=i(hi),tf=n(hi,"P",{});var QW=s(tf);ITr=r(QW,`Note:
Loading a model from its configuration file does `),Wbe=n(QW,"STRONG",{});var Q1t=s(Wbe);jTr=r(Q1t,"not"),Q1t.forEach(t),DTr=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qbe=n(QW,"CODE",{});var H1t=s(Qbe);NTr=r(H1t,"from_pretrained()"),H1t.forEach(t),qTr=r(QW,"to load the model weights."),QW.forEach(t),OTr=i(hi),Hbe=n(hi,"P",{});var U1t=s(Hbe);GTr=r(U1t,"Examples:"),U1t.forEach(t),XTr=i(hi),m(MA.$$.fragment,hi),hi.forEach(t),VTr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(EA.$$.fragment,Ba),zTr=i(Ba),Ube=n(Ba,"P",{});var J1t=s(Ube);WTr=r(J1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),J1t.forEach(t),QTr=i(Ba),xn=n(Ba,"P",{});var IM=s(xn);HTr=r(IM,"The model class to instantiate is selected based on the "),Jbe=n(IM,"CODE",{});var Y1t=s(Jbe);UTr=r(Y1t,"model_type"),Y1t.forEach(t),JTr=r(IM,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(IM,"CODE",{});var K1t=s(Ybe);YTr=r(K1t,"pretrained_model_name_or_path"),K1t.forEach(t),KTr=r(IM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(IM,"CODE",{});var Z1t=s(Kbe);ZTr=r(Z1t,"pretrained_model_name_or_path"),Z1t.forEach(t),e8r=r(IM,":"),IM.forEach(t),o8r=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);_9=n(pi,"LI",{});var D7e=s(_9);Zbe=n(D7e,"STRONG",{});var ebt=s(Zbe);r8r=r(ebt,"bart"),ebt.forEach(t),t8r=r(D7e," \u2014 "),eV=n(D7e,"A",{href:!0});var obt=s(eV);a8r=r(obt,"FlaxBartForCausalLM"),obt.forEach(t),n8r=r(D7e," (BART model)"),D7e.forEach(t),s8r=i(pi),u9=n(pi,"LI",{});var N7e=s(u9);e5e=n(N7e,"STRONG",{});var rbt=s(e5e);l8r=r(rbt,"gpt2"),rbt.forEach(t),i8r=r(N7e," \u2014 "),oV=n(N7e,"A",{href:!0});var tbt=s(oV);d8r=r(tbt,"FlaxGPT2LMHeadModel"),tbt.forEach(t),c8r=r(N7e," (OpenAI GPT-2 model)"),N7e.forEach(t),f8r=i(pi),b9=n(pi,"LI",{});var q7e=s(b9);o5e=n(q7e,"STRONG",{});var abt=s(o5e);m8r=r(abt,"gpt_neo"),abt.forEach(t),g8r=r(q7e," \u2014 "),rV=n(q7e,"A",{href:!0});var nbt=s(rV);h8r=r(nbt,"FlaxGPTNeoForCausalLM"),nbt.forEach(t),p8r=r(q7e," (GPT Neo model)"),q7e.forEach(t),_8r=i(pi),v9=n(pi,"LI",{});var O7e=s(v9);r5e=n(O7e,"STRONG",{});var sbt=s(r5e);u8r=r(sbt,"gptj"),sbt.forEach(t),b8r=r(O7e," \u2014 "),tV=n(O7e,"A",{href:!0});var lbt=s(tV);v8r=r(lbt,"FlaxGPTJForCausalLM"),lbt.forEach(t),T8r=r(O7e," (GPT-J model)"),O7e.forEach(t),F8r=i(pi),T9=n(pi,"LI",{});var G7e=s(T9);t5e=n(G7e,"STRONG",{});var ibt=s(t5e);C8r=r(ibt,"xglm"),ibt.forEach(t),M8r=r(G7e," \u2014 "),aV=n(G7e,"A",{href:!0});var dbt=s(aV);E8r=r(dbt,"FlaxXGLMForCausalLM"),dbt.forEach(t),y8r=r(G7e," (XGLM model)"),G7e.forEach(t),pi.forEach(t),w8r=i(Ba),a5e=n(Ba,"P",{});var cbt=s(a5e);A8r=r(cbt,"Examples:"),cbt.forEach(t),L8r=i(Ba),m(yA.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),Oke=i(d),af=n(d,"H2",{class:!0});var ZSe=s(af);F9=n(ZSe,"A",{id:!0,class:!0,href:!0});var fbt=s(F9);n5e=n(fbt,"SPAN",{});var mbt=s(n5e);m(wA.$$.fragment,mbt),mbt.forEach(t),fbt.forEach(t),B8r=i(ZSe),s5e=n(ZSe,"SPAN",{});var gbt=s(s5e);x8r=r(gbt,"FlaxAutoModelForPreTraining"),gbt.forEach(t),ZSe.forEach(t),Gke=i(d),Pr=n(d,"DIV",{class:!0});var _i=s(Pr);m(AA.$$.fragment,_i),k8r=i(_i),nf=n(_i,"P",{});var HW=s(nf);R8r=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),l5e=n(HW,"CODE",{});var hbt=s(l5e);S8r=r(hbt,"from_pretrained()"),hbt.forEach(t),P8r=r(HW,"class method or the "),i5e=n(HW,"CODE",{});var pbt=s(i5e);$8r=r(pbt,"from_config()"),pbt.forEach(t),I8r=r(HW,`class
method.`),HW.forEach(t),j8r=i(_i),LA=n(_i,"P",{});var ePe=s(LA);D8r=r(ePe,"This class cannot be instantiated directly using "),d5e=n(ePe,"CODE",{});var _bt=s(d5e);N8r=r(_bt,"__init__()"),_bt.forEach(t),q8r=r(ePe," (throws an error)."),ePe.forEach(t),O8r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(BA.$$.fragment,ui),G8r=i(ui),c5e=n(ui,"P",{});var ubt=s(c5e);X8r=r(ubt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ubt.forEach(t),V8r=i(ui),sf=n(ui,"P",{});var UW=s(sf);z8r=r(UW,`Note:
Loading a model from its configuration file does `),f5e=n(UW,"STRONG",{});var bbt=s(f5e);W8r=r(bbt,"not"),bbt.forEach(t),Q8r=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),m5e=n(UW,"CODE",{});var vbt=s(m5e);H8r=r(vbt,"from_pretrained()"),vbt.forEach(t),U8r=r(UW,"to load the model weights."),UW.forEach(t),J8r=i(ui),g5e=n(ui,"P",{});var Tbt=s(g5e);Y8r=r(Tbt,"Examples:"),Tbt.forEach(t),K8r=i(ui),m(xA.$$.fragment,ui),ui.forEach(t),Z8r=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(kA.$$.fragment,xa),eFr=i(xa),h5e=n(xa,"P",{});var Fbt=s(h5e);oFr=r(Fbt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Fbt.forEach(t),rFr=i(xa),kn=n(xa,"P",{});var jM=s(kn);tFr=r(jM,"The model class to instantiate is selected based on the "),p5e=n(jM,"CODE",{});var Cbt=s(p5e);aFr=r(Cbt,"model_type"),Cbt.forEach(t),nFr=r(jM,` property of the config object (either
passed as an argument or loaded from `),_5e=n(jM,"CODE",{});var Mbt=s(_5e);sFr=r(Mbt,"pretrained_model_name_or_path"),Mbt.forEach(t),lFr=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=n(jM,"CODE",{});var Ebt=s(u5e);iFr=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),dFr=r(jM,":"),jM.forEach(t),cFr=i(xa),ce=n(xa,"UL",{});var ge=s(ce);C9=n(ge,"LI",{});var X7e=s(C9);b5e=n(X7e,"STRONG",{});var ybt=s(b5e);fFr=r(ybt,"albert"),ybt.forEach(t),mFr=r(X7e," \u2014 "),nV=n(X7e,"A",{href:!0});var wbt=s(nV);gFr=r(wbt,"FlaxAlbertForPreTraining"),wbt.forEach(t),hFr=r(X7e," (ALBERT model)"),X7e.forEach(t),pFr=i(ge),M9=n(ge,"LI",{});var V7e=s(M9);v5e=n(V7e,"STRONG",{});var Abt=s(v5e);_Fr=r(Abt,"bart"),Abt.forEach(t),uFr=r(V7e," \u2014 "),sV=n(V7e,"A",{href:!0});var Lbt=s(sV);bFr=r(Lbt,"FlaxBartForConditionalGeneration"),Lbt.forEach(t),vFr=r(V7e," (BART model)"),V7e.forEach(t),TFr=i(ge),E9=n(ge,"LI",{});var z7e=s(E9);T5e=n(z7e,"STRONG",{});var Bbt=s(T5e);FFr=r(Bbt,"bert"),Bbt.forEach(t),CFr=r(z7e," \u2014 "),lV=n(z7e,"A",{href:!0});var xbt=s(lV);MFr=r(xbt,"FlaxBertForPreTraining"),xbt.forEach(t),EFr=r(z7e," (BERT model)"),z7e.forEach(t),yFr=i(ge),y9=n(ge,"LI",{});var W7e=s(y9);F5e=n(W7e,"STRONG",{});var kbt=s(F5e);wFr=r(kbt,"big_bird"),kbt.forEach(t),AFr=r(W7e," \u2014 "),iV=n(W7e,"A",{href:!0});var Rbt=s(iV);LFr=r(Rbt,"FlaxBigBirdForPreTraining"),Rbt.forEach(t),BFr=r(W7e," (BigBird model)"),W7e.forEach(t),xFr=i(ge),w9=n(ge,"LI",{});var Q7e=s(w9);C5e=n(Q7e,"STRONG",{});var Sbt=s(C5e);kFr=r(Sbt,"electra"),Sbt.forEach(t),RFr=r(Q7e," \u2014 "),dV=n(Q7e,"A",{href:!0});var Pbt=s(dV);SFr=r(Pbt,"FlaxElectraForPreTraining"),Pbt.forEach(t),PFr=r(Q7e," (ELECTRA model)"),Q7e.forEach(t),$Fr=i(ge),A9=n(ge,"LI",{});var H7e=s(A9);M5e=n(H7e,"STRONG",{});var $bt=s(M5e);IFr=r($bt,"mbart"),$bt.forEach(t),jFr=r(H7e," \u2014 "),cV=n(H7e,"A",{href:!0});var Ibt=s(cV);DFr=r(Ibt,"FlaxMBartForConditionalGeneration"),Ibt.forEach(t),NFr=r(H7e," (mBART model)"),H7e.forEach(t),qFr=i(ge),L9=n(ge,"LI",{});var U7e=s(L9);E5e=n(U7e,"STRONG",{});var jbt=s(E5e);OFr=r(jbt,"mt5"),jbt.forEach(t),GFr=r(U7e," \u2014 "),fV=n(U7e,"A",{href:!0});var Dbt=s(fV);XFr=r(Dbt,"FlaxMT5ForConditionalGeneration"),Dbt.forEach(t),VFr=r(U7e," (mT5 model)"),U7e.forEach(t),zFr=i(ge),B9=n(ge,"LI",{});var J7e=s(B9);y5e=n(J7e,"STRONG",{});var Nbt=s(y5e);WFr=r(Nbt,"roberta"),Nbt.forEach(t),QFr=r(J7e," \u2014 "),mV=n(J7e,"A",{href:!0});var qbt=s(mV);HFr=r(qbt,"FlaxRobertaForMaskedLM"),qbt.forEach(t),UFr=r(J7e," (RoBERTa model)"),J7e.forEach(t),JFr=i(ge),x9=n(ge,"LI",{});var Y7e=s(x9);w5e=n(Y7e,"STRONG",{});var Obt=s(w5e);YFr=r(Obt,"roformer"),Obt.forEach(t),KFr=r(Y7e," \u2014 "),gV=n(Y7e,"A",{href:!0});var Gbt=s(gV);ZFr=r(Gbt,"FlaxRoFormerForMaskedLM"),Gbt.forEach(t),e9r=r(Y7e," (RoFormer model)"),Y7e.forEach(t),o9r=i(ge),k9=n(ge,"LI",{});var K7e=s(k9);A5e=n(K7e,"STRONG",{});var Xbt=s(A5e);r9r=r(Xbt,"t5"),Xbt.forEach(t),t9r=r(K7e," \u2014 "),hV=n(K7e,"A",{href:!0});var Vbt=s(hV);a9r=r(Vbt,"FlaxT5ForConditionalGeneration"),Vbt.forEach(t),n9r=r(K7e," (T5 model)"),K7e.forEach(t),s9r=i(ge),R9=n(ge,"LI",{});var Z7e=s(R9);L5e=n(Z7e,"STRONG",{});var zbt=s(L5e);l9r=r(zbt,"wav2vec2"),zbt.forEach(t),i9r=r(Z7e," \u2014 "),pV=n(Z7e,"A",{href:!0});var Wbt=s(pV);d9r=r(Wbt,"FlaxWav2Vec2ForPreTraining"),Wbt.forEach(t),c9r=r(Z7e," (Wav2Vec2 model)"),Z7e.forEach(t),f9r=i(ge),S9=n(ge,"LI",{});var eBe=s(S9);B5e=n(eBe,"STRONG",{});var Qbt=s(B5e);m9r=r(Qbt,"xlm-roberta"),Qbt.forEach(t),g9r=r(eBe," \u2014 "),_V=n(eBe,"A",{href:!0});var Hbt=s(_V);h9r=r(Hbt,"FlaxXLMRobertaForMaskedLM"),Hbt.forEach(t),p9r=r(eBe," (XLM-RoBERTa model)"),eBe.forEach(t),ge.forEach(t),_9r=i(xa),x5e=n(xa,"P",{});var Ubt=s(x5e);u9r=r(Ubt,"Examples:"),Ubt.forEach(t),b9r=i(xa),m(RA.$$.fragment,xa),xa.forEach(t),_i.forEach(t),Xke=i(d),lf=n(d,"H2",{class:!0});var oPe=s(lf);P9=n(oPe,"A",{id:!0,class:!0,href:!0});var Jbt=s(P9);k5e=n(Jbt,"SPAN",{});var Ybt=s(k5e);m(SA.$$.fragment,Ybt),Ybt.forEach(t),Jbt.forEach(t),v9r=i(oPe),R5e=n(oPe,"SPAN",{});var Kbt=s(R5e);T9r=r(Kbt,"FlaxAutoModelForMaskedLM"),Kbt.forEach(t),oPe.forEach(t),Vke=i(d),$r=n(d,"DIV",{class:!0});var bi=s($r);m(PA.$$.fragment,bi),F9r=i(bi),df=n(bi,"P",{});var JW=s(df);C9r=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),S5e=n(JW,"CODE",{});var Zbt=s(S5e);M9r=r(Zbt,"from_pretrained()"),Zbt.forEach(t),E9r=r(JW,"class method or the "),P5e=n(JW,"CODE",{});var e5t=s(P5e);y9r=r(e5t,"from_config()"),e5t.forEach(t),w9r=r(JW,`class
method.`),JW.forEach(t),A9r=i(bi),$A=n(bi,"P",{});var rPe=s($A);L9r=r(rPe,"This class cannot be instantiated directly using "),$5e=n(rPe,"CODE",{});var o5t=s($5e);B9r=r(o5t,"__init__()"),o5t.forEach(t),x9r=r(rPe," (throws an error)."),rPe.forEach(t),k9r=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(IA.$$.fragment,vi),R9r=i(vi),I5e=n(vi,"P",{});var r5t=s(I5e);S9r=r(r5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),r5t.forEach(t),P9r=i(vi),cf=n(vi,"P",{});var YW=s(cf);$9r=r(YW,`Note:
Loading a model from its configuration file does `),j5e=n(YW,"STRONG",{});var t5t=s(j5e);I9r=r(t5t,"not"),t5t.forEach(t),j9r=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),D5e=n(YW,"CODE",{});var a5t=s(D5e);D9r=r(a5t,"from_pretrained()"),a5t.forEach(t),N9r=r(YW,"to load the model weights."),YW.forEach(t),q9r=i(vi),N5e=n(vi,"P",{});var n5t=s(N5e);O9r=r(n5t,"Examples:"),n5t.forEach(t),G9r=i(vi),m(jA.$$.fragment,vi),vi.forEach(t),X9r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(DA.$$.fragment,ka),V9r=i(ka),q5e=n(ka,"P",{});var s5t=s(q5e);z9r=r(s5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),s5t.forEach(t),W9r=i(ka),Rn=n(ka,"P",{});var DM=s(Rn);Q9r=r(DM,"The model class to instantiate is selected based on the "),O5e=n(DM,"CODE",{});var l5t=s(O5e);H9r=r(l5t,"model_type"),l5t.forEach(t),U9r=r(DM,` property of the config object (either
passed as an argument or loaded from `),G5e=n(DM,"CODE",{});var i5t=s(G5e);J9r=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),Y9r=r(DM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X5e=n(DM,"CODE",{});var d5t=s(X5e);K9r=r(d5t,"pretrained_model_name_or_path"),d5t.forEach(t),Z9r=r(DM,":"),DM.forEach(t),eCr=i(ka),ue=n(ka,"UL",{});var ye=s(ue);$9=n(ye,"LI",{});var oBe=s($9);V5e=n(oBe,"STRONG",{});var c5t=s(V5e);oCr=r(c5t,"albert"),c5t.forEach(t),rCr=r(oBe," \u2014 "),uV=n(oBe,"A",{href:!0});var f5t=s(uV);tCr=r(f5t,"FlaxAlbertForMaskedLM"),f5t.forEach(t),aCr=r(oBe," (ALBERT model)"),oBe.forEach(t),nCr=i(ye),I9=n(ye,"LI",{});var rBe=s(I9);z5e=n(rBe,"STRONG",{});var m5t=s(z5e);sCr=r(m5t,"bart"),m5t.forEach(t),lCr=r(rBe," \u2014 "),bV=n(rBe,"A",{href:!0});var g5t=s(bV);iCr=r(g5t,"FlaxBartForConditionalGeneration"),g5t.forEach(t),dCr=r(rBe," (BART model)"),rBe.forEach(t),cCr=i(ye),j9=n(ye,"LI",{});var tBe=s(j9);W5e=n(tBe,"STRONG",{});var h5t=s(W5e);fCr=r(h5t,"bert"),h5t.forEach(t),mCr=r(tBe," \u2014 "),vV=n(tBe,"A",{href:!0});var p5t=s(vV);gCr=r(p5t,"FlaxBertForMaskedLM"),p5t.forEach(t),hCr=r(tBe," (BERT model)"),tBe.forEach(t),pCr=i(ye),D9=n(ye,"LI",{});var aBe=s(D9);Q5e=n(aBe,"STRONG",{});var _5t=s(Q5e);_Cr=r(_5t,"big_bird"),_5t.forEach(t),uCr=r(aBe," \u2014 "),TV=n(aBe,"A",{href:!0});var u5t=s(TV);bCr=r(u5t,"FlaxBigBirdForMaskedLM"),u5t.forEach(t),vCr=r(aBe," (BigBird model)"),aBe.forEach(t),TCr=i(ye),N9=n(ye,"LI",{});var nBe=s(N9);H5e=n(nBe,"STRONG",{});var b5t=s(H5e);FCr=r(b5t,"distilbert"),b5t.forEach(t),CCr=r(nBe," \u2014 "),FV=n(nBe,"A",{href:!0});var v5t=s(FV);MCr=r(v5t,"FlaxDistilBertForMaskedLM"),v5t.forEach(t),ECr=r(nBe," (DistilBERT model)"),nBe.forEach(t),yCr=i(ye),q9=n(ye,"LI",{});var sBe=s(q9);U5e=n(sBe,"STRONG",{});var T5t=s(U5e);wCr=r(T5t,"electra"),T5t.forEach(t),ACr=r(sBe," \u2014 "),CV=n(sBe,"A",{href:!0});var F5t=s(CV);LCr=r(F5t,"FlaxElectraForMaskedLM"),F5t.forEach(t),BCr=r(sBe," (ELECTRA model)"),sBe.forEach(t),xCr=i(ye),O9=n(ye,"LI",{});var lBe=s(O9);J5e=n(lBe,"STRONG",{});var C5t=s(J5e);kCr=r(C5t,"mbart"),C5t.forEach(t),RCr=r(lBe," \u2014 "),MV=n(lBe,"A",{href:!0});var M5t=s(MV);SCr=r(M5t,"FlaxMBartForConditionalGeneration"),M5t.forEach(t),PCr=r(lBe," (mBART model)"),lBe.forEach(t),$Cr=i(ye),G9=n(ye,"LI",{});var iBe=s(G9);Y5e=n(iBe,"STRONG",{});var E5t=s(Y5e);ICr=r(E5t,"roberta"),E5t.forEach(t),jCr=r(iBe," \u2014 "),EV=n(iBe,"A",{href:!0});var y5t=s(EV);DCr=r(y5t,"FlaxRobertaForMaskedLM"),y5t.forEach(t),NCr=r(iBe," (RoBERTa model)"),iBe.forEach(t),qCr=i(ye),X9=n(ye,"LI",{});var dBe=s(X9);K5e=n(dBe,"STRONG",{});var w5t=s(K5e);OCr=r(w5t,"roformer"),w5t.forEach(t),GCr=r(dBe," \u2014 "),yV=n(dBe,"A",{href:!0});var A5t=s(yV);XCr=r(A5t,"FlaxRoFormerForMaskedLM"),A5t.forEach(t),VCr=r(dBe," (RoFormer model)"),dBe.forEach(t),zCr=i(ye),V9=n(ye,"LI",{});var cBe=s(V9);Z5e=n(cBe,"STRONG",{});var L5t=s(Z5e);WCr=r(L5t,"xlm-roberta"),L5t.forEach(t),QCr=r(cBe," \u2014 "),wV=n(cBe,"A",{href:!0});var B5t=s(wV);HCr=r(B5t,"FlaxXLMRobertaForMaskedLM"),B5t.forEach(t),UCr=r(cBe," (XLM-RoBERTa model)"),cBe.forEach(t),ye.forEach(t),JCr=i(ka),e2e=n(ka,"P",{});var x5t=s(e2e);YCr=r(x5t,"Examples:"),x5t.forEach(t),KCr=i(ka),m(NA.$$.fragment,ka),ka.forEach(t),bi.forEach(t),zke=i(d),ff=n(d,"H2",{class:!0});var tPe=s(ff);z9=n(tPe,"A",{id:!0,class:!0,href:!0});var k5t=s(z9);o2e=n(k5t,"SPAN",{});var R5t=s(o2e);m(qA.$$.fragment,R5t),R5t.forEach(t),k5t.forEach(t),ZCr=i(tPe),r2e=n(tPe,"SPAN",{});var S5t=s(r2e);eMr=r(S5t,"FlaxAutoModelForSeq2SeqLM"),S5t.forEach(t),tPe.forEach(t),Wke=i(d),Ir=n(d,"DIV",{class:!0});var Ti=s(Ir);m(OA.$$.fragment,Ti),oMr=i(Ti),mf=n(Ti,"P",{});var KW=s(mf);rMr=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),t2e=n(KW,"CODE",{});var P5t=s(t2e);tMr=r(P5t,"from_pretrained()"),P5t.forEach(t),aMr=r(KW,"class method or the "),a2e=n(KW,"CODE",{});var $5t=s(a2e);nMr=r($5t,"from_config()"),$5t.forEach(t),sMr=r(KW,`class
method.`),KW.forEach(t),lMr=i(Ti),GA=n(Ti,"P",{});var aPe=s(GA);iMr=r(aPe,"This class cannot be instantiated directly using "),n2e=n(aPe,"CODE",{});var I5t=s(n2e);dMr=r(I5t,"__init__()"),I5t.forEach(t),cMr=r(aPe," (throws an error)."),aPe.forEach(t),fMr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(XA.$$.fragment,Fi),mMr=i(Fi),s2e=n(Fi,"P",{});var j5t=s(s2e);gMr=r(j5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),j5t.forEach(t),hMr=i(Fi),gf=n(Fi,"P",{});var ZW=s(gf);pMr=r(ZW,`Note:
Loading a model from its configuration file does `),l2e=n(ZW,"STRONG",{});var D5t=s(l2e);_Mr=r(D5t,"not"),D5t.forEach(t),uMr=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),i2e=n(ZW,"CODE",{});var N5t=s(i2e);bMr=r(N5t,"from_pretrained()"),N5t.forEach(t),vMr=r(ZW,"to load the model weights."),ZW.forEach(t),TMr=i(Fi),d2e=n(Fi,"P",{});var q5t=s(d2e);FMr=r(q5t,"Examples:"),q5t.forEach(t),CMr=i(Fi),m(VA.$$.fragment,Fi),Fi.forEach(t),MMr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(zA.$$.fragment,Ra),EMr=i(Ra),c2e=n(Ra,"P",{});var O5t=s(c2e);yMr=r(O5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),O5t.forEach(t),wMr=i(Ra),Sn=n(Ra,"P",{});var NM=s(Sn);AMr=r(NM,"The model class to instantiate is selected based on the "),f2e=n(NM,"CODE",{});var G5t=s(f2e);LMr=r(G5t,"model_type"),G5t.forEach(t),BMr=r(NM,` property of the config object (either
passed as an argument or loaded from `),m2e=n(NM,"CODE",{});var X5t=s(m2e);xMr=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),kMr=r(NM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=n(NM,"CODE",{});var V5t=s(g2e);RMr=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),SMr=r(NM,":"),NM.forEach(t),PMr=i(Ra),Me=n(Ra,"UL",{});var lo=s(Me);W9=n(lo,"LI",{});var fBe=s(W9);h2e=n(fBe,"STRONG",{});var z5t=s(h2e);$Mr=r(z5t,"bart"),z5t.forEach(t),IMr=r(fBe," \u2014 "),AV=n(fBe,"A",{href:!0});var W5t=s(AV);jMr=r(W5t,"FlaxBartForConditionalGeneration"),W5t.forEach(t),DMr=r(fBe," (BART model)"),fBe.forEach(t),NMr=i(lo),Q9=n(lo,"LI",{});var mBe=s(Q9);p2e=n(mBe,"STRONG",{});var Q5t=s(p2e);qMr=r(Q5t,"blenderbot"),Q5t.forEach(t),OMr=r(mBe," \u2014 "),LV=n(mBe,"A",{href:!0});var H5t=s(LV);GMr=r(H5t,"FlaxBlenderbotForConditionalGeneration"),H5t.forEach(t),XMr=r(mBe," (Blenderbot model)"),mBe.forEach(t),VMr=i(lo),H9=n(lo,"LI",{});var gBe=s(H9);_2e=n(gBe,"STRONG",{});var U5t=s(_2e);zMr=r(U5t,"blenderbot-small"),U5t.forEach(t),WMr=r(gBe," \u2014 "),BV=n(gBe,"A",{href:!0});var J5t=s(BV);QMr=r(J5t,"FlaxBlenderbotSmallForConditionalGeneration"),J5t.forEach(t),HMr=r(gBe," (BlenderbotSmall model)"),gBe.forEach(t),UMr=i(lo),U9=n(lo,"LI",{});var hBe=s(U9);u2e=n(hBe,"STRONG",{});var Y5t=s(u2e);JMr=r(Y5t,"encoder-decoder"),Y5t.forEach(t),YMr=r(hBe," \u2014 "),xV=n(hBe,"A",{href:!0});var K5t=s(xV);KMr=r(K5t,"FlaxEncoderDecoderModel"),K5t.forEach(t),ZMr=r(hBe," (Encoder decoder model)"),hBe.forEach(t),e4r=i(lo),J9=n(lo,"LI",{});var pBe=s(J9);b2e=n(pBe,"STRONG",{});var Z5t=s(b2e);o4r=r(Z5t,"marian"),Z5t.forEach(t),r4r=r(pBe," \u2014 "),kV=n(pBe,"A",{href:!0});var e2t=s(kV);t4r=r(e2t,"FlaxMarianMTModel"),e2t.forEach(t),a4r=r(pBe," (Marian model)"),pBe.forEach(t),n4r=i(lo),Y9=n(lo,"LI",{});var _Be=s(Y9);v2e=n(_Be,"STRONG",{});var o2t=s(v2e);s4r=r(o2t,"mbart"),o2t.forEach(t),l4r=r(_Be," \u2014 "),RV=n(_Be,"A",{href:!0});var r2t=s(RV);i4r=r(r2t,"FlaxMBartForConditionalGeneration"),r2t.forEach(t),d4r=r(_Be," (mBART model)"),_Be.forEach(t),c4r=i(lo),K9=n(lo,"LI",{});var uBe=s(K9);T2e=n(uBe,"STRONG",{});var t2t=s(T2e);f4r=r(t2t,"mt5"),t2t.forEach(t),m4r=r(uBe," \u2014 "),SV=n(uBe,"A",{href:!0});var a2t=s(SV);g4r=r(a2t,"FlaxMT5ForConditionalGeneration"),a2t.forEach(t),h4r=r(uBe," (mT5 model)"),uBe.forEach(t),p4r=i(lo),Z9=n(lo,"LI",{});var bBe=s(Z9);F2e=n(bBe,"STRONG",{});var n2t=s(F2e);_4r=r(n2t,"pegasus"),n2t.forEach(t),u4r=r(bBe," \u2014 "),PV=n(bBe,"A",{href:!0});var s2t=s(PV);b4r=r(s2t,"FlaxPegasusForConditionalGeneration"),s2t.forEach(t),v4r=r(bBe," (Pegasus model)"),bBe.forEach(t),T4r=i(lo),eC=n(lo,"LI",{});var vBe=s(eC);C2e=n(vBe,"STRONG",{});var l2t=s(C2e);F4r=r(l2t,"t5"),l2t.forEach(t),C4r=r(vBe," \u2014 "),$V=n(vBe,"A",{href:!0});var i2t=s($V);M4r=r(i2t,"FlaxT5ForConditionalGeneration"),i2t.forEach(t),E4r=r(vBe," (T5 model)"),vBe.forEach(t),lo.forEach(t),y4r=i(Ra),M2e=n(Ra,"P",{});var d2t=s(M2e);w4r=r(d2t,"Examples:"),d2t.forEach(t),A4r=i(Ra),m(WA.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),Qke=i(d),hf=n(d,"H2",{class:!0});var nPe=s(hf);oC=n(nPe,"A",{id:!0,class:!0,href:!0});var c2t=s(oC);E2e=n(c2t,"SPAN",{});var f2t=s(E2e);m(QA.$$.fragment,f2t),f2t.forEach(t),c2t.forEach(t),L4r=i(nPe),y2e=n(nPe,"SPAN",{});var m2t=s(y2e);B4r=r(m2t,"FlaxAutoModelForSequenceClassification"),m2t.forEach(t),nPe.forEach(t),Hke=i(d),jr=n(d,"DIV",{class:!0});var Ci=s(jr);m(HA.$$.fragment,Ci),x4r=i(Ci),pf=n(Ci,"P",{});var eQ=s(pf);k4r=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),w2e=n(eQ,"CODE",{});var g2t=s(w2e);R4r=r(g2t,"from_pretrained()"),g2t.forEach(t),S4r=r(eQ,"class method or the "),A2e=n(eQ,"CODE",{});var h2t=s(A2e);P4r=r(h2t,"from_config()"),h2t.forEach(t),$4r=r(eQ,`class
method.`),eQ.forEach(t),I4r=i(Ci),UA=n(Ci,"P",{});var sPe=s(UA);j4r=r(sPe,"This class cannot be instantiated directly using "),L2e=n(sPe,"CODE",{});var p2t=s(L2e);D4r=r(p2t,"__init__()"),p2t.forEach(t),N4r=r(sPe," (throws an error)."),sPe.forEach(t),q4r=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(JA.$$.fragment,Mi),O4r=i(Mi),B2e=n(Mi,"P",{});var _2t=s(B2e);G4r=r(_2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_2t.forEach(t),X4r=i(Mi),_f=n(Mi,"P",{});var oQ=s(_f);V4r=r(oQ,`Note:
Loading a model from its configuration file does `),x2e=n(oQ,"STRONG",{});var u2t=s(x2e);z4r=r(u2t,"not"),u2t.forEach(t),W4r=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),k2e=n(oQ,"CODE",{});var b2t=s(k2e);Q4r=r(b2t,"from_pretrained()"),b2t.forEach(t),H4r=r(oQ,"to load the model weights."),oQ.forEach(t),U4r=i(Mi),R2e=n(Mi,"P",{});var v2t=s(R2e);J4r=r(v2t,"Examples:"),v2t.forEach(t),Y4r=i(Mi),m(YA.$$.fragment,Mi),Mi.forEach(t),K4r=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(KA.$$.fragment,Sa),Z4r=i(Sa),S2e=n(Sa,"P",{});var T2t=s(S2e);eEr=r(T2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),T2t.forEach(t),oEr=i(Sa),Pn=n(Sa,"P",{});var qM=s(Pn);rEr=r(qM,"The model class to instantiate is selected based on the "),P2e=n(qM,"CODE",{});var F2t=s(P2e);tEr=r(F2t,"model_type"),F2t.forEach(t),aEr=r(qM,` property of the config object (either
passed as an argument or loaded from `),$2e=n(qM,"CODE",{});var C2t=s($2e);nEr=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),sEr=r(qM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=n(qM,"CODE",{});var M2t=s(I2e);lEr=r(M2t,"pretrained_model_name_or_path"),M2t.forEach(t),iEr=r(qM,":"),qM.forEach(t),dEr=i(Sa),be=n(Sa,"UL",{});var we=s(be);rC=n(we,"LI",{});var TBe=s(rC);j2e=n(TBe,"STRONG",{});var E2t=s(j2e);cEr=r(E2t,"albert"),E2t.forEach(t),fEr=r(TBe," \u2014 "),IV=n(TBe,"A",{href:!0});var y2t=s(IV);mEr=r(y2t,"FlaxAlbertForSequenceClassification"),y2t.forEach(t),gEr=r(TBe," (ALBERT model)"),TBe.forEach(t),hEr=i(we),tC=n(we,"LI",{});var FBe=s(tC);D2e=n(FBe,"STRONG",{});var w2t=s(D2e);pEr=r(w2t,"bart"),w2t.forEach(t),_Er=r(FBe," \u2014 "),jV=n(FBe,"A",{href:!0});var A2t=s(jV);uEr=r(A2t,"FlaxBartForSequenceClassification"),A2t.forEach(t),bEr=r(FBe," (BART model)"),FBe.forEach(t),vEr=i(we),aC=n(we,"LI",{});var CBe=s(aC);N2e=n(CBe,"STRONG",{});var L2t=s(N2e);TEr=r(L2t,"bert"),L2t.forEach(t),FEr=r(CBe," \u2014 "),DV=n(CBe,"A",{href:!0});var B2t=s(DV);CEr=r(B2t,"FlaxBertForSequenceClassification"),B2t.forEach(t),MEr=r(CBe," (BERT model)"),CBe.forEach(t),EEr=i(we),nC=n(we,"LI",{});var MBe=s(nC);q2e=n(MBe,"STRONG",{});var x2t=s(q2e);yEr=r(x2t,"big_bird"),x2t.forEach(t),wEr=r(MBe," \u2014 "),NV=n(MBe,"A",{href:!0});var k2t=s(NV);AEr=r(k2t,"FlaxBigBirdForSequenceClassification"),k2t.forEach(t),LEr=r(MBe," (BigBird model)"),MBe.forEach(t),BEr=i(we),sC=n(we,"LI",{});var EBe=s(sC);O2e=n(EBe,"STRONG",{});var R2t=s(O2e);xEr=r(R2t,"distilbert"),R2t.forEach(t),kEr=r(EBe," \u2014 "),qV=n(EBe,"A",{href:!0});var S2t=s(qV);REr=r(S2t,"FlaxDistilBertForSequenceClassification"),S2t.forEach(t),SEr=r(EBe," (DistilBERT model)"),EBe.forEach(t),PEr=i(we),lC=n(we,"LI",{});var yBe=s(lC);G2e=n(yBe,"STRONG",{});var P2t=s(G2e);$Er=r(P2t,"electra"),P2t.forEach(t),IEr=r(yBe," \u2014 "),OV=n(yBe,"A",{href:!0});var $2t=s(OV);jEr=r($2t,"FlaxElectraForSequenceClassification"),$2t.forEach(t),DEr=r(yBe," (ELECTRA model)"),yBe.forEach(t),NEr=i(we),iC=n(we,"LI",{});var wBe=s(iC);X2e=n(wBe,"STRONG",{});var I2t=s(X2e);qEr=r(I2t,"mbart"),I2t.forEach(t),OEr=r(wBe," \u2014 "),GV=n(wBe,"A",{href:!0});var j2t=s(GV);GEr=r(j2t,"FlaxMBartForSequenceClassification"),j2t.forEach(t),XEr=r(wBe," (mBART model)"),wBe.forEach(t),VEr=i(we),dC=n(we,"LI",{});var ABe=s(dC);V2e=n(ABe,"STRONG",{});var D2t=s(V2e);zEr=r(D2t,"roberta"),D2t.forEach(t),WEr=r(ABe," \u2014 "),XV=n(ABe,"A",{href:!0});var N2t=s(XV);QEr=r(N2t,"FlaxRobertaForSequenceClassification"),N2t.forEach(t),HEr=r(ABe," (RoBERTa model)"),ABe.forEach(t),UEr=i(we),cC=n(we,"LI",{});var LBe=s(cC);z2e=n(LBe,"STRONG",{});var q2t=s(z2e);JEr=r(q2t,"roformer"),q2t.forEach(t),YEr=r(LBe," \u2014 "),VV=n(LBe,"A",{href:!0});var O2t=s(VV);KEr=r(O2t,"FlaxRoFormerForSequenceClassification"),O2t.forEach(t),ZEr=r(LBe," (RoFormer model)"),LBe.forEach(t),e3r=i(we),fC=n(we,"LI",{});var BBe=s(fC);W2e=n(BBe,"STRONG",{});var G2t=s(W2e);o3r=r(G2t,"xlm-roberta"),G2t.forEach(t),r3r=r(BBe," \u2014 "),zV=n(BBe,"A",{href:!0});var X2t=s(zV);t3r=r(X2t,"FlaxXLMRobertaForSequenceClassification"),X2t.forEach(t),a3r=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),we.forEach(t),n3r=i(Sa),Q2e=n(Sa,"P",{});var V2t=s(Q2e);s3r=r(V2t,"Examples:"),V2t.forEach(t),l3r=i(Sa),m(ZA.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),Uke=i(d),uf=n(d,"H2",{class:!0});var lPe=s(uf);mC=n(lPe,"A",{id:!0,class:!0,href:!0});var z2t=s(mC);H2e=n(z2t,"SPAN",{});var W2t=s(H2e);m(e0.$$.fragment,W2t),W2t.forEach(t),z2t.forEach(t),i3r=i(lPe),U2e=n(lPe,"SPAN",{});var Q2t=s(U2e);d3r=r(Q2t,"FlaxAutoModelForQuestionAnswering"),Q2t.forEach(t),lPe.forEach(t),Jke=i(d),Dr=n(d,"DIV",{class:!0});var Ei=s(Dr);m(o0.$$.fragment,Ei),c3r=i(Ei),bf=n(Ei,"P",{});var rQ=s(bf);f3r=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),J2e=n(rQ,"CODE",{});var H2t=s(J2e);m3r=r(H2t,"from_pretrained()"),H2t.forEach(t),g3r=r(rQ,"class method or the "),Y2e=n(rQ,"CODE",{});var U2t=s(Y2e);h3r=r(U2t,"from_config()"),U2t.forEach(t),p3r=r(rQ,`class
method.`),rQ.forEach(t),_3r=i(Ei),r0=n(Ei,"P",{});var iPe=s(r0);u3r=r(iPe,"This class cannot be instantiated directly using "),K2e=n(iPe,"CODE",{});var J2t=s(K2e);b3r=r(J2t,"__init__()"),J2t.forEach(t),v3r=r(iPe," (throws an error)."),iPe.forEach(t),T3r=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(t0.$$.fragment,yi),F3r=i(yi),Z2e=n(yi,"P",{});var Y2t=s(Z2e);C3r=r(Y2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Y2t.forEach(t),M3r=i(yi),vf=n(yi,"P",{});var tQ=s(vf);E3r=r(tQ,`Note:
Loading a model from its configuration file does `),eve=n(tQ,"STRONG",{});var K2t=s(eve);y3r=r(K2t,"not"),K2t.forEach(t),w3r=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ove=n(tQ,"CODE",{});var Z2t=s(ove);A3r=r(Z2t,"from_pretrained()"),Z2t.forEach(t),L3r=r(tQ,"to load the model weights."),tQ.forEach(t),B3r=i(yi),rve=n(yi,"P",{});var evt=s(rve);x3r=r(evt,"Examples:"),evt.forEach(t),k3r=i(yi),m(a0.$$.fragment,yi),yi.forEach(t),R3r=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(n0.$$.fragment,Pa),S3r=i(Pa),tve=n(Pa,"P",{});var ovt=s(tve);P3r=r(ovt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ovt.forEach(t),$3r=i(Pa),$n=n(Pa,"P",{});var OM=s($n);I3r=r(OM,"The model class to instantiate is selected based on the "),ave=n(OM,"CODE",{});var rvt=s(ave);j3r=r(rvt,"model_type"),rvt.forEach(t),D3r=r(OM,` property of the config object (either
passed as an argument or loaded from `),nve=n(OM,"CODE",{});var tvt=s(nve);N3r=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),q3r=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=n(OM,"CODE",{});var avt=s(sve);O3r=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),G3r=r(OM,":"),OM.forEach(t),X3r=i(Pa),ve=n(Pa,"UL",{});var Ae=s(ve);gC=n(Ae,"LI",{});var xBe=s(gC);lve=n(xBe,"STRONG",{});var nvt=s(lve);V3r=r(nvt,"albert"),nvt.forEach(t),z3r=r(xBe," \u2014 "),WV=n(xBe,"A",{href:!0});var svt=s(WV);W3r=r(svt,"FlaxAlbertForQuestionAnswering"),svt.forEach(t),Q3r=r(xBe," (ALBERT model)"),xBe.forEach(t),H3r=i(Ae),hC=n(Ae,"LI",{});var kBe=s(hC);ive=n(kBe,"STRONG",{});var lvt=s(ive);U3r=r(lvt,"bart"),lvt.forEach(t),J3r=r(kBe," \u2014 "),QV=n(kBe,"A",{href:!0});var ivt=s(QV);Y3r=r(ivt,"FlaxBartForQuestionAnswering"),ivt.forEach(t),K3r=r(kBe," (BART model)"),kBe.forEach(t),Z3r=i(Ae),pC=n(Ae,"LI",{});var RBe=s(pC);dve=n(RBe,"STRONG",{});var dvt=s(dve);eyr=r(dvt,"bert"),dvt.forEach(t),oyr=r(RBe," \u2014 "),HV=n(RBe,"A",{href:!0});var cvt=s(HV);ryr=r(cvt,"FlaxBertForQuestionAnswering"),cvt.forEach(t),tyr=r(RBe," (BERT model)"),RBe.forEach(t),ayr=i(Ae),_C=n(Ae,"LI",{});var SBe=s(_C);cve=n(SBe,"STRONG",{});var fvt=s(cve);nyr=r(fvt,"big_bird"),fvt.forEach(t),syr=r(SBe," \u2014 "),UV=n(SBe,"A",{href:!0});var mvt=s(UV);lyr=r(mvt,"FlaxBigBirdForQuestionAnswering"),mvt.forEach(t),iyr=r(SBe," (BigBird model)"),SBe.forEach(t),dyr=i(Ae),uC=n(Ae,"LI",{});var PBe=s(uC);fve=n(PBe,"STRONG",{});var gvt=s(fve);cyr=r(gvt,"distilbert"),gvt.forEach(t),fyr=r(PBe," \u2014 "),JV=n(PBe,"A",{href:!0});var hvt=s(JV);myr=r(hvt,"FlaxDistilBertForQuestionAnswering"),hvt.forEach(t),gyr=r(PBe," (DistilBERT model)"),PBe.forEach(t),hyr=i(Ae),bC=n(Ae,"LI",{});var $Be=s(bC);mve=n($Be,"STRONG",{});var pvt=s(mve);pyr=r(pvt,"electra"),pvt.forEach(t),_yr=r($Be," \u2014 "),YV=n($Be,"A",{href:!0});var _vt=s(YV);uyr=r(_vt,"FlaxElectraForQuestionAnswering"),_vt.forEach(t),byr=r($Be," (ELECTRA model)"),$Be.forEach(t),vyr=i(Ae),vC=n(Ae,"LI",{});var IBe=s(vC);gve=n(IBe,"STRONG",{});var uvt=s(gve);Tyr=r(uvt,"mbart"),uvt.forEach(t),Fyr=r(IBe," \u2014 "),KV=n(IBe,"A",{href:!0});var bvt=s(KV);Cyr=r(bvt,"FlaxMBartForQuestionAnswering"),bvt.forEach(t),Myr=r(IBe," (mBART model)"),IBe.forEach(t),Eyr=i(Ae),TC=n(Ae,"LI",{});var jBe=s(TC);hve=n(jBe,"STRONG",{});var vvt=s(hve);yyr=r(vvt,"roberta"),vvt.forEach(t),wyr=r(jBe," \u2014 "),ZV=n(jBe,"A",{href:!0});var Tvt=s(ZV);Ayr=r(Tvt,"FlaxRobertaForQuestionAnswering"),Tvt.forEach(t),Lyr=r(jBe," (RoBERTa model)"),jBe.forEach(t),Byr=i(Ae),FC=n(Ae,"LI",{});var DBe=s(FC);pve=n(DBe,"STRONG",{});var Fvt=s(pve);xyr=r(Fvt,"roformer"),Fvt.forEach(t),kyr=r(DBe," \u2014 "),ez=n(DBe,"A",{href:!0});var Cvt=s(ez);Ryr=r(Cvt,"FlaxRoFormerForQuestionAnswering"),Cvt.forEach(t),Syr=r(DBe," (RoFormer model)"),DBe.forEach(t),Pyr=i(Ae),CC=n(Ae,"LI",{});var NBe=s(CC);_ve=n(NBe,"STRONG",{});var Mvt=s(_ve);$yr=r(Mvt,"xlm-roberta"),Mvt.forEach(t),Iyr=r(NBe," \u2014 "),oz=n(NBe,"A",{href:!0});var Evt=s(oz);jyr=r(Evt,"FlaxXLMRobertaForQuestionAnswering"),Evt.forEach(t),Dyr=r(NBe," (XLM-RoBERTa model)"),NBe.forEach(t),Ae.forEach(t),Nyr=i(Pa),uve=n(Pa,"P",{});var yvt=s(uve);qyr=r(yvt,"Examples:"),yvt.forEach(t),Oyr=i(Pa),m(s0.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),Yke=i(d),Tf=n(d,"H2",{class:!0});var dPe=s(Tf);MC=n(dPe,"A",{id:!0,class:!0,href:!0});var wvt=s(MC);bve=n(wvt,"SPAN",{});var Avt=s(bve);m(l0.$$.fragment,Avt),Avt.forEach(t),wvt.forEach(t),Gyr=i(dPe),vve=n(dPe,"SPAN",{});var Lvt=s(vve);Xyr=r(Lvt,"FlaxAutoModelForTokenClassification"),Lvt.forEach(t),dPe.forEach(t),Kke=i(d),Nr=n(d,"DIV",{class:!0});var wi=s(Nr);m(i0.$$.fragment,wi),Vyr=i(wi),Ff=n(wi,"P",{});var aQ=s(Ff);zyr=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tve=n(aQ,"CODE",{});var Bvt=s(Tve);Wyr=r(Bvt,"from_pretrained()"),Bvt.forEach(t),Qyr=r(aQ,"class method or the "),Fve=n(aQ,"CODE",{});var xvt=s(Fve);Hyr=r(xvt,"from_config()"),xvt.forEach(t),Uyr=r(aQ,`class
method.`),aQ.forEach(t),Jyr=i(wi),d0=n(wi,"P",{});var cPe=s(d0);Yyr=r(cPe,"This class cannot be instantiated directly using "),Cve=n(cPe,"CODE",{});var kvt=s(Cve);Kyr=r(kvt,"__init__()"),kvt.forEach(t),Zyr=r(cPe," (throws an error)."),cPe.forEach(t),ewr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(c0.$$.fragment,Ai),owr=i(Ai),Mve=n(Ai,"P",{});var Rvt=s(Mve);rwr=r(Rvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rvt.forEach(t),twr=i(Ai),Cf=n(Ai,"P",{});var nQ=s(Cf);awr=r(nQ,`Note:
Loading a model from its configuration file does `),Eve=n(nQ,"STRONG",{});var Svt=s(Eve);nwr=r(Svt,"not"),Svt.forEach(t),swr=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yve=n(nQ,"CODE",{});var Pvt=s(yve);lwr=r(Pvt,"from_pretrained()"),Pvt.forEach(t),iwr=r(nQ,"to load the model weights."),nQ.forEach(t),dwr=i(Ai),wve=n(Ai,"P",{});var $vt=s(wve);cwr=r($vt,"Examples:"),$vt.forEach(t),fwr=i(Ai),m(f0.$$.fragment,Ai),Ai.forEach(t),mwr=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(m0.$$.fragment,$a),gwr=i($a),Ave=n($a,"P",{});var Ivt=s(Ave);hwr=r(Ivt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ivt.forEach(t),pwr=i($a),In=n($a,"P",{});var GM=s(In);_wr=r(GM,"The model class to instantiate is selected based on the "),Lve=n(GM,"CODE",{});var jvt=s(Lve);uwr=r(jvt,"model_type"),jvt.forEach(t),bwr=r(GM,` property of the config object (either
passed as an argument or loaded from `),Bve=n(GM,"CODE",{});var Dvt=s(Bve);vwr=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),Twr=r(GM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(GM,"CODE",{});var Nvt=s(xve);Fwr=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),Cwr=r(GM,":"),GM.forEach(t),Mwr=i($a),Re=n($a,"UL",{});var Go=s(Re);EC=n(Go,"LI",{});var qBe=s(EC);kve=n(qBe,"STRONG",{});var qvt=s(kve);Ewr=r(qvt,"albert"),qvt.forEach(t),ywr=r(qBe," \u2014 "),rz=n(qBe,"A",{href:!0});var Ovt=s(rz);wwr=r(Ovt,"FlaxAlbertForTokenClassification"),Ovt.forEach(t),Awr=r(qBe," (ALBERT model)"),qBe.forEach(t),Lwr=i(Go),yC=n(Go,"LI",{});var OBe=s(yC);Rve=n(OBe,"STRONG",{});var Gvt=s(Rve);Bwr=r(Gvt,"bert"),Gvt.forEach(t),xwr=r(OBe," \u2014 "),tz=n(OBe,"A",{href:!0});var Xvt=s(tz);kwr=r(Xvt,"FlaxBertForTokenClassification"),Xvt.forEach(t),Rwr=r(OBe," (BERT model)"),OBe.forEach(t),Swr=i(Go),wC=n(Go,"LI",{});var GBe=s(wC);Sve=n(GBe,"STRONG",{});var Vvt=s(Sve);Pwr=r(Vvt,"big_bird"),Vvt.forEach(t),$wr=r(GBe," \u2014 "),az=n(GBe,"A",{href:!0});var zvt=s(az);Iwr=r(zvt,"FlaxBigBirdForTokenClassification"),zvt.forEach(t),jwr=r(GBe," (BigBird model)"),GBe.forEach(t),Dwr=i(Go),AC=n(Go,"LI",{});var XBe=s(AC);Pve=n(XBe,"STRONG",{});var Wvt=s(Pve);Nwr=r(Wvt,"distilbert"),Wvt.forEach(t),qwr=r(XBe," \u2014 "),nz=n(XBe,"A",{href:!0});var Qvt=s(nz);Owr=r(Qvt,"FlaxDistilBertForTokenClassification"),Qvt.forEach(t),Gwr=r(XBe," (DistilBERT model)"),XBe.forEach(t),Xwr=i(Go),LC=n(Go,"LI",{});var VBe=s(LC);$ve=n(VBe,"STRONG",{});var Hvt=s($ve);Vwr=r(Hvt,"electra"),Hvt.forEach(t),zwr=r(VBe," \u2014 "),sz=n(VBe,"A",{href:!0});var Uvt=s(sz);Wwr=r(Uvt,"FlaxElectraForTokenClassification"),Uvt.forEach(t),Qwr=r(VBe," (ELECTRA model)"),VBe.forEach(t),Hwr=i(Go),BC=n(Go,"LI",{});var zBe=s(BC);Ive=n(zBe,"STRONG",{});var Jvt=s(Ive);Uwr=r(Jvt,"roberta"),Jvt.forEach(t),Jwr=r(zBe," \u2014 "),lz=n(zBe,"A",{href:!0});var Yvt=s(lz);Ywr=r(Yvt,"FlaxRobertaForTokenClassification"),Yvt.forEach(t),Kwr=r(zBe," (RoBERTa model)"),zBe.forEach(t),Zwr=i(Go),xC=n(Go,"LI",{});var WBe=s(xC);jve=n(WBe,"STRONG",{});var Kvt=s(jve);eAr=r(Kvt,"roformer"),Kvt.forEach(t),oAr=r(WBe," \u2014 "),iz=n(WBe,"A",{href:!0});var Zvt=s(iz);rAr=r(Zvt,"FlaxRoFormerForTokenClassification"),Zvt.forEach(t),tAr=r(WBe," (RoFormer model)"),WBe.forEach(t),aAr=i(Go),kC=n(Go,"LI",{});var QBe=s(kC);Dve=n(QBe,"STRONG",{});var e6t=s(Dve);nAr=r(e6t,"xlm-roberta"),e6t.forEach(t),sAr=r(QBe," \u2014 "),dz=n(QBe,"A",{href:!0});var o6t=s(dz);lAr=r(o6t,"FlaxXLMRobertaForTokenClassification"),o6t.forEach(t),iAr=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),Go.forEach(t),dAr=i($a),Nve=n($a,"P",{});var r6t=s(Nve);cAr=r(r6t,"Examples:"),r6t.forEach(t),fAr=i($a),m(g0.$$.fragment,$a),$a.forEach(t),wi.forEach(t),Zke=i(d),Mf=n(d,"H2",{class:!0});var fPe=s(Mf);RC=n(fPe,"A",{id:!0,class:!0,href:!0});var t6t=s(RC);qve=n(t6t,"SPAN",{});var a6t=s(qve);m(h0.$$.fragment,a6t),a6t.forEach(t),t6t.forEach(t),mAr=i(fPe),Ove=n(fPe,"SPAN",{});var n6t=s(Ove);gAr=r(n6t,"FlaxAutoModelForMultipleChoice"),n6t.forEach(t),fPe.forEach(t),eRe=i(d),qr=n(d,"DIV",{class:!0});var Li=s(qr);m(p0.$$.fragment,Li),hAr=i(Li),Ef=n(Li,"P",{});var sQ=s(Ef);pAr=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Gve=n(sQ,"CODE",{});var s6t=s(Gve);_Ar=r(s6t,"from_pretrained()"),s6t.forEach(t),uAr=r(sQ,"class method or the "),Xve=n(sQ,"CODE",{});var l6t=s(Xve);bAr=r(l6t,"from_config()"),l6t.forEach(t),vAr=r(sQ,`class
method.`),sQ.forEach(t),TAr=i(Li),_0=n(Li,"P",{});var mPe=s(_0);FAr=r(mPe,"This class cannot be instantiated directly using "),Vve=n(mPe,"CODE",{});var i6t=s(Vve);CAr=r(i6t,"__init__()"),i6t.forEach(t),MAr=r(mPe," (throws an error)."),mPe.forEach(t),EAr=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(u0.$$.fragment,Bi),yAr=i(Bi),zve=n(Bi,"P",{});var d6t=s(zve);wAr=r(d6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),d6t.forEach(t),AAr=i(Bi),yf=n(Bi,"P",{});var lQ=s(yf);LAr=r(lQ,`Note:
Loading a model from its configuration file does `),Wve=n(lQ,"STRONG",{});var c6t=s(Wve);BAr=r(c6t,"not"),c6t.forEach(t),xAr=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qve=n(lQ,"CODE",{});var f6t=s(Qve);kAr=r(f6t,"from_pretrained()"),f6t.forEach(t),RAr=r(lQ,"to load the model weights."),lQ.forEach(t),SAr=i(Bi),Hve=n(Bi,"P",{});var m6t=s(Hve);PAr=r(m6t,"Examples:"),m6t.forEach(t),$Ar=i(Bi),m(b0.$$.fragment,Bi),Bi.forEach(t),IAr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(v0.$$.fragment,Ia),jAr=i(Ia),Uve=n(Ia,"P",{});var g6t=s(Uve);DAr=r(g6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),g6t.forEach(t),NAr=i(Ia),jn=n(Ia,"P",{});var XM=s(jn);qAr=r(XM,"The model class to instantiate is selected based on the "),Jve=n(XM,"CODE",{});var h6t=s(Jve);OAr=r(h6t,"model_type"),h6t.forEach(t),GAr=r(XM,` property of the config object (either
passed as an argument or loaded from `),Yve=n(XM,"CODE",{});var p6t=s(Yve);XAr=r(p6t,"pretrained_model_name_or_path"),p6t.forEach(t),VAr=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(XM,"CODE",{});var _6t=s(Kve);zAr=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),WAr=r(XM,":"),XM.forEach(t),QAr=i(Ia),Se=n(Ia,"UL",{});var Xo=s(Se);SC=n(Xo,"LI",{});var HBe=s(SC);Zve=n(HBe,"STRONG",{});var u6t=s(Zve);HAr=r(u6t,"albert"),u6t.forEach(t),UAr=r(HBe," \u2014 "),cz=n(HBe,"A",{href:!0});var b6t=s(cz);JAr=r(b6t,"FlaxAlbertForMultipleChoice"),b6t.forEach(t),YAr=r(HBe," (ALBERT model)"),HBe.forEach(t),KAr=i(Xo),PC=n(Xo,"LI",{});var UBe=s(PC);e6e=n(UBe,"STRONG",{});var v6t=s(e6e);ZAr=r(v6t,"bert"),v6t.forEach(t),e0r=r(UBe," \u2014 "),fz=n(UBe,"A",{href:!0});var T6t=s(fz);o0r=r(T6t,"FlaxBertForMultipleChoice"),T6t.forEach(t),r0r=r(UBe," (BERT model)"),UBe.forEach(t),t0r=i(Xo),$C=n(Xo,"LI",{});var JBe=s($C);o6e=n(JBe,"STRONG",{});var F6t=s(o6e);a0r=r(F6t,"big_bird"),F6t.forEach(t),n0r=r(JBe," \u2014 "),mz=n(JBe,"A",{href:!0});var C6t=s(mz);s0r=r(C6t,"FlaxBigBirdForMultipleChoice"),C6t.forEach(t),l0r=r(JBe," (BigBird model)"),JBe.forEach(t),i0r=i(Xo),IC=n(Xo,"LI",{});var YBe=s(IC);r6e=n(YBe,"STRONG",{});var M6t=s(r6e);d0r=r(M6t,"distilbert"),M6t.forEach(t),c0r=r(YBe," \u2014 "),gz=n(YBe,"A",{href:!0});var E6t=s(gz);f0r=r(E6t,"FlaxDistilBertForMultipleChoice"),E6t.forEach(t),m0r=r(YBe," (DistilBERT model)"),YBe.forEach(t),g0r=i(Xo),jC=n(Xo,"LI",{});var KBe=s(jC);t6e=n(KBe,"STRONG",{});var y6t=s(t6e);h0r=r(y6t,"electra"),y6t.forEach(t),p0r=r(KBe," \u2014 "),hz=n(KBe,"A",{href:!0});var w6t=s(hz);_0r=r(w6t,"FlaxElectraForMultipleChoice"),w6t.forEach(t),u0r=r(KBe," (ELECTRA model)"),KBe.forEach(t),b0r=i(Xo),DC=n(Xo,"LI",{});var ZBe=s(DC);a6e=n(ZBe,"STRONG",{});var A6t=s(a6e);v0r=r(A6t,"roberta"),A6t.forEach(t),T0r=r(ZBe," \u2014 "),pz=n(ZBe,"A",{href:!0});var L6t=s(pz);F0r=r(L6t,"FlaxRobertaForMultipleChoice"),L6t.forEach(t),C0r=r(ZBe," (RoBERTa model)"),ZBe.forEach(t),M0r=i(Xo),NC=n(Xo,"LI",{});var exe=s(NC);n6e=n(exe,"STRONG",{});var B6t=s(n6e);E0r=r(B6t,"roformer"),B6t.forEach(t),y0r=r(exe," \u2014 "),_z=n(exe,"A",{href:!0});var x6t=s(_z);w0r=r(x6t,"FlaxRoFormerForMultipleChoice"),x6t.forEach(t),A0r=r(exe," (RoFormer model)"),exe.forEach(t),L0r=i(Xo),qC=n(Xo,"LI",{});var oxe=s(qC);s6e=n(oxe,"STRONG",{});var k6t=s(s6e);B0r=r(k6t,"xlm-roberta"),k6t.forEach(t),x0r=r(oxe," \u2014 "),uz=n(oxe,"A",{href:!0});var R6t=s(uz);k0r=r(R6t,"FlaxXLMRobertaForMultipleChoice"),R6t.forEach(t),R0r=r(oxe," (XLM-RoBERTa model)"),oxe.forEach(t),Xo.forEach(t),S0r=i(Ia),l6e=n(Ia,"P",{});var S6t=s(l6e);P0r=r(S6t,"Examples:"),S6t.forEach(t),$0r=i(Ia),m(T0.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),oRe=i(d),wf=n(d,"H2",{class:!0});var gPe=s(wf);OC=n(gPe,"A",{id:!0,class:!0,href:!0});var P6t=s(OC);i6e=n(P6t,"SPAN",{});var $6t=s(i6e);m(F0.$$.fragment,$6t),$6t.forEach(t),P6t.forEach(t),I0r=i(gPe),d6e=n(gPe,"SPAN",{});var I6t=s(d6e);j0r=r(I6t,"FlaxAutoModelForNextSentencePrediction"),I6t.forEach(t),gPe.forEach(t),rRe=i(d),Or=n(d,"DIV",{class:!0});var xi=s(Or);m(C0.$$.fragment,xi),D0r=i(xi),Af=n(xi,"P",{});var iQ=s(Af);N0r=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),c6e=n(iQ,"CODE",{});var j6t=s(c6e);q0r=r(j6t,"from_pretrained()"),j6t.forEach(t),O0r=r(iQ,"class method or the "),f6e=n(iQ,"CODE",{});var D6t=s(f6e);G0r=r(D6t,"from_config()"),D6t.forEach(t),X0r=r(iQ,`class
method.`),iQ.forEach(t),V0r=i(xi),M0=n(xi,"P",{});var hPe=s(M0);z0r=r(hPe,"This class cannot be instantiated directly using "),m6e=n(hPe,"CODE",{});var N6t=s(m6e);W0r=r(N6t,"__init__()"),N6t.forEach(t),Q0r=r(hPe," (throws an error)."),hPe.forEach(t),H0r=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(E0.$$.fragment,ki),U0r=i(ki),g6e=n(ki,"P",{});var q6t=s(g6e);J0r=r(q6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),q6t.forEach(t),Y0r=i(ki),Lf=n(ki,"P",{});var dQ=s(Lf);K0r=r(dQ,`Note:
Loading a model from its configuration file does `),h6e=n(dQ,"STRONG",{});var O6t=s(h6e);Z0r=r(O6t,"not"),O6t.forEach(t),eLr=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),p6e=n(dQ,"CODE",{});var G6t=s(p6e);oLr=r(G6t,"from_pretrained()"),G6t.forEach(t),rLr=r(dQ,"to load the model weights."),dQ.forEach(t),tLr=i(ki),_6e=n(ki,"P",{});var X6t=s(_6e);aLr=r(X6t,"Examples:"),X6t.forEach(t),nLr=i(ki),m(y0.$$.fragment,ki),ki.forEach(t),sLr=i(xi),Io=n(xi,"DIV",{class:!0});var ja=s(Io);m(w0.$$.fragment,ja),lLr=i(ja),u6e=n(ja,"P",{});var V6t=s(u6e);iLr=r(V6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),V6t.forEach(t),dLr=i(ja),Dn=n(ja,"P",{});var VM=s(Dn);cLr=r(VM,"The model class to instantiate is selected based on the "),b6e=n(VM,"CODE",{});var z6t=s(b6e);fLr=r(z6t,"model_type"),z6t.forEach(t),mLr=r(VM,` property of the config object (either
passed as an argument or loaded from `),v6e=n(VM,"CODE",{});var W6t=s(v6e);gLr=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),hLr=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=n(VM,"CODE",{});var Q6t=s(T6e);pLr=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),_Lr=r(VM,":"),VM.forEach(t),uLr=i(ja),F6e=n(ja,"UL",{});var H6t=s(F6e);GC=n(H6t,"LI",{});var rxe=s(GC);C6e=n(rxe,"STRONG",{});var U6t=s(C6e);bLr=r(U6t,"bert"),U6t.forEach(t),vLr=r(rxe," \u2014 "),bz=n(rxe,"A",{href:!0});var J6t=s(bz);TLr=r(J6t,"FlaxBertForNextSentencePrediction"),J6t.forEach(t),FLr=r(rxe," (BERT model)"),rxe.forEach(t),H6t.forEach(t),CLr=i(ja),M6e=n(ja,"P",{});var Y6t=s(M6e);MLr=r(Y6t,"Examples:"),Y6t.forEach(t),ELr=i(ja),m(A0.$$.fragment,ja),ja.forEach(t),xi.forEach(t),tRe=i(d),Bf=n(d,"H2",{class:!0});var pPe=s(Bf);XC=n(pPe,"A",{id:!0,class:!0,href:!0});var K6t=s(XC);E6e=n(K6t,"SPAN",{});var Z6t=s(E6e);m(L0.$$.fragment,Z6t),Z6t.forEach(t),K6t.forEach(t),yLr=i(pPe),y6e=n(pPe,"SPAN",{});var eTt=s(y6e);wLr=r(eTt,"FlaxAutoModelForImageClassification"),eTt.forEach(t),pPe.forEach(t),aRe=i(d),Gr=n(d,"DIV",{class:!0});var Ri=s(Gr);m(B0.$$.fragment,Ri),ALr=i(Ri),xf=n(Ri,"P",{});var cQ=s(xf);LLr=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),w6e=n(cQ,"CODE",{});var oTt=s(w6e);BLr=r(oTt,"from_pretrained()"),oTt.forEach(t),xLr=r(cQ,"class method or the "),A6e=n(cQ,"CODE",{});var rTt=s(A6e);kLr=r(rTt,"from_config()"),rTt.forEach(t),RLr=r(cQ,`class
method.`),cQ.forEach(t),SLr=i(Ri),x0=n(Ri,"P",{});var _Pe=s(x0);PLr=r(_Pe,"This class cannot be instantiated directly using "),L6e=n(_Pe,"CODE",{});var tTt=s(L6e);$Lr=r(tTt,"__init__()"),tTt.forEach(t),ILr=r(_Pe," (throws an error)."),_Pe.forEach(t),jLr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(k0.$$.fragment,Si),DLr=i(Si),B6e=n(Si,"P",{});var aTt=s(B6e);NLr=r(aTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aTt.forEach(t),qLr=i(Si),kf=n(Si,"P",{});var fQ=s(kf);OLr=r(fQ,`Note:
Loading a model from its configuration file does `),x6e=n(fQ,"STRONG",{});var nTt=s(x6e);GLr=r(nTt,"not"),nTt.forEach(t),XLr=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),k6e=n(fQ,"CODE",{});var sTt=s(k6e);VLr=r(sTt,"from_pretrained()"),sTt.forEach(t),zLr=r(fQ,"to load the model weights."),fQ.forEach(t),WLr=i(Si),R6e=n(Si,"P",{});var lTt=s(R6e);QLr=r(lTt,"Examples:"),lTt.forEach(t),HLr=i(Si),m(R0.$$.fragment,Si),Si.forEach(t),ULr=i(Ri),jo=n(Ri,"DIV",{class:!0});var Da=s(jo);m(S0.$$.fragment,Da),JLr=i(Da),S6e=n(Da,"P",{});var iTt=s(S6e);YLr=r(iTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iTt.forEach(t),KLr=i(Da),Nn=n(Da,"P",{});var zM=s(Nn);ZLr=r(zM,"The model class to instantiate is selected based on the "),P6e=n(zM,"CODE",{});var dTt=s(P6e);e7r=r(dTt,"model_type"),dTt.forEach(t),o7r=r(zM,` property of the config object (either
passed as an argument or loaded from `),$6e=n(zM,"CODE",{});var cTt=s($6e);r7r=r(cTt,"pretrained_model_name_or_path"),cTt.forEach(t),t7r=r(zM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=n(zM,"CODE",{});var fTt=s(I6e);a7r=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),n7r=r(zM,":"),zM.forEach(t),s7r=i(Da),P0=n(Da,"UL",{});var uPe=s(P0);VC=n(uPe,"LI",{});var txe=s(VC);j6e=n(txe,"STRONG",{});var mTt=s(j6e);l7r=r(mTt,"beit"),mTt.forEach(t),i7r=r(txe," \u2014 "),vz=n(txe,"A",{href:!0});var gTt=s(vz);d7r=r(gTt,"FlaxBeitForImageClassification"),gTt.forEach(t),c7r=r(txe," (BEiT model)"),txe.forEach(t),f7r=i(uPe),zC=n(uPe,"LI",{});var axe=s(zC);D6e=n(axe,"STRONG",{});var hTt=s(D6e);m7r=r(hTt,"vit"),hTt.forEach(t),g7r=r(axe," \u2014 "),Tz=n(axe,"A",{href:!0});var pTt=s(Tz);h7r=r(pTt,"FlaxViTForImageClassification"),pTt.forEach(t),p7r=r(axe," (ViT model)"),axe.forEach(t),uPe.forEach(t),_7r=i(Da),N6e=n(Da,"P",{});var _Tt=s(N6e);u7r=r(_Tt,"Examples:"),_Tt.forEach(t),b7r=i(Da),m($0.$$.fragment,Da),Da.forEach(t),Ri.forEach(t),nRe=i(d),Rf=n(d,"H2",{class:!0});var bPe=s(Rf);WC=n(bPe,"A",{id:!0,class:!0,href:!0});var uTt=s(WC);q6e=n(uTt,"SPAN",{});var bTt=s(q6e);m(I0.$$.fragment,bTt),bTt.forEach(t),uTt.forEach(t),v7r=i(bPe),O6e=n(bPe,"SPAN",{});var vTt=s(O6e);T7r=r(vTt,"FlaxAutoModelForVision2Seq"),vTt.forEach(t),bPe.forEach(t),sRe=i(d),Xr=n(d,"DIV",{class:!0});var Pi=s(Xr);m(j0.$$.fragment,Pi),F7r=i(Pi),Sf=n(Pi,"P",{});var mQ=s(Sf);C7r=r(mQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),G6e=n(mQ,"CODE",{});var TTt=s(G6e);M7r=r(TTt,"from_pretrained()"),TTt.forEach(t),E7r=r(mQ,"class method or the "),X6e=n(mQ,"CODE",{});var FTt=s(X6e);y7r=r(FTt,"from_config()"),FTt.forEach(t),w7r=r(mQ,`class
method.`),mQ.forEach(t),A7r=i(Pi),D0=n(Pi,"P",{});var vPe=s(D0);L7r=r(vPe,"This class cannot be instantiated directly using "),V6e=n(vPe,"CODE",{});var CTt=s(V6e);B7r=r(CTt,"__init__()"),CTt.forEach(t),x7r=r(vPe," (throws an error)."),vPe.forEach(t),k7r=i(Pi),jt=n(Pi,"DIV",{class:!0});var $i=s(jt);m(N0.$$.fragment,$i),R7r=i($i),z6e=n($i,"P",{});var MTt=s(z6e);S7r=r(MTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MTt.forEach(t),P7r=i($i),Pf=n($i,"P",{});var gQ=s(Pf);$7r=r(gQ,`Note:
Loading a model from its configuration file does `),W6e=n(gQ,"STRONG",{});var ETt=s(W6e);I7r=r(ETt,"not"),ETt.forEach(t),j7r=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Q6e=n(gQ,"CODE",{});var yTt=s(Q6e);D7r=r(yTt,"from_pretrained()"),yTt.forEach(t),N7r=r(gQ,"to load the model weights."),gQ.forEach(t),q7r=i($i),H6e=n($i,"P",{});var wTt=s(H6e);O7r=r(wTt,"Examples:"),wTt.forEach(t),G7r=i($i),m(q0.$$.fragment,$i),$i.forEach(t),X7r=i(Pi),Do=n(Pi,"DIV",{class:!0});var Na=s(Do);m(O0.$$.fragment,Na),V7r=i(Na),U6e=n(Na,"P",{});var ATt=s(U6e);z7r=r(ATt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ATt.forEach(t),W7r=i(Na),qn=n(Na,"P",{});var WM=s(qn);Q7r=r(WM,"The model class to instantiate is selected based on the "),J6e=n(WM,"CODE",{});var LTt=s(J6e);H7r=r(LTt,"model_type"),LTt.forEach(t),U7r=r(WM,` property of the config object (either
passed as an argument or loaded from `),Y6e=n(WM,"CODE",{});var BTt=s(Y6e);J7r=r(BTt,"pretrained_model_name_or_path"),BTt.forEach(t),Y7r=r(WM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=n(WM,"CODE",{});var xTt=s(K6e);K7r=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),Z7r=r(WM,":"),WM.forEach(t),eBr=i(Na),Z6e=n(Na,"UL",{});var kTt=s(Z6e);QC=n(kTt,"LI",{});var nxe=s(QC);eTe=n(nxe,"STRONG",{});var RTt=s(eTe);oBr=r(RTt,"vision-encoder-decoder"),RTt.forEach(t),rBr=r(nxe," \u2014 "),Fz=n(nxe,"A",{href:!0});var STt=s(Fz);tBr=r(STt,"FlaxVisionEncoderDecoderModel"),STt.forEach(t),aBr=r(nxe," (Vision Encoder decoder model)"),nxe.forEach(t),kTt.forEach(t),nBr=i(Na),oTe=n(Na,"P",{});var PTt=s(oTe);sBr=r(PTt,"Examples:"),PTt.forEach(t),lBr=i(Na),m(G0.$$.fragment,Na),Na.forEach(t),Pi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(XTt)),c(he,"id","auto-classes"),c(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(he,"href","#auto-classes"),c(de,"class","relative group"),c(On,"href","/docs/transformers/pr_15986/en/model_doc/auto#transformers.AutoConfig"),c(Xn,"href","/docs/transformers/pr_15986/en/model_doc/auto#transformers.AutoModel"),c(Vn,"href","/docs/transformers/pr_15986/en/model_doc/auto#transformers.AutoTokenizer"),c(Xi,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertModel"),c(qf,"id","extending-the-auto-classes"),c(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qf,"href","#extending-the-auto-classes"),c(Vi,"class","relative group"),c(Gf,"id","transformers.AutoConfig"),c(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gf,"href","#transformers.AutoConfig"),c(zi,"class","relative group"),c(WL,"href","/docs/transformers/pr_15986/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(QL,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertConfig"),c(HL,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartConfig"),c(UL,"href","/docs/transformers/pr_15986/en/model_doc/beit#transformers.BeitConfig"),c(JL,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertConfig"),c(YL,"href","/docs/transformers/pr_15986/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(KL,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ZL,"href","/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(e7,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(o7,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(r7,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertConfig"),c(t7,"href","/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineConfig"),c(a7,"href","/docs/transformers/pr_15986/en/model_doc/clip#transformers.CLIPConfig"),c(n7,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertConfig"),c(s7,"href","/docs/transformers/pr_15986/en/model_doc/convnext#transformers.ConvNextConfig"),c(l7,"href","/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLConfig"),c(i7,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(d7,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(c7,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaConfig"),c(f7,"href","/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(m7,"href","/docs/transformers/pr_15986/en/model_doc/deit#transformers.DeiTConfig"),c(g7,"href","/docs/transformers/pr_15986/en/model_doc/detr#transformers.DetrConfig"),c(h7,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertConfig"),c(p7,"href","/docs/transformers/pr_15986/en/model_doc/dpr#transformers.DPRConfig"),c(_7,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraConfig"),c(u7,"href","/docs/transformers/pr_15986/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(b7,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertConfig"),c(v7,"href","/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetConfig"),c(T7,"href","/docs/transformers/pr_15986/en/model_doc/fsmt#transformers.FSMTConfig"),c(F7,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelConfig"),c(C7,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Config"),c(M7,"href","/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(E7,"href","/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJConfig"),c(y7,"href","/docs/transformers/pr_15986/en/model_doc/hubert#transformers.HubertConfig"),c(w7,"href","/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertConfig"),c(A7,"href","/docs/transformers/pr_15986/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(L7,"href","/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(B7,"href","/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(x7,"href","/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDConfig"),c(k7,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerConfig"),c(R7,"href","/docs/transformers/pr_15986/en/model_doc/luke#transformers.LukeConfig"),c(S7,"href","/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertConfig"),c(P7,"href","/docs/transformers/pr_15986/en/model_doc/m2m_100#transformers.M2M100Config"),c($7,"href","/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianConfig"),c(I7,"href","/docs/transformers/pr_15986/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(j7,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartConfig"),c(D7,"href","/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(N7,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(q7,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetConfig"),c(O7,"href","/docs/transformers/pr_15986/en/model_doc/mt5#transformers.MT5Config"),c(G7,"href","/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(X7,"href","/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(V7,"href","/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusConfig"),c(z7,"href","/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverConfig"),c(W7,"href","/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartConfig"),c(Q7,"href","/docs/transformers/pr_15986/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(H7,"href","/docs/transformers/pr_15986/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(U7,"href","/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(J7,"href","/docs/transformers/pr_15986/en/model_doc/rag#transformers.RagConfig"),c(Y7,"href","/docs/transformers/pr_15986/en/model_doc/realm#transformers.RealmConfig"),c(K7,"href","/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerConfig"),c(Z7,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertConfig"),c(eB,"href","/docs/transformers/pr_15986/en/model_doc/retribert#transformers.RetriBertConfig"),c(oB,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaConfig"),c(rB,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerConfig"),c(tB,"href","/docs/transformers/pr_15986/en/model_doc/segformer#transformers.SegformerConfig"),c(aB,"href","/docs/transformers/pr_15986/en/model_doc/sew#transformers.SEWConfig"),c(nB,"href","/docs/transformers/pr_15986/en/model_doc/sew-d#transformers.SEWDConfig"),c(sB,"href","/docs/transformers/pr_15986/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(lB,"href","/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(iB,"href","/docs/transformers/pr_15986/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(dB,"href","/docs/transformers/pr_15986/en/model_doc/splinter#transformers.SplinterConfig"),c(cB,"href","/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(fB,"href","/docs/transformers/pr_15986/en/model_doc/swin#transformers.SwinConfig"),c(mB,"href","/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5Config"),c(gB,"href","/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasConfig"),c(hB,"href","/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(pB,"href","/docs/transformers/pr_15986/en/model_doc/trocr#transformers.TrOCRConfig"),c(_B,"href","/docs/transformers/pr_15986/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(uB,"href","/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(bB,"href","/docs/transformers/pr_15986/en/model_doc/vilt#transformers.ViltConfig"),c(vB,"href","/docs/transformers/pr_15986/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(TB,"href","/docs/transformers/pr_15986/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(FB,"href","/docs/transformers/pr_15986/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(CB,"href","/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTConfig"),c(MB,"href","/docs/transformers/pr_15986/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(EB,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(yB,"href","/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMConfig"),c(wB,"href","/docs/transformers/pr_15986/en/model_doc/xglm#transformers.XGLMConfig"),c(AB,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMConfig"),c(LB,"href","/docs/transformers/pr_15986/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(BB,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(xB,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(kB,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetConfig"),c(RB,"href","/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoConfig"),c(mo,"class","docstring"),c(Bg,"class","docstring"),c(Wo,"class","docstring"),c(xg,"id","transformers.AutoTokenizer"),c(xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xg,"href","#transformers.AutoTokenizer"),c(Qi,"class","relative group"),c(SB,"href","/docs/transformers/pr_15986/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(PB,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertTokenizer"),c($B,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(IB,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartTokenizer"),c(jB,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartTokenizerFast"),c(DB,"href","/docs/transformers/pr_15986/en/model_doc/barthez#transformers.BarthezTokenizer"),c(NB,"href","/docs/transformers/pr_15986/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(qB,"href","/docs/transformers/pr_15986/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(OB,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertTokenizer"),c(GB,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertTokenizerFast"),c(XB,"href","/docs/transformers/pr_15986/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(VB,"href","/docs/transformers/pr_15986/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(zB,"href","/docs/transformers/pr_15986/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(WB,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(QB,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(HB,"href","/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(UB,"href","/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(JB,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(YB,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(KB,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(ZB,"href","/docs/transformers/pr_15986/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(ex,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ox,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(rx,"href","/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineTokenizer"),c(tx,"href","/docs/transformers/pr_15986/en/model_doc/clip#transformers.CLIPTokenizer"),c(ax,"href","/docs/transformers/pr_15986/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(nx,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(sx,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(lx,"href","/docs/transformers/pr_15986/en/model_doc/cpm#transformers.CpmTokenizer"),c(ix,"href","/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(dx,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaTokenizer"),c(cx,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(fx,"href","/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(mx,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(gx,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(hx,"href","/docs/transformers/pr_15986/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(px,"href","/docs/transformers/pr_15986/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(_x,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraTokenizer"),c(ux,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(bx,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(vx,"href","/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetTokenizer"),c(Tx,"href","/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(Fx,"href","/docs/transformers/pr_15986/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(Cx,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelTokenizer"),c(Mx,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(Ex,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yx,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wx,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Ax,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Lx,"href","/docs/transformers/pr_15986/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Bx,"href","/docs/transformers/pr_15986/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(xx,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kx,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Rx,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Sx,"href","/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Px,"href","/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c($x,"href","/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(Ix,"href","/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(jx,"href","/docs/transformers/pr_15986/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Dx,"href","/docs/transformers/pr_15986/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Nx,"href","/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDTokenizer"),c(qx,"href","/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDTokenizerFast"),c(Ox,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Gx,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Xx,"href","/docs/transformers/pr_15986/en/model_doc/luke#transformers.LukeTokenizer"),c(Vx,"href","/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(zx,"href","/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Wx,"href","/docs/transformers/pr_15986/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Qx,"href","/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianTokenizer"),c(Hx,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartTokenizer"),c(Ux,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Jx,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Yx,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Kx,"href","/docs/transformers/pr_15986/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Zx,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(ek,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(ok,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(rk,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(tk,"href","/docs/transformers/pr_15986/en/model_doc/mt5#transformers.T5Tokenizer"),c(ak,"href","/docs/transformers/pr_15986/en/model_doc/mt5#transformers.T5TokenizerFast"),c(nk,"href","/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(sk,"href","/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(lk,"href","/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ik,"href","/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(dk,"href","/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ck,"href","/docs/transformers/pr_15986/en/model_doc/phobert#transformers.PhobertTokenizer"),c(fk,"href","/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartTokenizer"),c(mk,"href","/docs/transformers/pr_15986/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(gk,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertTokenizer"),c(hk,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertTokenizerFast"),c(pk,"href","/docs/transformers/pr_15986/en/model_doc/rag#transformers.RagTokenizer"),c(_k,"href","/docs/transformers/pr_15986/en/model_doc/realm#transformers.RealmTokenizer"),c(uk,"href","/docs/transformers/pr_15986/en/model_doc/realm#transformers.RealmTokenizerFast"),c(bk,"href","/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerTokenizer"),c(vk,"href","/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Tk,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Fk,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Ck,"href","/docs/transformers/pr_15986/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Mk,"href","/docs/transformers/pr_15986/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Ek,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yk,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wk,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Ak,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Lk,"href","/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Bk,"href","/docs/transformers/pr_15986/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(xk,"href","/docs/transformers/pr_15986/en/model_doc/splinter#transformers.SplinterTokenizer"),c(kk,"href","/docs/transformers/pr_15986/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Rk,"href","/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Sk,"href","/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Pk,"href","/docs/transformers/pr_15986/en/model_doc/mt5#transformers.T5Tokenizer"),c($k,"href","/docs/transformers/pr_15986/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Ik,"href","/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasTokenizer"),c(jk,"href","/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(Dk,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Nk,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(qk,"href","/docs/transformers/pr_15986/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Ok,"href","/docs/transformers/pr_15986/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Gk,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMTokenizer"),c(Xk,"href","/docs/transformers/pr_15986/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Vk,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(zk,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Wk,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Qk,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(go,"class","docstring"),c(sh,"class","docstring"),c(Qo,"class","docstring"),c(lh,"id","transformers.AutoFeatureExtractor"),c(lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lh,"href","#transformers.AutoFeatureExtractor"),c(Hi,"class","relative group"),c(Hk,"href","/docs/transformers/pr_15986/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Uk,"href","/docs/transformers/pr_15986/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Jk,"href","/docs/transformers/pr_15986/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Yk,"href","/docs/transformers/pr_15986/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Kk,"href","/docs/transformers/pr_15986/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Zk,"href","/docs/transformers/pr_15986/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(eR,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oR,"href","/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(rR,"href","/docs/transformers/pr_15986/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(tR,"href","/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(aR,"href","/docs/transformers/pr_15986/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(nR,"href","/docs/transformers/pr_15986/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(sR,"href","/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(lR,"href","/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iR,"href","/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dR,"href","/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cR,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($e,"class","docstring"),c(yh,"class","docstring"),c(Ho,"class","docstring"),c(wh,"id","transformers.AutoProcessor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoProcessor"),c(Ui,"class","relative group"),c(fR,"href","/docs/transformers/pr_15986/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(mR,"href","/docs/transformers/pr_15986/en/model_doc/clip#transformers.CLIPProcessor"),c(gR,"href","/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(hR,"href","/docs/transformers/pr_15986/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(pR,"href","/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(_R,"href","/docs/transformers/pr_15986/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(uR,"href","/docs/transformers/pr_15986/en/model_doc/trocr#transformers.TrOCRProcessor"),c(bR,"href","/docs/transformers/pr_15986/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(vR,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ie,"class","docstring"),c(Ih,"class","docstring"),c(Uo,"class","docstring"),c(jh,"id","transformers.AutoModel"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoModel"),c(Yi,"class","relative group"),c(Vr,"class","docstring"),c(TR,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertModel"),c(FR,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartModel"),c(CR,"href","/docs/transformers/pr_15986/en/model_doc/beit#transformers.BeitModel"),c(MR,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertModel"),c(ER,"href","/docs/transformers/pr_15986/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(yR,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdModel"),c(wR,"href","/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(AR,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(LR,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(BR,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertModel"),c(xR,"href","/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineModel"),c(kR,"href","/docs/transformers/pr_15986/en/model_doc/clip#transformers.CLIPModel"),c(RR,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertModel"),c(SR,"href","/docs/transformers/pr_15986/en/model_doc/convnext#transformers.ConvNextModel"),c(PR,"href","/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLModel"),c($R,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(IR,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(jR,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaModel"),c(DR,"href","/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(NR,"href","/docs/transformers/pr_15986/en/model_doc/deit#transformers.DeiTModel"),c(qR,"href","/docs/transformers/pr_15986/en/model_doc/detr#transformers.DetrModel"),c(OR,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertModel"),c(GR,"href","/docs/transformers/pr_15986/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(XR,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraModel"),c(VR,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertModel"),c(zR,"href","/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetModel"),c(WR,"href","/docs/transformers/pr_15986/en/model_doc/fsmt#transformers.FSMTModel"),c(QR,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelModel"),c(HR,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelBaseModel"),c(UR,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2Model"),c(JR,"href","/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(YR,"href","/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJModel"),c(KR,"href","/docs/transformers/pr_15986/en/model_doc/hubert#transformers.HubertModel"),c(ZR,"href","/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertModel"),c(eS,"href","/docs/transformers/pr_15986/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(oS,"href","/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(rS,"href","/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(tS,"href","/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDModel"),c(aS,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerModel"),c(nS,"href","/docs/transformers/pr_15986/en/model_doc/luke#transformers.LukeModel"),c(sS,"href","/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertModel"),c(lS,"href","/docs/transformers/pr_15986/en/model_doc/m2m_100#transformers.M2M100Model"),c(iS,"href","/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianModel"),c(dS,"href","/docs/transformers/pr_15986/en/model_doc/maskformer#transformers.MaskFormerModel"),c(cS,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartModel"),c(fS,"href","/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(mS,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertModel"),c(gS,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetModel"),c(hS,"href","/docs/transformers/pr_15986/en/model_doc/mt5#transformers.MT5Model"),c(pS,"href","/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerModel"),c(_S,"href","/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(uS,"href","/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusModel"),c(bS,"href","/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverModel"),c(vS,"href","/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartModel"),c(TS,"href","/docs/transformers/pr_15986/en/model_doc/poolformer#transformers.PoolFormerModel"),c(FS,"href","/docs/transformers/pr_15986/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(CS,"href","/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertModel"),c(MS,"href","/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerModel"),c(ES,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertModel"),c(yS,"href","/docs/transformers/pr_15986/en/model_doc/retribert#transformers.RetriBertModel"),c(wS,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaModel"),c(AS,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerModel"),c(LS,"href","/docs/transformers/pr_15986/en/model_doc/segformer#transformers.SegformerModel"),c(BS,"href","/docs/transformers/pr_15986/en/model_doc/sew#transformers.SEWModel"),c(xS,"href","/docs/transformers/pr_15986/en/model_doc/sew-d#transformers.SEWDModel"),c(kS,"href","/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(RS,"href","/docs/transformers/pr_15986/en/model_doc/splinter#transformers.SplinterModel"),c(SS,"href","/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(PS,"href","/docs/transformers/pr_15986/en/model_doc/swin#transformers.SwinModel"),c($S,"href","/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5Model"),c(IS,"href","/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasModel"),c(jS,"href","/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(DS,"href","/docs/transformers/pr_15986/en/model_doc/unispeech#transformers.UniSpeechModel"),c(NS,"href","/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(qS,"href","/docs/transformers/pr_15986/en/model_doc/vilt#transformers.ViltModel"),c(OS,"href","/docs/transformers/pr_15986/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(GS,"href","/docs/transformers/pr_15986/en/model_doc/visual_bert#transformers.VisualBertModel"),c(XS,"href","/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTModel"),c(VS,"href","/docs/transformers/pr_15986/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(zS,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(WS,"href","/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMModel"),c(QS,"href","/docs/transformers/pr_15986/en/model_doc/xglm#transformers.XGLMModel"),c(HS,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMModel"),c(US,"href","/docs/transformers/pr_15986/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(JS,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(YS,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(KS,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetModel"),c(ZS,"href","/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoModel"),c(je,"class","docstring"),c(Jo,"class","docstring"),c(u_,"id","transformers.AutoModelForPreTraining"),c(u_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u_,"href","#transformers.AutoModelForPreTraining"),c(ed,"class","relative group"),c(zr,"class","docstring"),c(eP,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertForPreTraining"),c(oP,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rP,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForPreTraining"),c(tP,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(aP,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(nP,"href","/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(sP,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(lP,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(iP,"href","/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(dP,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(cP,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForPreTraining"),c(fP,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(mP,"href","/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForPreTraining"),c(gP,"href","/docs/transformers/pr_15986/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(hP,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(pP,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(_P,"href","/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(uP,"href","/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(bP,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(vP,"href","/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(TP,"href","/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(FP,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(CP,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(MP,"href","/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(EP,"href","/docs/transformers/pr_15986/en/model_doc/retribert#transformers.RetriBertModel"),c(yP,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(wP,"href","/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(AP,"href","/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(LP,"href","/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(BP,"href","/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xP,"href","/docs/transformers/pr_15986/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(kP,"href","/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(RP,"href","/docs/transformers/pr_15986/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(SP,"href","/docs/transformers/pr_15986/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(PP,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c($P,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(IP,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jP,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DP,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(De,"class","docstring"),c(Yo,"class","docstring"),c(au,"id","transformers.AutoModelForCausalLM"),c(au,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(au,"href","#transformers.AutoModelForCausalLM"),c(td,"class","relative group"),c(Wr,"class","docstring"),c(NP,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartForCausalLM"),c(qP,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertLMHeadModel"),c(OP,"href","/docs/transformers/pr_15986/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(GP,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(XP,"href","/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(VP,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(zP,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(WP,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(QP,"href","/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(HP,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(UP,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForCausalLM"),c(JP,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(YP,"href","/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(KP,"href","/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(ZP,"href","/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianForCausalLM"),c(e$,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartForCausalLM"),c(o$,"href","/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(r$,"href","/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(t$,"href","/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(a$,"href","/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(n$,"href","/docs/transformers/pr_15986/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(s$,"href","/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(l$,"href","/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(i$,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(d$,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(c$,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(f$,"href","/docs/transformers/pr_15986/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(m$,"href","/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(g$,"href","/docs/transformers/pr_15986/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(h$,"href","/docs/transformers/pr_15986/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(p$,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_$,"href","/docs/transformers/pr_15986/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(u$,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(b$,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(v$,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ne,"class","docstring"),c(Ko,"class","docstring"),c(Ou,"id","transformers.AutoModelForMaskedLM"),c(Ou,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ou,"href","#transformers.AutoModelForMaskedLM"),c(sd,"class","relative group"),c(Qr,"class","docstring"),c(T$,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(F$,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(C$,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForMaskedLM"),c(M$,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(E$,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(y$,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(w$,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(A$,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(L$,"href","/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(B$,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(x$,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(k$,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(R$,"href","/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(S$,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(P$,"href","/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertForMaskedLM"),c($$,"href","/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(I$,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(j$,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(D$,"href","/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(N$,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(q$,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(O$,"href","/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(G$,"href","/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(X$,"href","/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(V$,"href","/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(z$,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(W$,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Q$,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(H$,"href","/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(U$,"href","/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(J$,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Y$,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(K$,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Z$,"href","/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(qe,"class","docstring"),c(Zo,"class","docstring"),c(E1,"id","transformers.AutoModelForSeq2SeqLM"),c(E1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E1,"href","#transformers.AutoModelForSeq2SeqLM"),c(dd,"class","relative group"),c(Hr,"class","docstring"),c(eI,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oI,"href","/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(rI,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(tI,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(aI,"href","/docs/transformers/pr_15986/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(nI,"href","/docs/transformers/pr_15986/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sI,"href","/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(lI,"href","/docs/transformers/pr_15986/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(iI,"href","/docs/transformers/pr_15986/en/model_doc/marian#transformers.MarianMTModel"),c(dI,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(cI,"href","/docs/transformers/pr_15986/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(fI,"href","/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(mI,"href","/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(gI,"href","/docs/transformers/pr_15986/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(hI,"href","/docs/transformers/pr_15986/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(pI,"href","/docs/transformers/pr_15986/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Oe,"class","docstring"),c(er,"class","docstring"),c(G1,"id","transformers.AutoModelForSequenceClassification"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForSequenceClassification"),c(md,"class","relative group"),c(Ur,"class","docstring"),c(_I,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(uI,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartForSequenceClassification"),c(bI,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForSequenceClassification"),c(vI,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(TI,"href","/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(FI,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(CI,"href","/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(MI,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(EI,"href","/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(yI,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(wI,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(AI,"href","/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(LI,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(BI,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(xI,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(kI,"href","/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(RI,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(SI,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(PI,"href","/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c($I,"href","/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(II,"href","/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(jI,"href","/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(DI,"href","/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(NI,"href","/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDForSequenceClassification"),c(qI,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(OI,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(GI,"href","/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(XI,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(VI,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(zI,"href","/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(WI,"href","/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(QI,"href","/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(HI,"href","/docs/transformers/pr_15986/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(UI,"href","/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(JI,"href","/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(YI,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(KI,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(ZI,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(ej,"href","/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(oj,"href","/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(rj,"href","/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(tj,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(aj,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(nj,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(sj,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(lj,"href","/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ge,"class","docstring"),c(or,"class","docstring"),c(Ib,"id","transformers.AutoModelForMultipleChoice"),c(Ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ib,"href","#transformers.AutoModelForMultipleChoice"),c(pd,"class","relative group"),c(Jr,"class","docstring"),c(ij,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(dj,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForMultipleChoice"),c(cj,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(fj,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(mj,"href","/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(gj,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(hj,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(pj,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(_j,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uj,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(bj,"href","/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(vj,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(Tj,"href","/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(Fj,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(Cj,"href","/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(Mj,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Ej,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(yj,"href","/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(wj,"href","/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Aj,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Lj,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Bj,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(xj,"href","/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(kj,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Rj,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Sj,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Pj,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c($j,"href","/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Xe,"class","docstring"),c(rr,"class","docstring"),c(m5,"id","transformers.AutoModelForNextSentencePrediction"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.AutoModelForNextSentencePrediction"),c(bd,"class","relative group"),c(Yr,"class","docstring"),c(Ij,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(jj,"href","/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Dj,"href","/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Nj,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(qj,"href","/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ve,"class","docstring"),c(tr,"class","docstring"),c(v5,"id","transformers.AutoModelForTokenClassification"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.AutoModelForTokenClassification"),c(Fd,"class","relative group"),c(Kr,"class","docstring"),c(Oj,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Gj,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForTokenClassification"),c(Xj,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Vj,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(zj,"href","/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Wj,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Qj,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Hj,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Uj,"href","/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Jj,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Yj,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Kj,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Zj,"href","/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(eD,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(oD,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(rD,"href","/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(tD,"href","/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(aD,"href","/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(nD,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(sD,"href","/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(lD,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(iD,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(dD,"href","/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(cD,"href","/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(fD,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(mD,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(gD,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(hD,"href","/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(pD,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(_D,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(uD,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(bD,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(vD,"href","/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ze,"class","docstring"),c(ar,"class","docstring"),c(e2,"id","transformers.AutoModelForQuestionAnswering"),c(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ed,"class","relative group"),c(Zr,"class","docstring"),c(TD,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(FD,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(CD,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(MD,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(ED,"href","/docs/transformers/pr_15986/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(yD,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(wD,"href","/docs/transformers/pr_15986/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(AD,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(LD,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(BD,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(xD,"href","/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(kD,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(RD,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(SD,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(PD,"href","/docs/transformers/pr_15986/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c($D,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(ID,"href","/docs/transformers/pr_15986/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(jD,"href","/docs/transformers/pr_15986/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(DD,"href","/docs/transformers/pr_15986/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(ND,"href","/docs/transformers/pr_15986/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(qD,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(OD,"href","/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(GD,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(XD,"href","/docs/transformers/pr_15986/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(VD,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(zD,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(WD,"href","/docs/transformers/pr_15986/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(QD,"href","/docs/transformers/pr_15986/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(HD,"href","/docs/transformers/pr_15986/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(UD,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(JD,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(YD,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(KD,"href","/docs/transformers/pr_15986/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(ZD,"href","/docs/transformers/pr_15986/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(eN,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(oN,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(rN,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(tN,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(aN,"href","/docs/transformers/pr_15986/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(We,"class","docstring"),c(nr,"class","docstring"),c(O2,"id","transformers.AutoModelForTableQuestionAnswering"),c(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O2,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ad,"class","relative group"),c(et,"class","docstring"),c(nN,"href","/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(Qe,"class","docstring"),c(sr,"class","docstring"),c(V2,"id","transformers.AutoModelForImageClassification"),c(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V2,"href","#transformers.AutoModelForImageClassification"),c(xd,"class","relative group"),c(ot,"class","docstring"),c(sN,"href","/docs/transformers/pr_15986/en/model_doc/beit#transformers.BeitForImageClassification"),c(lN,"href","/docs/transformers/pr_15986/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(iN,"href","/docs/transformers/pr_15986/en/model_doc/deit#transformers.DeiTForImageClassification"),c(dN,"href","/docs/transformers/pr_15986/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(cN,"href","/docs/transformers/pr_15986/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(fN,"href","/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(mN,"href","/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(gN,"href","/docs/transformers/pr_15986/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(hN,"href","/docs/transformers/pr_15986/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(pN,"href","/docs/transformers/pr_15986/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(_N,"href","/docs/transformers/pr_15986/en/model_doc/swin#transformers.SwinForImageClassification"),c(uN,"href","/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTForImageClassification"),c(He,"class","docstring"),c(lr,"class","docstring"),c(Z2,"id","transformers.AutoModelForVision2Seq"),c(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z2,"href","#transformers.AutoModelForVision2Seq"),c(Sd,"class","relative group"),c(rt,"class","docstring"),c(bN,"href","/docs/transformers/pr_15986/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Ue,"class","docstring"),c(ir,"class","docstring"),c(rv,"id","transformers.AutoModelForAudioClassification"),c(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rv,"href","#transformers.AutoModelForAudioClassification"),c(Id,"class","relative group"),c(tt,"class","docstring"),c(vN,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(TN,"href","/docs/transformers/pr_15986/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(FN,"href","/docs/transformers/pr_15986/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(CN,"href","/docs/transformers/pr_15986/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(MN,"href","/docs/transformers/pr_15986/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(EN,"href","/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(yN,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(wN,"href","/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Je,"class","docstring"),c(dr,"class","docstring"),c(mv,"id","transformers.AutoModelForAudioFrameClassification"),c(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mv,"href","#transformers.AutoModelForAudioFrameClassification"),c(Nd,"class","relative group"),c(at,"class","docstring"),c(AN,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(LN,"href","/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(BN,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(xN,"href","/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(Ye,"class","docstring"),c(cr,"class","docstring"),c(bv,"id","transformers.AutoModelForCTC"),c(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bv,"href","#transformers.AutoModelForCTC"),c(Gd,"class","relative group"),c(nt,"class","docstring"),c(kN,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(RN,"href","/docs/transformers/pr_15986/en/model_doc/hubert#transformers.HubertForCTC"),c(SN,"href","/docs/transformers/pr_15986/en/model_doc/sew#transformers.SEWForCTC"),c(PN,"href","/docs/transformers/pr_15986/en/model_doc/sew-d#transformers.SEWDForCTC"),c($N,"href","/docs/transformers/pr_15986/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(IN,"href","/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(jN,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(DN,"href","/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ke,"class","docstring"),c(fr,"class","docstring"),c(Lv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(zd,"class","relative group"),c(st,"class","docstring"),c(NN,"href","/docs/transformers/pr_15986/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(qN,"href","/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(Ze,"class","docstring"),c(mr,"class","docstring"),c(Rv,"id","transformers.AutoModelForAudioXVector"),c(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rv,"href","#transformers.AutoModelForAudioXVector"),c(Hd,"class","relative group"),c(lt,"class","docstring"),c(ON,"href","/docs/transformers/pr_15986/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(GN,"href","/docs/transformers/pr_15986/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(XN,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(VN,"href","/docs/transformers/pr_15986/en/model_doc/wavlm#transformers.WavLMForXVector"),c(eo,"class","docstring"),c(gr,"class","docstring"),c(Dv,"id","transformers.AutoModelForMaskedImageModeling"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForMaskedImageModeling"),c(Yd,"class","relative group"),c(it,"class","docstring"),c(zN,"href","/docs/transformers/pr_15986/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(WN,"href","/docs/transformers/pr_15986/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(QN,"href","/docs/transformers/pr_15986/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(oo,"class","docstring"),c(hr,"class","docstring"),c(Xv,"id","transformers.AutoModelForObjectDetection"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForObjectDetection"),c(oc,"class","relative group"),c(dt,"class","docstring"),c(HN,"href","/docs/transformers/pr_15986/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ro,"class","docstring"),c(pr,"class","docstring"),c(Wv,"id","transformers.AutoModelForImageSegmentation"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForImageSegmentation"),c(ac,"class","relative group"),c(ct,"class","docstring"),c(UN,"href","/docs/transformers/pr_15986/en/model_doc/detr#transformers.DetrForSegmentation"),c(to,"class","docstring"),c(_r,"class","docstring"),c(Uv,"id","transformers.AutoModelForSemanticSegmentation"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForSemanticSegmentation"),c(lc,"class","relative group"),c(ft,"class","docstring"),c(JN,"href","/docs/transformers/pr_15986/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(YN,"href","/docs/transformers/pr_15986/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ao,"class","docstring"),c(ur,"class","docstring"),c(Zv,"id","transformers.AutoModelForInstanceSegmentation"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForInstanceSegmentation"),c(cc,"class","relative group"),c(mt,"class","docstring"),c(KN,"href","/docs/transformers/pr_15986/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(no,"class","docstring"),c(br,"class","docstring"),c(r6,"id","transformers.TFAutoModel"),c(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r6,"href","#transformers.TFAutoModel"),c(gc,"class","relative group"),c(gt,"class","docstring"),c(ZN,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertModel"),c(eq,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.TFBartModel"),c(oq,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertModel"),c(rq,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(tq,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(aq,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertModel"),c(nq,"href","/docs/transformers/pr_15986/en/model_doc/clip#transformers.TFCLIPModel"),c(sq,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.TFConvBertModel"),c(lq,"href","/docs/transformers/pr_15986/en/model_doc/convnext#transformers.TFConvNextModel"),c(iq,"href","/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.TFCTRLModel"),c(dq,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.TFDebertaModel"),c(cq,"href","/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(fq,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(mq,"href","/docs/transformers/pr_15986/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(gq,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraModel"),c(hq,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(pq,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelModel"),c(_q,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(uq,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.TFGPT2Model"),c(bq,"href","/docs/transformers/pr_15986/en/model_doc/hubert#transformers.TFHubertModel"),c(vq,"href","/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Tq,"href","/docs/transformers/pr_15986/en/model_doc/led#transformers.TFLEDModel"),c(Fq,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.TFLongformerModel"),c(Cq,"href","/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Mq,"href","/docs/transformers/pr_15986/en/model_doc/marian#transformers.TFMarianModel"),c(Eq,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.TFMBartModel"),c(yq,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(wq,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Aq,"href","/docs/transformers/pr_15986/en/model_doc/mt5#transformers.TFMT5Model"),c(Lq,"href","/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Bq,"href","/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.TFPegasusModel"),c(xq,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertModel"),c(kq,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaModel"),c(Rq,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Sq,"href","/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Pq,"href","/docs/transformers/pr_15986/en/model_doc/t5#transformers.TFT5Model"),c($q,"href","/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TFTapasModel"),c(Iq,"href","/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(jq,"href","/docs/transformers/pr_15986/en/model_doc/vit#transformers.TFViTModel"),c(Dq,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Nq,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMModel"),c(qq,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Oq,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetModel"),c(ho,"class","docstring"),c(vr,"class","docstring"),c(V6,"id","transformers.TFAutoModelForPreTraining"),c(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V6,"href","#transformers.TFAutoModelForPreTraining"),c(_c,"class","relative group"),c(ht,"class","docstring"),c(Gq,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Xq,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Vq,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertForPreTraining"),c(zq,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Wq,"href","/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Qq,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Uq,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Jq,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Yq,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Kq,"href","/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Zq,"href","/docs/transformers/pr_15986/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(eO,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(oO,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rO,"href","/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(tO,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aO,"href","/docs/transformers/pr_15986/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(nO,"href","/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sO,"href","/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lO,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iO,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(dO,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(Tr,"class","docstring"),c(gT,"id","transformers.TFAutoModelForCausalLM"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.TFAutoModelForCausalLM"),c(vc,"class","relative group"),c(pt,"class","docstring"),c(cO,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(fO,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(mO,"href","/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(gO,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(hO,"href","/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(pO,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(_O,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(uO,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(bO,"href","/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(vO,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(TO,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(_o,"class","docstring"),c(Fr,"class","docstring"),c(yT,"id","transformers.TFAutoModelForImageClassification"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.TFAutoModelForImageClassification"),c(Cc,"class","relative group"),c(_t,"class","docstring"),c(FO,"href","/docs/transformers/pr_15986/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(CO,"href","/docs/transformers/pr_15986/en/model_doc/vit#transformers.TFViTForImageClassification"),c(uo,"class","docstring"),c(Cr,"class","docstring"),c(LT,"id","transformers.TFAutoModelForMaskedLM"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.TFAutoModelForMaskedLM"),c(yc,"class","relative group"),c(ut,"class","docstring"),c(MO,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(EO,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(yO,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(wO,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(AO,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(LO,"href","/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(BO,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(xO,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(kO,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RO,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(SO,"href","/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(PO,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c($O,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(IO,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(jO,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(DO,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NO,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(qO,"href","/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OO,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GO,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bo,"class","docstring"),c(Mr,"class","docstring"),c(UT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(bt,"class","docstring"),c(XO,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(WO,"href","/docs/transformers/pr_15986/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(QO,"href","/docs/transformers/pr_15986/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(HO,"href","/docs/transformers/pr_15986/en/model_doc/marian#transformers.TFMarianMTModel"),c(UO,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_15986/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(KO,"href","/docs/transformers/pr_15986/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vo,"class","docstring"),c(Er,"class","docstring"),c(s8,"id","transformers.TFAutoModelForSequenceClassification"),c(s8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s8,"href","#transformers.TFAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(vt,"class","docstring"),c(ZO,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(rG,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(tG,"href","/docs/transformers/pr_15986/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(aG,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(nG,"href","/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(sG,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(iG,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(dG,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(cG,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(fG,"href","/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(mG,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(gG,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(pG,"href","/docs/transformers/pr_15986/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(_G,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(uG,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(bG,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(vG,"href","/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(TG,"href","/docs/transformers/pr_15986/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(FG,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(CG,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(MG,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(To,"class","docstring"),c(yr,"class","docstring"),c(R8,"id","transformers.TFAutoModelForMultipleChoice"),c(R8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R8,"href","#transformers.TFAutoModelForMultipleChoice"),c(Pc,"class","relative group"),c(Tt,"class","docstring"),c(EG,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(yG,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(BG,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(xG,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(RG,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(SG,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c($G,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(jG,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(DG,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(NG,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(qG,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Fo,"class","docstring"),c(wr,"class","docstring"),c(J8,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(J8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J8,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(jc,"class","relative group"),c(Ft,"class","docstring"),c(OG,"href","/docs/transformers/pr_15986/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Co,"class","docstring"),c(Ar,"class","docstring"),c(K8,"id","transformers.TFAutoModelForTokenClassification"),c(K8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K8,"href","#transformers.TFAutoModelForTokenClassification"),c(qc,"class","relative group"),c(Ct,"class","docstring"),c(GG,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(XG,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(VG,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(zG,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(WG,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(QG,"href","/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(HG,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(UG,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(JG,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(YG,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(KG,"href","/docs/transformers/pr_15986/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(ZG,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(eX,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(oX,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(rX,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(tX,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(aX,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(nX,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(sX,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(lX,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Mo,"class","docstring"),c(Lr,"class","docstring"),c(vF,"id","transformers.TFAutoModelForQuestionAnswering"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(Mt,"class","docstring"),c(iX,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_15986/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_15986/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_15986/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_15986/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_15986/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(uX,"href","/docs/transformers/pr_15986/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_15986/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_15986/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_15986/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_15986/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_15986/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(yX,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_15986/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Eo,"class","docstring"),c(Br,"class","docstring"),c(NF,"id","transformers.TFAutoModelForVision2Seq"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.TFAutoModelForVision2Seq"),c(Wc,"class","relative group"),c(Et,"class","docstring"),c(AX,"href","/docs/transformers/pr_15986/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(yo,"class","docstring"),c(xr,"class","docstring"),c(OF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Uc,"class","relative group"),c(yt,"class","docstring"),c(LX,"href","/docs/transformers/pr_15986/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(wo,"class","docstring"),c(kr,"class","docstring"),c(XF,"id","transformers.FlaxAutoModel"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.FlaxAutoModel"),c(Kc,"class","relative group"),c(wt,"class","docstring"),c(BX,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertModel"),c(xX,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartModel"),c(kX,"href","/docs/transformers/pr_15986/en/model_doc/beit#transformers.FlaxBeitModel"),c(RX,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertModel"),c(SX,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(PX,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c($X,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(IX,"href","/docs/transformers/pr_15986/en/model_doc/clip#transformers.FlaxCLIPModel"),c(jX,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(DX,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraModel"),c(NX,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(qX,"href","/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(OX,"href","/docs/transformers/pr_15986/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(GX,"href","/docs/transformers/pr_15986/en/model_doc/marian#transformers.FlaxMarianModel"),c(XX,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.FlaxMBartModel"),c(VX,"href","/docs/transformers/pr_15986/en/model_doc/mt5#transformers.FlaxMT5Model"),c(zX,"href","/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(WX,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(QX,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(HX,"href","/docs/transformers/pr_15986/en/model_doc/t5#transformers.FlaxT5Model"),c(UX,"href","/docs/transformers/pr_15986/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(JX,"href","/docs/transformers/pr_15986/en/model_doc/vit#transformers.FlaxViTModel"),c(YX,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(KX,"href","/docs/transformers/pr_15986/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(ZX,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ao,"class","docstring"),c(Rr,"class","docstring"),c(p9,"id","transformers.FlaxAutoModelForCausalLM"),c(p9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p9,"href","#transformers.FlaxAutoModelForCausalLM"),c(of,"class","relative group"),c(At,"class","docstring"),c(eV,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(oV,"href","/docs/transformers/pr_15986/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(rV,"href","/docs/transformers/pr_15986/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(tV,"href","/docs/transformers/pr_15986/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(aV,"href","/docs/transformers/pr_15986/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Lo,"class","docstring"),c(Sr,"class","docstring"),c(F9,"id","transformers.FlaxAutoModelForPreTraining"),c(F9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F9,"href","#transformers.FlaxAutoModelForPreTraining"),c(af,"class","relative group"),c(Lt,"class","docstring"),c(nV,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(sV,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lV,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(iV,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(dV,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(cV,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fV,"href","/docs/transformers/pr_15986/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(mV,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gV,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hV,"href","/docs/transformers/pr_15986/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(pV,"href","/docs/transformers/pr_15986/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(_V,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Bo,"class","docstring"),c(Pr,"class","docstring"),c(P9,"id","transformers.FlaxAutoModelForMaskedLM"),c(P9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P9,"href","#transformers.FlaxAutoModelForMaskedLM"),c(lf,"class","relative group"),c(Bt,"class","docstring"),c(uV,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(bV,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vV,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(TV,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(FV,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(CV,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(MV,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(EV,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(yV,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(wV,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(xo,"class","docstring"),c($r,"class","docstring"),c(z9,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(z9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z9,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(ff,"class","relative group"),c(xt,"class","docstring"),c(AV,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_15986/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_15986/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(kV,"href","/docs/transformers/pr_15986/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(RV,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_15986/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_15986/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c($V,"href","/docs/transformers/pr_15986/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(Ir,"class","docstring"),c(oC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(hf,"class","relative group"),c(kt,"class","docstring"),c(IV,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(jV,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(DV,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(NV,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(qV,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(OV,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(GV,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(XV,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(VV,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(zV,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ro,"class","docstring"),c(jr,"class","docstring"),c(mC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(uf,"class","relative group"),c(Rt,"class","docstring"),c(WV,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_15986/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_15986/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(ez,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(So,"class","docstring"),c(Dr,"class","docstring"),c(MC,"id","transformers.FlaxAutoModelForTokenClassification"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Tf,"class","relative group"),c(St,"class","docstring"),c(rz,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(tz,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(az,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(nz,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(sz,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(lz,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(iz,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(dz,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Po,"class","docstring"),c(Nr,"class","docstring"),c(RC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Mf,"class","relative group"),c(Pt,"class","docstring"),c(cz,"href","/docs/transformers/pr_15986/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(fz,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(mz,"href","/docs/transformers/pr_15986/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(gz,"href","/docs/transformers/pr_15986/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(hz,"href","/docs/transformers/pr_15986/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(pz,"href","/docs/transformers/pr_15986/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(_z,"href","/docs/transformers/pr_15986/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(uz,"href","/docs/transformers/pr_15986/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c($o,"class","docstring"),c(qr,"class","docstring"),c(OC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(wf,"class","relative group"),c($t,"class","docstring"),c(bz,"href","/docs/transformers/pr_15986/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Io,"class","docstring"),c(Or,"class","docstring"),c(XC,"id","transformers.FlaxAutoModelForImageClassification"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Bf,"class","relative group"),c(It,"class","docstring"),c(vz,"href","/docs/transformers/pr_15986/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Tz,"href","/docs/transformers/pr_15986/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(jo,"class","docstring"),c(Gr,"class","docstring"),c(WC,"id","transformers.FlaxAutoModelForVision2Seq"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Rf,"class","relative group"),c(jt,"class","docstring"),c(Fz,"href","/docs/transformers/pr_15986/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Do,"class","docstring"),c(Xr,"class","docstring")},m(d,u){e(document.head,J),b(d,Pe,u),b(d,de,u),e(de,he),e(he,io),g(fe,io,null),e(de,Fe),e(de,Vo),e(Vo,ji),b(d,If,u),b(d,fa,u),e(fa,Di),e(fa,Ni),e(Ni,QM),e(fa,jf),b(d,Le,u),b(d,co,u),e(co,qi),e(co,On),e(On,HM),e(co,Gn),e(co,Xn),e(Xn,UM),e(co,Oi),e(co,Vn),e(Vn,JM),e(co,Gi),b(d,Df,u),g(qa,d,u),b(d,fo,u),b(d,pe,u),e(pe,qL),e(pe,Xi),e(Xi,OL),e(pe,GL),b(d,zo,u),b(d,Oa,u),e(Oa,XL),e(Oa,Nf),e(Nf,VL),e(Oa,TPe),b(d,sxe,u),b(d,Vi,u),e(Vi,qf),e(qf,hQ),g(YM,hQ,null),e(Vi,FPe),e(Vi,pQ),e(pQ,CPe),b(d,lxe,u),b(d,zn,u),e(zn,MPe),e(zn,_Q),e(_Q,EPe),e(zn,yPe),e(zn,uQ),e(uQ,wPe),e(zn,APe),b(d,ixe,u),g(KM,d,u),b(d,dxe,u),b(d,zL,u),e(zL,LPe),b(d,cxe,u),g(Of,d,u),b(d,fxe,u),b(d,zi,u),e(zi,Gf),e(Gf,bQ),g(ZM,bQ,null),e(zi,BPe),e(zi,vQ),e(vQ,xPe),b(d,mxe,u),b(d,Wo,u),g(e4,Wo,null),e(Wo,kPe),e(Wo,o4),e(o4,RPe),e(o4,WL),e(WL,SPe),e(o4,PPe),e(Wo,$Pe),e(Wo,r4),e(r4,IPe),e(r4,TQ),e(TQ,jPe),e(r4,DPe),e(Wo,NPe),e(Wo,mo),g(t4,mo,null),e(mo,qPe),e(mo,FQ),e(FQ,OPe),e(mo,GPe),e(mo,Wi),e(Wi,XPe),e(Wi,CQ),e(CQ,VPe),e(Wi,zPe),e(Wi,MQ),e(MQ,WPe),e(Wi,QPe),e(mo,HPe),e(mo,v),e(v,Xf),e(Xf,EQ),e(EQ,UPe),e(Xf,JPe),e(Xf,QL),e(QL,YPe),e(Xf,KPe),e(v,ZPe),e(v,Vf),e(Vf,yQ),e(yQ,e$e),e(Vf,o$e),e(Vf,HL),e(HL,r$e),e(Vf,t$e),e(v,a$e),e(v,zf),e(zf,wQ),e(wQ,n$e),e(zf,s$e),e(zf,UL),e(UL,l$e),e(zf,i$e),e(v,d$e),e(v,Wf),e(Wf,AQ),e(AQ,c$e),e(Wf,f$e),e(Wf,JL),e(JL,m$e),e(Wf,g$e),e(v,h$e),e(v,Qf),e(Qf,LQ),e(LQ,p$e),e(Qf,_$e),e(Qf,YL),e(YL,u$e),e(Qf,b$e),e(v,v$e),e(v,Hf),e(Hf,BQ),e(BQ,T$e),e(Hf,F$e),e(Hf,KL),e(KL,C$e),e(Hf,M$e),e(v,E$e),e(v,Uf),e(Uf,xQ),e(xQ,y$e),e(Uf,w$e),e(Uf,ZL),e(ZL,A$e),e(Uf,L$e),e(v,B$e),e(v,Jf),e(Jf,kQ),e(kQ,x$e),e(Jf,k$e),e(Jf,e7),e(e7,R$e),e(Jf,S$e),e(v,P$e),e(v,Yf),e(Yf,RQ),e(RQ,$$e),e(Yf,I$e),e(Yf,o7),e(o7,j$e),e(Yf,D$e),e(v,N$e),e(v,Kf),e(Kf,SQ),e(SQ,q$e),e(Kf,O$e),e(Kf,r7),e(r7,G$e),e(Kf,X$e),e(v,V$e),e(v,Zf),e(Zf,PQ),e(PQ,z$e),e(Zf,W$e),e(Zf,t7),e(t7,Q$e),e(Zf,H$e),e(v,U$e),e(v,em),e(em,$Q),e($Q,J$e),e(em,Y$e),e(em,a7),e(a7,K$e),e(em,Z$e),e(v,eIe),e(v,om),e(om,IQ),e(IQ,oIe),e(om,rIe),e(om,n7),e(n7,tIe),e(om,aIe),e(v,nIe),e(v,rm),e(rm,jQ),e(jQ,sIe),e(rm,lIe),e(rm,s7),e(s7,iIe),e(rm,dIe),e(v,cIe),e(v,tm),e(tm,DQ),e(DQ,fIe),e(tm,mIe),e(tm,l7),e(l7,gIe),e(tm,hIe),e(v,pIe),e(v,am),e(am,NQ),e(NQ,_Ie),e(am,uIe),e(am,i7),e(i7,bIe),e(am,vIe),e(v,TIe),e(v,nm),e(nm,qQ),e(qQ,FIe),e(nm,CIe),e(nm,d7),e(d7,MIe),e(nm,EIe),e(v,yIe),e(v,sm),e(sm,OQ),e(OQ,wIe),e(sm,AIe),e(sm,c7),e(c7,LIe),e(sm,BIe),e(v,xIe),e(v,lm),e(lm,GQ),e(GQ,kIe),e(lm,RIe),e(lm,f7),e(f7,SIe),e(lm,PIe),e(v,$Ie),e(v,im),e(im,XQ),e(XQ,IIe),e(im,jIe),e(im,m7),e(m7,DIe),e(im,NIe),e(v,qIe),e(v,dm),e(dm,VQ),e(VQ,OIe),e(dm,GIe),e(dm,g7),e(g7,XIe),e(dm,VIe),e(v,zIe),e(v,cm),e(cm,zQ),e(zQ,WIe),e(cm,QIe),e(cm,h7),e(h7,HIe),e(cm,UIe),e(v,JIe),e(v,fm),e(fm,WQ),e(WQ,YIe),e(fm,KIe),e(fm,p7),e(p7,ZIe),e(fm,eje),e(v,oje),e(v,mm),e(mm,QQ),e(QQ,rje),e(mm,tje),e(mm,_7),e(_7,aje),e(mm,nje),e(v,sje),e(v,gm),e(gm,HQ),e(HQ,lje),e(gm,ije),e(gm,u7),e(u7,dje),e(gm,cje),e(v,fje),e(v,hm),e(hm,UQ),e(UQ,mje),e(hm,gje),e(hm,b7),e(b7,hje),e(hm,pje),e(v,_je),e(v,pm),e(pm,JQ),e(JQ,uje),e(pm,bje),e(pm,v7),e(v7,vje),e(pm,Tje),e(v,Fje),e(v,_m),e(_m,YQ),e(YQ,Cje),e(_m,Mje),e(_m,T7),e(T7,Eje),e(_m,yje),e(v,wje),e(v,um),e(um,KQ),e(KQ,Aje),e(um,Lje),e(um,F7),e(F7,Bje),e(um,xje),e(v,kje),e(v,bm),e(bm,ZQ),e(ZQ,Rje),e(bm,Sje),e(bm,C7),e(C7,Pje),e(bm,$je),e(v,Ije),e(v,vm),e(vm,eH),e(eH,jje),e(vm,Dje),e(vm,M7),e(M7,Nje),e(vm,qje),e(v,Oje),e(v,Tm),e(Tm,oH),e(oH,Gje),e(Tm,Xje),e(Tm,E7),e(E7,Vje),e(Tm,zje),e(v,Wje),e(v,Fm),e(Fm,rH),e(rH,Qje),e(Fm,Hje),e(Fm,y7),e(y7,Uje),e(Fm,Jje),e(v,Yje),e(v,Cm),e(Cm,tH),e(tH,Kje),e(Cm,Zje),e(Cm,w7),e(w7,eDe),e(Cm,oDe),e(v,rDe),e(v,Mm),e(Mm,aH),e(aH,tDe),e(Mm,aDe),e(Mm,A7),e(A7,nDe),e(Mm,sDe),e(v,lDe),e(v,Em),e(Em,nH),e(nH,iDe),e(Em,dDe),e(Em,L7),e(L7,cDe),e(Em,fDe),e(v,mDe),e(v,ym),e(ym,sH),e(sH,gDe),e(ym,hDe),e(ym,B7),e(B7,pDe),e(ym,_De),e(v,uDe),e(v,wm),e(wm,lH),e(lH,bDe),e(wm,vDe),e(wm,x7),e(x7,TDe),e(wm,FDe),e(v,CDe),e(v,Am),e(Am,iH),e(iH,MDe),e(Am,EDe),e(Am,k7),e(k7,yDe),e(Am,wDe),e(v,ADe),e(v,Lm),e(Lm,dH),e(dH,LDe),e(Lm,BDe),e(Lm,R7),e(R7,xDe),e(Lm,kDe),e(v,RDe),e(v,Bm),e(Bm,cH),e(cH,SDe),e(Bm,PDe),e(Bm,S7),e(S7,$De),e(Bm,IDe),e(v,jDe),e(v,xm),e(xm,fH),e(fH,DDe),e(xm,NDe),e(xm,P7),e(P7,qDe),e(xm,ODe),e(v,GDe),e(v,km),e(km,mH),e(mH,XDe),e(km,VDe),e(km,$7),e($7,zDe),e(km,WDe),e(v,QDe),e(v,Rm),e(Rm,gH),e(gH,HDe),e(Rm,UDe),e(Rm,I7),e(I7,JDe),e(Rm,YDe),e(v,KDe),e(v,Sm),e(Sm,hH),e(hH,ZDe),e(Sm,eNe),e(Sm,j7),e(j7,oNe),e(Sm,rNe),e(v,tNe),e(v,Pm),e(Pm,pH),e(pH,aNe),e(Pm,nNe),e(Pm,D7),e(D7,sNe),e(Pm,lNe),e(v,iNe),e(v,$m),e($m,_H),e(_H,dNe),e($m,cNe),e($m,N7),e(N7,fNe),e($m,mNe),e(v,gNe),e(v,Im),e(Im,uH),e(uH,hNe),e(Im,pNe),e(Im,q7),e(q7,_Ne),e(Im,uNe),e(v,bNe),e(v,jm),e(jm,bH),e(bH,vNe),e(jm,TNe),e(jm,O7),e(O7,FNe),e(jm,CNe),e(v,MNe),e(v,Dm),e(Dm,vH),e(vH,ENe),e(Dm,yNe),e(Dm,G7),e(G7,wNe),e(Dm,ANe),e(v,LNe),e(v,Nm),e(Nm,TH),e(TH,BNe),e(Nm,xNe),e(Nm,X7),e(X7,kNe),e(Nm,RNe),e(v,SNe),e(v,qm),e(qm,FH),e(FH,PNe),e(qm,$Ne),e(qm,V7),e(V7,INe),e(qm,jNe),e(v,DNe),e(v,Om),e(Om,CH),e(CH,NNe),e(Om,qNe),e(Om,z7),e(z7,ONe),e(Om,GNe),e(v,XNe),e(v,Gm),e(Gm,MH),e(MH,VNe),e(Gm,zNe),e(Gm,W7),e(W7,WNe),e(Gm,QNe),e(v,HNe),e(v,Xm),e(Xm,EH),e(EH,UNe),e(Xm,JNe),e(Xm,Q7),e(Q7,YNe),e(Xm,KNe),e(v,ZNe),e(v,Vm),e(Vm,yH),e(yH,eqe),e(Vm,oqe),e(Vm,H7),e(H7,rqe),e(Vm,tqe),e(v,aqe),e(v,zm),e(zm,wH),e(wH,nqe),e(zm,sqe),e(zm,U7),e(U7,lqe),e(zm,iqe),e(v,dqe),e(v,Wm),e(Wm,AH),e(AH,cqe),e(Wm,fqe),e(Wm,J7),e(J7,mqe),e(Wm,gqe),e(v,hqe),e(v,Qm),e(Qm,LH),e(LH,pqe),e(Qm,_qe),e(Qm,Y7),e(Y7,uqe),e(Qm,bqe),e(v,vqe),e(v,Hm),e(Hm,BH),e(BH,Tqe),e(Hm,Fqe),e(Hm,K7),e(K7,Cqe),e(Hm,Mqe),e(v,Eqe),e(v,Um),e(Um,xH),e(xH,yqe),e(Um,wqe),e(Um,Z7),e(Z7,Aqe),e(Um,Lqe),e(v,Bqe),e(v,Jm),e(Jm,kH),e(kH,xqe),e(Jm,kqe),e(Jm,eB),e(eB,Rqe),e(Jm,Sqe),e(v,Pqe),e(v,Ym),e(Ym,RH),e(RH,$qe),e(Ym,Iqe),e(Ym,oB),e(oB,jqe),e(Ym,Dqe),e(v,Nqe),e(v,Km),e(Km,SH),e(SH,qqe),e(Km,Oqe),e(Km,rB),e(rB,Gqe),e(Km,Xqe),e(v,Vqe),e(v,Zm),e(Zm,PH),e(PH,zqe),e(Zm,Wqe),e(Zm,tB),e(tB,Qqe),e(Zm,Hqe),e(v,Uqe),e(v,eg),e(eg,$H),e($H,Jqe),e(eg,Yqe),e(eg,aB),e(aB,Kqe),e(eg,Zqe),e(v,eOe),e(v,og),e(og,IH),e(IH,oOe),e(og,rOe),e(og,nB),e(nB,tOe),e(og,aOe),e(v,nOe),e(v,rg),e(rg,jH),e(jH,sOe),e(rg,lOe),e(rg,sB),e(sB,iOe),e(rg,dOe),e(v,cOe),e(v,tg),e(tg,DH),e(DH,fOe),e(tg,mOe),e(tg,lB),e(lB,gOe),e(tg,hOe),e(v,pOe),e(v,ag),e(ag,NH),e(NH,_Oe),e(ag,uOe),e(ag,iB),e(iB,bOe),e(ag,vOe),e(v,TOe),e(v,ng),e(ng,qH),e(qH,FOe),e(ng,COe),e(ng,dB),e(dB,MOe),e(ng,EOe),e(v,yOe),e(v,sg),e(sg,OH),e(OH,wOe),e(sg,AOe),e(sg,cB),e(cB,LOe),e(sg,BOe),e(v,xOe),e(v,lg),e(lg,GH),e(GH,kOe),e(lg,ROe),e(lg,fB),e(fB,SOe),e(lg,POe),e(v,$Oe),e(v,ig),e(ig,XH),e(XH,IOe),e(ig,jOe),e(ig,mB),e(mB,DOe),e(ig,NOe),e(v,qOe),e(v,dg),e(dg,VH),e(VH,OOe),e(dg,GOe),e(dg,gB),e(gB,XOe),e(dg,VOe),e(v,zOe),e(v,cg),e(cg,zH),e(zH,WOe),e(cg,QOe),e(cg,hB),e(hB,HOe),e(cg,UOe),e(v,JOe),e(v,fg),e(fg,WH),e(WH,YOe),e(fg,KOe),e(fg,pB),e(pB,ZOe),e(fg,eGe),e(v,oGe),e(v,mg),e(mg,QH),e(QH,rGe),e(mg,tGe),e(mg,_B),e(_B,aGe),e(mg,nGe),e(v,sGe),e(v,gg),e(gg,HH),e(HH,lGe),e(gg,iGe),e(gg,uB),e(uB,dGe),e(gg,cGe),e(v,fGe),e(v,hg),e(hg,UH),e(UH,mGe),e(hg,gGe),e(hg,bB),e(bB,hGe),e(hg,pGe),e(v,_Ge),e(v,pg),e(pg,JH),e(JH,uGe),e(pg,bGe),e(pg,vB),e(vB,vGe),e(pg,TGe),e(v,FGe),e(v,_g),e(_g,YH),e(YH,CGe),e(_g,MGe),e(_g,TB),e(TB,EGe),e(_g,yGe),e(v,wGe),e(v,ug),e(ug,KH),e(KH,AGe),e(ug,LGe),e(ug,FB),e(FB,BGe),e(ug,xGe),e(v,kGe),e(v,bg),e(bg,ZH),e(ZH,RGe),e(bg,SGe),e(bg,CB),e(CB,PGe),e(bg,$Ge),e(v,IGe),e(v,vg),e(vg,eU),e(eU,jGe),e(vg,DGe),e(vg,MB),e(MB,NGe),e(vg,qGe),e(v,OGe),e(v,Tg),e(Tg,oU),e(oU,GGe),e(Tg,XGe),e(Tg,EB),e(EB,VGe),e(Tg,zGe),e(v,WGe),e(v,Fg),e(Fg,rU),e(rU,QGe),e(Fg,HGe),e(Fg,yB),e(yB,UGe),e(Fg,JGe),e(v,YGe),e(v,Cg),e(Cg,tU),e(tU,KGe),e(Cg,ZGe),e(Cg,wB),e(wB,eXe),e(Cg,oXe),e(v,rXe),e(v,Mg),e(Mg,aU),e(aU,tXe),e(Mg,aXe),e(Mg,AB),e(AB,nXe),e(Mg,sXe),e(v,lXe),e(v,Eg),e(Eg,nU),e(nU,iXe),e(Eg,dXe),e(Eg,LB),e(LB,cXe),e(Eg,fXe),e(v,mXe),e(v,yg),e(yg,sU),e(sU,gXe),e(yg,hXe),e(yg,BB),e(BB,pXe),e(yg,_Xe),e(v,uXe),e(v,wg),e(wg,lU),e(lU,bXe),e(wg,vXe),e(wg,xB),e(xB,TXe),e(wg,FXe),e(v,CXe),e(v,Ag),e(Ag,iU),e(iU,MXe),e(Ag,EXe),e(Ag,kB),e(kB,yXe),e(Ag,wXe),e(v,AXe),e(v,Lg),e(Lg,dU),e(dU,LXe),e(Lg,BXe),e(Lg,RB),e(RB,xXe),e(Lg,kXe),e(mo,RXe),e(mo,cU),e(cU,SXe),e(mo,PXe),g(a4,mo,null),e(Wo,$Xe),e(Wo,Bg),g(n4,Bg,null),e(Bg,IXe),e(Bg,fU),e(fU,jXe),b(d,gxe,u),b(d,Qi,u),e(Qi,xg),e(xg,mU),g(s4,mU,null),e(Qi,DXe),e(Qi,gU),e(gU,NXe),b(d,hxe,u),b(d,Qo,u),g(l4,Qo,null),e(Qo,qXe),e(Qo,i4),e(i4,OXe),e(i4,SB),e(SB,GXe),e(i4,XXe),e(Qo,VXe),e(Qo,d4),e(d4,zXe),e(d4,hU),e(hU,WXe),e(d4,QXe),e(Qo,HXe),e(Qo,go),g(c4,go,null),e(go,UXe),e(go,pU),e(pU,JXe),e(go,YXe),e(go,Ga),e(Ga,KXe),e(Ga,_U),e(_U,ZXe),e(Ga,eVe),e(Ga,uU),e(uU,oVe),e(Ga,rVe),e(Ga,bU),e(bU,tVe),e(Ga,aVe),e(go,nVe),e(go,E),e(E,Wn),e(Wn,vU),e(vU,sVe),e(Wn,lVe),e(Wn,PB),e(PB,iVe),e(Wn,dVe),e(Wn,$B),e($B,cVe),e(Wn,fVe),e(E,mVe),e(E,Qn),e(Qn,TU),e(TU,gVe),e(Qn,hVe),e(Qn,IB),e(IB,pVe),e(Qn,_Ve),e(Qn,jB),e(jB,uVe),e(Qn,bVe),e(E,vVe),e(E,Hn),e(Hn,FU),e(FU,TVe),e(Hn,FVe),e(Hn,DB),e(DB,CVe),e(Hn,MVe),e(Hn,NB),e(NB,EVe),e(Hn,yVe),e(E,wVe),e(E,kg),e(kg,CU),e(CU,AVe),e(kg,LVe),e(kg,qB),e(qB,BVe),e(kg,xVe),e(E,kVe),e(E,Un),e(Un,MU),e(MU,RVe),e(Un,SVe),e(Un,OB),e(OB,PVe),e(Un,$Ve),e(Un,GB),e(GB,IVe),e(Un,jVe),e(E,DVe),e(E,Rg),e(Rg,EU),e(EU,NVe),e(Rg,qVe),e(Rg,XB),e(XB,OVe),e(Rg,GVe),e(E,XVe),e(E,Sg),e(Sg,yU),e(yU,VVe),e(Sg,zVe),e(Sg,VB),e(VB,WVe),e(Sg,QVe),e(E,HVe),e(E,Pg),e(Pg,wU),e(wU,UVe),e(Pg,JVe),e(Pg,zB),e(zB,YVe),e(Pg,KVe),e(E,ZVe),e(E,Jn),e(Jn,AU),e(AU,eze),e(Jn,oze),e(Jn,WB),e(WB,rze),e(Jn,tze),e(Jn,QB),e(QB,aze),e(Jn,nze),e(E,sze),e(E,Yn),e(Yn,LU),e(LU,lze),e(Yn,ize),e(Yn,HB),e(HB,dze),e(Yn,cze),e(Yn,UB),e(UB,fze),e(Yn,mze),e(E,gze),e(E,Kn),e(Kn,BU),e(BU,hze),e(Kn,pze),e(Kn,JB),e(JB,_ze),e(Kn,uze),e(Kn,YB),e(YB,bze),e(Kn,vze),e(E,Tze),e(E,$g),e($g,xU),e(xU,Fze),e($g,Cze),e($g,KB),e(KB,Mze),e($g,Eze),e(E,yze),e(E,Ig),e(Ig,kU),e(kU,wze),e(Ig,Aze),e(Ig,ZB),e(ZB,Lze),e(Ig,Bze),e(E,xze),e(E,Zn),e(Zn,RU),e(RU,kze),e(Zn,Rze),e(Zn,ex),e(ex,Sze),e(Zn,Pze),e(Zn,ox),e(ox,$ze),e(Zn,Ize),e(E,jze),e(E,jg),e(jg,SU),e(SU,Dze),e(jg,Nze),e(jg,rx),e(rx,qze),e(jg,Oze),e(E,Gze),e(E,es),e(es,PU),e(PU,Xze),e(es,Vze),e(es,tx),e(tx,zze),e(es,Wze),e(es,ax),e(ax,Qze),e(es,Hze),e(E,Uze),e(E,os),e(os,$U),e($U,Jze),e(os,Yze),e(os,nx),e(nx,Kze),e(os,Zze),e(os,sx),e(sx,eWe),e(os,oWe),e(E,rWe),e(E,rs),e(rs,IU),e(IU,tWe),e(rs,aWe),e(rs,lx),e(lx,nWe),e(rs,sWe),e(rs,jU),e(jU,lWe),e(rs,iWe),e(E,dWe),e(E,Dg),e(Dg,DU),e(DU,cWe),e(Dg,fWe),e(Dg,ix),e(ix,mWe),e(Dg,gWe),e(E,hWe),e(E,ts),e(ts,NU),e(NU,pWe),e(ts,_We),e(ts,dx),e(dx,uWe),e(ts,bWe),e(ts,cx),e(cx,vWe),e(ts,TWe),e(E,FWe),e(E,Ng),e(Ng,qU),e(qU,CWe),e(Ng,MWe),e(Ng,fx),e(fx,EWe),e(Ng,yWe),e(E,wWe),e(E,as),e(as,OU),e(OU,AWe),e(as,LWe),e(as,mx),e(mx,BWe),e(as,xWe),e(as,gx),e(gx,kWe),e(as,RWe),e(E,SWe),e(E,ns),e(ns,GU),e(GU,PWe),e(ns,$We),e(ns,hx),e(hx,IWe),e(ns,jWe),e(ns,px),e(px,DWe),e(ns,NWe),e(E,qWe),e(E,ss),e(ss,XU),e(XU,OWe),e(ss,GWe),e(ss,_x),e(_x,XWe),e(ss,VWe),e(ss,ux),e(ux,zWe),e(ss,WWe),e(E,QWe),e(E,qg),e(qg,VU),e(VU,HWe),e(qg,UWe),e(qg,bx),e(bx,JWe),e(qg,YWe),e(E,KWe),e(E,ls),e(ls,zU),e(zU,ZWe),e(ls,eQe),e(ls,vx),e(vx,oQe),e(ls,rQe),e(ls,Tx),e(Tx,tQe),e(ls,aQe),e(E,nQe),e(E,Og),e(Og,WU),e(WU,sQe),e(Og,lQe),e(Og,Fx),e(Fx,iQe),e(Og,dQe),e(E,cQe),e(E,is),e(is,QU),e(QU,fQe),e(is,mQe),e(is,Cx),e(Cx,gQe),e(is,hQe),e(is,Mx),e(Mx,pQe),e(is,_Qe),e(E,uQe),e(E,ds),e(ds,HU),e(HU,bQe),e(ds,vQe),e(ds,Ex),e(Ex,TQe),e(ds,FQe),e(ds,yx),e(yx,CQe),e(ds,MQe),e(E,EQe),e(E,cs),e(cs,UU),e(UU,yQe),e(cs,wQe),e(cs,wx),e(wx,AQe),e(cs,LQe),e(cs,Ax),e(Ax,BQe),e(cs,xQe),e(E,kQe),e(E,fs),e(fs,JU),e(JU,RQe),e(fs,SQe),e(fs,Lx),e(Lx,PQe),e(fs,$Qe),e(fs,Bx),e(Bx,IQe),e(fs,jQe),e(E,DQe),e(E,Gg),e(Gg,YU),e(YU,NQe),e(Gg,qQe),e(Gg,xx),e(xx,OQe),e(Gg,GQe),e(E,XQe),e(E,ms),e(ms,KU),e(KU,VQe),e(ms,zQe),e(ms,kx),e(kx,WQe),e(ms,QQe),e(ms,Rx),e(Rx,HQe),e(ms,UQe),e(E,JQe),e(E,gs),e(gs,ZU),e(ZU,YQe),e(gs,KQe),e(gs,Sx),e(Sx,ZQe),e(gs,eHe),e(gs,Px),e(Px,oHe),e(gs,rHe),e(E,tHe),e(E,hs),e(hs,eJ),e(eJ,aHe),e(hs,nHe),e(hs,$x),e($x,sHe),e(hs,lHe),e(hs,Ix),e(Ix,iHe),e(hs,dHe),e(E,cHe),e(E,ps),e(ps,oJ),e(oJ,fHe),e(ps,mHe),e(ps,jx),e(jx,gHe),e(ps,hHe),e(ps,Dx),e(Dx,pHe),e(ps,_He),e(E,uHe),e(E,_s),e(_s,rJ),e(rJ,bHe),e(_s,vHe),e(_s,Nx),e(Nx,THe),e(_s,FHe),e(_s,qx),e(qx,CHe),e(_s,MHe),e(E,EHe),e(E,us),e(us,tJ),e(tJ,yHe),e(us,wHe),e(us,Ox),e(Ox,AHe),e(us,LHe),e(us,Gx),e(Gx,BHe),e(us,xHe),e(E,kHe),e(E,Xg),e(Xg,aJ),e(aJ,RHe),e(Xg,SHe),e(Xg,Xx),e(Xx,PHe),e(Xg,$He),e(E,IHe),e(E,bs),e(bs,nJ),e(nJ,jHe),e(bs,DHe),e(bs,Vx),e(Vx,NHe),e(bs,qHe),e(bs,zx),e(zx,OHe),e(bs,GHe),e(E,XHe),e(E,Vg),e(Vg,sJ),e(sJ,VHe),e(Vg,zHe),e(Vg,Wx),e(Wx,WHe),e(Vg,QHe),e(E,HHe),e(E,zg),e(zg,lJ),e(lJ,UHe),e(zg,JHe),e(zg,Qx),e(Qx,YHe),e(zg,KHe),e(E,ZHe),e(E,vs),e(vs,iJ),e(iJ,eUe),e(vs,oUe),e(vs,Hx),e(Hx,rUe),e(vs,tUe),e(vs,Ux),e(Ux,aUe),e(vs,nUe),e(E,sUe),e(E,Ts),e(Ts,dJ),e(dJ,lUe),e(Ts,iUe),e(Ts,Jx),e(Jx,dUe),e(Ts,cUe),e(Ts,Yx),e(Yx,fUe),e(Ts,mUe),e(E,gUe),e(E,Wg),e(Wg,cJ),e(cJ,hUe),e(Wg,pUe),e(Wg,Kx),e(Kx,_Ue),e(Wg,uUe),e(E,bUe),e(E,Fs),e(Fs,fJ),e(fJ,vUe),e(Fs,TUe),e(Fs,Zx),e(Zx,FUe),e(Fs,CUe),e(Fs,ek),e(ek,MUe),e(Fs,EUe),e(E,yUe),e(E,Cs),e(Cs,mJ),e(mJ,wUe),e(Cs,AUe),e(Cs,ok),e(ok,LUe),e(Cs,BUe),e(Cs,rk),e(rk,xUe),e(Cs,kUe),e(E,RUe),e(E,Ms),e(Ms,gJ),e(gJ,SUe),e(Ms,PUe),e(Ms,tk),e(tk,$Ue),e(Ms,IUe),e(Ms,ak),e(ak,jUe),e(Ms,DUe),e(E,NUe),e(E,Es),e(Es,hJ),e(hJ,qUe),e(Es,OUe),e(Es,nk),e(nk,GUe),e(Es,XUe),e(Es,sk),e(sk,VUe),e(Es,zUe),e(E,WUe),e(E,ys),e(ys,pJ),e(pJ,QUe),e(ys,HUe),e(ys,lk),e(lk,UUe),e(ys,JUe),e(ys,ik),e(ik,YUe),e(ys,KUe),e(E,ZUe),e(E,Qg),e(Qg,_J),e(_J,eJe),e(Qg,oJe),e(Qg,dk),e(dk,rJe),e(Qg,tJe),e(E,aJe),e(E,Hg),e(Hg,uJ),e(uJ,nJe),e(Hg,sJe),e(Hg,ck),e(ck,lJe),e(Hg,iJe),e(E,dJe),e(E,Ug),e(Ug,bJ),e(bJ,cJe),e(Ug,fJe),e(Ug,fk),e(fk,mJe),e(Ug,gJe),e(E,hJe),e(E,Jg),e(Jg,vJ),e(vJ,pJe),e(Jg,_Je),e(Jg,mk),e(mk,uJe),e(Jg,bJe),e(E,vJe),e(E,ws),e(ws,TJ),e(TJ,TJe),e(ws,FJe),e(ws,gk),e(gk,CJe),e(ws,MJe),e(ws,hk),e(hk,EJe),e(ws,yJe),e(E,wJe),e(E,Yg),e(Yg,FJ),e(FJ,AJe),e(Yg,LJe),e(Yg,pk),e(pk,BJe),e(Yg,xJe),e(E,kJe),e(E,As),e(As,CJ),e(CJ,RJe),e(As,SJe),e(As,_k),e(_k,PJe),e(As,$Je),e(As,uk),e(uk,IJe),e(As,jJe),e(E,DJe),e(E,Ls),e(Ls,MJ),e(MJ,NJe),e(Ls,qJe),e(Ls,bk),e(bk,OJe),e(Ls,GJe),e(Ls,vk),e(vk,XJe),e(Ls,VJe),e(E,zJe),e(E,Bs),e(Bs,EJ),e(EJ,WJe),e(Bs,QJe),e(Bs,Tk),e(Tk,HJe),e(Bs,UJe),e(Bs,Fk),e(Fk,JJe),e(Bs,YJe),e(E,KJe),e(E,xs),e(xs,yJ),e(yJ,ZJe),e(xs,eYe),e(xs,Ck),e(Ck,oYe),e(xs,rYe),e(xs,Mk),e(Mk,tYe),e(xs,aYe),e(E,nYe),e(E,ks),e(ks,wJ),e(wJ,sYe),e(ks,lYe),e(ks,Ek),e(Ek,iYe),e(ks,dYe),e(ks,yk),e(yk,cYe),e(ks,fYe),e(E,mYe),e(E,Rs),e(Rs,AJ),e(AJ,gYe),e(Rs,hYe),e(Rs,wk),e(wk,pYe),e(Rs,_Ye),e(Rs,Ak),e(Ak,uYe),e(Rs,bYe),e(E,vYe),e(E,Kg),e(Kg,LJ),e(LJ,TYe),e(Kg,FYe),e(Kg,Lk),e(Lk,CYe),e(Kg,MYe),e(E,EYe),e(E,Zg),e(Zg,BJ),e(BJ,yYe),e(Zg,wYe),e(Zg,Bk),e(Bk,AYe),e(Zg,LYe),e(E,BYe),e(E,Ss),e(Ss,xJ),e(xJ,xYe),e(Ss,kYe),e(Ss,xk),e(xk,RYe),e(Ss,SYe),e(Ss,kk),e(kk,PYe),e(Ss,$Ye),e(E,IYe),e(E,Ps),e(Ps,kJ),e(kJ,jYe),e(Ps,DYe),e(Ps,Rk),e(Rk,NYe),e(Ps,qYe),e(Ps,Sk),e(Sk,OYe),e(Ps,GYe),e(E,XYe),e(E,$s),e($s,RJ),e(RJ,VYe),e($s,zYe),e($s,Pk),e(Pk,WYe),e($s,QYe),e($s,$k),e($k,HYe),e($s,UYe),e(E,JYe),e(E,eh),e(eh,SJ),e(SJ,YYe),e(eh,KYe),e(eh,Ik),e(Ik,ZYe),e(eh,eKe),e(E,oKe),e(E,oh),e(oh,PJ),e(PJ,rKe),e(oh,tKe),e(oh,jk),e(jk,aKe),e(oh,nKe),e(E,sKe),e(E,rh),e(rh,$J),e($J,lKe),e(rh,iKe),e(rh,Dk),e(Dk,dKe),e(rh,cKe),e(E,fKe),e(E,th),e(th,IJ),e(IJ,mKe),e(th,gKe),e(th,Nk),e(Nk,hKe),e(th,pKe),e(E,_Ke),e(E,Is),e(Is,jJ),e(jJ,uKe),e(Is,bKe),e(Is,qk),e(qk,vKe),e(Is,TKe),e(Is,Ok),e(Ok,FKe),e(Is,CKe),e(E,MKe),e(E,ah),e(ah,DJ),e(DJ,EKe),e(ah,yKe),e(ah,Gk),e(Gk,wKe),e(ah,AKe),e(E,LKe),e(E,nh),e(nh,NJ),e(NJ,BKe),e(nh,xKe),e(nh,Xk),e(Xk,kKe),e(nh,RKe),e(E,SKe),e(E,js),e(js,qJ),e(qJ,PKe),e(js,$Ke),e(js,Vk),e(Vk,IKe),e(js,jKe),e(js,zk),e(zk,DKe),e(js,NKe),e(E,qKe),e(E,Ds),e(Ds,OJ),e(OJ,OKe),e(Ds,GKe),e(Ds,Wk),e(Wk,XKe),e(Ds,VKe),e(Ds,Qk),e(Qk,zKe),e(Ds,WKe),e(go,QKe),e(go,GJ),e(GJ,HKe),e(go,UKe),g(f4,go,null),e(Qo,JKe),e(Qo,sh),g(m4,sh,null),e(sh,YKe),e(sh,XJ),e(XJ,KKe),b(d,pxe,u),b(d,Hi,u),e(Hi,lh),e(lh,VJ),g(g4,VJ,null),e(Hi,ZKe),e(Hi,zJ),e(zJ,eZe),b(d,_xe,u),b(d,Ho,u),g(h4,Ho,null),e(Ho,oZe),e(Ho,p4),e(p4,rZe),e(p4,Hk),e(Hk,tZe),e(p4,aZe),e(Ho,nZe),e(Ho,_4),e(_4,sZe),e(_4,WJ),e(WJ,lZe),e(_4,iZe),e(Ho,dZe),e(Ho,$e),g(u4,$e,null),e($e,cZe),e($e,QJ),e(QJ,fZe),e($e,mZe),e($e,Xa),e(Xa,gZe),e(Xa,HJ),e(HJ,hZe),e(Xa,pZe),e(Xa,UJ),e(UJ,_Ze),e(Xa,uZe),e(Xa,JJ),e(JJ,bZe),e(Xa,vZe),e($e,TZe),e($e,ae),e(ae,ih),e(ih,YJ),e(YJ,FZe),e(ih,CZe),e(ih,Uk),e(Uk,MZe),e(ih,EZe),e(ae,yZe),e(ae,dh),e(dh,KJ),e(KJ,wZe),e(dh,AZe),e(dh,Jk),e(Jk,LZe),e(dh,BZe),e(ae,xZe),e(ae,ch),e(ch,ZJ),e(ZJ,kZe),e(ch,RZe),e(ch,Yk),e(Yk,SZe),e(ch,PZe),e(ae,$Ze),e(ae,fh),e(fh,eY),e(eY,IZe),e(fh,jZe),e(fh,Kk),e(Kk,DZe),e(fh,NZe),e(ae,qZe),e(ae,mh),e(mh,oY),e(oY,OZe),e(mh,GZe),e(mh,Zk),e(Zk,XZe),e(mh,VZe),e(ae,zZe),e(ae,gh),e(gh,rY),e(rY,WZe),e(gh,QZe),e(gh,eR),e(eR,HZe),e(gh,UZe),e(ae,JZe),e(ae,hh),e(hh,tY),e(tY,YZe),e(hh,KZe),e(hh,oR),e(oR,ZZe),e(hh,eeo),e(ae,oeo),e(ae,ph),e(ph,aY),e(aY,reo),e(ph,teo),e(ph,rR),e(rR,aeo),e(ph,neo),e(ae,seo),e(ae,_h),e(_h,nY),e(nY,leo),e(_h,ieo),e(_h,tR),e(tR,deo),e(_h,ceo),e(ae,feo),e(ae,uh),e(uh,sY),e(sY,meo),e(uh,geo),e(uh,aR),e(aR,heo),e(uh,peo),e(ae,_eo),e(ae,bh),e(bh,lY),e(lY,ueo),e(bh,beo),e(bh,nR),e(nR,veo),e(bh,Teo),e(ae,Feo),e(ae,vh),e(vh,iY),e(iY,Ceo),e(vh,Meo),e(vh,sR),e(sR,Eeo),e(vh,yeo),e(ae,weo),e(ae,Th),e(Th,dY),e(dY,Aeo),e(Th,Leo),e(Th,lR),e(lR,Beo),e(Th,xeo),e(ae,keo),e(ae,Fh),e(Fh,cY),e(cY,Reo),e(Fh,Seo),e(Fh,iR),e(iR,Peo),e(Fh,$eo),e(ae,Ieo),e(ae,Ch),e(Ch,fY),e(fY,jeo),e(Ch,Deo),e(Ch,dR),e(dR,Neo),e(Ch,qeo),e(ae,Oeo),e(ae,Mh),e(Mh,mY),e(mY,Geo),e(Mh,Xeo),e(Mh,cR),e(cR,Veo),e(Mh,zeo),e($e,Weo),g(Eh,$e,null),e($e,Qeo),e($e,gY),e(gY,Heo),e($e,Ueo),g(b4,$e,null),e(Ho,Jeo),e(Ho,yh),g(v4,yh,null),e(yh,Yeo),e(yh,hY),e(hY,Keo),b(d,uxe,u),b(d,Ui,u),e(Ui,wh),e(wh,pY),g(T4,pY,null),e(Ui,Zeo),e(Ui,_Y),e(_Y,eoo),b(d,bxe,u),b(d,Uo,u),g(F4,Uo,null),e(Uo,ooo),e(Uo,C4),e(C4,roo),e(C4,fR),e(fR,too),e(C4,aoo),e(Uo,noo),e(Uo,M4),e(M4,soo),e(M4,uY),e(uY,loo),e(M4,ioo),e(Uo,doo),e(Uo,Ie),g(E4,Ie,null),e(Ie,coo),e(Ie,bY),e(bY,foo),e(Ie,moo),e(Ie,Ji),e(Ji,goo),e(Ji,vY),e(vY,hoo),e(Ji,poo),e(Ji,TY),e(TY,_oo),e(Ji,uoo),e(Ie,boo),e(Ie,Be),e(Be,Ah),e(Ah,FY),e(FY,voo),e(Ah,Too),e(Ah,mR),e(mR,Foo),e(Ah,Coo),e(Be,Moo),e(Be,Lh),e(Lh,CY),e(CY,Eoo),e(Lh,yoo),e(Lh,gR),e(gR,woo),e(Lh,Aoo),e(Be,Loo),e(Be,Bh),e(Bh,MY),e(MY,Boo),e(Bh,xoo),e(Bh,hR),e(hR,koo),e(Bh,Roo),e(Be,Soo),e(Be,xh),e(xh,EY),e(EY,Poo),e(xh,$oo),e(xh,pR),e(pR,Ioo),e(xh,joo),e(Be,Doo),e(Be,kh),e(kh,yY),e(yY,Noo),e(kh,qoo),e(kh,_R),e(_R,Ooo),e(kh,Goo),e(Be,Xoo),e(Be,Rh),e(Rh,wY),e(wY,Voo),e(Rh,zoo),e(Rh,uR),e(uR,Woo),e(Rh,Qoo),e(Be,Hoo),e(Be,Sh),e(Sh,AY),e(AY,Uoo),e(Sh,Joo),e(Sh,bR),e(bR,Yoo),e(Sh,Koo),e(Be,Zoo),e(Be,Ph),e(Ph,LY),e(LY,ero),e(Ph,oro),e(Ph,vR),e(vR,rro),e(Ph,tro),e(Ie,aro),g($h,Ie,null),e(Ie,nro),e(Ie,BY),e(BY,sro),e(Ie,lro),g(y4,Ie,null),e(Uo,iro),e(Uo,Ih),g(w4,Ih,null),e(Ih,dro),e(Ih,xY),e(xY,cro),b(d,vxe,u),b(d,Yi,u),e(Yi,jh),e(jh,kY),g(A4,kY,null),e(Yi,fro),e(Yi,RY),e(RY,mro),b(d,Txe,u),b(d,Jo,u),g(L4,Jo,null),e(Jo,gro),e(Jo,Ki),e(Ki,hro),e(Ki,SY),e(SY,pro),e(Ki,_ro),e(Ki,PY),e(PY,uro),e(Ki,bro),e(Jo,vro),e(Jo,B4),e(B4,Tro),e(B4,$Y),e($Y,Fro),e(B4,Cro),e(Jo,Mro),e(Jo,Vr),g(x4,Vr,null),e(Vr,Ero),e(Vr,IY),e(IY,yro),e(Vr,wro),e(Vr,Zi),e(Zi,Aro),e(Zi,jY),e(jY,Lro),e(Zi,Bro),e(Zi,DY),e(DY,xro),e(Zi,kro),e(Vr,Rro),e(Vr,NY),e(NY,Sro),e(Vr,Pro),g(k4,Vr,null),e(Jo,$ro),e(Jo,je),g(R4,je,null),e(je,Iro),e(je,qY),e(qY,jro),e(je,Dro),e(je,Va),e(Va,Nro),e(Va,OY),e(OY,qro),e(Va,Oro),e(Va,GY),e(GY,Gro),e(Va,Xro),e(Va,XY),e(XY,Vro),e(Va,zro),e(je,Wro),e(je,F),e(F,Dh),e(Dh,VY),e(VY,Qro),e(Dh,Hro),e(Dh,TR),e(TR,Uro),e(Dh,Jro),e(F,Yro),e(F,Nh),e(Nh,zY),e(zY,Kro),e(Nh,Zro),e(Nh,FR),e(FR,eto),e(Nh,oto),e(F,rto),e(F,qh),e(qh,WY),e(WY,tto),e(qh,ato),e(qh,CR),e(CR,nto),e(qh,sto),e(F,lto),e(F,Oh),e(Oh,QY),e(QY,ito),e(Oh,dto),e(Oh,MR),e(MR,cto),e(Oh,fto),e(F,mto),e(F,Gh),e(Gh,HY),e(HY,gto),e(Gh,hto),e(Gh,ER),e(ER,pto),e(Gh,_to),e(F,uto),e(F,Xh),e(Xh,UY),e(UY,bto),e(Xh,vto),e(Xh,yR),e(yR,Tto),e(Xh,Fto),e(F,Cto),e(F,Vh),e(Vh,JY),e(JY,Mto),e(Vh,Eto),e(Vh,wR),e(wR,yto),e(Vh,wto),e(F,Ato),e(F,zh),e(zh,YY),e(YY,Lto),e(zh,Bto),e(zh,AR),e(AR,xto),e(zh,kto),e(F,Rto),e(F,Wh),e(Wh,KY),e(KY,Sto),e(Wh,Pto),e(Wh,LR),e(LR,$to),e(Wh,Ito),e(F,jto),e(F,Qh),e(Qh,ZY),e(ZY,Dto),e(Qh,Nto),e(Qh,BR),e(BR,qto),e(Qh,Oto),e(F,Gto),e(F,Hh),e(Hh,eK),e(eK,Xto),e(Hh,Vto),e(Hh,xR),e(xR,zto),e(Hh,Wto),e(F,Qto),e(F,Uh),e(Uh,oK),e(oK,Hto),e(Uh,Uto),e(Uh,kR),e(kR,Jto),e(Uh,Yto),e(F,Kto),e(F,Jh),e(Jh,rK),e(rK,Zto),e(Jh,eao),e(Jh,RR),e(RR,oao),e(Jh,rao),e(F,tao),e(F,Yh),e(Yh,tK),e(tK,aao),e(Yh,nao),e(Yh,SR),e(SR,sao),e(Yh,lao),e(F,iao),e(F,Kh),e(Kh,aK),e(aK,dao),e(Kh,cao),e(Kh,PR),e(PR,fao),e(Kh,mao),e(F,gao),e(F,Zh),e(Zh,nK),e(nK,hao),e(Zh,pao),e(Zh,$R),e($R,_ao),e(Zh,uao),e(F,bao),e(F,ep),e(ep,sK),e(sK,vao),e(ep,Tao),e(ep,IR),e(IR,Fao),e(ep,Cao),e(F,Mao),e(F,op),e(op,lK),e(lK,Eao),e(op,yao),e(op,jR),e(jR,wao),e(op,Aao),e(F,Lao),e(F,rp),e(rp,iK),e(iK,Bao),e(rp,xao),e(rp,DR),e(DR,kao),e(rp,Rao),e(F,Sao),e(F,tp),e(tp,dK),e(dK,Pao),e(tp,$ao),e(tp,NR),e(NR,Iao),e(tp,jao),e(F,Dao),e(F,ap),e(ap,cK),e(cK,Nao),e(ap,qao),e(ap,qR),e(qR,Oao),e(ap,Gao),e(F,Xao),e(F,np),e(np,fK),e(fK,Vao),e(np,zao),e(np,OR),e(OR,Wao),e(np,Qao),e(F,Hao),e(F,sp),e(sp,mK),e(mK,Uao),e(sp,Jao),e(sp,GR),e(GR,Yao),e(sp,Kao),e(F,Zao),e(F,lp),e(lp,gK),e(gK,eno),e(lp,ono),e(lp,XR),e(XR,rno),e(lp,tno),e(F,ano),e(F,ip),e(ip,hK),e(hK,nno),e(ip,sno),e(ip,VR),e(VR,lno),e(ip,ino),e(F,dno),e(F,dp),e(dp,pK),e(pK,cno),e(dp,fno),e(dp,zR),e(zR,mno),e(dp,gno),e(F,hno),e(F,cp),e(cp,_K),e(_K,pno),e(cp,_no),e(cp,WR),e(WR,uno),e(cp,bno),e(F,vno),e(F,Ns),e(Ns,uK),e(uK,Tno),e(Ns,Fno),e(Ns,QR),e(QR,Cno),e(Ns,Mno),e(Ns,HR),e(HR,Eno),e(Ns,yno),e(F,wno),e(F,fp),e(fp,bK),e(bK,Ano),e(fp,Lno),e(fp,UR),e(UR,Bno),e(fp,xno),e(F,kno),e(F,mp),e(mp,vK),e(vK,Rno),e(mp,Sno),e(mp,JR),e(JR,Pno),e(mp,$no),e(F,Ino),e(F,gp),e(gp,TK),e(TK,jno),e(gp,Dno),e(gp,YR),e(YR,Nno),e(gp,qno),e(F,Ono),e(F,hp),e(hp,FK),e(FK,Gno),e(hp,Xno),e(hp,KR),e(KR,Vno),e(hp,zno),e(F,Wno),e(F,pp),e(pp,CK),e(CK,Qno),e(pp,Hno),e(pp,ZR),e(ZR,Uno),e(pp,Jno),e(F,Yno),e(F,_p),e(_p,MK),e(MK,Kno),e(_p,Zno),e(_p,eS),e(eS,eso),e(_p,oso),e(F,rso),e(F,up),e(up,EK),e(EK,tso),e(up,aso),e(up,oS),e(oS,nso),e(up,sso),e(F,lso),e(F,bp),e(bp,yK),e(yK,iso),e(bp,dso),e(bp,rS),e(rS,cso),e(bp,fso),e(F,mso),e(F,vp),e(vp,wK),e(wK,gso),e(vp,hso),e(vp,tS),e(tS,pso),e(vp,_so),e(F,uso),e(F,Tp),e(Tp,AK),e(AK,bso),e(Tp,vso),e(Tp,aS),e(aS,Tso),e(Tp,Fso),e(F,Cso),e(F,Fp),e(Fp,LK),e(LK,Mso),e(Fp,Eso),e(Fp,nS),e(nS,yso),e(Fp,wso),e(F,Aso),e(F,Cp),e(Cp,BK),e(BK,Lso),e(Cp,Bso),e(Cp,sS),e(sS,xso),e(Cp,kso),e(F,Rso),e(F,Mp),e(Mp,xK),e(xK,Sso),e(Mp,Pso),e(Mp,lS),e(lS,$so),e(Mp,Iso),e(F,jso),e(F,Ep),e(Ep,kK),e(kK,Dso),e(Ep,Nso),e(Ep,iS),e(iS,qso),e(Ep,Oso),e(F,Gso),e(F,yp),e(yp,RK),e(RK,Xso),e(yp,Vso),e(yp,dS),e(dS,zso),e(yp,Wso),e(F,Qso),e(F,wp),e(wp,SK),e(SK,Hso),e(wp,Uso),e(wp,cS),e(cS,Jso),e(wp,Yso),e(F,Kso),e(F,Ap),e(Ap,PK),e(PK,Zso),e(Ap,elo),e(Ap,fS),e(fS,olo),e(Ap,rlo),e(F,tlo),e(F,Lp),e(Lp,$K),e($K,alo),e(Lp,nlo),e(Lp,mS),e(mS,slo),e(Lp,llo),e(F,ilo),e(F,Bp),e(Bp,IK),e(IK,dlo),e(Bp,clo),e(Bp,gS),e(gS,flo),e(Bp,mlo),e(F,glo),e(F,xp),e(xp,jK),e(jK,hlo),e(xp,plo),e(xp,hS),e(hS,_lo),e(xp,ulo),e(F,blo),e(F,kp),e(kp,DK),e(DK,vlo),e(kp,Tlo),e(kp,pS),e(pS,Flo),e(kp,Clo),e(F,Mlo),e(F,Rp),e(Rp,NK),e(NK,Elo),e(Rp,ylo),e(Rp,_S),e(_S,wlo),e(Rp,Alo),e(F,Llo),e(F,Sp),e(Sp,qK),e(qK,Blo),e(Sp,xlo),e(Sp,uS),e(uS,klo),e(Sp,Rlo),e(F,Slo),e(F,Pp),e(Pp,OK),e(OK,Plo),e(Pp,$lo),e(Pp,bS),e(bS,Ilo),e(Pp,jlo),e(F,Dlo),e(F,$p),e($p,GK),e(GK,Nlo),e($p,qlo),e($p,vS),e(vS,Olo),e($p,Glo),e(F,Xlo),e(F,Ip),e(Ip,XK),e(XK,Vlo),e(Ip,zlo),e(Ip,TS),e(TS,Wlo),e(Ip,Qlo),e(F,Hlo),e(F,jp),e(jp,VK),e(VK,Ulo),e(jp,Jlo),e(jp,FS),e(FS,Ylo),e(jp,Klo),e(F,Zlo),e(F,Dp),e(Dp,zK),e(zK,eio),e(Dp,oio),e(Dp,CS),e(CS,rio),e(Dp,tio),e(F,aio),e(F,Np),e(Np,WK),e(WK,nio),e(Np,sio),e(Np,MS),e(MS,lio),e(Np,iio),e(F,dio),e(F,qp),e(qp,QK),e(QK,cio),e(qp,fio),e(qp,ES),e(ES,mio),e(qp,gio),e(F,hio),e(F,Op),e(Op,HK),e(HK,pio),e(Op,_io),e(Op,yS),e(yS,uio),e(Op,bio),e(F,vio),e(F,Gp),e(Gp,UK),e(UK,Tio),e(Gp,Fio),e(Gp,wS),e(wS,Cio),e(Gp,Mio),e(F,Eio),e(F,Xp),e(Xp,JK),e(JK,yio),e(Xp,wio),e(Xp,AS),e(AS,Aio),e(Xp,Lio),e(F,Bio),e(F,Vp),e(Vp,YK),e(YK,xio),e(Vp,kio),e(Vp,LS),e(LS,Rio),e(Vp,Sio),e(F,Pio),e(F,zp),e(zp,KK),e(KK,$io),e(zp,Iio),e(zp,BS),e(BS,jio),e(zp,Dio),e(F,Nio),e(F,Wp),e(Wp,ZK),e(ZK,qio),e(Wp,Oio),e(Wp,xS),e(xS,Gio),e(Wp,Xio),e(F,Vio),e(F,Qp),e(Qp,eZ),e(eZ,zio),e(Qp,Wio),e(Qp,kS),e(kS,Qio),e(Qp,Hio),e(F,Uio),e(F,Hp),e(Hp,oZ),e(oZ,Jio),e(Hp,Yio),e(Hp,RS),e(RS,Kio),e(Hp,Zio),e(F,edo),e(F,Up),e(Up,rZ),e(rZ,odo),e(Up,rdo),e(Up,SS),e(SS,tdo),e(Up,ado),e(F,ndo),e(F,Jp),e(Jp,tZ),e(tZ,sdo),e(Jp,ldo),e(Jp,PS),e(PS,ido),e(Jp,ddo),e(F,cdo),e(F,Yp),e(Yp,aZ),e(aZ,fdo),e(Yp,mdo),e(Yp,$S),e($S,gdo),e(Yp,hdo),e(F,pdo),e(F,Kp),e(Kp,nZ),e(nZ,_do),e(Kp,udo),e(Kp,IS),e(IS,bdo),e(Kp,vdo),e(F,Tdo),e(F,Zp),e(Zp,sZ),e(sZ,Fdo),e(Zp,Cdo),e(Zp,jS),e(jS,Mdo),e(Zp,Edo),e(F,ydo),e(F,e_),e(e_,lZ),e(lZ,wdo),e(e_,Ado),e(e_,DS),e(DS,Ldo),e(e_,Bdo),e(F,xdo),e(F,o_),e(o_,iZ),e(iZ,kdo),e(o_,Rdo),e(o_,NS),e(NS,Sdo),e(o_,Pdo),e(F,$do),e(F,r_),e(r_,dZ),e(dZ,Ido),e(r_,jdo),e(r_,qS),e(qS,Ddo),e(r_,Ndo),e(F,qdo),e(F,t_),e(t_,cZ),e(cZ,Odo),e(t_,Gdo),e(t_,OS),e(OS,Xdo),e(t_,Vdo),e(F,zdo),e(F,a_),e(a_,fZ),e(fZ,Wdo),e(a_,Qdo),e(a_,GS),e(GS,Hdo),e(a_,Udo),e(F,Jdo),e(F,n_),e(n_,mZ),e(mZ,Ydo),e(n_,Kdo),e(n_,XS),e(XS,Zdo),e(n_,eco),e(F,oco),e(F,s_),e(s_,gZ),e(gZ,rco),e(s_,tco),e(s_,VS),e(VS,aco),e(s_,nco),e(F,sco),e(F,l_),e(l_,hZ),e(hZ,lco),e(l_,ico),e(l_,zS),e(zS,dco),e(l_,cco),e(F,fco),e(F,i_),e(i_,pZ),e(pZ,mco),e(i_,gco),e(i_,WS),e(WS,hco),e(i_,pco),e(F,_co),e(F,d_),e(d_,_Z),e(_Z,uco),e(d_,bco),e(d_,QS),e(QS,vco),e(d_,Tco),e(F,Fco),e(F,c_),e(c_,uZ),e(uZ,Cco),e(c_,Mco),e(c_,HS),e(HS,Eco),e(c_,yco),e(F,wco),e(F,f_),e(f_,bZ),e(bZ,Aco),e(f_,Lco),e(f_,US),e(US,Bco),e(f_,xco),e(F,kco),e(F,m_),e(m_,vZ),e(vZ,Rco),e(m_,Sco),e(m_,JS),e(JS,Pco),e(m_,$co),e(F,Ico),e(F,g_),e(g_,TZ),e(TZ,jco),e(g_,Dco),e(g_,YS),e(YS,Nco),e(g_,qco),e(F,Oco),e(F,h_),e(h_,FZ),e(FZ,Gco),e(h_,Xco),e(h_,KS),e(KS,Vco),e(h_,zco),e(F,Wco),e(F,p_),e(p_,CZ),e(CZ,Qco),e(p_,Hco),e(p_,ZS),e(ZS,Uco),e(p_,Jco),e(je,Yco),e(je,__),e(__,Kco),e(__,MZ),e(MZ,Zco),e(__,efo),e(__,EZ),e(EZ,ofo),e(je,rfo),e(je,yZ),e(yZ,tfo),e(je,afo),g(S4,je,null),b(d,Fxe,u),b(d,ed,u),e(ed,u_),e(u_,wZ),g(P4,wZ,null),e(ed,nfo),e(ed,AZ),e(AZ,sfo),b(d,Cxe,u),b(d,Yo,u),g($4,Yo,null),e(Yo,lfo),e(Yo,od),e(od,ifo),e(od,LZ),e(LZ,dfo),e(od,cfo),e(od,BZ),e(BZ,ffo),e(od,mfo),e(Yo,gfo),e(Yo,I4),e(I4,hfo),e(I4,xZ),e(xZ,pfo),e(I4,_fo),e(Yo,ufo),e(Yo,zr),g(j4,zr,null),e(zr,bfo),e(zr,kZ),e(kZ,vfo),e(zr,Tfo),e(zr,rd),e(rd,Ffo),e(rd,RZ),e(RZ,Cfo),e(rd,Mfo),e(rd,SZ),e(SZ,Efo),e(rd,yfo),e(zr,wfo),e(zr,PZ),e(PZ,Afo),e(zr,Lfo),g(D4,zr,null),e(Yo,Bfo),e(Yo,De),g(N4,De,null),e(De,xfo),e(De,$Z),e($Z,kfo),e(De,Rfo),e(De,za),e(za,Sfo),e(za,IZ),e(IZ,Pfo),e(za,$fo),e(za,jZ),e(jZ,Ifo),e(za,jfo),e(za,DZ),e(DZ,Dfo),e(za,Nfo),e(De,qfo),e(De,k),e(k,b_),e(b_,NZ),e(NZ,Ofo),e(b_,Gfo),e(b_,eP),e(eP,Xfo),e(b_,Vfo),e(k,zfo),e(k,v_),e(v_,qZ),e(qZ,Wfo),e(v_,Qfo),e(v_,oP),e(oP,Hfo),e(v_,Ufo),e(k,Jfo),e(k,T_),e(T_,OZ),e(OZ,Yfo),e(T_,Kfo),e(T_,rP),e(rP,Zfo),e(T_,emo),e(k,omo),e(k,F_),e(F_,GZ),e(GZ,rmo),e(F_,tmo),e(F_,tP),e(tP,amo),e(F_,nmo),e(k,smo),e(k,C_),e(C_,XZ),e(XZ,lmo),e(C_,imo),e(C_,aP),e(aP,dmo),e(C_,cmo),e(k,fmo),e(k,M_),e(M_,VZ),e(VZ,mmo),e(M_,gmo),e(M_,nP),e(nP,hmo),e(M_,pmo),e(k,_mo),e(k,E_),e(E_,zZ),e(zZ,umo),e(E_,bmo),e(E_,sP),e(sP,vmo),e(E_,Tmo),e(k,Fmo),e(k,y_),e(y_,WZ),e(WZ,Cmo),e(y_,Mmo),e(y_,lP),e(lP,Emo),e(y_,ymo),e(k,wmo),e(k,w_),e(w_,QZ),e(QZ,Amo),e(w_,Lmo),e(w_,iP),e(iP,Bmo),e(w_,xmo),e(k,kmo),e(k,A_),e(A_,HZ),e(HZ,Rmo),e(A_,Smo),e(A_,dP),e(dP,Pmo),e(A_,$mo),e(k,Imo),e(k,L_),e(L_,UZ),e(UZ,jmo),e(L_,Dmo),e(L_,cP),e(cP,Nmo),e(L_,qmo),e(k,Omo),e(k,B_),e(B_,JZ),e(JZ,Gmo),e(B_,Xmo),e(B_,fP),e(fP,Vmo),e(B_,zmo),e(k,Wmo),e(k,x_),e(x_,YZ),e(YZ,Qmo),e(x_,Hmo),e(x_,mP),e(mP,Umo),e(x_,Jmo),e(k,Ymo),e(k,k_),e(k_,KZ),e(KZ,Kmo),e(k_,Zmo),e(k_,gP),e(gP,ego),e(k_,ogo),e(k,rgo),e(k,R_),e(R_,ZZ),e(ZZ,tgo),e(R_,ago),e(R_,hP),e(hP,ngo),e(R_,sgo),e(k,lgo),e(k,S_),e(S_,eee),e(eee,igo),e(S_,dgo),e(S_,pP),e(pP,cgo),e(S_,fgo),e(k,mgo),e(k,P_),e(P_,oee),e(oee,ggo),e(P_,hgo),e(P_,_P),e(_P,pgo),e(P_,_go),e(k,ugo),e(k,$_),e($_,ree),e(ree,bgo),e($_,vgo),e($_,uP),e(uP,Tgo),e($_,Fgo),e(k,Cgo),e(k,I_),e(I_,tee),e(tee,Mgo),e(I_,Ego),e(I_,bP),e(bP,ygo),e(I_,wgo),e(k,Ago),e(k,j_),e(j_,aee),e(aee,Lgo),e(j_,Bgo),e(j_,vP),e(vP,xgo),e(j_,kgo),e(k,Rgo),e(k,D_),e(D_,nee),e(nee,Sgo),e(D_,Pgo),e(D_,TP),e(TP,$go),e(D_,Igo),e(k,jgo),e(k,N_),e(N_,see),e(see,Dgo),e(N_,Ngo),e(N_,FP),e(FP,qgo),e(N_,Ogo),e(k,Ggo),e(k,q_),e(q_,lee),e(lee,Xgo),e(q_,Vgo),e(q_,CP),e(CP,zgo),e(q_,Wgo),e(k,Qgo),e(k,O_),e(O_,iee),e(iee,Hgo),e(O_,Ugo),e(O_,MP),e(MP,Jgo),e(O_,Ygo),e(k,Kgo),e(k,G_),e(G_,dee),e(dee,Zgo),e(G_,eho),e(G_,EP),e(EP,oho),e(G_,rho),e(k,tho),e(k,X_),e(X_,cee),e(cee,aho),e(X_,nho),e(X_,yP),e(yP,sho),e(X_,lho),e(k,iho),e(k,V_),e(V_,fee),e(fee,dho),e(V_,cho),e(V_,wP),e(wP,fho),e(V_,mho),e(k,gho),e(k,z_),e(z_,mee),e(mee,hho),e(z_,pho),e(z_,AP),e(AP,_ho),e(z_,uho),e(k,bho),e(k,W_),e(W_,gee),e(gee,vho),e(W_,Tho),e(W_,LP),e(LP,Fho),e(W_,Cho),e(k,Mho),e(k,Q_),e(Q_,hee),e(hee,Eho),e(Q_,yho),e(Q_,BP),e(BP,who),e(Q_,Aho),e(k,Lho),e(k,H_),e(H_,pee),e(pee,Bho),e(H_,xho),e(H_,xP),e(xP,kho),e(H_,Rho),e(k,Sho),e(k,U_),e(U_,_ee),e(_ee,Pho),e(U_,$ho),e(U_,kP),e(kP,Iho),e(U_,jho),e(k,Dho),e(k,J_),e(J_,uee),e(uee,Nho),e(J_,qho),e(J_,RP),e(RP,Oho),e(J_,Gho),e(k,Xho),e(k,Y_),e(Y_,bee),e(bee,Vho),e(Y_,zho),e(Y_,SP),e(SP,Who),e(Y_,Qho),e(k,Hho),e(k,K_),e(K_,vee),e(vee,Uho),e(K_,Jho),e(K_,PP),e(PP,Yho),e(K_,Kho),e(k,Zho),e(k,Z_),e(Z_,Tee),e(Tee,epo),e(Z_,opo),e(Z_,$P),e($P,rpo),e(Z_,tpo),e(k,apo),e(k,eu),e(eu,Fee),e(Fee,npo),e(eu,spo),e(eu,IP),e(IP,lpo),e(eu,ipo),e(k,dpo),e(k,ou),e(ou,Cee),e(Cee,cpo),e(ou,fpo),e(ou,jP),e(jP,mpo),e(ou,gpo),e(k,hpo),e(k,ru),e(ru,Mee),e(Mee,ppo),e(ru,_po),e(ru,DP),e(DP,upo),e(ru,bpo),e(De,vpo),e(De,tu),e(tu,Tpo),e(tu,Eee),e(Eee,Fpo),e(tu,Cpo),e(tu,yee),e(yee,Mpo),e(De,Epo),e(De,wee),e(wee,ypo),e(De,wpo),g(q4,De,null),b(d,Mxe,u),b(d,td,u),e(td,au),e(au,Aee),g(O4,Aee,null),e(td,Apo),e(td,Lee),e(Lee,Lpo),b(d,Exe,u),b(d,Ko,u),g(G4,Ko,null),e(Ko,Bpo),e(Ko,ad),e(ad,xpo),e(ad,Bee),e(Bee,kpo),e(ad,Rpo),e(ad,xee),e(xee,Spo),e(ad,Ppo),e(Ko,$po),e(Ko,X4),e(X4,Ipo),e(X4,kee),e(kee,jpo),e(X4,Dpo),e(Ko,Npo),e(Ko,Wr),g(V4,Wr,null),e(Wr,qpo),e(Wr,Ree),e(Ree,Opo),e(Wr,Gpo),e(Wr,nd),e(nd,Xpo),e(nd,See),e(See,Vpo),e(nd,zpo),e(nd,Pee),e(Pee,Wpo),e(nd,Qpo),e(Wr,Hpo),e(Wr,$ee),e($ee,Upo),e(Wr,Jpo),g(z4,Wr,null),e(Ko,Ypo),e(Ko,Ne),g(W4,Ne,null),e(Ne,Kpo),e(Ne,Iee),e(Iee,Zpo),e(Ne,e_o),e(Ne,Wa),e(Wa,o_o),e(Wa,jee),e(jee,r_o),e(Wa,t_o),e(Wa,Dee),e(Dee,a_o),e(Wa,n_o),e(Wa,Nee),e(Nee,s_o),e(Wa,l_o),e(Ne,i_o),e(Ne,$),e($,nu),e(nu,qee),e(qee,d_o),e(nu,c_o),e(nu,NP),e(NP,f_o),e(nu,m_o),e($,g_o),e($,su),e(su,Oee),e(Oee,h_o),e(su,p_o),e(su,qP),e(qP,__o),e(su,u_o),e($,b_o),e($,lu),e(lu,Gee),e(Gee,v_o),e(lu,T_o),e(lu,OP),e(OP,F_o),e(lu,C_o),e($,M_o),e($,iu),e(iu,Xee),e(Xee,E_o),e(iu,y_o),e(iu,GP),e(GP,w_o),e(iu,A_o),e($,L_o),e($,du),e(du,Vee),e(Vee,B_o),e(du,x_o),e(du,XP),e(XP,k_o),e(du,R_o),e($,S_o),e($,cu),e(cu,zee),e(zee,P_o),e(cu,$_o),e(cu,VP),e(VP,I_o),e(cu,j_o),e($,D_o),e($,fu),e(fu,Wee),e(Wee,N_o),e(fu,q_o),e(fu,zP),e(zP,O_o),e(fu,G_o),e($,X_o),e($,mu),e(mu,Qee),e(Qee,V_o),e(mu,z_o),e(mu,WP),e(WP,W_o),e(mu,Q_o),e($,H_o),e($,gu),e(gu,Hee),e(Hee,U_o),e(gu,J_o),e(gu,QP),e(QP,Y_o),e(gu,K_o),e($,Z_o),e($,hu),e(hu,Uee),e(Uee,euo),e(hu,ouo),e(hu,HP),e(HP,ruo),e(hu,tuo),e($,auo),e($,pu),e(pu,Jee),e(Jee,nuo),e(pu,suo),e(pu,UP),e(UP,luo),e(pu,iuo),e($,duo),e($,_u),e(_u,Yee),e(Yee,cuo),e(_u,fuo),e(_u,JP),e(JP,muo),e(_u,guo),e($,huo),e($,uu),e(uu,Kee),e(Kee,puo),e(uu,_uo),e(uu,YP),e(YP,uuo),e(uu,buo),e($,vuo),e($,bu),e(bu,Zee),e(Zee,Tuo),e(bu,Fuo),e(bu,KP),e(KP,Cuo),e(bu,Muo),e($,Euo),e($,vu),e(vu,eoe),e(eoe,yuo),e(vu,wuo),e(vu,ZP),e(ZP,Auo),e(vu,Luo),e($,Buo),e($,Tu),e(Tu,ooe),e(ooe,xuo),e(Tu,kuo),e(Tu,e$),e(e$,Ruo),e(Tu,Suo),e($,Puo),e($,Fu),e(Fu,roe),e(roe,$uo),e(Fu,Iuo),e(Fu,o$),e(o$,juo),e(Fu,Duo),e($,Nuo),e($,Cu),e(Cu,toe),e(toe,quo),e(Cu,Ouo),e(Cu,r$),e(r$,Guo),e(Cu,Xuo),e($,Vuo),e($,Mu),e(Mu,aoe),e(aoe,zuo),e(Mu,Wuo),e(Mu,t$),e(t$,Quo),e(Mu,Huo),e($,Uuo),e($,Eu),e(Eu,noe),e(noe,Juo),e(Eu,Yuo),e(Eu,a$),e(a$,Kuo),e(Eu,Zuo),e($,e1o),e($,yu),e(yu,soe),e(soe,o1o),e(yu,r1o),e(yu,n$),e(n$,t1o),e(yu,a1o),e($,n1o),e($,wu),e(wu,loe),e(loe,s1o),e(wu,l1o),e(wu,s$),e(s$,i1o),e(wu,d1o),e($,c1o),e($,Au),e(Au,ioe),e(ioe,f1o),e(Au,m1o),e(Au,l$),e(l$,g1o),e(Au,h1o),e($,p1o),e($,Lu),e(Lu,doe),e(doe,_1o),e(Lu,u1o),e(Lu,i$),e(i$,b1o),e(Lu,v1o),e($,T1o),e($,Bu),e(Bu,coe),e(coe,F1o),e(Bu,C1o),e(Bu,d$),e(d$,M1o),e(Bu,E1o),e($,y1o),e($,xu),e(xu,foe),e(foe,w1o),e(xu,A1o),e(xu,c$),e(c$,L1o),e(xu,B1o),e($,x1o),e($,ku),e(ku,moe),e(moe,k1o),e(ku,R1o),e(ku,f$),e(f$,S1o),e(ku,P1o),e($,$1o),e($,Ru),e(Ru,goe),e(goe,I1o),e(Ru,j1o),e(Ru,m$),e(m$,D1o),e(Ru,N1o),e($,q1o),e($,Su),e(Su,hoe),e(hoe,O1o),e(Su,G1o),e(Su,g$),e(g$,X1o),e(Su,V1o),e($,z1o),e($,Pu),e(Pu,poe),e(poe,W1o),e(Pu,Q1o),e(Pu,h$),e(h$,H1o),e(Pu,U1o),e($,J1o),e($,$u),e($u,_oe),e(_oe,Y1o),e($u,K1o),e($u,p$),e(p$,Z1o),e($u,ebo),e($,obo),e($,Iu),e(Iu,uoe),e(uoe,rbo),e(Iu,tbo),e(Iu,_$),e(_$,abo),e(Iu,nbo),e($,sbo),e($,ju),e(ju,boe),e(boe,lbo),e(ju,ibo),e(ju,u$),e(u$,dbo),e(ju,cbo),e($,fbo),e($,Du),e(Du,voe),e(voe,mbo),e(Du,gbo),e(Du,b$),e(b$,hbo),e(Du,pbo),e($,_bo),e($,Nu),e(Nu,Toe),e(Toe,ubo),e(Nu,bbo),e(Nu,v$),e(v$,vbo),e(Nu,Tbo),e(Ne,Fbo),e(Ne,qu),e(qu,Cbo),e(qu,Foe),e(Foe,Mbo),e(qu,Ebo),e(qu,Coe),e(Coe,ybo),e(Ne,wbo),e(Ne,Moe),e(Moe,Abo),e(Ne,Lbo),g(Q4,Ne,null),b(d,yxe,u),b(d,sd,u),e(sd,Ou),e(Ou,Eoe),g(H4,Eoe,null),e(sd,Bbo),e(sd,yoe),e(yoe,xbo),b(d,wxe,u),b(d,Zo,u),g(U4,Zo,null),e(Zo,kbo),e(Zo,ld),e(ld,Rbo),e(ld,woe),e(woe,Sbo),e(ld,Pbo),e(ld,Aoe),e(Aoe,$bo),e(ld,Ibo),e(Zo,jbo),e(Zo,J4),e(J4,Dbo),e(J4,Loe),e(Loe,Nbo),e(J4,qbo),e(Zo,Obo),e(Zo,Qr),g(Y4,Qr,null),e(Qr,Gbo),e(Qr,Boe),e(Boe,Xbo),e(Qr,Vbo),e(Qr,id),e(id,zbo),e(id,xoe),e(xoe,Wbo),e(id,Qbo),e(id,koe),e(koe,Hbo),e(id,Ubo),e(Qr,Jbo),e(Qr,Roe),e(Roe,Ybo),e(Qr,Kbo),g(K4,Qr,null),e(Zo,Zbo),e(Zo,qe),g(Z4,qe,null),e(qe,e5o),e(qe,Soe),e(Soe,o5o),e(qe,r5o),e(qe,Qa),e(Qa,t5o),e(Qa,Poe),e(Poe,a5o),e(Qa,n5o),e(Qa,$oe),e($oe,s5o),e(Qa,l5o),e(Qa,Ioe),e(Ioe,i5o),e(Qa,d5o),e(qe,c5o),e(qe,I),e(I,Gu),e(Gu,joe),e(joe,f5o),e(Gu,m5o),e(Gu,T$),e(T$,g5o),e(Gu,h5o),e(I,p5o),e(I,Xu),e(Xu,Doe),e(Doe,_5o),e(Xu,u5o),e(Xu,F$),e(F$,b5o),e(Xu,v5o),e(I,T5o),e(I,Vu),e(Vu,Noe),e(Noe,F5o),e(Vu,C5o),e(Vu,C$),e(C$,M5o),e(Vu,E5o),e(I,y5o),e(I,zu),e(zu,qoe),e(qoe,w5o),e(zu,A5o),e(zu,M$),e(M$,L5o),e(zu,B5o),e(I,x5o),e(I,Wu),e(Wu,Ooe),e(Ooe,k5o),e(Wu,R5o),e(Wu,E$),e(E$,S5o),e(Wu,P5o),e(I,$5o),e(I,Qu),e(Qu,Goe),e(Goe,I5o),e(Qu,j5o),e(Qu,y$),e(y$,D5o),e(Qu,N5o),e(I,q5o),e(I,Hu),e(Hu,Xoe),e(Xoe,O5o),e(Hu,G5o),e(Hu,w$),e(w$,X5o),e(Hu,V5o),e(I,z5o),e(I,Uu),e(Uu,Voe),e(Voe,W5o),e(Uu,Q5o),e(Uu,A$),e(A$,H5o),e(Uu,U5o),e(I,J5o),e(I,Ju),e(Ju,zoe),e(zoe,Y5o),e(Ju,K5o),e(Ju,L$),e(L$,Z5o),e(Ju,e2o),e(I,o2o),e(I,Yu),e(Yu,Woe),e(Woe,r2o),e(Yu,t2o),e(Yu,B$),e(B$,a2o),e(Yu,n2o),e(I,s2o),e(I,Ku),e(Ku,Qoe),e(Qoe,l2o),e(Ku,i2o),e(Ku,x$),e(x$,d2o),e(Ku,c2o),e(I,f2o),e(I,Zu),e(Zu,Hoe),e(Hoe,m2o),e(Zu,g2o),e(Zu,k$),e(k$,h2o),e(Zu,p2o),e(I,_2o),e(I,e1),e(e1,Uoe),e(Uoe,u2o),e(e1,b2o),e(e1,R$),e(R$,v2o),e(e1,T2o),e(I,F2o),e(I,o1),e(o1,Joe),e(Joe,C2o),e(o1,M2o),e(o1,S$),e(S$,E2o),e(o1,y2o),e(I,w2o),e(I,r1),e(r1,Yoe),e(Yoe,A2o),e(r1,L2o),e(r1,P$),e(P$,B2o),e(r1,x2o),e(I,k2o),e(I,t1),e(t1,Koe),e(Koe,R2o),e(t1,S2o),e(t1,$$),e($$,P2o),e(t1,$2o),e(I,I2o),e(I,a1),e(a1,Zoe),e(Zoe,j2o),e(a1,D2o),e(a1,I$),e(I$,N2o),e(a1,q2o),e(I,O2o),e(I,n1),e(n1,ere),e(ere,G2o),e(n1,X2o),e(n1,j$),e(j$,V2o),e(n1,z2o),e(I,W2o),e(I,s1),e(s1,ore),e(ore,Q2o),e(s1,H2o),e(s1,D$),e(D$,U2o),e(s1,J2o),e(I,Y2o),e(I,l1),e(l1,rre),e(rre,K2o),e(l1,Z2o),e(l1,N$),e(N$,evo),e(l1,ovo),e(I,rvo),e(I,i1),e(i1,tre),e(tre,tvo),e(i1,avo),e(i1,q$),e(q$,nvo),e(i1,svo),e(I,lvo),e(I,d1),e(d1,are),e(are,ivo),e(d1,dvo),e(d1,O$),e(O$,cvo),e(d1,fvo),e(I,mvo),e(I,c1),e(c1,nre),e(nre,gvo),e(c1,hvo),e(c1,G$),e(G$,pvo),e(c1,_vo),e(I,uvo),e(I,f1),e(f1,sre),e(sre,bvo),e(f1,vvo),e(f1,X$),e(X$,Tvo),e(f1,Fvo),e(I,Cvo),e(I,m1),e(m1,lre),e(lre,Mvo),e(m1,Evo),e(m1,V$),e(V$,yvo),e(m1,wvo),e(I,Avo),e(I,g1),e(g1,ire),e(ire,Lvo),e(g1,Bvo),e(g1,z$),e(z$,xvo),e(g1,kvo),e(I,Rvo),e(I,h1),e(h1,dre),e(dre,Svo),e(h1,Pvo),e(h1,W$),e(W$,$vo),e(h1,Ivo),e(I,jvo),e(I,p1),e(p1,cre),e(cre,Dvo),e(p1,Nvo),e(p1,Q$),e(Q$,qvo),e(p1,Ovo),e(I,Gvo),e(I,_1),e(_1,fre),e(fre,Xvo),e(_1,Vvo),e(_1,H$),e(H$,zvo),e(_1,Wvo),e(I,Qvo),e(I,u1),e(u1,mre),e(mre,Hvo),e(u1,Uvo),e(u1,U$),e(U$,Jvo),e(u1,Yvo),e(I,Kvo),e(I,b1),e(b1,gre),e(gre,Zvo),e(b1,e6o),e(b1,hre),e(hre,o6o),e(b1,r6o),e(I,t6o),e(I,v1),e(v1,pre),e(pre,a6o),e(v1,n6o),e(v1,J$),e(J$,s6o),e(v1,l6o),e(I,i6o),e(I,T1),e(T1,_re),e(_re,d6o),e(T1,c6o),e(T1,Y$),e(Y$,f6o),e(T1,m6o),e(I,g6o),e(I,F1),e(F1,ure),e(ure,h6o),e(F1,p6o),e(F1,K$),e(K$,_6o),e(F1,u6o),e(I,b6o),e(I,C1),e(C1,bre),e(bre,v6o),e(C1,T6o),e(C1,Z$),e(Z$,F6o),e(C1,C6o),e(qe,M6o),e(qe,M1),e(M1,E6o),e(M1,vre),e(vre,y6o),e(M1,w6o),e(M1,Tre),e(Tre,A6o),e(qe,L6o),e(qe,Fre),e(Fre,B6o),e(qe,x6o),g(eE,qe,null),b(d,Axe,u),b(d,dd,u),e(dd,E1),e(E1,Cre),g(oE,Cre,null),e(dd,k6o),e(dd,Mre),e(Mre,R6o),b(d,Lxe,u),b(d,er,u),g(rE,er,null),e(er,S6o),e(er,cd),e(cd,P6o),e(cd,Ere),e(Ere,$6o),e(cd,I6o),e(cd,yre),e(yre,j6o),e(cd,D6o),e(er,N6o),e(er,tE),e(tE,q6o),e(tE,wre),e(wre,O6o),e(tE,G6o),e(er,X6o),e(er,Hr),g(aE,Hr,null),e(Hr,V6o),e(Hr,Are),e(Are,z6o),e(Hr,W6o),e(Hr,fd),e(fd,Q6o),e(fd,Lre),e(Lre,H6o),e(fd,U6o),e(fd,Bre),e(Bre,J6o),e(fd,Y6o),e(Hr,K6o),e(Hr,xre),e(xre,Z6o),e(Hr,eTo),g(nE,Hr,null),e(er,oTo),e(er,Oe),g(sE,Oe,null),e(Oe,rTo),e(Oe,kre),e(kre,tTo),e(Oe,aTo),e(Oe,Ha),e(Ha,nTo),e(Ha,Rre),e(Rre,sTo),e(Ha,lTo),e(Ha,Sre),e(Sre,iTo),e(Ha,dTo),e(Ha,Pre),e(Pre,cTo),e(Ha,fTo),e(Oe,mTo),e(Oe,ne),e(ne,y1),e(y1,$re),e($re,gTo),e(y1,hTo),e(y1,eI),e(eI,pTo),e(y1,_To),e(ne,uTo),e(ne,w1),e(w1,Ire),e(Ire,bTo),e(w1,vTo),e(w1,oI),e(oI,TTo),e(w1,FTo),e(ne,CTo),e(ne,A1),e(A1,jre),e(jre,MTo),e(A1,ETo),e(A1,rI),e(rI,yTo),e(A1,wTo),e(ne,ATo),e(ne,L1),e(L1,Dre),e(Dre,LTo),e(L1,BTo),e(L1,tI),e(tI,xTo),e(L1,kTo),e(ne,RTo),e(ne,B1),e(B1,Nre),e(Nre,STo),e(B1,PTo),e(B1,aI),e(aI,$To),e(B1,ITo),e(ne,jTo),e(ne,x1),e(x1,qre),e(qre,DTo),e(x1,NTo),e(x1,nI),e(nI,qTo),e(x1,OTo),e(ne,GTo),e(ne,k1),e(k1,Ore),e(Ore,XTo),e(k1,VTo),e(k1,sI),e(sI,zTo),e(k1,WTo),e(ne,QTo),e(ne,R1),e(R1,Gre),e(Gre,HTo),e(R1,UTo),e(R1,lI),e(lI,JTo),e(R1,YTo),e(ne,KTo),e(ne,S1),e(S1,Xre),e(Xre,ZTo),e(S1,e8o),e(S1,iI),e(iI,o8o),e(S1,r8o),e(ne,t8o),e(ne,P1),e(P1,Vre),e(Vre,a8o),e(P1,n8o),e(P1,dI),e(dI,s8o),e(P1,l8o),e(ne,i8o),e(ne,$1),e($1,zre),e(zre,d8o),e($1,c8o),e($1,cI),e(cI,f8o),e($1,m8o),e(ne,g8o),e(ne,I1),e(I1,Wre),e(Wre,h8o),e(I1,p8o),e(I1,fI),e(fI,_8o),e(I1,u8o),e(ne,b8o),e(ne,j1),e(j1,Qre),e(Qre,v8o),e(j1,T8o),e(j1,mI),e(mI,F8o),e(j1,C8o),e(ne,M8o),e(ne,D1),e(D1,Hre),e(Hre,E8o),e(D1,y8o),e(D1,gI),e(gI,w8o),e(D1,A8o),e(ne,L8o),e(ne,N1),e(N1,Ure),e(Ure,B8o),e(N1,x8o),e(N1,hI),e(hI,k8o),e(N1,R8o),e(ne,S8o),e(ne,q1),e(q1,Jre),e(Jre,P8o),e(q1,$8o),e(q1,pI),e(pI,I8o),e(q1,j8o),e(Oe,D8o),e(Oe,O1),e(O1,N8o),e(O1,Yre),e(Yre,q8o),e(O1,O8o),e(O1,Kre),e(Kre,G8o),e(Oe,X8o),e(Oe,Zre),e(Zre,V8o),e(Oe,z8o),g(lE,Oe,null),b(d,Bxe,u),b(d,md,u),e(md,G1),e(G1,ete),g(iE,ete,null),e(md,W8o),e(md,ote),e(ote,Q8o),b(d,xxe,u),b(d,or,u),g(dE,or,null),e(or,H8o),e(or,gd),e(gd,U8o),e(gd,rte),e(rte,J8o),e(gd,Y8o),e(gd,tte),e(tte,K8o),e(gd,Z8o),e(or,eFo),e(or,cE),e(cE,oFo),e(cE,ate),e(ate,rFo),e(cE,tFo),e(or,aFo),e(or,Ur),g(fE,Ur,null),e(Ur,nFo),e(Ur,nte),e(nte,sFo),e(Ur,lFo),e(Ur,hd),e(hd,iFo),e(hd,ste),e(ste,dFo),e(hd,cFo),e(hd,lte),e(lte,fFo),e(hd,mFo),e(Ur,gFo),e(Ur,ite),e(ite,hFo),e(Ur,pFo),g(mE,Ur,null),e(or,_Fo),e(or,Ge),g(gE,Ge,null),e(Ge,uFo),e(Ge,dte),e(dte,bFo),e(Ge,vFo),e(Ge,Ua),e(Ua,TFo),e(Ua,cte),e(cte,FFo),e(Ua,CFo),e(Ua,fte),e(fte,MFo),e(Ua,EFo),e(Ua,mte),e(mte,yFo),e(Ua,wFo),e(Ge,AFo),e(Ge,A),e(A,X1),e(X1,gte),e(gte,LFo),e(X1,BFo),e(X1,_I),e(_I,xFo),e(X1,kFo),e(A,RFo),e(A,V1),e(V1,hte),e(hte,SFo),e(V1,PFo),e(V1,uI),e(uI,$Fo),e(V1,IFo),e(A,jFo),e(A,z1),e(z1,pte),e(pte,DFo),e(z1,NFo),e(z1,bI),e(bI,qFo),e(z1,OFo),e(A,GFo),e(A,W1),e(W1,_te),e(_te,XFo),e(W1,VFo),e(W1,vI),e(vI,zFo),e(W1,WFo),e(A,QFo),e(A,Q1),e(Q1,ute),e(ute,HFo),e(Q1,UFo),e(Q1,TI),e(TI,JFo),e(Q1,YFo),e(A,KFo),e(A,H1),e(H1,bte),e(bte,ZFo),e(H1,e9o),e(H1,FI),e(FI,o9o),e(H1,r9o),e(A,t9o),e(A,U1),e(U1,vte),e(vte,a9o),e(U1,n9o),e(U1,CI),e(CI,s9o),e(U1,l9o),e(A,i9o),e(A,J1),e(J1,Tte),e(Tte,d9o),e(J1,c9o),e(J1,MI),e(MI,f9o),e(J1,m9o),e(A,g9o),e(A,Y1),e(Y1,Fte),e(Fte,h9o),e(Y1,p9o),e(Y1,EI),e(EI,_9o),e(Y1,u9o),e(A,b9o),e(A,K1),e(K1,Cte),e(Cte,v9o),e(K1,T9o),e(K1,yI),e(yI,F9o),e(K1,C9o),e(A,M9o),e(A,Z1),e(Z1,Mte),e(Mte,E9o),e(Z1,y9o),e(Z1,wI),e(wI,w9o),e(Z1,A9o),e(A,L9o),e(A,eb),e(eb,Ete),e(Ete,B9o),e(eb,x9o),e(eb,AI),e(AI,k9o),e(eb,R9o),e(A,S9o),e(A,ob),e(ob,yte),e(yte,P9o),e(ob,$9o),e(ob,LI),e(LI,I9o),e(ob,j9o),e(A,D9o),e(A,rb),e(rb,wte),e(wte,N9o),e(rb,q9o),e(rb,BI),e(BI,O9o),e(rb,G9o),e(A,X9o),e(A,tb),e(tb,Ate),e(Ate,V9o),e(tb,z9o),e(tb,xI),e(xI,W9o),e(tb,Q9o),e(A,H9o),e(A,ab),e(ab,Lte),e(Lte,U9o),e(ab,J9o),e(ab,kI),e(kI,Y9o),e(ab,K9o),e(A,Z9o),e(A,nb),e(nb,Bte),e(Bte,eCo),e(nb,oCo),e(nb,RI),e(RI,rCo),e(nb,tCo),e(A,aCo),e(A,sb),e(sb,xte),e(xte,nCo),e(sb,sCo),e(sb,SI),e(SI,lCo),e(sb,iCo),e(A,dCo),e(A,lb),e(lb,kte),e(kte,cCo),e(lb,fCo),e(lb,PI),e(PI,mCo),e(lb,gCo),e(A,hCo),e(A,ib),e(ib,Rte),e(Rte,pCo),e(ib,_Co),e(ib,$I),e($I,uCo),e(ib,bCo),e(A,vCo),e(A,db),e(db,Ste),e(Ste,TCo),e(db,FCo),e(db,II),e(II,CCo),e(db,MCo),e(A,ECo),e(A,cb),e(cb,Pte),e(Pte,yCo),e(cb,wCo),e(cb,jI),e(jI,ACo),e(cb,LCo),e(A,BCo),e(A,fb),e(fb,$te),e($te,xCo),e(fb,kCo),e(fb,DI),e(DI,RCo),e(fb,SCo),e(A,PCo),e(A,mb),e(mb,Ite),e(Ite,$Co),e(mb,ICo),e(mb,NI),e(NI,jCo),e(mb,DCo),e(A,NCo),e(A,gb),e(gb,jte),e(jte,qCo),e(gb,OCo),e(gb,qI),e(qI,GCo),e(gb,XCo),e(A,VCo),e(A,hb),e(hb,Dte),e(Dte,zCo),e(hb,WCo),e(hb,OI),e(OI,QCo),e(hb,HCo),e(A,UCo),e(A,pb),e(pb,Nte),e(Nte,JCo),e(pb,YCo),e(pb,GI),e(GI,KCo),e(pb,ZCo),e(A,eMo),e(A,_b),e(_b,qte),e(qte,oMo),e(_b,rMo),e(_b,XI),e(XI,tMo),e(_b,aMo),e(A,nMo),e(A,ub),e(ub,Ote),e(Ote,sMo),e(ub,lMo),e(ub,VI),e(VI,iMo),e(ub,dMo),e(A,cMo),e(A,bb),e(bb,Gte),e(Gte,fMo),e(bb,mMo),e(bb,zI),e(zI,gMo),e(bb,hMo),e(A,pMo),e(A,vb),e(vb,Xte),e(Xte,_Mo),e(vb,uMo),e(vb,WI),e(WI,bMo),e(vb,vMo),e(A,TMo),e(A,Tb),e(Tb,Vte),e(Vte,FMo),e(Tb,CMo),e(Tb,QI),e(QI,MMo),e(Tb,EMo),e(A,yMo),e(A,Fb),e(Fb,zte),e(zte,wMo),e(Fb,AMo),e(Fb,HI),e(HI,LMo),e(Fb,BMo),e(A,xMo),e(A,Cb),e(Cb,Wte),e(Wte,kMo),e(Cb,RMo),e(Cb,UI),e(UI,SMo),e(Cb,PMo),e(A,$Mo),e(A,Mb),e(Mb,Qte),e(Qte,IMo),e(Mb,jMo),e(Mb,JI),e(JI,DMo),e(Mb,NMo),e(A,qMo),e(A,Eb),e(Eb,Hte),e(Hte,OMo),e(Eb,GMo),e(Eb,YI),e(YI,XMo),e(Eb,VMo),e(A,zMo),e(A,yb),e(yb,Ute),e(Ute,WMo),e(yb,QMo),e(yb,KI),e(KI,HMo),e(yb,UMo),e(A,JMo),e(A,wb),e(wb,Jte),e(Jte,YMo),e(wb,KMo),e(wb,ZI),e(ZI,ZMo),e(wb,e4o),e(A,o4o),e(A,Ab),e(Ab,Yte),e(Yte,r4o),e(Ab,t4o),e(Ab,ej),e(ej,a4o),e(Ab,n4o),e(A,s4o),e(A,Lb),e(Lb,Kte),e(Kte,l4o),e(Lb,i4o),e(Lb,oj),e(oj,d4o),e(Lb,c4o),e(A,f4o),e(A,Bb),e(Bb,Zte),e(Zte,m4o),e(Bb,g4o),e(Bb,rj),e(rj,h4o),e(Bb,p4o),e(A,_4o),e(A,xb),e(xb,eae),e(eae,u4o),e(xb,b4o),e(xb,tj),e(tj,v4o),e(xb,T4o),e(A,F4o),e(A,kb),e(kb,oae),e(oae,C4o),e(kb,M4o),e(kb,aj),e(aj,E4o),e(kb,y4o),e(A,w4o),e(A,Rb),e(Rb,rae),e(rae,A4o),e(Rb,L4o),e(Rb,nj),e(nj,B4o),e(Rb,x4o),e(A,k4o),e(A,Sb),e(Sb,tae),e(tae,R4o),e(Sb,S4o),e(Sb,sj),e(sj,P4o),e(Sb,$4o),e(A,I4o),e(A,Pb),e(Pb,aae),e(aae,j4o),e(Pb,D4o),e(Pb,lj),e(lj,N4o),e(Pb,q4o),e(Ge,O4o),e(Ge,$b),e($b,G4o),e($b,nae),e(nae,X4o),e($b,V4o),e($b,sae),e(sae,z4o),e(Ge,W4o),e(Ge,lae),e(lae,Q4o),e(Ge,H4o),g(hE,Ge,null),b(d,kxe,u),b(d,pd,u),e(pd,Ib),e(Ib,iae),g(pE,iae,null),e(pd,U4o),e(pd,dae),e(dae,J4o),b(d,Rxe,u),b(d,rr,u),g(_E,rr,null),e(rr,Y4o),e(rr,_d),e(_d,K4o),e(_d,cae),e(cae,Z4o),e(_d,eEo),e(_d,fae),e(fae,oEo),e(_d,rEo),e(rr,tEo),e(rr,uE),e(uE,aEo),e(uE,mae),e(mae,nEo),e(uE,sEo),e(rr,lEo),e(rr,Jr),g(bE,Jr,null),e(Jr,iEo),e(Jr,gae),e(gae,dEo),e(Jr,cEo),e(Jr,ud),e(ud,fEo),e(ud,hae),e(hae,mEo),e(ud,gEo),e(ud,pae),e(pae,hEo),e(ud,pEo),e(Jr,_Eo),e(Jr,_ae),e(_ae,uEo),e(Jr,bEo),g(vE,Jr,null),e(rr,vEo),e(rr,Xe),g(TE,Xe,null),e(Xe,TEo),e(Xe,uae),e(uae,FEo),e(Xe,CEo),e(Xe,Ja),e(Ja,MEo),e(Ja,bae),e(bae,EEo),e(Ja,yEo),e(Ja,vae),e(vae,wEo),e(Ja,AEo),e(Ja,Tae),e(Tae,LEo),e(Ja,BEo),e(Xe,xEo),e(Xe,O),e(O,jb),e(jb,Fae),e(Fae,kEo),e(jb,REo),e(jb,ij),e(ij,SEo),e(jb,PEo),e(O,$Eo),e(O,Db),e(Db,Cae),e(Cae,IEo),e(Db,jEo),e(Db,dj),e(dj,DEo),e(Db,NEo),e(O,qEo),e(O,Nb),e(Nb,Mae),e(Mae,OEo),e(Nb,GEo),e(Nb,cj),e(cj,XEo),e(Nb,VEo),e(O,zEo),e(O,qb),e(qb,Eae),e(Eae,WEo),e(qb,QEo),e(qb,fj),e(fj,HEo),e(qb,UEo),e(O,JEo),e(O,Ob),e(Ob,yae),e(yae,YEo),e(Ob,KEo),e(Ob,mj),e(mj,ZEo),e(Ob,e3o),e(O,o3o),e(O,Gb),e(Gb,wae),e(wae,r3o),e(Gb,t3o),e(Gb,gj),e(gj,a3o),e(Gb,n3o),e(O,s3o),e(O,Xb),e(Xb,Aae),e(Aae,l3o),e(Xb,i3o),e(Xb,hj),e(hj,d3o),e(Xb,c3o),e(O,f3o),e(O,Vb),e(Vb,Lae),e(Lae,m3o),e(Vb,g3o),e(Vb,pj),e(pj,h3o),e(Vb,p3o),e(O,_3o),e(O,zb),e(zb,Bae),e(Bae,u3o),e(zb,b3o),e(zb,_j),e(_j,v3o),e(zb,T3o),e(O,F3o),e(O,Wb),e(Wb,xae),e(xae,C3o),e(Wb,M3o),e(Wb,uj),e(uj,E3o),e(Wb,y3o),e(O,w3o),e(O,Qb),e(Qb,kae),e(kae,A3o),e(Qb,L3o),e(Qb,bj),e(bj,B3o),e(Qb,x3o),e(O,k3o),e(O,Hb),e(Hb,Rae),e(Rae,R3o),e(Hb,S3o),e(Hb,vj),e(vj,P3o),e(Hb,$3o),e(O,I3o),e(O,Ub),e(Ub,Sae),e(Sae,j3o),e(Ub,D3o),e(Ub,Tj),e(Tj,N3o),e(Ub,q3o),e(O,O3o),e(O,Jb),e(Jb,Pae),e(Pae,G3o),e(Jb,X3o),e(Jb,Fj),e(Fj,V3o),e(Jb,z3o),e(O,W3o),e(O,Yb),e(Yb,$ae),e($ae,Q3o),e(Yb,H3o),e(Yb,Cj),e(Cj,U3o),e(Yb,J3o),e(O,Y3o),e(O,Kb),e(Kb,Iae),e(Iae,K3o),e(Kb,Z3o),e(Kb,Mj),e(Mj,eyo),e(Kb,oyo),e(O,ryo),e(O,Zb),e(Zb,jae),e(jae,tyo),e(Zb,ayo),e(Zb,Ej),e(Ej,nyo),e(Zb,syo),e(O,lyo),e(O,e5),e(e5,Dae),e(Dae,iyo),e(e5,dyo),e(e5,yj),e(yj,cyo),e(e5,fyo),e(O,myo),e(O,o5),e(o5,Nae),e(Nae,gyo),e(o5,hyo),e(o5,wj),e(wj,pyo),e(o5,_yo),e(O,uyo),e(O,r5),e(r5,qae),e(qae,byo),e(r5,vyo),e(r5,Aj),e(Aj,Tyo),e(r5,Fyo),e(O,Cyo),e(O,t5),e(t5,Oae),e(Oae,Myo),e(t5,Eyo),e(t5,Lj),e(Lj,yyo),e(t5,wyo),e(O,Ayo),e(O,a5),e(a5,Gae),e(Gae,Lyo),e(a5,Byo),e(a5,Bj),e(Bj,xyo),e(a5,kyo),e(O,Ryo),e(O,n5),e(n5,Xae),e(Xae,Syo),e(n5,Pyo),e(n5,xj),e(xj,$yo),e(n5,Iyo),e(O,jyo),e(O,s5),e(s5,Vae),e(Vae,Dyo),e(s5,Nyo),e(s5,kj),e(kj,qyo),e(s5,Oyo),e(O,Gyo),e(O,l5),e(l5,zae),e(zae,Xyo),e(l5,Vyo),e(l5,Rj),e(Rj,zyo),e(l5,Wyo),e(O,Qyo),e(O,i5),e(i5,Wae),e(Wae,Hyo),e(i5,Uyo),e(i5,Sj),e(Sj,Jyo),e(i5,Yyo),e(O,Kyo),e(O,d5),e(d5,Qae),e(Qae,Zyo),e(d5,ewo),e(d5,Pj),e(Pj,owo),e(d5,rwo),e(O,two),e(O,c5),e(c5,Hae),e(Hae,awo),e(c5,nwo),e(c5,$j),e($j,swo),e(c5,lwo),e(Xe,iwo),e(Xe,f5),e(f5,dwo),e(f5,Uae),e(Uae,cwo),e(f5,fwo),e(f5,Jae),e(Jae,mwo),e(Xe,gwo),e(Xe,Yae),e(Yae,hwo),e(Xe,pwo),g(FE,Xe,null),b(d,Sxe,u),b(d,bd,u),e(bd,m5),e(m5,Kae),g(CE,Kae,null),e(bd,_wo),e(bd,Zae),e(Zae,uwo),b(d,Pxe,u),b(d,tr,u),g(ME,tr,null),e(tr,bwo),e(tr,vd),e(vd,vwo),e(vd,ene),e(ene,Two),e(vd,Fwo),e(vd,one),e(one,Cwo),e(vd,Mwo),e(tr,Ewo),e(tr,EE),e(EE,ywo),e(EE,rne),e(rne,wwo),e(EE,Awo),e(tr,Lwo),e(tr,Yr),g(yE,Yr,null),e(Yr,Bwo),e(Yr,tne),e(tne,xwo),e(Yr,kwo),e(Yr,Td),e(Td,Rwo),e(Td,ane),e(ane,Swo),e(Td,Pwo),e(Td,nne),e(nne,$wo),e(Td,Iwo),e(Yr,jwo),e(Yr,sne),e(sne,Dwo),e(Yr,Nwo),g(wE,Yr,null),e(tr,qwo),e(tr,Ve),g(AE,Ve,null),e(Ve,Owo),e(Ve,lne),e(lne,Gwo),e(Ve,Xwo),e(Ve,Ya),e(Ya,Vwo),e(Ya,ine),e(ine,zwo),e(Ya,Wwo),e(Ya,dne),e(dne,Qwo),e(Ya,Hwo),e(Ya,cne),e(cne,Uwo),e(Ya,Jwo),e(Ve,Ywo),e(Ve,da),e(da,g5),e(g5,fne),e(fne,Kwo),e(g5,Zwo),e(g5,Ij),e(Ij,eAo),e(g5,oAo),e(da,rAo),e(da,h5),e(h5,mne),e(mne,tAo),e(h5,aAo),e(h5,jj),e(jj,nAo),e(h5,sAo),e(da,lAo),e(da,p5),e(p5,gne),e(gne,iAo),e(p5,dAo),e(p5,Dj),e(Dj,cAo),e(p5,fAo),e(da,mAo),e(da,_5),e(_5,hne),e(hne,gAo),e(_5,hAo),e(_5,Nj),e(Nj,pAo),e(_5,_Ao),e(da,uAo),e(da,u5),e(u5,pne),e(pne,bAo),e(u5,vAo),e(u5,qj),e(qj,TAo),e(u5,FAo),e(Ve,CAo),e(Ve,b5),e(b5,MAo),e(b5,_ne),e(_ne,EAo),e(b5,yAo),e(b5,une),e(une,wAo),e(Ve,AAo),e(Ve,bne),e(bne,LAo),e(Ve,BAo),g(LE,Ve,null),b(d,$xe,u),b(d,Fd,u),e(Fd,v5),e(v5,vne),g(BE,vne,null),e(Fd,xAo),e(Fd,Tne),e(Tne,kAo),b(d,Ixe,u),b(d,ar,u),g(xE,ar,null),e(ar,RAo),e(ar,Cd),e(Cd,SAo),e(Cd,Fne),e(Fne,PAo),e(Cd,$Ao),e(Cd,Cne),e(Cne,IAo),e(Cd,jAo),e(ar,DAo),e(ar,kE),e(kE,NAo),e(kE,Mne),e(Mne,qAo),e(kE,OAo),e(ar,GAo),e(ar,Kr),g(RE,Kr,null),e(Kr,XAo),e(Kr,Ene),e(Ene,VAo),e(Kr,zAo),e(Kr,Md),e(Md,WAo),e(Md,yne),e(yne,QAo),e(Md,HAo),e(Md,wne),e(wne,UAo),e(Md,JAo),e(Kr,YAo),e(Kr,Ane),e(Ane,KAo),e(Kr,ZAo),g(SE,Kr,null),e(ar,e0o),e(ar,ze),g(PE,ze,null),e(ze,o0o),e(ze,Lne),e(Lne,r0o),e(ze,t0o),e(ze,Ka),e(Ka,a0o),e(Ka,Bne),e(Bne,n0o),e(Ka,s0o),e(Ka,xne),e(xne,l0o),e(Ka,i0o),e(Ka,kne),e(kne,d0o),e(Ka,c0o),e(ze,f0o),e(ze,N),e(N,T5),e(T5,Rne),e(Rne,m0o),e(T5,g0o),e(T5,Oj),e(Oj,h0o),e(T5,p0o),e(N,_0o),e(N,F5),e(F5,Sne),e(Sne,u0o),e(F5,b0o),e(F5,Gj),e(Gj,v0o),e(F5,T0o),e(N,F0o),e(N,C5),e(C5,Pne),e(Pne,C0o),e(C5,M0o),e(C5,Xj),e(Xj,E0o),e(C5,y0o),e(N,w0o),e(N,M5),e(M5,$ne),e($ne,A0o),e(M5,L0o),e(M5,Vj),e(Vj,B0o),e(M5,x0o),e(N,k0o),e(N,E5),e(E5,Ine),e(Ine,R0o),e(E5,S0o),e(E5,zj),e(zj,P0o),e(E5,$0o),e(N,I0o),e(N,y5),e(y5,jne),e(jne,j0o),e(y5,D0o),e(y5,Wj),e(Wj,N0o),e(y5,q0o),e(N,O0o),e(N,w5),e(w5,Dne),e(Dne,G0o),e(w5,X0o),e(w5,Qj),e(Qj,V0o),e(w5,z0o),e(N,W0o),e(N,A5),e(A5,Nne),e(Nne,Q0o),e(A5,H0o),e(A5,Hj),e(Hj,U0o),e(A5,J0o),e(N,Y0o),e(N,L5),e(L5,qne),e(qne,K0o),e(L5,Z0o),e(L5,Uj),e(Uj,eLo),e(L5,oLo),e(N,rLo),e(N,B5),e(B5,One),e(One,tLo),e(B5,aLo),e(B5,Jj),e(Jj,nLo),e(B5,sLo),e(N,lLo),e(N,x5),e(x5,Gne),e(Gne,iLo),e(x5,dLo),e(x5,Yj),e(Yj,cLo),e(x5,fLo),e(N,mLo),e(N,k5),e(k5,Xne),e(Xne,gLo),e(k5,hLo),e(k5,Kj),e(Kj,pLo),e(k5,_Lo),e(N,uLo),e(N,R5),e(R5,Vne),e(Vne,bLo),e(R5,vLo),e(R5,Zj),e(Zj,TLo),e(R5,FLo),e(N,CLo),e(N,S5),e(S5,zne),e(zne,MLo),e(S5,ELo),e(S5,eD),e(eD,yLo),e(S5,wLo),e(N,ALo),e(N,P5),e(P5,Wne),e(Wne,LLo),e(P5,BLo),e(P5,oD),e(oD,xLo),e(P5,kLo),e(N,RLo),e(N,$5),e($5,Qne),e(Qne,SLo),e($5,PLo),e($5,rD),e(rD,$Lo),e($5,ILo),e(N,jLo),e(N,I5),e(I5,Hne),e(Hne,DLo),e(I5,NLo),e(I5,tD),e(tD,qLo),e(I5,OLo),e(N,GLo),e(N,j5),e(j5,Une),e(Une,XLo),e(j5,VLo),e(j5,aD),e(aD,zLo),e(j5,WLo),e(N,QLo),e(N,D5),e(D5,Jne),e(Jne,HLo),e(D5,ULo),e(D5,nD),e(nD,JLo),e(D5,YLo),e(N,KLo),e(N,N5),e(N5,Yne),e(Yne,ZLo),e(N5,e7o),e(N5,sD),e(sD,o7o),e(N5,r7o),e(N,t7o),e(N,q5),e(q5,Kne),e(Kne,a7o),e(q5,n7o),e(q5,lD),e(lD,s7o),e(q5,l7o),e(N,i7o),e(N,O5),e(O5,Zne),e(Zne,d7o),e(O5,c7o),e(O5,iD),e(iD,f7o),e(O5,m7o),e(N,g7o),e(N,G5),e(G5,ese),e(ese,h7o),e(G5,p7o),e(G5,dD),e(dD,_7o),e(G5,u7o),e(N,b7o),e(N,X5),e(X5,ose),e(ose,v7o),e(X5,T7o),e(X5,cD),e(cD,F7o),e(X5,C7o),e(N,M7o),e(N,V5),e(V5,rse),e(rse,E7o),e(V5,y7o),e(V5,fD),e(fD,w7o),e(V5,A7o),e(N,L7o),e(N,z5),e(z5,tse),e(tse,B7o),e(z5,x7o),e(z5,mD),e(mD,k7o),e(z5,R7o),e(N,S7o),e(N,W5),e(W5,ase),e(ase,P7o),e(W5,$7o),e(W5,gD),e(gD,I7o),e(W5,j7o),e(N,D7o),e(N,Q5),e(Q5,nse),e(nse,N7o),e(Q5,q7o),e(Q5,hD),e(hD,O7o),e(Q5,G7o),e(N,X7o),e(N,H5),e(H5,sse),e(sse,V7o),e(H5,z7o),e(H5,pD),e(pD,W7o),e(H5,Q7o),e(N,H7o),e(N,U5),e(U5,lse),e(lse,U7o),e(U5,J7o),e(U5,_D),e(_D,Y7o),e(U5,K7o),e(N,Z7o),e(N,J5),e(J5,ise),e(ise,eBo),e(J5,oBo),e(J5,uD),e(uD,rBo),e(J5,tBo),e(N,aBo),e(N,Y5),e(Y5,dse),e(dse,nBo),e(Y5,sBo),e(Y5,bD),e(bD,lBo),e(Y5,iBo),e(N,dBo),e(N,K5),e(K5,cse),e(cse,cBo),e(K5,fBo),e(K5,vD),e(vD,mBo),e(K5,gBo),e(ze,hBo),e(ze,Z5),e(Z5,pBo),e(Z5,fse),e(fse,_Bo),e(Z5,uBo),e(Z5,mse),e(mse,bBo),e(ze,vBo),e(ze,gse),e(gse,TBo),e(ze,FBo),g($E,ze,null),b(d,jxe,u),b(d,Ed,u),e(Ed,e2),e(e2,hse),g(IE,hse,null),e(Ed,CBo),e(Ed,pse),e(pse,MBo),b(d,Dxe,u),b(d,nr,u),g(jE,nr,null),e(nr,EBo),e(nr,yd),e(yd,yBo),e(yd,_se),e(_se,wBo),e(yd,ABo),e(yd,use),e(use,LBo),e(yd,BBo),e(nr,xBo),e(nr,DE),e(DE,kBo),e(DE,bse),e(bse,RBo),e(DE,SBo),e(nr,PBo),e(nr,Zr),g(NE,Zr,null),e(Zr,$Bo),e(Zr,vse),e(vse,IBo),e(Zr,jBo),e(Zr,wd),e(wd,DBo),e(wd,Tse),e(Tse,NBo),e(wd,qBo),e(wd,Fse),e(Fse,OBo),e(wd,GBo),e(Zr,XBo),e(Zr,Cse),e(Cse,VBo),e(Zr,zBo),g(qE,Zr,null),e(nr,WBo),e(nr,We),g(OE,We,null),e(We,QBo),e(We,Mse),e(Mse,HBo),e(We,UBo),e(We,Za),e(Za,JBo),e(Za,Ese),e(Ese,YBo),e(Za,KBo),e(Za,yse),e(yse,ZBo),e(Za,exo),e(Za,wse),e(wse,oxo),e(Za,rxo),e(We,txo),e(We,R),e(R,o2),e(o2,Ase),e(Ase,axo),e(o2,nxo),e(o2,TD),e(TD,sxo),e(o2,lxo),e(R,ixo),e(R,r2),e(r2,Lse),e(Lse,dxo),e(r2,cxo),e(r2,FD),e(FD,fxo),e(r2,mxo),e(R,gxo),e(R,t2),e(t2,Bse),e(Bse,hxo),e(t2,pxo),e(t2,CD),e(CD,_xo),e(t2,uxo),e(R,bxo),e(R,a2),e(a2,xse),e(xse,vxo),e(a2,Txo),e(a2,MD),e(MD,Fxo),e(a2,Cxo),e(R,Mxo),e(R,n2),e(n2,kse),e(kse,Exo),e(n2,yxo),e(n2,ED),e(ED,wxo),e(n2,Axo),e(R,Lxo),e(R,s2),e(s2,Rse),e(Rse,Bxo),e(s2,xxo),e(s2,yD),e(yD,kxo),e(s2,Rxo),e(R,Sxo),e(R,l2),e(l2,Sse),e(Sse,Pxo),e(l2,$xo),e(l2,wD),e(wD,Ixo),e(l2,jxo),e(R,Dxo),e(R,i2),e(i2,Pse),e(Pse,Nxo),e(i2,qxo),e(i2,AD),e(AD,Oxo),e(i2,Gxo),e(R,Xxo),e(R,d2),e(d2,$se),e($se,Vxo),e(d2,zxo),e(d2,LD),e(LD,Wxo),e(d2,Qxo),e(R,Hxo),e(R,c2),e(c2,Ise),e(Ise,Uxo),e(c2,Jxo),e(c2,BD),e(BD,Yxo),e(c2,Kxo),e(R,Zxo),e(R,f2),e(f2,jse),e(jse,eko),e(f2,oko),e(f2,xD),e(xD,rko),e(f2,tko),e(R,ako),e(R,m2),e(m2,Dse),e(Dse,nko),e(m2,sko),e(m2,kD),e(kD,lko),e(m2,iko),e(R,dko),e(R,g2),e(g2,Nse),e(Nse,cko),e(g2,fko),e(g2,RD),e(RD,mko),e(g2,gko),e(R,hko),e(R,h2),e(h2,qse),e(qse,pko),e(h2,_ko),e(h2,SD),e(SD,uko),e(h2,bko),e(R,vko),e(R,p2),e(p2,Ose),e(Ose,Tko),e(p2,Fko),e(p2,PD),e(PD,Cko),e(p2,Mko),e(R,Eko),e(R,_2),e(_2,Gse),e(Gse,yko),e(_2,wko),e(_2,$D),e($D,Ako),e(_2,Lko),e(R,Bko),e(R,u2),e(u2,Xse),e(Xse,xko),e(u2,kko),e(u2,ID),e(ID,Rko),e(u2,Sko),e(R,Pko),e(R,b2),e(b2,Vse),e(Vse,$ko),e(b2,Iko),e(b2,jD),e(jD,jko),e(b2,Dko),e(R,Nko),e(R,v2),e(v2,zse),e(zse,qko),e(v2,Oko),e(v2,DD),e(DD,Gko),e(v2,Xko),e(R,Vko),e(R,T2),e(T2,Wse),e(Wse,zko),e(T2,Wko),e(T2,ND),e(ND,Qko),e(T2,Hko),e(R,Uko),e(R,F2),e(F2,Qse),e(Qse,Jko),e(F2,Yko),e(F2,qD),e(qD,Kko),e(F2,Zko),e(R,eRo),e(R,C2),e(C2,Hse),e(Hse,oRo),e(C2,rRo),e(C2,OD),e(OD,tRo),e(C2,aRo),e(R,nRo),e(R,M2),e(M2,Use),e(Use,sRo),e(M2,lRo),e(M2,GD),e(GD,iRo),e(M2,dRo),e(R,cRo),e(R,E2),e(E2,Jse),e(Jse,fRo),e(E2,mRo),e(E2,XD),e(XD,gRo),e(E2,hRo),e(R,pRo),e(R,y2),e(y2,Yse),e(Yse,_Ro),e(y2,uRo),e(y2,VD),e(VD,bRo),e(y2,vRo),e(R,TRo),e(R,w2),e(w2,Kse),e(Kse,FRo),e(w2,CRo),e(w2,zD),e(zD,MRo),e(w2,ERo),e(R,yRo),e(R,A2),e(A2,Zse),e(Zse,wRo),e(A2,ARo),e(A2,WD),e(WD,LRo),e(A2,BRo),e(R,xRo),e(R,L2),e(L2,ele),e(ele,kRo),e(L2,RRo),e(L2,QD),e(QD,SRo),e(L2,PRo),e(R,$Ro),e(R,B2),e(B2,ole),e(ole,IRo),e(B2,jRo),e(B2,HD),e(HD,DRo),e(B2,NRo),e(R,qRo),e(R,x2),e(x2,rle),e(rle,ORo),e(x2,GRo),e(x2,UD),e(UD,XRo),e(x2,VRo),e(R,zRo),e(R,k2),e(k2,tle),e(tle,WRo),e(k2,QRo),e(k2,JD),e(JD,HRo),e(k2,URo),e(R,JRo),e(R,R2),e(R2,ale),e(ale,YRo),e(R2,KRo),e(R2,YD),e(YD,ZRo),e(R2,eSo),e(R,oSo),e(R,S2),e(S2,nle),e(nle,rSo),e(S2,tSo),e(S2,KD),e(KD,aSo),e(S2,nSo),e(R,sSo),e(R,P2),e(P2,sle),e(sle,lSo),e(P2,iSo),e(P2,ZD),e(ZD,dSo),e(P2,cSo),e(R,fSo),e(R,$2),e($2,lle),e(lle,mSo),e($2,gSo),e($2,eN),e(eN,hSo),e($2,pSo),e(R,_So),e(R,I2),e(I2,ile),e(ile,uSo),e(I2,bSo),e(I2,oN),e(oN,vSo),e(I2,TSo),e(R,FSo),e(R,j2),e(j2,dle),e(dle,CSo),e(j2,MSo),e(j2,rN),e(rN,ESo),e(j2,ySo),e(R,wSo),e(R,D2),e(D2,cle),e(cle,ASo),e(D2,LSo),e(D2,tN),e(tN,BSo),e(D2,xSo),e(R,kSo),e(R,N2),e(N2,fle),e(fle,RSo),e(N2,SSo),e(N2,aN),e(aN,PSo),e(N2,$So),e(We,ISo),e(We,q2),e(q2,jSo),e(q2,mle),e(mle,DSo),e(q2,NSo),e(q2,gle),e(gle,qSo),e(We,OSo),e(We,hle),e(hle,GSo),e(We,XSo),g(GE,We,null),b(d,Nxe,u),b(d,Ad,u),e(Ad,O2),e(O2,ple),g(XE,ple,null),e(Ad,VSo),e(Ad,_le),e(_le,zSo),b(d,qxe,u),b(d,sr,u),g(VE,sr,null),e(sr,WSo),e(sr,Ld),e(Ld,QSo),e(Ld,ule),e(ule,HSo),e(Ld,USo),e(Ld,ble),e(ble,JSo),e(Ld,YSo),e(sr,KSo),e(sr,zE),e(zE,ZSo),e(zE,vle),e(vle,ePo),e(zE,oPo),e(sr,rPo),e(sr,et),g(WE,et,null),e(et,tPo),e(et,Tle),e(Tle,aPo),e(et,nPo),e(et,Bd),e(Bd,sPo),e(Bd,Fle),e(Fle,lPo),e(Bd,iPo),e(Bd,Cle),e(Cle,dPo),e(Bd,cPo),e(et,fPo),e(et,Mle),e(Mle,mPo),e(et,gPo),g(QE,et,null),e(sr,hPo),e(sr,Qe),g(HE,Qe,null),e(Qe,pPo),e(Qe,Ele),e(Ele,_Po),e(Qe,uPo),e(Qe,en),e(en,bPo),e(en,yle),e(yle,vPo),e(en,TPo),e(en,wle),e(wle,FPo),e(en,CPo),e(en,Ale),e(Ale,MPo),e(en,EPo),e(Qe,yPo),e(Qe,Lle),e(Lle,G2),e(G2,Ble),e(Ble,wPo),e(G2,APo),e(G2,nN),e(nN,LPo),e(G2,BPo),e(Qe,xPo),e(Qe,X2),e(X2,kPo),e(X2,xle),e(xle,RPo),e(X2,SPo),e(X2,kle),e(kle,PPo),e(Qe,$Po),e(Qe,Rle),e(Rle,IPo),e(Qe,jPo),g(UE,Qe,null),b(d,Oxe,u),b(d,xd,u),e(xd,V2),e(V2,Sle),g(JE,Sle,null),e(xd,DPo),e(xd,Ple),e(Ple,NPo),b(d,Gxe,u),b(d,lr,u),g(YE,lr,null),e(lr,qPo),e(lr,kd),e(kd,OPo),e(kd,$le),e($le,GPo),e(kd,XPo),e(kd,Ile),e(Ile,VPo),e(kd,zPo),e(lr,WPo),e(lr,KE),e(KE,QPo),e(KE,jle),e(jle,HPo),e(KE,UPo),e(lr,JPo),e(lr,ot),g(ZE,ot,null),e(ot,YPo),e(ot,Dle),e(Dle,KPo),e(ot,ZPo),e(ot,Rd),e(Rd,e$o),e(Rd,Nle),e(Nle,o$o),e(Rd,r$o),e(Rd,qle),e(qle,t$o),e(Rd,a$o),e(ot,n$o),e(ot,Ole),e(Ole,s$o),e(ot,l$o),g(e3,ot,null),e(lr,i$o),e(lr,He),g(o3,He,null),e(He,d$o),e(He,Gle),e(Gle,c$o),e(He,f$o),e(He,on),e(on,m$o),e(on,Xle),e(Xle,g$o),e(on,h$o),e(on,Vle),e(Vle,p$o),e(on,_$o),e(on,zle),e(zle,u$o),e(on,b$o),e(He,v$o),e(He,Ce),e(Ce,z2),e(z2,Wle),e(Wle,T$o),e(z2,F$o),e(z2,sN),e(sN,C$o),e(z2,M$o),e(Ce,E$o),e(Ce,W2),e(W2,Qle),e(Qle,y$o),e(W2,w$o),e(W2,lN),e(lN,A$o),e(W2,L$o),e(Ce,B$o),e(Ce,qs),e(qs,Hle),e(Hle,x$o),e(qs,k$o),e(qs,iN),e(iN,R$o),e(qs,S$o),e(qs,dN),e(dN,P$o),e(qs,$$o),e(Ce,I$o),e(Ce,Q2),e(Q2,Ule),e(Ule,j$o),e(Q2,D$o),e(Q2,cN),e(cN,N$o),e(Q2,q$o),e(Ce,O$o),e(Ce,ma),e(ma,Jle),e(Jle,G$o),e(ma,X$o),e(ma,fN),e(fN,V$o),e(ma,z$o),e(ma,mN),e(mN,W$o),e(ma,Q$o),e(ma,gN),e(gN,H$o),e(ma,U$o),e(Ce,J$o),e(Ce,H2),e(H2,Yle),e(Yle,Y$o),e(H2,K$o),e(H2,hN),e(hN,Z$o),e(H2,eIo),e(Ce,oIo),e(Ce,U2),e(U2,Kle),e(Kle,rIo),e(U2,tIo),e(U2,pN),e(pN,aIo),e(U2,nIo),e(Ce,sIo),e(Ce,J2),e(J2,Zle),e(Zle,lIo),e(J2,iIo),e(J2,_N),e(_N,dIo),e(J2,cIo),e(Ce,fIo),e(Ce,Y2),e(Y2,eie),e(eie,mIo),e(Y2,gIo),e(Y2,uN),e(uN,hIo),e(Y2,pIo),e(He,_Io),e(He,K2),e(K2,uIo),e(K2,oie),e(oie,bIo),e(K2,vIo),e(K2,rie),e(rie,TIo),e(He,FIo),e(He,tie),e(tie,CIo),e(He,MIo),g(r3,He,null),b(d,Xxe,u),b(d,Sd,u),e(Sd,Z2),e(Z2,aie),g(t3,aie,null),e(Sd,EIo),e(Sd,nie),e(nie,yIo),b(d,Vxe,u),b(d,ir,u),g(a3,ir,null),e(ir,wIo),e(ir,Pd),e(Pd,AIo),e(Pd,sie),e(sie,LIo),e(Pd,BIo),e(Pd,lie),e(lie,xIo),e(Pd,kIo),e(ir,RIo),e(ir,n3),e(n3,SIo),e(n3,iie),e(iie,PIo),e(n3,$Io),e(ir,IIo),e(ir,rt),g(s3,rt,null),e(rt,jIo),e(rt,die),e(die,DIo),e(rt,NIo),e(rt,$d),e($d,qIo),e($d,cie),e(cie,OIo),e($d,GIo),e($d,fie),e(fie,XIo),e($d,VIo),e(rt,zIo),e(rt,mie),e(mie,WIo),e(rt,QIo),g(l3,rt,null),e(ir,HIo),e(ir,Ue),g(i3,Ue,null),e(Ue,UIo),e(Ue,gie),e(gie,JIo),e(Ue,YIo),e(Ue,rn),e(rn,KIo),e(rn,hie),e(hie,ZIo),e(rn,ejo),e(rn,pie),e(pie,ojo),e(rn,rjo),e(rn,_ie),e(_ie,tjo),e(rn,ajo),e(Ue,njo),e(Ue,uie),e(uie,ev),e(ev,bie),e(bie,sjo),e(ev,ljo),e(ev,bN),e(bN,ijo),e(ev,djo),e(Ue,cjo),e(Ue,ov),e(ov,fjo),e(ov,vie),e(vie,mjo),e(ov,gjo),e(ov,Tie),e(Tie,hjo),e(Ue,pjo),e(Ue,Fie),e(Fie,_jo),e(Ue,ujo),g(d3,Ue,null),b(d,zxe,u),b(d,Id,u),e(Id,rv),e(rv,Cie),g(c3,Cie,null),e(Id,bjo),e(Id,Mie),e(Mie,vjo),b(d,Wxe,u),b(d,dr,u),g(f3,dr,null),e(dr,Tjo),e(dr,jd),e(jd,Fjo),e(jd,Eie),e(Eie,Cjo),e(jd,Mjo),e(jd,yie),e(yie,Ejo),e(jd,yjo),e(dr,wjo),e(dr,m3),e(m3,Ajo),e(m3,wie),e(wie,Ljo),e(m3,Bjo),e(dr,xjo),e(dr,tt),g(g3,tt,null),e(tt,kjo),e(tt,Aie),e(Aie,Rjo),e(tt,Sjo),e(tt,Dd),e(Dd,Pjo),e(Dd,Lie),e(Lie,$jo),e(Dd,Ijo),e(Dd,Bie),e(Bie,jjo),e(Dd,Djo),e(tt,Njo),e(tt,xie),e(xie,qjo),e(tt,Ojo),g(h3,tt,null),e(dr,Gjo),e(dr,Je),g(p3,Je,null),e(Je,Xjo),e(Je,kie),e(kie,Vjo),e(Je,zjo),e(Je,tn),e(tn,Wjo),e(tn,Rie),e(Rie,Qjo),e(tn,Hjo),e(tn,Sie),e(Sie,Ujo),e(tn,Jjo),e(tn,Pie),e(Pie,Yjo),e(tn,Kjo),e(Je,Zjo),e(Je,xe),e(xe,tv),e(tv,$ie),e($ie,eDo),e(tv,oDo),e(tv,vN),e(vN,rDo),e(tv,tDo),e(xe,aDo),e(xe,av),e(av,Iie),e(Iie,nDo),e(av,sDo),e(av,TN),e(TN,lDo),e(av,iDo),e(xe,dDo),e(xe,nv),e(nv,jie),e(jie,cDo),e(nv,fDo),e(nv,FN),e(FN,mDo),e(nv,gDo),e(xe,hDo),e(xe,sv),e(sv,Die),e(Die,pDo),e(sv,_Do),e(sv,CN),e(CN,uDo),e(sv,bDo),e(xe,vDo),e(xe,lv),e(lv,Nie),e(Nie,TDo),e(lv,FDo),e(lv,MN),e(MN,CDo),e(lv,MDo),e(xe,EDo),e(xe,iv),e(iv,qie),e(qie,yDo),e(iv,wDo),e(iv,EN),e(EN,ADo),e(iv,LDo),e(xe,BDo),e(xe,dv),e(dv,Oie),e(Oie,xDo),e(dv,kDo),e(dv,yN),e(yN,RDo),e(dv,SDo),e(xe,PDo),e(xe,cv),e(cv,Gie),e(Gie,$Do),e(cv,IDo),e(cv,wN),e(wN,jDo),e(cv,DDo),e(Je,NDo),e(Je,fv),e(fv,qDo),e(fv,Xie),e(Xie,ODo),e(fv,GDo),e(fv,Vie),e(Vie,XDo),e(Je,VDo),e(Je,zie),e(zie,zDo),e(Je,WDo),g(_3,Je,null),b(d,Qxe,u),b(d,Nd,u),e(Nd,mv),e(mv,Wie),g(u3,Wie,null),e(Nd,QDo),e(Nd,Qie),e(Qie,HDo),b(d,Hxe,u),b(d,cr,u),g(b3,cr,null),e(cr,UDo),e(cr,qd),e(qd,JDo),e(qd,Hie),e(Hie,YDo),e(qd,KDo),e(qd,Uie),e(Uie,ZDo),e(qd,eNo),e(cr,oNo),e(cr,v3),e(v3,rNo),e(v3,Jie),e(Jie,tNo),e(v3,aNo),e(cr,nNo),e(cr,at),g(T3,at,null),e(at,sNo),e(at,Yie),e(Yie,lNo),e(at,iNo),e(at,Od),e(Od,dNo),e(Od,Kie),e(Kie,cNo),e(Od,fNo),e(Od,Zie),e(Zie,mNo),e(Od,gNo),e(at,hNo),e(at,ede),e(ede,pNo),e(at,_No),g(F3,at,null),e(cr,uNo),e(cr,Ye),g(C3,Ye,null),e(Ye,bNo),e(Ye,ode),e(ode,vNo),e(Ye,TNo),e(Ye,an),e(an,FNo),e(an,rde),e(rde,CNo),e(an,MNo),e(an,tde),e(tde,ENo),e(an,yNo),e(an,ade),e(ade,wNo),e(an,ANo),e(Ye,LNo),e(Ye,nn),e(nn,gv),e(gv,nde),e(nde,BNo),e(gv,xNo),e(gv,AN),e(AN,kNo),e(gv,RNo),e(nn,SNo),e(nn,hv),e(hv,sde),e(sde,PNo),e(hv,$No),e(hv,LN),e(LN,INo),e(hv,jNo),e(nn,DNo),e(nn,pv),e(pv,lde),e(lde,NNo),e(pv,qNo),e(pv,BN),e(BN,ONo),e(pv,GNo),e(nn,XNo),e(nn,_v),e(_v,ide),e(ide,VNo),e(_v,zNo),e(_v,xN),e(xN,WNo),e(_v,QNo),e(Ye,HNo),e(Ye,uv),e(uv,UNo),e(uv,dde),e(dde,JNo),e(uv,YNo),e(uv,cde),e(cde,KNo),e(Ye,ZNo),e(Ye,fde),e(fde,eqo),e(Ye,oqo),g(M3,Ye,null),b(d,Uxe,u),b(d,Gd,u),e(Gd,bv),e(bv,mde),g(E3,mde,null),e(Gd,rqo),e(Gd,gde),e(gde,tqo),b(d,Jxe,u),b(d,fr,u),g(y3,fr,null),e(fr,aqo),e(fr,Xd),e(Xd,nqo),e(Xd,hde),e(hde,sqo),e(Xd,lqo),e(Xd,pde),e(pde,iqo),e(Xd,dqo),e(fr,cqo),e(fr,w3),e(w3,fqo),e(w3,_de),e(_de,mqo),e(w3,gqo),e(fr,hqo),e(fr,nt),g(A3,nt,null),e(nt,pqo),e(nt,ude),e(ude,_qo),e(nt,uqo),e(nt,Vd),e(Vd,bqo),e(Vd,bde),e(bde,vqo),e(Vd,Tqo),e(Vd,vde),e(vde,Fqo),e(Vd,Cqo),e(nt,Mqo),e(nt,Tde),e(Tde,Eqo),e(nt,yqo),g(L3,nt,null),e(fr,wqo),e(fr,Ke),g(B3,Ke,null),e(Ke,Aqo),e(Ke,Fde),e(Fde,Lqo),e(Ke,Bqo),e(Ke,sn),e(sn,xqo),e(sn,Cde),e(Cde,kqo),e(sn,Rqo),e(sn,Mde),e(Mde,Sqo),e(sn,Pqo),e(sn,Ede),e(Ede,$qo),e(sn,Iqo),e(Ke,jqo),e(Ke,ke),e(ke,vv),e(vv,yde),e(yde,Dqo),e(vv,Nqo),e(vv,kN),e(kN,qqo),e(vv,Oqo),e(ke,Gqo),e(ke,Tv),e(Tv,wde),e(wde,Xqo),e(Tv,Vqo),e(Tv,RN),e(RN,zqo),e(Tv,Wqo),e(ke,Qqo),e(ke,Fv),e(Fv,Ade),e(Ade,Hqo),e(Fv,Uqo),e(Fv,SN),e(SN,Jqo),e(Fv,Yqo),e(ke,Kqo),e(ke,Cv),e(Cv,Lde),e(Lde,Zqo),e(Cv,eOo),e(Cv,PN),e(PN,oOo),e(Cv,rOo),e(ke,tOo),e(ke,Mv),e(Mv,Bde),e(Bde,aOo),e(Mv,nOo),e(Mv,$N),e($N,sOo),e(Mv,lOo),e(ke,iOo),e(ke,Ev),e(Ev,xde),e(xde,dOo),e(Ev,cOo),e(Ev,IN),e(IN,fOo),e(Ev,mOo),e(ke,gOo),e(ke,yv),e(yv,kde),e(kde,hOo),e(yv,pOo),e(yv,jN),e(jN,_Oo),e(yv,uOo),e(ke,bOo),e(ke,wv),e(wv,Rde),e(Rde,vOo),e(wv,TOo),e(wv,DN),e(DN,FOo),e(wv,COo),e(Ke,MOo),e(Ke,Av),e(Av,EOo),e(Av,Sde),e(Sde,yOo),e(Av,wOo),e(Av,Pde),e(Pde,AOo),e(Ke,LOo),e(Ke,$de),e($de,BOo),e(Ke,xOo),g(x3,Ke,null),b(d,Yxe,u),b(d,zd,u),e(zd,Lv),e(Lv,Ide),g(k3,Ide,null),e(zd,kOo),e(zd,jde),e(jde,ROo),b(d,Kxe,u),b(d,mr,u),g(R3,mr,null),e(mr,SOo),e(mr,Wd),e(Wd,POo),e(Wd,Dde),e(Dde,$Oo),e(Wd,IOo),e(Wd,Nde),e(Nde,jOo),e(Wd,DOo),e(mr,NOo),e(mr,S3),e(S3,qOo),e(S3,qde),e(qde,OOo),e(S3,GOo),e(mr,XOo),e(mr,st),g(P3,st,null),e(st,VOo),e(st,Ode),e(Ode,zOo),e(st,WOo),e(st,Qd),e(Qd,QOo),e(Qd,Gde),e(Gde,HOo),e(Qd,UOo),e(Qd,Xde),e(Xde,JOo),e(Qd,YOo),e(st,KOo),e(st,Vde),e(Vde,ZOo),e(st,eGo),g($3,st,null),e(mr,oGo),e(mr,Ze),g(I3,Ze,null),e(Ze,rGo),e(Ze,zde),e(zde,tGo),e(Ze,aGo),e(Ze,ln),e(ln,nGo),e(ln,Wde),e(Wde,sGo),e(ln,lGo),e(ln,Qde),e(Qde,iGo),e(ln,dGo),e(ln,Hde),e(Hde,cGo),e(ln,fGo),e(Ze,mGo),e(Ze,j3),e(j3,Bv),e(Bv,Ude),e(Ude,gGo),e(Bv,hGo),e(Bv,NN),e(NN,pGo),e(Bv,_Go),e(j3,uGo),e(j3,xv),e(xv,Jde),e(Jde,bGo),e(xv,vGo),e(xv,qN),e(qN,TGo),e(xv,FGo),e(Ze,CGo),e(Ze,kv),e(kv,MGo),e(kv,Yde),e(Yde,EGo),e(kv,yGo),e(kv,Kde),e(Kde,wGo),e(Ze,AGo),e(Ze,Zde),e(Zde,LGo),e(Ze,BGo),g(D3,Ze,null),b(d,Zxe,u),b(d,Hd,u),e(Hd,Rv),e(Rv,ece),g(N3,ece,null),e(Hd,xGo),e(Hd,oce),e(oce,kGo),b(d,eke,u),b(d,gr,u),g(q3,gr,null),e(gr,RGo),e(gr,Ud),e(Ud,SGo),e(Ud,rce),e(rce,PGo),e(Ud,$Go),e(Ud,tce),e(tce,IGo),e(Ud,jGo),e(gr,DGo),e(gr,O3),e(O3,NGo),e(O3,ace),e(ace,qGo),e(O3,OGo),e(gr,GGo),e(gr,lt),g(G3,lt,null),e(lt,XGo),e(lt,nce),e(nce,VGo),e(lt,zGo),e(lt,Jd),e(Jd,WGo),e(Jd,sce),e(sce,QGo),e(Jd,HGo),e(Jd,lce),e(lce,UGo),e(Jd,JGo),e(lt,YGo),e(lt,ice),e(ice,KGo),e(lt,ZGo),g(X3,lt,null),e(gr,eXo),e(gr,eo),g(V3,eo,null),e(eo,oXo),e(eo,dce),e(dce,rXo),e(eo,tXo),e(eo,dn),e(dn,aXo),e(dn,cce),e(cce,nXo),e(dn,sXo),e(dn,fce),e(fce,lXo),e(dn,iXo),e(dn,mce),e(mce,dXo),e(dn,cXo),e(eo,fXo),e(eo,cn),e(cn,Sv),e(Sv,gce),e(gce,mXo),e(Sv,gXo),e(Sv,ON),e(ON,hXo),e(Sv,pXo),e(cn,_Xo),e(cn,Pv),e(Pv,hce),e(hce,uXo),e(Pv,bXo),e(Pv,GN),e(GN,vXo),e(Pv,TXo),e(cn,FXo),e(cn,$v),e($v,pce),e(pce,CXo),e($v,MXo),e($v,XN),e(XN,EXo),e($v,yXo),e(cn,wXo),e(cn,Iv),e(Iv,_ce),e(_ce,AXo),e(Iv,LXo),e(Iv,VN),e(VN,BXo),e(Iv,xXo),e(eo,kXo),e(eo,jv),e(jv,RXo),e(jv,uce),e(uce,SXo),e(jv,PXo),e(jv,bce),e(bce,$Xo),e(eo,IXo),e(eo,vce),e(vce,jXo),e(eo,DXo),g(z3,eo,null),b(d,oke,u),b(d,Yd,u),e(Yd,Dv),e(Dv,Tce),g(W3,Tce,null),e(Yd,NXo),e(Yd,Fce),e(Fce,qXo),b(d,rke,u),b(d,hr,u),g(Q3,hr,null),e(hr,OXo),e(hr,Kd),e(Kd,GXo),e(Kd,Cce),e(Cce,XXo),e(Kd,VXo),e(Kd,Mce),e(Mce,zXo),e(Kd,WXo),e(hr,QXo),e(hr,H3),e(H3,HXo),e(H3,Ece),e(Ece,UXo),e(H3,JXo),e(hr,YXo),e(hr,it),g(U3,it,null),e(it,KXo),e(it,yce),e(yce,ZXo),e(it,eVo),e(it,Zd),e(Zd,oVo),e(Zd,wce),e(wce,rVo),e(Zd,tVo),e(Zd,Ace),e(Ace,aVo),e(Zd,nVo),e(it,sVo),e(it,Lce),e(Lce,lVo),e(it,iVo),g(J3,it,null),e(hr,dVo),e(hr,oo),g(Y3,oo,null),e(oo,cVo),e(oo,Bce),e(Bce,fVo),e(oo,mVo),e(oo,fn),e(fn,gVo),e(fn,xce),e(xce,hVo),e(fn,pVo),e(fn,kce),e(kce,_Vo),e(fn,uVo),e(fn,Rce),e(Rce,bVo),e(fn,vVo),e(oo,TVo),e(oo,ec),e(ec,Nv),e(Nv,Sce),e(Sce,FVo),e(Nv,CVo),e(Nv,zN),e(zN,MVo),e(Nv,EVo),e(ec,yVo),e(ec,qv),e(qv,Pce),e(Pce,wVo),e(qv,AVo),e(qv,WN),e(WN,LVo),e(qv,BVo),e(ec,xVo),e(ec,Ov),e(Ov,$ce),e($ce,kVo),e(Ov,RVo),e(Ov,QN),e(QN,SVo),e(Ov,PVo),e(oo,$Vo),e(oo,Gv),e(Gv,IVo),e(Gv,Ice),e(Ice,jVo),e(Gv,DVo),e(Gv,jce),e(jce,NVo),e(oo,qVo),e(oo,Dce),e(Dce,OVo),e(oo,GVo),g(K3,oo,null),b(d,tke,u),b(d,oc,u),e(oc,Xv),e(Xv,Nce),g(Z3,Nce,null),e(oc,XVo),e(oc,qce),e(qce,VVo),b(d,ake,u),b(d,pr,u),g(ey,pr,null),e(pr,zVo),e(pr,rc),e(rc,WVo),e(rc,Oce),e(Oce,QVo),e(rc,HVo),e(rc,Gce),e(Gce,UVo),e(rc,JVo),e(pr,YVo),e(pr,oy),e(oy,KVo),e(oy,Xce),e(Xce,ZVo),e(oy,ezo),e(pr,ozo),e(pr,dt),g(ry,dt,null),e(dt,rzo),e(dt,Vce),e(Vce,tzo),e(dt,azo),e(dt,tc),e(tc,nzo),e(tc,zce),e(zce,szo),e(tc,lzo),e(tc,Wce),e(Wce,izo),e(tc,dzo),e(dt,czo),e(dt,Qce),e(Qce,fzo),e(dt,mzo),g(ty,dt,null),e(pr,gzo),e(pr,ro),g(ay,ro,null),e(ro,hzo),e(ro,Hce),e(Hce,pzo),e(ro,_zo),e(ro,mn),e(mn,uzo),e(mn,Uce),e(Uce,bzo),e(mn,vzo),e(mn,Jce),e(Jce,Tzo),e(mn,Fzo),e(mn,Yce),e(Yce,Czo),e(mn,Mzo),e(ro,Ezo),e(ro,Kce),e(Kce,Vv),e(Vv,Zce),e(Zce,yzo),e(Vv,wzo),e(Vv,HN),e(HN,Azo),e(Vv,Lzo),e(ro,Bzo),e(ro,zv),e(zv,xzo),e(zv,efe),e(efe,kzo),e(zv,Rzo),e(zv,ofe),e(ofe,Szo),e(ro,Pzo),e(ro,rfe),e(rfe,$zo),e(ro,Izo),g(ny,ro,null),b(d,nke,u),b(d,ac,u),e(ac,Wv),e(Wv,tfe),g(sy,tfe,null),e(ac,jzo),e(ac,afe),e(afe,Dzo),b(d,ske,u),b(d,_r,u),g(ly,_r,null),e(_r,Nzo),e(_r,nc),e(nc,qzo),e(nc,nfe),e(nfe,Ozo),e(nc,Gzo),e(nc,sfe),e(sfe,Xzo),e(nc,Vzo),e(_r,zzo),e(_r,iy),e(iy,Wzo),e(iy,lfe),e(lfe,Qzo),e(iy,Hzo),e(_r,Uzo),e(_r,ct),g(dy,ct,null),e(ct,Jzo),e(ct,ife),e(ife,Yzo),e(ct,Kzo),e(ct,sc),e(sc,Zzo),e(sc,dfe),e(dfe,eWo),e(sc,oWo),e(sc,cfe),e(cfe,rWo),e(sc,tWo),e(ct,aWo),e(ct,ffe),e(ffe,nWo),e(ct,sWo),g(cy,ct,null),e(_r,lWo),e(_r,to),g(fy,to,null),e(to,iWo),e(to,mfe),e(mfe,dWo),e(to,cWo),e(to,gn),e(gn,fWo),e(gn,gfe),e(gfe,mWo),e(gn,gWo),e(gn,hfe),e(hfe,hWo),e(gn,pWo),e(gn,pfe),e(pfe,_Wo),e(gn,uWo),e(to,bWo),e(to,_fe),e(_fe,Qv),e(Qv,ufe),e(ufe,vWo),e(Qv,TWo),e(Qv,UN),e(UN,FWo),e(Qv,CWo),e(to,MWo),e(to,Hv),e(Hv,EWo),e(Hv,bfe),e(bfe,yWo),e(Hv,wWo),e(Hv,vfe),e(vfe,AWo),e(to,LWo),e(to,Tfe),e(Tfe,BWo),e(to,xWo),g(my,to,null),b(d,lke,u),b(d,lc,u),e(lc,Uv),e(Uv,Ffe),g(gy,Ffe,null),e(lc,kWo),e(lc,Cfe),e(Cfe,RWo),b(d,ike,u),b(d,ur,u),g(hy,ur,null),e(ur,SWo),e(ur,ic),e(ic,PWo),e(ic,Mfe),e(Mfe,$Wo),e(ic,IWo),e(ic,Efe),e(Efe,jWo),e(ic,DWo),e(ur,NWo),e(ur,py),e(py,qWo),e(py,yfe),e(yfe,OWo),e(py,GWo),e(ur,XWo),e(ur,ft),g(_y,ft,null),e(ft,VWo),e(ft,wfe),e(wfe,zWo),e(ft,WWo),e(ft,dc),e(dc,QWo),e(dc,Afe),e(Afe,HWo),e(dc,UWo),e(dc,Lfe),e(Lfe,JWo),e(dc,YWo),e(ft,KWo),e(ft,Bfe),e(Bfe,ZWo),e(ft,eQo),g(uy,ft,null),e(ur,oQo),e(ur,ao),g(by,ao,null),e(ao,rQo),e(ao,xfe),e(xfe,tQo),e(ao,aQo),e(ao,hn),e(hn,nQo),e(hn,kfe),e(kfe,sQo),e(hn,lQo),e(hn,Rfe),e(Rfe,iQo),e(hn,dQo),e(hn,Sfe),e(Sfe,cQo),e(hn,fQo),e(ao,mQo),e(ao,vy),e(vy,Jv),e(Jv,Pfe),e(Pfe,gQo),e(Jv,hQo),e(Jv,JN),e(JN,pQo),e(Jv,_Qo),e(vy,uQo),e(vy,Yv),e(Yv,$fe),e($fe,bQo),e(Yv,vQo),e(Yv,YN),e(YN,TQo),e(Yv,FQo),e(ao,CQo),e(ao,Kv),e(Kv,MQo),e(Kv,Ife),e(Ife,EQo),e(Kv,yQo),e(Kv,jfe),e(jfe,wQo),e(ao,AQo),e(ao,Dfe),e(Dfe,LQo),e(ao,BQo),g(Ty,ao,null),b(d,dke,u),b(d,cc,u),e(cc,Zv),e(Zv,Nfe),g(Fy,Nfe,null),e(cc,xQo),e(cc,qfe),e(qfe,kQo),b(d,cke,u),b(d,br,u),g(Cy,br,null),e(br,RQo),e(br,fc),e(fc,SQo),e(fc,Ofe),e(Ofe,PQo),e(fc,$Qo),e(fc,Gfe),e(Gfe,IQo),e(fc,jQo),e(br,DQo),e(br,My),e(My,NQo),e(My,Xfe),e(Xfe,qQo),e(My,OQo),e(br,GQo),e(br,mt),g(Ey,mt,null),e(mt,XQo),e(mt,Vfe),e(Vfe,VQo),e(mt,zQo),e(mt,mc),e(mc,WQo),e(mc,zfe),e(zfe,QQo),e(mc,HQo),e(mc,Wfe),e(Wfe,UQo),e(mc,JQo),e(mt,YQo),e(mt,Qfe),e(Qfe,KQo),e(mt,ZQo),g(yy,mt,null),e(br,eHo),e(br,no),g(wy,no,null),e(no,oHo),e(no,Hfe),e(Hfe,rHo),e(no,tHo),e(no,pn),e(pn,aHo),e(pn,Ufe),e(Ufe,nHo),e(pn,sHo),e(pn,Jfe),e(Jfe,lHo),e(pn,iHo),e(pn,Yfe),e(Yfe,dHo),e(pn,cHo),e(no,fHo),e(no,Kfe),e(Kfe,e6),e(e6,Zfe),e(Zfe,mHo),e(e6,gHo),e(e6,KN),e(KN,hHo),e(e6,pHo),e(no,_Ho),e(no,o6),e(o6,uHo),e(o6,eme),e(eme,bHo),e(o6,vHo),e(o6,ome),e(ome,THo),e(no,FHo),e(no,rme),e(rme,CHo),e(no,MHo),g(Ay,no,null),b(d,fke,u),b(d,gc,u),e(gc,r6),e(r6,tme),g(Ly,tme,null),e(gc,EHo),e(gc,ame),e(ame,yHo),b(d,mke,u),b(d,vr,u),g(By,vr,null),e(vr,wHo),e(vr,hc),e(hc,AHo),e(hc,nme),e(nme,LHo),e(hc,BHo),e(hc,sme),e(sme,xHo),e(hc,kHo),e(vr,RHo),e(vr,xy),e(xy,SHo),e(xy,lme),e(lme,PHo),e(xy,$Ho),e(vr,IHo),e(vr,gt),g(ky,gt,null),e(gt,jHo),e(gt,ime),e(ime,DHo),e(gt,NHo),e(gt,pc),e(pc,qHo),e(pc,dme),e(dme,OHo),e(pc,GHo),e(pc,cme),e(cme,XHo),e(pc,VHo),e(gt,zHo),e(gt,fme),e(fme,WHo),e(gt,QHo),g(Ry,gt,null),e(vr,HHo),e(vr,ho),g(Sy,ho,null),e(ho,UHo),e(ho,mme),e(mme,JHo),e(ho,YHo),e(ho,_n),e(_n,KHo),e(_n,gme),e(gme,ZHo),e(_n,eUo),e(_n,hme),e(hme,oUo),e(_n,rUo),e(_n,pme),e(pme,tUo),e(_n,aUo),e(ho,nUo),e(ho,B),e(B,t6),e(t6,_me),e(_me,sUo),e(t6,lUo),e(t6,ZN),e(ZN,iUo),e(t6,dUo),e(B,cUo),e(B,a6),e(a6,ume),e(ume,fUo),e(a6,mUo),e(a6,eq),e(eq,gUo),e(a6,hUo),e(B,pUo),e(B,n6),e(n6,bme),e(bme,_Uo),e(n6,uUo),e(n6,oq),e(oq,bUo),e(n6,vUo),e(B,TUo),e(B,s6),e(s6,vme),e(vme,FUo),e(s6,CUo),e(s6,rq),e(rq,MUo),e(s6,EUo),e(B,yUo),e(B,l6),e(l6,Tme),e(Tme,wUo),e(l6,AUo),e(l6,tq),e(tq,LUo),e(l6,BUo),e(B,xUo),e(B,i6),e(i6,Fme),e(Fme,kUo),e(i6,RUo),e(i6,aq),e(aq,SUo),e(i6,PUo),e(B,$Uo),e(B,d6),e(d6,Cme),e(Cme,IUo),e(d6,jUo),e(d6,nq),e(nq,DUo),e(d6,NUo),e(B,qUo),e(B,c6),e(c6,Mme),e(Mme,OUo),e(c6,GUo),e(c6,sq),e(sq,XUo),e(c6,VUo),e(B,zUo),e(B,f6),e(f6,Eme),e(Eme,WUo),e(f6,QUo),e(f6,lq),e(lq,HUo),e(f6,UUo),e(B,JUo),e(B,m6),e(m6,yme),e(yme,YUo),e(m6,KUo),e(m6,iq),e(iq,ZUo),e(m6,eJo),e(B,oJo),e(B,g6),e(g6,wme),e(wme,rJo),e(g6,tJo),e(g6,dq),e(dq,aJo),e(g6,nJo),e(B,sJo),e(B,h6),e(h6,Ame),e(Ame,lJo),e(h6,iJo),e(h6,cq),e(cq,dJo),e(h6,cJo),e(B,fJo),e(B,p6),e(p6,Lme),e(Lme,mJo),e(p6,gJo),e(p6,fq),e(fq,hJo),e(p6,pJo),e(B,_Jo),e(B,_6),e(_6,Bme),e(Bme,uJo),e(_6,bJo),e(_6,mq),e(mq,vJo),e(_6,TJo),e(B,FJo),e(B,u6),e(u6,xme),e(xme,CJo),e(u6,MJo),e(u6,gq),e(gq,EJo),e(u6,yJo),e(B,wJo),e(B,b6),e(b6,kme),e(kme,AJo),e(b6,LJo),e(b6,hq),e(hq,BJo),e(b6,xJo),e(B,kJo),e(B,Os),e(Os,Rme),e(Rme,RJo),e(Os,SJo),e(Os,pq),e(pq,PJo),e(Os,$Jo),e(Os,_q),e(_q,IJo),e(Os,jJo),e(B,DJo),e(B,v6),e(v6,Sme),e(Sme,NJo),e(v6,qJo),e(v6,uq),e(uq,OJo),e(v6,GJo),e(B,XJo),e(B,T6),e(T6,Pme),e(Pme,VJo),e(T6,zJo),e(T6,bq),e(bq,WJo),e(T6,QJo),e(B,HJo),e(B,F6),e(F6,$me),e($me,UJo),e(F6,JJo),e(F6,vq),e(vq,YJo),e(F6,KJo),e(B,ZJo),e(B,C6),e(C6,Ime),e(Ime,eYo),e(C6,oYo),e(C6,Tq),e(Tq,rYo),e(C6,tYo),e(B,aYo),e(B,M6),e(M6,jme),e(jme,nYo),e(M6,sYo),e(M6,Fq),e(Fq,lYo),e(M6,iYo),e(B,dYo),e(B,E6),e(E6,Dme),e(Dme,cYo),e(E6,fYo),e(E6,Cq),e(Cq,mYo),e(E6,gYo),e(B,hYo),e(B,y6),e(y6,Nme),e(Nme,pYo),e(y6,_Yo),e(y6,Mq),e(Mq,uYo),e(y6,bYo),e(B,vYo),e(B,w6),e(w6,qme),e(qme,TYo),e(w6,FYo),e(w6,Eq),e(Eq,CYo),e(w6,MYo),e(B,EYo),e(B,A6),e(A6,Ome),e(Ome,yYo),e(A6,wYo),e(A6,yq),e(yq,AYo),e(A6,LYo),e(B,BYo),e(B,L6),e(L6,Gme),e(Gme,xYo),e(L6,kYo),e(L6,wq),e(wq,RYo),e(L6,SYo),e(B,PYo),e(B,B6),e(B6,Xme),e(Xme,$Yo),e(B6,IYo),e(B6,Aq),e(Aq,jYo),e(B6,DYo),e(B,NYo),e(B,x6),e(x6,Vme),e(Vme,qYo),e(x6,OYo),e(x6,Lq),e(Lq,GYo),e(x6,XYo),e(B,VYo),e(B,k6),e(k6,zme),e(zme,zYo),e(k6,WYo),e(k6,Bq),e(Bq,QYo),e(k6,HYo),e(B,UYo),e(B,R6),e(R6,Wme),e(Wme,JYo),e(R6,YYo),e(R6,xq),e(xq,KYo),e(R6,ZYo),e(B,eKo),e(B,S6),e(S6,Qme),e(Qme,oKo),e(S6,rKo),e(S6,kq),e(kq,tKo),e(S6,aKo),e(B,nKo),e(B,P6),e(P6,Hme),e(Hme,sKo),e(P6,lKo),e(P6,Rq),e(Rq,iKo),e(P6,dKo),e(B,cKo),e(B,$6),e($6,Ume),e(Ume,fKo),e($6,mKo),e($6,Sq),e(Sq,gKo),e($6,hKo),e(B,pKo),e(B,I6),e(I6,Jme),e(Jme,_Ko),e(I6,uKo),e(I6,Pq),e(Pq,bKo),e(I6,vKo),e(B,TKo),e(B,j6),e(j6,Yme),e(Yme,FKo),e(j6,CKo),e(j6,$q),e($q,MKo),e(j6,EKo),e(B,yKo),e(B,D6),e(D6,Kme),e(Kme,wKo),e(D6,AKo),e(D6,Iq),e(Iq,LKo),e(D6,BKo),e(B,xKo),e(B,N6),e(N6,Zme),e(Zme,kKo),e(N6,RKo),e(N6,jq),e(jq,SKo),e(N6,PKo),e(B,$Ko),e(B,q6),e(q6,ege),e(ege,IKo),e(q6,jKo),e(q6,Dq),e(Dq,DKo),e(q6,NKo),e(B,qKo),e(B,O6),e(O6,oge),e(oge,OKo),e(O6,GKo),e(O6,Nq),e(Nq,XKo),e(O6,VKo),e(B,zKo),e(B,G6),e(G6,rge),e(rge,WKo),e(G6,QKo),e(G6,qq),e(qq,HKo),e(G6,UKo),e(B,JKo),e(B,X6),e(X6,tge),e(tge,YKo),e(X6,KKo),e(X6,Oq),e(Oq,ZKo),e(X6,eZo),e(ho,oZo),e(ho,age),e(age,rZo),e(ho,tZo),g(Py,ho,null),b(d,gke,u),b(d,_c,u),e(_c,V6),e(V6,nge),g($y,nge,null),e(_c,aZo),e(_c,sge),e(sge,nZo),b(d,hke,u),b(d,Tr,u),g(Iy,Tr,null),e(Tr,sZo),e(Tr,uc),e(uc,lZo),e(uc,lge),e(lge,iZo),e(uc,dZo),e(uc,ige),e(ige,cZo),e(uc,fZo),e(Tr,mZo),e(Tr,jy),e(jy,gZo),e(jy,dge),e(dge,hZo),e(jy,pZo),e(Tr,_Zo),e(Tr,ht),g(Dy,ht,null),e(ht,uZo),e(ht,cge),e(cge,bZo),e(ht,vZo),e(ht,bc),e(bc,TZo),e(bc,fge),e(fge,FZo),e(bc,CZo),e(bc,mge),e(mge,MZo),e(bc,EZo),e(ht,yZo),e(ht,gge),e(gge,wZo),e(ht,AZo),g(Ny,ht,null),e(Tr,LZo),e(Tr,po),g(qy,po,null),e(po,BZo),e(po,hge),e(hge,xZo),e(po,kZo),e(po,un),e(un,RZo),e(un,pge),e(pge,SZo),e(un,PZo),e(un,_ge),e(_ge,$Zo),e(un,IZo),e(un,uge),e(uge,jZo),e(un,DZo),e(po,NZo),e(po,H),e(H,z6),e(z6,bge),e(bge,qZo),e(z6,OZo),e(z6,Gq),e(Gq,GZo),e(z6,XZo),e(H,VZo),e(H,W6),e(W6,vge),e(vge,zZo),e(W6,WZo),e(W6,Xq),e(Xq,QZo),e(W6,HZo),e(H,UZo),e(H,Q6),e(Q6,Tge),e(Tge,JZo),e(Q6,YZo),e(Q6,Vq),e(Vq,KZo),e(Q6,ZZo),e(H,eer),e(H,H6),e(H6,Fge),e(Fge,oer),e(H6,rer),e(H6,zq),e(zq,ter),e(H6,aer),e(H,ner),e(H,U6),e(U6,Cge),e(Cge,ser),e(U6,ler),e(U6,Wq),e(Wq,ier),e(U6,der),e(H,cer),e(H,J6),e(J6,Mge),e(Mge,fer),e(J6,mer),e(J6,Qq),e(Qq,ger),e(J6,her),e(H,per),e(H,Y6),e(Y6,Ege),e(Ege,_er),e(Y6,uer),e(Y6,Hq),e(Hq,ber),e(Y6,ver),e(H,Ter),e(H,K6),e(K6,yge),e(yge,Fer),e(K6,Cer),e(K6,Uq),e(Uq,Mer),e(K6,Eer),e(H,yer),e(H,Z6),e(Z6,wge),e(wge,wer),e(Z6,Aer),e(Z6,Jq),e(Jq,Ler),e(Z6,Ber),e(H,xer),e(H,eT),e(eT,Age),e(Age,ker),e(eT,Rer),e(eT,Yq),e(Yq,Ser),e(eT,Per),e(H,$er),e(H,oT),e(oT,Lge),e(Lge,Ier),e(oT,jer),e(oT,Kq),e(Kq,Der),e(oT,Ner),e(H,qer),e(H,rT),e(rT,Bge),e(Bge,Oer),e(rT,Ger),e(rT,Zq),e(Zq,Xer),e(rT,Ver),e(H,zer),e(H,tT),e(tT,xge),e(xge,Wer),e(tT,Qer),e(tT,eO),e(eO,Her),e(tT,Uer),e(H,Jer),e(H,aT),e(aT,kge),e(kge,Yer),e(aT,Ker),e(aT,oO),e(oO,Zer),e(aT,eor),e(H,oor),e(H,nT),e(nT,Rge),e(Rge,ror),e(nT,tor),e(nT,rO),e(rO,aor),e(nT,nor),e(H,sor),e(H,sT),e(sT,Sge),e(Sge,lor),e(sT,ior),e(sT,tO),e(tO,dor),e(sT,cor),e(H,mor),e(H,lT),e(lT,Pge),e(Pge,gor),e(lT,hor),e(lT,aO),e(aO,por),e(lT,_or),e(H,uor),e(H,iT),e(iT,$ge),e($ge,bor),e(iT,vor),e(iT,nO),e(nO,Tor),e(iT,For),e(H,Cor),e(H,dT),e(dT,Ige),e(Ige,Mor),e(dT,Eor),e(dT,sO),e(sO,yor),e(dT,wor),e(H,Aor),e(H,cT),e(cT,jge),e(jge,Lor),e(cT,Bor),e(cT,lO),e(lO,xor),e(cT,kor),e(H,Ror),e(H,fT),e(fT,Dge),e(Dge,Sor),e(fT,Por),e(fT,iO),e(iO,$or),e(fT,Ior),e(H,jor),e(H,mT),e(mT,Nge),e(Nge,Dor),e(mT,Nor),e(mT,dO),e(dO,qor),e(mT,Oor),e(po,Gor),e(po,qge),e(qge,Xor),e(po,Vor),g(Oy,po,null),b(d,pke,u),b(d,vc,u),e(vc,gT),e(gT,Oge),g(Gy,Oge,null),e(vc,zor),e(vc,Gge),e(Gge,Wor),b(d,_ke,u),b(d,Fr,u),g(Xy,Fr,null),e(Fr,Qor),e(Fr,Tc),e(Tc,Hor),e(Tc,Xge),e(Xge,Uor),e(Tc,Jor),e(Tc,Vge),e(Vge,Yor),e(Tc,Kor),e(Fr,Zor),e(Fr,Vy),e(Vy,err),e(Vy,zge),e(zge,orr),e(Vy,rrr),e(Fr,trr),e(Fr,pt),g(zy,pt,null),e(pt,arr),e(pt,Wge),e(Wge,nrr),e(pt,srr),e(pt,Fc),e(Fc,lrr),e(Fc,Qge),e(Qge,irr),e(Fc,drr),e(Fc,Hge),e(Hge,crr),e(Fc,frr),e(pt,mrr),e(pt,Uge),e(Uge,grr),e(pt,hrr),g(Wy,pt,null),e(Fr,prr),e(Fr,_o),g(Qy,_o,null),e(_o,_rr),e(_o,Jge),e(Jge,urr),e(_o,brr),e(_o,bn),e(bn,vrr),e(bn,Yge),e(Yge,Trr),e(bn,Frr),e(bn,Kge),e(Kge,Crr),e(bn,Mrr),e(bn,Zge),e(Zge,Err),e(bn,yrr),e(_o,wrr),e(_o,me),e(me,hT),e(hT,ehe),e(ehe,Arr),e(hT,Lrr),e(hT,cO),e(cO,Brr),e(hT,xrr),e(me,krr),e(me,pT),e(pT,ohe),e(ohe,Rrr),e(pT,Srr),e(pT,fO),e(fO,Prr),e(pT,$rr),e(me,Irr),e(me,_T),e(_T,rhe),e(rhe,jrr),e(_T,Drr),e(_T,mO),e(mO,Nrr),e(_T,qrr),e(me,Orr),e(me,uT),e(uT,the),e(the,Grr),e(uT,Xrr),e(uT,gO),e(gO,Vrr),e(uT,zrr),e(me,Wrr),e(me,bT),e(bT,ahe),e(ahe,Qrr),e(bT,Hrr),e(bT,hO),e(hO,Urr),e(bT,Jrr),e(me,Yrr),e(me,vT),e(vT,nhe),e(nhe,Krr),e(vT,Zrr),e(vT,pO),e(pO,etr),e(vT,otr),e(me,rtr),e(me,TT),e(TT,she),e(she,ttr),e(TT,atr),e(TT,_O),e(_O,ntr),e(TT,str),e(me,ltr),e(me,FT),e(FT,lhe),e(lhe,itr),e(FT,dtr),e(FT,uO),e(uO,ctr),e(FT,ftr),e(me,mtr),e(me,CT),e(CT,ihe),e(ihe,gtr),e(CT,htr),e(CT,bO),e(bO,ptr),e(CT,_tr),e(me,utr),e(me,MT),e(MT,dhe),e(dhe,btr),e(MT,vtr),e(MT,vO),e(vO,Ttr),e(MT,Ftr),e(me,Ctr),e(me,ET),e(ET,che),e(che,Mtr),e(ET,Etr),e(ET,TO),e(TO,ytr),e(ET,wtr),e(_o,Atr),e(_o,fhe),e(fhe,Ltr),e(_o,Btr),g(Hy,_o,null),b(d,uke,u),b(d,Cc,u),e(Cc,yT),e(yT,mhe),g(Uy,mhe,null),e(Cc,xtr),e(Cc,ghe),e(ghe,ktr),b(d,bke,u),b(d,Cr,u),g(Jy,Cr,null),e(Cr,Rtr),e(Cr,Mc),e(Mc,Str),e(Mc,hhe),e(hhe,Ptr),e(Mc,$tr),e(Mc,phe),e(phe,Itr),e(Mc,jtr),e(Cr,Dtr),e(Cr,Yy),e(Yy,Ntr),e(Yy,_he),e(_he,qtr),e(Yy,Otr),e(Cr,Gtr),e(Cr,_t),g(Ky,_t,null),e(_t,Xtr),e(_t,uhe),e(uhe,Vtr),e(_t,ztr),e(_t,Ec),e(Ec,Wtr),e(Ec,bhe),e(bhe,Qtr),e(Ec,Htr),e(Ec,vhe),e(vhe,Utr),e(Ec,Jtr),e(_t,Ytr),e(_t,The),e(The,Ktr),e(_t,Ztr),g(Zy,_t,null),e(Cr,ear),e(Cr,uo),g(ew,uo,null),e(uo,oar),e(uo,Fhe),e(Fhe,rar),e(uo,tar),e(uo,vn),e(vn,aar),e(vn,Che),e(Che,nar),e(vn,sar),e(vn,Mhe),e(Mhe,lar),e(vn,iar),e(vn,Ehe),e(Ehe,dar),e(vn,car),e(uo,far),e(uo,ow),e(ow,wT),e(wT,yhe),e(yhe,mar),e(wT,gar),e(wT,FO),e(FO,har),e(wT,par),e(ow,_ar),e(ow,AT),e(AT,whe),e(whe,uar),e(AT,bar),e(AT,CO),e(CO,Tar),e(AT,Far),e(uo,Car),e(uo,Ahe),e(Ahe,Mar),e(uo,Ear),g(rw,uo,null),b(d,vke,u),b(d,yc,u),e(yc,LT),e(LT,Lhe),g(tw,Lhe,null),e(yc,yar),e(yc,Bhe),e(Bhe,war),b(d,Tke,u),b(d,Mr,u),g(aw,Mr,null),e(Mr,Aar),e(Mr,wc),e(wc,Lar),e(wc,xhe),e(xhe,Bar),e(wc,xar),e(wc,khe),e(khe,kar),e(wc,Rar),e(Mr,Sar),e(Mr,nw),e(nw,Par),e(nw,Rhe),e(Rhe,$ar),e(nw,Iar),e(Mr,jar),e(Mr,ut),g(sw,ut,null),e(ut,Dar),e(ut,She),e(She,Nar),e(ut,qar),e(ut,Ac),e(Ac,Oar),e(Ac,Phe),e(Phe,Gar),e(Ac,Xar),e(Ac,$he),e($he,Var),e(Ac,zar),e(ut,War),e(ut,Ihe),e(Ihe,Qar),e(ut,Har),g(lw,ut,null),e(Mr,Uar),e(Mr,bo),g(iw,bo,null),e(bo,Jar),e(bo,jhe),e(jhe,Yar),e(bo,Kar),e(bo,Tn),e(Tn,Zar),e(Tn,Dhe),e(Dhe,enr),e(Tn,onr),e(Tn,Nhe),e(Nhe,rnr),e(Tn,tnr),e(Tn,qhe),e(qhe,anr),e(Tn,nnr),e(bo,snr),e(bo,Y),e(Y,BT),e(BT,Ohe),e(Ohe,lnr),e(BT,inr),e(BT,MO),e(MO,dnr),e(BT,cnr),e(Y,fnr),e(Y,xT),e(xT,Ghe),e(Ghe,mnr),e(xT,gnr),e(xT,EO),e(EO,hnr),e(xT,pnr),e(Y,_nr),e(Y,kT),e(kT,Xhe),e(Xhe,unr),e(kT,bnr),e(kT,yO),e(yO,vnr),e(kT,Tnr),e(Y,Fnr),e(Y,RT),e(RT,Vhe),e(Vhe,Cnr),e(RT,Mnr),e(RT,wO),e(wO,Enr),e(RT,ynr),e(Y,wnr),e(Y,ST),e(ST,zhe),e(zhe,Anr),e(ST,Lnr),e(ST,AO),e(AO,Bnr),e(ST,xnr),e(Y,knr),e(Y,PT),e(PT,Whe),e(Whe,Rnr),e(PT,Snr),e(PT,LO),e(LO,Pnr),e(PT,$nr),e(Y,Inr),e(Y,$T),e($T,Qhe),e(Qhe,jnr),e($T,Dnr),e($T,BO),e(BO,Nnr),e($T,qnr),e(Y,Onr),e(Y,IT),e(IT,Hhe),e(Hhe,Gnr),e(IT,Xnr),e(IT,xO),e(xO,Vnr),e(IT,znr),e(Y,Wnr),e(Y,jT),e(jT,Uhe),e(Uhe,Qnr),e(jT,Hnr),e(jT,kO),e(kO,Unr),e(jT,Jnr),e(Y,Ynr),e(Y,DT),e(DT,Jhe),e(Jhe,Knr),e(DT,Znr),e(DT,RO),e(RO,esr),e(DT,osr),e(Y,rsr),e(Y,NT),e(NT,Yhe),e(Yhe,tsr),e(NT,asr),e(NT,SO),e(SO,nsr),e(NT,ssr),e(Y,lsr),e(Y,qT),e(qT,Khe),e(Khe,isr),e(qT,dsr),e(qT,PO),e(PO,csr),e(qT,fsr),e(Y,msr),e(Y,OT),e(OT,Zhe),e(Zhe,gsr),e(OT,hsr),e(OT,$O),e($O,psr),e(OT,_sr),e(Y,usr),e(Y,GT),e(GT,epe),e(epe,bsr),e(GT,vsr),e(GT,IO),e(IO,Tsr),e(GT,Fsr),e(Y,Csr),e(Y,XT),e(XT,ope),e(ope,Msr),e(XT,Esr),e(XT,jO),e(jO,ysr),e(XT,wsr),e(Y,Asr),e(Y,VT),e(VT,rpe),e(rpe,Lsr),e(VT,Bsr),e(VT,DO),e(DO,xsr),e(VT,ksr),e(Y,Rsr),e(Y,zT),e(zT,tpe),e(tpe,Ssr),e(zT,Psr),e(zT,NO),e(NO,$sr),e(zT,Isr),e(Y,jsr),e(Y,WT),e(WT,ape),e(ape,Dsr),e(WT,Nsr),e(WT,qO),e(qO,qsr),e(WT,Osr),e(Y,Gsr),e(Y,QT),e(QT,npe),e(npe,Xsr),e(QT,Vsr),e(QT,OO),e(OO,zsr),e(QT,Wsr),e(Y,Qsr),e(Y,HT),e(HT,spe),e(spe,Hsr),e(HT,Usr),e(HT,GO),e(GO,Jsr),e(HT,Ysr),e(bo,Ksr),e(bo,lpe),e(lpe,Zsr),e(bo,elr),g(dw,bo,null),b(d,Fke,u),b(d,Lc,u),e(Lc,UT),e(UT,ipe),g(cw,ipe,null),e(Lc,olr),e(Lc,dpe),e(dpe,rlr),b(d,Cke,u),b(d,Er,u),g(fw,Er,null),e(Er,tlr),e(Er,Bc),e(Bc,alr),e(Bc,cpe),e(cpe,nlr),e(Bc,slr),e(Bc,fpe),e(fpe,llr),e(Bc,ilr),e(Er,dlr),e(Er,mw),e(mw,clr),e(mw,mpe),e(mpe,flr),e(mw,mlr),e(Er,glr),e(Er,bt),g(gw,bt,null),e(bt,hlr),e(bt,gpe),e(gpe,plr),e(bt,_lr),e(bt,xc),e(xc,ulr),e(xc,hpe),e(hpe,blr),e(xc,vlr),e(xc,ppe),e(ppe,Tlr),e(xc,Flr),e(bt,Clr),e(bt,_pe),e(_pe,Mlr),e(bt,Elr),g(hw,bt,null),e(Er,ylr),e(Er,vo),g(pw,vo,null),e(vo,wlr),e(vo,upe),e(upe,Alr),e(vo,Llr),e(vo,Fn),e(Fn,Blr),e(Fn,bpe),e(bpe,xlr),e(Fn,klr),e(Fn,vpe),e(vpe,Rlr),e(Fn,Slr),e(Fn,Tpe),e(Tpe,Plr),e(Fn,$lr),e(vo,Ilr),e(vo,_e),e(_e,JT),e(JT,Fpe),e(Fpe,jlr),e(JT,Dlr),e(JT,XO),e(XO,Nlr),e(JT,qlr),e(_e,Olr),e(_e,YT),e(YT,Cpe),e(Cpe,Glr),e(YT,Xlr),e(YT,VO),e(VO,Vlr),e(YT,zlr),e(_e,Wlr),e(_e,KT),e(KT,Mpe),e(Mpe,Qlr),e(KT,Hlr),e(KT,zO),e(zO,Ulr),e(KT,Jlr),e(_e,Ylr),e(_e,ZT),e(ZT,Epe),e(Epe,Klr),e(ZT,Zlr),e(ZT,WO),e(WO,eir),e(ZT,oir),e(_e,rir),e(_e,e8),e(e8,ype),e(ype,tir),e(e8,air),e(e8,QO),e(QO,nir),e(e8,sir),e(_e,lir),e(_e,o8),e(o8,wpe),e(wpe,iir),e(o8,dir),e(o8,HO),e(HO,cir),e(o8,fir),e(_e,mir),e(_e,r8),e(r8,Ape),e(Ape,gir),e(r8,hir),e(r8,UO),e(UO,pir),e(r8,_ir),e(_e,uir),e(_e,t8),e(t8,Lpe),e(Lpe,bir),e(t8,vir),e(t8,JO),e(JO,Tir),e(t8,Fir),e(_e,Cir),e(_e,a8),e(a8,Bpe),e(Bpe,Mir),e(a8,Eir),e(a8,YO),e(YO,yir),e(a8,wir),e(_e,Air),e(_e,n8),e(n8,xpe),e(xpe,Lir),e(n8,Bir),e(n8,KO),e(KO,xir),e(n8,kir),e(vo,Rir),e(vo,kpe),e(kpe,Sir),e(vo,Pir),g(_w,vo,null),b(d,Mke,u),b(d,kc,u),e(kc,s8),e(s8,Rpe),g(uw,Rpe,null),e(kc,$ir),e(kc,Spe),e(Spe,Iir),b(d,Eke,u),b(d,yr,u),g(bw,yr,null),e(yr,jir),e(yr,Rc),e(Rc,Dir),e(Rc,Ppe),e(Ppe,Nir),e(Rc,qir),e(Rc,$pe),e($pe,Oir),e(Rc,Gir),e(yr,Xir),e(yr,vw),e(vw,Vir),e(vw,Ipe),e(Ipe,zir),e(vw,Wir),e(yr,Qir),e(yr,vt),g(Tw,vt,null),e(vt,Hir),e(vt,jpe),e(jpe,Uir),e(vt,Jir),e(vt,Sc),e(Sc,Yir),e(Sc,Dpe),e(Dpe,Kir),e(Sc,Zir),e(Sc,Npe),e(Npe,edr),e(Sc,odr),e(vt,rdr),e(vt,qpe),e(qpe,tdr),e(vt,adr),g(Fw,vt,null),e(yr,ndr),e(yr,To),g(Cw,To,null),e(To,sdr),e(To,Ope),e(Ope,ldr),e(To,idr),e(To,Cn),e(Cn,ddr),e(Cn,Gpe),e(Gpe,cdr),e(Cn,fdr),e(Cn,Xpe),e(Xpe,mdr),e(Cn,gdr),e(Cn,Vpe),e(Vpe,hdr),e(Cn,pdr),e(To,_dr),e(To,V),e(V,l8),e(l8,zpe),e(zpe,udr),e(l8,bdr),e(l8,ZO),e(ZO,vdr),e(l8,Tdr),e(V,Fdr),e(V,i8),e(i8,Wpe),e(Wpe,Cdr),e(i8,Mdr),e(i8,eG),e(eG,Edr),e(i8,ydr),e(V,wdr),e(V,d8),e(d8,Qpe),e(Qpe,Adr),e(d8,Ldr),e(d8,oG),e(oG,Bdr),e(d8,xdr),e(V,kdr),e(V,c8),e(c8,Hpe),e(Hpe,Rdr),e(c8,Sdr),e(c8,rG),e(rG,Pdr),e(c8,$dr),e(V,Idr),e(V,f8),e(f8,Upe),e(Upe,jdr),e(f8,Ddr),e(f8,tG),e(tG,Ndr),e(f8,qdr),e(V,Odr),e(V,m8),e(m8,Jpe),e(Jpe,Gdr),e(m8,Xdr),e(m8,aG),e(aG,Vdr),e(m8,zdr),e(V,Wdr),e(V,g8),e(g8,Ype),e(Ype,Qdr),e(g8,Hdr),e(g8,nG),e(nG,Udr),e(g8,Jdr),e(V,Ydr),e(V,h8),e(h8,Kpe),e(Kpe,Kdr),e(h8,Zdr),e(h8,sG),e(sG,ecr),e(h8,ocr),e(V,rcr),e(V,p8),e(p8,Zpe),e(Zpe,tcr),e(p8,acr),e(p8,lG),e(lG,ncr),e(p8,scr),e(V,lcr),e(V,_8),e(_8,e_e),e(e_e,icr),e(_8,dcr),e(_8,iG),e(iG,ccr),e(_8,fcr),e(V,mcr),e(V,u8),e(u8,o_e),e(o_e,gcr),e(u8,hcr),e(u8,dG),e(dG,pcr),e(u8,_cr),e(V,ucr),e(V,b8),e(b8,r_e),e(r_e,bcr),e(b8,vcr),e(b8,cG),e(cG,Tcr),e(b8,Fcr),e(V,Ccr),e(V,v8),e(v8,t_e),e(t_e,Mcr),e(v8,Ecr),e(v8,fG),e(fG,ycr),e(v8,wcr),e(V,Acr),e(V,T8),e(T8,a_e),e(a_e,Lcr),e(T8,Bcr),e(T8,mG),e(mG,xcr),e(T8,kcr),e(V,Rcr),e(V,F8),e(F8,n_e),e(n_e,Scr),e(F8,Pcr),e(F8,gG),e(gG,$cr),e(F8,Icr),e(V,jcr),e(V,C8),e(C8,s_e),e(s_e,Dcr),e(C8,Ncr),e(C8,hG),e(hG,qcr),e(C8,Ocr),e(V,Gcr),e(V,M8),e(M8,l_e),e(l_e,Xcr),e(M8,Vcr),e(M8,pG),e(pG,zcr),e(M8,Wcr),e(V,Qcr),e(V,E8),e(E8,i_e),e(i_e,Hcr),e(E8,Ucr),e(E8,_G),e(_G,Jcr),e(E8,Ycr),e(V,Kcr),e(V,y8),e(y8,d_e),e(d_e,Zcr),e(y8,efr),e(y8,uG),e(uG,ofr),e(y8,rfr),e(V,tfr),e(V,w8),e(w8,c_e),e(c_e,afr),e(w8,nfr),e(w8,bG),e(bG,sfr),e(w8,lfr),e(V,ifr),e(V,A8),e(A8,f_e),e(f_e,dfr),e(A8,cfr),e(A8,vG),e(vG,ffr),e(A8,mfr),e(V,gfr),e(V,L8),e(L8,m_e),e(m_e,hfr),e(L8,pfr),e(L8,TG),e(TG,_fr),e(L8,ufr),e(V,bfr),e(V,B8),e(B8,g_e),e(g_e,vfr),e(B8,Tfr),e(B8,FG),e(FG,Ffr),e(B8,Cfr),e(V,Mfr),e(V,x8),e(x8,h_e),e(h_e,Efr),e(x8,yfr),e(x8,CG),e(CG,wfr),e(x8,Afr),e(V,Lfr),e(V,k8),e(k8,p_e),e(p_e,Bfr),e(k8,xfr),e(k8,MG),e(MG,kfr),e(k8,Rfr),e(To,Sfr),e(To,__e),e(__e,Pfr),e(To,$fr),g(Mw,To,null),b(d,yke,u),b(d,Pc,u),e(Pc,R8),e(R8,u_e),g(Ew,u_e,null),e(Pc,Ifr),e(Pc,b_e),e(b_e,jfr),b(d,wke,u),b(d,wr,u),g(yw,wr,null),e(wr,Dfr),e(wr,$c),e($c,Nfr),e($c,v_e),e(v_e,qfr),e($c,Ofr),e($c,T_e),e(T_e,Gfr),e($c,Xfr),e(wr,Vfr),e(wr,ww),e(ww,zfr),e(ww,F_e),e(F_e,Wfr),e(ww,Qfr),e(wr,Hfr),e(wr,Tt),g(Aw,Tt,null),e(Tt,Ufr),e(Tt,C_e),e(C_e,Jfr),e(Tt,Yfr),e(Tt,Ic),e(Ic,Kfr),e(Ic,M_e),e(M_e,Zfr),e(Ic,emr),e(Ic,E_e),e(E_e,omr),e(Ic,rmr),e(Tt,tmr),e(Tt,y_e),e(y_e,amr),e(Tt,nmr),g(Lw,Tt,null),e(wr,smr),e(wr,Fo),g(Bw,Fo,null),e(Fo,lmr),e(Fo,w_e),e(w_e,imr),e(Fo,dmr),e(Fo,Mn),e(Mn,cmr),e(Mn,A_e),e(A_e,fmr),e(Mn,mmr),e(Mn,L_e),e(L_e,gmr),e(Mn,hmr),e(Mn,B_e),e(B_e,pmr),e(Mn,_mr),e(Fo,umr),e(Fo,te),e(te,S8),e(S8,x_e),e(x_e,bmr),e(S8,vmr),e(S8,EG),e(EG,Tmr),e(S8,Fmr),e(te,Cmr),e(te,P8),e(P8,k_e),e(k_e,Mmr),e(P8,Emr),e(P8,yG),e(yG,ymr),e(P8,wmr),e(te,Amr),e(te,$8),e($8,R_e),e(R_e,Lmr),e($8,Bmr),e($8,wG),e(wG,xmr),e($8,kmr),e(te,Rmr),e(te,I8),e(I8,S_e),e(S_e,Smr),e(I8,Pmr),e(I8,AG),e(AG,$mr),e(I8,Imr),e(te,jmr),e(te,j8),e(j8,P_e),e(P_e,Dmr),e(j8,Nmr),e(j8,LG),e(LG,qmr),e(j8,Omr),e(te,Gmr),e(te,D8),e(D8,$_e),e($_e,Xmr),e(D8,Vmr),e(D8,BG),e(BG,zmr),e(D8,Wmr),e(te,Qmr),e(te,N8),e(N8,I_e),e(I_e,Hmr),e(N8,Umr),e(N8,xG),e(xG,Jmr),e(N8,Ymr),e(te,Kmr),e(te,q8),e(q8,j_e),e(j_e,Zmr),e(q8,egr),e(q8,kG),e(kG,ogr),e(q8,rgr),e(te,tgr),e(te,O8),e(O8,D_e),e(D_e,agr),e(O8,ngr),e(O8,RG),e(RG,sgr),e(O8,lgr),e(te,igr),e(te,G8),e(G8,N_e),e(N_e,dgr),e(G8,cgr),e(G8,SG),e(SG,fgr),e(G8,mgr),e(te,ggr),e(te,X8),e(X8,q_e),e(q_e,hgr),e(X8,pgr),e(X8,PG),e(PG,_gr),e(X8,ugr),e(te,bgr),e(te,V8),e(V8,O_e),e(O_e,vgr),e(V8,Tgr),e(V8,$G),e($G,Fgr),e(V8,Cgr),e(te,Mgr),e(te,z8),e(z8,G_e),e(G_e,Egr),e(z8,ygr),e(z8,IG),e(IG,wgr),e(z8,Agr),e(te,Lgr),e(te,W8),e(W8,X_e),e(X_e,Bgr),e(W8,xgr),e(W8,jG),e(jG,kgr),e(W8,Rgr),e(te,Sgr),e(te,Q8),e(Q8,V_e),e(V_e,Pgr),e(Q8,$gr),e(Q8,DG),e(DG,Igr),e(Q8,jgr),e(te,Dgr),e(te,H8),e(H8,z_e),e(z_e,Ngr),e(H8,qgr),e(H8,NG),e(NG,Ogr),e(H8,Ggr),e(te,Xgr),e(te,U8),e(U8,W_e),e(W_e,Vgr),e(U8,zgr),e(U8,qG),e(qG,Wgr),e(U8,Qgr),e(Fo,Hgr),e(Fo,Q_e),e(Q_e,Ugr),e(Fo,Jgr),g(xw,Fo,null),b(d,Ake,u),b(d,jc,u),e(jc,J8),e(J8,H_e),g(kw,H_e,null),e(jc,Ygr),e(jc,U_e),e(U_e,Kgr),b(d,Lke,u),b(d,Ar,u),g(Rw,Ar,null),e(Ar,Zgr),e(Ar,Dc),e(Dc,ehr),e(Dc,J_e),e(J_e,ohr),e(Dc,rhr),e(Dc,Y_e),e(Y_e,thr),e(Dc,ahr),e(Ar,nhr),e(Ar,Sw),e(Sw,shr),e(Sw,K_e),e(K_e,lhr),e(Sw,ihr),e(Ar,dhr),e(Ar,Ft),g(Pw,Ft,null),e(Ft,chr),e(Ft,Z_e),e(Z_e,fhr),e(Ft,mhr),e(Ft,Nc),e(Nc,ghr),e(Nc,eue),e(eue,hhr),e(Nc,phr),e(Nc,oue),e(oue,_hr),e(Nc,uhr),e(Ft,bhr),e(Ft,rue),e(rue,vhr),e(Ft,Thr),g($w,Ft,null),e(Ar,Fhr),e(Ar,Co),g(Iw,Co,null),e(Co,Chr),e(Co,tue),e(tue,Mhr),e(Co,Ehr),e(Co,En),e(En,yhr),e(En,aue),e(aue,whr),e(En,Ahr),e(En,nue),e(nue,Lhr),e(En,Bhr),e(En,sue),e(sue,xhr),e(En,khr),e(Co,Rhr),e(Co,lue),e(lue,Y8),e(Y8,iue),e(iue,Shr),e(Y8,Phr),e(Y8,OG),e(OG,$hr),e(Y8,Ihr),e(Co,jhr),e(Co,due),e(due,Dhr),e(Co,Nhr),g(jw,Co,null),b(d,Bke,u),b(d,qc,u),e(qc,K8),e(K8,cue),g(Dw,cue,null),e(qc,qhr),e(qc,fue),e(fue,Ohr),b(d,xke,u),b(d,Lr,u),g(Nw,Lr,null),e(Lr,Ghr),e(Lr,Oc),e(Oc,Xhr),e(Oc,mue),e(mue,Vhr),e(Oc,zhr),e(Oc,gue),e(gue,Whr),e(Oc,Qhr),e(Lr,Hhr),e(Lr,qw),e(qw,Uhr),e(qw,hue),e(hue,Jhr),e(qw,Yhr),e(Lr,Khr),e(Lr,Ct),g(Ow,Ct,null),e(Ct,Zhr),e(Ct,pue),e(pue,epr),e(Ct,opr),e(Ct,Gc),e(Gc,rpr),e(Gc,_ue),e(_ue,tpr),e(Gc,apr),e(Gc,uue),e(uue,npr),e(Gc,spr),e(Ct,lpr),e(Ct,bue),e(bue,ipr),e(Ct,dpr),g(Gw,Ct,null),e(Lr,cpr),e(Lr,Mo),g(Xw,Mo,null),e(Mo,fpr),e(Mo,vue),e(vue,mpr),e(Mo,gpr),e(Mo,yn),e(yn,hpr),e(yn,Tue),e(Tue,ppr),e(yn,_pr),e(yn,Fue),e(Fue,upr),e(yn,bpr),e(yn,Cue),e(Cue,vpr),e(yn,Tpr),e(Mo,Fpr),e(Mo,K),e(K,Z8),e(Z8,Mue),e(Mue,Cpr),e(Z8,Mpr),e(Z8,GG),e(GG,Epr),e(Z8,ypr),e(K,wpr),e(K,eF),e(eF,Eue),e(Eue,Apr),e(eF,Lpr),e(eF,XG),e(XG,Bpr),e(eF,xpr),e(K,kpr),e(K,oF),e(oF,yue),e(yue,Rpr),e(oF,Spr),e(oF,VG),e(VG,Ppr),e(oF,$pr),e(K,Ipr),e(K,rF),e(rF,wue),e(wue,jpr),e(rF,Dpr),e(rF,zG),e(zG,Npr),e(rF,qpr),e(K,Opr),e(K,tF),e(tF,Aue),e(Aue,Gpr),e(tF,Xpr),e(tF,WG),e(WG,Vpr),e(tF,zpr),e(K,Wpr),e(K,aF),e(aF,Lue),e(Lue,Qpr),e(aF,Hpr),e(aF,QG),e(QG,Upr),e(aF,Jpr),e(K,Ypr),e(K,nF),e(nF,Bue),e(Bue,Kpr),e(nF,Zpr),e(nF,HG),e(HG,e_r),e(nF,o_r),e(K,r_r),e(K,sF),e(sF,xue),e(xue,t_r),e(sF,a_r),e(sF,UG),e(UG,n_r),e(sF,s_r),e(K,l_r),e(K,lF),e(lF,kue),e(kue,i_r),e(lF,d_r),e(lF,JG),e(JG,c_r),e(lF,f_r),e(K,m_r),e(K,iF),e(iF,Rue),e(Rue,g_r),e(iF,h_r),e(iF,YG),e(YG,p_r),e(iF,__r),e(K,u_r),e(K,dF),e(dF,Sue),e(Sue,b_r),e(dF,v_r),e(dF,KG),e(KG,T_r),e(dF,F_r),e(K,C_r),e(K,cF),e(cF,Pue),e(Pue,M_r),e(cF,E_r),e(cF,ZG),e(ZG,y_r),e(cF,w_r),e(K,A_r),e(K,fF),e(fF,$ue),e($ue,L_r),e(fF,B_r),e(fF,eX),e(eX,x_r),e(fF,k_r),e(K,R_r),e(K,mF),e(mF,Iue),e(Iue,S_r),e(mF,P_r),e(mF,oX),e(oX,$_r),e(mF,I_r),e(K,j_r),e(K,gF),e(gF,jue),e(jue,D_r),e(gF,N_r),e(gF,rX),e(rX,q_r),e(gF,O_r),e(K,G_r),e(K,hF),e(hF,Due),e(Due,X_r),e(hF,V_r),e(hF,tX),e(tX,z_r),e(hF,W_r),e(K,Q_r),e(K,pF),e(pF,Nue),e(Nue,H_r),e(pF,U_r),e(pF,aX),e(aX,J_r),e(pF,Y_r),e(K,K_r),e(K,_F),e(_F,que),e(que,Z_r),e(_F,eur),e(_F,nX),e(nX,our),e(_F,rur),e(K,tur),e(K,uF),e(uF,Oue),e(Oue,aur),e(uF,nur),e(uF,sX),e(sX,sur),e(uF,lur),e(K,iur),e(K,bF),e(bF,Gue),e(Gue,dur),e(bF,cur),e(bF,lX),e(lX,fur),e(bF,mur),e(Mo,gur),e(Mo,Xue),e(Xue,hur),e(Mo,pur),g(Vw,Mo,null),b(d,kke,u),b(d,Xc,u),e(Xc,vF),e(vF,Vue),g(zw,Vue,null),e(Xc,_ur),e(Xc,zue),e(zue,uur),b(d,Rke,u),b(d,Br,u),g(Ww,Br,null),e(Br,bur),e(Br,Vc),e(Vc,vur),e(Vc,Wue),e(Wue,Tur),e(Vc,Fur),e(Vc,Que),e(Que,Cur),e(Vc,Mur),e(Br,Eur),e(Br,Qw),e(Qw,yur),e(Qw,Hue),e(Hue,wur),e(Qw,Aur),e(Br,Lur),e(Br,Mt),g(Hw,Mt,null),e(Mt,Bur),e(Mt,Uue),e(Uue,xur),e(Mt,kur),e(Mt,zc),e(zc,Rur),e(zc,Jue),e(Jue,Sur),e(zc,Pur),e(zc,Yue),e(Yue,$ur),e(zc,Iur),e(Mt,jur),e(Mt,Kue),e(Kue,Dur),e(Mt,Nur),g(Uw,Mt,null),e(Br,qur),e(Br,Eo),g(Jw,Eo,null),e(Eo,Our),e(Eo,Zue),e(Zue,Gur),e(Eo,Xur),e(Eo,wn),e(wn,Vur),e(wn,e1e),e(e1e,zur),e(wn,Wur),e(wn,o1e),e(o1e,Qur),e(wn,Hur),e(wn,r1e),e(r1e,Uur),e(wn,Jur),e(Eo,Yur),e(Eo,Z),e(Z,TF),e(TF,t1e),e(t1e,Kur),e(TF,Zur),e(TF,iX),e(iX,e1r),e(TF,o1r),e(Z,r1r),e(Z,FF),e(FF,a1e),e(a1e,t1r),e(FF,a1r),e(FF,dX),e(dX,n1r),e(FF,s1r),e(Z,l1r),e(Z,CF),e(CF,n1e),e(n1e,i1r),e(CF,d1r),e(CF,cX),e(cX,c1r),e(CF,f1r),e(Z,m1r),e(Z,MF),e(MF,s1e),e(s1e,g1r),e(MF,h1r),e(MF,fX),e(fX,p1r),e(MF,_1r),e(Z,u1r),e(Z,EF),e(EF,l1e),e(l1e,b1r),e(EF,v1r),e(EF,mX),e(mX,T1r),e(EF,F1r),e(Z,C1r),e(Z,yF),e(yF,i1e),e(i1e,M1r),e(yF,E1r),e(yF,gX),e(gX,y1r),e(yF,w1r),e(Z,A1r),e(Z,wF),e(wF,d1e),e(d1e,L1r),e(wF,B1r),e(wF,hX),e(hX,x1r),e(wF,k1r),e(Z,R1r),e(Z,AF),e(AF,c1e),e(c1e,S1r),e(AF,P1r),e(AF,pX),e(pX,$1r),e(AF,I1r),e(Z,j1r),e(Z,LF),e(LF,f1e),e(f1e,D1r),e(LF,N1r),e(LF,_X),e(_X,q1r),e(LF,O1r),e(Z,G1r),e(Z,BF),e(BF,m1e),e(m1e,X1r),e(BF,V1r),e(BF,uX),e(uX,z1r),e(BF,W1r),e(Z,Q1r),e(Z,xF),e(xF,g1e),e(g1e,H1r),e(xF,U1r),e(xF,bX),e(bX,J1r),e(xF,Y1r),e(Z,K1r),e(Z,kF),e(kF,h1e),e(h1e,Z1r),e(kF,ebr),e(kF,vX),e(vX,obr),e(kF,rbr),e(Z,tbr),e(Z,RF),e(RF,p1e),e(p1e,abr),e(RF,nbr),e(RF,TX),e(TX,sbr),e(RF,lbr),e(Z,ibr),e(Z,SF),e(SF,_1e),e(_1e,dbr),e(SF,cbr),e(SF,FX),e(FX,fbr),e(SF,mbr),e(Z,gbr),e(Z,PF),e(PF,u1e),e(u1e,hbr),e(PF,pbr),e(PF,CX),e(CX,_br),e(PF,ubr),e(Z,bbr),e(Z,$F),e($F,b1e),e(b1e,vbr),e($F,Tbr),e($F,MX),e(MX,Fbr),e($F,Cbr),e(Z,Mbr),e(Z,IF),e(IF,v1e),e(v1e,Ebr),e(IF,ybr),e(IF,EX),e(EX,wbr),e(IF,Abr),e(Z,Lbr),e(Z,jF),e(jF,T1e),e(T1e,Bbr),e(jF,xbr),e(jF,yX),e(yX,kbr),e(jF,Rbr),e(Z,Sbr),e(Z,DF),e(DF,F1e),e(F1e,Pbr),e(DF,$br),e(DF,wX),e(wX,Ibr),e(DF,jbr),e(Eo,Dbr),e(Eo,C1e),e(C1e,Nbr),e(Eo,qbr),g(Yw,Eo,null),b(d,Ske,u),b(d,Wc,u),e(Wc,NF),e(NF,M1e),g(Kw,M1e,null),e(Wc,Obr),e(Wc,E1e),e(E1e,Gbr),b(d,Pke,u),b(d,xr,u),g(Zw,xr,null),e(xr,Xbr),e(xr,Qc),e(Qc,Vbr),e(Qc,y1e),e(y1e,zbr),e(Qc,Wbr),e(Qc,w1e),e(w1e,Qbr),e(Qc,Hbr),e(xr,Ubr),e(xr,eA),e(eA,Jbr),e(eA,A1e),e(A1e,Ybr),e(eA,Kbr),e(xr,Zbr),e(xr,Et),g(oA,Et,null),e(Et,e5r),e(Et,L1e),e(L1e,o5r),e(Et,r5r),e(Et,Hc),e(Hc,t5r),e(Hc,B1e),e(B1e,a5r),e(Hc,n5r),e(Hc,x1e),e(x1e,s5r),e(Hc,l5r),e(Et,i5r),e(Et,k1e),e(k1e,d5r),e(Et,c5r),g(rA,Et,null),e(xr,f5r),e(xr,yo),g(tA,yo,null),e(yo,m5r),e(yo,R1e),e(R1e,g5r),e(yo,h5r),e(yo,An),e(An,p5r),e(An,S1e),e(S1e,_5r),e(An,u5r),e(An,P1e),e(P1e,b5r),e(An,v5r),e(An,$1e),e($1e,T5r),e(An,F5r),e(yo,C5r),e(yo,I1e),e(I1e,qF),e(qF,j1e),e(j1e,M5r),e(qF,E5r),e(qF,AX),e(AX,y5r),e(qF,w5r),e(yo,A5r),e(yo,D1e),e(D1e,L5r),e(yo,B5r),g(aA,yo,null),b(d,$ke,u),b(d,Uc,u),e(Uc,OF),e(OF,N1e),g(nA,N1e,null),e(Uc,x5r),e(Uc,q1e),e(q1e,k5r),b(d,Ike,u),b(d,kr,u),g(sA,kr,null),e(kr,R5r),e(kr,Jc),e(Jc,S5r),e(Jc,O1e),e(O1e,P5r),e(Jc,$5r),e(Jc,G1e),e(G1e,I5r),e(Jc,j5r),e(kr,D5r),e(kr,lA),e(lA,N5r),e(lA,X1e),e(X1e,q5r),e(lA,O5r),e(kr,G5r),e(kr,yt),g(iA,yt,null),e(yt,X5r),e(yt,V1e),e(V1e,V5r),e(yt,z5r),e(yt,Yc),e(Yc,W5r),e(Yc,z1e),e(z1e,Q5r),e(Yc,H5r),e(Yc,W1e),e(W1e,U5r),e(Yc,J5r),e(yt,Y5r),e(yt,Q1e),e(Q1e,K5r),e(yt,Z5r),g(dA,yt,null),e(kr,e2r),e(kr,wo),g(cA,wo,null),e(wo,o2r),e(wo,H1e),e(H1e,r2r),e(wo,t2r),e(wo,Ln),e(Ln,a2r),e(Ln,U1e),e(U1e,n2r),e(Ln,s2r),e(Ln,J1e),e(J1e,l2r),e(Ln,i2r),e(Ln,Y1e),e(Y1e,d2r),e(Ln,c2r),e(wo,f2r),e(wo,K1e),e(K1e,GF),e(GF,Z1e),e(Z1e,m2r),e(GF,g2r),e(GF,LX),e(LX,h2r),e(GF,p2r),e(wo,_2r),e(wo,ebe),e(ebe,u2r),e(wo,b2r),g(fA,wo,null),b(d,jke,u),b(d,Kc,u),e(Kc,XF),e(XF,obe),g(mA,obe,null),e(Kc,v2r),e(Kc,rbe),e(rbe,T2r),b(d,Dke,u),b(d,Rr,u),g(gA,Rr,null),e(Rr,F2r),e(Rr,Zc),e(Zc,C2r),e(Zc,tbe),e(tbe,M2r),e(Zc,E2r),e(Zc,abe),e(abe,y2r),e(Zc,w2r),e(Rr,A2r),e(Rr,hA),e(hA,L2r),e(hA,nbe),e(nbe,B2r),e(hA,x2r),e(Rr,k2r),e(Rr,wt),g(pA,wt,null),e(wt,R2r),e(wt,sbe),e(sbe,S2r),e(wt,P2r),e(wt,ef),e(ef,$2r),e(ef,lbe),e(lbe,I2r),e(ef,j2r),e(ef,ibe),e(ibe,D2r),e(ef,N2r),e(wt,q2r),e(wt,dbe),e(dbe,O2r),e(wt,G2r),g(_A,wt,null),e(Rr,X2r),e(Rr,Ao),g(uA,Ao,null),e(Ao,V2r),e(Ao,cbe),e(cbe,z2r),e(Ao,W2r),e(Ao,Bn),e(Bn,Q2r),e(Bn,fbe),e(fbe,H2r),e(Bn,U2r),e(Bn,mbe),e(mbe,J2r),e(Bn,Y2r),e(Bn,gbe),e(gbe,K2r),e(Bn,Z2r),e(Ao,evr),e(Ao,z),e(z,VF),e(VF,hbe),e(hbe,ovr),e(VF,rvr),e(VF,BX),e(BX,tvr),e(VF,avr),e(z,nvr),e(z,zF),e(zF,pbe),e(pbe,svr),e(zF,lvr),e(zF,xX),e(xX,ivr),e(zF,dvr),e(z,cvr),e(z,WF),e(WF,_be),e(_be,fvr),e(WF,mvr),e(WF,kX),e(kX,gvr),e(WF,hvr),e(z,pvr),e(z,QF),e(QF,ube),e(ube,_vr),e(QF,uvr),e(QF,RX),e(RX,bvr),e(QF,vvr),e(z,Tvr),e(z,HF),e(HF,bbe),e(bbe,Fvr),e(HF,Cvr),e(HF,SX),e(SX,Mvr),e(HF,Evr),e(z,yvr),e(z,UF),e(UF,vbe),e(vbe,wvr),e(UF,Avr),e(UF,PX),e(PX,Lvr),e(UF,Bvr),e(z,xvr),e(z,JF),e(JF,Tbe),e(Tbe,kvr),e(JF,Rvr),e(JF,$X),e($X,Svr),e(JF,Pvr),e(z,$vr),e(z,YF),e(YF,Fbe),e(Fbe,Ivr),e(YF,jvr),e(YF,IX),e(IX,Dvr),e(YF,Nvr),e(z,qvr),e(z,KF),e(KF,Cbe),e(Cbe,Ovr),e(KF,Gvr),e(KF,jX),e(jX,Xvr),e(KF,Vvr),e(z,zvr),e(z,ZF),e(ZF,Mbe),e(Mbe,Wvr),e(ZF,Qvr),e(ZF,DX),e(DX,Hvr),e(ZF,Uvr),e(z,Jvr),e(z,e9),e(e9,Ebe),e(Ebe,Yvr),e(e9,Kvr),e(e9,NX),e(NX,Zvr),e(e9,e6r),e(z,o6r),e(z,o9),e(o9,ybe),e(ybe,r6r),e(o9,t6r),e(o9,qX),e(qX,a6r),e(o9,n6r),e(z,s6r),e(z,r9),e(r9,wbe),e(wbe,l6r),e(r9,i6r),e(r9,OX),e(OX,d6r),e(r9,c6r),e(z,f6r),e(z,t9),e(t9,Abe),e(Abe,m6r),e(t9,g6r),e(t9,GX),e(GX,h6r),e(t9,p6r),e(z,_6r),e(z,a9),e(a9,Lbe),e(Lbe,u6r),e(a9,b6r),e(a9,XX),e(XX,v6r),e(a9,T6r),e(z,F6r),e(z,n9),e(n9,Bbe),e(Bbe,C6r),e(n9,M6r),e(n9,VX),e(VX,E6r),e(n9,y6r),e(z,w6r),e(z,s9),e(s9,xbe),e(xbe,A6r),e(s9,L6r),e(s9,zX),e(zX,B6r),e(s9,x6r),e(z,k6r),e(z,l9),e(l9,kbe),e(kbe,R6r),e(l9,S6r),e(l9,WX),e(WX,P6r),e(l9,$6r),e(z,I6r),e(z,i9),e(i9,Rbe),e(Rbe,j6r),e(i9,D6r),e(i9,QX),e(QX,N6r),e(i9,q6r),e(z,O6r),e(z,d9),e(d9,Sbe),e(Sbe,G6r),e(d9,X6r),e(d9,HX),e(HX,V6r),e(d9,z6r),e(z,W6r),e(z,c9),e(c9,Pbe),e(Pbe,Q6r),e(c9,H6r),e(c9,UX),e(UX,U6r),e(c9,J6r),e(z,Y6r),e(z,f9),e(f9,$be),e($be,K6r),e(f9,Z6r),e(f9,JX),e(JX,eTr),e(f9,oTr),e(z,rTr),e(z,m9),e(m9,Ibe),e(Ibe,tTr),e(m9,aTr),e(m9,YX),e(YX,nTr),e(m9,sTr),e(z,lTr),e(z,g9),e(g9,jbe),e(jbe,iTr),e(g9,dTr),e(g9,KX),e(KX,cTr),e(g9,fTr),e(z,mTr),e(z,h9),e(h9,Dbe),e(Dbe,gTr),e(h9,hTr),e(h9,ZX),e(ZX,pTr),e(h9,_Tr),e(Ao,uTr),e(Ao,Nbe),e(Nbe,bTr),e(Ao,vTr),g(bA,Ao,null),b(d,Nke,u),b(d,of,u),e(of,p9),e(p9,qbe),g(vA,qbe,null),e(of,TTr),e(of,Obe),e(Obe,FTr),b(d,qke,u),b(d,Sr,u),g(TA,Sr,null),e(Sr,CTr),e(Sr,rf),e(rf,MTr),e(rf,Gbe),e(Gbe,ETr),e(rf,yTr),e(rf,Xbe),e(Xbe,wTr),e(rf,ATr),e(Sr,LTr),e(Sr,FA),e(FA,BTr),e(FA,Vbe),e(Vbe,xTr),e(FA,kTr),e(Sr,RTr),e(Sr,At),g(CA,At,null),e(At,STr),e(At,zbe),e(zbe,PTr),e(At,$Tr),e(At,tf),e(tf,ITr),e(tf,Wbe),e(Wbe,jTr),e(tf,DTr),e(tf,Qbe),e(Qbe,NTr),e(tf,qTr),e(At,OTr),e(At,Hbe),e(Hbe,GTr),e(At,XTr),g(MA,At,null),e(Sr,VTr),e(Sr,Lo),g(EA,Lo,null),e(Lo,zTr),e(Lo,Ube),e(Ube,WTr),e(Lo,QTr),e(Lo,xn),e(xn,HTr),e(xn,Jbe),e(Jbe,UTr),e(xn,JTr),e(xn,Ybe),e(Ybe,YTr),e(xn,KTr),e(xn,Kbe),e(Kbe,ZTr),e(xn,e8r),e(Lo,o8r),e(Lo,ca),e(ca,_9),e(_9,Zbe),e(Zbe,r8r),e(_9,t8r),e(_9,eV),e(eV,a8r),e(_9,n8r),e(ca,s8r),e(ca,u9),e(u9,e5e),e(e5e,l8r),e(u9,i8r),e(u9,oV),e(oV,d8r),e(u9,c8r),e(ca,f8r),e(ca,b9),e(b9,o5e),e(o5e,m8r),e(b9,g8r),e(b9,rV),e(rV,h8r),e(b9,p8r),e(ca,_8r),e(ca,v9),e(v9,r5e),e(r5e,u8r),e(v9,b8r),e(v9,tV),e(tV,v8r),e(v9,T8r),e(ca,F8r),e(ca,T9),e(T9,t5e),e(t5e,C8r),e(T9,M8r),e(T9,aV),e(aV,E8r),e(T9,y8r),e(Lo,w8r),e(Lo,a5e),e(a5e,A8r),e(Lo,L8r),g(yA,Lo,null),b(d,Oke,u),b(d,af,u),e(af,F9),e(F9,n5e),g(wA,n5e,null),e(af,B8r),e(af,s5e),e(s5e,x8r),b(d,Gke,u),b(d,Pr,u),g(AA,Pr,null),e(Pr,k8r),e(Pr,nf),e(nf,R8r),e(nf,l5e),e(l5e,S8r),e(nf,P8r),e(nf,i5e),e(i5e,$8r),e(nf,I8r),e(Pr,j8r),e(Pr,LA),e(LA,D8r),e(LA,d5e),e(d5e,N8r),e(LA,q8r),e(Pr,O8r),e(Pr,Lt),g(BA,Lt,null),e(Lt,G8r),e(Lt,c5e),e(c5e,X8r),e(Lt,V8r),e(Lt,sf),e(sf,z8r),e(sf,f5e),e(f5e,W8r),e(sf,Q8r),e(sf,m5e),e(m5e,H8r),e(sf,U8r),e(Lt,J8r),e(Lt,g5e),e(g5e,Y8r),e(Lt,K8r),g(xA,Lt,null),e(Pr,Z8r),e(Pr,Bo),g(kA,Bo,null),e(Bo,eFr),e(Bo,h5e),e(h5e,oFr),e(Bo,rFr),e(Bo,kn),e(kn,tFr),e(kn,p5e),e(p5e,aFr),e(kn,nFr),e(kn,_5e),e(_5e,sFr),e(kn,lFr),e(kn,u5e),e(u5e,iFr),e(kn,dFr),e(Bo,cFr),e(Bo,ce),e(ce,C9),e(C9,b5e),e(b5e,fFr),e(C9,mFr),e(C9,nV),e(nV,gFr),e(C9,hFr),e(ce,pFr),e(ce,M9),e(M9,v5e),e(v5e,_Fr),e(M9,uFr),e(M9,sV),e(sV,bFr),e(M9,vFr),e(ce,TFr),e(ce,E9),e(E9,T5e),e(T5e,FFr),e(E9,CFr),e(E9,lV),e(lV,MFr),e(E9,EFr),e(ce,yFr),e(ce,y9),e(y9,F5e),e(F5e,wFr),e(y9,AFr),e(y9,iV),e(iV,LFr),e(y9,BFr),e(ce,xFr),e(ce,w9),e(w9,C5e),e(C5e,kFr),e(w9,RFr),e(w9,dV),e(dV,SFr),e(w9,PFr),e(ce,$Fr),e(ce,A9),e(A9,M5e),e(M5e,IFr),e(A9,jFr),e(A9,cV),e(cV,DFr),e(A9,NFr),e(ce,qFr),e(ce,L9),e(L9,E5e),e(E5e,OFr),e(L9,GFr),e(L9,fV),e(fV,XFr),e(L9,VFr),e(ce,zFr),e(ce,B9),e(B9,y5e),e(y5e,WFr),e(B9,QFr),e(B9,mV),e(mV,HFr),e(B9,UFr),e(ce,JFr),e(ce,x9),e(x9,w5e),e(w5e,YFr),e(x9,KFr),e(x9,gV),e(gV,ZFr),e(x9,e9r),e(ce,o9r),e(ce,k9),e(k9,A5e),e(A5e,r9r),e(k9,t9r),e(k9,hV),e(hV,a9r),e(k9,n9r),e(ce,s9r),e(ce,R9),e(R9,L5e),e(L5e,l9r),e(R9,i9r),e(R9,pV),e(pV,d9r),e(R9,c9r),e(ce,f9r),e(ce,S9),e(S9,B5e),e(B5e,m9r),e(S9,g9r),e(S9,_V),e(_V,h9r),e(S9,p9r),e(Bo,_9r),e(Bo,x5e),e(x5e,u9r),e(Bo,b9r),g(RA,Bo,null),b(d,Xke,u),b(d,lf,u),e(lf,P9),e(P9,k5e),g(SA,k5e,null),e(lf,v9r),e(lf,R5e),e(R5e,T9r),b(d,Vke,u),b(d,$r,u),g(PA,$r,null),e($r,F9r),e($r,df),e(df,C9r),e(df,S5e),e(S5e,M9r),e(df,E9r),e(df,P5e),e(P5e,y9r),e(df,w9r),e($r,A9r),e($r,$A),e($A,L9r),e($A,$5e),e($5e,B9r),e($A,x9r),e($r,k9r),e($r,Bt),g(IA,Bt,null),e(Bt,R9r),e(Bt,I5e),e(I5e,S9r),e(Bt,P9r),e(Bt,cf),e(cf,$9r),e(cf,j5e),e(j5e,I9r),e(cf,j9r),e(cf,D5e),e(D5e,D9r),e(cf,N9r),e(Bt,q9r),e(Bt,N5e),e(N5e,O9r),e(Bt,G9r),g(jA,Bt,null),e($r,X9r),e($r,xo),g(DA,xo,null),e(xo,V9r),e(xo,q5e),e(q5e,z9r),e(xo,W9r),e(xo,Rn),e(Rn,Q9r),e(Rn,O5e),e(O5e,H9r),e(Rn,U9r),e(Rn,G5e),e(G5e,J9r),e(Rn,Y9r),e(Rn,X5e),e(X5e,K9r),e(Rn,Z9r),e(xo,eCr),e(xo,ue),e(ue,$9),e($9,V5e),e(V5e,oCr),e($9,rCr),e($9,uV),e(uV,tCr),e($9,aCr),e(ue,nCr),e(ue,I9),e(I9,z5e),e(z5e,sCr),e(I9,lCr),e(I9,bV),e(bV,iCr),e(I9,dCr),e(ue,cCr),e(ue,j9),e(j9,W5e),e(W5e,fCr),e(j9,mCr),e(j9,vV),e(vV,gCr),e(j9,hCr),e(ue,pCr),e(ue,D9),e(D9,Q5e),e(Q5e,_Cr),e(D9,uCr),e(D9,TV),e(TV,bCr),e(D9,vCr),e(ue,TCr),e(ue,N9),e(N9,H5e),e(H5e,FCr),e(N9,CCr),e(N9,FV),e(FV,MCr),e(N9,ECr),e(ue,yCr),e(ue,q9),e(q9,U5e),e(U5e,wCr),e(q9,ACr),e(q9,CV),e(CV,LCr),e(q9,BCr),e(ue,xCr),e(ue,O9),e(O9,J5e),e(J5e,kCr),e(O9,RCr),e(O9,MV),e(MV,SCr),e(O9,PCr),e(ue,$Cr),e(ue,G9),e(G9,Y5e),e(Y5e,ICr),e(G9,jCr),e(G9,EV),e(EV,DCr),e(G9,NCr),e(ue,qCr),e(ue,X9),e(X9,K5e),e(K5e,OCr),e(X9,GCr),e(X9,yV),e(yV,XCr),e(X9,VCr),e(ue,zCr),e(ue,V9),e(V9,Z5e),e(Z5e,WCr),e(V9,QCr),e(V9,wV),e(wV,HCr),e(V9,UCr),e(xo,JCr),e(xo,e2e),e(e2e,YCr),e(xo,KCr),g(NA,xo,null),b(d,zke,u),b(d,ff,u),e(ff,z9),e(z9,o2e),g(qA,o2e,null),e(ff,ZCr),e(ff,r2e),e(r2e,eMr),b(d,Wke,u),b(d,Ir,u),g(OA,Ir,null),e(Ir,oMr),e(Ir,mf),e(mf,rMr),e(mf,t2e),e(t2e,tMr),e(mf,aMr),e(mf,a2e),e(a2e,nMr),e(mf,sMr),e(Ir,lMr),e(Ir,GA),e(GA,iMr),e(GA,n2e),e(n2e,dMr),e(GA,cMr),e(Ir,fMr),e(Ir,xt),g(XA,xt,null),e(xt,mMr),e(xt,s2e),e(s2e,gMr),e(xt,hMr),e(xt,gf),e(gf,pMr),e(gf,l2e),e(l2e,_Mr),e(gf,uMr),e(gf,i2e),e(i2e,bMr),e(gf,vMr),e(xt,TMr),e(xt,d2e),e(d2e,FMr),e(xt,CMr),g(VA,xt,null),e(Ir,MMr),e(Ir,ko),g(zA,ko,null),e(ko,EMr),e(ko,c2e),e(c2e,yMr),e(ko,wMr),e(ko,Sn),e(Sn,AMr),e(Sn,f2e),e(f2e,LMr),e(Sn,BMr),e(Sn,m2e),e(m2e,xMr),e(Sn,kMr),e(Sn,g2e),e(g2e,RMr),e(Sn,SMr),e(ko,PMr),e(ko,Me),e(Me,W9),e(W9,h2e),e(h2e,$Mr),e(W9,IMr),e(W9,AV),e(AV,jMr),e(W9,DMr),e(Me,NMr),e(Me,Q9),e(Q9,p2e),e(p2e,qMr),e(Q9,OMr),e(Q9,LV),e(LV,GMr),e(Q9,XMr),e(Me,VMr),e(Me,H9),e(H9,_2e),e(_2e,zMr),e(H9,WMr),e(H9,BV),e(BV,QMr),e(H9,HMr),e(Me,UMr),e(Me,U9),e(U9,u2e),e(u2e,JMr),e(U9,YMr),e(U9,xV),e(xV,KMr),e(U9,ZMr),e(Me,e4r),e(Me,J9),e(J9,b2e),e(b2e,o4r),e(J9,r4r),e(J9,kV),e(kV,t4r),e(J9,a4r),e(Me,n4r),e(Me,Y9),e(Y9,v2e),e(v2e,s4r),e(Y9,l4r),e(Y9,RV),e(RV,i4r),e(Y9,d4r),e(Me,c4r),e(Me,K9),e(K9,T2e),e(T2e,f4r),e(K9,m4r),e(K9,SV),e(SV,g4r),e(K9,h4r),e(Me,p4r),e(Me,Z9),e(Z9,F2e),e(F2e,_4r),e(Z9,u4r),e(Z9,PV),e(PV,b4r),e(Z9,v4r),e(Me,T4r),e(Me,eC),e(eC,C2e),e(C2e,F4r),e(eC,C4r),e(eC,$V),e($V,M4r),e(eC,E4r),e(ko,y4r),e(ko,M2e),e(M2e,w4r),e(ko,A4r),g(WA,ko,null),b(d,Qke,u),b(d,hf,u),e(hf,oC),e(oC,E2e),g(QA,E2e,null),e(hf,L4r),e(hf,y2e),e(y2e,B4r),b(d,Hke,u),b(d,jr,u),g(HA,jr,null),e(jr,x4r),e(jr,pf),e(pf,k4r),e(pf,w2e),e(w2e,R4r),e(pf,S4r),e(pf,A2e),e(A2e,P4r),e(pf,$4r),e(jr,I4r),e(jr,UA),e(UA,j4r),e(UA,L2e),e(L2e,D4r),e(UA,N4r),e(jr,q4r),e(jr,kt),g(JA,kt,null),e(kt,O4r),e(kt,B2e),e(B2e,G4r),e(kt,X4r),e(kt,_f),e(_f,V4r),e(_f,x2e),e(x2e,z4r),e(_f,W4r),e(_f,k2e),e(k2e,Q4r),e(_f,H4r),e(kt,U4r),e(kt,R2e),e(R2e,J4r),e(kt,Y4r),g(YA,kt,null),e(jr,K4r),e(jr,Ro),g(KA,Ro,null),e(Ro,Z4r),e(Ro,S2e),e(S2e,eEr),e(Ro,oEr),e(Ro,Pn),e(Pn,rEr),e(Pn,P2e),e(P2e,tEr),e(Pn,aEr),e(Pn,$2e),e($2e,nEr),e(Pn,sEr),e(Pn,I2e),e(I2e,lEr),e(Pn,iEr),e(Ro,dEr),e(Ro,be),e(be,rC),e(rC,j2e),e(j2e,cEr),e(rC,fEr),e(rC,IV),e(IV,mEr),e(rC,gEr),e(be,hEr),e(be,tC),e(tC,D2e),e(D2e,pEr),e(tC,_Er),e(tC,jV),e(jV,uEr),e(tC,bEr),e(be,vEr),e(be,aC),e(aC,N2e),e(N2e,TEr),e(aC,FEr),e(aC,DV),e(DV,CEr),e(aC,MEr),e(be,EEr),e(be,nC),e(nC,q2e),e(q2e,yEr),e(nC,wEr),e(nC,NV),e(NV,AEr),e(nC,LEr),e(be,BEr),e(be,sC),e(sC,O2e),e(O2e,xEr),e(sC,kEr),e(sC,qV),e(qV,REr),e(sC,SEr),e(be,PEr),e(be,lC),e(lC,G2e),e(G2e,$Er),e(lC,IEr),e(lC,OV),e(OV,jEr),e(lC,DEr),e(be,NEr),e(be,iC),e(iC,X2e),e(X2e,qEr),e(iC,OEr),e(iC,GV),e(GV,GEr),e(iC,XEr),e(be,VEr),e(be,dC),e(dC,V2e),e(V2e,zEr),e(dC,WEr),e(dC,XV),e(XV,QEr),e(dC,HEr),e(be,UEr),e(be,cC),e(cC,z2e),e(z2e,JEr),e(cC,YEr),e(cC,VV),e(VV,KEr),e(cC,ZEr),e(be,e3r),e(be,fC),e(fC,W2e),e(W2e,o3r),e(fC,r3r),e(fC,zV),e(zV,t3r),e(fC,a3r),e(Ro,n3r),e(Ro,Q2e),e(Q2e,s3r),e(Ro,l3r),g(ZA,Ro,null),b(d,Uke,u),b(d,uf,u),e(uf,mC),e(mC,H2e),g(e0,H2e,null),e(uf,i3r),e(uf,U2e),e(U2e,d3r),b(d,Jke,u),b(d,Dr,u),g(o0,Dr,null),e(Dr,c3r),e(Dr,bf),e(bf,f3r),e(bf,J2e),e(J2e,m3r),e(bf,g3r),e(bf,Y2e),e(Y2e,h3r),e(bf,p3r),e(Dr,_3r),e(Dr,r0),e(r0,u3r),e(r0,K2e),e(K2e,b3r),e(r0,v3r),e(Dr,T3r),e(Dr,Rt),g(t0,Rt,null),e(Rt,F3r),e(Rt,Z2e),e(Z2e,C3r),e(Rt,M3r),e(Rt,vf),e(vf,E3r),e(vf,eve),e(eve,y3r),e(vf,w3r),e(vf,ove),e(ove,A3r),e(vf,L3r),e(Rt,B3r),e(Rt,rve),e(rve,x3r),e(Rt,k3r),g(a0,Rt,null),e(Dr,R3r),e(Dr,So),g(n0,So,null),e(So,S3r),e(So,tve),e(tve,P3r),e(So,$3r),e(So,$n),e($n,I3r),e($n,ave),e(ave,j3r),e($n,D3r),e($n,nve),e(nve,N3r),e($n,q3r),e($n,sve),e(sve,O3r),e($n,G3r),e(So,X3r),e(So,ve),e(ve,gC),e(gC,lve),e(lve,V3r),e(gC,z3r),e(gC,WV),e(WV,W3r),e(gC,Q3r),e(ve,H3r),e(ve,hC),e(hC,ive),e(ive,U3r),e(hC,J3r),e(hC,QV),e(QV,Y3r),e(hC,K3r),e(ve,Z3r),e(ve,pC),e(pC,dve),e(dve,eyr),e(pC,oyr),e(pC,HV),e(HV,ryr),e(pC,tyr),e(ve,ayr),e(ve,_C),e(_C,cve),e(cve,nyr),e(_C,syr),e(_C,UV),e(UV,lyr),e(_C,iyr),e(ve,dyr),e(ve,uC),e(uC,fve),e(fve,cyr),e(uC,fyr),e(uC,JV),e(JV,myr),e(uC,gyr),e(ve,hyr),e(ve,bC),e(bC,mve),e(mve,pyr),e(bC,_yr),e(bC,YV),e(YV,uyr),e(bC,byr),e(ve,vyr),e(ve,vC),e(vC,gve),e(gve,Tyr),e(vC,Fyr),e(vC,KV),e(KV,Cyr),e(vC,Myr),e(ve,Eyr),e(ve,TC),e(TC,hve),e(hve,yyr),e(TC,wyr),e(TC,ZV),e(ZV,Ayr),e(TC,Lyr),e(ve,Byr),e(ve,FC),e(FC,pve),e(pve,xyr),e(FC,kyr),e(FC,ez),e(ez,Ryr),e(FC,Syr),e(ve,Pyr),e(ve,CC),e(CC,_ve),e(_ve,$yr),e(CC,Iyr),e(CC,oz),e(oz,jyr),e(CC,Dyr),e(So,Nyr),e(So,uve),e(uve,qyr),e(So,Oyr),g(s0,So,null),b(d,Yke,u),b(d,Tf,u),e(Tf,MC),e(MC,bve),g(l0,bve,null),e(Tf,Gyr),e(Tf,vve),e(vve,Xyr),b(d,Kke,u),b(d,Nr,u),g(i0,Nr,null),e(Nr,Vyr),e(Nr,Ff),e(Ff,zyr),e(Ff,Tve),e(Tve,Wyr),e(Ff,Qyr),e(Ff,Fve),e(Fve,Hyr),e(Ff,Uyr),e(Nr,Jyr),e(Nr,d0),e(d0,Yyr),e(d0,Cve),e(Cve,Kyr),e(d0,Zyr),e(Nr,ewr),e(Nr,St),g(c0,St,null),e(St,owr),e(St,Mve),e(Mve,rwr),e(St,twr),e(St,Cf),e(Cf,awr),e(Cf,Eve),e(Eve,nwr),e(Cf,swr),e(Cf,yve),e(yve,lwr),e(Cf,iwr),e(St,dwr),e(St,wve),e(wve,cwr),e(St,fwr),g(f0,St,null),e(Nr,mwr),e(Nr,Po),g(m0,Po,null),e(Po,gwr),e(Po,Ave),e(Ave,hwr),e(Po,pwr),e(Po,In),e(In,_wr),e(In,Lve),e(Lve,uwr),e(In,bwr),e(In,Bve),e(Bve,vwr),e(In,Twr),e(In,xve),e(xve,Fwr),e(In,Cwr),e(Po,Mwr),e(Po,Re),e(Re,EC),e(EC,kve),e(kve,Ewr),e(EC,ywr),e(EC,rz),e(rz,wwr),e(EC,Awr),e(Re,Lwr),e(Re,yC),e(yC,Rve),e(Rve,Bwr),e(yC,xwr),e(yC,tz),e(tz,kwr),e(yC,Rwr),e(Re,Swr),e(Re,wC),e(wC,Sve),e(Sve,Pwr),e(wC,$wr),e(wC,az),e(az,Iwr),e(wC,jwr),e(Re,Dwr),e(Re,AC),e(AC,Pve),e(Pve,Nwr),e(AC,qwr),e(AC,nz),e(nz,Owr),e(AC,Gwr),e(Re,Xwr),e(Re,LC),e(LC,$ve),e($ve,Vwr),e(LC,zwr),e(LC,sz),e(sz,Wwr),e(LC,Qwr),e(Re,Hwr),e(Re,BC),e(BC,Ive),e(Ive,Uwr),e(BC,Jwr),e(BC,lz),e(lz,Ywr),e(BC,Kwr),e(Re,Zwr),e(Re,xC),e(xC,jve),e(jve,eAr),e(xC,oAr),e(xC,iz),e(iz,rAr),e(xC,tAr),e(Re,aAr),e(Re,kC),e(kC,Dve),e(Dve,nAr),e(kC,sAr),e(kC,dz),e(dz,lAr),e(kC,iAr),e(Po,dAr),e(Po,Nve),e(Nve,cAr),e(Po,fAr),g(g0,Po,null),b(d,Zke,u),b(d,Mf,u),e(Mf,RC),e(RC,qve),g(h0,qve,null),e(Mf,mAr),e(Mf,Ove),e(Ove,gAr),b(d,eRe,u),b(d,qr,u),g(p0,qr,null),e(qr,hAr),e(qr,Ef),e(Ef,pAr),e(Ef,Gve),e(Gve,_Ar),e(Ef,uAr),e(Ef,Xve),e(Xve,bAr),e(Ef,vAr),e(qr,TAr),e(qr,_0),e(_0,FAr),e(_0,Vve),e(Vve,CAr),e(_0,MAr),e(qr,EAr),e(qr,Pt),g(u0,Pt,null),e(Pt,yAr),e(Pt,zve),e(zve,wAr),e(Pt,AAr),e(Pt,yf),e(yf,LAr),e(yf,Wve),e(Wve,BAr),e(yf,xAr),e(yf,Qve),e(Qve,kAr),e(yf,RAr),e(Pt,SAr),e(Pt,Hve),e(Hve,PAr),e(Pt,$Ar),g(b0,Pt,null),e(qr,IAr),e(qr,$o),g(v0,$o,null),e($o,jAr),e($o,Uve),e(Uve,DAr),e($o,NAr),e($o,jn),e(jn,qAr),e(jn,Jve),e(Jve,OAr),e(jn,GAr),e(jn,Yve),e(Yve,XAr),e(jn,VAr),e(jn,Kve),e(Kve,zAr),e(jn,WAr),e($o,QAr),e($o,Se),e(Se,SC),e(SC,Zve),e(Zve,HAr),e(SC,UAr),e(SC,cz),e(cz,JAr),e(SC,YAr),e(Se,KAr),e(Se,PC),e(PC,e6e),e(e6e,ZAr),e(PC,e0r),e(PC,fz),e(fz,o0r),e(PC,r0r),e(Se,t0r),e(Se,$C),e($C,o6e),e(o6e,a0r),e($C,n0r),e($C,mz),e(mz,s0r),e($C,l0r),e(Se,i0r),e(Se,IC),e(IC,r6e),e(r6e,d0r),e(IC,c0r),e(IC,gz),e(gz,f0r),e(IC,m0r),e(Se,g0r),e(Se,jC),e(jC,t6e),e(t6e,h0r),e(jC,p0r),e(jC,hz),e(hz,_0r),e(jC,u0r),e(Se,b0r),e(Se,DC),e(DC,a6e),e(a6e,v0r),e(DC,T0r),e(DC,pz),e(pz,F0r),e(DC,C0r),e(Se,M0r),e(Se,NC),e(NC,n6e),e(n6e,E0r),e(NC,y0r),e(NC,_z),e(_z,w0r),e(NC,A0r),e(Se,L0r),e(Se,qC),e(qC,s6e),e(s6e,B0r),e(qC,x0r),e(qC,uz),e(uz,k0r),e(qC,R0r),e($o,S0r),e($o,l6e),e(l6e,P0r),e($o,$0r),g(T0,$o,null),b(d,oRe,u),b(d,wf,u),e(wf,OC),e(OC,i6e),g(F0,i6e,null),e(wf,I0r),e(wf,d6e),e(d6e,j0r),b(d,rRe,u),b(d,Or,u),g(C0,Or,null),e(Or,D0r),e(Or,Af),e(Af,N0r),e(Af,c6e),e(c6e,q0r),e(Af,O0r),e(Af,f6e),e(f6e,G0r),e(Af,X0r),e(Or,V0r),e(Or,M0),e(M0,z0r),e(M0,m6e),e(m6e,W0r),e(M0,Q0r),e(Or,H0r),e(Or,$t),g(E0,$t,null),e($t,U0r),e($t,g6e),e(g6e,J0r),e($t,Y0r),e($t,Lf),e(Lf,K0r),e(Lf,h6e),e(h6e,Z0r),e(Lf,eLr),e(Lf,p6e),e(p6e,oLr),e(Lf,rLr),e($t,tLr),e($t,_6e),e(_6e,aLr),e($t,nLr),g(y0,$t,null),e(Or,sLr),e(Or,Io),g(w0,Io,null),e(Io,lLr),e(Io,u6e),e(u6e,iLr),e(Io,dLr),e(Io,Dn),e(Dn,cLr),e(Dn,b6e),e(b6e,fLr),e(Dn,mLr),e(Dn,v6e),e(v6e,gLr),e(Dn,hLr),e(Dn,T6e),e(T6e,pLr),e(Dn,_Lr),e(Io,uLr),e(Io,F6e),e(F6e,GC),e(GC,C6e),e(C6e,bLr),e(GC,vLr),e(GC,bz),e(bz,TLr),e(GC,FLr),e(Io,CLr),e(Io,M6e),e(M6e,MLr),e(Io,ELr),g(A0,Io,null),b(d,tRe,u),b(d,Bf,u),e(Bf,XC),e(XC,E6e),g(L0,E6e,null),e(Bf,yLr),e(Bf,y6e),e(y6e,wLr),b(d,aRe,u),b(d,Gr,u),g(B0,Gr,null),e(Gr,ALr),e(Gr,xf),e(xf,LLr),e(xf,w6e),e(w6e,BLr),e(xf,xLr),e(xf,A6e),e(A6e,kLr),e(xf,RLr),e(Gr,SLr),e(Gr,x0),e(x0,PLr),e(x0,L6e),e(L6e,$Lr),e(x0,ILr),e(Gr,jLr),e(Gr,It),g(k0,It,null),e(It,DLr),e(It,B6e),e(B6e,NLr),e(It,qLr),e(It,kf),e(kf,OLr),e(kf,x6e),e(x6e,GLr),e(kf,XLr),e(kf,k6e),e(k6e,VLr),e(kf,zLr),e(It,WLr),e(It,R6e),e(R6e,QLr),e(It,HLr),g(R0,It,null),e(Gr,ULr),e(Gr,jo),g(S0,jo,null),e(jo,JLr),e(jo,S6e),e(S6e,YLr),e(jo,KLr),e(jo,Nn),e(Nn,ZLr),e(Nn,P6e),e(P6e,e7r),e(Nn,o7r),e(Nn,$6e),e($6e,r7r),e(Nn,t7r),e(Nn,I6e),e(I6e,a7r),e(Nn,n7r),e(jo,s7r),e(jo,P0),e(P0,VC),e(VC,j6e),e(j6e,l7r),e(VC,i7r),e(VC,vz),e(vz,d7r),e(VC,c7r),e(P0,f7r),e(P0,zC),e(zC,D6e),e(D6e,m7r),e(zC,g7r),e(zC,Tz),e(Tz,h7r),e(zC,p7r),e(jo,_7r),e(jo,N6e),e(N6e,u7r),e(jo,b7r),g($0,jo,null),b(d,nRe,u),b(d,Rf,u),e(Rf,WC),e(WC,q6e),g(I0,q6e,null),e(Rf,v7r),e(Rf,O6e),e(O6e,T7r),b(d,sRe,u),b(d,Xr,u),g(j0,Xr,null),e(Xr,F7r),e(Xr,Sf),e(Sf,C7r),e(Sf,G6e),e(G6e,M7r),e(Sf,E7r),e(Sf,X6e),e(X6e,y7r),e(Sf,w7r),e(Xr,A7r),e(Xr,D0),e(D0,L7r),e(D0,V6e),e(V6e,B7r),e(D0,x7r),e(Xr,k7r),e(Xr,jt),g(N0,jt,null),e(jt,R7r),e(jt,z6e),e(z6e,S7r),e(jt,P7r),e(jt,Pf),e(Pf,$7r),e(Pf,W6e),e(W6e,I7r),e(Pf,j7r),e(Pf,Q6e),e(Q6e,D7r),e(Pf,N7r),e(jt,q7r),e(jt,H6e),e(H6e,O7r),e(jt,G7r),g(q0,jt,null),e(Xr,X7r),e(Xr,Do),g(O0,Do,null),e(Do,V7r),e(Do,U6e),e(U6e,z7r),e(Do,W7r),e(Do,qn),e(qn,Q7r),e(qn,J6e),e(J6e,H7r),e(qn,U7r),e(qn,Y6e),e(Y6e,J7r),e(qn,Y7r),e(qn,K6e),e(K6e,K7r),e(qn,Z7r),e(Do,eBr),e(Do,Z6e),e(Z6e,QC),e(QC,eTe),e(eTe,oBr),e(QC,rBr),e(QC,Fz),e(Fz,tBr),e(QC,aBr),e(Do,nBr),e(Do,oTe),e(oTe,sBr),e(Do,lBr),g(G0,Do,null),lRe=!0},p(d,[u]){const X0={};u&2&&(X0.$$scope={dirty:u,ctx:d}),Of.$set(X0);const rTe={};u&2&&(rTe.$$scope={dirty:u,ctx:d}),Eh.$set(rTe);const tTe={};u&2&&(tTe.$$scope={dirty:u,ctx:d}),$h.$set(tTe)},i(d){lRe||(h(fe.$$.fragment,d),h(qa.$$.fragment,d),h(YM.$$.fragment,d),h(KM.$$.fragment,d),h(Of.$$.fragment,d),h(ZM.$$.fragment,d),h(e4.$$.fragment,d),h(t4.$$.fragment,d),h(a4.$$.fragment,d),h(n4.$$.fragment,d),h(s4.$$.fragment,d),h(l4.$$.fragment,d),h(c4.$$.fragment,d),h(f4.$$.fragment,d),h(m4.$$.fragment,d),h(g4.$$.fragment,d),h(h4.$$.fragment,d),h(u4.$$.fragment,d),h(Eh.$$.fragment,d),h(b4.$$.fragment,d),h(v4.$$.fragment,d),h(T4.$$.fragment,d),h(F4.$$.fragment,d),h(E4.$$.fragment,d),h($h.$$.fragment,d),h(y4.$$.fragment,d),h(w4.$$.fragment,d),h(A4.$$.fragment,d),h(L4.$$.fragment,d),h(x4.$$.fragment,d),h(k4.$$.fragment,d),h(R4.$$.fragment,d),h(S4.$$.fragment,d),h(P4.$$.fragment,d),h($4.$$.fragment,d),h(j4.$$.fragment,d),h(D4.$$.fragment,d),h(N4.$$.fragment,d),h(q4.$$.fragment,d),h(O4.$$.fragment,d),h(G4.$$.fragment,d),h(V4.$$.fragment,d),h(z4.$$.fragment,d),h(W4.$$.fragment,d),h(Q4.$$.fragment,d),h(H4.$$.fragment,d),h(U4.$$.fragment,d),h(Y4.$$.fragment,d),h(K4.$$.fragment,d),h(Z4.$$.fragment,d),h(eE.$$.fragment,d),h(oE.$$.fragment,d),h(rE.$$.fragment,d),h(aE.$$.fragment,d),h(nE.$$.fragment,d),h(sE.$$.fragment,d),h(lE.$$.fragment,d),h(iE.$$.fragment,d),h(dE.$$.fragment,d),h(fE.$$.fragment,d),h(mE.$$.fragment,d),h(gE.$$.fragment,d),h(hE.$$.fragment,d),h(pE.$$.fragment,d),h(_E.$$.fragment,d),h(bE.$$.fragment,d),h(vE.$$.fragment,d),h(TE.$$.fragment,d),h(FE.$$.fragment,d),h(CE.$$.fragment,d),h(ME.$$.fragment,d),h(yE.$$.fragment,d),h(wE.$$.fragment,d),h(AE.$$.fragment,d),h(LE.$$.fragment,d),h(BE.$$.fragment,d),h(xE.$$.fragment,d),h(RE.$$.fragment,d),h(SE.$$.fragment,d),h(PE.$$.fragment,d),h($E.$$.fragment,d),h(IE.$$.fragment,d),h(jE.$$.fragment,d),h(NE.$$.fragment,d),h(qE.$$.fragment,d),h(OE.$$.fragment,d),h(GE.$$.fragment,d),h(XE.$$.fragment,d),h(VE.$$.fragment,d),h(WE.$$.fragment,d),h(QE.$$.fragment,d),h(HE.$$.fragment,d),h(UE.$$.fragment,d),h(JE.$$.fragment,d),h(YE.$$.fragment,d),h(ZE.$$.fragment,d),h(e3.$$.fragment,d),h(o3.$$.fragment,d),h(r3.$$.fragment,d),h(t3.$$.fragment,d),h(a3.$$.fragment,d),h(s3.$$.fragment,d),h(l3.$$.fragment,d),h(i3.$$.fragment,d),h(d3.$$.fragment,d),h(c3.$$.fragment,d),h(f3.$$.fragment,d),h(g3.$$.fragment,d),h(h3.$$.fragment,d),h(p3.$$.fragment,d),h(_3.$$.fragment,d),h(u3.$$.fragment,d),h(b3.$$.fragment,d),h(T3.$$.fragment,d),h(F3.$$.fragment,d),h(C3.$$.fragment,d),h(M3.$$.fragment,d),h(E3.$$.fragment,d),h(y3.$$.fragment,d),h(A3.$$.fragment,d),h(L3.$$.fragment,d),h(B3.$$.fragment,d),h(x3.$$.fragment,d),h(k3.$$.fragment,d),h(R3.$$.fragment,d),h(P3.$$.fragment,d),h($3.$$.fragment,d),h(I3.$$.fragment,d),h(D3.$$.fragment,d),h(N3.$$.fragment,d),h(q3.$$.fragment,d),h(G3.$$.fragment,d),h(X3.$$.fragment,d),h(V3.$$.fragment,d),h(z3.$$.fragment,d),h(W3.$$.fragment,d),h(Q3.$$.fragment,d),h(U3.$$.fragment,d),h(J3.$$.fragment,d),h(Y3.$$.fragment,d),h(K3.$$.fragment,d),h(Z3.$$.fragment,d),h(ey.$$.fragment,d),h(ry.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(dy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(my.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(_y.$$.fragment,d),h(uy.$$.fragment,d),h(by.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(Cy.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(By.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(Iy.$$.fragment,d),h(Dy.$$.fragment,d),h(Ny.$$.fragment,d),h(qy.$$.fragment,d),h(Oy.$$.fragment,d),h(Gy.$$.fragment,d),h(Xy.$$.fragment,d),h(zy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Jy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(aw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(fw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(uw.$$.fragment,d),h(bw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Mw.$$.fragment,d),h(Ew.$$.fragment,d),h(yw.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(Bw.$$.fragment,d),h(xw.$$.fragment,d),h(kw.$$.fragment,d),h(Rw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Dw.$$.fragment,d),h(Nw.$$.fragment,d),h(Ow.$$.fragment,d),h(Gw.$$.fragment,d),h(Xw.$$.fragment,d),h(Vw.$$.fragment,d),h(zw.$$.fragment,d),h(Ww.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(Zw.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(aA.$$.fragment,d),h(nA.$$.fragment,d),h(sA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(fA.$$.fragment,d),h(mA.$$.fragment,d),h(gA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(uA.$$.fragment,d),h(bA.$$.fragment,d),h(vA.$$.fragment,d),h(TA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(EA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(BA.$$.fragment,d),h(xA.$$.fragment,d),h(kA.$$.fragment,d),h(RA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h(IA.$$.fragment,d),h(jA.$$.fragment,d),h(DA.$$.fragment,d),h(NA.$$.fragment,d),h(qA.$$.fragment,d),h(OA.$$.fragment,d),h(XA.$$.fragment,d),h(VA.$$.fragment,d),h(zA.$$.fragment,d),h(WA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(JA.$$.fragment,d),h(YA.$$.fragment,d),h(KA.$$.fragment,d),h(ZA.$$.fragment,d),h(e0.$$.fragment,d),h(o0.$$.fragment,d),h(t0.$$.fragment,d),h(a0.$$.fragment,d),h(n0.$$.fragment,d),h(s0.$$.fragment,d),h(l0.$$.fragment,d),h(i0.$$.fragment,d),h(c0.$$.fragment,d),h(f0.$$.fragment,d),h(m0.$$.fragment,d),h(g0.$$.fragment,d),h(h0.$$.fragment,d),h(p0.$$.fragment,d),h(u0.$$.fragment,d),h(b0.$$.fragment,d),h(v0.$$.fragment,d),h(T0.$$.fragment,d),h(F0.$$.fragment,d),h(C0.$$.fragment,d),h(E0.$$.fragment,d),h(y0.$$.fragment,d),h(w0.$$.fragment,d),h(A0.$$.fragment,d),h(L0.$$.fragment,d),h(B0.$$.fragment,d),h(k0.$$.fragment,d),h(R0.$$.fragment,d),h(S0.$$.fragment,d),h($0.$$.fragment,d),h(I0.$$.fragment,d),h(j0.$$.fragment,d),h(N0.$$.fragment,d),h(q0.$$.fragment,d),h(O0.$$.fragment,d),h(G0.$$.fragment,d),lRe=!0)},o(d){p(fe.$$.fragment,d),p(qa.$$.fragment,d),p(YM.$$.fragment,d),p(KM.$$.fragment,d),p(Of.$$.fragment,d),p(ZM.$$.fragment,d),p(e4.$$.fragment,d),p(t4.$$.fragment,d),p(a4.$$.fragment,d),p(n4.$$.fragment,d),p(s4.$$.fragment,d),p(l4.$$.fragment,d),p(c4.$$.fragment,d),p(f4.$$.fragment,d),p(m4.$$.fragment,d),p(g4.$$.fragment,d),p(h4.$$.fragment,d),p(u4.$$.fragment,d),p(Eh.$$.fragment,d),p(b4.$$.fragment,d),p(v4.$$.fragment,d),p(T4.$$.fragment,d),p(F4.$$.fragment,d),p(E4.$$.fragment,d),p($h.$$.fragment,d),p(y4.$$.fragment,d),p(w4.$$.fragment,d),p(A4.$$.fragment,d),p(L4.$$.fragment,d),p(x4.$$.fragment,d),p(k4.$$.fragment,d),p(R4.$$.fragment,d),p(S4.$$.fragment,d),p(P4.$$.fragment,d),p($4.$$.fragment,d),p(j4.$$.fragment,d),p(D4.$$.fragment,d),p(N4.$$.fragment,d),p(q4.$$.fragment,d),p(O4.$$.fragment,d),p(G4.$$.fragment,d),p(V4.$$.fragment,d),p(z4.$$.fragment,d),p(W4.$$.fragment,d),p(Q4.$$.fragment,d),p(H4.$$.fragment,d),p(U4.$$.fragment,d),p(Y4.$$.fragment,d),p(K4.$$.fragment,d),p(Z4.$$.fragment,d),p(eE.$$.fragment,d),p(oE.$$.fragment,d),p(rE.$$.fragment,d),p(aE.$$.fragment,d),p(nE.$$.fragment,d),p(sE.$$.fragment,d),p(lE.$$.fragment,d),p(iE.$$.fragment,d),p(dE.$$.fragment,d),p(fE.$$.fragment,d),p(mE.$$.fragment,d),p(gE.$$.fragment,d),p(hE.$$.fragment,d),p(pE.$$.fragment,d),p(_E.$$.fragment,d),p(bE.$$.fragment,d),p(vE.$$.fragment,d),p(TE.$$.fragment,d),p(FE.$$.fragment,d),p(CE.$$.fragment,d),p(ME.$$.fragment,d),p(yE.$$.fragment,d),p(wE.$$.fragment,d),p(AE.$$.fragment,d),p(LE.$$.fragment,d),p(BE.$$.fragment,d),p(xE.$$.fragment,d),p(RE.$$.fragment,d),p(SE.$$.fragment,d),p(PE.$$.fragment,d),p($E.$$.fragment,d),p(IE.$$.fragment,d),p(jE.$$.fragment,d),p(NE.$$.fragment,d),p(qE.$$.fragment,d),p(OE.$$.fragment,d),p(GE.$$.fragment,d),p(XE.$$.fragment,d),p(VE.$$.fragment,d),p(WE.$$.fragment,d),p(QE.$$.fragment,d),p(HE.$$.fragment,d),p(UE.$$.fragment,d),p(JE.$$.fragment,d),p(YE.$$.fragment,d),p(ZE.$$.fragment,d),p(e3.$$.fragment,d),p(o3.$$.fragment,d),p(r3.$$.fragment,d),p(t3.$$.fragment,d),p(a3.$$.fragment,d),p(s3.$$.fragment,d),p(l3.$$.fragment,d),p(i3.$$.fragment,d),p(d3.$$.fragment,d),p(c3.$$.fragment,d),p(f3.$$.fragment,d),p(g3.$$.fragment,d),p(h3.$$.fragment,d),p(p3.$$.fragment,d),p(_3.$$.fragment,d),p(u3.$$.fragment,d),p(b3.$$.fragment,d),p(T3.$$.fragment,d),p(F3.$$.fragment,d),p(C3.$$.fragment,d),p(M3.$$.fragment,d),p(E3.$$.fragment,d),p(y3.$$.fragment,d),p(A3.$$.fragment,d),p(L3.$$.fragment,d),p(B3.$$.fragment,d),p(x3.$$.fragment,d),p(k3.$$.fragment,d),p(R3.$$.fragment,d),p(P3.$$.fragment,d),p($3.$$.fragment,d),p(I3.$$.fragment,d),p(D3.$$.fragment,d),p(N3.$$.fragment,d),p(q3.$$.fragment,d),p(G3.$$.fragment,d),p(X3.$$.fragment,d),p(V3.$$.fragment,d),p(z3.$$.fragment,d),p(W3.$$.fragment,d),p(Q3.$$.fragment,d),p(U3.$$.fragment,d),p(J3.$$.fragment,d),p(Y3.$$.fragment,d),p(K3.$$.fragment,d),p(Z3.$$.fragment,d),p(ey.$$.fragment,d),p(ry.$$.fragment,d),p(ty.$$.fragment,d),p(ay.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(ly.$$.fragment,d),p(dy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(my.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(_y.$$.fragment,d),p(uy.$$.fragment,d),p(by.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(Cy.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(wy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(By.$$.fragment,d),p(ky.$$.fragment,d),p(Ry.$$.fragment,d),p(Sy.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(Iy.$$.fragment,d),p(Dy.$$.fragment,d),p(Ny.$$.fragment,d),p(qy.$$.fragment,d),p(Oy.$$.fragment,d),p(Gy.$$.fragment,d),p(Xy.$$.fragment,d),p(zy.$$.fragment,d),p(Wy.$$.fragment,d),p(Qy.$$.fragment,d),p(Hy.$$.fragment,d),p(Uy.$$.fragment,d),p(Jy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ew.$$.fragment,d),p(rw.$$.fragment,d),p(tw.$$.fragment,d),p(aw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(iw.$$.fragment,d),p(dw.$$.fragment,d),p(cw.$$.fragment,d),p(fw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(pw.$$.fragment,d),p(_w.$$.fragment,d),p(uw.$$.fragment,d),p(bw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Cw.$$.fragment,d),p(Mw.$$.fragment,d),p(Ew.$$.fragment,d),p(yw.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(Bw.$$.fragment,d),p(xw.$$.fragment,d),p(kw.$$.fragment,d),p(Rw.$$.fragment,d),p(Pw.$$.fragment,d),p($w.$$.fragment,d),p(Iw.$$.fragment,d),p(jw.$$.fragment,d),p(Dw.$$.fragment,d),p(Nw.$$.fragment,d),p(Ow.$$.fragment,d),p(Gw.$$.fragment,d),p(Xw.$$.fragment,d),p(Vw.$$.fragment,d),p(zw.$$.fragment,d),p(Ww.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Jw.$$.fragment,d),p(Yw.$$.fragment,d),p(Kw.$$.fragment,d),p(Zw.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(tA.$$.fragment,d),p(aA.$$.fragment,d),p(nA.$$.fragment,d),p(sA.$$.fragment,d),p(iA.$$.fragment,d),p(dA.$$.fragment,d),p(cA.$$.fragment,d),p(fA.$$.fragment,d),p(mA.$$.fragment,d),p(gA.$$.fragment,d),p(pA.$$.fragment,d),p(_A.$$.fragment,d),p(uA.$$.fragment,d),p(bA.$$.fragment,d),p(vA.$$.fragment,d),p(TA.$$.fragment,d),p(CA.$$.fragment,d),p(MA.$$.fragment,d),p(EA.$$.fragment,d),p(yA.$$.fragment,d),p(wA.$$.fragment,d),p(AA.$$.fragment,d),p(BA.$$.fragment,d),p(xA.$$.fragment,d),p(kA.$$.fragment,d),p(RA.$$.fragment,d),p(SA.$$.fragment,d),p(PA.$$.fragment,d),p(IA.$$.fragment,d),p(jA.$$.fragment,d),p(DA.$$.fragment,d),p(NA.$$.fragment,d),p(qA.$$.fragment,d),p(OA.$$.fragment,d),p(XA.$$.fragment,d),p(VA.$$.fragment,d),p(zA.$$.fragment,d),p(WA.$$.fragment,d),p(QA.$$.fragment,d),p(HA.$$.fragment,d),p(JA.$$.fragment,d),p(YA.$$.fragment,d),p(KA.$$.fragment,d),p(ZA.$$.fragment,d),p(e0.$$.fragment,d),p(o0.$$.fragment,d),p(t0.$$.fragment,d),p(a0.$$.fragment,d),p(n0.$$.fragment,d),p(s0.$$.fragment,d),p(l0.$$.fragment,d),p(i0.$$.fragment,d),p(c0.$$.fragment,d),p(f0.$$.fragment,d),p(m0.$$.fragment,d),p(g0.$$.fragment,d),p(h0.$$.fragment,d),p(p0.$$.fragment,d),p(u0.$$.fragment,d),p(b0.$$.fragment,d),p(v0.$$.fragment,d),p(T0.$$.fragment,d),p(F0.$$.fragment,d),p(C0.$$.fragment,d),p(E0.$$.fragment,d),p(y0.$$.fragment,d),p(w0.$$.fragment,d),p(A0.$$.fragment,d),p(L0.$$.fragment,d),p(B0.$$.fragment,d),p(k0.$$.fragment,d),p(R0.$$.fragment,d),p(S0.$$.fragment,d),p($0.$$.fragment,d),p(I0.$$.fragment,d),p(j0.$$.fragment,d),p(N0.$$.fragment,d),p(q0.$$.fragment,d),p(O0.$$.fragment,d),p(G0.$$.fragment,d),lRe=!1},d(d){t(J),d&&t(Pe),d&&t(de),_(fe),d&&t(If),d&&t(fa),d&&t(Le),d&&t(co),d&&t(Df),_(qa,d),d&&t(fo),d&&t(pe),d&&t(zo),d&&t(Oa),d&&t(sxe),d&&t(Vi),_(YM),d&&t(lxe),d&&t(zn),d&&t(ixe),_(KM,d),d&&t(dxe),d&&t(zL),d&&t(cxe),_(Of,d),d&&t(fxe),d&&t(zi),_(ZM),d&&t(mxe),d&&t(Wo),_(e4),_(t4),_(a4),_(n4),d&&t(gxe),d&&t(Qi),_(s4),d&&t(hxe),d&&t(Qo),_(l4),_(c4),_(f4),_(m4),d&&t(pxe),d&&t(Hi),_(g4),d&&t(_xe),d&&t(Ho),_(h4),_(u4),_(Eh),_(b4),_(v4),d&&t(uxe),d&&t(Ui),_(T4),d&&t(bxe),d&&t(Uo),_(F4),_(E4),_($h),_(y4),_(w4),d&&t(vxe),d&&t(Yi),_(A4),d&&t(Txe),d&&t(Jo),_(L4),_(x4),_(k4),_(R4),_(S4),d&&t(Fxe),d&&t(ed),_(P4),d&&t(Cxe),d&&t(Yo),_($4),_(j4),_(D4),_(N4),_(q4),d&&t(Mxe),d&&t(td),_(O4),d&&t(Exe),d&&t(Ko),_(G4),_(V4),_(z4),_(W4),_(Q4),d&&t(yxe),d&&t(sd),_(H4),d&&t(wxe),d&&t(Zo),_(U4),_(Y4),_(K4),_(Z4),_(eE),d&&t(Axe),d&&t(dd),_(oE),d&&t(Lxe),d&&t(er),_(rE),_(aE),_(nE),_(sE),_(lE),d&&t(Bxe),d&&t(md),_(iE),d&&t(xxe),d&&t(or),_(dE),_(fE),_(mE),_(gE),_(hE),d&&t(kxe),d&&t(pd),_(pE),d&&t(Rxe),d&&t(rr),_(_E),_(bE),_(vE),_(TE),_(FE),d&&t(Sxe),d&&t(bd),_(CE),d&&t(Pxe),d&&t(tr),_(ME),_(yE),_(wE),_(AE),_(LE),d&&t($xe),d&&t(Fd),_(BE),d&&t(Ixe),d&&t(ar),_(xE),_(RE),_(SE),_(PE),_($E),d&&t(jxe),d&&t(Ed),_(IE),d&&t(Dxe),d&&t(nr),_(jE),_(NE),_(qE),_(OE),_(GE),d&&t(Nxe),d&&t(Ad),_(XE),d&&t(qxe),d&&t(sr),_(VE),_(WE),_(QE),_(HE),_(UE),d&&t(Oxe),d&&t(xd),_(JE),d&&t(Gxe),d&&t(lr),_(YE),_(ZE),_(e3),_(o3),_(r3),d&&t(Xxe),d&&t(Sd),_(t3),d&&t(Vxe),d&&t(ir),_(a3),_(s3),_(l3),_(i3),_(d3),d&&t(zxe),d&&t(Id),_(c3),d&&t(Wxe),d&&t(dr),_(f3),_(g3),_(h3),_(p3),_(_3),d&&t(Qxe),d&&t(Nd),_(u3),d&&t(Hxe),d&&t(cr),_(b3),_(T3),_(F3),_(C3),_(M3),d&&t(Uxe),d&&t(Gd),_(E3),d&&t(Jxe),d&&t(fr),_(y3),_(A3),_(L3),_(B3),_(x3),d&&t(Yxe),d&&t(zd),_(k3),d&&t(Kxe),d&&t(mr),_(R3),_(P3),_($3),_(I3),_(D3),d&&t(Zxe),d&&t(Hd),_(N3),d&&t(eke),d&&t(gr),_(q3),_(G3),_(X3),_(V3),_(z3),d&&t(oke),d&&t(Yd),_(W3),d&&t(rke),d&&t(hr),_(Q3),_(U3),_(J3),_(Y3),_(K3),d&&t(tke),d&&t(oc),_(Z3),d&&t(ake),d&&t(pr),_(ey),_(ry),_(ty),_(ay),_(ny),d&&t(nke),d&&t(ac),_(sy),d&&t(ske),d&&t(_r),_(ly),_(dy),_(cy),_(fy),_(my),d&&t(lke),d&&t(lc),_(gy),d&&t(ike),d&&t(ur),_(hy),_(_y),_(uy),_(by),_(Ty),d&&t(dke),d&&t(cc),_(Fy),d&&t(cke),d&&t(br),_(Cy),_(Ey),_(yy),_(wy),_(Ay),d&&t(fke),d&&t(gc),_(Ly),d&&t(mke),d&&t(vr),_(By),_(ky),_(Ry),_(Sy),_(Py),d&&t(gke),d&&t(_c),_($y),d&&t(hke),d&&t(Tr),_(Iy),_(Dy),_(Ny),_(qy),_(Oy),d&&t(pke),d&&t(vc),_(Gy),d&&t(_ke),d&&t(Fr),_(Xy),_(zy),_(Wy),_(Qy),_(Hy),d&&t(uke),d&&t(Cc),_(Uy),d&&t(bke),d&&t(Cr),_(Jy),_(Ky),_(Zy),_(ew),_(rw),d&&t(vke),d&&t(yc),_(tw),d&&t(Tke),d&&t(Mr),_(aw),_(sw),_(lw),_(iw),_(dw),d&&t(Fke),d&&t(Lc),_(cw),d&&t(Cke),d&&t(Er),_(fw),_(gw),_(hw),_(pw),_(_w),d&&t(Mke),d&&t(kc),_(uw),d&&t(Eke),d&&t(yr),_(bw),_(Tw),_(Fw),_(Cw),_(Mw),d&&t(yke),d&&t(Pc),_(Ew),d&&t(wke),d&&t(wr),_(yw),_(Aw),_(Lw),_(Bw),_(xw),d&&t(Ake),d&&t(jc),_(kw),d&&t(Lke),d&&t(Ar),_(Rw),_(Pw),_($w),_(Iw),_(jw),d&&t(Bke),d&&t(qc),_(Dw),d&&t(xke),d&&t(Lr),_(Nw),_(Ow),_(Gw),_(Xw),_(Vw),d&&t(kke),d&&t(Xc),_(zw),d&&t(Rke),d&&t(Br),_(Ww),_(Hw),_(Uw),_(Jw),_(Yw),d&&t(Ske),d&&t(Wc),_(Kw),d&&t(Pke),d&&t(xr),_(Zw),_(oA),_(rA),_(tA),_(aA),d&&t($ke),d&&t(Uc),_(nA),d&&t(Ike),d&&t(kr),_(sA),_(iA),_(dA),_(cA),_(fA),d&&t(jke),d&&t(Kc),_(mA),d&&t(Dke),d&&t(Rr),_(gA),_(pA),_(_A),_(uA),_(bA),d&&t(Nke),d&&t(of),_(vA),d&&t(qke),d&&t(Sr),_(TA),_(CA),_(MA),_(EA),_(yA),d&&t(Oke),d&&t(af),_(wA),d&&t(Gke),d&&t(Pr),_(AA),_(BA),_(xA),_(kA),_(RA),d&&t(Xke),d&&t(lf),_(SA),d&&t(Vke),d&&t($r),_(PA),_(IA),_(jA),_(DA),_(NA),d&&t(zke),d&&t(ff),_(qA),d&&t(Wke),d&&t(Ir),_(OA),_(XA),_(VA),_(zA),_(WA),d&&t(Qke),d&&t(hf),_(QA),d&&t(Hke),d&&t(jr),_(HA),_(JA),_(YA),_(KA),_(ZA),d&&t(Uke),d&&t(uf),_(e0),d&&t(Jke),d&&t(Dr),_(o0),_(t0),_(a0),_(n0),_(s0),d&&t(Yke),d&&t(Tf),_(l0),d&&t(Kke),d&&t(Nr),_(i0),_(c0),_(f0),_(m0),_(g0),d&&t(Zke),d&&t(Mf),_(h0),d&&t(eRe),d&&t(qr),_(p0),_(u0),_(b0),_(v0),_(T0),d&&t(oRe),d&&t(wf),_(F0),d&&t(rRe),d&&t(Or),_(C0),_(E0),_(y0),_(w0),_(A0),d&&t(tRe),d&&t(Bf),_(L0),d&&t(aRe),d&&t(Gr),_(B0),_(k0),_(R0),_(S0),_($0),d&&t(nRe),d&&t(Rf),_(I0),d&&t(sRe),d&&t(Xr),_(j0),_(N0),_(q0),_(O0),_(G0)}}}const XTt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function VTt(Ii,J,Pe){let{fw:de}=J;return Ii.$$set=he=>{"fw"in he&&Pe(0,de=he.fw)},[de]}class YTt extends $Tt{constructor(J){super();ITt(this,J,VTt,GTt,jTt,{fw:0})}}export{YTt as default,XTt as metadata};
