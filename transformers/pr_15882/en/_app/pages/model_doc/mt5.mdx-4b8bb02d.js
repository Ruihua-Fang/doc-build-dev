import{S as Xd,i as Kd,s as Jd,e as r,k as d,w as f,t as a,M as Qd,c as n,d as s,m as p,a as o,x as h,h as i,b as l,F as e,g as c,y as u,L as Yd,q as g,o as _,B as k}from"../../chunks/vendor-4833417e.js";import{D as T}from"../../chunks/Docstring-44c5af16.js";import{C as Ce}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as C}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function Zd(Ln){let N,Ut,P,A,Ts,Pe,Nn,$s,Dn,$r,U,re,ws,Ae,In,ys,Gn,wr,ne,On,Se,Vn,Un,yr,Wt,Wn,br,Bt,bs,Bn,zr,oe,Hn,Le,Rn,Xn,Mr,Ht,Kn,Er,w,zs,Ms,Ne,Jn,Qn,Es,xs,De,Yn,Zn,qs,Fs,Ie,eo,to,js,Cs,Ge,so,ro,Ps,Rt,Oe,no,oo,xr,D,ao,Ve,io,lo,Ue,po,mo,qr,W,ae,As,We,co,Ss,fo,Fr,S,Be,ho,L,uo,Xt,go,_o,Kt,ko,vo,He,To,$o,wo,B,yo,Jt,bo,zo,Qt,Mo,Eo,jr,H,ie,Ls,Re,xo,Ns,qo,Cr,v,Xe,Fo,Ke,jo,Je,Co,Po,Ao,Qe,So,Yt,Lo,No,Do,I,Ye,Io,Ds,Go,Oo,Ze,Zt,Vo,Is,Uo,Wo,es,Bo,Gs,Ho,Ro,le,et,Xo,Os,Ko,Jo,de,tt,Qo,Vs,Yo,Zo,pe,st,ea,rt,ta,Us,sa,ra,Pr,me,na,ts,oa,aa,Ar,R,ce,Ws,nt,ia,Bs,la,Sr,$,ot,da,X,pa,Hs,ma,ca,at,fa,ha,ua,it,ga,ss,_a,ka,va,G,lt,Ta,Rs,$a,wa,dt,rs,ya,Xs,ba,za,ns,Ma,Ks,Ea,xa,fe,pt,qa,Js,Fa,Lr,he,ja,os,Ca,Pa,Nr,K,ue,Qs,mt,Aa,Ys,Sa,Dr,b,ct,La,ft,Na,as,Da,Ia,Ga,Zs,Oa,Va,ht,Ir,J,ge,er,ut,Ua,tr,Wa,Gr,z,gt,Ba,_t,Ha,is,Ra,Xa,Ka,sr,Ja,Qa,kt,Or,Q,_e,rr,vt,Ya,nr,Za,Vr,M,Tt,ei,$t,ti,ls,si,ri,ni,or,oi,ai,wt,Ur,Y,ke,ar,yt,ii,ir,li,Wr,E,bt,di,zt,pi,ds,mi,ci,fi,lr,hi,ui,Mt,Br,Z,ve,dr,Et,gi,pr,_i,Hr,x,xt,ki,qt,vi,ps,Ti,$i,wi,mr,yi,bi,Ft,Rr,ee,Te,cr,jt,zi,fr,Mi,Xr,q,Ct,Ei,Pt,xi,ms,qi,Fi,ji,hr,Ci,Pi,At,Kr,te,$e,ur,St,Ai,gr,Si,Jr,F,Lt,Li,Nt,Ni,cs,Di,Ii,Gi,_r,Oi,Vi,Dt,Qr,se,we,kr,It,Ui,vr,Wi,Yr,j,Gt,Bi,Ot,Hi,fs,Ri,Xi,Ki,Tr,Ji,Qi,Vt,Zr;return Pe=new C({}),Ae=new C({}),We=new C({}),Be=new T({props:{name:"class transformers.MT5Config",anchor:"transformers.MT5Config",parameters:[{name:"vocab_size",val:" = 250112"},{name:"d_model",val:" = 512"},{name:"d_kv",val:" = 64"},{name:"d_ff",val:" = 1024"},{name:"num_layers",val:" = 8"},{name:"num_decoder_layers",val:" = None"},{name:"num_heads",val:" = 6"},{name:"relative_attention_num_buckets",val:" = 32"},{name:"dropout_rate",val:" = 0.1"},{name:"layer_norm_epsilon",val:" = 1e-06"},{name:"initializer_factor",val:" = 1.0"},{name:"feed_forward_proj",val:" = 'gated-gelu'"},{name:"is_encoder_decoder",val:" = True"},{name:"use_cache",val:" = True"},{name:"tokenizer_class",val:" = 'T5Tokenizer'"},{name:"tie_word_embeddings",val:" = False"},{name:"pad_token_id",val:" = 0"},{name:"eos_token_id",val:" = 1"},{name:"decoder_start_token_id",val:" = 0"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/mt5/configuration_mt5.py#L24",parametersDescription:[{anchor:"transformers.MT5Config.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 250112) &#x2014;
Vocabulary size of the T5 model. Defines the number of different tokens that can be represented by the
<code>inputs_ids</code> passed when calling <a href="/docs/transformers/pr_15882/en/model_doc/t5#transformers.T5Model">T5Model</a> or <a href="/docs/transformers/pr_15882/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a>.`,name:"vocab_size"},{anchor:"transformers.MT5Config.d_model",description:`<strong>d_model</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
Size of the encoder layers and the pooler layer.`,name:"d_model"},{anchor:"transformers.MT5Config.d_kv",description:`<strong>d_kv</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Size of the key, query, value projections per attention head. <code>d_kv</code> has to be equal to <code>d_model // num_heads</code>.`,name:"d_kv"},{anchor:"transformers.MT5Config.d_ff",description:`<strong>d_ff</strong> (<code>int</code>, <em>optional</em>, defaults to 1024) &#x2014;
Size of the intermediate feed forward layer in each <code>T5Block</code>.`,name:"d_ff"},{anchor:"transformers.MT5Config.num_layers",description:`<strong>num_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_layers"},{anchor:"transformers.MT5Config.num_decoder_layers",description:`<strong>num_decoder_layers</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of hidden layers in the Transformer decoder. Will use the same value as <code>num_layers</code> if not set.`,name:"num_decoder_layers"},{anchor:"transformers.MT5Config.num_heads",description:`<strong>num_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 6) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_heads"},{anchor:"transformers.MT5Config.relative_attention_num_buckets",description:`<strong>relative_attention_num_buckets</strong> (<code>int</code>, <em>optional</em>, defaults to 32) &#x2014;
The number of buckets to use for each attention layer.`,name:"relative_attention_num_buckets"},{anchor:"transformers.MT5Config.dropout_rate",description:`<strong>dropout_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The ratio for all dropout layers.`,name:"dropout_rate"},{anchor:"transformers.MT5Config.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-6) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.MT5Config.initializer_factor",description:`<strong>initializer_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
A factor for initializing all weight matrices (should be kept to 1, used internally for initialization
testing).`,name:"initializer_factor"},{anchor:"transformers.MT5Config.feed_forward_proj",description:`<strong>feed_forward_proj</strong> (<code>string</code>, <em>optional</em>, defaults to <code>&quot;gated-gelu&quot;</code>) &#x2014;
Type of feed forward layer to be used. Should be one of <code>&quot;relu&quot;</code> or <code>&quot;gated-gelu&quot;</code>.`,name:"feed_forward_proj"},{anchor:"transformers.MT5Config.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the model should return the last key/values attentions (not used by all models).`,name:"use_cache"}]}}),Re=new C({}),Xe=new T({props:{name:"class transformers.T5Tokenizer",anchor:"transformers.T5Tokenizer",parameters:[{name:"vocab_file",val:""},{name:"eos_token",val:" = '</s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"extra_ids",val:" = 100"},{name:"additional_special_tokens",val:" = None"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/t5/tokenization_t5.py#L53",parametersDescription:[{anchor:"transformers.T5Tokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.T5Tokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.T5Tokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.T5Tokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.T5Tokenizer.extra_ids",description:`<strong>extra_ids</strong> (<code>int</code>, <em>optional</em>, defaults to 100) &#x2014;
Add a number of extra ids added to the end of the vocabulary for use as sentinels. These tokens are
accessible as &#x201C;<extra<em>id{%d}&gt;&#x201D; where &#x201D;{%d}&#x201D; is a number between 0 and extra_ids-1. Extra tokens are
indexed from the end of the vocabulary up to beginning (&#x201C;<extra_id_0>&#x201D; is the last token in the vocabulary
like in T5 preprocessing see
<a href="https://github.com/google-research/text-to-text-transfer-transformer/blob/9fd7b14a769417be33bc6c850f9598764913c833/t5/data/preprocessors.py#L2117" rel="nofollow">here</a>).</extra_id_0></extra<em>`,name:"extra_ids"},{anchor:"transformers.T5Tokenizer.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"},{anchor:"transformers.T5Tokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"},{anchor:"transformers.T5Tokenizer.sp_model",description:`<strong>sp_model</strong> (<code>SentencePieceProcessor</code>) &#x2014;
The <em>SentencePiece</em> processor that is used for every conversion (string, tokens and IDs).`,name:"sp_model"}]}}),Ye=new T({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.T5Tokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/t5/tokenization_t5.py#L223",parametersDescription:[{anchor:"transformers.T5Tokenizer.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.T5Tokenizer.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),et=new T({props:{name:"convert_tokens_to_string",anchor:"transformers.T5Tokenizer.convert_tokens_to_string",parameters:[{name:"tokens",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/t5/tokenization_t5.py#L284"}}),tt=new T({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.T5Tokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/t5/tokenization_t5.py#L201",parametersDescription:[{anchor:"transformers.T5Tokenizer.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.T5Tokenizer.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),st=new T({props:{name:"get_special_tokens_mask",anchor:"transformers.T5Tokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"},{name:"already_has_special_tokens",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/t5/tokenization_t5.py#L163",parametersDescription:[{anchor:"transformers.T5Tokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.T5Tokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"},{anchor:"transformers.T5Tokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],returnDescription:`
<p>A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),nt=new C({}),ot=new T({props:{name:"class transformers.T5TokenizerFast",anchor:"transformers.T5TokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"eos_token",val:" = '</s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"extra_ids",val:" = 100"},{name:"additional_special_tokens",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/t5/tokenization_t5_fast.py#L63",parametersDescription:[{anchor:"transformers.T5TokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.T5TokenizerFast.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.T5TokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.T5TokenizerFast.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.T5TokenizerFast.extra_ids",description:`<strong>extra_ids</strong> (<code>int</code>, <em>optional</em>, defaults to 100) &#x2014;
Add a number of extra ids added to the end of the vocabulary for use as sentinels. These tokens are
accessible as &#x201C;<extra<em>id{%d}&gt;&#x201D; where &#x201D;{%d}&#x201D; is a number between 0 and extra_ids-1. Extra tokens are
indexed from the end of the vocabulary up to beginning (&#x201C;<extra_id_0>&#x201D; is the last token in the vocabulary
like in T5 preprocessing see
<a href="https://github.com/google-research/text-to-text-transfer-transformer/blob/9fd7b14a769417be33bc6c850f9598764913c833/t5/data/preprocessors.py#L2117" rel="nofollow">here</a>).</extra_id_0></extra<em>`,name:"extra_ids"},{anchor:"transformers.T5TokenizerFast.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"}]}}),lt=new T({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.T5TokenizerFast.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/t5/tokenization_t5_fast.py#L166",parametersDescription:[{anchor:"transformers.T5TokenizerFast.build_inputs_with_special_tokens.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs to which the special tokens will be added.`,name:"token_ids_0"},{anchor:"transformers.T5TokenizerFast.build_inputs_with_special_tokens.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of <a href="../glossary#input-ids">input IDs</a> with the appropriate special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),pt=new T({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.T5TokenizerFast.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/t5/tokenization_t5_fast.py#L192",parametersDescription:[{anchor:"transformers.T5TokenizerFast.create_token_type_ids_from_sequences.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of IDs.`,name:"token_ids_0"},{anchor:"transformers.T5TokenizerFast.create_token_type_ids_from_sequences.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
Optional second list of IDs for sequence pairs.`,name:"token_ids_1"}],returnDescription:`
<p>List of zeros.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),mt=new C({}),ct=new T({props:{name:"class transformers.MT5Model",anchor:"transformers.MT5Model",parameters:[{name:"config",val:": T5Config"}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/mt5/modeling_mt5.py#L28"}}),ht=new Ce({props:{code:`from transformers import MT5Model, T5Tokenizer

model = MT5Model.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")
article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
summary = "Weiter Verhandlung in Syrien."
inputs = tokenizer(article, return_tensors="pt")
with tokenizer.as_target_tokenizer():
    labels = tokenizer(summary, return_tensors="pt")

outputs = model(input_ids=inputs["input_ids"], decoder_input_ids=labels["input_ids"])
hidden_states = outputs.last_hidden_state,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MT5Model, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = MT5Model.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>summary = <span class="hljs-string">&quot;Weiter Verhandlung in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    labels = tokenizer(summary, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=inputs[<span class="hljs-string">&quot;input_ids&quot;</span>], decoder_input_ids=labels[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>hidden_states = outputs.last_hidden_state`}}),ut=new C({}),gt=new T({props:{name:"class transformers.MT5ForConditionalGeneration",anchor:"transformers.MT5ForConditionalGeneration",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/mt5/modeling_mt5.py#L62"}}),kt=new Ce({props:{code:`from transformers import MT5ForConditionalGeneration, T5Tokenizer

model = MT5ForConditionalGeneration.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")
article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
summary = "Weiter Verhandlung in Syrien."
inputs = tokenizer(article, return_tensors="pt")
with tokenizer.as_target_tokenizer():
    labels = tokenizer(summary, return_tensors="pt")

outputs = model(**inputs, labels=labels["input_ids"])
loss = outputs.loss,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MT5ForConditionalGeneration, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = MT5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>summary = <span class="hljs-string">&quot;Weiter Verhandlung in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    labels = tokenizer(summary, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=labels[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss`}}),vt=new C({}),Tt=new T({props:{name:"class transformers.MT5EncoderModel",anchor:"transformers.MT5EncoderModel",parameters:[{name:"config",val:": T5Config"}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/mt5/modeling_mt5.py#L94"}}),wt=new Ce({props:{code:`from transformers import MT5EncoderModel, T5Tokenizer

model = MT5EncoderModel.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")
article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
input_ids = tokenizer(article, return_tensors="pt").input_ids
outputs = model(input_ids)
hidden_state = outputs.last_hidden_state,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MT5EncoderModel, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = MT5EncoderModel.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer(article, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids)
<span class="hljs-meta">&gt;&gt;&gt; </span>hidden_state = outputs.last_hidden_state`}}),yt=new C({}),bt=new T({props:{name:"class transformers.TFMT5Model",anchor:"transformers.TFMT5Model",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/mt5/modeling_tf_mt5.py#L28"}}),Mt=new Ce({props:{code:`from transformers import TFMT5Model, T5Tokenizer

model = TFMT5Model.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")
article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
summary = "Weiter Verhandlung in Syrien."
inputs = tokenizer(article, return_tensors="tf")
with tokenizer.as_target_tokenizer():
    labels = tokenizer(summary, return_tensors="tf")

outputs = model(input_ids=inputs["input_ids"], decoder_input_ids=labels["input_ids"])
hidden_states = outputs.last_hidden_state,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFMT5Model, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMT5Model.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>summary = <span class="hljs-string">&quot;Weiter Verhandlung in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    labels = tokenizer(summary, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=inputs[<span class="hljs-string">&quot;input_ids&quot;</span>], decoder_input_ids=labels[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>hidden_states = outputs.last_hidden_state`}}),Et=new C({}),xt=new T({props:{name:"class transformers.TFMT5ForConditionalGeneration",anchor:"transformers.TFMT5ForConditionalGeneration",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/mt5/modeling_tf_mt5.py#L53"}}),Ft=new Ce({props:{code:`from transformers import TFMT5ForConditionalGeneration, T5Tokenizer

model = TFMT5ForConditionalGeneration.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")
article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
summary = "Weiter Verhandlung in Syrien."
inputs = tokenizer(article, return_tensors="tf")
with tokenizer.as_target_tokenizer():
    labels = tokenizer(summary, return_tensors="tf")

outputs = model(**inputs, labels=labels["input_ids"])
loss = outputs.loss,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFMT5ForConditionalGeneration, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMT5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>summary = <span class="hljs-string">&quot;Weiter Verhandlung in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    labels = tokenizer(summary, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=labels[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss`}}),jt=new C({}),Ct=new T({props:{name:"class transformers.TFMT5EncoderModel",anchor:"transformers.TFMT5EncoderModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/mt5/modeling_tf_mt5.py#L79"}}),At=new Ce({props:{code:`from transformers import TFMT5EncoderModel, T5Tokenizer

model = TFMT5EncoderModel.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")
article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
input_ids = tokenizer(article, return_tensors="tf").input_ids
outputs = model(input_ids)
hidden_state = outputs.last_hidden_state,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFMT5EncoderModel, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFMT5EncoderModel.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = tokenizer(article, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>).input_ids
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids)
<span class="hljs-meta">&gt;&gt;&gt; </span>hidden_state = outputs.last_hidden_state`}}),St=new C({}),Lt=new T({props:{name:"class transformers.FlaxMT5Model",anchor:"transformers.FlaxMT5Model",parameters:[{name:"config",val:": T5Config"},{name:"input_shape",val:": typing.Tuple[int] = (1, 1)"},{name:"seed",val:": int = 0"},{name:"dtype",val:": dtype = <class 'jax._src.numpy.lax_numpy.float32'>"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/mt5/modeling_flax_mt5.py#L28"}}),Dt=new Ce({props:{code:`from transformers import FlaxMT5Model, T5Tokenizer

model = FlaxMT5Model.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")

article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
summary = "Weiter Verhandlung in Syrien."
inputs = tokenizer(article, return_tensors="np")

with tokenizer.as_target_tokenizer():
    decoder_input_ids = tokenizer(summary, return_tensors="np").input_ids

outputs = model(input_ids=inputs["input_ids"], decoder_input_ids=decoder_input_ids)
hidden_states = outputs.last_hidden_state,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxMT5Model, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxMT5Model.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>summary = <span class="hljs-string">&quot;Weiter Verhandlung in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;np&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    decoder_input_ids = tokenizer(summary, return_tensors=<span class="hljs-string">&quot;np&quot;</span>).input_ids

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids=inputs[<span class="hljs-string">&quot;input_ids&quot;</span>], decoder_input_ids=decoder_input_ids)
<span class="hljs-meta">&gt;&gt;&gt; </span>hidden_states = outputs.last_hidden_state`}}),It=new C({}),Gt=new T({props:{name:"class transformers.FlaxMT5ForConditionalGeneration",anchor:"transformers.FlaxMT5ForConditionalGeneration",parameters:[{name:"config",val:": T5Config"},{name:"input_shape",val:": typing.Tuple[int] = (1, 1)"},{name:"seed",val:": int = 0"},{name:"dtype",val:": dtype = <class 'jax._src.numpy.lax_numpy.float32'>"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15882/src/transformers/models/mt5/modeling_flax_mt5.py#L55"}}),Vt=new Ce({props:{code:`from transformers import FlaxMT5ForConditionalGeneration, T5Tokenizer

model = FlaxMT5ForConditionalGeneration.from_pretrained("google/mt5-small")
tokenizer = T5Tokenizer.from_pretrained("google/mt5-small")

article = "UN Offizier sagt, dass weiter verhandelt werden muss in Syrien."
summary = "Weiter Verhandlung in Syrien."
inputs = tokenizer(article, return_tensors="np")

with tokenizer.as_target_tokenizer():
    decoder_input_ids = tokenizer(summary, return_tensors="np").input_ids

outputs = model(**inputs, decoder_input_ids=decoder_input_ids)
logits = outputs.logits,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlaxMT5ForConditionalGeneration, T5Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxMT5ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = T5Tokenizer.from_pretrained(<span class="hljs-string">&quot;google/mt5-small&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>article = <span class="hljs-string">&quot;UN Offizier sagt, dass weiter verhandelt werden muss in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>summary = <span class="hljs-string">&quot;Weiter Verhandlung in Syrien.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(article, return_tensors=<span class="hljs-string">&quot;np&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>    decoder_input_ids = tokenizer(summary, return_tensors=<span class="hljs-string">&quot;np&quot;</span>).input_ids

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, decoder_input_ids=decoder_input_ids)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){N=r("meta"),Ut=d(),P=r("h1"),A=r("a"),Ts=r("span"),f(Pe.$$.fragment),Nn=d(),$s=r("span"),Dn=a("mT5"),$r=d(),U=r("h2"),re=r("a"),ws=r("span"),f(Ae.$$.fragment),In=d(),ys=r("span"),Gn=a("Overview"),wr=d(),ne=r("p"),On=a("The mT5 model was presented in "),Se=r("a"),Vn=a("mT5: A massively multilingual pre-trained text-to-text transformer"),Un=a(` by Linting Xue, Noah Constant, Adam Roberts, Mihir Kale, Rami Al-Rfou, Aditya
Siddhant, Aditya Barua, Colin Raffel.`),yr=d(),Wt=r("p"),Wn=a("The abstract from the paper is the following:"),br=d(),Bt=r("p"),bs=r("em"),Bn=a(`The recent \u201CText-to-Text Transfer Transformer\u201D (T5) leveraged a unified text-to-text format and scale to attain
state-of-the-art results on a wide variety of English-language NLP tasks. In this paper, we introduce mT5, a
multilingual variant of T5 that was pre-trained on a new Common Crawl-based dataset covering 101 languages. We detail
the design and modified training of mT5 and demonstrate its state-of-the-art performance on many multilingual
benchmarks. We also describe a simple technique to prevent \u201Caccidental translation\u201D in the zero-shot setting, where a
generative model chooses to (partially) translate its prediction into the wrong language. All of the code and model
checkpoints used in this work are publicly available.`),zr=d(),oe=r("p"),Hn=a("Note: mT5 was only pre-trained on "),Le=r("a"),Rn=a("mC4"),Xn=a(` excluding any supervised training.
Therefore, this model has to be fine-tuned before it is useable on a downstream task, unlike the original T5 model.
Since mT5 was pre-trained unsupervisedly, there\u2019s no real advantage to using a task prefix during single-task
fine-tuning. If you are doing multi-task fine-tuning, you should use a prefix.`),Mr=d(),Ht=r("p"),Kn=a("Google has released the following variants:"),Er=d(),w=r("ul"),zs=r("li"),Ms=r("p"),Ne=r("a"),Jn=a("google/mt5-small"),Qn=d(),Es=r("li"),xs=r("p"),De=r("a"),Yn=a("google/mt5-base"),Zn=d(),qs=r("li"),Fs=r("p"),Ie=r("a"),eo=a("google/mt5-large"),to=d(),js=r("li"),Cs=r("p"),Ge=r("a"),so=a("google/mt5-xl"),ro=d(),Ps=r("li"),Rt=r("p"),Oe=r("a"),no=a("google/mt5-xxl"),oo=a("."),xr=d(),D=r("p"),ao=a("This model was contributed by "),Ve=r("a"),io=a("patrickvonplaten"),lo=a(`. The original code can be
found `),Ue=r("a"),po=a("here"),mo=a("."),qr=d(),W=r("h2"),ae=r("a"),As=r("span"),f(We.$$.fragment),co=d(),Ss=r("span"),fo=a("MT5Config"),Fr=d(),S=r("div"),f(Be.$$.fragment),ho=d(),L=r("p"),uo=a("This is the configuration class to store the configuration of a "),Xt=r("a"),go=a("MT5Model"),_o=a(" or a "),Kt=r("a"),ko=a("TFMT5Model"),vo=a(`. It is used to
instantiate a mT5 model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the mT5
`),He=r("a"),To=a("google/mt5-small"),$o=a(" architecture."),wo=d(),B=r("p"),yo=a("Configuration objects inherit from "),Jt=r("a"),bo=a("PretrainedConfig"),zo=a(` and can be used to control the model outputs. Read the
documentation from `),Qt=r("a"),Mo=a("PretrainedConfig"),Eo=a(" for more information."),jr=d(),H=r("h2"),ie=r("a"),Ls=r("span"),f(Re.$$.fragment),xo=d(),Ns=r("span"),qo=a("MT5Tokenizer"),Cr=d(),v=r("div"),f(Xe.$$.fragment),Fo=d(),Ke=r("p"),jo=a("Construct a T5 tokenizer. Based on "),Je=r("a"),Co=a("SentencePiece"),Po=a("."),Ao=d(),Qe=r("p"),So=a("This tokenizer inherits from "),Yt=r("a"),Lo=a("PreTrainedTokenizer"),No=a(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),Do=d(),I=r("div"),f(Ye.$$.fragment),Io=d(),Ds=r("p"),Go=a(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A sequence has the following format:`),Oo=d(),Ze=r("ul"),Zt=r("li"),Vo=a("single sequence: "),Is=r("code"),Uo=a("X </s>"),Wo=d(),es=r("li"),Bo=a("pair of sequences: "),Gs=r("code"),Ho=a("A </s> B </s>"),Ro=d(),le=r("div"),f(et.$$.fragment),Xo=d(),Os=r("p"),Ko=a("Converts a sequence of tokens (string) in a single string."),Jo=d(),de=r("div"),f(tt.$$.fragment),Qo=d(),Vs=r("p"),Yo=a(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. T5 does not make
use of token type ids, therefore a list of zeros is returned.`),Zo=d(),pe=r("div"),f(st.$$.fragment),ea=d(),rt=r("p"),ta=a(`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Us=r("code"),sa=a("prepare_for_model"),ra=a(" method."),Pr=d(),me=r("p"),na=a("See "),ts=r("a"),oa=a("T5Tokenizer"),aa=a(" for all details."),Ar=d(),R=r("h2"),ce=r("a"),Ws=r("span"),f(nt.$$.fragment),ia=d(),Bs=r("span"),la=a("MT5TokenizerFast"),Sr=d(),$=r("div"),f(ot.$$.fragment),da=d(),X=r("p"),pa=a("Construct a \u201Cfast\u201D T5 tokenizer (backed by HuggingFace\u2019s "),Hs=r("em"),ma=a("tokenizers"),ca=a(` library). Based on
`),at=r("a"),fa=a("Unigram"),ha=a("."),ua=d(),it=r("p"),ga=a("This tokenizer inherits from "),ss=r("a"),_a=a("PreTrainedTokenizerFast"),ka=a(` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),va=d(),G=r("div"),f(lt.$$.fragment),Ta=d(),Rs=r("p"),$a=a(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A sequence has the following format:`),wa=d(),dt=r("ul"),rs=r("li"),ya=a("single sequence: "),Xs=r("code"),ba=a("X </s>"),za=d(),ns=r("li"),Ma=a("pair of sequences: "),Ks=r("code"),Ea=a("A </s> B </s>"),xa=d(),fe=r("div"),f(pt.$$.fragment),qa=d(),Js=r("p"),Fa=a(`Create a mask from the two sequences passed to be used in a sequence-pair classification task. T5 does not make
use of token type ids, therefore a list of zeros is returned.`),Lr=d(),he=r("p"),ja=a("See "),os=r("a"),Ca=a("T5TokenizerFast"),Pa=a(" for all details."),Nr=d(),K=r("h2"),ue=r("a"),Qs=r("span"),f(mt.$$.fragment),Aa=d(),Ys=r("span"),Sa=a("MT5Model"),Dr=d(),b=r("div"),f(ct.$$.fragment),La=d(),ft=r("p"),Na=a("This class overrides "),as=r("a"),Da=a("T5Model"),Ia=a(`. Please check the superclass for the appropriate documentation alongside usage
examples.`),Ga=d(),Zs=r("p"),Oa=a("Examples:"),Va=d(),f(ht.$$.fragment),Ir=d(),J=r("h2"),ge=r("a"),er=r("span"),f(ut.$$.fragment),Ua=d(),tr=r("span"),Wa=a("MT5ForConditionalGeneration"),Gr=d(),z=r("div"),f(gt.$$.fragment),Ba=d(),_t=r("p"),Ha=a("This class overrides "),is=r("a"),Ra=a("T5ForConditionalGeneration"),Xa=a(`. Please check the superclass for the appropriate documentation
alongside usage examples.`),Ka=d(),sr=r("p"),Ja=a("Examples:"),Qa=d(),f(kt.$$.fragment),Or=d(),Q=r("h2"),_e=r("a"),rr=r("span"),f(vt.$$.fragment),Ya=d(),nr=r("span"),Za=a("MT5EncoderModel"),Vr=d(),M=r("div"),f(Tt.$$.fragment),ei=d(),$t=r("p"),ti=a("This class overrides "),ls=r("a"),si=a("T5EncoderModel"),ri=a(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),ni=d(),or=r("p"),oi=a("Examples:"),ai=d(),f(wt.$$.fragment),Ur=d(),Y=r("h2"),ke=r("a"),ar=r("span"),f(yt.$$.fragment),ii=d(),ir=r("span"),li=a("TFMT5Model"),Wr=d(),E=r("div"),f(bt.$$.fragment),di=d(),zt=r("p"),pi=a("This class overrides "),ds=r("a"),mi=a("TFT5Model"),ci=a(`. Please check the superclass for the appropriate documentation alongside usage
examples.`),fi=d(),lr=r("p"),hi=a("Examples:"),ui=d(),f(Mt.$$.fragment),Br=d(),Z=r("h2"),ve=r("a"),dr=r("span"),f(Et.$$.fragment),gi=d(),pr=r("span"),_i=a("TFMT5ForConditionalGeneration"),Hr=d(),x=r("div"),f(xt.$$.fragment),ki=d(),qt=r("p"),vi=a("This class overrides "),ps=r("a"),Ti=a("TFT5ForConditionalGeneration"),$i=a(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),wi=d(),mr=r("p"),yi=a("Examples:"),bi=d(),f(Ft.$$.fragment),Rr=d(),ee=r("h2"),Te=r("a"),cr=r("span"),f(jt.$$.fragment),zi=d(),fr=r("span"),Mi=a("TFMT5EncoderModel"),Xr=d(),q=r("div"),f(Ct.$$.fragment),Ei=d(),Pt=r("p"),xi=a("This class overrides "),ms=r("a"),qi=a("TFT5EncoderModel"),Fi=a(`. Please check the superclass for the appropriate documentation alongside
usage examples.`),ji=d(),hr=r("p"),Ci=a("Examples:"),Pi=d(),f(At.$$.fragment),Kr=d(),te=r("h2"),$e=r("a"),ur=r("span"),f(St.$$.fragment),Ai=d(),gr=r("span"),Si=a("FlaxMT5Model"),Jr=d(),F=r("div"),f(Lt.$$.fragment),Li=d(),Nt=r("p"),Ni=a("This class overrides "),cs=r("a"),Di=a("FlaxT5Model"),Ii=a(`. Please check the superclass for the appropriate documentation alongside usage
examples.`),Gi=d(),_r=r("p"),Oi=a("Examples:"),Vi=d(),f(Dt.$$.fragment),Qr=d(),se=r("h2"),we=r("a"),kr=r("span"),f(It.$$.fragment),Ui=d(),vr=r("span"),Wi=a("FlaxMT5ForConditionalGeneration"),Yr=d(),j=r("div"),f(Gt.$$.fragment),Bi=d(),Ot=r("p"),Hi=a("This class overrides "),fs=r("a"),Ri=a("FlaxT5ForConditionalGeneration"),Xi=a(`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Ki=d(),Tr=r("p"),Ji=a("Examples:"),Qi=d(),f(Vt.$$.fragment),this.h()},l(t){const m=Qd('[data-svelte="svelte-1phssyn"]',document.head);N=n(m,"META",{name:!0,content:!0}),m.forEach(s),Ut=p(t),P=n(t,"H1",{class:!0});var en=o(P);A=n(en,"A",{id:!0,class:!0,href:!0});var rl=o(A);Ts=n(rl,"SPAN",{});var nl=o(Ts);h(Pe.$$.fragment,nl),nl.forEach(s),rl.forEach(s),Nn=p(en),$s=n(en,"SPAN",{});var ol=o($s);Dn=i(ol,"mT5"),ol.forEach(s),en.forEach(s),$r=p(t),U=n(t,"H2",{class:!0});var tn=o(U);re=n(tn,"A",{id:!0,class:!0,href:!0});var al=o(re);ws=n(al,"SPAN",{});var il=o(ws);h(Ae.$$.fragment,il),il.forEach(s),al.forEach(s),In=p(tn),ys=n(tn,"SPAN",{});var ll=o(ys);Gn=i(ll,"Overview"),ll.forEach(s),tn.forEach(s),wr=p(t),ne=n(t,"P",{});var sn=o(ne);On=i(sn,"The mT5 model was presented in "),Se=n(sn,"A",{href:!0,rel:!0});var dl=o(Se);Vn=i(dl,"mT5: A massively multilingual pre-trained text-to-text transformer"),dl.forEach(s),Un=i(sn,` by Linting Xue, Noah Constant, Adam Roberts, Mihir Kale, Rami Al-Rfou, Aditya
Siddhant, Aditya Barua, Colin Raffel.`),sn.forEach(s),yr=p(t),Wt=n(t,"P",{});var pl=o(Wt);Wn=i(pl,"The abstract from the paper is the following:"),pl.forEach(s),br=p(t),Bt=n(t,"P",{});var ml=o(Bt);bs=n(ml,"EM",{});var cl=o(bs);Bn=i(cl,`The recent \u201CText-to-Text Transfer Transformer\u201D (T5) leveraged a unified text-to-text format and scale to attain
state-of-the-art results on a wide variety of English-language NLP tasks. In this paper, we introduce mT5, a
multilingual variant of T5 that was pre-trained on a new Common Crawl-based dataset covering 101 languages. We detail
the design and modified training of mT5 and demonstrate its state-of-the-art performance on many multilingual
benchmarks. We also describe a simple technique to prevent \u201Caccidental translation\u201D in the zero-shot setting, where a
generative model chooses to (partially) translate its prediction into the wrong language. All of the code and model
checkpoints used in this work are publicly available.`),cl.forEach(s),ml.forEach(s),zr=p(t),oe=n(t,"P",{});var rn=o(oe);Hn=i(rn,"Note: mT5 was only pre-trained on "),Le=n(rn,"A",{href:!0,rel:!0});var fl=o(Le);Rn=i(fl,"mC4"),fl.forEach(s),Xn=i(rn,` excluding any supervised training.
Therefore, this model has to be fine-tuned before it is useable on a downstream task, unlike the original T5 model.
Since mT5 was pre-trained unsupervisedly, there\u2019s no real advantage to using a task prefix during single-task
fine-tuning. If you are doing multi-task fine-tuning, you should use a prefix.`),rn.forEach(s),Mr=p(t),Ht=n(t,"P",{});var hl=o(Ht);Kn=i(hl,"Google has released the following variants:"),hl.forEach(s),Er=p(t),w=n(t,"UL",{});var O=o(w);zs=n(O,"LI",{});var ul=o(zs);Ms=n(ul,"P",{});var gl=o(Ms);Ne=n(gl,"A",{href:!0,rel:!0});var _l=o(Ne);Jn=i(_l,"google/mt5-small"),_l.forEach(s),gl.forEach(s),ul.forEach(s),Qn=p(O),Es=n(O,"LI",{});var kl=o(Es);xs=n(kl,"P",{});var vl=o(xs);De=n(vl,"A",{href:!0,rel:!0});var Tl=o(De);Yn=i(Tl,"google/mt5-base"),Tl.forEach(s),vl.forEach(s),kl.forEach(s),Zn=p(O),qs=n(O,"LI",{});var $l=o(qs);Fs=n($l,"P",{});var wl=o(Fs);Ie=n(wl,"A",{href:!0,rel:!0});var yl=o(Ie);eo=i(yl,"google/mt5-large"),yl.forEach(s),wl.forEach(s),$l.forEach(s),to=p(O),js=n(O,"LI",{});var bl=o(js);Cs=n(bl,"P",{});var zl=o(Cs);Ge=n(zl,"A",{href:!0,rel:!0});var Ml=o(Ge);so=i(Ml,"google/mt5-xl"),Ml.forEach(s),zl.forEach(s),bl.forEach(s),ro=p(O),Ps=n(O,"LI",{});var El=o(Ps);Rt=n(El,"P",{});var Yi=o(Rt);Oe=n(Yi,"A",{href:!0,rel:!0});var xl=o(Oe);no=i(xl,"google/mt5-xxl"),xl.forEach(s),oo=i(Yi,"."),Yi.forEach(s),El.forEach(s),O.forEach(s),xr=p(t),D=n(t,"P",{});var hs=o(D);ao=i(hs,"This model was contributed by "),Ve=n(hs,"A",{href:!0,rel:!0});var ql=o(Ve);io=i(ql,"patrickvonplaten"),ql.forEach(s),lo=i(hs,`. The original code can be
found `),Ue=n(hs,"A",{href:!0,rel:!0});var Fl=o(Ue);po=i(Fl,"here"),Fl.forEach(s),mo=i(hs,"."),hs.forEach(s),qr=p(t),W=n(t,"H2",{class:!0});var nn=o(W);ae=n(nn,"A",{id:!0,class:!0,href:!0});var jl=o(ae);As=n(jl,"SPAN",{});var Cl=o(As);h(We.$$.fragment,Cl),Cl.forEach(s),jl.forEach(s),co=p(nn),Ss=n(nn,"SPAN",{});var Pl=o(Ss);fo=i(Pl,"MT5Config"),Pl.forEach(s),nn.forEach(s),Fr=p(t),S=n(t,"DIV",{class:!0});var us=o(S);h(Be.$$.fragment,us),ho=p(us),L=n(us,"P",{});var ye=o(L);uo=i(ye,"This is the configuration class to store the configuration of a "),Xt=n(ye,"A",{href:!0});var Al=o(Xt);go=i(Al,"MT5Model"),Al.forEach(s),_o=i(ye," or a "),Kt=n(ye,"A",{href:!0});var Sl=o(Kt);ko=i(Sl,"TFMT5Model"),Sl.forEach(s),vo=i(ye,`. It is used to
instantiate a mT5 model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the mT5
`),He=n(ye,"A",{href:!0,rel:!0});var Ll=o(He);To=i(Ll,"google/mt5-small"),Ll.forEach(s),$o=i(ye," architecture."),ye.forEach(s),wo=p(us),B=n(us,"P",{});var gs=o(B);yo=i(gs,"Configuration objects inherit from "),Jt=n(gs,"A",{href:!0});var Nl=o(Jt);bo=i(Nl,"PretrainedConfig"),Nl.forEach(s),zo=i(gs,` and can be used to control the model outputs. Read the
documentation from `),Qt=n(gs,"A",{href:!0});var Dl=o(Qt);Mo=i(Dl,"PretrainedConfig"),Dl.forEach(s),Eo=i(gs," for more information."),gs.forEach(s),us.forEach(s),jr=p(t),H=n(t,"H2",{class:!0});var on=o(H);ie=n(on,"A",{id:!0,class:!0,href:!0});var Il=o(ie);Ls=n(Il,"SPAN",{});var Gl=o(Ls);h(Re.$$.fragment,Gl),Gl.forEach(s),Il.forEach(s),xo=p(on),Ns=n(on,"SPAN",{});var Ol=o(Ns);qo=i(Ol,"MT5Tokenizer"),Ol.forEach(s),on.forEach(s),Cr=p(t),v=n(t,"DIV",{class:!0});var y=o(v);h(Xe.$$.fragment,y),Fo=p(y),Ke=n(y,"P",{});var an=o(Ke);jo=i(an,"Construct a T5 tokenizer. Based on "),Je=n(an,"A",{href:!0,rel:!0});var Vl=o(Je);Co=i(Vl,"SentencePiece"),Vl.forEach(s),Po=i(an,"."),an.forEach(s),Ao=p(y),Qe=n(y,"P",{});var ln=o(Qe);So=i(ln,"This tokenizer inherits from "),Yt=n(ln,"A",{href:!0});var Ul=o(Yt);Lo=i(Ul,"PreTrainedTokenizer"),Ul.forEach(s),No=i(ln,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),ln.forEach(s),Do=p(y),I=n(y,"DIV",{class:!0});var _s=o(I);h(Ye.$$.fragment,_s),Io=p(_s),Ds=n(_s,"P",{});var Wl=o(Ds);Go=i(Wl,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A sequence has the following format:`),Wl.forEach(s),Oo=p(_s),Ze=n(_s,"UL",{});var dn=o(Ze);Zt=n(dn,"LI",{});var Zi=o(Zt);Vo=i(Zi,"single sequence: "),Is=n(Zi,"CODE",{});var Bl=o(Is);Uo=i(Bl,"X </s>"),Bl.forEach(s),Zi.forEach(s),Wo=p(dn),es=n(dn,"LI",{});var el=o(es);Bo=i(el,"pair of sequences: "),Gs=n(el,"CODE",{});var Hl=o(Gs);Ho=i(Hl,"A </s> B </s>"),Hl.forEach(s),el.forEach(s),dn.forEach(s),_s.forEach(s),Ro=p(y),le=n(y,"DIV",{class:!0});var pn=o(le);h(et.$$.fragment,pn),Xo=p(pn),Os=n(pn,"P",{});var Rl=o(Os);Ko=i(Rl,"Converts a sequence of tokens (string) in a single string."),Rl.forEach(s),pn.forEach(s),Jo=p(y),de=n(y,"DIV",{class:!0});var mn=o(de);h(tt.$$.fragment,mn),Qo=p(mn),Vs=n(mn,"P",{});var Xl=o(Vs);Yo=i(Xl,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. T5 does not make
use of token type ids, therefore a list of zeros is returned.`),Xl.forEach(s),mn.forEach(s),Zo=p(y),pe=n(y,"DIV",{class:!0});var cn=o(pe);h(st.$$.fragment,cn),ea=p(cn),rt=n(cn,"P",{});var fn=o(rt);ta=i(fn,`Retrieve sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Us=n(fn,"CODE",{});var Kl=o(Us);sa=i(Kl,"prepare_for_model"),Kl.forEach(s),ra=i(fn," method."),fn.forEach(s),cn.forEach(s),y.forEach(s),Pr=p(t),me=n(t,"P",{});var hn=o(me);na=i(hn,"See "),ts=n(hn,"A",{href:!0});var Jl=o(ts);oa=i(Jl,"T5Tokenizer"),Jl.forEach(s),aa=i(hn," for all details."),hn.forEach(s),Ar=p(t),R=n(t,"H2",{class:!0});var un=o(R);ce=n(un,"A",{id:!0,class:!0,href:!0});var Ql=o(ce);Ws=n(Ql,"SPAN",{});var Yl=o(Ws);h(nt.$$.fragment,Yl),Yl.forEach(s),Ql.forEach(s),ia=p(un),Bs=n(un,"SPAN",{});var Zl=o(Bs);la=i(Zl,"MT5TokenizerFast"),Zl.forEach(s),un.forEach(s),Sr=p(t),$=n(t,"DIV",{class:!0});var V=o($);h(ot.$$.fragment,V),da=p(V),X=n(V,"P",{});var ks=o(X);pa=i(ks,"Construct a \u201Cfast\u201D T5 tokenizer (backed by HuggingFace\u2019s "),Hs=n(ks,"EM",{});var ed=o(Hs);ma=i(ed,"tokenizers"),ed.forEach(s),ca=i(ks,` library). Based on
`),at=n(ks,"A",{href:!0,rel:!0});var td=o(at);fa=i(td,"Unigram"),td.forEach(s),ha=i(ks,"."),ks.forEach(s),ua=p(V),it=n(V,"P",{});var gn=o(it);ga=i(gn,"This tokenizer inherits from "),ss=n(gn,"A",{href:!0});var sd=o(ss);_a=i(sd,"PreTrainedTokenizerFast"),sd.forEach(s),ka=i(gn,` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),gn.forEach(s),va=p(V),G=n(V,"DIV",{class:!0});var vs=o(G);h(lt.$$.fragment,vs),Ta=p(vs),Rs=n(vs,"P",{});var rd=o(Rs);$a=i(rd,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens. A sequence has the following format:`),rd.forEach(s),wa=p(vs),dt=n(vs,"UL",{});var _n=o(dt);rs=n(_n,"LI",{});var tl=o(rs);ya=i(tl,"single sequence: "),Xs=n(tl,"CODE",{});var nd=o(Xs);ba=i(nd,"X </s>"),nd.forEach(s),tl.forEach(s),za=p(_n),ns=n(_n,"LI",{});var sl=o(ns);Ma=i(sl,"pair of sequences: "),Ks=n(sl,"CODE",{});var od=o(Ks);Ea=i(od,"A </s> B </s>"),od.forEach(s),sl.forEach(s),_n.forEach(s),vs.forEach(s),xa=p(V),fe=n(V,"DIV",{class:!0});var kn=o(fe);h(pt.$$.fragment,kn),qa=p(kn),Js=n(kn,"P",{});var ad=o(Js);Fa=i(ad,`Create a mask from the two sequences passed to be used in a sequence-pair classification task. T5 does not make
use of token type ids, therefore a list of zeros is returned.`),ad.forEach(s),kn.forEach(s),V.forEach(s),Lr=p(t),he=n(t,"P",{});var vn=o(he);ja=i(vn,"See "),os=n(vn,"A",{href:!0});var id=o(os);Ca=i(id,"T5TokenizerFast"),id.forEach(s),Pa=i(vn," for all details."),vn.forEach(s),Nr=p(t),K=n(t,"H2",{class:!0});var Tn=o(K);ue=n(Tn,"A",{id:!0,class:!0,href:!0});var ld=o(ue);Qs=n(ld,"SPAN",{});var dd=o(Qs);h(mt.$$.fragment,dd),dd.forEach(s),ld.forEach(s),Aa=p(Tn),Ys=n(Tn,"SPAN",{});var pd=o(Ys);Sa=i(pd,"MT5Model"),pd.forEach(s),Tn.forEach(s),Dr=p(t),b=n(t,"DIV",{class:!0});var be=o(b);h(ct.$$.fragment,be),La=p(be),ft=n(be,"P",{});var $n=o(ft);Na=i($n,"This class overrides "),as=n($n,"A",{href:!0});var md=o(as);Da=i(md,"T5Model"),md.forEach(s),Ia=i($n,`. Please check the superclass for the appropriate documentation alongside usage
examples.`),$n.forEach(s),Ga=p(be),Zs=n(be,"P",{});var cd=o(Zs);Oa=i(cd,"Examples:"),cd.forEach(s),Va=p(be),h(ht.$$.fragment,be),be.forEach(s),Ir=p(t),J=n(t,"H2",{class:!0});var wn=o(J);ge=n(wn,"A",{id:!0,class:!0,href:!0});var fd=o(ge);er=n(fd,"SPAN",{});var hd=o(er);h(ut.$$.fragment,hd),hd.forEach(s),fd.forEach(s),Ua=p(wn),tr=n(wn,"SPAN",{});var ud=o(tr);Wa=i(ud,"MT5ForConditionalGeneration"),ud.forEach(s),wn.forEach(s),Gr=p(t),z=n(t,"DIV",{class:!0});var ze=o(z);h(gt.$$.fragment,ze),Ba=p(ze),_t=n(ze,"P",{});var yn=o(_t);Ha=i(yn,"This class overrides "),is=n(yn,"A",{href:!0});var gd=o(is);Ra=i(gd,"T5ForConditionalGeneration"),gd.forEach(s),Xa=i(yn,`. Please check the superclass for the appropriate documentation
alongside usage examples.`),yn.forEach(s),Ka=p(ze),sr=n(ze,"P",{});var _d=o(sr);Ja=i(_d,"Examples:"),_d.forEach(s),Qa=p(ze),h(kt.$$.fragment,ze),ze.forEach(s),Or=p(t),Q=n(t,"H2",{class:!0});var bn=o(Q);_e=n(bn,"A",{id:!0,class:!0,href:!0});var kd=o(_e);rr=n(kd,"SPAN",{});var vd=o(rr);h(vt.$$.fragment,vd),vd.forEach(s),kd.forEach(s),Ya=p(bn),nr=n(bn,"SPAN",{});var Td=o(nr);Za=i(Td,"MT5EncoderModel"),Td.forEach(s),bn.forEach(s),Vr=p(t),M=n(t,"DIV",{class:!0});var Me=o(M);h(Tt.$$.fragment,Me),ei=p(Me),$t=n(Me,"P",{});var zn=o($t);ti=i(zn,"This class overrides "),ls=n(zn,"A",{href:!0});var $d=o(ls);si=i($d,"T5EncoderModel"),$d.forEach(s),ri=i(zn,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),zn.forEach(s),ni=p(Me),or=n(Me,"P",{});var wd=o(or);oi=i(wd,"Examples:"),wd.forEach(s),ai=p(Me),h(wt.$$.fragment,Me),Me.forEach(s),Ur=p(t),Y=n(t,"H2",{class:!0});var Mn=o(Y);ke=n(Mn,"A",{id:!0,class:!0,href:!0});var yd=o(ke);ar=n(yd,"SPAN",{});var bd=o(ar);h(yt.$$.fragment,bd),bd.forEach(s),yd.forEach(s),ii=p(Mn),ir=n(Mn,"SPAN",{});var zd=o(ir);li=i(zd,"TFMT5Model"),zd.forEach(s),Mn.forEach(s),Wr=p(t),E=n(t,"DIV",{class:!0});var Ee=o(E);h(bt.$$.fragment,Ee),di=p(Ee),zt=n(Ee,"P",{});var En=o(zt);pi=i(En,"This class overrides "),ds=n(En,"A",{href:!0});var Md=o(ds);mi=i(Md,"TFT5Model"),Md.forEach(s),ci=i(En,`. Please check the superclass for the appropriate documentation alongside usage
examples.`),En.forEach(s),fi=p(Ee),lr=n(Ee,"P",{});var Ed=o(lr);hi=i(Ed,"Examples:"),Ed.forEach(s),ui=p(Ee),h(Mt.$$.fragment,Ee),Ee.forEach(s),Br=p(t),Z=n(t,"H2",{class:!0});var xn=o(Z);ve=n(xn,"A",{id:!0,class:!0,href:!0});var xd=o(ve);dr=n(xd,"SPAN",{});var qd=o(dr);h(Et.$$.fragment,qd),qd.forEach(s),xd.forEach(s),gi=p(xn),pr=n(xn,"SPAN",{});var Fd=o(pr);_i=i(Fd,"TFMT5ForConditionalGeneration"),Fd.forEach(s),xn.forEach(s),Hr=p(t),x=n(t,"DIV",{class:!0});var xe=o(x);h(xt.$$.fragment,xe),ki=p(xe),qt=n(xe,"P",{});var qn=o(qt);vi=i(qn,"This class overrides "),ps=n(qn,"A",{href:!0});var jd=o(ps);Ti=i(jd,"TFT5ForConditionalGeneration"),jd.forEach(s),$i=i(qn,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),qn.forEach(s),wi=p(xe),mr=n(xe,"P",{});var Cd=o(mr);yi=i(Cd,"Examples:"),Cd.forEach(s),bi=p(xe),h(Ft.$$.fragment,xe),xe.forEach(s),Rr=p(t),ee=n(t,"H2",{class:!0});var Fn=o(ee);Te=n(Fn,"A",{id:!0,class:!0,href:!0});var Pd=o(Te);cr=n(Pd,"SPAN",{});var Ad=o(cr);h(jt.$$.fragment,Ad),Ad.forEach(s),Pd.forEach(s),zi=p(Fn),fr=n(Fn,"SPAN",{});var Sd=o(fr);Mi=i(Sd,"TFMT5EncoderModel"),Sd.forEach(s),Fn.forEach(s),Xr=p(t),q=n(t,"DIV",{class:!0});var qe=o(q);h(Ct.$$.fragment,qe),Ei=p(qe),Pt=n(qe,"P",{});var jn=o(Pt);xi=i(jn,"This class overrides "),ms=n(jn,"A",{href:!0});var Ld=o(ms);qi=i(Ld,"TFT5EncoderModel"),Ld.forEach(s),Fi=i(jn,`. Please check the superclass for the appropriate documentation alongside
usage examples.`),jn.forEach(s),ji=p(qe),hr=n(qe,"P",{});var Nd=o(hr);Ci=i(Nd,"Examples:"),Nd.forEach(s),Pi=p(qe),h(At.$$.fragment,qe),qe.forEach(s),Kr=p(t),te=n(t,"H2",{class:!0});var Cn=o(te);$e=n(Cn,"A",{id:!0,class:!0,href:!0});var Dd=o($e);ur=n(Dd,"SPAN",{});var Id=o(ur);h(St.$$.fragment,Id),Id.forEach(s),Dd.forEach(s),Ai=p(Cn),gr=n(Cn,"SPAN",{});var Gd=o(gr);Si=i(Gd,"FlaxMT5Model"),Gd.forEach(s),Cn.forEach(s),Jr=p(t),F=n(t,"DIV",{class:!0});var Fe=o(F);h(Lt.$$.fragment,Fe),Li=p(Fe),Nt=n(Fe,"P",{});var Pn=o(Nt);Ni=i(Pn,"This class overrides "),cs=n(Pn,"A",{href:!0});var Od=o(cs);Di=i(Od,"FlaxT5Model"),Od.forEach(s),Ii=i(Pn,`. Please check the superclass for the appropriate documentation alongside usage
examples.`),Pn.forEach(s),Gi=p(Fe),_r=n(Fe,"P",{});var Vd=o(_r);Oi=i(Vd,"Examples:"),Vd.forEach(s),Vi=p(Fe),h(Dt.$$.fragment,Fe),Fe.forEach(s),Qr=p(t),se=n(t,"H2",{class:!0});var An=o(se);we=n(An,"A",{id:!0,class:!0,href:!0});var Ud=o(we);kr=n(Ud,"SPAN",{});var Wd=o(kr);h(It.$$.fragment,Wd),Wd.forEach(s),Ud.forEach(s),Ui=p(An),vr=n(An,"SPAN",{});var Bd=o(vr);Wi=i(Bd,"FlaxMT5ForConditionalGeneration"),Bd.forEach(s),An.forEach(s),Yr=p(t),j=n(t,"DIV",{class:!0});var je=o(j);h(Gt.$$.fragment,je),Bi=p(je),Ot=n(je,"P",{});var Sn=o(Ot);Hi=i(Sn,"This class overrides "),fs=n(Sn,"A",{href:!0});var Hd=o(fs);Ri=i(Hd,"FlaxT5ForConditionalGeneration"),Hd.forEach(s),Xi=i(Sn,`. Please check the superclass for the appropriate
documentation alongside usage examples.`),Sn.forEach(s),Ki=p(je),Tr=n(je,"P",{});var Rd=o(Tr);Ji=i(Rd,"Examples:"),Rd.forEach(s),Qi=p(je),h(Vt.$$.fragment,je),je.forEach(s),this.h()},h(){l(N,"name","hf:doc:metadata"),l(N,"content",JSON.stringify(ep)),l(A,"id","mt5"),l(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(A,"href","#mt5"),l(P,"class","relative group"),l(re,"id","overview"),l(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(re,"href","#overview"),l(U,"class","relative group"),l(Se,"href","https://arxiv.org/abs/2010.11934"),l(Se,"rel","nofollow"),l(Le,"href","https://huggingface.co/datasets/mc4"),l(Le,"rel","nofollow"),l(Ne,"href","https://huggingface.co/google/mt5-small"),l(Ne,"rel","nofollow"),l(De,"href","https://huggingface.co/google/mt5-base"),l(De,"rel","nofollow"),l(Ie,"href","https://huggingface.co/google/mt5-large"),l(Ie,"rel","nofollow"),l(Ge,"href","https://huggingface.co/google/mt5-xl"),l(Ge,"rel","nofollow"),l(Oe,"href","https://huggingface.co/google/mt5-xxl"),l(Oe,"rel","nofollow"),l(Ve,"href","https://huggingface.co/patrickvonplaten"),l(Ve,"rel","nofollow"),l(Ue,"href","https://github.com/google-research/multilingual-t5"),l(Ue,"rel","nofollow"),l(ae,"id","transformers.MT5Config"),l(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ae,"href","#transformers.MT5Config"),l(W,"class","relative group"),l(Xt,"href","/docs/transformers/pr_15882/en/model_doc/mt5#transformers.MT5Model"),l(Kt,"href","/docs/transformers/pr_15882/en/model_doc/mt5#transformers.TFMT5Model"),l(He,"href","https://huggingface.co/google/mt5-small"),l(He,"rel","nofollow"),l(Jt,"href","/docs/transformers/pr_15882/en/main_classes/configuration#transformers.PretrainedConfig"),l(Qt,"href","/docs/transformers/pr_15882/en/main_classes/configuration#transformers.PretrainedConfig"),l(S,"class","docstring"),l(ie,"id","transformers.T5Tokenizer"),l(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ie,"href","#transformers.T5Tokenizer"),l(H,"class","relative group"),l(Je,"href","https://github.com/google/sentencepiece"),l(Je,"rel","nofollow"),l(Yt,"href","/docs/transformers/pr_15882/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),l(I,"class","docstring"),l(le,"class","docstring"),l(de,"class","docstring"),l(pe,"class","docstring"),l(v,"class","docstring"),l(ts,"href","/docs/transformers/pr_15882/en/model_doc/mt5#transformers.T5Tokenizer"),l(ce,"id","transformers.T5TokenizerFast"),l(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ce,"href","#transformers.T5TokenizerFast"),l(R,"class","relative group"),l(at,"href","https://huggingface.co/docs/tokenizers/python/latest/components.html?highlight=unigram#models"),l(at,"rel","nofollow"),l(ss,"href","/docs/transformers/pr_15882/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),l(G,"class","docstring"),l(fe,"class","docstring"),l($,"class","docstring"),l(os,"href","/docs/transformers/pr_15882/en/model_doc/mt5#transformers.T5TokenizerFast"),l(ue,"id","transformers.MT5Model"),l(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ue,"href","#transformers.MT5Model"),l(K,"class","relative group"),l(as,"href","/docs/transformers/pr_15882/en/model_doc/t5#transformers.T5Model"),l(b,"class","docstring"),l(ge,"id","transformers.MT5ForConditionalGeneration"),l(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ge,"href","#transformers.MT5ForConditionalGeneration"),l(J,"class","relative group"),l(is,"href","/docs/transformers/pr_15882/en/model_doc/t5#transformers.T5ForConditionalGeneration"),l(z,"class","docstring"),l(_e,"id","transformers.MT5EncoderModel"),l(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(_e,"href","#transformers.MT5EncoderModel"),l(Q,"class","relative group"),l(ls,"href","/docs/transformers/pr_15882/en/model_doc/t5#transformers.T5EncoderModel"),l(M,"class","docstring"),l(ke,"id","transformers.TFMT5Model"),l(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ke,"href","#transformers.TFMT5Model"),l(Y,"class","relative group"),l(ds,"href","/docs/transformers/pr_15882/en/model_doc/t5#transformers.TFT5Model"),l(E,"class","docstring"),l(ve,"id","transformers.TFMT5ForConditionalGeneration"),l(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ve,"href","#transformers.TFMT5ForConditionalGeneration"),l(Z,"class","relative group"),l(ps,"href","/docs/transformers/pr_15882/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),l(x,"class","docstring"),l(Te,"id","transformers.TFMT5EncoderModel"),l(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Te,"href","#transformers.TFMT5EncoderModel"),l(ee,"class","relative group"),l(ms,"href","/docs/transformers/pr_15882/en/model_doc/t5#transformers.TFT5EncoderModel"),l(q,"class","docstring"),l($e,"id","transformers.FlaxMT5Model"),l($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l($e,"href","#transformers.FlaxMT5Model"),l(te,"class","relative group"),l(cs,"href","/docs/transformers/pr_15882/en/model_doc/t5#transformers.FlaxT5Model"),l(F,"class","docstring"),l(we,"id","transformers.FlaxMT5ForConditionalGeneration"),l(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(we,"href","#transformers.FlaxMT5ForConditionalGeneration"),l(se,"class","relative group"),l(fs,"href","/docs/transformers/pr_15882/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),l(j,"class","docstring")},m(t,m){e(document.head,N),c(t,Ut,m),c(t,P,m),e(P,A),e(A,Ts),u(Pe,Ts,null),e(P,Nn),e(P,$s),e($s,Dn),c(t,$r,m),c(t,U,m),e(U,re),e(re,ws),u(Ae,ws,null),e(U,In),e(U,ys),e(ys,Gn),c(t,wr,m),c(t,ne,m),e(ne,On),e(ne,Se),e(Se,Vn),e(ne,Un),c(t,yr,m),c(t,Wt,m),e(Wt,Wn),c(t,br,m),c(t,Bt,m),e(Bt,bs),e(bs,Bn),c(t,zr,m),c(t,oe,m),e(oe,Hn),e(oe,Le),e(Le,Rn),e(oe,Xn),c(t,Mr,m),c(t,Ht,m),e(Ht,Kn),c(t,Er,m),c(t,w,m),e(w,zs),e(zs,Ms),e(Ms,Ne),e(Ne,Jn),e(w,Qn),e(w,Es),e(Es,xs),e(xs,De),e(De,Yn),e(w,Zn),e(w,qs),e(qs,Fs),e(Fs,Ie),e(Ie,eo),e(w,to),e(w,js),e(js,Cs),e(Cs,Ge),e(Ge,so),e(w,ro),e(w,Ps),e(Ps,Rt),e(Rt,Oe),e(Oe,no),e(Rt,oo),c(t,xr,m),c(t,D,m),e(D,ao),e(D,Ve),e(Ve,io),e(D,lo),e(D,Ue),e(Ue,po),e(D,mo),c(t,qr,m),c(t,W,m),e(W,ae),e(ae,As),u(We,As,null),e(W,co),e(W,Ss),e(Ss,fo),c(t,Fr,m),c(t,S,m),u(Be,S,null),e(S,ho),e(S,L),e(L,uo),e(L,Xt),e(Xt,go),e(L,_o),e(L,Kt),e(Kt,ko),e(L,vo),e(L,He),e(He,To),e(L,$o),e(S,wo),e(S,B),e(B,yo),e(B,Jt),e(Jt,bo),e(B,zo),e(B,Qt),e(Qt,Mo),e(B,Eo),c(t,jr,m),c(t,H,m),e(H,ie),e(ie,Ls),u(Re,Ls,null),e(H,xo),e(H,Ns),e(Ns,qo),c(t,Cr,m),c(t,v,m),u(Xe,v,null),e(v,Fo),e(v,Ke),e(Ke,jo),e(Ke,Je),e(Je,Co),e(Ke,Po),e(v,Ao),e(v,Qe),e(Qe,So),e(Qe,Yt),e(Yt,Lo),e(Qe,No),e(v,Do),e(v,I),u(Ye,I,null),e(I,Io),e(I,Ds),e(Ds,Go),e(I,Oo),e(I,Ze),e(Ze,Zt),e(Zt,Vo),e(Zt,Is),e(Is,Uo),e(Ze,Wo),e(Ze,es),e(es,Bo),e(es,Gs),e(Gs,Ho),e(v,Ro),e(v,le),u(et,le,null),e(le,Xo),e(le,Os),e(Os,Ko),e(v,Jo),e(v,de),u(tt,de,null),e(de,Qo),e(de,Vs),e(Vs,Yo),e(v,Zo),e(v,pe),u(st,pe,null),e(pe,ea),e(pe,rt),e(rt,ta),e(rt,Us),e(Us,sa),e(rt,ra),c(t,Pr,m),c(t,me,m),e(me,na),e(me,ts),e(ts,oa),e(me,aa),c(t,Ar,m),c(t,R,m),e(R,ce),e(ce,Ws),u(nt,Ws,null),e(R,ia),e(R,Bs),e(Bs,la),c(t,Sr,m),c(t,$,m),u(ot,$,null),e($,da),e($,X),e(X,pa),e(X,Hs),e(Hs,ma),e(X,ca),e(X,at),e(at,fa),e(X,ha),e($,ua),e($,it),e(it,ga),e(it,ss),e(ss,_a),e(it,ka),e($,va),e($,G),u(lt,G,null),e(G,Ta),e(G,Rs),e(Rs,$a),e(G,wa),e(G,dt),e(dt,rs),e(rs,ya),e(rs,Xs),e(Xs,ba),e(dt,za),e(dt,ns),e(ns,Ma),e(ns,Ks),e(Ks,Ea),e($,xa),e($,fe),u(pt,fe,null),e(fe,qa),e(fe,Js),e(Js,Fa),c(t,Lr,m),c(t,he,m),e(he,ja),e(he,os),e(os,Ca),e(he,Pa),c(t,Nr,m),c(t,K,m),e(K,ue),e(ue,Qs),u(mt,Qs,null),e(K,Aa),e(K,Ys),e(Ys,Sa),c(t,Dr,m),c(t,b,m),u(ct,b,null),e(b,La),e(b,ft),e(ft,Na),e(ft,as),e(as,Da),e(ft,Ia),e(b,Ga),e(b,Zs),e(Zs,Oa),e(b,Va),u(ht,b,null),c(t,Ir,m),c(t,J,m),e(J,ge),e(ge,er),u(ut,er,null),e(J,Ua),e(J,tr),e(tr,Wa),c(t,Gr,m),c(t,z,m),u(gt,z,null),e(z,Ba),e(z,_t),e(_t,Ha),e(_t,is),e(is,Ra),e(_t,Xa),e(z,Ka),e(z,sr),e(sr,Ja),e(z,Qa),u(kt,z,null),c(t,Or,m),c(t,Q,m),e(Q,_e),e(_e,rr),u(vt,rr,null),e(Q,Ya),e(Q,nr),e(nr,Za),c(t,Vr,m),c(t,M,m),u(Tt,M,null),e(M,ei),e(M,$t),e($t,ti),e($t,ls),e(ls,si),e($t,ri),e(M,ni),e(M,or),e(or,oi),e(M,ai),u(wt,M,null),c(t,Ur,m),c(t,Y,m),e(Y,ke),e(ke,ar),u(yt,ar,null),e(Y,ii),e(Y,ir),e(ir,li),c(t,Wr,m),c(t,E,m),u(bt,E,null),e(E,di),e(E,zt),e(zt,pi),e(zt,ds),e(ds,mi),e(zt,ci),e(E,fi),e(E,lr),e(lr,hi),e(E,ui),u(Mt,E,null),c(t,Br,m),c(t,Z,m),e(Z,ve),e(ve,dr),u(Et,dr,null),e(Z,gi),e(Z,pr),e(pr,_i),c(t,Hr,m),c(t,x,m),u(xt,x,null),e(x,ki),e(x,qt),e(qt,vi),e(qt,ps),e(ps,Ti),e(qt,$i),e(x,wi),e(x,mr),e(mr,yi),e(x,bi),u(Ft,x,null),c(t,Rr,m),c(t,ee,m),e(ee,Te),e(Te,cr),u(jt,cr,null),e(ee,zi),e(ee,fr),e(fr,Mi),c(t,Xr,m),c(t,q,m),u(Ct,q,null),e(q,Ei),e(q,Pt),e(Pt,xi),e(Pt,ms),e(ms,qi),e(Pt,Fi),e(q,ji),e(q,hr),e(hr,Ci),e(q,Pi),u(At,q,null),c(t,Kr,m),c(t,te,m),e(te,$e),e($e,ur),u(St,ur,null),e(te,Ai),e(te,gr),e(gr,Si),c(t,Jr,m),c(t,F,m),u(Lt,F,null),e(F,Li),e(F,Nt),e(Nt,Ni),e(Nt,cs),e(cs,Di),e(Nt,Ii),e(F,Gi),e(F,_r),e(_r,Oi),e(F,Vi),u(Dt,F,null),c(t,Qr,m),c(t,se,m),e(se,we),e(we,kr),u(It,kr,null),e(se,Ui),e(se,vr),e(vr,Wi),c(t,Yr,m),c(t,j,m),u(Gt,j,null),e(j,Bi),e(j,Ot),e(Ot,Hi),e(Ot,fs),e(fs,Ri),e(Ot,Xi),e(j,Ki),e(j,Tr),e(Tr,Ji),e(j,Qi),u(Vt,j,null),Zr=!0},p:Yd,i(t){Zr||(g(Pe.$$.fragment,t),g(Ae.$$.fragment,t),g(We.$$.fragment,t),g(Be.$$.fragment,t),g(Re.$$.fragment,t),g(Xe.$$.fragment,t),g(Ye.$$.fragment,t),g(et.$$.fragment,t),g(tt.$$.fragment,t),g(st.$$.fragment,t),g(nt.$$.fragment,t),g(ot.$$.fragment,t),g(lt.$$.fragment,t),g(pt.$$.fragment,t),g(mt.$$.fragment,t),g(ct.$$.fragment,t),g(ht.$$.fragment,t),g(ut.$$.fragment,t),g(gt.$$.fragment,t),g(kt.$$.fragment,t),g(vt.$$.fragment,t),g(Tt.$$.fragment,t),g(wt.$$.fragment,t),g(yt.$$.fragment,t),g(bt.$$.fragment,t),g(Mt.$$.fragment,t),g(Et.$$.fragment,t),g(xt.$$.fragment,t),g(Ft.$$.fragment,t),g(jt.$$.fragment,t),g(Ct.$$.fragment,t),g(At.$$.fragment,t),g(St.$$.fragment,t),g(Lt.$$.fragment,t),g(Dt.$$.fragment,t),g(It.$$.fragment,t),g(Gt.$$.fragment,t),g(Vt.$$.fragment,t),Zr=!0)},o(t){_(Pe.$$.fragment,t),_(Ae.$$.fragment,t),_(We.$$.fragment,t),_(Be.$$.fragment,t),_(Re.$$.fragment,t),_(Xe.$$.fragment,t),_(Ye.$$.fragment,t),_(et.$$.fragment,t),_(tt.$$.fragment,t),_(st.$$.fragment,t),_(nt.$$.fragment,t),_(ot.$$.fragment,t),_(lt.$$.fragment,t),_(pt.$$.fragment,t),_(mt.$$.fragment,t),_(ct.$$.fragment,t),_(ht.$$.fragment,t),_(ut.$$.fragment,t),_(gt.$$.fragment,t),_(kt.$$.fragment,t),_(vt.$$.fragment,t),_(Tt.$$.fragment,t),_(wt.$$.fragment,t),_(yt.$$.fragment,t),_(bt.$$.fragment,t),_(Mt.$$.fragment,t),_(Et.$$.fragment,t),_(xt.$$.fragment,t),_(Ft.$$.fragment,t),_(jt.$$.fragment,t),_(Ct.$$.fragment,t),_(At.$$.fragment,t),_(St.$$.fragment,t),_(Lt.$$.fragment,t),_(Dt.$$.fragment,t),_(It.$$.fragment,t),_(Gt.$$.fragment,t),_(Vt.$$.fragment,t),Zr=!1},d(t){s(N),t&&s(Ut),t&&s(P),k(Pe),t&&s($r),t&&s(U),k(Ae),t&&s(wr),t&&s(ne),t&&s(yr),t&&s(Wt),t&&s(br),t&&s(Bt),t&&s(zr),t&&s(oe),t&&s(Mr),t&&s(Ht),t&&s(Er),t&&s(w),t&&s(xr),t&&s(D),t&&s(qr),t&&s(W),k(We),t&&s(Fr),t&&s(S),k(Be),t&&s(jr),t&&s(H),k(Re),t&&s(Cr),t&&s(v),k(Xe),k(Ye),k(et),k(tt),k(st),t&&s(Pr),t&&s(me),t&&s(Ar),t&&s(R),k(nt),t&&s(Sr),t&&s($),k(ot),k(lt),k(pt),t&&s(Lr),t&&s(he),t&&s(Nr),t&&s(K),k(mt),t&&s(Dr),t&&s(b),k(ct),k(ht),t&&s(Ir),t&&s(J),k(ut),t&&s(Gr),t&&s(z),k(gt),k(kt),t&&s(Or),t&&s(Q),k(vt),t&&s(Vr),t&&s(M),k(Tt),k(wt),t&&s(Ur),t&&s(Y),k(yt),t&&s(Wr),t&&s(E),k(bt),k(Mt),t&&s(Br),t&&s(Z),k(Et),t&&s(Hr),t&&s(x),k(xt),k(Ft),t&&s(Rr),t&&s(ee),k(jt),t&&s(Xr),t&&s(q),k(Ct),k(At),t&&s(Kr),t&&s(te),k(St),t&&s(Jr),t&&s(F),k(Lt),k(Dt),t&&s(Qr),t&&s(se),k(It),t&&s(Yr),t&&s(j),k(Gt),k(Vt)}}}const ep={local:"mt5",sections:[{local:"overview",title:"Overview"},{local:"transformers.MT5Config",title:"MT5Config"},{local:"transformers.T5Tokenizer",title:"MT5Tokenizer"},{local:"transformers.T5TokenizerFast",title:"MT5TokenizerFast"},{local:"transformers.MT5Model",title:"MT5Model"},{local:"transformers.MT5ForConditionalGeneration",title:"MT5ForConditionalGeneration"},{local:"transformers.MT5EncoderModel",title:"MT5EncoderModel"},{local:"transformers.TFMT5Model",title:"TFMT5Model"},{local:"transformers.TFMT5ForConditionalGeneration",title:"TFMT5ForConditionalGeneration"},{local:"transformers.TFMT5EncoderModel",title:"TFMT5EncoderModel"},{local:"transformers.FlaxMT5Model",title:"FlaxMT5Model"},{local:"transformers.FlaxMT5ForConditionalGeneration",title:"FlaxMT5ForConditionalGeneration"}],title:"mT5"};function tp(Ln,N,Ut){let{fw:P}=N;return Ln.$$set=A=>{"fw"in A&&Ut(0,P=A.fw)},[P]}class ip extends Xd{constructor(N){super();Kd(this,N,tp,Zd,Jd,{fw:0})}}export{ip as default,ep as metadata};
