import{S as y3t,i as w3t,s as A3t,e as a,k as l,w as f,t as o,M as L3t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as j0r}from"../../chunks/Tip-fffd6df1.js";import{D as E}from"../../chunks/Docstring-7b52c3d4.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as V}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function B3t(Li){let J,Be,ie,me,no,ce,ue,Go,Bi,yf,sa,xi,ki,MM,wf,ye,io,Ri,In,EM,Dn,jn,yM,Si,Nn,wM,Pi,Af,$a;return{c(){J=a("p"),Be=o("If your "),ie=a("code"),me=o("NewModelConfig"),no=o(" is a subclass of "),ce=a("code"),ue=o("PretrainedConfig"),Go=o(`, make sure its
`),Bi=a("code"),yf=o("model_type"),sa=o(" attribute is set to the same key you use when registering the config (here "),xi=a("code"),ki=o('"new-model"'),MM=o(")."),wf=l(),ye=a("p"),io=o("Likewise, if your "),Ri=a("code"),In=o("NewModel"),EM=o(" is a subclass of "),Dn=a("a"),jn=o("PreTrainedModel"),yM=o(`, make sure its
`),Si=a("code"),Nn=o("config_class"),wM=o(` attribute is set to the same class you use when registering the model (here
`),Pi=a("code"),Af=o("NewModelConfig"),$a=o(")."),this.h()},l(co){J=n(co,"P",{});var ge=s(J);Be=r(ge,"If your "),ie=n(ge,"CODE",{});var d8=s(ie);me=r(d8,"NewModelConfig"),d8.forEach(t),no=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var $i=s(ce);ue=r($i,"PretrainedConfig"),$i.forEach(t),Go=r(ge,`, make sure its
`),Bi=n(ge,"CODE",{});var c8=s(Bi);yf=r(c8,"model_type"),c8.forEach(t),sa=r(ge," attribute is set to the same key you use when registering the config (here "),xi=n(ge,"CODE",{});var f8=s(xi);ki=r(f8,'"new-model"'),f8.forEach(t),MM=r(ge,")."),ge.forEach(t),wf=i(co),ye=n(co,"P",{});var Oo=s(ye);io=r(Oo,"Likewise, if your "),Ri=n(Oo,"CODE",{});var Ia=s(Ri);In=r(Ia,"NewModel"),Ia.forEach(t),EM=r(Oo," is a subclass of "),Dn=n(Oo,"A",{href:!0});var m8=s(Dn);jn=r(m8,"PreTrainedModel"),m8.forEach(t),yM=r(Oo,`, make sure its
`),Si=n(Oo,"CODE",{});var Lf=s(Si);Nn=r(Lf,"config_class"),Lf.forEach(t),wM=r(Oo,` attribute is set to the same class you use when registering the model (here
`),Pi=n(Oo,"CODE",{});var g8=s(Pi);Af=r(g8,"NewModelConfig"),g8.forEach(t),$a=r(Oo,")."),Oo.forEach(t),this.h()},h(){d(Dn,"href","/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel")},m(co,ge){b(co,J,ge),e(J,Be),e(J,ie),e(ie,me),e(J,no),e(J,ce),e(ce,ue),e(J,Go),e(J,Bi),e(Bi,yf),e(J,sa),e(J,xi),e(xi,ki),e(J,MM),b(co,wf,ge),b(co,ye,ge),e(ye,io),e(ye,Ri),e(Ri,In),e(ye,EM),e(ye,Dn),e(Dn,jn),e(ye,yM),e(ye,Si),e(Si,Nn),e(ye,wM),e(ye,Pi),e(Pi,Af),e(ye,$a)},d(co){co&&t(J),co&&t(wf),co&&t(ye)}}}function x3t(Li){let J,Be,ie,me,no;return{c(){J=a("p"),Be=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Be=r(ue,"Passing "),ie=n(ue,"CODE",{});var Go=s(ie);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Be),e(J,ie),e(ie,me),e(J,no)},d(ce){ce&&t(J)}}}function k3t(Li){let J,Be,ie,me,no;return{c(){J=a("p"),Be=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),no=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Be=r(ue,"Passing "),ie=n(ue,"CODE",{});var Go=s(ie);me=r(Go,"use_auth_token=True"),Go.forEach(t),no=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Be),e(J,ie),e(ie,me),e(J,no)},d(ce){ce&&t(J)}}}function R3t(Li){let J,Be,ie,me,no,ce,ue,Go,Bi,yf,sa,xi,ki,MM,wf,ye,io,Ri,In,EM,Dn,jn,yM,Si,Nn,wM,Pi,Af,$a,co,ge,d8,$i,c8,f8,Oo,Ia,m8,Lf,g8,qRe,x7e,Ii,Bf,EW,AM,GRe,yW,ORe,k7e,qn,XRe,wW,VRe,zRe,AW,WRe,QRe,R7e,LM,S7e,h8,HRe,P7e,xf,$7e,Di,kf,LW,BM,URe,BW,JRe,I7e,Xo,xM,YRe,kM,KRe,p8,ZRe,eSe,oSe,RM,rSe,xW,tSe,aSe,nSe,fo,SM,sSe,kW,lSe,iSe,ji,dSe,RW,cSe,fSe,SW,mSe,gSe,hSe,v,Rf,PW,pSe,_Se,_8,uSe,bSe,vSe,Sf,$W,TSe,FSe,u8,CSe,MSe,ESe,Pf,IW,ySe,wSe,b8,ASe,LSe,BSe,$f,DW,xSe,kSe,v8,RSe,SSe,PSe,If,jW,$Se,ISe,T8,DSe,jSe,NSe,Df,NW,qSe,GSe,F8,OSe,XSe,VSe,jf,qW,zSe,WSe,C8,QSe,HSe,USe,Nf,GW,JSe,YSe,M8,KSe,ZSe,ePe,qf,OW,oPe,rPe,E8,tPe,aPe,nPe,Gf,XW,sPe,lPe,y8,iPe,dPe,cPe,Of,VW,fPe,mPe,w8,gPe,hPe,pPe,Xf,zW,_Pe,uPe,A8,bPe,vPe,TPe,Vf,WW,FPe,CPe,L8,MPe,EPe,yPe,zf,QW,wPe,APe,B8,LPe,BPe,xPe,Wf,HW,kPe,RPe,x8,SPe,PPe,$Pe,Qf,UW,IPe,DPe,k8,jPe,NPe,qPe,Hf,JW,GPe,OPe,R8,XPe,VPe,zPe,Uf,YW,WPe,QPe,S8,HPe,UPe,JPe,Jf,KW,YPe,KPe,P8,ZPe,e$e,o$e,Yf,ZW,r$e,t$e,$8,a$e,n$e,s$e,Kf,eQ,l$e,i$e,I8,d$e,c$e,f$e,Zf,oQ,m$e,g$e,D8,h$e,p$e,_$e,em,rQ,u$e,b$e,j8,v$e,T$e,F$e,om,tQ,C$e,M$e,N8,E$e,y$e,w$e,rm,aQ,A$e,L$e,q8,B$e,x$e,k$e,tm,nQ,R$e,S$e,G8,P$e,$$e,I$e,am,sQ,D$e,j$e,O8,N$e,q$e,G$e,nm,lQ,O$e,X$e,X8,V$e,z$e,W$e,sm,iQ,Q$e,H$e,V8,U$e,J$e,Y$e,lm,dQ,K$e,Z$e,z8,eIe,oIe,rIe,im,cQ,tIe,aIe,W8,nIe,sIe,lIe,dm,fQ,iIe,dIe,Q8,cIe,fIe,mIe,cm,mQ,gIe,hIe,H8,pIe,_Ie,uIe,fm,gQ,bIe,vIe,U8,TIe,FIe,CIe,mm,hQ,MIe,EIe,J8,yIe,wIe,AIe,gm,pQ,LIe,BIe,Y8,xIe,kIe,RIe,hm,_Q,SIe,PIe,K8,$Ie,IIe,DIe,pm,uQ,jIe,NIe,Z8,qIe,GIe,OIe,_m,bQ,XIe,VIe,e7,zIe,WIe,QIe,um,vQ,HIe,UIe,o7,JIe,YIe,KIe,bm,TQ,ZIe,eDe,r7,oDe,rDe,tDe,vm,FQ,aDe,nDe,t7,sDe,lDe,iDe,Tm,CQ,dDe,cDe,a7,fDe,mDe,gDe,Fm,MQ,hDe,pDe,n7,_De,uDe,bDe,Cm,EQ,vDe,TDe,s7,FDe,CDe,MDe,Mm,yQ,EDe,yDe,l7,wDe,ADe,LDe,Em,wQ,BDe,xDe,i7,kDe,RDe,SDe,ym,AQ,PDe,$De,d7,IDe,DDe,jDe,wm,LQ,NDe,qDe,c7,GDe,ODe,XDe,Am,BQ,VDe,zDe,f7,WDe,QDe,HDe,Lm,xQ,UDe,JDe,m7,YDe,KDe,ZDe,Bm,kQ,eje,oje,g7,rje,tje,aje,xm,RQ,nje,sje,h7,lje,ije,dje,km,SQ,cje,fje,p7,mje,gje,hje,Rm,PQ,pje,_je,_7,uje,bje,vje,Sm,$Q,Tje,Fje,u7,Cje,Mje,Eje,Pm,IQ,yje,wje,b7,Aje,Lje,Bje,$m,DQ,xje,kje,v7,Rje,Sje,Pje,Im,jQ,$je,Ije,T7,Dje,jje,Nje,Dm,NQ,qje,Gje,F7,Oje,Xje,Vje,jm,qQ,zje,Wje,C7,Qje,Hje,Uje,Nm,GQ,Jje,Yje,M7,Kje,Zje,eNe,qm,OQ,oNe,rNe,E7,tNe,aNe,nNe,Gm,XQ,sNe,lNe,y7,iNe,dNe,cNe,Om,VQ,fNe,mNe,w7,gNe,hNe,pNe,Xm,zQ,_Ne,uNe,A7,bNe,vNe,TNe,Vm,WQ,FNe,CNe,L7,MNe,ENe,yNe,zm,QQ,wNe,ANe,B7,LNe,BNe,xNe,Wm,HQ,kNe,RNe,x7,SNe,PNe,$Ne,Qm,UQ,INe,DNe,k7,jNe,NNe,qNe,Hm,JQ,GNe,ONe,R7,XNe,VNe,zNe,Um,YQ,WNe,QNe,S7,HNe,UNe,JNe,Jm,KQ,YNe,KNe,P7,ZNe,eqe,oqe,Ym,ZQ,rqe,tqe,$7,aqe,nqe,sqe,Km,eH,lqe,iqe,I7,dqe,cqe,fqe,Zm,oH,mqe,gqe,D7,hqe,pqe,_qe,eg,rH,uqe,bqe,j7,vqe,Tqe,Fqe,og,tH,Cqe,Mqe,N7,Eqe,yqe,wqe,rg,aH,Aqe,Lqe,q7,Bqe,xqe,kqe,tg,nH,Rqe,Sqe,G7,Pqe,$qe,Iqe,ag,sH,Dqe,jqe,O7,Nqe,qqe,Gqe,ng,lH,Oqe,Xqe,X7,Vqe,zqe,Wqe,sg,iH,Qqe,Hqe,V7,Uqe,Jqe,Yqe,lg,dH,Kqe,Zqe,z7,eGe,oGe,rGe,ig,cH,tGe,aGe,W7,nGe,sGe,lGe,dg,fH,iGe,dGe,Q7,cGe,fGe,mGe,cg,mH,gGe,hGe,H7,pGe,_Ge,uGe,fg,gH,bGe,vGe,U7,TGe,FGe,CGe,mg,hH,MGe,EGe,J7,yGe,wGe,AGe,gg,pH,LGe,BGe,Y7,xGe,kGe,RGe,hg,_H,SGe,PGe,K7,$Ge,IGe,DGe,pg,uH,jGe,NGe,Z7,qGe,GGe,OGe,_g,bH,XGe,VGe,eB,zGe,WGe,QGe,ug,vH,HGe,UGe,oB,JGe,YGe,KGe,TH,ZGe,eOe,PM,oOe,bg,$M,rOe,FH,tOe,D7e,Ni,vg,CH,IM,aOe,MH,nOe,j7e,Vo,DM,sOe,jM,lOe,rB,iOe,dOe,cOe,NM,fOe,EH,mOe,gOe,hOe,mo,qM,pOe,yH,_Oe,uOe,Da,bOe,wH,vOe,TOe,AH,FOe,COe,LH,MOe,EOe,yOe,M,Gn,BH,wOe,AOe,tB,LOe,BOe,aB,xOe,kOe,ROe,On,xH,SOe,POe,nB,$Oe,IOe,sB,DOe,jOe,NOe,Xn,kH,qOe,GOe,lB,OOe,XOe,iB,VOe,zOe,WOe,Tg,RH,QOe,HOe,dB,UOe,JOe,YOe,Vn,SH,KOe,ZOe,cB,eXe,oXe,fB,rXe,tXe,aXe,Fg,PH,nXe,sXe,mB,lXe,iXe,dXe,Cg,$H,cXe,fXe,gB,mXe,gXe,hXe,Mg,IH,pXe,_Xe,hB,uXe,bXe,vXe,zn,DH,TXe,FXe,pB,CXe,MXe,_B,EXe,yXe,wXe,Wn,jH,AXe,LXe,uB,BXe,xXe,bB,kXe,RXe,SXe,Qn,NH,PXe,$Xe,vB,IXe,DXe,TB,jXe,NXe,qXe,Eg,qH,GXe,OXe,FB,XXe,VXe,zXe,yg,GH,WXe,QXe,CB,HXe,UXe,JXe,Hn,OH,YXe,KXe,MB,ZXe,eVe,EB,oVe,rVe,tVe,wg,XH,aVe,nVe,yB,sVe,lVe,iVe,Un,VH,dVe,cVe,wB,fVe,mVe,AB,gVe,hVe,pVe,Jn,zH,_Ve,uVe,LB,bVe,vVe,BB,TVe,FVe,CVe,Yn,WH,MVe,EVe,xB,yVe,wVe,QH,AVe,LVe,BVe,Ag,HH,xVe,kVe,kB,RVe,SVe,PVe,Kn,UH,$Ve,IVe,RB,DVe,jVe,SB,NVe,qVe,GVe,Lg,JH,OVe,XVe,PB,VVe,zVe,WVe,Zn,YH,QVe,HVe,$B,UVe,JVe,IB,YVe,KVe,ZVe,es,KH,eze,oze,DB,rze,tze,jB,aze,nze,sze,os,ZH,lze,ize,NB,dze,cze,qB,fze,mze,gze,Bg,eU,hze,pze,GB,_ze,uze,bze,rs,oU,vze,Tze,OB,Fze,Cze,XB,Mze,Eze,yze,xg,rU,wze,Aze,VB,Lze,Bze,xze,ts,tU,kze,Rze,zB,Sze,Pze,WB,$ze,Ize,Dze,as,aU,jze,Nze,QB,qze,Gze,HB,Oze,Xze,Vze,ns,nU,zze,Wze,UB,Qze,Hze,JB,Uze,Jze,Yze,ss,sU,Kze,Zze,YB,eWe,oWe,KB,rWe,tWe,aWe,kg,lU,nWe,sWe,ZB,lWe,iWe,dWe,ls,iU,cWe,fWe,ex,mWe,gWe,ox,hWe,pWe,_We,is,dU,uWe,bWe,rx,vWe,TWe,tx,FWe,CWe,MWe,ds,cU,EWe,yWe,ax,wWe,AWe,nx,LWe,BWe,xWe,cs,fU,kWe,RWe,sx,SWe,PWe,lx,$We,IWe,DWe,fs,mU,jWe,NWe,ix,qWe,GWe,dx,OWe,XWe,VWe,ms,gU,zWe,WWe,cx,QWe,HWe,fx,UWe,JWe,YWe,Rg,hU,KWe,ZWe,mx,eQe,oQe,rQe,gs,pU,tQe,aQe,gx,nQe,sQe,hx,lQe,iQe,dQe,Sg,_U,cQe,fQe,px,mQe,gQe,hQe,Pg,uU,pQe,_Qe,_x,uQe,bQe,vQe,hs,bU,TQe,FQe,ux,CQe,MQe,bx,EQe,yQe,wQe,ps,vU,AQe,LQe,vx,BQe,xQe,Tx,kQe,RQe,SQe,$g,TU,PQe,$Qe,Fx,IQe,DQe,jQe,_s,FU,NQe,qQe,Cx,GQe,OQe,Mx,XQe,VQe,zQe,us,CU,WQe,QQe,Ex,HQe,UQe,yx,JQe,YQe,KQe,bs,MU,ZQe,eHe,wx,oHe,rHe,Ax,tHe,aHe,nHe,vs,EU,sHe,lHe,Lx,iHe,dHe,Bx,cHe,fHe,mHe,Ts,yU,gHe,hHe,xx,pHe,_He,kx,uHe,bHe,vHe,Ig,wU,THe,FHe,Rx,CHe,MHe,EHe,Dg,AU,yHe,wHe,Sx,AHe,LHe,BHe,jg,LU,xHe,kHe,Px,RHe,SHe,PHe,Ng,BU,$He,IHe,$x,DHe,jHe,NHe,Fs,xU,qHe,GHe,Ix,OHe,XHe,Dx,VHe,zHe,WHe,qg,kU,QHe,HHe,jx,UHe,JHe,YHe,Cs,RU,KHe,ZHe,Nx,eUe,oUe,qx,rUe,tUe,aUe,Ms,SU,nUe,sUe,Gx,lUe,iUe,Ox,dUe,cUe,fUe,Es,PU,mUe,gUe,Xx,hUe,pUe,Vx,_Ue,uUe,bUe,ys,$U,vUe,TUe,zx,FUe,CUe,Wx,MUe,EUe,yUe,ws,IU,wUe,AUe,Qx,LUe,BUe,Hx,xUe,kUe,RUe,As,DU,SUe,PUe,Ux,$Ue,IUe,Jx,DUe,jUe,NUe,Gg,jU,qUe,GUe,Yx,OUe,XUe,VUe,Og,NU,zUe,WUe,Kx,QUe,HUe,UUe,Ls,qU,JUe,YUe,Zx,KUe,ZUe,ek,eJe,oJe,rJe,Bs,GU,tJe,aJe,ok,nJe,sJe,rk,lJe,iJe,dJe,xs,OU,cJe,fJe,tk,mJe,gJe,ak,hJe,pJe,_Je,Xg,XU,uJe,bJe,nk,vJe,TJe,FJe,Vg,VU,CJe,MJe,sk,EJe,yJe,wJe,zg,zU,AJe,LJe,lk,BJe,xJe,kJe,Wg,WU,RJe,SJe,ik,PJe,$Je,IJe,ks,QU,DJe,jJe,dk,NJe,qJe,ck,GJe,OJe,XJe,Qg,HU,VJe,zJe,fk,WJe,QJe,HJe,Hg,UU,UJe,JJe,mk,YJe,KJe,ZJe,Rs,JU,eYe,oYe,gk,rYe,tYe,hk,aYe,nYe,sYe,Ss,YU,lYe,iYe,pk,dYe,cYe,_k,fYe,mYe,gYe,KU,hYe,pYe,GM,_Ye,Ug,OM,uYe,ZU,bYe,N7e,qi,Jg,eJ,XM,vYe,oJ,TYe,q7e,zo,VM,FYe,zM,CYe,uk,MYe,EYe,yYe,WM,wYe,rJ,AYe,LYe,BYe,xe,QM,xYe,tJ,kYe,RYe,ja,SYe,aJ,PYe,$Ye,nJ,IYe,DYe,sJ,jYe,NYe,qYe,se,Yg,lJ,GYe,OYe,bk,XYe,VYe,zYe,Kg,iJ,WYe,QYe,vk,HYe,UYe,JYe,Zg,dJ,YYe,KYe,Tk,ZYe,eKe,oKe,eh,cJ,rKe,tKe,Fk,aKe,nKe,sKe,oh,fJ,lKe,iKe,Ck,dKe,cKe,fKe,rh,mJ,mKe,gKe,Mk,hKe,pKe,_Ke,th,gJ,uKe,bKe,Ek,vKe,TKe,FKe,ah,hJ,CKe,MKe,yk,EKe,yKe,wKe,nh,pJ,AKe,LKe,wk,BKe,xKe,kKe,sh,_J,RKe,SKe,Ak,PKe,$Ke,IKe,lh,uJ,DKe,jKe,Lk,NKe,qKe,GKe,ih,bJ,OKe,XKe,Bk,VKe,zKe,WKe,dh,vJ,QKe,HKe,xk,UKe,JKe,YKe,ch,TJ,KKe,ZKe,kk,eZe,oZe,rZe,fh,FJ,tZe,aZe,Rk,nZe,sZe,lZe,mh,iZe,CJ,dZe,cZe,HM,fZe,gh,UM,mZe,MJ,gZe,G7e,Gi,hh,EJ,JM,hZe,yJ,pZe,O7e,Wo,YM,_Ze,KM,uZe,Sk,bZe,vZe,TZe,ZM,FZe,wJ,CZe,MZe,EZe,ke,eE,yZe,AJ,wZe,AZe,Oi,LZe,LJ,BZe,xZe,BJ,kZe,RZe,SZe,we,ph,xJ,PZe,$Ze,Pk,IZe,DZe,jZe,_h,kJ,NZe,qZe,$k,GZe,OZe,XZe,uh,RJ,VZe,zZe,Ik,WZe,QZe,HZe,bh,SJ,UZe,JZe,Dk,YZe,KZe,ZZe,vh,PJ,eeo,oeo,jk,reo,teo,aeo,Th,$J,neo,seo,Nk,leo,ieo,deo,Fh,IJ,ceo,feo,qk,meo,geo,heo,Ch,DJ,peo,_eo,Gk,ueo,beo,veo,Mh,Teo,jJ,Feo,Ceo,oE,Meo,Eh,rE,Eeo,NJ,yeo,X7e,Xi,yh,qJ,tE,weo,GJ,Aeo,V7e,Qo,aE,Leo,Vi,Beo,OJ,xeo,keo,XJ,Reo,Seo,Peo,nE,$eo,VJ,Ieo,Deo,jeo,qr,sE,Neo,zJ,qeo,Geo,zi,Oeo,WJ,Xeo,Veo,QJ,zeo,Weo,Qeo,HJ,Heo,Ueo,lE,Jeo,Re,iE,Yeo,UJ,Keo,Zeo,Na,eoo,JJ,ooo,roo,YJ,too,aoo,KJ,noo,soo,loo,F,wh,ZJ,ioo,doo,Ok,coo,foo,moo,Ah,eY,goo,hoo,Xk,poo,_oo,uoo,Lh,oY,boo,voo,Vk,Too,Foo,Coo,Bh,rY,Moo,Eoo,zk,yoo,woo,Aoo,xh,tY,Loo,Boo,Wk,xoo,koo,Roo,kh,aY,Soo,Poo,Qk,$oo,Ioo,Doo,Rh,nY,joo,Noo,Hk,qoo,Goo,Ooo,Sh,sY,Xoo,Voo,Uk,zoo,Woo,Qoo,Ph,lY,Hoo,Uoo,Jk,Joo,Yoo,Koo,$h,iY,Zoo,ero,Yk,oro,rro,tro,Ih,dY,aro,nro,Kk,sro,lro,iro,Dh,cY,dro,cro,Zk,fro,mro,gro,jh,fY,hro,pro,eR,_ro,uro,bro,Nh,mY,vro,Tro,oR,Fro,Cro,Mro,qh,gY,Ero,yro,rR,wro,Aro,Lro,Gh,hY,Bro,xro,tR,kro,Rro,Sro,Oh,pY,Pro,$ro,aR,Iro,Dro,jro,Xh,_Y,Nro,qro,nR,Gro,Oro,Xro,Vh,uY,Vro,zro,sR,Wro,Qro,Hro,zh,bY,Uro,Jro,lR,Yro,Kro,Zro,Wh,vY,eto,oto,iR,rto,tto,ato,Qh,TY,nto,sto,dR,lto,ito,dto,Hh,FY,cto,fto,cR,mto,gto,hto,Uh,CY,pto,_to,fR,uto,bto,vto,Jh,MY,Tto,Fto,mR,Cto,Mto,Eto,Yh,EY,yto,wto,gR,Ato,Lto,Bto,Kh,yY,xto,kto,hR,Rto,Sto,Pto,Ps,wY,$to,Ito,pR,Dto,jto,_R,Nto,qto,Gto,Zh,AY,Oto,Xto,uR,Vto,zto,Wto,ep,LY,Qto,Hto,bR,Uto,Jto,Yto,op,BY,Kto,Zto,vR,eao,oao,rao,rp,xY,tao,aao,TR,nao,sao,lao,tp,kY,iao,dao,FR,cao,fao,mao,ap,RY,gao,hao,CR,pao,_ao,uao,np,SY,bao,vao,MR,Tao,Fao,Cao,sp,PY,Mao,Eao,ER,yao,wao,Aao,lp,$Y,Lao,Bao,yR,xao,kao,Rao,ip,IY,Sao,Pao,wR,$ao,Iao,Dao,dp,DY,jao,Nao,AR,qao,Gao,Oao,cp,jY,Xao,Vao,LR,zao,Wao,Qao,fp,NY,Hao,Uao,BR,Jao,Yao,Kao,mp,qY,Zao,eno,xR,ono,rno,tno,gp,GY,ano,nno,kR,sno,lno,ino,hp,OY,dno,cno,RR,fno,mno,gno,pp,XY,hno,pno,SR,_no,uno,bno,_p,VY,vno,Tno,PR,Fno,Cno,Mno,up,zY,Eno,yno,$R,wno,Ano,Lno,bp,WY,Bno,xno,IR,kno,Rno,Sno,vp,QY,Pno,$no,DR,Ino,Dno,jno,Tp,HY,Nno,qno,jR,Gno,Ono,Xno,Fp,UY,Vno,zno,NR,Wno,Qno,Hno,Cp,JY,Uno,Jno,qR,Yno,Kno,Zno,Mp,YY,eso,oso,GR,rso,tso,aso,Ep,KY,nso,sso,OR,lso,iso,dso,yp,ZY,cso,fso,XR,mso,gso,hso,wp,eK,pso,_so,VR,uso,bso,vso,Ap,oK,Tso,Fso,zR,Cso,Mso,Eso,Lp,rK,yso,wso,WR,Aso,Lso,Bso,Bp,tK,xso,kso,QR,Rso,Sso,Pso,xp,aK,$so,Iso,HR,Dso,jso,Nso,kp,nK,qso,Gso,UR,Oso,Xso,Vso,Rp,sK,zso,Wso,JR,Qso,Hso,Uso,Sp,lK,Jso,Yso,YR,Kso,Zso,elo,Pp,iK,olo,rlo,KR,tlo,alo,nlo,$p,dK,slo,llo,ZR,ilo,dlo,clo,Ip,cK,flo,mlo,eS,glo,hlo,plo,Dp,fK,_lo,ulo,oS,blo,vlo,Tlo,jp,mK,Flo,Clo,rS,Mlo,Elo,ylo,Np,gK,wlo,Alo,tS,Llo,Blo,xlo,qp,hK,klo,Rlo,aS,Slo,Plo,$lo,Gp,pK,Ilo,Dlo,nS,jlo,Nlo,qlo,Op,_K,Glo,Olo,sS,Xlo,Vlo,zlo,Xp,uK,Wlo,Qlo,lS,Hlo,Ulo,Jlo,Vp,bK,Ylo,Klo,iS,Zlo,eio,oio,zp,vK,rio,tio,dS,aio,nio,sio,Wp,TK,lio,iio,cS,dio,cio,fio,Qp,FK,mio,gio,fS,hio,pio,_io,Hp,CK,uio,bio,mS,vio,Tio,Fio,Up,MK,Cio,Mio,gS,Eio,yio,wio,Jp,EK,Aio,Lio,hS,Bio,xio,kio,Yp,yK,Rio,Sio,pS,Pio,$io,Iio,Kp,wK,Dio,jio,_S,Nio,qio,Gio,Zp,AK,Oio,Xio,uS,Vio,zio,Wio,e_,LK,Qio,Hio,bS,Uio,Jio,Yio,o_,BK,Kio,Zio,vS,edo,odo,rdo,r_,xK,tdo,ado,TS,ndo,sdo,ldo,t_,kK,ido,ddo,FS,cdo,fdo,mdo,a_,gdo,RK,hdo,pdo,SK,_do,udo,PK,bdo,vdo,dE,z7e,Wi,n_,$K,cE,Tdo,IK,Fdo,W7e,Ho,fE,Cdo,Qi,Mdo,DK,Edo,ydo,jK,wdo,Ado,Ldo,mE,Bdo,NK,xdo,kdo,Rdo,Gr,gE,Sdo,qK,Pdo,$do,Hi,Ido,GK,Ddo,jdo,OK,Ndo,qdo,Gdo,XK,Odo,Xdo,hE,Vdo,Se,pE,zdo,VK,Wdo,Qdo,qa,Hdo,zK,Udo,Jdo,WK,Ydo,Kdo,QK,Zdo,eco,oco,k,s_,HK,rco,tco,CS,aco,nco,sco,l_,UK,lco,ico,MS,dco,cco,fco,i_,JK,mco,gco,ES,hco,pco,_co,d_,YK,uco,bco,yS,vco,Tco,Fco,c_,KK,Cco,Mco,wS,Eco,yco,wco,f_,ZK,Aco,Lco,AS,Bco,xco,kco,m_,eZ,Rco,Sco,LS,Pco,$co,Ico,g_,oZ,Dco,jco,BS,Nco,qco,Gco,h_,rZ,Oco,Xco,xS,Vco,zco,Wco,p_,tZ,Qco,Hco,kS,Uco,Jco,Yco,__,aZ,Kco,Zco,RS,efo,ofo,rfo,u_,nZ,tfo,afo,SS,nfo,sfo,lfo,b_,sZ,ifo,dfo,PS,cfo,ffo,mfo,v_,lZ,gfo,hfo,$S,pfo,_fo,ufo,T_,iZ,bfo,vfo,IS,Tfo,Ffo,Cfo,F_,dZ,Mfo,Efo,DS,yfo,wfo,Afo,C_,cZ,Lfo,Bfo,jS,xfo,kfo,Rfo,M_,fZ,Sfo,Pfo,NS,$fo,Ifo,Dfo,E_,mZ,jfo,Nfo,qS,qfo,Gfo,Ofo,y_,gZ,Xfo,Vfo,GS,zfo,Wfo,Qfo,w_,hZ,Hfo,Ufo,OS,Jfo,Yfo,Kfo,A_,pZ,Zfo,emo,XS,omo,rmo,tmo,L_,_Z,amo,nmo,VS,smo,lmo,imo,B_,uZ,dmo,cmo,zS,fmo,mmo,gmo,x_,bZ,hmo,pmo,WS,_mo,umo,bmo,k_,vZ,vmo,Tmo,QS,Fmo,Cmo,Mmo,R_,TZ,Emo,ymo,HS,wmo,Amo,Lmo,S_,FZ,Bmo,xmo,US,kmo,Rmo,Smo,P_,CZ,Pmo,$mo,JS,Imo,Dmo,jmo,$_,MZ,Nmo,qmo,YS,Gmo,Omo,Xmo,I_,EZ,Vmo,zmo,KS,Wmo,Qmo,Hmo,D_,yZ,Umo,Jmo,ZS,Ymo,Kmo,Zmo,j_,wZ,ego,ogo,eP,rgo,tgo,ago,N_,AZ,ngo,sgo,oP,lgo,igo,dgo,q_,LZ,cgo,fgo,rP,mgo,ggo,hgo,G_,BZ,pgo,_go,tP,ugo,bgo,vgo,O_,xZ,Tgo,Fgo,aP,Cgo,Mgo,Ego,X_,kZ,ygo,wgo,nP,Ago,Lgo,Bgo,V_,RZ,xgo,kgo,sP,Rgo,Sgo,Pgo,z_,$go,SZ,Igo,Dgo,PZ,jgo,Ngo,$Z,qgo,Ggo,_E,Q7e,Ui,W_,IZ,uE,Ogo,DZ,Xgo,H7e,Uo,bE,Vgo,Ji,zgo,jZ,Wgo,Qgo,NZ,Hgo,Ugo,Jgo,vE,Ygo,qZ,Kgo,Zgo,eho,Or,TE,oho,GZ,rho,tho,Yi,aho,OZ,nho,sho,XZ,lho,iho,dho,VZ,cho,fho,FE,mho,Pe,CE,gho,zZ,hho,pho,Ga,_ho,WZ,uho,bho,QZ,vho,Tho,HZ,Fho,Cho,Mho,$,Q_,UZ,Eho,yho,lP,who,Aho,Lho,H_,JZ,Bho,xho,iP,kho,Rho,Sho,U_,YZ,Pho,$ho,dP,Iho,Dho,jho,J_,KZ,Nho,qho,cP,Gho,Oho,Xho,Y_,ZZ,Vho,zho,fP,Who,Qho,Hho,K_,eee,Uho,Jho,mP,Yho,Kho,Zho,Z_,oee,epo,opo,gP,rpo,tpo,apo,eu,ree,npo,spo,hP,lpo,ipo,dpo,ou,tee,cpo,fpo,pP,mpo,gpo,hpo,ru,aee,ppo,_po,_P,upo,bpo,vpo,tu,nee,Tpo,Fpo,uP,Cpo,Mpo,Epo,au,see,ypo,wpo,bP,Apo,Lpo,Bpo,nu,lee,xpo,kpo,vP,Rpo,Spo,Ppo,su,iee,$po,Ipo,TP,Dpo,jpo,Npo,lu,dee,qpo,Gpo,FP,Opo,Xpo,Vpo,iu,cee,zpo,Wpo,CP,Qpo,Hpo,Upo,du,fee,Jpo,Ypo,MP,Kpo,Zpo,e_o,cu,mee,o_o,r_o,EP,t_o,a_o,n_o,fu,gee,s_o,l_o,yP,i_o,d_o,c_o,mu,hee,f_o,m_o,wP,g_o,h_o,p_o,gu,pee,__o,u_o,AP,b_o,v_o,T_o,hu,_ee,F_o,C_o,LP,M_o,E_o,y_o,pu,uee,w_o,A_o,BP,L_o,B_o,x_o,_u,bee,k_o,R_o,xP,S_o,P_o,$_o,uu,vee,I_o,D_o,kP,j_o,N_o,q_o,bu,Tee,G_o,O_o,RP,X_o,V_o,z_o,vu,Fee,W_o,Q_o,SP,H_o,U_o,J_o,Tu,Cee,Y_o,K_o,PP,Z_o,euo,ouo,Fu,Mee,ruo,tuo,$P,auo,nuo,suo,Cu,Eee,luo,iuo,IP,duo,cuo,fuo,Mu,yee,muo,guo,DP,huo,puo,_uo,Eu,wee,uuo,buo,jP,vuo,Tuo,Fuo,yu,Aee,Cuo,Muo,NP,Euo,yuo,wuo,wu,Lee,Auo,Luo,qP,Buo,xuo,kuo,Au,Bee,Ruo,Suo,GP,Puo,$uo,Iuo,Lu,Duo,xee,juo,Nuo,kee,quo,Guo,Ree,Ouo,Xuo,ME,U7e,Ki,Bu,See,EE,Vuo,Pee,zuo,J7e,Jo,yE,Wuo,Zi,Quo,$ee,Huo,Uuo,Iee,Juo,Yuo,Kuo,wE,Zuo,Dee,e1o,o1o,r1o,Xr,AE,t1o,jee,a1o,n1o,ed,s1o,Nee,l1o,i1o,qee,d1o,c1o,f1o,Gee,m1o,g1o,LE,h1o,$e,BE,p1o,Oee,_1o,u1o,Oa,b1o,Xee,v1o,T1o,Vee,F1o,C1o,zee,M1o,E1o,y1o,I,xu,Wee,w1o,A1o,OP,L1o,B1o,x1o,ku,Qee,k1o,R1o,XP,S1o,P1o,$1o,Ru,Hee,I1o,D1o,VP,j1o,N1o,q1o,Su,Uee,G1o,O1o,zP,X1o,V1o,z1o,Pu,Jee,W1o,Q1o,WP,H1o,U1o,J1o,$u,Yee,Y1o,K1o,QP,Z1o,ebo,obo,Iu,Kee,rbo,tbo,HP,abo,nbo,sbo,Du,Zee,lbo,ibo,UP,dbo,cbo,fbo,ju,eoe,mbo,gbo,JP,hbo,pbo,_bo,Nu,ooe,ubo,bbo,YP,vbo,Tbo,Fbo,qu,roe,Cbo,Mbo,KP,Ebo,ybo,wbo,Gu,toe,Abo,Lbo,ZP,Bbo,xbo,kbo,Ou,aoe,Rbo,Sbo,e$,Pbo,$bo,Ibo,Xu,noe,Dbo,jbo,o$,Nbo,qbo,Gbo,Vu,soe,Obo,Xbo,r$,Vbo,zbo,Wbo,zu,loe,Qbo,Hbo,t$,Ubo,Jbo,Ybo,Wu,ioe,Kbo,Zbo,a$,e3o,o3o,r3o,Qu,doe,t3o,a3o,n$,n3o,s3o,l3o,Hu,coe,i3o,d3o,s$,c3o,f3o,m3o,Uu,foe,g3o,h3o,l$,p3o,_3o,u3o,Ju,moe,b3o,v3o,i$,T3o,F3o,C3o,Yu,goe,M3o,E3o,d$,y3o,w3o,A3o,Ku,hoe,L3o,B3o,c$,x3o,k3o,R3o,Zu,poe,S3o,P3o,f$,$3o,I3o,D3o,e1,_oe,j3o,N3o,m$,q3o,G3o,O3o,o1,uoe,X3o,V3o,g$,z3o,W3o,Q3o,r1,boe,H3o,U3o,h$,J3o,Y3o,K3o,t1,voe,Z3o,e5o,p$,o5o,r5o,t5o,a1,Toe,a5o,n5o,_$,s5o,l5o,i5o,n1,Foe,d5o,c5o,u$,f5o,m5o,g5o,s1,Coe,h5o,p5o,Moe,_5o,u5o,b5o,l1,Eoe,v5o,T5o,b$,F5o,C5o,M5o,i1,yoe,E5o,y5o,v$,w5o,A5o,L5o,d1,woe,B5o,x5o,T$,k5o,R5o,S5o,c1,Aoe,P5o,$5o,F$,I5o,D5o,j5o,f1,N5o,Loe,q5o,G5o,Boe,O5o,X5o,xoe,V5o,z5o,xE,Y7e,od,m1,koe,kE,W5o,Roe,Q5o,K7e,Yo,RE,H5o,rd,U5o,Soe,J5o,Y5o,Poe,K5o,Z5o,e2o,SE,o2o,$oe,r2o,t2o,a2o,Vr,PE,n2o,Ioe,s2o,l2o,td,i2o,Doe,d2o,c2o,joe,f2o,m2o,g2o,Noe,h2o,p2o,$E,_2o,Ie,IE,u2o,qoe,b2o,v2o,Xa,T2o,Goe,F2o,C2o,Ooe,M2o,E2o,Xoe,y2o,w2o,A2o,ae,g1,Voe,L2o,B2o,C$,x2o,k2o,R2o,h1,zoe,S2o,P2o,M$,$2o,I2o,D2o,p1,Woe,j2o,N2o,E$,q2o,G2o,O2o,_1,Qoe,X2o,V2o,y$,z2o,W2o,Q2o,u1,Hoe,H2o,U2o,w$,J2o,Y2o,K2o,b1,Uoe,Z2o,evo,A$,ovo,rvo,tvo,v1,Joe,avo,nvo,L$,svo,lvo,ivo,T1,Yoe,dvo,cvo,B$,fvo,mvo,gvo,F1,Koe,hvo,pvo,x$,_vo,uvo,bvo,C1,Zoe,vvo,Tvo,k$,Fvo,Cvo,Mvo,M1,ere,Evo,yvo,R$,wvo,Avo,Lvo,E1,ore,Bvo,xvo,S$,kvo,Rvo,Svo,y1,rre,Pvo,$vo,P$,Ivo,Dvo,jvo,w1,tre,Nvo,qvo,$$,Gvo,Ovo,Xvo,A1,are,Vvo,zvo,I$,Wvo,Qvo,Hvo,L1,nre,Uvo,Jvo,D$,Yvo,Kvo,Zvo,B1,eTo,sre,oTo,rTo,lre,tTo,aTo,ire,nTo,sTo,DE,Z7e,ad,x1,dre,jE,lTo,cre,iTo,eBe,Ko,NE,dTo,nd,cTo,fre,fTo,mTo,mre,gTo,hTo,pTo,qE,_To,gre,uTo,bTo,vTo,zr,GE,TTo,hre,FTo,CTo,sd,MTo,pre,ETo,yTo,_re,wTo,ATo,LTo,ure,BTo,xTo,OE,kTo,De,XE,RTo,bre,STo,PTo,Va,$To,vre,ITo,DTo,Tre,jTo,NTo,Fre,qTo,GTo,OTo,A,k1,Cre,XTo,VTo,j$,zTo,WTo,QTo,R1,Mre,HTo,UTo,N$,JTo,YTo,KTo,S1,Ere,ZTo,eFo,q$,oFo,rFo,tFo,P1,yre,aFo,nFo,G$,sFo,lFo,iFo,$1,wre,dFo,cFo,O$,fFo,mFo,gFo,I1,Are,hFo,pFo,X$,_Fo,uFo,bFo,D1,Lre,vFo,TFo,V$,FFo,CFo,MFo,j1,Bre,EFo,yFo,z$,wFo,AFo,LFo,N1,xre,BFo,xFo,W$,kFo,RFo,SFo,q1,kre,PFo,$Fo,Q$,IFo,DFo,jFo,G1,Rre,NFo,qFo,H$,GFo,OFo,XFo,O1,Sre,VFo,zFo,U$,WFo,QFo,HFo,X1,Pre,UFo,JFo,J$,YFo,KFo,ZFo,V1,$re,e9o,o9o,Y$,r9o,t9o,a9o,z1,Ire,n9o,s9o,K$,l9o,i9o,d9o,W1,Dre,c9o,f9o,Z$,m9o,g9o,h9o,Q1,jre,p9o,_9o,eI,u9o,b9o,v9o,H1,Nre,T9o,F9o,oI,C9o,M9o,E9o,U1,qre,y9o,w9o,rI,A9o,L9o,B9o,J1,Gre,x9o,k9o,tI,R9o,S9o,P9o,Y1,Ore,$9o,I9o,aI,D9o,j9o,N9o,K1,Xre,q9o,G9o,nI,O9o,X9o,V9o,Z1,Vre,z9o,W9o,sI,Q9o,H9o,U9o,eb,zre,J9o,Y9o,lI,K9o,Z9o,eCo,ob,Wre,oCo,rCo,iI,tCo,aCo,nCo,rb,Qre,sCo,lCo,dI,iCo,dCo,cCo,tb,Hre,fCo,mCo,cI,gCo,hCo,pCo,ab,Ure,_Co,uCo,fI,bCo,vCo,TCo,nb,Jre,FCo,CCo,mI,MCo,ECo,yCo,sb,Yre,wCo,ACo,gI,LCo,BCo,xCo,lb,Kre,kCo,RCo,hI,SCo,PCo,$Co,ib,Zre,ICo,DCo,pI,jCo,NCo,qCo,db,ete,GCo,OCo,_I,XCo,VCo,zCo,cb,ote,WCo,QCo,uI,HCo,UCo,JCo,fb,rte,YCo,KCo,bI,ZCo,e4o,o4o,mb,tte,r4o,t4o,vI,a4o,n4o,s4o,gb,ate,l4o,i4o,TI,d4o,c4o,f4o,hb,nte,m4o,g4o,FI,h4o,p4o,_4o,pb,ste,u4o,b4o,CI,v4o,T4o,F4o,_b,lte,C4o,M4o,MI,E4o,y4o,w4o,ub,ite,A4o,L4o,EI,B4o,x4o,k4o,bb,dte,R4o,S4o,yI,P4o,$4o,I4o,vb,cte,D4o,j4o,wI,N4o,q4o,G4o,Tb,fte,O4o,X4o,AI,V4o,z4o,W4o,Fb,mte,Q4o,H4o,LI,U4o,J4o,Y4o,Cb,gte,K4o,Z4o,BI,eMo,oMo,rMo,Mb,tMo,hte,aMo,nMo,pte,sMo,lMo,_te,iMo,dMo,VE,oBe,ld,Eb,ute,zE,cMo,bte,fMo,rBe,Zo,WE,mMo,id,gMo,vte,hMo,pMo,Tte,_Mo,uMo,bMo,QE,vMo,Fte,TMo,FMo,CMo,Wr,HE,MMo,Cte,EMo,yMo,dd,wMo,Mte,AMo,LMo,Ete,BMo,xMo,kMo,yte,RMo,SMo,UE,PMo,je,JE,$Mo,wte,IMo,DMo,za,jMo,Ate,NMo,qMo,Lte,GMo,OMo,Bte,XMo,VMo,zMo,G,yb,xte,WMo,QMo,xI,HMo,UMo,JMo,wb,kte,YMo,KMo,kI,ZMo,eEo,oEo,Ab,Rte,rEo,tEo,RI,aEo,nEo,sEo,Lb,Ste,lEo,iEo,SI,dEo,cEo,fEo,Bb,Pte,mEo,gEo,PI,hEo,pEo,_Eo,xb,$te,uEo,bEo,$I,vEo,TEo,FEo,kb,Ite,CEo,MEo,II,EEo,yEo,wEo,Rb,Dte,AEo,LEo,DI,BEo,xEo,kEo,Sb,jte,REo,SEo,jI,PEo,$Eo,IEo,Pb,Nte,DEo,jEo,NI,NEo,qEo,GEo,$b,qte,OEo,XEo,qI,VEo,zEo,WEo,Ib,Gte,QEo,HEo,GI,UEo,JEo,YEo,Db,Ote,KEo,ZEo,OI,eyo,oyo,ryo,jb,Xte,tyo,ayo,XI,nyo,syo,lyo,Nb,Vte,iyo,dyo,VI,cyo,fyo,myo,qb,zte,gyo,hyo,zI,pyo,_yo,uyo,Gb,Wte,byo,vyo,WI,Tyo,Fyo,Cyo,Ob,Qte,Myo,Eyo,QI,yyo,wyo,Ayo,Xb,Hte,Lyo,Byo,HI,xyo,kyo,Ryo,Vb,Ute,Syo,Pyo,UI,$yo,Iyo,Dyo,zb,Jte,jyo,Nyo,JI,qyo,Gyo,Oyo,Wb,Yte,Xyo,Vyo,YI,zyo,Wyo,Qyo,Qb,Kte,Hyo,Uyo,KI,Jyo,Yyo,Kyo,Hb,Zte,Zyo,ewo,ZI,owo,rwo,two,Ub,eae,awo,nwo,eD,swo,lwo,iwo,Jb,oae,dwo,cwo,oD,fwo,mwo,gwo,Yb,rae,hwo,pwo,rD,_wo,uwo,bwo,Kb,tae,vwo,Two,tD,Fwo,Cwo,Mwo,Zb,Ewo,aae,ywo,wwo,nae,Awo,Lwo,sae,Bwo,xwo,YE,tBe,cd,e3,lae,KE,kwo,iae,Rwo,aBe,er,ZE,Swo,fd,Pwo,dae,$wo,Iwo,cae,Dwo,jwo,Nwo,ey,qwo,fae,Gwo,Owo,Xwo,Qr,oy,Vwo,mae,zwo,Wwo,md,Qwo,gae,Hwo,Uwo,hae,Jwo,Ywo,Kwo,pae,Zwo,e6o,ry,o6o,Ne,ty,r6o,_ae,t6o,a6o,Wa,n6o,uae,s6o,l6o,bae,i6o,d6o,vae,c6o,f6o,m6o,na,o3,Tae,g6o,h6o,aD,p6o,_6o,u6o,r3,Fae,b6o,v6o,nD,T6o,F6o,C6o,t3,Cae,M6o,E6o,sD,y6o,w6o,A6o,a3,Mae,L6o,B6o,lD,x6o,k6o,R6o,n3,Eae,S6o,P6o,iD,$6o,I6o,D6o,s3,j6o,yae,N6o,q6o,wae,G6o,O6o,Aae,X6o,V6o,ay,nBe,gd,l3,Lae,ny,z6o,Bae,W6o,sBe,or,sy,Q6o,hd,H6o,xae,U6o,J6o,kae,Y6o,K6o,Z6o,ly,eAo,Rae,oAo,rAo,tAo,Hr,iy,aAo,Sae,nAo,sAo,pd,lAo,Pae,iAo,dAo,$ae,cAo,fAo,mAo,Iae,gAo,hAo,dy,pAo,qe,cy,_Ao,Dae,uAo,bAo,Qa,vAo,jae,TAo,FAo,Nae,CAo,MAo,qae,EAo,yAo,wAo,N,i3,Gae,AAo,LAo,dD,BAo,xAo,kAo,d3,Oae,RAo,SAo,cD,PAo,$Ao,IAo,c3,Xae,DAo,jAo,fD,NAo,qAo,GAo,f3,Vae,OAo,XAo,mD,VAo,zAo,WAo,m3,zae,QAo,HAo,gD,UAo,JAo,YAo,g3,Wae,KAo,ZAo,hD,e0o,o0o,r0o,h3,Qae,t0o,a0o,pD,n0o,s0o,l0o,p3,Hae,i0o,d0o,_D,c0o,f0o,m0o,_3,Uae,g0o,h0o,uD,p0o,_0o,u0o,u3,Jae,b0o,v0o,bD,T0o,F0o,C0o,b3,Yae,M0o,E0o,vD,y0o,w0o,A0o,v3,Kae,L0o,B0o,TD,x0o,k0o,R0o,T3,Zae,S0o,P0o,FD,$0o,I0o,D0o,F3,ene,j0o,N0o,CD,q0o,G0o,O0o,C3,one,X0o,V0o,MD,z0o,W0o,Q0o,M3,rne,H0o,U0o,ED,J0o,Y0o,K0o,E3,tne,Z0o,eLo,yD,oLo,rLo,tLo,y3,ane,aLo,nLo,wD,sLo,lLo,iLo,w3,nne,dLo,cLo,AD,fLo,mLo,gLo,A3,sne,hLo,pLo,LD,_Lo,uLo,bLo,L3,lne,vLo,TLo,BD,FLo,CLo,MLo,B3,ine,ELo,yLo,xD,wLo,ALo,LLo,x3,dne,BLo,xLo,kD,kLo,RLo,SLo,k3,cne,PLo,$Lo,RD,ILo,DLo,jLo,R3,fne,NLo,qLo,SD,GLo,OLo,XLo,S3,mne,VLo,zLo,PD,WLo,QLo,HLo,P3,gne,ULo,JLo,$D,YLo,KLo,ZLo,$3,hne,e8o,o8o,ID,r8o,t8o,a8o,I3,pne,n8o,s8o,DD,l8o,i8o,d8o,D3,_ne,c8o,f8o,jD,m8o,g8o,h8o,j3,une,p8o,_8o,ND,u8o,b8o,v8o,N3,bne,T8o,F8o,qD,C8o,M8o,E8o,q3,vne,y8o,w8o,GD,A8o,L8o,B8o,G3,x8o,Tne,k8o,R8o,Fne,S8o,P8o,Cne,$8o,I8o,fy,lBe,_d,O3,Mne,my,D8o,Ene,j8o,iBe,rr,gy,N8o,ud,q8o,yne,G8o,O8o,wne,X8o,V8o,z8o,hy,W8o,Ane,Q8o,H8o,U8o,Ur,py,J8o,Lne,Y8o,K8o,bd,Z8o,Bne,e7o,o7o,xne,r7o,t7o,a7o,kne,n7o,s7o,_y,l7o,Ge,uy,i7o,Rne,d7o,c7o,Ha,f7o,Sne,m7o,g7o,Pne,h7o,p7o,$ne,_7o,u7o,b7o,R,X3,Ine,v7o,T7o,OD,F7o,C7o,M7o,V3,Dne,E7o,y7o,XD,w7o,A7o,L7o,z3,jne,B7o,x7o,VD,k7o,R7o,S7o,W3,Nne,P7o,$7o,zD,I7o,D7o,j7o,Q3,qne,N7o,q7o,WD,G7o,O7o,X7o,H3,Gne,V7o,z7o,QD,W7o,Q7o,H7o,U3,One,U7o,J7o,HD,Y7o,K7o,Z7o,J3,Xne,eBo,oBo,UD,rBo,tBo,aBo,Y3,Vne,nBo,sBo,JD,lBo,iBo,dBo,K3,zne,cBo,fBo,YD,mBo,gBo,hBo,Z3,Wne,pBo,_Bo,KD,uBo,bBo,vBo,e5,Qne,TBo,FBo,ZD,CBo,MBo,EBo,o5,Hne,yBo,wBo,ej,ABo,LBo,BBo,r5,Une,xBo,kBo,oj,RBo,SBo,PBo,t5,Jne,$Bo,IBo,rj,DBo,jBo,NBo,a5,Yne,qBo,GBo,tj,OBo,XBo,VBo,n5,Kne,zBo,WBo,aj,QBo,HBo,UBo,s5,Zne,JBo,YBo,nj,KBo,ZBo,exo,l5,ese,oxo,rxo,sj,txo,axo,nxo,i5,ose,sxo,lxo,lj,ixo,dxo,cxo,d5,rse,fxo,mxo,ij,gxo,hxo,pxo,c5,tse,_xo,uxo,dj,bxo,vxo,Txo,f5,ase,Fxo,Cxo,cj,Mxo,Exo,yxo,m5,nse,wxo,Axo,fj,Lxo,Bxo,xxo,g5,sse,kxo,Rxo,mj,Sxo,Pxo,$xo,h5,lse,Ixo,Dxo,gj,jxo,Nxo,qxo,p5,ise,Gxo,Oxo,hj,Xxo,Vxo,zxo,_5,dse,Wxo,Qxo,pj,Hxo,Uxo,Jxo,u5,cse,Yxo,Kxo,_j,Zxo,eko,oko,b5,fse,rko,tko,uj,ako,nko,sko,v5,mse,lko,iko,bj,dko,cko,fko,T5,gse,mko,gko,vj,hko,pko,_ko,F5,hse,uko,bko,Tj,vko,Tko,Fko,C5,pse,Cko,Mko,Fj,Eko,yko,wko,M5,_se,Ako,Lko,Cj,Bko,xko,kko,E5,use,Rko,Sko,Mj,Pko,$ko,Iko,y5,bse,Dko,jko,Ej,Nko,qko,Gko,w5,vse,Oko,Xko,yj,Vko,zko,Wko,A5,Tse,Qko,Hko,wj,Uko,Jko,Yko,L5,Kko,Fse,Zko,eRo,Cse,oRo,rRo,Mse,tRo,aRo,by,dBe,vd,B5,Ese,vy,nRo,yse,sRo,cBe,tr,Ty,lRo,Td,iRo,wse,dRo,cRo,Ase,fRo,mRo,gRo,Fy,hRo,Lse,pRo,_Ro,uRo,Jr,Cy,bRo,Bse,vRo,TRo,Fd,FRo,xse,CRo,MRo,kse,ERo,yRo,wRo,Rse,ARo,LRo,My,BRo,Oe,Ey,xRo,Sse,kRo,RRo,Ua,SRo,Pse,PRo,$Ro,$se,IRo,DRo,Ise,jRo,NRo,qRo,Dse,x5,jse,GRo,ORo,Aj,XRo,VRo,zRo,k5,WRo,Nse,QRo,HRo,qse,URo,JRo,Gse,YRo,KRo,yy,fBe,Cd,R5,Ose,wy,ZRo,Xse,eSo,mBe,ar,Ay,oSo,Md,rSo,Vse,tSo,aSo,zse,nSo,sSo,lSo,Ly,iSo,Wse,dSo,cSo,fSo,Yr,By,mSo,Qse,gSo,hSo,Ed,pSo,Hse,_So,uSo,Use,bSo,vSo,TSo,Jse,FSo,CSo,xy,MSo,Xe,ky,ESo,Yse,ySo,wSo,Ja,ASo,Kse,LSo,BSo,Zse,xSo,kSo,ele,RSo,SSo,PSo,be,S5,ole,$So,ISo,Lj,DSo,jSo,NSo,P5,rle,qSo,GSo,Bj,OSo,XSo,VSo,$s,tle,zSo,WSo,xj,QSo,HSo,kj,USo,JSo,YSo,$5,ale,KSo,ZSo,Rj,ePo,oPo,rPo,la,nle,tPo,aPo,Sj,nPo,sPo,Pj,lPo,iPo,$j,dPo,cPo,fPo,I5,sle,mPo,gPo,Ij,hPo,pPo,_Po,D5,lle,uPo,bPo,Dj,vPo,TPo,FPo,j5,ile,CPo,MPo,jj,EPo,yPo,wPo,N5,dle,APo,LPo,Nj,BPo,xPo,kPo,q5,RPo,cle,SPo,PPo,fle,$Po,IPo,mle,DPo,jPo,Ry,gBe,yd,G5,gle,Sy,NPo,hle,qPo,hBe,nr,Py,GPo,wd,OPo,ple,XPo,VPo,_le,zPo,WPo,QPo,$y,HPo,ule,UPo,JPo,YPo,Kr,Iy,KPo,ble,ZPo,e$o,Ad,o$o,vle,r$o,t$o,Tle,a$o,n$o,s$o,Fle,l$o,i$o,Dy,d$o,Ve,jy,c$o,Cle,f$o,m$o,Ya,g$o,Mle,h$o,p$o,Ele,_$o,u$o,yle,b$o,v$o,T$o,wle,O5,Ale,F$o,C$o,qj,M$o,E$o,y$o,X5,w$o,Lle,A$o,L$o,Ble,B$o,x$o,xle,k$o,R$o,Ny,pBe,Ld,V5,kle,qy,S$o,Rle,P$o,_Be,sr,Gy,$$o,Bd,I$o,Sle,D$o,j$o,Ple,N$o,q$o,G$o,Oy,O$o,$le,X$o,V$o,z$o,Zr,Xy,W$o,Ile,Q$o,H$o,xd,U$o,Dle,J$o,Y$o,jle,K$o,Z$o,eIo,Nle,oIo,rIo,Vy,tIo,ze,zy,aIo,qle,nIo,sIo,Ka,lIo,Gle,iIo,dIo,Ole,cIo,fIo,Xle,mIo,gIo,hIo,Ae,z5,Vle,pIo,_Io,Gj,uIo,bIo,vIo,W5,zle,TIo,FIo,Oj,CIo,MIo,EIo,Q5,Wle,yIo,wIo,Xj,AIo,LIo,BIo,H5,Qle,xIo,kIo,Vj,RIo,SIo,PIo,U5,Hle,$Io,IIo,zj,DIo,jIo,NIo,J5,Ule,qIo,GIo,Wj,OIo,XIo,VIo,Y5,Jle,zIo,WIo,Qj,QIo,HIo,UIo,K5,Yle,JIo,YIo,Hj,KIo,ZIo,eDo,Z5,oDo,Kle,rDo,tDo,Zle,aDo,nDo,eie,sDo,lDo,Wy,uBe,kd,e2,oie,Qy,iDo,rie,dDo,bBe,lr,Hy,cDo,Rd,fDo,tie,mDo,gDo,aie,hDo,pDo,_Do,Uy,uDo,nie,bDo,vDo,TDo,et,Jy,FDo,sie,CDo,MDo,Sd,EDo,lie,yDo,wDo,iie,ADo,LDo,BDo,die,xDo,kDo,Yy,RDo,We,Ky,SDo,cie,PDo,$Do,Za,IDo,fie,DDo,jDo,mie,NDo,qDo,gie,GDo,ODo,XDo,en,o2,hie,VDo,zDo,Uj,WDo,QDo,HDo,r2,pie,UDo,JDo,Jj,YDo,KDo,ZDo,t2,_ie,ejo,ojo,Yj,rjo,tjo,ajo,a2,uie,njo,sjo,Kj,ljo,ijo,djo,n2,cjo,bie,fjo,mjo,vie,gjo,hjo,Tie,pjo,_jo,Zy,vBe,Pd,s2,Fie,ew,ujo,Cie,bjo,TBe,ir,ow,vjo,$d,Tjo,Mie,Fjo,Cjo,Eie,Mjo,Ejo,yjo,rw,wjo,yie,Ajo,Ljo,Bjo,ot,tw,xjo,wie,kjo,Rjo,Id,Sjo,Aie,Pjo,$jo,Lie,Ijo,Djo,jjo,Bie,Njo,qjo,aw,Gjo,Qe,nw,Ojo,xie,Xjo,Vjo,on,zjo,kie,Wjo,Qjo,Rie,Hjo,Ujo,Sie,Jjo,Yjo,Kjo,Le,l2,Pie,Zjo,eNo,Zj,oNo,rNo,tNo,i2,$ie,aNo,nNo,eN,sNo,lNo,iNo,d2,Iie,dNo,cNo,oN,fNo,mNo,gNo,c2,Die,hNo,pNo,rN,_No,uNo,bNo,f2,jie,vNo,TNo,tN,FNo,CNo,MNo,m2,Nie,ENo,yNo,aN,wNo,ANo,LNo,g2,qie,BNo,xNo,nN,kNo,RNo,SNo,h2,Gie,PNo,$No,sN,INo,DNo,jNo,p2,NNo,Oie,qNo,GNo,Xie,ONo,XNo,Vie,VNo,zNo,sw,FBe,Dd,_2,zie,lw,WNo,Wie,QNo,CBe,dr,iw,HNo,jd,UNo,Qie,JNo,YNo,Hie,KNo,ZNo,eqo,dw,oqo,Uie,rqo,tqo,aqo,rt,cw,nqo,Jie,sqo,lqo,Nd,iqo,Yie,dqo,cqo,Kie,fqo,mqo,gqo,Zie,hqo,pqo,fw,_qo,He,mw,uqo,ede,bqo,vqo,rn,Tqo,ode,Fqo,Cqo,rde,Mqo,Eqo,tde,yqo,wqo,Aqo,gw,u2,ade,Lqo,Bqo,lN,xqo,kqo,Rqo,b2,nde,Sqo,Pqo,iN,$qo,Iqo,Dqo,v2,jqo,sde,Nqo,qqo,lde,Gqo,Oqo,ide,Xqo,Vqo,hw,MBe,qd,T2,dde,pw,zqo,cde,Wqo,EBe,cr,_w,Qqo,Gd,Hqo,fde,Uqo,Jqo,mde,Yqo,Kqo,Zqo,uw,eGo,gde,oGo,rGo,tGo,tt,bw,aGo,hde,nGo,sGo,Od,lGo,pde,iGo,dGo,_de,cGo,fGo,mGo,ude,gGo,hGo,vw,pGo,Ue,Tw,_Go,bde,uGo,bGo,tn,vGo,vde,TGo,FGo,Tde,CGo,MGo,Fde,EGo,yGo,wGo,an,F2,Cde,AGo,LGo,dN,BGo,xGo,kGo,C2,Mde,RGo,SGo,cN,PGo,$Go,IGo,M2,Ede,DGo,jGo,fN,NGo,qGo,GGo,E2,yde,OGo,XGo,mN,VGo,zGo,WGo,y2,QGo,wde,HGo,UGo,Ade,JGo,YGo,Lde,KGo,ZGo,Fw,yBe,Xd,w2,Bde,Cw,eOo,xde,oOo,wBe,fr,Mw,rOo,Vd,tOo,kde,aOo,nOo,Rde,sOo,lOo,iOo,Ew,dOo,Sde,cOo,fOo,mOo,at,yw,gOo,Pde,hOo,pOo,zd,_Oo,$de,uOo,bOo,Ide,vOo,TOo,FOo,Dde,COo,MOo,ww,EOo,Je,Aw,yOo,jde,wOo,AOo,nn,LOo,Nde,BOo,xOo,qde,kOo,ROo,Gde,SOo,POo,$Oo,Wd,A2,Ode,IOo,DOo,gN,jOo,NOo,qOo,L2,Xde,GOo,OOo,hN,XOo,VOo,zOo,B2,Vde,WOo,QOo,pN,HOo,UOo,JOo,x2,YOo,zde,KOo,ZOo,Wde,eXo,oXo,Qde,rXo,tXo,Lw,ABe,Qd,k2,Hde,Bw,aXo,Ude,nXo,LBe,mr,xw,sXo,Hd,lXo,Jde,iXo,dXo,Yde,cXo,fXo,mXo,kw,gXo,Kde,hXo,pXo,_Xo,nt,Rw,uXo,Zde,bXo,vXo,Ud,TXo,ece,FXo,CXo,oce,MXo,EXo,yXo,rce,wXo,AXo,Sw,LXo,Ye,Pw,BXo,tce,xXo,kXo,sn,RXo,ace,SXo,PXo,nce,$Xo,IXo,sce,DXo,jXo,NXo,lce,R2,ice,qXo,GXo,_N,OXo,XXo,VXo,S2,zXo,dce,WXo,QXo,cce,HXo,UXo,fce,JXo,YXo,$w,BBe,Jd,P2,mce,Iw,KXo,gce,ZXo,xBe,gr,Dw,eVo,Yd,oVo,hce,rVo,tVo,pce,aVo,nVo,sVo,jw,lVo,_ce,iVo,dVo,cVo,st,Nw,fVo,uce,mVo,gVo,Kd,hVo,bce,pVo,_Vo,vce,uVo,bVo,vVo,Tce,TVo,FVo,qw,CVo,Ke,Gw,MVo,Fce,EVo,yVo,ln,wVo,Cce,AVo,LVo,Mce,BVo,xVo,Ece,kVo,RVo,SVo,yce,$2,wce,PVo,$Vo,uN,IVo,DVo,jVo,I2,NVo,Ace,qVo,GVo,Lce,OVo,XVo,Bce,VVo,zVo,Ow,kBe,Zd,D2,xce,Xw,WVo,kce,QVo,RBe,hr,Vw,HVo,ec,UVo,Rce,JVo,YVo,Sce,KVo,ZVo,ezo,zw,ozo,Pce,rzo,tzo,azo,lt,Ww,nzo,$ce,szo,lzo,oc,izo,Ice,dzo,czo,Dce,fzo,mzo,gzo,jce,hzo,pzo,Qw,_zo,Ze,Hw,uzo,Nce,bzo,vzo,dn,Tzo,qce,Fzo,Czo,Gce,Mzo,Ezo,Oce,yzo,wzo,Azo,Uw,j2,Xce,Lzo,Bzo,bN,xzo,kzo,Rzo,N2,Vce,Szo,Pzo,vN,$zo,Izo,Dzo,q2,jzo,zce,Nzo,qzo,Wce,Gzo,Ozo,Qce,Xzo,Vzo,Jw,SBe,rc,G2,Hce,Yw,zzo,Uce,Wzo,PBe,pr,Kw,Qzo,tc,Hzo,Jce,Uzo,Jzo,Yce,Yzo,Kzo,Zzo,Zw,eWo,Kce,oWo,rWo,tWo,it,e6,aWo,Zce,nWo,sWo,ac,lWo,efe,iWo,dWo,ofe,cWo,fWo,mWo,rfe,gWo,hWo,o6,pWo,go,r6,_Wo,tfe,uWo,bWo,cn,vWo,afe,TWo,FWo,nfe,CWo,MWo,sfe,EWo,yWo,wWo,B,O2,lfe,AWo,LWo,TN,BWo,xWo,kWo,X2,ife,RWo,SWo,FN,PWo,$Wo,IWo,V2,dfe,DWo,jWo,CN,NWo,qWo,GWo,z2,cfe,OWo,XWo,MN,VWo,zWo,WWo,W2,ffe,QWo,HWo,EN,UWo,JWo,YWo,Q2,mfe,KWo,ZWo,yN,eQo,oQo,rQo,H2,gfe,tQo,aQo,wN,nQo,sQo,lQo,U2,hfe,iQo,dQo,AN,cQo,fQo,mQo,J2,pfe,gQo,hQo,LN,pQo,_Qo,uQo,Y2,_fe,bQo,vQo,BN,TQo,FQo,CQo,K2,ufe,MQo,EQo,xN,yQo,wQo,AQo,Z2,bfe,LQo,BQo,kN,xQo,kQo,RQo,ev,vfe,SQo,PQo,RN,$Qo,IQo,DQo,ov,Tfe,jQo,NQo,SN,qQo,GQo,OQo,rv,Ffe,XQo,VQo,PN,zQo,WQo,QQo,tv,Cfe,HQo,UQo,$N,JQo,YQo,KQo,Is,Mfe,ZQo,eHo,IN,oHo,rHo,DN,tHo,aHo,nHo,av,Efe,sHo,lHo,jN,iHo,dHo,cHo,nv,yfe,fHo,mHo,NN,gHo,hHo,pHo,sv,wfe,_Ho,uHo,qN,bHo,vHo,THo,lv,Afe,FHo,CHo,GN,MHo,EHo,yHo,iv,Lfe,wHo,AHo,ON,LHo,BHo,xHo,dv,Bfe,kHo,RHo,XN,SHo,PHo,$Ho,cv,xfe,IHo,DHo,VN,jHo,NHo,qHo,fv,kfe,GHo,OHo,zN,XHo,VHo,zHo,mv,Rfe,WHo,QHo,WN,HHo,UHo,JHo,gv,Sfe,YHo,KHo,QN,ZHo,eUo,oUo,hv,Pfe,rUo,tUo,HN,aUo,nUo,sUo,pv,$fe,lUo,iUo,UN,dUo,cUo,fUo,_v,Ife,mUo,gUo,JN,hUo,pUo,_Uo,uv,Dfe,uUo,bUo,YN,vUo,TUo,FUo,bv,jfe,CUo,MUo,KN,EUo,yUo,wUo,vv,Nfe,AUo,LUo,ZN,BUo,xUo,kUo,Tv,qfe,RUo,SUo,eq,PUo,$Uo,IUo,Fv,Gfe,DUo,jUo,oq,NUo,qUo,GUo,Cv,Ofe,OUo,XUo,rq,VUo,zUo,WUo,Mv,Xfe,QUo,HUo,tq,UUo,JUo,YUo,Ev,Vfe,KUo,ZUo,aq,eJo,oJo,rJo,yv,zfe,tJo,aJo,nq,nJo,sJo,lJo,wv,Wfe,iJo,dJo,sq,cJo,fJo,mJo,Av,Qfe,gJo,hJo,lq,pJo,_Jo,uJo,Lv,Hfe,bJo,vJo,iq,TJo,FJo,CJo,Ufe,MJo,EJo,t6,$Be,nc,Bv,Jfe,a6,yJo,Yfe,wJo,IBe,_r,n6,AJo,sc,LJo,Kfe,BJo,xJo,Zfe,kJo,RJo,SJo,s6,PJo,eme,$Jo,IJo,DJo,dt,l6,jJo,ome,NJo,qJo,lc,GJo,rme,OJo,XJo,tme,VJo,zJo,WJo,ame,QJo,HJo,i6,UJo,ho,d6,JJo,nme,YJo,KJo,fn,ZJo,sme,eYo,oYo,lme,rYo,tYo,ime,aYo,nYo,sYo,H,xv,dme,lYo,iYo,dq,dYo,cYo,fYo,kv,cme,mYo,gYo,cq,hYo,pYo,_Yo,Rv,fme,uYo,bYo,fq,vYo,TYo,FYo,Sv,mme,CYo,MYo,mq,EYo,yYo,wYo,Pv,gme,AYo,LYo,gq,BYo,xYo,kYo,$v,hme,RYo,SYo,hq,PYo,$Yo,IYo,Iv,pme,DYo,jYo,pq,NYo,qYo,GYo,Dv,_me,OYo,XYo,_q,VYo,zYo,WYo,jv,ume,QYo,HYo,uq,UYo,JYo,YYo,Nv,bme,KYo,ZYo,bq,eKo,oKo,rKo,qv,vme,tKo,aKo,vq,nKo,sKo,lKo,Gv,Tme,iKo,dKo,Tq,cKo,fKo,mKo,Ov,Fme,gKo,hKo,Fq,pKo,_Ko,uKo,Xv,Cme,bKo,vKo,Cq,TKo,FKo,CKo,Vv,Mme,MKo,EKo,Mq,yKo,wKo,AKo,zv,Eme,LKo,BKo,Eq,xKo,kKo,RKo,Wv,yme,SKo,PKo,yq,$Ko,IKo,DKo,Qv,wme,jKo,NKo,wq,qKo,GKo,OKo,Hv,Ame,XKo,VKo,Aq,zKo,WKo,QKo,Uv,Lme,HKo,UKo,Lq,JKo,YKo,KKo,Jv,Bme,ZKo,eZo,Bq,oZo,rZo,tZo,Yv,xme,aZo,nZo,xq,sZo,lZo,iZo,kme,dZo,cZo,c6,DBe,ic,Kv,Rme,f6,fZo,Sme,mZo,jBe,ur,m6,gZo,dc,hZo,Pme,pZo,_Zo,$me,uZo,bZo,vZo,g6,TZo,Ime,FZo,CZo,MZo,ct,h6,EZo,Dme,yZo,wZo,cc,AZo,jme,LZo,BZo,Nme,xZo,kZo,RZo,qme,SZo,PZo,p6,$Zo,po,_6,IZo,Gme,DZo,jZo,mn,NZo,Ome,qZo,GZo,Xme,OZo,XZo,Vme,VZo,zZo,WZo,he,Zv,zme,QZo,HZo,kq,UZo,JZo,YZo,eT,Wme,KZo,ZZo,Rq,eer,oer,rer,oT,Qme,ter,aer,Sq,ner,ser,ler,rT,Hme,ier,der,Pq,cer,fer,mer,tT,Ume,ger,her,$q,per,_er,uer,aT,Jme,ber,ver,Iq,Ter,Fer,Cer,nT,Yme,Mer,Eer,Dq,yer,wer,Aer,sT,Kme,Ler,Ber,jq,xer,ker,Rer,lT,Zme,Ser,Per,Nq,$er,Ier,Der,iT,ege,jer,Ner,qq,qer,Ger,Oer,oge,Xer,Ver,u6,NBe,fc,dT,rge,b6,zer,tge,Wer,qBe,br,v6,Qer,mc,Her,age,Uer,Jer,nge,Yer,Ker,Zer,T6,eor,sge,oor,ror,tor,ft,F6,aor,lge,nor,sor,gc,lor,ige,ior,dor,dge,cor,mor,gor,cge,hor,por,C6,_or,_o,M6,uor,fge,bor,vor,gn,Tor,mge,For,Cor,gge,Mor,Eor,hge,yor,wor,Aor,E6,cT,pge,Lor,Bor,Gq,xor,kor,Ror,fT,_ge,Sor,Por,Oq,$or,Ior,Dor,uge,jor,Nor,y6,GBe,hc,mT,bge,w6,qor,vge,Gor,OBe,vr,A6,Oor,pc,Xor,Tge,Vor,zor,Fge,Wor,Qor,Hor,L6,Uor,Cge,Jor,Yor,Kor,mt,B6,Zor,Mge,err,orr,_c,rrr,Ege,trr,arr,yge,nrr,srr,lrr,wge,irr,drr,x6,crr,uo,k6,frr,Age,mrr,grr,hn,hrr,Lge,prr,_rr,Bge,urr,brr,xge,vrr,Trr,Frr,Y,gT,kge,Crr,Mrr,Xq,Err,yrr,wrr,hT,Rge,Arr,Lrr,Vq,Brr,xrr,krr,pT,Sge,Rrr,Srr,zq,Prr,$rr,Irr,_T,Pge,Drr,jrr,Wq,Nrr,qrr,Grr,uT,$ge,Orr,Xrr,Qq,Vrr,zrr,Wrr,bT,Ige,Qrr,Hrr,Hq,Urr,Jrr,Yrr,vT,Dge,Krr,Zrr,Uq,etr,otr,rtr,TT,jge,ttr,atr,Jq,ntr,str,ltr,FT,Nge,itr,dtr,Yq,ctr,ftr,mtr,CT,qge,gtr,htr,Kq,ptr,_tr,utr,MT,Gge,btr,vtr,Zq,Ttr,Ftr,Ctr,ET,Oge,Mtr,Etr,eG,ytr,wtr,Atr,yT,Xge,Ltr,Btr,oG,xtr,ktr,Rtr,wT,Vge,Str,Ptr,rG,$tr,Itr,Dtr,AT,zge,jtr,Ntr,tG,qtr,Gtr,Otr,LT,Wge,Xtr,Vtr,aG,ztr,Wtr,Qtr,BT,Qge,Htr,Utr,nG,Jtr,Ytr,Ktr,xT,Hge,Ztr,ear,sG,oar,rar,tar,kT,Uge,aar,nar,lG,sar,lar,iar,RT,Jge,dar,car,iG,far,mar,gar,Yge,har,par,R6,XBe,uc,ST,Kge,S6,_ar,Zge,uar,VBe,Tr,P6,bar,bc,Tar,ehe,Far,Car,ohe,Mar,Ear,yar,$6,war,rhe,Aar,Lar,Bar,gt,I6,xar,the,kar,Rar,vc,Sar,ahe,Par,$ar,nhe,Iar,Dar,jar,she,Nar,qar,D6,Gar,bo,j6,Oar,lhe,Xar,Var,pn,zar,ihe,War,Qar,dhe,Har,Uar,che,Jar,Yar,Kar,pe,PT,fhe,Zar,enr,dG,onr,rnr,tnr,$T,mhe,anr,nnr,cG,snr,lnr,inr,IT,ghe,dnr,cnr,fG,fnr,mnr,gnr,DT,hhe,hnr,pnr,mG,_nr,unr,bnr,jT,phe,vnr,Tnr,gG,Fnr,Cnr,Mnr,NT,_he,Enr,ynr,hG,wnr,Anr,Lnr,qT,uhe,Bnr,xnr,pG,knr,Rnr,Snr,GT,bhe,Pnr,$nr,_G,Inr,Dnr,jnr,OT,vhe,Nnr,qnr,uG,Gnr,Onr,Xnr,XT,The,Vnr,znr,bG,Wnr,Qnr,Hnr,Fhe,Unr,Jnr,N6,zBe,Tc,VT,Che,q6,Ynr,Mhe,Knr,WBe,Fr,G6,Znr,Fc,esr,Ehe,osr,rsr,yhe,tsr,asr,nsr,O6,ssr,whe,lsr,isr,dsr,ht,X6,csr,Ahe,fsr,msr,Cc,gsr,Lhe,hsr,psr,Bhe,_sr,usr,bsr,xhe,vsr,Tsr,V6,Fsr,vo,z6,Csr,khe,Msr,Esr,_n,ysr,Rhe,wsr,Asr,She,Lsr,Bsr,Phe,xsr,ksr,Rsr,X,zT,$he,Ssr,Psr,vG,$sr,Isr,Dsr,WT,Ihe,jsr,Nsr,TG,qsr,Gsr,Osr,QT,Dhe,Xsr,Vsr,FG,zsr,Wsr,Qsr,HT,jhe,Hsr,Usr,CG,Jsr,Ysr,Ksr,UT,Nhe,Zsr,elr,MG,olr,rlr,tlr,JT,qhe,alr,nlr,EG,slr,llr,ilr,YT,Ghe,dlr,clr,yG,flr,mlr,glr,KT,Ohe,hlr,plr,wG,_lr,ulr,blr,ZT,Xhe,vlr,Tlr,AG,Flr,Clr,Mlr,eF,Vhe,Elr,ylr,LG,wlr,Alr,Llr,oF,zhe,Blr,xlr,BG,klr,Rlr,Slr,rF,Whe,Plr,$lr,xG,Ilr,Dlr,jlr,tF,Qhe,Nlr,qlr,kG,Glr,Olr,Xlr,aF,Hhe,Vlr,zlr,RG,Wlr,Qlr,Hlr,nF,Uhe,Ulr,Jlr,SG,Ylr,Klr,Zlr,sF,Jhe,eir,oir,PG,rir,tir,air,lF,Yhe,nir,sir,$G,lir,iir,dir,iF,Khe,cir,fir,IG,mir,gir,hir,dF,Zhe,pir,_ir,DG,uir,bir,vir,cF,epe,Tir,Fir,jG,Cir,Mir,Eir,fF,ope,yir,wir,NG,Air,Lir,Bir,mF,rpe,xir,kir,qG,Rir,Sir,Pir,gF,tpe,$ir,Iir,GG,Dir,jir,Nir,hF,ape,qir,Gir,OG,Oir,Xir,Vir,pF,npe,zir,Wir,XG,Qir,Hir,Uir,spe,Jir,Yir,W6,QBe,Mc,_F,lpe,Q6,Kir,ipe,Zir,HBe,Cr,H6,edr,Ec,odr,dpe,rdr,tdr,cpe,adr,ndr,sdr,U6,ldr,fpe,idr,ddr,cdr,pt,J6,fdr,mpe,mdr,gdr,yc,hdr,gpe,pdr,_dr,hpe,udr,bdr,vdr,ppe,Tdr,Fdr,Y6,Cdr,To,K6,Mdr,_pe,Edr,ydr,un,wdr,upe,Adr,Ldr,bpe,Bdr,xdr,vpe,kdr,Rdr,Sdr,te,uF,Tpe,Pdr,$dr,VG,Idr,Ddr,jdr,bF,Fpe,Ndr,qdr,zG,Gdr,Odr,Xdr,vF,Cpe,Vdr,zdr,WG,Wdr,Qdr,Hdr,TF,Mpe,Udr,Jdr,QG,Ydr,Kdr,Zdr,FF,Epe,ecr,ocr,HG,rcr,tcr,acr,CF,ype,ncr,scr,UG,lcr,icr,dcr,MF,wpe,ccr,fcr,JG,mcr,gcr,hcr,EF,Ape,pcr,_cr,YG,ucr,bcr,vcr,yF,Lpe,Tcr,Fcr,KG,Ccr,Mcr,Ecr,wF,Bpe,ycr,wcr,ZG,Acr,Lcr,Bcr,AF,xpe,xcr,kcr,eO,Rcr,Scr,Pcr,LF,kpe,$cr,Icr,oO,Dcr,jcr,Ncr,BF,Rpe,qcr,Gcr,rO,Ocr,Xcr,Vcr,xF,Spe,zcr,Wcr,tO,Qcr,Hcr,Ucr,kF,Ppe,Jcr,Ycr,aO,Kcr,Zcr,efr,RF,$pe,ofr,rfr,nO,tfr,afr,nfr,SF,Ipe,sfr,lfr,sO,ifr,dfr,cfr,Dpe,ffr,mfr,Z6,UBe,wc,PF,jpe,eA,gfr,Npe,hfr,JBe,Mr,oA,pfr,Ac,_fr,qpe,ufr,bfr,Gpe,vfr,Tfr,Ffr,rA,Cfr,Ope,Mfr,Efr,yfr,_t,tA,wfr,Xpe,Afr,Lfr,Lc,Bfr,Vpe,xfr,kfr,zpe,Rfr,Sfr,Pfr,Wpe,$fr,Ifr,aA,Dfr,Fo,nA,jfr,Qpe,Nfr,qfr,bn,Gfr,Hpe,Ofr,Xfr,Upe,Vfr,zfr,Jpe,Wfr,Qfr,Hfr,Ype,$F,Kpe,Ufr,Jfr,lO,Yfr,Kfr,Zfr,Zpe,emr,omr,sA,YBe,Bc,IF,e_e,lA,rmr,o_e,tmr,KBe,Er,iA,amr,xc,nmr,r_e,smr,lmr,t_e,imr,dmr,cmr,dA,fmr,a_e,mmr,gmr,hmr,ut,cA,pmr,n_e,_mr,umr,kc,bmr,s_e,vmr,Tmr,l_e,Fmr,Cmr,Mmr,i_e,Emr,ymr,fA,wmr,Co,mA,Amr,d_e,Lmr,Bmr,vn,xmr,c_e,kmr,Rmr,f_e,Smr,Pmr,m_e,$mr,Imr,Dmr,K,DF,g_e,jmr,Nmr,iO,qmr,Gmr,Omr,jF,h_e,Xmr,Vmr,dO,zmr,Wmr,Qmr,NF,p_e,Hmr,Umr,cO,Jmr,Ymr,Kmr,qF,__e,Zmr,egr,fO,ogr,rgr,tgr,GF,u_e,agr,ngr,mO,sgr,lgr,igr,OF,b_e,dgr,cgr,gO,fgr,mgr,ggr,XF,v_e,hgr,pgr,hO,_gr,ugr,bgr,VF,T_e,vgr,Tgr,pO,Fgr,Cgr,Mgr,zF,F_e,Egr,ygr,_O,wgr,Agr,Lgr,WF,C_e,Bgr,xgr,uO,kgr,Rgr,Sgr,QF,M_e,Pgr,$gr,bO,Igr,Dgr,jgr,HF,E_e,Ngr,qgr,vO,Ggr,Ogr,Xgr,UF,y_e,Vgr,zgr,TO,Wgr,Qgr,Hgr,JF,w_e,Ugr,Jgr,FO,Ygr,Kgr,Zgr,YF,A_e,ehr,ohr,CO,rhr,thr,ahr,KF,L_e,nhr,shr,MO,lhr,ihr,dhr,ZF,B_e,chr,fhr,EO,mhr,ghr,hhr,e9,x_e,phr,_hr,yO,uhr,bhr,vhr,o9,k_e,Thr,Fhr,wO,Chr,Mhr,Ehr,r9,R_e,yhr,whr,AO,Ahr,Lhr,Bhr,S_e,xhr,khr,gA,ZBe,Rc,t9,P_e,hA,Rhr,$_e,Shr,exe,yr,pA,Phr,Sc,$hr,I_e,Ihr,Dhr,D_e,jhr,Nhr,qhr,_A,Ghr,j_e,Ohr,Xhr,Vhr,bt,uA,zhr,N_e,Whr,Qhr,Pc,Hhr,q_e,Uhr,Jhr,G_e,Yhr,Khr,Zhr,O_e,epr,opr,bA,rpr,Mo,vA,tpr,X_e,apr,npr,Tn,spr,V_e,lpr,ipr,z_e,dpr,cpr,W_e,fpr,mpr,gpr,Z,a9,Q_e,hpr,ppr,LO,_pr,upr,bpr,n9,H_e,vpr,Tpr,BO,Fpr,Cpr,Mpr,s9,U_e,Epr,ypr,xO,wpr,Apr,Lpr,l9,J_e,Bpr,xpr,kO,kpr,Rpr,Spr,i9,Y_e,Ppr,$pr,RO,Ipr,Dpr,jpr,d9,K_e,Npr,qpr,SO,Gpr,Opr,Xpr,c9,Z_e,Vpr,zpr,PO,Wpr,Qpr,Hpr,f9,eue,Upr,Jpr,$O,Ypr,Kpr,Zpr,m9,oue,e_r,o_r,IO,r_r,t_r,a_r,g9,rue,n_r,s_r,DO,l_r,i_r,d_r,h9,tue,c_r,f_r,jO,m_r,g_r,h_r,p9,aue,p_r,__r,NO,u_r,b_r,v_r,_9,nue,T_r,F_r,qO,C_r,M_r,E_r,u9,sue,y_r,w_r,GO,A_r,L_r,B_r,b9,lue,x_r,k_r,OO,R_r,S_r,P_r,v9,iue,$_r,I_r,XO,D_r,j_r,N_r,T9,due,q_r,G_r,VO,O_r,X_r,V_r,F9,cue,z_r,W_r,zO,Q_r,H_r,U_r,C9,fue,J_r,Y_r,WO,K_r,Z_r,eur,mue,our,rur,TA,oxe,$c,M9,gue,FA,tur,hue,aur,rxe,wr,CA,nur,Ic,sur,pue,lur,iur,_ue,dur,cur,fur,MA,mur,uue,gur,hur,pur,vt,EA,_ur,bue,uur,bur,Dc,vur,vue,Tur,Fur,Tue,Cur,Mur,Eur,Fue,yur,wur,yA,Aur,Eo,wA,Lur,Cue,Bur,xur,Fn,kur,Mue,Rur,Sur,Eue,Pur,$ur,yue,Iur,Dur,jur,wue,E9,Aue,Nur,qur,QO,Gur,Our,Xur,Lue,Vur,zur,AA,txe,jc,y9,Bue,LA,Wur,xue,Qur,axe,Ar,BA,Hur,Nc,Uur,kue,Jur,Yur,Rue,Kur,Zur,e1r,xA,o1r,Sue,r1r,t1r,a1r,Tt,kA,n1r,Pue,s1r,l1r,qc,i1r,$ue,d1r,c1r,Iue,f1r,m1r,g1r,Due,h1r,p1r,RA,_1r,yo,SA,u1r,jue,b1r,v1r,Cn,T1r,Nue,F1r,C1r,que,M1r,E1r,Gue,y1r,w1r,A1r,Oue,w9,Xue,L1r,B1r,HO,x1r,k1r,R1r,Vue,S1r,P1r,PA,nxe,Gc,A9,zue,$A,$1r,Wue,I1r,sxe,Lr,IA,D1r,Oc,j1r,Que,N1r,q1r,Hue,G1r,O1r,X1r,DA,V1r,Uue,z1r,W1r,Q1r,Ft,jA,H1r,Jue,U1r,J1r,Xc,Y1r,Yue,K1r,Z1r,Kue,ebr,obr,rbr,Zue,tbr,abr,NA,nbr,wo,qA,sbr,e1e,lbr,ibr,Mn,dbr,o1e,cbr,fbr,r1e,mbr,gbr,t1e,hbr,pbr,_br,z,L9,a1e,ubr,bbr,UO,vbr,Tbr,Fbr,B9,n1e,Cbr,Mbr,JO,Ebr,ybr,wbr,x9,s1e,Abr,Lbr,YO,Bbr,xbr,kbr,k9,l1e,Rbr,Sbr,KO,Pbr,$br,Ibr,R9,i1e,Dbr,jbr,ZO,Nbr,qbr,Gbr,S9,d1e,Obr,Xbr,eX,Vbr,zbr,Wbr,P9,c1e,Qbr,Hbr,oX,Ubr,Jbr,Ybr,$9,f1e,Kbr,Zbr,rX,e3r,o3r,r3r,I9,m1e,t3r,a3r,tX,n3r,s3r,l3r,D9,g1e,i3r,d3r,aX,c3r,f3r,m3r,j9,h1e,g3r,h3r,nX,p3r,_3r,u3r,N9,p1e,b3r,v3r,sX,T3r,F3r,C3r,q9,_1e,M3r,E3r,lX,y3r,w3r,A3r,G9,u1e,L3r,B3r,iX,x3r,k3r,R3r,O9,b1e,S3r,P3r,dX,$3r,I3r,D3r,X9,v1e,j3r,N3r,cX,q3r,G3r,O3r,V9,T1e,X3r,V3r,fX,z3r,W3r,Q3r,z9,F1e,H3r,U3r,mX,J3r,Y3r,K3r,W9,C1e,Z3r,e5r,gX,o5r,r5r,t5r,Q9,M1e,a5r,n5r,hX,s5r,l5r,i5r,H9,E1e,d5r,c5r,pX,f5r,m5r,g5r,U9,y1e,h5r,p5r,_X,_5r,u5r,b5r,J9,w1e,v5r,T5r,uX,F5r,C5r,M5r,Y9,A1e,E5r,y5r,bX,w5r,A5r,L5r,L1e,B5r,x5r,GA,lxe,Vc,K9,B1e,OA,k5r,x1e,R5r,ixe,Br,XA,S5r,zc,P5r,k1e,$5r,I5r,R1e,D5r,j5r,N5r,VA,q5r,S1e,G5r,O5r,X5r,Ct,zA,V5r,P1e,z5r,W5r,Wc,Q5r,$1e,H5r,U5r,I1e,J5r,Y5r,K5r,D1e,Z5r,e2r,WA,o2r,Ao,QA,r2r,j1e,t2r,a2r,En,n2r,N1e,s2r,l2r,q1e,i2r,d2r,G1e,c2r,f2r,m2r,yn,Z9,O1e,g2r,h2r,vX,p2r,_2r,u2r,eC,X1e,b2r,v2r,TX,T2r,F2r,C2r,oC,V1e,M2r,E2r,FX,y2r,w2r,A2r,rC,z1e,L2r,B2r,CX,x2r,k2r,R2r,W1e,S2r,P2r,HA,dxe,Qc,tC,Q1e,UA,$2r,H1e,I2r,cxe,xr,JA,D2r,Hc,j2r,U1e,N2r,q2r,J1e,G2r,O2r,X2r,YA,V2r,Y1e,z2r,W2r,Q2r,Mt,KA,H2r,K1e,U2r,J2r,Uc,Y2r,Z1e,K2r,Z2r,ebe,evr,ovr,rvr,obe,tvr,avr,ZA,nvr,Lo,e0,svr,rbe,lvr,ivr,wn,dvr,tbe,cvr,fvr,abe,mvr,gvr,nbe,hvr,pvr,_vr,fe,aC,sbe,uvr,bvr,MX,vvr,Tvr,Fvr,nC,lbe,Cvr,Mvr,EX,Evr,yvr,wvr,sC,ibe,Avr,Lvr,yX,Bvr,xvr,kvr,lC,dbe,Rvr,Svr,wX,Pvr,$vr,Ivr,iC,cbe,Dvr,jvr,AX,Nvr,qvr,Gvr,dC,fbe,Ovr,Xvr,LX,Vvr,zvr,Wvr,cC,mbe,Qvr,Hvr,BX,Uvr,Jvr,Yvr,fC,gbe,Kvr,Zvr,xX,eTr,oTr,rTr,mC,hbe,tTr,aTr,kX,nTr,sTr,lTr,gC,pbe,iTr,dTr,RX,cTr,fTr,mTr,hC,_be,gTr,hTr,SX,pTr,_Tr,uTr,ube,bTr,vTr,o0,fxe,Jc,pC,bbe,r0,TTr,vbe,FTr,mxe,kr,t0,CTr,Yc,MTr,Tbe,ETr,yTr,Fbe,wTr,ATr,LTr,a0,BTr,Cbe,xTr,kTr,RTr,Et,n0,STr,Mbe,PTr,$Tr,Kc,ITr,Ebe,DTr,jTr,ybe,NTr,qTr,GTr,wbe,OTr,XTr,s0,VTr,Bo,l0,zTr,Abe,WTr,QTr,An,HTr,Lbe,UTr,JTr,Bbe,YTr,KTr,xbe,ZTr,eFr,oFr,ve,_C,kbe,rFr,tFr,PX,aFr,nFr,sFr,uC,Rbe,lFr,iFr,$X,dFr,cFr,fFr,bC,Sbe,mFr,gFr,IX,hFr,pFr,_Fr,vC,Pbe,uFr,bFr,DX,vFr,TFr,FFr,TC,$be,CFr,MFr,jX,EFr,yFr,wFr,FC,Ibe,AFr,LFr,NX,BFr,xFr,kFr,CC,Dbe,RFr,SFr,qX,PFr,$Fr,IFr,MC,jbe,DFr,jFr,GX,NFr,qFr,GFr,EC,Nbe,OFr,XFr,OX,VFr,zFr,WFr,qbe,QFr,HFr,i0,gxe,Zc,yC,Gbe,d0,UFr,Obe,JFr,hxe,Rr,c0,YFr,ef,KFr,Xbe,ZFr,e9r,Vbe,o9r,r9r,t9r,f0,a9r,zbe,n9r,s9r,l9r,yt,m0,i9r,Wbe,d9r,c9r,of,f9r,Qbe,m9r,g9r,Hbe,h9r,p9r,_9r,Ube,u9r,b9r,g0,v9r,xo,h0,T9r,Jbe,F9r,C9r,Ln,M9r,Ybe,E9r,y9r,Kbe,w9r,A9r,Zbe,L9r,B9r,x9r,Te,wC,e3e,k9r,R9r,XX,S9r,P9r,$9r,AC,o3e,I9r,D9r,VX,j9r,N9r,q9r,LC,r3e,G9r,O9r,zX,X9r,V9r,z9r,BC,t3e,W9r,Q9r,WX,H9r,U9r,J9r,xC,a3e,Y9r,K9r,QX,Z9r,eCr,oCr,kC,n3e,rCr,tCr,HX,aCr,nCr,sCr,RC,s3e,lCr,iCr,UX,dCr,cCr,fCr,SC,l3e,mCr,gCr,JX,hCr,pCr,_Cr,PC,i3e,uCr,bCr,YX,vCr,TCr,FCr,d3e,CCr,MCr,p0,pxe,rf,$C,c3e,_0,ECr,f3e,yCr,_xe,Sr,u0,wCr,tf,ACr,m3e,LCr,BCr,g3e,xCr,kCr,RCr,b0,SCr,h3e,PCr,$Cr,ICr,wt,v0,DCr,p3e,jCr,NCr,af,qCr,_3e,GCr,OCr,u3e,XCr,VCr,zCr,b3e,WCr,QCr,T0,HCr,ko,F0,UCr,v3e,JCr,YCr,Bn,KCr,T3e,ZCr,e4r,F3e,o4r,r4r,C3e,t4r,a4r,n4r,Fe,IC,M3e,s4r,l4r,KX,i4r,d4r,c4r,DC,E3e,f4r,m4r,ZX,g4r,h4r,p4r,jC,y3e,_4r,u4r,eV,b4r,v4r,T4r,NC,w3e,F4r,C4r,oV,M4r,E4r,y4r,qC,A3e,w4r,A4r,rV,L4r,B4r,x4r,GC,L3e,k4r,R4r,tV,S4r,P4r,$4r,OC,B3e,I4r,D4r,aV,j4r,N4r,q4r,XC,x3e,G4r,O4r,nV,X4r,V4r,z4r,VC,k3e,W4r,Q4r,sV,H4r,U4r,J4r,R3e,Y4r,K4r,C0,uxe,nf,zC,S3e,M0,Z4r,P3e,eMr,bxe,Pr,E0,oMr,sf,rMr,$3e,tMr,aMr,I3e,nMr,sMr,lMr,y0,iMr,D3e,dMr,cMr,fMr,At,w0,mMr,j3e,gMr,hMr,lf,pMr,N3e,_Mr,uMr,q3e,bMr,vMr,TMr,G3e,FMr,CMr,A0,MMr,Ro,L0,EMr,O3e,yMr,wMr,xn,AMr,X3e,LMr,BMr,V3e,xMr,kMr,z3e,RMr,SMr,PMr,Ce,WC,W3e,$Mr,IMr,lV,DMr,jMr,NMr,QC,Q3e,qMr,GMr,iV,OMr,XMr,VMr,HC,H3e,zMr,WMr,dV,QMr,HMr,UMr,UC,U3e,JMr,YMr,cV,KMr,ZMr,eEr,JC,J3e,oEr,rEr,fV,tEr,aEr,nEr,YC,Y3e,sEr,lEr,mV,iEr,dEr,cEr,KC,K3e,fEr,mEr,gV,gEr,hEr,pEr,ZC,Z3e,_Er,uEr,hV,bEr,vEr,TEr,e4,e5e,FEr,CEr,pV,MEr,EEr,yEr,o5e,wEr,AEr,B0,vxe,df,o4,r5e,x0,LEr,t5e,BEr,Txe,$r,k0,xEr,cf,kEr,a5e,REr,SEr,n5e,PEr,$Er,IEr,R0,DEr,s5e,jEr,NEr,qEr,Lt,S0,GEr,l5e,OEr,XEr,ff,VEr,i5e,zEr,WEr,d5e,QEr,HEr,UEr,c5e,JEr,YEr,P0,KEr,So,$0,ZEr,f5e,eyr,oyr,kn,ryr,m5e,tyr,ayr,g5e,nyr,syr,h5e,lyr,iyr,dyr,so,r4,p5e,cyr,fyr,_V,myr,gyr,hyr,t4,_5e,pyr,_yr,uV,uyr,byr,vyr,a4,u5e,Tyr,Fyr,bV,Cyr,Myr,Eyr,n4,b5e,yyr,wyr,vV,Ayr,Lyr,Byr,s4,v5e,xyr,kyr,TV,Ryr,Syr,Pyr,l4,T5e,$yr,Iyr,FV,Dyr,jyr,Nyr,i4,F5e,qyr,Gyr,CV,Oyr,Xyr,Vyr,C5e,zyr,Wyr,I0,Fxe,mf,d4,M5e,D0,Qyr,E5e,Hyr,Cxe,Ir,j0,Uyr,gf,Jyr,y5e,Yyr,Kyr,w5e,Zyr,ewr,owr,N0,rwr,A5e,twr,awr,nwr,Bt,q0,swr,L5e,lwr,iwr,hf,dwr,B5e,cwr,fwr,x5e,mwr,gwr,hwr,k5e,pwr,_wr,G0,uwr,Po,O0,bwr,R5e,vwr,Twr,Rn,Fwr,S5e,Cwr,Mwr,P5e,Ewr,ywr,$5e,wwr,Awr,Lwr,lo,c4,I5e,Bwr,xwr,MV,kwr,Rwr,Swr,f4,D5e,Pwr,$wr,EV,Iwr,Dwr,jwr,m4,j5e,Nwr,qwr,yV,Gwr,Owr,Xwr,g4,N5e,Vwr,zwr,wV,Wwr,Qwr,Hwr,h4,q5e,Uwr,Jwr,AV,Ywr,Kwr,Zwr,p4,G5e,e6r,o6r,LV,r6r,t6r,a6r,_4,O5e,n6r,s6r,BV,l6r,i6r,d6r,X5e,c6r,f6r,X0,Mxe,pf,u4,V5e,V0,m6r,z5e,g6r,Exe,Dr,z0,h6r,_f,p6r,W5e,_6r,u6r,Q5e,b6r,v6r,T6r,W0,F6r,H5e,C6r,M6r,E6r,xt,Q0,y6r,U5e,w6r,A6r,uf,L6r,J5e,B6r,x6r,Y5e,k6r,R6r,S6r,K5e,P6r,$6r,H0,I6r,$o,U0,D6r,Z5e,j6r,N6r,Sn,q6r,e2e,G6r,O6r,o2e,X6r,V6r,r2e,z6r,W6r,Q6r,t2e,b4,a2e,H6r,U6r,xV,J6r,Y6r,K6r,n2e,Z6r,eAr,J0,yxe,bf,v4,s2e,Y0,oAr,l2e,rAr,wxe,jr,K0,tAr,vf,aAr,i2e,nAr,sAr,d2e,lAr,iAr,dAr,Z0,cAr,c2e,fAr,mAr,gAr,kt,eL,hAr,f2e,pAr,_Ar,Tf,uAr,m2e,bAr,vAr,g2e,TAr,FAr,CAr,h2e,MAr,EAr,oL,yAr,Io,rL,wAr,p2e,AAr,LAr,Pn,BAr,_2e,xAr,kAr,u2e,RAr,SAr,b2e,PAr,$Ar,IAr,tL,T4,v2e,DAr,jAr,kV,NAr,qAr,GAr,F4,T2e,OAr,XAr,RV,VAr,zAr,WAr,F2e,QAr,HAr,aL,Axe,Ff,C4,C2e,nL,UAr,M2e,JAr,Lxe,Nr,sL,YAr,Cf,KAr,E2e,ZAr,e0r,y2e,o0r,r0r,t0r,lL,a0r,w2e,n0r,s0r,l0r,Rt,iL,i0r,A2e,d0r,c0r,Mf,f0r,L2e,m0r,g0r,B2e,h0r,p0r,_0r,x2e,u0r,b0r,dL,v0r,Do,cL,T0r,k2e,F0r,C0r,$n,M0r,R2e,E0r,y0r,S2e,w0r,A0r,P2e,L0r,B0r,x0r,$2e,M4,I2e,k0r,R0r,SV,S0r,P0r,$0r,D2e,I0r,D0r,fL,Bxe;return ce=new V({}),$a=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),AM=new V({}),LM=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),xf=new j0r({props:{warning:"&lcub;true}",$$slots:{default:[B3t]},$$scope:{ctx:Li}}}),BM=new V({}),xM=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/configuration_auto.py#L526"}}),SM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/configuration_auto.py#L549",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),PM=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),$M=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/configuration_auto.py#L671",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),IM=new V({}),DM=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/tokenization_auto.py#L352"}}),qM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15931/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),GM=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),OM=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),XM=new V({}),VM=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/feature_extraction_auto.py#L169"}}),QM=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/feature_extraction_auto.py#L183",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15931/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),mh=new j0r({props:{$$slots:{default:[x3t]},$$scope:{ctx:Li}}}),HM=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),UM=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/feature_extraction_auto.py#L310",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),JM=new V({}),YM=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/processing_auto.py#L71"}}),eE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Mh=new j0r({props:{$$slots:{default:[k3t]},$$scope:{ctx:Li}}}),oE=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),rE=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),tE=new V({}),aE=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L687"}}),sE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),lE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),iE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cE=new V({}),fE=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L694"}}),gE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),hE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),pE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_E=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uE=new V({}),bE=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L709"}}),TE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),FE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),CE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ME=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EE=new V({}),yE=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L716"}}),AE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),LE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),BE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kE=new V({}),RE=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L723"}}),PE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),$E=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),IE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jE=new V({}),NE=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L732"}}),GE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),OE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),XE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VE=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zE=new V({}),WE=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L766"}}),HE=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),UE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),JE=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KE=new V({}),ZE=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L773"}}),oy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),ty=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ay=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ny=new V({}),sy=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L759"}}),iy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),cy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),my=new V({}),gy=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L741"}}),py=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),uy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),by=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vy=new V({}),Ty=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L748"}}),Cy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),My=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Ey=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wy=new V({}),Ay=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L782"}}),By=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15931/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),ky=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sy=new V({}),Py=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L812"}}),Iy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),jy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new V({}),Gy=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L819"}}),Xy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),zy=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Wy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qy=new V({}),Hy=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L842"}}),Jy=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Yy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Ky=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ew=new V({}),ow=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L826"}}),tw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),aw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),nw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lw=new V({}),iw=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L833"}}),cw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),mw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pw=new V({}),_w=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L851"}}),bw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Tw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cw=new V({}),Mw=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L858"}}),yw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Aw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new V({}),xw=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L805"}}),Rw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Pw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$w=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iw=new V({}),Dw=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L789"}}),Nw=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Gw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xw=new V({}),Vw=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_auto.py#L796"}}),Ww=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Hw=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new V({}),Kw=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_tf_auto.py#L373"}}),e6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),o6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),r6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t6=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a6=new V({}),n6=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_tf_auto.py#L380"}}),l6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),i6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),d6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f6=new V({}),m6=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_tf_auto.py#L395"}}),h6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),p6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),_6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),u6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b6=new V({}),v6=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_tf_auto.py#L402"}}),F6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),C6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),M6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w6=new V({}),A6=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),B6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),x6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),k6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S6=new V({}),P6=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),I6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),D6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),j6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q6=new V({}),G6=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),X6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),V6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),z6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q6=new V({}),H6=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),J6=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Y6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),K6=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eA=new V({}),oA=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),tA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),aA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),nA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lA=new V({}),iA=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),cA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),fA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),mA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hA=new V({}),pA=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),uA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),bA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),vA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FA=new V({}),CA=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_tf_auto.py#L409"}}),EA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),yA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),wA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LA=new V({}),BA=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),kA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),RA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),SA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$A=new V({}),IA=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_flax_auto.py#L229"}}),jA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),qA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OA=new V({}),XA=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),zA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),WA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),QA=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UA=new V({}),JA=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_flax_auto.py#L236"}}),KA=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),ZA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),e0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r0=new V({}),t0=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),n0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),s0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),l0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d0=new V({}),c0=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),m0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),g0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),h0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_0=new V({}),u0=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),v0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),T0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),F0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M0=new V({}),E0=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_flax_auto.py#L275"}}),w0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),A0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),L0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x0=new V({}),k0=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),S0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),P0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),$0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new V({}),j0=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_flax_auto.py#L291"}}),q0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),G0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),O0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V0=new V({}),z0=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),Q0=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),H0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),U0=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y0=new V({}),K0=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),eL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),oL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),rL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nL=new V({}),sL=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/modeling_flax_auto.py#L316"}}),iL=new E({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15931/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15931/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),cL=new E({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15931/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15931/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15931/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Be=l(),ie=a("h1"),me=a("a"),no=a("span"),f(ce.$$.fragment),ue=l(),Go=a("span"),Bi=o("Auto Classes"),yf=l(),sa=a("p"),xi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=a("code"),MM=o("from_pretrained()"),wf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),io=a("p"),Ri=o("Instantiating one of "),In=a("a"),EM=o("AutoConfig"),Dn=o(", "),jn=a("a"),yM=o("AutoModel"),Si=o(`, and
`),Nn=a("a"),wM=o("AutoTokenizer"),Pi=o(" will directly create a class of the relevant architecture. For instance"),Af=l(),f($a.$$.fragment),co=l(),ge=a("p"),d8=o("will create a model that is an instance of "),$i=a("a"),c8=o("BertModel"),f8=o("."),Oo=l(),Ia=a("p"),m8=o("There is one class of "),Lf=a("code"),g8=o("AutoModel"),qRe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),x7e=l(),Ii=a("h2"),Bf=a("a"),EW=a("span"),f(AM.$$.fragment),GRe=l(),yW=a("span"),ORe=o("Extending the Auto Classes"),k7e=l(),qn=a("p"),XRe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),wW=a("code"),VRe=o("NewModel"),zRe=o(", make sure you have a "),AW=a("code"),WRe=o("NewModelConfig"),QRe=o(` then you can add those to the auto
classes like this:`),R7e=l(),f(LM.$$.fragment),S7e=l(),h8=a("p"),HRe=o("You will then be able to use the auto classes like you would usually do!"),P7e=l(),f(xf.$$.fragment),$7e=l(),Di=a("h2"),kf=a("a"),LW=a("span"),f(BM.$$.fragment),URe=l(),BW=a("span"),JRe=o("AutoConfig"),I7e=l(),Xo=a("div"),f(xM.$$.fragment),YRe=l(),kM=a("p"),KRe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),p8=a("a"),ZRe=o("from_pretrained()"),eSe=o(" class method."),oSe=l(),RM=a("p"),rSe=o("This class cannot be instantiated directly using "),xW=a("code"),tSe=o("__init__()"),aSe=o(" (throws an error)."),nSe=l(),fo=a("div"),f(SM.$$.fragment),sSe=l(),kW=a("p"),lSe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),iSe=l(),ji=a("p"),dSe=o("The configuration class to instantiate is selected based on the "),RW=a("code"),cSe=o("model_type"),fSe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),SW=a("code"),mSe=o("pretrained_model_name_or_path"),gSe=o(":"),hSe=l(),v=a("ul"),Rf=a("li"),PW=a("strong"),pSe=o("albert"),_Se=o(" \u2014 "),_8=a("a"),uSe=o("AlbertConfig"),bSe=o(" (ALBERT model)"),vSe=l(),Sf=a("li"),$W=a("strong"),TSe=o("bart"),FSe=o(" \u2014 "),u8=a("a"),CSe=o("BartConfig"),MSe=o(" (BART model)"),ESe=l(),Pf=a("li"),IW=a("strong"),ySe=o("beit"),wSe=o(" \u2014 "),b8=a("a"),ASe=o("BeitConfig"),LSe=o(" (BEiT model)"),BSe=l(),$f=a("li"),DW=a("strong"),xSe=o("bert"),kSe=o(" \u2014 "),v8=a("a"),RSe=o("BertConfig"),SSe=o(" (BERT model)"),PSe=l(),If=a("li"),jW=a("strong"),$Se=o("bert-generation"),ISe=o(" \u2014 "),T8=a("a"),DSe=o("BertGenerationConfig"),jSe=o(" (Bert Generation model)"),NSe=l(),Df=a("li"),NW=a("strong"),qSe=o("big_bird"),GSe=o(" \u2014 "),F8=a("a"),OSe=o("BigBirdConfig"),XSe=o(" (BigBird model)"),VSe=l(),jf=a("li"),qW=a("strong"),zSe=o("bigbird_pegasus"),WSe=o(" \u2014 "),C8=a("a"),QSe=o("BigBirdPegasusConfig"),HSe=o(" (BigBirdPegasus model)"),USe=l(),Nf=a("li"),GW=a("strong"),JSe=o("blenderbot"),YSe=o(" \u2014 "),M8=a("a"),KSe=o("BlenderbotConfig"),ZSe=o(" (Blenderbot model)"),ePe=l(),qf=a("li"),OW=a("strong"),oPe=o("blenderbot-small"),rPe=o(" \u2014 "),E8=a("a"),tPe=o("BlenderbotSmallConfig"),aPe=o(" (BlenderbotSmall model)"),nPe=l(),Gf=a("li"),XW=a("strong"),sPe=o("camembert"),lPe=o(" \u2014 "),y8=a("a"),iPe=o("CamembertConfig"),dPe=o(" (CamemBERT model)"),cPe=l(),Of=a("li"),VW=a("strong"),fPe=o("canine"),mPe=o(" \u2014 "),w8=a("a"),gPe=o("CanineConfig"),hPe=o(" (Canine model)"),pPe=l(),Xf=a("li"),zW=a("strong"),_Pe=o("clip"),uPe=o(" \u2014 "),A8=a("a"),bPe=o("CLIPConfig"),vPe=o(" (CLIP model)"),TPe=l(),Vf=a("li"),WW=a("strong"),FPe=o("convbert"),CPe=o(" \u2014 "),L8=a("a"),MPe=o("ConvBertConfig"),EPe=o(" (ConvBERT model)"),yPe=l(),zf=a("li"),QW=a("strong"),wPe=o("convnext"),APe=o(" \u2014 "),B8=a("a"),LPe=o("ConvNextConfig"),BPe=o(" (ConvNext model)"),xPe=l(),Wf=a("li"),HW=a("strong"),kPe=o("ctrl"),RPe=o(" \u2014 "),x8=a("a"),SPe=o("CTRLConfig"),PPe=o(" (CTRL model)"),$Pe=l(),Qf=a("li"),UW=a("strong"),IPe=o("data2vec-audio"),DPe=o(" \u2014 "),k8=a("a"),jPe=o("Data2VecAudioConfig"),NPe=o(" (Data2VecAudio model)"),qPe=l(),Hf=a("li"),JW=a("strong"),GPe=o("data2vec-text"),OPe=o(" \u2014 "),R8=a("a"),XPe=o("Data2VecTextConfig"),VPe=o(" (Data2VecText model)"),zPe=l(),Uf=a("li"),YW=a("strong"),WPe=o("deberta"),QPe=o(" \u2014 "),S8=a("a"),HPe=o("DebertaConfig"),UPe=o(" (DeBERTa model)"),JPe=l(),Jf=a("li"),KW=a("strong"),YPe=o("deberta-v2"),KPe=o(" \u2014 "),P8=a("a"),ZPe=o("DebertaV2Config"),e$e=o(" (DeBERTa-v2 model)"),o$e=l(),Yf=a("li"),ZW=a("strong"),r$e=o("deit"),t$e=o(" \u2014 "),$8=a("a"),a$e=o("DeiTConfig"),n$e=o(" (DeiT model)"),s$e=l(),Kf=a("li"),eQ=a("strong"),l$e=o("detr"),i$e=o(" \u2014 "),I8=a("a"),d$e=o("DetrConfig"),c$e=o(" (DETR model)"),f$e=l(),Zf=a("li"),oQ=a("strong"),m$e=o("distilbert"),g$e=o(" \u2014 "),D8=a("a"),h$e=o("DistilBertConfig"),p$e=o(" (DistilBERT model)"),_$e=l(),em=a("li"),rQ=a("strong"),u$e=o("dpr"),b$e=o(" \u2014 "),j8=a("a"),v$e=o("DPRConfig"),T$e=o(" (DPR model)"),F$e=l(),om=a("li"),tQ=a("strong"),C$e=o("electra"),M$e=o(" \u2014 "),N8=a("a"),E$e=o("ElectraConfig"),y$e=o(" (ELECTRA model)"),w$e=l(),rm=a("li"),aQ=a("strong"),A$e=o("encoder-decoder"),L$e=o(" \u2014 "),q8=a("a"),B$e=o("EncoderDecoderConfig"),x$e=o(" (Encoder decoder model)"),k$e=l(),tm=a("li"),nQ=a("strong"),R$e=o("flaubert"),S$e=o(" \u2014 "),G8=a("a"),P$e=o("FlaubertConfig"),$$e=o(" (FlauBERT model)"),I$e=l(),am=a("li"),sQ=a("strong"),D$e=o("fnet"),j$e=o(" \u2014 "),O8=a("a"),N$e=o("FNetConfig"),q$e=o(" (FNet model)"),G$e=l(),nm=a("li"),lQ=a("strong"),O$e=o("fsmt"),X$e=o(" \u2014 "),X8=a("a"),V$e=o("FSMTConfig"),z$e=o(" (FairSeq Machine-Translation model)"),W$e=l(),sm=a("li"),iQ=a("strong"),Q$e=o("funnel"),H$e=o(" \u2014 "),V8=a("a"),U$e=o("FunnelConfig"),J$e=o(" (Funnel Transformer model)"),Y$e=l(),lm=a("li"),dQ=a("strong"),K$e=o("gpt2"),Z$e=o(" \u2014 "),z8=a("a"),eIe=o("GPT2Config"),oIe=o(" (OpenAI GPT-2 model)"),rIe=l(),im=a("li"),cQ=a("strong"),tIe=o("gpt_neo"),aIe=o(" \u2014 "),W8=a("a"),nIe=o("GPTNeoConfig"),sIe=o(" (GPT Neo model)"),lIe=l(),dm=a("li"),fQ=a("strong"),iIe=o("gptj"),dIe=o(" \u2014 "),Q8=a("a"),cIe=o("GPTJConfig"),fIe=o(" (GPT-J model)"),mIe=l(),cm=a("li"),mQ=a("strong"),gIe=o("hubert"),hIe=o(" \u2014 "),H8=a("a"),pIe=o("HubertConfig"),_Ie=o(" (Hubert model)"),uIe=l(),fm=a("li"),gQ=a("strong"),bIe=o("ibert"),vIe=o(" \u2014 "),U8=a("a"),TIe=o("IBertConfig"),FIe=o(" (I-BERT model)"),CIe=l(),mm=a("li"),hQ=a("strong"),MIe=o("imagegpt"),EIe=o(" \u2014 "),J8=a("a"),yIe=o("ImageGPTConfig"),wIe=o(" (ImageGPT model)"),AIe=l(),gm=a("li"),pQ=a("strong"),LIe=o("layoutlm"),BIe=o(" \u2014 "),Y8=a("a"),xIe=o("LayoutLMConfig"),kIe=o(" (LayoutLM model)"),RIe=l(),hm=a("li"),_Q=a("strong"),SIe=o("layoutlmv2"),PIe=o(" \u2014 "),K8=a("a"),$Ie=o("LayoutLMv2Config"),IIe=o(" (LayoutLMv2 model)"),DIe=l(),pm=a("li"),uQ=a("strong"),jIe=o("led"),NIe=o(" \u2014 "),Z8=a("a"),qIe=o("LEDConfig"),GIe=o(" (LED model)"),OIe=l(),_m=a("li"),bQ=a("strong"),XIe=o("longformer"),VIe=o(" \u2014 "),e7=a("a"),zIe=o("LongformerConfig"),WIe=o(" (Longformer model)"),QIe=l(),um=a("li"),vQ=a("strong"),HIe=o("luke"),UIe=o(" \u2014 "),o7=a("a"),JIe=o("LukeConfig"),YIe=o(" (LUKE model)"),KIe=l(),bm=a("li"),TQ=a("strong"),ZIe=o("lxmert"),eDe=o(" \u2014 "),r7=a("a"),oDe=o("LxmertConfig"),rDe=o(" (LXMERT model)"),tDe=l(),vm=a("li"),FQ=a("strong"),aDe=o("m2m_100"),nDe=o(" \u2014 "),t7=a("a"),sDe=o("M2M100Config"),lDe=o(" (M2M100 model)"),iDe=l(),Tm=a("li"),CQ=a("strong"),dDe=o("marian"),cDe=o(" \u2014 "),a7=a("a"),fDe=o("MarianConfig"),mDe=o(" (Marian model)"),gDe=l(),Fm=a("li"),MQ=a("strong"),hDe=o("maskformer"),pDe=o(" \u2014 "),n7=a("a"),_De=o("MaskFormerConfig"),uDe=o(" (MaskFormer model)"),bDe=l(),Cm=a("li"),EQ=a("strong"),vDe=o("mbart"),TDe=o(" \u2014 "),s7=a("a"),FDe=o("MBartConfig"),CDe=o(" (mBART model)"),MDe=l(),Mm=a("li"),yQ=a("strong"),EDe=o("megatron-bert"),yDe=o(" \u2014 "),l7=a("a"),wDe=o("MegatronBertConfig"),ADe=o(" (MegatronBert model)"),LDe=l(),Em=a("li"),wQ=a("strong"),BDe=o("mobilebert"),xDe=o(" \u2014 "),i7=a("a"),kDe=o("MobileBertConfig"),RDe=o(" (MobileBERT model)"),SDe=l(),ym=a("li"),AQ=a("strong"),PDe=o("mpnet"),$De=o(" \u2014 "),d7=a("a"),IDe=o("MPNetConfig"),DDe=o(" (MPNet model)"),jDe=l(),wm=a("li"),LQ=a("strong"),NDe=o("mt5"),qDe=o(" \u2014 "),c7=a("a"),GDe=o("MT5Config"),ODe=o(" (mT5 model)"),XDe=l(),Am=a("li"),BQ=a("strong"),VDe=o("nystromformer"),zDe=o(" \u2014 "),f7=a("a"),WDe=o("NystromformerConfig"),QDe=o(" (Nystromformer model)"),HDe=l(),Lm=a("li"),xQ=a("strong"),UDe=o("openai-gpt"),JDe=o(" \u2014 "),m7=a("a"),YDe=o("OpenAIGPTConfig"),KDe=o(" (OpenAI GPT model)"),ZDe=l(),Bm=a("li"),kQ=a("strong"),eje=o("pegasus"),oje=o(" \u2014 "),g7=a("a"),rje=o("PegasusConfig"),tje=o(" (Pegasus model)"),aje=l(),xm=a("li"),RQ=a("strong"),nje=o("perceiver"),sje=o(" \u2014 "),h7=a("a"),lje=o("PerceiverConfig"),ije=o(" (Perceiver model)"),dje=l(),km=a("li"),SQ=a("strong"),cje=o("plbart"),fje=o(" \u2014 "),p7=a("a"),mje=o("PLBartConfig"),gje=o(" (PLBart model)"),hje=l(),Rm=a("li"),PQ=a("strong"),pje=o("poolformer"),_je=o(" \u2014 "),_7=a("a"),uje=o("PoolFormerConfig"),bje=o(" (PoolFormer model)"),vje=l(),Sm=a("li"),$Q=a("strong"),Tje=o("prophetnet"),Fje=o(" \u2014 "),u7=a("a"),Cje=o("ProphetNetConfig"),Mje=o(" (ProphetNet model)"),Eje=l(),Pm=a("li"),IQ=a("strong"),yje=o("qdqbert"),wje=o(" \u2014 "),b7=a("a"),Aje=o("QDQBertConfig"),Lje=o(" (QDQBert model)"),Bje=l(),$m=a("li"),DQ=a("strong"),xje=o("rag"),kje=o(" \u2014 "),v7=a("a"),Rje=o("RagConfig"),Sje=o(" (RAG model)"),Pje=l(),Im=a("li"),jQ=a("strong"),$je=o("realm"),Ije=o(" \u2014 "),T7=a("a"),Dje=o("RealmConfig"),jje=o(" (Realm model)"),Nje=l(),Dm=a("li"),NQ=a("strong"),qje=o("reformer"),Gje=o(" \u2014 "),F7=a("a"),Oje=o("ReformerConfig"),Xje=o(" (Reformer model)"),Vje=l(),jm=a("li"),qQ=a("strong"),zje=o("rembert"),Wje=o(" \u2014 "),C7=a("a"),Qje=o("RemBertConfig"),Hje=o(" (RemBERT model)"),Uje=l(),Nm=a("li"),GQ=a("strong"),Jje=o("retribert"),Yje=o(" \u2014 "),M7=a("a"),Kje=o("RetriBertConfig"),Zje=o(" (RetriBERT model)"),eNe=l(),qm=a("li"),OQ=a("strong"),oNe=o("roberta"),rNe=o(" \u2014 "),E7=a("a"),tNe=o("RobertaConfig"),aNe=o(" (RoBERTa model)"),nNe=l(),Gm=a("li"),XQ=a("strong"),sNe=o("roformer"),lNe=o(" \u2014 "),y7=a("a"),iNe=o("RoFormerConfig"),dNe=o(" (RoFormer model)"),cNe=l(),Om=a("li"),VQ=a("strong"),fNe=o("segformer"),mNe=o(" \u2014 "),w7=a("a"),gNe=o("SegformerConfig"),hNe=o(" (SegFormer model)"),pNe=l(),Xm=a("li"),zQ=a("strong"),_Ne=o("sew"),uNe=o(" \u2014 "),A7=a("a"),bNe=o("SEWConfig"),vNe=o(" (SEW model)"),TNe=l(),Vm=a("li"),WQ=a("strong"),FNe=o("sew-d"),CNe=o(" \u2014 "),L7=a("a"),MNe=o("SEWDConfig"),ENe=o(" (SEW-D model)"),yNe=l(),zm=a("li"),QQ=a("strong"),wNe=o("speech-encoder-decoder"),ANe=o(" \u2014 "),B7=a("a"),LNe=o("SpeechEncoderDecoderConfig"),BNe=o(" (Speech Encoder decoder model)"),xNe=l(),Wm=a("li"),HQ=a("strong"),kNe=o("speech_to_text"),RNe=o(" \u2014 "),x7=a("a"),SNe=o("Speech2TextConfig"),PNe=o(" (Speech2Text model)"),$Ne=l(),Qm=a("li"),UQ=a("strong"),INe=o("speech_to_text_2"),DNe=o(" \u2014 "),k7=a("a"),jNe=o("Speech2Text2Config"),NNe=o(" (Speech2Text2 model)"),qNe=l(),Hm=a("li"),JQ=a("strong"),GNe=o("splinter"),ONe=o(" \u2014 "),R7=a("a"),XNe=o("SplinterConfig"),VNe=o(" (Splinter model)"),zNe=l(),Um=a("li"),YQ=a("strong"),WNe=o("squeezebert"),QNe=o(" \u2014 "),S7=a("a"),HNe=o("SqueezeBertConfig"),UNe=o(" (SqueezeBERT model)"),JNe=l(),Jm=a("li"),KQ=a("strong"),YNe=o("swin"),KNe=o(" \u2014 "),P7=a("a"),ZNe=o("SwinConfig"),eqe=o(" (Swin model)"),oqe=l(),Ym=a("li"),ZQ=a("strong"),rqe=o("t5"),tqe=o(" \u2014 "),$7=a("a"),aqe=o("T5Config"),nqe=o(" (T5 model)"),sqe=l(),Km=a("li"),eH=a("strong"),lqe=o("tapas"),iqe=o(" \u2014 "),I7=a("a"),dqe=o("TapasConfig"),cqe=o(" (TAPAS model)"),fqe=l(),Zm=a("li"),oH=a("strong"),mqe=o("transfo-xl"),gqe=o(" \u2014 "),D7=a("a"),hqe=o("TransfoXLConfig"),pqe=o(" (Transformer-XL model)"),_qe=l(),eg=a("li"),rH=a("strong"),uqe=o("trocr"),bqe=o(" \u2014 "),j7=a("a"),vqe=o("TrOCRConfig"),Tqe=o(" (TrOCR model)"),Fqe=l(),og=a("li"),tH=a("strong"),Cqe=o("unispeech"),Mqe=o(" \u2014 "),N7=a("a"),Eqe=o("UniSpeechConfig"),yqe=o(" (UniSpeech model)"),wqe=l(),rg=a("li"),aH=a("strong"),Aqe=o("unispeech-sat"),Lqe=o(" \u2014 "),q7=a("a"),Bqe=o("UniSpeechSatConfig"),xqe=o(" (UniSpeechSat model)"),kqe=l(),tg=a("li"),nH=a("strong"),Rqe=o("vilt"),Sqe=o(" \u2014 "),G7=a("a"),Pqe=o("ViltConfig"),$qe=o(" (ViLT model)"),Iqe=l(),ag=a("li"),sH=a("strong"),Dqe=o("vision-encoder-decoder"),jqe=o(" \u2014 "),O7=a("a"),Nqe=o("VisionEncoderDecoderConfig"),qqe=o(" (Vision Encoder decoder model)"),Gqe=l(),ng=a("li"),lH=a("strong"),Oqe=o("vision-text-dual-encoder"),Xqe=o(" \u2014 "),X7=a("a"),Vqe=o("VisionTextDualEncoderConfig"),zqe=o(" (VisionTextDualEncoder model)"),Wqe=l(),sg=a("li"),iH=a("strong"),Qqe=o("visual_bert"),Hqe=o(" \u2014 "),V7=a("a"),Uqe=o("VisualBertConfig"),Jqe=o(" (VisualBert model)"),Yqe=l(),lg=a("li"),dH=a("strong"),Kqe=o("vit"),Zqe=o(" \u2014 "),z7=a("a"),eGe=o("ViTConfig"),oGe=o(" (ViT model)"),rGe=l(),ig=a("li"),cH=a("strong"),tGe=o("vit_mae"),aGe=o(" \u2014 "),W7=a("a"),nGe=o("ViTMAEConfig"),sGe=o(" (ViTMAE model)"),lGe=l(),dg=a("li"),fH=a("strong"),iGe=o("wav2vec2"),dGe=o(" \u2014 "),Q7=a("a"),cGe=o("Wav2Vec2Config"),fGe=o(" (Wav2Vec2 model)"),mGe=l(),cg=a("li"),mH=a("strong"),gGe=o("wavlm"),hGe=o(" \u2014 "),H7=a("a"),pGe=o("WavLMConfig"),_Ge=o(" (WavLM model)"),uGe=l(),fg=a("li"),gH=a("strong"),bGe=o("xglm"),vGe=o(" \u2014 "),U7=a("a"),TGe=o("XGLMConfig"),FGe=o(" (XGLM model)"),CGe=l(),mg=a("li"),hH=a("strong"),MGe=o("xlm"),EGe=o(" \u2014 "),J7=a("a"),yGe=o("XLMConfig"),wGe=o(" (XLM model)"),AGe=l(),gg=a("li"),pH=a("strong"),LGe=o("xlm-prophetnet"),BGe=o(" \u2014 "),Y7=a("a"),xGe=o("XLMProphetNetConfig"),kGe=o(" (XLMProphetNet model)"),RGe=l(),hg=a("li"),_H=a("strong"),SGe=o("xlm-roberta"),PGe=o(" \u2014 "),K7=a("a"),$Ge=o("XLMRobertaConfig"),IGe=o(" (XLM-RoBERTa model)"),DGe=l(),pg=a("li"),uH=a("strong"),jGe=o("xlm-roberta-xl"),NGe=o(" \u2014 "),Z7=a("a"),qGe=o("XLMRobertaXLConfig"),GGe=o(" (XLM-RoBERTa-XL model)"),OGe=l(),_g=a("li"),bH=a("strong"),XGe=o("xlnet"),VGe=o(" \u2014 "),eB=a("a"),zGe=o("XLNetConfig"),WGe=o(" (XLNet model)"),QGe=l(),ug=a("li"),vH=a("strong"),HGe=o("yoso"),UGe=o(" \u2014 "),oB=a("a"),JGe=o("YosoConfig"),YGe=o(" (YOSO model)"),KGe=l(),TH=a("p"),ZGe=o("Examples:"),eOe=l(),f(PM.$$.fragment),oOe=l(),bg=a("div"),f($M.$$.fragment),rOe=l(),FH=a("p"),tOe=o("Register a new configuration for this class."),D7e=l(),Ni=a("h2"),vg=a("a"),CH=a("span"),f(IM.$$.fragment),aOe=l(),MH=a("span"),nOe=o("AutoTokenizer"),j7e=l(),Vo=a("div"),f(DM.$$.fragment),sOe=l(),jM=a("p"),lOe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rB=a("a"),iOe=o("AutoTokenizer.from_pretrained()"),dOe=o(" class method."),cOe=l(),NM=a("p"),fOe=o("This class cannot be instantiated directly using "),EH=a("code"),mOe=o("__init__()"),gOe=o(" (throws an error)."),hOe=l(),mo=a("div"),f(qM.$$.fragment),pOe=l(),yH=a("p"),_Oe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uOe=l(),Da=a("p"),bOe=o("The tokenizer class to instantiate is selected based on the "),wH=a("code"),vOe=o("model_type"),TOe=o(` property of the config object (either
passed as an argument or loaded from `),AH=a("code"),FOe=o("pretrained_model_name_or_path"),COe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LH=a("code"),MOe=o("pretrained_model_name_or_path"),EOe=o(":"),yOe=l(),M=a("ul"),Gn=a("li"),BH=a("strong"),wOe=o("albert"),AOe=o(" \u2014 "),tB=a("a"),LOe=o("AlbertTokenizer"),BOe=o(" or "),aB=a("a"),xOe=o("AlbertTokenizerFast"),kOe=o(" (ALBERT model)"),ROe=l(),On=a("li"),xH=a("strong"),SOe=o("bart"),POe=o(" \u2014 "),nB=a("a"),$Oe=o("BartTokenizer"),IOe=o(" or "),sB=a("a"),DOe=o("BartTokenizerFast"),jOe=o(" (BART model)"),NOe=l(),Xn=a("li"),kH=a("strong"),qOe=o("barthez"),GOe=o(" \u2014 "),lB=a("a"),OOe=o("BarthezTokenizer"),XOe=o(" or "),iB=a("a"),VOe=o("BarthezTokenizerFast"),zOe=o(" (BARThez model)"),WOe=l(),Tg=a("li"),RH=a("strong"),QOe=o("bartpho"),HOe=o(" \u2014 "),dB=a("a"),UOe=o("BartphoTokenizer"),JOe=o(" (BARTpho model)"),YOe=l(),Vn=a("li"),SH=a("strong"),KOe=o("bert"),ZOe=o(" \u2014 "),cB=a("a"),eXe=o("BertTokenizer"),oXe=o(" or "),fB=a("a"),rXe=o("BertTokenizerFast"),tXe=o(" (BERT model)"),aXe=l(),Fg=a("li"),PH=a("strong"),nXe=o("bert-generation"),sXe=o(" \u2014 "),mB=a("a"),lXe=o("BertGenerationTokenizer"),iXe=o(" (Bert Generation model)"),dXe=l(),Cg=a("li"),$H=a("strong"),cXe=o("bert-japanese"),fXe=o(" \u2014 "),gB=a("a"),mXe=o("BertJapaneseTokenizer"),gXe=o(" (BertJapanese model)"),hXe=l(),Mg=a("li"),IH=a("strong"),pXe=o("bertweet"),_Xe=o(" \u2014 "),hB=a("a"),uXe=o("BertweetTokenizer"),bXe=o(" (Bertweet model)"),vXe=l(),zn=a("li"),DH=a("strong"),TXe=o("big_bird"),FXe=o(" \u2014 "),pB=a("a"),CXe=o("BigBirdTokenizer"),MXe=o(" or "),_B=a("a"),EXe=o("BigBirdTokenizerFast"),yXe=o(" (BigBird model)"),wXe=l(),Wn=a("li"),jH=a("strong"),AXe=o("bigbird_pegasus"),LXe=o(" \u2014 "),uB=a("a"),BXe=o("PegasusTokenizer"),xXe=o(" or "),bB=a("a"),kXe=o("PegasusTokenizerFast"),RXe=o(" (BigBirdPegasus model)"),SXe=l(),Qn=a("li"),NH=a("strong"),PXe=o("blenderbot"),$Xe=o(" \u2014 "),vB=a("a"),IXe=o("BlenderbotTokenizer"),DXe=o(" or "),TB=a("a"),jXe=o("BlenderbotTokenizerFast"),NXe=o(" (Blenderbot model)"),qXe=l(),Eg=a("li"),qH=a("strong"),GXe=o("blenderbot-small"),OXe=o(" \u2014 "),FB=a("a"),XXe=o("BlenderbotSmallTokenizer"),VXe=o(" (BlenderbotSmall model)"),zXe=l(),yg=a("li"),GH=a("strong"),WXe=o("byt5"),QXe=o(" \u2014 "),CB=a("a"),HXe=o("ByT5Tokenizer"),UXe=o(" (ByT5 model)"),JXe=l(),Hn=a("li"),OH=a("strong"),YXe=o("camembert"),KXe=o(" \u2014 "),MB=a("a"),ZXe=o("CamembertTokenizer"),eVe=o(" or "),EB=a("a"),oVe=o("CamembertTokenizerFast"),rVe=o(" (CamemBERT model)"),tVe=l(),wg=a("li"),XH=a("strong"),aVe=o("canine"),nVe=o(" \u2014 "),yB=a("a"),sVe=o("CanineTokenizer"),lVe=o(" (Canine model)"),iVe=l(),Un=a("li"),VH=a("strong"),dVe=o("clip"),cVe=o(" \u2014 "),wB=a("a"),fVe=o("CLIPTokenizer"),mVe=o(" or "),AB=a("a"),gVe=o("CLIPTokenizerFast"),hVe=o(" (CLIP model)"),pVe=l(),Jn=a("li"),zH=a("strong"),_Ve=o("convbert"),uVe=o(" \u2014 "),LB=a("a"),bVe=o("ConvBertTokenizer"),vVe=o(" or "),BB=a("a"),TVe=o("ConvBertTokenizerFast"),FVe=o(" (ConvBERT model)"),CVe=l(),Yn=a("li"),WH=a("strong"),MVe=o("cpm"),EVe=o(" \u2014 "),xB=a("a"),yVe=o("CpmTokenizer"),wVe=o(" or "),QH=a("code"),AVe=o("CpmTokenizerFast"),LVe=o(" (CPM model)"),BVe=l(),Ag=a("li"),HH=a("strong"),xVe=o("ctrl"),kVe=o(" \u2014 "),kB=a("a"),RVe=o("CTRLTokenizer"),SVe=o(" (CTRL model)"),PVe=l(),Kn=a("li"),UH=a("strong"),$Ve=o("deberta"),IVe=o(" \u2014 "),RB=a("a"),DVe=o("DebertaTokenizer"),jVe=o(" or "),SB=a("a"),NVe=o("DebertaTokenizerFast"),qVe=o(" (DeBERTa model)"),GVe=l(),Lg=a("li"),JH=a("strong"),OVe=o("deberta-v2"),XVe=o(" \u2014 "),PB=a("a"),VVe=o("DebertaV2Tokenizer"),zVe=o(" (DeBERTa-v2 model)"),WVe=l(),Zn=a("li"),YH=a("strong"),QVe=o("distilbert"),HVe=o(" \u2014 "),$B=a("a"),UVe=o("DistilBertTokenizer"),JVe=o(" or "),IB=a("a"),YVe=o("DistilBertTokenizerFast"),KVe=o(" (DistilBERT model)"),ZVe=l(),es=a("li"),KH=a("strong"),eze=o("dpr"),oze=o(" \u2014 "),DB=a("a"),rze=o("DPRQuestionEncoderTokenizer"),tze=o(" or "),jB=a("a"),aze=o("DPRQuestionEncoderTokenizerFast"),nze=o(" (DPR model)"),sze=l(),os=a("li"),ZH=a("strong"),lze=o("electra"),ize=o(" \u2014 "),NB=a("a"),dze=o("ElectraTokenizer"),cze=o(" or "),qB=a("a"),fze=o("ElectraTokenizerFast"),mze=o(" (ELECTRA model)"),gze=l(),Bg=a("li"),eU=a("strong"),hze=o("flaubert"),pze=o(" \u2014 "),GB=a("a"),_ze=o("FlaubertTokenizer"),uze=o(" (FlauBERT model)"),bze=l(),rs=a("li"),oU=a("strong"),vze=o("fnet"),Tze=o(" \u2014 "),OB=a("a"),Fze=o("FNetTokenizer"),Cze=o(" or "),XB=a("a"),Mze=o("FNetTokenizerFast"),Eze=o(" (FNet model)"),yze=l(),xg=a("li"),rU=a("strong"),wze=o("fsmt"),Aze=o(" \u2014 "),VB=a("a"),Lze=o("FSMTTokenizer"),Bze=o(" (FairSeq Machine-Translation model)"),xze=l(),ts=a("li"),tU=a("strong"),kze=o("funnel"),Rze=o(" \u2014 "),zB=a("a"),Sze=o("FunnelTokenizer"),Pze=o(" or "),WB=a("a"),$ze=o("FunnelTokenizerFast"),Ize=o(" (Funnel Transformer model)"),Dze=l(),as=a("li"),aU=a("strong"),jze=o("gpt2"),Nze=o(" \u2014 "),QB=a("a"),qze=o("GPT2Tokenizer"),Gze=o(" or "),HB=a("a"),Oze=o("GPT2TokenizerFast"),Xze=o(" (OpenAI GPT-2 model)"),Vze=l(),ns=a("li"),nU=a("strong"),zze=o("gpt_neo"),Wze=o(" \u2014 "),UB=a("a"),Qze=o("GPT2Tokenizer"),Hze=o(" or "),JB=a("a"),Uze=o("GPT2TokenizerFast"),Jze=o(" (GPT Neo model)"),Yze=l(),ss=a("li"),sU=a("strong"),Kze=o("herbert"),Zze=o(" \u2014 "),YB=a("a"),eWe=o("HerbertTokenizer"),oWe=o(" or "),KB=a("a"),rWe=o("HerbertTokenizerFast"),tWe=o(" (HerBERT model)"),aWe=l(),kg=a("li"),lU=a("strong"),nWe=o("hubert"),sWe=o(" \u2014 "),ZB=a("a"),lWe=o("Wav2Vec2CTCTokenizer"),iWe=o(" (Hubert model)"),dWe=l(),ls=a("li"),iU=a("strong"),cWe=o("ibert"),fWe=o(" \u2014 "),ex=a("a"),mWe=o("RobertaTokenizer"),gWe=o(" or "),ox=a("a"),hWe=o("RobertaTokenizerFast"),pWe=o(" (I-BERT model)"),_We=l(),is=a("li"),dU=a("strong"),uWe=o("layoutlm"),bWe=o(" \u2014 "),rx=a("a"),vWe=o("LayoutLMTokenizer"),TWe=o(" or "),tx=a("a"),FWe=o("LayoutLMTokenizerFast"),CWe=o(" (LayoutLM model)"),MWe=l(),ds=a("li"),cU=a("strong"),EWe=o("layoutlmv2"),yWe=o(" \u2014 "),ax=a("a"),wWe=o("LayoutLMv2Tokenizer"),AWe=o(" or "),nx=a("a"),LWe=o("LayoutLMv2TokenizerFast"),BWe=o(" (LayoutLMv2 model)"),xWe=l(),cs=a("li"),fU=a("strong"),kWe=o("layoutxlm"),RWe=o(" \u2014 "),sx=a("a"),SWe=o("LayoutXLMTokenizer"),PWe=o(" or "),lx=a("a"),$We=o("LayoutXLMTokenizerFast"),IWe=o(" (LayoutXLM model)"),DWe=l(),fs=a("li"),mU=a("strong"),jWe=o("led"),NWe=o(" \u2014 "),ix=a("a"),qWe=o("LEDTokenizer"),GWe=o(" or "),dx=a("a"),OWe=o("LEDTokenizerFast"),XWe=o(" (LED model)"),VWe=l(),ms=a("li"),gU=a("strong"),zWe=o("longformer"),WWe=o(" \u2014 "),cx=a("a"),QWe=o("LongformerTokenizer"),HWe=o(" or "),fx=a("a"),UWe=o("LongformerTokenizerFast"),JWe=o(" (Longformer model)"),YWe=l(),Rg=a("li"),hU=a("strong"),KWe=o("luke"),ZWe=o(" \u2014 "),mx=a("a"),eQe=o("LukeTokenizer"),oQe=o(" (LUKE model)"),rQe=l(),gs=a("li"),pU=a("strong"),tQe=o("lxmert"),aQe=o(" \u2014 "),gx=a("a"),nQe=o("LxmertTokenizer"),sQe=o(" or "),hx=a("a"),lQe=o("LxmertTokenizerFast"),iQe=o(" (LXMERT model)"),dQe=l(),Sg=a("li"),_U=a("strong"),cQe=o("m2m_100"),fQe=o(" \u2014 "),px=a("a"),mQe=o("M2M100Tokenizer"),gQe=o(" (M2M100 model)"),hQe=l(),Pg=a("li"),uU=a("strong"),pQe=o("marian"),_Qe=o(" \u2014 "),_x=a("a"),uQe=o("MarianTokenizer"),bQe=o(" (Marian model)"),vQe=l(),hs=a("li"),bU=a("strong"),TQe=o("mbart"),FQe=o(" \u2014 "),ux=a("a"),CQe=o("MBartTokenizer"),MQe=o(" or "),bx=a("a"),EQe=o("MBartTokenizerFast"),yQe=o(" (mBART model)"),wQe=l(),ps=a("li"),vU=a("strong"),AQe=o("mbart50"),LQe=o(" \u2014 "),vx=a("a"),BQe=o("MBart50Tokenizer"),xQe=o(" or "),Tx=a("a"),kQe=o("MBart50TokenizerFast"),RQe=o(" (mBART-50 model)"),SQe=l(),$g=a("li"),TU=a("strong"),PQe=o("mluke"),$Qe=o(" \u2014 "),Fx=a("a"),IQe=o("MLukeTokenizer"),DQe=o(" (mLUKE model)"),jQe=l(),_s=a("li"),FU=a("strong"),NQe=o("mobilebert"),qQe=o(" \u2014 "),Cx=a("a"),GQe=o("MobileBertTokenizer"),OQe=o(" or "),Mx=a("a"),XQe=o("MobileBertTokenizerFast"),VQe=o(" (MobileBERT model)"),zQe=l(),us=a("li"),CU=a("strong"),WQe=o("mpnet"),QQe=o(" \u2014 "),Ex=a("a"),HQe=o("MPNetTokenizer"),UQe=o(" or "),yx=a("a"),JQe=o("MPNetTokenizerFast"),YQe=o(" (MPNet model)"),KQe=l(),bs=a("li"),MU=a("strong"),ZQe=o("mt5"),eHe=o(" \u2014 "),wx=a("a"),oHe=o("MT5Tokenizer"),rHe=o(" or "),Ax=a("a"),tHe=o("MT5TokenizerFast"),aHe=o(" (mT5 model)"),nHe=l(),vs=a("li"),EU=a("strong"),sHe=o("openai-gpt"),lHe=o(" \u2014 "),Lx=a("a"),iHe=o("OpenAIGPTTokenizer"),dHe=o(" or "),Bx=a("a"),cHe=o("OpenAIGPTTokenizerFast"),fHe=o(" (OpenAI GPT model)"),mHe=l(),Ts=a("li"),yU=a("strong"),gHe=o("pegasus"),hHe=o(" \u2014 "),xx=a("a"),pHe=o("PegasusTokenizer"),_He=o(" or "),kx=a("a"),uHe=o("PegasusTokenizerFast"),bHe=o(" (Pegasus model)"),vHe=l(),Ig=a("li"),wU=a("strong"),THe=o("perceiver"),FHe=o(" \u2014 "),Rx=a("a"),CHe=o("PerceiverTokenizer"),MHe=o(" (Perceiver model)"),EHe=l(),Dg=a("li"),AU=a("strong"),yHe=o("phobert"),wHe=o(" \u2014 "),Sx=a("a"),AHe=o("PhobertTokenizer"),LHe=o(" (PhoBERT model)"),BHe=l(),jg=a("li"),LU=a("strong"),xHe=o("plbart"),kHe=o(" \u2014 "),Px=a("a"),RHe=o("PLBartTokenizer"),SHe=o(" (PLBart model)"),PHe=l(),Ng=a("li"),BU=a("strong"),$He=o("prophetnet"),IHe=o(" \u2014 "),$x=a("a"),DHe=o("ProphetNetTokenizer"),jHe=o(" (ProphetNet model)"),NHe=l(),Fs=a("li"),xU=a("strong"),qHe=o("qdqbert"),GHe=o(" \u2014 "),Ix=a("a"),OHe=o("BertTokenizer"),XHe=o(" or "),Dx=a("a"),VHe=o("BertTokenizerFast"),zHe=o(" (QDQBert model)"),WHe=l(),qg=a("li"),kU=a("strong"),QHe=o("rag"),HHe=o(" \u2014 "),jx=a("a"),UHe=o("RagTokenizer"),JHe=o(" (RAG model)"),YHe=l(),Cs=a("li"),RU=a("strong"),KHe=o("realm"),ZHe=o(" \u2014 "),Nx=a("a"),eUe=o("RealmTokenizer"),oUe=o(" or "),qx=a("a"),rUe=o("RealmTokenizerFast"),tUe=o(" (Realm model)"),aUe=l(),Ms=a("li"),SU=a("strong"),nUe=o("reformer"),sUe=o(" \u2014 "),Gx=a("a"),lUe=o("ReformerTokenizer"),iUe=o(" or "),Ox=a("a"),dUe=o("ReformerTokenizerFast"),cUe=o(" (Reformer model)"),fUe=l(),Es=a("li"),PU=a("strong"),mUe=o("rembert"),gUe=o(" \u2014 "),Xx=a("a"),hUe=o("RemBertTokenizer"),pUe=o(" or "),Vx=a("a"),_Ue=o("RemBertTokenizerFast"),uUe=o(" (RemBERT model)"),bUe=l(),ys=a("li"),$U=a("strong"),vUe=o("retribert"),TUe=o(" \u2014 "),zx=a("a"),FUe=o("RetriBertTokenizer"),CUe=o(" or "),Wx=a("a"),MUe=o("RetriBertTokenizerFast"),EUe=o(" (RetriBERT model)"),yUe=l(),ws=a("li"),IU=a("strong"),wUe=o("roberta"),AUe=o(" \u2014 "),Qx=a("a"),LUe=o("RobertaTokenizer"),BUe=o(" or "),Hx=a("a"),xUe=o("RobertaTokenizerFast"),kUe=o(" (RoBERTa model)"),RUe=l(),As=a("li"),DU=a("strong"),SUe=o("roformer"),PUe=o(" \u2014 "),Ux=a("a"),$Ue=o("RoFormerTokenizer"),IUe=o(" or "),Jx=a("a"),DUe=o("RoFormerTokenizerFast"),jUe=o(" (RoFormer model)"),NUe=l(),Gg=a("li"),jU=a("strong"),qUe=o("speech_to_text"),GUe=o(" \u2014 "),Yx=a("a"),OUe=o("Speech2TextTokenizer"),XUe=o(" (Speech2Text model)"),VUe=l(),Og=a("li"),NU=a("strong"),zUe=o("speech_to_text_2"),WUe=o(" \u2014 "),Kx=a("a"),QUe=o("Speech2Text2Tokenizer"),HUe=o(" (Speech2Text2 model)"),UUe=l(),Ls=a("li"),qU=a("strong"),JUe=o("splinter"),YUe=o(" \u2014 "),Zx=a("a"),KUe=o("SplinterTokenizer"),ZUe=o(" or "),ek=a("a"),eJe=o("SplinterTokenizerFast"),oJe=o(" (Splinter model)"),rJe=l(),Bs=a("li"),GU=a("strong"),tJe=o("squeezebert"),aJe=o(" \u2014 "),ok=a("a"),nJe=o("SqueezeBertTokenizer"),sJe=o(" or "),rk=a("a"),lJe=o("SqueezeBertTokenizerFast"),iJe=o(" (SqueezeBERT model)"),dJe=l(),xs=a("li"),OU=a("strong"),cJe=o("t5"),fJe=o(" \u2014 "),tk=a("a"),mJe=o("T5Tokenizer"),gJe=o(" or "),ak=a("a"),hJe=o("T5TokenizerFast"),pJe=o(" (T5 model)"),_Je=l(),Xg=a("li"),XU=a("strong"),uJe=o("tapas"),bJe=o(" \u2014 "),nk=a("a"),vJe=o("TapasTokenizer"),TJe=o(" (TAPAS model)"),FJe=l(),Vg=a("li"),VU=a("strong"),CJe=o("transfo-xl"),MJe=o(" \u2014 "),sk=a("a"),EJe=o("TransfoXLTokenizer"),yJe=o(" (Transformer-XL model)"),wJe=l(),zg=a("li"),zU=a("strong"),AJe=o("wav2vec2"),LJe=o(" \u2014 "),lk=a("a"),BJe=o("Wav2Vec2CTCTokenizer"),xJe=o(" (Wav2Vec2 model)"),kJe=l(),Wg=a("li"),WU=a("strong"),RJe=o("wav2vec2_phoneme"),SJe=o(" \u2014 "),ik=a("a"),PJe=o("Wav2Vec2PhonemeCTCTokenizer"),$Je=o(" (Wav2Vec2Phoneme model)"),IJe=l(),ks=a("li"),QU=a("strong"),DJe=o("xglm"),jJe=o(" \u2014 "),dk=a("a"),NJe=o("XGLMTokenizer"),qJe=o(" or "),ck=a("a"),GJe=o("XGLMTokenizerFast"),OJe=o(" (XGLM model)"),XJe=l(),Qg=a("li"),HU=a("strong"),VJe=o("xlm"),zJe=o(" \u2014 "),fk=a("a"),WJe=o("XLMTokenizer"),QJe=o(" (XLM model)"),HJe=l(),Hg=a("li"),UU=a("strong"),UJe=o("xlm-prophetnet"),JJe=o(" \u2014 "),mk=a("a"),YJe=o("XLMProphetNetTokenizer"),KJe=o(" (XLMProphetNet model)"),ZJe=l(),Rs=a("li"),JU=a("strong"),eYe=o("xlm-roberta"),oYe=o(" \u2014 "),gk=a("a"),rYe=o("XLMRobertaTokenizer"),tYe=o(" or "),hk=a("a"),aYe=o("XLMRobertaTokenizerFast"),nYe=o(" (XLM-RoBERTa model)"),sYe=l(),Ss=a("li"),YU=a("strong"),lYe=o("xlnet"),iYe=o(" \u2014 "),pk=a("a"),dYe=o("XLNetTokenizer"),cYe=o(" or "),_k=a("a"),fYe=o("XLNetTokenizerFast"),mYe=o(" (XLNet model)"),gYe=l(),KU=a("p"),hYe=o("Examples:"),pYe=l(),f(GM.$$.fragment),_Ye=l(),Ug=a("div"),f(OM.$$.fragment),uYe=l(),ZU=a("p"),bYe=o("Register a new tokenizer in this mapping."),N7e=l(),qi=a("h2"),Jg=a("a"),eJ=a("span"),f(XM.$$.fragment),vYe=l(),oJ=a("span"),TYe=o("AutoFeatureExtractor"),q7e=l(),zo=a("div"),f(VM.$$.fragment),FYe=l(),zM=a("p"),CYe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),uk=a("a"),MYe=o("AutoFeatureExtractor.from_pretrained()"),EYe=o(" class method."),yYe=l(),WM=a("p"),wYe=o("This class cannot be instantiated directly using "),rJ=a("code"),AYe=o("__init__()"),LYe=o(" (throws an error)."),BYe=l(),xe=a("div"),f(QM.$$.fragment),xYe=l(),tJ=a("p"),kYe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),RYe=l(),ja=a("p"),SYe=o("The feature extractor class to instantiate is selected based on the "),aJ=a("code"),PYe=o("model_type"),$Ye=o(` property of the config object
(either passed as an argument or loaded from `),nJ=a("code"),IYe=o("pretrained_model_name_or_path"),DYe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),sJ=a("code"),jYe=o("pretrained_model_name_or_path"),NYe=o(":"),qYe=l(),se=a("ul"),Yg=a("li"),lJ=a("strong"),GYe=o("beit"),OYe=o(" \u2014 "),bk=a("a"),XYe=o("BeitFeatureExtractor"),VYe=o(" (BEiT model)"),zYe=l(),Kg=a("li"),iJ=a("strong"),WYe=o("clip"),QYe=o(" \u2014 "),vk=a("a"),HYe=o("CLIPFeatureExtractor"),UYe=o(" (CLIP model)"),JYe=l(),Zg=a("li"),dJ=a("strong"),YYe=o("convnext"),KYe=o(" \u2014 "),Tk=a("a"),ZYe=o("ConvNextFeatureExtractor"),eKe=o(" (ConvNext model)"),oKe=l(),eh=a("li"),cJ=a("strong"),rKe=o("deit"),tKe=o(" \u2014 "),Fk=a("a"),aKe=o("DeiTFeatureExtractor"),nKe=o(" (DeiT model)"),sKe=l(),oh=a("li"),fJ=a("strong"),lKe=o("detr"),iKe=o(" \u2014 "),Ck=a("a"),dKe=o("DetrFeatureExtractor"),cKe=o(" (DETR model)"),fKe=l(),rh=a("li"),mJ=a("strong"),mKe=o("hubert"),gKe=o(" \u2014 "),Mk=a("a"),hKe=o("Wav2Vec2FeatureExtractor"),pKe=o(" (Hubert model)"),_Ke=l(),th=a("li"),gJ=a("strong"),uKe=o("layoutlmv2"),bKe=o(" \u2014 "),Ek=a("a"),vKe=o("LayoutLMv2FeatureExtractor"),TKe=o(" (LayoutLMv2 model)"),FKe=l(),ah=a("li"),hJ=a("strong"),CKe=o("perceiver"),MKe=o(" \u2014 "),yk=a("a"),EKe=o("PerceiverFeatureExtractor"),yKe=o(" (Perceiver model)"),wKe=l(),nh=a("li"),pJ=a("strong"),AKe=o("poolformer"),LKe=o(" \u2014 "),wk=a("a"),BKe=o("PoolFormerFeatureExtractor"),xKe=o(" (PoolFormer model)"),kKe=l(),sh=a("li"),_J=a("strong"),RKe=o("segformer"),SKe=o(" \u2014 "),Ak=a("a"),PKe=o("SegformerFeatureExtractor"),$Ke=o(" (SegFormer model)"),IKe=l(),lh=a("li"),uJ=a("strong"),DKe=o("speech_to_text"),jKe=o(" \u2014 "),Lk=a("a"),NKe=o("Speech2TextFeatureExtractor"),qKe=o(" (Speech2Text model)"),GKe=l(),ih=a("li"),bJ=a("strong"),OKe=o("swin"),XKe=o(" \u2014 "),Bk=a("a"),VKe=o("ViTFeatureExtractor"),zKe=o(" (Swin model)"),WKe=l(),dh=a("li"),vJ=a("strong"),QKe=o("vit"),HKe=o(" \u2014 "),xk=a("a"),UKe=o("ViTFeatureExtractor"),JKe=o(" (ViT model)"),YKe=l(),ch=a("li"),TJ=a("strong"),KKe=o("vit_mae"),ZKe=o(" \u2014 "),kk=a("a"),eZe=o("ViTFeatureExtractor"),oZe=o(" (ViTMAE model)"),rZe=l(),fh=a("li"),FJ=a("strong"),tZe=o("wav2vec2"),aZe=o(" \u2014 "),Rk=a("a"),nZe=o("Wav2Vec2FeatureExtractor"),sZe=o(" (Wav2Vec2 model)"),lZe=l(),f(mh.$$.fragment),iZe=l(),CJ=a("p"),dZe=o("Examples:"),cZe=l(),f(HM.$$.fragment),fZe=l(),gh=a("div"),f(UM.$$.fragment),mZe=l(),MJ=a("p"),gZe=o("Register a new feature extractor for this class."),G7e=l(),Gi=a("h2"),hh=a("a"),EJ=a("span"),f(JM.$$.fragment),hZe=l(),yJ=a("span"),pZe=o("AutoProcessor"),O7e=l(),Wo=a("div"),f(YM.$$.fragment),_Ze=l(),KM=a("p"),uZe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Sk=a("a"),bZe=o("AutoProcessor.from_pretrained()"),vZe=o(" class method."),TZe=l(),ZM=a("p"),FZe=o("This class cannot be instantiated directly using "),wJ=a("code"),CZe=o("__init__()"),MZe=o(" (throws an error)."),EZe=l(),ke=a("div"),f(eE.$$.fragment),yZe=l(),AJ=a("p"),wZe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),AZe=l(),Oi=a("p"),LZe=o("The processor class to instantiate is selected based on the "),LJ=a("code"),BZe=o("model_type"),xZe=o(` property of the config object (either
passed as an argument or loaded from `),BJ=a("code"),kZe=o("pretrained_model_name_or_path"),RZe=o(" if possible):"),SZe=l(),we=a("ul"),ph=a("li"),xJ=a("strong"),PZe=o("clip"),$Ze=o(" \u2014 "),Pk=a("a"),IZe=o("CLIPProcessor"),DZe=o(" (CLIP model)"),jZe=l(),_h=a("li"),kJ=a("strong"),NZe=o("layoutlmv2"),qZe=o(" \u2014 "),$k=a("a"),GZe=o("LayoutLMv2Processor"),OZe=o(" (LayoutLMv2 model)"),XZe=l(),uh=a("li"),RJ=a("strong"),VZe=o("layoutxlm"),zZe=o(" \u2014 "),Ik=a("a"),WZe=o("LayoutXLMProcessor"),QZe=o(" (LayoutXLM model)"),HZe=l(),bh=a("li"),SJ=a("strong"),UZe=o("speech_to_text"),JZe=o(" \u2014 "),Dk=a("a"),YZe=o("Speech2TextProcessor"),KZe=o(" (Speech2Text model)"),ZZe=l(),vh=a("li"),PJ=a("strong"),eeo=o("speech_to_text_2"),oeo=o(" \u2014 "),jk=a("a"),reo=o("Speech2Text2Processor"),teo=o(" (Speech2Text2 model)"),aeo=l(),Th=a("li"),$J=a("strong"),neo=o("trocr"),seo=o(" \u2014 "),Nk=a("a"),leo=o("TrOCRProcessor"),ieo=o(" (TrOCR model)"),deo=l(),Fh=a("li"),IJ=a("strong"),ceo=o("vision-text-dual-encoder"),feo=o(" \u2014 "),qk=a("a"),meo=o("VisionTextDualEncoderProcessor"),geo=o(" (VisionTextDualEncoder model)"),heo=l(),Ch=a("li"),DJ=a("strong"),peo=o("wav2vec2"),_eo=o(" \u2014 "),Gk=a("a"),ueo=o("Wav2Vec2Processor"),beo=o(" (Wav2Vec2 model)"),veo=l(),f(Mh.$$.fragment),Teo=l(),jJ=a("p"),Feo=o("Examples:"),Ceo=l(),f(oE.$$.fragment),Meo=l(),Eh=a("div"),f(rE.$$.fragment),Eeo=l(),NJ=a("p"),yeo=o("Register a new processor for this class."),X7e=l(),Xi=a("h2"),yh=a("a"),qJ=a("span"),f(tE.$$.fragment),weo=l(),GJ=a("span"),Aeo=o("AutoModel"),V7e=l(),Qo=a("div"),f(aE.$$.fragment),Leo=l(),Vi=a("p"),Beo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OJ=a("code"),xeo=o("from_pretrained()"),keo=o("class method or the "),XJ=a("code"),Reo=o("from_config()"),Seo=o(`class
method.`),Peo=l(),nE=a("p"),$eo=o("This class cannot be instantiated directly using "),VJ=a("code"),Ieo=o("__init__()"),Deo=o(" (throws an error)."),jeo=l(),qr=a("div"),f(sE.$$.fragment),Neo=l(),zJ=a("p"),qeo=o("Instantiates one of the base model classes of the library from a configuration."),Geo=l(),zi=a("p"),Oeo=o(`Note:
Loading a model from its configuration file does `),WJ=a("strong"),Xeo=o("not"),Veo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("code"),zeo=o("from_pretrained()"),Weo=o("to load the model weights."),Qeo=l(),HJ=a("p"),Heo=o("Examples:"),Ueo=l(),f(lE.$$.fragment),Jeo=l(),Re=a("div"),f(iE.$$.fragment),Yeo=l(),UJ=a("p"),Keo=o("Instantiate one of the base model classes of the library from a pretrained model."),Zeo=l(),Na=a("p"),eoo=o("The model class to instantiate is selected based on the "),JJ=a("code"),ooo=o("model_type"),roo=o(` property of the config object (either
passed as an argument or loaded from `),YJ=a("code"),too=o("pretrained_model_name_or_path"),aoo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KJ=a("code"),noo=o("pretrained_model_name_or_path"),soo=o(":"),loo=l(),F=a("ul"),wh=a("li"),ZJ=a("strong"),ioo=o("albert"),doo=o(" \u2014 "),Ok=a("a"),coo=o("AlbertModel"),foo=o(" (ALBERT model)"),moo=l(),Ah=a("li"),eY=a("strong"),goo=o("bart"),hoo=o(" \u2014 "),Xk=a("a"),poo=o("BartModel"),_oo=o(" (BART model)"),uoo=l(),Lh=a("li"),oY=a("strong"),boo=o("beit"),voo=o(" \u2014 "),Vk=a("a"),Too=o("BeitModel"),Foo=o(" (BEiT model)"),Coo=l(),Bh=a("li"),rY=a("strong"),Moo=o("bert"),Eoo=o(" \u2014 "),zk=a("a"),yoo=o("BertModel"),woo=o(" (BERT model)"),Aoo=l(),xh=a("li"),tY=a("strong"),Loo=o("bert-generation"),Boo=o(" \u2014 "),Wk=a("a"),xoo=o("BertGenerationEncoder"),koo=o(" (Bert Generation model)"),Roo=l(),kh=a("li"),aY=a("strong"),Soo=o("big_bird"),Poo=o(" \u2014 "),Qk=a("a"),$oo=o("BigBirdModel"),Ioo=o(" (BigBird model)"),Doo=l(),Rh=a("li"),nY=a("strong"),joo=o("bigbird_pegasus"),Noo=o(" \u2014 "),Hk=a("a"),qoo=o("BigBirdPegasusModel"),Goo=o(" (BigBirdPegasus model)"),Ooo=l(),Sh=a("li"),sY=a("strong"),Xoo=o("blenderbot"),Voo=o(" \u2014 "),Uk=a("a"),zoo=o("BlenderbotModel"),Woo=o(" (Blenderbot model)"),Qoo=l(),Ph=a("li"),lY=a("strong"),Hoo=o("blenderbot-small"),Uoo=o(" \u2014 "),Jk=a("a"),Joo=o("BlenderbotSmallModel"),Yoo=o(" (BlenderbotSmall model)"),Koo=l(),$h=a("li"),iY=a("strong"),Zoo=o("camembert"),ero=o(" \u2014 "),Yk=a("a"),oro=o("CamembertModel"),rro=o(" (CamemBERT model)"),tro=l(),Ih=a("li"),dY=a("strong"),aro=o("canine"),nro=o(" \u2014 "),Kk=a("a"),sro=o("CanineModel"),lro=o(" (Canine model)"),iro=l(),Dh=a("li"),cY=a("strong"),dro=o("clip"),cro=o(" \u2014 "),Zk=a("a"),fro=o("CLIPModel"),mro=o(" (CLIP model)"),gro=l(),jh=a("li"),fY=a("strong"),hro=o("convbert"),pro=o(" \u2014 "),eR=a("a"),_ro=o("ConvBertModel"),uro=o(" (ConvBERT model)"),bro=l(),Nh=a("li"),mY=a("strong"),vro=o("convnext"),Tro=o(" \u2014 "),oR=a("a"),Fro=o("ConvNextModel"),Cro=o(" (ConvNext model)"),Mro=l(),qh=a("li"),gY=a("strong"),Ero=o("ctrl"),yro=o(" \u2014 "),rR=a("a"),wro=o("CTRLModel"),Aro=o(" (CTRL model)"),Lro=l(),Gh=a("li"),hY=a("strong"),Bro=o("data2vec-audio"),xro=o(" \u2014 "),tR=a("a"),kro=o("Data2VecAudioModel"),Rro=o(" (Data2VecAudio model)"),Sro=l(),Oh=a("li"),pY=a("strong"),Pro=o("data2vec-text"),$ro=o(" \u2014 "),aR=a("a"),Iro=o("Data2VecTextModel"),Dro=o(" (Data2VecText model)"),jro=l(),Xh=a("li"),_Y=a("strong"),Nro=o("deberta"),qro=o(" \u2014 "),nR=a("a"),Gro=o("DebertaModel"),Oro=o(" (DeBERTa model)"),Xro=l(),Vh=a("li"),uY=a("strong"),Vro=o("deberta-v2"),zro=o(" \u2014 "),sR=a("a"),Wro=o("DebertaV2Model"),Qro=o(" (DeBERTa-v2 model)"),Hro=l(),zh=a("li"),bY=a("strong"),Uro=o("deit"),Jro=o(" \u2014 "),lR=a("a"),Yro=o("DeiTModel"),Kro=o(" (DeiT model)"),Zro=l(),Wh=a("li"),vY=a("strong"),eto=o("detr"),oto=o(" \u2014 "),iR=a("a"),rto=o("DetrModel"),tto=o(" (DETR model)"),ato=l(),Qh=a("li"),TY=a("strong"),nto=o("distilbert"),sto=o(" \u2014 "),dR=a("a"),lto=o("DistilBertModel"),ito=o(" (DistilBERT model)"),dto=l(),Hh=a("li"),FY=a("strong"),cto=o("dpr"),fto=o(" \u2014 "),cR=a("a"),mto=o("DPRQuestionEncoder"),gto=o(" (DPR model)"),hto=l(),Uh=a("li"),CY=a("strong"),pto=o("electra"),_to=o(" \u2014 "),fR=a("a"),uto=o("ElectraModel"),bto=o(" (ELECTRA model)"),vto=l(),Jh=a("li"),MY=a("strong"),Tto=o("flaubert"),Fto=o(" \u2014 "),mR=a("a"),Cto=o("FlaubertModel"),Mto=o(" (FlauBERT model)"),Eto=l(),Yh=a("li"),EY=a("strong"),yto=o("fnet"),wto=o(" \u2014 "),gR=a("a"),Ato=o("FNetModel"),Lto=o(" (FNet model)"),Bto=l(),Kh=a("li"),yY=a("strong"),xto=o("fsmt"),kto=o(" \u2014 "),hR=a("a"),Rto=o("FSMTModel"),Sto=o(" (FairSeq Machine-Translation model)"),Pto=l(),Ps=a("li"),wY=a("strong"),$to=o("funnel"),Ito=o(" \u2014 "),pR=a("a"),Dto=o("FunnelModel"),jto=o(" or "),_R=a("a"),Nto=o("FunnelBaseModel"),qto=o(" (Funnel Transformer model)"),Gto=l(),Zh=a("li"),AY=a("strong"),Oto=o("gpt2"),Xto=o(" \u2014 "),uR=a("a"),Vto=o("GPT2Model"),zto=o(" (OpenAI GPT-2 model)"),Wto=l(),ep=a("li"),LY=a("strong"),Qto=o("gpt_neo"),Hto=o(" \u2014 "),bR=a("a"),Uto=o("GPTNeoModel"),Jto=o(" (GPT Neo model)"),Yto=l(),op=a("li"),BY=a("strong"),Kto=o("gptj"),Zto=o(" \u2014 "),vR=a("a"),eao=o("GPTJModel"),oao=o(" (GPT-J model)"),rao=l(),rp=a("li"),xY=a("strong"),tao=o("hubert"),aao=o(" \u2014 "),TR=a("a"),nao=o("HubertModel"),sao=o(" (Hubert model)"),lao=l(),tp=a("li"),kY=a("strong"),iao=o("ibert"),dao=o(" \u2014 "),FR=a("a"),cao=o("IBertModel"),fao=o(" (I-BERT model)"),mao=l(),ap=a("li"),RY=a("strong"),gao=o("imagegpt"),hao=o(" \u2014 "),CR=a("a"),pao=o("ImageGPTModel"),_ao=o(" (ImageGPT model)"),uao=l(),np=a("li"),SY=a("strong"),bao=o("layoutlm"),vao=o(" \u2014 "),MR=a("a"),Tao=o("LayoutLMModel"),Fao=o(" (LayoutLM model)"),Cao=l(),sp=a("li"),PY=a("strong"),Mao=o("layoutlmv2"),Eao=o(" \u2014 "),ER=a("a"),yao=o("LayoutLMv2Model"),wao=o(" (LayoutLMv2 model)"),Aao=l(),lp=a("li"),$Y=a("strong"),Lao=o("led"),Bao=o(" \u2014 "),yR=a("a"),xao=o("LEDModel"),kao=o(" (LED model)"),Rao=l(),ip=a("li"),IY=a("strong"),Sao=o("longformer"),Pao=o(" \u2014 "),wR=a("a"),$ao=o("LongformerModel"),Iao=o(" (Longformer model)"),Dao=l(),dp=a("li"),DY=a("strong"),jao=o("luke"),Nao=o(" \u2014 "),AR=a("a"),qao=o("LukeModel"),Gao=o(" (LUKE model)"),Oao=l(),cp=a("li"),jY=a("strong"),Xao=o("lxmert"),Vao=o(" \u2014 "),LR=a("a"),zao=o("LxmertModel"),Wao=o(" (LXMERT model)"),Qao=l(),fp=a("li"),NY=a("strong"),Hao=o("m2m_100"),Uao=o(" \u2014 "),BR=a("a"),Jao=o("M2M100Model"),Yao=o(" (M2M100 model)"),Kao=l(),mp=a("li"),qY=a("strong"),Zao=o("marian"),eno=o(" \u2014 "),xR=a("a"),ono=o("MarianModel"),rno=o(" (Marian model)"),tno=l(),gp=a("li"),GY=a("strong"),ano=o("maskformer"),nno=o(" \u2014 "),kR=a("a"),sno=o("MaskFormerModel"),lno=o(" (MaskFormer model)"),ino=l(),hp=a("li"),OY=a("strong"),dno=o("mbart"),cno=o(" \u2014 "),RR=a("a"),fno=o("MBartModel"),mno=o(" (mBART model)"),gno=l(),pp=a("li"),XY=a("strong"),hno=o("megatron-bert"),pno=o(" \u2014 "),SR=a("a"),_no=o("MegatronBertModel"),uno=o(" (MegatronBert model)"),bno=l(),_p=a("li"),VY=a("strong"),vno=o("mobilebert"),Tno=o(" \u2014 "),PR=a("a"),Fno=o("MobileBertModel"),Cno=o(" (MobileBERT model)"),Mno=l(),up=a("li"),zY=a("strong"),Eno=o("mpnet"),yno=o(" \u2014 "),$R=a("a"),wno=o("MPNetModel"),Ano=o(" (MPNet model)"),Lno=l(),bp=a("li"),WY=a("strong"),Bno=o("mt5"),xno=o(" \u2014 "),IR=a("a"),kno=o("MT5Model"),Rno=o(" (mT5 model)"),Sno=l(),vp=a("li"),QY=a("strong"),Pno=o("nystromformer"),$no=o(" \u2014 "),DR=a("a"),Ino=o("NystromformerModel"),Dno=o(" (Nystromformer model)"),jno=l(),Tp=a("li"),HY=a("strong"),Nno=o("openai-gpt"),qno=o(" \u2014 "),jR=a("a"),Gno=o("OpenAIGPTModel"),Ono=o(" (OpenAI GPT model)"),Xno=l(),Fp=a("li"),UY=a("strong"),Vno=o("pegasus"),zno=o(" \u2014 "),NR=a("a"),Wno=o("PegasusModel"),Qno=o(" (Pegasus model)"),Hno=l(),Cp=a("li"),JY=a("strong"),Uno=o("perceiver"),Jno=o(" \u2014 "),qR=a("a"),Yno=o("PerceiverModel"),Kno=o(" (Perceiver model)"),Zno=l(),Mp=a("li"),YY=a("strong"),eso=o("plbart"),oso=o(" \u2014 "),GR=a("a"),rso=o("PLBartModel"),tso=o(" (PLBart model)"),aso=l(),Ep=a("li"),KY=a("strong"),nso=o("poolformer"),sso=o(" \u2014 "),OR=a("a"),lso=o("PoolFormerModel"),iso=o(" (PoolFormer model)"),dso=l(),yp=a("li"),ZY=a("strong"),cso=o("prophetnet"),fso=o(" \u2014 "),XR=a("a"),mso=o("ProphetNetModel"),gso=o(" (ProphetNet model)"),hso=l(),wp=a("li"),eK=a("strong"),pso=o("qdqbert"),_so=o(" \u2014 "),VR=a("a"),uso=o("QDQBertModel"),bso=o(" (QDQBert model)"),vso=l(),Ap=a("li"),oK=a("strong"),Tso=o("reformer"),Fso=o(" \u2014 "),zR=a("a"),Cso=o("ReformerModel"),Mso=o(" (Reformer model)"),Eso=l(),Lp=a("li"),rK=a("strong"),yso=o("rembert"),wso=o(" \u2014 "),WR=a("a"),Aso=o("RemBertModel"),Lso=o(" (RemBERT model)"),Bso=l(),Bp=a("li"),tK=a("strong"),xso=o("retribert"),kso=o(" \u2014 "),QR=a("a"),Rso=o("RetriBertModel"),Sso=o(" (RetriBERT model)"),Pso=l(),xp=a("li"),aK=a("strong"),$so=o("roberta"),Iso=o(" \u2014 "),HR=a("a"),Dso=o("RobertaModel"),jso=o(" (RoBERTa model)"),Nso=l(),kp=a("li"),nK=a("strong"),qso=o("roformer"),Gso=o(" \u2014 "),UR=a("a"),Oso=o("RoFormerModel"),Xso=o(" (RoFormer model)"),Vso=l(),Rp=a("li"),sK=a("strong"),zso=o("segformer"),Wso=o(" \u2014 "),JR=a("a"),Qso=o("SegformerModel"),Hso=o(" (SegFormer model)"),Uso=l(),Sp=a("li"),lK=a("strong"),Jso=o("sew"),Yso=o(" \u2014 "),YR=a("a"),Kso=o("SEWModel"),Zso=o(" (SEW model)"),elo=l(),Pp=a("li"),iK=a("strong"),olo=o("sew-d"),rlo=o(" \u2014 "),KR=a("a"),tlo=o("SEWDModel"),alo=o(" (SEW-D model)"),nlo=l(),$p=a("li"),dK=a("strong"),slo=o("speech_to_text"),llo=o(" \u2014 "),ZR=a("a"),ilo=o("Speech2TextModel"),dlo=o(" (Speech2Text model)"),clo=l(),Ip=a("li"),cK=a("strong"),flo=o("splinter"),mlo=o(" \u2014 "),eS=a("a"),glo=o("SplinterModel"),hlo=o(" (Splinter model)"),plo=l(),Dp=a("li"),fK=a("strong"),_lo=o("squeezebert"),ulo=o(" \u2014 "),oS=a("a"),blo=o("SqueezeBertModel"),vlo=o(" (SqueezeBERT model)"),Tlo=l(),jp=a("li"),mK=a("strong"),Flo=o("swin"),Clo=o(" \u2014 "),rS=a("a"),Mlo=o("SwinModel"),Elo=o(" (Swin model)"),ylo=l(),Np=a("li"),gK=a("strong"),wlo=o("t5"),Alo=o(" \u2014 "),tS=a("a"),Llo=o("T5Model"),Blo=o(" (T5 model)"),xlo=l(),qp=a("li"),hK=a("strong"),klo=o("tapas"),Rlo=o(" \u2014 "),aS=a("a"),Slo=o("TapasModel"),Plo=o(" (TAPAS model)"),$lo=l(),Gp=a("li"),pK=a("strong"),Ilo=o("transfo-xl"),Dlo=o(" \u2014 "),nS=a("a"),jlo=o("TransfoXLModel"),Nlo=o(" (Transformer-XL model)"),qlo=l(),Op=a("li"),_K=a("strong"),Glo=o("unispeech"),Olo=o(" \u2014 "),sS=a("a"),Xlo=o("UniSpeechModel"),Vlo=o(" (UniSpeech model)"),zlo=l(),Xp=a("li"),uK=a("strong"),Wlo=o("unispeech-sat"),Qlo=o(" \u2014 "),lS=a("a"),Hlo=o("UniSpeechSatModel"),Ulo=o(" (UniSpeechSat model)"),Jlo=l(),Vp=a("li"),bK=a("strong"),Ylo=o("vilt"),Klo=o(" \u2014 "),iS=a("a"),Zlo=o("ViltModel"),eio=o(" (ViLT model)"),oio=l(),zp=a("li"),vK=a("strong"),rio=o("vision-text-dual-encoder"),tio=o(" \u2014 "),dS=a("a"),aio=o("VisionTextDualEncoderModel"),nio=o(" (VisionTextDualEncoder model)"),sio=l(),Wp=a("li"),TK=a("strong"),lio=o("visual_bert"),iio=o(" \u2014 "),cS=a("a"),dio=o("VisualBertModel"),cio=o(" (VisualBert model)"),fio=l(),Qp=a("li"),FK=a("strong"),mio=o("vit"),gio=o(" \u2014 "),fS=a("a"),hio=o("ViTModel"),pio=o(" (ViT model)"),_io=l(),Hp=a("li"),CK=a("strong"),uio=o("vit_mae"),bio=o(" \u2014 "),mS=a("a"),vio=o("ViTMAEModel"),Tio=o(" (ViTMAE model)"),Fio=l(),Up=a("li"),MK=a("strong"),Cio=o("wav2vec2"),Mio=o(" \u2014 "),gS=a("a"),Eio=o("Wav2Vec2Model"),yio=o(" (Wav2Vec2 model)"),wio=l(),Jp=a("li"),EK=a("strong"),Aio=o("wavlm"),Lio=o(" \u2014 "),hS=a("a"),Bio=o("WavLMModel"),xio=o(" (WavLM model)"),kio=l(),Yp=a("li"),yK=a("strong"),Rio=o("xglm"),Sio=o(" \u2014 "),pS=a("a"),Pio=o("XGLMModel"),$io=o(" (XGLM model)"),Iio=l(),Kp=a("li"),wK=a("strong"),Dio=o("xlm"),jio=o(" \u2014 "),_S=a("a"),Nio=o("XLMModel"),qio=o(" (XLM model)"),Gio=l(),Zp=a("li"),AK=a("strong"),Oio=o("xlm-prophetnet"),Xio=o(" \u2014 "),uS=a("a"),Vio=o("XLMProphetNetModel"),zio=o(" (XLMProphetNet model)"),Wio=l(),e_=a("li"),LK=a("strong"),Qio=o("xlm-roberta"),Hio=o(" \u2014 "),bS=a("a"),Uio=o("XLMRobertaModel"),Jio=o(" (XLM-RoBERTa model)"),Yio=l(),o_=a("li"),BK=a("strong"),Kio=o("xlm-roberta-xl"),Zio=o(" \u2014 "),vS=a("a"),edo=o("XLMRobertaXLModel"),odo=o(" (XLM-RoBERTa-XL model)"),rdo=l(),r_=a("li"),xK=a("strong"),tdo=o("xlnet"),ado=o(" \u2014 "),TS=a("a"),ndo=o("XLNetModel"),sdo=o(" (XLNet model)"),ldo=l(),t_=a("li"),kK=a("strong"),ido=o("yoso"),ddo=o(" \u2014 "),FS=a("a"),cdo=o("YosoModel"),fdo=o(" (YOSO model)"),mdo=l(),a_=a("p"),gdo=o("The model is set in evaluation mode by default using "),RK=a("code"),hdo=o("model.eval()"),pdo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SK=a("code"),_do=o("model.train()"),udo=l(),PK=a("p"),bdo=o("Examples:"),vdo=l(),f(dE.$$.fragment),z7e=l(),Wi=a("h2"),n_=a("a"),$K=a("span"),f(cE.$$.fragment),Tdo=l(),IK=a("span"),Fdo=o("AutoModelForPreTraining"),W7e=l(),Ho=a("div"),f(fE.$$.fragment),Cdo=l(),Qi=a("p"),Mdo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DK=a("code"),Edo=o("from_pretrained()"),ydo=o("class method or the "),jK=a("code"),wdo=o("from_config()"),Ado=o(`class
method.`),Ldo=l(),mE=a("p"),Bdo=o("This class cannot be instantiated directly using "),NK=a("code"),xdo=o("__init__()"),kdo=o(" (throws an error)."),Rdo=l(),Gr=a("div"),f(gE.$$.fragment),Sdo=l(),qK=a("p"),Pdo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$do=l(),Hi=a("p"),Ido=o(`Note:
Loading a model from its configuration file does `),GK=a("strong"),Ddo=o("not"),jdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("code"),Ndo=o("from_pretrained()"),qdo=o("to load the model weights."),Gdo=l(),XK=a("p"),Odo=o("Examples:"),Xdo=l(),f(hE.$$.fragment),Vdo=l(),Se=a("div"),f(pE.$$.fragment),zdo=l(),VK=a("p"),Wdo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qdo=l(),qa=a("p"),Hdo=o("The model class to instantiate is selected based on the "),zK=a("code"),Udo=o("model_type"),Jdo=o(` property of the config object (either
passed as an argument or loaded from `),WK=a("code"),Ydo=o("pretrained_model_name_or_path"),Kdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QK=a("code"),Zdo=o("pretrained_model_name_or_path"),eco=o(":"),oco=l(),k=a("ul"),s_=a("li"),HK=a("strong"),rco=o("albert"),tco=o(" \u2014 "),CS=a("a"),aco=o("AlbertForPreTraining"),nco=o(" (ALBERT model)"),sco=l(),l_=a("li"),UK=a("strong"),lco=o("bart"),ico=o(" \u2014 "),MS=a("a"),dco=o("BartForConditionalGeneration"),cco=o(" (BART model)"),fco=l(),i_=a("li"),JK=a("strong"),mco=o("bert"),gco=o(" \u2014 "),ES=a("a"),hco=o("BertForPreTraining"),pco=o(" (BERT model)"),_co=l(),d_=a("li"),YK=a("strong"),uco=o("big_bird"),bco=o(" \u2014 "),yS=a("a"),vco=o("BigBirdForPreTraining"),Tco=o(" (BigBird model)"),Fco=l(),c_=a("li"),KK=a("strong"),Cco=o("camembert"),Mco=o(" \u2014 "),wS=a("a"),Eco=o("CamembertForMaskedLM"),yco=o(" (CamemBERT model)"),wco=l(),f_=a("li"),ZK=a("strong"),Aco=o("ctrl"),Lco=o(" \u2014 "),AS=a("a"),Bco=o("CTRLLMHeadModel"),xco=o(" (CTRL model)"),kco=l(),m_=a("li"),eZ=a("strong"),Rco=o("data2vec-text"),Sco=o(" \u2014 "),LS=a("a"),Pco=o("Data2VecTextForMaskedLM"),$co=o(" (Data2VecText model)"),Ico=l(),g_=a("li"),oZ=a("strong"),Dco=o("deberta"),jco=o(" \u2014 "),BS=a("a"),Nco=o("DebertaForMaskedLM"),qco=o(" (DeBERTa model)"),Gco=l(),h_=a("li"),rZ=a("strong"),Oco=o("deberta-v2"),Xco=o(" \u2014 "),xS=a("a"),Vco=o("DebertaV2ForMaskedLM"),zco=o(" (DeBERTa-v2 model)"),Wco=l(),p_=a("li"),tZ=a("strong"),Qco=o("distilbert"),Hco=o(" \u2014 "),kS=a("a"),Uco=o("DistilBertForMaskedLM"),Jco=o(" (DistilBERT model)"),Yco=l(),__=a("li"),aZ=a("strong"),Kco=o("electra"),Zco=o(" \u2014 "),RS=a("a"),efo=o("ElectraForPreTraining"),ofo=o(" (ELECTRA model)"),rfo=l(),u_=a("li"),nZ=a("strong"),tfo=o("flaubert"),afo=o(" \u2014 "),SS=a("a"),nfo=o("FlaubertWithLMHeadModel"),sfo=o(" (FlauBERT model)"),lfo=l(),b_=a("li"),sZ=a("strong"),ifo=o("fnet"),dfo=o(" \u2014 "),PS=a("a"),cfo=o("FNetForPreTraining"),ffo=o(" (FNet model)"),mfo=l(),v_=a("li"),lZ=a("strong"),gfo=o("fsmt"),hfo=o(" \u2014 "),$S=a("a"),pfo=o("FSMTForConditionalGeneration"),_fo=o(" (FairSeq Machine-Translation model)"),ufo=l(),T_=a("li"),iZ=a("strong"),bfo=o("funnel"),vfo=o(" \u2014 "),IS=a("a"),Tfo=o("FunnelForPreTraining"),Ffo=o(" (Funnel Transformer model)"),Cfo=l(),F_=a("li"),dZ=a("strong"),Mfo=o("gpt2"),Efo=o(" \u2014 "),DS=a("a"),yfo=o("GPT2LMHeadModel"),wfo=o(" (OpenAI GPT-2 model)"),Afo=l(),C_=a("li"),cZ=a("strong"),Lfo=o("ibert"),Bfo=o(" \u2014 "),jS=a("a"),xfo=o("IBertForMaskedLM"),kfo=o(" (I-BERT model)"),Rfo=l(),M_=a("li"),fZ=a("strong"),Sfo=o("layoutlm"),Pfo=o(" \u2014 "),NS=a("a"),$fo=o("LayoutLMForMaskedLM"),Ifo=o(" (LayoutLM model)"),Dfo=l(),E_=a("li"),mZ=a("strong"),jfo=o("longformer"),Nfo=o(" \u2014 "),qS=a("a"),qfo=o("LongformerForMaskedLM"),Gfo=o(" (Longformer model)"),Ofo=l(),y_=a("li"),gZ=a("strong"),Xfo=o("lxmert"),Vfo=o(" \u2014 "),GS=a("a"),zfo=o("LxmertForPreTraining"),Wfo=o(" (LXMERT model)"),Qfo=l(),w_=a("li"),hZ=a("strong"),Hfo=o("megatron-bert"),Ufo=o(" \u2014 "),OS=a("a"),Jfo=o("MegatronBertForPreTraining"),Yfo=o(" (MegatronBert model)"),Kfo=l(),A_=a("li"),pZ=a("strong"),Zfo=o("mobilebert"),emo=o(" \u2014 "),XS=a("a"),omo=o("MobileBertForPreTraining"),rmo=o(" (MobileBERT model)"),tmo=l(),L_=a("li"),_Z=a("strong"),amo=o("mpnet"),nmo=o(" \u2014 "),VS=a("a"),smo=o("MPNetForMaskedLM"),lmo=o(" (MPNet model)"),imo=l(),B_=a("li"),uZ=a("strong"),dmo=o("openai-gpt"),cmo=o(" \u2014 "),zS=a("a"),fmo=o("OpenAIGPTLMHeadModel"),mmo=o(" (OpenAI GPT model)"),gmo=l(),x_=a("li"),bZ=a("strong"),hmo=o("retribert"),pmo=o(" \u2014 "),WS=a("a"),_mo=o("RetriBertModel"),umo=o(" (RetriBERT model)"),bmo=l(),k_=a("li"),vZ=a("strong"),vmo=o("roberta"),Tmo=o(" \u2014 "),QS=a("a"),Fmo=o("RobertaForMaskedLM"),Cmo=o(" (RoBERTa model)"),Mmo=l(),R_=a("li"),TZ=a("strong"),Emo=o("squeezebert"),ymo=o(" \u2014 "),HS=a("a"),wmo=o("SqueezeBertForMaskedLM"),Amo=o(" (SqueezeBERT model)"),Lmo=l(),S_=a("li"),FZ=a("strong"),Bmo=o("t5"),xmo=o(" \u2014 "),US=a("a"),kmo=o("T5ForConditionalGeneration"),Rmo=o(" (T5 model)"),Smo=l(),P_=a("li"),CZ=a("strong"),Pmo=o("tapas"),$mo=o(" \u2014 "),JS=a("a"),Imo=o("TapasForMaskedLM"),Dmo=o(" (TAPAS model)"),jmo=l(),$_=a("li"),MZ=a("strong"),Nmo=o("transfo-xl"),qmo=o(" \u2014 "),YS=a("a"),Gmo=o("TransfoXLLMHeadModel"),Omo=o(" (Transformer-XL model)"),Xmo=l(),I_=a("li"),EZ=a("strong"),Vmo=o("unispeech"),zmo=o(" \u2014 "),KS=a("a"),Wmo=o("UniSpeechForPreTraining"),Qmo=o(" (UniSpeech model)"),Hmo=l(),D_=a("li"),yZ=a("strong"),Umo=o("unispeech-sat"),Jmo=o(" \u2014 "),ZS=a("a"),Ymo=o("UniSpeechSatForPreTraining"),Kmo=o(" (UniSpeechSat model)"),Zmo=l(),j_=a("li"),wZ=a("strong"),ego=o("visual_bert"),ogo=o(" \u2014 "),eP=a("a"),rgo=o("VisualBertForPreTraining"),tgo=o(" (VisualBert model)"),ago=l(),N_=a("li"),AZ=a("strong"),ngo=o("vit_mae"),sgo=o(" \u2014 "),oP=a("a"),lgo=o("ViTMAEForPreTraining"),igo=o(" (ViTMAE model)"),dgo=l(),q_=a("li"),LZ=a("strong"),cgo=o("wav2vec2"),fgo=o(" \u2014 "),rP=a("a"),mgo=o("Wav2Vec2ForPreTraining"),ggo=o(" (Wav2Vec2 model)"),hgo=l(),G_=a("li"),BZ=a("strong"),pgo=o("xlm"),_go=o(" \u2014 "),tP=a("a"),ugo=o("XLMWithLMHeadModel"),bgo=o(" (XLM model)"),vgo=l(),O_=a("li"),xZ=a("strong"),Tgo=o("xlm-roberta"),Fgo=o(" \u2014 "),aP=a("a"),Cgo=o("XLMRobertaForMaskedLM"),Mgo=o(" (XLM-RoBERTa model)"),Ego=l(),X_=a("li"),kZ=a("strong"),ygo=o("xlm-roberta-xl"),wgo=o(" \u2014 "),nP=a("a"),Ago=o("XLMRobertaXLForMaskedLM"),Lgo=o(" (XLM-RoBERTa-XL model)"),Bgo=l(),V_=a("li"),RZ=a("strong"),xgo=o("xlnet"),kgo=o(" \u2014 "),sP=a("a"),Rgo=o("XLNetLMHeadModel"),Sgo=o(" (XLNet model)"),Pgo=l(),z_=a("p"),$go=o("The model is set in evaluation mode by default using "),SZ=a("code"),Igo=o("model.eval()"),Dgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PZ=a("code"),jgo=o("model.train()"),Ngo=l(),$Z=a("p"),qgo=o("Examples:"),Ggo=l(),f(_E.$$.fragment),Q7e=l(),Ui=a("h2"),W_=a("a"),IZ=a("span"),f(uE.$$.fragment),Ogo=l(),DZ=a("span"),Xgo=o("AutoModelForCausalLM"),H7e=l(),Uo=a("div"),f(bE.$$.fragment),Vgo=l(),Ji=a("p"),zgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jZ=a("code"),Wgo=o("from_pretrained()"),Qgo=o("class method or the "),NZ=a("code"),Hgo=o("from_config()"),Ugo=o(`class
method.`),Jgo=l(),vE=a("p"),Ygo=o("This class cannot be instantiated directly using "),qZ=a("code"),Kgo=o("__init__()"),Zgo=o(" (throws an error)."),eho=l(),Or=a("div"),f(TE.$$.fragment),oho=l(),GZ=a("p"),rho=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),tho=l(),Yi=a("p"),aho=o(`Note:
Loading a model from its configuration file does `),OZ=a("strong"),nho=o("not"),sho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("code"),lho=o("from_pretrained()"),iho=o("to load the model weights."),dho=l(),VZ=a("p"),cho=o("Examples:"),fho=l(),f(FE.$$.fragment),mho=l(),Pe=a("div"),f(CE.$$.fragment),gho=l(),zZ=a("p"),hho=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pho=l(),Ga=a("p"),_ho=o("The model class to instantiate is selected based on the "),WZ=a("code"),uho=o("model_type"),bho=o(` property of the config object (either
passed as an argument or loaded from `),QZ=a("code"),vho=o("pretrained_model_name_or_path"),Tho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HZ=a("code"),Fho=o("pretrained_model_name_or_path"),Cho=o(":"),Mho=l(),$=a("ul"),Q_=a("li"),UZ=a("strong"),Eho=o("bart"),yho=o(" \u2014 "),lP=a("a"),who=o("BartForCausalLM"),Aho=o(" (BART model)"),Lho=l(),H_=a("li"),JZ=a("strong"),Bho=o("bert"),xho=o(" \u2014 "),iP=a("a"),kho=o("BertLMHeadModel"),Rho=o(" (BERT model)"),Sho=l(),U_=a("li"),YZ=a("strong"),Pho=o("bert-generation"),$ho=o(" \u2014 "),dP=a("a"),Iho=o("BertGenerationDecoder"),Dho=o(" (Bert Generation model)"),jho=l(),J_=a("li"),KZ=a("strong"),Nho=o("big_bird"),qho=o(" \u2014 "),cP=a("a"),Gho=o("BigBirdForCausalLM"),Oho=o(" (BigBird model)"),Xho=l(),Y_=a("li"),ZZ=a("strong"),Vho=o("bigbird_pegasus"),zho=o(" \u2014 "),fP=a("a"),Who=o("BigBirdPegasusForCausalLM"),Qho=o(" (BigBirdPegasus model)"),Hho=l(),K_=a("li"),eee=a("strong"),Uho=o("blenderbot"),Jho=o(" \u2014 "),mP=a("a"),Yho=o("BlenderbotForCausalLM"),Kho=o(" (Blenderbot model)"),Zho=l(),Z_=a("li"),oee=a("strong"),epo=o("blenderbot-small"),opo=o(" \u2014 "),gP=a("a"),rpo=o("BlenderbotSmallForCausalLM"),tpo=o(" (BlenderbotSmall model)"),apo=l(),eu=a("li"),ree=a("strong"),npo=o("camembert"),spo=o(" \u2014 "),hP=a("a"),lpo=o("CamembertForCausalLM"),ipo=o(" (CamemBERT model)"),dpo=l(),ou=a("li"),tee=a("strong"),cpo=o("ctrl"),fpo=o(" \u2014 "),pP=a("a"),mpo=o("CTRLLMHeadModel"),gpo=o(" (CTRL model)"),hpo=l(),ru=a("li"),aee=a("strong"),ppo=o("data2vec-text"),_po=o(" \u2014 "),_P=a("a"),upo=o("Data2VecTextForCausalLM"),bpo=o(" (Data2VecText model)"),vpo=l(),tu=a("li"),nee=a("strong"),Tpo=o("electra"),Fpo=o(" \u2014 "),uP=a("a"),Cpo=o("ElectraForCausalLM"),Mpo=o(" (ELECTRA model)"),Epo=l(),au=a("li"),see=a("strong"),ypo=o("gpt2"),wpo=o(" \u2014 "),bP=a("a"),Apo=o("GPT2LMHeadModel"),Lpo=o(" (OpenAI GPT-2 model)"),Bpo=l(),nu=a("li"),lee=a("strong"),xpo=o("gpt_neo"),kpo=o(" \u2014 "),vP=a("a"),Rpo=o("GPTNeoForCausalLM"),Spo=o(" (GPT Neo model)"),Ppo=l(),su=a("li"),iee=a("strong"),$po=o("gptj"),Ipo=o(" \u2014 "),TP=a("a"),Dpo=o("GPTJForCausalLM"),jpo=o(" (GPT-J model)"),Npo=l(),lu=a("li"),dee=a("strong"),qpo=o("marian"),Gpo=o(" \u2014 "),FP=a("a"),Opo=o("MarianForCausalLM"),Xpo=o(" (Marian model)"),Vpo=l(),iu=a("li"),cee=a("strong"),zpo=o("mbart"),Wpo=o(" \u2014 "),CP=a("a"),Qpo=o("MBartForCausalLM"),Hpo=o(" (mBART model)"),Upo=l(),du=a("li"),fee=a("strong"),Jpo=o("megatron-bert"),Ypo=o(" \u2014 "),MP=a("a"),Kpo=o("MegatronBertForCausalLM"),Zpo=o(" (MegatronBert model)"),e_o=l(),cu=a("li"),mee=a("strong"),o_o=o("openai-gpt"),r_o=o(" \u2014 "),EP=a("a"),t_o=o("OpenAIGPTLMHeadModel"),a_o=o(" (OpenAI GPT model)"),n_o=l(),fu=a("li"),gee=a("strong"),s_o=o("pegasus"),l_o=o(" \u2014 "),yP=a("a"),i_o=o("PegasusForCausalLM"),d_o=o(" (Pegasus model)"),c_o=l(),mu=a("li"),hee=a("strong"),f_o=o("plbart"),m_o=o(" \u2014 "),wP=a("a"),g_o=o("PLBartForCausalLM"),h_o=o(" (PLBart model)"),p_o=l(),gu=a("li"),pee=a("strong"),__o=o("prophetnet"),u_o=o(" \u2014 "),AP=a("a"),b_o=o("ProphetNetForCausalLM"),v_o=o(" (ProphetNet model)"),T_o=l(),hu=a("li"),_ee=a("strong"),F_o=o("qdqbert"),C_o=o(" \u2014 "),LP=a("a"),M_o=o("QDQBertLMHeadModel"),E_o=o(" (QDQBert model)"),y_o=l(),pu=a("li"),uee=a("strong"),w_o=o("reformer"),A_o=o(" \u2014 "),BP=a("a"),L_o=o("ReformerModelWithLMHead"),B_o=o(" (Reformer model)"),x_o=l(),_u=a("li"),bee=a("strong"),k_o=o("rembert"),R_o=o(" \u2014 "),xP=a("a"),S_o=o("RemBertForCausalLM"),P_o=o(" (RemBERT model)"),$_o=l(),uu=a("li"),vee=a("strong"),I_o=o("roberta"),D_o=o(" \u2014 "),kP=a("a"),j_o=o("RobertaForCausalLM"),N_o=o(" (RoBERTa model)"),q_o=l(),bu=a("li"),Tee=a("strong"),G_o=o("roformer"),O_o=o(" \u2014 "),RP=a("a"),X_o=o("RoFormerForCausalLM"),V_o=o(" (RoFormer model)"),z_o=l(),vu=a("li"),Fee=a("strong"),W_o=o("speech_to_text_2"),Q_o=o(" \u2014 "),SP=a("a"),H_o=o("Speech2Text2ForCausalLM"),U_o=o(" (Speech2Text2 model)"),J_o=l(),Tu=a("li"),Cee=a("strong"),Y_o=o("transfo-xl"),K_o=o(" \u2014 "),PP=a("a"),Z_o=o("TransfoXLLMHeadModel"),euo=o(" (Transformer-XL model)"),ouo=l(),Fu=a("li"),Mee=a("strong"),ruo=o("trocr"),tuo=o(" \u2014 "),$P=a("a"),auo=o("TrOCRForCausalLM"),nuo=o(" (TrOCR model)"),suo=l(),Cu=a("li"),Eee=a("strong"),luo=o("xglm"),iuo=o(" \u2014 "),IP=a("a"),duo=o("XGLMForCausalLM"),cuo=o(" (XGLM model)"),fuo=l(),Mu=a("li"),yee=a("strong"),muo=o("xlm"),guo=o(" \u2014 "),DP=a("a"),huo=o("XLMWithLMHeadModel"),puo=o(" (XLM model)"),_uo=l(),Eu=a("li"),wee=a("strong"),uuo=o("xlm-prophetnet"),buo=o(" \u2014 "),jP=a("a"),vuo=o("XLMProphetNetForCausalLM"),Tuo=o(" (XLMProphetNet model)"),Fuo=l(),yu=a("li"),Aee=a("strong"),Cuo=o("xlm-roberta"),Muo=o(" \u2014 "),NP=a("a"),Euo=o("XLMRobertaForCausalLM"),yuo=o(" (XLM-RoBERTa model)"),wuo=l(),wu=a("li"),Lee=a("strong"),Auo=o("xlm-roberta-xl"),Luo=o(" \u2014 "),qP=a("a"),Buo=o("XLMRobertaXLForCausalLM"),xuo=o(" (XLM-RoBERTa-XL model)"),kuo=l(),Au=a("li"),Bee=a("strong"),Ruo=o("xlnet"),Suo=o(" \u2014 "),GP=a("a"),Puo=o("XLNetLMHeadModel"),$uo=o(" (XLNet model)"),Iuo=l(),Lu=a("p"),Duo=o("The model is set in evaluation mode by default using "),xee=a("code"),juo=o("model.eval()"),Nuo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kee=a("code"),quo=o("model.train()"),Guo=l(),Ree=a("p"),Ouo=o("Examples:"),Xuo=l(),f(ME.$$.fragment),U7e=l(),Ki=a("h2"),Bu=a("a"),See=a("span"),f(EE.$$.fragment),Vuo=l(),Pee=a("span"),zuo=o("AutoModelForMaskedLM"),J7e=l(),Jo=a("div"),f(yE.$$.fragment),Wuo=l(),Zi=a("p"),Quo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$ee=a("code"),Huo=o("from_pretrained()"),Uuo=o("class method or the "),Iee=a("code"),Juo=o("from_config()"),Yuo=o(`class
method.`),Kuo=l(),wE=a("p"),Zuo=o("This class cannot be instantiated directly using "),Dee=a("code"),e1o=o("__init__()"),o1o=o(" (throws an error)."),r1o=l(),Xr=a("div"),f(AE.$$.fragment),t1o=l(),jee=a("p"),a1o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),n1o=l(),ed=a("p"),s1o=o(`Note:
Loading a model from its configuration file does `),Nee=a("strong"),l1o=o("not"),i1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=a("code"),d1o=o("from_pretrained()"),c1o=o("to load the model weights."),f1o=l(),Gee=a("p"),m1o=o("Examples:"),g1o=l(),f(LE.$$.fragment),h1o=l(),$e=a("div"),f(BE.$$.fragment),p1o=l(),Oee=a("p"),_1o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),u1o=l(),Oa=a("p"),b1o=o("The model class to instantiate is selected based on the "),Xee=a("code"),v1o=o("model_type"),T1o=o(` property of the config object (either
passed as an argument or loaded from `),Vee=a("code"),F1o=o("pretrained_model_name_or_path"),C1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zee=a("code"),M1o=o("pretrained_model_name_or_path"),E1o=o(":"),y1o=l(),I=a("ul"),xu=a("li"),Wee=a("strong"),w1o=o("albert"),A1o=o(" \u2014 "),OP=a("a"),L1o=o("AlbertForMaskedLM"),B1o=o(" (ALBERT model)"),x1o=l(),ku=a("li"),Qee=a("strong"),k1o=o("bart"),R1o=o(" \u2014 "),XP=a("a"),S1o=o("BartForConditionalGeneration"),P1o=o(" (BART model)"),$1o=l(),Ru=a("li"),Hee=a("strong"),I1o=o("bert"),D1o=o(" \u2014 "),VP=a("a"),j1o=o("BertForMaskedLM"),N1o=o(" (BERT model)"),q1o=l(),Su=a("li"),Uee=a("strong"),G1o=o("big_bird"),O1o=o(" \u2014 "),zP=a("a"),X1o=o("BigBirdForMaskedLM"),V1o=o(" (BigBird model)"),z1o=l(),Pu=a("li"),Jee=a("strong"),W1o=o("camembert"),Q1o=o(" \u2014 "),WP=a("a"),H1o=o("CamembertForMaskedLM"),U1o=o(" (CamemBERT model)"),J1o=l(),$u=a("li"),Yee=a("strong"),Y1o=o("convbert"),K1o=o(" \u2014 "),QP=a("a"),Z1o=o("ConvBertForMaskedLM"),ebo=o(" (ConvBERT model)"),obo=l(),Iu=a("li"),Kee=a("strong"),rbo=o("data2vec-text"),tbo=o(" \u2014 "),HP=a("a"),abo=o("Data2VecTextForMaskedLM"),nbo=o(" (Data2VecText model)"),sbo=l(),Du=a("li"),Zee=a("strong"),lbo=o("deberta"),ibo=o(" \u2014 "),UP=a("a"),dbo=o("DebertaForMaskedLM"),cbo=o(" (DeBERTa model)"),fbo=l(),ju=a("li"),eoe=a("strong"),mbo=o("deberta-v2"),gbo=o(" \u2014 "),JP=a("a"),hbo=o("DebertaV2ForMaskedLM"),pbo=o(" (DeBERTa-v2 model)"),_bo=l(),Nu=a("li"),ooe=a("strong"),ubo=o("distilbert"),bbo=o(" \u2014 "),YP=a("a"),vbo=o("DistilBertForMaskedLM"),Tbo=o(" (DistilBERT model)"),Fbo=l(),qu=a("li"),roe=a("strong"),Cbo=o("electra"),Mbo=o(" \u2014 "),KP=a("a"),Ebo=o("ElectraForMaskedLM"),ybo=o(" (ELECTRA model)"),wbo=l(),Gu=a("li"),toe=a("strong"),Abo=o("flaubert"),Lbo=o(" \u2014 "),ZP=a("a"),Bbo=o("FlaubertWithLMHeadModel"),xbo=o(" (FlauBERT model)"),kbo=l(),Ou=a("li"),aoe=a("strong"),Rbo=o("fnet"),Sbo=o(" \u2014 "),e$=a("a"),Pbo=o("FNetForMaskedLM"),$bo=o(" (FNet model)"),Ibo=l(),Xu=a("li"),noe=a("strong"),Dbo=o("funnel"),jbo=o(" \u2014 "),o$=a("a"),Nbo=o("FunnelForMaskedLM"),qbo=o(" (Funnel Transformer model)"),Gbo=l(),Vu=a("li"),soe=a("strong"),Obo=o("ibert"),Xbo=o(" \u2014 "),r$=a("a"),Vbo=o("IBertForMaskedLM"),zbo=o(" (I-BERT model)"),Wbo=l(),zu=a("li"),loe=a("strong"),Qbo=o("layoutlm"),Hbo=o(" \u2014 "),t$=a("a"),Ubo=o("LayoutLMForMaskedLM"),Jbo=o(" (LayoutLM model)"),Ybo=l(),Wu=a("li"),ioe=a("strong"),Kbo=o("longformer"),Zbo=o(" \u2014 "),a$=a("a"),e3o=o("LongformerForMaskedLM"),o3o=o(" (Longformer model)"),r3o=l(),Qu=a("li"),doe=a("strong"),t3o=o("mbart"),a3o=o(" \u2014 "),n$=a("a"),n3o=o("MBartForConditionalGeneration"),s3o=o(" (mBART model)"),l3o=l(),Hu=a("li"),coe=a("strong"),i3o=o("megatron-bert"),d3o=o(" \u2014 "),s$=a("a"),c3o=o("MegatronBertForMaskedLM"),f3o=o(" (MegatronBert model)"),m3o=l(),Uu=a("li"),foe=a("strong"),g3o=o("mobilebert"),h3o=o(" \u2014 "),l$=a("a"),p3o=o("MobileBertForMaskedLM"),_3o=o(" (MobileBERT model)"),u3o=l(),Ju=a("li"),moe=a("strong"),b3o=o("mpnet"),v3o=o(" \u2014 "),i$=a("a"),T3o=o("MPNetForMaskedLM"),F3o=o(" (MPNet model)"),C3o=l(),Yu=a("li"),goe=a("strong"),M3o=o("nystromformer"),E3o=o(" \u2014 "),d$=a("a"),y3o=o("NystromformerForMaskedLM"),w3o=o(" (Nystromformer model)"),A3o=l(),Ku=a("li"),hoe=a("strong"),L3o=o("perceiver"),B3o=o(" \u2014 "),c$=a("a"),x3o=o("PerceiverForMaskedLM"),k3o=o(" (Perceiver model)"),R3o=l(),Zu=a("li"),poe=a("strong"),S3o=o("qdqbert"),P3o=o(" \u2014 "),f$=a("a"),$3o=o("QDQBertForMaskedLM"),I3o=o(" (QDQBert model)"),D3o=l(),e1=a("li"),_oe=a("strong"),j3o=o("reformer"),N3o=o(" \u2014 "),m$=a("a"),q3o=o("ReformerForMaskedLM"),G3o=o(" (Reformer model)"),O3o=l(),o1=a("li"),uoe=a("strong"),X3o=o("rembert"),V3o=o(" \u2014 "),g$=a("a"),z3o=o("RemBertForMaskedLM"),W3o=o(" (RemBERT model)"),Q3o=l(),r1=a("li"),boe=a("strong"),H3o=o("roberta"),U3o=o(" \u2014 "),h$=a("a"),J3o=o("RobertaForMaskedLM"),Y3o=o(" (RoBERTa model)"),K3o=l(),t1=a("li"),voe=a("strong"),Z3o=o("roformer"),e5o=o(" \u2014 "),p$=a("a"),o5o=o("RoFormerForMaskedLM"),r5o=o(" (RoFormer model)"),t5o=l(),a1=a("li"),Toe=a("strong"),a5o=o("squeezebert"),n5o=o(" \u2014 "),_$=a("a"),s5o=o("SqueezeBertForMaskedLM"),l5o=o(" (SqueezeBERT model)"),i5o=l(),n1=a("li"),Foe=a("strong"),d5o=o("tapas"),c5o=o(" \u2014 "),u$=a("a"),f5o=o("TapasForMaskedLM"),m5o=o(" (TAPAS model)"),g5o=l(),s1=a("li"),Coe=a("strong"),h5o=o("wav2vec2"),p5o=o(" \u2014 "),Moe=a("code"),_5o=o("Wav2Vec2ForMaskedLM"),u5o=o("(Wav2Vec2 model)"),b5o=l(),l1=a("li"),Eoe=a("strong"),v5o=o("xlm"),T5o=o(" \u2014 "),b$=a("a"),F5o=o("XLMWithLMHeadModel"),C5o=o(" (XLM model)"),M5o=l(),i1=a("li"),yoe=a("strong"),E5o=o("xlm-roberta"),y5o=o(" \u2014 "),v$=a("a"),w5o=o("XLMRobertaForMaskedLM"),A5o=o(" (XLM-RoBERTa model)"),L5o=l(),d1=a("li"),woe=a("strong"),B5o=o("xlm-roberta-xl"),x5o=o(" \u2014 "),T$=a("a"),k5o=o("XLMRobertaXLForMaskedLM"),R5o=o(" (XLM-RoBERTa-XL model)"),S5o=l(),c1=a("li"),Aoe=a("strong"),P5o=o("yoso"),$5o=o(" \u2014 "),F$=a("a"),I5o=o("YosoForMaskedLM"),D5o=o(" (YOSO model)"),j5o=l(),f1=a("p"),N5o=o("The model is set in evaluation mode by default using "),Loe=a("code"),q5o=o("model.eval()"),G5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Boe=a("code"),O5o=o("model.train()"),X5o=l(),xoe=a("p"),V5o=o("Examples:"),z5o=l(),f(xE.$$.fragment),Y7e=l(),od=a("h2"),m1=a("a"),koe=a("span"),f(kE.$$.fragment),W5o=l(),Roe=a("span"),Q5o=o("AutoModelForSeq2SeqLM"),K7e=l(),Yo=a("div"),f(RE.$$.fragment),H5o=l(),rd=a("p"),U5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Soe=a("code"),J5o=o("from_pretrained()"),Y5o=o("class method or the "),Poe=a("code"),K5o=o("from_config()"),Z5o=o(`class
method.`),e2o=l(),SE=a("p"),o2o=o("This class cannot be instantiated directly using "),$oe=a("code"),r2o=o("__init__()"),t2o=o(" (throws an error)."),a2o=l(),Vr=a("div"),f(PE.$$.fragment),n2o=l(),Ioe=a("p"),s2o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),l2o=l(),td=a("p"),i2o=o(`Note:
Loading a model from its configuration file does `),Doe=a("strong"),d2o=o("not"),c2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=a("code"),f2o=o("from_pretrained()"),m2o=o("to load the model weights."),g2o=l(),Noe=a("p"),h2o=o("Examples:"),p2o=l(),f($E.$$.fragment),_2o=l(),Ie=a("div"),f(IE.$$.fragment),u2o=l(),qoe=a("p"),b2o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),v2o=l(),Xa=a("p"),T2o=o("The model class to instantiate is selected based on the "),Goe=a("code"),F2o=o("model_type"),C2o=o(` property of the config object (either
passed as an argument or loaded from `),Ooe=a("code"),M2o=o("pretrained_model_name_or_path"),E2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xoe=a("code"),y2o=o("pretrained_model_name_or_path"),w2o=o(":"),A2o=l(),ae=a("ul"),g1=a("li"),Voe=a("strong"),L2o=o("bart"),B2o=o(" \u2014 "),C$=a("a"),x2o=o("BartForConditionalGeneration"),k2o=o(" (BART model)"),R2o=l(),h1=a("li"),zoe=a("strong"),S2o=o("bigbird_pegasus"),P2o=o(" \u2014 "),M$=a("a"),$2o=o("BigBirdPegasusForConditionalGeneration"),I2o=o(" (BigBirdPegasus model)"),D2o=l(),p1=a("li"),Woe=a("strong"),j2o=o("blenderbot"),N2o=o(" \u2014 "),E$=a("a"),q2o=o("BlenderbotForConditionalGeneration"),G2o=o(" (Blenderbot model)"),O2o=l(),_1=a("li"),Qoe=a("strong"),X2o=o("blenderbot-small"),V2o=o(" \u2014 "),y$=a("a"),z2o=o("BlenderbotSmallForConditionalGeneration"),W2o=o(" (BlenderbotSmall model)"),Q2o=l(),u1=a("li"),Hoe=a("strong"),H2o=o("encoder-decoder"),U2o=o(" \u2014 "),w$=a("a"),J2o=o("EncoderDecoderModel"),Y2o=o(" (Encoder decoder model)"),K2o=l(),b1=a("li"),Uoe=a("strong"),Z2o=o("fsmt"),evo=o(" \u2014 "),A$=a("a"),ovo=o("FSMTForConditionalGeneration"),rvo=o(" (FairSeq Machine-Translation model)"),tvo=l(),v1=a("li"),Joe=a("strong"),avo=o("led"),nvo=o(" \u2014 "),L$=a("a"),svo=o("LEDForConditionalGeneration"),lvo=o(" (LED model)"),ivo=l(),T1=a("li"),Yoe=a("strong"),dvo=o("m2m_100"),cvo=o(" \u2014 "),B$=a("a"),fvo=o("M2M100ForConditionalGeneration"),mvo=o(" (M2M100 model)"),gvo=l(),F1=a("li"),Koe=a("strong"),hvo=o("marian"),pvo=o(" \u2014 "),x$=a("a"),_vo=o("MarianMTModel"),uvo=o(" (Marian model)"),bvo=l(),C1=a("li"),Zoe=a("strong"),vvo=o("mbart"),Tvo=o(" \u2014 "),k$=a("a"),Fvo=o("MBartForConditionalGeneration"),Cvo=o(" (mBART model)"),Mvo=l(),M1=a("li"),ere=a("strong"),Evo=o("mt5"),yvo=o(" \u2014 "),R$=a("a"),wvo=o("MT5ForConditionalGeneration"),Avo=o(" (mT5 model)"),Lvo=l(),E1=a("li"),ore=a("strong"),Bvo=o("pegasus"),xvo=o(" \u2014 "),S$=a("a"),kvo=o("PegasusForConditionalGeneration"),Rvo=o(" (Pegasus model)"),Svo=l(),y1=a("li"),rre=a("strong"),Pvo=o("plbart"),$vo=o(" \u2014 "),P$=a("a"),Ivo=o("PLBartForConditionalGeneration"),Dvo=o(" (PLBart model)"),jvo=l(),w1=a("li"),tre=a("strong"),Nvo=o("prophetnet"),qvo=o(" \u2014 "),$$=a("a"),Gvo=o("ProphetNetForConditionalGeneration"),Ovo=o(" (ProphetNet model)"),Xvo=l(),A1=a("li"),are=a("strong"),Vvo=o("t5"),zvo=o(" \u2014 "),I$=a("a"),Wvo=o("T5ForConditionalGeneration"),Qvo=o(" (T5 model)"),Hvo=l(),L1=a("li"),nre=a("strong"),Uvo=o("xlm-prophetnet"),Jvo=o(" \u2014 "),D$=a("a"),Yvo=o("XLMProphetNetForConditionalGeneration"),Kvo=o(" (XLMProphetNet model)"),Zvo=l(),B1=a("p"),eTo=o("The model is set in evaluation mode by default using "),sre=a("code"),oTo=o("model.eval()"),rTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lre=a("code"),tTo=o("model.train()"),aTo=l(),ire=a("p"),nTo=o("Examples:"),sTo=l(),f(DE.$$.fragment),Z7e=l(),ad=a("h2"),x1=a("a"),dre=a("span"),f(jE.$$.fragment),lTo=l(),cre=a("span"),iTo=o("AutoModelForSequenceClassification"),eBe=l(),Ko=a("div"),f(NE.$$.fragment),dTo=l(),nd=a("p"),cTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fre=a("code"),fTo=o("from_pretrained()"),mTo=o("class method or the "),mre=a("code"),gTo=o("from_config()"),hTo=o(`class
method.`),pTo=l(),qE=a("p"),_To=o("This class cannot be instantiated directly using "),gre=a("code"),uTo=o("__init__()"),bTo=o(" (throws an error)."),vTo=l(),zr=a("div"),f(GE.$$.fragment),TTo=l(),hre=a("p"),FTo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CTo=l(),sd=a("p"),MTo=o(`Note:
Loading a model from its configuration file does `),pre=a("strong"),ETo=o("not"),yTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_re=a("code"),wTo=o("from_pretrained()"),ATo=o("to load the model weights."),LTo=l(),ure=a("p"),BTo=o("Examples:"),xTo=l(),f(OE.$$.fragment),kTo=l(),De=a("div"),f(XE.$$.fragment),RTo=l(),bre=a("p"),STo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PTo=l(),Va=a("p"),$To=o("The model class to instantiate is selected based on the "),vre=a("code"),ITo=o("model_type"),DTo=o(` property of the config object (either
passed as an argument or loaded from `),Tre=a("code"),jTo=o("pretrained_model_name_or_path"),NTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fre=a("code"),qTo=o("pretrained_model_name_or_path"),GTo=o(":"),OTo=l(),A=a("ul"),k1=a("li"),Cre=a("strong"),XTo=o("albert"),VTo=o(" \u2014 "),j$=a("a"),zTo=o("AlbertForSequenceClassification"),WTo=o(" (ALBERT model)"),QTo=l(),R1=a("li"),Mre=a("strong"),HTo=o("bart"),UTo=o(" \u2014 "),N$=a("a"),JTo=o("BartForSequenceClassification"),YTo=o(" (BART model)"),KTo=l(),S1=a("li"),Ere=a("strong"),ZTo=o("bert"),eFo=o(" \u2014 "),q$=a("a"),oFo=o("BertForSequenceClassification"),rFo=o(" (BERT model)"),tFo=l(),P1=a("li"),yre=a("strong"),aFo=o("big_bird"),nFo=o(" \u2014 "),G$=a("a"),sFo=o("BigBirdForSequenceClassification"),lFo=o(" (BigBird model)"),iFo=l(),$1=a("li"),wre=a("strong"),dFo=o("bigbird_pegasus"),cFo=o(" \u2014 "),O$=a("a"),fFo=o("BigBirdPegasusForSequenceClassification"),mFo=o(" (BigBirdPegasus model)"),gFo=l(),I1=a("li"),Are=a("strong"),hFo=o("camembert"),pFo=o(" \u2014 "),X$=a("a"),_Fo=o("CamembertForSequenceClassification"),uFo=o(" (CamemBERT model)"),bFo=l(),D1=a("li"),Lre=a("strong"),vFo=o("canine"),TFo=o(" \u2014 "),V$=a("a"),FFo=o("CanineForSequenceClassification"),CFo=o(" (Canine model)"),MFo=l(),j1=a("li"),Bre=a("strong"),EFo=o("convbert"),yFo=o(" \u2014 "),z$=a("a"),wFo=o("ConvBertForSequenceClassification"),AFo=o(" (ConvBERT model)"),LFo=l(),N1=a("li"),xre=a("strong"),BFo=o("ctrl"),xFo=o(" \u2014 "),W$=a("a"),kFo=o("CTRLForSequenceClassification"),RFo=o(" (CTRL model)"),SFo=l(),q1=a("li"),kre=a("strong"),PFo=o("data2vec-text"),$Fo=o(" \u2014 "),Q$=a("a"),IFo=o("Data2VecTextForSequenceClassification"),DFo=o(" (Data2VecText model)"),jFo=l(),G1=a("li"),Rre=a("strong"),NFo=o("deberta"),qFo=o(" \u2014 "),H$=a("a"),GFo=o("DebertaForSequenceClassification"),OFo=o(" (DeBERTa model)"),XFo=l(),O1=a("li"),Sre=a("strong"),VFo=o("deberta-v2"),zFo=o(" \u2014 "),U$=a("a"),WFo=o("DebertaV2ForSequenceClassification"),QFo=o(" (DeBERTa-v2 model)"),HFo=l(),X1=a("li"),Pre=a("strong"),UFo=o("distilbert"),JFo=o(" \u2014 "),J$=a("a"),YFo=o("DistilBertForSequenceClassification"),KFo=o(" (DistilBERT model)"),ZFo=l(),V1=a("li"),$re=a("strong"),e9o=o("electra"),o9o=o(" \u2014 "),Y$=a("a"),r9o=o("ElectraForSequenceClassification"),t9o=o(" (ELECTRA model)"),a9o=l(),z1=a("li"),Ire=a("strong"),n9o=o("flaubert"),s9o=o(" \u2014 "),K$=a("a"),l9o=o("FlaubertForSequenceClassification"),i9o=o(" (FlauBERT model)"),d9o=l(),W1=a("li"),Dre=a("strong"),c9o=o("fnet"),f9o=o(" \u2014 "),Z$=a("a"),m9o=o("FNetForSequenceClassification"),g9o=o(" (FNet model)"),h9o=l(),Q1=a("li"),jre=a("strong"),p9o=o("funnel"),_9o=o(" \u2014 "),eI=a("a"),u9o=o("FunnelForSequenceClassification"),b9o=o(" (Funnel Transformer model)"),v9o=l(),H1=a("li"),Nre=a("strong"),T9o=o("gpt2"),F9o=o(" \u2014 "),oI=a("a"),C9o=o("GPT2ForSequenceClassification"),M9o=o(" (OpenAI GPT-2 model)"),E9o=l(),U1=a("li"),qre=a("strong"),y9o=o("gpt_neo"),w9o=o(" \u2014 "),rI=a("a"),A9o=o("GPTNeoForSequenceClassification"),L9o=o(" (GPT Neo model)"),B9o=l(),J1=a("li"),Gre=a("strong"),x9o=o("gptj"),k9o=o(" \u2014 "),tI=a("a"),R9o=o("GPTJForSequenceClassification"),S9o=o(" (GPT-J model)"),P9o=l(),Y1=a("li"),Ore=a("strong"),$9o=o("ibert"),I9o=o(" \u2014 "),aI=a("a"),D9o=o("IBertForSequenceClassification"),j9o=o(" (I-BERT model)"),N9o=l(),K1=a("li"),Xre=a("strong"),q9o=o("layoutlm"),G9o=o(" \u2014 "),nI=a("a"),O9o=o("LayoutLMForSequenceClassification"),X9o=o(" (LayoutLM model)"),V9o=l(),Z1=a("li"),Vre=a("strong"),z9o=o("layoutlmv2"),W9o=o(" \u2014 "),sI=a("a"),Q9o=o("LayoutLMv2ForSequenceClassification"),H9o=o(" (LayoutLMv2 model)"),U9o=l(),eb=a("li"),zre=a("strong"),J9o=o("led"),Y9o=o(" \u2014 "),lI=a("a"),K9o=o("LEDForSequenceClassification"),Z9o=o(" (LED model)"),eCo=l(),ob=a("li"),Wre=a("strong"),oCo=o("longformer"),rCo=o(" \u2014 "),iI=a("a"),tCo=o("LongformerForSequenceClassification"),aCo=o(" (Longformer model)"),nCo=l(),rb=a("li"),Qre=a("strong"),sCo=o("mbart"),lCo=o(" \u2014 "),dI=a("a"),iCo=o("MBartForSequenceClassification"),dCo=o(" (mBART model)"),cCo=l(),tb=a("li"),Hre=a("strong"),fCo=o("megatron-bert"),mCo=o(" \u2014 "),cI=a("a"),gCo=o("MegatronBertForSequenceClassification"),hCo=o(" (MegatronBert model)"),pCo=l(),ab=a("li"),Ure=a("strong"),_Co=o("mobilebert"),uCo=o(" \u2014 "),fI=a("a"),bCo=o("MobileBertForSequenceClassification"),vCo=o(" (MobileBERT model)"),TCo=l(),nb=a("li"),Jre=a("strong"),FCo=o("mpnet"),CCo=o(" \u2014 "),mI=a("a"),MCo=o("MPNetForSequenceClassification"),ECo=o(" (MPNet model)"),yCo=l(),sb=a("li"),Yre=a("strong"),wCo=o("nystromformer"),ACo=o(" \u2014 "),gI=a("a"),LCo=o("NystromformerForSequenceClassification"),BCo=o(" (Nystromformer model)"),xCo=l(),lb=a("li"),Kre=a("strong"),kCo=o("openai-gpt"),RCo=o(" \u2014 "),hI=a("a"),SCo=o("OpenAIGPTForSequenceClassification"),PCo=o(" (OpenAI GPT model)"),$Co=l(),ib=a("li"),Zre=a("strong"),ICo=o("perceiver"),DCo=o(" \u2014 "),pI=a("a"),jCo=o("PerceiverForSequenceClassification"),NCo=o(" (Perceiver model)"),qCo=l(),db=a("li"),ete=a("strong"),GCo=o("plbart"),OCo=o(" \u2014 "),_I=a("a"),XCo=o("PLBartForSequenceClassification"),VCo=o(" (PLBart model)"),zCo=l(),cb=a("li"),ote=a("strong"),WCo=o("qdqbert"),QCo=o(" \u2014 "),uI=a("a"),HCo=o("QDQBertForSequenceClassification"),UCo=o(" (QDQBert model)"),JCo=l(),fb=a("li"),rte=a("strong"),YCo=o("reformer"),KCo=o(" \u2014 "),bI=a("a"),ZCo=o("ReformerForSequenceClassification"),e4o=o(" (Reformer model)"),o4o=l(),mb=a("li"),tte=a("strong"),r4o=o("rembert"),t4o=o(" \u2014 "),vI=a("a"),a4o=o("RemBertForSequenceClassification"),n4o=o(" (RemBERT model)"),s4o=l(),gb=a("li"),ate=a("strong"),l4o=o("roberta"),i4o=o(" \u2014 "),TI=a("a"),d4o=o("RobertaForSequenceClassification"),c4o=o(" (RoBERTa model)"),f4o=l(),hb=a("li"),nte=a("strong"),m4o=o("roformer"),g4o=o(" \u2014 "),FI=a("a"),h4o=o("RoFormerForSequenceClassification"),p4o=o(" (RoFormer model)"),_4o=l(),pb=a("li"),ste=a("strong"),u4o=o("squeezebert"),b4o=o(" \u2014 "),CI=a("a"),v4o=o("SqueezeBertForSequenceClassification"),T4o=o(" (SqueezeBERT model)"),F4o=l(),_b=a("li"),lte=a("strong"),C4o=o("tapas"),M4o=o(" \u2014 "),MI=a("a"),E4o=o("TapasForSequenceClassification"),y4o=o(" (TAPAS model)"),w4o=l(),ub=a("li"),ite=a("strong"),A4o=o("transfo-xl"),L4o=o(" \u2014 "),EI=a("a"),B4o=o("TransfoXLForSequenceClassification"),x4o=o(" (Transformer-XL model)"),k4o=l(),bb=a("li"),dte=a("strong"),R4o=o("xlm"),S4o=o(" \u2014 "),yI=a("a"),P4o=o("XLMForSequenceClassification"),$4o=o(" (XLM model)"),I4o=l(),vb=a("li"),cte=a("strong"),D4o=o("xlm-roberta"),j4o=o(" \u2014 "),wI=a("a"),N4o=o("XLMRobertaForSequenceClassification"),q4o=o(" (XLM-RoBERTa model)"),G4o=l(),Tb=a("li"),fte=a("strong"),O4o=o("xlm-roberta-xl"),X4o=o(" \u2014 "),AI=a("a"),V4o=o("XLMRobertaXLForSequenceClassification"),z4o=o(" (XLM-RoBERTa-XL model)"),W4o=l(),Fb=a("li"),mte=a("strong"),Q4o=o("xlnet"),H4o=o(" \u2014 "),LI=a("a"),U4o=o("XLNetForSequenceClassification"),J4o=o(" (XLNet model)"),Y4o=l(),Cb=a("li"),gte=a("strong"),K4o=o("yoso"),Z4o=o(" \u2014 "),BI=a("a"),eMo=o("YosoForSequenceClassification"),oMo=o(" (YOSO model)"),rMo=l(),Mb=a("p"),tMo=o("The model is set in evaluation mode by default using "),hte=a("code"),aMo=o("model.eval()"),nMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pte=a("code"),sMo=o("model.train()"),lMo=l(),_te=a("p"),iMo=o("Examples:"),dMo=l(),f(VE.$$.fragment),oBe=l(),ld=a("h2"),Eb=a("a"),ute=a("span"),f(zE.$$.fragment),cMo=l(),bte=a("span"),fMo=o("AutoModelForMultipleChoice"),rBe=l(),Zo=a("div"),f(WE.$$.fragment),mMo=l(),id=a("p"),gMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vte=a("code"),hMo=o("from_pretrained()"),pMo=o("class method or the "),Tte=a("code"),_Mo=o("from_config()"),uMo=o(`class
method.`),bMo=l(),QE=a("p"),vMo=o("This class cannot be instantiated directly using "),Fte=a("code"),TMo=o("__init__()"),FMo=o(" (throws an error)."),CMo=l(),Wr=a("div"),f(HE.$$.fragment),MMo=l(),Cte=a("p"),EMo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yMo=l(),dd=a("p"),wMo=o(`Note:
Loading a model from its configuration file does `),Mte=a("strong"),AMo=o("not"),LMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ete=a("code"),BMo=o("from_pretrained()"),xMo=o("to load the model weights."),kMo=l(),yte=a("p"),RMo=o("Examples:"),SMo=l(),f(UE.$$.fragment),PMo=l(),je=a("div"),f(JE.$$.fragment),$Mo=l(),wte=a("p"),IMo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),DMo=l(),za=a("p"),jMo=o("The model class to instantiate is selected based on the "),Ate=a("code"),NMo=o("model_type"),qMo=o(` property of the config object (either
passed as an argument or loaded from `),Lte=a("code"),GMo=o("pretrained_model_name_or_path"),OMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=a("code"),XMo=o("pretrained_model_name_or_path"),VMo=o(":"),zMo=l(),G=a("ul"),yb=a("li"),xte=a("strong"),WMo=o("albert"),QMo=o(" \u2014 "),xI=a("a"),HMo=o("AlbertForMultipleChoice"),UMo=o(" (ALBERT model)"),JMo=l(),wb=a("li"),kte=a("strong"),YMo=o("bert"),KMo=o(" \u2014 "),kI=a("a"),ZMo=o("BertForMultipleChoice"),eEo=o(" (BERT model)"),oEo=l(),Ab=a("li"),Rte=a("strong"),rEo=o("big_bird"),tEo=o(" \u2014 "),RI=a("a"),aEo=o("BigBirdForMultipleChoice"),nEo=o(" (BigBird model)"),sEo=l(),Lb=a("li"),Ste=a("strong"),lEo=o("camembert"),iEo=o(" \u2014 "),SI=a("a"),dEo=o("CamembertForMultipleChoice"),cEo=o(" (CamemBERT model)"),fEo=l(),Bb=a("li"),Pte=a("strong"),mEo=o("canine"),gEo=o(" \u2014 "),PI=a("a"),hEo=o("CanineForMultipleChoice"),pEo=o(" (Canine model)"),_Eo=l(),xb=a("li"),$te=a("strong"),uEo=o("convbert"),bEo=o(" \u2014 "),$I=a("a"),vEo=o("ConvBertForMultipleChoice"),TEo=o(" (ConvBERT model)"),FEo=l(),kb=a("li"),Ite=a("strong"),CEo=o("data2vec-text"),MEo=o(" \u2014 "),II=a("a"),EEo=o("Data2VecTextForMultipleChoice"),yEo=o(" (Data2VecText model)"),wEo=l(),Rb=a("li"),Dte=a("strong"),AEo=o("distilbert"),LEo=o(" \u2014 "),DI=a("a"),BEo=o("DistilBertForMultipleChoice"),xEo=o(" (DistilBERT model)"),kEo=l(),Sb=a("li"),jte=a("strong"),REo=o("electra"),SEo=o(" \u2014 "),jI=a("a"),PEo=o("ElectraForMultipleChoice"),$Eo=o(" (ELECTRA model)"),IEo=l(),Pb=a("li"),Nte=a("strong"),DEo=o("flaubert"),jEo=o(" \u2014 "),NI=a("a"),NEo=o("FlaubertForMultipleChoice"),qEo=o(" (FlauBERT model)"),GEo=l(),$b=a("li"),qte=a("strong"),OEo=o("fnet"),XEo=o(" \u2014 "),qI=a("a"),VEo=o("FNetForMultipleChoice"),zEo=o(" (FNet model)"),WEo=l(),Ib=a("li"),Gte=a("strong"),QEo=o("funnel"),HEo=o(" \u2014 "),GI=a("a"),UEo=o("FunnelForMultipleChoice"),JEo=o(" (Funnel Transformer model)"),YEo=l(),Db=a("li"),Ote=a("strong"),KEo=o("ibert"),ZEo=o(" \u2014 "),OI=a("a"),eyo=o("IBertForMultipleChoice"),oyo=o(" (I-BERT model)"),ryo=l(),jb=a("li"),Xte=a("strong"),tyo=o("longformer"),ayo=o(" \u2014 "),XI=a("a"),nyo=o("LongformerForMultipleChoice"),syo=o(" (Longformer model)"),lyo=l(),Nb=a("li"),Vte=a("strong"),iyo=o("megatron-bert"),dyo=o(" \u2014 "),VI=a("a"),cyo=o("MegatronBertForMultipleChoice"),fyo=o(" (MegatronBert model)"),myo=l(),qb=a("li"),zte=a("strong"),gyo=o("mobilebert"),hyo=o(" \u2014 "),zI=a("a"),pyo=o("MobileBertForMultipleChoice"),_yo=o(" (MobileBERT model)"),uyo=l(),Gb=a("li"),Wte=a("strong"),byo=o("mpnet"),vyo=o(" \u2014 "),WI=a("a"),Tyo=o("MPNetForMultipleChoice"),Fyo=o(" (MPNet model)"),Cyo=l(),Ob=a("li"),Qte=a("strong"),Myo=o("nystromformer"),Eyo=o(" \u2014 "),QI=a("a"),yyo=o("NystromformerForMultipleChoice"),wyo=o(" (Nystromformer model)"),Ayo=l(),Xb=a("li"),Hte=a("strong"),Lyo=o("qdqbert"),Byo=o(" \u2014 "),HI=a("a"),xyo=o("QDQBertForMultipleChoice"),kyo=o(" (QDQBert model)"),Ryo=l(),Vb=a("li"),Ute=a("strong"),Syo=o("rembert"),Pyo=o(" \u2014 "),UI=a("a"),$yo=o("RemBertForMultipleChoice"),Iyo=o(" (RemBERT model)"),Dyo=l(),zb=a("li"),Jte=a("strong"),jyo=o("roberta"),Nyo=o(" \u2014 "),JI=a("a"),qyo=o("RobertaForMultipleChoice"),Gyo=o(" (RoBERTa model)"),Oyo=l(),Wb=a("li"),Yte=a("strong"),Xyo=o("roformer"),Vyo=o(" \u2014 "),YI=a("a"),zyo=o("RoFormerForMultipleChoice"),Wyo=o(" (RoFormer model)"),Qyo=l(),Qb=a("li"),Kte=a("strong"),Hyo=o("squeezebert"),Uyo=o(" \u2014 "),KI=a("a"),Jyo=o("SqueezeBertForMultipleChoice"),Yyo=o(" (SqueezeBERT model)"),Kyo=l(),Hb=a("li"),Zte=a("strong"),Zyo=o("xlm"),ewo=o(" \u2014 "),ZI=a("a"),owo=o("XLMForMultipleChoice"),rwo=o(" (XLM model)"),two=l(),Ub=a("li"),eae=a("strong"),awo=o("xlm-roberta"),nwo=o(" \u2014 "),eD=a("a"),swo=o("XLMRobertaForMultipleChoice"),lwo=o(" (XLM-RoBERTa model)"),iwo=l(),Jb=a("li"),oae=a("strong"),dwo=o("xlm-roberta-xl"),cwo=o(" \u2014 "),oD=a("a"),fwo=o("XLMRobertaXLForMultipleChoice"),mwo=o(" (XLM-RoBERTa-XL model)"),gwo=l(),Yb=a("li"),rae=a("strong"),hwo=o("xlnet"),pwo=o(" \u2014 "),rD=a("a"),_wo=o("XLNetForMultipleChoice"),uwo=o(" (XLNet model)"),bwo=l(),Kb=a("li"),tae=a("strong"),vwo=o("yoso"),Two=o(" \u2014 "),tD=a("a"),Fwo=o("YosoForMultipleChoice"),Cwo=o(" (YOSO model)"),Mwo=l(),Zb=a("p"),Ewo=o("The model is set in evaluation mode by default using "),aae=a("code"),ywo=o("model.eval()"),wwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nae=a("code"),Awo=o("model.train()"),Lwo=l(),sae=a("p"),Bwo=o("Examples:"),xwo=l(),f(YE.$$.fragment),tBe=l(),cd=a("h2"),e3=a("a"),lae=a("span"),f(KE.$$.fragment),kwo=l(),iae=a("span"),Rwo=o("AutoModelForNextSentencePrediction"),aBe=l(),er=a("div"),f(ZE.$$.fragment),Swo=l(),fd=a("p"),Pwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dae=a("code"),$wo=o("from_pretrained()"),Iwo=o("class method or the "),cae=a("code"),Dwo=o("from_config()"),jwo=o(`class
method.`),Nwo=l(),ey=a("p"),qwo=o("This class cannot be instantiated directly using "),fae=a("code"),Gwo=o("__init__()"),Owo=o(" (throws an error)."),Xwo=l(),Qr=a("div"),f(oy.$$.fragment),Vwo=l(),mae=a("p"),zwo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Wwo=l(),md=a("p"),Qwo=o(`Note:
Loading a model from its configuration file does `),gae=a("strong"),Hwo=o("not"),Uwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hae=a("code"),Jwo=o("from_pretrained()"),Ywo=o("to load the model weights."),Kwo=l(),pae=a("p"),Zwo=o("Examples:"),e6o=l(),f(ry.$$.fragment),o6o=l(),Ne=a("div"),f(ty.$$.fragment),r6o=l(),_ae=a("p"),t6o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),a6o=l(),Wa=a("p"),n6o=o("The model class to instantiate is selected based on the "),uae=a("code"),s6o=o("model_type"),l6o=o(` property of the config object (either
passed as an argument or loaded from `),bae=a("code"),i6o=o("pretrained_model_name_or_path"),d6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vae=a("code"),c6o=o("pretrained_model_name_or_path"),f6o=o(":"),m6o=l(),na=a("ul"),o3=a("li"),Tae=a("strong"),g6o=o("bert"),h6o=o(" \u2014 "),aD=a("a"),p6o=o("BertForNextSentencePrediction"),_6o=o(" (BERT model)"),u6o=l(),r3=a("li"),Fae=a("strong"),b6o=o("fnet"),v6o=o(" \u2014 "),nD=a("a"),T6o=o("FNetForNextSentencePrediction"),F6o=o(" (FNet model)"),C6o=l(),t3=a("li"),Cae=a("strong"),M6o=o("megatron-bert"),E6o=o(" \u2014 "),sD=a("a"),y6o=o("MegatronBertForNextSentencePrediction"),w6o=o(" (MegatronBert model)"),A6o=l(),a3=a("li"),Mae=a("strong"),L6o=o("mobilebert"),B6o=o(" \u2014 "),lD=a("a"),x6o=o("MobileBertForNextSentencePrediction"),k6o=o(" (MobileBERT model)"),R6o=l(),n3=a("li"),Eae=a("strong"),S6o=o("qdqbert"),P6o=o(" \u2014 "),iD=a("a"),$6o=o("QDQBertForNextSentencePrediction"),I6o=o(" (QDQBert model)"),D6o=l(),s3=a("p"),j6o=o("The model is set in evaluation mode by default using "),yae=a("code"),N6o=o("model.eval()"),q6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wae=a("code"),G6o=o("model.train()"),O6o=l(),Aae=a("p"),X6o=o("Examples:"),V6o=l(),f(ay.$$.fragment),nBe=l(),gd=a("h2"),l3=a("a"),Lae=a("span"),f(ny.$$.fragment),z6o=l(),Bae=a("span"),W6o=o("AutoModelForTokenClassification"),sBe=l(),or=a("div"),f(sy.$$.fragment),Q6o=l(),hd=a("p"),H6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xae=a("code"),U6o=o("from_pretrained()"),J6o=o("class method or the "),kae=a("code"),Y6o=o("from_config()"),K6o=o(`class
method.`),Z6o=l(),ly=a("p"),eAo=o("This class cannot be instantiated directly using "),Rae=a("code"),oAo=o("__init__()"),rAo=o(" (throws an error)."),tAo=l(),Hr=a("div"),f(iy.$$.fragment),aAo=l(),Sae=a("p"),nAo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sAo=l(),pd=a("p"),lAo=o(`Note:
Loading a model from its configuration file does `),Pae=a("strong"),iAo=o("not"),dAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ae=a("code"),cAo=o("from_pretrained()"),fAo=o("to load the model weights."),mAo=l(),Iae=a("p"),gAo=o("Examples:"),hAo=l(),f(dy.$$.fragment),pAo=l(),qe=a("div"),f(cy.$$.fragment),_Ao=l(),Dae=a("p"),uAo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bAo=l(),Qa=a("p"),vAo=o("The model class to instantiate is selected based on the "),jae=a("code"),TAo=o("model_type"),FAo=o(` property of the config object (either
passed as an argument or loaded from `),Nae=a("code"),CAo=o("pretrained_model_name_or_path"),MAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qae=a("code"),EAo=o("pretrained_model_name_or_path"),yAo=o(":"),wAo=l(),N=a("ul"),i3=a("li"),Gae=a("strong"),AAo=o("albert"),LAo=o(" \u2014 "),dD=a("a"),BAo=o("AlbertForTokenClassification"),xAo=o(" (ALBERT model)"),kAo=l(),d3=a("li"),Oae=a("strong"),RAo=o("bert"),SAo=o(" \u2014 "),cD=a("a"),PAo=o("BertForTokenClassification"),$Ao=o(" (BERT model)"),IAo=l(),c3=a("li"),Xae=a("strong"),DAo=o("big_bird"),jAo=o(" \u2014 "),fD=a("a"),NAo=o("BigBirdForTokenClassification"),qAo=o(" (BigBird model)"),GAo=l(),f3=a("li"),Vae=a("strong"),OAo=o("camembert"),XAo=o(" \u2014 "),mD=a("a"),VAo=o("CamembertForTokenClassification"),zAo=o(" (CamemBERT model)"),WAo=l(),m3=a("li"),zae=a("strong"),QAo=o("canine"),HAo=o(" \u2014 "),gD=a("a"),UAo=o("CanineForTokenClassification"),JAo=o(" (Canine model)"),YAo=l(),g3=a("li"),Wae=a("strong"),KAo=o("convbert"),ZAo=o(" \u2014 "),hD=a("a"),e0o=o("ConvBertForTokenClassification"),o0o=o(" (ConvBERT model)"),r0o=l(),h3=a("li"),Qae=a("strong"),t0o=o("data2vec-text"),a0o=o(" \u2014 "),pD=a("a"),n0o=o("Data2VecTextForTokenClassification"),s0o=o(" (Data2VecText model)"),l0o=l(),p3=a("li"),Hae=a("strong"),i0o=o("deberta"),d0o=o(" \u2014 "),_D=a("a"),c0o=o("DebertaForTokenClassification"),f0o=o(" (DeBERTa model)"),m0o=l(),_3=a("li"),Uae=a("strong"),g0o=o("deberta-v2"),h0o=o(" \u2014 "),uD=a("a"),p0o=o("DebertaV2ForTokenClassification"),_0o=o(" (DeBERTa-v2 model)"),u0o=l(),u3=a("li"),Jae=a("strong"),b0o=o("distilbert"),v0o=o(" \u2014 "),bD=a("a"),T0o=o("DistilBertForTokenClassification"),F0o=o(" (DistilBERT model)"),C0o=l(),b3=a("li"),Yae=a("strong"),M0o=o("electra"),E0o=o(" \u2014 "),vD=a("a"),y0o=o("ElectraForTokenClassification"),w0o=o(" (ELECTRA model)"),A0o=l(),v3=a("li"),Kae=a("strong"),L0o=o("flaubert"),B0o=o(" \u2014 "),TD=a("a"),x0o=o("FlaubertForTokenClassification"),k0o=o(" (FlauBERT model)"),R0o=l(),T3=a("li"),Zae=a("strong"),S0o=o("fnet"),P0o=o(" \u2014 "),FD=a("a"),$0o=o("FNetForTokenClassification"),I0o=o(" (FNet model)"),D0o=l(),F3=a("li"),ene=a("strong"),j0o=o("funnel"),N0o=o(" \u2014 "),CD=a("a"),q0o=o("FunnelForTokenClassification"),G0o=o(" (Funnel Transformer model)"),O0o=l(),C3=a("li"),one=a("strong"),X0o=o("gpt2"),V0o=o(" \u2014 "),MD=a("a"),z0o=o("GPT2ForTokenClassification"),W0o=o(" (OpenAI GPT-2 model)"),Q0o=l(),M3=a("li"),rne=a("strong"),H0o=o("ibert"),U0o=o(" \u2014 "),ED=a("a"),J0o=o("IBertForTokenClassification"),Y0o=o(" (I-BERT model)"),K0o=l(),E3=a("li"),tne=a("strong"),Z0o=o("layoutlm"),eLo=o(" \u2014 "),yD=a("a"),oLo=o("LayoutLMForTokenClassification"),rLo=o(" (LayoutLM model)"),tLo=l(),y3=a("li"),ane=a("strong"),aLo=o("layoutlmv2"),nLo=o(" \u2014 "),wD=a("a"),sLo=o("LayoutLMv2ForTokenClassification"),lLo=o(" (LayoutLMv2 model)"),iLo=l(),w3=a("li"),nne=a("strong"),dLo=o("longformer"),cLo=o(" \u2014 "),AD=a("a"),fLo=o("LongformerForTokenClassification"),mLo=o(" (Longformer model)"),gLo=l(),A3=a("li"),sne=a("strong"),hLo=o("megatron-bert"),pLo=o(" \u2014 "),LD=a("a"),_Lo=o("MegatronBertForTokenClassification"),uLo=o(" (MegatronBert model)"),bLo=l(),L3=a("li"),lne=a("strong"),vLo=o("mobilebert"),TLo=o(" \u2014 "),BD=a("a"),FLo=o("MobileBertForTokenClassification"),CLo=o(" (MobileBERT model)"),MLo=l(),B3=a("li"),ine=a("strong"),ELo=o("mpnet"),yLo=o(" \u2014 "),xD=a("a"),wLo=o("MPNetForTokenClassification"),ALo=o(" (MPNet model)"),LLo=l(),x3=a("li"),dne=a("strong"),BLo=o("nystromformer"),xLo=o(" \u2014 "),kD=a("a"),kLo=o("NystromformerForTokenClassification"),RLo=o(" (Nystromformer model)"),SLo=l(),k3=a("li"),cne=a("strong"),PLo=o("qdqbert"),$Lo=o(" \u2014 "),RD=a("a"),ILo=o("QDQBertForTokenClassification"),DLo=o(" (QDQBert model)"),jLo=l(),R3=a("li"),fne=a("strong"),NLo=o("rembert"),qLo=o(" \u2014 "),SD=a("a"),GLo=o("RemBertForTokenClassification"),OLo=o(" (RemBERT model)"),XLo=l(),S3=a("li"),mne=a("strong"),VLo=o("roberta"),zLo=o(" \u2014 "),PD=a("a"),WLo=o("RobertaForTokenClassification"),QLo=o(" (RoBERTa model)"),HLo=l(),P3=a("li"),gne=a("strong"),ULo=o("roformer"),JLo=o(" \u2014 "),$D=a("a"),YLo=o("RoFormerForTokenClassification"),KLo=o(" (RoFormer model)"),ZLo=l(),$3=a("li"),hne=a("strong"),e8o=o("squeezebert"),o8o=o(" \u2014 "),ID=a("a"),r8o=o("SqueezeBertForTokenClassification"),t8o=o(" (SqueezeBERT model)"),a8o=l(),I3=a("li"),pne=a("strong"),n8o=o("xlm"),s8o=o(" \u2014 "),DD=a("a"),l8o=o("XLMForTokenClassification"),i8o=o(" (XLM model)"),d8o=l(),D3=a("li"),_ne=a("strong"),c8o=o("xlm-roberta"),f8o=o(" \u2014 "),jD=a("a"),m8o=o("XLMRobertaForTokenClassification"),g8o=o(" (XLM-RoBERTa model)"),h8o=l(),j3=a("li"),une=a("strong"),p8o=o("xlm-roberta-xl"),_8o=o(" \u2014 "),ND=a("a"),u8o=o("XLMRobertaXLForTokenClassification"),b8o=o(" (XLM-RoBERTa-XL model)"),v8o=l(),N3=a("li"),bne=a("strong"),T8o=o("xlnet"),F8o=o(" \u2014 "),qD=a("a"),C8o=o("XLNetForTokenClassification"),M8o=o(" (XLNet model)"),E8o=l(),q3=a("li"),vne=a("strong"),y8o=o("yoso"),w8o=o(" \u2014 "),GD=a("a"),A8o=o("YosoForTokenClassification"),L8o=o(" (YOSO model)"),B8o=l(),G3=a("p"),x8o=o("The model is set in evaluation mode by default using "),Tne=a("code"),k8o=o("model.eval()"),R8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fne=a("code"),S8o=o("model.train()"),P8o=l(),Cne=a("p"),$8o=o("Examples:"),I8o=l(),f(fy.$$.fragment),lBe=l(),_d=a("h2"),O3=a("a"),Mne=a("span"),f(my.$$.fragment),D8o=l(),Ene=a("span"),j8o=o("AutoModelForQuestionAnswering"),iBe=l(),rr=a("div"),f(gy.$$.fragment),N8o=l(),ud=a("p"),q8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yne=a("code"),G8o=o("from_pretrained()"),O8o=o("class method or the "),wne=a("code"),X8o=o("from_config()"),V8o=o(`class
method.`),z8o=l(),hy=a("p"),W8o=o("This class cannot be instantiated directly using "),Ane=a("code"),Q8o=o("__init__()"),H8o=o(" (throws an error)."),U8o=l(),Ur=a("div"),f(py.$$.fragment),J8o=l(),Lne=a("p"),Y8o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),K8o=l(),bd=a("p"),Z8o=o(`Note:
Loading a model from its configuration file does `),Bne=a("strong"),e7o=o("not"),o7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xne=a("code"),r7o=o("from_pretrained()"),t7o=o("to load the model weights."),a7o=l(),kne=a("p"),n7o=o("Examples:"),s7o=l(),f(_y.$$.fragment),l7o=l(),Ge=a("div"),f(uy.$$.fragment),i7o=l(),Rne=a("p"),d7o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),c7o=l(),Ha=a("p"),f7o=o("The model class to instantiate is selected based on the "),Sne=a("code"),m7o=o("model_type"),g7o=o(` property of the config object (either
passed as an argument or loaded from `),Pne=a("code"),h7o=o("pretrained_model_name_or_path"),p7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ne=a("code"),_7o=o("pretrained_model_name_or_path"),u7o=o(":"),b7o=l(),R=a("ul"),X3=a("li"),Ine=a("strong"),v7o=o("albert"),T7o=o(" \u2014 "),OD=a("a"),F7o=o("AlbertForQuestionAnswering"),C7o=o(" (ALBERT model)"),M7o=l(),V3=a("li"),Dne=a("strong"),E7o=o("bart"),y7o=o(" \u2014 "),XD=a("a"),w7o=o("BartForQuestionAnswering"),A7o=o(" (BART model)"),L7o=l(),z3=a("li"),jne=a("strong"),B7o=o("bert"),x7o=o(" \u2014 "),VD=a("a"),k7o=o("BertForQuestionAnswering"),R7o=o(" (BERT model)"),S7o=l(),W3=a("li"),Nne=a("strong"),P7o=o("big_bird"),$7o=o(" \u2014 "),zD=a("a"),I7o=o("BigBirdForQuestionAnswering"),D7o=o(" (BigBird model)"),j7o=l(),Q3=a("li"),qne=a("strong"),N7o=o("bigbird_pegasus"),q7o=o(" \u2014 "),WD=a("a"),G7o=o("BigBirdPegasusForQuestionAnswering"),O7o=o(" (BigBirdPegasus model)"),X7o=l(),H3=a("li"),Gne=a("strong"),V7o=o("camembert"),z7o=o(" \u2014 "),QD=a("a"),W7o=o("CamembertForQuestionAnswering"),Q7o=o(" (CamemBERT model)"),H7o=l(),U3=a("li"),One=a("strong"),U7o=o("canine"),J7o=o(" \u2014 "),HD=a("a"),Y7o=o("CanineForQuestionAnswering"),K7o=o(" (Canine model)"),Z7o=l(),J3=a("li"),Xne=a("strong"),eBo=o("convbert"),oBo=o(" \u2014 "),UD=a("a"),rBo=o("ConvBertForQuestionAnswering"),tBo=o(" (ConvBERT model)"),aBo=l(),Y3=a("li"),Vne=a("strong"),nBo=o("data2vec-text"),sBo=o(" \u2014 "),JD=a("a"),lBo=o("Data2VecTextForQuestionAnswering"),iBo=o(" (Data2VecText model)"),dBo=l(),K3=a("li"),zne=a("strong"),cBo=o("deberta"),fBo=o(" \u2014 "),YD=a("a"),mBo=o("DebertaForQuestionAnswering"),gBo=o(" (DeBERTa model)"),hBo=l(),Z3=a("li"),Wne=a("strong"),pBo=o("deberta-v2"),_Bo=o(" \u2014 "),KD=a("a"),uBo=o("DebertaV2ForQuestionAnswering"),bBo=o(" (DeBERTa-v2 model)"),vBo=l(),e5=a("li"),Qne=a("strong"),TBo=o("distilbert"),FBo=o(" \u2014 "),ZD=a("a"),CBo=o("DistilBertForQuestionAnswering"),MBo=o(" (DistilBERT model)"),EBo=l(),o5=a("li"),Hne=a("strong"),yBo=o("electra"),wBo=o(" \u2014 "),ej=a("a"),ABo=o("ElectraForQuestionAnswering"),LBo=o(" (ELECTRA model)"),BBo=l(),r5=a("li"),Une=a("strong"),xBo=o("flaubert"),kBo=o(" \u2014 "),oj=a("a"),RBo=o("FlaubertForQuestionAnsweringSimple"),SBo=o(" (FlauBERT model)"),PBo=l(),t5=a("li"),Jne=a("strong"),$Bo=o("fnet"),IBo=o(" \u2014 "),rj=a("a"),DBo=o("FNetForQuestionAnswering"),jBo=o(" (FNet model)"),NBo=l(),a5=a("li"),Yne=a("strong"),qBo=o("funnel"),GBo=o(" \u2014 "),tj=a("a"),OBo=o("FunnelForQuestionAnswering"),XBo=o(" (Funnel Transformer model)"),VBo=l(),n5=a("li"),Kne=a("strong"),zBo=o("gptj"),WBo=o(" \u2014 "),aj=a("a"),QBo=o("GPTJForQuestionAnswering"),HBo=o(" (GPT-J model)"),UBo=l(),s5=a("li"),Zne=a("strong"),JBo=o("ibert"),YBo=o(" \u2014 "),nj=a("a"),KBo=o("IBertForQuestionAnswering"),ZBo=o(" (I-BERT model)"),exo=l(),l5=a("li"),ese=a("strong"),oxo=o("layoutlmv2"),rxo=o(" \u2014 "),sj=a("a"),txo=o("LayoutLMv2ForQuestionAnswering"),axo=o(" (LayoutLMv2 model)"),nxo=l(),i5=a("li"),ose=a("strong"),sxo=o("led"),lxo=o(" \u2014 "),lj=a("a"),ixo=o("LEDForQuestionAnswering"),dxo=o(" (LED model)"),cxo=l(),d5=a("li"),rse=a("strong"),fxo=o("longformer"),mxo=o(" \u2014 "),ij=a("a"),gxo=o("LongformerForQuestionAnswering"),hxo=o(" (Longformer model)"),pxo=l(),c5=a("li"),tse=a("strong"),_xo=o("lxmert"),uxo=o(" \u2014 "),dj=a("a"),bxo=o("LxmertForQuestionAnswering"),vxo=o(" (LXMERT model)"),Txo=l(),f5=a("li"),ase=a("strong"),Fxo=o("mbart"),Cxo=o(" \u2014 "),cj=a("a"),Mxo=o("MBartForQuestionAnswering"),Exo=o(" (mBART model)"),yxo=l(),m5=a("li"),nse=a("strong"),wxo=o("megatron-bert"),Axo=o(" \u2014 "),fj=a("a"),Lxo=o("MegatronBertForQuestionAnswering"),Bxo=o(" (MegatronBert model)"),xxo=l(),g5=a("li"),sse=a("strong"),kxo=o("mobilebert"),Rxo=o(" \u2014 "),mj=a("a"),Sxo=o("MobileBertForQuestionAnswering"),Pxo=o(" (MobileBERT model)"),$xo=l(),h5=a("li"),lse=a("strong"),Ixo=o("mpnet"),Dxo=o(" \u2014 "),gj=a("a"),jxo=o("MPNetForQuestionAnswering"),Nxo=o(" (MPNet model)"),qxo=l(),p5=a("li"),ise=a("strong"),Gxo=o("nystromformer"),Oxo=o(" \u2014 "),hj=a("a"),Xxo=o("NystromformerForQuestionAnswering"),Vxo=o(" (Nystromformer model)"),zxo=l(),_5=a("li"),dse=a("strong"),Wxo=o("qdqbert"),Qxo=o(" \u2014 "),pj=a("a"),Hxo=o("QDQBertForQuestionAnswering"),Uxo=o(" (QDQBert model)"),Jxo=l(),u5=a("li"),cse=a("strong"),Yxo=o("reformer"),Kxo=o(" \u2014 "),_j=a("a"),Zxo=o("ReformerForQuestionAnswering"),eko=o(" (Reformer model)"),oko=l(),b5=a("li"),fse=a("strong"),rko=o("rembert"),tko=o(" \u2014 "),uj=a("a"),ako=o("RemBertForQuestionAnswering"),nko=o(" (RemBERT model)"),sko=l(),v5=a("li"),mse=a("strong"),lko=o("roberta"),iko=o(" \u2014 "),bj=a("a"),dko=o("RobertaForQuestionAnswering"),cko=o(" (RoBERTa model)"),fko=l(),T5=a("li"),gse=a("strong"),mko=o("roformer"),gko=o(" \u2014 "),vj=a("a"),hko=o("RoFormerForQuestionAnswering"),pko=o(" (RoFormer model)"),_ko=l(),F5=a("li"),hse=a("strong"),uko=o("splinter"),bko=o(" \u2014 "),Tj=a("a"),vko=o("SplinterForQuestionAnswering"),Tko=o(" (Splinter model)"),Fko=l(),C5=a("li"),pse=a("strong"),Cko=o("squeezebert"),Mko=o(" \u2014 "),Fj=a("a"),Eko=o("SqueezeBertForQuestionAnswering"),yko=o(" (SqueezeBERT model)"),wko=l(),M5=a("li"),_se=a("strong"),Ako=o("xlm"),Lko=o(" \u2014 "),Cj=a("a"),Bko=o("XLMForQuestionAnsweringSimple"),xko=o(" (XLM model)"),kko=l(),E5=a("li"),use=a("strong"),Rko=o("xlm-roberta"),Sko=o(" \u2014 "),Mj=a("a"),Pko=o("XLMRobertaForQuestionAnswering"),$ko=o(" (XLM-RoBERTa model)"),Iko=l(),y5=a("li"),bse=a("strong"),Dko=o("xlm-roberta-xl"),jko=o(" \u2014 "),Ej=a("a"),Nko=o("XLMRobertaXLForQuestionAnswering"),qko=o(" (XLM-RoBERTa-XL model)"),Gko=l(),w5=a("li"),vse=a("strong"),Oko=o("xlnet"),Xko=o(" \u2014 "),yj=a("a"),Vko=o("XLNetForQuestionAnsweringSimple"),zko=o(" (XLNet model)"),Wko=l(),A5=a("li"),Tse=a("strong"),Qko=o("yoso"),Hko=o(" \u2014 "),wj=a("a"),Uko=o("YosoForQuestionAnswering"),Jko=o(" (YOSO model)"),Yko=l(),L5=a("p"),Kko=o("The model is set in evaluation mode by default using "),Fse=a("code"),Zko=o("model.eval()"),eRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cse=a("code"),oRo=o("model.train()"),rRo=l(),Mse=a("p"),tRo=o("Examples:"),aRo=l(),f(by.$$.fragment),dBe=l(),vd=a("h2"),B5=a("a"),Ese=a("span"),f(vy.$$.fragment),nRo=l(),yse=a("span"),sRo=o("AutoModelForTableQuestionAnswering"),cBe=l(),tr=a("div"),f(Ty.$$.fragment),lRo=l(),Td=a("p"),iRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),wse=a("code"),dRo=o("from_pretrained()"),cRo=o("class method or the "),Ase=a("code"),fRo=o("from_config()"),mRo=o(`class
method.`),gRo=l(),Fy=a("p"),hRo=o("This class cannot be instantiated directly using "),Lse=a("code"),pRo=o("__init__()"),_Ro=o(" (throws an error)."),uRo=l(),Jr=a("div"),f(Cy.$$.fragment),bRo=l(),Bse=a("p"),vRo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),TRo=l(),Fd=a("p"),FRo=o(`Note:
Loading a model from its configuration file does `),xse=a("strong"),CRo=o("not"),MRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kse=a("code"),ERo=o("from_pretrained()"),yRo=o("to load the model weights."),wRo=l(),Rse=a("p"),ARo=o("Examples:"),LRo=l(),f(My.$$.fragment),BRo=l(),Oe=a("div"),f(Ey.$$.fragment),xRo=l(),Sse=a("p"),kRo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),RRo=l(),Ua=a("p"),SRo=o("The model class to instantiate is selected based on the "),Pse=a("code"),PRo=o("model_type"),$Ro=o(` property of the config object (either
passed as an argument or loaded from `),$se=a("code"),IRo=o("pretrained_model_name_or_path"),DRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ise=a("code"),jRo=o("pretrained_model_name_or_path"),NRo=o(":"),qRo=l(),Dse=a("ul"),x5=a("li"),jse=a("strong"),GRo=o("tapas"),ORo=o(" \u2014 "),Aj=a("a"),XRo=o("TapasForQuestionAnswering"),VRo=o(" (TAPAS model)"),zRo=l(),k5=a("p"),WRo=o("The model is set in evaluation mode by default using "),Nse=a("code"),QRo=o("model.eval()"),HRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=a("code"),URo=o("model.train()"),JRo=l(),Gse=a("p"),YRo=o("Examples:"),KRo=l(),f(yy.$$.fragment),fBe=l(),Cd=a("h2"),R5=a("a"),Ose=a("span"),f(wy.$$.fragment),ZRo=l(),Xse=a("span"),eSo=o("AutoModelForImageClassification"),mBe=l(),ar=a("div"),f(Ay.$$.fragment),oSo=l(),Md=a("p"),rSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vse=a("code"),tSo=o("from_pretrained()"),aSo=o("class method or the "),zse=a("code"),nSo=o("from_config()"),sSo=o(`class
method.`),lSo=l(),Ly=a("p"),iSo=o("This class cannot be instantiated directly using "),Wse=a("code"),dSo=o("__init__()"),cSo=o(" (throws an error)."),fSo=l(),Yr=a("div"),f(By.$$.fragment),mSo=l(),Qse=a("p"),gSo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hSo=l(),Ed=a("p"),pSo=o(`Note:
Loading a model from its configuration file does `),Hse=a("strong"),_So=o("not"),uSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=a("code"),bSo=o("from_pretrained()"),vSo=o("to load the model weights."),TSo=l(),Jse=a("p"),FSo=o("Examples:"),CSo=l(),f(xy.$$.fragment),MSo=l(),Xe=a("div"),f(ky.$$.fragment),ESo=l(),Yse=a("p"),ySo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wSo=l(),Ja=a("p"),ASo=o("The model class to instantiate is selected based on the "),Kse=a("code"),LSo=o("model_type"),BSo=o(` property of the config object (either
passed as an argument or loaded from `),Zse=a("code"),xSo=o("pretrained_model_name_or_path"),kSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=a("code"),RSo=o("pretrained_model_name_or_path"),SSo=o(":"),PSo=l(),be=a("ul"),S5=a("li"),ole=a("strong"),$So=o("beit"),ISo=o(" \u2014 "),Lj=a("a"),DSo=o("BeitForImageClassification"),jSo=o(" (BEiT model)"),NSo=l(),P5=a("li"),rle=a("strong"),qSo=o("convnext"),GSo=o(" \u2014 "),Bj=a("a"),OSo=o("ConvNextForImageClassification"),XSo=o(" (ConvNext model)"),VSo=l(),$s=a("li"),tle=a("strong"),zSo=o("deit"),WSo=o(" \u2014 "),xj=a("a"),QSo=o("DeiTForImageClassification"),HSo=o(" or "),kj=a("a"),USo=o("DeiTForImageClassificationWithTeacher"),JSo=o(" (DeiT model)"),YSo=l(),$5=a("li"),ale=a("strong"),KSo=o("imagegpt"),ZSo=o(" \u2014 "),Rj=a("a"),ePo=o("ImageGPTForImageClassification"),oPo=o(" (ImageGPT model)"),rPo=l(),la=a("li"),nle=a("strong"),tPo=o("perceiver"),aPo=o(" \u2014 "),Sj=a("a"),nPo=o("PerceiverForImageClassificationLearned"),sPo=o(" or "),Pj=a("a"),lPo=o("PerceiverForImageClassificationFourier"),iPo=o(" or "),$j=a("a"),dPo=o("PerceiverForImageClassificationConvProcessing"),cPo=o(" (Perceiver model)"),fPo=l(),I5=a("li"),sle=a("strong"),mPo=o("poolformer"),gPo=o(" \u2014 "),Ij=a("a"),hPo=o("PoolFormerForImageClassification"),pPo=o(" (PoolFormer model)"),_Po=l(),D5=a("li"),lle=a("strong"),uPo=o("segformer"),bPo=o(" \u2014 "),Dj=a("a"),vPo=o("SegformerForImageClassification"),TPo=o(" (SegFormer model)"),FPo=l(),j5=a("li"),ile=a("strong"),CPo=o("swin"),MPo=o(" \u2014 "),jj=a("a"),EPo=o("SwinForImageClassification"),yPo=o(" (Swin model)"),wPo=l(),N5=a("li"),dle=a("strong"),APo=o("vit"),LPo=o(" \u2014 "),Nj=a("a"),BPo=o("ViTForImageClassification"),xPo=o(" (ViT model)"),kPo=l(),q5=a("p"),RPo=o("The model is set in evaluation mode by default using "),cle=a("code"),SPo=o("model.eval()"),PPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fle=a("code"),$Po=o("model.train()"),IPo=l(),mle=a("p"),DPo=o("Examples:"),jPo=l(),f(Ry.$$.fragment),gBe=l(),yd=a("h2"),G5=a("a"),gle=a("span"),f(Sy.$$.fragment),NPo=l(),hle=a("span"),qPo=o("AutoModelForVision2Seq"),hBe=l(),nr=a("div"),f(Py.$$.fragment),GPo=l(),wd=a("p"),OPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ple=a("code"),XPo=o("from_pretrained()"),VPo=o("class method or the "),_le=a("code"),zPo=o("from_config()"),WPo=o(`class
method.`),QPo=l(),$y=a("p"),HPo=o("This class cannot be instantiated directly using "),ule=a("code"),UPo=o("__init__()"),JPo=o(" (throws an error)."),YPo=l(),Kr=a("div"),f(Iy.$$.fragment),KPo=l(),ble=a("p"),ZPo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),e$o=l(),Ad=a("p"),o$o=o(`Note:
Loading a model from its configuration file does `),vle=a("strong"),r$o=o("not"),t$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tle=a("code"),a$o=o("from_pretrained()"),n$o=o("to load the model weights."),s$o=l(),Fle=a("p"),l$o=o("Examples:"),i$o=l(),f(Dy.$$.fragment),d$o=l(),Ve=a("div"),f(jy.$$.fragment),c$o=l(),Cle=a("p"),f$o=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),m$o=l(),Ya=a("p"),g$o=o("The model class to instantiate is selected based on the "),Mle=a("code"),h$o=o("model_type"),p$o=o(` property of the config object (either
passed as an argument or loaded from `),Ele=a("code"),_$o=o("pretrained_model_name_or_path"),u$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=a("code"),b$o=o("pretrained_model_name_or_path"),v$o=o(":"),T$o=l(),wle=a("ul"),O5=a("li"),Ale=a("strong"),F$o=o("vision-encoder-decoder"),C$o=o(" \u2014 "),qj=a("a"),M$o=o("VisionEncoderDecoderModel"),E$o=o(" (Vision Encoder decoder model)"),y$o=l(),X5=a("p"),w$o=o("The model is set in evaluation mode by default using "),Lle=a("code"),A$o=o("model.eval()"),L$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=a("code"),B$o=o("model.train()"),x$o=l(),xle=a("p"),k$o=o("Examples:"),R$o=l(),f(Ny.$$.fragment),pBe=l(),Ld=a("h2"),V5=a("a"),kle=a("span"),f(qy.$$.fragment),S$o=l(),Rle=a("span"),P$o=o("AutoModelForAudioClassification"),_Be=l(),sr=a("div"),f(Gy.$$.fragment),$$o=l(),Bd=a("p"),I$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Sle=a("code"),D$o=o("from_pretrained()"),j$o=o("class method or the "),Ple=a("code"),N$o=o("from_config()"),q$o=o(`class
method.`),G$o=l(),Oy=a("p"),O$o=o("This class cannot be instantiated directly using "),$le=a("code"),X$o=o("__init__()"),V$o=o(" (throws an error)."),z$o=l(),Zr=a("div"),f(Xy.$$.fragment),W$o=l(),Ile=a("p"),Q$o=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),H$o=l(),xd=a("p"),U$o=o(`Note:
Loading a model from its configuration file does `),Dle=a("strong"),J$o=o("not"),Y$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jle=a("code"),K$o=o("from_pretrained()"),Z$o=o("to load the model weights."),eIo=l(),Nle=a("p"),oIo=o("Examples:"),rIo=l(),f(Vy.$$.fragment),tIo=l(),ze=a("div"),f(zy.$$.fragment),aIo=l(),qle=a("p"),nIo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),sIo=l(),Ka=a("p"),lIo=o("The model class to instantiate is selected based on the "),Gle=a("code"),iIo=o("model_type"),dIo=o(` property of the config object (either
passed as an argument or loaded from `),Ole=a("code"),cIo=o("pretrained_model_name_or_path"),fIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=a("code"),mIo=o("pretrained_model_name_or_path"),gIo=o(":"),hIo=l(),Ae=a("ul"),z5=a("li"),Vle=a("strong"),pIo=o("data2vec-audio"),_Io=o(" \u2014 "),Gj=a("a"),uIo=o("Data2VecAudioForSequenceClassification"),bIo=o(" (Data2VecAudio model)"),vIo=l(),W5=a("li"),zle=a("strong"),TIo=o("hubert"),FIo=o(" \u2014 "),Oj=a("a"),CIo=o("HubertForSequenceClassification"),MIo=o(" (Hubert model)"),EIo=l(),Q5=a("li"),Wle=a("strong"),yIo=o("sew"),wIo=o(" \u2014 "),Xj=a("a"),AIo=o("SEWForSequenceClassification"),LIo=o(" (SEW model)"),BIo=l(),H5=a("li"),Qle=a("strong"),xIo=o("sew-d"),kIo=o(" \u2014 "),Vj=a("a"),RIo=o("SEWDForSequenceClassification"),SIo=o(" (SEW-D model)"),PIo=l(),U5=a("li"),Hle=a("strong"),$Io=o("unispeech"),IIo=o(" \u2014 "),zj=a("a"),DIo=o("UniSpeechForSequenceClassification"),jIo=o(" (UniSpeech model)"),NIo=l(),J5=a("li"),Ule=a("strong"),qIo=o("unispeech-sat"),GIo=o(" \u2014 "),Wj=a("a"),OIo=o("UniSpeechSatForSequenceClassification"),XIo=o(" (UniSpeechSat model)"),VIo=l(),Y5=a("li"),Jle=a("strong"),zIo=o("wav2vec2"),WIo=o(" \u2014 "),Qj=a("a"),QIo=o("Wav2Vec2ForSequenceClassification"),HIo=o(" (Wav2Vec2 model)"),UIo=l(),K5=a("li"),Yle=a("strong"),JIo=o("wavlm"),YIo=o(" \u2014 "),Hj=a("a"),KIo=o("WavLMForSequenceClassification"),ZIo=o(" (WavLM model)"),eDo=l(),Z5=a("p"),oDo=o("The model is set in evaluation mode by default using "),Kle=a("code"),rDo=o("model.eval()"),tDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zle=a("code"),aDo=o("model.train()"),nDo=l(),eie=a("p"),sDo=o("Examples:"),lDo=l(),f(Wy.$$.fragment),uBe=l(),kd=a("h2"),e2=a("a"),oie=a("span"),f(Qy.$$.fragment),iDo=l(),rie=a("span"),dDo=o("AutoModelForAudioFrameClassification"),bBe=l(),lr=a("div"),f(Hy.$$.fragment),cDo=l(),Rd=a("p"),fDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),tie=a("code"),mDo=o("from_pretrained()"),gDo=o("class method or the "),aie=a("code"),hDo=o("from_config()"),pDo=o(`class
method.`),_Do=l(),Uy=a("p"),uDo=o("This class cannot be instantiated directly using "),nie=a("code"),bDo=o("__init__()"),vDo=o(" (throws an error)."),TDo=l(),et=a("div"),f(Jy.$$.fragment),FDo=l(),sie=a("p"),CDo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),MDo=l(),Sd=a("p"),EDo=o(`Note:
Loading a model from its configuration file does `),lie=a("strong"),yDo=o("not"),wDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iie=a("code"),ADo=o("from_pretrained()"),LDo=o("to load the model weights."),BDo=l(),die=a("p"),xDo=o("Examples:"),kDo=l(),f(Yy.$$.fragment),RDo=l(),We=a("div"),f(Ky.$$.fragment),SDo=l(),cie=a("p"),PDo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),$Do=l(),Za=a("p"),IDo=o("The model class to instantiate is selected based on the "),fie=a("code"),DDo=o("model_type"),jDo=o(` property of the config object (either
passed as an argument or loaded from `),mie=a("code"),NDo=o("pretrained_model_name_or_path"),qDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gie=a("code"),GDo=o("pretrained_model_name_or_path"),ODo=o(":"),XDo=l(),en=a("ul"),o2=a("li"),hie=a("strong"),VDo=o("data2vec-audio"),zDo=o(" \u2014 "),Uj=a("a"),WDo=o("Data2VecAudioForAudioFrameClassification"),QDo=o(" (Data2VecAudio model)"),HDo=l(),r2=a("li"),pie=a("strong"),UDo=o("unispeech-sat"),JDo=o(" \u2014 "),Jj=a("a"),YDo=o("UniSpeechSatForAudioFrameClassification"),KDo=o(" (UniSpeechSat model)"),ZDo=l(),t2=a("li"),_ie=a("strong"),ejo=o("wav2vec2"),ojo=o(" \u2014 "),Yj=a("a"),rjo=o("Wav2Vec2ForAudioFrameClassification"),tjo=o(" (Wav2Vec2 model)"),ajo=l(),a2=a("li"),uie=a("strong"),njo=o("wavlm"),sjo=o(" \u2014 "),Kj=a("a"),ljo=o("WavLMForAudioFrameClassification"),ijo=o(" (WavLM model)"),djo=l(),n2=a("p"),cjo=o("The model is set in evaluation mode by default using "),bie=a("code"),fjo=o("model.eval()"),mjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vie=a("code"),gjo=o("model.train()"),hjo=l(),Tie=a("p"),pjo=o("Examples:"),_jo=l(),f(Zy.$$.fragment),vBe=l(),Pd=a("h2"),s2=a("a"),Fie=a("span"),f(ew.$$.fragment),ujo=l(),Cie=a("span"),bjo=o("AutoModelForCTC"),TBe=l(),ir=a("div"),f(ow.$$.fragment),vjo=l(),$d=a("p"),Tjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mie=a("code"),Fjo=o("from_pretrained()"),Cjo=o("class method or the "),Eie=a("code"),Mjo=o("from_config()"),Ejo=o(`class
method.`),yjo=l(),rw=a("p"),wjo=o("This class cannot be instantiated directly using "),yie=a("code"),Ajo=o("__init__()"),Ljo=o(" (throws an error)."),Bjo=l(),ot=a("div"),f(tw.$$.fragment),xjo=l(),wie=a("p"),kjo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Rjo=l(),Id=a("p"),Sjo=o(`Note:
Loading a model from its configuration file does `),Aie=a("strong"),Pjo=o("not"),$jo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lie=a("code"),Ijo=o("from_pretrained()"),Djo=o("to load the model weights."),jjo=l(),Bie=a("p"),Njo=o("Examples:"),qjo=l(),f(aw.$$.fragment),Gjo=l(),Qe=a("div"),f(nw.$$.fragment),Ojo=l(),xie=a("p"),Xjo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Vjo=l(),on=a("p"),zjo=o("The model class to instantiate is selected based on the "),kie=a("code"),Wjo=o("model_type"),Qjo=o(` property of the config object (either
passed as an argument or loaded from `),Rie=a("code"),Hjo=o("pretrained_model_name_or_path"),Ujo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=a("code"),Jjo=o("pretrained_model_name_or_path"),Yjo=o(":"),Kjo=l(),Le=a("ul"),l2=a("li"),Pie=a("strong"),Zjo=o("data2vec-audio"),eNo=o(" \u2014 "),Zj=a("a"),oNo=o("Data2VecAudioForCTC"),rNo=o(" (Data2VecAudio model)"),tNo=l(),i2=a("li"),$ie=a("strong"),aNo=o("hubert"),nNo=o(" \u2014 "),eN=a("a"),sNo=o("HubertForCTC"),lNo=o(" (Hubert model)"),iNo=l(),d2=a("li"),Iie=a("strong"),dNo=o("sew"),cNo=o(" \u2014 "),oN=a("a"),fNo=o("SEWForCTC"),mNo=o(" (SEW model)"),gNo=l(),c2=a("li"),Die=a("strong"),hNo=o("sew-d"),pNo=o(" \u2014 "),rN=a("a"),_No=o("SEWDForCTC"),uNo=o(" (SEW-D model)"),bNo=l(),f2=a("li"),jie=a("strong"),vNo=o("unispeech"),TNo=o(" \u2014 "),tN=a("a"),FNo=o("UniSpeechForCTC"),CNo=o(" (UniSpeech model)"),MNo=l(),m2=a("li"),Nie=a("strong"),ENo=o("unispeech-sat"),yNo=o(" \u2014 "),aN=a("a"),wNo=o("UniSpeechSatForCTC"),ANo=o(" (UniSpeechSat model)"),LNo=l(),g2=a("li"),qie=a("strong"),BNo=o("wav2vec2"),xNo=o(" \u2014 "),nN=a("a"),kNo=o("Wav2Vec2ForCTC"),RNo=o(" (Wav2Vec2 model)"),SNo=l(),h2=a("li"),Gie=a("strong"),PNo=o("wavlm"),$No=o(" \u2014 "),sN=a("a"),INo=o("WavLMForCTC"),DNo=o(" (WavLM model)"),jNo=l(),p2=a("p"),NNo=o("The model is set in evaluation mode by default using "),Oie=a("code"),qNo=o("model.eval()"),GNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xie=a("code"),ONo=o("model.train()"),XNo=l(),Vie=a("p"),VNo=o("Examples:"),zNo=l(),f(sw.$$.fragment),FBe=l(),Dd=a("h2"),_2=a("a"),zie=a("span"),f(lw.$$.fragment),WNo=l(),Wie=a("span"),QNo=o("AutoModelForSpeechSeq2Seq"),CBe=l(),dr=a("div"),f(iw.$$.fragment),HNo=l(),jd=a("p"),UNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Qie=a("code"),JNo=o("from_pretrained()"),YNo=o("class method or the "),Hie=a("code"),KNo=o("from_config()"),ZNo=o(`class
method.`),eqo=l(),dw=a("p"),oqo=o("This class cannot be instantiated directly using "),Uie=a("code"),rqo=o("__init__()"),tqo=o(" (throws an error)."),aqo=l(),rt=a("div"),f(cw.$$.fragment),nqo=l(),Jie=a("p"),sqo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lqo=l(),Nd=a("p"),iqo=o(`Note:
Loading a model from its configuration file does `),Yie=a("strong"),dqo=o("not"),cqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kie=a("code"),fqo=o("from_pretrained()"),mqo=o("to load the model weights."),gqo=l(),Zie=a("p"),hqo=o("Examples:"),pqo=l(),f(fw.$$.fragment),_qo=l(),He=a("div"),f(mw.$$.fragment),uqo=l(),ede=a("p"),bqo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vqo=l(),rn=a("p"),Tqo=o("The model class to instantiate is selected based on the "),ode=a("code"),Fqo=o("model_type"),Cqo=o(` property of the config object (either
passed as an argument or loaded from `),rde=a("code"),Mqo=o("pretrained_model_name_or_path"),Eqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tde=a("code"),yqo=o("pretrained_model_name_or_path"),wqo=o(":"),Aqo=l(),gw=a("ul"),u2=a("li"),ade=a("strong"),Lqo=o("speech-encoder-decoder"),Bqo=o(" \u2014 "),lN=a("a"),xqo=o("SpeechEncoderDecoderModel"),kqo=o(" (Speech Encoder decoder model)"),Rqo=l(),b2=a("li"),nde=a("strong"),Sqo=o("speech_to_text"),Pqo=o(" \u2014 "),iN=a("a"),$qo=o("Speech2TextForConditionalGeneration"),Iqo=o(" (Speech2Text model)"),Dqo=l(),v2=a("p"),jqo=o("The model is set in evaluation mode by default using "),sde=a("code"),Nqo=o("model.eval()"),qqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lde=a("code"),Gqo=o("model.train()"),Oqo=l(),ide=a("p"),Xqo=o("Examples:"),Vqo=l(),f(hw.$$.fragment),MBe=l(),qd=a("h2"),T2=a("a"),dde=a("span"),f(pw.$$.fragment),zqo=l(),cde=a("span"),Wqo=o("AutoModelForAudioXVector"),EBe=l(),cr=a("div"),f(_w.$$.fragment),Qqo=l(),Gd=a("p"),Hqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),fde=a("code"),Uqo=o("from_pretrained()"),Jqo=o("class method or the "),mde=a("code"),Yqo=o("from_config()"),Kqo=o(`class
method.`),Zqo=l(),uw=a("p"),eGo=o("This class cannot be instantiated directly using "),gde=a("code"),oGo=o("__init__()"),rGo=o(" (throws an error)."),tGo=l(),tt=a("div"),f(bw.$$.fragment),aGo=l(),hde=a("p"),nGo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),sGo=l(),Od=a("p"),lGo=o(`Note:
Loading a model from its configuration file does `),pde=a("strong"),iGo=o("not"),dGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_de=a("code"),cGo=o("from_pretrained()"),fGo=o("to load the model weights."),mGo=l(),ude=a("p"),gGo=o("Examples:"),hGo=l(),f(vw.$$.fragment),pGo=l(),Ue=a("div"),f(Tw.$$.fragment),_Go=l(),bde=a("p"),uGo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),bGo=l(),tn=a("p"),vGo=o("The model class to instantiate is selected based on the "),vde=a("code"),TGo=o("model_type"),FGo=o(` property of the config object (either
passed as an argument or loaded from `),Tde=a("code"),CGo=o("pretrained_model_name_or_path"),MGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),EGo=o("pretrained_model_name_or_path"),yGo=o(":"),wGo=l(),an=a("ul"),F2=a("li"),Cde=a("strong"),AGo=o("data2vec-audio"),LGo=o(" \u2014 "),dN=a("a"),BGo=o("Data2VecAudioForXVector"),xGo=o(" (Data2VecAudio model)"),kGo=l(),C2=a("li"),Mde=a("strong"),RGo=o("unispeech-sat"),SGo=o(" \u2014 "),cN=a("a"),PGo=o("UniSpeechSatForXVector"),$Go=o(" (UniSpeechSat model)"),IGo=l(),M2=a("li"),Ede=a("strong"),DGo=o("wav2vec2"),jGo=o(" \u2014 "),fN=a("a"),NGo=o("Wav2Vec2ForXVector"),qGo=o(" (Wav2Vec2 model)"),GGo=l(),E2=a("li"),yde=a("strong"),OGo=o("wavlm"),XGo=o(" \u2014 "),mN=a("a"),VGo=o("WavLMForXVector"),zGo=o(" (WavLM model)"),WGo=l(),y2=a("p"),QGo=o("The model is set in evaluation mode by default using "),wde=a("code"),HGo=o("model.eval()"),UGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ade=a("code"),JGo=o("model.train()"),YGo=l(),Lde=a("p"),KGo=o("Examples:"),ZGo=l(),f(Fw.$$.fragment),yBe=l(),Xd=a("h2"),w2=a("a"),Bde=a("span"),f(Cw.$$.fragment),eOo=l(),xde=a("span"),oOo=o("AutoModelForMaskedImageModeling"),wBe=l(),fr=a("div"),f(Mw.$$.fragment),rOo=l(),Vd=a("p"),tOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),kde=a("code"),aOo=o("from_pretrained()"),nOo=o("class method or the "),Rde=a("code"),sOo=o("from_config()"),lOo=o(`class
method.`),iOo=l(),Ew=a("p"),dOo=o("This class cannot be instantiated directly using "),Sde=a("code"),cOo=o("__init__()"),fOo=o(" (throws an error)."),mOo=l(),at=a("div"),f(yw.$$.fragment),gOo=l(),Pde=a("p"),hOo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),pOo=l(),zd=a("p"),_Oo=o(`Note:
Loading a model from its configuration file does `),$de=a("strong"),uOo=o("not"),bOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ide=a("code"),vOo=o("from_pretrained()"),TOo=o("to load the model weights."),FOo=l(),Dde=a("p"),COo=o("Examples:"),MOo=l(),f(ww.$$.fragment),EOo=l(),Je=a("div"),f(Aw.$$.fragment),yOo=l(),jde=a("p"),wOo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),AOo=l(),nn=a("p"),LOo=o("The model class to instantiate is selected based on the "),Nde=a("code"),BOo=o("model_type"),xOo=o(` property of the config object (either
passed as an argument or loaded from `),qde=a("code"),kOo=o("pretrained_model_name_or_path"),ROo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=a("code"),SOo=o("pretrained_model_name_or_path"),POo=o(":"),$Oo=l(),Wd=a("ul"),A2=a("li"),Ode=a("strong"),IOo=o("deit"),DOo=o(" \u2014 "),gN=a("a"),jOo=o("DeiTForMaskedImageModeling"),NOo=o(" (DeiT model)"),qOo=l(),L2=a("li"),Xde=a("strong"),GOo=o("swin"),OOo=o(" \u2014 "),hN=a("a"),XOo=o("SwinForMaskedImageModeling"),VOo=o(" (Swin model)"),zOo=l(),B2=a("li"),Vde=a("strong"),WOo=o("vit"),QOo=o(" \u2014 "),pN=a("a"),HOo=o("ViTForMaskedImageModeling"),UOo=o(" (ViT model)"),JOo=l(),x2=a("p"),YOo=o("The model is set in evaluation mode by default using "),zde=a("code"),KOo=o("model.eval()"),ZOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=a("code"),eXo=o("model.train()"),oXo=l(),Qde=a("p"),rXo=o("Examples:"),tXo=l(),f(Lw.$$.fragment),ABe=l(),Qd=a("h2"),k2=a("a"),Hde=a("span"),f(Bw.$$.fragment),aXo=l(),Ude=a("span"),nXo=o("AutoModelForObjectDetection"),LBe=l(),mr=a("div"),f(xw.$$.fragment),sXo=l(),Hd=a("p"),lXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Jde=a("code"),iXo=o("from_pretrained()"),dXo=o("class method or the "),Yde=a("code"),cXo=o("from_config()"),fXo=o(`class
method.`),mXo=l(),kw=a("p"),gXo=o("This class cannot be instantiated directly using "),Kde=a("code"),hXo=o("__init__()"),pXo=o(" (throws an error)."),_Xo=l(),nt=a("div"),f(Rw.$$.fragment),uXo=l(),Zde=a("p"),bXo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),vXo=l(),Ud=a("p"),TXo=o(`Note:
Loading a model from its configuration file does `),ece=a("strong"),FXo=o("not"),CXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=a("code"),MXo=o("from_pretrained()"),EXo=o("to load the model weights."),yXo=l(),rce=a("p"),wXo=o("Examples:"),AXo=l(),f(Sw.$$.fragment),LXo=l(),Ye=a("div"),f(Pw.$$.fragment),BXo=l(),tce=a("p"),xXo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kXo=l(),sn=a("p"),RXo=o("The model class to instantiate is selected based on the "),ace=a("code"),SXo=o("model_type"),PXo=o(` property of the config object (either
passed as an argument or loaded from `),nce=a("code"),$Xo=o("pretrained_model_name_or_path"),IXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=a("code"),DXo=o("pretrained_model_name_or_path"),jXo=o(":"),NXo=l(),lce=a("ul"),R2=a("li"),ice=a("strong"),qXo=o("detr"),GXo=o(" \u2014 "),_N=a("a"),OXo=o("DetrForObjectDetection"),XXo=o(" (DETR model)"),VXo=l(),S2=a("p"),zXo=o("The model is set in evaluation mode by default using "),dce=a("code"),WXo=o("model.eval()"),QXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cce=a("code"),HXo=o("model.train()"),UXo=l(),fce=a("p"),JXo=o("Examples:"),YXo=l(),f($w.$$.fragment),BBe=l(),Jd=a("h2"),P2=a("a"),mce=a("span"),f(Iw.$$.fragment),KXo=l(),gce=a("span"),ZXo=o("AutoModelForImageSegmentation"),xBe=l(),gr=a("div"),f(Dw.$$.fragment),eVo=l(),Yd=a("p"),oVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),hce=a("code"),rVo=o("from_pretrained()"),tVo=o("class method or the "),pce=a("code"),aVo=o("from_config()"),nVo=o(`class
method.`),sVo=l(),jw=a("p"),lVo=o("This class cannot be instantiated directly using "),_ce=a("code"),iVo=o("__init__()"),dVo=o(" (throws an error)."),cVo=l(),st=a("div"),f(Nw.$$.fragment),fVo=l(),uce=a("p"),mVo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),gVo=l(),Kd=a("p"),hVo=o(`Note:
Loading a model from its configuration file does `),bce=a("strong"),pVo=o("not"),_Vo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vce=a("code"),uVo=o("from_pretrained()"),bVo=o("to load the model weights."),vVo=l(),Tce=a("p"),TVo=o("Examples:"),FVo=l(),f(qw.$$.fragment),CVo=l(),Ke=a("div"),f(Gw.$$.fragment),MVo=l(),Fce=a("p"),EVo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),yVo=l(),ln=a("p"),wVo=o("The model class to instantiate is selected based on the "),Cce=a("code"),AVo=o("model_type"),LVo=o(` property of the config object (either
passed as an argument or loaded from `),Mce=a("code"),BVo=o("pretrained_model_name_or_path"),xVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=a("code"),kVo=o("pretrained_model_name_or_path"),RVo=o(":"),SVo=l(),yce=a("ul"),$2=a("li"),wce=a("strong"),PVo=o("detr"),$Vo=o(" \u2014 "),uN=a("a"),IVo=o("DetrForSegmentation"),DVo=o(" (DETR model)"),jVo=l(),I2=a("p"),NVo=o("The model is set in evaluation mode by default using "),Ace=a("code"),qVo=o("model.eval()"),GVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=a("code"),OVo=o("model.train()"),XVo=l(),Bce=a("p"),VVo=o("Examples:"),zVo=l(),f(Ow.$$.fragment),kBe=l(),Zd=a("h2"),D2=a("a"),xce=a("span"),f(Xw.$$.fragment),WVo=l(),kce=a("span"),QVo=o("AutoModelForSemanticSegmentation"),RBe=l(),hr=a("div"),f(Vw.$$.fragment),HVo=l(),ec=a("p"),UVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Rce=a("code"),JVo=o("from_pretrained()"),YVo=o("class method or the "),Sce=a("code"),KVo=o("from_config()"),ZVo=o(`class
method.`),ezo=l(),zw=a("p"),ozo=o("This class cannot be instantiated directly using "),Pce=a("code"),rzo=o("__init__()"),tzo=o(" (throws an error)."),azo=l(),lt=a("div"),f(Ww.$$.fragment),nzo=l(),$ce=a("p"),szo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),lzo=l(),oc=a("p"),izo=o(`Note:
Loading a model from its configuration file does `),Ice=a("strong"),dzo=o("not"),czo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dce=a("code"),fzo=o("from_pretrained()"),mzo=o("to load the model weights."),gzo=l(),jce=a("p"),hzo=o("Examples:"),pzo=l(),f(Qw.$$.fragment),_zo=l(),Ze=a("div"),f(Hw.$$.fragment),uzo=l(),Nce=a("p"),bzo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),vzo=l(),dn=a("p"),Tzo=o("The model class to instantiate is selected based on the "),qce=a("code"),Fzo=o("model_type"),Czo=o(` property of the config object (either
passed as an argument or loaded from `),Gce=a("code"),Mzo=o("pretrained_model_name_or_path"),Ezo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),yzo=o("pretrained_model_name_or_path"),wzo=o(":"),Azo=l(),Uw=a("ul"),j2=a("li"),Xce=a("strong"),Lzo=o("beit"),Bzo=o(" \u2014 "),bN=a("a"),xzo=o("BeitForSemanticSegmentation"),kzo=o(" (BEiT model)"),Rzo=l(),N2=a("li"),Vce=a("strong"),Szo=o("segformer"),Pzo=o(" \u2014 "),vN=a("a"),$zo=o("SegformerForSemanticSegmentation"),Izo=o(" (SegFormer model)"),Dzo=l(),q2=a("p"),jzo=o("The model is set in evaluation mode by default using "),zce=a("code"),Nzo=o("model.eval()"),qzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=a("code"),Gzo=o("model.train()"),Ozo=l(),Qce=a("p"),Xzo=o("Examples:"),Vzo=l(),f(Jw.$$.fragment),SBe=l(),rc=a("h2"),G2=a("a"),Hce=a("span"),f(Yw.$$.fragment),zzo=l(),Uce=a("span"),Wzo=o("TFAutoModel"),PBe=l(),pr=a("div"),f(Kw.$$.fragment),Qzo=l(),tc=a("p"),Hzo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Jce=a("code"),Uzo=o("from_pretrained()"),Jzo=o("class method or the "),Yce=a("code"),Yzo=o("from_config()"),Kzo=o(`class
method.`),Zzo=l(),Zw=a("p"),eWo=o("This class cannot be instantiated directly using "),Kce=a("code"),oWo=o("__init__()"),rWo=o(" (throws an error)."),tWo=l(),it=a("div"),f(e6.$$.fragment),aWo=l(),Zce=a("p"),nWo=o("Instantiates one of the base model classes of the library from a configuration."),sWo=l(),ac=a("p"),lWo=o(`Note:
Loading a model from its configuration file does `),efe=a("strong"),iWo=o("not"),dWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ofe=a("code"),cWo=o("from_pretrained()"),fWo=o("to load the model weights."),mWo=l(),rfe=a("p"),gWo=o("Examples:"),hWo=l(),f(o6.$$.fragment),pWo=l(),go=a("div"),f(r6.$$.fragment),_Wo=l(),tfe=a("p"),uWo=o("Instantiate one of the base model classes of the library from a pretrained model."),bWo=l(),cn=a("p"),vWo=o("The model class to instantiate is selected based on the "),afe=a("code"),TWo=o("model_type"),FWo=o(` property of the config object (either
passed as an argument or loaded from `),nfe=a("code"),CWo=o("pretrained_model_name_or_path"),MWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=a("code"),EWo=o("pretrained_model_name_or_path"),yWo=o(":"),wWo=l(),B=a("ul"),O2=a("li"),lfe=a("strong"),AWo=o("albert"),LWo=o(" \u2014 "),TN=a("a"),BWo=o("TFAlbertModel"),xWo=o(" (ALBERT model)"),kWo=l(),X2=a("li"),ife=a("strong"),RWo=o("bart"),SWo=o(" \u2014 "),FN=a("a"),PWo=o("TFBartModel"),$Wo=o(" (BART model)"),IWo=l(),V2=a("li"),dfe=a("strong"),DWo=o("bert"),jWo=o(" \u2014 "),CN=a("a"),NWo=o("TFBertModel"),qWo=o(" (BERT model)"),GWo=l(),z2=a("li"),cfe=a("strong"),OWo=o("blenderbot"),XWo=o(" \u2014 "),MN=a("a"),VWo=o("TFBlenderbotModel"),zWo=o(" (Blenderbot model)"),WWo=l(),W2=a("li"),ffe=a("strong"),QWo=o("blenderbot-small"),HWo=o(" \u2014 "),EN=a("a"),UWo=o("TFBlenderbotSmallModel"),JWo=o(" (BlenderbotSmall model)"),YWo=l(),Q2=a("li"),mfe=a("strong"),KWo=o("camembert"),ZWo=o(" \u2014 "),yN=a("a"),eQo=o("TFCamembertModel"),oQo=o(" (CamemBERT model)"),rQo=l(),H2=a("li"),gfe=a("strong"),tQo=o("clip"),aQo=o(" \u2014 "),wN=a("a"),nQo=o("TFCLIPModel"),sQo=o(" (CLIP model)"),lQo=l(),U2=a("li"),hfe=a("strong"),iQo=o("convbert"),dQo=o(" \u2014 "),AN=a("a"),cQo=o("TFConvBertModel"),fQo=o(" (ConvBERT model)"),mQo=l(),J2=a("li"),pfe=a("strong"),gQo=o("convnext"),hQo=o(" \u2014 "),LN=a("a"),pQo=o("TFConvNextModel"),_Qo=o(" (ConvNext model)"),uQo=l(),Y2=a("li"),_fe=a("strong"),bQo=o("ctrl"),vQo=o(" \u2014 "),BN=a("a"),TQo=o("TFCTRLModel"),FQo=o(" (CTRL model)"),CQo=l(),K2=a("li"),ufe=a("strong"),MQo=o("deberta"),EQo=o(" \u2014 "),xN=a("a"),yQo=o("TFDebertaModel"),wQo=o(" (DeBERTa model)"),AQo=l(),Z2=a("li"),bfe=a("strong"),LQo=o("deberta-v2"),BQo=o(" \u2014 "),kN=a("a"),xQo=o("TFDebertaV2Model"),kQo=o(" (DeBERTa-v2 model)"),RQo=l(),ev=a("li"),vfe=a("strong"),SQo=o("distilbert"),PQo=o(" \u2014 "),RN=a("a"),$Qo=o("TFDistilBertModel"),IQo=o(" (DistilBERT model)"),DQo=l(),ov=a("li"),Tfe=a("strong"),jQo=o("dpr"),NQo=o(" \u2014 "),SN=a("a"),qQo=o("TFDPRQuestionEncoder"),GQo=o(" (DPR model)"),OQo=l(),rv=a("li"),Ffe=a("strong"),XQo=o("electra"),VQo=o(" \u2014 "),PN=a("a"),zQo=o("TFElectraModel"),WQo=o(" (ELECTRA model)"),QQo=l(),tv=a("li"),Cfe=a("strong"),HQo=o("flaubert"),UQo=o(" \u2014 "),$N=a("a"),JQo=o("TFFlaubertModel"),YQo=o(" (FlauBERT model)"),KQo=l(),Is=a("li"),Mfe=a("strong"),ZQo=o("funnel"),eHo=o(" \u2014 "),IN=a("a"),oHo=o("TFFunnelModel"),rHo=o(" or "),DN=a("a"),tHo=o("TFFunnelBaseModel"),aHo=o(" (Funnel Transformer model)"),nHo=l(),av=a("li"),Efe=a("strong"),sHo=o("gpt2"),lHo=o(" \u2014 "),jN=a("a"),iHo=o("TFGPT2Model"),dHo=o(" (OpenAI GPT-2 model)"),cHo=l(),nv=a("li"),yfe=a("strong"),fHo=o("hubert"),mHo=o(" \u2014 "),NN=a("a"),gHo=o("TFHubertModel"),hHo=o(" (Hubert model)"),pHo=l(),sv=a("li"),wfe=a("strong"),_Ho=o("layoutlm"),uHo=o(" \u2014 "),qN=a("a"),bHo=o("TFLayoutLMModel"),vHo=o(" (LayoutLM model)"),THo=l(),lv=a("li"),Afe=a("strong"),FHo=o("led"),CHo=o(" \u2014 "),GN=a("a"),MHo=o("TFLEDModel"),EHo=o(" (LED model)"),yHo=l(),iv=a("li"),Lfe=a("strong"),wHo=o("longformer"),AHo=o(" \u2014 "),ON=a("a"),LHo=o("TFLongformerModel"),BHo=o(" (Longformer model)"),xHo=l(),dv=a("li"),Bfe=a("strong"),kHo=o("lxmert"),RHo=o(" \u2014 "),XN=a("a"),SHo=o("TFLxmertModel"),PHo=o(" (LXMERT model)"),$Ho=l(),cv=a("li"),xfe=a("strong"),IHo=o("marian"),DHo=o(" \u2014 "),VN=a("a"),jHo=o("TFMarianModel"),NHo=o(" (Marian model)"),qHo=l(),fv=a("li"),kfe=a("strong"),GHo=o("mbart"),OHo=o(" \u2014 "),zN=a("a"),XHo=o("TFMBartModel"),VHo=o(" (mBART model)"),zHo=l(),mv=a("li"),Rfe=a("strong"),WHo=o("mobilebert"),QHo=o(" \u2014 "),WN=a("a"),HHo=o("TFMobileBertModel"),UHo=o(" (MobileBERT model)"),JHo=l(),gv=a("li"),Sfe=a("strong"),YHo=o("mpnet"),KHo=o(" \u2014 "),QN=a("a"),ZHo=o("TFMPNetModel"),eUo=o(" (MPNet model)"),oUo=l(),hv=a("li"),Pfe=a("strong"),rUo=o("mt5"),tUo=o(" \u2014 "),HN=a("a"),aUo=o("TFMT5Model"),nUo=o(" (mT5 model)"),sUo=l(),pv=a("li"),$fe=a("strong"),lUo=o("openai-gpt"),iUo=o(" \u2014 "),UN=a("a"),dUo=o("TFOpenAIGPTModel"),cUo=o(" (OpenAI GPT model)"),fUo=l(),_v=a("li"),Ife=a("strong"),mUo=o("pegasus"),gUo=o(" \u2014 "),JN=a("a"),hUo=o("TFPegasusModel"),pUo=o(" (Pegasus model)"),_Uo=l(),uv=a("li"),Dfe=a("strong"),uUo=o("rembert"),bUo=o(" \u2014 "),YN=a("a"),vUo=o("TFRemBertModel"),TUo=o(" (RemBERT model)"),FUo=l(),bv=a("li"),jfe=a("strong"),CUo=o("roberta"),MUo=o(" \u2014 "),KN=a("a"),EUo=o("TFRobertaModel"),yUo=o(" (RoBERTa model)"),wUo=l(),vv=a("li"),Nfe=a("strong"),AUo=o("roformer"),LUo=o(" \u2014 "),ZN=a("a"),BUo=o("TFRoFormerModel"),xUo=o(" (RoFormer model)"),kUo=l(),Tv=a("li"),qfe=a("strong"),RUo=o("speech_to_text"),SUo=o(" \u2014 "),eq=a("a"),PUo=o("TFSpeech2TextModel"),$Uo=o(" (Speech2Text model)"),IUo=l(),Fv=a("li"),Gfe=a("strong"),DUo=o("t5"),jUo=o(" \u2014 "),oq=a("a"),NUo=o("TFT5Model"),qUo=o(" (T5 model)"),GUo=l(),Cv=a("li"),Ofe=a("strong"),OUo=o("tapas"),XUo=o(" \u2014 "),rq=a("a"),VUo=o("TFTapasModel"),zUo=o(" (TAPAS model)"),WUo=l(),Mv=a("li"),Xfe=a("strong"),QUo=o("transfo-xl"),HUo=o(" \u2014 "),tq=a("a"),UUo=o("TFTransfoXLModel"),JUo=o(" (Transformer-XL model)"),YUo=l(),Ev=a("li"),Vfe=a("strong"),KUo=o("vit"),ZUo=o(" \u2014 "),aq=a("a"),eJo=o("TFViTModel"),oJo=o(" (ViT model)"),rJo=l(),yv=a("li"),zfe=a("strong"),tJo=o("wav2vec2"),aJo=o(" \u2014 "),nq=a("a"),nJo=o("TFWav2Vec2Model"),sJo=o(" (Wav2Vec2 model)"),lJo=l(),wv=a("li"),Wfe=a("strong"),iJo=o("xlm"),dJo=o(" \u2014 "),sq=a("a"),cJo=o("TFXLMModel"),fJo=o(" (XLM model)"),mJo=l(),Av=a("li"),Qfe=a("strong"),gJo=o("xlm-roberta"),hJo=o(" \u2014 "),lq=a("a"),pJo=o("TFXLMRobertaModel"),_Jo=o(" (XLM-RoBERTa model)"),uJo=l(),Lv=a("li"),Hfe=a("strong"),bJo=o("xlnet"),vJo=o(" \u2014 "),iq=a("a"),TJo=o("TFXLNetModel"),FJo=o(" (XLNet model)"),CJo=l(),Ufe=a("p"),MJo=o("Examples:"),EJo=l(),f(t6.$$.fragment),$Be=l(),nc=a("h2"),Bv=a("a"),Jfe=a("span"),f(a6.$$.fragment),yJo=l(),Yfe=a("span"),wJo=o("TFAutoModelForPreTraining"),IBe=l(),_r=a("div"),f(n6.$$.fragment),AJo=l(),sc=a("p"),LJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kfe=a("code"),BJo=o("from_pretrained()"),xJo=o("class method or the "),Zfe=a("code"),kJo=o("from_config()"),RJo=o(`class
method.`),SJo=l(),s6=a("p"),PJo=o("This class cannot be instantiated directly using "),eme=a("code"),$Jo=o("__init__()"),IJo=o(" (throws an error)."),DJo=l(),dt=a("div"),f(l6.$$.fragment),jJo=l(),ome=a("p"),NJo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qJo=l(),lc=a("p"),GJo=o(`Note:
Loading a model from its configuration file does `),rme=a("strong"),OJo=o("not"),XJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tme=a("code"),VJo=o("from_pretrained()"),zJo=o("to load the model weights."),WJo=l(),ame=a("p"),QJo=o("Examples:"),HJo=l(),f(i6.$$.fragment),UJo=l(),ho=a("div"),f(d6.$$.fragment),JJo=l(),nme=a("p"),YJo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),KJo=l(),fn=a("p"),ZJo=o("The model class to instantiate is selected based on the "),sme=a("code"),eYo=o("model_type"),oYo=o(` property of the config object (either
passed as an argument or loaded from `),lme=a("code"),rYo=o("pretrained_model_name_or_path"),tYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=a("code"),aYo=o("pretrained_model_name_or_path"),nYo=o(":"),sYo=l(),H=a("ul"),xv=a("li"),dme=a("strong"),lYo=o("albert"),iYo=o(" \u2014 "),dq=a("a"),dYo=o("TFAlbertForPreTraining"),cYo=o(" (ALBERT model)"),fYo=l(),kv=a("li"),cme=a("strong"),mYo=o("bart"),gYo=o(" \u2014 "),cq=a("a"),hYo=o("TFBartForConditionalGeneration"),pYo=o(" (BART model)"),_Yo=l(),Rv=a("li"),fme=a("strong"),uYo=o("bert"),bYo=o(" \u2014 "),fq=a("a"),vYo=o("TFBertForPreTraining"),TYo=o(" (BERT model)"),FYo=l(),Sv=a("li"),mme=a("strong"),CYo=o("camembert"),MYo=o(" \u2014 "),mq=a("a"),EYo=o("TFCamembertForMaskedLM"),yYo=o(" (CamemBERT model)"),wYo=l(),Pv=a("li"),gme=a("strong"),AYo=o("ctrl"),LYo=o(" \u2014 "),gq=a("a"),BYo=o("TFCTRLLMHeadModel"),xYo=o(" (CTRL model)"),kYo=l(),$v=a("li"),hme=a("strong"),RYo=o("distilbert"),SYo=o(" \u2014 "),hq=a("a"),PYo=o("TFDistilBertForMaskedLM"),$Yo=o(" (DistilBERT model)"),IYo=l(),Iv=a("li"),pme=a("strong"),DYo=o("electra"),jYo=o(" \u2014 "),pq=a("a"),NYo=o("TFElectraForPreTraining"),qYo=o(" (ELECTRA model)"),GYo=l(),Dv=a("li"),_me=a("strong"),OYo=o("flaubert"),XYo=o(" \u2014 "),_q=a("a"),VYo=o("TFFlaubertWithLMHeadModel"),zYo=o(" (FlauBERT model)"),WYo=l(),jv=a("li"),ume=a("strong"),QYo=o("funnel"),HYo=o(" \u2014 "),uq=a("a"),UYo=o("TFFunnelForPreTraining"),JYo=o(" (Funnel Transformer model)"),YYo=l(),Nv=a("li"),bme=a("strong"),KYo=o("gpt2"),ZYo=o(" \u2014 "),bq=a("a"),eKo=o("TFGPT2LMHeadModel"),oKo=o(" (OpenAI GPT-2 model)"),rKo=l(),qv=a("li"),vme=a("strong"),tKo=o("layoutlm"),aKo=o(" \u2014 "),vq=a("a"),nKo=o("TFLayoutLMForMaskedLM"),sKo=o(" (LayoutLM model)"),lKo=l(),Gv=a("li"),Tme=a("strong"),iKo=o("lxmert"),dKo=o(" \u2014 "),Tq=a("a"),cKo=o("TFLxmertForPreTraining"),fKo=o(" (LXMERT model)"),mKo=l(),Ov=a("li"),Fme=a("strong"),gKo=o("mobilebert"),hKo=o(" \u2014 "),Fq=a("a"),pKo=o("TFMobileBertForPreTraining"),_Ko=o(" (MobileBERT model)"),uKo=l(),Xv=a("li"),Cme=a("strong"),bKo=o("mpnet"),vKo=o(" \u2014 "),Cq=a("a"),TKo=o("TFMPNetForMaskedLM"),FKo=o(" (MPNet model)"),CKo=l(),Vv=a("li"),Mme=a("strong"),MKo=o("openai-gpt"),EKo=o(" \u2014 "),Mq=a("a"),yKo=o("TFOpenAIGPTLMHeadModel"),wKo=o(" (OpenAI GPT model)"),AKo=l(),zv=a("li"),Eme=a("strong"),LKo=o("roberta"),BKo=o(" \u2014 "),Eq=a("a"),xKo=o("TFRobertaForMaskedLM"),kKo=o(" (RoBERTa model)"),RKo=l(),Wv=a("li"),yme=a("strong"),SKo=o("t5"),PKo=o(" \u2014 "),yq=a("a"),$Ko=o("TFT5ForConditionalGeneration"),IKo=o(" (T5 model)"),DKo=l(),Qv=a("li"),wme=a("strong"),jKo=o("tapas"),NKo=o(" \u2014 "),wq=a("a"),qKo=o("TFTapasForMaskedLM"),GKo=o(" (TAPAS model)"),OKo=l(),Hv=a("li"),Ame=a("strong"),XKo=o("transfo-xl"),VKo=o(" \u2014 "),Aq=a("a"),zKo=o("TFTransfoXLLMHeadModel"),WKo=o(" (Transformer-XL model)"),QKo=l(),Uv=a("li"),Lme=a("strong"),HKo=o("xlm"),UKo=o(" \u2014 "),Lq=a("a"),JKo=o("TFXLMWithLMHeadModel"),YKo=o(" (XLM model)"),KKo=l(),Jv=a("li"),Bme=a("strong"),ZKo=o("xlm-roberta"),eZo=o(" \u2014 "),Bq=a("a"),oZo=o("TFXLMRobertaForMaskedLM"),rZo=o(" (XLM-RoBERTa model)"),tZo=l(),Yv=a("li"),xme=a("strong"),aZo=o("xlnet"),nZo=o(" \u2014 "),xq=a("a"),sZo=o("TFXLNetLMHeadModel"),lZo=o(" (XLNet model)"),iZo=l(),kme=a("p"),dZo=o("Examples:"),cZo=l(),f(c6.$$.fragment),DBe=l(),ic=a("h2"),Kv=a("a"),Rme=a("span"),f(f6.$$.fragment),fZo=l(),Sme=a("span"),mZo=o("TFAutoModelForCausalLM"),jBe=l(),ur=a("div"),f(m6.$$.fragment),gZo=l(),dc=a("p"),hZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pme=a("code"),pZo=o("from_pretrained()"),_Zo=o("class method or the "),$me=a("code"),uZo=o("from_config()"),bZo=o(`class
method.`),vZo=l(),g6=a("p"),TZo=o("This class cannot be instantiated directly using "),Ime=a("code"),FZo=o("__init__()"),CZo=o(" (throws an error)."),MZo=l(),ct=a("div"),f(h6.$$.fragment),EZo=l(),Dme=a("p"),yZo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wZo=l(),cc=a("p"),AZo=o(`Note:
Loading a model from its configuration file does `),jme=a("strong"),LZo=o("not"),BZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nme=a("code"),xZo=o("from_pretrained()"),kZo=o("to load the model weights."),RZo=l(),qme=a("p"),SZo=o("Examples:"),PZo=l(),f(p6.$$.fragment),$Zo=l(),po=a("div"),f(_6.$$.fragment),IZo=l(),Gme=a("p"),DZo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jZo=l(),mn=a("p"),NZo=o("The model class to instantiate is selected based on the "),Ome=a("code"),qZo=o("model_type"),GZo=o(` property of the config object (either
passed as an argument or loaded from `),Xme=a("code"),OZo=o("pretrained_model_name_or_path"),XZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=a("code"),VZo=o("pretrained_model_name_or_path"),zZo=o(":"),WZo=l(),he=a("ul"),Zv=a("li"),zme=a("strong"),QZo=o("bert"),HZo=o(" \u2014 "),kq=a("a"),UZo=o("TFBertLMHeadModel"),JZo=o(" (BERT model)"),YZo=l(),eT=a("li"),Wme=a("strong"),KZo=o("ctrl"),ZZo=o(" \u2014 "),Rq=a("a"),eer=o("TFCTRLLMHeadModel"),oer=o(" (CTRL model)"),rer=l(),oT=a("li"),Qme=a("strong"),ter=o("gpt2"),aer=o(" \u2014 "),Sq=a("a"),ner=o("TFGPT2LMHeadModel"),ser=o(" (OpenAI GPT-2 model)"),ler=l(),rT=a("li"),Hme=a("strong"),ier=o("openai-gpt"),der=o(" \u2014 "),Pq=a("a"),cer=o("TFOpenAIGPTLMHeadModel"),fer=o(" (OpenAI GPT model)"),mer=l(),tT=a("li"),Ume=a("strong"),ger=o("rembert"),her=o(" \u2014 "),$q=a("a"),per=o("TFRemBertForCausalLM"),_er=o(" (RemBERT model)"),uer=l(),aT=a("li"),Jme=a("strong"),ber=o("roberta"),ver=o(" \u2014 "),Iq=a("a"),Ter=o("TFRobertaForCausalLM"),Fer=o(" (RoBERTa model)"),Cer=l(),nT=a("li"),Yme=a("strong"),Mer=o("roformer"),Eer=o(" \u2014 "),Dq=a("a"),yer=o("TFRoFormerForCausalLM"),wer=o(" (RoFormer model)"),Aer=l(),sT=a("li"),Kme=a("strong"),Ler=o("transfo-xl"),Ber=o(" \u2014 "),jq=a("a"),xer=o("TFTransfoXLLMHeadModel"),ker=o(" (Transformer-XL model)"),Rer=l(),lT=a("li"),Zme=a("strong"),Ser=o("xlm"),Per=o(" \u2014 "),Nq=a("a"),$er=o("TFXLMWithLMHeadModel"),Ier=o(" (XLM model)"),Der=l(),iT=a("li"),ege=a("strong"),jer=o("xlnet"),Ner=o(" \u2014 "),qq=a("a"),qer=o("TFXLNetLMHeadModel"),Ger=o(" (XLNet model)"),Oer=l(),oge=a("p"),Xer=o("Examples:"),Ver=l(),f(u6.$$.fragment),NBe=l(),fc=a("h2"),dT=a("a"),rge=a("span"),f(b6.$$.fragment),zer=l(),tge=a("span"),Wer=o("TFAutoModelForImageClassification"),qBe=l(),br=a("div"),f(v6.$$.fragment),Qer=l(),mc=a("p"),Her=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),age=a("code"),Uer=o("from_pretrained()"),Jer=o("class method or the "),nge=a("code"),Yer=o("from_config()"),Ker=o(`class
method.`),Zer=l(),T6=a("p"),eor=o("This class cannot be instantiated directly using "),sge=a("code"),oor=o("__init__()"),ror=o(" (throws an error)."),tor=l(),ft=a("div"),f(F6.$$.fragment),aor=l(),lge=a("p"),nor=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sor=l(),gc=a("p"),lor=o(`Note:
Loading a model from its configuration file does `),ige=a("strong"),ior=o("not"),dor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dge=a("code"),cor=o("from_pretrained()"),mor=o("to load the model weights."),gor=l(),cge=a("p"),hor=o("Examples:"),por=l(),f(C6.$$.fragment),_or=l(),_o=a("div"),f(M6.$$.fragment),uor=l(),fge=a("p"),bor=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vor=l(),gn=a("p"),Tor=o("The model class to instantiate is selected based on the "),mge=a("code"),For=o("model_type"),Cor=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),Mor=o("pretrained_model_name_or_path"),Eor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),yor=o("pretrained_model_name_or_path"),wor=o(":"),Aor=l(),E6=a("ul"),cT=a("li"),pge=a("strong"),Lor=o("convnext"),Bor=o(" \u2014 "),Gq=a("a"),xor=o("TFConvNextForImageClassification"),kor=o(" (ConvNext model)"),Ror=l(),fT=a("li"),_ge=a("strong"),Sor=o("vit"),Por=o(" \u2014 "),Oq=a("a"),$or=o("TFViTForImageClassification"),Ior=o(" (ViT model)"),Dor=l(),uge=a("p"),jor=o("Examples:"),Nor=l(),f(y6.$$.fragment),GBe=l(),hc=a("h2"),mT=a("a"),bge=a("span"),f(w6.$$.fragment),qor=l(),vge=a("span"),Gor=o("TFAutoModelForMaskedLM"),OBe=l(),vr=a("div"),f(A6.$$.fragment),Oor=l(),pc=a("p"),Xor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Tge=a("code"),Vor=o("from_pretrained()"),zor=o("class method or the "),Fge=a("code"),Wor=o("from_config()"),Qor=o(`class
method.`),Hor=l(),L6=a("p"),Uor=o("This class cannot be instantiated directly using "),Cge=a("code"),Jor=o("__init__()"),Yor=o(" (throws an error)."),Kor=l(),mt=a("div"),f(B6.$$.fragment),Zor=l(),Mge=a("p"),err=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),orr=l(),_c=a("p"),rrr=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),trr=o("not"),arr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yge=a("code"),nrr=o("from_pretrained()"),srr=o("to load the model weights."),lrr=l(),wge=a("p"),irr=o("Examples:"),drr=l(),f(x6.$$.fragment),crr=l(),uo=a("div"),f(k6.$$.fragment),frr=l(),Age=a("p"),mrr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),grr=l(),hn=a("p"),hrr=o("The model class to instantiate is selected based on the "),Lge=a("code"),prr=o("model_type"),_rr=o(` property of the config object (either
passed as an argument or loaded from `),Bge=a("code"),urr=o("pretrained_model_name_or_path"),brr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=a("code"),vrr=o("pretrained_model_name_or_path"),Trr=o(":"),Frr=l(),Y=a("ul"),gT=a("li"),kge=a("strong"),Crr=o("albert"),Mrr=o(" \u2014 "),Xq=a("a"),Err=o("TFAlbertForMaskedLM"),yrr=o(" (ALBERT model)"),wrr=l(),hT=a("li"),Rge=a("strong"),Arr=o("bert"),Lrr=o(" \u2014 "),Vq=a("a"),Brr=o("TFBertForMaskedLM"),xrr=o(" (BERT model)"),krr=l(),pT=a("li"),Sge=a("strong"),Rrr=o("camembert"),Srr=o(" \u2014 "),zq=a("a"),Prr=o("TFCamembertForMaskedLM"),$rr=o(" (CamemBERT model)"),Irr=l(),_T=a("li"),Pge=a("strong"),Drr=o("convbert"),jrr=o(" \u2014 "),Wq=a("a"),Nrr=o("TFConvBertForMaskedLM"),qrr=o(" (ConvBERT model)"),Grr=l(),uT=a("li"),$ge=a("strong"),Orr=o("deberta"),Xrr=o(" \u2014 "),Qq=a("a"),Vrr=o("TFDebertaForMaskedLM"),zrr=o(" (DeBERTa model)"),Wrr=l(),bT=a("li"),Ige=a("strong"),Qrr=o("deberta-v2"),Hrr=o(" \u2014 "),Hq=a("a"),Urr=o("TFDebertaV2ForMaskedLM"),Jrr=o(" (DeBERTa-v2 model)"),Yrr=l(),vT=a("li"),Dge=a("strong"),Krr=o("distilbert"),Zrr=o(" \u2014 "),Uq=a("a"),etr=o("TFDistilBertForMaskedLM"),otr=o(" (DistilBERT model)"),rtr=l(),TT=a("li"),jge=a("strong"),ttr=o("electra"),atr=o(" \u2014 "),Jq=a("a"),ntr=o("TFElectraForMaskedLM"),str=o(" (ELECTRA model)"),ltr=l(),FT=a("li"),Nge=a("strong"),itr=o("flaubert"),dtr=o(" \u2014 "),Yq=a("a"),ctr=o("TFFlaubertWithLMHeadModel"),ftr=o(" (FlauBERT model)"),mtr=l(),CT=a("li"),qge=a("strong"),gtr=o("funnel"),htr=o(" \u2014 "),Kq=a("a"),ptr=o("TFFunnelForMaskedLM"),_tr=o(" (Funnel Transformer model)"),utr=l(),MT=a("li"),Gge=a("strong"),btr=o("layoutlm"),vtr=o(" \u2014 "),Zq=a("a"),Ttr=o("TFLayoutLMForMaskedLM"),Ftr=o(" (LayoutLM model)"),Ctr=l(),ET=a("li"),Oge=a("strong"),Mtr=o("longformer"),Etr=o(" \u2014 "),eG=a("a"),ytr=o("TFLongformerForMaskedLM"),wtr=o(" (Longformer model)"),Atr=l(),yT=a("li"),Xge=a("strong"),Ltr=o("mobilebert"),Btr=o(" \u2014 "),oG=a("a"),xtr=o("TFMobileBertForMaskedLM"),ktr=o(" (MobileBERT model)"),Rtr=l(),wT=a("li"),Vge=a("strong"),Str=o("mpnet"),Ptr=o(" \u2014 "),rG=a("a"),$tr=o("TFMPNetForMaskedLM"),Itr=o(" (MPNet model)"),Dtr=l(),AT=a("li"),zge=a("strong"),jtr=o("rembert"),Ntr=o(" \u2014 "),tG=a("a"),qtr=o("TFRemBertForMaskedLM"),Gtr=o(" (RemBERT model)"),Otr=l(),LT=a("li"),Wge=a("strong"),Xtr=o("roberta"),Vtr=o(" \u2014 "),aG=a("a"),ztr=o("TFRobertaForMaskedLM"),Wtr=o(" (RoBERTa model)"),Qtr=l(),BT=a("li"),Qge=a("strong"),Htr=o("roformer"),Utr=o(" \u2014 "),nG=a("a"),Jtr=o("TFRoFormerForMaskedLM"),Ytr=o(" (RoFormer model)"),Ktr=l(),xT=a("li"),Hge=a("strong"),Ztr=o("tapas"),ear=o(" \u2014 "),sG=a("a"),oar=o("TFTapasForMaskedLM"),rar=o(" (TAPAS model)"),tar=l(),kT=a("li"),Uge=a("strong"),aar=o("xlm"),nar=o(" \u2014 "),lG=a("a"),sar=o("TFXLMWithLMHeadModel"),lar=o(" (XLM model)"),iar=l(),RT=a("li"),Jge=a("strong"),dar=o("xlm-roberta"),car=o(" \u2014 "),iG=a("a"),far=o("TFXLMRobertaForMaskedLM"),mar=o(" (XLM-RoBERTa model)"),gar=l(),Yge=a("p"),har=o("Examples:"),par=l(),f(R6.$$.fragment),XBe=l(),uc=a("h2"),ST=a("a"),Kge=a("span"),f(S6.$$.fragment),_ar=l(),Zge=a("span"),uar=o("TFAutoModelForSeq2SeqLM"),VBe=l(),Tr=a("div"),f(P6.$$.fragment),bar=l(),bc=a("p"),Tar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ehe=a("code"),Far=o("from_pretrained()"),Car=o("class method or the "),ohe=a("code"),Mar=o("from_config()"),Ear=o(`class
method.`),yar=l(),$6=a("p"),war=o("This class cannot be instantiated directly using "),rhe=a("code"),Aar=o("__init__()"),Lar=o(" (throws an error)."),Bar=l(),gt=a("div"),f(I6.$$.fragment),xar=l(),the=a("p"),kar=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Rar=l(),vc=a("p"),Sar=o(`Note:
Loading a model from its configuration file does `),ahe=a("strong"),Par=o("not"),$ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nhe=a("code"),Iar=o("from_pretrained()"),Dar=o("to load the model weights."),jar=l(),she=a("p"),Nar=o("Examples:"),qar=l(),f(D6.$$.fragment),Gar=l(),bo=a("div"),f(j6.$$.fragment),Oar=l(),lhe=a("p"),Xar=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Var=l(),pn=a("p"),zar=o("The model class to instantiate is selected based on the "),ihe=a("code"),War=o("model_type"),Qar=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),Har=o("pretrained_model_name_or_path"),Uar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),Jar=o("pretrained_model_name_or_path"),Yar=o(":"),Kar=l(),pe=a("ul"),PT=a("li"),fhe=a("strong"),Zar=o("bart"),enr=o(" \u2014 "),dG=a("a"),onr=o("TFBartForConditionalGeneration"),rnr=o(" (BART model)"),tnr=l(),$T=a("li"),mhe=a("strong"),anr=o("blenderbot"),nnr=o(" \u2014 "),cG=a("a"),snr=o("TFBlenderbotForConditionalGeneration"),lnr=o(" (Blenderbot model)"),inr=l(),IT=a("li"),ghe=a("strong"),dnr=o("blenderbot-small"),cnr=o(" \u2014 "),fG=a("a"),fnr=o("TFBlenderbotSmallForConditionalGeneration"),mnr=o(" (BlenderbotSmall model)"),gnr=l(),DT=a("li"),hhe=a("strong"),hnr=o("encoder-decoder"),pnr=o(" \u2014 "),mG=a("a"),_nr=o("TFEncoderDecoderModel"),unr=o(" (Encoder decoder model)"),bnr=l(),jT=a("li"),phe=a("strong"),vnr=o("led"),Tnr=o(" \u2014 "),gG=a("a"),Fnr=o("TFLEDForConditionalGeneration"),Cnr=o(" (LED model)"),Mnr=l(),NT=a("li"),_he=a("strong"),Enr=o("marian"),ynr=o(" \u2014 "),hG=a("a"),wnr=o("TFMarianMTModel"),Anr=o(" (Marian model)"),Lnr=l(),qT=a("li"),uhe=a("strong"),Bnr=o("mbart"),xnr=o(" \u2014 "),pG=a("a"),knr=o("TFMBartForConditionalGeneration"),Rnr=o(" (mBART model)"),Snr=l(),GT=a("li"),bhe=a("strong"),Pnr=o("mt5"),$nr=o(" \u2014 "),_G=a("a"),Inr=o("TFMT5ForConditionalGeneration"),Dnr=o(" (mT5 model)"),jnr=l(),OT=a("li"),vhe=a("strong"),Nnr=o("pegasus"),qnr=o(" \u2014 "),uG=a("a"),Gnr=o("TFPegasusForConditionalGeneration"),Onr=o(" (Pegasus model)"),Xnr=l(),XT=a("li"),The=a("strong"),Vnr=o("t5"),znr=o(" \u2014 "),bG=a("a"),Wnr=o("TFT5ForConditionalGeneration"),Qnr=o(" (T5 model)"),Hnr=l(),Fhe=a("p"),Unr=o("Examples:"),Jnr=l(),f(N6.$$.fragment),zBe=l(),Tc=a("h2"),VT=a("a"),Che=a("span"),f(q6.$$.fragment),Ynr=l(),Mhe=a("span"),Knr=o("TFAutoModelForSequenceClassification"),WBe=l(),Fr=a("div"),f(G6.$$.fragment),Znr=l(),Fc=a("p"),esr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ehe=a("code"),osr=o("from_pretrained()"),rsr=o("class method or the "),yhe=a("code"),tsr=o("from_config()"),asr=o(`class
method.`),nsr=l(),O6=a("p"),ssr=o("This class cannot be instantiated directly using "),whe=a("code"),lsr=o("__init__()"),isr=o(" (throws an error)."),dsr=l(),ht=a("div"),f(X6.$$.fragment),csr=l(),Ahe=a("p"),fsr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),msr=l(),Cc=a("p"),gsr=o(`Note:
Loading a model from its configuration file does `),Lhe=a("strong"),hsr=o("not"),psr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bhe=a("code"),_sr=o("from_pretrained()"),usr=o("to load the model weights."),bsr=l(),xhe=a("p"),vsr=o("Examples:"),Tsr=l(),f(V6.$$.fragment),Fsr=l(),vo=a("div"),f(z6.$$.fragment),Csr=l(),khe=a("p"),Msr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Esr=l(),_n=a("p"),ysr=o("The model class to instantiate is selected based on the "),Rhe=a("code"),wsr=o("model_type"),Asr=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),Lsr=o("pretrained_model_name_or_path"),Bsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=a("code"),xsr=o("pretrained_model_name_or_path"),ksr=o(":"),Rsr=l(),X=a("ul"),zT=a("li"),$he=a("strong"),Ssr=o("albert"),Psr=o(" \u2014 "),vG=a("a"),$sr=o("TFAlbertForSequenceClassification"),Isr=o(" (ALBERT model)"),Dsr=l(),WT=a("li"),Ihe=a("strong"),jsr=o("bert"),Nsr=o(" \u2014 "),TG=a("a"),qsr=o("TFBertForSequenceClassification"),Gsr=o(" (BERT model)"),Osr=l(),QT=a("li"),Dhe=a("strong"),Xsr=o("camembert"),Vsr=o(" \u2014 "),FG=a("a"),zsr=o("TFCamembertForSequenceClassification"),Wsr=o(" (CamemBERT model)"),Qsr=l(),HT=a("li"),jhe=a("strong"),Hsr=o("convbert"),Usr=o(" \u2014 "),CG=a("a"),Jsr=o("TFConvBertForSequenceClassification"),Ysr=o(" (ConvBERT model)"),Ksr=l(),UT=a("li"),Nhe=a("strong"),Zsr=o("ctrl"),elr=o(" \u2014 "),MG=a("a"),olr=o("TFCTRLForSequenceClassification"),rlr=o(" (CTRL model)"),tlr=l(),JT=a("li"),qhe=a("strong"),alr=o("deberta"),nlr=o(" \u2014 "),EG=a("a"),slr=o("TFDebertaForSequenceClassification"),llr=o(" (DeBERTa model)"),ilr=l(),YT=a("li"),Ghe=a("strong"),dlr=o("deberta-v2"),clr=o(" \u2014 "),yG=a("a"),flr=o("TFDebertaV2ForSequenceClassification"),mlr=o(" (DeBERTa-v2 model)"),glr=l(),KT=a("li"),Ohe=a("strong"),hlr=o("distilbert"),plr=o(" \u2014 "),wG=a("a"),_lr=o("TFDistilBertForSequenceClassification"),ulr=o(" (DistilBERT model)"),blr=l(),ZT=a("li"),Xhe=a("strong"),vlr=o("electra"),Tlr=o(" \u2014 "),AG=a("a"),Flr=o("TFElectraForSequenceClassification"),Clr=o(" (ELECTRA model)"),Mlr=l(),eF=a("li"),Vhe=a("strong"),Elr=o("flaubert"),ylr=o(" \u2014 "),LG=a("a"),wlr=o("TFFlaubertForSequenceClassification"),Alr=o(" (FlauBERT model)"),Llr=l(),oF=a("li"),zhe=a("strong"),Blr=o("funnel"),xlr=o(" \u2014 "),BG=a("a"),klr=o("TFFunnelForSequenceClassification"),Rlr=o(" (Funnel Transformer model)"),Slr=l(),rF=a("li"),Whe=a("strong"),Plr=o("gpt2"),$lr=o(" \u2014 "),xG=a("a"),Ilr=o("TFGPT2ForSequenceClassification"),Dlr=o(" (OpenAI GPT-2 model)"),jlr=l(),tF=a("li"),Qhe=a("strong"),Nlr=o("layoutlm"),qlr=o(" \u2014 "),kG=a("a"),Glr=o("TFLayoutLMForSequenceClassification"),Olr=o(" (LayoutLM model)"),Xlr=l(),aF=a("li"),Hhe=a("strong"),Vlr=o("longformer"),zlr=o(" \u2014 "),RG=a("a"),Wlr=o("TFLongformerForSequenceClassification"),Qlr=o(" (Longformer model)"),Hlr=l(),nF=a("li"),Uhe=a("strong"),Ulr=o("mobilebert"),Jlr=o(" \u2014 "),SG=a("a"),Ylr=o("TFMobileBertForSequenceClassification"),Klr=o(" (MobileBERT model)"),Zlr=l(),sF=a("li"),Jhe=a("strong"),eir=o("mpnet"),oir=o(" \u2014 "),PG=a("a"),rir=o("TFMPNetForSequenceClassification"),tir=o(" (MPNet model)"),air=l(),lF=a("li"),Yhe=a("strong"),nir=o("openai-gpt"),sir=o(" \u2014 "),$G=a("a"),lir=o("TFOpenAIGPTForSequenceClassification"),iir=o(" (OpenAI GPT model)"),dir=l(),iF=a("li"),Khe=a("strong"),cir=o("rembert"),fir=o(" \u2014 "),IG=a("a"),mir=o("TFRemBertForSequenceClassification"),gir=o(" (RemBERT model)"),hir=l(),dF=a("li"),Zhe=a("strong"),pir=o("roberta"),_ir=o(" \u2014 "),DG=a("a"),uir=o("TFRobertaForSequenceClassification"),bir=o(" (RoBERTa model)"),vir=l(),cF=a("li"),epe=a("strong"),Tir=o("roformer"),Fir=o(" \u2014 "),jG=a("a"),Cir=o("TFRoFormerForSequenceClassification"),Mir=o(" (RoFormer model)"),Eir=l(),fF=a("li"),ope=a("strong"),yir=o("tapas"),wir=o(" \u2014 "),NG=a("a"),Air=o("TFTapasForSequenceClassification"),Lir=o(" (TAPAS model)"),Bir=l(),mF=a("li"),rpe=a("strong"),xir=o("transfo-xl"),kir=o(" \u2014 "),qG=a("a"),Rir=o("TFTransfoXLForSequenceClassification"),Sir=o(" (Transformer-XL model)"),Pir=l(),gF=a("li"),tpe=a("strong"),$ir=o("xlm"),Iir=o(" \u2014 "),GG=a("a"),Dir=o("TFXLMForSequenceClassification"),jir=o(" (XLM model)"),Nir=l(),hF=a("li"),ape=a("strong"),qir=o("xlm-roberta"),Gir=o(" \u2014 "),OG=a("a"),Oir=o("TFXLMRobertaForSequenceClassification"),Xir=o(" (XLM-RoBERTa model)"),Vir=l(),pF=a("li"),npe=a("strong"),zir=o("xlnet"),Wir=o(" \u2014 "),XG=a("a"),Qir=o("TFXLNetForSequenceClassification"),Hir=o(" (XLNet model)"),Uir=l(),spe=a("p"),Jir=o("Examples:"),Yir=l(),f(W6.$$.fragment),QBe=l(),Mc=a("h2"),_F=a("a"),lpe=a("span"),f(Q6.$$.fragment),Kir=l(),ipe=a("span"),Zir=o("TFAutoModelForMultipleChoice"),HBe=l(),Cr=a("div"),f(H6.$$.fragment),edr=l(),Ec=a("p"),odr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dpe=a("code"),rdr=o("from_pretrained()"),tdr=o("class method or the "),cpe=a("code"),adr=o("from_config()"),ndr=o(`class
method.`),sdr=l(),U6=a("p"),ldr=o("This class cannot be instantiated directly using "),fpe=a("code"),idr=o("__init__()"),ddr=o(" (throws an error)."),cdr=l(),pt=a("div"),f(J6.$$.fragment),fdr=l(),mpe=a("p"),mdr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gdr=l(),yc=a("p"),hdr=o(`Note:
Loading a model from its configuration file does `),gpe=a("strong"),pdr=o("not"),_dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hpe=a("code"),udr=o("from_pretrained()"),bdr=o("to load the model weights."),vdr=l(),ppe=a("p"),Tdr=o("Examples:"),Fdr=l(),f(Y6.$$.fragment),Cdr=l(),To=a("div"),f(K6.$$.fragment),Mdr=l(),_pe=a("p"),Edr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ydr=l(),un=a("p"),wdr=o("The model class to instantiate is selected based on the "),upe=a("code"),Adr=o("model_type"),Ldr=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),Bdr=o("pretrained_model_name_or_path"),xdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),kdr=o("pretrained_model_name_or_path"),Rdr=o(":"),Sdr=l(),te=a("ul"),uF=a("li"),Tpe=a("strong"),Pdr=o("albert"),$dr=o(" \u2014 "),VG=a("a"),Idr=o("TFAlbertForMultipleChoice"),Ddr=o(" (ALBERT model)"),jdr=l(),bF=a("li"),Fpe=a("strong"),Ndr=o("bert"),qdr=o(" \u2014 "),zG=a("a"),Gdr=o("TFBertForMultipleChoice"),Odr=o(" (BERT model)"),Xdr=l(),vF=a("li"),Cpe=a("strong"),Vdr=o("camembert"),zdr=o(" \u2014 "),WG=a("a"),Wdr=o("TFCamembertForMultipleChoice"),Qdr=o(" (CamemBERT model)"),Hdr=l(),TF=a("li"),Mpe=a("strong"),Udr=o("convbert"),Jdr=o(" \u2014 "),QG=a("a"),Ydr=o("TFConvBertForMultipleChoice"),Kdr=o(" (ConvBERT model)"),Zdr=l(),FF=a("li"),Epe=a("strong"),ecr=o("distilbert"),ocr=o(" \u2014 "),HG=a("a"),rcr=o("TFDistilBertForMultipleChoice"),tcr=o(" (DistilBERT model)"),acr=l(),CF=a("li"),ype=a("strong"),ncr=o("electra"),scr=o(" \u2014 "),UG=a("a"),lcr=o("TFElectraForMultipleChoice"),icr=o(" (ELECTRA model)"),dcr=l(),MF=a("li"),wpe=a("strong"),ccr=o("flaubert"),fcr=o(" \u2014 "),JG=a("a"),mcr=o("TFFlaubertForMultipleChoice"),gcr=o(" (FlauBERT model)"),hcr=l(),EF=a("li"),Ape=a("strong"),pcr=o("funnel"),_cr=o(" \u2014 "),YG=a("a"),ucr=o("TFFunnelForMultipleChoice"),bcr=o(" (Funnel Transformer model)"),vcr=l(),yF=a("li"),Lpe=a("strong"),Tcr=o("longformer"),Fcr=o(" \u2014 "),KG=a("a"),Ccr=o("TFLongformerForMultipleChoice"),Mcr=o(" (Longformer model)"),Ecr=l(),wF=a("li"),Bpe=a("strong"),ycr=o("mobilebert"),wcr=o(" \u2014 "),ZG=a("a"),Acr=o("TFMobileBertForMultipleChoice"),Lcr=o(" (MobileBERT model)"),Bcr=l(),AF=a("li"),xpe=a("strong"),xcr=o("mpnet"),kcr=o(" \u2014 "),eO=a("a"),Rcr=o("TFMPNetForMultipleChoice"),Scr=o(" (MPNet model)"),Pcr=l(),LF=a("li"),kpe=a("strong"),$cr=o("rembert"),Icr=o(" \u2014 "),oO=a("a"),Dcr=o("TFRemBertForMultipleChoice"),jcr=o(" (RemBERT model)"),Ncr=l(),BF=a("li"),Rpe=a("strong"),qcr=o("roberta"),Gcr=o(" \u2014 "),rO=a("a"),Ocr=o("TFRobertaForMultipleChoice"),Xcr=o(" (RoBERTa model)"),Vcr=l(),xF=a("li"),Spe=a("strong"),zcr=o("roformer"),Wcr=o(" \u2014 "),tO=a("a"),Qcr=o("TFRoFormerForMultipleChoice"),Hcr=o(" (RoFormer model)"),Ucr=l(),kF=a("li"),Ppe=a("strong"),Jcr=o("xlm"),Ycr=o(" \u2014 "),aO=a("a"),Kcr=o("TFXLMForMultipleChoice"),Zcr=o(" (XLM model)"),efr=l(),RF=a("li"),$pe=a("strong"),ofr=o("xlm-roberta"),rfr=o(" \u2014 "),nO=a("a"),tfr=o("TFXLMRobertaForMultipleChoice"),afr=o(" (XLM-RoBERTa model)"),nfr=l(),SF=a("li"),Ipe=a("strong"),sfr=o("xlnet"),lfr=o(" \u2014 "),sO=a("a"),ifr=o("TFXLNetForMultipleChoice"),dfr=o(" (XLNet model)"),cfr=l(),Dpe=a("p"),ffr=o("Examples:"),mfr=l(),f(Z6.$$.fragment),UBe=l(),wc=a("h2"),PF=a("a"),jpe=a("span"),f(eA.$$.fragment),gfr=l(),Npe=a("span"),hfr=o("TFAutoModelForTableQuestionAnswering"),JBe=l(),Mr=a("div"),f(oA.$$.fragment),pfr=l(),Ac=a("p"),_fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qpe=a("code"),ufr=o("from_pretrained()"),bfr=o("class method or the "),Gpe=a("code"),vfr=o("from_config()"),Tfr=o(`class
method.`),Ffr=l(),rA=a("p"),Cfr=o("This class cannot be instantiated directly using "),Ope=a("code"),Mfr=o("__init__()"),Efr=o(" (throws an error)."),yfr=l(),_t=a("div"),f(tA.$$.fragment),wfr=l(),Xpe=a("p"),Afr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lfr=l(),Lc=a("p"),Bfr=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),xfr=o("not"),kfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zpe=a("code"),Rfr=o("from_pretrained()"),Sfr=o("to load the model weights."),Pfr=l(),Wpe=a("p"),$fr=o("Examples:"),Ifr=l(),f(aA.$$.fragment),Dfr=l(),Fo=a("div"),f(nA.$$.fragment),jfr=l(),Qpe=a("p"),Nfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qfr=l(),bn=a("p"),Gfr=o("The model class to instantiate is selected based on the "),Hpe=a("code"),Ofr=o("model_type"),Xfr=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),Vfr=o("pretrained_model_name_or_path"),zfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),Wfr=o("pretrained_model_name_or_path"),Qfr=o(":"),Hfr=l(),Ype=a("ul"),$F=a("li"),Kpe=a("strong"),Ufr=o("tapas"),Jfr=o(" \u2014 "),lO=a("a"),Yfr=o("TFTapasForQuestionAnswering"),Kfr=o(" (TAPAS model)"),Zfr=l(),Zpe=a("p"),emr=o("Examples:"),omr=l(),f(sA.$$.fragment),YBe=l(),Bc=a("h2"),IF=a("a"),e_e=a("span"),f(lA.$$.fragment),rmr=l(),o_e=a("span"),tmr=o("TFAutoModelForTokenClassification"),KBe=l(),Er=a("div"),f(iA.$$.fragment),amr=l(),xc=a("p"),nmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),r_e=a("code"),smr=o("from_pretrained()"),lmr=o("class method or the "),t_e=a("code"),imr=o("from_config()"),dmr=o(`class
method.`),cmr=l(),dA=a("p"),fmr=o("This class cannot be instantiated directly using "),a_e=a("code"),mmr=o("__init__()"),gmr=o(" (throws an error)."),hmr=l(),ut=a("div"),f(cA.$$.fragment),pmr=l(),n_e=a("p"),_mr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),umr=l(),kc=a("p"),bmr=o(`Note:
Loading a model from its configuration file does `),s_e=a("strong"),vmr=o("not"),Tmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),l_e=a("code"),Fmr=o("from_pretrained()"),Cmr=o("to load the model weights."),Mmr=l(),i_e=a("p"),Emr=o("Examples:"),ymr=l(),f(fA.$$.fragment),wmr=l(),Co=a("div"),f(mA.$$.fragment),Amr=l(),d_e=a("p"),Lmr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Bmr=l(),vn=a("p"),xmr=o("The model class to instantiate is selected based on the "),c_e=a("code"),kmr=o("model_type"),Rmr=o(` property of the config object (either
passed as an argument or loaded from `),f_e=a("code"),Smr=o("pretrained_model_name_or_path"),Pmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=a("code"),$mr=o("pretrained_model_name_or_path"),Imr=o(":"),Dmr=l(),K=a("ul"),DF=a("li"),g_e=a("strong"),jmr=o("albert"),Nmr=o(" \u2014 "),iO=a("a"),qmr=o("TFAlbertForTokenClassification"),Gmr=o(" (ALBERT model)"),Omr=l(),jF=a("li"),h_e=a("strong"),Xmr=o("bert"),Vmr=o(" \u2014 "),dO=a("a"),zmr=o("TFBertForTokenClassification"),Wmr=o(" (BERT model)"),Qmr=l(),NF=a("li"),p_e=a("strong"),Hmr=o("camembert"),Umr=o(" \u2014 "),cO=a("a"),Jmr=o("TFCamembertForTokenClassification"),Ymr=o(" (CamemBERT model)"),Kmr=l(),qF=a("li"),__e=a("strong"),Zmr=o("convbert"),egr=o(" \u2014 "),fO=a("a"),ogr=o("TFConvBertForTokenClassification"),rgr=o(" (ConvBERT model)"),tgr=l(),GF=a("li"),u_e=a("strong"),agr=o("deberta"),ngr=o(" \u2014 "),mO=a("a"),sgr=o("TFDebertaForTokenClassification"),lgr=o(" (DeBERTa model)"),igr=l(),OF=a("li"),b_e=a("strong"),dgr=o("deberta-v2"),cgr=o(" \u2014 "),gO=a("a"),fgr=o("TFDebertaV2ForTokenClassification"),mgr=o(" (DeBERTa-v2 model)"),ggr=l(),XF=a("li"),v_e=a("strong"),hgr=o("distilbert"),pgr=o(" \u2014 "),hO=a("a"),_gr=o("TFDistilBertForTokenClassification"),ugr=o(" (DistilBERT model)"),bgr=l(),VF=a("li"),T_e=a("strong"),vgr=o("electra"),Tgr=o(" \u2014 "),pO=a("a"),Fgr=o("TFElectraForTokenClassification"),Cgr=o(" (ELECTRA model)"),Mgr=l(),zF=a("li"),F_e=a("strong"),Egr=o("flaubert"),ygr=o(" \u2014 "),_O=a("a"),wgr=o("TFFlaubertForTokenClassification"),Agr=o(" (FlauBERT model)"),Lgr=l(),WF=a("li"),C_e=a("strong"),Bgr=o("funnel"),xgr=o(" \u2014 "),uO=a("a"),kgr=o("TFFunnelForTokenClassification"),Rgr=o(" (Funnel Transformer model)"),Sgr=l(),QF=a("li"),M_e=a("strong"),Pgr=o("layoutlm"),$gr=o(" \u2014 "),bO=a("a"),Igr=o("TFLayoutLMForTokenClassification"),Dgr=o(" (LayoutLM model)"),jgr=l(),HF=a("li"),E_e=a("strong"),Ngr=o("longformer"),qgr=o(" \u2014 "),vO=a("a"),Ggr=o("TFLongformerForTokenClassification"),Ogr=o(" (Longformer model)"),Xgr=l(),UF=a("li"),y_e=a("strong"),Vgr=o("mobilebert"),zgr=o(" \u2014 "),TO=a("a"),Wgr=o("TFMobileBertForTokenClassification"),Qgr=o(" (MobileBERT model)"),Hgr=l(),JF=a("li"),w_e=a("strong"),Ugr=o("mpnet"),Jgr=o(" \u2014 "),FO=a("a"),Ygr=o("TFMPNetForTokenClassification"),Kgr=o(" (MPNet model)"),Zgr=l(),YF=a("li"),A_e=a("strong"),ehr=o("rembert"),ohr=o(" \u2014 "),CO=a("a"),rhr=o("TFRemBertForTokenClassification"),thr=o(" (RemBERT model)"),ahr=l(),KF=a("li"),L_e=a("strong"),nhr=o("roberta"),shr=o(" \u2014 "),MO=a("a"),lhr=o("TFRobertaForTokenClassification"),ihr=o(" (RoBERTa model)"),dhr=l(),ZF=a("li"),B_e=a("strong"),chr=o("roformer"),fhr=o(" \u2014 "),EO=a("a"),mhr=o("TFRoFormerForTokenClassification"),ghr=o(" (RoFormer model)"),hhr=l(),e9=a("li"),x_e=a("strong"),phr=o("xlm"),_hr=o(" \u2014 "),yO=a("a"),uhr=o("TFXLMForTokenClassification"),bhr=o(" (XLM model)"),vhr=l(),o9=a("li"),k_e=a("strong"),Thr=o("xlm-roberta"),Fhr=o(" \u2014 "),wO=a("a"),Chr=o("TFXLMRobertaForTokenClassification"),Mhr=o(" (XLM-RoBERTa model)"),Ehr=l(),r9=a("li"),R_e=a("strong"),yhr=o("xlnet"),whr=o(" \u2014 "),AO=a("a"),Ahr=o("TFXLNetForTokenClassification"),Lhr=o(" (XLNet model)"),Bhr=l(),S_e=a("p"),xhr=o("Examples:"),khr=l(),f(gA.$$.fragment),ZBe=l(),Rc=a("h2"),t9=a("a"),P_e=a("span"),f(hA.$$.fragment),Rhr=l(),$_e=a("span"),Shr=o("TFAutoModelForQuestionAnswering"),exe=l(),yr=a("div"),f(pA.$$.fragment),Phr=l(),Sc=a("p"),$hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),I_e=a("code"),Ihr=o("from_pretrained()"),Dhr=o("class method or the "),D_e=a("code"),jhr=o("from_config()"),Nhr=o(`class
method.`),qhr=l(),_A=a("p"),Ghr=o("This class cannot be instantiated directly using "),j_e=a("code"),Ohr=o("__init__()"),Xhr=o(" (throws an error)."),Vhr=l(),bt=a("div"),f(uA.$$.fragment),zhr=l(),N_e=a("p"),Whr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qhr=l(),Pc=a("p"),Hhr=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),Uhr=o("not"),Jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),G_e=a("code"),Yhr=o("from_pretrained()"),Khr=o("to load the model weights."),Zhr=l(),O_e=a("p"),epr=o("Examples:"),opr=l(),f(bA.$$.fragment),rpr=l(),Mo=a("div"),f(vA.$$.fragment),tpr=l(),X_e=a("p"),apr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),npr=l(),Tn=a("p"),spr=o("The model class to instantiate is selected based on the "),V_e=a("code"),lpr=o("model_type"),ipr=o(` property of the config object (either
passed as an argument or loaded from `),z_e=a("code"),dpr=o("pretrained_model_name_or_path"),cpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),fpr=o("pretrained_model_name_or_path"),mpr=o(":"),gpr=l(),Z=a("ul"),a9=a("li"),Q_e=a("strong"),hpr=o("albert"),ppr=o(" \u2014 "),LO=a("a"),_pr=o("TFAlbertForQuestionAnswering"),upr=o(" (ALBERT model)"),bpr=l(),n9=a("li"),H_e=a("strong"),vpr=o("bert"),Tpr=o(" \u2014 "),BO=a("a"),Fpr=o("TFBertForQuestionAnswering"),Cpr=o(" (BERT model)"),Mpr=l(),s9=a("li"),U_e=a("strong"),Epr=o("camembert"),ypr=o(" \u2014 "),xO=a("a"),wpr=o("TFCamembertForQuestionAnswering"),Apr=o(" (CamemBERT model)"),Lpr=l(),l9=a("li"),J_e=a("strong"),Bpr=o("convbert"),xpr=o(" \u2014 "),kO=a("a"),kpr=o("TFConvBertForQuestionAnswering"),Rpr=o(" (ConvBERT model)"),Spr=l(),i9=a("li"),Y_e=a("strong"),Ppr=o("deberta"),$pr=o(" \u2014 "),RO=a("a"),Ipr=o("TFDebertaForQuestionAnswering"),Dpr=o(" (DeBERTa model)"),jpr=l(),d9=a("li"),K_e=a("strong"),Npr=o("deberta-v2"),qpr=o(" \u2014 "),SO=a("a"),Gpr=o("TFDebertaV2ForQuestionAnswering"),Opr=o(" (DeBERTa-v2 model)"),Xpr=l(),c9=a("li"),Z_e=a("strong"),Vpr=o("distilbert"),zpr=o(" \u2014 "),PO=a("a"),Wpr=o("TFDistilBertForQuestionAnswering"),Qpr=o(" (DistilBERT model)"),Hpr=l(),f9=a("li"),eue=a("strong"),Upr=o("electra"),Jpr=o(" \u2014 "),$O=a("a"),Ypr=o("TFElectraForQuestionAnswering"),Kpr=o(" (ELECTRA model)"),Zpr=l(),m9=a("li"),oue=a("strong"),e_r=o("flaubert"),o_r=o(" \u2014 "),IO=a("a"),r_r=o("TFFlaubertForQuestionAnsweringSimple"),t_r=o(" (FlauBERT model)"),a_r=l(),g9=a("li"),rue=a("strong"),n_r=o("funnel"),s_r=o(" \u2014 "),DO=a("a"),l_r=o("TFFunnelForQuestionAnswering"),i_r=o(" (Funnel Transformer model)"),d_r=l(),h9=a("li"),tue=a("strong"),c_r=o("longformer"),f_r=o(" \u2014 "),jO=a("a"),m_r=o("TFLongformerForQuestionAnswering"),g_r=o(" (Longformer model)"),h_r=l(),p9=a("li"),aue=a("strong"),p_r=o("mobilebert"),__r=o(" \u2014 "),NO=a("a"),u_r=o("TFMobileBertForQuestionAnswering"),b_r=o(" (MobileBERT model)"),v_r=l(),_9=a("li"),nue=a("strong"),T_r=o("mpnet"),F_r=o(" \u2014 "),qO=a("a"),C_r=o("TFMPNetForQuestionAnswering"),M_r=o(" (MPNet model)"),E_r=l(),u9=a("li"),sue=a("strong"),y_r=o("rembert"),w_r=o(" \u2014 "),GO=a("a"),A_r=o("TFRemBertForQuestionAnswering"),L_r=o(" (RemBERT model)"),B_r=l(),b9=a("li"),lue=a("strong"),x_r=o("roberta"),k_r=o(" \u2014 "),OO=a("a"),R_r=o("TFRobertaForQuestionAnswering"),S_r=o(" (RoBERTa model)"),P_r=l(),v9=a("li"),iue=a("strong"),$_r=o("roformer"),I_r=o(" \u2014 "),XO=a("a"),D_r=o("TFRoFormerForQuestionAnswering"),j_r=o(" (RoFormer model)"),N_r=l(),T9=a("li"),due=a("strong"),q_r=o("xlm"),G_r=o(" \u2014 "),VO=a("a"),O_r=o("TFXLMForQuestionAnsweringSimple"),X_r=o(" (XLM model)"),V_r=l(),F9=a("li"),cue=a("strong"),z_r=o("xlm-roberta"),W_r=o(" \u2014 "),zO=a("a"),Q_r=o("TFXLMRobertaForQuestionAnswering"),H_r=o(" (XLM-RoBERTa model)"),U_r=l(),C9=a("li"),fue=a("strong"),J_r=o("xlnet"),Y_r=o(" \u2014 "),WO=a("a"),K_r=o("TFXLNetForQuestionAnsweringSimple"),Z_r=o(" (XLNet model)"),eur=l(),mue=a("p"),our=o("Examples:"),rur=l(),f(TA.$$.fragment),oxe=l(),$c=a("h2"),M9=a("a"),gue=a("span"),f(FA.$$.fragment),tur=l(),hue=a("span"),aur=o("TFAutoModelForVision2Seq"),rxe=l(),wr=a("div"),f(CA.$$.fragment),nur=l(),Ic=a("p"),sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pue=a("code"),lur=o("from_pretrained()"),iur=o("class method or the "),_ue=a("code"),dur=o("from_config()"),cur=o(`class
method.`),fur=l(),MA=a("p"),mur=o("This class cannot be instantiated directly using "),uue=a("code"),gur=o("__init__()"),hur=o(" (throws an error)."),pur=l(),vt=a("div"),f(EA.$$.fragment),_ur=l(),bue=a("p"),uur=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bur=l(),Dc=a("p"),vur=o(`Note:
Loading a model from its configuration file does `),vue=a("strong"),Tur=o("not"),Fur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tue=a("code"),Cur=o("from_pretrained()"),Mur=o("to load the model weights."),Eur=l(),Fue=a("p"),yur=o("Examples:"),wur=l(),f(yA.$$.fragment),Aur=l(),Eo=a("div"),f(wA.$$.fragment),Lur=l(),Cue=a("p"),Bur=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xur=l(),Fn=a("p"),kur=o("The model class to instantiate is selected based on the "),Mue=a("code"),Rur=o("model_type"),Sur=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),Pur=o("pretrained_model_name_or_path"),$ur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=a("code"),Iur=o("pretrained_model_name_or_path"),Dur=o(":"),jur=l(),wue=a("ul"),E9=a("li"),Aue=a("strong"),Nur=o("vision-encoder-decoder"),qur=o(" \u2014 "),QO=a("a"),Gur=o("TFVisionEncoderDecoderModel"),Our=o(" (Vision Encoder decoder model)"),Xur=l(),Lue=a("p"),Vur=o("Examples:"),zur=l(),f(AA.$$.fragment),txe=l(),jc=a("h2"),y9=a("a"),Bue=a("span"),f(LA.$$.fragment),Wur=l(),xue=a("span"),Qur=o("TFAutoModelForSpeechSeq2Seq"),axe=l(),Ar=a("div"),f(BA.$$.fragment),Hur=l(),Nc=a("p"),Uur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kue=a("code"),Jur=o("from_pretrained()"),Yur=o("class method or the "),Rue=a("code"),Kur=o("from_config()"),Zur=o(`class
method.`),e1r=l(),xA=a("p"),o1r=o("This class cannot be instantiated directly using "),Sue=a("code"),r1r=o("__init__()"),t1r=o(" (throws an error)."),a1r=l(),Tt=a("div"),f(kA.$$.fragment),n1r=l(),Pue=a("p"),s1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),l1r=l(),qc=a("p"),i1r=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),d1r=o("not"),c1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iue=a("code"),f1r=o("from_pretrained()"),m1r=o("to load the model weights."),g1r=l(),Due=a("p"),h1r=o("Examples:"),p1r=l(),f(RA.$$.fragment),_1r=l(),yo=a("div"),f(SA.$$.fragment),u1r=l(),jue=a("p"),b1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),v1r=l(),Cn=a("p"),T1r=o("The model class to instantiate is selected based on the "),Nue=a("code"),F1r=o("model_type"),C1r=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),M1r=o("pretrained_model_name_or_path"),E1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),y1r=o("pretrained_model_name_or_path"),w1r=o(":"),A1r=l(),Oue=a("ul"),w9=a("li"),Xue=a("strong"),L1r=o("speech_to_text"),B1r=o(" \u2014 "),HO=a("a"),x1r=o("TFSpeech2TextForConditionalGeneration"),k1r=o(" (Speech2Text model)"),R1r=l(),Vue=a("p"),S1r=o("Examples:"),P1r=l(),f(PA.$$.fragment),nxe=l(),Gc=a("h2"),A9=a("a"),zue=a("span"),f($A.$$.fragment),$1r=l(),Wue=a("span"),I1r=o("FlaxAutoModel"),sxe=l(),Lr=a("div"),f(IA.$$.fragment),D1r=l(),Oc=a("p"),j1r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Que=a("code"),N1r=o("from_pretrained()"),q1r=o("class method or the "),Hue=a("code"),G1r=o("from_config()"),O1r=o(`class
method.`),X1r=l(),DA=a("p"),V1r=o("This class cannot be instantiated directly using "),Uue=a("code"),z1r=o("__init__()"),W1r=o(" (throws an error)."),Q1r=l(),Ft=a("div"),f(jA.$$.fragment),H1r=l(),Jue=a("p"),U1r=o("Instantiates one of the base model classes of the library from a configuration."),J1r=l(),Xc=a("p"),Y1r=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),K1r=o("not"),Z1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kue=a("code"),ebr=o("from_pretrained()"),obr=o("to load the model weights."),rbr=l(),Zue=a("p"),tbr=o("Examples:"),abr=l(),f(NA.$$.fragment),nbr=l(),wo=a("div"),f(qA.$$.fragment),sbr=l(),e1e=a("p"),lbr=o("Instantiate one of the base model classes of the library from a pretrained model."),ibr=l(),Mn=a("p"),dbr=o("The model class to instantiate is selected based on the "),o1e=a("code"),cbr=o("model_type"),fbr=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),mbr=o("pretrained_model_name_or_path"),gbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),hbr=o("pretrained_model_name_or_path"),pbr=o(":"),_br=l(),z=a("ul"),L9=a("li"),a1e=a("strong"),ubr=o("albert"),bbr=o(" \u2014 "),UO=a("a"),vbr=o("FlaxAlbertModel"),Tbr=o(" (ALBERT model)"),Fbr=l(),B9=a("li"),n1e=a("strong"),Cbr=o("bart"),Mbr=o(" \u2014 "),JO=a("a"),Ebr=o("FlaxBartModel"),ybr=o(" (BART model)"),wbr=l(),x9=a("li"),s1e=a("strong"),Abr=o("beit"),Lbr=o(" \u2014 "),YO=a("a"),Bbr=o("FlaxBeitModel"),xbr=o(" (BEiT model)"),kbr=l(),k9=a("li"),l1e=a("strong"),Rbr=o("bert"),Sbr=o(" \u2014 "),KO=a("a"),Pbr=o("FlaxBertModel"),$br=o(" (BERT model)"),Ibr=l(),R9=a("li"),i1e=a("strong"),Dbr=o("big_bird"),jbr=o(" \u2014 "),ZO=a("a"),Nbr=o("FlaxBigBirdModel"),qbr=o(" (BigBird model)"),Gbr=l(),S9=a("li"),d1e=a("strong"),Obr=o("blenderbot"),Xbr=o(" \u2014 "),eX=a("a"),Vbr=o("FlaxBlenderbotModel"),zbr=o(" (Blenderbot model)"),Wbr=l(),P9=a("li"),c1e=a("strong"),Qbr=o("blenderbot-small"),Hbr=o(" \u2014 "),oX=a("a"),Ubr=o("FlaxBlenderbotSmallModel"),Jbr=o(" (BlenderbotSmall model)"),Ybr=l(),$9=a("li"),f1e=a("strong"),Kbr=o("clip"),Zbr=o(" \u2014 "),rX=a("a"),e3r=o("FlaxCLIPModel"),o3r=o(" (CLIP model)"),r3r=l(),I9=a("li"),m1e=a("strong"),t3r=o("distilbert"),a3r=o(" \u2014 "),tX=a("a"),n3r=o("FlaxDistilBertModel"),s3r=o(" (DistilBERT model)"),l3r=l(),D9=a("li"),g1e=a("strong"),i3r=o("electra"),d3r=o(" \u2014 "),aX=a("a"),c3r=o("FlaxElectraModel"),f3r=o(" (ELECTRA model)"),m3r=l(),j9=a("li"),h1e=a("strong"),g3r=o("gpt2"),h3r=o(" \u2014 "),nX=a("a"),p3r=o("FlaxGPT2Model"),_3r=o(" (OpenAI GPT-2 model)"),u3r=l(),N9=a("li"),p1e=a("strong"),b3r=o("gpt_neo"),v3r=o(" \u2014 "),sX=a("a"),T3r=o("FlaxGPTNeoModel"),F3r=o(" (GPT Neo model)"),C3r=l(),q9=a("li"),_1e=a("strong"),M3r=o("gptj"),E3r=o(" \u2014 "),lX=a("a"),y3r=o("FlaxGPTJModel"),w3r=o(" (GPT-J model)"),A3r=l(),G9=a("li"),u1e=a("strong"),L3r=o("marian"),B3r=o(" \u2014 "),iX=a("a"),x3r=o("FlaxMarianModel"),k3r=o(" (Marian model)"),R3r=l(),O9=a("li"),b1e=a("strong"),S3r=o("mbart"),P3r=o(" \u2014 "),dX=a("a"),$3r=o("FlaxMBartModel"),I3r=o(" (mBART model)"),D3r=l(),X9=a("li"),v1e=a("strong"),j3r=o("mt5"),N3r=o(" \u2014 "),cX=a("a"),q3r=o("FlaxMT5Model"),G3r=o(" (mT5 model)"),O3r=l(),V9=a("li"),T1e=a("strong"),X3r=o("pegasus"),V3r=o(" \u2014 "),fX=a("a"),z3r=o("FlaxPegasusModel"),W3r=o(" (Pegasus model)"),Q3r=l(),z9=a("li"),F1e=a("strong"),H3r=o("roberta"),U3r=o(" \u2014 "),mX=a("a"),J3r=o("FlaxRobertaModel"),Y3r=o(" (RoBERTa model)"),K3r=l(),W9=a("li"),C1e=a("strong"),Z3r=o("roformer"),e5r=o(" \u2014 "),gX=a("a"),o5r=o("FlaxRoFormerModel"),r5r=o(" (RoFormer model)"),t5r=l(),Q9=a("li"),M1e=a("strong"),a5r=o("t5"),n5r=o(" \u2014 "),hX=a("a"),s5r=o("FlaxT5Model"),l5r=o(" (T5 model)"),i5r=l(),H9=a("li"),E1e=a("strong"),d5r=o("vision-text-dual-encoder"),c5r=o(" \u2014 "),pX=a("a"),f5r=o("FlaxVisionTextDualEncoderModel"),m5r=o(" (VisionTextDualEncoder model)"),g5r=l(),U9=a("li"),y1e=a("strong"),h5r=o("vit"),p5r=o(" \u2014 "),_X=a("a"),_5r=o("FlaxViTModel"),u5r=o(" (ViT model)"),b5r=l(),J9=a("li"),w1e=a("strong"),v5r=o("wav2vec2"),T5r=o(" \u2014 "),uX=a("a"),F5r=o("FlaxWav2Vec2Model"),C5r=o(" (Wav2Vec2 model)"),M5r=l(),Y9=a("li"),A1e=a("strong"),E5r=o("xglm"),y5r=o(" \u2014 "),bX=a("a"),w5r=o("FlaxXGLMModel"),A5r=o(" (XGLM model)"),L5r=l(),L1e=a("p"),B5r=o("Examples:"),x5r=l(),f(GA.$$.fragment),lxe=l(),Vc=a("h2"),K9=a("a"),B1e=a("span"),f(OA.$$.fragment),k5r=l(),x1e=a("span"),R5r=o("FlaxAutoModelForCausalLM"),ixe=l(),Br=a("div"),f(XA.$$.fragment),S5r=l(),zc=a("p"),P5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),k1e=a("code"),$5r=o("from_pretrained()"),I5r=o("class method or the "),R1e=a("code"),D5r=o("from_config()"),j5r=o(`class
method.`),N5r=l(),VA=a("p"),q5r=o("This class cannot be instantiated directly using "),S1e=a("code"),G5r=o("__init__()"),O5r=o(" (throws an error)."),X5r=l(),Ct=a("div"),f(zA.$$.fragment),V5r=l(),P1e=a("p"),z5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),W5r=l(),Wc=a("p"),Q5r=o(`Note:
Loading a model from its configuration file does `),$1e=a("strong"),H5r=o("not"),U5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),I1e=a("code"),J5r=o("from_pretrained()"),Y5r=o("to load the model weights."),K5r=l(),D1e=a("p"),Z5r=o("Examples:"),e2r=l(),f(WA.$$.fragment),o2r=l(),Ao=a("div"),f(QA.$$.fragment),r2r=l(),j1e=a("p"),t2r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),a2r=l(),En=a("p"),n2r=o("The model class to instantiate is selected based on the "),N1e=a("code"),s2r=o("model_type"),l2r=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),i2r=o("pretrained_model_name_or_path"),d2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=a("code"),c2r=o("pretrained_model_name_or_path"),f2r=o(":"),m2r=l(),yn=a("ul"),Z9=a("li"),O1e=a("strong"),g2r=o("gpt2"),h2r=o(" \u2014 "),vX=a("a"),p2r=o("FlaxGPT2LMHeadModel"),_2r=o(" (OpenAI GPT-2 model)"),u2r=l(),eC=a("li"),X1e=a("strong"),b2r=o("gpt_neo"),v2r=o(" \u2014 "),TX=a("a"),T2r=o("FlaxGPTNeoForCausalLM"),F2r=o(" (GPT Neo model)"),C2r=l(),oC=a("li"),V1e=a("strong"),M2r=o("gptj"),E2r=o(" \u2014 "),FX=a("a"),y2r=o("FlaxGPTJForCausalLM"),w2r=o(" (GPT-J model)"),A2r=l(),rC=a("li"),z1e=a("strong"),L2r=o("xglm"),B2r=o(" \u2014 "),CX=a("a"),x2r=o("FlaxXGLMForCausalLM"),k2r=o(" (XGLM model)"),R2r=l(),W1e=a("p"),S2r=o("Examples:"),P2r=l(),f(HA.$$.fragment),dxe=l(),Qc=a("h2"),tC=a("a"),Q1e=a("span"),f(UA.$$.fragment),$2r=l(),H1e=a("span"),I2r=o("FlaxAutoModelForPreTraining"),cxe=l(),xr=a("div"),f(JA.$$.fragment),D2r=l(),Hc=a("p"),j2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),U1e=a("code"),N2r=o("from_pretrained()"),q2r=o("class method or the "),J1e=a("code"),G2r=o("from_config()"),O2r=o(`class
method.`),X2r=l(),YA=a("p"),V2r=o("This class cannot be instantiated directly using "),Y1e=a("code"),z2r=o("__init__()"),W2r=o(" (throws an error)."),Q2r=l(),Mt=a("div"),f(KA.$$.fragment),H2r=l(),K1e=a("p"),U2r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),J2r=l(),Uc=a("p"),Y2r=o(`Note:
Loading a model from its configuration file does `),Z1e=a("strong"),K2r=o("not"),Z2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ebe=a("code"),evr=o("from_pretrained()"),ovr=o("to load the model weights."),rvr=l(),obe=a("p"),tvr=o("Examples:"),avr=l(),f(ZA.$$.fragment),nvr=l(),Lo=a("div"),f(e0.$$.fragment),svr=l(),rbe=a("p"),lvr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ivr=l(),wn=a("p"),dvr=o("The model class to instantiate is selected based on the "),tbe=a("code"),cvr=o("model_type"),fvr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),mvr=o("pretrained_model_name_or_path"),gvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),hvr=o("pretrained_model_name_or_path"),pvr=o(":"),_vr=l(),fe=a("ul"),aC=a("li"),sbe=a("strong"),uvr=o("albert"),bvr=o(" \u2014 "),MX=a("a"),vvr=o("FlaxAlbertForPreTraining"),Tvr=o(" (ALBERT model)"),Fvr=l(),nC=a("li"),lbe=a("strong"),Cvr=o("bart"),Mvr=o(" \u2014 "),EX=a("a"),Evr=o("FlaxBartForConditionalGeneration"),yvr=o(" (BART model)"),wvr=l(),sC=a("li"),ibe=a("strong"),Avr=o("bert"),Lvr=o(" \u2014 "),yX=a("a"),Bvr=o("FlaxBertForPreTraining"),xvr=o(" (BERT model)"),kvr=l(),lC=a("li"),dbe=a("strong"),Rvr=o("big_bird"),Svr=o(" \u2014 "),wX=a("a"),Pvr=o("FlaxBigBirdForPreTraining"),$vr=o(" (BigBird model)"),Ivr=l(),iC=a("li"),cbe=a("strong"),Dvr=o("electra"),jvr=o(" \u2014 "),AX=a("a"),Nvr=o("FlaxElectraForPreTraining"),qvr=o(" (ELECTRA model)"),Gvr=l(),dC=a("li"),fbe=a("strong"),Ovr=o("mbart"),Xvr=o(" \u2014 "),LX=a("a"),Vvr=o("FlaxMBartForConditionalGeneration"),zvr=o(" (mBART model)"),Wvr=l(),cC=a("li"),mbe=a("strong"),Qvr=o("mt5"),Hvr=o(" \u2014 "),BX=a("a"),Uvr=o("FlaxMT5ForConditionalGeneration"),Jvr=o(" (mT5 model)"),Yvr=l(),fC=a("li"),gbe=a("strong"),Kvr=o("roberta"),Zvr=o(" \u2014 "),xX=a("a"),eTr=o("FlaxRobertaForMaskedLM"),oTr=o(" (RoBERTa model)"),rTr=l(),mC=a("li"),hbe=a("strong"),tTr=o("roformer"),aTr=o(" \u2014 "),kX=a("a"),nTr=o("FlaxRoFormerForMaskedLM"),sTr=o(" (RoFormer model)"),lTr=l(),gC=a("li"),pbe=a("strong"),iTr=o("t5"),dTr=o(" \u2014 "),RX=a("a"),cTr=o("FlaxT5ForConditionalGeneration"),fTr=o(" (T5 model)"),mTr=l(),hC=a("li"),_be=a("strong"),gTr=o("wav2vec2"),hTr=o(" \u2014 "),SX=a("a"),pTr=o("FlaxWav2Vec2ForPreTraining"),_Tr=o(" (Wav2Vec2 model)"),uTr=l(),ube=a("p"),bTr=o("Examples:"),vTr=l(),f(o0.$$.fragment),fxe=l(),Jc=a("h2"),pC=a("a"),bbe=a("span"),f(r0.$$.fragment),TTr=l(),vbe=a("span"),FTr=o("FlaxAutoModelForMaskedLM"),mxe=l(),kr=a("div"),f(t0.$$.fragment),CTr=l(),Yc=a("p"),MTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Tbe=a("code"),ETr=o("from_pretrained()"),yTr=o("class method or the "),Fbe=a("code"),wTr=o("from_config()"),ATr=o(`class
method.`),LTr=l(),a0=a("p"),BTr=o("This class cannot be instantiated directly using "),Cbe=a("code"),xTr=o("__init__()"),kTr=o(" (throws an error)."),RTr=l(),Et=a("div"),f(n0.$$.fragment),STr=l(),Mbe=a("p"),PTr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$Tr=l(),Kc=a("p"),ITr=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),DTr=o("not"),jTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ybe=a("code"),NTr=o("from_pretrained()"),qTr=o("to load the model weights."),GTr=l(),wbe=a("p"),OTr=o("Examples:"),XTr=l(),f(s0.$$.fragment),VTr=l(),Bo=a("div"),f(l0.$$.fragment),zTr=l(),Abe=a("p"),WTr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QTr=l(),An=a("p"),HTr=o("The model class to instantiate is selected based on the "),Lbe=a("code"),UTr=o("model_type"),JTr=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),YTr=o("pretrained_model_name_or_path"),KTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),ZTr=o("pretrained_model_name_or_path"),eFr=o(":"),oFr=l(),ve=a("ul"),_C=a("li"),kbe=a("strong"),rFr=o("albert"),tFr=o(" \u2014 "),PX=a("a"),aFr=o("FlaxAlbertForMaskedLM"),nFr=o(" (ALBERT model)"),sFr=l(),uC=a("li"),Rbe=a("strong"),lFr=o("bart"),iFr=o(" \u2014 "),$X=a("a"),dFr=o("FlaxBartForConditionalGeneration"),cFr=o(" (BART model)"),fFr=l(),bC=a("li"),Sbe=a("strong"),mFr=o("bert"),gFr=o(" \u2014 "),IX=a("a"),hFr=o("FlaxBertForMaskedLM"),pFr=o(" (BERT model)"),_Fr=l(),vC=a("li"),Pbe=a("strong"),uFr=o("big_bird"),bFr=o(" \u2014 "),DX=a("a"),vFr=o("FlaxBigBirdForMaskedLM"),TFr=o(" (BigBird model)"),FFr=l(),TC=a("li"),$be=a("strong"),CFr=o("distilbert"),MFr=o(" \u2014 "),jX=a("a"),EFr=o("FlaxDistilBertForMaskedLM"),yFr=o(" (DistilBERT model)"),wFr=l(),FC=a("li"),Ibe=a("strong"),AFr=o("electra"),LFr=o(" \u2014 "),NX=a("a"),BFr=o("FlaxElectraForMaskedLM"),xFr=o(" (ELECTRA model)"),kFr=l(),CC=a("li"),Dbe=a("strong"),RFr=o("mbart"),SFr=o(" \u2014 "),qX=a("a"),PFr=o("FlaxMBartForConditionalGeneration"),$Fr=o(" (mBART model)"),IFr=l(),MC=a("li"),jbe=a("strong"),DFr=o("roberta"),jFr=o(" \u2014 "),GX=a("a"),NFr=o("FlaxRobertaForMaskedLM"),qFr=o(" (RoBERTa model)"),GFr=l(),EC=a("li"),Nbe=a("strong"),OFr=o("roformer"),XFr=o(" \u2014 "),OX=a("a"),VFr=o("FlaxRoFormerForMaskedLM"),zFr=o(" (RoFormer model)"),WFr=l(),qbe=a("p"),QFr=o("Examples:"),HFr=l(),f(i0.$$.fragment),gxe=l(),Zc=a("h2"),yC=a("a"),Gbe=a("span"),f(d0.$$.fragment),UFr=l(),Obe=a("span"),JFr=o("FlaxAutoModelForSeq2SeqLM"),hxe=l(),Rr=a("div"),f(c0.$$.fragment),YFr=l(),ef=a("p"),KFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Xbe=a("code"),ZFr=o("from_pretrained()"),e9r=o("class method or the "),Vbe=a("code"),o9r=o("from_config()"),r9r=o(`class
method.`),t9r=l(),f0=a("p"),a9r=o("This class cannot be instantiated directly using "),zbe=a("code"),n9r=o("__init__()"),s9r=o(" (throws an error)."),l9r=l(),yt=a("div"),f(m0.$$.fragment),i9r=l(),Wbe=a("p"),d9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),c9r=l(),of=a("p"),f9r=o(`Note:
Loading a model from its configuration file does `),Qbe=a("strong"),m9r=o("not"),g9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hbe=a("code"),h9r=o("from_pretrained()"),p9r=o("to load the model weights."),_9r=l(),Ube=a("p"),u9r=o("Examples:"),b9r=l(),f(g0.$$.fragment),v9r=l(),xo=a("div"),f(h0.$$.fragment),T9r=l(),Jbe=a("p"),F9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C9r=l(),Ln=a("p"),M9r=o("The model class to instantiate is selected based on the "),Ybe=a("code"),E9r=o("model_type"),y9r=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),w9r=o("pretrained_model_name_or_path"),A9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),L9r=o("pretrained_model_name_or_path"),B9r=o(":"),x9r=l(),Te=a("ul"),wC=a("li"),e3e=a("strong"),k9r=o("bart"),R9r=o(" \u2014 "),XX=a("a"),S9r=o("FlaxBartForConditionalGeneration"),P9r=o(" (BART model)"),$9r=l(),AC=a("li"),o3e=a("strong"),I9r=o("blenderbot"),D9r=o(" \u2014 "),VX=a("a"),j9r=o("FlaxBlenderbotForConditionalGeneration"),N9r=o(" (Blenderbot model)"),q9r=l(),LC=a("li"),r3e=a("strong"),G9r=o("blenderbot-small"),O9r=o(" \u2014 "),zX=a("a"),X9r=o("FlaxBlenderbotSmallForConditionalGeneration"),V9r=o(" (BlenderbotSmall model)"),z9r=l(),BC=a("li"),t3e=a("strong"),W9r=o("encoder-decoder"),Q9r=o(" \u2014 "),WX=a("a"),H9r=o("FlaxEncoderDecoderModel"),U9r=o(" (Encoder decoder model)"),J9r=l(),xC=a("li"),a3e=a("strong"),Y9r=o("marian"),K9r=o(" \u2014 "),QX=a("a"),Z9r=o("FlaxMarianMTModel"),eCr=o(" (Marian model)"),oCr=l(),kC=a("li"),n3e=a("strong"),rCr=o("mbart"),tCr=o(" \u2014 "),HX=a("a"),aCr=o("FlaxMBartForConditionalGeneration"),nCr=o(" (mBART model)"),sCr=l(),RC=a("li"),s3e=a("strong"),lCr=o("mt5"),iCr=o(" \u2014 "),UX=a("a"),dCr=o("FlaxMT5ForConditionalGeneration"),cCr=o(" (mT5 model)"),fCr=l(),SC=a("li"),l3e=a("strong"),mCr=o("pegasus"),gCr=o(" \u2014 "),JX=a("a"),hCr=o("FlaxPegasusForConditionalGeneration"),pCr=o(" (Pegasus model)"),_Cr=l(),PC=a("li"),i3e=a("strong"),uCr=o("t5"),bCr=o(" \u2014 "),YX=a("a"),vCr=o("FlaxT5ForConditionalGeneration"),TCr=o(" (T5 model)"),FCr=l(),d3e=a("p"),CCr=o("Examples:"),MCr=l(),f(p0.$$.fragment),pxe=l(),rf=a("h2"),$C=a("a"),c3e=a("span"),f(_0.$$.fragment),ECr=l(),f3e=a("span"),yCr=o("FlaxAutoModelForSequenceClassification"),_xe=l(),Sr=a("div"),f(u0.$$.fragment),wCr=l(),tf=a("p"),ACr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),m3e=a("code"),LCr=o("from_pretrained()"),BCr=o("class method or the "),g3e=a("code"),xCr=o("from_config()"),kCr=o(`class
method.`),RCr=l(),b0=a("p"),SCr=o("This class cannot be instantiated directly using "),h3e=a("code"),PCr=o("__init__()"),$Cr=o(" (throws an error)."),ICr=l(),wt=a("div"),f(v0.$$.fragment),DCr=l(),p3e=a("p"),jCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),NCr=l(),af=a("p"),qCr=o(`Note:
Loading a model from its configuration file does `),_3e=a("strong"),GCr=o("not"),OCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u3e=a("code"),XCr=o("from_pretrained()"),VCr=o("to load the model weights."),zCr=l(),b3e=a("p"),WCr=o("Examples:"),QCr=l(),f(T0.$$.fragment),HCr=l(),ko=a("div"),f(F0.$$.fragment),UCr=l(),v3e=a("p"),JCr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YCr=l(),Bn=a("p"),KCr=o("The model class to instantiate is selected based on the "),T3e=a("code"),ZCr=o("model_type"),e4r=o(` property of the config object (either
passed as an argument or loaded from `),F3e=a("code"),o4r=o("pretrained_model_name_or_path"),r4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=a("code"),t4r=o("pretrained_model_name_or_path"),a4r=o(":"),n4r=l(),Fe=a("ul"),IC=a("li"),M3e=a("strong"),s4r=o("albert"),l4r=o(" \u2014 "),KX=a("a"),i4r=o("FlaxAlbertForSequenceClassification"),d4r=o(" (ALBERT model)"),c4r=l(),DC=a("li"),E3e=a("strong"),f4r=o("bart"),m4r=o(" \u2014 "),ZX=a("a"),g4r=o("FlaxBartForSequenceClassification"),h4r=o(" (BART model)"),p4r=l(),jC=a("li"),y3e=a("strong"),_4r=o("bert"),u4r=o(" \u2014 "),eV=a("a"),b4r=o("FlaxBertForSequenceClassification"),v4r=o(" (BERT model)"),T4r=l(),NC=a("li"),w3e=a("strong"),F4r=o("big_bird"),C4r=o(" \u2014 "),oV=a("a"),M4r=o("FlaxBigBirdForSequenceClassification"),E4r=o(" (BigBird model)"),y4r=l(),qC=a("li"),A3e=a("strong"),w4r=o("distilbert"),A4r=o(" \u2014 "),rV=a("a"),L4r=o("FlaxDistilBertForSequenceClassification"),B4r=o(" (DistilBERT model)"),x4r=l(),GC=a("li"),L3e=a("strong"),k4r=o("electra"),R4r=o(" \u2014 "),tV=a("a"),S4r=o("FlaxElectraForSequenceClassification"),P4r=o(" (ELECTRA model)"),$4r=l(),OC=a("li"),B3e=a("strong"),I4r=o("mbart"),D4r=o(" \u2014 "),aV=a("a"),j4r=o("FlaxMBartForSequenceClassification"),N4r=o(" (mBART model)"),q4r=l(),XC=a("li"),x3e=a("strong"),G4r=o("roberta"),O4r=o(" \u2014 "),nV=a("a"),X4r=o("FlaxRobertaForSequenceClassification"),V4r=o(" (RoBERTa model)"),z4r=l(),VC=a("li"),k3e=a("strong"),W4r=o("roformer"),Q4r=o(" \u2014 "),sV=a("a"),H4r=o("FlaxRoFormerForSequenceClassification"),U4r=o(" (RoFormer model)"),J4r=l(),R3e=a("p"),Y4r=o("Examples:"),K4r=l(),f(C0.$$.fragment),uxe=l(),nf=a("h2"),zC=a("a"),S3e=a("span"),f(M0.$$.fragment),Z4r=l(),P3e=a("span"),eMr=o("FlaxAutoModelForQuestionAnswering"),bxe=l(),Pr=a("div"),f(E0.$$.fragment),oMr=l(),sf=a("p"),rMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$3e=a("code"),tMr=o("from_pretrained()"),aMr=o("class method or the "),I3e=a("code"),nMr=o("from_config()"),sMr=o(`class
method.`),lMr=l(),y0=a("p"),iMr=o("This class cannot be instantiated directly using "),D3e=a("code"),dMr=o("__init__()"),cMr=o(" (throws an error)."),fMr=l(),At=a("div"),f(w0.$$.fragment),mMr=l(),j3e=a("p"),gMr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hMr=l(),lf=a("p"),pMr=o(`Note:
Loading a model from its configuration file does `),N3e=a("strong"),_Mr=o("not"),uMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),q3e=a("code"),bMr=o("from_pretrained()"),vMr=o("to load the model weights."),TMr=l(),G3e=a("p"),FMr=o("Examples:"),CMr=l(),f(A0.$$.fragment),MMr=l(),Ro=a("div"),f(L0.$$.fragment),EMr=l(),O3e=a("p"),yMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wMr=l(),xn=a("p"),AMr=o("The model class to instantiate is selected based on the "),X3e=a("code"),LMr=o("model_type"),BMr=o(` property of the config object (either
passed as an argument or loaded from `),V3e=a("code"),xMr=o("pretrained_model_name_or_path"),kMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=a("code"),RMr=o("pretrained_model_name_or_path"),SMr=o(":"),PMr=l(),Ce=a("ul"),WC=a("li"),W3e=a("strong"),$Mr=o("albert"),IMr=o(" \u2014 "),lV=a("a"),DMr=o("FlaxAlbertForQuestionAnswering"),jMr=o(" (ALBERT model)"),NMr=l(),QC=a("li"),Q3e=a("strong"),qMr=o("bart"),GMr=o(" \u2014 "),iV=a("a"),OMr=o("FlaxBartForQuestionAnswering"),XMr=o(" (BART model)"),VMr=l(),HC=a("li"),H3e=a("strong"),zMr=o("bert"),WMr=o(" \u2014 "),dV=a("a"),QMr=o("FlaxBertForQuestionAnswering"),HMr=o(" (BERT model)"),UMr=l(),UC=a("li"),U3e=a("strong"),JMr=o("big_bird"),YMr=o(" \u2014 "),cV=a("a"),KMr=o("FlaxBigBirdForQuestionAnswering"),ZMr=o(" (BigBird model)"),eEr=l(),JC=a("li"),J3e=a("strong"),oEr=o("distilbert"),rEr=o(" \u2014 "),fV=a("a"),tEr=o("FlaxDistilBertForQuestionAnswering"),aEr=o(" (DistilBERT model)"),nEr=l(),YC=a("li"),Y3e=a("strong"),sEr=o("electra"),lEr=o(" \u2014 "),mV=a("a"),iEr=o("FlaxElectraForQuestionAnswering"),dEr=o(" (ELECTRA model)"),cEr=l(),KC=a("li"),K3e=a("strong"),fEr=o("mbart"),mEr=o(" \u2014 "),gV=a("a"),gEr=o("FlaxMBartForQuestionAnswering"),hEr=o(" (mBART model)"),pEr=l(),ZC=a("li"),Z3e=a("strong"),_Er=o("roberta"),uEr=o(" \u2014 "),hV=a("a"),bEr=o("FlaxRobertaForQuestionAnswering"),vEr=o(" (RoBERTa model)"),TEr=l(),e4=a("li"),e5e=a("strong"),FEr=o("roformer"),CEr=o(" \u2014 "),pV=a("a"),MEr=o("FlaxRoFormerForQuestionAnswering"),EEr=o(" (RoFormer model)"),yEr=l(),o5e=a("p"),wEr=o("Examples:"),AEr=l(),f(B0.$$.fragment),vxe=l(),df=a("h2"),o4=a("a"),r5e=a("span"),f(x0.$$.fragment),LEr=l(),t5e=a("span"),BEr=o("FlaxAutoModelForTokenClassification"),Txe=l(),$r=a("div"),f(k0.$$.fragment),xEr=l(),cf=a("p"),kEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),a5e=a("code"),REr=o("from_pretrained()"),SEr=o("class method or the "),n5e=a("code"),PEr=o("from_config()"),$Er=o(`class
method.`),IEr=l(),R0=a("p"),DEr=o("This class cannot be instantiated directly using "),s5e=a("code"),jEr=o("__init__()"),NEr=o(" (throws an error)."),qEr=l(),Lt=a("div"),f(S0.$$.fragment),GEr=l(),l5e=a("p"),OEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),XEr=l(),ff=a("p"),VEr=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),zEr=o("not"),WEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),d5e=a("code"),QEr=o("from_pretrained()"),HEr=o("to load the model weights."),UEr=l(),c5e=a("p"),JEr=o("Examples:"),YEr=l(),f(P0.$$.fragment),KEr=l(),So=a("div"),f($0.$$.fragment),ZEr=l(),f5e=a("p"),eyr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oyr=l(),kn=a("p"),ryr=o("The model class to instantiate is selected based on the "),m5e=a("code"),tyr=o("model_type"),ayr=o(` property of the config object (either
passed as an argument or loaded from `),g5e=a("code"),nyr=o("pretrained_model_name_or_path"),syr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=a("code"),lyr=o("pretrained_model_name_or_path"),iyr=o(":"),dyr=l(),so=a("ul"),r4=a("li"),p5e=a("strong"),cyr=o("albert"),fyr=o(" \u2014 "),_V=a("a"),myr=o("FlaxAlbertForTokenClassification"),gyr=o(" (ALBERT model)"),hyr=l(),t4=a("li"),_5e=a("strong"),pyr=o("bert"),_yr=o(" \u2014 "),uV=a("a"),uyr=o("FlaxBertForTokenClassification"),byr=o(" (BERT model)"),vyr=l(),a4=a("li"),u5e=a("strong"),Tyr=o("big_bird"),Fyr=o(" \u2014 "),bV=a("a"),Cyr=o("FlaxBigBirdForTokenClassification"),Myr=o(" (BigBird model)"),Eyr=l(),n4=a("li"),b5e=a("strong"),yyr=o("distilbert"),wyr=o(" \u2014 "),vV=a("a"),Ayr=o("FlaxDistilBertForTokenClassification"),Lyr=o(" (DistilBERT model)"),Byr=l(),s4=a("li"),v5e=a("strong"),xyr=o("electra"),kyr=o(" \u2014 "),TV=a("a"),Ryr=o("FlaxElectraForTokenClassification"),Syr=o(" (ELECTRA model)"),Pyr=l(),l4=a("li"),T5e=a("strong"),$yr=o("roberta"),Iyr=o(" \u2014 "),FV=a("a"),Dyr=o("FlaxRobertaForTokenClassification"),jyr=o(" (RoBERTa model)"),Nyr=l(),i4=a("li"),F5e=a("strong"),qyr=o("roformer"),Gyr=o(" \u2014 "),CV=a("a"),Oyr=o("FlaxRoFormerForTokenClassification"),Xyr=o(" (RoFormer model)"),Vyr=l(),C5e=a("p"),zyr=o("Examples:"),Wyr=l(),f(I0.$$.fragment),Fxe=l(),mf=a("h2"),d4=a("a"),M5e=a("span"),f(D0.$$.fragment),Qyr=l(),E5e=a("span"),Hyr=o("FlaxAutoModelForMultipleChoice"),Cxe=l(),Ir=a("div"),f(j0.$$.fragment),Uyr=l(),gf=a("p"),Jyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),y5e=a("code"),Yyr=o("from_pretrained()"),Kyr=o("class method or the "),w5e=a("code"),Zyr=o("from_config()"),ewr=o(`class
method.`),owr=l(),N0=a("p"),rwr=o("This class cannot be instantiated directly using "),A5e=a("code"),twr=o("__init__()"),awr=o(" (throws an error)."),nwr=l(),Bt=a("div"),f(q0.$$.fragment),swr=l(),L5e=a("p"),lwr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iwr=l(),hf=a("p"),dwr=o(`Note:
Loading a model from its configuration file does `),B5e=a("strong"),cwr=o("not"),fwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),x5e=a("code"),mwr=o("from_pretrained()"),gwr=o("to load the model weights."),hwr=l(),k5e=a("p"),pwr=o("Examples:"),_wr=l(),f(G0.$$.fragment),uwr=l(),Po=a("div"),f(O0.$$.fragment),bwr=l(),R5e=a("p"),vwr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Twr=l(),Rn=a("p"),Fwr=o("The model class to instantiate is selected based on the "),S5e=a("code"),Cwr=o("model_type"),Mwr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),Ewr=o("pretrained_model_name_or_path"),ywr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=a("code"),wwr=o("pretrained_model_name_or_path"),Awr=o(":"),Lwr=l(),lo=a("ul"),c4=a("li"),I5e=a("strong"),Bwr=o("albert"),xwr=o(" \u2014 "),MV=a("a"),kwr=o("FlaxAlbertForMultipleChoice"),Rwr=o(" (ALBERT model)"),Swr=l(),f4=a("li"),D5e=a("strong"),Pwr=o("bert"),$wr=o(" \u2014 "),EV=a("a"),Iwr=o("FlaxBertForMultipleChoice"),Dwr=o(" (BERT model)"),jwr=l(),m4=a("li"),j5e=a("strong"),Nwr=o("big_bird"),qwr=o(" \u2014 "),yV=a("a"),Gwr=o("FlaxBigBirdForMultipleChoice"),Owr=o(" (BigBird model)"),Xwr=l(),g4=a("li"),N5e=a("strong"),Vwr=o("distilbert"),zwr=o(" \u2014 "),wV=a("a"),Wwr=o("FlaxDistilBertForMultipleChoice"),Qwr=o(" (DistilBERT model)"),Hwr=l(),h4=a("li"),q5e=a("strong"),Uwr=o("electra"),Jwr=o(" \u2014 "),AV=a("a"),Ywr=o("FlaxElectraForMultipleChoice"),Kwr=o(" (ELECTRA model)"),Zwr=l(),p4=a("li"),G5e=a("strong"),e6r=o("roberta"),o6r=o(" \u2014 "),LV=a("a"),r6r=o("FlaxRobertaForMultipleChoice"),t6r=o(" (RoBERTa model)"),a6r=l(),_4=a("li"),O5e=a("strong"),n6r=o("roformer"),s6r=o(" \u2014 "),BV=a("a"),l6r=o("FlaxRoFormerForMultipleChoice"),i6r=o(" (RoFormer model)"),d6r=l(),X5e=a("p"),c6r=o("Examples:"),f6r=l(),f(X0.$$.fragment),Mxe=l(),pf=a("h2"),u4=a("a"),V5e=a("span"),f(V0.$$.fragment),m6r=l(),z5e=a("span"),g6r=o("FlaxAutoModelForNextSentencePrediction"),Exe=l(),Dr=a("div"),f(z0.$$.fragment),h6r=l(),_f=a("p"),p6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),W5e=a("code"),_6r=o("from_pretrained()"),u6r=o("class method or the "),Q5e=a("code"),b6r=o("from_config()"),v6r=o(`class
method.`),T6r=l(),W0=a("p"),F6r=o("This class cannot be instantiated directly using "),H5e=a("code"),C6r=o("__init__()"),M6r=o(" (throws an error)."),E6r=l(),xt=a("div"),f(Q0.$$.fragment),y6r=l(),U5e=a("p"),w6r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),A6r=l(),uf=a("p"),L6r=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),B6r=o("not"),x6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Y5e=a("code"),k6r=o("from_pretrained()"),R6r=o("to load the model weights."),S6r=l(),K5e=a("p"),P6r=o("Examples:"),$6r=l(),f(H0.$$.fragment),I6r=l(),$o=a("div"),f(U0.$$.fragment),D6r=l(),Z5e=a("p"),j6r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),N6r=l(),Sn=a("p"),q6r=o("The model class to instantiate is selected based on the "),e2e=a("code"),G6r=o("model_type"),O6r=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),X6r=o("pretrained_model_name_or_path"),V6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),z6r=o("pretrained_model_name_or_path"),W6r=o(":"),Q6r=l(),t2e=a("ul"),b4=a("li"),a2e=a("strong"),H6r=o("bert"),U6r=o(" \u2014 "),xV=a("a"),J6r=o("FlaxBertForNextSentencePrediction"),Y6r=o(" (BERT model)"),K6r=l(),n2e=a("p"),Z6r=o("Examples:"),eAr=l(),f(J0.$$.fragment),yxe=l(),bf=a("h2"),v4=a("a"),s2e=a("span"),f(Y0.$$.fragment),oAr=l(),l2e=a("span"),rAr=o("FlaxAutoModelForImageClassification"),wxe=l(),jr=a("div"),f(K0.$$.fragment),tAr=l(),vf=a("p"),aAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),i2e=a("code"),nAr=o("from_pretrained()"),sAr=o("class method or the "),d2e=a("code"),lAr=o("from_config()"),iAr=o(`class
method.`),dAr=l(),Z0=a("p"),cAr=o("This class cannot be instantiated directly using "),c2e=a("code"),fAr=o("__init__()"),mAr=o(" (throws an error)."),gAr=l(),kt=a("div"),f(eL.$$.fragment),hAr=l(),f2e=a("p"),pAr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_Ar=l(),Tf=a("p"),uAr=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),bAr=o("not"),vAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),g2e=a("code"),TAr=o("from_pretrained()"),FAr=o("to load the model weights."),CAr=l(),h2e=a("p"),MAr=o("Examples:"),EAr=l(),f(oL.$$.fragment),yAr=l(),Io=a("div"),f(rL.$$.fragment),wAr=l(),p2e=a("p"),AAr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LAr=l(),Pn=a("p"),BAr=o("The model class to instantiate is selected based on the "),_2e=a("code"),xAr=o("model_type"),kAr=o(` property of the config object (either
passed as an argument or loaded from `),u2e=a("code"),RAr=o("pretrained_model_name_or_path"),SAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=a("code"),PAr=o("pretrained_model_name_or_path"),$Ar=o(":"),IAr=l(),tL=a("ul"),T4=a("li"),v2e=a("strong"),DAr=o("beit"),jAr=o(" \u2014 "),kV=a("a"),NAr=o("FlaxBeitForImageClassification"),qAr=o(" (BEiT model)"),GAr=l(),F4=a("li"),T2e=a("strong"),OAr=o("vit"),XAr=o(" \u2014 "),RV=a("a"),VAr=o("FlaxViTForImageClassification"),zAr=o(" (ViT model)"),WAr=l(),F2e=a("p"),QAr=o("Examples:"),HAr=l(),f(aL.$$.fragment),Axe=l(),Ff=a("h2"),C4=a("a"),C2e=a("span"),f(nL.$$.fragment),UAr=l(),M2e=a("span"),JAr=o("FlaxAutoModelForVision2Seq"),Lxe=l(),Nr=a("div"),f(sL.$$.fragment),YAr=l(),Cf=a("p"),KAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),E2e=a("code"),ZAr=o("from_pretrained()"),e0r=o("class method or the "),y2e=a("code"),o0r=o("from_config()"),r0r=o(`class
method.`),t0r=l(),lL=a("p"),a0r=o("This class cannot be instantiated directly using "),w2e=a("code"),n0r=o("__init__()"),s0r=o(" (throws an error)."),l0r=l(),Rt=a("div"),f(iL.$$.fragment),i0r=l(),A2e=a("p"),d0r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),c0r=l(),Mf=a("p"),f0r=o(`Note:
Loading a model from its configuration file does `),L2e=a("strong"),m0r=o("not"),g0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),B2e=a("code"),h0r=o("from_pretrained()"),p0r=o("to load the model weights."),_0r=l(),x2e=a("p"),u0r=o("Examples:"),b0r=l(),f(dL.$$.fragment),v0r=l(),Do=a("div"),f(cL.$$.fragment),T0r=l(),k2e=a("p"),F0r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),C0r=l(),$n=a("p"),M0r=o("The model class to instantiate is selected based on the "),R2e=a("code"),E0r=o("model_type"),y0r=o(` property of the config object (either
passed as an argument or loaded from `),S2e=a("code"),w0r=o("pretrained_model_name_or_path"),A0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=a("code"),L0r=o("pretrained_model_name_or_path"),B0r=o(":"),x0r=l(),$2e=a("ul"),M4=a("li"),I2e=a("strong"),k0r=o("vision-encoder-decoder"),R0r=o(" \u2014 "),SV=a("a"),S0r=o("FlaxVisionEncoderDecoderModel"),P0r=o(" (Vision Encoder decoder model)"),$0r=l(),D2e=a("p"),I0r=o("Examples:"),D0r=l(),f(fL.$$.fragment),this.h()},l(c){const u=L3t('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Be=i(c),ie=n(c,"H1",{class:!0});var mL=s(ie);me=n(mL,"A",{id:!0,class:!0,href:!0});var j2e=s(me);no=n(j2e,"SPAN",{});var N2e=s(no);m(ce.$$.fragment,N2e),N2e.forEach(t),j2e.forEach(t),ue=i(mL),Go=n(mL,"SPAN",{});var N0r=s(Go);Bi=r(N0r,"Auto Classes"),N0r.forEach(t),mL.forEach(t),yf=i(c),sa=n(c,"P",{});var xxe=s(sa);xi=r(xxe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=n(xxe,"CODE",{});var q0r=s(ki);MM=r(q0r,"from_pretrained()"),q0r.forEach(t),wf=r(xxe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xxe.forEach(t),ye=i(c),io=n(c,"P",{});var E4=s(io);Ri=r(E4,"Instantiating one of "),In=n(E4,"A",{href:!0});var G0r=s(In);EM=r(G0r,"AutoConfig"),G0r.forEach(t),Dn=r(E4,", "),jn=n(E4,"A",{href:!0});var O0r=s(jn);yM=r(O0r,"AutoModel"),O0r.forEach(t),Si=r(E4,`, and
`),Nn=n(E4,"A",{href:!0});var X0r=s(Nn);wM=r(X0r,"AutoTokenizer"),X0r.forEach(t),Pi=r(E4," will directly create a class of the relevant architecture. For instance"),E4.forEach(t),Af=i(c),m($a.$$.fragment,c),co=i(c),ge=n(c,"P",{});var kxe=s(ge);d8=r(kxe,"will create a model that is an instance of "),$i=n(kxe,"A",{href:!0});var V0r=s($i);c8=r(V0r,"BertModel"),V0r.forEach(t),f8=r(kxe,"."),kxe.forEach(t),Oo=i(c),Ia=n(c,"P",{});var Rxe=s(Ia);m8=r(Rxe,"There is one class of "),Lf=n(Rxe,"CODE",{});var z0r=s(Lf);g8=r(z0r,"AutoModel"),z0r.forEach(t),qRe=r(Rxe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Rxe.forEach(t),x7e=i(c),Ii=n(c,"H2",{class:!0});var Sxe=s(Ii);Bf=n(Sxe,"A",{id:!0,class:!0,href:!0});var W0r=s(Bf);EW=n(W0r,"SPAN",{});var Q0r=s(EW);m(AM.$$.fragment,Q0r),Q0r.forEach(t),W0r.forEach(t),GRe=i(Sxe),yW=n(Sxe,"SPAN",{});var H0r=s(yW);ORe=r(H0r,"Extending the Auto Classes"),H0r.forEach(t),Sxe.forEach(t),k7e=i(c),qn=n(c,"P",{});var PV=s(qn);XRe=r(PV,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),wW=n(PV,"CODE",{});var U0r=s(wW);VRe=r(U0r,"NewModel"),U0r.forEach(t),zRe=r(PV,", make sure you have a "),AW=n(PV,"CODE",{});var J0r=s(AW);WRe=r(J0r,"NewModelConfig"),J0r.forEach(t),QRe=r(PV,` then you can add those to the auto
classes like this:`),PV.forEach(t),R7e=i(c),m(LM.$$.fragment,c),S7e=i(c),h8=n(c,"P",{});var Y0r=s(h8);HRe=r(Y0r,"You will then be able to use the auto classes like you would usually do!"),Y0r.forEach(t),P7e=i(c),m(xf.$$.fragment,c),$7e=i(c),Di=n(c,"H2",{class:!0});var Pxe=s(Di);kf=n(Pxe,"A",{id:!0,class:!0,href:!0});var K0r=s(kf);LW=n(K0r,"SPAN",{});var Z0r=s(LW);m(BM.$$.fragment,Z0r),Z0r.forEach(t),K0r.forEach(t),URe=i(Pxe),BW=n(Pxe,"SPAN",{});var eLr=s(BW);JRe=r(eLr,"AutoConfig"),eLr.forEach(t),Pxe.forEach(t),I7e=i(c),Xo=n(c,"DIV",{class:!0});var Ds=s(Xo);m(xM.$$.fragment,Ds),YRe=i(Ds),kM=n(Ds,"P",{});var $xe=s(kM);KRe=r($xe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),p8=n($xe,"A",{href:!0});var oLr=s(p8);ZRe=r(oLr,"from_pretrained()"),oLr.forEach(t),eSe=r($xe," class method."),$xe.forEach(t),oSe=i(Ds),RM=n(Ds,"P",{});var Ixe=s(RM);rSe=r(Ixe,"This class cannot be instantiated directly using "),xW=n(Ixe,"CODE",{});var rLr=s(xW);tSe=r(rLr,"__init__()"),rLr.forEach(t),aSe=r(Ixe," (throws an error)."),Ixe.forEach(t),nSe=i(Ds),fo=n(Ds,"DIV",{class:!0});var ia=s(fo);m(SM.$$.fragment,ia),sSe=i(ia),kW=n(ia,"P",{});var tLr=s(kW);lSe=r(tLr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),tLr.forEach(t),iSe=i(ia),ji=n(ia,"P",{});var $V=s(ji);dSe=r($V,"The configuration class to instantiate is selected based on the "),RW=n($V,"CODE",{});var aLr=s(RW);cSe=r(aLr,"model_type"),aLr.forEach(t),fSe=r($V,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),SW=n($V,"CODE",{});var nLr=s(SW);mSe=r(nLr,"pretrained_model_name_or_path"),nLr.forEach(t),gSe=r($V,":"),$V.forEach(t),hSe=i(ia),v=n(ia,"UL",{});var T=s(v);Rf=n(T,"LI",{});var q2e=s(Rf);PW=n(q2e,"STRONG",{});var sLr=s(PW);pSe=r(sLr,"albert"),sLr.forEach(t),_Se=r(q2e," \u2014 "),_8=n(q2e,"A",{href:!0});var lLr=s(_8);uSe=r(lLr,"AlbertConfig"),lLr.forEach(t),bSe=r(q2e," (ALBERT model)"),q2e.forEach(t),vSe=i(T),Sf=n(T,"LI",{});var G2e=s(Sf);$W=n(G2e,"STRONG",{});var iLr=s($W);TSe=r(iLr,"bart"),iLr.forEach(t),FSe=r(G2e," \u2014 "),u8=n(G2e,"A",{href:!0});var dLr=s(u8);CSe=r(dLr,"BartConfig"),dLr.forEach(t),MSe=r(G2e," (BART model)"),G2e.forEach(t),ESe=i(T),Pf=n(T,"LI",{});var O2e=s(Pf);IW=n(O2e,"STRONG",{});var cLr=s(IW);ySe=r(cLr,"beit"),cLr.forEach(t),wSe=r(O2e," \u2014 "),b8=n(O2e,"A",{href:!0});var fLr=s(b8);ASe=r(fLr,"BeitConfig"),fLr.forEach(t),LSe=r(O2e," (BEiT model)"),O2e.forEach(t),BSe=i(T),$f=n(T,"LI",{});var X2e=s($f);DW=n(X2e,"STRONG",{});var mLr=s(DW);xSe=r(mLr,"bert"),mLr.forEach(t),kSe=r(X2e," \u2014 "),v8=n(X2e,"A",{href:!0});var gLr=s(v8);RSe=r(gLr,"BertConfig"),gLr.forEach(t),SSe=r(X2e," (BERT model)"),X2e.forEach(t),PSe=i(T),If=n(T,"LI",{});var V2e=s(If);jW=n(V2e,"STRONG",{});var hLr=s(jW);$Se=r(hLr,"bert-generation"),hLr.forEach(t),ISe=r(V2e," \u2014 "),T8=n(V2e,"A",{href:!0});var pLr=s(T8);DSe=r(pLr,"BertGenerationConfig"),pLr.forEach(t),jSe=r(V2e," (Bert Generation model)"),V2e.forEach(t),NSe=i(T),Df=n(T,"LI",{});var z2e=s(Df);NW=n(z2e,"STRONG",{});var _Lr=s(NW);qSe=r(_Lr,"big_bird"),_Lr.forEach(t),GSe=r(z2e," \u2014 "),F8=n(z2e,"A",{href:!0});var uLr=s(F8);OSe=r(uLr,"BigBirdConfig"),uLr.forEach(t),XSe=r(z2e," (BigBird model)"),z2e.forEach(t),VSe=i(T),jf=n(T,"LI",{});var W2e=s(jf);qW=n(W2e,"STRONG",{});var bLr=s(qW);zSe=r(bLr,"bigbird_pegasus"),bLr.forEach(t),WSe=r(W2e," \u2014 "),C8=n(W2e,"A",{href:!0});var vLr=s(C8);QSe=r(vLr,"BigBirdPegasusConfig"),vLr.forEach(t),HSe=r(W2e," (BigBirdPegasus model)"),W2e.forEach(t),USe=i(T),Nf=n(T,"LI",{});var Q2e=s(Nf);GW=n(Q2e,"STRONG",{});var TLr=s(GW);JSe=r(TLr,"blenderbot"),TLr.forEach(t),YSe=r(Q2e," \u2014 "),M8=n(Q2e,"A",{href:!0});var FLr=s(M8);KSe=r(FLr,"BlenderbotConfig"),FLr.forEach(t),ZSe=r(Q2e," (Blenderbot model)"),Q2e.forEach(t),ePe=i(T),qf=n(T,"LI",{});var H2e=s(qf);OW=n(H2e,"STRONG",{});var CLr=s(OW);oPe=r(CLr,"blenderbot-small"),CLr.forEach(t),rPe=r(H2e," \u2014 "),E8=n(H2e,"A",{href:!0});var MLr=s(E8);tPe=r(MLr,"BlenderbotSmallConfig"),MLr.forEach(t),aPe=r(H2e," (BlenderbotSmall model)"),H2e.forEach(t),nPe=i(T),Gf=n(T,"LI",{});var U2e=s(Gf);XW=n(U2e,"STRONG",{});var ELr=s(XW);sPe=r(ELr,"camembert"),ELr.forEach(t),lPe=r(U2e," \u2014 "),y8=n(U2e,"A",{href:!0});var yLr=s(y8);iPe=r(yLr,"CamembertConfig"),yLr.forEach(t),dPe=r(U2e," (CamemBERT model)"),U2e.forEach(t),cPe=i(T),Of=n(T,"LI",{});var J2e=s(Of);VW=n(J2e,"STRONG",{});var wLr=s(VW);fPe=r(wLr,"canine"),wLr.forEach(t),mPe=r(J2e," \u2014 "),w8=n(J2e,"A",{href:!0});var ALr=s(w8);gPe=r(ALr,"CanineConfig"),ALr.forEach(t),hPe=r(J2e," (Canine model)"),J2e.forEach(t),pPe=i(T),Xf=n(T,"LI",{});var Y2e=s(Xf);zW=n(Y2e,"STRONG",{});var LLr=s(zW);_Pe=r(LLr,"clip"),LLr.forEach(t),uPe=r(Y2e," \u2014 "),A8=n(Y2e,"A",{href:!0});var BLr=s(A8);bPe=r(BLr,"CLIPConfig"),BLr.forEach(t),vPe=r(Y2e," (CLIP model)"),Y2e.forEach(t),TPe=i(T),Vf=n(T,"LI",{});var K2e=s(Vf);WW=n(K2e,"STRONG",{});var xLr=s(WW);FPe=r(xLr,"convbert"),xLr.forEach(t),CPe=r(K2e," \u2014 "),L8=n(K2e,"A",{href:!0});var kLr=s(L8);MPe=r(kLr,"ConvBertConfig"),kLr.forEach(t),EPe=r(K2e," (ConvBERT model)"),K2e.forEach(t),yPe=i(T),zf=n(T,"LI",{});var Z2e=s(zf);QW=n(Z2e,"STRONG",{});var RLr=s(QW);wPe=r(RLr,"convnext"),RLr.forEach(t),APe=r(Z2e," \u2014 "),B8=n(Z2e,"A",{href:!0});var SLr=s(B8);LPe=r(SLr,"ConvNextConfig"),SLr.forEach(t),BPe=r(Z2e," (ConvNext model)"),Z2e.forEach(t),xPe=i(T),Wf=n(T,"LI",{});var eve=s(Wf);HW=n(eve,"STRONG",{});var PLr=s(HW);kPe=r(PLr,"ctrl"),PLr.forEach(t),RPe=r(eve," \u2014 "),x8=n(eve,"A",{href:!0});var $Lr=s(x8);SPe=r($Lr,"CTRLConfig"),$Lr.forEach(t),PPe=r(eve," (CTRL model)"),eve.forEach(t),$Pe=i(T),Qf=n(T,"LI",{});var ove=s(Qf);UW=n(ove,"STRONG",{});var ILr=s(UW);IPe=r(ILr,"data2vec-audio"),ILr.forEach(t),DPe=r(ove," \u2014 "),k8=n(ove,"A",{href:!0});var DLr=s(k8);jPe=r(DLr,"Data2VecAudioConfig"),DLr.forEach(t),NPe=r(ove," (Data2VecAudio model)"),ove.forEach(t),qPe=i(T),Hf=n(T,"LI",{});var rve=s(Hf);JW=n(rve,"STRONG",{});var jLr=s(JW);GPe=r(jLr,"data2vec-text"),jLr.forEach(t),OPe=r(rve," \u2014 "),R8=n(rve,"A",{href:!0});var NLr=s(R8);XPe=r(NLr,"Data2VecTextConfig"),NLr.forEach(t),VPe=r(rve," (Data2VecText model)"),rve.forEach(t),zPe=i(T),Uf=n(T,"LI",{});var tve=s(Uf);YW=n(tve,"STRONG",{});var qLr=s(YW);WPe=r(qLr,"deberta"),qLr.forEach(t),QPe=r(tve," \u2014 "),S8=n(tve,"A",{href:!0});var GLr=s(S8);HPe=r(GLr,"DebertaConfig"),GLr.forEach(t),UPe=r(tve," (DeBERTa model)"),tve.forEach(t),JPe=i(T),Jf=n(T,"LI",{});var ave=s(Jf);KW=n(ave,"STRONG",{});var OLr=s(KW);YPe=r(OLr,"deberta-v2"),OLr.forEach(t),KPe=r(ave," \u2014 "),P8=n(ave,"A",{href:!0});var XLr=s(P8);ZPe=r(XLr,"DebertaV2Config"),XLr.forEach(t),e$e=r(ave," (DeBERTa-v2 model)"),ave.forEach(t),o$e=i(T),Yf=n(T,"LI",{});var nve=s(Yf);ZW=n(nve,"STRONG",{});var VLr=s(ZW);r$e=r(VLr,"deit"),VLr.forEach(t),t$e=r(nve," \u2014 "),$8=n(nve,"A",{href:!0});var zLr=s($8);a$e=r(zLr,"DeiTConfig"),zLr.forEach(t),n$e=r(nve," (DeiT model)"),nve.forEach(t),s$e=i(T),Kf=n(T,"LI",{});var sve=s(Kf);eQ=n(sve,"STRONG",{});var WLr=s(eQ);l$e=r(WLr,"detr"),WLr.forEach(t),i$e=r(sve," \u2014 "),I8=n(sve,"A",{href:!0});var QLr=s(I8);d$e=r(QLr,"DetrConfig"),QLr.forEach(t),c$e=r(sve," (DETR model)"),sve.forEach(t),f$e=i(T),Zf=n(T,"LI",{});var lve=s(Zf);oQ=n(lve,"STRONG",{});var HLr=s(oQ);m$e=r(HLr,"distilbert"),HLr.forEach(t),g$e=r(lve," \u2014 "),D8=n(lve,"A",{href:!0});var ULr=s(D8);h$e=r(ULr,"DistilBertConfig"),ULr.forEach(t),p$e=r(lve," (DistilBERT model)"),lve.forEach(t),_$e=i(T),em=n(T,"LI",{});var ive=s(em);rQ=n(ive,"STRONG",{});var JLr=s(rQ);u$e=r(JLr,"dpr"),JLr.forEach(t),b$e=r(ive," \u2014 "),j8=n(ive,"A",{href:!0});var YLr=s(j8);v$e=r(YLr,"DPRConfig"),YLr.forEach(t),T$e=r(ive," (DPR model)"),ive.forEach(t),F$e=i(T),om=n(T,"LI",{});var dve=s(om);tQ=n(dve,"STRONG",{});var KLr=s(tQ);C$e=r(KLr,"electra"),KLr.forEach(t),M$e=r(dve," \u2014 "),N8=n(dve,"A",{href:!0});var ZLr=s(N8);E$e=r(ZLr,"ElectraConfig"),ZLr.forEach(t),y$e=r(dve," (ELECTRA model)"),dve.forEach(t),w$e=i(T),rm=n(T,"LI",{});var cve=s(rm);aQ=n(cve,"STRONG",{});var e8r=s(aQ);A$e=r(e8r,"encoder-decoder"),e8r.forEach(t),L$e=r(cve," \u2014 "),q8=n(cve,"A",{href:!0});var o8r=s(q8);B$e=r(o8r,"EncoderDecoderConfig"),o8r.forEach(t),x$e=r(cve," (Encoder decoder model)"),cve.forEach(t),k$e=i(T),tm=n(T,"LI",{});var fve=s(tm);nQ=n(fve,"STRONG",{});var r8r=s(nQ);R$e=r(r8r,"flaubert"),r8r.forEach(t),S$e=r(fve," \u2014 "),G8=n(fve,"A",{href:!0});var t8r=s(G8);P$e=r(t8r,"FlaubertConfig"),t8r.forEach(t),$$e=r(fve," (FlauBERT model)"),fve.forEach(t),I$e=i(T),am=n(T,"LI",{});var mve=s(am);sQ=n(mve,"STRONG",{});var a8r=s(sQ);D$e=r(a8r,"fnet"),a8r.forEach(t),j$e=r(mve," \u2014 "),O8=n(mve,"A",{href:!0});var n8r=s(O8);N$e=r(n8r,"FNetConfig"),n8r.forEach(t),q$e=r(mve," (FNet model)"),mve.forEach(t),G$e=i(T),nm=n(T,"LI",{});var gve=s(nm);lQ=n(gve,"STRONG",{});var s8r=s(lQ);O$e=r(s8r,"fsmt"),s8r.forEach(t),X$e=r(gve," \u2014 "),X8=n(gve,"A",{href:!0});var l8r=s(X8);V$e=r(l8r,"FSMTConfig"),l8r.forEach(t),z$e=r(gve," (FairSeq Machine-Translation model)"),gve.forEach(t),W$e=i(T),sm=n(T,"LI",{});var hve=s(sm);iQ=n(hve,"STRONG",{});var i8r=s(iQ);Q$e=r(i8r,"funnel"),i8r.forEach(t),H$e=r(hve," \u2014 "),V8=n(hve,"A",{href:!0});var d8r=s(V8);U$e=r(d8r,"FunnelConfig"),d8r.forEach(t),J$e=r(hve," (Funnel Transformer model)"),hve.forEach(t),Y$e=i(T),lm=n(T,"LI",{});var pve=s(lm);dQ=n(pve,"STRONG",{});var c8r=s(dQ);K$e=r(c8r,"gpt2"),c8r.forEach(t),Z$e=r(pve," \u2014 "),z8=n(pve,"A",{href:!0});var f8r=s(z8);eIe=r(f8r,"GPT2Config"),f8r.forEach(t),oIe=r(pve," (OpenAI GPT-2 model)"),pve.forEach(t),rIe=i(T),im=n(T,"LI",{});var _ve=s(im);cQ=n(_ve,"STRONG",{});var m8r=s(cQ);tIe=r(m8r,"gpt_neo"),m8r.forEach(t),aIe=r(_ve," \u2014 "),W8=n(_ve,"A",{href:!0});var g8r=s(W8);nIe=r(g8r,"GPTNeoConfig"),g8r.forEach(t),sIe=r(_ve," (GPT Neo model)"),_ve.forEach(t),lIe=i(T),dm=n(T,"LI",{});var uve=s(dm);fQ=n(uve,"STRONG",{});var h8r=s(fQ);iIe=r(h8r,"gptj"),h8r.forEach(t),dIe=r(uve," \u2014 "),Q8=n(uve,"A",{href:!0});var p8r=s(Q8);cIe=r(p8r,"GPTJConfig"),p8r.forEach(t),fIe=r(uve," (GPT-J model)"),uve.forEach(t),mIe=i(T),cm=n(T,"LI",{});var bve=s(cm);mQ=n(bve,"STRONG",{});var _8r=s(mQ);gIe=r(_8r,"hubert"),_8r.forEach(t),hIe=r(bve," \u2014 "),H8=n(bve,"A",{href:!0});var u8r=s(H8);pIe=r(u8r,"HubertConfig"),u8r.forEach(t),_Ie=r(bve," (Hubert model)"),bve.forEach(t),uIe=i(T),fm=n(T,"LI",{});var vve=s(fm);gQ=n(vve,"STRONG",{});var b8r=s(gQ);bIe=r(b8r,"ibert"),b8r.forEach(t),vIe=r(vve," \u2014 "),U8=n(vve,"A",{href:!0});var v8r=s(U8);TIe=r(v8r,"IBertConfig"),v8r.forEach(t),FIe=r(vve," (I-BERT model)"),vve.forEach(t),CIe=i(T),mm=n(T,"LI",{});var Tve=s(mm);hQ=n(Tve,"STRONG",{});var T8r=s(hQ);MIe=r(T8r,"imagegpt"),T8r.forEach(t),EIe=r(Tve," \u2014 "),J8=n(Tve,"A",{href:!0});var F8r=s(J8);yIe=r(F8r,"ImageGPTConfig"),F8r.forEach(t),wIe=r(Tve," (ImageGPT model)"),Tve.forEach(t),AIe=i(T),gm=n(T,"LI",{});var Fve=s(gm);pQ=n(Fve,"STRONG",{});var C8r=s(pQ);LIe=r(C8r,"layoutlm"),C8r.forEach(t),BIe=r(Fve," \u2014 "),Y8=n(Fve,"A",{href:!0});var M8r=s(Y8);xIe=r(M8r,"LayoutLMConfig"),M8r.forEach(t),kIe=r(Fve," (LayoutLM model)"),Fve.forEach(t),RIe=i(T),hm=n(T,"LI",{});var Cve=s(hm);_Q=n(Cve,"STRONG",{});var E8r=s(_Q);SIe=r(E8r,"layoutlmv2"),E8r.forEach(t),PIe=r(Cve," \u2014 "),K8=n(Cve,"A",{href:!0});var y8r=s(K8);$Ie=r(y8r,"LayoutLMv2Config"),y8r.forEach(t),IIe=r(Cve," (LayoutLMv2 model)"),Cve.forEach(t),DIe=i(T),pm=n(T,"LI",{});var Mve=s(pm);uQ=n(Mve,"STRONG",{});var w8r=s(uQ);jIe=r(w8r,"led"),w8r.forEach(t),NIe=r(Mve," \u2014 "),Z8=n(Mve,"A",{href:!0});var A8r=s(Z8);qIe=r(A8r,"LEDConfig"),A8r.forEach(t),GIe=r(Mve," (LED model)"),Mve.forEach(t),OIe=i(T),_m=n(T,"LI",{});var Eve=s(_m);bQ=n(Eve,"STRONG",{});var L8r=s(bQ);XIe=r(L8r,"longformer"),L8r.forEach(t),VIe=r(Eve," \u2014 "),e7=n(Eve,"A",{href:!0});var B8r=s(e7);zIe=r(B8r,"LongformerConfig"),B8r.forEach(t),WIe=r(Eve," (Longformer model)"),Eve.forEach(t),QIe=i(T),um=n(T,"LI",{});var yve=s(um);vQ=n(yve,"STRONG",{});var x8r=s(vQ);HIe=r(x8r,"luke"),x8r.forEach(t),UIe=r(yve," \u2014 "),o7=n(yve,"A",{href:!0});var k8r=s(o7);JIe=r(k8r,"LukeConfig"),k8r.forEach(t),YIe=r(yve," (LUKE model)"),yve.forEach(t),KIe=i(T),bm=n(T,"LI",{});var wve=s(bm);TQ=n(wve,"STRONG",{});var R8r=s(TQ);ZIe=r(R8r,"lxmert"),R8r.forEach(t),eDe=r(wve," \u2014 "),r7=n(wve,"A",{href:!0});var S8r=s(r7);oDe=r(S8r,"LxmertConfig"),S8r.forEach(t),rDe=r(wve," (LXMERT model)"),wve.forEach(t),tDe=i(T),vm=n(T,"LI",{});var Ave=s(vm);FQ=n(Ave,"STRONG",{});var P8r=s(FQ);aDe=r(P8r,"m2m_100"),P8r.forEach(t),nDe=r(Ave," \u2014 "),t7=n(Ave,"A",{href:!0});var $8r=s(t7);sDe=r($8r,"M2M100Config"),$8r.forEach(t),lDe=r(Ave," (M2M100 model)"),Ave.forEach(t),iDe=i(T),Tm=n(T,"LI",{});var Lve=s(Tm);CQ=n(Lve,"STRONG",{});var I8r=s(CQ);dDe=r(I8r,"marian"),I8r.forEach(t),cDe=r(Lve," \u2014 "),a7=n(Lve,"A",{href:!0});var D8r=s(a7);fDe=r(D8r,"MarianConfig"),D8r.forEach(t),mDe=r(Lve," (Marian model)"),Lve.forEach(t),gDe=i(T),Fm=n(T,"LI",{});var Bve=s(Fm);MQ=n(Bve,"STRONG",{});var j8r=s(MQ);hDe=r(j8r,"maskformer"),j8r.forEach(t),pDe=r(Bve," \u2014 "),n7=n(Bve,"A",{href:!0});var N8r=s(n7);_De=r(N8r,"MaskFormerConfig"),N8r.forEach(t),uDe=r(Bve," (MaskFormer model)"),Bve.forEach(t),bDe=i(T),Cm=n(T,"LI",{});var xve=s(Cm);EQ=n(xve,"STRONG",{});var q8r=s(EQ);vDe=r(q8r,"mbart"),q8r.forEach(t),TDe=r(xve," \u2014 "),s7=n(xve,"A",{href:!0});var G8r=s(s7);FDe=r(G8r,"MBartConfig"),G8r.forEach(t),CDe=r(xve," (mBART model)"),xve.forEach(t),MDe=i(T),Mm=n(T,"LI",{});var kve=s(Mm);yQ=n(kve,"STRONG",{});var O8r=s(yQ);EDe=r(O8r,"megatron-bert"),O8r.forEach(t),yDe=r(kve," \u2014 "),l7=n(kve,"A",{href:!0});var X8r=s(l7);wDe=r(X8r,"MegatronBertConfig"),X8r.forEach(t),ADe=r(kve," (MegatronBert model)"),kve.forEach(t),LDe=i(T),Em=n(T,"LI",{});var Rve=s(Em);wQ=n(Rve,"STRONG",{});var V8r=s(wQ);BDe=r(V8r,"mobilebert"),V8r.forEach(t),xDe=r(Rve," \u2014 "),i7=n(Rve,"A",{href:!0});var z8r=s(i7);kDe=r(z8r,"MobileBertConfig"),z8r.forEach(t),RDe=r(Rve," (MobileBERT model)"),Rve.forEach(t),SDe=i(T),ym=n(T,"LI",{});var Sve=s(ym);AQ=n(Sve,"STRONG",{});var W8r=s(AQ);PDe=r(W8r,"mpnet"),W8r.forEach(t),$De=r(Sve," \u2014 "),d7=n(Sve,"A",{href:!0});var Q8r=s(d7);IDe=r(Q8r,"MPNetConfig"),Q8r.forEach(t),DDe=r(Sve," (MPNet model)"),Sve.forEach(t),jDe=i(T),wm=n(T,"LI",{});var Pve=s(wm);LQ=n(Pve,"STRONG",{});var H8r=s(LQ);NDe=r(H8r,"mt5"),H8r.forEach(t),qDe=r(Pve," \u2014 "),c7=n(Pve,"A",{href:!0});var U8r=s(c7);GDe=r(U8r,"MT5Config"),U8r.forEach(t),ODe=r(Pve," (mT5 model)"),Pve.forEach(t),XDe=i(T),Am=n(T,"LI",{});var $ve=s(Am);BQ=n($ve,"STRONG",{});var J8r=s(BQ);VDe=r(J8r,"nystromformer"),J8r.forEach(t),zDe=r($ve," \u2014 "),f7=n($ve,"A",{href:!0});var Y8r=s(f7);WDe=r(Y8r,"NystromformerConfig"),Y8r.forEach(t),QDe=r($ve," (Nystromformer model)"),$ve.forEach(t),HDe=i(T),Lm=n(T,"LI",{});var Ive=s(Lm);xQ=n(Ive,"STRONG",{});var K8r=s(xQ);UDe=r(K8r,"openai-gpt"),K8r.forEach(t),JDe=r(Ive," \u2014 "),m7=n(Ive,"A",{href:!0});var Z8r=s(m7);YDe=r(Z8r,"OpenAIGPTConfig"),Z8r.forEach(t),KDe=r(Ive," (OpenAI GPT model)"),Ive.forEach(t),ZDe=i(T),Bm=n(T,"LI",{});var Dve=s(Bm);kQ=n(Dve,"STRONG",{});var e7r=s(kQ);eje=r(e7r,"pegasus"),e7r.forEach(t),oje=r(Dve," \u2014 "),g7=n(Dve,"A",{href:!0});var o7r=s(g7);rje=r(o7r,"PegasusConfig"),o7r.forEach(t),tje=r(Dve," (Pegasus model)"),Dve.forEach(t),aje=i(T),xm=n(T,"LI",{});var jve=s(xm);RQ=n(jve,"STRONG",{});var r7r=s(RQ);nje=r(r7r,"perceiver"),r7r.forEach(t),sje=r(jve," \u2014 "),h7=n(jve,"A",{href:!0});var t7r=s(h7);lje=r(t7r,"PerceiverConfig"),t7r.forEach(t),ije=r(jve," (Perceiver model)"),jve.forEach(t),dje=i(T),km=n(T,"LI",{});var Nve=s(km);SQ=n(Nve,"STRONG",{});var a7r=s(SQ);cje=r(a7r,"plbart"),a7r.forEach(t),fje=r(Nve," \u2014 "),p7=n(Nve,"A",{href:!0});var n7r=s(p7);mje=r(n7r,"PLBartConfig"),n7r.forEach(t),gje=r(Nve," (PLBart model)"),Nve.forEach(t),hje=i(T),Rm=n(T,"LI",{});var qve=s(Rm);PQ=n(qve,"STRONG",{});var s7r=s(PQ);pje=r(s7r,"poolformer"),s7r.forEach(t),_je=r(qve," \u2014 "),_7=n(qve,"A",{href:!0});var l7r=s(_7);uje=r(l7r,"PoolFormerConfig"),l7r.forEach(t),bje=r(qve," (PoolFormer model)"),qve.forEach(t),vje=i(T),Sm=n(T,"LI",{});var Gve=s(Sm);$Q=n(Gve,"STRONG",{});var i7r=s($Q);Tje=r(i7r,"prophetnet"),i7r.forEach(t),Fje=r(Gve," \u2014 "),u7=n(Gve,"A",{href:!0});var d7r=s(u7);Cje=r(d7r,"ProphetNetConfig"),d7r.forEach(t),Mje=r(Gve," (ProphetNet model)"),Gve.forEach(t),Eje=i(T),Pm=n(T,"LI",{});var Ove=s(Pm);IQ=n(Ove,"STRONG",{});var c7r=s(IQ);yje=r(c7r,"qdqbert"),c7r.forEach(t),wje=r(Ove," \u2014 "),b7=n(Ove,"A",{href:!0});var f7r=s(b7);Aje=r(f7r,"QDQBertConfig"),f7r.forEach(t),Lje=r(Ove," (QDQBert model)"),Ove.forEach(t),Bje=i(T),$m=n(T,"LI",{});var Xve=s($m);DQ=n(Xve,"STRONG",{});var m7r=s(DQ);xje=r(m7r,"rag"),m7r.forEach(t),kje=r(Xve," \u2014 "),v7=n(Xve,"A",{href:!0});var g7r=s(v7);Rje=r(g7r,"RagConfig"),g7r.forEach(t),Sje=r(Xve," (RAG model)"),Xve.forEach(t),Pje=i(T),Im=n(T,"LI",{});var Vve=s(Im);jQ=n(Vve,"STRONG",{});var h7r=s(jQ);$je=r(h7r,"realm"),h7r.forEach(t),Ije=r(Vve," \u2014 "),T7=n(Vve,"A",{href:!0});var p7r=s(T7);Dje=r(p7r,"RealmConfig"),p7r.forEach(t),jje=r(Vve," (Realm model)"),Vve.forEach(t),Nje=i(T),Dm=n(T,"LI",{});var zve=s(Dm);NQ=n(zve,"STRONG",{});var _7r=s(NQ);qje=r(_7r,"reformer"),_7r.forEach(t),Gje=r(zve," \u2014 "),F7=n(zve,"A",{href:!0});var u7r=s(F7);Oje=r(u7r,"ReformerConfig"),u7r.forEach(t),Xje=r(zve," (Reformer model)"),zve.forEach(t),Vje=i(T),jm=n(T,"LI",{});var Wve=s(jm);qQ=n(Wve,"STRONG",{});var b7r=s(qQ);zje=r(b7r,"rembert"),b7r.forEach(t),Wje=r(Wve," \u2014 "),C7=n(Wve,"A",{href:!0});var v7r=s(C7);Qje=r(v7r,"RemBertConfig"),v7r.forEach(t),Hje=r(Wve," (RemBERT model)"),Wve.forEach(t),Uje=i(T),Nm=n(T,"LI",{});var Qve=s(Nm);GQ=n(Qve,"STRONG",{});var T7r=s(GQ);Jje=r(T7r,"retribert"),T7r.forEach(t),Yje=r(Qve," \u2014 "),M7=n(Qve,"A",{href:!0});var F7r=s(M7);Kje=r(F7r,"RetriBertConfig"),F7r.forEach(t),Zje=r(Qve," (RetriBERT model)"),Qve.forEach(t),eNe=i(T),qm=n(T,"LI",{});var Hve=s(qm);OQ=n(Hve,"STRONG",{});var C7r=s(OQ);oNe=r(C7r,"roberta"),C7r.forEach(t),rNe=r(Hve," \u2014 "),E7=n(Hve,"A",{href:!0});var M7r=s(E7);tNe=r(M7r,"RobertaConfig"),M7r.forEach(t),aNe=r(Hve," (RoBERTa model)"),Hve.forEach(t),nNe=i(T),Gm=n(T,"LI",{});var Uve=s(Gm);XQ=n(Uve,"STRONG",{});var E7r=s(XQ);sNe=r(E7r,"roformer"),E7r.forEach(t),lNe=r(Uve," \u2014 "),y7=n(Uve,"A",{href:!0});var y7r=s(y7);iNe=r(y7r,"RoFormerConfig"),y7r.forEach(t),dNe=r(Uve," (RoFormer model)"),Uve.forEach(t),cNe=i(T),Om=n(T,"LI",{});var Jve=s(Om);VQ=n(Jve,"STRONG",{});var w7r=s(VQ);fNe=r(w7r,"segformer"),w7r.forEach(t),mNe=r(Jve," \u2014 "),w7=n(Jve,"A",{href:!0});var A7r=s(w7);gNe=r(A7r,"SegformerConfig"),A7r.forEach(t),hNe=r(Jve," (SegFormer model)"),Jve.forEach(t),pNe=i(T),Xm=n(T,"LI",{});var Yve=s(Xm);zQ=n(Yve,"STRONG",{});var L7r=s(zQ);_Ne=r(L7r,"sew"),L7r.forEach(t),uNe=r(Yve," \u2014 "),A7=n(Yve,"A",{href:!0});var B7r=s(A7);bNe=r(B7r,"SEWConfig"),B7r.forEach(t),vNe=r(Yve," (SEW model)"),Yve.forEach(t),TNe=i(T),Vm=n(T,"LI",{});var Kve=s(Vm);WQ=n(Kve,"STRONG",{});var x7r=s(WQ);FNe=r(x7r,"sew-d"),x7r.forEach(t),CNe=r(Kve," \u2014 "),L7=n(Kve,"A",{href:!0});var k7r=s(L7);MNe=r(k7r,"SEWDConfig"),k7r.forEach(t),ENe=r(Kve," (SEW-D model)"),Kve.forEach(t),yNe=i(T),zm=n(T,"LI",{});var Zve=s(zm);QQ=n(Zve,"STRONG",{});var R7r=s(QQ);wNe=r(R7r,"speech-encoder-decoder"),R7r.forEach(t),ANe=r(Zve," \u2014 "),B7=n(Zve,"A",{href:!0});var S7r=s(B7);LNe=r(S7r,"SpeechEncoderDecoderConfig"),S7r.forEach(t),BNe=r(Zve," (Speech Encoder decoder model)"),Zve.forEach(t),xNe=i(T),Wm=n(T,"LI",{});var eTe=s(Wm);HQ=n(eTe,"STRONG",{});var P7r=s(HQ);kNe=r(P7r,"speech_to_text"),P7r.forEach(t),RNe=r(eTe," \u2014 "),x7=n(eTe,"A",{href:!0});var $7r=s(x7);SNe=r($7r,"Speech2TextConfig"),$7r.forEach(t),PNe=r(eTe," (Speech2Text model)"),eTe.forEach(t),$Ne=i(T),Qm=n(T,"LI",{});var oTe=s(Qm);UQ=n(oTe,"STRONG",{});var I7r=s(UQ);INe=r(I7r,"speech_to_text_2"),I7r.forEach(t),DNe=r(oTe," \u2014 "),k7=n(oTe,"A",{href:!0});var D7r=s(k7);jNe=r(D7r,"Speech2Text2Config"),D7r.forEach(t),NNe=r(oTe," (Speech2Text2 model)"),oTe.forEach(t),qNe=i(T),Hm=n(T,"LI",{});var rTe=s(Hm);JQ=n(rTe,"STRONG",{});var j7r=s(JQ);GNe=r(j7r,"splinter"),j7r.forEach(t),ONe=r(rTe," \u2014 "),R7=n(rTe,"A",{href:!0});var N7r=s(R7);XNe=r(N7r,"SplinterConfig"),N7r.forEach(t),VNe=r(rTe," (Splinter model)"),rTe.forEach(t),zNe=i(T),Um=n(T,"LI",{});var tTe=s(Um);YQ=n(tTe,"STRONG",{});var q7r=s(YQ);WNe=r(q7r,"squeezebert"),q7r.forEach(t),QNe=r(tTe," \u2014 "),S7=n(tTe,"A",{href:!0});var G7r=s(S7);HNe=r(G7r,"SqueezeBertConfig"),G7r.forEach(t),UNe=r(tTe," (SqueezeBERT model)"),tTe.forEach(t),JNe=i(T),Jm=n(T,"LI",{});var aTe=s(Jm);KQ=n(aTe,"STRONG",{});var O7r=s(KQ);YNe=r(O7r,"swin"),O7r.forEach(t),KNe=r(aTe," \u2014 "),P7=n(aTe,"A",{href:!0});var X7r=s(P7);ZNe=r(X7r,"SwinConfig"),X7r.forEach(t),eqe=r(aTe," (Swin model)"),aTe.forEach(t),oqe=i(T),Ym=n(T,"LI",{});var nTe=s(Ym);ZQ=n(nTe,"STRONG",{});var V7r=s(ZQ);rqe=r(V7r,"t5"),V7r.forEach(t),tqe=r(nTe," \u2014 "),$7=n(nTe,"A",{href:!0});var z7r=s($7);aqe=r(z7r,"T5Config"),z7r.forEach(t),nqe=r(nTe," (T5 model)"),nTe.forEach(t),sqe=i(T),Km=n(T,"LI",{});var sTe=s(Km);eH=n(sTe,"STRONG",{});var W7r=s(eH);lqe=r(W7r,"tapas"),W7r.forEach(t),iqe=r(sTe," \u2014 "),I7=n(sTe,"A",{href:!0});var Q7r=s(I7);dqe=r(Q7r,"TapasConfig"),Q7r.forEach(t),cqe=r(sTe," (TAPAS model)"),sTe.forEach(t),fqe=i(T),Zm=n(T,"LI",{});var lTe=s(Zm);oH=n(lTe,"STRONG",{});var H7r=s(oH);mqe=r(H7r,"transfo-xl"),H7r.forEach(t),gqe=r(lTe," \u2014 "),D7=n(lTe,"A",{href:!0});var U7r=s(D7);hqe=r(U7r,"TransfoXLConfig"),U7r.forEach(t),pqe=r(lTe," (Transformer-XL model)"),lTe.forEach(t),_qe=i(T),eg=n(T,"LI",{});var iTe=s(eg);rH=n(iTe,"STRONG",{});var J7r=s(rH);uqe=r(J7r,"trocr"),J7r.forEach(t),bqe=r(iTe," \u2014 "),j7=n(iTe,"A",{href:!0});var Y7r=s(j7);vqe=r(Y7r,"TrOCRConfig"),Y7r.forEach(t),Tqe=r(iTe," (TrOCR model)"),iTe.forEach(t),Fqe=i(T),og=n(T,"LI",{});var dTe=s(og);tH=n(dTe,"STRONG",{});var K7r=s(tH);Cqe=r(K7r,"unispeech"),K7r.forEach(t),Mqe=r(dTe," \u2014 "),N7=n(dTe,"A",{href:!0});var Z7r=s(N7);Eqe=r(Z7r,"UniSpeechConfig"),Z7r.forEach(t),yqe=r(dTe," (UniSpeech model)"),dTe.forEach(t),wqe=i(T),rg=n(T,"LI",{});var cTe=s(rg);aH=n(cTe,"STRONG",{});var eBr=s(aH);Aqe=r(eBr,"unispeech-sat"),eBr.forEach(t),Lqe=r(cTe," \u2014 "),q7=n(cTe,"A",{href:!0});var oBr=s(q7);Bqe=r(oBr,"UniSpeechSatConfig"),oBr.forEach(t),xqe=r(cTe," (UniSpeechSat model)"),cTe.forEach(t),kqe=i(T),tg=n(T,"LI",{});var fTe=s(tg);nH=n(fTe,"STRONG",{});var rBr=s(nH);Rqe=r(rBr,"vilt"),rBr.forEach(t),Sqe=r(fTe," \u2014 "),G7=n(fTe,"A",{href:!0});var tBr=s(G7);Pqe=r(tBr,"ViltConfig"),tBr.forEach(t),$qe=r(fTe," (ViLT model)"),fTe.forEach(t),Iqe=i(T),ag=n(T,"LI",{});var mTe=s(ag);sH=n(mTe,"STRONG",{});var aBr=s(sH);Dqe=r(aBr,"vision-encoder-decoder"),aBr.forEach(t),jqe=r(mTe," \u2014 "),O7=n(mTe,"A",{href:!0});var nBr=s(O7);Nqe=r(nBr,"VisionEncoderDecoderConfig"),nBr.forEach(t),qqe=r(mTe," (Vision Encoder decoder model)"),mTe.forEach(t),Gqe=i(T),ng=n(T,"LI",{});var gTe=s(ng);lH=n(gTe,"STRONG",{});var sBr=s(lH);Oqe=r(sBr,"vision-text-dual-encoder"),sBr.forEach(t),Xqe=r(gTe," \u2014 "),X7=n(gTe,"A",{href:!0});var lBr=s(X7);Vqe=r(lBr,"VisionTextDualEncoderConfig"),lBr.forEach(t),zqe=r(gTe," (VisionTextDualEncoder model)"),gTe.forEach(t),Wqe=i(T),sg=n(T,"LI",{});var hTe=s(sg);iH=n(hTe,"STRONG",{});var iBr=s(iH);Qqe=r(iBr,"visual_bert"),iBr.forEach(t),Hqe=r(hTe," \u2014 "),V7=n(hTe,"A",{href:!0});var dBr=s(V7);Uqe=r(dBr,"VisualBertConfig"),dBr.forEach(t),Jqe=r(hTe," (VisualBert model)"),hTe.forEach(t),Yqe=i(T),lg=n(T,"LI",{});var pTe=s(lg);dH=n(pTe,"STRONG",{});var cBr=s(dH);Kqe=r(cBr,"vit"),cBr.forEach(t),Zqe=r(pTe," \u2014 "),z7=n(pTe,"A",{href:!0});var fBr=s(z7);eGe=r(fBr,"ViTConfig"),fBr.forEach(t),oGe=r(pTe," (ViT model)"),pTe.forEach(t),rGe=i(T),ig=n(T,"LI",{});var _Te=s(ig);cH=n(_Te,"STRONG",{});var mBr=s(cH);tGe=r(mBr,"vit_mae"),mBr.forEach(t),aGe=r(_Te," \u2014 "),W7=n(_Te,"A",{href:!0});var gBr=s(W7);nGe=r(gBr,"ViTMAEConfig"),gBr.forEach(t),sGe=r(_Te," (ViTMAE model)"),_Te.forEach(t),lGe=i(T),dg=n(T,"LI",{});var uTe=s(dg);fH=n(uTe,"STRONG",{});var hBr=s(fH);iGe=r(hBr,"wav2vec2"),hBr.forEach(t),dGe=r(uTe," \u2014 "),Q7=n(uTe,"A",{href:!0});var pBr=s(Q7);cGe=r(pBr,"Wav2Vec2Config"),pBr.forEach(t),fGe=r(uTe," (Wav2Vec2 model)"),uTe.forEach(t),mGe=i(T),cg=n(T,"LI",{});var bTe=s(cg);mH=n(bTe,"STRONG",{});var _Br=s(mH);gGe=r(_Br,"wavlm"),_Br.forEach(t),hGe=r(bTe," \u2014 "),H7=n(bTe,"A",{href:!0});var uBr=s(H7);pGe=r(uBr,"WavLMConfig"),uBr.forEach(t),_Ge=r(bTe," (WavLM model)"),bTe.forEach(t),uGe=i(T),fg=n(T,"LI",{});var vTe=s(fg);gH=n(vTe,"STRONG",{});var bBr=s(gH);bGe=r(bBr,"xglm"),bBr.forEach(t),vGe=r(vTe," \u2014 "),U7=n(vTe,"A",{href:!0});var vBr=s(U7);TGe=r(vBr,"XGLMConfig"),vBr.forEach(t),FGe=r(vTe," (XGLM model)"),vTe.forEach(t),CGe=i(T),mg=n(T,"LI",{});var TTe=s(mg);hH=n(TTe,"STRONG",{});var TBr=s(hH);MGe=r(TBr,"xlm"),TBr.forEach(t),EGe=r(TTe," \u2014 "),J7=n(TTe,"A",{href:!0});var FBr=s(J7);yGe=r(FBr,"XLMConfig"),FBr.forEach(t),wGe=r(TTe," (XLM model)"),TTe.forEach(t),AGe=i(T),gg=n(T,"LI",{});var FTe=s(gg);pH=n(FTe,"STRONG",{});var CBr=s(pH);LGe=r(CBr,"xlm-prophetnet"),CBr.forEach(t),BGe=r(FTe," \u2014 "),Y7=n(FTe,"A",{href:!0});var MBr=s(Y7);xGe=r(MBr,"XLMProphetNetConfig"),MBr.forEach(t),kGe=r(FTe," (XLMProphetNet model)"),FTe.forEach(t),RGe=i(T),hg=n(T,"LI",{});var CTe=s(hg);_H=n(CTe,"STRONG",{});var EBr=s(_H);SGe=r(EBr,"xlm-roberta"),EBr.forEach(t),PGe=r(CTe," \u2014 "),K7=n(CTe,"A",{href:!0});var yBr=s(K7);$Ge=r(yBr,"XLMRobertaConfig"),yBr.forEach(t),IGe=r(CTe," (XLM-RoBERTa model)"),CTe.forEach(t),DGe=i(T),pg=n(T,"LI",{});var MTe=s(pg);uH=n(MTe,"STRONG",{});var wBr=s(uH);jGe=r(wBr,"xlm-roberta-xl"),wBr.forEach(t),NGe=r(MTe," \u2014 "),Z7=n(MTe,"A",{href:!0});var ABr=s(Z7);qGe=r(ABr,"XLMRobertaXLConfig"),ABr.forEach(t),GGe=r(MTe," (XLM-RoBERTa-XL model)"),MTe.forEach(t),OGe=i(T),_g=n(T,"LI",{});var ETe=s(_g);bH=n(ETe,"STRONG",{});var LBr=s(bH);XGe=r(LBr,"xlnet"),LBr.forEach(t),VGe=r(ETe," \u2014 "),eB=n(ETe,"A",{href:!0});var BBr=s(eB);zGe=r(BBr,"XLNetConfig"),BBr.forEach(t),WGe=r(ETe," (XLNet model)"),ETe.forEach(t),QGe=i(T),ug=n(T,"LI",{});var yTe=s(ug);vH=n(yTe,"STRONG",{});var xBr=s(vH);HGe=r(xBr,"yoso"),xBr.forEach(t),UGe=r(yTe," \u2014 "),oB=n(yTe,"A",{href:!0});var kBr=s(oB);JGe=r(kBr,"YosoConfig"),kBr.forEach(t),YGe=r(yTe," (YOSO model)"),yTe.forEach(t),T.forEach(t),KGe=i(ia),TH=n(ia,"P",{});var RBr=s(TH);ZGe=r(RBr,"Examples:"),RBr.forEach(t),eOe=i(ia),m(PM.$$.fragment,ia),ia.forEach(t),oOe=i(Ds),bg=n(Ds,"DIV",{class:!0});var Dxe=s(bg);m($M.$$.fragment,Dxe),rOe=i(Dxe),FH=n(Dxe,"P",{});var SBr=s(FH);tOe=r(SBr,"Register a new configuration for this class."),SBr.forEach(t),Dxe.forEach(t),Ds.forEach(t),D7e=i(c),Ni=n(c,"H2",{class:!0});var jxe=s(Ni);vg=n(jxe,"A",{id:!0,class:!0,href:!0});var PBr=s(vg);CH=n(PBr,"SPAN",{});var $Br=s(CH);m(IM.$$.fragment,$Br),$Br.forEach(t),PBr.forEach(t),aOe=i(jxe),MH=n(jxe,"SPAN",{});var IBr=s(MH);nOe=r(IBr,"AutoTokenizer"),IBr.forEach(t),jxe.forEach(t),j7e=i(c),Vo=n(c,"DIV",{class:!0});var js=s(Vo);m(DM.$$.fragment,js),sOe=i(js),jM=n(js,"P",{});var Nxe=s(jM);lOe=r(Nxe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rB=n(Nxe,"A",{href:!0});var DBr=s(rB);iOe=r(DBr,"AutoTokenizer.from_pretrained()"),DBr.forEach(t),dOe=r(Nxe," class method."),Nxe.forEach(t),cOe=i(js),NM=n(js,"P",{});var qxe=s(NM);fOe=r(qxe,"This class cannot be instantiated directly using "),EH=n(qxe,"CODE",{});var jBr=s(EH);mOe=r(jBr,"__init__()"),jBr.forEach(t),gOe=r(qxe," (throws an error)."),qxe.forEach(t),hOe=i(js),mo=n(js,"DIV",{class:!0});var da=s(mo);m(qM.$$.fragment,da),pOe=i(da),yH=n(da,"P",{});var NBr=s(yH);_Oe=r(NBr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),NBr.forEach(t),uOe=i(da),Da=n(da,"P",{});var y4=s(Da);bOe=r(y4,"The tokenizer class to instantiate is selected based on the "),wH=n(y4,"CODE",{});var qBr=s(wH);vOe=r(qBr,"model_type"),qBr.forEach(t),TOe=r(y4,` property of the config object (either
passed as an argument or loaded from `),AH=n(y4,"CODE",{});var GBr=s(AH);FOe=r(GBr,"pretrained_model_name_or_path"),GBr.forEach(t),COe=r(y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LH=n(y4,"CODE",{});var OBr=s(LH);MOe=r(OBr,"pretrained_model_name_or_path"),OBr.forEach(t),EOe=r(y4,":"),y4.forEach(t),yOe=i(da),M=n(da,"UL",{});var y=s(M);Gn=n(y,"LI",{});var gL=s(Gn);BH=n(gL,"STRONG",{});var XBr=s(BH);wOe=r(XBr,"albert"),XBr.forEach(t),AOe=r(gL," \u2014 "),tB=n(gL,"A",{href:!0});var VBr=s(tB);LOe=r(VBr,"AlbertTokenizer"),VBr.forEach(t),BOe=r(gL," or "),aB=n(gL,"A",{href:!0});var zBr=s(aB);xOe=r(zBr,"AlbertTokenizerFast"),zBr.forEach(t),kOe=r(gL," (ALBERT model)"),gL.forEach(t),ROe=i(y),On=n(y,"LI",{});var hL=s(On);xH=n(hL,"STRONG",{});var WBr=s(xH);SOe=r(WBr,"bart"),WBr.forEach(t),POe=r(hL," \u2014 "),nB=n(hL,"A",{href:!0});var QBr=s(nB);$Oe=r(QBr,"BartTokenizer"),QBr.forEach(t),IOe=r(hL," or "),sB=n(hL,"A",{href:!0});var HBr=s(sB);DOe=r(HBr,"BartTokenizerFast"),HBr.forEach(t),jOe=r(hL," (BART model)"),hL.forEach(t),NOe=i(y),Xn=n(y,"LI",{});var pL=s(Xn);kH=n(pL,"STRONG",{});var UBr=s(kH);qOe=r(UBr,"barthez"),UBr.forEach(t),GOe=r(pL," \u2014 "),lB=n(pL,"A",{href:!0});var JBr=s(lB);OOe=r(JBr,"BarthezTokenizer"),JBr.forEach(t),XOe=r(pL," or "),iB=n(pL,"A",{href:!0});var YBr=s(iB);VOe=r(YBr,"BarthezTokenizerFast"),YBr.forEach(t),zOe=r(pL," (BARThez model)"),pL.forEach(t),WOe=i(y),Tg=n(y,"LI",{});var wTe=s(Tg);RH=n(wTe,"STRONG",{});var KBr=s(RH);QOe=r(KBr,"bartpho"),KBr.forEach(t),HOe=r(wTe," \u2014 "),dB=n(wTe,"A",{href:!0});var ZBr=s(dB);UOe=r(ZBr,"BartphoTokenizer"),ZBr.forEach(t),JOe=r(wTe," (BARTpho model)"),wTe.forEach(t),YOe=i(y),Vn=n(y,"LI",{});var _L=s(Vn);SH=n(_L,"STRONG",{});var exr=s(SH);KOe=r(exr,"bert"),exr.forEach(t),ZOe=r(_L," \u2014 "),cB=n(_L,"A",{href:!0});var oxr=s(cB);eXe=r(oxr,"BertTokenizer"),oxr.forEach(t),oXe=r(_L," or "),fB=n(_L,"A",{href:!0});var rxr=s(fB);rXe=r(rxr,"BertTokenizerFast"),rxr.forEach(t),tXe=r(_L," (BERT model)"),_L.forEach(t),aXe=i(y),Fg=n(y,"LI",{});var ATe=s(Fg);PH=n(ATe,"STRONG",{});var txr=s(PH);nXe=r(txr,"bert-generation"),txr.forEach(t),sXe=r(ATe," \u2014 "),mB=n(ATe,"A",{href:!0});var axr=s(mB);lXe=r(axr,"BertGenerationTokenizer"),axr.forEach(t),iXe=r(ATe," (Bert Generation model)"),ATe.forEach(t),dXe=i(y),Cg=n(y,"LI",{});var LTe=s(Cg);$H=n(LTe,"STRONG",{});var nxr=s($H);cXe=r(nxr,"bert-japanese"),nxr.forEach(t),fXe=r(LTe," \u2014 "),gB=n(LTe,"A",{href:!0});var sxr=s(gB);mXe=r(sxr,"BertJapaneseTokenizer"),sxr.forEach(t),gXe=r(LTe," (BertJapanese model)"),LTe.forEach(t),hXe=i(y),Mg=n(y,"LI",{});var BTe=s(Mg);IH=n(BTe,"STRONG",{});var lxr=s(IH);pXe=r(lxr,"bertweet"),lxr.forEach(t),_Xe=r(BTe," \u2014 "),hB=n(BTe,"A",{href:!0});var ixr=s(hB);uXe=r(ixr,"BertweetTokenizer"),ixr.forEach(t),bXe=r(BTe," (Bertweet model)"),BTe.forEach(t),vXe=i(y),zn=n(y,"LI",{});var uL=s(zn);DH=n(uL,"STRONG",{});var dxr=s(DH);TXe=r(dxr,"big_bird"),dxr.forEach(t),FXe=r(uL," \u2014 "),pB=n(uL,"A",{href:!0});var cxr=s(pB);CXe=r(cxr,"BigBirdTokenizer"),cxr.forEach(t),MXe=r(uL," or "),_B=n(uL,"A",{href:!0});var fxr=s(_B);EXe=r(fxr,"BigBirdTokenizerFast"),fxr.forEach(t),yXe=r(uL," (BigBird model)"),uL.forEach(t),wXe=i(y),Wn=n(y,"LI",{});var bL=s(Wn);jH=n(bL,"STRONG",{});var mxr=s(jH);AXe=r(mxr,"bigbird_pegasus"),mxr.forEach(t),LXe=r(bL," \u2014 "),uB=n(bL,"A",{href:!0});var gxr=s(uB);BXe=r(gxr,"PegasusTokenizer"),gxr.forEach(t),xXe=r(bL," or "),bB=n(bL,"A",{href:!0});var hxr=s(bB);kXe=r(hxr,"PegasusTokenizerFast"),hxr.forEach(t),RXe=r(bL," (BigBirdPegasus model)"),bL.forEach(t),SXe=i(y),Qn=n(y,"LI",{});var vL=s(Qn);NH=n(vL,"STRONG",{});var pxr=s(NH);PXe=r(pxr,"blenderbot"),pxr.forEach(t),$Xe=r(vL," \u2014 "),vB=n(vL,"A",{href:!0});var _xr=s(vB);IXe=r(_xr,"BlenderbotTokenizer"),_xr.forEach(t),DXe=r(vL," or "),TB=n(vL,"A",{href:!0});var uxr=s(TB);jXe=r(uxr,"BlenderbotTokenizerFast"),uxr.forEach(t),NXe=r(vL," (Blenderbot model)"),vL.forEach(t),qXe=i(y),Eg=n(y,"LI",{});var xTe=s(Eg);qH=n(xTe,"STRONG",{});var bxr=s(qH);GXe=r(bxr,"blenderbot-small"),bxr.forEach(t),OXe=r(xTe," \u2014 "),FB=n(xTe,"A",{href:!0});var vxr=s(FB);XXe=r(vxr,"BlenderbotSmallTokenizer"),vxr.forEach(t),VXe=r(xTe," (BlenderbotSmall model)"),xTe.forEach(t),zXe=i(y),yg=n(y,"LI",{});var kTe=s(yg);GH=n(kTe,"STRONG",{});var Txr=s(GH);WXe=r(Txr,"byt5"),Txr.forEach(t),QXe=r(kTe," \u2014 "),CB=n(kTe,"A",{href:!0});var Fxr=s(CB);HXe=r(Fxr,"ByT5Tokenizer"),Fxr.forEach(t),UXe=r(kTe," (ByT5 model)"),kTe.forEach(t),JXe=i(y),Hn=n(y,"LI",{});var TL=s(Hn);OH=n(TL,"STRONG",{});var Cxr=s(OH);YXe=r(Cxr,"camembert"),Cxr.forEach(t),KXe=r(TL," \u2014 "),MB=n(TL,"A",{href:!0});var Mxr=s(MB);ZXe=r(Mxr,"CamembertTokenizer"),Mxr.forEach(t),eVe=r(TL," or "),EB=n(TL,"A",{href:!0});var Exr=s(EB);oVe=r(Exr,"CamembertTokenizerFast"),Exr.forEach(t),rVe=r(TL," (CamemBERT model)"),TL.forEach(t),tVe=i(y),wg=n(y,"LI",{});var RTe=s(wg);XH=n(RTe,"STRONG",{});var yxr=s(XH);aVe=r(yxr,"canine"),yxr.forEach(t),nVe=r(RTe," \u2014 "),yB=n(RTe,"A",{href:!0});var wxr=s(yB);sVe=r(wxr,"CanineTokenizer"),wxr.forEach(t),lVe=r(RTe," (Canine model)"),RTe.forEach(t),iVe=i(y),Un=n(y,"LI",{});var FL=s(Un);VH=n(FL,"STRONG",{});var Axr=s(VH);dVe=r(Axr,"clip"),Axr.forEach(t),cVe=r(FL," \u2014 "),wB=n(FL,"A",{href:!0});var Lxr=s(wB);fVe=r(Lxr,"CLIPTokenizer"),Lxr.forEach(t),mVe=r(FL," or "),AB=n(FL,"A",{href:!0});var Bxr=s(AB);gVe=r(Bxr,"CLIPTokenizerFast"),Bxr.forEach(t),hVe=r(FL," (CLIP model)"),FL.forEach(t),pVe=i(y),Jn=n(y,"LI",{});var CL=s(Jn);zH=n(CL,"STRONG",{});var xxr=s(zH);_Ve=r(xxr,"convbert"),xxr.forEach(t),uVe=r(CL," \u2014 "),LB=n(CL,"A",{href:!0});var kxr=s(LB);bVe=r(kxr,"ConvBertTokenizer"),kxr.forEach(t),vVe=r(CL," or "),BB=n(CL,"A",{href:!0});var Rxr=s(BB);TVe=r(Rxr,"ConvBertTokenizerFast"),Rxr.forEach(t),FVe=r(CL," (ConvBERT model)"),CL.forEach(t),CVe=i(y),Yn=n(y,"LI",{});var ML=s(Yn);WH=n(ML,"STRONG",{});var Sxr=s(WH);MVe=r(Sxr,"cpm"),Sxr.forEach(t),EVe=r(ML," \u2014 "),xB=n(ML,"A",{href:!0});var Pxr=s(xB);yVe=r(Pxr,"CpmTokenizer"),Pxr.forEach(t),wVe=r(ML," or "),QH=n(ML,"CODE",{});var $xr=s(QH);AVe=r($xr,"CpmTokenizerFast"),$xr.forEach(t),LVe=r(ML," (CPM model)"),ML.forEach(t),BVe=i(y),Ag=n(y,"LI",{});var STe=s(Ag);HH=n(STe,"STRONG",{});var Ixr=s(HH);xVe=r(Ixr,"ctrl"),Ixr.forEach(t),kVe=r(STe," \u2014 "),kB=n(STe,"A",{href:!0});var Dxr=s(kB);RVe=r(Dxr,"CTRLTokenizer"),Dxr.forEach(t),SVe=r(STe," (CTRL model)"),STe.forEach(t),PVe=i(y),Kn=n(y,"LI",{});var EL=s(Kn);UH=n(EL,"STRONG",{});var jxr=s(UH);$Ve=r(jxr,"deberta"),jxr.forEach(t),IVe=r(EL," \u2014 "),RB=n(EL,"A",{href:!0});var Nxr=s(RB);DVe=r(Nxr,"DebertaTokenizer"),Nxr.forEach(t),jVe=r(EL," or "),SB=n(EL,"A",{href:!0});var qxr=s(SB);NVe=r(qxr,"DebertaTokenizerFast"),qxr.forEach(t),qVe=r(EL," (DeBERTa model)"),EL.forEach(t),GVe=i(y),Lg=n(y,"LI",{});var PTe=s(Lg);JH=n(PTe,"STRONG",{});var Gxr=s(JH);OVe=r(Gxr,"deberta-v2"),Gxr.forEach(t),XVe=r(PTe," \u2014 "),PB=n(PTe,"A",{href:!0});var Oxr=s(PB);VVe=r(Oxr,"DebertaV2Tokenizer"),Oxr.forEach(t),zVe=r(PTe," (DeBERTa-v2 model)"),PTe.forEach(t),WVe=i(y),Zn=n(y,"LI",{});var yL=s(Zn);YH=n(yL,"STRONG",{});var Xxr=s(YH);QVe=r(Xxr,"distilbert"),Xxr.forEach(t),HVe=r(yL," \u2014 "),$B=n(yL,"A",{href:!0});var Vxr=s($B);UVe=r(Vxr,"DistilBertTokenizer"),Vxr.forEach(t),JVe=r(yL," or "),IB=n(yL,"A",{href:!0});var zxr=s(IB);YVe=r(zxr,"DistilBertTokenizerFast"),zxr.forEach(t),KVe=r(yL," (DistilBERT model)"),yL.forEach(t),ZVe=i(y),es=n(y,"LI",{});var wL=s(es);KH=n(wL,"STRONG",{});var Wxr=s(KH);eze=r(Wxr,"dpr"),Wxr.forEach(t),oze=r(wL," \u2014 "),DB=n(wL,"A",{href:!0});var Qxr=s(DB);rze=r(Qxr,"DPRQuestionEncoderTokenizer"),Qxr.forEach(t),tze=r(wL," or "),jB=n(wL,"A",{href:!0});var Hxr=s(jB);aze=r(Hxr,"DPRQuestionEncoderTokenizerFast"),Hxr.forEach(t),nze=r(wL," (DPR model)"),wL.forEach(t),sze=i(y),os=n(y,"LI",{});var AL=s(os);ZH=n(AL,"STRONG",{});var Uxr=s(ZH);lze=r(Uxr,"electra"),Uxr.forEach(t),ize=r(AL," \u2014 "),NB=n(AL,"A",{href:!0});var Jxr=s(NB);dze=r(Jxr,"ElectraTokenizer"),Jxr.forEach(t),cze=r(AL," or "),qB=n(AL,"A",{href:!0});var Yxr=s(qB);fze=r(Yxr,"ElectraTokenizerFast"),Yxr.forEach(t),mze=r(AL," (ELECTRA model)"),AL.forEach(t),gze=i(y),Bg=n(y,"LI",{});var $Te=s(Bg);eU=n($Te,"STRONG",{});var Kxr=s(eU);hze=r(Kxr,"flaubert"),Kxr.forEach(t),pze=r($Te," \u2014 "),GB=n($Te,"A",{href:!0});var Zxr=s(GB);_ze=r(Zxr,"FlaubertTokenizer"),Zxr.forEach(t),uze=r($Te," (FlauBERT model)"),$Te.forEach(t),bze=i(y),rs=n(y,"LI",{});var LL=s(rs);oU=n(LL,"STRONG",{});var ekr=s(oU);vze=r(ekr,"fnet"),ekr.forEach(t),Tze=r(LL," \u2014 "),OB=n(LL,"A",{href:!0});var okr=s(OB);Fze=r(okr,"FNetTokenizer"),okr.forEach(t),Cze=r(LL," or "),XB=n(LL,"A",{href:!0});var rkr=s(XB);Mze=r(rkr,"FNetTokenizerFast"),rkr.forEach(t),Eze=r(LL," (FNet model)"),LL.forEach(t),yze=i(y),xg=n(y,"LI",{});var ITe=s(xg);rU=n(ITe,"STRONG",{});var tkr=s(rU);wze=r(tkr,"fsmt"),tkr.forEach(t),Aze=r(ITe," \u2014 "),VB=n(ITe,"A",{href:!0});var akr=s(VB);Lze=r(akr,"FSMTTokenizer"),akr.forEach(t),Bze=r(ITe," (FairSeq Machine-Translation model)"),ITe.forEach(t),xze=i(y),ts=n(y,"LI",{});var BL=s(ts);tU=n(BL,"STRONG",{});var nkr=s(tU);kze=r(nkr,"funnel"),nkr.forEach(t),Rze=r(BL," \u2014 "),zB=n(BL,"A",{href:!0});var skr=s(zB);Sze=r(skr,"FunnelTokenizer"),skr.forEach(t),Pze=r(BL," or "),WB=n(BL,"A",{href:!0});var lkr=s(WB);$ze=r(lkr,"FunnelTokenizerFast"),lkr.forEach(t),Ize=r(BL," (Funnel Transformer model)"),BL.forEach(t),Dze=i(y),as=n(y,"LI",{});var xL=s(as);aU=n(xL,"STRONG",{});var ikr=s(aU);jze=r(ikr,"gpt2"),ikr.forEach(t),Nze=r(xL," \u2014 "),QB=n(xL,"A",{href:!0});var dkr=s(QB);qze=r(dkr,"GPT2Tokenizer"),dkr.forEach(t),Gze=r(xL," or "),HB=n(xL,"A",{href:!0});var ckr=s(HB);Oze=r(ckr,"GPT2TokenizerFast"),ckr.forEach(t),Xze=r(xL," (OpenAI GPT-2 model)"),xL.forEach(t),Vze=i(y),ns=n(y,"LI",{});var kL=s(ns);nU=n(kL,"STRONG",{});var fkr=s(nU);zze=r(fkr,"gpt_neo"),fkr.forEach(t),Wze=r(kL," \u2014 "),UB=n(kL,"A",{href:!0});var mkr=s(UB);Qze=r(mkr,"GPT2Tokenizer"),mkr.forEach(t),Hze=r(kL," or "),JB=n(kL,"A",{href:!0});var gkr=s(JB);Uze=r(gkr,"GPT2TokenizerFast"),gkr.forEach(t),Jze=r(kL," (GPT Neo model)"),kL.forEach(t),Yze=i(y),ss=n(y,"LI",{});var RL=s(ss);sU=n(RL,"STRONG",{});var hkr=s(sU);Kze=r(hkr,"herbert"),hkr.forEach(t),Zze=r(RL," \u2014 "),YB=n(RL,"A",{href:!0});var pkr=s(YB);eWe=r(pkr,"HerbertTokenizer"),pkr.forEach(t),oWe=r(RL," or "),KB=n(RL,"A",{href:!0});var _kr=s(KB);rWe=r(_kr,"HerbertTokenizerFast"),_kr.forEach(t),tWe=r(RL," (HerBERT model)"),RL.forEach(t),aWe=i(y),kg=n(y,"LI",{});var DTe=s(kg);lU=n(DTe,"STRONG",{});var ukr=s(lU);nWe=r(ukr,"hubert"),ukr.forEach(t),sWe=r(DTe," \u2014 "),ZB=n(DTe,"A",{href:!0});var bkr=s(ZB);lWe=r(bkr,"Wav2Vec2CTCTokenizer"),bkr.forEach(t),iWe=r(DTe," (Hubert model)"),DTe.forEach(t),dWe=i(y),ls=n(y,"LI",{});var SL=s(ls);iU=n(SL,"STRONG",{});var vkr=s(iU);cWe=r(vkr,"ibert"),vkr.forEach(t),fWe=r(SL," \u2014 "),ex=n(SL,"A",{href:!0});var Tkr=s(ex);mWe=r(Tkr,"RobertaTokenizer"),Tkr.forEach(t),gWe=r(SL," or "),ox=n(SL,"A",{href:!0});var Fkr=s(ox);hWe=r(Fkr,"RobertaTokenizerFast"),Fkr.forEach(t),pWe=r(SL," (I-BERT model)"),SL.forEach(t),_We=i(y),is=n(y,"LI",{});var PL=s(is);dU=n(PL,"STRONG",{});var Ckr=s(dU);uWe=r(Ckr,"layoutlm"),Ckr.forEach(t),bWe=r(PL," \u2014 "),rx=n(PL,"A",{href:!0});var Mkr=s(rx);vWe=r(Mkr,"LayoutLMTokenizer"),Mkr.forEach(t),TWe=r(PL," or "),tx=n(PL,"A",{href:!0});var Ekr=s(tx);FWe=r(Ekr,"LayoutLMTokenizerFast"),Ekr.forEach(t),CWe=r(PL," (LayoutLM model)"),PL.forEach(t),MWe=i(y),ds=n(y,"LI",{});var $L=s(ds);cU=n($L,"STRONG",{});var ykr=s(cU);EWe=r(ykr,"layoutlmv2"),ykr.forEach(t),yWe=r($L," \u2014 "),ax=n($L,"A",{href:!0});var wkr=s(ax);wWe=r(wkr,"LayoutLMv2Tokenizer"),wkr.forEach(t),AWe=r($L," or "),nx=n($L,"A",{href:!0});var Akr=s(nx);LWe=r(Akr,"LayoutLMv2TokenizerFast"),Akr.forEach(t),BWe=r($L," (LayoutLMv2 model)"),$L.forEach(t),xWe=i(y),cs=n(y,"LI",{});var IL=s(cs);fU=n(IL,"STRONG",{});var Lkr=s(fU);kWe=r(Lkr,"layoutxlm"),Lkr.forEach(t),RWe=r(IL," \u2014 "),sx=n(IL,"A",{href:!0});var Bkr=s(sx);SWe=r(Bkr,"LayoutXLMTokenizer"),Bkr.forEach(t),PWe=r(IL," or "),lx=n(IL,"A",{href:!0});var xkr=s(lx);$We=r(xkr,"LayoutXLMTokenizerFast"),xkr.forEach(t),IWe=r(IL," (LayoutXLM model)"),IL.forEach(t),DWe=i(y),fs=n(y,"LI",{});var DL=s(fs);mU=n(DL,"STRONG",{});var kkr=s(mU);jWe=r(kkr,"led"),kkr.forEach(t),NWe=r(DL," \u2014 "),ix=n(DL,"A",{href:!0});var Rkr=s(ix);qWe=r(Rkr,"LEDTokenizer"),Rkr.forEach(t),GWe=r(DL," or "),dx=n(DL,"A",{href:!0});var Skr=s(dx);OWe=r(Skr,"LEDTokenizerFast"),Skr.forEach(t),XWe=r(DL," (LED model)"),DL.forEach(t),VWe=i(y),ms=n(y,"LI",{});var jL=s(ms);gU=n(jL,"STRONG",{});var Pkr=s(gU);zWe=r(Pkr,"longformer"),Pkr.forEach(t),WWe=r(jL," \u2014 "),cx=n(jL,"A",{href:!0});var $kr=s(cx);QWe=r($kr,"LongformerTokenizer"),$kr.forEach(t),HWe=r(jL," or "),fx=n(jL,"A",{href:!0});var Ikr=s(fx);UWe=r(Ikr,"LongformerTokenizerFast"),Ikr.forEach(t),JWe=r(jL," (Longformer model)"),jL.forEach(t),YWe=i(y),Rg=n(y,"LI",{});var jTe=s(Rg);hU=n(jTe,"STRONG",{});var Dkr=s(hU);KWe=r(Dkr,"luke"),Dkr.forEach(t),ZWe=r(jTe," \u2014 "),mx=n(jTe,"A",{href:!0});var jkr=s(mx);eQe=r(jkr,"LukeTokenizer"),jkr.forEach(t),oQe=r(jTe," (LUKE model)"),jTe.forEach(t),rQe=i(y),gs=n(y,"LI",{});var NL=s(gs);pU=n(NL,"STRONG",{});var Nkr=s(pU);tQe=r(Nkr,"lxmert"),Nkr.forEach(t),aQe=r(NL," \u2014 "),gx=n(NL,"A",{href:!0});var qkr=s(gx);nQe=r(qkr,"LxmertTokenizer"),qkr.forEach(t),sQe=r(NL," or "),hx=n(NL,"A",{href:!0});var Gkr=s(hx);lQe=r(Gkr,"LxmertTokenizerFast"),Gkr.forEach(t),iQe=r(NL," (LXMERT model)"),NL.forEach(t),dQe=i(y),Sg=n(y,"LI",{});var NTe=s(Sg);_U=n(NTe,"STRONG",{});var Okr=s(_U);cQe=r(Okr,"m2m_100"),Okr.forEach(t),fQe=r(NTe," \u2014 "),px=n(NTe,"A",{href:!0});var Xkr=s(px);mQe=r(Xkr,"M2M100Tokenizer"),Xkr.forEach(t),gQe=r(NTe," (M2M100 model)"),NTe.forEach(t),hQe=i(y),Pg=n(y,"LI",{});var qTe=s(Pg);uU=n(qTe,"STRONG",{});var Vkr=s(uU);pQe=r(Vkr,"marian"),Vkr.forEach(t),_Qe=r(qTe," \u2014 "),_x=n(qTe,"A",{href:!0});var zkr=s(_x);uQe=r(zkr,"MarianTokenizer"),zkr.forEach(t),bQe=r(qTe," (Marian model)"),qTe.forEach(t),vQe=i(y),hs=n(y,"LI",{});var qL=s(hs);bU=n(qL,"STRONG",{});var Wkr=s(bU);TQe=r(Wkr,"mbart"),Wkr.forEach(t),FQe=r(qL," \u2014 "),ux=n(qL,"A",{href:!0});var Qkr=s(ux);CQe=r(Qkr,"MBartTokenizer"),Qkr.forEach(t),MQe=r(qL," or "),bx=n(qL,"A",{href:!0});var Hkr=s(bx);EQe=r(Hkr,"MBartTokenizerFast"),Hkr.forEach(t),yQe=r(qL," (mBART model)"),qL.forEach(t),wQe=i(y),ps=n(y,"LI",{});var GL=s(ps);vU=n(GL,"STRONG",{});var Ukr=s(vU);AQe=r(Ukr,"mbart50"),Ukr.forEach(t),LQe=r(GL," \u2014 "),vx=n(GL,"A",{href:!0});var Jkr=s(vx);BQe=r(Jkr,"MBart50Tokenizer"),Jkr.forEach(t),xQe=r(GL," or "),Tx=n(GL,"A",{href:!0});var Ykr=s(Tx);kQe=r(Ykr,"MBart50TokenizerFast"),Ykr.forEach(t),RQe=r(GL," (mBART-50 model)"),GL.forEach(t),SQe=i(y),$g=n(y,"LI",{});var GTe=s($g);TU=n(GTe,"STRONG",{});var Kkr=s(TU);PQe=r(Kkr,"mluke"),Kkr.forEach(t),$Qe=r(GTe," \u2014 "),Fx=n(GTe,"A",{href:!0});var Zkr=s(Fx);IQe=r(Zkr,"MLukeTokenizer"),Zkr.forEach(t),DQe=r(GTe," (mLUKE model)"),GTe.forEach(t),jQe=i(y),_s=n(y,"LI",{});var OL=s(_s);FU=n(OL,"STRONG",{});var eRr=s(FU);NQe=r(eRr,"mobilebert"),eRr.forEach(t),qQe=r(OL," \u2014 "),Cx=n(OL,"A",{href:!0});var oRr=s(Cx);GQe=r(oRr,"MobileBertTokenizer"),oRr.forEach(t),OQe=r(OL," or "),Mx=n(OL,"A",{href:!0});var rRr=s(Mx);XQe=r(rRr,"MobileBertTokenizerFast"),rRr.forEach(t),VQe=r(OL," (MobileBERT model)"),OL.forEach(t),zQe=i(y),us=n(y,"LI",{});var XL=s(us);CU=n(XL,"STRONG",{});var tRr=s(CU);WQe=r(tRr,"mpnet"),tRr.forEach(t),QQe=r(XL," \u2014 "),Ex=n(XL,"A",{href:!0});var aRr=s(Ex);HQe=r(aRr,"MPNetTokenizer"),aRr.forEach(t),UQe=r(XL," or "),yx=n(XL,"A",{href:!0});var nRr=s(yx);JQe=r(nRr,"MPNetTokenizerFast"),nRr.forEach(t),YQe=r(XL," (MPNet model)"),XL.forEach(t),KQe=i(y),bs=n(y,"LI",{});var VL=s(bs);MU=n(VL,"STRONG",{});var sRr=s(MU);ZQe=r(sRr,"mt5"),sRr.forEach(t),eHe=r(VL," \u2014 "),wx=n(VL,"A",{href:!0});var lRr=s(wx);oHe=r(lRr,"MT5Tokenizer"),lRr.forEach(t),rHe=r(VL," or "),Ax=n(VL,"A",{href:!0});var iRr=s(Ax);tHe=r(iRr,"MT5TokenizerFast"),iRr.forEach(t),aHe=r(VL," (mT5 model)"),VL.forEach(t),nHe=i(y),vs=n(y,"LI",{});var zL=s(vs);EU=n(zL,"STRONG",{});var dRr=s(EU);sHe=r(dRr,"openai-gpt"),dRr.forEach(t),lHe=r(zL," \u2014 "),Lx=n(zL,"A",{href:!0});var cRr=s(Lx);iHe=r(cRr,"OpenAIGPTTokenizer"),cRr.forEach(t),dHe=r(zL," or "),Bx=n(zL,"A",{href:!0});var fRr=s(Bx);cHe=r(fRr,"OpenAIGPTTokenizerFast"),fRr.forEach(t),fHe=r(zL," (OpenAI GPT model)"),zL.forEach(t),mHe=i(y),Ts=n(y,"LI",{});var WL=s(Ts);yU=n(WL,"STRONG",{});var mRr=s(yU);gHe=r(mRr,"pegasus"),mRr.forEach(t),hHe=r(WL," \u2014 "),xx=n(WL,"A",{href:!0});var gRr=s(xx);pHe=r(gRr,"PegasusTokenizer"),gRr.forEach(t),_He=r(WL," or "),kx=n(WL,"A",{href:!0});var hRr=s(kx);uHe=r(hRr,"PegasusTokenizerFast"),hRr.forEach(t),bHe=r(WL," (Pegasus model)"),WL.forEach(t),vHe=i(y),Ig=n(y,"LI",{});var OTe=s(Ig);wU=n(OTe,"STRONG",{});var pRr=s(wU);THe=r(pRr,"perceiver"),pRr.forEach(t),FHe=r(OTe," \u2014 "),Rx=n(OTe,"A",{href:!0});var _Rr=s(Rx);CHe=r(_Rr,"PerceiverTokenizer"),_Rr.forEach(t),MHe=r(OTe," (Perceiver model)"),OTe.forEach(t),EHe=i(y),Dg=n(y,"LI",{});var XTe=s(Dg);AU=n(XTe,"STRONG",{});var uRr=s(AU);yHe=r(uRr,"phobert"),uRr.forEach(t),wHe=r(XTe," \u2014 "),Sx=n(XTe,"A",{href:!0});var bRr=s(Sx);AHe=r(bRr,"PhobertTokenizer"),bRr.forEach(t),LHe=r(XTe," (PhoBERT model)"),XTe.forEach(t),BHe=i(y),jg=n(y,"LI",{});var VTe=s(jg);LU=n(VTe,"STRONG",{});var vRr=s(LU);xHe=r(vRr,"plbart"),vRr.forEach(t),kHe=r(VTe," \u2014 "),Px=n(VTe,"A",{href:!0});var TRr=s(Px);RHe=r(TRr,"PLBartTokenizer"),TRr.forEach(t),SHe=r(VTe," (PLBart model)"),VTe.forEach(t),PHe=i(y),Ng=n(y,"LI",{});var zTe=s(Ng);BU=n(zTe,"STRONG",{});var FRr=s(BU);$He=r(FRr,"prophetnet"),FRr.forEach(t),IHe=r(zTe," \u2014 "),$x=n(zTe,"A",{href:!0});var CRr=s($x);DHe=r(CRr,"ProphetNetTokenizer"),CRr.forEach(t),jHe=r(zTe," (ProphetNet model)"),zTe.forEach(t),NHe=i(y),Fs=n(y,"LI",{});var QL=s(Fs);xU=n(QL,"STRONG",{});var MRr=s(xU);qHe=r(MRr,"qdqbert"),MRr.forEach(t),GHe=r(QL," \u2014 "),Ix=n(QL,"A",{href:!0});var ERr=s(Ix);OHe=r(ERr,"BertTokenizer"),ERr.forEach(t),XHe=r(QL," or "),Dx=n(QL,"A",{href:!0});var yRr=s(Dx);VHe=r(yRr,"BertTokenizerFast"),yRr.forEach(t),zHe=r(QL," (QDQBert model)"),QL.forEach(t),WHe=i(y),qg=n(y,"LI",{});var WTe=s(qg);kU=n(WTe,"STRONG",{});var wRr=s(kU);QHe=r(wRr,"rag"),wRr.forEach(t),HHe=r(WTe," \u2014 "),jx=n(WTe,"A",{href:!0});var ARr=s(jx);UHe=r(ARr,"RagTokenizer"),ARr.forEach(t),JHe=r(WTe," (RAG model)"),WTe.forEach(t),YHe=i(y),Cs=n(y,"LI",{});var HL=s(Cs);RU=n(HL,"STRONG",{});var LRr=s(RU);KHe=r(LRr,"realm"),LRr.forEach(t),ZHe=r(HL," \u2014 "),Nx=n(HL,"A",{href:!0});var BRr=s(Nx);eUe=r(BRr,"RealmTokenizer"),BRr.forEach(t),oUe=r(HL," or "),qx=n(HL,"A",{href:!0});var xRr=s(qx);rUe=r(xRr,"RealmTokenizerFast"),xRr.forEach(t),tUe=r(HL," (Realm model)"),HL.forEach(t),aUe=i(y),Ms=n(y,"LI",{});var UL=s(Ms);SU=n(UL,"STRONG",{});var kRr=s(SU);nUe=r(kRr,"reformer"),kRr.forEach(t),sUe=r(UL," \u2014 "),Gx=n(UL,"A",{href:!0});var RRr=s(Gx);lUe=r(RRr,"ReformerTokenizer"),RRr.forEach(t),iUe=r(UL," or "),Ox=n(UL,"A",{href:!0});var SRr=s(Ox);dUe=r(SRr,"ReformerTokenizerFast"),SRr.forEach(t),cUe=r(UL," (Reformer model)"),UL.forEach(t),fUe=i(y),Es=n(y,"LI",{});var JL=s(Es);PU=n(JL,"STRONG",{});var PRr=s(PU);mUe=r(PRr,"rembert"),PRr.forEach(t),gUe=r(JL," \u2014 "),Xx=n(JL,"A",{href:!0});var $Rr=s(Xx);hUe=r($Rr,"RemBertTokenizer"),$Rr.forEach(t),pUe=r(JL," or "),Vx=n(JL,"A",{href:!0});var IRr=s(Vx);_Ue=r(IRr,"RemBertTokenizerFast"),IRr.forEach(t),uUe=r(JL," (RemBERT model)"),JL.forEach(t),bUe=i(y),ys=n(y,"LI",{});var YL=s(ys);$U=n(YL,"STRONG",{});var DRr=s($U);vUe=r(DRr,"retribert"),DRr.forEach(t),TUe=r(YL," \u2014 "),zx=n(YL,"A",{href:!0});var jRr=s(zx);FUe=r(jRr,"RetriBertTokenizer"),jRr.forEach(t),CUe=r(YL," or "),Wx=n(YL,"A",{href:!0});var NRr=s(Wx);MUe=r(NRr,"RetriBertTokenizerFast"),NRr.forEach(t),EUe=r(YL," (RetriBERT model)"),YL.forEach(t),yUe=i(y),ws=n(y,"LI",{});var KL=s(ws);IU=n(KL,"STRONG",{});var qRr=s(IU);wUe=r(qRr,"roberta"),qRr.forEach(t),AUe=r(KL," \u2014 "),Qx=n(KL,"A",{href:!0});var GRr=s(Qx);LUe=r(GRr,"RobertaTokenizer"),GRr.forEach(t),BUe=r(KL," or "),Hx=n(KL,"A",{href:!0});var ORr=s(Hx);xUe=r(ORr,"RobertaTokenizerFast"),ORr.forEach(t),kUe=r(KL," (RoBERTa model)"),KL.forEach(t),RUe=i(y),As=n(y,"LI",{});var ZL=s(As);DU=n(ZL,"STRONG",{});var XRr=s(DU);SUe=r(XRr,"roformer"),XRr.forEach(t),PUe=r(ZL," \u2014 "),Ux=n(ZL,"A",{href:!0});var VRr=s(Ux);$Ue=r(VRr,"RoFormerTokenizer"),VRr.forEach(t),IUe=r(ZL," or "),Jx=n(ZL,"A",{href:!0});var zRr=s(Jx);DUe=r(zRr,"RoFormerTokenizerFast"),zRr.forEach(t),jUe=r(ZL," (RoFormer model)"),ZL.forEach(t),NUe=i(y),Gg=n(y,"LI",{});var QTe=s(Gg);jU=n(QTe,"STRONG",{});var WRr=s(jU);qUe=r(WRr,"speech_to_text"),WRr.forEach(t),GUe=r(QTe," \u2014 "),Yx=n(QTe,"A",{href:!0});var QRr=s(Yx);OUe=r(QRr,"Speech2TextTokenizer"),QRr.forEach(t),XUe=r(QTe," (Speech2Text model)"),QTe.forEach(t),VUe=i(y),Og=n(y,"LI",{});var HTe=s(Og);NU=n(HTe,"STRONG",{});var HRr=s(NU);zUe=r(HRr,"speech_to_text_2"),HRr.forEach(t),WUe=r(HTe," \u2014 "),Kx=n(HTe,"A",{href:!0});var URr=s(Kx);QUe=r(URr,"Speech2Text2Tokenizer"),URr.forEach(t),HUe=r(HTe," (Speech2Text2 model)"),HTe.forEach(t),UUe=i(y),Ls=n(y,"LI",{});var e8=s(Ls);qU=n(e8,"STRONG",{});var JRr=s(qU);JUe=r(JRr,"splinter"),JRr.forEach(t),YUe=r(e8," \u2014 "),Zx=n(e8,"A",{href:!0});var YRr=s(Zx);KUe=r(YRr,"SplinterTokenizer"),YRr.forEach(t),ZUe=r(e8," or "),ek=n(e8,"A",{href:!0});var KRr=s(ek);eJe=r(KRr,"SplinterTokenizerFast"),KRr.forEach(t),oJe=r(e8," (Splinter model)"),e8.forEach(t),rJe=i(y),Bs=n(y,"LI",{});var o8=s(Bs);GU=n(o8,"STRONG",{});var ZRr=s(GU);tJe=r(ZRr,"squeezebert"),ZRr.forEach(t),aJe=r(o8," \u2014 "),ok=n(o8,"A",{href:!0});var eSr=s(ok);nJe=r(eSr,"SqueezeBertTokenizer"),eSr.forEach(t),sJe=r(o8," or "),rk=n(o8,"A",{href:!0});var oSr=s(rk);lJe=r(oSr,"SqueezeBertTokenizerFast"),oSr.forEach(t),iJe=r(o8," (SqueezeBERT model)"),o8.forEach(t),dJe=i(y),xs=n(y,"LI",{});var r8=s(xs);OU=n(r8,"STRONG",{});var rSr=s(OU);cJe=r(rSr,"t5"),rSr.forEach(t),fJe=r(r8," \u2014 "),tk=n(r8,"A",{href:!0});var tSr=s(tk);mJe=r(tSr,"T5Tokenizer"),tSr.forEach(t),gJe=r(r8," or "),ak=n(r8,"A",{href:!0});var aSr=s(ak);hJe=r(aSr,"T5TokenizerFast"),aSr.forEach(t),pJe=r(r8," (T5 model)"),r8.forEach(t),_Je=i(y),Xg=n(y,"LI",{});var UTe=s(Xg);XU=n(UTe,"STRONG",{});var nSr=s(XU);uJe=r(nSr,"tapas"),nSr.forEach(t),bJe=r(UTe," \u2014 "),nk=n(UTe,"A",{href:!0});var sSr=s(nk);vJe=r(sSr,"TapasTokenizer"),sSr.forEach(t),TJe=r(UTe," (TAPAS model)"),UTe.forEach(t),FJe=i(y),Vg=n(y,"LI",{});var JTe=s(Vg);VU=n(JTe,"STRONG",{});var lSr=s(VU);CJe=r(lSr,"transfo-xl"),lSr.forEach(t),MJe=r(JTe," \u2014 "),sk=n(JTe,"A",{href:!0});var iSr=s(sk);EJe=r(iSr,"TransfoXLTokenizer"),iSr.forEach(t),yJe=r(JTe," (Transformer-XL model)"),JTe.forEach(t),wJe=i(y),zg=n(y,"LI",{});var YTe=s(zg);zU=n(YTe,"STRONG",{});var dSr=s(zU);AJe=r(dSr,"wav2vec2"),dSr.forEach(t),LJe=r(YTe," \u2014 "),lk=n(YTe,"A",{href:!0});var cSr=s(lk);BJe=r(cSr,"Wav2Vec2CTCTokenizer"),cSr.forEach(t),xJe=r(YTe," (Wav2Vec2 model)"),YTe.forEach(t),kJe=i(y),Wg=n(y,"LI",{});var KTe=s(Wg);WU=n(KTe,"STRONG",{});var fSr=s(WU);RJe=r(fSr,"wav2vec2_phoneme"),fSr.forEach(t),SJe=r(KTe," \u2014 "),ik=n(KTe,"A",{href:!0});var mSr=s(ik);PJe=r(mSr,"Wav2Vec2PhonemeCTCTokenizer"),mSr.forEach(t),$Je=r(KTe," (Wav2Vec2Phoneme model)"),KTe.forEach(t),IJe=i(y),ks=n(y,"LI",{});var t8=s(ks);QU=n(t8,"STRONG",{});var gSr=s(QU);DJe=r(gSr,"xglm"),gSr.forEach(t),jJe=r(t8," \u2014 "),dk=n(t8,"A",{href:!0});var hSr=s(dk);NJe=r(hSr,"XGLMTokenizer"),hSr.forEach(t),qJe=r(t8," or "),ck=n(t8,"A",{href:!0});var pSr=s(ck);GJe=r(pSr,"XGLMTokenizerFast"),pSr.forEach(t),OJe=r(t8," (XGLM model)"),t8.forEach(t),XJe=i(y),Qg=n(y,"LI",{});var ZTe=s(Qg);HU=n(ZTe,"STRONG",{});var _Sr=s(HU);VJe=r(_Sr,"xlm"),_Sr.forEach(t),zJe=r(ZTe," \u2014 "),fk=n(ZTe,"A",{href:!0});var uSr=s(fk);WJe=r(uSr,"XLMTokenizer"),uSr.forEach(t),QJe=r(ZTe," (XLM model)"),ZTe.forEach(t),HJe=i(y),Hg=n(y,"LI",{});var eFe=s(Hg);UU=n(eFe,"STRONG",{});var bSr=s(UU);UJe=r(bSr,"xlm-prophetnet"),bSr.forEach(t),JJe=r(eFe," \u2014 "),mk=n(eFe,"A",{href:!0});var vSr=s(mk);YJe=r(vSr,"XLMProphetNetTokenizer"),vSr.forEach(t),KJe=r(eFe," (XLMProphetNet model)"),eFe.forEach(t),ZJe=i(y),Rs=n(y,"LI",{});var a8=s(Rs);JU=n(a8,"STRONG",{});var TSr=s(JU);eYe=r(TSr,"xlm-roberta"),TSr.forEach(t),oYe=r(a8," \u2014 "),gk=n(a8,"A",{href:!0});var FSr=s(gk);rYe=r(FSr,"XLMRobertaTokenizer"),FSr.forEach(t),tYe=r(a8," or "),hk=n(a8,"A",{href:!0});var CSr=s(hk);aYe=r(CSr,"XLMRobertaTokenizerFast"),CSr.forEach(t),nYe=r(a8," (XLM-RoBERTa model)"),a8.forEach(t),sYe=i(y),Ss=n(y,"LI",{});var n8=s(Ss);YU=n(n8,"STRONG",{});var MSr=s(YU);lYe=r(MSr,"xlnet"),MSr.forEach(t),iYe=r(n8," \u2014 "),pk=n(n8,"A",{href:!0});var ESr=s(pk);dYe=r(ESr,"XLNetTokenizer"),ESr.forEach(t),cYe=r(n8," or "),_k=n(n8,"A",{href:!0});var ySr=s(_k);fYe=r(ySr,"XLNetTokenizerFast"),ySr.forEach(t),mYe=r(n8," (XLNet model)"),n8.forEach(t),y.forEach(t),gYe=i(da),KU=n(da,"P",{});var wSr=s(KU);hYe=r(wSr,"Examples:"),wSr.forEach(t),pYe=i(da),m(GM.$$.fragment,da),da.forEach(t),_Ye=i(js),Ug=n(js,"DIV",{class:!0});var Gxe=s(Ug);m(OM.$$.fragment,Gxe),uYe=i(Gxe),ZU=n(Gxe,"P",{});var ASr=s(ZU);bYe=r(ASr,"Register a new tokenizer in this mapping."),ASr.forEach(t),Gxe.forEach(t),js.forEach(t),N7e=i(c),qi=n(c,"H2",{class:!0});var Oxe=s(qi);Jg=n(Oxe,"A",{id:!0,class:!0,href:!0});var LSr=s(Jg);eJ=n(LSr,"SPAN",{});var BSr=s(eJ);m(XM.$$.fragment,BSr),BSr.forEach(t),LSr.forEach(t),vYe=i(Oxe),oJ=n(Oxe,"SPAN",{});var xSr=s(oJ);TYe=r(xSr,"AutoFeatureExtractor"),xSr.forEach(t),Oxe.forEach(t),q7e=i(c),zo=n(c,"DIV",{class:!0});var Ns=s(zo);m(VM.$$.fragment,Ns),FYe=i(Ns),zM=n(Ns,"P",{});var Xxe=s(zM);CYe=r(Xxe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),uk=n(Xxe,"A",{href:!0});var kSr=s(uk);MYe=r(kSr,"AutoFeatureExtractor.from_pretrained()"),kSr.forEach(t),EYe=r(Xxe," class method."),Xxe.forEach(t),yYe=i(Ns),WM=n(Ns,"P",{});var Vxe=s(WM);wYe=r(Vxe,"This class cannot be instantiated directly using "),rJ=n(Vxe,"CODE",{});var RSr=s(rJ);AYe=r(RSr,"__init__()"),RSr.forEach(t),LYe=r(Vxe," (throws an error)."),Vxe.forEach(t),BYe=i(Ns),xe=n(Ns,"DIV",{class:!0});var St=s(xe);m(QM.$$.fragment,St),xYe=i(St),tJ=n(St,"P",{});var SSr=s(tJ);kYe=r(SSr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),SSr.forEach(t),RYe=i(St),ja=n(St,"P",{});var w4=s(ja);SYe=r(w4,"The feature extractor class to instantiate is selected based on the "),aJ=n(w4,"CODE",{});var PSr=s(aJ);PYe=r(PSr,"model_type"),PSr.forEach(t),$Ye=r(w4,` property of the config object
(either passed as an argument or loaded from `),nJ=n(w4,"CODE",{});var $Sr=s(nJ);IYe=r($Sr,"pretrained_model_name_or_path"),$Sr.forEach(t),DYe=r(w4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),sJ=n(w4,"CODE",{});var ISr=s(sJ);jYe=r(ISr,"pretrained_model_name_or_path"),ISr.forEach(t),NYe=r(w4,":"),w4.forEach(t),qYe=i(St),se=n(St,"UL",{});var de=s(se);Yg=n(de,"LI",{});var oFe=s(Yg);lJ=n(oFe,"STRONG",{});var DSr=s(lJ);GYe=r(DSr,"beit"),DSr.forEach(t),OYe=r(oFe," \u2014 "),bk=n(oFe,"A",{href:!0});var jSr=s(bk);XYe=r(jSr,"BeitFeatureExtractor"),jSr.forEach(t),VYe=r(oFe," (BEiT model)"),oFe.forEach(t),zYe=i(de),Kg=n(de,"LI",{});var rFe=s(Kg);iJ=n(rFe,"STRONG",{});var NSr=s(iJ);WYe=r(NSr,"clip"),NSr.forEach(t),QYe=r(rFe," \u2014 "),vk=n(rFe,"A",{href:!0});var qSr=s(vk);HYe=r(qSr,"CLIPFeatureExtractor"),qSr.forEach(t),UYe=r(rFe," (CLIP model)"),rFe.forEach(t),JYe=i(de),Zg=n(de,"LI",{});var tFe=s(Zg);dJ=n(tFe,"STRONG",{});var GSr=s(dJ);YYe=r(GSr,"convnext"),GSr.forEach(t),KYe=r(tFe," \u2014 "),Tk=n(tFe,"A",{href:!0});var OSr=s(Tk);ZYe=r(OSr,"ConvNextFeatureExtractor"),OSr.forEach(t),eKe=r(tFe," (ConvNext model)"),tFe.forEach(t),oKe=i(de),eh=n(de,"LI",{});var aFe=s(eh);cJ=n(aFe,"STRONG",{});var XSr=s(cJ);rKe=r(XSr,"deit"),XSr.forEach(t),tKe=r(aFe," \u2014 "),Fk=n(aFe,"A",{href:!0});var VSr=s(Fk);aKe=r(VSr,"DeiTFeatureExtractor"),VSr.forEach(t),nKe=r(aFe," (DeiT model)"),aFe.forEach(t),sKe=i(de),oh=n(de,"LI",{});var nFe=s(oh);fJ=n(nFe,"STRONG",{});var zSr=s(fJ);lKe=r(zSr,"detr"),zSr.forEach(t),iKe=r(nFe," \u2014 "),Ck=n(nFe,"A",{href:!0});var WSr=s(Ck);dKe=r(WSr,"DetrFeatureExtractor"),WSr.forEach(t),cKe=r(nFe," (DETR model)"),nFe.forEach(t),fKe=i(de),rh=n(de,"LI",{});var sFe=s(rh);mJ=n(sFe,"STRONG",{});var QSr=s(mJ);mKe=r(QSr,"hubert"),QSr.forEach(t),gKe=r(sFe," \u2014 "),Mk=n(sFe,"A",{href:!0});var HSr=s(Mk);hKe=r(HSr,"Wav2Vec2FeatureExtractor"),HSr.forEach(t),pKe=r(sFe," (Hubert model)"),sFe.forEach(t),_Ke=i(de),th=n(de,"LI",{});var lFe=s(th);gJ=n(lFe,"STRONG",{});var USr=s(gJ);uKe=r(USr,"layoutlmv2"),USr.forEach(t),bKe=r(lFe," \u2014 "),Ek=n(lFe,"A",{href:!0});var JSr=s(Ek);vKe=r(JSr,"LayoutLMv2FeatureExtractor"),JSr.forEach(t),TKe=r(lFe," (LayoutLMv2 model)"),lFe.forEach(t),FKe=i(de),ah=n(de,"LI",{});var iFe=s(ah);hJ=n(iFe,"STRONG",{});var YSr=s(hJ);CKe=r(YSr,"perceiver"),YSr.forEach(t),MKe=r(iFe," \u2014 "),yk=n(iFe,"A",{href:!0});var KSr=s(yk);EKe=r(KSr,"PerceiverFeatureExtractor"),KSr.forEach(t),yKe=r(iFe," (Perceiver model)"),iFe.forEach(t),wKe=i(de),nh=n(de,"LI",{});var dFe=s(nh);pJ=n(dFe,"STRONG",{});var ZSr=s(pJ);AKe=r(ZSr,"poolformer"),ZSr.forEach(t),LKe=r(dFe," \u2014 "),wk=n(dFe,"A",{href:!0});var ePr=s(wk);BKe=r(ePr,"PoolFormerFeatureExtractor"),ePr.forEach(t),xKe=r(dFe," (PoolFormer model)"),dFe.forEach(t),kKe=i(de),sh=n(de,"LI",{});var cFe=s(sh);_J=n(cFe,"STRONG",{});var oPr=s(_J);RKe=r(oPr,"segformer"),oPr.forEach(t),SKe=r(cFe," \u2014 "),Ak=n(cFe,"A",{href:!0});var rPr=s(Ak);PKe=r(rPr,"SegformerFeatureExtractor"),rPr.forEach(t),$Ke=r(cFe," (SegFormer model)"),cFe.forEach(t),IKe=i(de),lh=n(de,"LI",{});var fFe=s(lh);uJ=n(fFe,"STRONG",{});var tPr=s(uJ);DKe=r(tPr,"speech_to_text"),tPr.forEach(t),jKe=r(fFe," \u2014 "),Lk=n(fFe,"A",{href:!0});var aPr=s(Lk);NKe=r(aPr,"Speech2TextFeatureExtractor"),aPr.forEach(t),qKe=r(fFe," (Speech2Text model)"),fFe.forEach(t),GKe=i(de),ih=n(de,"LI",{});var mFe=s(ih);bJ=n(mFe,"STRONG",{});var nPr=s(bJ);OKe=r(nPr,"swin"),nPr.forEach(t),XKe=r(mFe," \u2014 "),Bk=n(mFe,"A",{href:!0});var sPr=s(Bk);VKe=r(sPr,"ViTFeatureExtractor"),sPr.forEach(t),zKe=r(mFe," (Swin model)"),mFe.forEach(t),WKe=i(de),dh=n(de,"LI",{});var gFe=s(dh);vJ=n(gFe,"STRONG",{});var lPr=s(vJ);QKe=r(lPr,"vit"),lPr.forEach(t),HKe=r(gFe," \u2014 "),xk=n(gFe,"A",{href:!0});var iPr=s(xk);UKe=r(iPr,"ViTFeatureExtractor"),iPr.forEach(t),JKe=r(gFe," (ViT model)"),gFe.forEach(t),YKe=i(de),ch=n(de,"LI",{});var hFe=s(ch);TJ=n(hFe,"STRONG",{});var dPr=s(TJ);KKe=r(dPr,"vit_mae"),dPr.forEach(t),ZKe=r(hFe," \u2014 "),kk=n(hFe,"A",{href:!0});var cPr=s(kk);eZe=r(cPr,"ViTFeatureExtractor"),cPr.forEach(t),oZe=r(hFe," (ViTMAE model)"),hFe.forEach(t),rZe=i(de),fh=n(de,"LI",{});var pFe=s(fh);FJ=n(pFe,"STRONG",{});var fPr=s(FJ);tZe=r(fPr,"wav2vec2"),fPr.forEach(t),aZe=r(pFe," \u2014 "),Rk=n(pFe,"A",{href:!0});var mPr=s(Rk);nZe=r(mPr,"Wav2Vec2FeatureExtractor"),mPr.forEach(t),sZe=r(pFe," (Wav2Vec2 model)"),pFe.forEach(t),de.forEach(t),lZe=i(St),m(mh.$$.fragment,St),iZe=i(St),CJ=n(St,"P",{});var gPr=s(CJ);dZe=r(gPr,"Examples:"),gPr.forEach(t),cZe=i(St),m(HM.$$.fragment,St),St.forEach(t),fZe=i(Ns),gh=n(Ns,"DIV",{class:!0});var zxe=s(gh);m(UM.$$.fragment,zxe),mZe=i(zxe),MJ=n(zxe,"P",{});var hPr=s(MJ);gZe=r(hPr,"Register a new feature extractor for this class."),hPr.forEach(t),zxe.forEach(t),Ns.forEach(t),G7e=i(c),Gi=n(c,"H2",{class:!0});var Wxe=s(Gi);hh=n(Wxe,"A",{id:!0,class:!0,href:!0});var pPr=s(hh);EJ=n(pPr,"SPAN",{});var _Pr=s(EJ);m(JM.$$.fragment,_Pr),_Pr.forEach(t),pPr.forEach(t),hZe=i(Wxe),yJ=n(Wxe,"SPAN",{});var uPr=s(yJ);pZe=r(uPr,"AutoProcessor"),uPr.forEach(t),Wxe.forEach(t),O7e=i(c),Wo=n(c,"DIV",{class:!0});var qs=s(Wo);m(YM.$$.fragment,qs),_Ze=i(qs),KM=n(qs,"P",{});var Qxe=s(KM);uZe=r(Qxe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Sk=n(Qxe,"A",{href:!0});var bPr=s(Sk);bZe=r(bPr,"AutoProcessor.from_pretrained()"),bPr.forEach(t),vZe=r(Qxe," class method."),Qxe.forEach(t),TZe=i(qs),ZM=n(qs,"P",{});var Hxe=s(ZM);FZe=r(Hxe,"This class cannot be instantiated directly using "),wJ=n(Hxe,"CODE",{});var vPr=s(wJ);CZe=r(vPr,"__init__()"),vPr.forEach(t),MZe=r(Hxe," (throws an error)."),Hxe.forEach(t),EZe=i(qs),ke=n(qs,"DIV",{class:!0});var Pt=s(ke);m(eE.$$.fragment,Pt),yZe=i(Pt),AJ=n(Pt,"P",{});var TPr=s(AJ);wZe=r(TPr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),TPr.forEach(t),AZe=i(Pt),Oi=n(Pt,"P",{});var IV=s(Oi);LZe=r(IV,"The processor class to instantiate is selected based on the "),LJ=n(IV,"CODE",{});var FPr=s(LJ);BZe=r(FPr,"model_type"),FPr.forEach(t),xZe=r(IV,` property of the config object (either
passed as an argument or loaded from `),BJ=n(IV,"CODE",{});var CPr=s(BJ);kZe=r(CPr,"pretrained_model_name_or_path"),CPr.forEach(t),RZe=r(IV," if possible):"),IV.forEach(t),SZe=i(Pt),we=n(Pt,"UL",{});var jo=s(we);ph=n(jo,"LI",{});var _Fe=s(ph);xJ=n(_Fe,"STRONG",{});var MPr=s(xJ);PZe=r(MPr,"clip"),MPr.forEach(t),$Ze=r(_Fe," \u2014 "),Pk=n(_Fe,"A",{href:!0});var EPr=s(Pk);IZe=r(EPr,"CLIPProcessor"),EPr.forEach(t),DZe=r(_Fe," (CLIP model)"),_Fe.forEach(t),jZe=i(jo),_h=n(jo,"LI",{});var uFe=s(_h);kJ=n(uFe,"STRONG",{});var yPr=s(kJ);NZe=r(yPr,"layoutlmv2"),yPr.forEach(t),qZe=r(uFe," \u2014 "),$k=n(uFe,"A",{href:!0});var wPr=s($k);GZe=r(wPr,"LayoutLMv2Processor"),wPr.forEach(t),OZe=r(uFe," (LayoutLMv2 model)"),uFe.forEach(t),XZe=i(jo),uh=n(jo,"LI",{});var bFe=s(uh);RJ=n(bFe,"STRONG",{});var APr=s(RJ);VZe=r(APr,"layoutxlm"),APr.forEach(t),zZe=r(bFe," \u2014 "),Ik=n(bFe,"A",{href:!0});var LPr=s(Ik);WZe=r(LPr,"LayoutXLMProcessor"),LPr.forEach(t),QZe=r(bFe," (LayoutXLM model)"),bFe.forEach(t),HZe=i(jo),bh=n(jo,"LI",{});var vFe=s(bh);SJ=n(vFe,"STRONG",{});var BPr=s(SJ);UZe=r(BPr,"speech_to_text"),BPr.forEach(t),JZe=r(vFe," \u2014 "),Dk=n(vFe,"A",{href:!0});var xPr=s(Dk);YZe=r(xPr,"Speech2TextProcessor"),xPr.forEach(t),KZe=r(vFe," (Speech2Text model)"),vFe.forEach(t),ZZe=i(jo),vh=n(jo,"LI",{});var TFe=s(vh);PJ=n(TFe,"STRONG",{});var kPr=s(PJ);eeo=r(kPr,"speech_to_text_2"),kPr.forEach(t),oeo=r(TFe," \u2014 "),jk=n(TFe,"A",{href:!0});var RPr=s(jk);reo=r(RPr,"Speech2Text2Processor"),RPr.forEach(t),teo=r(TFe," (Speech2Text2 model)"),TFe.forEach(t),aeo=i(jo),Th=n(jo,"LI",{});var FFe=s(Th);$J=n(FFe,"STRONG",{});var SPr=s($J);neo=r(SPr,"trocr"),SPr.forEach(t),seo=r(FFe," \u2014 "),Nk=n(FFe,"A",{href:!0});var PPr=s(Nk);leo=r(PPr,"TrOCRProcessor"),PPr.forEach(t),ieo=r(FFe," (TrOCR model)"),FFe.forEach(t),deo=i(jo),Fh=n(jo,"LI",{});var CFe=s(Fh);IJ=n(CFe,"STRONG",{});var $Pr=s(IJ);ceo=r($Pr,"vision-text-dual-encoder"),$Pr.forEach(t),feo=r(CFe," \u2014 "),qk=n(CFe,"A",{href:!0});var IPr=s(qk);meo=r(IPr,"VisionTextDualEncoderProcessor"),IPr.forEach(t),geo=r(CFe," (VisionTextDualEncoder model)"),CFe.forEach(t),heo=i(jo),Ch=n(jo,"LI",{});var MFe=s(Ch);DJ=n(MFe,"STRONG",{});var DPr=s(DJ);peo=r(DPr,"wav2vec2"),DPr.forEach(t),_eo=r(MFe," \u2014 "),Gk=n(MFe,"A",{href:!0});var jPr=s(Gk);ueo=r(jPr,"Wav2Vec2Processor"),jPr.forEach(t),beo=r(MFe," (Wav2Vec2 model)"),MFe.forEach(t),jo.forEach(t),veo=i(Pt),m(Mh.$$.fragment,Pt),Teo=i(Pt),jJ=n(Pt,"P",{});var NPr=s(jJ);Feo=r(NPr,"Examples:"),NPr.forEach(t),Ceo=i(Pt),m(oE.$$.fragment,Pt),Pt.forEach(t),Meo=i(qs),Eh=n(qs,"DIV",{class:!0});var Uxe=s(Eh);m(rE.$$.fragment,Uxe),Eeo=i(Uxe),NJ=n(Uxe,"P",{});var qPr=s(NJ);yeo=r(qPr,"Register a new processor for this class."),qPr.forEach(t),Uxe.forEach(t),qs.forEach(t),X7e=i(c),Xi=n(c,"H2",{class:!0});var Jxe=s(Xi);yh=n(Jxe,"A",{id:!0,class:!0,href:!0});var GPr=s(yh);qJ=n(GPr,"SPAN",{});var OPr=s(qJ);m(tE.$$.fragment,OPr),OPr.forEach(t),GPr.forEach(t),weo=i(Jxe),GJ=n(Jxe,"SPAN",{});var XPr=s(GJ);Aeo=r(XPr,"AutoModel"),XPr.forEach(t),Jxe.forEach(t),V7e=i(c),Qo=n(c,"DIV",{class:!0});var Gs=s(Qo);m(aE.$$.fragment,Gs),Leo=i(Gs),Vi=n(Gs,"P",{});var DV=s(Vi);Beo=r(DV,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OJ=n(DV,"CODE",{});var VPr=s(OJ);xeo=r(VPr,"from_pretrained()"),VPr.forEach(t),keo=r(DV,"class method or the "),XJ=n(DV,"CODE",{});var zPr=s(XJ);Reo=r(zPr,"from_config()"),zPr.forEach(t),Seo=r(DV,`class
method.`),DV.forEach(t),Peo=i(Gs),nE=n(Gs,"P",{});var Yxe=s(nE);$eo=r(Yxe,"This class cannot be instantiated directly using "),VJ=n(Yxe,"CODE",{});var WPr=s(VJ);Ieo=r(WPr,"__init__()"),WPr.forEach(t),Deo=r(Yxe," (throws an error)."),Yxe.forEach(t),jeo=i(Gs),qr=n(Gs,"DIV",{class:!0});var Os=s(qr);m(sE.$$.fragment,Os),Neo=i(Os),zJ=n(Os,"P",{});var QPr=s(zJ);qeo=r(QPr,"Instantiates one of the base model classes of the library from a configuration."),QPr.forEach(t),Geo=i(Os),zi=n(Os,"P",{});var jV=s(zi);Oeo=r(jV,`Note:
Loading a model from its configuration file does `),WJ=n(jV,"STRONG",{});var HPr=s(WJ);Xeo=r(HPr,"not"),HPr.forEach(t),Veo=r(jV,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(jV,"CODE",{});var UPr=s(QJ);zeo=r(UPr,"from_pretrained()"),UPr.forEach(t),Weo=r(jV,"to load the model weights."),jV.forEach(t),Qeo=i(Os),HJ=n(Os,"P",{});var JPr=s(HJ);Heo=r(JPr,"Examples:"),JPr.forEach(t),Ueo=i(Os),m(lE.$$.fragment,Os),Os.forEach(t),Jeo=i(Gs),Re=n(Gs,"DIV",{class:!0});var $t=s(Re);m(iE.$$.fragment,$t),Yeo=i($t),UJ=n($t,"P",{});var YPr=s(UJ);Keo=r(YPr,"Instantiate one of the base model classes of the library from a pretrained model."),YPr.forEach(t),Zeo=i($t),Na=n($t,"P",{});var A4=s(Na);eoo=r(A4,"The model class to instantiate is selected based on the "),JJ=n(A4,"CODE",{});var KPr=s(JJ);ooo=r(KPr,"model_type"),KPr.forEach(t),roo=r(A4,` property of the config object (either
passed as an argument or loaded from `),YJ=n(A4,"CODE",{});var ZPr=s(YJ);too=r(ZPr,"pretrained_model_name_or_path"),ZPr.forEach(t),aoo=r(A4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KJ=n(A4,"CODE",{});var e$r=s(KJ);noo=r(e$r,"pretrained_model_name_or_path"),e$r.forEach(t),soo=r(A4,":"),A4.forEach(t),loo=i($t),F=n($t,"UL",{});var C=s(F);wh=n(C,"LI",{});var EFe=s(wh);ZJ=n(EFe,"STRONG",{});var o$r=s(ZJ);ioo=r(o$r,"albert"),o$r.forEach(t),doo=r(EFe," \u2014 "),Ok=n(EFe,"A",{href:!0});var r$r=s(Ok);coo=r(r$r,"AlbertModel"),r$r.forEach(t),foo=r(EFe," (ALBERT model)"),EFe.forEach(t),moo=i(C),Ah=n(C,"LI",{});var yFe=s(Ah);eY=n(yFe,"STRONG",{});var t$r=s(eY);goo=r(t$r,"bart"),t$r.forEach(t),hoo=r(yFe," \u2014 "),Xk=n(yFe,"A",{href:!0});var a$r=s(Xk);poo=r(a$r,"BartModel"),a$r.forEach(t),_oo=r(yFe," (BART model)"),yFe.forEach(t),uoo=i(C),Lh=n(C,"LI",{});var wFe=s(Lh);oY=n(wFe,"STRONG",{});var n$r=s(oY);boo=r(n$r,"beit"),n$r.forEach(t),voo=r(wFe," \u2014 "),Vk=n(wFe,"A",{href:!0});var s$r=s(Vk);Too=r(s$r,"BeitModel"),s$r.forEach(t),Foo=r(wFe," (BEiT model)"),wFe.forEach(t),Coo=i(C),Bh=n(C,"LI",{});var AFe=s(Bh);rY=n(AFe,"STRONG",{});var l$r=s(rY);Moo=r(l$r,"bert"),l$r.forEach(t),Eoo=r(AFe," \u2014 "),zk=n(AFe,"A",{href:!0});var i$r=s(zk);yoo=r(i$r,"BertModel"),i$r.forEach(t),woo=r(AFe," (BERT model)"),AFe.forEach(t),Aoo=i(C),xh=n(C,"LI",{});var LFe=s(xh);tY=n(LFe,"STRONG",{});var d$r=s(tY);Loo=r(d$r,"bert-generation"),d$r.forEach(t),Boo=r(LFe," \u2014 "),Wk=n(LFe,"A",{href:!0});var c$r=s(Wk);xoo=r(c$r,"BertGenerationEncoder"),c$r.forEach(t),koo=r(LFe," (Bert Generation model)"),LFe.forEach(t),Roo=i(C),kh=n(C,"LI",{});var BFe=s(kh);aY=n(BFe,"STRONG",{});var f$r=s(aY);Soo=r(f$r,"big_bird"),f$r.forEach(t),Poo=r(BFe," \u2014 "),Qk=n(BFe,"A",{href:!0});var m$r=s(Qk);$oo=r(m$r,"BigBirdModel"),m$r.forEach(t),Ioo=r(BFe," (BigBird model)"),BFe.forEach(t),Doo=i(C),Rh=n(C,"LI",{});var xFe=s(Rh);nY=n(xFe,"STRONG",{});var g$r=s(nY);joo=r(g$r,"bigbird_pegasus"),g$r.forEach(t),Noo=r(xFe," \u2014 "),Hk=n(xFe,"A",{href:!0});var h$r=s(Hk);qoo=r(h$r,"BigBirdPegasusModel"),h$r.forEach(t),Goo=r(xFe," (BigBirdPegasus model)"),xFe.forEach(t),Ooo=i(C),Sh=n(C,"LI",{});var kFe=s(Sh);sY=n(kFe,"STRONG",{});var p$r=s(sY);Xoo=r(p$r,"blenderbot"),p$r.forEach(t),Voo=r(kFe," \u2014 "),Uk=n(kFe,"A",{href:!0});var _$r=s(Uk);zoo=r(_$r,"BlenderbotModel"),_$r.forEach(t),Woo=r(kFe," (Blenderbot model)"),kFe.forEach(t),Qoo=i(C),Ph=n(C,"LI",{});var RFe=s(Ph);lY=n(RFe,"STRONG",{});var u$r=s(lY);Hoo=r(u$r,"blenderbot-small"),u$r.forEach(t),Uoo=r(RFe," \u2014 "),Jk=n(RFe,"A",{href:!0});var b$r=s(Jk);Joo=r(b$r,"BlenderbotSmallModel"),b$r.forEach(t),Yoo=r(RFe," (BlenderbotSmall model)"),RFe.forEach(t),Koo=i(C),$h=n(C,"LI",{});var SFe=s($h);iY=n(SFe,"STRONG",{});var v$r=s(iY);Zoo=r(v$r,"camembert"),v$r.forEach(t),ero=r(SFe," \u2014 "),Yk=n(SFe,"A",{href:!0});var T$r=s(Yk);oro=r(T$r,"CamembertModel"),T$r.forEach(t),rro=r(SFe," (CamemBERT model)"),SFe.forEach(t),tro=i(C),Ih=n(C,"LI",{});var PFe=s(Ih);dY=n(PFe,"STRONG",{});var F$r=s(dY);aro=r(F$r,"canine"),F$r.forEach(t),nro=r(PFe," \u2014 "),Kk=n(PFe,"A",{href:!0});var C$r=s(Kk);sro=r(C$r,"CanineModel"),C$r.forEach(t),lro=r(PFe," (Canine model)"),PFe.forEach(t),iro=i(C),Dh=n(C,"LI",{});var $Fe=s(Dh);cY=n($Fe,"STRONG",{});var M$r=s(cY);dro=r(M$r,"clip"),M$r.forEach(t),cro=r($Fe," \u2014 "),Zk=n($Fe,"A",{href:!0});var E$r=s(Zk);fro=r(E$r,"CLIPModel"),E$r.forEach(t),mro=r($Fe," (CLIP model)"),$Fe.forEach(t),gro=i(C),jh=n(C,"LI",{});var IFe=s(jh);fY=n(IFe,"STRONG",{});var y$r=s(fY);hro=r(y$r,"convbert"),y$r.forEach(t),pro=r(IFe," \u2014 "),eR=n(IFe,"A",{href:!0});var w$r=s(eR);_ro=r(w$r,"ConvBertModel"),w$r.forEach(t),uro=r(IFe," (ConvBERT model)"),IFe.forEach(t),bro=i(C),Nh=n(C,"LI",{});var DFe=s(Nh);mY=n(DFe,"STRONG",{});var A$r=s(mY);vro=r(A$r,"convnext"),A$r.forEach(t),Tro=r(DFe," \u2014 "),oR=n(DFe,"A",{href:!0});var L$r=s(oR);Fro=r(L$r,"ConvNextModel"),L$r.forEach(t),Cro=r(DFe," (ConvNext model)"),DFe.forEach(t),Mro=i(C),qh=n(C,"LI",{});var jFe=s(qh);gY=n(jFe,"STRONG",{});var B$r=s(gY);Ero=r(B$r,"ctrl"),B$r.forEach(t),yro=r(jFe," \u2014 "),rR=n(jFe,"A",{href:!0});var x$r=s(rR);wro=r(x$r,"CTRLModel"),x$r.forEach(t),Aro=r(jFe," (CTRL model)"),jFe.forEach(t),Lro=i(C),Gh=n(C,"LI",{});var NFe=s(Gh);hY=n(NFe,"STRONG",{});var k$r=s(hY);Bro=r(k$r,"data2vec-audio"),k$r.forEach(t),xro=r(NFe," \u2014 "),tR=n(NFe,"A",{href:!0});var R$r=s(tR);kro=r(R$r,"Data2VecAudioModel"),R$r.forEach(t),Rro=r(NFe," (Data2VecAudio model)"),NFe.forEach(t),Sro=i(C),Oh=n(C,"LI",{});var qFe=s(Oh);pY=n(qFe,"STRONG",{});var S$r=s(pY);Pro=r(S$r,"data2vec-text"),S$r.forEach(t),$ro=r(qFe," \u2014 "),aR=n(qFe,"A",{href:!0});var P$r=s(aR);Iro=r(P$r,"Data2VecTextModel"),P$r.forEach(t),Dro=r(qFe," (Data2VecText model)"),qFe.forEach(t),jro=i(C),Xh=n(C,"LI",{});var GFe=s(Xh);_Y=n(GFe,"STRONG",{});var $$r=s(_Y);Nro=r($$r,"deberta"),$$r.forEach(t),qro=r(GFe," \u2014 "),nR=n(GFe,"A",{href:!0});var I$r=s(nR);Gro=r(I$r,"DebertaModel"),I$r.forEach(t),Oro=r(GFe," (DeBERTa model)"),GFe.forEach(t),Xro=i(C),Vh=n(C,"LI",{});var OFe=s(Vh);uY=n(OFe,"STRONG",{});var D$r=s(uY);Vro=r(D$r,"deberta-v2"),D$r.forEach(t),zro=r(OFe," \u2014 "),sR=n(OFe,"A",{href:!0});var j$r=s(sR);Wro=r(j$r,"DebertaV2Model"),j$r.forEach(t),Qro=r(OFe," (DeBERTa-v2 model)"),OFe.forEach(t),Hro=i(C),zh=n(C,"LI",{});var XFe=s(zh);bY=n(XFe,"STRONG",{});var N$r=s(bY);Uro=r(N$r,"deit"),N$r.forEach(t),Jro=r(XFe," \u2014 "),lR=n(XFe,"A",{href:!0});var q$r=s(lR);Yro=r(q$r,"DeiTModel"),q$r.forEach(t),Kro=r(XFe," (DeiT model)"),XFe.forEach(t),Zro=i(C),Wh=n(C,"LI",{});var VFe=s(Wh);vY=n(VFe,"STRONG",{});var G$r=s(vY);eto=r(G$r,"detr"),G$r.forEach(t),oto=r(VFe," \u2014 "),iR=n(VFe,"A",{href:!0});var O$r=s(iR);rto=r(O$r,"DetrModel"),O$r.forEach(t),tto=r(VFe," (DETR model)"),VFe.forEach(t),ato=i(C),Qh=n(C,"LI",{});var zFe=s(Qh);TY=n(zFe,"STRONG",{});var X$r=s(TY);nto=r(X$r,"distilbert"),X$r.forEach(t),sto=r(zFe," \u2014 "),dR=n(zFe,"A",{href:!0});var V$r=s(dR);lto=r(V$r,"DistilBertModel"),V$r.forEach(t),ito=r(zFe," (DistilBERT model)"),zFe.forEach(t),dto=i(C),Hh=n(C,"LI",{});var WFe=s(Hh);FY=n(WFe,"STRONG",{});var z$r=s(FY);cto=r(z$r,"dpr"),z$r.forEach(t),fto=r(WFe," \u2014 "),cR=n(WFe,"A",{href:!0});var W$r=s(cR);mto=r(W$r,"DPRQuestionEncoder"),W$r.forEach(t),gto=r(WFe," (DPR model)"),WFe.forEach(t),hto=i(C),Uh=n(C,"LI",{});var QFe=s(Uh);CY=n(QFe,"STRONG",{});var Q$r=s(CY);pto=r(Q$r,"electra"),Q$r.forEach(t),_to=r(QFe," \u2014 "),fR=n(QFe,"A",{href:!0});var H$r=s(fR);uto=r(H$r,"ElectraModel"),H$r.forEach(t),bto=r(QFe," (ELECTRA model)"),QFe.forEach(t),vto=i(C),Jh=n(C,"LI",{});var HFe=s(Jh);MY=n(HFe,"STRONG",{});var U$r=s(MY);Tto=r(U$r,"flaubert"),U$r.forEach(t),Fto=r(HFe," \u2014 "),mR=n(HFe,"A",{href:!0});var J$r=s(mR);Cto=r(J$r,"FlaubertModel"),J$r.forEach(t),Mto=r(HFe," (FlauBERT model)"),HFe.forEach(t),Eto=i(C),Yh=n(C,"LI",{});var UFe=s(Yh);EY=n(UFe,"STRONG",{});var Y$r=s(EY);yto=r(Y$r,"fnet"),Y$r.forEach(t),wto=r(UFe," \u2014 "),gR=n(UFe,"A",{href:!0});var K$r=s(gR);Ato=r(K$r,"FNetModel"),K$r.forEach(t),Lto=r(UFe," (FNet model)"),UFe.forEach(t),Bto=i(C),Kh=n(C,"LI",{});var JFe=s(Kh);yY=n(JFe,"STRONG",{});var Z$r=s(yY);xto=r(Z$r,"fsmt"),Z$r.forEach(t),kto=r(JFe," \u2014 "),hR=n(JFe,"A",{href:!0});var eIr=s(hR);Rto=r(eIr,"FSMTModel"),eIr.forEach(t),Sto=r(JFe," (FairSeq Machine-Translation model)"),JFe.forEach(t),Pto=i(C),Ps=n(C,"LI",{});var s8=s(Ps);wY=n(s8,"STRONG",{});var oIr=s(wY);$to=r(oIr,"funnel"),oIr.forEach(t),Ito=r(s8," \u2014 "),pR=n(s8,"A",{href:!0});var rIr=s(pR);Dto=r(rIr,"FunnelModel"),rIr.forEach(t),jto=r(s8," or "),_R=n(s8,"A",{href:!0});var tIr=s(_R);Nto=r(tIr,"FunnelBaseModel"),tIr.forEach(t),qto=r(s8," (Funnel Transformer model)"),s8.forEach(t),Gto=i(C),Zh=n(C,"LI",{});var YFe=s(Zh);AY=n(YFe,"STRONG",{});var aIr=s(AY);Oto=r(aIr,"gpt2"),aIr.forEach(t),Xto=r(YFe," \u2014 "),uR=n(YFe,"A",{href:!0});var nIr=s(uR);Vto=r(nIr,"GPT2Model"),nIr.forEach(t),zto=r(YFe," (OpenAI GPT-2 model)"),YFe.forEach(t),Wto=i(C),ep=n(C,"LI",{});var KFe=s(ep);LY=n(KFe,"STRONG",{});var sIr=s(LY);Qto=r(sIr,"gpt_neo"),sIr.forEach(t),Hto=r(KFe," \u2014 "),bR=n(KFe,"A",{href:!0});var lIr=s(bR);Uto=r(lIr,"GPTNeoModel"),lIr.forEach(t),Jto=r(KFe," (GPT Neo model)"),KFe.forEach(t),Yto=i(C),op=n(C,"LI",{});var ZFe=s(op);BY=n(ZFe,"STRONG",{});var iIr=s(BY);Kto=r(iIr,"gptj"),iIr.forEach(t),Zto=r(ZFe," \u2014 "),vR=n(ZFe,"A",{href:!0});var dIr=s(vR);eao=r(dIr,"GPTJModel"),dIr.forEach(t),oao=r(ZFe," (GPT-J model)"),ZFe.forEach(t),rao=i(C),rp=n(C,"LI",{});var e9e=s(rp);xY=n(e9e,"STRONG",{});var cIr=s(xY);tao=r(cIr,"hubert"),cIr.forEach(t),aao=r(e9e," \u2014 "),TR=n(e9e,"A",{href:!0});var fIr=s(TR);nao=r(fIr,"HubertModel"),fIr.forEach(t),sao=r(e9e," (Hubert model)"),e9e.forEach(t),lao=i(C),tp=n(C,"LI",{});var o9e=s(tp);kY=n(o9e,"STRONG",{});var mIr=s(kY);iao=r(mIr,"ibert"),mIr.forEach(t),dao=r(o9e," \u2014 "),FR=n(o9e,"A",{href:!0});var gIr=s(FR);cao=r(gIr,"IBertModel"),gIr.forEach(t),fao=r(o9e," (I-BERT model)"),o9e.forEach(t),mao=i(C),ap=n(C,"LI",{});var r9e=s(ap);RY=n(r9e,"STRONG",{});var hIr=s(RY);gao=r(hIr,"imagegpt"),hIr.forEach(t),hao=r(r9e," \u2014 "),CR=n(r9e,"A",{href:!0});var pIr=s(CR);pao=r(pIr,"ImageGPTModel"),pIr.forEach(t),_ao=r(r9e," (ImageGPT model)"),r9e.forEach(t),uao=i(C),np=n(C,"LI",{});var t9e=s(np);SY=n(t9e,"STRONG",{});var _Ir=s(SY);bao=r(_Ir,"layoutlm"),_Ir.forEach(t),vao=r(t9e," \u2014 "),MR=n(t9e,"A",{href:!0});var uIr=s(MR);Tao=r(uIr,"LayoutLMModel"),uIr.forEach(t),Fao=r(t9e," (LayoutLM model)"),t9e.forEach(t),Cao=i(C),sp=n(C,"LI",{});var a9e=s(sp);PY=n(a9e,"STRONG",{});var bIr=s(PY);Mao=r(bIr,"layoutlmv2"),bIr.forEach(t),Eao=r(a9e," \u2014 "),ER=n(a9e,"A",{href:!0});var vIr=s(ER);yao=r(vIr,"LayoutLMv2Model"),vIr.forEach(t),wao=r(a9e," (LayoutLMv2 model)"),a9e.forEach(t),Aao=i(C),lp=n(C,"LI",{});var n9e=s(lp);$Y=n(n9e,"STRONG",{});var TIr=s($Y);Lao=r(TIr,"led"),TIr.forEach(t),Bao=r(n9e," \u2014 "),yR=n(n9e,"A",{href:!0});var FIr=s(yR);xao=r(FIr,"LEDModel"),FIr.forEach(t),kao=r(n9e," (LED model)"),n9e.forEach(t),Rao=i(C),ip=n(C,"LI",{});var s9e=s(ip);IY=n(s9e,"STRONG",{});var CIr=s(IY);Sao=r(CIr,"longformer"),CIr.forEach(t),Pao=r(s9e," \u2014 "),wR=n(s9e,"A",{href:!0});var MIr=s(wR);$ao=r(MIr,"LongformerModel"),MIr.forEach(t),Iao=r(s9e," (Longformer model)"),s9e.forEach(t),Dao=i(C),dp=n(C,"LI",{});var l9e=s(dp);DY=n(l9e,"STRONG",{});var EIr=s(DY);jao=r(EIr,"luke"),EIr.forEach(t),Nao=r(l9e," \u2014 "),AR=n(l9e,"A",{href:!0});var yIr=s(AR);qao=r(yIr,"LukeModel"),yIr.forEach(t),Gao=r(l9e," (LUKE model)"),l9e.forEach(t),Oao=i(C),cp=n(C,"LI",{});var i9e=s(cp);jY=n(i9e,"STRONG",{});var wIr=s(jY);Xao=r(wIr,"lxmert"),wIr.forEach(t),Vao=r(i9e," \u2014 "),LR=n(i9e,"A",{href:!0});var AIr=s(LR);zao=r(AIr,"LxmertModel"),AIr.forEach(t),Wao=r(i9e," (LXMERT model)"),i9e.forEach(t),Qao=i(C),fp=n(C,"LI",{});var d9e=s(fp);NY=n(d9e,"STRONG",{});var LIr=s(NY);Hao=r(LIr,"m2m_100"),LIr.forEach(t),Uao=r(d9e," \u2014 "),BR=n(d9e,"A",{href:!0});var BIr=s(BR);Jao=r(BIr,"M2M100Model"),BIr.forEach(t),Yao=r(d9e," (M2M100 model)"),d9e.forEach(t),Kao=i(C),mp=n(C,"LI",{});var c9e=s(mp);qY=n(c9e,"STRONG",{});var xIr=s(qY);Zao=r(xIr,"marian"),xIr.forEach(t),eno=r(c9e," \u2014 "),xR=n(c9e,"A",{href:!0});var kIr=s(xR);ono=r(kIr,"MarianModel"),kIr.forEach(t),rno=r(c9e," (Marian model)"),c9e.forEach(t),tno=i(C),gp=n(C,"LI",{});var f9e=s(gp);GY=n(f9e,"STRONG",{});var RIr=s(GY);ano=r(RIr,"maskformer"),RIr.forEach(t),nno=r(f9e," \u2014 "),kR=n(f9e,"A",{href:!0});var SIr=s(kR);sno=r(SIr,"MaskFormerModel"),SIr.forEach(t),lno=r(f9e," (MaskFormer model)"),f9e.forEach(t),ino=i(C),hp=n(C,"LI",{});var m9e=s(hp);OY=n(m9e,"STRONG",{});var PIr=s(OY);dno=r(PIr,"mbart"),PIr.forEach(t),cno=r(m9e," \u2014 "),RR=n(m9e,"A",{href:!0});var $Ir=s(RR);fno=r($Ir,"MBartModel"),$Ir.forEach(t),mno=r(m9e," (mBART model)"),m9e.forEach(t),gno=i(C),pp=n(C,"LI",{});var g9e=s(pp);XY=n(g9e,"STRONG",{});var IIr=s(XY);hno=r(IIr,"megatron-bert"),IIr.forEach(t),pno=r(g9e," \u2014 "),SR=n(g9e,"A",{href:!0});var DIr=s(SR);_no=r(DIr,"MegatronBertModel"),DIr.forEach(t),uno=r(g9e," (MegatronBert model)"),g9e.forEach(t),bno=i(C),_p=n(C,"LI",{});var h9e=s(_p);VY=n(h9e,"STRONG",{});var jIr=s(VY);vno=r(jIr,"mobilebert"),jIr.forEach(t),Tno=r(h9e," \u2014 "),PR=n(h9e,"A",{href:!0});var NIr=s(PR);Fno=r(NIr,"MobileBertModel"),NIr.forEach(t),Cno=r(h9e," (MobileBERT model)"),h9e.forEach(t),Mno=i(C),up=n(C,"LI",{});var p9e=s(up);zY=n(p9e,"STRONG",{});var qIr=s(zY);Eno=r(qIr,"mpnet"),qIr.forEach(t),yno=r(p9e," \u2014 "),$R=n(p9e,"A",{href:!0});var GIr=s($R);wno=r(GIr,"MPNetModel"),GIr.forEach(t),Ano=r(p9e," (MPNet model)"),p9e.forEach(t),Lno=i(C),bp=n(C,"LI",{});var _9e=s(bp);WY=n(_9e,"STRONG",{});var OIr=s(WY);Bno=r(OIr,"mt5"),OIr.forEach(t),xno=r(_9e," \u2014 "),IR=n(_9e,"A",{href:!0});var XIr=s(IR);kno=r(XIr,"MT5Model"),XIr.forEach(t),Rno=r(_9e," (mT5 model)"),_9e.forEach(t),Sno=i(C),vp=n(C,"LI",{});var u9e=s(vp);QY=n(u9e,"STRONG",{});var VIr=s(QY);Pno=r(VIr,"nystromformer"),VIr.forEach(t),$no=r(u9e," \u2014 "),DR=n(u9e,"A",{href:!0});var zIr=s(DR);Ino=r(zIr,"NystromformerModel"),zIr.forEach(t),Dno=r(u9e," (Nystromformer model)"),u9e.forEach(t),jno=i(C),Tp=n(C,"LI",{});var b9e=s(Tp);HY=n(b9e,"STRONG",{});var WIr=s(HY);Nno=r(WIr,"openai-gpt"),WIr.forEach(t),qno=r(b9e," \u2014 "),jR=n(b9e,"A",{href:!0});var QIr=s(jR);Gno=r(QIr,"OpenAIGPTModel"),QIr.forEach(t),Ono=r(b9e," (OpenAI GPT model)"),b9e.forEach(t),Xno=i(C),Fp=n(C,"LI",{});var v9e=s(Fp);UY=n(v9e,"STRONG",{});var HIr=s(UY);Vno=r(HIr,"pegasus"),HIr.forEach(t),zno=r(v9e," \u2014 "),NR=n(v9e,"A",{href:!0});var UIr=s(NR);Wno=r(UIr,"PegasusModel"),UIr.forEach(t),Qno=r(v9e," (Pegasus model)"),v9e.forEach(t),Hno=i(C),Cp=n(C,"LI",{});var T9e=s(Cp);JY=n(T9e,"STRONG",{});var JIr=s(JY);Uno=r(JIr,"perceiver"),JIr.forEach(t),Jno=r(T9e," \u2014 "),qR=n(T9e,"A",{href:!0});var YIr=s(qR);Yno=r(YIr,"PerceiverModel"),YIr.forEach(t),Kno=r(T9e," (Perceiver model)"),T9e.forEach(t),Zno=i(C),Mp=n(C,"LI",{});var F9e=s(Mp);YY=n(F9e,"STRONG",{});var KIr=s(YY);eso=r(KIr,"plbart"),KIr.forEach(t),oso=r(F9e," \u2014 "),GR=n(F9e,"A",{href:!0});var ZIr=s(GR);rso=r(ZIr,"PLBartModel"),ZIr.forEach(t),tso=r(F9e," (PLBart model)"),F9e.forEach(t),aso=i(C),Ep=n(C,"LI",{});var C9e=s(Ep);KY=n(C9e,"STRONG",{});var eDr=s(KY);nso=r(eDr,"poolformer"),eDr.forEach(t),sso=r(C9e," \u2014 "),OR=n(C9e,"A",{href:!0});var oDr=s(OR);lso=r(oDr,"PoolFormerModel"),oDr.forEach(t),iso=r(C9e," (PoolFormer model)"),C9e.forEach(t),dso=i(C),yp=n(C,"LI",{});var M9e=s(yp);ZY=n(M9e,"STRONG",{});var rDr=s(ZY);cso=r(rDr,"prophetnet"),rDr.forEach(t),fso=r(M9e," \u2014 "),XR=n(M9e,"A",{href:!0});var tDr=s(XR);mso=r(tDr,"ProphetNetModel"),tDr.forEach(t),gso=r(M9e," (ProphetNet model)"),M9e.forEach(t),hso=i(C),wp=n(C,"LI",{});var E9e=s(wp);eK=n(E9e,"STRONG",{});var aDr=s(eK);pso=r(aDr,"qdqbert"),aDr.forEach(t),_so=r(E9e," \u2014 "),VR=n(E9e,"A",{href:!0});var nDr=s(VR);uso=r(nDr,"QDQBertModel"),nDr.forEach(t),bso=r(E9e," (QDQBert model)"),E9e.forEach(t),vso=i(C),Ap=n(C,"LI",{});var y9e=s(Ap);oK=n(y9e,"STRONG",{});var sDr=s(oK);Tso=r(sDr,"reformer"),sDr.forEach(t),Fso=r(y9e," \u2014 "),zR=n(y9e,"A",{href:!0});var lDr=s(zR);Cso=r(lDr,"ReformerModel"),lDr.forEach(t),Mso=r(y9e," (Reformer model)"),y9e.forEach(t),Eso=i(C),Lp=n(C,"LI",{});var w9e=s(Lp);rK=n(w9e,"STRONG",{});var iDr=s(rK);yso=r(iDr,"rembert"),iDr.forEach(t),wso=r(w9e," \u2014 "),WR=n(w9e,"A",{href:!0});var dDr=s(WR);Aso=r(dDr,"RemBertModel"),dDr.forEach(t),Lso=r(w9e," (RemBERT model)"),w9e.forEach(t),Bso=i(C),Bp=n(C,"LI",{});var A9e=s(Bp);tK=n(A9e,"STRONG",{});var cDr=s(tK);xso=r(cDr,"retribert"),cDr.forEach(t),kso=r(A9e," \u2014 "),QR=n(A9e,"A",{href:!0});var fDr=s(QR);Rso=r(fDr,"RetriBertModel"),fDr.forEach(t),Sso=r(A9e," (RetriBERT model)"),A9e.forEach(t),Pso=i(C),xp=n(C,"LI",{});var L9e=s(xp);aK=n(L9e,"STRONG",{});var mDr=s(aK);$so=r(mDr,"roberta"),mDr.forEach(t),Iso=r(L9e," \u2014 "),HR=n(L9e,"A",{href:!0});var gDr=s(HR);Dso=r(gDr,"RobertaModel"),gDr.forEach(t),jso=r(L9e," (RoBERTa model)"),L9e.forEach(t),Nso=i(C),kp=n(C,"LI",{});var B9e=s(kp);nK=n(B9e,"STRONG",{});var hDr=s(nK);qso=r(hDr,"roformer"),hDr.forEach(t),Gso=r(B9e," \u2014 "),UR=n(B9e,"A",{href:!0});var pDr=s(UR);Oso=r(pDr,"RoFormerModel"),pDr.forEach(t),Xso=r(B9e," (RoFormer model)"),B9e.forEach(t),Vso=i(C),Rp=n(C,"LI",{});var x9e=s(Rp);sK=n(x9e,"STRONG",{});var _Dr=s(sK);zso=r(_Dr,"segformer"),_Dr.forEach(t),Wso=r(x9e," \u2014 "),JR=n(x9e,"A",{href:!0});var uDr=s(JR);Qso=r(uDr,"SegformerModel"),uDr.forEach(t),Hso=r(x9e," (SegFormer model)"),x9e.forEach(t),Uso=i(C),Sp=n(C,"LI",{});var k9e=s(Sp);lK=n(k9e,"STRONG",{});var bDr=s(lK);Jso=r(bDr,"sew"),bDr.forEach(t),Yso=r(k9e," \u2014 "),YR=n(k9e,"A",{href:!0});var vDr=s(YR);Kso=r(vDr,"SEWModel"),vDr.forEach(t),Zso=r(k9e," (SEW model)"),k9e.forEach(t),elo=i(C),Pp=n(C,"LI",{});var R9e=s(Pp);iK=n(R9e,"STRONG",{});var TDr=s(iK);olo=r(TDr,"sew-d"),TDr.forEach(t),rlo=r(R9e," \u2014 "),KR=n(R9e,"A",{href:!0});var FDr=s(KR);tlo=r(FDr,"SEWDModel"),FDr.forEach(t),alo=r(R9e," (SEW-D model)"),R9e.forEach(t),nlo=i(C),$p=n(C,"LI",{});var S9e=s($p);dK=n(S9e,"STRONG",{});var CDr=s(dK);slo=r(CDr,"speech_to_text"),CDr.forEach(t),llo=r(S9e," \u2014 "),ZR=n(S9e,"A",{href:!0});var MDr=s(ZR);ilo=r(MDr,"Speech2TextModel"),MDr.forEach(t),dlo=r(S9e," (Speech2Text model)"),S9e.forEach(t),clo=i(C),Ip=n(C,"LI",{});var P9e=s(Ip);cK=n(P9e,"STRONG",{});var EDr=s(cK);flo=r(EDr,"splinter"),EDr.forEach(t),mlo=r(P9e," \u2014 "),eS=n(P9e,"A",{href:!0});var yDr=s(eS);glo=r(yDr,"SplinterModel"),yDr.forEach(t),hlo=r(P9e," (Splinter model)"),P9e.forEach(t),plo=i(C),Dp=n(C,"LI",{});var $9e=s(Dp);fK=n($9e,"STRONG",{});var wDr=s(fK);_lo=r(wDr,"squeezebert"),wDr.forEach(t),ulo=r($9e," \u2014 "),oS=n($9e,"A",{href:!0});var ADr=s(oS);blo=r(ADr,"SqueezeBertModel"),ADr.forEach(t),vlo=r($9e," (SqueezeBERT model)"),$9e.forEach(t),Tlo=i(C),jp=n(C,"LI",{});var I9e=s(jp);mK=n(I9e,"STRONG",{});var LDr=s(mK);Flo=r(LDr,"swin"),LDr.forEach(t),Clo=r(I9e," \u2014 "),rS=n(I9e,"A",{href:!0});var BDr=s(rS);Mlo=r(BDr,"SwinModel"),BDr.forEach(t),Elo=r(I9e," (Swin model)"),I9e.forEach(t),ylo=i(C),Np=n(C,"LI",{});var D9e=s(Np);gK=n(D9e,"STRONG",{});var xDr=s(gK);wlo=r(xDr,"t5"),xDr.forEach(t),Alo=r(D9e," \u2014 "),tS=n(D9e,"A",{href:!0});var kDr=s(tS);Llo=r(kDr,"T5Model"),kDr.forEach(t),Blo=r(D9e," (T5 model)"),D9e.forEach(t),xlo=i(C),qp=n(C,"LI",{});var j9e=s(qp);hK=n(j9e,"STRONG",{});var RDr=s(hK);klo=r(RDr,"tapas"),RDr.forEach(t),Rlo=r(j9e," \u2014 "),aS=n(j9e,"A",{href:!0});var SDr=s(aS);Slo=r(SDr,"TapasModel"),SDr.forEach(t),Plo=r(j9e," (TAPAS model)"),j9e.forEach(t),$lo=i(C),Gp=n(C,"LI",{});var N9e=s(Gp);pK=n(N9e,"STRONG",{});var PDr=s(pK);Ilo=r(PDr,"transfo-xl"),PDr.forEach(t),Dlo=r(N9e," \u2014 "),nS=n(N9e,"A",{href:!0});var $Dr=s(nS);jlo=r($Dr,"TransfoXLModel"),$Dr.forEach(t),Nlo=r(N9e," (Transformer-XL model)"),N9e.forEach(t),qlo=i(C),Op=n(C,"LI",{});var q9e=s(Op);_K=n(q9e,"STRONG",{});var IDr=s(_K);Glo=r(IDr,"unispeech"),IDr.forEach(t),Olo=r(q9e," \u2014 "),sS=n(q9e,"A",{href:!0});var DDr=s(sS);Xlo=r(DDr,"UniSpeechModel"),DDr.forEach(t),Vlo=r(q9e," (UniSpeech model)"),q9e.forEach(t),zlo=i(C),Xp=n(C,"LI",{});var G9e=s(Xp);uK=n(G9e,"STRONG",{});var jDr=s(uK);Wlo=r(jDr,"unispeech-sat"),jDr.forEach(t),Qlo=r(G9e," \u2014 "),lS=n(G9e,"A",{href:!0});var NDr=s(lS);Hlo=r(NDr,"UniSpeechSatModel"),NDr.forEach(t),Ulo=r(G9e," (UniSpeechSat model)"),G9e.forEach(t),Jlo=i(C),Vp=n(C,"LI",{});var O9e=s(Vp);bK=n(O9e,"STRONG",{});var qDr=s(bK);Ylo=r(qDr,"vilt"),qDr.forEach(t),Klo=r(O9e," \u2014 "),iS=n(O9e,"A",{href:!0});var GDr=s(iS);Zlo=r(GDr,"ViltModel"),GDr.forEach(t),eio=r(O9e," (ViLT model)"),O9e.forEach(t),oio=i(C),zp=n(C,"LI",{});var X9e=s(zp);vK=n(X9e,"STRONG",{});var ODr=s(vK);rio=r(ODr,"vision-text-dual-encoder"),ODr.forEach(t),tio=r(X9e," \u2014 "),dS=n(X9e,"A",{href:!0});var XDr=s(dS);aio=r(XDr,"VisionTextDualEncoderModel"),XDr.forEach(t),nio=r(X9e," (VisionTextDualEncoder model)"),X9e.forEach(t),sio=i(C),Wp=n(C,"LI",{});var V9e=s(Wp);TK=n(V9e,"STRONG",{});var VDr=s(TK);lio=r(VDr,"visual_bert"),VDr.forEach(t),iio=r(V9e," \u2014 "),cS=n(V9e,"A",{href:!0});var zDr=s(cS);dio=r(zDr,"VisualBertModel"),zDr.forEach(t),cio=r(V9e," (VisualBert model)"),V9e.forEach(t),fio=i(C),Qp=n(C,"LI",{});var z9e=s(Qp);FK=n(z9e,"STRONG",{});var WDr=s(FK);mio=r(WDr,"vit"),WDr.forEach(t),gio=r(z9e," \u2014 "),fS=n(z9e,"A",{href:!0});var QDr=s(fS);hio=r(QDr,"ViTModel"),QDr.forEach(t),pio=r(z9e," (ViT model)"),z9e.forEach(t),_io=i(C),Hp=n(C,"LI",{});var W9e=s(Hp);CK=n(W9e,"STRONG",{});var HDr=s(CK);uio=r(HDr,"vit_mae"),HDr.forEach(t),bio=r(W9e," \u2014 "),mS=n(W9e,"A",{href:!0});var UDr=s(mS);vio=r(UDr,"ViTMAEModel"),UDr.forEach(t),Tio=r(W9e," (ViTMAE model)"),W9e.forEach(t),Fio=i(C),Up=n(C,"LI",{});var Q9e=s(Up);MK=n(Q9e,"STRONG",{});var JDr=s(MK);Cio=r(JDr,"wav2vec2"),JDr.forEach(t),Mio=r(Q9e," \u2014 "),gS=n(Q9e,"A",{href:!0});var YDr=s(gS);Eio=r(YDr,"Wav2Vec2Model"),YDr.forEach(t),yio=r(Q9e," (Wav2Vec2 model)"),Q9e.forEach(t),wio=i(C),Jp=n(C,"LI",{});var H9e=s(Jp);EK=n(H9e,"STRONG",{});var KDr=s(EK);Aio=r(KDr,"wavlm"),KDr.forEach(t),Lio=r(H9e," \u2014 "),hS=n(H9e,"A",{href:!0});var ZDr=s(hS);Bio=r(ZDr,"WavLMModel"),ZDr.forEach(t),xio=r(H9e," (WavLM model)"),H9e.forEach(t),kio=i(C),Yp=n(C,"LI",{});var U9e=s(Yp);yK=n(U9e,"STRONG",{});var ejr=s(yK);Rio=r(ejr,"xglm"),ejr.forEach(t),Sio=r(U9e," \u2014 "),pS=n(U9e,"A",{href:!0});var ojr=s(pS);Pio=r(ojr,"XGLMModel"),ojr.forEach(t),$io=r(U9e," (XGLM model)"),U9e.forEach(t),Iio=i(C),Kp=n(C,"LI",{});var J9e=s(Kp);wK=n(J9e,"STRONG",{});var rjr=s(wK);Dio=r(rjr,"xlm"),rjr.forEach(t),jio=r(J9e," \u2014 "),_S=n(J9e,"A",{href:!0});var tjr=s(_S);Nio=r(tjr,"XLMModel"),tjr.forEach(t),qio=r(J9e," (XLM model)"),J9e.forEach(t),Gio=i(C),Zp=n(C,"LI",{});var Y9e=s(Zp);AK=n(Y9e,"STRONG",{});var ajr=s(AK);Oio=r(ajr,"xlm-prophetnet"),ajr.forEach(t),Xio=r(Y9e," \u2014 "),uS=n(Y9e,"A",{href:!0});var njr=s(uS);Vio=r(njr,"XLMProphetNetModel"),njr.forEach(t),zio=r(Y9e," (XLMProphetNet model)"),Y9e.forEach(t),Wio=i(C),e_=n(C,"LI",{});var K9e=s(e_);LK=n(K9e,"STRONG",{});var sjr=s(LK);Qio=r(sjr,"xlm-roberta"),sjr.forEach(t),Hio=r(K9e," \u2014 "),bS=n(K9e,"A",{href:!0});var ljr=s(bS);Uio=r(ljr,"XLMRobertaModel"),ljr.forEach(t),Jio=r(K9e," (XLM-RoBERTa model)"),K9e.forEach(t),Yio=i(C),o_=n(C,"LI",{});var Z9e=s(o_);BK=n(Z9e,"STRONG",{});var ijr=s(BK);Kio=r(ijr,"xlm-roberta-xl"),ijr.forEach(t),Zio=r(Z9e," \u2014 "),vS=n(Z9e,"A",{href:!0});var djr=s(vS);edo=r(djr,"XLMRobertaXLModel"),djr.forEach(t),odo=r(Z9e," (XLM-RoBERTa-XL model)"),Z9e.forEach(t),rdo=i(C),r_=n(C,"LI",{});var eCe=s(r_);xK=n(eCe,"STRONG",{});var cjr=s(xK);tdo=r(cjr,"xlnet"),cjr.forEach(t),ado=r(eCe," \u2014 "),TS=n(eCe,"A",{href:!0});var fjr=s(TS);ndo=r(fjr,"XLNetModel"),fjr.forEach(t),sdo=r(eCe," (XLNet model)"),eCe.forEach(t),ldo=i(C),t_=n(C,"LI",{});var oCe=s(t_);kK=n(oCe,"STRONG",{});var mjr=s(kK);ido=r(mjr,"yoso"),mjr.forEach(t),ddo=r(oCe," \u2014 "),FS=n(oCe,"A",{href:!0});var gjr=s(FS);cdo=r(gjr,"YosoModel"),gjr.forEach(t),fdo=r(oCe," (YOSO model)"),oCe.forEach(t),C.forEach(t),mdo=i($t),a_=n($t,"P",{});var rCe=s(a_);gdo=r(rCe,"The model is set in evaluation mode by default using "),RK=n(rCe,"CODE",{});var hjr=s(RK);hdo=r(hjr,"model.eval()"),hjr.forEach(t),pdo=r(rCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SK=n(rCe,"CODE",{});var pjr=s(SK);_do=r(pjr,"model.train()"),pjr.forEach(t),rCe.forEach(t),udo=i($t),PK=n($t,"P",{});var _jr=s(PK);bdo=r(_jr,"Examples:"),_jr.forEach(t),vdo=i($t),m(dE.$$.fragment,$t),$t.forEach(t),Gs.forEach(t),z7e=i(c),Wi=n(c,"H2",{class:!0});var Kxe=s(Wi);n_=n(Kxe,"A",{id:!0,class:!0,href:!0});var ujr=s(n_);$K=n(ujr,"SPAN",{});var bjr=s($K);m(cE.$$.fragment,bjr),bjr.forEach(t),ujr.forEach(t),Tdo=i(Kxe),IK=n(Kxe,"SPAN",{});var vjr=s(IK);Fdo=r(vjr,"AutoModelForPreTraining"),vjr.forEach(t),Kxe.forEach(t),W7e=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(fE.$$.fragment,Xs),Cdo=i(Xs),Qi=n(Xs,"P",{});var NV=s(Qi);Mdo=r(NV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DK=n(NV,"CODE",{});var Tjr=s(DK);Edo=r(Tjr,"from_pretrained()"),Tjr.forEach(t),ydo=r(NV,"class method or the "),jK=n(NV,"CODE",{});var Fjr=s(jK);wdo=r(Fjr,"from_config()"),Fjr.forEach(t),Ado=r(NV,`class
method.`),NV.forEach(t),Ldo=i(Xs),mE=n(Xs,"P",{});var Zxe=s(mE);Bdo=r(Zxe,"This class cannot be instantiated directly using "),NK=n(Zxe,"CODE",{});var Cjr=s(NK);xdo=r(Cjr,"__init__()"),Cjr.forEach(t),kdo=r(Zxe," (throws an error)."),Zxe.forEach(t),Rdo=i(Xs),Gr=n(Xs,"DIV",{class:!0});var Vs=s(Gr);m(gE.$$.fragment,Vs),Sdo=i(Vs),qK=n(Vs,"P",{});var Mjr=s(qK);Pdo=r(Mjr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mjr.forEach(t),$do=i(Vs),Hi=n(Vs,"P",{});var qV=s(Hi);Ido=r(qV,`Note:
Loading a model from its configuration file does `),GK=n(qV,"STRONG",{});var Ejr=s(GK);Ddo=r(Ejr,"not"),Ejr.forEach(t),jdo=r(qV,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(qV,"CODE",{});var yjr=s(OK);Ndo=r(yjr,"from_pretrained()"),yjr.forEach(t),qdo=r(qV,"to load the model weights."),qV.forEach(t),Gdo=i(Vs),XK=n(Vs,"P",{});var wjr=s(XK);Odo=r(wjr,"Examples:"),wjr.forEach(t),Xdo=i(Vs),m(hE.$$.fragment,Vs),Vs.forEach(t),Vdo=i(Xs),Se=n(Xs,"DIV",{class:!0});var It=s(Se);m(pE.$$.fragment,It),zdo=i(It),VK=n(It,"P",{});var Ajr=s(VK);Wdo=r(Ajr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ajr.forEach(t),Qdo=i(It),qa=n(It,"P",{});var L4=s(qa);Hdo=r(L4,"The model class to instantiate is selected based on the "),zK=n(L4,"CODE",{});var Ljr=s(zK);Udo=r(Ljr,"model_type"),Ljr.forEach(t),Jdo=r(L4,` property of the config object (either
passed as an argument or loaded from `),WK=n(L4,"CODE",{});var Bjr=s(WK);Ydo=r(Bjr,"pretrained_model_name_or_path"),Bjr.forEach(t),Kdo=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QK=n(L4,"CODE",{});var xjr=s(QK);Zdo=r(xjr,"pretrained_model_name_or_path"),xjr.forEach(t),eco=r(L4,":"),L4.forEach(t),oco=i(It),k=n(It,"UL",{});var S=s(k);s_=n(S,"LI",{});var tCe=s(s_);HK=n(tCe,"STRONG",{});var kjr=s(HK);rco=r(kjr,"albert"),kjr.forEach(t),tco=r(tCe," \u2014 "),CS=n(tCe,"A",{href:!0});var Rjr=s(CS);aco=r(Rjr,"AlbertForPreTraining"),Rjr.forEach(t),nco=r(tCe," (ALBERT model)"),tCe.forEach(t),sco=i(S),l_=n(S,"LI",{});var aCe=s(l_);UK=n(aCe,"STRONG",{});var Sjr=s(UK);lco=r(Sjr,"bart"),Sjr.forEach(t),ico=r(aCe," \u2014 "),MS=n(aCe,"A",{href:!0});var Pjr=s(MS);dco=r(Pjr,"BartForConditionalGeneration"),Pjr.forEach(t),cco=r(aCe," (BART model)"),aCe.forEach(t),fco=i(S),i_=n(S,"LI",{});var nCe=s(i_);JK=n(nCe,"STRONG",{});var $jr=s(JK);mco=r($jr,"bert"),$jr.forEach(t),gco=r(nCe," \u2014 "),ES=n(nCe,"A",{href:!0});var Ijr=s(ES);hco=r(Ijr,"BertForPreTraining"),Ijr.forEach(t),pco=r(nCe," (BERT model)"),nCe.forEach(t),_co=i(S),d_=n(S,"LI",{});var sCe=s(d_);YK=n(sCe,"STRONG",{});var Djr=s(YK);uco=r(Djr,"big_bird"),Djr.forEach(t),bco=r(sCe," \u2014 "),yS=n(sCe,"A",{href:!0});var jjr=s(yS);vco=r(jjr,"BigBirdForPreTraining"),jjr.forEach(t),Tco=r(sCe," (BigBird model)"),sCe.forEach(t),Fco=i(S),c_=n(S,"LI",{});var lCe=s(c_);KK=n(lCe,"STRONG",{});var Njr=s(KK);Cco=r(Njr,"camembert"),Njr.forEach(t),Mco=r(lCe," \u2014 "),wS=n(lCe,"A",{href:!0});var qjr=s(wS);Eco=r(qjr,"CamembertForMaskedLM"),qjr.forEach(t),yco=r(lCe," (CamemBERT model)"),lCe.forEach(t),wco=i(S),f_=n(S,"LI",{});var iCe=s(f_);ZK=n(iCe,"STRONG",{});var Gjr=s(ZK);Aco=r(Gjr,"ctrl"),Gjr.forEach(t),Lco=r(iCe," \u2014 "),AS=n(iCe,"A",{href:!0});var Ojr=s(AS);Bco=r(Ojr,"CTRLLMHeadModel"),Ojr.forEach(t),xco=r(iCe," (CTRL model)"),iCe.forEach(t),kco=i(S),m_=n(S,"LI",{});var dCe=s(m_);eZ=n(dCe,"STRONG",{});var Xjr=s(eZ);Rco=r(Xjr,"data2vec-text"),Xjr.forEach(t),Sco=r(dCe," \u2014 "),LS=n(dCe,"A",{href:!0});var Vjr=s(LS);Pco=r(Vjr,"Data2VecTextForMaskedLM"),Vjr.forEach(t),$co=r(dCe," (Data2VecText model)"),dCe.forEach(t),Ico=i(S),g_=n(S,"LI",{});var cCe=s(g_);oZ=n(cCe,"STRONG",{});var zjr=s(oZ);Dco=r(zjr,"deberta"),zjr.forEach(t),jco=r(cCe," \u2014 "),BS=n(cCe,"A",{href:!0});var Wjr=s(BS);Nco=r(Wjr,"DebertaForMaskedLM"),Wjr.forEach(t),qco=r(cCe," (DeBERTa model)"),cCe.forEach(t),Gco=i(S),h_=n(S,"LI",{});var fCe=s(h_);rZ=n(fCe,"STRONG",{});var Qjr=s(rZ);Oco=r(Qjr,"deberta-v2"),Qjr.forEach(t),Xco=r(fCe," \u2014 "),xS=n(fCe,"A",{href:!0});var Hjr=s(xS);Vco=r(Hjr,"DebertaV2ForMaskedLM"),Hjr.forEach(t),zco=r(fCe," (DeBERTa-v2 model)"),fCe.forEach(t),Wco=i(S),p_=n(S,"LI",{});var mCe=s(p_);tZ=n(mCe,"STRONG",{});var Ujr=s(tZ);Qco=r(Ujr,"distilbert"),Ujr.forEach(t),Hco=r(mCe," \u2014 "),kS=n(mCe,"A",{href:!0});var Jjr=s(kS);Uco=r(Jjr,"DistilBertForMaskedLM"),Jjr.forEach(t),Jco=r(mCe," (DistilBERT model)"),mCe.forEach(t),Yco=i(S),__=n(S,"LI",{});var gCe=s(__);aZ=n(gCe,"STRONG",{});var Yjr=s(aZ);Kco=r(Yjr,"electra"),Yjr.forEach(t),Zco=r(gCe," \u2014 "),RS=n(gCe,"A",{href:!0});var Kjr=s(RS);efo=r(Kjr,"ElectraForPreTraining"),Kjr.forEach(t),ofo=r(gCe," (ELECTRA model)"),gCe.forEach(t),rfo=i(S),u_=n(S,"LI",{});var hCe=s(u_);nZ=n(hCe,"STRONG",{});var Zjr=s(nZ);tfo=r(Zjr,"flaubert"),Zjr.forEach(t),afo=r(hCe," \u2014 "),SS=n(hCe,"A",{href:!0});var eNr=s(SS);nfo=r(eNr,"FlaubertWithLMHeadModel"),eNr.forEach(t),sfo=r(hCe," (FlauBERT model)"),hCe.forEach(t),lfo=i(S),b_=n(S,"LI",{});var pCe=s(b_);sZ=n(pCe,"STRONG",{});var oNr=s(sZ);ifo=r(oNr,"fnet"),oNr.forEach(t),dfo=r(pCe," \u2014 "),PS=n(pCe,"A",{href:!0});var rNr=s(PS);cfo=r(rNr,"FNetForPreTraining"),rNr.forEach(t),ffo=r(pCe," (FNet model)"),pCe.forEach(t),mfo=i(S),v_=n(S,"LI",{});var _Ce=s(v_);lZ=n(_Ce,"STRONG",{});var tNr=s(lZ);gfo=r(tNr,"fsmt"),tNr.forEach(t),hfo=r(_Ce," \u2014 "),$S=n(_Ce,"A",{href:!0});var aNr=s($S);pfo=r(aNr,"FSMTForConditionalGeneration"),aNr.forEach(t),_fo=r(_Ce," (FairSeq Machine-Translation model)"),_Ce.forEach(t),ufo=i(S),T_=n(S,"LI",{});var uCe=s(T_);iZ=n(uCe,"STRONG",{});var nNr=s(iZ);bfo=r(nNr,"funnel"),nNr.forEach(t),vfo=r(uCe," \u2014 "),IS=n(uCe,"A",{href:!0});var sNr=s(IS);Tfo=r(sNr,"FunnelForPreTraining"),sNr.forEach(t),Ffo=r(uCe," (Funnel Transformer model)"),uCe.forEach(t),Cfo=i(S),F_=n(S,"LI",{});var bCe=s(F_);dZ=n(bCe,"STRONG",{});var lNr=s(dZ);Mfo=r(lNr,"gpt2"),lNr.forEach(t),Efo=r(bCe," \u2014 "),DS=n(bCe,"A",{href:!0});var iNr=s(DS);yfo=r(iNr,"GPT2LMHeadModel"),iNr.forEach(t),wfo=r(bCe," (OpenAI GPT-2 model)"),bCe.forEach(t),Afo=i(S),C_=n(S,"LI",{});var vCe=s(C_);cZ=n(vCe,"STRONG",{});var dNr=s(cZ);Lfo=r(dNr,"ibert"),dNr.forEach(t),Bfo=r(vCe," \u2014 "),jS=n(vCe,"A",{href:!0});var cNr=s(jS);xfo=r(cNr,"IBertForMaskedLM"),cNr.forEach(t),kfo=r(vCe," (I-BERT model)"),vCe.forEach(t),Rfo=i(S),M_=n(S,"LI",{});var TCe=s(M_);fZ=n(TCe,"STRONG",{});var fNr=s(fZ);Sfo=r(fNr,"layoutlm"),fNr.forEach(t),Pfo=r(TCe," \u2014 "),NS=n(TCe,"A",{href:!0});var mNr=s(NS);$fo=r(mNr,"LayoutLMForMaskedLM"),mNr.forEach(t),Ifo=r(TCe," (LayoutLM model)"),TCe.forEach(t),Dfo=i(S),E_=n(S,"LI",{});var FCe=s(E_);mZ=n(FCe,"STRONG",{});var gNr=s(mZ);jfo=r(gNr,"longformer"),gNr.forEach(t),Nfo=r(FCe," \u2014 "),qS=n(FCe,"A",{href:!0});var hNr=s(qS);qfo=r(hNr,"LongformerForMaskedLM"),hNr.forEach(t),Gfo=r(FCe," (Longformer model)"),FCe.forEach(t),Ofo=i(S),y_=n(S,"LI",{});var CCe=s(y_);gZ=n(CCe,"STRONG",{});var pNr=s(gZ);Xfo=r(pNr,"lxmert"),pNr.forEach(t),Vfo=r(CCe," \u2014 "),GS=n(CCe,"A",{href:!0});var _Nr=s(GS);zfo=r(_Nr,"LxmertForPreTraining"),_Nr.forEach(t),Wfo=r(CCe," (LXMERT model)"),CCe.forEach(t),Qfo=i(S),w_=n(S,"LI",{});var MCe=s(w_);hZ=n(MCe,"STRONG",{});var uNr=s(hZ);Hfo=r(uNr,"megatron-bert"),uNr.forEach(t),Ufo=r(MCe," \u2014 "),OS=n(MCe,"A",{href:!0});var bNr=s(OS);Jfo=r(bNr,"MegatronBertForPreTraining"),bNr.forEach(t),Yfo=r(MCe," (MegatronBert model)"),MCe.forEach(t),Kfo=i(S),A_=n(S,"LI",{});var ECe=s(A_);pZ=n(ECe,"STRONG",{});var vNr=s(pZ);Zfo=r(vNr,"mobilebert"),vNr.forEach(t),emo=r(ECe," \u2014 "),XS=n(ECe,"A",{href:!0});var TNr=s(XS);omo=r(TNr,"MobileBertForPreTraining"),TNr.forEach(t),rmo=r(ECe," (MobileBERT model)"),ECe.forEach(t),tmo=i(S),L_=n(S,"LI",{});var yCe=s(L_);_Z=n(yCe,"STRONG",{});var FNr=s(_Z);amo=r(FNr,"mpnet"),FNr.forEach(t),nmo=r(yCe," \u2014 "),VS=n(yCe,"A",{href:!0});var CNr=s(VS);smo=r(CNr,"MPNetForMaskedLM"),CNr.forEach(t),lmo=r(yCe," (MPNet model)"),yCe.forEach(t),imo=i(S),B_=n(S,"LI",{});var wCe=s(B_);uZ=n(wCe,"STRONG",{});var MNr=s(uZ);dmo=r(MNr,"openai-gpt"),MNr.forEach(t),cmo=r(wCe," \u2014 "),zS=n(wCe,"A",{href:!0});var ENr=s(zS);fmo=r(ENr,"OpenAIGPTLMHeadModel"),ENr.forEach(t),mmo=r(wCe," (OpenAI GPT model)"),wCe.forEach(t),gmo=i(S),x_=n(S,"LI",{});var ACe=s(x_);bZ=n(ACe,"STRONG",{});var yNr=s(bZ);hmo=r(yNr,"retribert"),yNr.forEach(t),pmo=r(ACe," \u2014 "),WS=n(ACe,"A",{href:!0});var wNr=s(WS);_mo=r(wNr,"RetriBertModel"),wNr.forEach(t),umo=r(ACe," (RetriBERT model)"),ACe.forEach(t),bmo=i(S),k_=n(S,"LI",{});var LCe=s(k_);vZ=n(LCe,"STRONG",{});var ANr=s(vZ);vmo=r(ANr,"roberta"),ANr.forEach(t),Tmo=r(LCe," \u2014 "),QS=n(LCe,"A",{href:!0});var LNr=s(QS);Fmo=r(LNr,"RobertaForMaskedLM"),LNr.forEach(t),Cmo=r(LCe," (RoBERTa model)"),LCe.forEach(t),Mmo=i(S),R_=n(S,"LI",{});var BCe=s(R_);TZ=n(BCe,"STRONG",{});var BNr=s(TZ);Emo=r(BNr,"squeezebert"),BNr.forEach(t),ymo=r(BCe," \u2014 "),HS=n(BCe,"A",{href:!0});var xNr=s(HS);wmo=r(xNr,"SqueezeBertForMaskedLM"),xNr.forEach(t),Amo=r(BCe," (SqueezeBERT model)"),BCe.forEach(t),Lmo=i(S),S_=n(S,"LI",{});var xCe=s(S_);FZ=n(xCe,"STRONG",{});var kNr=s(FZ);Bmo=r(kNr,"t5"),kNr.forEach(t),xmo=r(xCe," \u2014 "),US=n(xCe,"A",{href:!0});var RNr=s(US);kmo=r(RNr,"T5ForConditionalGeneration"),RNr.forEach(t),Rmo=r(xCe," (T5 model)"),xCe.forEach(t),Smo=i(S),P_=n(S,"LI",{});var kCe=s(P_);CZ=n(kCe,"STRONG",{});var SNr=s(CZ);Pmo=r(SNr,"tapas"),SNr.forEach(t),$mo=r(kCe," \u2014 "),JS=n(kCe,"A",{href:!0});var PNr=s(JS);Imo=r(PNr,"TapasForMaskedLM"),PNr.forEach(t),Dmo=r(kCe," (TAPAS model)"),kCe.forEach(t),jmo=i(S),$_=n(S,"LI",{});var RCe=s($_);MZ=n(RCe,"STRONG",{});var $Nr=s(MZ);Nmo=r($Nr,"transfo-xl"),$Nr.forEach(t),qmo=r(RCe," \u2014 "),YS=n(RCe,"A",{href:!0});var INr=s(YS);Gmo=r(INr,"TransfoXLLMHeadModel"),INr.forEach(t),Omo=r(RCe," (Transformer-XL model)"),RCe.forEach(t),Xmo=i(S),I_=n(S,"LI",{});var SCe=s(I_);EZ=n(SCe,"STRONG",{});var DNr=s(EZ);Vmo=r(DNr,"unispeech"),DNr.forEach(t),zmo=r(SCe," \u2014 "),KS=n(SCe,"A",{href:!0});var jNr=s(KS);Wmo=r(jNr,"UniSpeechForPreTraining"),jNr.forEach(t),Qmo=r(SCe," (UniSpeech model)"),SCe.forEach(t),Hmo=i(S),D_=n(S,"LI",{});var PCe=s(D_);yZ=n(PCe,"STRONG",{});var NNr=s(yZ);Umo=r(NNr,"unispeech-sat"),NNr.forEach(t),Jmo=r(PCe," \u2014 "),ZS=n(PCe,"A",{href:!0});var qNr=s(ZS);Ymo=r(qNr,"UniSpeechSatForPreTraining"),qNr.forEach(t),Kmo=r(PCe," (UniSpeechSat model)"),PCe.forEach(t),Zmo=i(S),j_=n(S,"LI",{});var $Ce=s(j_);wZ=n($Ce,"STRONG",{});var GNr=s(wZ);ego=r(GNr,"visual_bert"),GNr.forEach(t),ogo=r($Ce," \u2014 "),eP=n($Ce,"A",{href:!0});var ONr=s(eP);rgo=r(ONr,"VisualBertForPreTraining"),ONr.forEach(t),tgo=r($Ce," (VisualBert model)"),$Ce.forEach(t),ago=i(S),N_=n(S,"LI",{});var ICe=s(N_);AZ=n(ICe,"STRONG",{});var XNr=s(AZ);ngo=r(XNr,"vit_mae"),XNr.forEach(t),sgo=r(ICe," \u2014 "),oP=n(ICe,"A",{href:!0});var VNr=s(oP);lgo=r(VNr,"ViTMAEForPreTraining"),VNr.forEach(t),igo=r(ICe," (ViTMAE model)"),ICe.forEach(t),dgo=i(S),q_=n(S,"LI",{});var DCe=s(q_);LZ=n(DCe,"STRONG",{});var zNr=s(LZ);cgo=r(zNr,"wav2vec2"),zNr.forEach(t),fgo=r(DCe," \u2014 "),rP=n(DCe,"A",{href:!0});var WNr=s(rP);mgo=r(WNr,"Wav2Vec2ForPreTraining"),WNr.forEach(t),ggo=r(DCe," (Wav2Vec2 model)"),DCe.forEach(t),hgo=i(S),G_=n(S,"LI",{});var jCe=s(G_);BZ=n(jCe,"STRONG",{});var QNr=s(BZ);pgo=r(QNr,"xlm"),QNr.forEach(t),_go=r(jCe," \u2014 "),tP=n(jCe,"A",{href:!0});var HNr=s(tP);ugo=r(HNr,"XLMWithLMHeadModel"),HNr.forEach(t),bgo=r(jCe," (XLM model)"),jCe.forEach(t),vgo=i(S),O_=n(S,"LI",{});var NCe=s(O_);xZ=n(NCe,"STRONG",{});var UNr=s(xZ);Tgo=r(UNr,"xlm-roberta"),UNr.forEach(t),Fgo=r(NCe," \u2014 "),aP=n(NCe,"A",{href:!0});var JNr=s(aP);Cgo=r(JNr,"XLMRobertaForMaskedLM"),JNr.forEach(t),Mgo=r(NCe," (XLM-RoBERTa model)"),NCe.forEach(t),Ego=i(S),X_=n(S,"LI",{});var qCe=s(X_);kZ=n(qCe,"STRONG",{});var YNr=s(kZ);ygo=r(YNr,"xlm-roberta-xl"),YNr.forEach(t),wgo=r(qCe," \u2014 "),nP=n(qCe,"A",{href:!0});var KNr=s(nP);Ago=r(KNr,"XLMRobertaXLForMaskedLM"),KNr.forEach(t),Lgo=r(qCe," (XLM-RoBERTa-XL model)"),qCe.forEach(t),Bgo=i(S),V_=n(S,"LI",{});var GCe=s(V_);RZ=n(GCe,"STRONG",{});var ZNr=s(RZ);xgo=r(ZNr,"xlnet"),ZNr.forEach(t),kgo=r(GCe," \u2014 "),sP=n(GCe,"A",{href:!0});var eqr=s(sP);Rgo=r(eqr,"XLNetLMHeadModel"),eqr.forEach(t),Sgo=r(GCe," (XLNet model)"),GCe.forEach(t),S.forEach(t),Pgo=i(It),z_=n(It,"P",{});var OCe=s(z_);$go=r(OCe,"The model is set in evaluation mode by default using "),SZ=n(OCe,"CODE",{});var oqr=s(SZ);Igo=r(oqr,"model.eval()"),oqr.forEach(t),Dgo=r(OCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PZ=n(OCe,"CODE",{});var rqr=s(PZ);jgo=r(rqr,"model.train()"),rqr.forEach(t),OCe.forEach(t),Ngo=i(It),$Z=n(It,"P",{});var tqr=s($Z);qgo=r(tqr,"Examples:"),tqr.forEach(t),Ggo=i(It),m(_E.$$.fragment,It),It.forEach(t),Xs.forEach(t),Q7e=i(c),Ui=n(c,"H2",{class:!0});var eke=s(Ui);W_=n(eke,"A",{id:!0,class:!0,href:!0});var aqr=s(W_);IZ=n(aqr,"SPAN",{});var nqr=s(IZ);m(uE.$$.fragment,nqr),nqr.forEach(t),aqr.forEach(t),Ogo=i(eke),DZ=n(eke,"SPAN",{});var sqr=s(DZ);Xgo=r(sqr,"AutoModelForCausalLM"),sqr.forEach(t),eke.forEach(t),H7e=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(bE.$$.fragment,zs),Vgo=i(zs),Ji=n(zs,"P",{});var GV=s(Ji);zgo=r(GV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jZ=n(GV,"CODE",{});var lqr=s(jZ);Wgo=r(lqr,"from_pretrained()"),lqr.forEach(t),Qgo=r(GV,"class method or the "),NZ=n(GV,"CODE",{});var iqr=s(NZ);Hgo=r(iqr,"from_config()"),iqr.forEach(t),Ugo=r(GV,`class
method.`),GV.forEach(t),Jgo=i(zs),vE=n(zs,"P",{});var oke=s(vE);Ygo=r(oke,"This class cannot be instantiated directly using "),qZ=n(oke,"CODE",{});var dqr=s(qZ);Kgo=r(dqr,"__init__()"),dqr.forEach(t),Zgo=r(oke," (throws an error)."),oke.forEach(t),eho=i(zs),Or=n(zs,"DIV",{class:!0});var Ws=s(Or);m(TE.$$.fragment,Ws),oho=i(Ws),GZ=n(Ws,"P",{});var cqr=s(GZ);rho=r(cqr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cqr.forEach(t),tho=i(Ws),Yi=n(Ws,"P",{});var OV=s(Yi);aho=r(OV,`Note:
Loading a model from its configuration file does `),OZ=n(OV,"STRONG",{});var fqr=s(OZ);nho=r(fqr,"not"),fqr.forEach(t),sho=r(OV,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(OV,"CODE",{});var mqr=s(XZ);lho=r(mqr,"from_pretrained()"),mqr.forEach(t),iho=r(OV,"to load the model weights."),OV.forEach(t),dho=i(Ws),VZ=n(Ws,"P",{});var gqr=s(VZ);cho=r(gqr,"Examples:"),gqr.forEach(t),fho=i(Ws),m(FE.$$.fragment,Ws),Ws.forEach(t),mho=i(zs),Pe=n(zs,"DIV",{class:!0});var Dt=s(Pe);m(CE.$$.fragment,Dt),gho=i(Dt),zZ=n(Dt,"P",{});var hqr=s(zZ);hho=r(hqr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hqr.forEach(t),pho=i(Dt),Ga=n(Dt,"P",{});var B4=s(Ga);_ho=r(B4,"The model class to instantiate is selected based on the "),WZ=n(B4,"CODE",{});var pqr=s(WZ);uho=r(pqr,"model_type"),pqr.forEach(t),bho=r(B4,` property of the config object (either
passed as an argument or loaded from `),QZ=n(B4,"CODE",{});var _qr=s(QZ);vho=r(_qr,"pretrained_model_name_or_path"),_qr.forEach(t),Tho=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HZ=n(B4,"CODE",{});var uqr=s(HZ);Fho=r(uqr,"pretrained_model_name_or_path"),uqr.forEach(t),Cho=r(B4,":"),B4.forEach(t),Mho=i(Dt),$=n(Dt,"UL",{});var D=s($);Q_=n(D,"LI",{});var XCe=s(Q_);UZ=n(XCe,"STRONG",{});var bqr=s(UZ);Eho=r(bqr,"bart"),bqr.forEach(t),yho=r(XCe," \u2014 "),lP=n(XCe,"A",{href:!0});var vqr=s(lP);who=r(vqr,"BartForCausalLM"),vqr.forEach(t),Aho=r(XCe," (BART model)"),XCe.forEach(t),Lho=i(D),H_=n(D,"LI",{});var VCe=s(H_);JZ=n(VCe,"STRONG",{});var Tqr=s(JZ);Bho=r(Tqr,"bert"),Tqr.forEach(t),xho=r(VCe," \u2014 "),iP=n(VCe,"A",{href:!0});var Fqr=s(iP);kho=r(Fqr,"BertLMHeadModel"),Fqr.forEach(t),Rho=r(VCe," (BERT model)"),VCe.forEach(t),Sho=i(D),U_=n(D,"LI",{});var zCe=s(U_);YZ=n(zCe,"STRONG",{});var Cqr=s(YZ);Pho=r(Cqr,"bert-generation"),Cqr.forEach(t),$ho=r(zCe," \u2014 "),dP=n(zCe,"A",{href:!0});var Mqr=s(dP);Iho=r(Mqr,"BertGenerationDecoder"),Mqr.forEach(t),Dho=r(zCe," (Bert Generation model)"),zCe.forEach(t),jho=i(D),J_=n(D,"LI",{});var WCe=s(J_);KZ=n(WCe,"STRONG",{});var Eqr=s(KZ);Nho=r(Eqr,"big_bird"),Eqr.forEach(t),qho=r(WCe," \u2014 "),cP=n(WCe,"A",{href:!0});var yqr=s(cP);Gho=r(yqr,"BigBirdForCausalLM"),yqr.forEach(t),Oho=r(WCe," (BigBird model)"),WCe.forEach(t),Xho=i(D),Y_=n(D,"LI",{});var QCe=s(Y_);ZZ=n(QCe,"STRONG",{});var wqr=s(ZZ);Vho=r(wqr,"bigbird_pegasus"),wqr.forEach(t),zho=r(QCe," \u2014 "),fP=n(QCe,"A",{href:!0});var Aqr=s(fP);Who=r(Aqr,"BigBirdPegasusForCausalLM"),Aqr.forEach(t),Qho=r(QCe," (BigBirdPegasus model)"),QCe.forEach(t),Hho=i(D),K_=n(D,"LI",{});var HCe=s(K_);eee=n(HCe,"STRONG",{});var Lqr=s(eee);Uho=r(Lqr,"blenderbot"),Lqr.forEach(t),Jho=r(HCe," \u2014 "),mP=n(HCe,"A",{href:!0});var Bqr=s(mP);Yho=r(Bqr,"BlenderbotForCausalLM"),Bqr.forEach(t),Kho=r(HCe," (Blenderbot model)"),HCe.forEach(t),Zho=i(D),Z_=n(D,"LI",{});var UCe=s(Z_);oee=n(UCe,"STRONG",{});var xqr=s(oee);epo=r(xqr,"blenderbot-small"),xqr.forEach(t),opo=r(UCe," \u2014 "),gP=n(UCe,"A",{href:!0});var kqr=s(gP);rpo=r(kqr,"BlenderbotSmallForCausalLM"),kqr.forEach(t),tpo=r(UCe," (BlenderbotSmall model)"),UCe.forEach(t),apo=i(D),eu=n(D,"LI",{});var JCe=s(eu);ree=n(JCe,"STRONG",{});var Rqr=s(ree);npo=r(Rqr,"camembert"),Rqr.forEach(t),spo=r(JCe," \u2014 "),hP=n(JCe,"A",{href:!0});var Sqr=s(hP);lpo=r(Sqr,"CamembertForCausalLM"),Sqr.forEach(t),ipo=r(JCe," (CamemBERT model)"),JCe.forEach(t),dpo=i(D),ou=n(D,"LI",{});var YCe=s(ou);tee=n(YCe,"STRONG",{});var Pqr=s(tee);cpo=r(Pqr,"ctrl"),Pqr.forEach(t),fpo=r(YCe," \u2014 "),pP=n(YCe,"A",{href:!0});var $qr=s(pP);mpo=r($qr,"CTRLLMHeadModel"),$qr.forEach(t),gpo=r(YCe," (CTRL model)"),YCe.forEach(t),hpo=i(D),ru=n(D,"LI",{});var KCe=s(ru);aee=n(KCe,"STRONG",{});var Iqr=s(aee);ppo=r(Iqr,"data2vec-text"),Iqr.forEach(t),_po=r(KCe," \u2014 "),_P=n(KCe,"A",{href:!0});var Dqr=s(_P);upo=r(Dqr,"Data2VecTextForCausalLM"),Dqr.forEach(t),bpo=r(KCe," (Data2VecText model)"),KCe.forEach(t),vpo=i(D),tu=n(D,"LI",{});var ZCe=s(tu);nee=n(ZCe,"STRONG",{});var jqr=s(nee);Tpo=r(jqr,"electra"),jqr.forEach(t),Fpo=r(ZCe," \u2014 "),uP=n(ZCe,"A",{href:!0});var Nqr=s(uP);Cpo=r(Nqr,"ElectraForCausalLM"),Nqr.forEach(t),Mpo=r(ZCe," (ELECTRA model)"),ZCe.forEach(t),Epo=i(D),au=n(D,"LI",{});var e4e=s(au);see=n(e4e,"STRONG",{});var qqr=s(see);ypo=r(qqr,"gpt2"),qqr.forEach(t),wpo=r(e4e," \u2014 "),bP=n(e4e,"A",{href:!0});var Gqr=s(bP);Apo=r(Gqr,"GPT2LMHeadModel"),Gqr.forEach(t),Lpo=r(e4e," (OpenAI GPT-2 model)"),e4e.forEach(t),Bpo=i(D),nu=n(D,"LI",{});var o4e=s(nu);lee=n(o4e,"STRONG",{});var Oqr=s(lee);xpo=r(Oqr,"gpt_neo"),Oqr.forEach(t),kpo=r(o4e," \u2014 "),vP=n(o4e,"A",{href:!0});var Xqr=s(vP);Rpo=r(Xqr,"GPTNeoForCausalLM"),Xqr.forEach(t),Spo=r(o4e," (GPT Neo model)"),o4e.forEach(t),Ppo=i(D),su=n(D,"LI",{});var r4e=s(su);iee=n(r4e,"STRONG",{});var Vqr=s(iee);$po=r(Vqr,"gptj"),Vqr.forEach(t),Ipo=r(r4e," \u2014 "),TP=n(r4e,"A",{href:!0});var zqr=s(TP);Dpo=r(zqr,"GPTJForCausalLM"),zqr.forEach(t),jpo=r(r4e," (GPT-J model)"),r4e.forEach(t),Npo=i(D),lu=n(D,"LI",{});var t4e=s(lu);dee=n(t4e,"STRONG",{});var Wqr=s(dee);qpo=r(Wqr,"marian"),Wqr.forEach(t),Gpo=r(t4e," \u2014 "),FP=n(t4e,"A",{href:!0});var Qqr=s(FP);Opo=r(Qqr,"MarianForCausalLM"),Qqr.forEach(t),Xpo=r(t4e," (Marian model)"),t4e.forEach(t),Vpo=i(D),iu=n(D,"LI",{});var a4e=s(iu);cee=n(a4e,"STRONG",{});var Hqr=s(cee);zpo=r(Hqr,"mbart"),Hqr.forEach(t),Wpo=r(a4e," \u2014 "),CP=n(a4e,"A",{href:!0});var Uqr=s(CP);Qpo=r(Uqr,"MBartForCausalLM"),Uqr.forEach(t),Hpo=r(a4e," (mBART model)"),a4e.forEach(t),Upo=i(D),du=n(D,"LI",{});var n4e=s(du);fee=n(n4e,"STRONG",{});var Jqr=s(fee);Jpo=r(Jqr,"megatron-bert"),Jqr.forEach(t),Ypo=r(n4e," \u2014 "),MP=n(n4e,"A",{href:!0});var Yqr=s(MP);Kpo=r(Yqr,"MegatronBertForCausalLM"),Yqr.forEach(t),Zpo=r(n4e," (MegatronBert model)"),n4e.forEach(t),e_o=i(D),cu=n(D,"LI",{});var s4e=s(cu);mee=n(s4e,"STRONG",{});var Kqr=s(mee);o_o=r(Kqr,"openai-gpt"),Kqr.forEach(t),r_o=r(s4e," \u2014 "),EP=n(s4e,"A",{href:!0});var Zqr=s(EP);t_o=r(Zqr,"OpenAIGPTLMHeadModel"),Zqr.forEach(t),a_o=r(s4e," (OpenAI GPT model)"),s4e.forEach(t),n_o=i(D),fu=n(D,"LI",{});var l4e=s(fu);gee=n(l4e,"STRONG",{});var eGr=s(gee);s_o=r(eGr,"pegasus"),eGr.forEach(t),l_o=r(l4e," \u2014 "),yP=n(l4e,"A",{href:!0});var oGr=s(yP);i_o=r(oGr,"PegasusForCausalLM"),oGr.forEach(t),d_o=r(l4e," (Pegasus model)"),l4e.forEach(t),c_o=i(D),mu=n(D,"LI",{});var i4e=s(mu);hee=n(i4e,"STRONG",{});var rGr=s(hee);f_o=r(rGr,"plbart"),rGr.forEach(t),m_o=r(i4e," \u2014 "),wP=n(i4e,"A",{href:!0});var tGr=s(wP);g_o=r(tGr,"PLBartForCausalLM"),tGr.forEach(t),h_o=r(i4e," (PLBart model)"),i4e.forEach(t),p_o=i(D),gu=n(D,"LI",{});var d4e=s(gu);pee=n(d4e,"STRONG",{});var aGr=s(pee);__o=r(aGr,"prophetnet"),aGr.forEach(t),u_o=r(d4e," \u2014 "),AP=n(d4e,"A",{href:!0});var nGr=s(AP);b_o=r(nGr,"ProphetNetForCausalLM"),nGr.forEach(t),v_o=r(d4e," (ProphetNet model)"),d4e.forEach(t),T_o=i(D),hu=n(D,"LI",{});var c4e=s(hu);_ee=n(c4e,"STRONG",{});var sGr=s(_ee);F_o=r(sGr,"qdqbert"),sGr.forEach(t),C_o=r(c4e," \u2014 "),LP=n(c4e,"A",{href:!0});var lGr=s(LP);M_o=r(lGr,"QDQBertLMHeadModel"),lGr.forEach(t),E_o=r(c4e," (QDQBert model)"),c4e.forEach(t),y_o=i(D),pu=n(D,"LI",{});var f4e=s(pu);uee=n(f4e,"STRONG",{});var iGr=s(uee);w_o=r(iGr,"reformer"),iGr.forEach(t),A_o=r(f4e," \u2014 "),BP=n(f4e,"A",{href:!0});var dGr=s(BP);L_o=r(dGr,"ReformerModelWithLMHead"),dGr.forEach(t),B_o=r(f4e," (Reformer model)"),f4e.forEach(t),x_o=i(D),_u=n(D,"LI",{});var m4e=s(_u);bee=n(m4e,"STRONG",{});var cGr=s(bee);k_o=r(cGr,"rembert"),cGr.forEach(t),R_o=r(m4e," \u2014 "),xP=n(m4e,"A",{href:!0});var fGr=s(xP);S_o=r(fGr,"RemBertForCausalLM"),fGr.forEach(t),P_o=r(m4e," (RemBERT model)"),m4e.forEach(t),$_o=i(D),uu=n(D,"LI",{});var g4e=s(uu);vee=n(g4e,"STRONG",{});var mGr=s(vee);I_o=r(mGr,"roberta"),mGr.forEach(t),D_o=r(g4e," \u2014 "),kP=n(g4e,"A",{href:!0});var gGr=s(kP);j_o=r(gGr,"RobertaForCausalLM"),gGr.forEach(t),N_o=r(g4e," (RoBERTa model)"),g4e.forEach(t),q_o=i(D),bu=n(D,"LI",{});var h4e=s(bu);Tee=n(h4e,"STRONG",{});var hGr=s(Tee);G_o=r(hGr,"roformer"),hGr.forEach(t),O_o=r(h4e," \u2014 "),RP=n(h4e,"A",{href:!0});var pGr=s(RP);X_o=r(pGr,"RoFormerForCausalLM"),pGr.forEach(t),V_o=r(h4e," (RoFormer model)"),h4e.forEach(t),z_o=i(D),vu=n(D,"LI",{});var p4e=s(vu);Fee=n(p4e,"STRONG",{});var _Gr=s(Fee);W_o=r(_Gr,"speech_to_text_2"),_Gr.forEach(t),Q_o=r(p4e," \u2014 "),SP=n(p4e,"A",{href:!0});var uGr=s(SP);H_o=r(uGr,"Speech2Text2ForCausalLM"),uGr.forEach(t),U_o=r(p4e," (Speech2Text2 model)"),p4e.forEach(t),J_o=i(D),Tu=n(D,"LI",{});var _4e=s(Tu);Cee=n(_4e,"STRONG",{});var bGr=s(Cee);Y_o=r(bGr,"transfo-xl"),bGr.forEach(t),K_o=r(_4e," \u2014 "),PP=n(_4e,"A",{href:!0});var vGr=s(PP);Z_o=r(vGr,"TransfoXLLMHeadModel"),vGr.forEach(t),euo=r(_4e," (Transformer-XL model)"),_4e.forEach(t),ouo=i(D),Fu=n(D,"LI",{});var u4e=s(Fu);Mee=n(u4e,"STRONG",{});var TGr=s(Mee);ruo=r(TGr,"trocr"),TGr.forEach(t),tuo=r(u4e," \u2014 "),$P=n(u4e,"A",{href:!0});var FGr=s($P);auo=r(FGr,"TrOCRForCausalLM"),FGr.forEach(t),nuo=r(u4e," (TrOCR model)"),u4e.forEach(t),suo=i(D),Cu=n(D,"LI",{});var b4e=s(Cu);Eee=n(b4e,"STRONG",{});var CGr=s(Eee);luo=r(CGr,"xglm"),CGr.forEach(t),iuo=r(b4e," \u2014 "),IP=n(b4e,"A",{href:!0});var MGr=s(IP);duo=r(MGr,"XGLMForCausalLM"),MGr.forEach(t),cuo=r(b4e," (XGLM model)"),b4e.forEach(t),fuo=i(D),Mu=n(D,"LI",{});var v4e=s(Mu);yee=n(v4e,"STRONG",{});var EGr=s(yee);muo=r(EGr,"xlm"),EGr.forEach(t),guo=r(v4e," \u2014 "),DP=n(v4e,"A",{href:!0});var yGr=s(DP);huo=r(yGr,"XLMWithLMHeadModel"),yGr.forEach(t),puo=r(v4e," (XLM model)"),v4e.forEach(t),_uo=i(D),Eu=n(D,"LI",{});var T4e=s(Eu);wee=n(T4e,"STRONG",{});var wGr=s(wee);uuo=r(wGr,"xlm-prophetnet"),wGr.forEach(t),buo=r(T4e," \u2014 "),jP=n(T4e,"A",{href:!0});var AGr=s(jP);vuo=r(AGr,"XLMProphetNetForCausalLM"),AGr.forEach(t),Tuo=r(T4e," (XLMProphetNet model)"),T4e.forEach(t),Fuo=i(D),yu=n(D,"LI",{});var F4e=s(yu);Aee=n(F4e,"STRONG",{});var LGr=s(Aee);Cuo=r(LGr,"xlm-roberta"),LGr.forEach(t),Muo=r(F4e," \u2014 "),NP=n(F4e,"A",{href:!0});var BGr=s(NP);Euo=r(BGr,"XLMRobertaForCausalLM"),BGr.forEach(t),yuo=r(F4e," (XLM-RoBERTa model)"),F4e.forEach(t),wuo=i(D),wu=n(D,"LI",{});var C4e=s(wu);Lee=n(C4e,"STRONG",{});var xGr=s(Lee);Auo=r(xGr,"xlm-roberta-xl"),xGr.forEach(t),Luo=r(C4e," \u2014 "),qP=n(C4e,"A",{href:!0});var kGr=s(qP);Buo=r(kGr,"XLMRobertaXLForCausalLM"),kGr.forEach(t),xuo=r(C4e," (XLM-RoBERTa-XL model)"),C4e.forEach(t),kuo=i(D),Au=n(D,"LI",{});var M4e=s(Au);Bee=n(M4e,"STRONG",{});var RGr=s(Bee);Ruo=r(RGr,"xlnet"),RGr.forEach(t),Suo=r(M4e," \u2014 "),GP=n(M4e,"A",{href:!0});var SGr=s(GP);Puo=r(SGr,"XLNetLMHeadModel"),SGr.forEach(t),$uo=r(M4e," (XLNet model)"),M4e.forEach(t),D.forEach(t),Iuo=i(Dt),Lu=n(Dt,"P",{});var E4e=s(Lu);Duo=r(E4e,"The model is set in evaluation mode by default using "),xee=n(E4e,"CODE",{});var PGr=s(xee);juo=r(PGr,"model.eval()"),PGr.forEach(t),Nuo=r(E4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kee=n(E4e,"CODE",{});var $Gr=s(kee);quo=r($Gr,"model.train()"),$Gr.forEach(t),E4e.forEach(t),Guo=i(Dt),Ree=n(Dt,"P",{});var IGr=s(Ree);Ouo=r(IGr,"Examples:"),IGr.forEach(t),Xuo=i(Dt),m(ME.$$.fragment,Dt),Dt.forEach(t),zs.forEach(t),U7e=i(c),Ki=n(c,"H2",{class:!0});var rke=s(Ki);Bu=n(rke,"A",{id:!0,class:!0,href:!0});var DGr=s(Bu);See=n(DGr,"SPAN",{});var jGr=s(See);m(EE.$$.fragment,jGr),jGr.forEach(t),DGr.forEach(t),Vuo=i(rke),Pee=n(rke,"SPAN",{});var NGr=s(Pee);zuo=r(NGr,"AutoModelForMaskedLM"),NGr.forEach(t),rke.forEach(t),J7e=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(yE.$$.fragment,Qs),Wuo=i(Qs),Zi=n(Qs,"P",{});var XV=s(Zi);Quo=r(XV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$ee=n(XV,"CODE",{});var qGr=s($ee);Huo=r(qGr,"from_pretrained()"),qGr.forEach(t),Uuo=r(XV,"class method or the "),Iee=n(XV,"CODE",{});var GGr=s(Iee);Juo=r(GGr,"from_config()"),GGr.forEach(t),Yuo=r(XV,`class
method.`),XV.forEach(t),Kuo=i(Qs),wE=n(Qs,"P",{});var tke=s(wE);Zuo=r(tke,"This class cannot be instantiated directly using "),Dee=n(tke,"CODE",{});var OGr=s(Dee);e1o=r(OGr,"__init__()"),OGr.forEach(t),o1o=r(tke," (throws an error)."),tke.forEach(t),r1o=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Hs=s(Xr);m(AE.$$.fragment,Hs),t1o=i(Hs),jee=n(Hs,"P",{});var XGr=s(jee);a1o=r(XGr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XGr.forEach(t),n1o=i(Hs),ed=n(Hs,"P",{});var VV=s(ed);s1o=r(VV,`Note:
Loading a model from its configuration file does `),Nee=n(VV,"STRONG",{});var VGr=s(Nee);l1o=r(VGr,"not"),VGr.forEach(t),i1o=r(VV,` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=n(VV,"CODE",{});var zGr=s(qee);d1o=r(zGr,"from_pretrained()"),zGr.forEach(t),c1o=r(VV,"to load the model weights."),VV.forEach(t),f1o=i(Hs),Gee=n(Hs,"P",{});var WGr=s(Gee);m1o=r(WGr,"Examples:"),WGr.forEach(t),g1o=i(Hs),m(LE.$$.fragment,Hs),Hs.forEach(t),h1o=i(Qs),$e=n(Qs,"DIV",{class:!0});var jt=s($e);m(BE.$$.fragment,jt),p1o=i(jt),Oee=n(jt,"P",{});var QGr=s(Oee);_1o=r(QGr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QGr.forEach(t),u1o=i(jt),Oa=n(jt,"P",{});var x4=s(Oa);b1o=r(x4,"The model class to instantiate is selected based on the "),Xee=n(x4,"CODE",{});var HGr=s(Xee);v1o=r(HGr,"model_type"),HGr.forEach(t),T1o=r(x4,` property of the config object (either
passed as an argument or loaded from `),Vee=n(x4,"CODE",{});var UGr=s(Vee);F1o=r(UGr,"pretrained_model_name_or_path"),UGr.forEach(t),C1o=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zee=n(x4,"CODE",{});var JGr=s(zee);M1o=r(JGr,"pretrained_model_name_or_path"),JGr.forEach(t),E1o=r(x4,":"),x4.forEach(t),y1o=i(jt),I=n(jt,"UL",{});var j=s(I);xu=n(j,"LI",{});var y4e=s(xu);Wee=n(y4e,"STRONG",{});var YGr=s(Wee);w1o=r(YGr,"albert"),YGr.forEach(t),A1o=r(y4e," \u2014 "),OP=n(y4e,"A",{href:!0});var KGr=s(OP);L1o=r(KGr,"AlbertForMaskedLM"),KGr.forEach(t),B1o=r(y4e," (ALBERT model)"),y4e.forEach(t),x1o=i(j),ku=n(j,"LI",{});var w4e=s(ku);Qee=n(w4e,"STRONG",{});var ZGr=s(Qee);k1o=r(ZGr,"bart"),ZGr.forEach(t),R1o=r(w4e," \u2014 "),XP=n(w4e,"A",{href:!0});var eOr=s(XP);S1o=r(eOr,"BartForConditionalGeneration"),eOr.forEach(t),P1o=r(w4e," (BART model)"),w4e.forEach(t),$1o=i(j),Ru=n(j,"LI",{});var A4e=s(Ru);Hee=n(A4e,"STRONG",{});var oOr=s(Hee);I1o=r(oOr,"bert"),oOr.forEach(t),D1o=r(A4e," \u2014 "),VP=n(A4e,"A",{href:!0});var rOr=s(VP);j1o=r(rOr,"BertForMaskedLM"),rOr.forEach(t),N1o=r(A4e," (BERT model)"),A4e.forEach(t),q1o=i(j),Su=n(j,"LI",{});var L4e=s(Su);Uee=n(L4e,"STRONG",{});var tOr=s(Uee);G1o=r(tOr,"big_bird"),tOr.forEach(t),O1o=r(L4e," \u2014 "),zP=n(L4e,"A",{href:!0});var aOr=s(zP);X1o=r(aOr,"BigBirdForMaskedLM"),aOr.forEach(t),V1o=r(L4e," (BigBird model)"),L4e.forEach(t),z1o=i(j),Pu=n(j,"LI",{});var B4e=s(Pu);Jee=n(B4e,"STRONG",{});var nOr=s(Jee);W1o=r(nOr,"camembert"),nOr.forEach(t),Q1o=r(B4e," \u2014 "),WP=n(B4e,"A",{href:!0});var sOr=s(WP);H1o=r(sOr,"CamembertForMaskedLM"),sOr.forEach(t),U1o=r(B4e," (CamemBERT model)"),B4e.forEach(t),J1o=i(j),$u=n(j,"LI",{});var x4e=s($u);Yee=n(x4e,"STRONG",{});var lOr=s(Yee);Y1o=r(lOr,"convbert"),lOr.forEach(t),K1o=r(x4e," \u2014 "),QP=n(x4e,"A",{href:!0});var iOr=s(QP);Z1o=r(iOr,"ConvBertForMaskedLM"),iOr.forEach(t),ebo=r(x4e," (ConvBERT model)"),x4e.forEach(t),obo=i(j),Iu=n(j,"LI",{});var k4e=s(Iu);Kee=n(k4e,"STRONG",{});var dOr=s(Kee);rbo=r(dOr,"data2vec-text"),dOr.forEach(t),tbo=r(k4e," \u2014 "),HP=n(k4e,"A",{href:!0});var cOr=s(HP);abo=r(cOr,"Data2VecTextForMaskedLM"),cOr.forEach(t),nbo=r(k4e," (Data2VecText model)"),k4e.forEach(t),sbo=i(j),Du=n(j,"LI",{});var R4e=s(Du);Zee=n(R4e,"STRONG",{});var fOr=s(Zee);lbo=r(fOr,"deberta"),fOr.forEach(t),ibo=r(R4e," \u2014 "),UP=n(R4e,"A",{href:!0});var mOr=s(UP);dbo=r(mOr,"DebertaForMaskedLM"),mOr.forEach(t),cbo=r(R4e," (DeBERTa model)"),R4e.forEach(t),fbo=i(j),ju=n(j,"LI",{});var S4e=s(ju);eoe=n(S4e,"STRONG",{});var gOr=s(eoe);mbo=r(gOr,"deberta-v2"),gOr.forEach(t),gbo=r(S4e," \u2014 "),JP=n(S4e,"A",{href:!0});var hOr=s(JP);hbo=r(hOr,"DebertaV2ForMaskedLM"),hOr.forEach(t),pbo=r(S4e," (DeBERTa-v2 model)"),S4e.forEach(t),_bo=i(j),Nu=n(j,"LI",{});var P4e=s(Nu);ooe=n(P4e,"STRONG",{});var pOr=s(ooe);ubo=r(pOr,"distilbert"),pOr.forEach(t),bbo=r(P4e," \u2014 "),YP=n(P4e,"A",{href:!0});var _Or=s(YP);vbo=r(_Or,"DistilBertForMaskedLM"),_Or.forEach(t),Tbo=r(P4e," (DistilBERT model)"),P4e.forEach(t),Fbo=i(j),qu=n(j,"LI",{});var $4e=s(qu);roe=n($4e,"STRONG",{});var uOr=s(roe);Cbo=r(uOr,"electra"),uOr.forEach(t),Mbo=r($4e," \u2014 "),KP=n($4e,"A",{href:!0});var bOr=s(KP);Ebo=r(bOr,"ElectraForMaskedLM"),bOr.forEach(t),ybo=r($4e," (ELECTRA model)"),$4e.forEach(t),wbo=i(j),Gu=n(j,"LI",{});var I4e=s(Gu);toe=n(I4e,"STRONG",{});var vOr=s(toe);Abo=r(vOr,"flaubert"),vOr.forEach(t),Lbo=r(I4e," \u2014 "),ZP=n(I4e,"A",{href:!0});var TOr=s(ZP);Bbo=r(TOr,"FlaubertWithLMHeadModel"),TOr.forEach(t),xbo=r(I4e," (FlauBERT model)"),I4e.forEach(t),kbo=i(j),Ou=n(j,"LI",{});var D4e=s(Ou);aoe=n(D4e,"STRONG",{});var FOr=s(aoe);Rbo=r(FOr,"fnet"),FOr.forEach(t),Sbo=r(D4e," \u2014 "),e$=n(D4e,"A",{href:!0});var COr=s(e$);Pbo=r(COr,"FNetForMaskedLM"),COr.forEach(t),$bo=r(D4e," (FNet model)"),D4e.forEach(t),Ibo=i(j),Xu=n(j,"LI",{});var j4e=s(Xu);noe=n(j4e,"STRONG",{});var MOr=s(noe);Dbo=r(MOr,"funnel"),MOr.forEach(t),jbo=r(j4e," \u2014 "),o$=n(j4e,"A",{href:!0});var EOr=s(o$);Nbo=r(EOr,"FunnelForMaskedLM"),EOr.forEach(t),qbo=r(j4e," (Funnel Transformer model)"),j4e.forEach(t),Gbo=i(j),Vu=n(j,"LI",{});var N4e=s(Vu);soe=n(N4e,"STRONG",{});var yOr=s(soe);Obo=r(yOr,"ibert"),yOr.forEach(t),Xbo=r(N4e," \u2014 "),r$=n(N4e,"A",{href:!0});var wOr=s(r$);Vbo=r(wOr,"IBertForMaskedLM"),wOr.forEach(t),zbo=r(N4e," (I-BERT model)"),N4e.forEach(t),Wbo=i(j),zu=n(j,"LI",{});var q4e=s(zu);loe=n(q4e,"STRONG",{});var AOr=s(loe);Qbo=r(AOr,"layoutlm"),AOr.forEach(t),Hbo=r(q4e," \u2014 "),t$=n(q4e,"A",{href:!0});var LOr=s(t$);Ubo=r(LOr,"LayoutLMForMaskedLM"),LOr.forEach(t),Jbo=r(q4e," (LayoutLM model)"),q4e.forEach(t),Ybo=i(j),Wu=n(j,"LI",{});var G4e=s(Wu);ioe=n(G4e,"STRONG",{});var BOr=s(ioe);Kbo=r(BOr,"longformer"),BOr.forEach(t),Zbo=r(G4e," \u2014 "),a$=n(G4e,"A",{href:!0});var xOr=s(a$);e3o=r(xOr,"LongformerForMaskedLM"),xOr.forEach(t),o3o=r(G4e," (Longformer model)"),G4e.forEach(t),r3o=i(j),Qu=n(j,"LI",{});var O4e=s(Qu);doe=n(O4e,"STRONG",{});var kOr=s(doe);t3o=r(kOr,"mbart"),kOr.forEach(t),a3o=r(O4e," \u2014 "),n$=n(O4e,"A",{href:!0});var ROr=s(n$);n3o=r(ROr,"MBartForConditionalGeneration"),ROr.forEach(t),s3o=r(O4e," (mBART model)"),O4e.forEach(t),l3o=i(j),Hu=n(j,"LI",{});var X4e=s(Hu);coe=n(X4e,"STRONG",{});var SOr=s(coe);i3o=r(SOr,"megatron-bert"),SOr.forEach(t),d3o=r(X4e," \u2014 "),s$=n(X4e,"A",{href:!0});var POr=s(s$);c3o=r(POr,"MegatronBertForMaskedLM"),POr.forEach(t),f3o=r(X4e," (MegatronBert model)"),X4e.forEach(t),m3o=i(j),Uu=n(j,"LI",{});var V4e=s(Uu);foe=n(V4e,"STRONG",{});var $Or=s(foe);g3o=r($Or,"mobilebert"),$Or.forEach(t),h3o=r(V4e," \u2014 "),l$=n(V4e,"A",{href:!0});var IOr=s(l$);p3o=r(IOr,"MobileBertForMaskedLM"),IOr.forEach(t),_3o=r(V4e," (MobileBERT model)"),V4e.forEach(t),u3o=i(j),Ju=n(j,"LI",{});var z4e=s(Ju);moe=n(z4e,"STRONG",{});var DOr=s(moe);b3o=r(DOr,"mpnet"),DOr.forEach(t),v3o=r(z4e," \u2014 "),i$=n(z4e,"A",{href:!0});var jOr=s(i$);T3o=r(jOr,"MPNetForMaskedLM"),jOr.forEach(t),F3o=r(z4e," (MPNet model)"),z4e.forEach(t),C3o=i(j),Yu=n(j,"LI",{});var W4e=s(Yu);goe=n(W4e,"STRONG",{});var NOr=s(goe);M3o=r(NOr,"nystromformer"),NOr.forEach(t),E3o=r(W4e," \u2014 "),d$=n(W4e,"A",{href:!0});var qOr=s(d$);y3o=r(qOr,"NystromformerForMaskedLM"),qOr.forEach(t),w3o=r(W4e," (Nystromformer model)"),W4e.forEach(t),A3o=i(j),Ku=n(j,"LI",{});var Q4e=s(Ku);hoe=n(Q4e,"STRONG",{});var GOr=s(hoe);L3o=r(GOr,"perceiver"),GOr.forEach(t),B3o=r(Q4e," \u2014 "),c$=n(Q4e,"A",{href:!0});var OOr=s(c$);x3o=r(OOr,"PerceiverForMaskedLM"),OOr.forEach(t),k3o=r(Q4e," (Perceiver model)"),Q4e.forEach(t),R3o=i(j),Zu=n(j,"LI",{});var H4e=s(Zu);poe=n(H4e,"STRONG",{});var XOr=s(poe);S3o=r(XOr,"qdqbert"),XOr.forEach(t),P3o=r(H4e," \u2014 "),f$=n(H4e,"A",{href:!0});var VOr=s(f$);$3o=r(VOr,"QDQBertForMaskedLM"),VOr.forEach(t),I3o=r(H4e," (QDQBert model)"),H4e.forEach(t),D3o=i(j),e1=n(j,"LI",{});var U4e=s(e1);_oe=n(U4e,"STRONG",{});var zOr=s(_oe);j3o=r(zOr,"reformer"),zOr.forEach(t),N3o=r(U4e," \u2014 "),m$=n(U4e,"A",{href:!0});var WOr=s(m$);q3o=r(WOr,"ReformerForMaskedLM"),WOr.forEach(t),G3o=r(U4e," (Reformer model)"),U4e.forEach(t),O3o=i(j),o1=n(j,"LI",{});var J4e=s(o1);uoe=n(J4e,"STRONG",{});var QOr=s(uoe);X3o=r(QOr,"rembert"),QOr.forEach(t),V3o=r(J4e," \u2014 "),g$=n(J4e,"A",{href:!0});var HOr=s(g$);z3o=r(HOr,"RemBertForMaskedLM"),HOr.forEach(t),W3o=r(J4e," (RemBERT model)"),J4e.forEach(t),Q3o=i(j),r1=n(j,"LI",{});var Y4e=s(r1);boe=n(Y4e,"STRONG",{});var UOr=s(boe);H3o=r(UOr,"roberta"),UOr.forEach(t),U3o=r(Y4e," \u2014 "),h$=n(Y4e,"A",{href:!0});var JOr=s(h$);J3o=r(JOr,"RobertaForMaskedLM"),JOr.forEach(t),Y3o=r(Y4e," (RoBERTa model)"),Y4e.forEach(t),K3o=i(j),t1=n(j,"LI",{});var K4e=s(t1);voe=n(K4e,"STRONG",{});var YOr=s(voe);Z3o=r(YOr,"roformer"),YOr.forEach(t),e5o=r(K4e," \u2014 "),p$=n(K4e,"A",{href:!0});var KOr=s(p$);o5o=r(KOr,"RoFormerForMaskedLM"),KOr.forEach(t),r5o=r(K4e," (RoFormer model)"),K4e.forEach(t),t5o=i(j),a1=n(j,"LI",{});var Z4e=s(a1);Toe=n(Z4e,"STRONG",{});var ZOr=s(Toe);a5o=r(ZOr,"squeezebert"),ZOr.forEach(t),n5o=r(Z4e," \u2014 "),_$=n(Z4e,"A",{href:!0});var eXr=s(_$);s5o=r(eXr,"SqueezeBertForMaskedLM"),eXr.forEach(t),l5o=r(Z4e," (SqueezeBERT model)"),Z4e.forEach(t),i5o=i(j),n1=n(j,"LI",{});var eMe=s(n1);Foe=n(eMe,"STRONG",{});var oXr=s(Foe);d5o=r(oXr,"tapas"),oXr.forEach(t),c5o=r(eMe," \u2014 "),u$=n(eMe,"A",{href:!0});var rXr=s(u$);f5o=r(rXr,"TapasForMaskedLM"),rXr.forEach(t),m5o=r(eMe," (TAPAS model)"),eMe.forEach(t),g5o=i(j),s1=n(j,"LI",{});var oMe=s(s1);Coe=n(oMe,"STRONG",{});var tXr=s(Coe);h5o=r(tXr,"wav2vec2"),tXr.forEach(t),p5o=r(oMe," \u2014 "),Moe=n(oMe,"CODE",{});var aXr=s(Moe);_5o=r(aXr,"Wav2Vec2ForMaskedLM"),aXr.forEach(t),u5o=r(oMe,"(Wav2Vec2 model)"),oMe.forEach(t),b5o=i(j),l1=n(j,"LI",{});var rMe=s(l1);Eoe=n(rMe,"STRONG",{});var nXr=s(Eoe);v5o=r(nXr,"xlm"),nXr.forEach(t),T5o=r(rMe," \u2014 "),b$=n(rMe,"A",{href:!0});var sXr=s(b$);F5o=r(sXr,"XLMWithLMHeadModel"),sXr.forEach(t),C5o=r(rMe," (XLM model)"),rMe.forEach(t),M5o=i(j),i1=n(j,"LI",{});var tMe=s(i1);yoe=n(tMe,"STRONG",{});var lXr=s(yoe);E5o=r(lXr,"xlm-roberta"),lXr.forEach(t),y5o=r(tMe," \u2014 "),v$=n(tMe,"A",{href:!0});var iXr=s(v$);w5o=r(iXr,"XLMRobertaForMaskedLM"),iXr.forEach(t),A5o=r(tMe," (XLM-RoBERTa model)"),tMe.forEach(t),L5o=i(j),d1=n(j,"LI",{});var aMe=s(d1);woe=n(aMe,"STRONG",{});var dXr=s(woe);B5o=r(dXr,"xlm-roberta-xl"),dXr.forEach(t),x5o=r(aMe," \u2014 "),T$=n(aMe,"A",{href:!0});var cXr=s(T$);k5o=r(cXr,"XLMRobertaXLForMaskedLM"),cXr.forEach(t),R5o=r(aMe," (XLM-RoBERTa-XL model)"),aMe.forEach(t),S5o=i(j),c1=n(j,"LI",{});var nMe=s(c1);Aoe=n(nMe,"STRONG",{});var fXr=s(Aoe);P5o=r(fXr,"yoso"),fXr.forEach(t),$5o=r(nMe," \u2014 "),F$=n(nMe,"A",{href:!0});var mXr=s(F$);I5o=r(mXr,"YosoForMaskedLM"),mXr.forEach(t),D5o=r(nMe," (YOSO model)"),nMe.forEach(t),j.forEach(t),j5o=i(jt),f1=n(jt,"P",{});var sMe=s(f1);N5o=r(sMe,"The model is set in evaluation mode by default using "),Loe=n(sMe,"CODE",{});var gXr=s(Loe);q5o=r(gXr,"model.eval()"),gXr.forEach(t),G5o=r(sMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Boe=n(sMe,"CODE",{});var hXr=s(Boe);O5o=r(hXr,"model.train()"),hXr.forEach(t),sMe.forEach(t),X5o=i(jt),xoe=n(jt,"P",{});var pXr=s(xoe);V5o=r(pXr,"Examples:"),pXr.forEach(t),z5o=i(jt),m(xE.$$.fragment,jt),jt.forEach(t),Qs.forEach(t),Y7e=i(c),od=n(c,"H2",{class:!0});var ake=s(od);m1=n(ake,"A",{id:!0,class:!0,href:!0});var _Xr=s(m1);koe=n(_Xr,"SPAN",{});var uXr=s(koe);m(kE.$$.fragment,uXr),uXr.forEach(t),_Xr.forEach(t),W5o=i(ake),Roe=n(ake,"SPAN",{});var bXr=s(Roe);Q5o=r(bXr,"AutoModelForSeq2SeqLM"),bXr.forEach(t),ake.forEach(t),K7e=i(c),Yo=n(c,"DIV",{class:!0});var Us=s(Yo);m(RE.$$.fragment,Us),H5o=i(Us),rd=n(Us,"P",{});var zV=s(rd);U5o=r(zV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Soe=n(zV,"CODE",{});var vXr=s(Soe);J5o=r(vXr,"from_pretrained()"),vXr.forEach(t),Y5o=r(zV,"class method or the "),Poe=n(zV,"CODE",{});var TXr=s(Poe);K5o=r(TXr,"from_config()"),TXr.forEach(t),Z5o=r(zV,`class
method.`),zV.forEach(t),e2o=i(Us),SE=n(Us,"P",{});var nke=s(SE);o2o=r(nke,"This class cannot be instantiated directly using "),$oe=n(nke,"CODE",{});var FXr=s($oe);r2o=r(FXr,"__init__()"),FXr.forEach(t),t2o=r(nke," (throws an error)."),nke.forEach(t),a2o=i(Us),Vr=n(Us,"DIV",{class:!0});var Js=s(Vr);m(PE.$$.fragment,Js),n2o=i(Js),Ioe=n(Js,"P",{});var CXr=s(Ioe);s2o=r(CXr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CXr.forEach(t),l2o=i(Js),td=n(Js,"P",{});var WV=s(td);i2o=r(WV,`Note:
Loading a model from its configuration file does `),Doe=n(WV,"STRONG",{});var MXr=s(Doe);d2o=r(MXr,"not"),MXr.forEach(t),c2o=r(WV,` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=n(WV,"CODE",{});var EXr=s(joe);f2o=r(EXr,"from_pretrained()"),EXr.forEach(t),m2o=r(WV,"to load the model weights."),WV.forEach(t),g2o=i(Js),Noe=n(Js,"P",{});var yXr=s(Noe);h2o=r(yXr,"Examples:"),yXr.forEach(t),p2o=i(Js),m($E.$$.fragment,Js),Js.forEach(t),_2o=i(Us),Ie=n(Us,"DIV",{class:!0});var Nt=s(Ie);m(IE.$$.fragment,Nt),u2o=i(Nt),qoe=n(Nt,"P",{});var wXr=s(qoe);b2o=r(wXr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wXr.forEach(t),v2o=i(Nt),Xa=n(Nt,"P",{});var k4=s(Xa);T2o=r(k4,"The model class to instantiate is selected based on the "),Goe=n(k4,"CODE",{});var AXr=s(Goe);F2o=r(AXr,"model_type"),AXr.forEach(t),C2o=r(k4,` property of the config object (either
passed as an argument or loaded from `),Ooe=n(k4,"CODE",{});var LXr=s(Ooe);M2o=r(LXr,"pretrained_model_name_or_path"),LXr.forEach(t),E2o=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xoe=n(k4,"CODE",{});var BXr=s(Xoe);y2o=r(BXr,"pretrained_model_name_or_path"),BXr.forEach(t),w2o=r(k4,":"),k4.forEach(t),A2o=i(Nt),ae=n(Nt,"UL",{});var le=s(ae);g1=n(le,"LI",{});var lMe=s(g1);Voe=n(lMe,"STRONG",{});var xXr=s(Voe);L2o=r(xXr,"bart"),xXr.forEach(t),B2o=r(lMe," \u2014 "),C$=n(lMe,"A",{href:!0});var kXr=s(C$);x2o=r(kXr,"BartForConditionalGeneration"),kXr.forEach(t),k2o=r(lMe," (BART model)"),lMe.forEach(t),R2o=i(le),h1=n(le,"LI",{});var iMe=s(h1);zoe=n(iMe,"STRONG",{});var RXr=s(zoe);S2o=r(RXr,"bigbird_pegasus"),RXr.forEach(t),P2o=r(iMe," \u2014 "),M$=n(iMe,"A",{href:!0});var SXr=s(M$);$2o=r(SXr,"BigBirdPegasusForConditionalGeneration"),SXr.forEach(t),I2o=r(iMe," (BigBirdPegasus model)"),iMe.forEach(t),D2o=i(le),p1=n(le,"LI",{});var dMe=s(p1);Woe=n(dMe,"STRONG",{});var PXr=s(Woe);j2o=r(PXr,"blenderbot"),PXr.forEach(t),N2o=r(dMe," \u2014 "),E$=n(dMe,"A",{href:!0});var $Xr=s(E$);q2o=r($Xr,"BlenderbotForConditionalGeneration"),$Xr.forEach(t),G2o=r(dMe," (Blenderbot model)"),dMe.forEach(t),O2o=i(le),_1=n(le,"LI",{});var cMe=s(_1);Qoe=n(cMe,"STRONG",{});var IXr=s(Qoe);X2o=r(IXr,"blenderbot-small"),IXr.forEach(t),V2o=r(cMe," \u2014 "),y$=n(cMe,"A",{href:!0});var DXr=s(y$);z2o=r(DXr,"BlenderbotSmallForConditionalGeneration"),DXr.forEach(t),W2o=r(cMe," (BlenderbotSmall model)"),cMe.forEach(t),Q2o=i(le),u1=n(le,"LI",{});var fMe=s(u1);Hoe=n(fMe,"STRONG",{});var jXr=s(Hoe);H2o=r(jXr,"encoder-decoder"),jXr.forEach(t),U2o=r(fMe," \u2014 "),w$=n(fMe,"A",{href:!0});var NXr=s(w$);J2o=r(NXr,"EncoderDecoderModel"),NXr.forEach(t),Y2o=r(fMe," (Encoder decoder model)"),fMe.forEach(t),K2o=i(le),b1=n(le,"LI",{});var mMe=s(b1);Uoe=n(mMe,"STRONG",{});var qXr=s(Uoe);Z2o=r(qXr,"fsmt"),qXr.forEach(t),evo=r(mMe," \u2014 "),A$=n(mMe,"A",{href:!0});var GXr=s(A$);ovo=r(GXr,"FSMTForConditionalGeneration"),GXr.forEach(t),rvo=r(mMe," (FairSeq Machine-Translation model)"),mMe.forEach(t),tvo=i(le),v1=n(le,"LI",{});var gMe=s(v1);Joe=n(gMe,"STRONG",{});var OXr=s(Joe);avo=r(OXr,"led"),OXr.forEach(t),nvo=r(gMe," \u2014 "),L$=n(gMe,"A",{href:!0});var XXr=s(L$);svo=r(XXr,"LEDForConditionalGeneration"),XXr.forEach(t),lvo=r(gMe," (LED model)"),gMe.forEach(t),ivo=i(le),T1=n(le,"LI",{});var hMe=s(T1);Yoe=n(hMe,"STRONG",{});var VXr=s(Yoe);dvo=r(VXr,"m2m_100"),VXr.forEach(t),cvo=r(hMe," \u2014 "),B$=n(hMe,"A",{href:!0});var zXr=s(B$);fvo=r(zXr,"M2M100ForConditionalGeneration"),zXr.forEach(t),mvo=r(hMe," (M2M100 model)"),hMe.forEach(t),gvo=i(le),F1=n(le,"LI",{});var pMe=s(F1);Koe=n(pMe,"STRONG",{});var WXr=s(Koe);hvo=r(WXr,"marian"),WXr.forEach(t),pvo=r(pMe," \u2014 "),x$=n(pMe,"A",{href:!0});var QXr=s(x$);_vo=r(QXr,"MarianMTModel"),QXr.forEach(t),uvo=r(pMe," (Marian model)"),pMe.forEach(t),bvo=i(le),C1=n(le,"LI",{});var _Me=s(C1);Zoe=n(_Me,"STRONG",{});var HXr=s(Zoe);vvo=r(HXr,"mbart"),HXr.forEach(t),Tvo=r(_Me," \u2014 "),k$=n(_Me,"A",{href:!0});var UXr=s(k$);Fvo=r(UXr,"MBartForConditionalGeneration"),UXr.forEach(t),Cvo=r(_Me," (mBART model)"),_Me.forEach(t),Mvo=i(le),M1=n(le,"LI",{});var uMe=s(M1);ere=n(uMe,"STRONG",{});var JXr=s(ere);Evo=r(JXr,"mt5"),JXr.forEach(t),yvo=r(uMe," \u2014 "),R$=n(uMe,"A",{href:!0});var YXr=s(R$);wvo=r(YXr,"MT5ForConditionalGeneration"),YXr.forEach(t),Avo=r(uMe," (mT5 model)"),uMe.forEach(t),Lvo=i(le),E1=n(le,"LI",{});var bMe=s(E1);ore=n(bMe,"STRONG",{});var KXr=s(ore);Bvo=r(KXr,"pegasus"),KXr.forEach(t),xvo=r(bMe," \u2014 "),S$=n(bMe,"A",{href:!0});var ZXr=s(S$);kvo=r(ZXr,"PegasusForConditionalGeneration"),ZXr.forEach(t),Rvo=r(bMe," (Pegasus model)"),bMe.forEach(t),Svo=i(le),y1=n(le,"LI",{});var vMe=s(y1);rre=n(vMe,"STRONG",{});var eVr=s(rre);Pvo=r(eVr,"plbart"),eVr.forEach(t),$vo=r(vMe," \u2014 "),P$=n(vMe,"A",{href:!0});var oVr=s(P$);Ivo=r(oVr,"PLBartForConditionalGeneration"),oVr.forEach(t),Dvo=r(vMe," (PLBart model)"),vMe.forEach(t),jvo=i(le),w1=n(le,"LI",{});var TMe=s(w1);tre=n(TMe,"STRONG",{});var rVr=s(tre);Nvo=r(rVr,"prophetnet"),rVr.forEach(t),qvo=r(TMe," \u2014 "),$$=n(TMe,"A",{href:!0});var tVr=s($$);Gvo=r(tVr,"ProphetNetForConditionalGeneration"),tVr.forEach(t),Ovo=r(TMe," (ProphetNet model)"),TMe.forEach(t),Xvo=i(le),A1=n(le,"LI",{});var FMe=s(A1);are=n(FMe,"STRONG",{});var aVr=s(are);Vvo=r(aVr,"t5"),aVr.forEach(t),zvo=r(FMe," \u2014 "),I$=n(FMe,"A",{href:!0});var nVr=s(I$);Wvo=r(nVr,"T5ForConditionalGeneration"),nVr.forEach(t),Qvo=r(FMe," (T5 model)"),FMe.forEach(t),Hvo=i(le),L1=n(le,"LI",{});var CMe=s(L1);nre=n(CMe,"STRONG",{});var sVr=s(nre);Uvo=r(sVr,"xlm-prophetnet"),sVr.forEach(t),Jvo=r(CMe," \u2014 "),D$=n(CMe,"A",{href:!0});var lVr=s(D$);Yvo=r(lVr,"XLMProphetNetForConditionalGeneration"),lVr.forEach(t),Kvo=r(CMe," (XLMProphetNet model)"),CMe.forEach(t),le.forEach(t),Zvo=i(Nt),B1=n(Nt,"P",{});var MMe=s(B1);eTo=r(MMe,"The model is set in evaluation mode by default using "),sre=n(MMe,"CODE",{});var iVr=s(sre);oTo=r(iVr,"model.eval()"),iVr.forEach(t),rTo=r(MMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lre=n(MMe,"CODE",{});var dVr=s(lre);tTo=r(dVr,"model.train()"),dVr.forEach(t),MMe.forEach(t),aTo=i(Nt),ire=n(Nt,"P",{});var cVr=s(ire);nTo=r(cVr,"Examples:"),cVr.forEach(t),sTo=i(Nt),m(DE.$$.fragment,Nt),Nt.forEach(t),Us.forEach(t),Z7e=i(c),ad=n(c,"H2",{class:!0});var ske=s(ad);x1=n(ske,"A",{id:!0,class:!0,href:!0});var fVr=s(x1);dre=n(fVr,"SPAN",{});var mVr=s(dre);m(jE.$$.fragment,mVr),mVr.forEach(t),fVr.forEach(t),lTo=i(ske),cre=n(ske,"SPAN",{});var gVr=s(cre);iTo=r(gVr,"AutoModelForSequenceClassification"),gVr.forEach(t),ske.forEach(t),eBe=i(c),Ko=n(c,"DIV",{class:!0});var Ys=s(Ko);m(NE.$$.fragment,Ys),dTo=i(Ys),nd=n(Ys,"P",{});var QV=s(nd);cTo=r(QV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fre=n(QV,"CODE",{});var hVr=s(fre);fTo=r(hVr,"from_pretrained()"),hVr.forEach(t),mTo=r(QV,"class method or the "),mre=n(QV,"CODE",{});var pVr=s(mre);gTo=r(pVr,"from_config()"),pVr.forEach(t),hTo=r(QV,`class
method.`),QV.forEach(t),pTo=i(Ys),qE=n(Ys,"P",{});var lke=s(qE);_To=r(lke,"This class cannot be instantiated directly using "),gre=n(lke,"CODE",{});var _Vr=s(gre);uTo=r(_Vr,"__init__()"),_Vr.forEach(t),bTo=r(lke," (throws an error)."),lke.forEach(t),vTo=i(Ys),zr=n(Ys,"DIV",{class:!0});var Ks=s(zr);m(GE.$$.fragment,Ks),TTo=i(Ks),hre=n(Ks,"P",{});var uVr=s(hre);FTo=r(uVr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uVr.forEach(t),CTo=i(Ks),sd=n(Ks,"P",{});var HV=s(sd);MTo=r(HV,`Note:
Loading a model from its configuration file does `),pre=n(HV,"STRONG",{});var bVr=s(pre);ETo=r(bVr,"not"),bVr.forEach(t),yTo=r(HV,` load the model weights. It only affects the
model\u2019s configuration. Use `),_re=n(HV,"CODE",{});var vVr=s(_re);wTo=r(vVr,"from_pretrained()"),vVr.forEach(t),ATo=r(HV,"to load the model weights."),HV.forEach(t),LTo=i(Ks),ure=n(Ks,"P",{});var TVr=s(ure);BTo=r(TVr,"Examples:"),TVr.forEach(t),xTo=i(Ks),m(OE.$$.fragment,Ks),Ks.forEach(t),kTo=i(Ys),De=n(Ys,"DIV",{class:!0});var qt=s(De);m(XE.$$.fragment,qt),RTo=i(qt),bre=n(qt,"P",{});var FVr=s(bre);STo=r(FVr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FVr.forEach(t),PTo=i(qt),Va=n(qt,"P",{});var R4=s(Va);$To=r(R4,"The model class to instantiate is selected based on the "),vre=n(R4,"CODE",{});var CVr=s(vre);ITo=r(CVr,"model_type"),CVr.forEach(t),DTo=r(R4,` property of the config object (either
passed as an argument or loaded from `),Tre=n(R4,"CODE",{});var MVr=s(Tre);jTo=r(MVr,"pretrained_model_name_or_path"),MVr.forEach(t),NTo=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fre=n(R4,"CODE",{});var EVr=s(Fre);qTo=r(EVr,"pretrained_model_name_or_path"),EVr.forEach(t),GTo=r(R4,":"),R4.forEach(t),OTo=i(qt),A=n(qt,"UL",{});var L=s(A);k1=n(L,"LI",{});var EMe=s(k1);Cre=n(EMe,"STRONG",{});var yVr=s(Cre);XTo=r(yVr,"albert"),yVr.forEach(t),VTo=r(EMe," \u2014 "),j$=n(EMe,"A",{href:!0});var wVr=s(j$);zTo=r(wVr,"AlbertForSequenceClassification"),wVr.forEach(t),WTo=r(EMe," (ALBERT model)"),EMe.forEach(t),QTo=i(L),R1=n(L,"LI",{});var yMe=s(R1);Mre=n(yMe,"STRONG",{});var AVr=s(Mre);HTo=r(AVr,"bart"),AVr.forEach(t),UTo=r(yMe," \u2014 "),N$=n(yMe,"A",{href:!0});var LVr=s(N$);JTo=r(LVr,"BartForSequenceClassification"),LVr.forEach(t),YTo=r(yMe," (BART model)"),yMe.forEach(t),KTo=i(L),S1=n(L,"LI",{});var wMe=s(S1);Ere=n(wMe,"STRONG",{});var BVr=s(Ere);ZTo=r(BVr,"bert"),BVr.forEach(t),eFo=r(wMe," \u2014 "),q$=n(wMe,"A",{href:!0});var xVr=s(q$);oFo=r(xVr,"BertForSequenceClassification"),xVr.forEach(t),rFo=r(wMe," (BERT model)"),wMe.forEach(t),tFo=i(L),P1=n(L,"LI",{});var AMe=s(P1);yre=n(AMe,"STRONG",{});var kVr=s(yre);aFo=r(kVr,"big_bird"),kVr.forEach(t),nFo=r(AMe," \u2014 "),G$=n(AMe,"A",{href:!0});var RVr=s(G$);sFo=r(RVr,"BigBirdForSequenceClassification"),RVr.forEach(t),lFo=r(AMe," (BigBird model)"),AMe.forEach(t),iFo=i(L),$1=n(L,"LI",{});var LMe=s($1);wre=n(LMe,"STRONG",{});var SVr=s(wre);dFo=r(SVr,"bigbird_pegasus"),SVr.forEach(t),cFo=r(LMe," \u2014 "),O$=n(LMe,"A",{href:!0});var PVr=s(O$);fFo=r(PVr,"BigBirdPegasusForSequenceClassification"),PVr.forEach(t),mFo=r(LMe," (BigBirdPegasus model)"),LMe.forEach(t),gFo=i(L),I1=n(L,"LI",{});var BMe=s(I1);Are=n(BMe,"STRONG",{});var $Vr=s(Are);hFo=r($Vr,"camembert"),$Vr.forEach(t),pFo=r(BMe," \u2014 "),X$=n(BMe,"A",{href:!0});var IVr=s(X$);_Fo=r(IVr,"CamembertForSequenceClassification"),IVr.forEach(t),uFo=r(BMe," (CamemBERT model)"),BMe.forEach(t),bFo=i(L),D1=n(L,"LI",{});var xMe=s(D1);Lre=n(xMe,"STRONG",{});var DVr=s(Lre);vFo=r(DVr,"canine"),DVr.forEach(t),TFo=r(xMe," \u2014 "),V$=n(xMe,"A",{href:!0});var jVr=s(V$);FFo=r(jVr,"CanineForSequenceClassification"),jVr.forEach(t),CFo=r(xMe," (Canine model)"),xMe.forEach(t),MFo=i(L),j1=n(L,"LI",{});var kMe=s(j1);Bre=n(kMe,"STRONG",{});var NVr=s(Bre);EFo=r(NVr,"convbert"),NVr.forEach(t),yFo=r(kMe," \u2014 "),z$=n(kMe,"A",{href:!0});var qVr=s(z$);wFo=r(qVr,"ConvBertForSequenceClassification"),qVr.forEach(t),AFo=r(kMe," (ConvBERT model)"),kMe.forEach(t),LFo=i(L),N1=n(L,"LI",{});var RMe=s(N1);xre=n(RMe,"STRONG",{});var GVr=s(xre);BFo=r(GVr,"ctrl"),GVr.forEach(t),xFo=r(RMe," \u2014 "),W$=n(RMe,"A",{href:!0});var OVr=s(W$);kFo=r(OVr,"CTRLForSequenceClassification"),OVr.forEach(t),RFo=r(RMe," (CTRL model)"),RMe.forEach(t),SFo=i(L),q1=n(L,"LI",{});var SMe=s(q1);kre=n(SMe,"STRONG",{});var XVr=s(kre);PFo=r(XVr,"data2vec-text"),XVr.forEach(t),$Fo=r(SMe," \u2014 "),Q$=n(SMe,"A",{href:!0});var VVr=s(Q$);IFo=r(VVr,"Data2VecTextForSequenceClassification"),VVr.forEach(t),DFo=r(SMe," (Data2VecText model)"),SMe.forEach(t),jFo=i(L),G1=n(L,"LI",{});var PMe=s(G1);Rre=n(PMe,"STRONG",{});var zVr=s(Rre);NFo=r(zVr,"deberta"),zVr.forEach(t),qFo=r(PMe," \u2014 "),H$=n(PMe,"A",{href:!0});var WVr=s(H$);GFo=r(WVr,"DebertaForSequenceClassification"),WVr.forEach(t),OFo=r(PMe," (DeBERTa model)"),PMe.forEach(t),XFo=i(L),O1=n(L,"LI",{});var $Me=s(O1);Sre=n($Me,"STRONG",{});var QVr=s(Sre);VFo=r(QVr,"deberta-v2"),QVr.forEach(t),zFo=r($Me," \u2014 "),U$=n($Me,"A",{href:!0});var HVr=s(U$);WFo=r(HVr,"DebertaV2ForSequenceClassification"),HVr.forEach(t),QFo=r($Me," (DeBERTa-v2 model)"),$Me.forEach(t),HFo=i(L),X1=n(L,"LI",{});var IMe=s(X1);Pre=n(IMe,"STRONG",{});var UVr=s(Pre);UFo=r(UVr,"distilbert"),UVr.forEach(t),JFo=r(IMe," \u2014 "),J$=n(IMe,"A",{href:!0});var JVr=s(J$);YFo=r(JVr,"DistilBertForSequenceClassification"),JVr.forEach(t),KFo=r(IMe," (DistilBERT model)"),IMe.forEach(t),ZFo=i(L),V1=n(L,"LI",{});var DMe=s(V1);$re=n(DMe,"STRONG",{});var YVr=s($re);e9o=r(YVr,"electra"),YVr.forEach(t),o9o=r(DMe," \u2014 "),Y$=n(DMe,"A",{href:!0});var KVr=s(Y$);r9o=r(KVr,"ElectraForSequenceClassification"),KVr.forEach(t),t9o=r(DMe," (ELECTRA model)"),DMe.forEach(t),a9o=i(L),z1=n(L,"LI",{});var jMe=s(z1);Ire=n(jMe,"STRONG",{});var ZVr=s(Ire);n9o=r(ZVr,"flaubert"),ZVr.forEach(t),s9o=r(jMe," \u2014 "),K$=n(jMe,"A",{href:!0});var ezr=s(K$);l9o=r(ezr,"FlaubertForSequenceClassification"),ezr.forEach(t),i9o=r(jMe," (FlauBERT model)"),jMe.forEach(t),d9o=i(L),W1=n(L,"LI",{});var NMe=s(W1);Dre=n(NMe,"STRONG",{});var ozr=s(Dre);c9o=r(ozr,"fnet"),ozr.forEach(t),f9o=r(NMe," \u2014 "),Z$=n(NMe,"A",{href:!0});var rzr=s(Z$);m9o=r(rzr,"FNetForSequenceClassification"),rzr.forEach(t),g9o=r(NMe," (FNet model)"),NMe.forEach(t),h9o=i(L),Q1=n(L,"LI",{});var qMe=s(Q1);jre=n(qMe,"STRONG",{});var tzr=s(jre);p9o=r(tzr,"funnel"),tzr.forEach(t),_9o=r(qMe," \u2014 "),eI=n(qMe,"A",{href:!0});var azr=s(eI);u9o=r(azr,"FunnelForSequenceClassification"),azr.forEach(t),b9o=r(qMe," (Funnel Transformer model)"),qMe.forEach(t),v9o=i(L),H1=n(L,"LI",{});var GMe=s(H1);Nre=n(GMe,"STRONG",{});var nzr=s(Nre);T9o=r(nzr,"gpt2"),nzr.forEach(t),F9o=r(GMe," \u2014 "),oI=n(GMe,"A",{href:!0});var szr=s(oI);C9o=r(szr,"GPT2ForSequenceClassification"),szr.forEach(t),M9o=r(GMe," (OpenAI GPT-2 model)"),GMe.forEach(t),E9o=i(L),U1=n(L,"LI",{});var OMe=s(U1);qre=n(OMe,"STRONG",{});var lzr=s(qre);y9o=r(lzr,"gpt_neo"),lzr.forEach(t),w9o=r(OMe," \u2014 "),rI=n(OMe,"A",{href:!0});var izr=s(rI);A9o=r(izr,"GPTNeoForSequenceClassification"),izr.forEach(t),L9o=r(OMe," (GPT Neo model)"),OMe.forEach(t),B9o=i(L),J1=n(L,"LI",{});var XMe=s(J1);Gre=n(XMe,"STRONG",{});var dzr=s(Gre);x9o=r(dzr,"gptj"),dzr.forEach(t),k9o=r(XMe," \u2014 "),tI=n(XMe,"A",{href:!0});var czr=s(tI);R9o=r(czr,"GPTJForSequenceClassification"),czr.forEach(t),S9o=r(XMe," (GPT-J model)"),XMe.forEach(t),P9o=i(L),Y1=n(L,"LI",{});var VMe=s(Y1);Ore=n(VMe,"STRONG",{});var fzr=s(Ore);$9o=r(fzr,"ibert"),fzr.forEach(t),I9o=r(VMe," \u2014 "),aI=n(VMe,"A",{href:!0});var mzr=s(aI);D9o=r(mzr,"IBertForSequenceClassification"),mzr.forEach(t),j9o=r(VMe," (I-BERT model)"),VMe.forEach(t),N9o=i(L),K1=n(L,"LI",{});var zMe=s(K1);Xre=n(zMe,"STRONG",{});var gzr=s(Xre);q9o=r(gzr,"layoutlm"),gzr.forEach(t),G9o=r(zMe," \u2014 "),nI=n(zMe,"A",{href:!0});var hzr=s(nI);O9o=r(hzr,"LayoutLMForSequenceClassification"),hzr.forEach(t),X9o=r(zMe," (LayoutLM model)"),zMe.forEach(t),V9o=i(L),Z1=n(L,"LI",{});var WMe=s(Z1);Vre=n(WMe,"STRONG",{});var pzr=s(Vre);z9o=r(pzr,"layoutlmv2"),pzr.forEach(t),W9o=r(WMe," \u2014 "),sI=n(WMe,"A",{href:!0});var _zr=s(sI);Q9o=r(_zr,"LayoutLMv2ForSequenceClassification"),_zr.forEach(t),H9o=r(WMe," (LayoutLMv2 model)"),WMe.forEach(t),U9o=i(L),eb=n(L,"LI",{});var QMe=s(eb);zre=n(QMe,"STRONG",{});var uzr=s(zre);J9o=r(uzr,"led"),uzr.forEach(t),Y9o=r(QMe," \u2014 "),lI=n(QMe,"A",{href:!0});var bzr=s(lI);K9o=r(bzr,"LEDForSequenceClassification"),bzr.forEach(t),Z9o=r(QMe," (LED model)"),QMe.forEach(t),eCo=i(L),ob=n(L,"LI",{});var HMe=s(ob);Wre=n(HMe,"STRONG",{});var vzr=s(Wre);oCo=r(vzr,"longformer"),vzr.forEach(t),rCo=r(HMe," \u2014 "),iI=n(HMe,"A",{href:!0});var Tzr=s(iI);tCo=r(Tzr,"LongformerForSequenceClassification"),Tzr.forEach(t),aCo=r(HMe," (Longformer model)"),HMe.forEach(t),nCo=i(L),rb=n(L,"LI",{});var UMe=s(rb);Qre=n(UMe,"STRONG",{});var Fzr=s(Qre);sCo=r(Fzr,"mbart"),Fzr.forEach(t),lCo=r(UMe," \u2014 "),dI=n(UMe,"A",{href:!0});var Czr=s(dI);iCo=r(Czr,"MBartForSequenceClassification"),Czr.forEach(t),dCo=r(UMe," (mBART model)"),UMe.forEach(t),cCo=i(L),tb=n(L,"LI",{});var JMe=s(tb);Hre=n(JMe,"STRONG",{});var Mzr=s(Hre);fCo=r(Mzr,"megatron-bert"),Mzr.forEach(t),mCo=r(JMe," \u2014 "),cI=n(JMe,"A",{href:!0});var Ezr=s(cI);gCo=r(Ezr,"MegatronBertForSequenceClassification"),Ezr.forEach(t),hCo=r(JMe," (MegatronBert model)"),JMe.forEach(t),pCo=i(L),ab=n(L,"LI",{});var YMe=s(ab);Ure=n(YMe,"STRONG",{});var yzr=s(Ure);_Co=r(yzr,"mobilebert"),yzr.forEach(t),uCo=r(YMe," \u2014 "),fI=n(YMe,"A",{href:!0});var wzr=s(fI);bCo=r(wzr,"MobileBertForSequenceClassification"),wzr.forEach(t),vCo=r(YMe," (MobileBERT model)"),YMe.forEach(t),TCo=i(L),nb=n(L,"LI",{});var KMe=s(nb);Jre=n(KMe,"STRONG",{});var Azr=s(Jre);FCo=r(Azr,"mpnet"),Azr.forEach(t),CCo=r(KMe," \u2014 "),mI=n(KMe,"A",{href:!0});var Lzr=s(mI);MCo=r(Lzr,"MPNetForSequenceClassification"),Lzr.forEach(t),ECo=r(KMe," (MPNet model)"),KMe.forEach(t),yCo=i(L),sb=n(L,"LI",{});var ZMe=s(sb);Yre=n(ZMe,"STRONG",{});var Bzr=s(Yre);wCo=r(Bzr,"nystromformer"),Bzr.forEach(t),ACo=r(ZMe," \u2014 "),gI=n(ZMe,"A",{href:!0});var xzr=s(gI);LCo=r(xzr,"NystromformerForSequenceClassification"),xzr.forEach(t),BCo=r(ZMe," (Nystromformer model)"),ZMe.forEach(t),xCo=i(L),lb=n(L,"LI",{});var eEe=s(lb);Kre=n(eEe,"STRONG",{});var kzr=s(Kre);kCo=r(kzr,"openai-gpt"),kzr.forEach(t),RCo=r(eEe," \u2014 "),hI=n(eEe,"A",{href:!0});var Rzr=s(hI);SCo=r(Rzr,"OpenAIGPTForSequenceClassification"),Rzr.forEach(t),PCo=r(eEe," (OpenAI GPT model)"),eEe.forEach(t),$Co=i(L),ib=n(L,"LI",{});var oEe=s(ib);Zre=n(oEe,"STRONG",{});var Szr=s(Zre);ICo=r(Szr,"perceiver"),Szr.forEach(t),DCo=r(oEe," \u2014 "),pI=n(oEe,"A",{href:!0});var Pzr=s(pI);jCo=r(Pzr,"PerceiverForSequenceClassification"),Pzr.forEach(t),NCo=r(oEe," (Perceiver model)"),oEe.forEach(t),qCo=i(L),db=n(L,"LI",{});var rEe=s(db);ete=n(rEe,"STRONG",{});var $zr=s(ete);GCo=r($zr,"plbart"),$zr.forEach(t),OCo=r(rEe," \u2014 "),_I=n(rEe,"A",{href:!0});var Izr=s(_I);XCo=r(Izr,"PLBartForSequenceClassification"),Izr.forEach(t),VCo=r(rEe," (PLBart model)"),rEe.forEach(t),zCo=i(L),cb=n(L,"LI",{});var tEe=s(cb);ote=n(tEe,"STRONG",{});var Dzr=s(ote);WCo=r(Dzr,"qdqbert"),Dzr.forEach(t),QCo=r(tEe," \u2014 "),uI=n(tEe,"A",{href:!0});var jzr=s(uI);HCo=r(jzr,"QDQBertForSequenceClassification"),jzr.forEach(t),UCo=r(tEe," (QDQBert model)"),tEe.forEach(t),JCo=i(L),fb=n(L,"LI",{});var aEe=s(fb);rte=n(aEe,"STRONG",{});var Nzr=s(rte);YCo=r(Nzr,"reformer"),Nzr.forEach(t),KCo=r(aEe," \u2014 "),bI=n(aEe,"A",{href:!0});var qzr=s(bI);ZCo=r(qzr,"ReformerForSequenceClassification"),qzr.forEach(t),e4o=r(aEe," (Reformer model)"),aEe.forEach(t),o4o=i(L),mb=n(L,"LI",{});var nEe=s(mb);tte=n(nEe,"STRONG",{});var Gzr=s(tte);r4o=r(Gzr,"rembert"),Gzr.forEach(t),t4o=r(nEe," \u2014 "),vI=n(nEe,"A",{href:!0});var Ozr=s(vI);a4o=r(Ozr,"RemBertForSequenceClassification"),Ozr.forEach(t),n4o=r(nEe," (RemBERT model)"),nEe.forEach(t),s4o=i(L),gb=n(L,"LI",{});var sEe=s(gb);ate=n(sEe,"STRONG",{});var Xzr=s(ate);l4o=r(Xzr,"roberta"),Xzr.forEach(t),i4o=r(sEe," \u2014 "),TI=n(sEe,"A",{href:!0});var Vzr=s(TI);d4o=r(Vzr,"RobertaForSequenceClassification"),Vzr.forEach(t),c4o=r(sEe," (RoBERTa model)"),sEe.forEach(t),f4o=i(L),hb=n(L,"LI",{});var lEe=s(hb);nte=n(lEe,"STRONG",{});var zzr=s(nte);m4o=r(zzr,"roformer"),zzr.forEach(t),g4o=r(lEe," \u2014 "),FI=n(lEe,"A",{href:!0});var Wzr=s(FI);h4o=r(Wzr,"RoFormerForSequenceClassification"),Wzr.forEach(t),p4o=r(lEe," (RoFormer model)"),lEe.forEach(t),_4o=i(L),pb=n(L,"LI",{});var iEe=s(pb);ste=n(iEe,"STRONG",{});var Qzr=s(ste);u4o=r(Qzr,"squeezebert"),Qzr.forEach(t),b4o=r(iEe," \u2014 "),CI=n(iEe,"A",{href:!0});var Hzr=s(CI);v4o=r(Hzr,"SqueezeBertForSequenceClassification"),Hzr.forEach(t),T4o=r(iEe," (SqueezeBERT model)"),iEe.forEach(t),F4o=i(L),_b=n(L,"LI",{});var dEe=s(_b);lte=n(dEe,"STRONG",{});var Uzr=s(lte);C4o=r(Uzr,"tapas"),Uzr.forEach(t),M4o=r(dEe," \u2014 "),MI=n(dEe,"A",{href:!0});var Jzr=s(MI);E4o=r(Jzr,"TapasForSequenceClassification"),Jzr.forEach(t),y4o=r(dEe," (TAPAS model)"),dEe.forEach(t),w4o=i(L),ub=n(L,"LI",{});var cEe=s(ub);ite=n(cEe,"STRONG",{});var Yzr=s(ite);A4o=r(Yzr,"transfo-xl"),Yzr.forEach(t),L4o=r(cEe," \u2014 "),EI=n(cEe,"A",{href:!0});var Kzr=s(EI);B4o=r(Kzr,"TransfoXLForSequenceClassification"),Kzr.forEach(t),x4o=r(cEe," (Transformer-XL model)"),cEe.forEach(t),k4o=i(L),bb=n(L,"LI",{});var fEe=s(bb);dte=n(fEe,"STRONG",{});var Zzr=s(dte);R4o=r(Zzr,"xlm"),Zzr.forEach(t),S4o=r(fEe," \u2014 "),yI=n(fEe,"A",{href:!0});var eWr=s(yI);P4o=r(eWr,"XLMForSequenceClassification"),eWr.forEach(t),$4o=r(fEe," (XLM model)"),fEe.forEach(t),I4o=i(L),vb=n(L,"LI",{});var mEe=s(vb);cte=n(mEe,"STRONG",{});var oWr=s(cte);D4o=r(oWr,"xlm-roberta"),oWr.forEach(t),j4o=r(mEe," \u2014 "),wI=n(mEe,"A",{href:!0});var rWr=s(wI);N4o=r(rWr,"XLMRobertaForSequenceClassification"),rWr.forEach(t),q4o=r(mEe," (XLM-RoBERTa model)"),mEe.forEach(t),G4o=i(L),Tb=n(L,"LI",{});var gEe=s(Tb);fte=n(gEe,"STRONG",{});var tWr=s(fte);O4o=r(tWr,"xlm-roberta-xl"),tWr.forEach(t),X4o=r(gEe," \u2014 "),AI=n(gEe,"A",{href:!0});var aWr=s(AI);V4o=r(aWr,"XLMRobertaXLForSequenceClassification"),aWr.forEach(t),z4o=r(gEe," (XLM-RoBERTa-XL model)"),gEe.forEach(t),W4o=i(L),Fb=n(L,"LI",{});var hEe=s(Fb);mte=n(hEe,"STRONG",{});var nWr=s(mte);Q4o=r(nWr,"xlnet"),nWr.forEach(t),H4o=r(hEe," \u2014 "),LI=n(hEe,"A",{href:!0});var sWr=s(LI);U4o=r(sWr,"XLNetForSequenceClassification"),sWr.forEach(t),J4o=r(hEe," (XLNet model)"),hEe.forEach(t),Y4o=i(L),Cb=n(L,"LI",{});var pEe=s(Cb);gte=n(pEe,"STRONG",{});var lWr=s(gte);K4o=r(lWr,"yoso"),lWr.forEach(t),Z4o=r(pEe," \u2014 "),BI=n(pEe,"A",{href:!0});var iWr=s(BI);eMo=r(iWr,"YosoForSequenceClassification"),iWr.forEach(t),oMo=r(pEe," (YOSO model)"),pEe.forEach(t),L.forEach(t),rMo=i(qt),Mb=n(qt,"P",{});var _Ee=s(Mb);tMo=r(_Ee,"The model is set in evaluation mode by default using "),hte=n(_Ee,"CODE",{});var dWr=s(hte);aMo=r(dWr,"model.eval()"),dWr.forEach(t),nMo=r(_Ee,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pte=n(_Ee,"CODE",{});var cWr=s(pte);sMo=r(cWr,"model.train()"),cWr.forEach(t),_Ee.forEach(t),lMo=i(qt),_te=n(qt,"P",{});var fWr=s(_te);iMo=r(fWr,"Examples:"),fWr.forEach(t),dMo=i(qt),m(VE.$$.fragment,qt),qt.forEach(t),Ys.forEach(t),oBe=i(c),ld=n(c,"H2",{class:!0});var ike=s(ld);Eb=n(ike,"A",{id:!0,class:!0,href:!0});var mWr=s(Eb);ute=n(mWr,"SPAN",{});var gWr=s(ute);m(zE.$$.fragment,gWr),gWr.forEach(t),mWr.forEach(t),cMo=i(ike),bte=n(ike,"SPAN",{});var hWr=s(bte);fMo=r(hWr,"AutoModelForMultipleChoice"),hWr.forEach(t),ike.forEach(t),rBe=i(c),Zo=n(c,"DIV",{class:!0});var Zs=s(Zo);m(WE.$$.fragment,Zs),mMo=i(Zs),id=n(Zs,"P",{});var UV=s(id);gMo=r(UV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vte=n(UV,"CODE",{});var pWr=s(vte);hMo=r(pWr,"from_pretrained()"),pWr.forEach(t),pMo=r(UV,"class method or the "),Tte=n(UV,"CODE",{});var _Wr=s(Tte);_Mo=r(_Wr,"from_config()"),_Wr.forEach(t),uMo=r(UV,`class
method.`),UV.forEach(t),bMo=i(Zs),QE=n(Zs,"P",{});var dke=s(QE);vMo=r(dke,"This class cannot be instantiated directly using "),Fte=n(dke,"CODE",{});var uWr=s(Fte);TMo=r(uWr,"__init__()"),uWr.forEach(t),FMo=r(dke," (throws an error)."),dke.forEach(t),CMo=i(Zs),Wr=n(Zs,"DIV",{class:!0});var el=s(Wr);m(HE.$$.fragment,el),MMo=i(el),Cte=n(el,"P",{});var bWr=s(Cte);EMo=r(bWr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bWr.forEach(t),yMo=i(el),dd=n(el,"P",{});var JV=s(dd);wMo=r(JV,`Note:
Loading a model from its configuration file does `),Mte=n(JV,"STRONG",{});var vWr=s(Mte);AMo=r(vWr,"not"),vWr.forEach(t),LMo=r(JV,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ete=n(JV,"CODE",{});var TWr=s(Ete);BMo=r(TWr,"from_pretrained()"),TWr.forEach(t),xMo=r(JV,"to load the model weights."),JV.forEach(t),kMo=i(el),yte=n(el,"P",{});var FWr=s(yte);RMo=r(FWr,"Examples:"),FWr.forEach(t),SMo=i(el),m(UE.$$.fragment,el),el.forEach(t),PMo=i(Zs),je=n(Zs,"DIV",{class:!0});var Gt=s(je);m(JE.$$.fragment,Gt),$Mo=i(Gt),wte=n(Gt,"P",{});var CWr=s(wte);IMo=r(CWr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CWr.forEach(t),DMo=i(Gt),za=n(Gt,"P",{});var S4=s(za);jMo=r(S4,"The model class to instantiate is selected based on the "),Ate=n(S4,"CODE",{});var MWr=s(Ate);NMo=r(MWr,"model_type"),MWr.forEach(t),qMo=r(S4,` property of the config object (either
passed as an argument or loaded from `),Lte=n(S4,"CODE",{});var EWr=s(Lte);GMo=r(EWr,"pretrained_model_name_or_path"),EWr.forEach(t),OMo=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=n(S4,"CODE",{});var yWr=s(Bte);XMo=r(yWr,"pretrained_model_name_or_path"),yWr.forEach(t),VMo=r(S4,":"),S4.forEach(t),zMo=i(Gt),G=n(Gt,"UL",{});var O=s(G);yb=n(O,"LI",{});var uEe=s(yb);xte=n(uEe,"STRONG",{});var wWr=s(xte);WMo=r(wWr,"albert"),wWr.forEach(t),QMo=r(uEe," \u2014 "),xI=n(uEe,"A",{href:!0});var AWr=s(xI);HMo=r(AWr,"AlbertForMultipleChoice"),AWr.forEach(t),UMo=r(uEe," (ALBERT model)"),uEe.forEach(t),JMo=i(O),wb=n(O,"LI",{});var bEe=s(wb);kte=n(bEe,"STRONG",{});var LWr=s(kte);YMo=r(LWr,"bert"),LWr.forEach(t),KMo=r(bEe," \u2014 "),kI=n(bEe,"A",{href:!0});var BWr=s(kI);ZMo=r(BWr,"BertForMultipleChoice"),BWr.forEach(t),eEo=r(bEe," (BERT model)"),bEe.forEach(t),oEo=i(O),Ab=n(O,"LI",{});var vEe=s(Ab);Rte=n(vEe,"STRONG",{});var xWr=s(Rte);rEo=r(xWr,"big_bird"),xWr.forEach(t),tEo=r(vEe," \u2014 "),RI=n(vEe,"A",{href:!0});var kWr=s(RI);aEo=r(kWr,"BigBirdForMultipleChoice"),kWr.forEach(t),nEo=r(vEe," (BigBird model)"),vEe.forEach(t),sEo=i(O),Lb=n(O,"LI",{});var TEe=s(Lb);Ste=n(TEe,"STRONG",{});var RWr=s(Ste);lEo=r(RWr,"camembert"),RWr.forEach(t),iEo=r(TEe," \u2014 "),SI=n(TEe,"A",{href:!0});var SWr=s(SI);dEo=r(SWr,"CamembertForMultipleChoice"),SWr.forEach(t),cEo=r(TEe," (CamemBERT model)"),TEe.forEach(t),fEo=i(O),Bb=n(O,"LI",{});var FEe=s(Bb);Pte=n(FEe,"STRONG",{});var PWr=s(Pte);mEo=r(PWr,"canine"),PWr.forEach(t),gEo=r(FEe," \u2014 "),PI=n(FEe,"A",{href:!0});var $Wr=s(PI);hEo=r($Wr,"CanineForMultipleChoice"),$Wr.forEach(t),pEo=r(FEe," (Canine model)"),FEe.forEach(t),_Eo=i(O),xb=n(O,"LI",{});var CEe=s(xb);$te=n(CEe,"STRONG",{});var IWr=s($te);uEo=r(IWr,"convbert"),IWr.forEach(t),bEo=r(CEe," \u2014 "),$I=n(CEe,"A",{href:!0});var DWr=s($I);vEo=r(DWr,"ConvBertForMultipleChoice"),DWr.forEach(t),TEo=r(CEe," (ConvBERT model)"),CEe.forEach(t),FEo=i(O),kb=n(O,"LI",{});var MEe=s(kb);Ite=n(MEe,"STRONG",{});var jWr=s(Ite);CEo=r(jWr,"data2vec-text"),jWr.forEach(t),MEo=r(MEe," \u2014 "),II=n(MEe,"A",{href:!0});var NWr=s(II);EEo=r(NWr,"Data2VecTextForMultipleChoice"),NWr.forEach(t),yEo=r(MEe," (Data2VecText model)"),MEe.forEach(t),wEo=i(O),Rb=n(O,"LI",{});var EEe=s(Rb);Dte=n(EEe,"STRONG",{});var qWr=s(Dte);AEo=r(qWr,"distilbert"),qWr.forEach(t),LEo=r(EEe," \u2014 "),DI=n(EEe,"A",{href:!0});var GWr=s(DI);BEo=r(GWr,"DistilBertForMultipleChoice"),GWr.forEach(t),xEo=r(EEe," (DistilBERT model)"),EEe.forEach(t),kEo=i(O),Sb=n(O,"LI",{});var yEe=s(Sb);jte=n(yEe,"STRONG",{});var OWr=s(jte);REo=r(OWr,"electra"),OWr.forEach(t),SEo=r(yEe," \u2014 "),jI=n(yEe,"A",{href:!0});var XWr=s(jI);PEo=r(XWr,"ElectraForMultipleChoice"),XWr.forEach(t),$Eo=r(yEe," (ELECTRA model)"),yEe.forEach(t),IEo=i(O),Pb=n(O,"LI",{});var wEe=s(Pb);Nte=n(wEe,"STRONG",{});var VWr=s(Nte);DEo=r(VWr,"flaubert"),VWr.forEach(t),jEo=r(wEe," \u2014 "),NI=n(wEe,"A",{href:!0});var zWr=s(NI);NEo=r(zWr,"FlaubertForMultipleChoice"),zWr.forEach(t),qEo=r(wEe," (FlauBERT model)"),wEe.forEach(t),GEo=i(O),$b=n(O,"LI",{});var AEe=s($b);qte=n(AEe,"STRONG",{});var WWr=s(qte);OEo=r(WWr,"fnet"),WWr.forEach(t),XEo=r(AEe," \u2014 "),qI=n(AEe,"A",{href:!0});var QWr=s(qI);VEo=r(QWr,"FNetForMultipleChoice"),QWr.forEach(t),zEo=r(AEe," (FNet model)"),AEe.forEach(t),WEo=i(O),Ib=n(O,"LI",{});var LEe=s(Ib);Gte=n(LEe,"STRONG",{});var HWr=s(Gte);QEo=r(HWr,"funnel"),HWr.forEach(t),HEo=r(LEe," \u2014 "),GI=n(LEe,"A",{href:!0});var UWr=s(GI);UEo=r(UWr,"FunnelForMultipleChoice"),UWr.forEach(t),JEo=r(LEe," (Funnel Transformer model)"),LEe.forEach(t),YEo=i(O),Db=n(O,"LI",{});var BEe=s(Db);Ote=n(BEe,"STRONG",{});var JWr=s(Ote);KEo=r(JWr,"ibert"),JWr.forEach(t),ZEo=r(BEe," \u2014 "),OI=n(BEe,"A",{href:!0});var YWr=s(OI);eyo=r(YWr,"IBertForMultipleChoice"),YWr.forEach(t),oyo=r(BEe," (I-BERT model)"),BEe.forEach(t),ryo=i(O),jb=n(O,"LI",{});var xEe=s(jb);Xte=n(xEe,"STRONG",{});var KWr=s(Xte);tyo=r(KWr,"longformer"),KWr.forEach(t),ayo=r(xEe," \u2014 "),XI=n(xEe,"A",{href:!0});var ZWr=s(XI);nyo=r(ZWr,"LongformerForMultipleChoice"),ZWr.forEach(t),syo=r(xEe," (Longformer model)"),xEe.forEach(t),lyo=i(O),Nb=n(O,"LI",{});var kEe=s(Nb);Vte=n(kEe,"STRONG",{});var eQr=s(Vte);iyo=r(eQr,"megatron-bert"),eQr.forEach(t),dyo=r(kEe," \u2014 "),VI=n(kEe,"A",{href:!0});var oQr=s(VI);cyo=r(oQr,"MegatronBertForMultipleChoice"),oQr.forEach(t),fyo=r(kEe," (MegatronBert model)"),kEe.forEach(t),myo=i(O),qb=n(O,"LI",{});var REe=s(qb);zte=n(REe,"STRONG",{});var rQr=s(zte);gyo=r(rQr,"mobilebert"),rQr.forEach(t),hyo=r(REe," \u2014 "),zI=n(REe,"A",{href:!0});var tQr=s(zI);pyo=r(tQr,"MobileBertForMultipleChoice"),tQr.forEach(t),_yo=r(REe," (MobileBERT model)"),REe.forEach(t),uyo=i(O),Gb=n(O,"LI",{});var SEe=s(Gb);Wte=n(SEe,"STRONG",{});var aQr=s(Wte);byo=r(aQr,"mpnet"),aQr.forEach(t),vyo=r(SEe," \u2014 "),WI=n(SEe,"A",{href:!0});var nQr=s(WI);Tyo=r(nQr,"MPNetForMultipleChoice"),nQr.forEach(t),Fyo=r(SEe," (MPNet model)"),SEe.forEach(t),Cyo=i(O),Ob=n(O,"LI",{});var PEe=s(Ob);Qte=n(PEe,"STRONG",{});var sQr=s(Qte);Myo=r(sQr,"nystromformer"),sQr.forEach(t),Eyo=r(PEe," \u2014 "),QI=n(PEe,"A",{href:!0});var lQr=s(QI);yyo=r(lQr,"NystromformerForMultipleChoice"),lQr.forEach(t),wyo=r(PEe," (Nystromformer model)"),PEe.forEach(t),Ayo=i(O),Xb=n(O,"LI",{});var $Ee=s(Xb);Hte=n($Ee,"STRONG",{});var iQr=s(Hte);Lyo=r(iQr,"qdqbert"),iQr.forEach(t),Byo=r($Ee," \u2014 "),HI=n($Ee,"A",{href:!0});var dQr=s(HI);xyo=r(dQr,"QDQBertForMultipleChoice"),dQr.forEach(t),kyo=r($Ee," (QDQBert model)"),$Ee.forEach(t),Ryo=i(O),Vb=n(O,"LI",{});var IEe=s(Vb);Ute=n(IEe,"STRONG",{});var cQr=s(Ute);Syo=r(cQr,"rembert"),cQr.forEach(t),Pyo=r(IEe," \u2014 "),UI=n(IEe,"A",{href:!0});var fQr=s(UI);$yo=r(fQr,"RemBertForMultipleChoice"),fQr.forEach(t),Iyo=r(IEe," (RemBERT model)"),IEe.forEach(t),Dyo=i(O),zb=n(O,"LI",{});var DEe=s(zb);Jte=n(DEe,"STRONG",{});var mQr=s(Jte);jyo=r(mQr,"roberta"),mQr.forEach(t),Nyo=r(DEe," \u2014 "),JI=n(DEe,"A",{href:!0});var gQr=s(JI);qyo=r(gQr,"RobertaForMultipleChoice"),gQr.forEach(t),Gyo=r(DEe," (RoBERTa model)"),DEe.forEach(t),Oyo=i(O),Wb=n(O,"LI",{});var jEe=s(Wb);Yte=n(jEe,"STRONG",{});var hQr=s(Yte);Xyo=r(hQr,"roformer"),hQr.forEach(t),Vyo=r(jEe," \u2014 "),YI=n(jEe,"A",{href:!0});var pQr=s(YI);zyo=r(pQr,"RoFormerForMultipleChoice"),pQr.forEach(t),Wyo=r(jEe," (RoFormer model)"),jEe.forEach(t),Qyo=i(O),Qb=n(O,"LI",{});var NEe=s(Qb);Kte=n(NEe,"STRONG",{});var _Qr=s(Kte);Hyo=r(_Qr,"squeezebert"),_Qr.forEach(t),Uyo=r(NEe," \u2014 "),KI=n(NEe,"A",{href:!0});var uQr=s(KI);Jyo=r(uQr,"SqueezeBertForMultipleChoice"),uQr.forEach(t),Yyo=r(NEe," (SqueezeBERT model)"),NEe.forEach(t),Kyo=i(O),Hb=n(O,"LI",{});var qEe=s(Hb);Zte=n(qEe,"STRONG",{});var bQr=s(Zte);Zyo=r(bQr,"xlm"),bQr.forEach(t),ewo=r(qEe," \u2014 "),ZI=n(qEe,"A",{href:!0});var vQr=s(ZI);owo=r(vQr,"XLMForMultipleChoice"),vQr.forEach(t),rwo=r(qEe," (XLM model)"),qEe.forEach(t),two=i(O),Ub=n(O,"LI",{});var GEe=s(Ub);eae=n(GEe,"STRONG",{});var TQr=s(eae);awo=r(TQr,"xlm-roberta"),TQr.forEach(t),nwo=r(GEe," \u2014 "),eD=n(GEe,"A",{href:!0});var FQr=s(eD);swo=r(FQr,"XLMRobertaForMultipleChoice"),FQr.forEach(t),lwo=r(GEe," (XLM-RoBERTa model)"),GEe.forEach(t),iwo=i(O),Jb=n(O,"LI",{});var OEe=s(Jb);oae=n(OEe,"STRONG",{});var CQr=s(oae);dwo=r(CQr,"xlm-roberta-xl"),CQr.forEach(t),cwo=r(OEe," \u2014 "),oD=n(OEe,"A",{href:!0});var MQr=s(oD);fwo=r(MQr,"XLMRobertaXLForMultipleChoice"),MQr.forEach(t),mwo=r(OEe," (XLM-RoBERTa-XL model)"),OEe.forEach(t),gwo=i(O),Yb=n(O,"LI",{});var XEe=s(Yb);rae=n(XEe,"STRONG",{});var EQr=s(rae);hwo=r(EQr,"xlnet"),EQr.forEach(t),pwo=r(XEe," \u2014 "),rD=n(XEe,"A",{href:!0});var yQr=s(rD);_wo=r(yQr,"XLNetForMultipleChoice"),yQr.forEach(t),uwo=r(XEe," (XLNet model)"),XEe.forEach(t),bwo=i(O),Kb=n(O,"LI",{});var VEe=s(Kb);tae=n(VEe,"STRONG",{});var wQr=s(tae);vwo=r(wQr,"yoso"),wQr.forEach(t),Two=r(VEe," \u2014 "),tD=n(VEe,"A",{href:!0});var AQr=s(tD);Fwo=r(AQr,"YosoForMultipleChoice"),AQr.forEach(t),Cwo=r(VEe," (YOSO model)"),VEe.forEach(t),O.forEach(t),Mwo=i(Gt),Zb=n(Gt,"P",{});var zEe=s(Zb);Ewo=r(zEe,"The model is set in evaluation mode by default using "),aae=n(zEe,"CODE",{});var LQr=s(aae);ywo=r(LQr,"model.eval()"),LQr.forEach(t),wwo=r(zEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nae=n(zEe,"CODE",{});var BQr=s(nae);Awo=r(BQr,"model.train()"),BQr.forEach(t),zEe.forEach(t),Lwo=i(Gt),sae=n(Gt,"P",{});var xQr=s(sae);Bwo=r(xQr,"Examples:"),xQr.forEach(t),xwo=i(Gt),m(YE.$$.fragment,Gt),Gt.forEach(t),Zs.forEach(t),tBe=i(c),cd=n(c,"H2",{class:!0});var cke=s(cd);e3=n(cke,"A",{id:!0,class:!0,href:!0});var kQr=s(e3);lae=n(kQr,"SPAN",{});var RQr=s(lae);m(KE.$$.fragment,RQr),RQr.forEach(t),kQr.forEach(t),kwo=i(cke),iae=n(cke,"SPAN",{});var SQr=s(iae);Rwo=r(SQr,"AutoModelForNextSentencePrediction"),SQr.forEach(t),cke.forEach(t),aBe=i(c),er=n(c,"DIV",{class:!0});var ol=s(er);m(ZE.$$.fragment,ol),Swo=i(ol),fd=n(ol,"P",{});var YV=s(fd);Pwo=r(YV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dae=n(YV,"CODE",{});var PQr=s(dae);$wo=r(PQr,"from_pretrained()"),PQr.forEach(t),Iwo=r(YV,"class method or the "),cae=n(YV,"CODE",{});var $Qr=s(cae);Dwo=r($Qr,"from_config()"),$Qr.forEach(t),jwo=r(YV,`class
method.`),YV.forEach(t),Nwo=i(ol),ey=n(ol,"P",{});var fke=s(ey);qwo=r(fke,"This class cannot be instantiated directly using "),fae=n(fke,"CODE",{});var IQr=s(fae);Gwo=r(IQr,"__init__()"),IQr.forEach(t),Owo=r(fke," (throws an error)."),fke.forEach(t),Xwo=i(ol),Qr=n(ol,"DIV",{class:!0});var rl=s(Qr);m(oy.$$.fragment,rl),Vwo=i(rl),mae=n(rl,"P",{});var DQr=s(mae);zwo=r(DQr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DQr.forEach(t),Wwo=i(rl),md=n(rl,"P",{});var KV=s(md);Qwo=r(KV,`Note:
Loading a model from its configuration file does `),gae=n(KV,"STRONG",{});var jQr=s(gae);Hwo=r(jQr,"not"),jQr.forEach(t),Uwo=r(KV,` load the model weights. It only affects the
model\u2019s configuration. Use `),hae=n(KV,"CODE",{});var NQr=s(hae);Jwo=r(NQr,"from_pretrained()"),NQr.forEach(t),Ywo=r(KV,"to load the model weights."),KV.forEach(t),Kwo=i(rl),pae=n(rl,"P",{});var qQr=s(pae);Zwo=r(qQr,"Examples:"),qQr.forEach(t),e6o=i(rl),m(ry.$$.fragment,rl),rl.forEach(t),o6o=i(ol),Ne=n(ol,"DIV",{class:!0});var Ot=s(Ne);m(ty.$$.fragment,Ot),r6o=i(Ot),_ae=n(Ot,"P",{});var GQr=s(_ae);t6o=r(GQr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GQr.forEach(t),a6o=i(Ot),Wa=n(Ot,"P",{});var P4=s(Wa);n6o=r(P4,"The model class to instantiate is selected based on the "),uae=n(P4,"CODE",{});var OQr=s(uae);s6o=r(OQr,"model_type"),OQr.forEach(t),l6o=r(P4,` property of the config object (either
passed as an argument or loaded from `),bae=n(P4,"CODE",{});var XQr=s(bae);i6o=r(XQr,"pretrained_model_name_or_path"),XQr.forEach(t),d6o=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vae=n(P4,"CODE",{});var VQr=s(vae);c6o=r(VQr,"pretrained_model_name_or_path"),VQr.forEach(t),f6o=r(P4,":"),P4.forEach(t),m6o=i(Ot),na=n(Ot,"UL",{});var tl=s(na);o3=n(tl,"LI",{});var WEe=s(o3);Tae=n(WEe,"STRONG",{});var zQr=s(Tae);g6o=r(zQr,"bert"),zQr.forEach(t),h6o=r(WEe," \u2014 "),aD=n(WEe,"A",{href:!0});var WQr=s(aD);p6o=r(WQr,"BertForNextSentencePrediction"),WQr.forEach(t),_6o=r(WEe," (BERT model)"),WEe.forEach(t),u6o=i(tl),r3=n(tl,"LI",{});var QEe=s(r3);Fae=n(QEe,"STRONG",{});var QQr=s(Fae);b6o=r(QQr,"fnet"),QQr.forEach(t),v6o=r(QEe," \u2014 "),nD=n(QEe,"A",{href:!0});var HQr=s(nD);T6o=r(HQr,"FNetForNextSentencePrediction"),HQr.forEach(t),F6o=r(QEe," (FNet model)"),QEe.forEach(t),C6o=i(tl),t3=n(tl,"LI",{});var HEe=s(t3);Cae=n(HEe,"STRONG",{});var UQr=s(Cae);M6o=r(UQr,"megatron-bert"),UQr.forEach(t),E6o=r(HEe," \u2014 "),sD=n(HEe,"A",{href:!0});var JQr=s(sD);y6o=r(JQr,"MegatronBertForNextSentencePrediction"),JQr.forEach(t),w6o=r(HEe," (MegatronBert model)"),HEe.forEach(t),A6o=i(tl),a3=n(tl,"LI",{});var UEe=s(a3);Mae=n(UEe,"STRONG",{});var YQr=s(Mae);L6o=r(YQr,"mobilebert"),YQr.forEach(t),B6o=r(UEe," \u2014 "),lD=n(UEe,"A",{href:!0});var KQr=s(lD);x6o=r(KQr,"MobileBertForNextSentencePrediction"),KQr.forEach(t),k6o=r(UEe," (MobileBERT model)"),UEe.forEach(t),R6o=i(tl),n3=n(tl,"LI",{});var JEe=s(n3);Eae=n(JEe,"STRONG",{});var ZQr=s(Eae);S6o=r(ZQr,"qdqbert"),ZQr.forEach(t),P6o=r(JEe," \u2014 "),iD=n(JEe,"A",{href:!0});var eHr=s(iD);$6o=r(eHr,"QDQBertForNextSentencePrediction"),eHr.forEach(t),I6o=r(JEe," (QDQBert model)"),JEe.forEach(t),tl.forEach(t),D6o=i(Ot),s3=n(Ot,"P",{});var YEe=s(s3);j6o=r(YEe,"The model is set in evaluation mode by default using "),yae=n(YEe,"CODE",{});var oHr=s(yae);N6o=r(oHr,"model.eval()"),oHr.forEach(t),q6o=r(YEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wae=n(YEe,"CODE",{});var rHr=s(wae);G6o=r(rHr,"model.train()"),rHr.forEach(t),YEe.forEach(t),O6o=i(Ot),Aae=n(Ot,"P",{});var tHr=s(Aae);X6o=r(tHr,"Examples:"),tHr.forEach(t),V6o=i(Ot),m(ay.$$.fragment,Ot),Ot.forEach(t),ol.forEach(t),nBe=i(c),gd=n(c,"H2",{class:!0});var mke=s(gd);l3=n(mke,"A",{id:!0,class:!0,href:!0});var aHr=s(l3);Lae=n(aHr,"SPAN",{});var nHr=s(Lae);m(ny.$$.fragment,nHr),nHr.forEach(t),aHr.forEach(t),z6o=i(mke),Bae=n(mke,"SPAN",{});var sHr=s(Bae);W6o=r(sHr,"AutoModelForTokenClassification"),sHr.forEach(t),mke.forEach(t),sBe=i(c),or=n(c,"DIV",{class:!0});var al=s(or);m(sy.$$.fragment,al),Q6o=i(al),hd=n(al,"P",{});var ZV=s(hd);H6o=r(ZV,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xae=n(ZV,"CODE",{});var lHr=s(xae);U6o=r(lHr,"from_pretrained()"),lHr.forEach(t),J6o=r(ZV,"class method or the "),kae=n(ZV,"CODE",{});var iHr=s(kae);Y6o=r(iHr,"from_config()"),iHr.forEach(t),K6o=r(ZV,`class
method.`),ZV.forEach(t),Z6o=i(al),ly=n(al,"P",{});var gke=s(ly);eAo=r(gke,"This class cannot be instantiated directly using "),Rae=n(gke,"CODE",{});var dHr=s(Rae);oAo=r(dHr,"__init__()"),dHr.forEach(t),rAo=r(gke," (throws an error)."),gke.forEach(t),tAo=i(al),Hr=n(al,"DIV",{class:!0});var nl=s(Hr);m(iy.$$.fragment,nl),aAo=i(nl),Sae=n(nl,"P",{});var cHr=s(Sae);nAo=r(cHr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cHr.forEach(t),sAo=i(nl),pd=n(nl,"P",{});var ez=s(pd);lAo=r(ez,`Note:
Loading a model from its configuration file does `),Pae=n(ez,"STRONG",{});var fHr=s(Pae);iAo=r(fHr,"not"),fHr.forEach(t),dAo=r(ez,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ae=n(ez,"CODE",{});var mHr=s($ae);cAo=r(mHr,"from_pretrained()"),mHr.forEach(t),fAo=r(ez,"to load the model weights."),ez.forEach(t),mAo=i(nl),Iae=n(nl,"P",{});var gHr=s(Iae);gAo=r(gHr,"Examples:"),gHr.forEach(t),hAo=i(nl),m(dy.$$.fragment,nl),nl.forEach(t),pAo=i(al),qe=n(al,"DIV",{class:!0});var Xt=s(qe);m(cy.$$.fragment,Xt),_Ao=i(Xt),Dae=n(Xt,"P",{});var hHr=s(Dae);uAo=r(hHr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hHr.forEach(t),bAo=i(Xt),Qa=n(Xt,"P",{});var $4=s(Qa);vAo=r($4,"The model class to instantiate is selected based on the "),jae=n($4,"CODE",{});var pHr=s(jae);TAo=r(pHr,"model_type"),pHr.forEach(t),FAo=r($4,` property of the config object (either
passed as an argument or loaded from `),Nae=n($4,"CODE",{});var _Hr=s(Nae);CAo=r(_Hr,"pretrained_model_name_or_path"),_Hr.forEach(t),MAo=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qae=n($4,"CODE",{});var uHr=s(qae);EAo=r(uHr,"pretrained_model_name_or_path"),uHr.forEach(t),yAo=r($4,":"),$4.forEach(t),wAo=i(Xt),N=n(Xt,"UL",{});var q=s(N);i3=n(q,"LI",{});var KEe=s(i3);Gae=n(KEe,"STRONG",{});var bHr=s(Gae);AAo=r(bHr,"albert"),bHr.forEach(t),LAo=r(KEe," \u2014 "),dD=n(KEe,"A",{href:!0});var vHr=s(dD);BAo=r(vHr,"AlbertForTokenClassification"),vHr.forEach(t),xAo=r(KEe," (ALBERT model)"),KEe.forEach(t),kAo=i(q),d3=n(q,"LI",{});var ZEe=s(d3);Oae=n(ZEe,"STRONG",{});var THr=s(Oae);RAo=r(THr,"bert"),THr.forEach(t),SAo=r(ZEe," \u2014 "),cD=n(ZEe,"A",{href:!0});var FHr=s(cD);PAo=r(FHr,"BertForTokenClassification"),FHr.forEach(t),$Ao=r(ZEe," (BERT model)"),ZEe.forEach(t),IAo=i(q),c3=n(q,"LI",{});var eye=s(c3);Xae=n(eye,"STRONG",{});var CHr=s(Xae);DAo=r(CHr,"big_bird"),CHr.forEach(t),jAo=r(eye," \u2014 "),fD=n(eye,"A",{href:!0});var MHr=s(fD);NAo=r(MHr,"BigBirdForTokenClassification"),MHr.forEach(t),qAo=r(eye," (BigBird model)"),eye.forEach(t),GAo=i(q),f3=n(q,"LI",{});var oye=s(f3);Vae=n(oye,"STRONG",{});var EHr=s(Vae);OAo=r(EHr,"camembert"),EHr.forEach(t),XAo=r(oye," \u2014 "),mD=n(oye,"A",{href:!0});var yHr=s(mD);VAo=r(yHr,"CamembertForTokenClassification"),yHr.forEach(t),zAo=r(oye," (CamemBERT model)"),oye.forEach(t),WAo=i(q),m3=n(q,"LI",{});var rye=s(m3);zae=n(rye,"STRONG",{});var wHr=s(zae);QAo=r(wHr,"canine"),wHr.forEach(t),HAo=r(rye," \u2014 "),gD=n(rye,"A",{href:!0});var AHr=s(gD);UAo=r(AHr,"CanineForTokenClassification"),AHr.forEach(t),JAo=r(rye," (Canine model)"),rye.forEach(t),YAo=i(q),g3=n(q,"LI",{});var tye=s(g3);Wae=n(tye,"STRONG",{});var LHr=s(Wae);KAo=r(LHr,"convbert"),LHr.forEach(t),ZAo=r(tye," \u2014 "),hD=n(tye,"A",{href:!0});var BHr=s(hD);e0o=r(BHr,"ConvBertForTokenClassification"),BHr.forEach(t),o0o=r(tye," (ConvBERT model)"),tye.forEach(t),r0o=i(q),h3=n(q,"LI",{});var aye=s(h3);Qae=n(aye,"STRONG",{});var xHr=s(Qae);t0o=r(xHr,"data2vec-text"),xHr.forEach(t),a0o=r(aye," \u2014 "),pD=n(aye,"A",{href:!0});var kHr=s(pD);n0o=r(kHr,"Data2VecTextForTokenClassification"),kHr.forEach(t),s0o=r(aye," (Data2VecText model)"),aye.forEach(t),l0o=i(q),p3=n(q,"LI",{});var nye=s(p3);Hae=n(nye,"STRONG",{});var RHr=s(Hae);i0o=r(RHr,"deberta"),RHr.forEach(t),d0o=r(nye," \u2014 "),_D=n(nye,"A",{href:!0});var SHr=s(_D);c0o=r(SHr,"DebertaForTokenClassification"),SHr.forEach(t),f0o=r(nye," (DeBERTa model)"),nye.forEach(t),m0o=i(q),_3=n(q,"LI",{});var sye=s(_3);Uae=n(sye,"STRONG",{});var PHr=s(Uae);g0o=r(PHr,"deberta-v2"),PHr.forEach(t),h0o=r(sye," \u2014 "),uD=n(sye,"A",{href:!0});var $Hr=s(uD);p0o=r($Hr,"DebertaV2ForTokenClassification"),$Hr.forEach(t),_0o=r(sye," (DeBERTa-v2 model)"),sye.forEach(t),u0o=i(q),u3=n(q,"LI",{});var lye=s(u3);Jae=n(lye,"STRONG",{});var IHr=s(Jae);b0o=r(IHr,"distilbert"),IHr.forEach(t),v0o=r(lye," \u2014 "),bD=n(lye,"A",{href:!0});var DHr=s(bD);T0o=r(DHr,"DistilBertForTokenClassification"),DHr.forEach(t),F0o=r(lye," (DistilBERT model)"),lye.forEach(t),C0o=i(q),b3=n(q,"LI",{});var iye=s(b3);Yae=n(iye,"STRONG",{});var jHr=s(Yae);M0o=r(jHr,"electra"),jHr.forEach(t),E0o=r(iye," \u2014 "),vD=n(iye,"A",{href:!0});var NHr=s(vD);y0o=r(NHr,"ElectraForTokenClassification"),NHr.forEach(t),w0o=r(iye," (ELECTRA model)"),iye.forEach(t),A0o=i(q),v3=n(q,"LI",{});var dye=s(v3);Kae=n(dye,"STRONG",{});var qHr=s(Kae);L0o=r(qHr,"flaubert"),qHr.forEach(t),B0o=r(dye," \u2014 "),TD=n(dye,"A",{href:!0});var GHr=s(TD);x0o=r(GHr,"FlaubertForTokenClassification"),GHr.forEach(t),k0o=r(dye," (FlauBERT model)"),dye.forEach(t),R0o=i(q),T3=n(q,"LI",{});var cye=s(T3);Zae=n(cye,"STRONG",{});var OHr=s(Zae);S0o=r(OHr,"fnet"),OHr.forEach(t),P0o=r(cye," \u2014 "),FD=n(cye,"A",{href:!0});var XHr=s(FD);$0o=r(XHr,"FNetForTokenClassification"),XHr.forEach(t),I0o=r(cye," (FNet model)"),cye.forEach(t),D0o=i(q),F3=n(q,"LI",{});var fye=s(F3);ene=n(fye,"STRONG",{});var VHr=s(ene);j0o=r(VHr,"funnel"),VHr.forEach(t),N0o=r(fye," \u2014 "),CD=n(fye,"A",{href:!0});var zHr=s(CD);q0o=r(zHr,"FunnelForTokenClassification"),zHr.forEach(t),G0o=r(fye," (Funnel Transformer model)"),fye.forEach(t),O0o=i(q),C3=n(q,"LI",{});var mye=s(C3);one=n(mye,"STRONG",{});var WHr=s(one);X0o=r(WHr,"gpt2"),WHr.forEach(t),V0o=r(mye," \u2014 "),MD=n(mye,"A",{href:!0});var QHr=s(MD);z0o=r(QHr,"GPT2ForTokenClassification"),QHr.forEach(t),W0o=r(mye," (OpenAI GPT-2 model)"),mye.forEach(t),Q0o=i(q),M3=n(q,"LI",{});var gye=s(M3);rne=n(gye,"STRONG",{});var HHr=s(rne);H0o=r(HHr,"ibert"),HHr.forEach(t),U0o=r(gye," \u2014 "),ED=n(gye,"A",{href:!0});var UHr=s(ED);J0o=r(UHr,"IBertForTokenClassification"),UHr.forEach(t),Y0o=r(gye," (I-BERT model)"),gye.forEach(t),K0o=i(q),E3=n(q,"LI",{});var hye=s(E3);tne=n(hye,"STRONG",{});var JHr=s(tne);Z0o=r(JHr,"layoutlm"),JHr.forEach(t),eLo=r(hye," \u2014 "),yD=n(hye,"A",{href:!0});var YHr=s(yD);oLo=r(YHr,"LayoutLMForTokenClassification"),YHr.forEach(t),rLo=r(hye," (LayoutLM model)"),hye.forEach(t),tLo=i(q),y3=n(q,"LI",{});var pye=s(y3);ane=n(pye,"STRONG",{});var KHr=s(ane);aLo=r(KHr,"layoutlmv2"),KHr.forEach(t),nLo=r(pye," \u2014 "),wD=n(pye,"A",{href:!0});var ZHr=s(wD);sLo=r(ZHr,"LayoutLMv2ForTokenClassification"),ZHr.forEach(t),lLo=r(pye," (LayoutLMv2 model)"),pye.forEach(t),iLo=i(q),w3=n(q,"LI",{});var _ye=s(w3);nne=n(_ye,"STRONG",{});var eUr=s(nne);dLo=r(eUr,"longformer"),eUr.forEach(t),cLo=r(_ye," \u2014 "),AD=n(_ye,"A",{href:!0});var oUr=s(AD);fLo=r(oUr,"LongformerForTokenClassification"),oUr.forEach(t),mLo=r(_ye," (Longformer model)"),_ye.forEach(t),gLo=i(q),A3=n(q,"LI",{});var uye=s(A3);sne=n(uye,"STRONG",{});var rUr=s(sne);hLo=r(rUr,"megatron-bert"),rUr.forEach(t),pLo=r(uye," \u2014 "),LD=n(uye,"A",{href:!0});var tUr=s(LD);_Lo=r(tUr,"MegatronBertForTokenClassification"),tUr.forEach(t),uLo=r(uye," (MegatronBert model)"),uye.forEach(t),bLo=i(q),L3=n(q,"LI",{});var bye=s(L3);lne=n(bye,"STRONG",{});var aUr=s(lne);vLo=r(aUr,"mobilebert"),aUr.forEach(t),TLo=r(bye," \u2014 "),BD=n(bye,"A",{href:!0});var nUr=s(BD);FLo=r(nUr,"MobileBertForTokenClassification"),nUr.forEach(t),CLo=r(bye," (MobileBERT model)"),bye.forEach(t),MLo=i(q),B3=n(q,"LI",{});var vye=s(B3);ine=n(vye,"STRONG",{});var sUr=s(ine);ELo=r(sUr,"mpnet"),sUr.forEach(t),yLo=r(vye," \u2014 "),xD=n(vye,"A",{href:!0});var lUr=s(xD);wLo=r(lUr,"MPNetForTokenClassification"),lUr.forEach(t),ALo=r(vye," (MPNet model)"),vye.forEach(t),LLo=i(q),x3=n(q,"LI",{});var Tye=s(x3);dne=n(Tye,"STRONG",{});var iUr=s(dne);BLo=r(iUr,"nystromformer"),iUr.forEach(t),xLo=r(Tye," \u2014 "),kD=n(Tye,"A",{href:!0});var dUr=s(kD);kLo=r(dUr,"NystromformerForTokenClassification"),dUr.forEach(t),RLo=r(Tye," (Nystromformer model)"),Tye.forEach(t),SLo=i(q),k3=n(q,"LI",{});var Fye=s(k3);cne=n(Fye,"STRONG",{});var cUr=s(cne);PLo=r(cUr,"qdqbert"),cUr.forEach(t),$Lo=r(Fye," \u2014 "),RD=n(Fye,"A",{href:!0});var fUr=s(RD);ILo=r(fUr,"QDQBertForTokenClassification"),fUr.forEach(t),DLo=r(Fye," (QDQBert model)"),Fye.forEach(t),jLo=i(q),R3=n(q,"LI",{});var Cye=s(R3);fne=n(Cye,"STRONG",{});var mUr=s(fne);NLo=r(mUr,"rembert"),mUr.forEach(t),qLo=r(Cye," \u2014 "),SD=n(Cye,"A",{href:!0});var gUr=s(SD);GLo=r(gUr,"RemBertForTokenClassification"),gUr.forEach(t),OLo=r(Cye," (RemBERT model)"),Cye.forEach(t),XLo=i(q),S3=n(q,"LI",{});var Mye=s(S3);mne=n(Mye,"STRONG",{});var hUr=s(mne);VLo=r(hUr,"roberta"),hUr.forEach(t),zLo=r(Mye," \u2014 "),PD=n(Mye,"A",{href:!0});var pUr=s(PD);WLo=r(pUr,"RobertaForTokenClassification"),pUr.forEach(t),QLo=r(Mye," (RoBERTa model)"),Mye.forEach(t),HLo=i(q),P3=n(q,"LI",{});var Eye=s(P3);gne=n(Eye,"STRONG",{});var _Ur=s(gne);ULo=r(_Ur,"roformer"),_Ur.forEach(t),JLo=r(Eye," \u2014 "),$D=n(Eye,"A",{href:!0});var uUr=s($D);YLo=r(uUr,"RoFormerForTokenClassification"),uUr.forEach(t),KLo=r(Eye," (RoFormer model)"),Eye.forEach(t),ZLo=i(q),$3=n(q,"LI",{});var yye=s($3);hne=n(yye,"STRONG",{});var bUr=s(hne);e8o=r(bUr,"squeezebert"),bUr.forEach(t),o8o=r(yye," \u2014 "),ID=n(yye,"A",{href:!0});var vUr=s(ID);r8o=r(vUr,"SqueezeBertForTokenClassification"),vUr.forEach(t),t8o=r(yye," (SqueezeBERT model)"),yye.forEach(t),a8o=i(q),I3=n(q,"LI",{});var wye=s(I3);pne=n(wye,"STRONG",{});var TUr=s(pne);n8o=r(TUr,"xlm"),TUr.forEach(t),s8o=r(wye," \u2014 "),DD=n(wye,"A",{href:!0});var FUr=s(DD);l8o=r(FUr,"XLMForTokenClassification"),FUr.forEach(t),i8o=r(wye," (XLM model)"),wye.forEach(t),d8o=i(q),D3=n(q,"LI",{});var Aye=s(D3);_ne=n(Aye,"STRONG",{});var CUr=s(_ne);c8o=r(CUr,"xlm-roberta"),CUr.forEach(t),f8o=r(Aye," \u2014 "),jD=n(Aye,"A",{href:!0});var MUr=s(jD);m8o=r(MUr,"XLMRobertaForTokenClassification"),MUr.forEach(t),g8o=r(Aye," (XLM-RoBERTa model)"),Aye.forEach(t),h8o=i(q),j3=n(q,"LI",{});var Lye=s(j3);une=n(Lye,"STRONG",{});var EUr=s(une);p8o=r(EUr,"xlm-roberta-xl"),EUr.forEach(t),_8o=r(Lye," \u2014 "),ND=n(Lye,"A",{href:!0});var yUr=s(ND);u8o=r(yUr,"XLMRobertaXLForTokenClassification"),yUr.forEach(t),b8o=r(Lye," (XLM-RoBERTa-XL model)"),Lye.forEach(t),v8o=i(q),N3=n(q,"LI",{});var Bye=s(N3);bne=n(Bye,"STRONG",{});var wUr=s(bne);T8o=r(wUr,"xlnet"),wUr.forEach(t),F8o=r(Bye," \u2014 "),qD=n(Bye,"A",{href:!0});var AUr=s(qD);C8o=r(AUr,"XLNetForTokenClassification"),AUr.forEach(t),M8o=r(Bye," (XLNet model)"),Bye.forEach(t),E8o=i(q),q3=n(q,"LI",{});var xye=s(q3);vne=n(xye,"STRONG",{});var LUr=s(vne);y8o=r(LUr,"yoso"),LUr.forEach(t),w8o=r(xye," \u2014 "),GD=n(xye,"A",{href:!0});var BUr=s(GD);A8o=r(BUr,"YosoForTokenClassification"),BUr.forEach(t),L8o=r(xye," (YOSO model)"),xye.forEach(t),q.forEach(t),B8o=i(Xt),G3=n(Xt,"P",{});var kye=s(G3);x8o=r(kye,"The model is set in evaluation mode by default using "),Tne=n(kye,"CODE",{});var xUr=s(Tne);k8o=r(xUr,"model.eval()"),xUr.forEach(t),R8o=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fne=n(kye,"CODE",{});var kUr=s(Fne);S8o=r(kUr,"model.train()"),kUr.forEach(t),kye.forEach(t),P8o=i(Xt),Cne=n(Xt,"P",{});var RUr=s(Cne);$8o=r(RUr,"Examples:"),RUr.forEach(t),I8o=i(Xt),m(fy.$$.fragment,Xt),Xt.forEach(t),al.forEach(t),lBe=i(c),_d=n(c,"H2",{class:!0});var hke=s(_d);O3=n(hke,"A",{id:!0,class:!0,href:!0});var SUr=s(O3);Mne=n(SUr,"SPAN",{});var PUr=s(Mne);m(my.$$.fragment,PUr),PUr.forEach(t),SUr.forEach(t),D8o=i(hke),Ene=n(hke,"SPAN",{});var $Ur=s(Ene);j8o=r($Ur,"AutoModelForQuestionAnswering"),$Ur.forEach(t),hke.forEach(t),iBe=i(c),rr=n(c,"DIV",{class:!0});var sl=s(rr);m(gy.$$.fragment,sl),N8o=i(sl),ud=n(sl,"P",{});var oz=s(ud);q8o=r(oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yne=n(oz,"CODE",{});var IUr=s(yne);G8o=r(IUr,"from_pretrained()"),IUr.forEach(t),O8o=r(oz,"class method or the "),wne=n(oz,"CODE",{});var DUr=s(wne);X8o=r(DUr,"from_config()"),DUr.forEach(t),V8o=r(oz,`class
method.`),oz.forEach(t),z8o=i(sl),hy=n(sl,"P",{});var pke=s(hy);W8o=r(pke,"This class cannot be instantiated directly using "),Ane=n(pke,"CODE",{});var jUr=s(Ane);Q8o=r(jUr,"__init__()"),jUr.forEach(t),H8o=r(pke," (throws an error)."),pke.forEach(t),U8o=i(sl),Ur=n(sl,"DIV",{class:!0});var ll=s(Ur);m(py.$$.fragment,ll),J8o=i(ll),Lne=n(ll,"P",{});var NUr=s(Lne);Y8o=r(NUr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NUr.forEach(t),K8o=i(ll),bd=n(ll,"P",{});var rz=s(bd);Z8o=r(rz,`Note:
Loading a model from its configuration file does `),Bne=n(rz,"STRONG",{});var qUr=s(Bne);e7o=r(qUr,"not"),qUr.forEach(t),o7o=r(rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),xne=n(rz,"CODE",{});var GUr=s(xne);r7o=r(GUr,"from_pretrained()"),GUr.forEach(t),t7o=r(rz,"to load the model weights."),rz.forEach(t),a7o=i(ll),kne=n(ll,"P",{});var OUr=s(kne);n7o=r(OUr,"Examples:"),OUr.forEach(t),s7o=i(ll),m(_y.$$.fragment,ll),ll.forEach(t),l7o=i(sl),Ge=n(sl,"DIV",{class:!0});var Vt=s(Ge);m(uy.$$.fragment,Vt),i7o=i(Vt),Rne=n(Vt,"P",{});var XUr=s(Rne);d7o=r(XUr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XUr.forEach(t),c7o=i(Vt),Ha=n(Vt,"P",{});var I4=s(Ha);f7o=r(I4,"The model class to instantiate is selected based on the "),Sne=n(I4,"CODE",{});var VUr=s(Sne);m7o=r(VUr,"model_type"),VUr.forEach(t),g7o=r(I4,` property of the config object (either
passed as an argument or loaded from `),Pne=n(I4,"CODE",{});var zUr=s(Pne);h7o=r(zUr,"pretrained_model_name_or_path"),zUr.forEach(t),p7o=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ne=n(I4,"CODE",{});var WUr=s($ne);_7o=r(WUr,"pretrained_model_name_or_path"),WUr.forEach(t),u7o=r(I4,":"),I4.forEach(t),b7o=i(Vt),R=n(Vt,"UL",{});var P=s(R);X3=n(P,"LI",{});var Rye=s(X3);Ine=n(Rye,"STRONG",{});var QUr=s(Ine);v7o=r(QUr,"albert"),QUr.forEach(t),T7o=r(Rye," \u2014 "),OD=n(Rye,"A",{href:!0});var HUr=s(OD);F7o=r(HUr,"AlbertForQuestionAnswering"),HUr.forEach(t),C7o=r(Rye," (ALBERT model)"),Rye.forEach(t),M7o=i(P),V3=n(P,"LI",{});var Sye=s(V3);Dne=n(Sye,"STRONG",{});var UUr=s(Dne);E7o=r(UUr,"bart"),UUr.forEach(t),y7o=r(Sye," \u2014 "),XD=n(Sye,"A",{href:!0});var JUr=s(XD);w7o=r(JUr,"BartForQuestionAnswering"),JUr.forEach(t),A7o=r(Sye," (BART model)"),Sye.forEach(t),L7o=i(P),z3=n(P,"LI",{});var Pye=s(z3);jne=n(Pye,"STRONG",{});var YUr=s(jne);B7o=r(YUr,"bert"),YUr.forEach(t),x7o=r(Pye," \u2014 "),VD=n(Pye,"A",{href:!0});var KUr=s(VD);k7o=r(KUr,"BertForQuestionAnswering"),KUr.forEach(t),R7o=r(Pye," (BERT model)"),Pye.forEach(t),S7o=i(P),W3=n(P,"LI",{});var $ye=s(W3);Nne=n($ye,"STRONG",{});var ZUr=s(Nne);P7o=r(ZUr,"big_bird"),ZUr.forEach(t),$7o=r($ye," \u2014 "),zD=n($ye,"A",{href:!0});var eJr=s(zD);I7o=r(eJr,"BigBirdForQuestionAnswering"),eJr.forEach(t),D7o=r($ye," (BigBird model)"),$ye.forEach(t),j7o=i(P),Q3=n(P,"LI",{});var Iye=s(Q3);qne=n(Iye,"STRONG",{});var oJr=s(qne);N7o=r(oJr,"bigbird_pegasus"),oJr.forEach(t),q7o=r(Iye," \u2014 "),WD=n(Iye,"A",{href:!0});var rJr=s(WD);G7o=r(rJr,"BigBirdPegasusForQuestionAnswering"),rJr.forEach(t),O7o=r(Iye," (BigBirdPegasus model)"),Iye.forEach(t),X7o=i(P),H3=n(P,"LI",{});var Dye=s(H3);Gne=n(Dye,"STRONG",{});var tJr=s(Gne);V7o=r(tJr,"camembert"),tJr.forEach(t),z7o=r(Dye," \u2014 "),QD=n(Dye,"A",{href:!0});var aJr=s(QD);W7o=r(aJr,"CamembertForQuestionAnswering"),aJr.forEach(t),Q7o=r(Dye," (CamemBERT model)"),Dye.forEach(t),H7o=i(P),U3=n(P,"LI",{});var jye=s(U3);One=n(jye,"STRONG",{});var nJr=s(One);U7o=r(nJr,"canine"),nJr.forEach(t),J7o=r(jye," \u2014 "),HD=n(jye,"A",{href:!0});var sJr=s(HD);Y7o=r(sJr,"CanineForQuestionAnswering"),sJr.forEach(t),K7o=r(jye," (Canine model)"),jye.forEach(t),Z7o=i(P),J3=n(P,"LI",{});var Nye=s(J3);Xne=n(Nye,"STRONG",{});var lJr=s(Xne);eBo=r(lJr,"convbert"),lJr.forEach(t),oBo=r(Nye," \u2014 "),UD=n(Nye,"A",{href:!0});var iJr=s(UD);rBo=r(iJr,"ConvBertForQuestionAnswering"),iJr.forEach(t),tBo=r(Nye," (ConvBERT model)"),Nye.forEach(t),aBo=i(P),Y3=n(P,"LI",{});var qye=s(Y3);Vne=n(qye,"STRONG",{});var dJr=s(Vne);nBo=r(dJr,"data2vec-text"),dJr.forEach(t),sBo=r(qye," \u2014 "),JD=n(qye,"A",{href:!0});var cJr=s(JD);lBo=r(cJr,"Data2VecTextForQuestionAnswering"),cJr.forEach(t),iBo=r(qye," (Data2VecText model)"),qye.forEach(t),dBo=i(P),K3=n(P,"LI",{});var Gye=s(K3);zne=n(Gye,"STRONG",{});var fJr=s(zne);cBo=r(fJr,"deberta"),fJr.forEach(t),fBo=r(Gye," \u2014 "),YD=n(Gye,"A",{href:!0});var mJr=s(YD);mBo=r(mJr,"DebertaForQuestionAnswering"),mJr.forEach(t),gBo=r(Gye," (DeBERTa model)"),Gye.forEach(t),hBo=i(P),Z3=n(P,"LI",{});var Oye=s(Z3);Wne=n(Oye,"STRONG",{});var gJr=s(Wne);pBo=r(gJr,"deberta-v2"),gJr.forEach(t),_Bo=r(Oye," \u2014 "),KD=n(Oye,"A",{href:!0});var hJr=s(KD);uBo=r(hJr,"DebertaV2ForQuestionAnswering"),hJr.forEach(t),bBo=r(Oye," (DeBERTa-v2 model)"),Oye.forEach(t),vBo=i(P),e5=n(P,"LI",{});var Xye=s(e5);Qne=n(Xye,"STRONG",{});var pJr=s(Qne);TBo=r(pJr,"distilbert"),pJr.forEach(t),FBo=r(Xye," \u2014 "),ZD=n(Xye,"A",{href:!0});var _Jr=s(ZD);CBo=r(_Jr,"DistilBertForQuestionAnswering"),_Jr.forEach(t),MBo=r(Xye," (DistilBERT model)"),Xye.forEach(t),EBo=i(P),o5=n(P,"LI",{});var Vye=s(o5);Hne=n(Vye,"STRONG",{});var uJr=s(Hne);yBo=r(uJr,"electra"),uJr.forEach(t),wBo=r(Vye," \u2014 "),ej=n(Vye,"A",{href:!0});var bJr=s(ej);ABo=r(bJr,"ElectraForQuestionAnswering"),bJr.forEach(t),LBo=r(Vye," (ELECTRA model)"),Vye.forEach(t),BBo=i(P),r5=n(P,"LI",{});var zye=s(r5);Une=n(zye,"STRONG",{});var vJr=s(Une);xBo=r(vJr,"flaubert"),vJr.forEach(t),kBo=r(zye," \u2014 "),oj=n(zye,"A",{href:!0});var TJr=s(oj);RBo=r(TJr,"FlaubertForQuestionAnsweringSimple"),TJr.forEach(t),SBo=r(zye," (FlauBERT model)"),zye.forEach(t),PBo=i(P),t5=n(P,"LI",{});var Wye=s(t5);Jne=n(Wye,"STRONG",{});var FJr=s(Jne);$Bo=r(FJr,"fnet"),FJr.forEach(t),IBo=r(Wye," \u2014 "),rj=n(Wye,"A",{href:!0});var CJr=s(rj);DBo=r(CJr,"FNetForQuestionAnswering"),CJr.forEach(t),jBo=r(Wye," (FNet model)"),Wye.forEach(t),NBo=i(P),a5=n(P,"LI",{});var Qye=s(a5);Yne=n(Qye,"STRONG",{});var MJr=s(Yne);qBo=r(MJr,"funnel"),MJr.forEach(t),GBo=r(Qye," \u2014 "),tj=n(Qye,"A",{href:!0});var EJr=s(tj);OBo=r(EJr,"FunnelForQuestionAnswering"),EJr.forEach(t),XBo=r(Qye," (Funnel Transformer model)"),Qye.forEach(t),VBo=i(P),n5=n(P,"LI",{});var Hye=s(n5);Kne=n(Hye,"STRONG",{});var yJr=s(Kne);zBo=r(yJr,"gptj"),yJr.forEach(t),WBo=r(Hye," \u2014 "),aj=n(Hye,"A",{href:!0});var wJr=s(aj);QBo=r(wJr,"GPTJForQuestionAnswering"),wJr.forEach(t),HBo=r(Hye," (GPT-J model)"),Hye.forEach(t),UBo=i(P),s5=n(P,"LI",{});var Uye=s(s5);Zne=n(Uye,"STRONG",{});var AJr=s(Zne);JBo=r(AJr,"ibert"),AJr.forEach(t),YBo=r(Uye," \u2014 "),nj=n(Uye,"A",{href:!0});var LJr=s(nj);KBo=r(LJr,"IBertForQuestionAnswering"),LJr.forEach(t),ZBo=r(Uye," (I-BERT model)"),Uye.forEach(t),exo=i(P),l5=n(P,"LI",{});var Jye=s(l5);ese=n(Jye,"STRONG",{});var BJr=s(ese);oxo=r(BJr,"layoutlmv2"),BJr.forEach(t),rxo=r(Jye," \u2014 "),sj=n(Jye,"A",{href:!0});var xJr=s(sj);txo=r(xJr,"LayoutLMv2ForQuestionAnswering"),xJr.forEach(t),axo=r(Jye," (LayoutLMv2 model)"),Jye.forEach(t),nxo=i(P),i5=n(P,"LI",{});var Yye=s(i5);ose=n(Yye,"STRONG",{});var kJr=s(ose);sxo=r(kJr,"led"),kJr.forEach(t),lxo=r(Yye," \u2014 "),lj=n(Yye,"A",{href:!0});var RJr=s(lj);ixo=r(RJr,"LEDForQuestionAnswering"),RJr.forEach(t),dxo=r(Yye," (LED model)"),Yye.forEach(t),cxo=i(P),d5=n(P,"LI",{});var Kye=s(d5);rse=n(Kye,"STRONG",{});var SJr=s(rse);fxo=r(SJr,"longformer"),SJr.forEach(t),mxo=r(Kye," \u2014 "),ij=n(Kye,"A",{href:!0});var PJr=s(ij);gxo=r(PJr,"LongformerForQuestionAnswering"),PJr.forEach(t),hxo=r(Kye," (Longformer model)"),Kye.forEach(t),pxo=i(P),c5=n(P,"LI",{});var Zye=s(c5);tse=n(Zye,"STRONG",{});var $Jr=s(tse);_xo=r($Jr,"lxmert"),$Jr.forEach(t),uxo=r(Zye," \u2014 "),dj=n(Zye,"A",{href:!0});var IJr=s(dj);bxo=r(IJr,"LxmertForQuestionAnswering"),IJr.forEach(t),vxo=r(Zye," (LXMERT model)"),Zye.forEach(t),Txo=i(P),f5=n(P,"LI",{});var ewe=s(f5);ase=n(ewe,"STRONG",{});var DJr=s(ase);Fxo=r(DJr,"mbart"),DJr.forEach(t),Cxo=r(ewe," \u2014 "),cj=n(ewe,"A",{href:!0});var jJr=s(cj);Mxo=r(jJr,"MBartForQuestionAnswering"),jJr.forEach(t),Exo=r(ewe," (mBART model)"),ewe.forEach(t),yxo=i(P),m5=n(P,"LI",{});var owe=s(m5);nse=n(owe,"STRONG",{});var NJr=s(nse);wxo=r(NJr,"megatron-bert"),NJr.forEach(t),Axo=r(owe," \u2014 "),fj=n(owe,"A",{href:!0});var qJr=s(fj);Lxo=r(qJr,"MegatronBertForQuestionAnswering"),qJr.forEach(t),Bxo=r(owe," (MegatronBert model)"),owe.forEach(t),xxo=i(P),g5=n(P,"LI",{});var rwe=s(g5);sse=n(rwe,"STRONG",{});var GJr=s(sse);kxo=r(GJr,"mobilebert"),GJr.forEach(t),Rxo=r(rwe," \u2014 "),mj=n(rwe,"A",{href:!0});var OJr=s(mj);Sxo=r(OJr,"MobileBertForQuestionAnswering"),OJr.forEach(t),Pxo=r(rwe," (MobileBERT model)"),rwe.forEach(t),$xo=i(P),h5=n(P,"LI",{});var twe=s(h5);lse=n(twe,"STRONG",{});var XJr=s(lse);Ixo=r(XJr,"mpnet"),XJr.forEach(t),Dxo=r(twe," \u2014 "),gj=n(twe,"A",{href:!0});var VJr=s(gj);jxo=r(VJr,"MPNetForQuestionAnswering"),VJr.forEach(t),Nxo=r(twe," (MPNet model)"),twe.forEach(t),qxo=i(P),p5=n(P,"LI",{});var awe=s(p5);ise=n(awe,"STRONG",{});var zJr=s(ise);Gxo=r(zJr,"nystromformer"),zJr.forEach(t),Oxo=r(awe," \u2014 "),hj=n(awe,"A",{href:!0});var WJr=s(hj);Xxo=r(WJr,"NystromformerForQuestionAnswering"),WJr.forEach(t),Vxo=r(awe," (Nystromformer model)"),awe.forEach(t),zxo=i(P),_5=n(P,"LI",{});var nwe=s(_5);dse=n(nwe,"STRONG",{});var QJr=s(dse);Wxo=r(QJr,"qdqbert"),QJr.forEach(t),Qxo=r(nwe," \u2014 "),pj=n(nwe,"A",{href:!0});var HJr=s(pj);Hxo=r(HJr,"QDQBertForQuestionAnswering"),HJr.forEach(t),Uxo=r(nwe," (QDQBert model)"),nwe.forEach(t),Jxo=i(P),u5=n(P,"LI",{});var swe=s(u5);cse=n(swe,"STRONG",{});var UJr=s(cse);Yxo=r(UJr,"reformer"),UJr.forEach(t),Kxo=r(swe," \u2014 "),_j=n(swe,"A",{href:!0});var JJr=s(_j);Zxo=r(JJr,"ReformerForQuestionAnswering"),JJr.forEach(t),eko=r(swe," (Reformer model)"),swe.forEach(t),oko=i(P),b5=n(P,"LI",{});var lwe=s(b5);fse=n(lwe,"STRONG",{});var YJr=s(fse);rko=r(YJr,"rembert"),YJr.forEach(t),tko=r(lwe," \u2014 "),uj=n(lwe,"A",{href:!0});var KJr=s(uj);ako=r(KJr,"RemBertForQuestionAnswering"),KJr.forEach(t),nko=r(lwe," (RemBERT model)"),lwe.forEach(t),sko=i(P),v5=n(P,"LI",{});var iwe=s(v5);mse=n(iwe,"STRONG",{});var ZJr=s(mse);lko=r(ZJr,"roberta"),ZJr.forEach(t),iko=r(iwe," \u2014 "),bj=n(iwe,"A",{href:!0});var eYr=s(bj);dko=r(eYr,"RobertaForQuestionAnswering"),eYr.forEach(t),cko=r(iwe," (RoBERTa model)"),iwe.forEach(t),fko=i(P),T5=n(P,"LI",{});var dwe=s(T5);gse=n(dwe,"STRONG",{});var oYr=s(gse);mko=r(oYr,"roformer"),oYr.forEach(t),gko=r(dwe," \u2014 "),vj=n(dwe,"A",{href:!0});var rYr=s(vj);hko=r(rYr,"RoFormerForQuestionAnswering"),rYr.forEach(t),pko=r(dwe," (RoFormer model)"),dwe.forEach(t),_ko=i(P),F5=n(P,"LI",{});var cwe=s(F5);hse=n(cwe,"STRONG",{});var tYr=s(hse);uko=r(tYr,"splinter"),tYr.forEach(t),bko=r(cwe," \u2014 "),Tj=n(cwe,"A",{href:!0});var aYr=s(Tj);vko=r(aYr,"SplinterForQuestionAnswering"),aYr.forEach(t),Tko=r(cwe," (Splinter model)"),cwe.forEach(t),Fko=i(P),C5=n(P,"LI",{});var fwe=s(C5);pse=n(fwe,"STRONG",{});var nYr=s(pse);Cko=r(nYr,"squeezebert"),nYr.forEach(t),Mko=r(fwe," \u2014 "),Fj=n(fwe,"A",{href:!0});var sYr=s(Fj);Eko=r(sYr,"SqueezeBertForQuestionAnswering"),sYr.forEach(t),yko=r(fwe," (SqueezeBERT model)"),fwe.forEach(t),wko=i(P),M5=n(P,"LI",{});var mwe=s(M5);_se=n(mwe,"STRONG",{});var lYr=s(_se);Ako=r(lYr,"xlm"),lYr.forEach(t),Lko=r(mwe," \u2014 "),Cj=n(mwe,"A",{href:!0});var iYr=s(Cj);Bko=r(iYr,"XLMForQuestionAnsweringSimple"),iYr.forEach(t),xko=r(mwe," (XLM model)"),mwe.forEach(t),kko=i(P),E5=n(P,"LI",{});var gwe=s(E5);use=n(gwe,"STRONG",{});var dYr=s(use);Rko=r(dYr,"xlm-roberta"),dYr.forEach(t),Sko=r(gwe," \u2014 "),Mj=n(gwe,"A",{href:!0});var cYr=s(Mj);Pko=r(cYr,"XLMRobertaForQuestionAnswering"),cYr.forEach(t),$ko=r(gwe," (XLM-RoBERTa model)"),gwe.forEach(t),Iko=i(P),y5=n(P,"LI",{});var hwe=s(y5);bse=n(hwe,"STRONG",{});var fYr=s(bse);Dko=r(fYr,"xlm-roberta-xl"),fYr.forEach(t),jko=r(hwe," \u2014 "),Ej=n(hwe,"A",{href:!0});var mYr=s(Ej);Nko=r(mYr,"XLMRobertaXLForQuestionAnswering"),mYr.forEach(t),qko=r(hwe," (XLM-RoBERTa-XL model)"),hwe.forEach(t),Gko=i(P),w5=n(P,"LI",{});var pwe=s(w5);vse=n(pwe,"STRONG",{});var gYr=s(vse);Oko=r(gYr,"xlnet"),gYr.forEach(t),Xko=r(pwe," \u2014 "),yj=n(pwe,"A",{href:!0});var hYr=s(yj);Vko=r(hYr,"XLNetForQuestionAnsweringSimple"),hYr.forEach(t),zko=r(pwe," (XLNet model)"),pwe.forEach(t),Wko=i(P),A5=n(P,"LI",{});var _we=s(A5);Tse=n(_we,"STRONG",{});var pYr=s(Tse);Qko=r(pYr,"yoso"),pYr.forEach(t),Hko=r(_we," \u2014 "),wj=n(_we,"A",{href:!0});var _Yr=s(wj);Uko=r(_Yr,"YosoForQuestionAnswering"),_Yr.forEach(t),Jko=r(_we," (YOSO model)"),_we.forEach(t),P.forEach(t),Yko=i(Vt),L5=n(Vt,"P",{});var uwe=s(L5);Kko=r(uwe,"The model is set in evaluation mode by default using "),Fse=n(uwe,"CODE",{});var uYr=s(Fse);Zko=r(uYr,"model.eval()"),uYr.forEach(t),eRo=r(uwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cse=n(uwe,"CODE",{});var bYr=s(Cse);oRo=r(bYr,"model.train()"),bYr.forEach(t),uwe.forEach(t),rRo=i(Vt),Mse=n(Vt,"P",{});var vYr=s(Mse);tRo=r(vYr,"Examples:"),vYr.forEach(t),aRo=i(Vt),m(by.$$.fragment,Vt),Vt.forEach(t),sl.forEach(t),dBe=i(c),vd=n(c,"H2",{class:!0});var _ke=s(vd);B5=n(_ke,"A",{id:!0,class:!0,href:!0});var TYr=s(B5);Ese=n(TYr,"SPAN",{});var FYr=s(Ese);m(vy.$$.fragment,FYr),FYr.forEach(t),TYr.forEach(t),nRo=i(_ke),yse=n(_ke,"SPAN",{});var CYr=s(yse);sRo=r(CYr,"AutoModelForTableQuestionAnswering"),CYr.forEach(t),_ke.forEach(t),cBe=i(c),tr=n(c,"DIV",{class:!0});var il=s(tr);m(Ty.$$.fragment,il),lRo=i(il),Td=n(il,"P",{});var tz=s(Td);iRo=r(tz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),wse=n(tz,"CODE",{});var MYr=s(wse);dRo=r(MYr,"from_pretrained()"),MYr.forEach(t),cRo=r(tz,"class method or the "),Ase=n(tz,"CODE",{});var EYr=s(Ase);fRo=r(EYr,"from_config()"),EYr.forEach(t),mRo=r(tz,`class
method.`),tz.forEach(t),gRo=i(il),Fy=n(il,"P",{});var uke=s(Fy);hRo=r(uke,"This class cannot be instantiated directly using "),Lse=n(uke,"CODE",{});var yYr=s(Lse);pRo=r(yYr,"__init__()"),yYr.forEach(t),_Ro=r(uke," (throws an error)."),uke.forEach(t),uRo=i(il),Jr=n(il,"DIV",{class:!0});var dl=s(Jr);m(Cy.$$.fragment,dl),bRo=i(dl),Bse=n(dl,"P",{});var wYr=s(Bse);vRo=r(wYr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wYr.forEach(t),TRo=i(dl),Fd=n(dl,"P",{});var az=s(Fd);FRo=r(az,`Note:
Loading a model from its configuration file does `),xse=n(az,"STRONG",{});var AYr=s(xse);CRo=r(AYr,"not"),AYr.forEach(t),MRo=r(az,` load the model weights. It only affects the
model\u2019s configuration. Use `),kse=n(az,"CODE",{});var LYr=s(kse);ERo=r(LYr,"from_pretrained()"),LYr.forEach(t),yRo=r(az,"to load the model weights."),az.forEach(t),wRo=i(dl),Rse=n(dl,"P",{});var BYr=s(Rse);ARo=r(BYr,"Examples:"),BYr.forEach(t),LRo=i(dl),m(My.$$.fragment,dl),dl.forEach(t),BRo=i(il),Oe=n(il,"DIV",{class:!0});var zt=s(Oe);m(Ey.$$.fragment,zt),xRo=i(zt),Sse=n(zt,"P",{});var xYr=s(Sse);kRo=r(xYr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xYr.forEach(t),RRo=i(zt),Ua=n(zt,"P",{});var D4=s(Ua);SRo=r(D4,"The model class to instantiate is selected based on the "),Pse=n(D4,"CODE",{});var kYr=s(Pse);PRo=r(kYr,"model_type"),kYr.forEach(t),$Ro=r(D4,` property of the config object (either
passed as an argument or loaded from `),$se=n(D4,"CODE",{});var RYr=s($se);IRo=r(RYr,"pretrained_model_name_or_path"),RYr.forEach(t),DRo=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ise=n(D4,"CODE",{});var SYr=s(Ise);jRo=r(SYr,"pretrained_model_name_or_path"),SYr.forEach(t),NRo=r(D4,":"),D4.forEach(t),qRo=i(zt),Dse=n(zt,"UL",{});var PYr=s(Dse);x5=n(PYr,"LI",{});var bwe=s(x5);jse=n(bwe,"STRONG",{});var $Yr=s(jse);GRo=r($Yr,"tapas"),$Yr.forEach(t),ORo=r(bwe," \u2014 "),Aj=n(bwe,"A",{href:!0});var IYr=s(Aj);XRo=r(IYr,"TapasForQuestionAnswering"),IYr.forEach(t),VRo=r(bwe," (TAPAS model)"),bwe.forEach(t),PYr.forEach(t),zRo=i(zt),k5=n(zt,"P",{});var vwe=s(k5);WRo=r(vwe,"The model is set in evaluation mode by default using "),Nse=n(vwe,"CODE",{});var DYr=s(Nse);QRo=r(DYr,"model.eval()"),DYr.forEach(t),HRo=r(vwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=n(vwe,"CODE",{});var jYr=s(qse);URo=r(jYr,"model.train()"),jYr.forEach(t),vwe.forEach(t),JRo=i(zt),Gse=n(zt,"P",{});var NYr=s(Gse);YRo=r(NYr,"Examples:"),NYr.forEach(t),KRo=i(zt),m(yy.$$.fragment,zt),zt.forEach(t),il.forEach(t),fBe=i(c),Cd=n(c,"H2",{class:!0});var bke=s(Cd);R5=n(bke,"A",{id:!0,class:!0,href:!0});var qYr=s(R5);Ose=n(qYr,"SPAN",{});var GYr=s(Ose);m(wy.$$.fragment,GYr),GYr.forEach(t),qYr.forEach(t),ZRo=i(bke),Xse=n(bke,"SPAN",{});var OYr=s(Xse);eSo=r(OYr,"AutoModelForImageClassification"),OYr.forEach(t),bke.forEach(t),mBe=i(c),ar=n(c,"DIV",{class:!0});var cl=s(ar);m(Ay.$$.fragment,cl),oSo=i(cl),Md=n(cl,"P",{});var nz=s(Md);rSo=r(nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vse=n(nz,"CODE",{});var XYr=s(Vse);tSo=r(XYr,"from_pretrained()"),XYr.forEach(t),aSo=r(nz,"class method or the "),zse=n(nz,"CODE",{});var VYr=s(zse);nSo=r(VYr,"from_config()"),VYr.forEach(t),sSo=r(nz,`class
method.`),nz.forEach(t),lSo=i(cl),Ly=n(cl,"P",{});var vke=s(Ly);iSo=r(vke,"This class cannot be instantiated directly using "),Wse=n(vke,"CODE",{});var zYr=s(Wse);dSo=r(zYr,"__init__()"),zYr.forEach(t),cSo=r(vke," (throws an error)."),vke.forEach(t),fSo=i(cl),Yr=n(cl,"DIV",{class:!0});var fl=s(Yr);m(By.$$.fragment,fl),mSo=i(fl),Qse=n(fl,"P",{});var WYr=s(Qse);gSo=r(WYr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),WYr.forEach(t),hSo=i(fl),Ed=n(fl,"P",{});var sz=s(Ed);pSo=r(sz,`Note:
Loading a model from its configuration file does `),Hse=n(sz,"STRONG",{});var QYr=s(Hse);_So=r(QYr,"not"),QYr.forEach(t),uSo=r(sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=n(sz,"CODE",{});var HYr=s(Use);bSo=r(HYr,"from_pretrained()"),HYr.forEach(t),vSo=r(sz,"to load the model weights."),sz.forEach(t),TSo=i(fl),Jse=n(fl,"P",{});var UYr=s(Jse);FSo=r(UYr,"Examples:"),UYr.forEach(t),CSo=i(fl),m(xy.$$.fragment,fl),fl.forEach(t),MSo=i(cl),Xe=n(cl,"DIV",{class:!0});var Wt=s(Xe);m(ky.$$.fragment,Wt),ESo=i(Wt),Yse=n(Wt,"P",{});var JYr=s(Yse);ySo=r(JYr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JYr.forEach(t),wSo=i(Wt),Ja=n(Wt,"P",{});var j4=s(Ja);ASo=r(j4,"The model class to instantiate is selected based on the "),Kse=n(j4,"CODE",{});var YYr=s(Kse);LSo=r(YYr,"model_type"),YYr.forEach(t),BSo=r(j4,` property of the config object (either
passed as an argument or loaded from `),Zse=n(j4,"CODE",{});var KYr=s(Zse);xSo=r(KYr,"pretrained_model_name_or_path"),KYr.forEach(t),kSo=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=n(j4,"CODE",{});var ZYr=s(ele);RSo=r(ZYr,"pretrained_model_name_or_path"),ZYr.forEach(t),SSo=r(j4,":"),j4.forEach(t),PSo=i(Wt),be=n(Wt,"UL",{});var eo=s(be);S5=n(eo,"LI",{});var Twe=s(S5);ole=n(Twe,"STRONG",{});var eKr=s(ole);$So=r(eKr,"beit"),eKr.forEach(t),ISo=r(Twe," \u2014 "),Lj=n(Twe,"A",{href:!0});var oKr=s(Lj);DSo=r(oKr,"BeitForImageClassification"),oKr.forEach(t),jSo=r(Twe," (BEiT model)"),Twe.forEach(t),NSo=i(eo),P5=n(eo,"LI",{});var Fwe=s(P5);rle=n(Fwe,"STRONG",{});var rKr=s(rle);qSo=r(rKr,"convnext"),rKr.forEach(t),GSo=r(Fwe," \u2014 "),Bj=n(Fwe,"A",{href:!0});var tKr=s(Bj);OSo=r(tKr,"ConvNextForImageClassification"),tKr.forEach(t),XSo=r(Fwe," (ConvNext model)"),Fwe.forEach(t),VSo=i(eo),$s=n(eo,"LI",{});var l8=s($s);tle=n(l8,"STRONG",{});var aKr=s(tle);zSo=r(aKr,"deit"),aKr.forEach(t),WSo=r(l8," \u2014 "),xj=n(l8,"A",{href:!0});var nKr=s(xj);QSo=r(nKr,"DeiTForImageClassification"),nKr.forEach(t),HSo=r(l8," or "),kj=n(l8,"A",{href:!0});var sKr=s(kj);USo=r(sKr,"DeiTForImageClassificationWithTeacher"),sKr.forEach(t),JSo=r(l8," (DeiT model)"),l8.forEach(t),YSo=i(eo),$5=n(eo,"LI",{});var Cwe=s($5);ale=n(Cwe,"STRONG",{});var lKr=s(ale);KSo=r(lKr,"imagegpt"),lKr.forEach(t),ZSo=r(Cwe," \u2014 "),Rj=n(Cwe,"A",{href:!0});var iKr=s(Rj);ePo=r(iKr,"ImageGPTForImageClassification"),iKr.forEach(t),oPo=r(Cwe," (ImageGPT model)"),Cwe.forEach(t),rPo=i(eo),la=n(eo,"LI",{});var Ef=s(la);nle=n(Ef,"STRONG",{});var dKr=s(nle);tPo=r(dKr,"perceiver"),dKr.forEach(t),aPo=r(Ef," \u2014 "),Sj=n(Ef,"A",{href:!0});var cKr=s(Sj);nPo=r(cKr,"PerceiverForImageClassificationLearned"),cKr.forEach(t),sPo=r(Ef," or "),Pj=n(Ef,"A",{href:!0});var fKr=s(Pj);lPo=r(fKr,"PerceiverForImageClassificationFourier"),fKr.forEach(t),iPo=r(Ef," or "),$j=n(Ef,"A",{href:!0});var mKr=s($j);dPo=r(mKr,"PerceiverForImageClassificationConvProcessing"),mKr.forEach(t),cPo=r(Ef," (Perceiver model)"),Ef.forEach(t),fPo=i(eo),I5=n(eo,"LI",{});var Mwe=s(I5);sle=n(Mwe,"STRONG",{});var gKr=s(sle);mPo=r(gKr,"poolformer"),gKr.forEach(t),gPo=r(Mwe," \u2014 "),Ij=n(Mwe,"A",{href:!0});var hKr=s(Ij);hPo=r(hKr,"PoolFormerForImageClassification"),hKr.forEach(t),pPo=r(Mwe," (PoolFormer model)"),Mwe.forEach(t),_Po=i(eo),D5=n(eo,"LI",{});var Ewe=s(D5);lle=n(Ewe,"STRONG",{});var pKr=s(lle);uPo=r(pKr,"segformer"),pKr.forEach(t),bPo=r(Ewe," \u2014 "),Dj=n(Ewe,"A",{href:!0});var _Kr=s(Dj);vPo=r(_Kr,"SegformerForImageClassification"),_Kr.forEach(t),TPo=r(Ewe," (SegFormer model)"),Ewe.forEach(t),FPo=i(eo),j5=n(eo,"LI",{});var ywe=s(j5);ile=n(ywe,"STRONG",{});var uKr=s(ile);CPo=r(uKr,"swin"),uKr.forEach(t),MPo=r(ywe," \u2014 "),jj=n(ywe,"A",{href:!0});var bKr=s(jj);EPo=r(bKr,"SwinForImageClassification"),bKr.forEach(t),yPo=r(ywe," (Swin model)"),ywe.forEach(t),wPo=i(eo),N5=n(eo,"LI",{});var wwe=s(N5);dle=n(wwe,"STRONG",{});var vKr=s(dle);APo=r(vKr,"vit"),vKr.forEach(t),LPo=r(wwe," \u2014 "),Nj=n(wwe,"A",{href:!0});var TKr=s(Nj);BPo=r(TKr,"ViTForImageClassification"),TKr.forEach(t),xPo=r(wwe," (ViT model)"),wwe.forEach(t),eo.forEach(t),kPo=i(Wt),q5=n(Wt,"P",{});var Awe=s(q5);RPo=r(Awe,"The model is set in evaluation mode by default using "),cle=n(Awe,"CODE",{});var FKr=s(cle);SPo=r(FKr,"model.eval()"),FKr.forEach(t),PPo=r(Awe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fle=n(Awe,"CODE",{});var CKr=s(fle);$Po=r(CKr,"model.train()"),CKr.forEach(t),Awe.forEach(t),IPo=i(Wt),mle=n(Wt,"P",{});var MKr=s(mle);DPo=r(MKr,"Examples:"),MKr.forEach(t),jPo=i(Wt),m(Ry.$$.fragment,Wt),Wt.forEach(t),cl.forEach(t),gBe=i(c),yd=n(c,"H2",{class:!0});var Tke=s(yd);G5=n(Tke,"A",{id:!0,class:!0,href:!0});var EKr=s(G5);gle=n(EKr,"SPAN",{});var yKr=s(gle);m(Sy.$$.fragment,yKr),yKr.forEach(t),EKr.forEach(t),NPo=i(Tke),hle=n(Tke,"SPAN",{});var wKr=s(hle);qPo=r(wKr,"AutoModelForVision2Seq"),wKr.forEach(t),Tke.forEach(t),hBe=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);m(Py.$$.fragment,ml),GPo=i(ml),wd=n(ml,"P",{});var lz=s(wd);OPo=r(lz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ple=n(lz,"CODE",{});var AKr=s(ple);XPo=r(AKr,"from_pretrained()"),AKr.forEach(t),VPo=r(lz,"class method or the "),_le=n(lz,"CODE",{});var LKr=s(_le);zPo=r(LKr,"from_config()"),LKr.forEach(t),WPo=r(lz,`class
method.`),lz.forEach(t),QPo=i(ml),$y=n(ml,"P",{});var Fke=s($y);HPo=r(Fke,"This class cannot be instantiated directly using "),ule=n(Fke,"CODE",{});var BKr=s(ule);UPo=r(BKr,"__init__()"),BKr.forEach(t),JPo=r(Fke," (throws an error)."),Fke.forEach(t),YPo=i(ml),Kr=n(ml,"DIV",{class:!0});var gl=s(Kr);m(Iy.$$.fragment,gl),KPo=i(gl),ble=n(gl,"P",{});var xKr=s(ble);ZPo=r(xKr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xKr.forEach(t),e$o=i(gl),Ad=n(gl,"P",{});var iz=s(Ad);o$o=r(iz,`Note:
Loading a model from its configuration file does `),vle=n(iz,"STRONG",{});var kKr=s(vle);r$o=r(kKr,"not"),kKr.forEach(t),t$o=r(iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tle=n(iz,"CODE",{});var RKr=s(Tle);a$o=r(RKr,"from_pretrained()"),RKr.forEach(t),n$o=r(iz,"to load the model weights."),iz.forEach(t),s$o=i(gl),Fle=n(gl,"P",{});var SKr=s(Fle);l$o=r(SKr,"Examples:"),SKr.forEach(t),i$o=i(gl),m(Dy.$$.fragment,gl),gl.forEach(t),d$o=i(ml),Ve=n(ml,"DIV",{class:!0});var Qt=s(Ve);m(jy.$$.fragment,Qt),c$o=i(Qt),Cle=n(Qt,"P",{});var PKr=s(Cle);f$o=r(PKr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PKr.forEach(t),m$o=i(Qt),Ya=n(Qt,"P",{});var N4=s(Ya);g$o=r(N4,"The model class to instantiate is selected based on the "),Mle=n(N4,"CODE",{});var $Kr=s(Mle);h$o=r($Kr,"model_type"),$Kr.forEach(t),p$o=r(N4,` property of the config object (either
passed as an argument or loaded from `),Ele=n(N4,"CODE",{});var IKr=s(Ele);_$o=r(IKr,"pretrained_model_name_or_path"),IKr.forEach(t),u$o=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=n(N4,"CODE",{});var DKr=s(yle);b$o=r(DKr,"pretrained_model_name_or_path"),DKr.forEach(t),v$o=r(N4,":"),N4.forEach(t),T$o=i(Qt),wle=n(Qt,"UL",{});var jKr=s(wle);O5=n(jKr,"LI",{});var Lwe=s(O5);Ale=n(Lwe,"STRONG",{});var NKr=s(Ale);F$o=r(NKr,"vision-encoder-decoder"),NKr.forEach(t),C$o=r(Lwe," \u2014 "),qj=n(Lwe,"A",{href:!0});var qKr=s(qj);M$o=r(qKr,"VisionEncoderDecoderModel"),qKr.forEach(t),E$o=r(Lwe," (Vision Encoder decoder model)"),Lwe.forEach(t),jKr.forEach(t),y$o=i(Qt),X5=n(Qt,"P",{});var Bwe=s(X5);w$o=r(Bwe,"The model is set in evaluation mode by default using "),Lle=n(Bwe,"CODE",{});var GKr=s(Lle);A$o=r(GKr,"model.eval()"),GKr.forEach(t),L$o=r(Bwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=n(Bwe,"CODE",{});var OKr=s(Ble);B$o=r(OKr,"model.train()"),OKr.forEach(t),Bwe.forEach(t),x$o=i(Qt),xle=n(Qt,"P",{});var XKr=s(xle);k$o=r(XKr,"Examples:"),XKr.forEach(t),R$o=i(Qt),m(Ny.$$.fragment,Qt),Qt.forEach(t),ml.forEach(t),pBe=i(c),Ld=n(c,"H2",{class:!0});var Cke=s(Ld);V5=n(Cke,"A",{id:!0,class:!0,href:!0});var VKr=s(V5);kle=n(VKr,"SPAN",{});var zKr=s(kle);m(qy.$$.fragment,zKr),zKr.forEach(t),VKr.forEach(t),S$o=i(Cke),Rle=n(Cke,"SPAN",{});var WKr=s(Rle);P$o=r(WKr,"AutoModelForAudioClassification"),WKr.forEach(t),Cke.forEach(t),_Be=i(c),sr=n(c,"DIV",{class:!0});var hl=s(sr);m(Gy.$$.fragment,hl),$$o=i(hl),Bd=n(hl,"P",{});var dz=s(Bd);I$o=r(dz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Sle=n(dz,"CODE",{});var QKr=s(Sle);D$o=r(QKr,"from_pretrained()"),QKr.forEach(t),j$o=r(dz,"class method or the "),Ple=n(dz,"CODE",{});var HKr=s(Ple);N$o=r(HKr,"from_config()"),HKr.forEach(t),q$o=r(dz,`class
method.`),dz.forEach(t),G$o=i(hl),Oy=n(hl,"P",{});var Mke=s(Oy);O$o=r(Mke,"This class cannot be instantiated directly using "),$le=n(Mke,"CODE",{});var UKr=s($le);X$o=r(UKr,"__init__()"),UKr.forEach(t),V$o=r(Mke," (throws an error)."),Mke.forEach(t),z$o=i(hl),Zr=n(hl,"DIV",{class:!0});var pl=s(Zr);m(Xy.$$.fragment,pl),W$o=i(pl),Ile=n(pl,"P",{});var JKr=s(Ile);Q$o=r(JKr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),JKr.forEach(t),H$o=i(pl),xd=n(pl,"P",{});var cz=s(xd);U$o=r(cz,`Note:
Loading a model from its configuration file does `),Dle=n(cz,"STRONG",{});var YKr=s(Dle);J$o=r(YKr,"not"),YKr.forEach(t),Y$o=r(cz,` load the model weights. It only affects the
model\u2019s configuration. Use `),jle=n(cz,"CODE",{});var KKr=s(jle);K$o=r(KKr,"from_pretrained()"),KKr.forEach(t),Z$o=r(cz,"to load the model weights."),cz.forEach(t),eIo=i(pl),Nle=n(pl,"P",{});var ZKr=s(Nle);oIo=r(ZKr,"Examples:"),ZKr.forEach(t),rIo=i(pl),m(Vy.$$.fragment,pl),pl.forEach(t),tIo=i(hl),ze=n(hl,"DIV",{class:!0});var Ht=s(ze);m(zy.$$.fragment,Ht),aIo=i(Ht),qle=n(Ht,"P",{});var eZr=s(qle);nIo=r(eZr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),eZr.forEach(t),sIo=i(Ht),Ka=n(Ht,"P",{});var q4=s(Ka);lIo=r(q4,"The model class to instantiate is selected based on the "),Gle=n(q4,"CODE",{});var oZr=s(Gle);iIo=r(oZr,"model_type"),oZr.forEach(t),dIo=r(q4,` property of the config object (either
passed as an argument or loaded from `),Ole=n(q4,"CODE",{});var rZr=s(Ole);cIo=r(rZr,"pretrained_model_name_or_path"),rZr.forEach(t),fIo=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=n(q4,"CODE",{});var tZr=s(Xle);mIo=r(tZr,"pretrained_model_name_or_path"),tZr.forEach(t),gIo=r(q4,":"),q4.forEach(t),hIo=i(Ht),Ae=n(Ht,"UL",{});var No=s(Ae);z5=n(No,"LI",{});var xwe=s(z5);Vle=n(xwe,"STRONG",{});var aZr=s(Vle);pIo=r(aZr,"data2vec-audio"),aZr.forEach(t),_Io=r(xwe," \u2014 "),Gj=n(xwe,"A",{href:!0});var nZr=s(Gj);uIo=r(nZr,"Data2VecAudioForSequenceClassification"),nZr.forEach(t),bIo=r(xwe," (Data2VecAudio model)"),xwe.forEach(t),vIo=i(No),W5=n(No,"LI",{});var kwe=s(W5);zle=n(kwe,"STRONG",{});var sZr=s(zle);TIo=r(sZr,"hubert"),sZr.forEach(t),FIo=r(kwe," \u2014 "),Oj=n(kwe,"A",{href:!0});var lZr=s(Oj);CIo=r(lZr,"HubertForSequenceClassification"),lZr.forEach(t),MIo=r(kwe," (Hubert model)"),kwe.forEach(t),EIo=i(No),Q5=n(No,"LI",{});var Rwe=s(Q5);Wle=n(Rwe,"STRONG",{});var iZr=s(Wle);yIo=r(iZr,"sew"),iZr.forEach(t),wIo=r(Rwe," \u2014 "),Xj=n(Rwe,"A",{href:!0});var dZr=s(Xj);AIo=r(dZr,"SEWForSequenceClassification"),dZr.forEach(t),LIo=r(Rwe," (SEW model)"),Rwe.forEach(t),BIo=i(No),H5=n(No,"LI",{});var Swe=s(H5);Qle=n(Swe,"STRONG",{});var cZr=s(Qle);xIo=r(cZr,"sew-d"),cZr.forEach(t),kIo=r(Swe," \u2014 "),Vj=n(Swe,"A",{href:!0});var fZr=s(Vj);RIo=r(fZr,"SEWDForSequenceClassification"),fZr.forEach(t),SIo=r(Swe," (SEW-D model)"),Swe.forEach(t),PIo=i(No),U5=n(No,"LI",{});var Pwe=s(U5);Hle=n(Pwe,"STRONG",{});var mZr=s(Hle);$Io=r(mZr,"unispeech"),mZr.forEach(t),IIo=r(Pwe," \u2014 "),zj=n(Pwe,"A",{href:!0});var gZr=s(zj);DIo=r(gZr,"UniSpeechForSequenceClassification"),gZr.forEach(t),jIo=r(Pwe," (UniSpeech model)"),Pwe.forEach(t),NIo=i(No),J5=n(No,"LI",{});var $we=s(J5);Ule=n($we,"STRONG",{});var hZr=s(Ule);qIo=r(hZr,"unispeech-sat"),hZr.forEach(t),GIo=r($we," \u2014 "),Wj=n($we,"A",{href:!0});var pZr=s(Wj);OIo=r(pZr,"UniSpeechSatForSequenceClassification"),pZr.forEach(t),XIo=r($we," (UniSpeechSat model)"),$we.forEach(t),VIo=i(No),Y5=n(No,"LI",{});var Iwe=s(Y5);Jle=n(Iwe,"STRONG",{});var _Zr=s(Jle);zIo=r(_Zr,"wav2vec2"),_Zr.forEach(t),WIo=r(Iwe," \u2014 "),Qj=n(Iwe,"A",{href:!0});var uZr=s(Qj);QIo=r(uZr,"Wav2Vec2ForSequenceClassification"),uZr.forEach(t),HIo=r(Iwe," (Wav2Vec2 model)"),Iwe.forEach(t),UIo=i(No),K5=n(No,"LI",{});var Dwe=s(K5);Yle=n(Dwe,"STRONG",{});var bZr=s(Yle);JIo=r(bZr,"wavlm"),bZr.forEach(t),YIo=r(Dwe," \u2014 "),Hj=n(Dwe,"A",{href:!0});var vZr=s(Hj);KIo=r(vZr,"WavLMForSequenceClassification"),vZr.forEach(t),ZIo=r(Dwe," (WavLM model)"),Dwe.forEach(t),No.forEach(t),eDo=i(Ht),Z5=n(Ht,"P",{});var jwe=s(Z5);oDo=r(jwe,"The model is set in evaluation mode by default using "),Kle=n(jwe,"CODE",{});var TZr=s(Kle);rDo=r(TZr,"model.eval()"),TZr.forEach(t),tDo=r(jwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zle=n(jwe,"CODE",{});var FZr=s(Zle);aDo=r(FZr,"model.train()"),FZr.forEach(t),jwe.forEach(t),nDo=i(Ht),eie=n(Ht,"P",{});var CZr=s(eie);sDo=r(CZr,"Examples:"),CZr.forEach(t),lDo=i(Ht),m(Wy.$$.fragment,Ht),Ht.forEach(t),hl.forEach(t),uBe=i(c),kd=n(c,"H2",{class:!0});var Eke=s(kd);e2=n(Eke,"A",{id:!0,class:!0,href:!0});var MZr=s(e2);oie=n(MZr,"SPAN",{});var EZr=s(oie);m(Qy.$$.fragment,EZr),EZr.forEach(t),MZr.forEach(t),iDo=i(Eke),rie=n(Eke,"SPAN",{});var yZr=s(rie);dDo=r(yZr,"AutoModelForAudioFrameClassification"),yZr.forEach(t),Eke.forEach(t),bBe=i(c),lr=n(c,"DIV",{class:!0});var _l=s(lr);m(Hy.$$.fragment,_l),cDo=i(_l),Rd=n(_l,"P",{});var fz=s(Rd);fDo=r(fz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),tie=n(fz,"CODE",{});var wZr=s(tie);mDo=r(wZr,"from_pretrained()"),wZr.forEach(t),gDo=r(fz,"class method or the "),aie=n(fz,"CODE",{});var AZr=s(aie);hDo=r(AZr,"from_config()"),AZr.forEach(t),pDo=r(fz,`class
method.`),fz.forEach(t),_Do=i(_l),Uy=n(_l,"P",{});var yke=s(Uy);uDo=r(yke,"This class cannot be instantiated directly using "),nie=n(yke,"CODE",{});var LZr=s(nie);bDo=r(LZr,"__init__()"),LZr.forEach(t),vDo=r(yke," (throws an error)."),yke.forEach(t),TDo=i(_l),et=n(_l,"DIV",{class:!0});var ul=s(et);m(Jy.$$.fragment,ul),FDo=i(ul),sie=n(ul,"P",{});var BZr=s(sie);CDo=r(BZr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),BZr.forEach(t),MDo=i(ul),Sd=n(ul,"P",{});var mz=s(Sd);EDo=r(mz,`Note:
Loading a model from its configuration file does `),lie=n(mz,"STRONG",{});var xZr=s(lie);yDo=r(xZr,"not"),xZr.forEach(t),wDo=r(mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),iie=n(mz,"CODE",{});var kZr=s(iie);ADo=r(kZr,"from_pretrained()"),kZr.forEach(t),LDo=r(mz,"to load the model weights."),mz.forEach(t),BDo=i(ul),die=n(ul,"P",{});var RZr=s(die);xDo=r(RZr,"Examples:"),RZr.forEach(t),kDo=i(ul),m(Yy.$$.fragment,ul),ul.forEach(t),RDo=i(_l),We=n(_l,"DIV",{class:!0});var Ut=s(We);m(Ky.$$.fragment,Ut),SDo=i(Ut),cie=n(Ut,"P",{});var SZr=s(cie);PDo=r(SZr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),SZr.forEach(t),$Do=i(Ut),Za=n(Ut,"P",{});var G4=s(Za);IDo=r(G4,"The model class to instantiate is selected based on the "),fie=n(G4,"CODE",{});var PZr=s(fie);DDo=r(PZr,"model_type"),PZr.forEach(t),jDo=r(G4,` property of the config object (either
passed as an argument or loaded from `),mie=n(G4,"CODE",{});var $Zr=s(mie);NDo=r($Zr,"pretrained_model_name_or_path"),$Zr.forEach(t),qDo=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gie=n(G4,"CODE",{});var IZr=s(gie);GDo=r(IZr,"pretrained_model_name_or_path"),IZr.forEach(t),ODo=r(G4,":"),G4.forEach(t),XDo=i(Ut),en=n(Ut,"UL",{});var O4=s(en);o2=n(O4,"LI",{});var Nwe=s(o2);hie=n(Nwe,"STRONG",{});var DZr=s(hie);VDo=r(DZr,"data2vec-audio"),DZr.forEach(t),zDo=r(Nwe," \u2014 "),Uj=n(Nwe,"A",{href:!0});var jZr=s(Uj);WDo=r(jZr,"Data2VecAudioForAudioFrameClassification"),jZr.forEach(t),QDo=r(Nwe," (Data2VecAudio model)"),Nwe.forEach(t),HDo=i(O4),r2=n(O4,"LI",{});var qwe=s(r2);pie=n(qwe,"STRONG",{});var NZr=s(pie);UDo=r(NZr,"unispeech-sat"),NZr.forEach(t),JDo=r(qwe," \u2014 "),Jj=n(qwe,"A",{href:!0});var qZr=s(Jj);YDo=r(qZr,"UniSpeechSatForAudioFrameClassification"),qZr.forEach(t),KDo=r(qwe," (UniSpeechSat model)"),qwe.forEach(t),ZDo=i(O4),t2=n(O4,"LI",{});var Gwe=s(t2);_ie=n(Gwe,"STRONG",{});var GZr=s(_ie);ejo=r(GZr,"wav2vec2"),GZr.forEach(t),ojo=r(Gwe," \u2014 "),Yj=n(Gwe,"A",{href:!0});var OZr=s(Yj);rjo=r(OZr,"Wav2Vec2ForAudioFrameClassification"),OZr.forEach(t),tjo=r(Gwe," (Wav2Vec2 model)"),Gwe.forEach(t),ajo=i(O4),a2=n(O4,"LI",{});var Owe=s(a2);uie=n(Owe,"STRONG",{});var XZr=s(uie);njo=r(XZr,"wavlm"),XZr.forEach(t),sjo=r(Owe," \u2014 "),Kj=n(Owe,"A",{href:!0});var VZr=s(Kj);ljo=r(VZr,"WavLMForAudioFrameClassification"),VZr.forEach(t),ijo=r(Owe," (WavLM model)"),Owe.forEach(t),O4.forEach(t),djo=i(Ut),n2=n(Ut,"P",{});var Xwe=s(n2);cjo=r(Xwe,"The model is set in evaluation mode by default using "),bie=n(Xwe,"CODE",{});var zZr=s(bie);fjo=r(zZr,"model.eval()"),zZr.forEach(t),mjo=r(Xwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vie=n(Xwe,"CODE",{});var WZr=s(vie);gjo=r(WZr,"model.train()"),WZr.forEach(t),Xwe.forEach(t),hjo=i(Ut),Tie=n(Ut,"P",{});var QZr=s(Tie);pjo=r(QZr,"Examples:"),QZr.forEach(t),_jo=i(Ut),m(Zy.$$.fragment,Ut),Ut.forEach(t),_l.forEach(t),vBe=i(c),Pd=n(c,"H2",{class:!0});var wke=s(Pd);s2=n(wke,"A",{id:!0,class:!0,href:!0});var HZr=s(s2);Fie=n(HZr,"SPAN",{});var UZr=s(Fie);m(ew.$$.fragment,UZr),UZr.forEach(t),HZr.forEach(t),ujo=i(wke),Cie=n(wke,"SPAN",{});var JZr=s(Cie);bjo=r(JZr,"AutoModelForCTC"),JZr.forEach(t),wke.forEach(t),TBe=i(c),ir=n(c,"DIV",{class:!0});var bl=s(ir);m(ow.$$.fragment,bl),vjo=i(bl),$d=n(bl,"P",{});var gz=s($d);Tjo=r(gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Mie=n(gz,"CODE",{});var YZr=s(Mie);Fjo=r(YZr,"from_pretrained()"),YZr.forEach(t),Cjo=r(gz,"class method or the "),Eie=n(gz,"CODE",{});var KZr=s(Eie);Mjo=r(KZr,"from_config()"),KZr.forEach(t),Ejo=r(gz,`class
method.`),gz.forEach(t),yjo=i(bl),rw=n(bl,"P",{});var Ake=s(rw);wjo=r(Ake,"This class cannot be instantiated directly using "),yie=n(Ake,"CODE",{});var ZZr=s(yie);Ajo=r(ZZr,"__init__()"),ZZr.forEach(t),Ljo=r(Ake," (throws an error)."),Ake.forEach(t),Bjo=i(bl),ot=n(bl,"DIV",{class:!0});var vl=s(ot);m(tw.$$.fragment,vl),xjo=i(vl),wie=n(vl,"P",{});var eet=s(wie);kjo=r(eet,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),eet.forEach(t),Rjo=i(vl),Id=n(vl,"P",{});var hz=s(Id);Sjo=r(hz,`Note:
Loading a model from its configuration file does `),Aie=n(hz,"STRONG",{});var oet=s(Aie);Pjo=r(oet,"not"),oet.forEach(t),$jo=r(hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lie=n(hz,"CODE",{});var ret=s(Lie);Ijo=r(ret,"from_pretrained()"),ret.forEach(t),Djo=r(hz,"to load the model weights."),hz.forEach(t),jjo=i(vl),Bie=n(vl,"P",{});var tet=s(Bie);Njo=r(tet,"Examples:"),tet.forEach(t),qjo=i(vl),m(aw.$$.fragment,vl),vl.forEach(t),Gjo=i(bl),Qe=n(bl,"DIV",{class:!0});var Jt=s(Qe);m(nw.$$.fragment,Jt),Ojo=i(Jt),xie=n(Jt,"P",{});var aet=s(xie);Xjo=r(aet,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),aet.forEach(t),Vjo=i(Jt),on=n(Jt,"P",{});var X4=s(on);zjo=r(X4,"The model class to instantiate is selected based on the "),kie=n(X4,"CODE",{});var net=s(kie);Wjo=r(net,"model_type"),net.forEach(t),Qjo=r(X4,` property of the config object (either
passed as an argument or loaded from `),Rie=n(X4,"CODE",{});var set=s(Rie);Hjo=r(set,"pretrained_model_name_or_path"),set.forEach(t),Ujo=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sie=n(X4,"CODE",{});var iet=s(Sie);Jjo=r(iet,"pretrained_model_name_or_path"),iet.forEach(t),Yjo=r(X4,":"),X4.forEach(t),Kjo=i(Jt),Le=n(Jt,"UL",{});var qo=s(Le);l2=n(qo,"LI",{});var Vwe=s(l2);Pie=n(Vwe,"STRONG",{});var det=s(Pie);Zjo=r(det,"data2vec-audio"),det.forEach(t),eNo=r(Vwe," \u2014 "),Zj=n(Vwe,"A",{href:!0});var cet=s(Zj);oNo=r(cet,"Data2VecAudioForCTC"),cet.forEach(t),rNo=r(Vwe," (Data2VecAudio model)"),Vwe.forEach(t),tNo=i(qo),i2=n(qo,"LI",{});var zwe=s(i2);$ie=n(zwe,"STRONG",{});var fet=s($ie);aNo=r(fet,"hubert"),fet.forEach(t),nNo=r(zwe," \u2014 "),eN=n(zwe,"A",{href:!0});var met=s(eN);sNo=r(met,"HubertForCTC"),met.forEach(t),lNo=r(zwe," (Hubert model)"),zwe.forEach(t),iNo=i(qo),d2=n(qo,"LI",{});var Wwe=s(d2);Iie=n(Wwe,"STRONG",{});var get=s(Iie);dNo=r(get,"sew"),get.forEach(t),cNo=r(Wwe," \u2014 "),oN=n(Wwe,"A",{href:!0});var het=s(oN);fNo=r(het,"SEWForCTC"),het.forEach(t),mNo=r(Wwe," (SEW model)"),Wwe.forEach(t),gNo=i(qo),c2=n(qo,"LI",{});var Qwe=s(c2);Die=n(Qwe,"STRONG",{});var pet=s(Die);hNo=r(pet,"sew-d"),pet.forEach(t),pNo=r(Qwe," \u2014 "),rN=n(Qwe,"A",{href:!0});var _et=s(rN);_No=r(_et,"SEWDForCTC"),_et.forEach(t),uNo=r(Qwe," (SEW-D model)"),Qwe.forEach(t),bNo=i(qo),f2=n(qo,"LI",{});var Hwe=s(f2);jie=n(Hwe,"STRONG",{});var uet=s(jie);vNo=r(uet,"unispeech"),uet.forEach(t),TNo=r(Hwe," \u2014 "),tN=n(Hwe,"A",{href:!0});var bet=s(tN);FNo=r(bet,"UniSpeechForCTC"),bet.forEach(t),CNo=r(Hwe," (UniSpeech model)"),Hwe.forEach(t),MNo=i(qo),m2=n(qo,"LI",{});var Uwe=s(m2);Nie=n(Uwe,"STRONG",{});var vet=s(Nie);ENo=r(vet,"unispeech-sat"),vet.forEach(t),yNo=r(Uwe," \u2014 "),aN=n(Uwe,"A",{href:!0});var Tet=s(aN);wNo=r(Tet,"UniSpeechSatForCTC"),Tet.forEach(t),ANo=r(Uwe," (UniSpeechSat model)"),Uwe.forEach(t),LNo=i(qo),g2=n(qo,"LI",{});var Jwe=s(g2);qie=n(Jwe,"STRONG",{});var Fet=s(qie);BNo=r(Fet,"wav2vec2"),Fet.forEach(t),xNo=r(Jwe," \u2014 "),nN=n(Jwe,"A",{href:!0});var Cet=s(nN);kNo=r(Cet,"Wav2Vec2ForCTC"),Cet.forEach(t),RNo=r(Jwe," (Wav2Vec2 model)"),Jwe.forEach(t),SNo=i(qo),h2=n(qo,"LI",{});var Ywe=s(h2);Gie=n(Ywe,"STRONG",{});var Met=s(Gie);PNo=r(Met,"wavlm"),Met.forEach(t),$No=r(Ywe," \u2014 "),sN=n(Ywe,"A",{href:!0});var Eet=s(sN);INo=r(Eet,"WavLMForCTC"),Eet.forEach(t),DNo=r(Ywe," (WavLM model)"),Ywe.forEach(t),qo.forEach(t),jNo=i(Jt),p2=n(Jt,"P",{});var Kwe=s(p2);NNo=r(Kwe,"The model is set in evaluation mode by default using "),Oie=n(Kwe,"CODE",{});var yet=s(Oie);qNo=r(yet,"model.eval()"),yet.forEach(t),GNo=r(Kwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xie=n(Kwe,"CODE",{});var wet=s(Xie);ONo=r(wet,"model.train()"),wet.forEach(t),Kwe.forEach(t),XNo=i(Jt),Vie=n(Jt,"P",{});var Aet=s(Vie);VNo=r(Aet,"Examples:"),Aet.forEach(t),zNo=i(Jt),m(sw.$$.fragment,Jt),Jt.forEach(t),bl.forEach(t),FBe=i(c),Dd=n(c,"H2",{class:!0});var Lke=s(Dd);_2=n(Lke,"A",{id:!0,class:!0,href:!0});var Let=s(_2);zie=n(Let,"SPAN",{});var Bet=s(zie);m(lw.$$.fragment,Bet),Bet.forEach(t),Let.forEach(t),WNo=i(Lke),Wie=n(Lke,"SPAN",{});var xet=s(Wie);QNo=r(xet,"AutoModelForSpeechSeq2Seq"),xet.forEach(t),Lke.forEach(t),CBe=i(c),dr=n(c,"DIV",{class:!0});var Tl=s(dr);m(iw.$$.fragment,Tl),HNo=i(Tl),jd=n(Tl,"P",{});var pz=s(jd);UNo=r(pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Qie=n(pz,"CODE",{});var ket=s(Qie);JNo=r(ket,"from_pretrained()"),ket.forEach(t),YNo=r(pz,"class method or the "),Hie=n(pz,"CODE",{});var Ret=s(Hie);KNo=r(Ret,"from_config()"),Ret.forEach(t),ZNo=r(pz,`class
method.`),pz.forEach(t),eqo=i(Tl),dw=n(Tl,"P",{});var Bke=s(dw);oqo=r(Bke,"This class cannot be instantiated directly using "),Uie=n(Bke,"CODE",{});var Set=s(Uie);rqo=r(Set,"__init__()"),Set.forEach(t),tqo=r(Bke," (throws an error)."),Bke.forEach(t),aqo=i(Tl),rt=n(Tl,"DIV",{class:!0});var Fl=s(rt);m(cw.$$.fragment,Fl),nqo=i(Fl),Jie=n(Fl,"P",{});var Pet=s(Jie);sqo=r(Pet,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Pet.forEach(t),lqo=i(Fl),Nd=n(Fl,"P",{});var _z=s(Nd);iqo=r(_z,`Note:
Loading a model from its configuration file does `),Yie=n(_z,"STRONG",{});var $et=s(Yie);dqo=r($et,"not"),$et.forEach(t),cqo=r(_z,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kie=n(_z,"CODE",{});var Iet=s(Kie);fqo=r(Iet,"from_pretrained()"),Iet.forEach(t),mqo=r(_z,"to load the model weights."),_z.forEach(t),gqo=i(Fl),Zie=n(Fl,"P",{});var Det=s(Zie);hqo=r(Det,"Examples:"),Det.forEach(t),pqo=i(Fl),m(fw.$$.fragment,Fl),Fl.forEach(t),_qo=i(Tl),He=n(Tl,"DIV",{class:!0});var Yt=s(He);m(mw.$$.fragment,Yt),uqo=i(Yt),ede=n(Yt,"P",{});var jet=s(ede);bqo=r(jet,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jet.forEach(t),vqo=i(Yt),rn=n(Yt,"P",{});var V4=s(rn);Tqo=r(V4,"The model class to instantiate is selected based on the "),ode=n(V4,"CODE",{});var Net=s(ode);Fqo=r(Net,"model_type"),Net.forEach(t),Cqo=r(V4,` property of the config object (either
passed as an argument or loaded from `),rde=n(V4,"CODE",{});var qet=s(rde);Mqo=r(qet,"pretrained_model_name_or_path"),qet.forEach(t),Eqo=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tde=n(V4,"CODE",{});var Get=s(tde);yqo=r(Get,"pretrained_model_name_or_path"),Get.forEach(t),wqo=r(V4,":"),V4.forEach(t),Aqo=i(Yt),gw=n(Yt,"UL",{});var xke=s(gw);u2=n(xke,"LI",{});var Zwe=s(u2);ade=n(Zwe,"STRONG",{});var Oet=s(ade);Lqo=r(Oet,"speech-encoder-decoder"),Oet.forEach(t),Bqo=r(Zwe," \u2014 "),lN=n(Zwe,"A",{href:!0});var Xet=s(lN);xqo=r(Xet,"SpeechEncoderDecoderModel"),Xet.forEach(t),kqo=r(Zwe," (Speech Encoder decoder model)"),Zwe.forEach(t),Rqo=i(xke),b2=n(xke,"LI",{});var e6e=s(b2);nde=n(e6e,"STRONG",{});var Vet=s(nde);Sqo=r(Vet,"speech_to_text"),Vet.forEach(t),Pqo=r(e6e," \u2014 "),iN=n(e6e,"A",{href:!0});var zet=s(iN);$qo=r(zet,"Speech2TextForConditionalGeneration"),zet.forEach(t),Iqo=r(e6e," (Speech2Text model)"),e6e.forEach(t),xke.forEach(t),Dqo=i(Yt),v2=n(Yt,"P",{});var o6e=s(v2);jqo=r(o6e,"The model is set in evaluation mode by default using "),sde=n(o6e,"CODE",{});var Wet=s(sde);Nqo=r(Wet,"model.eval()"),Wet.forEach(t),qqo=r(o6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lde=n(o6e,"CODE",{});var Qet=s(lde);Gqo=r(Qet,"model.train()"),Qet.forEach(t),o6e.forEach(t),Oqo=i(Yt),ide=n(Yt,"P",{});var Het=s(ide);Xqo=r(Het,"Examples:"),Het.forEach(t),Vqo=i(Yt),m(hw.$$.fragment,Yt),Yt.forEach(t),Tl.forEach(t),MBe=i(c),qd=n(c,"H2",{class:!0});var kke=s(qd);T2=n(kke,"A",{id:!0,class:!0,href:!0});var Uet=s(T2);dde=n(Uet,"SPAN",{});var Jet=s(dde);m(pw.$$.fragment,Jet),Jet.forEach(t),Uet.forEach(t),zqo=i(kke),cde=n(kke,"SPAN",{});var Yet=s(cde);Wqo=r(Yet,"AutoModelForAudioXVector"),Yet.forEach(t),kke.forEach(t),EBe=i(c),cr=n(c,"DIV",{class:!0});var Cl=s(cr);m(_w.$$.fragment,Cl),Qqo=i(Cl),Gd=n(Cl,"P",{});var uz=s(Gd);Hqo=r(uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),fde=n(uz,"CODE",{});var Ket=s(fde);Uqo=r(Ket,"from_pretrained()"),Ket.forEach(t),Jqo=r(uz,"class method or the "),mde=n(uz,"CODE",{});var Zet=s(mde);Yqo=r(Zet,"from_config()"),Zet.forEach(t),Kqo=r(uz,`class
method.`),uz.forEach(t),Zqo=i(Cl),uw=n(Cl,"P",{});var Rke=s(uw);eGo=r(Rke,"This class cannot be instantiated directly using "),gde=n(Rke,"CODE",{});var eot=s(gde);oGo=r(eot,"__init__()"),eot.forEach(t),rGo=r(Rke," (throws an error)."),Rke.forEach(t),tGo=i(Cl),tt=n(Cl,"DIV",{class:!0});var Ml=s(tt);m(bw.$$.fragment,Ml),aGo=i(Ml),hde=n(Ml,"P",{});var oot=s(hde);nGo=r(oot,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),oot.forEach(t),sGo=i(Ml),Od=n(Ml,"P",{});var bz=s(Od);lGo=r(bz,`Note:
Loading a model from its configuration file does `),pde=n(bz,"STRONG",{});var rot=s(pde);iGo=r(rot,"not"),rot.forEach(t),dGo=r(bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),_de=n(bz,"CODE",{});var tot=s(_de);cGo=r(tot,"from_pretrained()"),tot.forEach(t),fGo=r(bz,"to load the model weights."),bz.forEach(t),mGo=i(Ml),ude=n(Ml,"P",{});var aot=s(ude);gGo=r(aot,"Examples:"),aot.forEach(t),hGo=i(Ml),m(vw.$$.fragment,Ml),Ml.forEach(t),pGo=i(Cl),Ue=n(Cl,"DIV",{class:!0});var Kt=s(Ue);m(Tw.$$.fragment,Kt),_Go=i(Kt),bde=n(Kt,"P",{});var not=s(bde);uGo=r(not,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),not.forEach(t),bGo=i(Kt),tn=n(Kt,"P",{});var z4=s(tn);vGo=r(z4,"The model class to instantiate is selected based on the "),vde=n(z4,"CODE",{});var sot=s(vde);TGo=r(sot,"model_type"),sot.forEach(t),FGo=r(z4,` property of the config object (either
passed as an argument or loaded from `),Tde=n(z4,"CODE",{});var lot=s(Tde);CGo=r(lot,"pretrained_model_name_or_path"),lot.forEach(t),MGo=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(z4,"CODE",{});var iot=s(Fde);EGo=r(iot,"pretrained_model_name_or_path"),iot.forEach(t),yGo=r(z4,":"),z4.forEach(t),wGo=i(Kt),an=n(Kt,"UL",{});var W4=s(an);F2=n(W4,"LI",{});var r6e=s(F2);Cde=n(r6e,"STRONG",{});var dot=s(Cde);AGo=r(dot,"data2vec-audio"),dot.forEach(t),LGo=r(r6e," \u2014 "),dN=n(r6e,"A",{href:!0});var cot=s(dN);BGo=r(cot,"Data2VecAudioForXVector"),cot.forEach(t),xGo=r(r6e," (Data2VecAudio model)"),r6e.forEach(t),kGo=i(W4),C2=n(W4,"LI",{});var t6e=s(C2);Mde=n(t6e,"STRONG",{});var fot=s(Mde);RGo=r(fot,"unispeech-sat"),fot.forEach(t),SGo=r(t6e," \u2014 "),cN=n(t6e,"A",{href:!0});var mot=s(cN);PGo=r(mot,"UniSpeechSatForXVector"),mot.forEach(t),$Go=r(t6e," (UniSpeechSat model)"),t6e.forEach(t),IGo=i(W4),M2=n(W4,"LI",{});var a6e=s(M2);Ede=n(a6e,"STRONG",{});var got=s(Ede);DGo=r(got,"wav2vec2"),got.forEach(t),jGo=r(a6e," \u2014 "),fN=n(a6e,"A",{href:!0});var hot=s(fN);NGo=r(hot,"Wav2Vec2ForXVector"),hot.forEach(t),qGo=r(a6e," (Wav2Vec2 model)"),a6e.forEach(t),GGo=i(W4),E2=n(W4,"LI",{});var n6e=s(E2);yde=n(n6e,"STRONG",{});var pot=s(yde);OGo=r(pot,"wavlm"),pot.forEach(t),XGo=r(n6e," \u2014 "),mN=n(n6e,"A",{href:!0});var _ot=s(mN);VGo=r(_ot,"WavLMForXVector"),_ot.forEach(t),zGo=r(n6e," (WavLM model)"),n6e.forEach(t),W4.forEach(t),WGo=i(Kt),y2=n(Kt,"P",{});var s6e=s(y2);QGo=r(s6e,"The model is set in evaluation mode by default using "),wde=n(s6e,"CODE",{});var uot=s(wde);HGo=r(uot,"model.eval()"),uot.forEach(t),UGo=r(s6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ade=n(s6e,"CODE",{});var bot=s(Ade);JGo=r(bot,"model.train()"),bot.forEach(t),s6e.forEach(t),YGo=i(Kt),Lde=n(Kt,"P",{});var vot=s(Lde);KGo=r(vot,"Examples:"),vot.forEach(t),ZGo=i(Kt),m(Fw.$$.fragment,Kt),Kt.forEach(t),Cl.forEach(t),yBe=i(c),Xd=n(c,"H2",{class:!0});var Ske=s(Xd);w2=n(Ske,"A",{id:!0,class:!0,href:!0});var Tot=s(w2);Bde=n(Tot,"SPAN",{});var Fot=s(Bde);m(Cw.$$.fragment,Fot),Fot.forEach(t),Tot.forEach(t),eOo=i(Ske),xde=n(Ske,"SPAN",{});var Cot=s(xde);oOo=r(Cot,"AutoModelForMaskedImageModeling"),Cot.forEach(t),Ske.forEach(t),wBe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(Mw.$$.fragment,El),rOo=i(El),Vd=n(El,"P",{});var vz=s(Vd);tOo=r(vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),kde=n(vz,"CODE",{});var Mot=s(kde);aOo=r(Mot,"from_pretrained()"),Mot.forEach(t),nOo=r(vz,"class method or the "),Rde=n(vz,"CODE",{});var Eot=s(Rde);sOo=r(Eot,"from_config()"),Eot.forEach(t),lOo=r(vz,`class
method.`),vz.forEach(t),iOo=i(El),Ew=n(El,"P",{});var Pke=s(Ew);dOo=r(Pke,"This class cannot be instantiated directly using "),Sde=n(Pke,"CODE",{});var yot=s(Sde);cOo=r(yot,"__init__()"),yot.forEach(t),fOo=r(Pke," (throws an error)."),Pke.forEach(t),mOo=i(El),at=n(El,"DIV",{class:!0});var yl=s(at);m(yw.$$.fragment,yl),gOo=i(yl),Pde=n(yl,"P",{});var wot=s(Pde);hOo=r(wot,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wot.forEach(t),pOo=i(yl),zd=n(yl,"P",{});var Tz=s(zd);_Oo=r(Tz,`Note:
Loading a model from its configuration file does `),$de=n(Tz,"STRONG",{});var Aot=s($de);uOo=r(Aot,"not"),Aot.forEach(t),bOo=r(Tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ide=n(Tz,"CODE",{});var Lot=s(Ide);vOo=r(Lot,"from_pretrained()"),Lot.forEach(t),TOo=r(Tz,"to load the model weights."),Tz.forEach(t),FOo=i(yl),Dde=n(yl,"P",{});var Bot=s(Dde);COo=r(Bot,"Examples:"),Bot.forEach(t),MOo=i(yl),m(ww.$$.fragment,yl),yl.forEach(t),EOo=i(El),Je=n(El,"DIV",{class:!0});var Zt=s(Je);m(Aw.$$.fragment,Zt),yOo=i(Zt),jde=n(Zt,"P",{});var xot=s(jde);wOo=r(xot,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xot.forEach(t),AOo=i(Zt),nn=n(Zt,"P",{});var Q4=s(nn);LOo=r(Q4,"The model class to instantiate is selected based on the "),Nde=n(Q4,"CODE",{});var kot=s(Nde);BOo=r(kot,"model_type"),kot.forEach(t),xOo=r(Q4,` property of the config object (either
passed as an argument or loaded from `),qde=n(Q4,"CODE",{});var Rot=s(qde);kOo=r(Rot,"pretrained_model_name_or_path"),Rot.forEach(t),ROo=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=n(Q4,"CODE",{});var Sot=s(Gde);SOo=r(Sot,"pretrained_model_name_or_path"),Sot.forEach(t),POo=r(Q4,":"),Q4.forEach(t),$Oo=i(Zt),Wd=n(Zt,"UL",{});var Fz=s(Wd);A2=n(Fz,"LI",{});var l6e=s(A2);Ode=n(l6e,"STRONG",{});var Pot=s(Ode);IOo=r(Pot,"deit"),Pot.forEach(t),DOo=r(l6e," \u2014 "),gN=n(l6e,"A",{href:!0});var $ot=s(gN);jOo=r($ot,"DeiTForMaskedImageModeling"),$ot.forEach(t),NOo=r(l6e," (DeiT model)"),l6e.forEach(t),qOo=i(Fz),L2=n(Fz,"LI",{});var i6e=s(L2);Xde=n(i6e,"STRONG",{});var Iot=s(Xde);GOo=r(Iot,"swin"),Iot.forEach(t),OOo=r(i6e," \u2014 "),hN=n(i6e,"A",{href:!0});var Dot=s(hN);XOo=r(Dot,"SwinForMaskedImageModeling"),Dot.forEach(t),VOo=r(i6e," (Swin model)"),i6e.forEach(t),zOo=i(Fz),B2=n(Fz,"LI",{});var d6e=s(B2);Vde=n(d6e,"STRONG",{});var jot=s(Vde);WOo=r(jot,"vit"),jot.forEach(t),QOo=r(d6e," \u2014 "),pN=n(d6e,"A",{href:!0});var Not=s(pN);HOo=r(Not,"ViTForMaskedImageModeling"),Not.forEach(t),UOo=r(d6e," (ViT model)"),d6e.forEach(t),Fz.forEach(t),JOo=i(Zt),x2=n(Zt,"P",{});var c6e=s(x2);YOo=r(c6e,"The model is set in evaluation mode by default using "),zde=n(c6e,"CODE",{});var qot=s(zde);KOo=r(qot,"model.eval()"),qot.forEach(t),ZOo=r(c6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wde=n(c6e,"CODE",{});var Got=s(Wde);eXo=r(Got,"model.train()"),Got.forEach(t),c6e.forEach(t),oXo=i(Zt),Qde=n(Zt,"P",{});var Oot=s(Qde);rXo=r(Oot,"Examples:"),Oot.forEach(t),tXo=i(Zt),m(Lw.$$.fragment,Zt),Zt.forEach(t),El.forEach(t),ABe=i(c),Qd=n(c,"H2",{class:!0});var $ke=s(Qd);k2=n($ke,"A",{id:!0,class:!0,href:!0});var Xot=s(k2);Hde=n(Xot,"SPAN",{});var Vot=s(Hde);m(Bw.$$.fragment,Vot),Vot.forEach(t),Xot.forEach(t),aXo=i($ke),Ude=n($ke,"SPAN",{});var zot=s(Ude);nXo=r(zot,"AutoModelForObjectDetection"),zot.forEach(t),$ke.forEach(t),LBe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(xw.$$.fragment,wl),sXo=i(wl),Hd=n(wl,"P",{});var Cz=s(Hd);lXo=r(Cz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Jde=n(Cz,"CODE",{});var Wot=s(Jde);iXo=r(Wot,"from_pretrained()"),Wot.forEach(t),dXo=r(Cz,"class method or the "),Yde=n(Cz,"CODE",{});var Qot=s(Yde);cXo=r(Qot,"from_config()"),Qot.forEach(t),fXo=r(Cz,`class
method.`),Cz.forEach(t),mXo=i(wl),kw=n(wl,"P",{});var Ike=s(kw);gXo=r(Ike,"This class cannot be instantiated directly using "),Kde=n(Ike,"CODE",{});var Hot=s(Kde);hXo=r(Hot,"__init__()"),Hot.forEach(t),pXo=r(Ike," (throws an error)."),Ike.forEach(t),_Xo=i(wl),nt=n(wl,"DIV",{class:!0});var Al=s(nt);m(Rw.$$.fragment,Al),uXo=i(Al),Zde=n(Al,"P",{});var Uot=s(Zde);bXo=r(Uot,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Uot.forEach(t),vXo=i(Al),Ud=n(Al,"P",{});var Mz=s(Ud);TXo=r(Mz,`Note:
Loading a model from its configuration file does `),ece=n(Mz,"STRONG",{});var Jot=s(ece);FXo=r(Jot,"not"),Jot.forEach(t),CXo=r(Mz,` load the model weights. It only affects the
model\u2019s configuration. Use `),oce=n(Mz,"CODE",{});var Yot=s(oce);MXo=r(Yot,"from_pretrained()"),Yot.forEach(t),EXo=r(Mz,"to load the model weights."),Mz.forEach(t),yXo=i(Al),rce=n(Al,"P",{});var Kot=s(rce);wXo=r(Kot,"Examples:"),Kot.forEach(t),AXo=i(Al),m(Sw.$$.fragment,Al),Al.forEach(t),LXo=i(wl),Ye=n(wl,"DIV",{class:!0});var ea=s(Ye);m(Pw.$$.fragment,ea),BXo=i(ea),tce=n(ea,"P",{});var Zot=s(tce);xXo=r(Zot,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Zot.forEach(t),kXo=i(ea),sn=n(ea,"P",{});var H4=s(sn);RXo=r(H4,"The model class to instantiate is selected based on the "),ace=n(H4,"CODE",{});var ert=s(ace);SXo=r(ert,"model_type"),ert.forEach(t),PXo=r(H4,` property of the config object (either
passed as an argument or loaded from `),nce=n(H4,"CODE",{});var ort=s(nce);$Xo=r(ort,"pretrained_model_name_or_path"),ort.forEach(t),IXo=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=n(H4,"CODE",{});var rrt=s(sce);DXo=r(rrt,"pretrained_model_name_or_path"),rrt.forEach(t),jXo=r(H4,":"),H4.forEach(t),NXo=i(ea),lce=n(ea,"UL",{});var trt=s(lce);R2=n(trt,"LI",{});var f6e=s(R2);ice=n(f6e,"STRONG",{});var art=s(ice);qXo=r(art,"detr"),art.forEach(t),GXo=r(f6e," \u2014 "),_N=n(f6e,"A",{href:!0});var nrt=s(_N);OXo=r(nrt,"DetrForObjectDetection"),nrt.forEach(t),XXo=r(f6e," (DETR model)"),f6e.forEach(t),trt.forEach(t),VXo=i(ea),S2=n(ea,"P",{});var m6e=s(S2);zXo=r(m6e,"The model is set in evaluation mode by default using "),dce=n(m6e,"CODE",{});var srt=s(dce);WXo=r(srt,"model.eval()"),srt.forEach(t),QXo=r(m6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cce=n(m6e,"CODE",{});var lrt=s(cce);HXo=r(lrt,"model.train()"),lrt.forEach(t),m6e.forEach(t),UXo=i(ea),fce=n(ea,"P",{});var irt=s(fce);JXo=r(irt,"Examples:"),irt.forEach(t),YXo=i(ea),m($w.$$.fragment,ea),ea.forEach(t),wl.forEach(t),BBe=i(c),Jd=n(c,"H2",{class:!0});var Dke=s(Jd);P2=n(Dke,"A",{id:!0,class:!0,href:!0});var drt=s(P2);mce=n(drt,"SPAN",{});var crt=s(mce);m(Iw.$$.fragment,crt),crt.forEach(t),drt.forEach(t),KXo=i(Dke),gce=n(Dke,"SPAN",{});var frt=s(gce);ZXo=r(frt,"AutoModelForImageSegmentation"),frt.forEach(t),Dke.forEach(t),xBe=i(c),gr=n(c,"DIV",{class:!0});var Ll=s(gr);m(Dw.$$.fragment,Ll),eVo=i(Ll),Yd=n(Ll,"P",{});var Ez=s(Yd);oVo=r(Ez,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),hce=n(Ez,"CODE",{});var mrt=s(hce);rVo=r(mrt,"from_pretrained()"),mrt.forEach(t),tVo=r(Ez,"class method or the "),pce=n(Ez,"CODE",{});var grt=s(pce);aVo=r(grt,"from_config()"),grt.forEach(t),nVo=r(Ez,`class
method.`),Ez.forEach(t),sVo=i(Ll),jw=n(Ll,"P",{});var jke=s(jw);lVo=r(jke,"This class cannot be instantiated directly using "),_ce=n(jke,"CODE",{});var hrt=s(_ce);iVo=r(hrt,"__init__()"),hrt.forEach(t),dVo=r(jke," (throws an error)."),jke.forEach(t),cVo=i(Ll),st=n(Ll,"DIV",{class:!0});var Bl=s(st);m(Nw.$$.fragment,Bl),fVo=i(Bl),uce=n(Bl,"P",{});var prt=s(uce);mVo=r(prt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),prt.forEach(t),gVo=i(Bl),Kd=n(Bl,"P",{});var yz=s(Kd);hVo=r(yz,`Note:
Loading a model from its configuration file does `),bce=n(yz,"STRONG",{});var _rt=s(bce);pVo=r(_rt,"not"),_rt.forEach(t),_Vo=r(yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),vce=n(yz,"CODE",{});var urt=s(vce);uVo=r(urt,"from_pretrained()"),urt.forEach(t),bVo=r(yz,"to load the model weights."),yz.forEach(t),vVo=i(Bl),Tce=n(Bl,"P",{});var brt=s(Tce);TVo=r(brt,"Examples:"),brt.forEach(t),FVo=i(Bl),m(qw.$$.fragment,Bl),Bl.forEach(t),CVo=i(Ll),Ke=n(Ll,"DIV",{class:!0});var oa=s(Ke);m(Gw.$$.fragment,oa),MVo=i(oa),Fce=n(oa,"P",{});var vrt=s(Fce);EVo=r(vrt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),vrt.forEach(t),yVo=i(oa),ln=n(oa,"P",{});var U4=s(ln);wVo=r(U4,"The model class to instantiate is selected based on the "),Cce=n(U4,"CODE",{});var Trt=s(Cce);AVo=r(Trt,"model_type"),Trt.forEach(t),LVo=r(U4,` property of the config object (either
passed as an argument or loaded from `),Mce=n(U4,"CODE",{});var Frt=s(Mce);BVo=r(Frt,"pretrained_model_name_or_path"),Frt.forEach(t),xVo=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=n(U4,"CODE",{});var Crt=s(Ece);kVo=r(Crt,"pretrained_model_name_or_path"),Crt.forEach(t),RVo=r(U4,":"),U4.forEach(t),SVo=i(oa),yce=n(oa,"UL",{});var Mrt=s(yce);$2=n(Mrt,"LI",{});var g6e=s($2);wce=n(g6e,"STRONG",{});var Ert=s(wce);PVo=r(Ert,"detr"),Ert.forEach(t),$Vo=r(g6e," \u2014 "),uN=n(g6e,"A",{href:!0});var yrt=s(uN);IVo=r(yrt,"DetrForSegmentation"),yrt.forEach(t),DVo=r(g6e," (DETR model)"),g6e.forEach(t),Mrt.forEach(t),jVo=i(oa),I2=n(oa,"P",{});var h6e=s(I2);NVo=r(h6e,"The model is set in evaluation mode by default using "),Ace=n(h6e,"CODE",{});var wrt=s(Ace);qVo=r(wrt,"model.eval()"),wrt.forEach(t),GVo=r(h6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=n(h6e,"CODE",{});var Art=s(Lce);OVo=r(Art,"model.train()"),Art.forEach(t),h6e.forEach(t),XVo=i(oa),Bce=n(oa,"P",{});var Lrt=s(Bce);VVo=r(Lrt,"Examples:"),Lrt.forEach(t),zVo=i(oa),m(Ow.$$.fragment,oa),oa.forEach(t),Ll.forEach(t),kBe=i(c),Zd=n(c,"H2",{class:!0});var Nke=s(Zd);D2=n(Nke,"A",{id:!0,class:!0,href:!0});var Brt=s(D2);xce=n(Brt,"SPAN",{});var xrt=s(xce);m(Xw.$$.fragment,xrt),xrt.forEach(t),Brt.forEach(t),WVo=i(Nke),kce=n(Nke,"SPAN",{});var krt=s(kce);QVo=r(krt,"AutoModelForSemanticSegmentation"),krt.forEach(t),Nke.forEach(t),RBe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(Vw.$$.fragment,xl),HVo=i(xl),ec=n(xl,"P",{});var wz=s(ec);UVo=r(wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Rce=n(wz,"CODE",{});var Rrt=s(Rce);JVo=r(Rrt,"from_pretrained()"),Rrt.forEach(t),YVo=r(wz,"class method or the "),Sce=n(wz,"CODE",{});var Srt=s(Sce);KVo=r(Srt,"from_config()"),Srt.forEach(t),ZVo=r(wz,`class
method.`),wz.forEach(t),ezo=i(xl),zw=n(xl,"P",{});var qke=s(zw);ozo=r(qke,"This class cannot be instantiated directly using "),Pce=n(qke,"CODE",{});var Prt=s(Pce);rzo=r(Prt,"__init__()"),Prt.forEach(t),tzo=r(qke," (throws an error)."),qke.forEach(t),azo=i(xl),lt=n(xl,"DIV",{class:!0});var kl=s(lt);m(Ww.$$.fragment,kl),nzo=i(kl),$ce=n(kl,"P",{});var $rt=s($ce);szo=r($rt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$rt.forEach(t),lzo=i(kl),oc=n(kl,"P",{});var Az=s(oc);izo=r(Az,`Note:
Loading a model from its configuration file does `),Ice=n(Az,"STRONG",{});var Irt=s(Ice);dzo=r(Irt,"not"),Irt.forEach(t),czo=r(Az,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dce=n(Az,"CODE",{});var Drt=s(Dce);fzo=r(Drt,"from_pretrained()"),Drt.forEach(t),mzo=r(Az,"to load the model weights."),Az.forEach(t),gzo=i(kl),jce=n(kl,"P",{});var jrt=s(jce);hzo=r(jrt,"Examples:"),jrt.forEach(t),pzo=i(kl),m(Qw.$$.fragment,kl),kl.forEach(t),_zo=i(xl),Ze=n(xl,"DIV",{class:!0});var ra=s(Ze);m(Hw.$$.fragment,ra),uzo=i(ra),Nce=n(ra,"P",{});var Nrt=s(Nce);bzo=r(Nrt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Nrt.forEach(t),vzo=i(ra),dn=n(ra,"P",{});var J4=s(dn);Tzo=r(J4,"The model class to instantiate is selected based on the "),qce=n(J4,"CODE",{});var qrt=s(qce);Fzo=r(qrt,"model_type"),qrt.forEach(t),Czo=r(J4,` property of the config object (either
passed as an argument or loaded from `),Gce=n(J4,"CODE",{});var Grt=s(Gce);Mzo=r(Grt,"pretrained_model_name_or_path"),Grt.forEach(t),Ezo=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(J4,"CODE",{});var Ort=s(Oce);yzo=r(Ort,"pretrained_model_name_or_path"),Ort.forEach(t),wzo=r(J4,":"),J4.forEach(t),Azo=i(ra),Uw=n(ra,"UL",{});var Gke=s(Uw);j2=n(Gke,"LI",{});var p6e=s(j2);Xce=n(p6e,"STRONG",{});var Xrt=s(Xce);Lzo=r(Xrt,"beit"),Xrt.forEach(t),Bzo=r(p6e," \u2014 "),bN=n(p6e,"A",{href:!0});var Vrt=s(bN);xzo=r(Vrt,"BeitForSemanticSegmentation"),Vrt.forEach(t),kzo=r(p6e," (BEiT model)"),p6e.forEach(t),Rzo=i(Gke),N2=n(Gke,"LI",{});var _6e=s(N2);Vce=n(_6e,"STRONG",{});var zrt=s(Vce);Szo=r(zrt,"segformer"),zrt.forEach(t),Pzo=r(_6e," \u2014 "),vN=n(_6e,"A",{href:!0});var Wrt=s(vN);$zo=r(Wrt,"SegformerForSemanticSegmentation"),Wrt.forEach(t),Izo=r(_6e," (SegFormer model)"),_6e.forEach(t),Gke.forEach(t),Dzo=i(ra),q2=n(ra,"P",{});var u6e=s(q2);jzo=r(u6e,"The model is set in evaluation mode by default using "),zce=n(u6e,"CODE",{});var Qrt=s(zce);Nzo=r(Qrt,"model.eval()"),Qrt.forEach(t),qzo=r(u6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=n(u6e,"CODE",{});var Hrt=s(Wce);Gzo=r(Hrt,"model.train()"),Hrt.forEach(t),u6e.forEach(t),Ozo=i(ra),Qce=n(ra,"P",{});var Urt=s(Qce);Xzo=r(Urt,"Examples:"),Urt.forEach(t),Vzo=i(ra),m(Jw.$$.fragment,ra),ra.forEach(t),xl.forEach(t),SBe=i(c),rc=n(c,"H2",{class:!0});var Oke=s(rc);G2=n(Oke,"A",{id:!0,class:!0,href:!0});var Jrt=s(G2);Hce=n(Jrt,"SPAN",{});var Yrt=s(Hce);m(Yw.$$.fragment,Yrt),Yrt.forEach(t),Jrt.forEach(t),zzo=i(Oke),Uce=n(Oke,"SPAN",{});var Krt=s(Uce);Wzo=r(Krt,"TFAutoModel"),Krt.forEach(t),Oke.forEach(t),PBe=i(c),pr=n(c,"DIV",{class:!0});var Rl=s(pr);m(Kw.$$.fragment,Rl),Qzo=i(Rl),tc=n(Rl,"P",{});var Lz=s(tc);Hzo=r(Lz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Jce=n(Lz,"CODE",{});var Zrt=s(Jce);Uzo=r(Zrt,"from_pretrained()"),Zrt.forEach(t),Jzo=r(Lz,"class method or the "),Yce=n(Lz,"CODE",{});var ett=s(Yce);Yzo=r(ett,"from_config()"),ett.forEach(t),Kzo=r(Lz,`class
method.`),Lz.forEach(t),Zzo=i(Rl),Zw=n(Rl,"P",{});var Xke=s(Zw);eWo=r(Xke,"This class cannot be instantiated directly using "),Kce=n(Xke,"CODE",{});var ott=s(Kce);oWo=r(ott,"__init__()"),ott.forEach(t),rWo=r(Xke," (throws an error)."),Xke.forEach(t),tWo=i(Rl),it=n(Rl,"DIV",{class:!0});var Sl=s(it);m(e6.$$.fragment,Sl),aWo=i(Sl),Zce=n(Sl,"P",{});var rtt=s(Zce);nWo=r(rtt,"Instantiates one of the base model classes of the library from a configuration."),rtt.forEach(t),sWo=i(Sl),ac=n(Sl,"P",{});var Bz=s(ac);lWo=r(Bz,`Note:
Loading a model from its configuration file does `),efe=n(Bz,"STRONG",{});var ttt=s(efe);iWo=r(ttt,"not"),ttt.forEach(t),dWo=r(Bz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ofe=n(Bz,"CODE",{});var att=s(ofe);cWo=r(att,"from_pretrained()"),att.forEach(t),fWo=r(Bz,"to load the model weights."),Bz.forEach(t),mWo=i(Sl),rfe=n(Sl,"P",{});var ntt=s(rfe);gWo=r(ntt,"Examples:"),ntt.forEach(t),hWo=i(Sl),m(o6.$$.fragment,Sl),Sl.forEach(t),pWo=i(Rl),go=n(Rl,"DIV",{class:!0});var ca=s(go);m(r6.$$.fragment,ca),_Wo=i(ca),tfe=n(ca,"P",{});var stt=s(tfe);uWo=r(stt,"Instantiate one of the base model classes of the library from a pretrained model."),stt.forEach(t),bWo=i(ca),cn=n(ca,"P",{});var Y4=s(cn);vWo=r(Y4,"The model class to instantiate is selected based on the "),afe=n(Y4,"CODE",{});var ltt=s(afe);TWo=r(ltt,"model_type"),ltt.forEach(t),FWo=r(Y4,` property of the config object (either
passed as an argument or loaded from `),nfe=n(Y4,"CODE",{});var itt=s(nfe);CWo=r(itt,"pretrained_model_name_or_path"),itt.forEach(t),MWo=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=n(Y4,"CODE",{});var dtt=s(sfe);EWo=r(dtt,"pretrained_model_name_or_path"),dtt.forEach(t),yWo=r(Y4,":"),Y4.forEach(t),wWo=i(ca),B=n(ca,"UL",{});var x=s(B);O2=n(x,"LI",{});var b6e=s(O2);lfe=n(b6e,"STRONG",{});var ctt=s(lfe);AWo=r(ctt,"albert"),ctt.forEach(t),LWo=r(b6e," \u2014 "),TN=n(b6e,"A",{href:!0});var ftt=s(TN);BWo=r(ftt,"TFAlbertModel"),ftt.forEach(t),xWo=r(b6e," (ALBERT model)"),b6e.forEach(t),kWo=i(x),X2=n(x,"LI",{});var v6e=s(X2);ife=n(v6e,"STRONG",{});var mtt=s(ife);RWo=r(mtt,"bart"),mtt.forEach(t),SWo=r(v6e," \u2014 "),FN=n(v6e,"A",{href:!0});var gtt=s(FN);PWo=r(gtt,"TFBartModel"),gtt.forEach(t),$Wo=r(v6e," (BART model)"),v6e.forEach(t),IWo=i(x),V2=n(x,"LI",{});var T6e=s(V2);dfe=n(T6e,"STRONG",{});var htt=s(dfe);DWo=r(htt,"bert"),htt.forEach(t),jWo=r(T6e," \u2014 "),CN=n(T6e,"A",{href:!0});var ptt=s(CN);NWo=r(ptt,"TFBertModel"),ptt.forEach(t),qWo=r(T6e," (BERT model)"),T6e.forEach(t),GWo=i(x),z2=n(x,"LI",{});var F6e=s(z2);cfe=n(F6e,"STRONG",{});var _tt=s(cfe);OWo=r(_tt,"blenderbot"),_tt.forEach(t),XWo=r(F6e," \u2014 "),MN=n(F6e,"A",{href:!0});var utt=s(MN);VWo=r(utt,"TFBlenderbotModel"),utt.forEach(t),zWo=r(F6e," (Blenderbot model)"),F6e.forEach(t),WWo=i(x),W2=n(x,"LI",{});var C6e=s(W2);ffe=n(C6e,"STRONG",{});var btt=s(ffe);QWo=r(btt,"blenderbot-small"),btt.forEach(t),HWo=r(C6e," \u2014 "),EN=n(C6e,"A",{href:!0});var vtt=s(EN);UWo=r(vtt,"TFBlenderbotSmallModel"),vtt.forEach(t),JWo=r(C6e," (BlenderbotSmall model)"),C6e.forEach(t),YWo=i(x),Q2=n(x,"LI",{});var M6e=s(Q2);mfe=n(M6e,"STRONG",{});var Ttt=s(mfe);KWo=r(Ttt,"camembert"),Ttt.forEach(t),ZWo=r(M6e," \u2014 "),yN=n(M6e,"A",{href:!0});var Ftt=s(yN);eQo=r(Ftt,"TFCamembertModel"),Ftt.forEach(t),oQo=r(M6e," (CamemBERT model)"),M6e.forEach(t),rQo=i(x),H2=n(x,"LI",{});var E6e=s(H2);gfe=n(E6e,"STRONG",{});var Ctt=s(gfe);tQo=r(Ctt,"clip"),Ctt.forEach(t),aQo=r(E6e," \u2014 "),wN=n(E6e,"A",{href:!0});var Mtt=s(wN);nQo=r(Mtt,"TFCLIPModel"),Mtt.forEach(t),sQo=r(E6e," (CLIP model)"),E6e.forEach(t),lQo=i(x),U2=n(x,"LI",{});var y6e=s(U2);hfe=n(y6e,"STRONG",{});var Ett=s(hfe);iQo=r(Ett,"convbert"),Ett.forEach(t),dQo=r(y6e," \u2014 "),AN=n(y6e,"A",{href:!0});var ytt=s(AN);cQo=r(ytt,"TFConvBertModel"),ytt.forEach(t),fQo=r(y6e," (ConvBERT model)"),y6e.forEach(t),mQo=i(x),J2=n(x,"LI",{});var w6e=s(J2);pfe=n(w6e,"STRONG",{});var wtt=s(pfe);gQo=r(wtt,"convnext"),wtt.forEach(t),hQo=r(w6e," \u2014 "),LN=n(w6e,"A",{href:!0});var Att=s(LN);pQo=r(Att,"TFConvNextModel"),Att.forEach(t),_Qo=r(w6e," (ConvNext model)"),w6e.forEach(t),uQo=i(x),Y2=n(x,"LI",{});var A6e=s(Y2);_fe=n(A6e,"STRONG",{});var Ltt=s(_fe);bQo=r(Ltt,"ctrl"),Ltt.forEach(t),vQo=r(A6e," \u2014 "),BN=n(A6e,"A",{href:!0});var Btt=s(BN);TQo=r(Btt,"TFCTRLModel"),Btt.forEach(t),FQo=r(A6e," (CTRL model)"),A6e.forEach(t),CQo=i(x),K2=n(x,"LI",{});var L6e=s(K2);ufe=n(L6e,"STRONG",{});var xtt=s(ufe);MQo=r(xtt,"deberta"),xtt.forEach(t),EQo=r(L6e," \u2014 "),xN=n(L6e,"A",{href:!0});var ktt=s(xN);yQo=r(ktt,"TFDebertaModel"),ktt.forEach(t),wQo=r(L6e," (DeBERTa model)"),L6e.forEach(t),AQo=i(x),Z2=n(x,"LI",{});var B6e=s(Z2);bfe=n(B6e,"STRONG",{});var Rtt=s(bfe);LQo=r(Rtt,"deberta-v2"),Rtt.forEach(t),BQo=r(B6e," \u2014 "),kN=n(B6e,"A",{href:!0});var Stt=s(kN);xQo=r(Stt,"TFDebertaV2Model"),Stt.forEach(t),kQo=r(B6e," (DeBERTa-v2 model)"),B6e.forEach(t),RQo=i(x),ev=n(x,"LI",{});var x6e=s(ev);vfe=n(x6e,"STRONG",{});var Ptt=s(vfe);SQo=r(Ptt,"distilbert"),Ptt.forEach(t),PQo=r(x6e," \u2014 "),RN=n(x6e,"A",{href:!0});var $tt=s(RN);$Qo=r($tt,"TFDistilBertModel"),$tt.forEach(t),IQo=r(x6e," (DistilBERT model)"),x6e.forEach(t),DQo=i(x),ov=n(x,"LI",{});var k6e=s(ov);Tfe=n(k6e,"STRONG",{});var Itt=s(Tfe);jQo=r(Itt,"dpr"),Itt.forEach(t),NQo=r(k6e," \u2014 "),SN=n(k6e,"A",{href:!0});var Dtt=s(SN);qQo=r(Dtt,"TFDPRQuestionEncoder"),Dtt.forEach(t),GQo=r(k6e," (DPR model)"),k6e.forEach(t),OQo=i(x),rv=n(x,"LI",{});var R6e=s(rv);Ffe=n(R6e,"STRONG",{});var jtt=s(Ffe);XQo=r(jtt,"electra"),jtt.forEach(t),VQo=r(R6e," \u2014 "),PN=n(R6e,"A",{href:!0});var Ntt=s(PN);zQo=r(Ntt,"TFElectraModel"),Ntt.forEach(t),WQo=r(R6e," (ELECTRA model)"),R6e.forEach(t),QQo=i(x),tv=n(x,"LI",{});var S6e=s(tv);Cfe=n(S6e,"STRONG",{});var qtt=s(Cfe);HQo=r(qtt,"flaubert"),qtt.forEach(t),UQo=r(S6e," \u2014 "),$N=n(S6e,"A",{href:!0});var Gtt=s($N);JQo=r(Gtt,"TFFlaubertModel"),Gtt.forEach(t),YQo=r(S6e," (FlauBERT model)"),S6e.forEach(t),KQo=i(x),Is=n(x,"LI",{});var i8=s(Is);Mfe=n(i8,"STRONG",{});var Ott=s(Mfe);ZQo=r(Ott,"funnel"),Ott.forEach(t),eHo=r(i8," \u2014 "),IN=n(i8,"A",{href:!0});var Xtt=s(IN);oHo=r(Xtt,"TFFunnelModel"),Xtt.forEach(t),rHo=r(i8," or "),DN=n(i8,"A",{href:!0});var Vtt=s(DN);tHo=r(Vtt,"TFFunnelBaseModel"),Vtt.forEach(t),aHo=r(i8," (Funnel Transformer model)"),i8.forEach(t),nHo=i(x),av=n(x,"LI",{});var P6e=s(av);Efe=n(P6e,"STRONG",{});var ztt=s(Efe);sHo=r(ztt,"gpt2"),ztt.forEach(t),lHo=r(P6e," \u2014 "),jN=n(P6e,"A",{href:!0});var Wtt=s(jN);iHo=r(Wtt,"TFGPT2Model"),Wtt.forEach(t),dHo=r(P6e," (OpenAI GPT-2 model)"),P6e.forEach(t),cHo=i(x),nv=n(x,"LI",{});var $6e=s(nv);yfe=n($6e,"STRONG",{});var Qtt=s(yfe);fHo=r(Qtt,"hubert"),Qtt.forEach(t),mHo=r($6e," \u2014 "),NN=n($6e,"A",{href:!0});var Htt=s(NN);gHo=r(Htt,"TFHubertModel"),Htt.forEach(t),hHo=r($6e," (Hubert model)"),$6e.forEach(t),pHo=i(x),sv=n(x,"LI",{});var I6e=s(sv);wfe=n(I6e,"STRONG",{});var Utt=s(wfe);_Ho=r(Utt,"layoutlm"),Utt.forEach(t),uHo=r(I6e," \u2014 "),qN=n(I6e,"A",{href:!0});var Jtt=s(qN);bHo=r(Jtt,"TFLayoutLMModel"),Jtt.forEach(t),vHo=r(I6e," (LayoutLM model)"),I6e.forEach(t),THo=i(x),lv=n(x,"LI",{});var D6e=s(lv);Afe=n(D6e,"STRONG",{});var Ytt=s(Afe);FHo=r(Ytt,"led"),Ytt.forEach(t),CHo=r(D6e," \u2014 "),GN=n(D6e,"A",{href:!0});var Ktt=s(GN);MHo=r(Ktt,"TFLEDModel"),Ktt.forEach(t),EHo=r(D6e," (LED model)"),D6e.forEach(t),yHo=i(x),iv=n(x,"LI",{});var j6e=s(iv);Lfe=n(j6e,"STRONG",{});var Ztt=s(Lfe);wHo=r(Ztt,"longformer"),Ztt.forEach(t),AHo=r(j6e," \u2014 "),ON=n(j6e,"A",{href:!0});var eat=s(ON);LHo=r(eat,"TFLongformerModel"),eat.forEach(t),BHo=r(j6e," (Longformer model)"),j6e.forEach(t),xHo=i(x),dv=n(x,"LI",{});var N6e=s(dv);Bfe=n(N6e,"STRONG",{});var oat=s(Bfe);kHo=r(oat,"lxmert"),oat.forEach(t),RHo=r(N6e," \u2014 "),XN=n(N6e,"A",{href:!0});var rat=s(XN);SHo=r(rat,"TFLxmertModel"),rat.forEach(t),PHo=r(N6e," (LXMERT model)"),N6e.forEach(t),$Ho=i(x),cv=n(x,"LI",{});var q6e=s(cv);xfe=n(q6e,"STRONG",{});var tat=s(xfe);IHo=r(tat,"marian"),tat.forEach(t),DHo=r(q6e," \u2014 "),VN=n(q6e,"A",{href:!0});var aat=s(VN);jHo=r(aat,"TFMarianModel"),aat.forEach(t),NHo=r(q6e," (Marian model)"),q6e.forEach(t),qHo=i(x),fv=n(x,"LI",{});var G6e=s(fv);kfe=n(G6e,"STRONG",{});var nat=s(kfe);GHo=r(nat,"mbart"),nat.forEach(t),OHo=r(G6e," \u2014 "),zN=n(G6e,"A",{href:!0});var sat=s(zN);XHo=r(sat,"TFMBartModel"),sat.forEach(t),VHo=r(G6e," (mBART model)"),G6e.forEach(t),zHo=i(x),mv=n(x,"LI",{});var O6e=s(mv);Rfe=n(O6e,"STRONG",{});var lat=s(Rfe);WHo=r(lat,"mobilebert"),lat.forEach(t),QHo=r(O6e," \u2014 "),WN=n(O6e,"A",{href:!0});var iat=s(WN);HHo=r(iat,"TFMobileBertModel"),iat.forEach(t),UHo=r(O6e," (MobileBERT model)"),O6e.forEach(t),JHo=i(x),gv=n(x,"LI",{});var X6e=s(gv);Sfe=n(X6e,"STRONG",{});var dat=s(Sfe);YHo=r(dat,"mpnet"),dat.forEach(t),KHo=r(X6e," \u2014 "),QN=n(X6e,"A",{href:!0});var cat=s(QN);ZHo=r(cat,"TFMPNetModel"),cat.forEach(t),eUo=r(X6e," (MPNet model)"),X6e.forEach(t),oUo=i(x),hv=n(x,"LI",{});var V6e=s(hv);Pfe=n(V6e,"STRONG",{});var fat=s(Pfe);rUo=r(fat,"mt5"),fat.forEach(t),tUo=r(V6e," \u2014 "),HN=n(V6e,"A",{href:!0});var mat=s(HN);aUo=r(mat,"TFMT5Model"),mat.forEach(t),nUo=r(V6e," (mT5 model)"),V6e.forEach(t),sUo=i(x),pv=n(x,"LI",{});var z6e=s(pv);$fe=n(z6e,"STRONG",{});var gat=s($fe);lUo=r(gat,"openai-gpt"),gat.forEach(t),iUo=r(z6e," \u2014 "),UN=n(z6e,"A",{href:!0});var hat=s(UN);dUo=r(hat,"TFOpenAIGPTModel"),hat.forEach(t),cUo=r(z6e," (OpenAI GPT model)"),z6e.forEach(t),fUo=i(x),_v=n(x,"LI",{});var W6e=s(_v);Ife=n(W6e,"STRONG",{});var pat=s(Ife);mUo=r(pat,"pegasus"),pat.forEach(t),gUo=r(W6e," \u2014 "),JN=n(W6e,"A",{href:!0});var _at=s(JN);hUo=r(_at,"TFPegasusModel"),_at.forEach(t),pUo=r(W6e," (Pegasus model)"),W6e.forEach(t),_Uo=i(x),uv=n(x,"LI",{});var Q6e=s(uv);Dfe=n(Q6e,"STRONG",{});var uat=s(Dfe);uUo=r(uat,"rembert"),uat.forEach(t),bUo=r(Q6e," \u2014 "),YN=n(Q6e,"A",{href:!0});var bat=s(YN);vUo=r(bat,"TFRemBertModel"),bat.forEach(t),TUo=r(Q6e," (RemBERT model)"),Q6e.forEach(t),FUo=i(x),bv=n(x,"LI",{});var H6e=s(bv);jfe=n(H6e,"STRONG",{});var vat=s(jfe);CUo=r(vat,"roberta"),vat.forEach(t),MUo=r(H6e," \u2014 "),KN=n(H6e,"A",{href:!0});var Tat=s(KN);EUo=r(Tat,"TFRobertaModel"),Tat.forEach(t),yUo=r(H6e," (RoBERTa model)"),H6e.forEach(t),wUo=i(x),vv=n(x,"LI",{});var U6e=s(vv);Nfe=n(U6e,"STRONG",{});var Fat=s(Nfe);AUo=r(Fat,"roformer"),Fat.forEach(t),LUo=r(U6e," \u2014 "),ZN=n(U6e,"A",{href:!0});var Cat=s(ZN);BUo=r(Cat,"TFRoFormerModel"),Cat.forEach(t),xUo=r(U6e," (RoFormer model)"),U6e.forEach(t),kUo=i(x),Tv=n(x,"LI",{});var J6e=s(Tv);qfe=n(J6e,"STRONG",{});var Mat=s(qfe);RUo=r(Mat,"speech_to_text"),Mat.forEach(t),SUo=r(J6e," \u2014 "),eq=n(J6e,"A",{href:!0});var Eat=s(eq);PUo=r(Eat,"TFSpeech2TextModel"),Eat.forEach(t),$Uo=r(J6e," (Speech2Text model)"),J6e.forEach(t),IUo=i(x),Fv=n(x,"LI",{});var Y6e=s(Fv);Gfe=n(Y6e,"STRONG",{});var yat=s(Gfe);DUo=r(yat,"t5"),yat.forEach(t),jUo=r(Y6e," \u2014 "),oq=n(Y6e,"A",{href:!0});var wat=s(oq);NUo=r(wat,"TFT5Model"),wat.forEach(t),qUo=r(Y6e," (T5 model)"),Y6e.forEach(t),GUo=i(x),Cv=n(x,"LI",{});var K6e=s(Cv);Ofe=n(K6e,"STRONG",{});var Aat=s(Ofe);OUo=r(Aat,"tapas"),Aat.forEach(t),XUo=r(K6e," \u2014 "),rq=n(K6e,"A",{href:!0});var Lat=s(rq);VUo=r(Lat,"TFTapasModel"),Lat.forEach(t),zUo=r(K6e," (TAPAS model)"),K6e.forEach(t),WUo=i(x),Mv=n(x,"LI",{});var Z6e=s(Mv);Xfe=n(Z6e,"STRONG",{});var Bat=s(Xfe);QUo=r(Bat,"transfo-xl"),Bat.forEach(t),HUo=r(Z6e," \u2014 "),tq=n(Z6e,"A",{href:!0});var xat=s(tq);UUo=r(xat,"TFTransfoXLModel"),xat.forEach(t),JUo=r(Z6e," (Transformer-XL model)"),Z6e.forEach(t),YUo=i(x),Ev=n(x,"LI",{});var eAe=s(Ev);Vfe=n(eAe,"STRONG",{});var kat=s(Vfe);KUo=r(kat,"vit"),kat.forEach(t),ZUo=r(eAe," \u2014 "),aq=n(eAe,"A",{href:!0});var Rat=s(aq);eJo=r(Rat,"TFViTModel"),Rat.forEach(t),oJo=r(eAe," (ViT model)"),eAe.forEach(t),rJo=i(x),yv=n(x,"LI",{});var oAe=s(yv);zfe=n(oAe,"STRONG",{});var Sat=s(zfe);tJo=r(Sat,"wav2vec2"),Sat.forEach(t),aJo=r(oAe," \u2014 "),nq=n(oAe,"A",{href:!0});var Pat=s(nq);nJo=r(Pat,"TFWav2Vec2Model"),Pat.forEach(t),sJo=r(oAe," (Wav2Vec2 model)"),oAe.forEach(t),lJo=i(x),wv=n(x,"LI",{});var rAe=s(wv);Wfe=n(rAe,"STRONG",{});var $at=s(Wfe);iJo=r($at,"xlm"),$at.forEach(t),dJo=r(rAe," \u2014 "),sq=n(rAe,"A",{href:!0});var Iat=s(sq);cJo=r(Iat,"TFXLMModel"),Iat.forEach(t),fJo=r(rAe," (XLM model)"),rAe.forEach(t),mJo=i(x),Av=n(x,"LI",{});var tAe=s(Av);Qfe=n(tAe,"STRONG",{});var Dat=s(Qfe);gJo=r(Dat,"xlm-roberta"),Dat.forEach(t),hJo=r(tAe," \u2014 "),lq=n(tAe,"A",{href:!0});var jat=s(lq);pJo=r(jat,"TFXLMRobertaModel"),jat.forEach(t),_Jo=r(tAe," (XLM-RoBERTa model)"),tAe.forEach(t),uJo=i(x),Lv=n(x,"LI",{});var aAe=s(Lv);Hfe=n(aAe,"STRONG",{});var Nat=s(Hfe);bJo=r(Nat,"xlnet"),Nat.forEach(t),vJo=r(aAe," \u2014 "),iq=n(aAe,"A",{href:!0});var qat=s(iq);TJo=r(qat,"TFXLNetModel"),qat.forEach(t),FJo=r(aAe," (XLNet model)"),aAe.forEach(t),x.forEach(t),CJo=i(ca),Ufe=n(ca,"P",{});var Gat=s(Ufe);MJo=r(Gat,"Examples:"),Gat.forEach(t),EJo=i(ca),m(t6.$$.fragment,ca),ca.forEach(t),Rl.forEach(t),$Be=i(c),nc=n(c,"H2",{class:!0});var Vke=s(nc);Bv=n(Vke,"A",{id:!0,class:!0,href:!0});var Oat=s(Bv);Jfe=n(Oat,"SPAN",{});var Xat=s(Jfe);m(a6.$$.fragment,Xat),Xat.forEach(t),Oat.forEach(t),yJo=i(Vke),Yfe=n(Vke,"SPAN",{});var Vat=s(Yfe);wJo=r(Vat,"TFAutoModelForPreTraining"),Vat.forEach(t),Vke.forEach(t),IBe=i(c),_r=n(c,"DIV",{class:!0});var Pl=s(_r);m(n6.$$.fragment,Pl),AJo=i(Pl),sc=n(Pl,"P",{});var xz=s(sc);LJo=r(xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kfe=n(xz,"CODE",{});var zat=s(Kfe);BJo=r(zat,"from_pretrained()"),zat.forEach(t),xJo=r(xz,"class method or the "),Zfe=n(xz,"CODE",{});var Wat=s(Zfe);kJo=r(Wat,"from_config()"),Wat.forEach(t),RJo=r(xz,`class
method.`),xz.forEach(t),SJo=i(Pl),s6=n(Pl,"P",{});var zke=s(s6);PJo=r(zke,"This class cannot be instantiated directly using "),eme=n(zke,"CODE",{});var Qat=s(eme);$Jo=r(Qat,"__init__()"),Qat.forEach(t),IJo=r(zke," (throws an error)."),zke.forEach(t),DJo=i(Pl),dt=n(Pl,"DIV",{class:!0});var $l=s(dt);m(l6.$$.fragment,$l),jJo=i($l),ome=n($l,"P",{});var Hat=s(ome);NJo=r(Hat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hat.forEach(t),qJo=i($l),lc=n($l,"P",{});var kz=s(lc);GJo=r(kz,`Note:
Loading a model from its configuration file does `),rme=n(kz,"STRONG",{});var Uat=s(rme);OJo=r(Uat,"not"),Uat.forEach(t),XJo=r(kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),tme=n(kz,"CODE",{});var Jat=s(tme);VJo=r(Jat,"from_pretrained()"),Jat.forEach(t),zJo=r(kz,"to load the model weights."),kz.forEach(t),WJo=i($l),ame=n($l,"P",{});var Yat=s(ame);QJo=r(Yat,"Examples:"),Yat.forEach(t),HJo=i($l),m(i6.$$.fragment,$l),$l.forEach(t),UJo=i(Pl),ho=n(Pl,"DIV",{class:!0});var fa=s(ho);m(d6.$$.fragment,fa),JJo=i(fa),nme=n(fa,"P",{});var Kat=s(nme);YJo=r(Kat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kat.forEach(t),KJo=i(fa),fn=n(fa,"P",{});var K4=s(fn);ZJo=r(K4,"The model class to instantiate is selected based on the "),sme=n(K4,"CODE",{});var Zat=s(sme);eYo=r(Zat,"model_type"),Zat.forEach(t),oYo=r(K4,` property of the config object (either
passed as an argument or loaded from `),lme=n(K4,"CODE",{});var ent=s(lme);rYo=r(ent,"pretrained_model_name_or_path"),ent.forEach(t),tYo=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=n(K4,"CODE",{});var ont=s(ime);aYo=r(ont,"pretrained_model_name_or_path"),ont.forEach(t),nYo=r(K4,":"),K4.forEach(t),sYo=i(fa),H=n(fa,"UL",{});var U=s(H);xv=n(U,"LI",{});var nAe=s(xv);dme=n(nAe,"STRONG",{});var rnt=s(dme);lYo=r(rnt,"albert"),rnt.forEach(t),iYo=r(nAe," \u2014 "),dq=n(nAe,"A",{href:!0});var tnt=s(dq);dYo=r(tnt,"TFAlbertForPreTraining"),tnt.forEach(t),cYo=r(nAe," (ALBERT model)"),nAe.forEach(t),fYo=i(U),kv=n(U,"LI",{});var sAe=s(kv);cme=n(sAe,"STRONG",{});var ant=s(cme);mYo=r(ant,"bart"),ant.forEach(t),gYo=r(sAe," \u2014 "),cq=n(sAe,"A",{href:!0});var nnt=s(cq);hYo=r(nnt,"TFBartForConditionalGeneration"),nnt.forEach(t),pYo=r(sAe," (BART model)"),sAe.forEach(t),_Yo=i(U),Rv=n(U,"LI",{});var lAe=s(Rv);fme=n(lAe,"STRONG",{});var snt=s(fme);uYo=r(snt,"bert"),snt.forEach(t),bYo=r(lAe," \u2014 "),fq=n(lAe,"A",{href:!0});var lnt=s(fq);vYo=r(lnt,"TFBertForPreTraining"),lnt.forEach(t),TYo=r(lAe," (BERT model)"),lAe.forEach(t),FYo=i(U),Sv=n(U,"LI",{});var iAe=s(Sv);mme=n(iAe,"STRONG",{});var int=s(mme);CYo=r(int,"camembert"),int.forEach(t),MYo=r(iAe," \u2014 "),mq=n(iAe,"A",{href:!0});var dnt=s(mq);EYo=r(dnt,"TFCamembertForMaskedLM"),dnt.forEach(t),yYo=r(iAe," (CamemBERT model)"),iAe.forEach(t),wYo=i(U),Pv=n(U,"LI",{});var dAe=s(Pv);gme=n(dAe,"STRONG",{});var cnt=s(gme);AYo=r(cnt,"ctrl"),cnt.forEach(t),LYo=r(dAe," \u2014 "),gq=n(dAe,"A",{href:!0});var fnt=s(gq);BYo=r(fnt,"TFCTRLLMHeadModel"),fnt.forEach(t),xYo=r(dAe," (CTRL model)"),dAe.forEach(t),kYo=i(U),$v=n(U,"LI",{});var cAe=s($v);hme=n(cAe,"STRONG",{});var mnt=s(hme);RYo=r(mnt,"distilbert"),mnt.forEach(t),SYo=r(cAe," \u2014 "),hq=n(cAe,"A",{href:!0});var gnt=s(hq);PYo=r(gnt,"TFDistilBertForMaskedLM"),gnt.forEach(t),$Yo=r(cAe," (DistilBERT model)"),cAe.forEach(t),IYo=i(U),Iv=n(U,"LI",{});var fAe=s(Iv);pme=n(fAe,"STRONG",{});var hnt=s(pme);DYo=r(hnt,"electra"),hnt.forEach(t),jYo=r(fAe," \u2014 "),pq=n(fAe,"A",{href:!0});var pnt=s(pq);NYo=r(pnt,"TFElectraForPreTraining"),pnt.forEach(t),qYo=r(fAe," (ELECTRA model)"),fAe.forEach(t),GYo=i(U),Dv=n(U,"LI",{});var mAe=s(Dv);_me=n(mAe,"STRONG",{});var _nt=s(_me);OYo=r(_nt,"flaubert"),_nt.forEach(t),XYo=r(mAe," \u2014 "),_q=n(mAe,"A",{href:!0});var unt=s(_q);VYo=r(unt,"TFFlaubertWithLMHeadModel"),unt.forEach(t),zYo=r(mAe," (FlauBERT model)"),mAe.forEach(t),WYo=i(U),jv=n(U,"LI",{});var gAe=s(jv);ume=n(gAe,"STRONG",{});var bnt=s(ume);QYo=r(bnt,"funnel"),bnt.forEach(t),HYo=r(gAe," \u2014 "),uq=n(gAe,"A",{href:!0});var vnt=s(uq);UYo=r(vnt,"TFFunnelForPreTraining"),vnt.forEach(t),JYo=r(gAe," (Funnel Transformer model)"),gAe.forEach(t),YYo=i(U),Nv=n(U,"LI",{});var hAe=s(Nv);bme=n(hAe,"STRONG",{});var Tnt=s(bme);KYo=r(Tnt,"gpt2"),Tnt.forEach(t),ZYo=r(hAe," \u2014 "),bq=n(hAe,"A",{href:!0});var Fnt=s(bq);eKo=r(Fnt,"TFGPT2LMHeadModel"),Fnt.forEach(t),oKo=r(hAe," (OpenAI GPT-2 model)"),hAe.forEach(t),rKo=i(U),qv=n(U,"LI",{});var pAe=s(qv);vme=n(pAe,"STRONG",{});var Cnt=s(vme);tKo=r(Cnt,"layoutlm"),Cnt.forEach(t),aKo=r(pAe," \u2014 "),vq=n(pAe,"A",{href:!0});var Mnt=s(vq);nKo=r(Mnt,"TFLayoutLMForMaskedLM"),Mnt.forEach(t),sKo=r(pAe," (LayoutLM model)"),pAe.forEach(t),lKo=i(U),Gv=n(U,"LI",{});var _Ae=s(Gv);Tme=n(_Ae,"STRONG",{});var Ent=s(Tme);iKo=r(Ent,"lxmert"),Ent.forEach(t),dKo=r(_Ae," \u2014 "),Tq=n(_Ae,"A",{href:!0});var ynt=s(Tq);cKo=r(ynt,"TFLxmertForPreTraining"),ynt.forEach(t),fKo=r(_Ae," (LXMERT model)"),_Ae.forEach(t),mKo=i(U),Ov=n(U,"LI",{});var uAe=s(Ov);Fme=n(uAe,"STRONG",{});var wnt=s(Fme);gKo=r(wnt,"mobilebert"),wnt.forEach(t),hKo=r(uAe," \u2014 "),Fq=n(uAe,"A",{href:!0});var Ant=s(Fq);pKo=r(Ant,"TFMobileBertForPreTraining"),Ant.forEach(t),_Ko=r(uAe," (MobileBERT model)"),uAe.forEach(t),uKo=i(U),Xv=n(U,"LI",{});var bAe=s(Xv);Cme=n(bAe,"STRONG",{});var Lnt=s(Cme);bKo=r(Lnt,"mpnet"),Lnt.forEach(t),vKo=r(bAe," \u2014 "),Cq=n(bAe,"A",{href:!0});var Bnt=s(Cq);TKo=r(Bnt,"TFMPNetForMaskedLM"),Bnt.forEach(t),FKo=r(bAe," (MPNet model)"),bAe.forEach(t),CKo=i(U),Vv=n(U,"LI",{});var vAe=s(Vv);Mme=n(vAe,"STRONG",{});var xnt=s(Mme);MKo=r(xnt,"openai-gpt"),xnt.forEach(t),EKo=r(vAe," \u2014 "),Mq=n(vAe,"A",{href:!0});var knt=s(Mq);yKo=r(knt,"TFOpenAIGPTLMHeadModel"),knt.forEach(t),wKo=r(vAe," (OpenAI GPT model)"),vAe.forEach(t),AKo=i(U),zv=n(U,"LI",{});var TAe=s(zv);Eme=n(TAe,"STRONG",{});var Rnt=s(Eme);LKo=r(Rnt,"roberta"),Rnt.forEach(t),BKo=r(TAe," \u2014 "),Eq=n(TAe,"A",{href:!0});var Snt=s(Eq);xKo=r(Snt,"TFRobertaForMaskedLM"),Snt.forEach(t),kKo=r(TAe," (RoBERTa model)"),TAe.forEach(t),RKo=i(U),Wv=n(U,"LI",{});var FAe=s(Wv);yme=n(FAe,"STRONG",{});var Pnt=s(yme);SKo=r(Pnt,"t5"),Pnt.forEach(t),PKo=r(FAe," \u2014 "),yq=n(FAe,"A",{href:!0});var $nt=s(yq);$Ko=r($nt,"TFT5ForConditionalGeneration"),$nt.forEach(t),IKo=r(FAe," (T5 model)"),FAe.forEach(t),DKo=i(U),Qv=n(U,"LI",{});var CAe=s(Qv);wme=n(CAe,"STRONG",{});var Int=s(wme);jKo=r(Int,"tapas"),Int.forEach(t),NKo=r(CAe," \u2014 "),wq=n(CAe,"A",{href:!0});var Dnt=s(wq);qKo=r(Dnt,"TFTapasForMaskedLM"),Dnt.forEach(t),GKo=r(CAe," (TAPAS model)"),CAe.forEach(t),OKo=i(U),Hv=n(U,"LI",{});var MAe=s(Hv);Ame=n(MAe,"STRONG",{});var jnt=s(Ame);XKo=r(jnt,"transfo-xl"),jnt.forEach(t),VKo=r(MAe," \u2014 "),Aq=n(MAe,"A",{href:!0});var Nnt=s(Aq);zKo=r(Nnt,"TFTransfoXLLMHeadModel"),Nnt.forEach(t),WKo=r(MAe," (Transformer-XL model)"),MAe.forEach(t),QKo=i(U),Uv=n(U,"LI",{});var EAe=s(Uv);Lme=n(EAe,"STRONG",{});var qnt=s(Lme);HKo=r(qnt,"xlm"),qnt.forEach(t),UKo=r(EAe," \u2014 "),Lq=n(EAe,"A",{href:!0});var Gnt=s(Lq);JKo=r(Gnt,"TFXLMWithLMHeadModel"),Gnt.forEach(t),YKo=r(EAe," (XLM model)"),EAe.forEach(t),KKo=i(U),Jv=n(U,"LI",{});var yAe=s(Jv);Bme=n(yAe,"STRONG",{});var Ont=s(Bme);ZKo=r(Ont,"xlm-roberta"),Ont.forEach(t),eZo=r(yAe," \u2014 "),Bq=n(yAe,"A",{href:!0});var Xnt=s(Bq);oZo=r(Xnt,"TFXLMRobertaForMaskedLM"),Xnt.forEach(t),rZo=r(yAe," (XLM-RoBERTa model)"),yAe.forEach(t),tZo=i(U),Yv=n(U,"LI",{});var wAe=s(Yv);xme=n(wAe,"STRONG",{});var Vnt=s(xme);aZo=r(Vnt,"xlnet"),Vnt.forEach(t),nZo=r(wAe," \u2014 "),xq=n(wAe,"A",{href:!0});var znt=s(xq);sZo=r(znt,"TFXLNetLMHeadModel"),znt.forEach(t),lZo=r(wAe," (XLNet model)"),wAe.forEach(t),U.forEach(t),iZo=i(fa),kme=n(fa,"P",{});var Wnt=s(kme);dZo=r(Wnt,"Examples:"),Wnt.forEach(t),cZo=i(fa),m(c6.$$.fragment,fa),fa.forEach(t),Pl.forEach(t),DBe=i(c),ic=n(c,"H2",{class:!0});var Wke=s(ic);Kv=n(Wke,"A",{id:!0,class:!0,href:!0});var Qnt=s(Kv);Rme=n(Qnt,"SPAN",{});var Hnt=s(Rme);m(f6.$$.fragment,Hnt),Hnt.forEach(t),Qnt.forEach(t),fZo=i(Wke),Sme=n(Wke,"SPAN",{});var Unt=s(Sme);mZo=r(Unt,"TFAutoModelForCausalLM"),Unt.forEach(t),Wke.forEach(t),jBe=i(c),ur=n(c,"DIV",{class:!0});var Il=s(ur);m(m6.$$.fragment,Il),gZo=i(Il),dc=n(Il,"P",{});var Rz=s(dc);hZo=r(Rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Pme=n(Rz,"CODE",{});var Jnt=s(Pme);pZo=r(Jnt,"from_pretrained()"),Jnt.forEach(t),_Zo=r(Rz,"class method or the "),$me=n(Rz,"CODE",{});var Ynt=s($me);uZo=r(Ynt,"from_config()"),Ynt.forEach(t),bZo=r(Rz,`class
method.`),Rz.forEach(t),vZo=i(Il),g6=n(Il,"P",{});var Qke=s(g6);TZo=r(Qke,"This class cannot be instantiated directly using "),Ime=n(Qke,"CODE",{});var Knt=s(Ime);FZo=r(Knt,"__init__()"),Knt.forEach(t),CZo=r(Qke," (throws an error)."),Qke.forEach(t),MZo=i(Il),ct=n(Il,"DIV",{class:!0});var Dl=s(ct);m(h6.$$.fragment,Dl),EZo=i(Dl),Dme=n(Dl,"P",{});var Znt=s(Dme);yZo=r(Znt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Znt.forEach(t),wZo=i(Dl),cc=n(Dl,"P",{});var Sz=s(cc);AZo=r(Sz,`Note:
Loading a model from its configuration file does `),jme=n(Sz,"STRONG",{});var est=s(jme);LZo=r(est,"not"),est.forEach(t),BZo=r(Sz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nme=n(Sz,"CODE",{});var ost=s(Nme);xZo=r(ost,"from_pretrained()"),ost.forEach(t),kZo=r(Sz,"to load the model weights."),Sz.forEach(t),RZo=i(Dl),qme=n(Dl,"P",{});var rst=s(qme);SZo=r(rst,"Examples:"),rst.forEach(t),PZo=i(Dl),m(p6.$$.fragment,Dl),Dl.forEach(t),$Zo=i(Il),po=n(Il,"DIV",{class:!0});var ma=s(po);m(_6.$$.fragment,ma),IZo=i(ma),Gme=n(ma,"P",{});var tst=s(Gme);DZo=r(tst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tst.forEach(t),jZo=i(ma),mn=n(ma,"P",{});var Z4=s(mn);NZo=r(Z4,"The model class to instantiate is selected based on the "),Ome=n(Z4,"CODE",{});var ast=s(Ome);qZo=r(ast,"model_type"),ast.forEach(t),GZo=r(Z4,` property of the config object (either
passed as an argument or loaded from `),Xme=n(Z4,"CODE",{});var nst=s(Xme);OZo=r(nst,"pretrained_model_name_or_path"),nst.forEach(t),XZo=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vme=n(Z4,"CODE",{});var sst=s(Vme);VZo=r(sst,"pretrained_model_name_or_path"),sst.forEach(t),zZo=r(Z4,":"),Z4.forEach(t),WZo=i(ma),he=n(ma,"UL",{});var Me=s(he);Zv=n(Me,"LI",{});var AAe=s(Zv);zme=n(AAe,"STRONG",{});var lst=s(zme);QZo=r(lst,"bert"),lst.forEach(t),HZo=r(AAe," \u2014 "),kq=n(AAe,"A",{href:!0});var ist=s(kq);UZo=r(ist,"TFBertLMHeadModel"),ist.forEach(t),JZo=r(AAe," (BERT model)"),AAe.forEach(t),YZo=i(Me),eT=n(Me,"LI",{});var LAe=s(eT);Wme=n(LAe,"STRONG",{});var dst=s(Wme);KZo=r(dst,"ctrl"),dst.forEach(t),ZZo=r(LAe," \u2014 "),Rq=n(LAe,"A",{href:!0});var cst=s(Rq);eer=r(cst,"TFCTRLLMHeadModel"),cst.forEach(t),oer=r(LAe," (CTRL model)"),LAe.forEach(t),rer=i(Me),oT=n(Me,"LI",{});var BAe=s(oT);Qme=n(BAe,"STRONG",{});var fst=s(Qme);ter=r(fst,"gpt2"),fst.forEach(t),aer=r(BAe," \u2014 "),Sq=n(BAe,"A",{href:!0});var mst=s(Sq);ner=r(mst,"TFGPT2LMHeadModel"),mst.forEach(t),ser=r(BAe," (OpenAI GPT-2 model)"),BAe.forEach(t),ler=i(Me),rT=n(Me,"LI",{});var xAe=s(rT);Hme=n(xAe,"STRONG",{});var gst=s(Hme);ier=r(gst,"openai-gpt"),gst.forEach(t),der=r(xAe," \u2014 "),Pq=n(xAe,"A",{href:!0});var hst=s(Pq);cer=r(hst,"TFOpenAIGPTLMHeadModel"),hst.forEach(t),fer=r(xAe," (OpenAI GPT model)"),xAe.forEach(t),mer=i(Me),tT=n(Me,"LI",{});var kAe=s(tT);Ume=n(kAe,"STRONG",{});var pst=s(Ume);ger=r(pst,"rembert"),pst.forEach(t),her=r(kAe," \u2014 "),$q=n(kAe,"A",{href:!0});var _st=s($q);per=r(_st,"TFRemBertForCausalLM"),_st.forEach(t),_er=r(kAe," (RemBERT model)"),kAe.forEach(t),uer=i(Me),aT=n(Me,"LI",{});var RAe=s(aT);Jme=n(RAe,"STRONG",{});var ust=s(Jme);ber=r(ust,"roberta"),ust.forEach(t),ver=r(RAe," \u2014 "),Iq=n(RAe,"A",{href:!0});var bst=s(Iq);Ter=r(bst,"TFRobertaForCausalLM"),bst.forEach(t),Fer=r(RAe," (RoBERTa model)"),RAe.forEach(t),Cer=i(Me),nT=n(Me,"LI",{});var SAe=s(nT);Yme=n(SAe,"STRONG",{});var vst=s(Yme);Mer=r(vst,"roformer"),vst.forEach(t),Eer=r(SAe," \u2014 "),Dq=n(SAe,"A",{href:!0});var Tst=s(Dq);yer=r(Tst,"TFRoFormerForCausalLM"),Tst.forEach(t),wer=r(SAe," (RoFormer model)"),SAe.forEach(t),Aer=i(Me),sT=n(Me,"LI",{});var PAe=s(sT);Kme=n(PAe,"STRONG",{});var Fst=s(Kme);Ler=r(Fst,"transfo-xl"),Fst.forEach(t),Ber=r(PAe," \u2014 "),jq=n(PAe,"A",{href:!0});var Cst=s(jq);xer=r(Cst,"TFTransfoXLLMHeadModel"),Cst.forEach(t),ker=r(PAe," (Transformer-XL model)"),PAe.forEach(t),Rer=i(Me),lT=n(Me,"LI",{});var $Ae=s(lT);Zme=n($Ae,"STRONG",{});var Mst=s(Zme);Ser=r(Mst,"xlm"),Mst.forEach(t),Per=r($Ae," \u2014 "),Nq=n($Ae,"A",{href:!0});var Est=s(Nq);$er=r(Est,"TFXLMWithLMHeadModel"),Est.forEach(t),Ier=r($Ae," (XLM model)"),$Ae.forEach(t),Der=i(Me),iT=n(Me,"LI",{});var IAe=s(iT);ege=n(IAe,"STRONG",{});var yst=s(ege);jer=r(yst,"xlnet"),yst.forEach(t),Ner=r(IAe," \u2014 "),qq=n(IAe,"A",{href:!0});var wst=s(qq);qer=r(wst,"TFXLNetLMHeadModel"),wst.forEach(t),Ger=r(IAe," (XLNet model)"),IAe.forEach(t),Me.forEach(t),Oer=i(ma),oge=n(ma,"P",{});var Ast=s(oge);Xer=r(Ast,"Examples:"),Ast.forEach(t),Ver=i(ma),m(u6.$$.fragment,ma),ma.forEach(t),Il.forEach(t),NBe=i(c),fc=n(c,"H2",{class:!0});var Hke=s(fc);dT=n(Hke,"A",{id:!0,class:!0,href:!0});var Lst=s(dT);rge=n(Lst,"SPAN",{});var Bst=s(rge);m(b6.$$.fragment,Bst),Bst.forEach(t),Lst.forEach(t),zer=i(Hke),tge=n(Hke,"SPAN",{});var xst=s(tge);Wer=r(xst,"TFAutoModelForImageClassification"),xst.forEach(t),Hke.forEach(t),qBe=i(c),br=n(c,"DIV",{class:!0});var jl=s(br);m(v6.$$.fragment,jl),Qer=i(jl),mc=n(jl,"P",{});var Pz=s(mc);Her=r(Pz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),age=n(Pz,"CODE",{});var kst=s(age);Uer=r(kst,"from_pretrained()"),kst.forEach(t),Jer=r(Pz,"class method or the "),nge=n(Pz,"CODE",{});var Rst=s(nge);Yer=r(Rst,"from_config()"),Rst.forEach(t),Ker=r(Pz,`class
method.`),Pz.forEach(t),Zer=i(jl),T6=n(jl,"P",{});var Uke=s(T6);eor=r(Uke,"This class cannot be instantiated directly using "),sge=n(Uke,"CODE",{});var Sst=s(sge);oor=r(Sst,"__init__()"),Sst.forEach(t),ror=r(Uke," (throws an error)."),Uke.forEach(t),tor=i(jl),ft=n(jl,"DIV",{class:!0});var Nl=s(ft);m(F6.$$.fragment,Nl),aor=i(Nl),lge=n(Nl,"P",{});var Pst=s(lge);nor=r(Pst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pst.forEach(t),sor=i(Nl),gc=n(Nl,"P",{});var $z=s(gc);lor=r($z,`Note:
Loading a model from its configuration file does `),ige=n($z,"STRONG",{});var $st=s(ige);ior=r($st,"not"),$st.forEach(t),dor=r($z,` load the model weights. It only affects the
model\u2019s configuration. Use `),dge=n($z,"CODE",{});var Ist=s(dge);cor=r(Ist,"from_pretrained()"),Ist.forEach(t),mor=r($z,"to load the model weights."),$z.forEach(t),gor=i(Nl),cge=n(Nl,"P",{});var Dst=s(cge);hor=r(Dst,"Examples:"),Dst.forEach(t),por=i(Nl),m(C6.$$.fragment,Nl),Nl.forEach(t),_or=i(jl),_o=n(jl,"DIV",{class:!0});var ga=s(_o);m(M6.$$.fragment,ga),uor=i(ga),fge=n(ga,"P",{});var jst=s(fge);bor=r(jst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jst.forEach(t),vor=i(ga),gn=n(ga,"P",{});var eM=s(gn);Tor=r(eM,"The model class to instantiate is selected based on the "),mge=n(eM,"CODE",{});var Nst=s(mge);For=r(Nst,"model_type"),Nst.forEach(t),Cor=r(eM,` property of the config object (either
passed as an argument or loaded from `),gge=n(eM,"CODE",{});var qst=s(gge);Mor=r(qst,"pretrained_model_name_or_path"),qst.forEach(t),Eor=r(eM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(eM,"CODE",{});var Gst=s(hge);yor=r(Gst,"pretrained_model_name_or_path"),Gst.forEach(t),wor=r(eM,":"),eM.forEach(t),Aor=i(ga),E6=n(ga,"UL",{});var Jke=s(E6);cT=n(Jke,"LI",{});var DAe=s(cT);pge=n(DAe,"STRONG",{});var Ost=s(pge);Lor=r(Ost,"convnext"),Ost.forEach(t),Bor=r(DAe," \u2014 "),Gq=n(DAe,"A",{href:!0});var Xst=s(Gq);xor=r(Xst,"TFConvNextForImageClassification"),Xst.forEach(t),kor=r(DAe," (ConvNext model)"),DAe.forEach(t),Ror=i(Jke),fT=n(Jke,"LI",{});var jAe=s(fT);_ge=n(jAe,"STRONG",{});var Vst=s(_ge);Sor=r(Vst,"vit"),Vst.forEach(t),Por=r(jAe," \u2014 "),Oq=n(jAe,"A",{href:!0});var zst=s(Oq);$or=r(zst,"TFViTForImageClassification"),zst.forEach(t),Ior=r(jAe," (ViT model)"),jAe.forEach(t),Jke.forEach(t),Dor=i(ga),uge=n(ga,"P",{});var Wst=s(uge);jor=r(Wst,"Examples:"),Wst.forEach(t),Nor=i(ga),m(y6.$$.fragment,ga),ga.forEach(t),jl.forEach(t),GBe=i(c),hc=n(c,"H2",{class:!0});var Yke=s(hc);mT=n(Yke,"A",{id:!0,class:!0,href:!0});var Qst=s(mT);bge=n(Qst,"SPAN",{});var Hst=s(bge);m(w6.$$.fragment,Hst),Hst.forEach(t),Qst.forEach(t),qor=i(Yke),vge=n(Yke,"SPAN",{});var Ust=s(vge);Gor=r(Ust,"TFAutoModelForMaskedLM"),Ust.forEach(t),Yke.forEach(t),OBe=i(c),vr=n(c,"DIV",{class:!0});var ql=s(vr);m(A6.$$.fragment,ql),Oor=i(ql),pc=n(ql,"P",{});var Iz=s(pc);Xor=r(Iz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Tge=n(Iz,"CODE",{});var Jst=s(Tge);Vor=r(Jst,"from_pretrained()"),Jst.forEach(t),zor=r(Iz,"class method or the "),Fge=n(Iz,"CODE",{});var Yst=s(Fge);Wor=r(Yst,"from_config()"),Yst.forEach(t),Qor=r(Iz,`class
method.`),Iz.forEach(t),Hor=i(ql),L6=n(ql,"P",{});var Kke=s(L6);Uor=r(Kke,"This class cannot be instantiated directly using "),Cge=n(Kke,"CODE",{});var Kst=s(Cge);Jor=r(Kst,"__init__()"),Kst.forEach(t),Yor=r(Kke," (throws an error)."),Kke.forEach(t),Kor=i(ql),mt=n(ql,"DIV",{class:!0});var Gl=s(mt);m(B6.$$.fragment,Gl),Zor=i(Gl),Mge=n(Gl,"P",{});var Zst=s(Mge);err=r(Zst,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zst.forEach(t),orr=i(Gl),_c=n(Gl,"P",{});var Dz=s(_c);rrr=r(Dz,`Note:
Loading a model from its configuration file does `),Ege=n(Dz,"STRONG",{});var elt=s(Ege);trr=r(elt,"not"),elt.forEach(t),arr=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),yge=n(Dz,"CODE",{});var olt=s(yge);nrr=r(olt,"from_pretrained()"),olt.forEach(t),srr=r(Dz,"to load the model weights."),Dz.forEach(t),lrr=i(Gl),wge=n(Gl,"P",{});var rlt=s(wge);irr=r(rlt,"Examples:"),rlt.forEach(t),drr=i(Gl),m(x6.$$.fragment,Gl),Gl.forEach(t),crr=i(ql),uo=n(ql,"DIV",{class:!0});var ha=s(uo);m(k6.$$.fragment,ha),frr=i(ha),Age=n(ha,"P",{});var tlt=s(Age);mrr=r(tlt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tlt.forEach(t),grr=i(ha),hn=n(ha,"P",{});var oM=s(hn);hrr=r(oM,"The model class to instantiate is selected based on the "),Lge=n(oM,"CODE",{});var alt=s(Lge);prr=r(alt,"model_type"),alt.forEach(t),_rr=r(oM,` property of the config object (either
passed as an argument or loaded from `),Bge=n(oM,"CODE",{});var nlt=s(Bge);urr=r(nlt,"pretrained_model_name_or_path"),nlt.forEach(t),brr=r(oM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xge=n(oM,"CODE",{});var slt=s(xge);vrr=r(slt,"pretrained_model_name_or_path"),slt.forEach(t),Trr=r(oM,":"),oM.forEach(t),Frr=i(ha),Y=n(ha,"UL",{});var ee=s(Y);gT=n(ee,"LI",{});var NAe=s(gT);kge=n(NAe,"STRONG",{});var llt=s(kge);Crr=r(llt,"albert"),llt.forEach(t),Mrr=r(NAe," \u2014 "),Xq=n(NAe,"A",{href:!0});var ilt=s(Xq);Err=r(ilt,"TFAlbertForMaskedLM"),ilt.forEach(t),yrr=r(NAe," (ALBERT model)"),NAe.forEach(t),wrr=i(ee),hT=n(ee,"LI",{});var qAe=s(hT);Rge=n(qAe,"STRONG",{});var dlt=s(Rge);Arr=r(dlt,"bert"),dlt.forEach(t),Lrr=r(qAe," \u2014 "),Vq=n(qAe,"A",{href:!0});var clt=s(Vq);Brr=r(clt,"TFBertForMaskedLM"),clt.forEach(t),xrr=r(qAe," (BERT model)"),qAe.forEach(t),krr=i(ee),pT=n(ee,"LI",{});var GAe=s(pT);Sge=n(GAe,"STRONG",{});var flt=s(Sge);Rrr=r(flt,"camembert"),flt.forEach(t),Srr=r(GAe," \u2014 "),zq=n(GAe,"A",{href:!0});var mlt=s(zq);Prr=r(mlt,"TFCamembertForMaskedLM"),mlt.forEach(t),$rr=r(GAe," (CamemBERT model)"),GAe.forEach(t),Irr=i(ee),_T=n(ee,"LI",{});var OAe=s(_T);Pge=n(OAe,"STRONG",{});var glt=s(Pge);Drr=r(glt,"convbert"),glt.forEach(t),jrr=r(OAe," \u2014 "),Wq=n(OAe,"A",{href:!0});var hlt=s(Wq);Nrr=r(hlt,"TFConvBertForMaskedLM"),hlt.forEach(t),qrr=r(OAe," (ConvBERT model)"),OAe.forEach(t),Grr=i(ee),uT=n(ee,"LI",{});var XAe=s(uT);$ge=n(XAe,"STRONG",{});var plt=s($ge);Orr=r(plt,"deberta"),plt.forEach(t),Xrr=r(XAe," \u2014 "),Qq=n(XAe,"A",{href:!0});var _lt=s(Qq);Vrr=r(_lt,"TFDebertaForMaskedLM"),_lt.forEach(t),zrr=r(XAe," (DeBERTa model)"),XAe.forEach(t),Wrr=i(ee),bT=n(ee,"LI",{});var VAe=s(bT);Ige=n(VAe,"STRONG",{});var ult=s(Ige);Qrr=r(ult,"deberta-v2"),ult.forEach(t),Hrr=r(VAe," \u2014 "),Hq=n(VAe,"A",{href:!0});var blt=s(Hq);Urr=r(blt,"TFDebertaV2ForMaskedLM"),blt.forEach(t),Jrr=r(VAe," (DeBERTa-v2 model)"),VAe.forEach(t),Yrr=i(ee),vT=n(ee,"LI",{});var zAe=s(vT);Dge=n(zAe,"STRONG",{});var vlt=s(Dge);Krr=r(vlt,"distilbert"),vlt.forEach(t),Zrr=r(zAe," \u2014 "),Uq=n(zAe,"A",{href:!0});var Tlt=s(Uq);etr=r(Tlt,"TFDistilBertForMaskedLM"),Tlt.forEach(t),otr=r(zAe," (DistilBERT model)"),zAe.forEach(t),rtr=i(ee),TT=n(ee,"LI",{});var WAe=s(TT);jge=n(WAe,"STRONG",{});var Flt=s(jge);ttr=r(Flt,"electra"),Flt.forEach(t),atr=r(WAe," \u2014 "),Jq=n(WAe,"A",{href:!0});var Clt=s(Jq);ntr=r(Clt,"TFElectraForMaskedLM"),Clt.forEach(t),str=r(WAe," (ELECTRA model)"),WAe.forEach(t),ltr=i(ee),FT=n(ee,"LI",{});var QAe=s(FT);Nge=n(QAe,"STRONG",{});var Mlt=s(Nge);itr=r(Mlt,"flaubert"),Mlt.forEach(t),dtr=r(QAe," \u2014 "),Yq=n(QAe,"A",{href:!0});var Elt=s(Yq);ctr=r(Elt,"TFFlaubertWithLMHeadModel"),Elt.forEach(t),ftr=r(QAe," (FlauBERT model)"),QAe.forEach(t),mtr=i(ee),CT=n(ee,"LI",{});var HAe=s(CT);qge=n(HAe,"STRONG",{});var ylt=s(qge);gtr=r(ylt,"funnel"),ylt.forEach(t),htr=r(HAe," \u2014 "),Kq=n(HAe,"A",{href:!0});var wlt=s(Kq);ptr=r(wlt,"TFFunnelForMaskedLM"),wlt.forEach(t),_tr=r(HAe," (Funnel Transformer model)"),HAe.forEach(t),utr=i(ee),MT=n(ee,"LI",{});var UAe=s(MT);Gge=n(UAe,"STRONG",{});var Alt=s(Gge);btr=r(Alt,"layoutlm"),Alt.forEach(t),vtr=r(UAe," \u2014 "),Zq=n(UAe,"A",{href:!0});var Llt=s(Zq);Ttr=r(Llt,"TFLayoutLMForMaskedLM"),Llt.forEach(t),Ftr=r(UAe," (LayoutLM model)"),UAe.forEach(t),Ctr=i(ee),ET=n(ee,"LI",{});var JAe=s(ET);Oge=n(JAe,"STRONG",{});var Blt=s(Oge);Mtr=r(Blt,"longformer"),Blt.forEach(t),Etr=r(JAe," \u2014 "),eG=n(JAe,"A",{href:!0});var xlt=s(eG);ytr=r(xlt,"TFLongformerForMaskedLM"),xlt.forEach(t),wtr=r(JAe," (Longformer model)"),JAe.forEach(t),Atr=i(ee),yT=n(ee,"LI",{});var YAe=s(yT);Xge=n(YAe,"STRONG",{});var klt=s(Xge);Ltr=r(klt,"mobilebert"),klt.forEach(t),Btr=r(YAe," \u2014 "),oG=n(YAe,"A",{href:!0});var Rlt=s(oG);xtr=r(Rlt,"TFMobileBertForMaskedLM"),Rlt.forEach(t),ktr=r(YAe," (MobileBERT model)"),YAe.forEach(t),Rtr=i(ee),wT=n(ee,"LI",{});var KAe=s(wT);Vge=n(KAe,"STRONG",{});var Slt=s(Vge);Str=r(Slt,"mpnet"),Slt.forEach(t),Ptr=r(KAe," \u2014 "),rG=n(KAe,"A",{href:!0});var Plt=s(rG);$tr=r(Plt,"TFMPNetForMaskedLM"),Plt.forEach(t),Itr=r(KAe," (MPNet model)"),KAe.forEach(t),Dtr=i(ee),AT=n(ee,"LI",{});var ZAe=s(AT);zge=n(ZAe,"STRONG",{});var $lt=s(zge);jtr=r($lt,"rembert"),$lt.forEach(t),Ntr=r(ZAe," \u2014 "),tG=n(ZAe,"A",{href:!0});var Ilt=s(tG);qtr=r(Ilt,"TFRemBertForMaskedLM"),Ilt.forEach(t),Gtr=r(ZAe," (RemBERT model)"),ZAe.forEach(t),Otr=i(ee),LT=n(ee,"LI",{});var e0e=s(LT);Wge=n(e0e,"STRONG",{});var Dlt=s(Wge);Xtr=r(Dlt,"roberta"),Dlt.forEach(t),Vtr=r(e0e," \u2014 "),aG=n(e0e,"A",{href:!0});var jlt=s(aG);ztr=r(jlt,"TFRobertaForMaskedLM"),jlt.forEach(t),Wtr=r(e0e," (RoBERTa model)"),e0e.forEach(t),Qtr=i(ee),BT=n(ee,"LI",{});var o0e=s(BT);Qge=n(o0e,"STRONG",{});var Nlt=s(Qge);Htr=r(Nlt,"roformer"),Nlt.forEach(t),Utr=r(o0e," \u2014 "),nG=n(o0e,"A",{href:!0});var qlt=s(nG);Jtr=r(qlt,"TFRoFormerForMaskedLM"),qlt.forEach(t),Ytr=r(o0e," (RoFormer model)"),o0e.forEach(t),Ktr=i(ee),xT=n(ee,"LI",{});var r0e=s(xT);Hge=n(r0e,"STRONG",{});var Glt=s(Hge);Ztr=r(Glt,"tapas"),Glt.forEach(t),ear=r(r0e," \u2014 "),sG=n(r0e,"A",{href:!0});var Olt=s(sG);oar=r(Olt,"TFTapasForMaskedLM"),Olt.forEach(t),rar=r(r0e," (TAPAS model)"),r0e.forEach(t),tar=i(ee),kT=n(ee,"LI",{});var t0e=s(kT);Uge=n(t0e,"STRONG",{});var Xlt=s(Uge);aar=r(Xlt,"xlm"),Xlt.forEach(t),nar=r(t0e," \u2014 "),lG=n(t0e,"A",{href:!0});var Vlt=s(lG);sar=r(Vlt,"TFXLMWithLMHeadModel"),Vlt.forEach(t),lar=r(t0e," (XLM model)"),t0e.forEach(t),iar=i(ee),RT=n(ee,"LI",{});var a0e=s(RT);Jge=n(a0e,"STRONG",{});var zlt=s(Jge);dar=r(zlt,"xlm-roberta"),zlt.forEach(t),car=r(a0e," \u2014 "),iG=n(a0e,"A",{href:!0});var Wlt=s(iG);far=r(Wlt,"TFXLMRobertaForMaskedLM"),Wlt.forEach(t),mar=r(a0e," (XLM-RoBERTa model)"),a0e.forEach(t),ee.forEach(t),gar=i(ha),Yge=n(ha,"P",{});var Qlt=s(Yge);har=r(Qlt,"Examples:"),Qlt.forEach(t),par=i(ha),m(R6.$$.fragment,ha),ha.forEach(t),ql.forEach(t),XBe=i(c),uc=n(c,"H2",{class:!0});var Zke=s(uc);ST=n(Zke,"A",{id:!0,class:!0,href:!0});var Hlt=s(ST);Kge=n(Hlt,"SPAN",{});var Ult=s(Kge);m(S6.$$.fragment,Ult),Ult.forEach(t),Hlt.forEach(t),_ar=i(Zke),Zge=n(Zke,"SPAN",{});var Jlt=s(Zge);uar=r(Jlt,"TFAutoModelForSeq2SeqLM"),Jlt.forEach(t),Zke.forEach(t),VBe=i(c),Tr=n(c,"DIV",{class:!0});var Ol=s(Tr);m(P6.$$.fragment,Ol),bar=i(Ol),bc=n(Ol,"P",{});var jz=s(bc);Tar=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ehe=n(jz,"CODE",{});var Ylt=s(ehe);Far=r(Ylt,"from_pretrained()"),Ylt.forEach(t),Car=r(jz,"class method or the "),ohe=n(jz,"CODE",{});var Klt=s(ohe);Mar=r(Klt,"from_config()"),Klt.forEach(t),Ear=r(jz,`class
method.`),jz.forEach(t),yar=i(Ol),$6=n(Ol,"P",{});var eRe=s($6);war=r(eRe,"This class cannot be instantiated directly using "),rhe=n(eRe,"CODE",{});var Zlt=s(rhe);Aar=r(Zlt,"__init__()"),Zlt.forEach(t),Lar=r(eRe," (throws an error)."),eRe.forEach(t),Bar=i(Ol),gt=n(Ol,"DIV",{class:!0});var Xl=s(gt);m(I6.$$.fragment,Xl),xar=i(Xl),the=n(Xl,"P",{});var eit=s(the);kar=r(eit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),eit.forEach(t),Rar=i(Xl),vc=n(Xl,"P",{});var Nz=s(vc);Sar=r(Nz,`Note:
Loading a model from its configuration file does `),ahe=n(Nz,"STRONG",{});var oit=s(ahe);Par=r(oit,"not"),oit.forEach(t),$ar=r(Nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),nhe=n(Nz,"CODE",{});var rit=s(nhe);Iar=r(rit,"from_pretrained()"),rit.forEach(t),Dar=r(Nz,"to load the model weights."),Nz.forEach(t),jar=i(Xl),she=n(Xl,"P",{});var tit=s(she);Nar=r(tit,"Examples:"),tit.forEach(t),qar=i(Xl),m(D6.$$.fragment,Xl),Xl.forEach(t),Gar=i(Ol),bo=n(Ol,"DIV",{class:!0});var pa=s(bo);m(j6.$$.fragment,pa),Oar=i(pa),lhe=n(pa,"P",{});var ait=s(lhe);Xar=r(ait,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ait.forEach(t),Var=i(pa),pn=n(pa,"P",{});var rM=s(pn);zar=r(rM,"The model class to instantiate is selected based on the "),ihe=n(rM,"CODE",{});var nit=s(ihe);War=r(nit,"model_type"),nit.forEach(t),Qar=r(rM,` property of the config object (either
passed as an argument or loaded from `),dhe=n(rM,"CODE",{});var sit=s(dhe);Har=r(sit,"pretrained_model_name_or_path"),sit.forEach(t),Uar=r(rM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(rM,"CODE",{});var lit=s(che);Jar=r(lit,"pretrained_model_name_or_path"),lit.forEach(t),Yar=r(rM,":"),rM.forEach(t),Kar=i(pa),pe=n(pa,"UL",{});var Ee=s(pe);PT=n(Ee,"LI",{});var n0e=s(PT);fhe=n(n0e,"STRONG",{});var iit=s(fhe);Zar=r(iit,"bart"),iit.forEach(t),enr=r(n0e," \u2014 "),dG=n(n0e,"A",{href:!0});var dit=s(dG);onr=r(dit,"TFBartForConditionalGeneration"),dit.forEach(t),rnr=r(n0e," (BART model)"),n0e.forEach(t),tnr=i(Ee),$T=n(Ee,"LI",{});var s0e=s($T);mhe=n(s0e,"STRONG",{});var cit=s(mhe);anr=r(cit,"blenderbot"),cit.forEach(t),nnr=r(s0e," \u2014 "),cG=n(s0e,"A",{href:!0});var fit=s(cG);snr=r(fit,"TFBlenderbotForConditionalGeneration"),fit.forEach(t),lnr=r(s0e," (Blenderbot model)"),s0e.forEach(t),inr=i(Ee),IT=n(Ee,"LI",{});var l0e=s(IT);ghe=n(l0e,"STRONG",{});var mit=s(ghe);dnr=r(mit,"blenderbot-small"),mit.forEach(t),cnr=r(l0e," \u2014 "),fG=n(l0e,"A",{href:!0});var git=s(fG);fnr=r(git,"TFBlenderbotSmallForConditionalGeneration"),git.forEach(t),mnr=r(l0e," (BlenderbotSmall model)"),l0e.forEach(t),gnr=i(Ee),DT=n(Ee,"LI",{});var i0e=s(DT);hhe=n(i0e,"STRONG",{});var hit=s(hhe);hnr=r(hit,"encoder-decoder"),hit.forEach(t),pnr=r(i0e," \u2014 "),mG=n(i0e,"A",{href:!0});var pit=s(mG);_nr=r(pit,"TFEncoderDecoderModel"),pit.forEach(t),unr=r(i0e," (Encoder decoder model)"),i0e.forEach(t),bnr=i(Ee),jT=n(Ee,"LI",{});var d0e=s(jT);phe=n(d0e,"STRONG",{});var _it=s(phe);vnr=r(_it,"led"),_it.forEach(t),Tnr=r(d0e," \u2014 "),gG=n(d0e,"A",{href:!0});var uit=s(gG);Fnr=r(uit,"TFLEDForConditionalGeneration"),uit.forEach(t),Cnr=r(d0e," (LED model)"),d0e.forEach(t),Mnr=i(Ee),NT=n(Ee,"LI",{});var c0e=s(NT);_he=n(c0e,"STRONG",{});var bit=s(_he);Enr=r(bit,"marian"),bit.forEach(t),ynr=r(c0e," \u2014 "),hG=n(c0e,"A",{href:!0});var vit=s(hG);wnr=r(vit,"TFMarianMTModel"),vit.forEach(t),Anr=r(c0e," (Marian model)"),c0e.forEach(t),Lnr=i(Ee),qT=n(Ee,"LI",{});var f0e=s(qT);uhe=n(f0e,"STRONG",{});var Tit=s(uhe);Bnr=r(Tit,"mbart"),Tit.forEach(t),xnr=r(f0e," \u2014 "),pG=n(f0e,"A",{href:!0});var Fit=s(pG);knr=r(Fit,"TFMBartForConditionalGeneration"),Fit.forEach(t),Rnr=r(f0e," (mBART model)"),f0e.forEach(t),Snr=i(Ee),GT=n(Ee,"LI",{});var m0e=s(GT);bhe=n(m0e,"STRONG",{});var Cit=s(bhe);Pnr=r(Cit,"mt5"),Cit.forEach(t),$nr=r(m0e," \u2014 "),_G=n(m0e,"A",{href:!0});var Mit=s(_G);Inr=r(Mit,"TFMT5ForConditionalGeneration"),Mit.forEach(t),Dnr=r(m0e," (mT5 model)"),m0e.forEach(t),jnr=i(Ee),OT=n(Ee,"LI",{});var g0e=s(OT);vhe=n(g0e,"STRONG",{});var Eit=s(vhe);Nnr=r(Eit,"pegasus"),Eit.forEach(t),qnr=r(g0e," \u2014 "),uG=n(g0e,"A",{href:!0});var yit=s(uG);Gnr=r(yit,"TFPegasusForConditionalGeneration"),yit.forEach(t),Onr=r(g0e," (Pegasus model)"),g0e.forEach(t),Xnr=i(Ee),XT=n(Ee,"LI",{});var h0e=s(XT);The=n(h0e,"STRONG",{});var wit=s(The);Vnr=r(wit,"t5"),wit.forEach(t),znr=r(h0e," \u2014 "),bG=n(h0e,"A",{href:!0});var Ait=s(bG);Wnr=r(Ait,"TFT5ForConditionalGeneration"),Ait.forEach(t),Qnr=r(h0e," (T5 model)"),h0e.forEach(t),Ee.forEach(t),Hnr=i(pa),Fhe=n(pa,"P",{});var Lit=s(Fhe);Unr=r(Lit,"Examples:"),Lit.forEach(t),Jnr=i(pa),m(N6.$$.fragment,pa),pa.forEach(t),Ol.forEach(t),zBe=i(c),Tc=n(c,"H2",{class:!0});var oRe=s(Tc);VT=n(oRe,"A",{id:!0,class:!0,href:!0});var Bit=s(VT);Che=n(Bit,"SPAN",{});var xit=s(Che);m(q6.$$.fragment,xit),xit.forEach(t),Bit.forEach(t),Ynr=i(oRe),Mhe=n(oRe,"SPAN",{});var kit=s(Mhe);Knr=r(kit,"TFAutoModelForSequenceClassification"),kit.forEach(t),oRe.forEach(t),WBe=i(c),Fr=n(c,"DIV",{class:!0});var Vl=s(Fr);m(G6.$$.fragment,Vl),Znr=i(Vl),Fc=n(Vl,"P",{});var qz=s(Fc);esr=r(qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ehe=n(qz,"CODE",{});var Rit=s(Ehe);osr=r(Rit,"from_pretrained()"),Rit.forEach(t),rsr=r(qz,"class method or the "),yhe=n(qz,"CODE",{});var Sit=s(yhe);tsr=r(Sit,"from_config()"),Sit.forEach(t),asr=r(qz,`class
method.`),qz.forEach(t),nsr=i(Vl),O6=n(Vl,"P",{});var rRe=s(O6);ssr=r(rRe,"This class cannot be instantiated directly using "),whe=n(rRe,"CODE",{});var Pit=s(whe);lsr=r(Pit,"__init__()"),Pit.forEach(t),isr=r(rRe," (throws an error)."),rRe.forEach(t),dsr=i(Vl),ht=n(Vl,"DIV",{class:!0});var zl=s(ht);m(X6.$$.fragment,zl),csr=i(zl),Ahe=n(zl,"P",{});var $it=s(Ahe);fsr=r($it,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$it.forEach(t),msr=i(zl),Cc=n(zl,"P",{});var Gz=s(Cc);gsr=r(Gz,`Note:
Loading a model from its configuration file does `),Lhe=n(Gz,"STRONG",{});var Iit=s(Lhe);hsr=r(Iit,"not"),Iit.forEach(t),psr=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bhe=n(Gz,"CODE",{});var Dit=s(Bhe);_sr=r(Dit,"from_pretrained()"),Dit.forEach(t),usr=r(Gz,"to load the model weights."),Gz.forEach(t),bsr=i(zl),xhe=n(zl,"P",{});var jit=s(xhe);vsr=r(jit,"Examples:"),jit.forEach(t),Tsr=i(zl),m(V6.$$.fragment,zl),zl.forEach(t),Fsr=i(Vl),vo=n(Vl,"DIV",{class:!0});var _a=s(vo);m(z6.$$.fragment,_a),Csr=i(_a),khe=n(_a,"P",{});var Nit=s(khe);Msr=r(Nit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Nit.forEach(t),Esr=i(_a),_n=n(_a,"P",{});var tM=s(_n);ysr=r(tM,"The model class to instantiate is selected based on the "),Rhe=n(tM,"CODE",{});var qit=s(Rhe);wsr=r(qit,"model_type"),qit.forEach(t),Asr=r(tM,` property of the config object (either
passed as an argument or loaded from `),She=n(tM,"CODE",{});var Git=s(She);Lsr=r(Git,"pretrained_model_name_or_path"),Git.forEach(t),Bsr=r(tM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Phe=n(tM,"CODE",{});var Oit=s(Phe);xsr=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),ksr=r(tM,":"),tM.forEach(t),Rsr=i(_a),X=n(_a,"UL",{});var W=s(X);zT=n(W,"LI",{});var p0e=s(zT);$he=n(p0e,"STRONG",{});var Xit=s($he);Ssr=r(Xit,"albert"),Xit.forEach(t),Psr=r(p0e," \u2014 "),vG=n(p0e,"A",{href:!0});var Vit=s(vG);$sr=r(Vit,"TFAlbertForSequenceClassification"),Vit.forEach(t),Isr=r(p0e," (ALBERT model)"),p0e.forEach(t),Dsr=i(W),WT=n(W,"LI",{});var _0e=s(WT);Ihe=n(_0e,"STRONG",{});var zit=s(Ihe);jsr=r(zit,"bert"),zit.forEach(t),Nsr=r(_0e," \u2014 "),TG=n(_0e,"A",{href:!0});var Wit=s(TG);qsr=r(Wit,"TFBertForSequenceClassification"),Wit.forEach(t),Gsr=r(_0e," (BERT model)"),_0e.forEach(t),Osr=i(W),QT=n(W,"LI",{});var u0e=s(QT);Dhe=n(u0e,"STRONG",{});var Qit=s(Dhe);Xsr=r(Qit,"camembert"),Qit.forEach(t),Vsr=r(u0e," \u2014 "),FG=n(u0e,"A",{href:!0});var Hit=s(FG);zsr=r(Hit,"TFCamembertForSequenceClassification"),Hit.forEach(t),Wsr=r(u0e," (CamemBERT model)"),u0e.forEach(t),Qsr=i(W),HT=n(W,"LI",{});var b0e=s(HT);jhe=n(b0e,"STRONG",{});var Uit=s(jhe);Hsr=r(Uit,"convbert"),Uit.forEach(t),Usr=r(b0e," \u2014 "),CG=n(b0e,"A",{href:!0});var Jit=s(CG);Jsr=r(Jit,"TFConvBertForSequenceClassification"),Jit.forEach(t),Ysr=r(b0e," (ConvBERT model)"),b0e.forEach(t),Ksr=i(W),UT=n(W,"LI",{});var v0e=s(UT);Nhe=n(v0e,"STRONG",{});var Yit=s(Nhe);Zsr=r(Yit,"ctrl"),Yit.forEach(t),elr=r(v0e," \u2014 "),MG=n(v0e,"A",{href:!0});var Kit=s(MG);olr=r(Kit,"TFCTRLForSequenceClassification"),Kit.forEach(t),rlr=r(v0e," (CTRL model)"),v0e.forEach(t),tlr=i(W),JT=n(W,"LI",{});var T0e=s(JT);qhe=n(T0e,"STRONG",{});var Zit=s(qhe);alr=r(Zit,"deberta"),Zit.forEach(t),nlr=r(T0e," \u2014 "),EG=n(T0e,"A",{href:!0});var edt=s(EG);slr=r(edt,"TFDebertaForSequenceClassification"),edt.forEach(t),llr=r(T0e," (DeBERTa model)"),T0e.forEach(t),ilr=i(W),YT=n(W,"LI",{});var F0e=s(YT);Ghe=n(F0e,"STRONG",{});var odt=s(Ghe);dlr=r(odt,"deberta-v2"),odt.forEach(t),clr=r(F0e," \u2014 "),yG=n(F0e,"A",{href:!0});var rdt=s(yG);flr=r(rdt,"TFDebertaV2ForSequenceClassification"),rdt.forEach(t),mlr=r(F0e," (DeBERTa-v2 model)"),F0e.forEach(t),glr=i(W),KT=n(W,"LI",{});var C0e=s(KT);Ohe=n(C0e,"STRONG",{});var tdt=s(Ohe);hlr=r(tdt,"distilbert"),tdt.forEach(t),plr=r(C0e," \u2014 "),wG=n(C0e,"A",{href:!0});var adt=s(wG);_lr=r(adt,"TFDistilBertForSequenceClassification"),adt.forEach(t),ulr=r(C0e," (DistilBERT model)"),C0e.forEach(t),blr=i(W),ZT=n(W,"LI",{});var M0e=s(ZT);Xhe=n(M0e,"STRONG",{});var ndt=s(Xhe);vlr=r(ndt,"electra"),ndt.forEach(t),Tlr=r(M0e," \u2014 "),AG=n(M0e,"A",{href:!0});var sdt=s(AG);Flr=r(sdt,"TFElectraForSequenceClassification"),sdt.forEach(t),Clr=r(M0e," (ELECTRA model)"),M0e.forEach(t),Mlr=i(W),eF=n(W,"LI",{});var E0e=s(eF);Vhe=n(E0e,"STRONG",{});var ldt=s(Vhe);Elr=r(ldt,"flaubert"),ldt.forEach(t),ylr=r(E0e," \u2014 "),LG=n(E0e,"A",{href:!0});var idt=s(LG);wlr=r(idt,"TFFlaubertForSequenceClassification"),idt.forEach(t),Alr=r(E0e," (FlauBERT model)"),E0e.forEach(t),Llr=i(W),oF=n(W,"LI",{});var y0e=s(oF);zhe=n(y0e,"STRONG",{});var ddt=s(zhe);Blr=r(ddt,"funnel"),ddt.forEach(t),xlr=r(y0e," \u2014 "),BG=n(y0e,"A",{href:!0});var cdt=s(BG);klr=r(cdt,"TFFunnelForSequenceClassification"),cdt.forEach(t),Rlr=r(y0e," (Funnel Transformer model)"),y0e.forEach(t),Slr=i(W),rF=n(W,"LI",{});var w0e=s(rF);Whe=n(w0e,"STRONG",{});var fdt=s(Whe);Plr=r(fdt,"gpt2"),fdt.forEach(t),$lr=r(w0e," \u2014 "),xG=n(w0e,"A",{href:!0});var mdt=s(xG);Ilr=r(mdt,"TFGPT2ForSequenceClassification"),mdt.forEach(t),Dlr=r(w0e," (OpenAI GPT-2 model)"),w0e.forEach(t),jlr=i(W),tF=n(W,"LI",{});var A0e=s(tF);Qhe=n(A0e,"STRONG",{});var gdt=s(Qhe);Nlr=r(gdt,"layoutlm"),gdt.forEach(t),qlr=r(A0e," \u2014 "),kG=n(A0e,"A",{href:!0});var hdt=s(kG);Glr=r(hdt,"TFLayoutLMForSequenceClassification"),hdt.forEach(t),Olr=r(A0e," (LayoutLM model)"),A0e.forEach(t),Xlr=i(W),aF=n(W,"LI",{});var L0e=s(aF);Hhe=n(L0e,"STRONG",{});var pdt=s(Hhe);Vlr=r(pdt,"longformer"),pdt.forEach(t),zlr=r(L0e," \u2014 "),RG=n(L0e,"A",{href:!0});var _dt=s(RG);Wlr=r(_dt,"TFLongformerForSequenceClassification"),_dt.forEach(t),Qlr=r(L0e," (Longformer model)"),L0e.forEach(t),Hlr=i(W),nF=n(W,"LI",{});var B0e=s(nF);Uhe=n(B0e,"STRONG",{});var udt=s(Uhe);Ulr=r(udt,"mobilebert"),udt.forEach(t),Jlr=r(B0e," \u2014 "),SG=n(B0e,"A",{href:!0});var bdt=s(SG);Ylr=r(bdt,"TFMobileBertForSequenceClassification"),bdt.forEach(t),Klr=r(B0e," (MobileBERT model)"),B0e.forEach(t),Zlr=i(W),sF=n(W,"LI",{});var x0e=s(sF);Jhe=n(x0e,"STRONG",{});var vdt=s(Jhe);eir=r(vdt,"mpnet"),vdt.forEach(t),oir=r(x0e," \u2014 "),PG=n(x0e,"A",{href:!0});var Tdt=s(PG);rir=r(Tdt,"TFMPNetForSequenceClassification"),Tdt.forEach(t),tir=r(x0e," (MPNet model)"),x0e.forEach(t),air=i(W),lF=n(W,"LI",{});var k0e=s(lF);Yhe=n(k0e,"STRONG",{});var Fdt=s(Yhe);nir=r(Fdt,"openai-gpt"),Fdt.forEach(t),sir=r(k0e," \u2014 "),$G=n(k0e,"A",{href:!0});var Cdt=s($G);lir=r(Cdt,"TFOpenAIGPTForSequenceClassification"),Cdt.forEach(t),iir=r(k0e," (OpenAI GPT model)"),k0e.forEach(t),dir=i(W),iF=n(W,"LI",{});var R0e=s(iF);Khe=n(R0e,"STRONG",{});var Mdt=s(Khe);cir=r(Mdt,"rembert"),Mdt.forEach(t),fir=r(R0e," \u2014 "),IG=n(R0e,"A",{href:!0});var Edt=s(IG);mir=r(Edt,"TFRemBertForSequenceClassification"),Edt.forEach(t),gir=r(R0e," (RemBERT model)"),R0e.forEach(t),hir=i(W),dF=n(W,"LI",{});var S0e=s(dF);Zhe=n(S0e,"STRONG",{});var ydt=s(Zhe);pir=r(ydt,"roberta"),ydt.forEach(t),_ir=r(S0e," \u2014 "),DG=n(S0e,"A",{href:!0});var wdt=s(DG);uir=r(wdt,"TFRobertaForSequenceClassification"),wdt.forEach(t),bir=r(S0e," (RoBERTa model)"),S0e.forEach(t),vir=i(W),cF=n(W,"LI",{});var P0e=s(cF);epe=n(P0e,"STRONG",{});var Adt=s(epe);Tir=r(Adt,"roformer"),Adt.forEach(t),Fir=r(P0e," \u2014 "),jG=n(P0e,"A",{href:!0});var Ldt=s(jG);Cir=r(Ldt,"TFRoFormerForSequenceClassification"),Ldt.forEach(t),Mir=r(P0e," (RoFormer model)"),P0e.forEach(t),Eir=i(W),fF=n(W,"LI",{});var $0e=s(fF);ope=n($0e,"STRONG",{});var Bdt=s(ope);yir=r(Bdt,"tapas"),Bdt.forEach(t),wir=r($0e," \u2014 "),NG=n($0e,"A",{href:!0});var xdt=s(NG);Air=r(xdt,"TFTapasForSequenceClassification"),xdt.forEach(t),Lir=r($0e," (TAPAS model)"),$0e.forEach(t),Bir=i(W),mF=n(W,"LI",{});var I0e=s(mF);rpe=n(I0e,"STRONG",{});var kdt=s(rpe);xir=r(kdt,"transfo-xl"),kdt.forEach(t),kir=r(I0e," \u2014 "),qG=n(I0e,"A",{href:!0});var Rdt=s(qG);Rir=r(Rdt,"TFTransfoXLForSequenceClassification"),Rdt.forEach(t),Sir=r(I0e," (Transformer-XL model)"),I0e.forEach(t),Pir=i(W),gF=n(W,"LI",{});var D0e=s(gF);tpe=n(D0e,"STRONG",{});var Sdt=s(tpe);$ir=r(Sdt,"xlm"),Sdt.forEach(t),Iir=r(D0e," \u2014 "),GG=n(D0e,"A",{href:!0});var Pdt=s(GG);Dir=r(Pdt,"TFXLMForSequenceClassification"),Pdt.forEach(t),jir=r(D0e," (XLM model)"),D0e.forEach(t),Nir=i(W),hF=n(W,"LI",{});var j0e=s(hF);ape=n(j0e,"STRONG",{});var $dt=s(ape);qir=r($dt,"xlm-roberta"),$dt.forEach(t),Gir=r(j0e," \u2014 "),OG=n(j0e,"A",{href:!0});var Idt=s(OG);Oir=r(Idt,"TFXLMRobertaForSequenceClassification"),Idt.forEach(t),Xir=r(j0e," (XLM-RoBERTa model)"),j0e.forEach(t),Vir=i(W),pF=n(W,"LI",{});var N0e=s(pF);npe=n(N0e,"STRONG",{});var Ddt=s(npe);zir=r(Ddt,"xlnet"),Ddt.forEach(t),Wir=r(N0e," \u2014 "),XG=n(N0e,"A",{href:!0});var jdt=s(XG);Qir=r(jdt,"TFXLNetForSequenceClassification"),jdt.forEach(t),Hir=r(N0e," (XLNet model)"),N0e.forEach(t),W.forEach(t),Uir=i(_a),spe=n(_a,"P",{});var Ndt=s(spe);Jir=r(Ndt,"Examples:"),Ndt.forEach(t),Yir=i(_a),m(W6.$$.fragment,_a),_a.forEach(t),Vl.forEach(t),QBe=i(c),Mc=n(c,"H2",{class:!0});var tRe=s(Mc);_F=n(tRe,"A",{id:!0,class:!0,href:!0});var qdt=s(_F);lpe=n(qdt,"SPAN",{});var Gdt=s(lpe);m(Q6.$$.fragment,Gdt),Gdt.forEach(t),qdt.forEach(t),Kir=i(tRe),ipe=n(tRe,"SPAN",{});var Odt=s(ipe);Zir=r(Odt,"TFAutoModelForMultipleChoice"),Odt.forEach(t),tRe.forEach(t),HBe=i(c),Cr=n(c,"DIV",{class:!0});var Wl=s(Cr);m(H6.$$.fragment,Wl),edr=i(Wl),Ec=n(Wl,"P",{});var Oz=s(Ec);odr=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dpe=n(Oz,"CODE",{});var Xdt=s(dpe);rdr=r(Xdt,"from_pretrained()"),Xdt.forEach(t),tdr=r(Oz,"class method or the "),cpe=n(Oz,"CODE",{});var Vdt=s(cpe);adr=r(Vdt,"from_config()"),Vdt.forEach(t),ndr=r(Oz,`class
method.`),Oz.forEach(t),sdr=i(Wl),U6=n(Wl,"P",{});var aRe=s(U6);ldr=r(aRe,"This class cannot be instantiated directly using "),fpe=n(aRe,"CODE",{});var zdt=s(fpe);idr=r(zdt,"__init__()"),zdt.forEach(t),ddr=r(aRe," (throws an error)."),aRe.forEach(t),cdr=i(Wl),pt=n(Wl,"DIV",{class:!0});var Ql=s(pt);m(J6.$$.fragment,Ql),fdr=i(Ql),mpe=n(Ql,"P",{});var Wdt=s(mpe);mdr=r(Wdt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Wdt.forEach(t),gdr=i(Ql),yc=n(Ql,"P",{});var Xz=s(yc);hdr=r(Xz,`Note:
Loading a model from its configuration file does `),gpe=n(Xz,"STRONG",{});var Qdt=s(gpe);pdr=r(Qdt,"not"),Qdt.forEach(t),_dr=r(Xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),hpe=n(Xz,"CODE",{});var Hdt=s(hpe);udr=r(Hdt,"from_pretrained()"),Hdt.forEach(t),bdr=r(Xz,"to load the model weights."),Xz.forEach(t),vdr=i(Ql),ppe=n(Ql,"P",{});var Udt=s(ppe);Tdr=r(Udt,"Examples:"),Udt.forEach(t),Fdr=i(Ql),m(Y6.$$.fragment,Ql),Ql.forEach(t),Cdr=i(Wl),To=n(Wl,"DIV",{class:!0});var ua=s(To);m(K6.$$.fragment,ua),Mdr=i(ua),_pe=n(ua,"P",{});var Jdt=s(_pe);Edr=r(Jdt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jdt.forEach(t),ydr=i(ua),un=n(ua,"P",{});var aM=s(un);wdr=r(aM,"The model class to instantiate is selected based on the "),upe=n(aM,"CODE",{});var Ydt=s(upe);Adr=r(Ydt,"model_type"),Ydt.forEach(t),Ldr=r(aM,` property of the config object (either
passed as an argument or loaded from `),bpe=n(aM,"CODE",{});var Kdt=s(bpe);Bdr=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),xdr=r(aM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(aM,"CODE",{});var Zdt=s(vpe);kdr=r(Zdt,"pretrained_model_name_or_path"),Zdt.forEach(t),Rdr=r(aM,":"),aM.forEach(t),Sdr=i(ua),te=n(ua,"UL",{});var ne=s(te);uF=n(ne,"LI",{});var q0e=s(uF);Tpe=n(q0e,"STRONG",{});var ect=s(Tpe);Pdr=r(ect,"albert"),ect.forEach(t),$dr=r(q0e," \u2014 "),VG=n(q0e,"A",{href:!0});var oct=s(VG);Idr=r(oct,"TFAlbertForMultipleChoice"),oct.forEach(t),Ddr=r(q0e," (ALBERT model)"),q0e.forEach(t),jdr=i(ne),bF=n(ne,"LI",{});var G0e=s(bF);Fpe=n(G0e,"STRONG",{});var rct=s(Fpe);Ndr=r(rct,"bert"),rct.forEach(t),qdr=r(G0e," \u2014 "),zG=n(G0e,"A",{href:!0});var tct=s(zG);Gdr=r(tct,"TFBertForMultipleChoice"),tct.forEach(t),Odr=r(G0e," (BERT model)"),G0e.forEach(t),Xdr=i(ne),vF=n(ne,"LI",{});var O0e=s(vF);Cpe=n(O0e,"STRONG",{});var act=s(Cpe);Vdr=r(act,"camembert"),act.forEach(t),zdr=r(O0e," \u2014 "),WG=n(O0e,"A",{href:!0});var nct=s(WG);Wdr=r(nct,"TFCamembertForMultipleChoice"),nct.forEach(t),Qdr=r(O0e," (CamemBERT model)"),O0e.forEach(t),Hdr=i(ne),TF=n(ne,"LI",{});var X0e=s(TF);Mpe=n(X0e,"STRONG",{});var sct=s(Mpe);Udr=r(sct,"convbert"),sct.forEach(t),Jdr=r(X0e," \u2014 "),QG=n(X0e,"A",{href:!0});var lct=s(QG);Ydr=r(lct,"TFConvBertForMultipleChoice"),lct.forEach(t),Kdr=r(X0e," (ConvBERT model)"),X0e.forEach(t),Zdr=i(ne),FF=n(ne,"LI",{});var V0e=s(FF);Epe=n(V0e,"STRONG",{});var ict=s(Epe);ecr=r(ict,"distilbert"),ict.forEach(t),ocr=r(V0e," \u2014 "),HG=n(V0e,"A",{href:!0});var dct=s(HG);rcr=r(dct,"TFDistilBertForMultipleChoice"),dct.forEach(t),tcr=r(V0e," (DistilBERT model)"),V0e.forEach(t),acr=i(ne),CF=n(ne,"LI",{});var z0e=s(CF);ype=n(z0e,"STRONG",{});var cct=s(ype);ncr=r(cct,"electra"),cct.forEach(t),scr=r(z0e," \u2014 "),UG=n(z0e,"A",{href:!0});var fct=s(UG);lcr=r(fct,"TFElectraForMultipleChoice"),fct.forEach(t),icr=r(z0e," (ELECTRA model)"),z0e.forEach(t),dcr=i(ne),MF=n(ne,"LI",{});var W0e=s(MF);wpe=n(W0e,"STRONG",{});var mct=s(wpe);ccr=r(mct,"flaubert"),mct.forEach(t),fcr=r(W0e," \u2014 "),JG=n(W0e,"A",{href:!0});var gct=s(JG);mcr=r(gct,"TFFlaubertForMultipleChoice"),gct.forEach(t),gcr=r(W0e," (FlauBERT model)"),W0e.forEach(t),hcr=i(ne),EF=n(ne,"LI",{});var Q0e=s(EF);Ape=n(Q0e,"STRONG",{});var hct=s(Ape);pcr=r(hct,"funnel"),hct.forEach(t),_cr=r(Q0e," \u2014 "),YG=n(Q0e,"A",{href:!0});var pct=s(YG);ucr=r(pct,"TFFunnelForMultipleChoice"),pct.forEach(t),bcr=r(Q0e," (Funnel Transformer model)"),Q0e.forEach(t),vcr=i(ne),yF=n(ne,"LI",{});var H0e=s(yF);Lpe=n(H0e,"STRONG",{});var _ct=s(Lpe);Tcr=r(_ct,"longformer"),_ct.forEach(t),Fcr=r(H0e," \u2014 "),KG=n(H0e,"A",{href:!0});var uct=s(KG);Ccr=r(uct,"TFLongformerForMultipleChoice"),uct.forEach(t),Mcr=r(H0e," (Longformer model)"),H0e.forEach(t),Ecr=i(ne),wF=n(ne,"LI",{});var U0e=s(wF);Bpe=n(U0e,"STRONG",{});var bct=s(Bpe);ycr=r(bct,"mobilebert"),bct.forEach(t),wcr=r(U0e," \u2014 "),ZG=n(U0e,"A",{href:!0});var vct=s(ZG);Acr=r(vct,"TFMobileBertForMultipleChoice"),vct.forEach(t),Lcr=r(U0e," (MobileBERT model)"),U0e.forEach(t),Bcr=i(ne),AF=n(ne,"LI",{});var J0e=s(AF);xpe=n(J0e,"STRONG",{});var Tct=s(xpe);xcr=r(Tct,"mpnet"),Tct.forEach(t),kcr=r(J0e," \u2014 "),eO=n(J0e,"A",{href:!0});var Fct=s(eO);Rcr=r(Fct,"TFMPNetForMultipleChoice"),Fct.forEach(t),Scr=r(J0e," (MPNet model)"),J0e.forEach(t),Pcr=i(ne),LF=n(ne,"LI",{});var Y0e=s(LF);kpe=n(Y0e,"STRONG",{});var Cct=s(kpe);$cr=r(Cct,"rembert"),Cct.forEach(t),Icr=r(Y0e," \u2014 "),oO=n(Y0e,"A",{href:!0});var Mct=s(oO);Dcr=r(Mct,"TFRemBertForMultipleChoice"),Mct.forEach(t),jcr=r(Y0e," (RemBERT model)"),Y0e.forEach(t),Ncr=i(ne),BF=n(ne,"LI",{});var K0e=s(BF);Rpe=n(K0e,"STRONG",{});var Ect=s(Rpe);qcr=r(Ect,"roberta"),Ect.forEach(t),Gcr=r(K0e," \u2014 "),rO=n(K0e,"A",{href:!0});var yct=s(rO);Ocr=r(yct,"TFRobertaForMultipleChoice"),yct.forEach(t),Xcr=r(K0e," (RoBERTa model)"),K0e.forEach(t),Vcr=i(ne),xF=n(ne,"LI",{});var Z0e=s(xF);Spe=n(Z0e,"STRONG",{});var wct=s(Spe);zcr=r(wct,"roformer"),wct.forEach(t),Wcr=r(Z0e," \u2014 "),tO=n(Z0e,"A",{href:!0});var Act=s(tO);Qcr=r(Act,"TFRoFormerForMultipleChoice"),Act.forEach(t),Hcr=r(Z0e," (RoFormer model)"),Z0e.forEach(t),Ucr=i(ne),kF=n(ne,"LI",{});var eLe=s(kF);Ppe=n(eLe,"STRONG",{});var Lct=s(Ppe);Jcr=r(Lct,"xlm"),Lct.forEach(t),Ycr=r(eLe," \u2014 "),aO=n(eLe,"A",{href:!0});var Bct=s(aO);Kcr=r(Bct,"TFXLMForMultipleChoice"),Bct.forEach(t),Zcr=r(eLe," (XLM model)"),eLe.forEach(t),efr=i(ne),RF=n(ne,"LI",{});var oLe=s(RF);$pe=n(oLe,"STRONG",{});var xct=s($pe);ofr=r(xct,"xlm-roberta"),xct.forEach(t),rfr=r(oLe," \u2014 "),nO=n(oLe,"A",{href:!0});var kct=s(nO);tfr=r(kct,"TFXLMRobertaForMultipleChoice"),kct.forEach(t),afr=r(oLe," (XLM-RoBERTa model)"),oLe.forEach(t),nfr=i(ne),SF=n(ne,"LI",{});var rLe=s(SF);Ipe=n(rLe,"STRONG",{});var Rct=s(Ipe);sfr=r(Rct,"xlnet"),Rct.forEach(t),lfr=r(rLe," \u2014 "),sO=n(rLe,"A",{href:!0});var Sct=s(sO);ifr=r(Sct,"TFXLNetForMultipleChoice"),Sct.forEach(t),dfr=r(rLe," (XLNet model)"),rLe.forEach(t),ne.forEach(t),cfr=i(ua),Dpe=n(ua,"P",{});var Pct=s(Dpe);ffr=r(Pct,"Examples:"),Pct.forEach(t),mfr=i(ua),m(Z6.$$.fragment,ua),ua.forEach(t),Wl.forEach(t),UBe=i(c),wc=n(c,"H2",{class:!0});var nRe=s(wc);PF=n(nRe,"A",{id:!0,class:!0,href:!0});var $ct=s(PF);jpe=n($ct,"SPAN",{});var Ict=s(jpe);m(eA.$$.fragment,Ict),Ict.forEach(t),$ct.forEach(t),gfr=i(nRe),Npe=n(nRe,"SPAN",{});var Dct=s(Npe);hfr=r(Dct,"TFAutoModelForTableQuestionAnswering"),Dct.forEach(t),nRe.forEach(t),JBe=i(c),Mr=n(c,"DIV",{class:!0});var Hl=s(Mr);m(oA.$$.fragment,Hl),pfr=i(Hl),Ac=n(Hl,"P",{});var Vz=s(Ac);_fr=r(Vz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qpe=n(Vz,"CODE",{});var jct=s(qpe);ufr=r(jct,"from_pretrained()"),jct.forEach(t),bfr=r(Vz,"class method or the "),Gpe=n(Vz,"CODE",{});var Nct=s(Gpe);vfr=r(Nct,"from_config()"),Nct.forEach(t),Tfr=r(Vz,`class
method.`),Vz.forEach(t),Ffr=i(Hl),rA=n(Hl,"P",{});var sRe=s(rA);Cfr=r(sRe,"This class cannot be instantiated directly using "),Ope=n(sRe,"CODE",{});var qct=s(Ope);Mfr=r(qct,"__init__()"),qct.forEach(t),Efr=r(sRe," (throws an error)."),sRe.forEach(t),yfr=i(Hl),_t=n(Hl,"DIV",{class:!0});var Ul=s(_t);m(tA.$$.fragment,Ul),wfr=i(Ul),Xpe=n(Ul,"P",{});var Gct=s(Xpe);Afr=r(Gct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Gct.forEach(t),Lfr=i(Ul),Lc=n(Ul,"P",{});var zz=s(Lc);Bfr=r(zz,`Note:
Loading a model from its configuration file does `),Vpe=n(zz,"STRONG",{});var Oct=s(Vpe);xfr=r(Oct,"not"),Oct.forEach(t),kfr=r(zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),zpe=n(zz,"CODE",{});var Xct=s(zpe);Rfr=r(Xct,"from_pretrained()"),Xct.forEach(t),Sfr=r(zz,"to load the model weights."),zz.forEach(t),Pfr=i(Ul),Wpe=n(Ul,"P",{});var Vct=s(Wpe);$fr=r(Vct,"Examples:"),Vct.forEach(t),Ifr=i(Ul),m(aA.$$.fragment,Ul),Ul.forEach(t),Dfr=i(Hl),Fo=n(Hl,"DIV",{class:!0});var ba=s(Fo);m(nA.$$.fragment,ba),jfr=i(ba),Qpe=n(ba,"P",{});var zct=s(Qpe);Nfr=r(zct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zct.forEach(t),qfr=i(ba),bn=n(ba,"P",{});var nM=s(bn);Gfr=r(nM,"The model class to instantiate is selected based on the "),Hpe=n(nM,"CODE",{});var Wct=s(Hpe);Ofr=r(Wct,"model_type"),Wct.forEach(t),Xfr=r(nM,` property of the config object (either
passed as an argument or loaded from `),Upe=n(nM,"CODE",{});var Qct=s(Upe);Vfr=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),zfr=r(nM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(nM,"CODE",{});var Hct=s(Jpe);Wfr=r(Hct,"pretrained_model_name_or_path"),Hct.forEach(t),Qfr=r(nM,":"),nM.forEach(t),Hfr=i(ba),Ype=n(ba,"UL",{});var Uct=s(Ype);$F=n(Uct,"LI",{});var tLe=s($F);Kpe=n(tLe,"STRONG",{});var Jct=s(Kpe);Ufr=r(Jct,"tapas"),Jct.forEach(t),Jfr=r(tLe," \u2014 "),lO=n(tLe,"A",{href:!0});var Yct=s(lO);Yfr=r(Yct,"TFTapasForQuestionAnswering"),Yct.forEach(t),Kfr=r(tLe," (TAPAS model)"),tLe.forEach(t),Uct.forEach(t),Zfr=i(ba),Zpe=n(ba,"P",{});var Kct=s(Zpe);emr=r(Kct,"Examples:"),Kct.forEach(t),omr=i(ba),m(sA.$$.fragment,ba),ba.forEach(t),Hl.forEach(t),YBe=i(c),Bc=n(c,"H2",{class:!0});var lRe=s(Bc);IF=n(lRe,"A",{id:!0,class:!0,href:!0});var Zct=s(IF);e_e=n(Zct,"SPAN",{});var eft=s(e_e);m(lA.$$.fragment,eft),eft.forEach(t),Zct.forEach(t),rmr=i(lRe),o_e=n(lRe,"SPAN",{});var oft=s(o_e);tmr=r(oft,"TFAutoModelForTokenClassification"),oft.forEach(t),lRe.forEach(t),KBe=i(c),Er=n(c,"DIV",{class:!0});var Jl=s(Er);m(iA.$$.fragment,Jl),amr=i(Jl),xc=n(Jl,"P",{});var Wz=s(xc);nmr=r(Wz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),r_e=n(Wz,"CODE",{});var rft=s(r_e);smr=r(rft,"from_pretrained()"),rft.forEach(t),lmr=r(Wz,"class method or the "),t_e=n(Wz,"CODE",{});var tft=s(t_e);imr=r(tft,"from_config()"),tft.forEach(t),dmr=r(Wz,`class
method.`),Wz.forEach(t),cmr=i(Jl),dA=n(Jl,"P",{});var iRe=s(dA);fmr=r(iRe,"This class cannot be instantiated directly using "),a_e=n(iRe,"CODE",{});var aft=s(a_e);mmr=r(aft,"__init__()"),aft.forEach(t),gmr=r(iRe," (throws an error)."),iRe.forEach(t),hmr=i(Jl),ut=n(Jl,"DIV",{class:!0});var Yl=s(ut);m(cA.$$.fragment,Yl),pmr=i(Yl),n_e=n(Yl,"P",{});var nft=s(n_e);_mr=r(nft,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nft.forEach(t),umr=i(Yl),kc=n(Yl,"P",{});var Qz=s(kc);bmr=r(Qz,`Note:
Loading a model from its configuration file does `),s_e=n(Qz,"STRONG",{});var sft=s(s_e);vmr=r(sft,"not"),sft.forEach(t),Tmr=r(Qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),l_e=n(Qz,"CODE",{});var lft=s(l_e);Fmr=r(lft,"from_pretrained()"),lft.forEach(t),Cmr=r(Qz,"to load the model weights."),Qz.forEach(t),Mmr=i(Yl),i_e=n(Yl,"P",{});var ift=s(i_e);Emr=r(ift,"Examples:"),ift.forEach(t),ymr=i(Yl),m(fA.$$.fragment,Yl),Yl.forEach(t),wmr=i(Jl),Co=n(Jl,"DIV",{class:!0});var va=s(Co);m(mA.$$.fragment,va),Amr=i(va),d_e=n(va,"P",{});var dft=s(d_e);Lmr=r(dft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dft.forEach(t),Bmr=i(va),vn=n(va,"P",{});var sM=s(vn);xmr=r(sM,"The model class to instantiate is selected based on the "),c_e=n(sM,"CODE",{});var cft=s(c_e);kmr=r(cft,"model_type"),cft.forEach(t),Rmr=r(sM,` property of the config object (either
passed as an argument or loaded from `),f_e=n(sM,"CODE",{});var fft=s(f_e);Smr=r(fft,"pretrained_model_name_or_path"),fft.forEach(t),Pmr=r(sM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m_e=n(sM,"CODE",{});var mft=s(m_e);$mr=r(mft,"pretrained_model_name_or_path"),mft.forEach(t),Imr=r(sM,":"),sM.forEach(t),Dmr=i(va),K=n(va,"UL",{});var oe=s(K);DF=n(oe,"LI",{});var aLe=s(DF);g_e=n(aLe,"STRONG",{});var gft=s(g_e);jmr=r(gft,"albert"),gft.forEach(t),Nmr=r(aLe," \u2014 "),iO=n(aLe,"A",{href:!0});var hft=s(iO);qmr=r(hft,"TFAlbertForTokenClassification"),hft.forEach(t),Gmr=r(aLe," (ALBERT model)"),aLe.forEach(t),Omr=i(oe),jF=n(oe,"LI",{});var nLe=s(jF);h_e=n(nLe,"STRONG",{});var pft=s(h_e);Xmr=r(pft,"bert"),pft.forEach(t),Vmr=r(nLe," \u2014 "),dO=n(nLe,"A",{href:!0});var _ft=s(dO);zmr=r(_ft,"TFBertForTokenClassification"),_ft.forEach(t),Wmr=r(nLe," (BERT model)"),nLe.forEach(t),Qmr=i(oe),NF=n(oe,"LI",{});var sLe=s(NF);p_e=n(sLe,"STRONG",{});var uft=s(p_e);Hmr=r(uft,"camembert"),uft.forEach(t),Umr=r(sLe," \u2014 "),cO=n(sLe,"A",{href:!0});var bft=s(cO);Jmr=r(bft,"TFCamembertForTokenClassification"),bft.forEach(t),Ymr=r(sLe," (CamemBERT model)"),sLe.forEach(t),Kmr=i(oe),qF=n(oe,"LI",{});var lLe=s(qF);__e=n(lLe,"STRONG",{});var vft=s(__e);Zmr=r(vft,"convbert"),vft.forEach(t),egr=r(lLe," \u2014 "),fO=n(lLe,"A",{href:!0});var Tft=s(fO);ogr=r(Tft,"TFConvBertForTokenClassification"),Tft.forEach(t),rgr=r(lLe," (ConvBERT model)"),lLe.forEach(t),tgr=i(oe),GF=n(oe,"LI",{});var iLe=s(GF);u_e=n(iLe,"STRONG",{});var Fft=s(u_e);agr=r(Fft,"deberta"),Fft.forEach(t),ngr=r(iLe," \u2014 "),mO=n(iLe,"A",{href:!0});var Cft=s(mO);sgr=r(Cft,"TFDebertaForTokenClassification"),Cft.forEach(t),lgr=r(iLe," (DeBERTa model)"),iLe.forEach(t),igr=i(oe),OF=n(oe,"LI",{});var dLe=s(OF);b_e=n(dLe,"STRONG",{});var Mft=s(b_e);dgr=r(Mft,"deberta-v2"),Mft.forEach(t),cgr=r(dLe," \u2014 "),gO=n(dLe,"A",{href:!0});var Eft=s(gO);fgr=r(Eft,"TFDebertaV2ForTokenClassification"),Eft.forEach(t),mgr=r(dLe," (DeBERTa-v2 model)"),dLe.forEach(t),ggr=i(oe),XF=n(oe,"LI",{});var cLe=s(XF);v_e=n(cLe,"STRONG",{});var yft=s(v_e);hgr=r(yft,"distilbert"),yft.forEach(t),pgr=r(cLe," \u2014 "),hO=n(cLe,"A",{href:!0});var wft=s(hO);_gr=r(wft,"TFDistilBertForTokenClassification"),wft.forEach(t),ugr=r(cLe," (DistilBERT model)"),cLe.forEach(t),bgr=i(oe),VF=n(oe,"LI",{});var fLe=s(VF);T_e=n(fLe,"STRONG",{});var Aft=s(T_e);vgr=r(Aft,"electra"),Aft.forEach(t),Tgr=r(fLe," \u2014 "),pO=n(fLe,"A",{href:!0});var Lft=s(pO);Fgr=r(Lft,"TFElectraForTokenClassification"),Lft.forEach(t),Cgr=r(fLe," (ELECTRA model)"),fLe.forEach(t),Mgr=i(oe),zF=n(oe,"LI",{});var mLe=s(zF);F_e=n(mLe,"STRONG",{});var Bft=s(F_e);Egr=r(Bft,"flaubert"),Bft.forEach(t),ygr=r(mLe," \u2014 "),_O=n(mLe,"A",{href:!0});var xft=s(_O);wgr=r(xft,"TFFlaubertForTokenClassification"),xft.forEach(t),Agr=r(mLe," (FlauBERT model)"),mLe.forEach(t),Lgr=i(oe),WF=n(oe,"LI",{});var gLe=s(WF);C_e=n(gLe,"STRONG",{});var kft=s(C_e);Bgr=r(kft,"funnel"),kft.forEach(t),xgr=r(gLe," \u2014 "),uO=n(gLe,"A",{href:!0});var Rft=s(uO);kgr=r(Rft,"TFFunnelForTokenClassification"),Rft.forEach(t),Rgr=r(gLe," (Funnel Transformer model)"),gLe.forEach(t),Sgr=i(oe),QF=n(oe,"LI",{});var hLe=s(QF);M_e=n(hLe,"STRONG",{});var Sft=s(M_e);Pgr=r(Sft,"layoutlm"),Sft.forEach(t),$gr=r(hLe," \u2014 "),bO=n(hLe,"A",{href:!0});var Pft=s(bO);Igr=r(Pft,"TFLayoutLMForTokenClassification"),Pft.forEach(t),Dgr=r(hLe," (LayoutLM model)"),hLe.forEach(t),jgr=i(oe),HF=n(oe,"LI",{});var pLe=s(HF);E_e=n(pLe,"STRONG",{});var $ft=s(E_e);Ngr=r($ft,"longformer"),$ft.forEach(t),qgr=r(pLe," \u2014 "),vO=n(pLe,"A",{href:!0});var Ift=s(vO);Ggr=r(Ift,"TFLongformerForTokenClassification"),Ift.forEach(t),Ogr=r(pLe," (Longformer model)"),pLe.forEach(t),Xgr=i(oe),UF=n(oe,"LI",{});var _Le=s(UF);y_e=n(_Le,"STRONG",{});var Dft=s(y_e);Vgr=r(Dft,"mobilebert"),Dft.forEach(t),zgr=r(_Le," \u2014 "),TO=n(_Le,"A",{href:!0});var jft=s(TO);Wgr=r(jft,"TFMobileBertForTokenClassification"),jft.forEach(t),Qgr=r(_Le," (MobileBERT model)"),_Le.forEach(t),Hgr=i(oe),JF=n(oe,"LI",{});var uLe=s(JF);w_e=n(uLe,"STRONG",{});var Nft=s(w_e);Ugr=r(Nft,"mpnet"),Nft.forEach(t),Jgr=r(uLe," \u2014 "),FO=n(uLe,"A",{href:!0});var qft=s(FO);Ygr=r(qft,"TFMPNetForTokenClassification"),qft.forEach(t),Kgr=r(uLe," (MPNet model)"),uLe.forEach(t),Zgr=i(oe),YF=n(oe,"LI",{});var bLe=s(YF);A_e=n(bLe,"STRONG",{});var Gft=s(A_e);ehr=r(Gft,"rembert"),Gft.forEach(t),ohr=r(bLe," \u2014 "),CO=n(bLe,"A",{href:!0});var Oft=s(CO);rhr=r(Oft,"TFRemBertForTokenClassification"),Oft.forEach(t),thr=r(bLe," (RemBERT model)"),bLe.forEach(t),ahr=i(oe),KF=n(oe,"LI",{});var vLe=s(KF);L_e=n(vLe,"STRONG",{});var Xft=s(L_e);nhr=r(Xft,"roberta"),Xft.forEach(t),shr=r(vLe," \u2014 "),MO=n(vLe,"A",{href:!0});var Vft=s(MO);lhr=r(Vft,"TFRobertaForTokenClassification"),Vft.forEach(t),ihr=r(vLe," (RoBERTa model)"),vLe.forEach(t),dhr=i(oe),ZF=n(oe,"LI",{});var TLe=s(ZF);B_e=n(TLe,"STRONG",{});var zft=s(B_e);chr=r(zft,"roformer"),zft.forEach(t),fhr=r(TLe," \u2014 "),EO=n(TLe,"A",{href:!0});var Wft=s(EO);mhr=r(Wft,"TFRoFormerForTokenClassification"),Wft.forEach(t),ghr=r(TLe," (RoFormer model)"),TLe.forEach(t),hhr=i(oe),e9=n(oe,"LI",{});var FLe=s(e9);x_e=n(FLe,"STRONG",{});var Qft=s(x_e);phr=r(Qft,"xlm"),Qft.forEach(t),_hr=r(FLe," \u2014 "),yO=n(FLe,"A",{href:!0});var Hft=s(yO);uhr=r(Hft,"TFXLMForTokenClassification"),Hft.forEach(t),bhr=r(FLe," (XLM model)"),FLe.forEach(t),vhr=i(oe),o9=n(oe,"LI",{});var CLe=s(o9);k_e=n(CLe,"STRONG",{});var Uft=s(k_e);Thr=r(Uft,"xlm-roberta"),Uft.forEach(t),Fhr=r(CLe," \u2014 "),wO=n(CLe,"A",{href:!0});var Jft=s(wO);Chr=r(Jft,"TFXLMRobertaForTokenClassification"),Jft.forEach(t),Mhr=r(CLe," (XLM-RoBERTa model)"),CLe.forEach(t),Ehr=i(oe),r9=n(oe,"LI",{});var MLe=s(r9);R_e=n(MLe,"STRONG",{});var Yft=s(R_e);yhr=r(Yft,"xlnet"),Yft.forEach(t),whr=r(MLe," \u2014 "),AO=n(MLe,"A",{href:!0});var Kft=s(AO);Ahr=r(Kft,"TFXLNetForTokenClassification"),Kft.forEach(t),Lhr=r(MLe," (XLNet model)"),MLe.forEach(t),oe.forEach(t),Bhr=i(va),S_e=n(va,"P",{});var Zft=s(S_e);xhr=r(Zft,"Examples:"),Zft.forEach(t),khr=i(va),m(gA.$$.fragment,va),va.forEach(t),Jl.forEach(t),ZBe=i(c),Rc=n(c,"H2",{class:!0});var dRe=s(Rc);t9=n(dRe,"A",{id:!0,class:!0,href:!0});var emt=s(t9);P_e=n(emt,"SPAN",{});var omt=s(P_e);m(hA.$$.fragment,omt),omt.forEach(t),emt.forEach(t),Rhr=i(dRe),$_e=n(dRe,"SPAN",{});var rmt=s($_e);Shr=r(rmt,"TFAutoModelForQuestionAnswering"),rmt.forEach(t),dRe.forEach(t),exe=i(c),yr=n(c,"DIV",{class:!0});var Kl=s(yr);m(pA.$$.fragment,Kl),Phr=i(Kl),Sc=n(Kl,"P",{});var Hz=s(Sc);$hr=r(Hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),I_e=n(Hz,"CODE",{});var tmt=s(I_e);Ihr=r(tmt,"from_pretrained()"),tmt.forEach(t),Dhr=r(Hz,"class method or the "),D_e=n(Hz,"CODE",{});var amt=s(D_e);jhr=r(amt,"from_config()"),amt.forEach(t),Nhr=r(Hz,`class
method.`),Hz.forEach(t),qhr=i(Kl),_A=n(Kl,"P",{});var cRe=s(_A);Ghr=r(cRe,"This class cannot be instantiated directly using "),j_e=n(cRe,"CODE",{});var nmt=s(j_e);Ohr=r(nmt,"__init__()"),nmt.forEach(t),Xhr=r(cRe," (throws an error)."),cRe.forEach(t),Vhr=i(Kl),bt=n(Kl,"DIV",{class:!0});var Zl=s(bt);m(uA.$$.fragment,Zl),zhr=i(Zl),N_e=n(Zl,"P",{});var smt=s(N_e);Whr=r(smt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),smt.forEach(t),Qhr=i(Zl),Pc=n(Zl,"P",{});var Uz=s(Pc);Hhr=r(Uz,`Note:
Loading a model from its configuration file does `),q_e=n(Uz,"STRONG",{});var lmt=s(q_e);Uhr=r(lmt,"not"),lmt.forEach(t),Jhr=r(Uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),G_e=n(Uz,"CODE",{});var imt=s(G_e);Yhr=r(imt,"from_pretrained()"),imt.forEach(t),Khr=r(Uz,"to load the model weights."),Uz.forEach(t),Zhr=i(Zl),O_e=n(Zl,"P",{});var dmt=s(O_e);epr=r(dmt,"Examples:"),dmt.forEach(t),opr=i(Zl),m(bA.$$.fragment,Zl),Zl.forEach(t),rpr=i(Kl),Mo=n(Kl,"DIV",{class:!0});var Ta=s(Mo);m(vA.$$.fragment,Ta),tpr=i(Ta),X_e=n(Ta,"P",{});var cmt=s(X_e);apr=r(cmt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cmt.forEach(t),npr=i(Ta),Tn=n(Ta,"P",{});var lM=s(Tn);spr=r(lM,"The model class to instantiate is selected based on the "),V_e=n(lM,"CODE",{});var fmt=s(V_e);lpr=r(fmt,"model_type"),fmt.forEach(t),ipr=r(lM,` property of the config object (either
passed as an argument or loaded from `),z_e=n(lM,"CODE",{});var mmt=s(z_e);dpr=r(mmt,"pretrained_model_name_or_path"),mmt.forEach(t),cpr=r(lM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(lM,"CODE",{});var gmt=s(W_e);fpr=r(gmt,"pretrained_model_name_or_path"),gmt.forEach(t),mpr=r(lM,":"),lM.forEach(t),gpr=i(Ta),Z=n(Ta,"UL",{});var re=s(Z);a9=n(re,"LI",{});var ELe=s(a9);Q_e=n(ELe,"STRONG",{});var hmt=s(Q_e);hpr=r(hmt,"albert"),hmt.forEach(t),ppr=r(ELe," \u2014 "),LO=n(ELe,"A",{href:!0});var pmt=s(LO);_pr=r(pmt,"TFAlbertForQuestionAnswering"),pmt.forEach(t),upr=r(ELe," (ALBERT model)"),ELe.forEach(t),bpr=i(re),n9=n(re,"LI",{});var yLe=s(n9);H_e=n(yLe,"STRONG",{});var _mt=s(H_e);vpr=r(_mt,"bert"),_mt.forEach(t),Tpr=r(yLe," \u2014 "),BO=n(yLe,"A",{href:!0});var umt=s(BO);Fpr=r(umt,"TFBertForQuestionAnswering"),umt.forEach(t),Cpr=r(yLe," (BERT model)"),yLe.forEach(t),Mpr=i(re),s9=n(re,"LI",{});var wLe=s(s9);U_e=n(wLe,"STRONG",{});var bmt=s(U_e);Epr=r(bmt,"camembert"),bmt.forEach(t),ypr=r(wLe," \u2014 "),xO=n(wLe,"A",{href:!0});var vmt=s(xO);wpr=r(vmt,"TFCamembertForQuestionAnswering"),vmt.forEach(t),Apr=r(wLe," (CamemBERT model)"),wLe.forEach(t),Lpr=i(re),l9=n(re,"LI",{});var ALe=s(l9);J_e=n(ALe,"STRONG",{});var Tmt=s(J_e);Bpr=r(Tmt,"convbert"),Tmt.forEach(t),xpr=r(ALe," \u2014 "),kO=n(ALe,"A",{href:!0});var Fmt=s(kO);kpr=r(Fmt,"TFConvBertForQuestionAnswering"),Fmt.forEach(t),Rpr=r(ALe," (ConvBERT model)"),ALe.forEach(t),Spr=i(re),i9=n(re,"LI",{});var LLe=s(i9);Y_e=n(LLe,"STRONG",{});var Cmt=s(Y_e);Ppr=r(Cmt,"deberta"),Cmt.forEach(t),$pr=r(LLe," \u2014 "),RO=n(LLe,"A",{href:!0});var Mmt=s(RO);Ipr=r(Mmt,"TFDebertaForQuestionAnswering"),Mmt.forEach(t),Dpr=r(LLe," (DeBERTa model)"),LLe.forEach(t),jpr=i(re),d9=n(re,"LI",{});var BLe=s(d9);K_e=n(BLe,"STRONG",{});var Emt=s(K_e);Npr=r(Emt,"deberta-v2"),Emt.forEach(t),qpr=r(BLe," \u2014 "),SO=n(BLe,"A",{href:!0});var ymt=s(SO);Gpr=r(ymt,"TFDebertaV2ForQuestionAnswering"),ymt.forEach(t),Opr=r(BLe," (DeBERTa-v2 model)"),BLe.forEach(t),Xpr=i(re),c9=n(re,"LI",{});var xLe=s(c9);Z_e=n(xLe,"STRONG",{});var wmt=s(Z_e);Vpr=r(wmt,"distilbert"),wmt.forEach(t),zpr=r(xLe," \u2014 "),PO=n(xLe,"A",{href:!0});var Amt=s(PO);Wpr=r(Amt,"TFDistilBertForQuestionAnswering"),Amt.forEach(t),Qpr=r(xLe," (DistilBERT model)"),xLe.forEach(t),Hpr=i(re),f9=n(re,"LI",{});var kLe=s(f9);eue=n(kLe,"STRONG",{});var Lmt=s(eue);Upr=r(Lmt,"electra"),Lmt.forEach(t),Jpr=r(kLe," \u2014 "),$O=n(kLe,"A",{href:!0});var Bmt=s($O);Ypr=r(Bmt,"TFElectraForQuestionAnswering"),Bmt.forEach(t),Kpr=r(kLe," (ELECTRA model)"),kLe.forEach(t),Zpr=i(re),m9=n(re,"LI",{});var RLe=s(m9);oue=n(RLe,"STRONG",{});var xmt=s(oue);e_r=r(xmt,"flaubert"),xmt.forEach(t),o_r=r(RLe," \u2014 "),IO=n(RLe,"A",{href:!0});var kmt=s(IO);r_r=r(kmt,"TFFlaubertForQuestionAnsweringSimple"),kmt.forEach(t),t_r=r(RLe," (FlauBERT model)"),RLe.forEach(t),a_r=i(re),g9=n(re,"LI",{});var SLe=s(g9);rue=n(SLe,"STRONG",{});var Rmt=s(rue);n_r=r(Rmt,"funnel"),Rmt.forEach(t),s_r=r(SLe," \u2014 "),DO=n(SLe,"A",{href:!0});var Smt=s(DO);l_r=r(Smt,"TFFunnelForQuestionAnswering"),Smt.forEach(t),i_r=r(SLe," (Funnel Transformer model)"),SLe.forEach(t),d_r=i(re),h9=n(re,"LI",{});var PLe=s(h9);tue=n(PLe,"STRONG",{});var Pmt=s(tue);c_r=r(Pmt,"longformer"),Pmt.forEach(t),f_r=r(PLe," \u2014 "),jO=n(PLe,"A",{href:!0});var $mt=s(jO);m_r=r($mt,"TFLongformerForQuestionAnswering"),$mt.forEach(t),g_r=r(PLe," (Longformer model)"),PLe.forEach(t),h_r=i(re),p9=n(re,"LI",{});var $Le=s(p9);aue=n($Le,"STRONG",{});var Imt=s(aue);p_r=r(Imt,"mobilebert"),Imt.forEach(t),__r=r($Le," \u2014 "),NO=n($Le,"A",{href:!0});var Dmt=s(NO);u_r=r(Dmt,"TFMobileBertForQuestionAnswering"),Dmt.forEach(t),b_r=r($Le," (MobileBERT model)"),$Le.forEach(t),v_r=i(re),_9=n(re,"LI",{});var ILe=s(_9);nue=n(ILe,"STRONG",{});var jmt=s(nue);T_r=r(jmt,"mpnet"),jmt.forEach(t),F_r=r(ILe," \u2014 "),qO=n(ILe,"A",{href:!0});var Nmt=s(qO);C_r=r(Nmt,"TFMPNetForQuestionAnswering"),Nmt.forEach(t),M_r=r(ILe," (MPNet model)"),ILe.forEach(t),E_r=i(re),u9=n(re,"LI",{});var DLe=s(u9);sue=n(DLe,"STRONG",{});var qmt=s(sue);y_r=r(qmt,"rembert"),qmt.forEach(t),w_r=r(DLe," \u2014 "),GO=n(DLe,"A",{href:!0});var Gmt=s(GO);A_r=r(Gmt,"TFRemBertForQuestionAnswering"),Gmt.forEach(t),L_r=r(DLe," (RemBERT model)"),DLe.forEach(t),B_r=i(re),b9=n(re,"LI",{});var jLe=s(b9);lue=n(jLe,"STRONG",{});var Omt=s(lue);x_r=r(Omt,"roberta"),Omt.forEach(t),k_r=r(jLe," \u2014 "),OO=n(jLe,"A",{href:!0});var Xmt=s(OO);R_r=r(Xmt,"TFRobertaForQuestionAnswering"),Xmt.forEach(t),S_r=r(jLe," (RoBERTa model)"),jLe.forEach(t),P_r=i(re),v9=n(re,"LI",{});var NLe=s(v9);iue=n(NLe,"STRONG",{});var Vmt=s(iue);$_r=r(Vmt,"roformer"),Vmt.forEach(t),I_r=r(NLe," \u2014 "),XO=n(NLe,"A",{href:!0});var zmt=s(XO);D_r=r(zmt,"TFRoFormerForQuestionAnswering"),zmt.forEach(t),j_r=r(NLe," (RoFormer model)"),NLe.forEach(t),N_r=i(re),T9=n(re,"LI",{});var qLe=s(T9);due=n(qLe,"STRONG",{});var Wmt=s(due);q_r=r(Wmt,"xlm"),Wmt.forEach(t),G_r=r(qLe," \u2014 "),VO=n(qLe,"A",{href:!0});var Qmt=s(VO);O_r=r(Qmt,"TFXLMForQuestionAnsweringSimple"),Qmt.forEach(t),X_r=r(qLe," (XLM model)"),qLe.forEach(t),V_r=i(re),F9=n(re,"LI",{});var GLe=s(F9);cue=n(GLe,"STRONG",{});var Hmt=s(cue);z_r=r(Hmt,"xlm-roberta"),Hmt.forEach(t),W_r=r(GLe," \u2014 "),zO=n(GLe,"A",{href:!0});var Umt=s(zO);Q_r=r(Umt,"TFXLMRobertaForQuestionAnswering"),Umt.forEach(t),H_r=r(GLe," (XLM-RoBERTa model)"),GLe.forEach(t),U_r=i(re),C9=n(re,"LI",{});var OLe=s(C9);fue=n(OLe,"STRONG",{});var Jmt=s(fue);J_r=r(Jmt,"xlnet"),Jmt.forEach(t),Y_r=r(OLe," \u2014 "),WO=n(OLe,"A",{href:!0});var Ymt=s(WO);K_r=r(Ymt,"TFXLNetForQuestionAnsweringSimple"),Ymt.forEach(t),Z_r=r(OLe," (XLNet model)"),OLe.forEach(t),re.forEach(t),eur=i(Ta),mue=n(Ta,"P",{});var Kmt=s(mue);our=r(Kmt,"Examples:"),Kmt.forEach(t),rur=i(Ta),m(TA.$$.fragment,Ta),Ta.forEach(t),Kl.forEach(t),oxe=i(c),$c=n(c,"H2",{class:!0});var fRe=s($c);M9=n(fRe,"A",{id:!0,class:!0,href:!0});var Zmt=s(M9);gue=n(Zmt,"SPAN",{});var egt=s(gue);m(FA.$$.fragment,egt),egt.forEach(t),Zmt.forEach(t),tur=i(fRe),hue=n(fRe,"SPAN",{});var ogt=s(hue);aur=r(ogt,"TFAutoModelForVision2Seq"),ogt.forEach(t),fRe.forEach(t),rxe=i(c),wr=n(c,"DIV",{class:!0});var ei=s(wr);m(CA.$$.fragment,ei),nur=i(ei),Ic=n(ei,"P",{});var Jz=s(Ic);sur=r(Jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pue=n(Jz,"CODE",{});var rgt=s(pue);lur=r(rgt,"from_pretrained()"),rgt.forEach(t),iur=r(Jz,"class method or the "),_ue=n(Jz,"CODE",{});var tgt=s(_ue);dur=r(tgt,"from_config()"),tgt.forEach(t),cur=r(Jz,`class
method.`),Jz.forEach(t),fur=i(ei),MA=n(ei,"P",{});var mRe=s(MA);mur=r(mRe,"This class cannot be instantiated directly using "),uue=n(mRe,"CODE",{});var agt=s(uue);gur=r(agt,"__init__()"),agt.forEach(t),hur=r(mRe," (throws an error)."),mRe.forEach(t),pur=i(ei),vt=n(ei,"DIV",{class:!0});var oi=s(vt);m(EA.$$.fragment,oi),_ur=i(oi),bue=n(oi,"P",{});var ngt=s(bue);uur=r(ngt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ngt.forEach(t),bur=i(oi),Dc=n(oi,"P",{});var Yz=s(Dc);vur=r(Yz,`Note:
Loading a model from its configuration file does `),vue=n(Yz,"STRONG",{});var sgt=s(vue);Tur=r(sgt,"not"),sgt.forEach(t),Fur=r(Yz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tue=n(Yz,"CODE",{});var lgt=s(Tue);Cur=r(lgt,"from_pretrained()"),lgt.forEach(t),Mur=r(Yz,"to load the model weights."),Yz.forEach(t),Eur=i(oi),Fue=n(oi,"P",{});var igt=s(Fue);yur=r(igt,"Examples:"),igt.forEach(t),wur=i(oi),m(yA.$$.fragment,oi),oi.forEach(t),Aur=i(ei),Eo=n(ei,"DIV",{class:!0});var Fa=s(Eo);m(wA.$$.fragment,Fa),Lur=i(Fa),Cue=n(Fa,"P",{});var dgt=s(Cue);Bur=r(dgt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dgt.forEach(t),xur=i(Fa),Fn=n(Fa,"P",{});var iM=s(Fn);kur=r(iM,"The model class to instantiate is selected based on the "),Mue=n(iM,"CODE",{});var cgt=s(Mue);Rur=r(cgt,"model_type"),cgt.forEach(t),Sur=r(iM,` property of the config object (either
passed as an argument or loaded from `),Eue=n(iM,"CODE",{});var fgt=s(Eue);Pur=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),$ur=r(iM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=n(iM,"CODE",{});var mgt=s(yue);Iur=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),Dur=r(iM,":"),iM.forEach(t),jur=i(Fa),wue=n(Fa,"UL",{});var ggt=s(wue);E9=n(ggt,"LI",{});var XLe=s(E9);Aue=n(XLe,"STRONG",{});var hgt=s(Aue);Nur=r(hgt,"vision-encoder-decoder"),hgt.forEach(t),qur=r(XLe," \u2014 "),QO=n(XLe,"A",{href:!0});var pgt=s(QO);Gur=r(pgt,"TFVisionEncoderDecoderModel"),pgt.forEach(t),Our=r(XLe," (Vision Encoder decoder model)"),XLe.forEach(t),ggt.forEach(t),Xur=i(Fa),Lue=n(Fa,"P",{});var _gt=s(Lue);Vur=r(_gt,"Examples:"),_gt.forEach(t),zur=i(Fa),m(AA.$$.fragment,Fa),Fa.forEach(t),ei.forEach(t),txe=i(c),jc=n(c,"H2",{class:!0});var gRe=s(jc);y9=n(gRe,"A",{id:!0,class:!0,href:!0});var ugt=s(y9);Bue=n(ugt,"SPAN",{});var bgt=s(Bue);m(LA.$$.fragment,bgt),bgt.forEach(t),ugt.forEach(t),Wur=i(gRe),xue=n(gRe,"SPAN",{});var vgt=s(xue);Qur=r(vgt,"TFAutoModelForSpeechSeq2Seq"),vgt.forEach(t),gRe.forEach(t),axe=i(c),Ar=n(c,"DIV",{class:!0});var ri=s(Ar);m(BA.$$.fragment,ri),Hur=i(ri),Nc=n(ri,"P",{});var Kz=s(Nc);Uur=r(Kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kue=n(Kz,"CODE",{});var Tgt=s(kue);Jur=r(Tgt,"from_pretrained()"),Tgt.forEach(t),Yur=r(Kz,"class method or the "),Rue=n(Kz,"CODE",{});var Fgt=s(Rue);Kur=r(Fgt,"from_config()"),Fgt.forEach(t),Zur=r(Kz,`class
method.`),Kz.forEach(t),e1r=i(ri),xA=n(ri,"P",{});var hRe=s(xA);o1r=r(hRe,"This class cannot be instantiated directly using "),Sue=n(hRe,"CODE",{});var Cgt=s(Sue);r1r=r(Cgt,"__init__()"),Cgt.forEach(t),t1r=r(hRe," (throws an error)."),hRe.forEach(t),a1r=i(ri),Tt=n(ri,"DIV",{class:!0});var ti=s(Tt);m(kA.$$.fragment,ti),n1r=i(ti),Pue=n(ti,"P",{});var Mgt=s(Pue);s1r=r(Mgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Mgt.forEach(t),l1r=i(ti),qc=n(ti,"P",{});var Zz=s(qc);i1r=r(Zz,`Note:
Loading a model from its configuration file does `),$ue=n(Zz,"STRONG",{});var Egt=s($ue);d1r=r(Egt,"not"),Egt.forEach(t),c1r=r(Zz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iue=n(Zz,"CODE",{});var ygt=s(Iue);f1r=r(ygt,"from_pretrained()"),ygt.forEach(t),m1r=r(Zz,"to load the model weights."),Zz.forEach(t),g1r=i(ti),Due=n(ti,"P",{});var wgt=s(Due);h1r=r(wgt,"Examples:"),wgt.forEach(t),p1r=i(ti),m(RA.$$.fragment,ti),ti.forEach(t),_1r=i(ri),yo=n(ri,"DIV",{class:!0});var Ca=s(yo);m(SA.$$.fragment,Ca),u1r=i(Ca),jue=n(Ca,"P",{});var Agt=s(jue);b1r=r(Agt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Agt.forEach(t),v1r=i(Ca),Cn=n(Ca,"P",{});var dM=s(Cn);T1r=r(dM,"The model class to instantiate is selected based on the "),Nue=n(dM,"CODE",{});var Lgt=s(Nue);F1r=r(Lgt,"model_type"),Lgt.forEach(t),C1r=r(dM,` property of the config object (either
passed as an argument or loaded from `),que=n(dM,"CODE",{});var Bgt=s(que);M1r=r(Bgt,"pretrained_model_name_or_path"),Bgt.forEach(t),E1r=r(dM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(dM,"CODE",{});var xgt=s(Gue);y1r=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),w1r=r(dM,":"),dM.forEach(t),A1r=i(Ca),Oue=n(Ca,"UL",{});var kgt=s(Oue);w9=n(kgt,"LI",{});var VLe=s(w9);Xue=n(VLe,"STRONG",{});var Rgt=s(Xue);L1r=r(Rgt,"speech_to_text"),Rgt.forEach(t),B1r=r(VLe," \u2014 "),HO=n(VLe,"A",{href:!0});var Sgt=s(HO);x1r=r(Sgt,"TFSpeech2TextForConditionalGeneration"),Sgt.forEach(t),k1r=r(VLe," (Speech2Text model)"),VLe.forEach(t),kgt.forEach(t),R1r=i(Ca),Vue=n(Ca,"P",{});var Pgt=s(Vue);S1r=r(Pgt,"Examples:"),Pgt.forEach(t),P1r=i(Ca),m(PA.$$.fragment,Ca),Ca.forEach(t),ri.forEach(t),nxe=i(c),Gc=n(c,"H2",{class:!0});var pRe=s(Gc);A9=n(pRe,"A",{id:!0,class:!0,href:!0});var $gt=s(A9);zue=n($gt,"SPAN",{});var Igt=s(zue);m($A.$$.fragment,Igt),Igt.forEach(t),$gt.forEach(t),$1r=i(pRe),Wue=n(pRe,"SPAN",{});var Dgt=s(Wue);I1r=r(Dgt,"FlaxAutoModel"),Dgt.forEach(t),pRe.forEach(t),sxe=i(c),Lr=n(c,"DIV",{class:!0});var ai=s(Lr);m(IA.$$.fragment,ai),D1r=i(ai),Oc=n(ai,"P",{});var eW=s(Oc);j1r=r(eW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Que=n(eW,"CODE",{});var jgt=s(Que);N1r=r(jgt,"from_pretrained()"),jgt.forEach(t),q1r=r(eW,"class method or the "),Hue=n(eW,"CODE",{});var Ngt=s(Hue);G1r=r(Ngt,"from_config()"),Ngt.forEach(t),O1r=r(eW,`class
method.`),eW.forEach(t),X1r=i(ai),DA=n(ai,"P",{});var _Re=s(DA);V1r=r(_Re,"This class cannot be instantiated directly using "),Uue=n(_Re,"CODE",{});var qgt=s(Uue);z1r=r(qgt,"__init__()"),qgt.forEach(t),W1r=r(_Re," (throws an error)."),_Re.forEach(t),Q1r=i(ai),Ft=n(ai,"DIV",{class:!0});var ni=s(Ft);m(jA.$$.fragment,ni),H1r=i(ni),Jue=n(ni,"P",{});var Ggt=s(Jue);U1r=r(Ggt,"Instantiates one of the base model classes of the library from a configuration."),Ggt.forEach(t),J1r=i(ni),Xc=n(ni,"P",{});var oW=s(Xc);Y1r=r(oW,`Note:
Loading a model from its configuration file does `),Yue=n(oW,"STRONG",{});var Ogt=s(Yue);K1r=r(Ogt,"not"),Ogt.forEach(t),Z1r=r(oW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kue=n(oW,"CODE",{});var Xgt=s(Kue);ebr=r(Xgt,"from_pretrained()"),Xgt.forEach(t),obr=r(oW,"to load the model weights."),oW.forEach(t),rbr=i(ni),Zue=n(ni,"P",{});var Vgt=s(Zue);tbr=r(Vgt,"Examples:"),Vgt.forEach(t),abr=i(ni),m(NA.$$.fragment,ni),ni.forEach(t),nbr=i(ai),wo=n(ai,"DIV",{class:!0});var Ma=s(wo);m(qA.$$.fragment,Ma),sbr=i(Ma),e1e=n(Ma,"P",{});var zgt=s(e1e);lbr=r(zgt,"Instantiate one of the base model classes of the library from a pretrained model."),zgt.forEach(t),ibr=i(Ma),Mn=n(Ma,"P",{});var cM=s(Mn);dbr=r(cM,"The model class to instantiate is selected based on the "),o1e=n(cM,"CODE",{});var Wgt=s(o1e);cbr=r(Wgt,"model_type"),Wgt.forEach(t),fbr=r(cM,` property of the config object (either
passed as an argument or loaded from `),r1e=n(cM,"CODE",{});var Qgt=s(r1e);mbr=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),gbr=r(cM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(cM,"CODE",{});var Hgt=s(t1e);hbr=r(Hgt,"pretrained_model_name_or_path"),Hgt.forEach(t),pbr=r(cM,":"),cM.forEach(t),_br=i(Ma),z=n(Ma,"UL",{});var Q=s(z);L9=n(Q,"LI",{});var zLe=s(L9);a1e=n(zLe,"STRONG",{});var Ugt=s(a1e);ubr=r(Ugt,"albert"),Ugt.forEach(t),bbr=r(zLe," \u2014 "),UO=n(zLe,"A",{href:!0});var Jgt=s(UO);vbr=r(Jgt,"FlaxAlbertModel"),Jgt.forEach(t),Tbr=r(zLe," (ALBERT model)"),zLe.forEach(t),Fbr=i(Q),B9=n(Q,"LI",{});var WLe=s(B9);n1e=n(WLe,"STRONG",{});var Ygt=s(n1e);Cbr=r(Ygt,"bart"),Ygt.forEach(t),Mbr=r(WLe," \u2014 "),JO=n(WLe,"A",{href:!0});var Kgt=s(JO);Ebr=r(Kgt,"FlaxBartModel"),Kgt.forEach(t),ybr=r(WLe," (BART model)"),WLe.forEach(t),wbr=i(Q),x9=n(Q,"LI",{});var QLe=s(x9);s1e=n(QLe,"STRONG",{});var Zgt=s(s1e);Abr=r(Zgt,"beit"),Zgt.forEach(t),Lbr=r(QLe," \u2014 "),YO=n(QLe,"A",{href:!0});var eht=s(YO);Bbr=r(eht,"FlaxBeitModel"),eht.forEach(t),xbr=r(QLe," (BEiT model)"),QLe.forEach(t),kbr=i(Q),k9=n(Q,"LI",{});var HLe=s(k9);l1e=n(HLe,"STRONG",{});var oht=s(l1e);Rbr=r(oht,"bert"),oht.forEach(t),Sbr=r(HLe," \u2014 "),KO=n(HLe,"A",{href:!0});var rht=s(KO);Pbr=r(rht,"FlaxBertModel"),rht.forEach(t),$br=r(HLe," (BERT model)"),HLe.forEach(t),Ibr=i(Q),R9=n(Q,"LI",{});var ULe=s(R9);i1e=n(ULe,"STRONG",{});var tht=s(i1e);Dbr=r(tht,"big_bird"),tht.forEach(t),jbr=r(ULe," \u2014 "),ZO=n(ULe,"A",{href:!0});var aht=s(ZO);Nbr=r(aht,"FlaxBigBirdModel"),aht.forEach(t),qbr=r(ULe," (BigBird model)"),ULe.forEach(t),Gbr=i(Q),S9=n(Q,"LI",{});var JLe=s(S9);d1e=n(JLe,"STRONG",{});var nht=s(d1e);Obr=r(nht,"blenderbot"),nht.forEach(t),Xbr=r(JLe," \u2014 "),eX=n(JLe,"A",{href:!0});var sht=s(eX);Vbr=r(sht,"FlaxBlenderbotModel"),sht.forEach(t),zbr=r(JLe," (Blenderbot model)"),JLe.forEach(t),Wbr=i(Q),P9=n(Q,"LI",{});var YLe=s(P9);c1e=n(YLe,"STRONG",{});var lht=s(c1e);Qbr=r(lht,"blenderbot-small"),lht.forEach(t),Hbr=r(YLe," \u2014 "),oX=n(YLe,"A",{href:!0});var iht=s(oX);Ubr=r(iht,"FlaxBlenderbotSmallModel"),iht.forEach(t),Jbr=r(YLe," (BlenderbotSmall model)"),YLe.forEach(t),Ybr=i(Q),$9=n(Q,"LI",{});var KLe=s($9);f1e=n(KLe,"STRONG",{});var dht=s(f1e);Kbr=r(dht,"clip"),dht.forEach(t),Zbr=r(KLe," \u2014 "),rX=n(KLe,"A",{href:!0});var cht=s(rX);e3r=r(cht,"FlaxCLIPModel"),cht.forEach(t),o3r=r(KLe," (CLIP model)"),KLe.forEach(t),r3r=i(Q),I9=n(Q,"LI",{});var ZLe=s(I9);m1e=n(ZLe,"STRONG",{});var fht=s(m1e);t3r=r(fht,"distilbert"),fht.forEach(t),a3r=r(ZLe," \u2014 "),tX=n(ZLe,"A",{href:!0});var mht=s(tX);n3r=r(mht,"FlaxDistilBertModel"),mht.forEach(t),s3r=r(ZLe," (DistilBERT model)"),ZLe.forEach(t),l3r=i(Q),D9=n(Q,"LI",{});var e8e=s(D9);g1e=n(e8e,"STRONG",{});var ght=s(g1e);i3r=r(ght,"electra"),ght.forEach(t),d3r=r(e8e," \u2014 "),aX=n(e8e,"A",{href:!0});var hht=s(aX);c3r=r(hht,"FlaxElectraModel"),hht.forEach(t),f3r=r(e8e," (ELECTRA model)"),e8e.forEach(t),m3r=i(Q),j9=n(Q,"LI",{});var o8e=s(j9);h1e=n(o8e,"STRONG",{});var pht=s(h1e);g3r=r(pht,"gpt2"),pht.forEach(t),h3r=r(o8e," \u2014 "),nX=n(o8e,"A",{href:!0});var _ht=s(nX);p3r=r(_ht,"FlaxGPT2Model"),_ht.forEach(t),_3r=r(o8e," (OpenAI GPT-2 model)"),o8e.forEach(t),u3r=i(Q),N9=n(Q,"LI",{});var r8e=s(N9);p1e=n(r8e,"STRONG",{});var uht=s(p1e);b3r=r(uht,"gpt_neo"),uht.forEach(t),v3r=r(r8e," \u2014 "),sX=n(r8e,"A",{href:!0});var bht=s(sX);T3r=r(bht,"FlaxGPTNeoModel"),bht.forEach(t),F3r=r(r8e," (GPT Neo model)"),r8e.forEach(t),C3r=i(Q),q9=n(Q,"LI",{});var t8e=s(q9);_1e=n(t8e,"STRONG",{});var vht=s(_1e);M3r=r(vht,"gptj"),vht.forEach(t),E3r=r(t8e," \u2014 "),lX=n(t8e,"A",{href:!0});var Tht=s(lX);y3r=r(Tht,"FlaxGPTJModel"),Tht.forEach(t),w3r=r(t8e," (GPT-J model)"),t8e.forEach(t),A3r=i(Q),G9=n(Q,"LI",{});var a8e=s(G9);u1e=n(a8e,"STRONG",{});var Fht=s(u1e);L3r=r(Fht,"marian"),Fht.forEach(t),B3r=r(a8e," \u2014 "),iX=n(a8e,"A",{href:!0});var Cht=s(iX);x3r=r(Cht,"FlaxMarianModel"),Cht.forEach(t),k3r=r(a8e," (Marian model)"),a8e.forEach(t),R3r=i(Q),O9=n(Q,"LI",{});var n8e=s(O9);b1e=n(n8e,"STRONG",{});var Mht=s(b1e);S3r=r(Mht,"mbart"),Mht.forEach(t),P3r=r(n8e," \u2014 "),dX=n(n8e,"A",{href:!0});var Eht=s(dX);$3r=r(Eht,"FlaxMBartModel"),Eht.forEach(t),I3r=r(n8e," (mBART model)"),n8e.forEach(t),D3r=i(Q),X9=n(Q,"LI",{});var s8e=s(X9);v1e=n(s8e,"STRONG",{});var yht=s(v1e);j3r=r(yht,"mt5"),yht.forEach(t),N3r=r(s8e," \u2014 "),cX=n(s8e,"A",{href:!0});var wht=s(cX);q3r=r(wht,"FlaxMT5Model"),wht.forEach(t),G3r=r(s8e," (mT5 model)"),s8e.forEach(t),O3r=i(Q),V9=n(Q,"LI",{});var l8e=s(V9);T1e=n(l8e,"STRONG",{});var Aht=s(T1e);X3r=r(Aht,"pegasus"),Aht.forEach(t),V3r=r(l8e," \u2014 "),fX=n(l8e,"A",{href:!0});var Lht=s(fX);z3r=r(Lht,"FlaxPegasusModel"),Lht.forEach(t),W3r=r(l8e," (Pegasus model)"),l8e.forEach(t),Q3r=i(Q),z9=n(Q,"LI",{});var i8e=s(z9);F1e=n(i8e,"STRONG",{});var Bht=s(F1e);H3r=r(Bht,"roberta"),Bht.forEach(t),U3r=r(i8e," \u2014 "),mX=n(i8e,"A",{href:!0});var xht=s(mX);J3r=r(xht,"FlaxRobertaModel"),xht.forEach(t),Y3r=r(i8e," (RoBERTa model)"),i8e.forEach(t),K3r=i(Q),W9=n(Q,"LI",{});var d8e=s(W9);C1e=n(d8e,"STRONG",{});var kht=s(C1e);Z3r=r(kht,"roformer"),kht.forEach(t),e5r=r(d8e," \u2014 "),gX=n(d8e,"A",{href:!0});var Rht=s(gX);o5r=r(Rht,"FlaxRoFormerModel"),Rht.forEach(t),r5r=r(d8e," (RoFormer model)"),d8e.forEach(t),t5r=i(Q),Q9=n(Q,"LI",{});var c8e=s(Q9);M1e=n(c8e,"STRONG",{});var Sht=s(M1e);a5r=r(Sht,"t5"),Sht.forEach(t),n5r=r(c8e," \u2014 "),hX=n(c8e,"A",{href:!0});var Pht=s(hX);s5r=r(Pht,"FlaxT5Model"),Pht.forEach(t),l5r=r(c8e," (T5 model)"),c8e.forEach(t),i5r=i(Q),H9=n(Q,"LI",{});var f8e=s(H9);E1e=n(f8e,"STRONG",{});var $ht=s(E1e);d5r=r($ht,"vision-text-dual-encoder"),$ht.forEach(t),c5r=r(f8e," \u2014 "),pX=n(f8e,"A",{href:!0});var Iht=s(pX);f5r=r(Iht,"FlaxVisionTextDualEncoderModel"),Iht.forEach(t),m5r=r(f8e," (VisionTextDualEncoder model)"),f8e.forEach(t),g5r=i(Q),U9=n(Q,"LI",{});var m8e=s(U9);y1e=n(m8e,"STRONG",{});var Dht=s(y1e);h5r=r(Dht,"vit"),Dht.forEach(t),p5r=r(m8e," \u2014 "),_X=n(m8e,"A",{href:!0});var jht=s(_X);_5r=r(jht,"FlaxViTModel"),jht.forEach(t),u5r=r(m8e," (ViT model)"),m8e.forEach(t),b5r=i(Q),J9=n(Q,"LI",{});var g8e=s(J9);w1e=n(g8e,"STRONG",{});var Nht=s(w1e);v5r=r(Nht,"wav2vec2"),Nht.forEach(t),T5r=r(g8e," \u2014 "),uX=n(g8e,"A",{href:!0});var qht=s(uX);F5r=r(qht,"FlaxWav2Vec2Model"),qht.forEach(t),C5r=r(g8e," (Wav2Vec2 model)"),g8e.forEach(t),M5r=i(Q),Y9=n(Q,"LI",{});var h8e=s(Y9);A1e=n(h8e,"STRONG",{});var Ght=s(A1e);E5r=r(Ght,"xglm"),Ght.forEach(t),y5r=r(h8e," \u2014 "),bX=n(h8e,"A",{href:!0});var Oht=s(bX);w5r=r(Oht,"FlaxXGLMModel"),Oht.forEach(t),A5r=r(h8e," (XGLM model)"),h8e.forEach(t),Q.forEach(t),L5r=i(Ma),L1e=n(Ma,"P",{});var Xht=s(L1e);B5r=r(Xht,"Examples:"),Xht.forEach(t),x5r=i(Ma),m(GA.$$.fragment,Ma),Ma.forEach(t),ai.forEach(t),lxe=i(c),Vc=n(c,"H2",{class:!0});var uRe=s(Vc);K9=n(uRe,"A",{id:!0,class:!0,href:!0});var Vht=s(K9);B1e=n(Vht,"SPAN",{});var zht=s(B1e);m(OA.$$.fragment,zht),zht.forEach(t),Vht.forEach(t),k5r=i(uRe),x1e=n(uRe,"SPAN",{});var Wht=s(x1e);R5r=r(Wht,"FlaxAutoModelForCausalLM"),Wht.forEach(t),uRe.forEach(t),ixe=i(c),Br=n(c,"DIV",{class:!0});var si=s(Br);m(XA.$$.fragment,si),S5r=i(si),zc=n(si,"P",{});var rW=s(zc);P5r=r(rW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),k1e=n(rW,"CODE",{});var Qht=s(k1e);$5r=r(Qht,"from_pretrained()"),Qht.forEach(t),I5r=r(rW,"class method or the "),R1e=n(rW,"CODE",{});var Hht=s(R1e);D5r=r(Hht,"from_config()"),Hht.forEach(t),j5r=r(rW,`class
method.`),rW.forEach(t),N5r=i(si),VA=n(si,"P",{});var bRe=s(VA);q5r=r(bRe,"This class cannot be instantiated directly using "),S1e=n(bRe,"CODE",{});var Uht=s(S1e);G5r=r(Uht,"__init__()"),Uht.forEach(t),O5r=r(bRe," (throws an error)."),bRe.forEach(t),X5r=i(si),Ct=n(si,"DIV",{class:!0});var li=s(Ct);m(zA.$$.fragment,li),V5r=i(li),P1e=n(li,"P",{});var Jht=s(P1e);z5r=r(Jht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jht.forEach(t),W5r=i(li),Wc=n(li,"P",{});var tW=s(Wc);Q5r=r(tW,`Note:
Loading a model from its configuration file does `),$1e=n(tW,"STRONG",{});var Yht=s($1e);H5r=r(Yht,"not"),Yht.forEach(t),U5r=r(tW,` load the model weights. It only affects the
model\u2019s configuration. Use `),I1e=n(tW,"CODE",{});var Kht=s(I1e);J5r=r(Kht,"from_pretrained()"),Kht.forEach(t),Y5r=r(tW,"to load the model weights."),tW.forEach(t),K5r=i(li),D1e=n(li,"P",{});var Zht=s(D1e);Z5r=r(Zht,"Examples:"),Zht.forEach(t),e2r=i(li),m(WA.$$.fragment,li),li.forEach(t),o2r=i(si),Ao=n(si,"DIV",{class:!0});var Ea=s(Ao);m(QA.$$.fragment,Ea),r2r=i(Ea),j1e=n(Ea,"P",{});var ept=s(j1e);t2r=r(ept,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ept.forEach(t),a2r=i(Ea),En=n(Ea,"P",{});var fM=s(En);n2r=r(fM,"The model class to instantiate is selected based on the "),N1e=n(fM,"CODE",{});var opt=s(N1e);s2r=r(opt,"model_type"),opt.forEach(t),l2r=r(fM,` property of the config object (either
passed as an argument or loaded from `),q1e=n(fM,"CODE",{});var rpt=s(q1e);i2r=r(rpt,"pretrained_model_name_or_path"),rpt.forEach(t),d2r=r(fM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=n(fM,"CODE",{});var tpt=s(G1e);c2r=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),f2r=r(fM,":"),fM.forEach(t),m2r=i(Ea),yn=n(Ea,"UL",{});var mM=s(yn);Z9=n(mM,"LI",{});var p8e=s(Z9);O1e=n(p8e,"STRONG",{});var apt=s(O1e);g2r=r(apt,"gpt2"),apt.forEach(t),h2r=r(p8e," \u2014 "),vX=n(p8e,"A",{href:!0});var npt=s(vX);p2r=r(npt,"FlaxGPT2LMHeadModel"),npt.forEach(t),_2r=r(p8e," (OpenAI GPT-2 model)"),p8e.forEach(t),u2r=i(mM),eC=n(mM,"LI",{});var _8e=s(eC);X1e=n(_8e,"STRONG",{});var spt=s(X1e);b2r=r(spt,"gpt_neo"),spt.forEach(t),v2r=r(_8e," \u2014 "),TX=n(_8e,"A",{href:!0});var lpt=s(TX);T2r=r(lpt,"FlaxGPTNeoForCausalLM"),lpt.forEach(t),F2r=r(_8e," (GPT Neo model)"),_8e.forEach(t),C2r=i(mM),oC=n(mM,"LI",{});var u8e=s(oC);V1e=n(u8e,"STRONG",{});var ipt=s(V1e);M2r=r(ipt,"gptj"),ipt.forEach(t),E2r=r(u8e," \u2014 "),FX=n(u8e,"A",{href:!0});var dpt=s(FX);y2r=r(dpt,"FlaxGPTJForCausalLM"),dpt.forEach(t),w2r=r(u8e," (GPT-J model)"),u8e.forEach(t),A2r=i(mM),rC=n(mM,"LI",{});var b8e=s(rC);z1e=n(b8e,"STRONG",{});var cpt=s(z1e);L2r=r(cpt,"xglm"),cpt.forEach(t),B2r=r(b8e," \u2014 "),CX=n(b8e,"A",{href:!0});var fpt=s(CX);x2r=r(fpt,"FlaxXGLMForCausalLM"),fpt.forEach(t),k2r=r(b8e," (XGLM model)"),b8e.forEach(t),mM.forEach(t),R2r=i(Ea),W1e=n(Ea,"P",{});var mpt=s(W1e);S2r=r(mpt,"Examples:"),mpt.forEach(t),P2r=i(Ea),m(HA.$$.fragment,Ea),Ea.forEach(t),si.forEach(t),dxe=i(c),Qc=n(c,"H2",{class:!0});var vRe=s(Qc);tC=n(vRe,"A",{id:!0,class:!0,href:!0});var gpt=s(tC);Q1e=n(gpt,"SPAN",{});var hpt=s(Q1e);m(UA.$$.fragment,hpt),hpt.forEach(t),gpt.forEach(t),$2r=i(vRe),H1e=n(vRe,"SPAN",{});var ppt=s(H1e);I2r=r(ppt,"FlaxAutoModelForPreTraining"),ppt.forEach(t),vRe.forEach(t),cxe=i(c),xr=n(c,"DIV",{class:!0});var ii=s(xr);m(JA.$$.fragment,ii),D2r=i(ii),Hc=n(ii,"P",{});var aW=s(Hc);j2r=r(aW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),U1e=n(aW,"CODE",{});var _pt=s(U1e);N2r=r(_pt,"from_pretrained()"),_pt.forEach(t),q2r=r(aW,"class method or the "),J1e=n(aW,"CODE",{});var upt=s(J1e);G2r=r(upt,"from_config()"),upt.forEach(t),O2r=r(aW,`class
method.`),aW.forEach(t),X2r=i(ii),YA=n(ii,"P",{});var TRe=s(YA);V2r=r(TRe,"This class cannot be instantiated directly using "),Y1e=n(TRe,"CODE",{});var bpt=s(Y1e);z2r=r(bpt,"__init__()"),bpt.forEach(t),W2r=r(TRe," (throws an error)."),TRe.forEach(t),Q2r=i(ii),Mt=n(ii,"DIV",{class:!0});var di=s(Mt);m(KA.$$.fragment,di),H2r=i(di),K1e=n(di,"P",{});var vpt=s(K1e);U2r=r(vpt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vpt.forEach(t),J2r=i(di),Uc=n(di,"P",{});var nW=s(Uc);Y2r=r(nW,`Note:
Loading a model from its configuration file does `),Z1e=n(nW,"STRONG",{});var Tpt=s(Z1e);K2r=r(Tpt,"not"),Tpt.forEach(t),Z2r=r(nW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ebe=n(nW,"CODE",{});var Fpt=s(ebe);evr=r(Fpt,"from_pretrained()"),Fpt.forEach(t),ovr=r(nW,"to load the model weights."),nW.forEach(t),rvr=i(di),obe=n(di,"P",{});var Cpt=s(obe);tvr=r(Cpt,"Examples:"),Cpt.forEach(t),avr=i(di),m(ZA.$$.fragment,di),di.forEach(t),nvr=i(ii),Lo=n(ii,"DIV",{class:!0});var ya=s(Lo);m(e0.$$.fragment,ya),svr=i(ya),rbe=n(ya,"P",{});var Mpt=s(rbe);lvr=r(Mpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Mpt.forEach(t),ivr=i(ya),wn=n(ya,"P",{});var gM=s(wn);dvr=r(gM,"The model class to instantiate is selected based on the "),tbe=n(gM,"CODE",{});var Ept=s(tbe);cvr=r(Ept,"model_type"),Ept.forEach(t),fvr=r(gM,` property of the config object (either
passed as an argument or loaded from `),abe=n(gM,"CODE",{});var ypt=s(abe);mvr=r(ypt,"pretrained_model_name_or_path"),ypt.forEach(t),gvr=r(gM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(gM,"CODE",{});var wpt=s(nbe);hvr=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),pvr=r(gM,":"),gM.forEach(t),_vr=i(ya),fe=n(ya,"UL",{});var _e=s(fe);aC=n(_e,"LI",{});var v8e=s(aC);sbe=n(v8e,"STRONG",{});var Apt=s(sbe);uvr=r(Apt,"albert"),Apt.forEach(t),bvr=r(v8e," \u2014 "),MX=n(v8e,"A",{href:!0});var Lpt=s(MX);vvr=r(Lpt,"FlaxAlbertForPreTraining"),Lpt.forEach(t),Tvr=r(v8e," (ALBERT model)"),v8e.forEach(t),Fvr=i(_e),nC=n(_e,"LI",{});var T8e=s(nC);lbe=n(T8e,"STRONG",{});var Bpt=s(lbe);Cvr=r(Bpt,"bart"),Bpt.forEach(t),Mvr=r(T8e," \u2014 "),EX=n(T8e,"A",{href:!0});var xpt=s(EX);Evr=r(xpt,"FlaxBartForConditionalGeneration"),xpt.forEach(t),yvr=r(T8e," (BART model)"),T8e.forEach(t),wvr=i(_e),sC=n(_e,"LI",{});var F8e=s(sC);ibe=n(F8e,"STRONG",{});var kpt=s(ibe);Avr=r(kpt,"bert"),kpt.forEach(t),Lvr=r(F8e," \u2014 "),yX=n(F8e,"A",{href:!0});var Rpt=s(yX);Bvr=r(Rpt,"FlaxBertForPreTraining"),Rpt.forEach(t),xvr=r(F8e," (BERT model)"),F8e.forEach(t),kvr=i(_e),lC=n(_e,"LI",{});var C8e=s(lC);dbe=n(C8e,"STRONG",{});var Spt=s(dbe);Rvr=r(Spt,"big_bird"),Spt.forEach(t),Svr=r(C8e," \u2014 "),wX=n(C8e,"A",{href:!0});var Ppt=s(wX);Pvr=r(Ppt,"FlaxBigBirdForPreTraining"),Ppt.forEach(t),$vr=r(C8e," (BigBird model)"),C8e.forEach(t),Ivr=i(_e),iC=n(_e,"LI",{});var M8e=s(iC);cbe=n(M8e,"STRONG",{});var $pt=s(cbe);Dvr=r($pt,"electra"),$pt.forEach(t),jvr=r(M8e," \u2014 "),AX=n(M8e,"A",{href:!0});var Ipt=s(AX);Nvr=r(Ipt,"FlaxElectraForPreTraining"),Ipt.forEach(t),qvr=r(M8e," (ELECTRA model)"),M8e.forEach(t),Gvr=i(_e),dC=n(_e,"LI",{});var E8e=s(dC);fbe=n(E8e,"STRONG",{});var Dpt=s(fbe);Ovr=r(Dpt,"mbart"),Dpt.forEach(t),Xvr=r(E8e," \u2014 "),LX=n(E8e,"A",{href:!0});var jpt=s(LX);Vvr=r(jpt,"FlaxMBartForConditionalGeneration"),jpt.forEach(t),zvr=r(E8e," (mBART model)"),E8e.forEach(t),Wvr=i(_e),cC=n(_e,"LI",{});var y8e=s(cC);mbe=n(y8e,"STRONG",{});var Npt=s(mbe);Qvr=r(Npt,"mt5"),Npt.forEach(t),Hvr=r(y8e," \u2014 "),BX=n(y8e,"A",{href:!0});var qpt=s(BX);Uvr=r(qpt,"FlaxMT5ForConditionalGeneration"),qpt.forEach(t),Jvr=r(y8e," (mT5 model)"),y8e.forEach(t),Yvr=i(_e),fC=n(_e,"LI",{});var w8e=s(fC);gbe=n(w8e,"STRONG",{});var Gpt=s(gbe);Kvr=r(Gpt,"roberta"),Gpt.forEach(t),Zvr=r(w8e," \u2014 "),xX=n(w8e,"A",{href:!0});var Opt=s(xX);eTr=r(Opt,"FlaxRobertaForMaskedLM"),Opt.forEach(t),oTr=r(w8e," (RoBERTa model)"),w8e.forEach(t),rTr=i(_e),mC=n(_e,"LI",{});var A8e=s(mC);hbe=n(A8e,"STRONG",{});var Xpt=s(hbe);tTr=r(Xpt,"roformer"),Xpt.forEach(t),aTr=r(A8e," \u2014 "),kX=n(A8e,"A",{href:!0});var Vpt=s(kX);nTr=r(Vpt,"FlaxRoFormerForMaskedLM"),Vpt.forEach(t),sTr=r(A8e," (RoFormer model)"),A8e.forEach(t),lTr=i(_e),gC=n(_e,"LI",{});var L8e=s(gC);pbe=n(L8e,"STRONG",{});var zpt=s(pbe);iTr=r(zpt,"t5"),zpt.forEach(t),dTr=r(L8e," \u2014 "),RX=n(L8e,"A",{href:!0});var Wpt=s(RX);cTr=r(Wpt,"FlaxT5ForConditionalGeneration"),Wpt.forEach(t),fTr=r(L8e," (T5 model)"),L8e.forEach(t),mTr=i(_e),hC=n(_e,"LI",{});var B8e=s(hC);_be=n(B8e,"STRONG",{});var Qpt=s(_be);gTr=r(Qpt,"wav2vec2"),Qpt.forEach(t),hTr=r(B8e," \u2014 "),SX=n(B8e,"A",{href:!0});var Hpt=s(SX);pTr=r(Hpt,"FlaxWav2Vec2ForPreTraining"),Hpt.forEach(t),_Tr=r(B8e," (Wav2Vec2 model)"),B8e.forEach(t),_e.forEach(t),uTr=i(ya),ube=n(ya,"P",{});var Upt=s(ube);bTr=r(Upt,"Examples:"),Upt.forEach(t),vTr=i(ya),m(o0.$$.fragment,ya),ya.forEach(t),ii.forEach(t),fxe=i(c),Jc=n(c,"H2",{class:!0});var FRe=s(Jc);pC=n(FRe,"A",{id:!0,class:!0,href:!0});var Jpt=s(pC);bbe=n(Jpt,"SPAN",{});var Ypt=s(bbe);m(r0.$$.fragment,Ypt),Ypt.forEach(t),Jpt.forEach(t),TTr=i(FRe),vbe=n(FRe,"SPAN",{});var Kpt=s(vbe);FTr=r(Kpt,"FlaxAutoModelForMaskedLM"),Kpt.forEach(t),FRe.forEach(t),mxe=i(c),kr=n(c,"DIV",{class:!0});var ci=s(kr);m(t0.$$.fragment,ci),CTr=i(ci),Yc=n(ci,"P",{});var sW=s(Yc);MTr=r(sW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Tbe=n(sW,"CODE",{});var Zpt=s(Tbe);ETr=r(Zpt,"from_pretrained()"),Zpt.forEach(t),yTr=r(sW,"class method or the "),Fbe=n(sW,"CODE",{});var e_t=s(Fbe);wTr=r(e_t,"from_config()"),e_t.forEach(t),ATr=r(sW,`class
method.`),sW.forEach(t),LTr=i(ci),a0=n(ci,"P",{});var CRe=s(a0);BTr=r(CRe,"This class cannot be instantiated directly using "),Cbe=n(CRe,"CODE",{});var o_t=s(Cbe);xTr=r(o_t,"__init__()"),o_t.forEach(t),kTr=r(CRe," (throws an error)."),CRe.forEach(t),RTr=i(ci),Et=n(ci,"DIV",{class:!0});var fi=s(Et);m(n0.$$.fragment,fi),STr=i(fi),Mbe=n(fi,"P",{});var r_t=s(Mbe);PTr=r(r_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),r_t.forEach(t),$Tr=i(fi),Kc=n(fi,"P",{});var lW=s(Kc);ITr=r(lW,`Note:
Loading a model from its configuration file does `),Ebe=n(lW,"STRONG",{});var t_t=s(Ebe);DTr=r(t_t,"not"),t_t.forEach(t),jTr=r(lW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ybe=n(lW,"CODE",{});var a_t=s(ybe);NTr=r(a_t,"from_pretrained()"),a_t.forEach(t),qTr=r(lW,"to load the model weights."),lW.forEach(t),GTr=i(fi),wbe=n(fi,"P",{});var n_t=s(wbe);OTr=r(n_t,"Examples:"),n_t.forEach(t),XTr=i(fi),m(s0.$$.fragment,fi),fi.forEach(t),VTr=i(ci),Bo=n(ci,"DIV",{class:!0});var wa=s(Bo);m(l0.$$.fragment,wa),zTr=i(wa),Abe=n(wa,"P",{});var s_t=s(Abe);WTr=r(s_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),s_t.forEach(t),QTr=i(wa),An=n(wa,"P",{});var hM=s(An);HTr=r(hM,"The model class to instantiate is selected based on the "),Lbe=n(hM,"CODE",{});var l_t=s(Lbe);UTr=r(l_t,"model_type"),l_t.forEach(t),JTr=r(hM,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(hM,"CODE",{});var i_t=s(Bbe);YTr=r(i_t,"pretrained_model_name_or_path"),i_t.forEach(t),KTr=r(hM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(hM,"CODE",{});var d_t=s(xbe);ZTr=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),eFr=r(hM,":"),hM.forEach(t),oFr=i(wa),ve=n(wa,"UL",{});var oo=s(ve);_C=n(oo,"LI",{});var x8e=s(_C);kbe=n(x8e,"STRONG",{});var c_t=s(kbe);rFr=r(c_t,"albert"),c_t.forEach(t),tFr=r(x8e," \u2014 "),PX=n(x8e,"A",{href:!0});var f_t=s(PX);aFr=r(f_t,"FlaxAlbertForMaskedLM"),f_t.forEach(t),nFr=r(x8e," (ALBERT model)"),x8e.forEach(t),sFr=i(oo),uC=n(oo,"LI",{});var k8e=s(uC);Rbe=n(k8e,"STRONG",{});var m_t=s(Rbe);lFr=r(m_t,"bart"),m_t.forEach(t),iFr=r(k8e," \u2014 "),$X=n(k8e,"A",{href:!0});var g_t=s($X);dFr=r(g_t,"FlaxBartForConditionalGeneration"),g_t.forEach(t),cFr=r(k8e," (BART model)"),k8e.forEach(t),fFr=i(oo),bC=n(oo,"LI",{});var R8e=s(bC);Sbe=n(R8e,"STRONG",{});var h_t=s(Sbe);mFr=r(h_t,"bert"),h_t.forEach(t),gFr=r(R8e," \u2014 "),IX=n(R8e,"A",{href:!0});var p_t=s(IX);hFr=r(p_t,"FlaxBertForMaskedLM"),p_t.forEach(t),pFr=r(R8e," (BERT model)"),R8e.forEach(t),_Fr=i(oo),vC=n(oo,"LI",{});var S8e=s(vC);Pbe=n(S8e,"STRONG",{});var __t=s(Pbe);uFr=r(__t,"big_bird"),__t.forEach(t),bFr=r(S8e," \u2014 "),DX=n(S8e,"A",{href:!0});var u_t=s(DX);vFr=r(u_t,"FlaxBigBirdForMaskedLM"),u_t.forEach(t),TFr=r(S8e," (BigBird model)"),S8e.forEach(t),FFr=i(oo),TC=n(oo,"LI",{});var P8e=s(TC);$be=n(P8e,"STRONG",{});var b_t=s($be);CFr=r(b_t,"distilbert"),b_t.forEach(t),MFr=r(P8e," \u2014 "),jX=n(P8e,"A",{href:!0});var v_t=s(jX);EFr=r(v_t,"FlaxDistilBertForMaskedLM"),v_t.forEach(t),yFr=r(P8e," (DistilBERT model)"),P8e.forEach(t),wFr=i(oo),FC=n(oo,"LI",{});var $8e=s(FC);Ibe=n($8e,"STRONG",{});var T_t=s(Ibe);AFr=r(T_t,"electra"),T_t.forEach(t),LFr=r($8e," \u2014 "),NX=n($8e,"A",{href:!0});var F_t=s(NX);BFr=r(F_t,"FlaxElectraForMaskedLM"),F_t.forEach(t),xFr=r($8e," (ELECTRA model)"),$8e.forEach(t),kFr=i(oo),CC=n(oo,"LI",{});var I8e=s(CC);Dbe=n(I8e,"STRONG",{});var C_t=s(Dbe);RFr=r(C_t,"mbart"),C_t.forEach(t),SFr=r(I8e," \u2014 "),qX=n(I8e,"A",{href:!0});var M_t=s(qX);PFr=r(M_t,"FlaxMBartForConditionalGeneration"),M_t.forEach(t),$Fr=r(I8e," (mBART model)"),I8e.forEach(t),IFr=i(oo),MC=n(oo,"LI",{});var D8e=s(MC);jbe=n(D8e,"STRONG",{});var E_t=s(jbe);DFr=r(E_t,"roberta"),E_t.forEach(t),jFr=r(D8e," \u2014 "),GX=n(D8e,"A",{href:!0});var y_t=s(GX);NFr=r(y_t,"FlaxRobertaForMaskedLM"),y_t.forEach(t),qFr=r(D8e," (RoBERTa model)"),D8e.forEach(t),GFr=i(oo),EC=n(oo,"LI",{});var j8e=s(EC);Nbe=n(j8e,"STRONG",{});var w_t=s(Nbe);OFr=r(w_t,"roformer"),w_t.forEach(t),XFr=r(j8e," \u2014 "),OX=n(j8e,"A",{href:!0});var A_t=s(OX);VFr=r(A_t,"FlaxRoFormerForMaskedLM"),A_t.forEach(t),zFr=r(j8e," (RoFormer model)"),j8e.forEach(t),oo.forEach(t),WFr=i(wa),qbe=n(wa,"P",{});var L_t=s(qbe);QFr=r(L_t,"Examples:"),L_t.forEach(t),HFr=i(wa),m(i0.$$.fragment,wa),wa.forEach(t),ci.forEach(t),gxe=i(c),Zc=n(c,"H2",{class:!0});var MRe=s(Zc);yC=n(MRe,"A",{id:!0,class:!0,href:!0});var B_t=s(yC);Gbe=n(B_t,"SPAN",{});var x_t=s(Gbe);m(d0.$$.fragment,x_t),x_t.forEach(t),B_t.forEach(t),UFr=i(MRe),Obe=n(MRe,"SPAN",{});var k_t=s(Obe);JFr=r(k_t,"FlaxAutoModelForSeq2SeqLM"),k_t.forEach(t),MRe.forEach(t),hxe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);m(c0.$$.fragment,mi),YFr=i(mi),ef=n(mi,"P",{});var iW=s(ef);KFr=r(iW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Xbe=n(iW,"CODE",{});var R_t=s(Xbe);ZFr=r(R_t,"from_pretrained()"),R_t.forEach(t),e9r=r(iW,"class method or the "),Vbe=n(iW,"CODE",{});var S_t=s(Vbe);o9r=r(S_t,"from_config()"),S_t.forEach(t),r9r=r(iW,`class
method.`),iW.forEach(t),t9r=i(mi),f0=n(mi,"P",{});var ERe=s(f0);a9r=r(ERe,"This class cannot be instantiated directly using "),zbe=n(ERe,"CODE",{});var P_t=s(zbe);n9r=r(P_t,"__init__()"),P_t.forEach(t),s9r=r(ERe," (throws an error)."),ERe.forEach(t),l9r=i(mi),yt=n(mi,"DIV",{class:!0});var gi=s(yt);m(m0.$$.fragment,gi),i9r=i(gi),Wbe=n(gi,"P",{});var $_t=s(Wbe);d9r=r($_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$_t.forEach(t),c9r=i(gi),of=n(gi,"P",{});var dW=s(of);f9r=r(dW,`Note:
Loading a model from its configuration file does `),Qbe=n(dW,"STRONG",{});var I_t=s(Qbe);m9r=r(I_t,"not"),I_t.forEach(t),g9r=r(dW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hbe=n(dW,"CODE",{});var D_t=s(Hbe);h9r=r(D_t,"from_pretrained()"),D_t.forEach(t),p9r=r(dW,"to load the model weights."),dW.forEach(t),_9r=i(gi),Ube=n(gi,"P",{});var j_t=s(Ube);u9r=r(j_t,"Examples:"),j_t.forEach(t),b9r=i(gi),m(g0.$$.fragment,gi),gi.forEach(t),v9r=i(mi),xo=n(mi,"DIV",{class:!0});var Aa=s(xo);m(h0.$$.fragment,Aa),T9r=i(Aa),Jbe=n(Aa,"P",{});var N_t=s(Jbe);F9r=r(N_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),N_t.forEach(t),C9r=i(Aa),Ln=n(Aa,"P",{});var pM=s(Ln);M9r=r(pM,"The model class to instantiate is selected based on the "),Ybe=n(pM,"CODE",{});var q_t=s(Ybe);E9r=r(q_t,"model_type"),q_t.forEach(t),y9r=r(pM,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(pM,"CODE",{});var G_t=s(Kbe);w9r=r(G_t,"pretrained_model_name_or_path"),G_t.forEach(t),A9r=r(pM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(pM,"CODE",{});var O_t=s(Zbe);L9r=r(O_t,"pretrained_model_name_or_path"),O_t.forEach(t),B9r=r(pM,":"),pM.forEach(t),x9r=i(Aa),Te=n(Aa,"UL",{});var ro=s(Te);wC=n(ro,"LI",{});var N8e=s(wC);e3e=n(N8e,"STRONG",{});var X_t=s(e3e);k9r=r(X_t,"bart"),X_t.forEach(t),R9r=r(N8e," \u2014 "),XX=n(N8e,"A",{href:!0});var V_t=s(XX);S9r=r(V_t,"FlaxBartForConditionalGeneration"),V_t.forEach(t),P9r=r(N8e," (BART model)"),N8e.forEach(t),$9r=i(ro),AC=n(ro,"LI",{});var q8e=s(AC);o3e=n(q8e,"STRONG",{});var z_t=s(o3e);I9r=r(z_t,"blenderbot"),z_t.forEach(t),D9r=r(q8e," \u2014 "),VX=n(q8e,"A",{href:!0});var W_t=s(VX);j9r=r(W_t,"FlaxBlenderbotForConditionalGeneration"),W_t.forEach(t),N9r=r(q8e," (Blenderbot model)"),q8e.forEach(t),q9r=i(ro),LC=n(ro,"LI",{});var G8e=s(LC);r3e=n(G8e,"STRONG",{});var Q_t=s(r3e);G9r=r(Q_t,"blenderbot-small"),Q_t.forEach(t),O9r=r(G8e," \u2014 "),zX=n(G8e,"A",{href:!0});var H_t=s(zX);X9r=r(H_t,"FlaxBlenderbotSmallForConditionalGeneration"),H_t.forEach(t),V9r=r(G8e," (BlenderbotSmall model)"),G8e.forEach(t),z9r=i(ro),BC=n(ro,"LI",{});var O8e=s(BC);t3e=n(O8e,"STRONG",{});var U_t=s(t3e);W9r=r(U_t,"encoder-decoder"),U_t.forEach(t),Q9r=r(O8e," \u2014 "),WX=n(O8e,"A",{href:!0});var J_t=s(WX);H9r=r(J_t,"FlaxEncoderDecoderModel"),J_t.forEach(t),U9r=r(O8e," (Encoder decoder model)"),O8e.forEach(t),J9r=i(ro),xC=n(ro,"LI",{});var X8e=s(xC);a3e=n(X8e,"STRONG",{});var Y_t=s(a3e);Y9r=r(Y_t,"marian"),Y_t.forEach(t),K9r=r(X8e," \u2014 "),QX=n(X8e,"A",{href:!0});var K_t=s(QX);Z9r=r(K_t,"FlaxMarianMTModel"),K_t.forEach(t),eCr=r(X8e," (Marian model)"),X8e.forEach(t),oCr=i(ro),kC=n(ro,"LI",{});var V8e=s(kC);n3e=n(V8e,"STRONG",{});var Z_t=s(n3e);rCr=r(Z_t,"mbart"),Z_t.forEach(t),tCr=r(V8e," \u2014 "),HX=n(V8e,"A",{href:!0});var eut=s(HX);aCr=r(eut,"FlaxMBartForConditionalGeneration"),eut.forEach(t),nCr=r(V8e," (mBART model)"),V8e.forEach(t),sCr=i(ro),RC=n(ro,"LI",{});var z8e=s(RC);s3e=n(z8e,"STRONG",{});var out=s(s3e);lCr=r(out,"mt5"),out.forEach(t),iCr=r(z8e," \u2014 "),UX=n(z8e,"A",{href:!0});var rut=s(UX);dCr=r(rut,"FlaxMT5ForConditionalGeneration"),rut.forEach(t),cCr=r(z8e," (mT5 model)"),z8e.forEach(t),fCr=i(ro),SC=n(ro,"LI",{});var W8e=s(SC);l3e=n(W8e,"STRONG",{});var tut=s(l3e);mCr=r(tut,"pegasus"),tut.forEach(t),gCr=r(W8e," \u2014 "),JX=n(W8e,"A",{href:!0});var aut=s(JX);hCr=r(aut,"FlaxPegasusForConditionalGeneration"),aut.forEach(t),pCr=r(W8e," (Pegasus model)"),W8e.forEach(t),_Cr=i(ro),PC=n(ro,"LI",{});var Q8e=s(PC);i3e=n(Q8e,"STRONG",{});var nut=s(i3e);uCr=r(nut,"t5"),nut.forEach(t),bCr=r(Q8e," \u2014 "),YX=n(Q8e,"A",{href:!0});var sut=s(YX);vCr=r(sut,"FlaxT5ForConditionalGeneration"),sut.forEach(t),TCr=r(Q8e," (T5 model)"),Q8e.forEach(t),ro.forEach(t),FCr=i(Aa),d3e=n(Aa,"P",{});var lut=s(d3e);CCr=r(lut,"Examples:"),lut.forEach(t),MCr=i(Aa),m(p0.$$.fragment,Aa),Aa.forEach(t),mi.forEach(t),pxe=i(c),rf=n(c,"H2",{class:!0});var yRe=s(rf);$C=n(yRe,"A",{id:!0,class:!0,href:!0});var iut=s($C);c3e=n(iut,"SPAN",{});var dut=s(c3e);m(_0.$$.fragment,dut),dut.forEach(t),iut.forEach(t),ECr=i(yRe),f3e=n(yRe,"SPAN",{});var cut=s(f3e);yCr=r(cut,"FlaxAutoModelForSequenceClassification"),cut.forEach(t),yRe.forEach(t),_xe=i(c),Sr=n(c,"DIV",{class:!0});var hi=s(Sr);m(u0.$$.fragment,hi),wCr=i(hi),tf=n(hi,"P",{});var cW=s(tf);ACr=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),m3e=n(cW,"CODE",{});var fut=s(m3e);LCr=r(fut,"from_pretrained()"),fut.forEach(t),BCr=r(cW,"class method or the "),g3e=n(cW,"CODE",{});var mut=s(g3e);xCr=r(mut,"from_config()"),mut.forEach(t),kCr=r(cW,`class
method.`),cW.forEach(t),RCr=i(hi),b0=n(hi,"P",{});var wRe=s(b0);SCr=r(wRe,"This class cannot be instantiated directly using "),h3e=n(wRe,"CODE",{});var gut=s(h3e);PCr=r(gut,"__init__()"),gut.forEach(t),$Cr=r(wRe," (throws an error)."),wRe.forEach(t),ICr=i(hi),wt=n(hi,"DIV",{class:!0});var pi=s(wt);m(v0.$$.fragment,pi),DCr=i(pi),p3e=n(pi,"P",{});var hut=s(p3e);jCr=r(hut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hut.forEach(t),NCr=i(pi),af=n(pi,"P",{});var fW=s(af);qCr=r(fW,`Note:
Loading a model from its configuration file does `),_3e=n(fW,"STRONG",{});var put=s(_3e);GCr=r(put,"not"),put.forEach(t),OCr=r(fW,` load the model weights. It only affects the
model\u2019s configuration. Use `),u3e=n(fW,"CODE",{});var _ut=s(u3e);XCr=r(_ut,"from_pretrained()"),_ut.forEach(t),VCr=r(fW,"to load the model weights."),fW.forEach(t),zCr=i(pi),b3e=n(pi,"P",{});var uut=s(b3e);WCr=r(uut,"Examples:"),uut.forEach(t),QCr=i(pi),m(T0.$$.fragment,pi),pi.forEach(t),HCr=i(hi),ko=n(hi,"DIV",{class:!0});var La=s(ko);m(F0.$$.fragment,La),UCr=i(La),v3e=n(La,"P",{});var but=s(v3e);JCr=r(but,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),but.forEach(t),YCr=i(La),Bn=n(La,"P",{});var _M=s(Bn);KCr=r(_M,"The model class to instantiate is selected based on the "),T3e=n(_M,"CODE",{});var vut=s(T3e);ZCr=r(vut,"model_type"),vut.forEach(t),e4r=r(_M,` property of the config object (either
passed as an argument or loaded from `),F3e=n(_M,"CODE",{});var Tut=s(F3e);o4r=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),r4r=r(_M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=n(_M,"CODE",{});var Fut=s(C3e);t4r=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),a4r=r(_M,":"),_M.forEach(t),n4r=i(La),Fe=n(La,"UL",{});var to=s(Fe);IC=n(to,"LI",{});var H8e=s(IC);M3e=n(H8e,"STRONG",{});var Cut=s(M3e);s4r=r(Cut,"albert"),Cut.forEach(t),l4r=r(H8e," \u2014 "),KX=n(H8e,"A",{href:!0});var Mut=s(KX);i4r=r(Mut,"FlaxAlbertForSequenceClassification"),Mut.forEach(t),d4r=r(H8e," (ALBERT model)"),H8e.forEach(t),c4r=i(to),DC=n(to,"LI",{});var U8e=s(DC);E3e=n(U8e,"STRONG",{});var Eut=s(E3e);f4r=r(Eut,"bart"),Eut.forEach(t),m4r=r(U8e," \u2014 "),ZX=n(U8e,"A",{href:!0});var yut=s(ZX);g4r=r(yut,"FlaxBartForSequenceClassification"),yut.forEach(t),h4r=r(U8e," (BART model)"),U8e.forEach(t),p4r=i(to),jC=n(to,"LI",{});var J8e=s(jC);y3e=n(J8e,"STRONG",{});var wut=s(y3e);_4r=r(wut,"bert"),wut.forEach(t),u4r=r(J8e," \u2014 "),eV=n(J8e,"A",{href:!0});var Aut=s(eV);b4r=r(Aut,"FlaxBertForSequenceClassification"),Aut.forEach(t),v4r=r(J8e," (BERT model)"),J8e.forEach(t),T4r=i(to),NC=n(to,"LI",{});var Y8e=s(NC);w3e=n(Y8e,"STRONG",{});var Lut=s(w3e);F4r=r(Lut,"big_bird"),Lut.forEach(t),C4r=r(Y8e," \u2014 "),oV=n(Y8e,"A",{href:!0});var But=s(oV);M4r=r(But,"FlaxBigBirdForSequenceClassification"),But.forEach(t),E4r=r(Y8e," (BigBird model)"),Y8e.forEach(t),y4r=i(to),qC=n(to,"LI",{});var K8e=s(qC);A3e=n(K8e,"STRONG",{});var xut=s(A3e);w4r=r(xut,"distilbert"),xut.forEach(t),A4r=r(K8e," \u2014 "),rV=n(K8e,"A",{href:!0});var kut=s(rV);L4r=r(kut,"FlaxDistilBertForSequenceClassification"),kut.forEach(t),B4r=r(K8e," (DistilBERT model)"),K8e.forEach(t),x4r=i(to),GC=n(to,"LI",{});var Z8e=s(GC);L3e=n(Z8e,"STRONG",{});var Rut=s(L3e);k4r=r(Rut,"electra"),Rut.forEach(t),R4r=r(Z8e," \u2014 "),tV=n(Z8e,"A",{href:!0});var Sut=s(tV);S4r=r(Sut,"FlaxElectraForSequenceClassification"),Sut.forEach(t),P4r=r(Z8e," (ELECTRA model)"),Z8e.forEach(t),$4r=i(to),OC=n(to,"LI",{});var e7e=s(OC);B3e=n(e7e,"STRONG",{});var Put=s(B3e);I4r=r(Put,"mbart"),Put.forEach(t),D4r=r(e7e," \u2014 "),aV=n(e7e,"A",{href:!0});var $ut=s(aV);j4r=r($ut,"FlaxMBartForSequenceClassification"),$ut.forEach(t),N4r=r(e7e," (mBART model)"),e7e.forEach(t),q4r=i(to),XC=n(to,"LI",{});var o7e=s(XC);x3e=n(o7e,"STRONG",{});var Iut=s(x3e);G4r=r(Iut,"roberta"),Iut.forEach(t),O4r=r(o7e," \u2014 "),nV=n(o7e,"A",{href:!0});var Dut=s(nV);X4r=r(Dut,"FlaxRobertaForSequenceClassification"),Dut.forEach(t),V4r=r(o7e," (RoBERTa model)"),o7e.forEach(t),z4r=i(to),VC=n(to,"LI",{});var r7e=s(VC);k3e=n(r7e,"STRONG",{});var jut=s(k3e);W4r=r(jut,"roformer"),jut.forEach(t),Q4r=r(r7e," \u2014 "),sV=n(r7e,"A",{href:!0});var Nut=s(sV);H4r=r(Nut,"FlaxRoFormerForSequenceClassification"),Nut.forEach(t),U4r=r(r7e," (RoFormer model)"),r7e.forEach(t),to.forEach(t),J4r=i(La),R3e=n(La,"P",{});var qut=s(R3e);Y4r=r(qut,"Examples:"),qut.forEach(t),K4r=i(La),m(C0.$$.fragment,La),La.forEach(t),hi.forEach(t),uxe=i(c),nf=n(c,"H2",{class:!0});var ARe=s(nf);zC=n(ARe,"A",{id:!0,class:!0,href:!0});var Gut=s(zC);S3e=n(Gut,"SPAN",{});var Out=s(S3e);m(M0.$$.fragment,Out),Out.forEach(t),Gut.forEach(t),Z4r=i(ARe),P3e=n(ARe,"SPAN",{});var Xut=s(P3e);eMr=r(Xut,"FlaxAutoModelForQuestionAnswering"),Xut.forEach(t),ARe.forEach(t),bxe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(E0.$$.fragment,_i),oMr=i(_i),sf=n(_i,"P",{});var mW=s(sf);rMr=r(mW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$3e=n(mW,"CODE",{});var Vut=s($3e);tMr=r(Vut,"from_pretrained()"),Vut.forEach(t),aMr=r(mW,"class method or the "),I3e=n(mW,"CODE",{});var zut=s(I3e);nMr=r(zut,"from_config()"),zut.forEach(t),sMr=r(mW,`class
method.`),mW.forEach(t),lMr=i(_i),y0=n(_i,"P",{});var LRe=s(y0);iMr=r(LRe,"This class cannot be instantiated directly using "),D3e=n(LRe,"CODE",{});var Wut=s(D3e);dMr=r(Wut,"__init__()"),Wut.forEach(t),cMr=r(LRe," (throws an error)."),LRe.forEach(t),fMr=i(_i),At=n(_i,"DIV",{class:!0});var ui=s(At);m(w0.$$.fragment,ui),mMr=i(ui),j3e=n(ui,"P",{});var Qut=s(j3e);gMr=r(Qut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qut.forEach(t),hMr=i(ui),lf=n(ui,"P",{});var gW=s(lf);pMr=r(gW,`Note:
Loading a model from its configuration file does `),N3e=n(gW,"STRONG",{});var Hut=s(N3e);_Mr=r(Hut,"not"),Hut.forEach(t),uMr=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),q3e=n(gW,"CODE",{});var Uut=s(q3e);bMr=r(Uut,"from_pretrained()"),Uut.forEach(t),vMr=r(gW,"to load the model weights."),gW.forEach(t),TMr=i(ui),G3e=n(ui,"P",{});var Jut=s(G3e);FMr=r(Jut,"Examples:"),Jut.forEach(t),CMr=i(ui),m(A0.$$.fragment,ui),ui.forEach(t),MMr=i(_i),Ro=n(_i,"DIV",{class:!0});var Ba=s(Ro);m(L0.$$.fragment,Ba),EMr=i(Ba),O3e=n(Ba,"P",{});var Yut=s(O3e);yMr=r(Yut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Yut.forEach(t),wMr=i(Ba),xn=n(Ba,"P",{});var uM=s(xn);AMr=r(uM,"The model class to instantiate is selected based on the "),X3e=n(uM,"CODE",{});var Kut=s(X3e);LMr=r(Kut,"model_type"),Kut.forEach(t),BMr=r(uM,` property of the config object (either
passed as an argument or loaded from `),V3e=n(uM,"CODE",{});var Zut=s(V3e);xMr=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),kMr=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=n(uM,"CODE",{});var e1t=s(z3e);RMr=r(e1t,"pretrained_model_name_or_path"),e1t.forEach(t),SMr=r(uM,":"),uM.forEach(t),PMr=i(Ba),Ce=n(Ba,"UL",{});var ao=s(Ce);WC=n(ao,"LI",{});var t7e=s(WC);W3e=n(t7e,"STRONG",{});var o1t=s(W3e);$Mr=r(o1t,"albert"),o1t.forEach(t),IMr=r(t7e," \u2014 "),lV=n(t7e,"A",{href:!0});var r1t=s(lV);DMr=r(r1t,"FlaxAlbertForQuestionAnswering"),r1t.forEach(t),jMr=r(t7e," (ALBERT model)"),t7e.forEach(t),NMr=i(ao),QC=n(ao,"LI",{});var a7e=s(QC);Q3e=n(a7e,"STRONG",{});var t1t=s(Q3e);qMr=r(t1t,"bart"),t1t.forEach(t),GMr=r(a7e," \u2014 "),iV=n(a7e,"A",{href:!0});var a1t=s(iV);OMr=r(a1t,"FlaxBartForQuestionAnswering"),a1t.forEach(t),XMr=r(a7e," (BART model)"),a7e.forEach(t),VMr=i(ao),HC=n(ao,"LI",{});var n7e=s(HC);H3e=n(n7e,"STRONG",{});var n1t=s(H3e);zMr=r(n1t,"bert"),n1t.forEach(t),WMr=r(n7e," \u2014 "),dV=n(n7e,"A",{href:!0});var s1t=s(dV);QMr=r(s1t,"FlaxBertForQuestionAnswering"),s1t.forEach(t),HMr=r(n7e," (BERT model)"),n7e.forEach(t),UMr=i(ao),UC=n(ao,"LI",{});var s7e=s(UC);U3e=n(s7e,"STRONG",{});var l1t=s(U3e);JMr=r(l1t,"big_bird"),l1t.forEach(t),YMr=r(s7e," \u2014 "),cV=n(s7e,"A",{href:!0});var i1t=s(cV);KMr=r(i1t,"FlaxBigBirdForQuestionAnswering"),i1t.forEach(t),ZMr=r(s7e," (BigBird model)"),s7e.forEach(t),eEr=i(ao),JC=n(ao,"LI",{});var l7e=s(JC);J3e=n(l7e,"STRONG",{});var d1t=s(J3e);oEr=r(d1t,"distilbert"),d1t.forEach(t),rEr=r(l7e," \u2014 "),fV=n(l7e,"A",{href:!0});var c1t=s(fV);tEr=r(c1t,"FlaxDistilBertForQuestionAnswering"),c1t.forEach(t),aEr=r(l7e," (DistilBERT model)"),l7e.forEach(t),nEr=i(ao),YC=n(ao,"LI",{});var i7e=s(YC);Y3e=n(i7e,"STRONG",{});var f1t=s(Y3e);sEr=r(f1t,"electra"),f1t.forEach(t),lEr=r(i7e," \u2014 "),mV=n(i7e,"A",{href:!0});var m1t=s(mV);iEr=r(m1t,"FlaxElectraForQuestionAnswering"),m1t.forEach(t),dEr=r(i7e," (ELECTRA model)"),i7e.forEach(t),cEr=i(ao),KC=n(ao,"LI",{});var d7e=s(KC);K3e=n(d7e,"STRONG",{});var g1t=s(K3e);fEr=r(g1t,"mbart"),g1t.forEach(t),mEr=r(d7e," \u2014 "),gV=n(d7e,"A",{href:!0});var h1t=s(gV);gEr=r(h1t,"FlaxMBartForQuestionAnswering"),h1t.forEach(t),hEr=r(d7e," (mBART model)"),d7e.forEach(t),pEr=i(ao),ZC=n(ao,"LI",{});var c7e=s(ZC);Z3e=n(c7e,"STRONG",{});var p1t=s(Z3e);_Er=r(p1t,"roberta"),p1t.forEach(t),uEr=r(c7e," \u2014 "),hV=n(c7e,"A",{href:!0});var _1t=s(hV);bEr=r(_1t,"FlaxRobertaForQuestionAnswering"),_1t.forEach(t),vEr=r(c7e," (RoBERTa model)"),c7e.forEach(t),TEr=i(ao),e4=n(ao,"LI",{});var f7e=s(e4);e5e=n(f7e,"STRONG",{});var u1t=s(e5e);FEr=r(u1t,"roformer"),u1t.forEach(t),CEr=r(f7e," \u2014 "),pV=n(f7e,"A",{href:!0});var b1t=s(pV);MEr=r(b1t,"FlaxRoFormerForQuestionAnswering"),b1t.forEach(t),EEr=r(f7e," (RoFormer model)"),f7e.forEach(t),ao.forEach(t),yEr=i(Ba),o5e=n(Ba,"P",{});var v1t=s(o5e);wEr=r(v1t,"Examples:"),v1t.forEach(t),AEr=i(Ba),m(B0.$$.fragment,Ba),Ba.forEach(t),_i.forEach(t),vxe=i(c),df=n(c,"H2",{class:!0});var BRe=s(df);o4=n(BRe,"A",{id:!0,class:!0,href:!0});var T1t=s(o4);r5e=n(T1t,"SPAN",{});var F1t=s(r5e);m(x0.$$.fragment,F1t),F1t.forEach(t),T1t.forEach(t),LEr=i(BRe),t5e=n(BRe,"SPAN",{});var C1t=s(t5e);BEr=r(C1t,"FlaxAutoModelForTokenClassification"),C1t.forEach(t),BRe.forEach(t),Txe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(k0.$$.fragment,bi),xEr=i(bi),cf=n(bi,"P",{});var hW=s(cf);kEr=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),a5e=n(hW,"CODE",{});var M1t=s(a5e);REr=r(M1t,"from_pretrained()"),M1t.forEach(t),SEr=r(hW,"class method or the "),n5e=n(hW,"CODE",{});var E1t=s(n5e);PEr=r(E1t,"from_config()"),E1t.forEach(t),$Er=r(hW,`class
method.`),hW.forEach(t),IEr=i(bi),R0=n(bi,"P",{});var xRe=s(R0);DEr=r(xRe,"This class cannot be instantiated directly using "),s5e=n(xRe,"CODE",{});var y1t=s(s5e);jEr=r(y1t,"__init__()"),y1t.forEach(t),NEr=r(xRe," (throws an error)."),xRe.forEach(t),qEr=i(bi),Lt=n(bi,"DIV",{class:!0});var vi=s(Lt);m(S0.$$.fragment,vi),GEr=i(vi),l5e=n(vi,"P",{});var w1t=s(l5e);OEr=r(w1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),w1t.forEach(t),XEr=i(vi),ff=n(vi,"P",{});var pW=s(ff);VEr=r(pW,`Note:
Loading a model from its configuration file does `),i5e=n(pW,"STRONG",{});var A1t=s(i5e);zEr=r(A1t,"not"),A1t.forEach(t),WEr=r(pW,` load the model weights. It only affects the
model\u2019s configuration. Use `),d5e=n(pW,"CODE",{});var L1t=s(d5e);QEr=r(L1t,"from_pretrained()"),L1t.forEach(t),HEr=r(pW,"to load the model weights."),pW.forEach(t),UEr=i(vi),c5e=n(vi,"P",{});var B1t=s(c5e);JEr=r(B1t,"Examples:"),B1t.forEach(t),YEr=i(vi),m(P0.$$.fragment,vi),vi.forEach(t),KEr=i(bi),So=n(bi,"DIV",{class:!0});var xa=s(So);m($0.$$.fragment,xa),ZEr=i(xa),f5e=n(xa,"P",{});var x1t=s(f5e);eyr=r(x1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),x1t.forEach(t),oyr=i(xa),kn=n(xa,"P",{});var bM=s(kn);ryr=r(bM,"The model class to instantiate is selected based on the "),m5e=n(bM,"CODE",{});var k1t=s(m5e);tyr=r(k1t,"model_type"),k1t.forEach(t),ayr=r(bM,` property of the config object (either
passed as an argument or loaded from `),g5e=n(bM,"CODE",{});var R1t=s(g5e);nyr=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),syr=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=n(bM,"CODE",{});var S1t=s(h5e);lyr=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),iyr=r(bM,":"),bM.forEach(t),dyr=i(xa),so=n(xa,"UL",{});var ta=s(so);r4=n(ta,"LI",{});var m7e=s(r4);p5e=n(m7e,"STRONG",{});var P1t=s(p5e);cyr=r(P1t,"albert"),P1t.forEach(t),fyr=r(m7e," \u2014 "),_V=n(m7e,"A",{href:!0});var $1t=s(_V);myr=r($1t,"FlaxAlbertForTokenClassification"),$1t.forEach(t),gyr=r(m7e," (ALBERT model)"),m7e.forEach(t),hyr=i(ta),t4=n(ta,"LI",{});var g7e=s(t4);_5e=n(g7e,"STRONG",{});var I1t=s(_5e);pyr=r(I1t,"bert"),I1t.forEach(t),_yr=r(g7e," \u2014 "),uV=n(g7e,"A",{href:!0});var D1t=s(uV);uyr=r(D1t,"FlaxBertForTokenClassification"),D1t.forEach(t),byr=r(g7e," (BERT model)"),g7e.forEach(t),vyr=i(ta),a4=n(ta,"LI",{});var h7e=s(a4);u5e=n(h7e,"STRONG",{});var j1t=s(u5e);Tyr=r(j1t,"big_bird"),j1t.forEach(t),Fyr=r(h7e," \u2014 "),bV=n(h7e,"A",{href:!0});var N1t=s(bV);Cyr=r(N1t,"FlaxBigBirdForTokenClassification"),N1t.forEach(t),Myr=r(h7e," (BigBird model)"),h7e.forEach(t),Eyr=i(ta),n4=n(ta,"LI",{});var p7e=s(n4);b5e=n(p7e,"STRONG",{});var q1t=s(b5e);yyr=r(q1t,"distilbert"),q1t.forEach(t),wyr=r(p7e," \u2014 "),vV=n(p7e,"A",{href:!0});var G1t=s(vV);Ayr=r(G1t,"FlaxDistilBertForTokenClassification"),G1t.forEach(t),Lyr=r(p7e," (DistilBERT model)"),p7e.forEach(t),Byr=i(ta),s4=n(ta,"LI",{});var _7e=s(s4);v5e=n(_7e,"STRONG",{});var O1t=s(v5e);xyr=r(O1t,"electra"),O1t.forEach(t),kyr=r(_7e," \u2014 "),TV=n(_7e,"A",{href:!0});var X1t=s(TV);Ryr=r(X1t,"FlaxElectraForTokenClassification"),X1t.forEach(t),Syr=r(_7e," (ELECTRA model)"),_7e.forEach(t),Pyr=i(ta),l4=n(ta,"LI",{});var u7e=s(l4);T5e=n(u7e,"STRONG",{});var V1t=s(T5e);$yr=r(V1t,"roberta"),V1t.forEach(t),Iyr=r(u7e," \u2014 "),FV=n(u7e,"A",{href:!0});var z1t=s(FV);Dyr=r(z1t,"FlaxRobertaForTokenClassification"),z1t.forEach(t),jyr=r(u7e," (RoBERTa model)"),u7e.forEach(t),Nyr=i(ta),i4=n(ta,"LI",{});var b7e=s(i4);F5e=n(b7e,"STRONG",{});var W1t=s(F5e);qyr=r(W1t,"roformer"),W1t.forEach(t),Gyr=r(b7e," \u2014 "),CV=n(b7e,"A",{href:!0});var Q1t=s(CV);Oyr=r(Q1t,"FlaxRoFormerForTokenClassification"),Q1t.forEach(t),Xyr=r(b7e," (RoFormer model)"),b7e.forEach(t),ta.forEach(t),Vyr=i(xa),C5e=n(xa,"P",{});var H1t=s(C5e);zyr=r(H1t,"Examples:"),H1t.forEach(t),Wyr=i(xa),m(I0.$$.fragment,xa),xa.forEach(t),bi.forEach(t),Fxe=i(c),mf=n(c,"H2",{class:!0});var kRe=s(mf);d4=n(kRe,"A",{id:!0,class:!0,href:!0});var U1t=s(d4);M5e=n(U1t,"SPAN",{});var J1t=s(M5e);m(D0.$$.fragment,J1t),J1t.forEach(t),U1t.forEach(t),Qyr=i(kRe),E5e=n(kRe,"SPAN",{});var Y1t=s(E5e);Hyr=r(Y1t,"FlaxAutoModelForMultipleChoice"),Y1t.forEach(t),kRe.forEach(t),Cxe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(j0.$$.fragment,Ti),Uyr=i(Ti),gf=n(Ti,"P",{});var _W=s(gf);Jyr=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),y5e=n(_W,"CODE",{});var K1t=s(y5e);Yyr=r(K1t,"from_pretrained()"),K1t.forEach(t),Kyr=r(_W,"class method or the "),w5e=n(_W,"CODE",{});var Z1t=s(w5e);Zyr=r(Z1t,"from_config()"),Z1t.forEach(t),ewr=r(_W,`class
method.`),_W.forEach(t),owr=i(Ti),N0=n(Ti,"P",{});var RRe=s(N0);rwr=r(RRe,"This class cannot be instantiated directly using "),A5e=n(RRe,"CODE",{});var ebt=s(A5e);twr=r(ebt,"__init__()"),ebt.forEach(t),awr=r(RRe," (throws an error)."),RRe.forEach(t),nwr=i(Ti),Bt=n(Ti,"DIV",{class:!0});var Fi=s(Bt);m(q0.$$.fragment,Fi),swr=i(Fi),L5e=n(Fi,"P",{});var obt=s(L5e);lwr=r(obt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),obt.forEach(t),iwr=i(Fi),hf=n(Fi,"P",{});var uW=s(hf);dwr=r(uW,`Note:
Loading a model from its configuration file does `),B5e=n(uW,"STRONG",{});var rbt=s(B5e);cwr=r(rbt,"not"),rbt.forEach(t),fwr=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),x5e=n(uW,"CODE",{});var tbt=s(x5e);mwr=r(tbt,"from_pretrained()"),tbt.forEach(t),gwr=r(uW,"to load the model weights."),uW.forEach(t),hwr=i(Fi),k5e=n(Fi,"P",{});var abt=s(k5e);pwr=r(abt,"Examples:"),abt.forEach(t),_wr=i(Fi),m(G0.$$.fragment,Fi),Fi.forEach(t),uwr=i(Ti),Po=n(Ti,"DIV",{class:!0});var ka=s(Po);m(O0.$$.fragment,ka),bwr=i(ka),R5e=n(ka,"P",{});var nbt=s(R5e);vwr=r(nbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),nbt.forEach(t),Twr=i(ka),Rn=n(ka,"P",{});var vM=s(Rn);Fwr=r(vM,"The model class to instantiate is selected based on the "),S5e=n(vM,"CODE",{});var sbt=s(S5e);Cwr=r(sbt,"model_type"),sbt.forEach(t),Mwr=r(vM,` property of the config object (either
passed as an argument or loaded from `),P5e=n(vM,"CODE",{});var lbt=s(P5e);Ewr=r(lbt,"pretrained_model_name_or_path"),lbt.forEach(t),ywr=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=n(vM,"CODE",{});var ibt=s($5e);wwr=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),Awr=r(vM,":"),vM.forEach(t),Lwr=i(ka),lo=n(ka,"UL",{});var aa=s(lo);c4=n(aa,"LI",{});var v7e=s(c4);I5e=n(v7e,"STRONG",{});var dbt=s(I5e);Bwr=r(dbt,"albert"),dbt.forEach(t),xwr=r(v7e," \u2014 "),MV=n(v7e,"A",{href:!0});var cbt=s(MV);kwr=r(cbt,"FlaxAlbertForMultipleChoice"),cbt.forEach(t),Rwr=r(v7e," (ALBERT model)"),v7e.forEach(t),Swr=i(aa),f4=n(aa,"LI",{});var T7e=s(f4);D5e=n(T7e,"STRONG",{});var fbt=s(D5e);Pwr=r(fbt,"bert"),fbt.forEach(t),$wr=r(T7e," \u2014 "),EV=n(T7e,"A",{href:!0});var mbt=s(EV);Iwr=r(mbt,"FlaxBertForMultipleChoice"),mbt.forEach(t),Dwr=r(T7e," (BERT model)"),T7e.forEach(t),jwr=i(aa),m4=n(aa,"LI",{});var F7e=s(m4);j5e=n(F7e,"STRONG",{});var gbt=s(j5e);Nwr=r(gbt,"big_bird"),gbt.forEach(t),qwr=r(F7e," \u2014 "),yV=n(F7e,"A",{href:!0});var hbt=s(yV);Gwr=r(hbt,"FlaxBigBirdForMultipleChoice"),hbt.forEach(t),Owr=r(F7e," (BigBird model)"),F7e.forEach(t),Xwr=i(aa),g4=n(aa,"LI",{});var C7e=s(g4);N5e=n(C7e,"STRONG",{});var pbt=s(N5e);Vwr=r(pbt,"distilbert"),pbt.forEach(t),zwr=r(C7e," \u2014 "),wV=n(C7e,"A",{href:!0});var _bt=s(wV);Wwr=r(_bt,"FlaxDistilBertForMultipleChoice"),_bt.forEach(t),Qwr=r(C7e," (DistilBERT model)"),C7e.forEach(t),Hwr=i(aa),h4=n(aa,"LI",{});var M7e=s(h4);q5e=n(M7e,"STRONG",{});var ubt=s(q5e);Uwr=r(ubt,"electra"),ubt.forEach(t),Jwr=r(M7e," \u2014 "),AV=n(M7e,"A",{href:!0});var bbt=s(AV);Ywr=r(bbt,"FlaxElectraForMultipleChoice"),bbt.forEach(t),Kwr=r(M7e," (ELECTRA model)"),M7e.forEach(t),Zwr=i(aa),p4=n(aa,"LI",{});var E7e=s(p4);G5e=n(E7e,"STRONG",{});var vbt=s(G5e);e6r=r(vbt,"roberta"),vbt.forEach(t),o6r=r(E7e," \u2014 "),LV=n(E7e,"A",{href:!0});var Tbt=s(LV);r6r=r(Tbt,"FlaxRobertaForMultipleChoice"),Tbt.forEach(t),t6r=r(E7e," (RoBERTa model)"),E7e.forEach(t),a6r=i(aa),_4=n(aa,"LI",{});var y7e=s(_4);O5e=n(y7e,"STRONG",{});var Fbt=s(O5e);n6r=r(Fbt,"roformer"),Fbt.forEach(t),s6r=r(y7e," \u2014 "),BV=n(y7e,"A",{href:!0});var Cbt=s(BV);l6r=r(Cbt,"FlaxRoFormerForMultipleChoice"),Cbt.forEach(t),i6r=r(y7e," (RoFormer model)"),y7e.forEach(t),aa.forEach(t),d6r=i(ka),X5e=n(ka,"P",{});var Mbt=s(X5e);c6r=r(Mbt,"Examples:"),Mbt.forEach(t),f6r=i(ka),m(X0.$$.fragment,ka),ka.forEach(t),Ti.forEach(t),Mxe=i(c),pf=n(c,"H2",{class:!0});var SRe=s(pf);u4=n(SRe,"A",{id:!0,class:!0,href:!0});var Ebt=s(u4);V5e=n(Ebt,"SPAN",{});var ybt=s(V5e);m(V0.$$.fragment,ybt),ybt.forEach(t),Ebt.forEach(t),m6r=i(SRe),z5e=n(SRe,"SPAN",{});var wbt=s(z5e);g6r=r(wbt,"FlaxAutoModelForNextSentencePrediction"),wbt.forEach(t),SRe.forEach(t),Exe=i(c),Dr=n(c,"DIV",{class:!0});var Ci=s(Dr);m(z0.$$.fragment,Ci),h6r=i(Ci),_f=n(Ci,"P",{});var bW=s(_f);p6r=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),W5e=n(bW,"CODE",{});var Abt=s(W5e);_6r=r(Abt,"from_pretrained()"),Abt.forEach(t),u6r=r(bW,"class method or the "),Q5e=n(bW,"CODE",{});var Lbt=s(Q5e);b6r=r(Lbt,"from_config()"),Lbt.forEach(t),v6r=r(bW,`class
method.`),bW.forEach(t),T6r=i(Ci),W0=n(Ci,"P",{});var PRe=s(W0);F6r=r(PRe,"This class cannot be instantiated directly using "),H5e=n(PRe,"CODE",{});var Bbt=s(H5e);C6r=r(Bbt,"__init__()"),Bbt.forEach(t),M6r=r(PRe," (throws an error)."),PRe.forEach(t),E6r=i(Ci),xt=n(Ci,"DIV",{class:!0});var Mi=s(xt);m(Q0.$$.fragment,Mi),y6r=i(Mi),U5e=n(Mi,"P",{});var xbt=s(U5e);w6r=r(xbt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xbt.forEach(t),A6r=i(Mi),uf=n(Mi,"P",{});var vW=s(uf);L6r=r(vW,`Note:
Loading a model from its configuration file does `),J5e=n(vW,"STRONG",{});var kbt=s(J5e);B6r=r(kbt,"not"),kbt.forEach(t),x6r=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Y5e=n(vW,"CODE",{});var Rbt=s(Y5e);k6r=r(Rbt,"from_pretrained()"),Rbt.forEach(t),R6r=r(vW,"to load the model weights."),vW.forEach(t),S6r=i(Mi),K5e=n(Mi,"P",{});var Sbt=s(K5e);P6r=r(Sbt,"Examples:"),Sbt.forEach(t),$6r=i(Mi),m(H0.$$.fragment,Mi),Mi.forEach(t),I6r=i(Ci),$o=n(Ci,"DIV",{class:!0});var Ra=s($o);m(U0.$$.fragment,Ra),D6r=i(Ra),Z5e=n(Ra,"P",{});var Pbt=s(Z5e);j6r=r(Pbt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Pbt.forEach(t),N6r=i(Ra),Sn=n(Ra,"P",{});var TM=s(Sn);q6r=r(TM,"The model class to instantiate is selected based on the "),e2e=n(TM,"CODE",{});var $bt=s(e2e);G6r=r($bt,"model_type"),$bt.forEach(t),O6r=r(TM,` property of the config object (either
passed as an argument or loaded from `),o2e=n(TM,"CODE",{});var Ibt=s(o2e);X6r=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),V6r=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(TM,"CODE",{});var Dbt=s(r2e);z6r=r(Dbt,"pretrained_model_name_or_path"),Dbt.forEach(t),W6r=r(TM,":"),TM.forEach(t),Q6r=i(Ra),t2e=n(Ra,"UL",{});var jbt=s(t2e);b4=n(jbt,"LI",{});var w7e=s(b4);a2e=n(w7e,"STRONG",{});var Nbt=s(a2e);H6r=r(Nbt,"bert"),Nbt.forEach(t),U6r=r(w7e," \u2014 "),xV=n(w7e,"A",{href:!0});var qbt=s(xV);J6r=r(qbt,"FlaxBertForNextSentencePrediction"),qbt.forEach(t),Y6r=r(w7e," (BERT model)"),w7e.forEach(t),jbt.forEach(t),K6r=i(Ra),n2e=n(Ra,"P",{});var Gbt=s(n2e);Z6r=r(Gbt,"Examples:"),Gbt.forEach(t),eAr=i(Ra),m(J0.$$.fragment,Ra),Ra.forEach(t),Ci.forEach(t),yxe=i(c),bf=n(c,"H2",{class:!0});var $Re=s(bf);v4=n($Re,"A",{id:!0,class:!0,href:!0});var Obt=s(v4);s2e=n(Obt,"SPAN",{});var Xbt=s(s2e);m(Y0.$$.fragment,Xbt),Xbt.forEach(t),Obt.forEach(t),oAr=i($Re),l2e=n($Re,"SPAN",{});var Vbt=s(l2e);rAr=r(Vbt,"FlaxAutoModelForImageClassification"),Vbt.forEach(t),$Re.forEach(t),wxe=i(c),jr=n(c,"DIV",{class:!0});var Ei=s(jr);m(K0.$$.fragment,Ei),tAr=i(Ei),vf=n(Ei,"P",{});var TW=s(vf);aAr=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),i2e=n(TW,"CODE",{});var zbt=s(i2e);nAr=r(zbt,"from_pretrained()"),zbt.forEach(t),sAr=r(TW,"class method or the "),d2e=n(TW,"CODE",{});var Wbt=s(d2e);lAr=r(Wbt,"from_config()"),Wbt.forEach(t),iAr=r(TW,`class
method.`),TW.forEach(t),dAr=i(Ei),Z0=n(Ei,"P",{});var IRe=s(Z0);cAr=r(IRe,"This class cannot be instantiated directly using "),c2e=n(IRe,"CODE",{});var Qbt=s(c2e);fAr=r(Qbt,"__init__()"),Qbt.forEach(t),mAr=r(IRe," (throws an error)."),IRe.forEach(t),gAr=i(Ei),kt=n(Ei,"DIV",{class:!0});var yi=s(kt);m(eL.$$.fragment,yi),hAr=i(yi),f2e=n(yi,"P",{});var Hbt=s(f2e);pAr=r(Hbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hbt.forEach(t),_Ar=i(yi),Tf=n(yi,"P",{});var FW=s(Tf);uAr=r(FW,`Note:
Loading a model from its configuration file does `),m2e=n(FW,"STRONG",{});var Ubt=s(m2e);bAr=r(Ubt,"not"),Ubt.forEach(t),vAr=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),g2e=n(FW,"CODE",{});var Jbt=s(g2e);TAr=r(Jbt,"from_pretrained()"),Jbt.forEach(t),FAr=r(FW,"to load the model weights."),FW.forEach(t),CAr=i(yi),h2e=n(yi,"P",{});var Ybt=s(h2e);MAr=r(Ybt,"Examples:"),Ybt.forEach(t),EAr=i(yi),m(oL.$$.fragment,yi),yi.forEach(t),yAr=i(Ei),Io=n(Ei,"DIV",{class:!0});var Sa=s(Io);m(rL.$$.fragment,Sa),wAr=i(Sa),p2e=n(Sa,"P",{});var Kbt=s(p2e);AAr=r(Kbt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kbt.forEach(t),LAr=i(Sa),Pn=n(Sa,"P",{});var FM=s(Pn);BAr=r(FM,"The model class to instantiate is selected based on the "),_2e=n(FM,"CODE",{});var Zbt=s(_2e);xAr=r(Zbt,"model_type"),Zbt.forEach(t),kAr=r(FM,` property of the config object (either
passed as an argument or loaded from `),u2e=n(FM,"CODE",{});var e3t=s(u2e);RAr=r(e3t,"pretrained_model_name_or_path"),e3t.forEach(t),SAr=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=n(FM,"CODE",{});var o3t=s(b2e);PAr=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),$Ar=r(FM,":"),FM.forEach(t),IAr=i(Sa),tL=n(Sa,"UL",{});var DRe=s(tL);T4=n(DRe,"LI",{});var A7e=s(T4);v2e=n(A7e,"STRONG",{});var r3t=s(v2e);DAr=r(r3t,"beit"),r3t.forEach(t),jAr=r(A7e," \u2014 "),kV=n(A7e,"A",{href:!0});var t3t=s(kV);NAr=r(t3t,"FlaxBeitForImageClassification"),t3t.forEach(t),qAr=r(A7e," (BEiT model)"),A7e.forEach(t),GAr=i(DRe),F4=n(DRe,"LI",{});var L7e=s(F4);T2e=n(L7e,"STRONG",{});var a3t=s(T2e);OAr=r(a3t,"vit"),a3t.forEach(t),XAr=r(L7e," \u2014 "),RV=n(L7e,"A",{href:!0});var n3t=s(RV);VAr=r(n3t,"FlaxViTForImageClassification"),n3t.forEach(t),zAr=r(L7e," (ViT model)"),L7e.forEach(t),DRe.forEach(t),WAr=i(Sa),F2e=n(Sa,"P",{});var s3t=s(F2e);QAr=r(s3t,"Examples:"),s3t.forEach(t),HAr=i(Sa),m(aL.$$.fragment,Sa),Sa.forEach(t),Ei.forEach(t),Axe=i(c),Ff=n(c,"H2",{class:!0});var jRe=s(Ff);C4=n(jRe,"A",{id:!0,class:!0,href:!0});var l3t=s(C4);C2e=n(l3t,"SPAN",{});var i3t=s(C2e);m(nL.$$.fragment,i3t),i3t.forEach(t),l3t.forEach(t),UAr=i(jRe),M2e=n(jRe,"SPAN",{});var d3t=s(M2e);JAr=r(d3t,"FlaxAutoModelForVision2Seq"),d3t.forEach(t),jRe.forEach(t),Lxe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);m(sL.$$.fragment,wi),YAr=i(wi),Cf=n(wi,"P",{});var CW=s(Cf);KAr=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),E2e=n(CW,"CODE",{});var c3t=s(E2e);ZAr=r(c3t,"from_pretrained()"),c3t.forEach(t),e0r=r(CW,"class method or the "),y2e=n(CW,"CODE",{});var f3t=s(y2e);o0r=r(f3t,"from_config()"),f3t.forEach(t),r0r=r(CW,`class
method.`),CW.forEach(t),t0r=i(wi),lL=n(wi,"P",{});var NRe=s(lL);a0r=r(NRe,"This class cannot be instantiated directly using "),w2e=n(NRe,"CODE",{});var m3t=s(w2e);n0r=r(m3t,"__init__()"),m3t.forEach(t),s0r=r(NRe," (throws an error)."),NRe.forEach(t),l0r=i(wi),Rt=n(wi,"DIV",{class:!0});var Ai=s(Rt);m(iL.$$.fragment,Ai),i0r=i(Ai),A2e=n(Ai,"P",{});var g3t=s(A2e);d0r=r(g3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),g3t.forEach(t),c0r=i(Ai),Mf=n(Ai,"P",{});var MW=s(Mf);f0r=r(MW,`Note:
Loading a model from its configuration file does `),L2e=n(MW,"STRONG",{});var h3t=s(L2e);m0r=r(h3t,"not"),h3t.forEach(t),g0r=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),B2e=n(MW,"CODE",{});var p3t=s(B2e);h0r=r(p3t,"from_pretrained()"),p3t.forEach(t),p0r=r(MW,"to load the model weights."),MW.forEach(t),_0r=i(Ai),x2e=n(Ai,"P",{});var _3t=s(x2e);u0r=r(_3t,"Examples:"),_3t.forEach(t),b0r=i(Ai),m(dL.$$.fragment,Ai),Ai.forEach(t),v0r=i(wi),Do=n(wi,"DIV",{class:!0});var Pa=s(Do);m(cL.$$.fragment,Pa),T0r=i(Pa),k2e=n(Pa,"P",{});var u3t=s(k2e);F0r=r(u3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),u3t.forEach(t),C0r=i(Pa),$n=n(Pa,"P",{});var CM=s($n);M0r=r(CM,"The model class to instantiate is selected based on the "),R2e=n(CM,"CODE",{});var b3t=s(R2e);E0r=r(b3t,"model_type"),b3t.forEach(t),y0r=r(CM,` property of the config object (either
passed as an argument or loaded from `),S2e=n(CM,"CODE",{});var v3t=s(S2e);w0r=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),A0r=r(CM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=n(CM,"CODE",{});var T3t=s(P2e);L0r=r(T3t,"pretrained_model_name_or_path"),T3t.forEach(t),B0r=r(CM,":"),CM.forEach(t),x0r=i(Pa),$2e=n(Pa,"UL",{});var F3t=s($2e);M4=n(F3t,"LI",{});var B7e=s(M4);I2e=n(B7e,"STRONG",{});var C3t=s(I2e);k0r=r(C3t,"vision-encoder-decoder"),C3t.forEach(t),R0r=r(B7e," \u2014 "),SV=n(B7e,"A",{href:!0});var M3t=s(SV);S0r=r(M3t,"FlaxVisionEncoderDecoderModel"),M3t.forEach(t),P0r=r(B7e," (Vision Encoder decoder model)"),B7e.forEach(t),F3t.forEach(t),$0r=i(Pa),D2e=n(Pa,"P",{});var E3t=s(D2e);I0r=r(E3t,"Examples:"),E3t.forEach(t),D0r=i(Pa),m(fL.$$.fragment,Pa),Pa.forEach(t),wi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(S3t)),d(me,"id","auto-classes"),d(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(me,"href","#auto-classes"),d(ie,"class","relative group"),d(In,"href","/docs/transformers/pr_15931/en/model_doc/auto#transformers.AutoConfig"),d(jn,"href","/docs/transformers/pr_15931/en/model_doc/auto#transformers.AutoModel"),d(Nn,"href","/docs/transformers/pr_15931/en/model_doc/auto#transformers.AutoTokenizer"),d($i,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertModel"),d(Bf,"id","extending-the-auto-classes"),d(Bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bf,"href","#extending-the-auto-classes"),d(Ii,"class","relative group"),d(kf,"id","transformers.AutoConfig"),d(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kf,"href","#transformers.AutoConfig"),d(Di,"class","relative group"),d(p8,"href","/docs/transformers/pr_15931/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(_8,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertConfig"),d(u8,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartConfig"),d(b8,"href","/docs/transformers/pr_15931/en/model_doc/beit#transformers.BeitConfig"),d(v8,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertConfig"),d(T8,"href","/docs/transformers/pr_15931/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(F8,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdConfig"),d(C8,"href","/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(M8,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(E8,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(y8,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertConfig"),d(w8,"href","/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineConfig"),d(A8,"href","/docs/transformers/pr_15931/en/model_doc/clip#transformers.CLIPConfig"),d(L8,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertConfig"),d(B8,"href","/docs/transformers/pr_15931/en/model_doc/convnext#transformers.ConvNextConfig"),d(x8,"href","/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLConfig"),d(k8,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(R8,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(S8,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaConfig"),d(P8,"href","/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d($8,"href","/docs/transformers/pr_15931/en/model_doc/deit#transformers.DeiTConfig"),d(I8,"href","/docs/transformers/pr_15931/en/model_doc/detr#transformers.DetrConfig"),d(D8,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertConfig"),d(j8,"href","/docs/transformers/pr_15931/en/model_doc/dpr#transformers.DPRConfig"),d(N8,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraConfig"),d(q8,"href","/docs/transformers/pr_15931/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(G8,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertConfig"),d(O8,"href","/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetConfig"),d(X8,"href","/docs/transformers/pr_15931/en/model_doc/fsmt#transformers.FSMTConfig"),d(V8,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelConfig"),d(z8,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Config"),d(W8,"href","/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(Q8,"href","/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJConfig"),d(H8,"href","/docs/transformers/pr_15931/en/model_doc/hubert#transformers.HubertConfig"),d(U8,"href","/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertConfig"),d(J8,"href","/docs/transformers/pr_15931/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Y8,"href","/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(K8,"href","/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(Z8,"href","/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDConfig"),d(e7,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerConfig"),d(o7,"href","/docs/transformers/pr_15931/en/model_doc/luke#transformers.LukeConfig"),d(r7,"href","/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertConfig"),d(t7,"href","/docs/transformers/pr_15931/en/model_doc/m2m_100#transformers.M2M100Config"),d(a7,"href","/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianConfig"),d(n7,"href","/docs/transformers/pr_15931/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(s7,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartConfig"),d(l7,"href","/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(i7,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(d7,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetConfig"),d(c7,"href","/docs/transformers/pr_15931/en/model_doc/mt5#transformers.MT5Config"),d(f7,"href","/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(m7,"href","/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(g7,"href","/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusConfig"),d(h7,"href","/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverConfig"),d(p7,"href","/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartConfig"),d(_7,"href","/docs/transformers/pr_15931/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(u7,"href","/docs/transformers/pr_15931/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(b7,"href","/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(v7,"href","/docs/transformers/pr_15931/en/model_doc/rag#transformers.RagConfig"),d(T7,"href","/docs/transformers/pr_15931/en/model_doc/realm#transformers.RealmConfig"),d(F7,"href","/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerConfig"),d(C7,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertConfig"),d(M7,"href","/docs/transformers/pr_15931/en/model_doc/retribert#transformers.RetriBertConfig"),d(E7,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaConfig"),d(y7,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerConfig"),d(w7,"href","/docs/transformers/pr_15931/en/model_doc/segformer#transformers.SegformerConfig"),d(A7,"href","/docs/transformers/pr_15931/en/model_doc/sew#transformers.SEWConfig"),d(L7,"href","/docs/transformers/pr_15931/en/model_doc/sew-d#transformers.SEWDConfig"),d(B7,"href","/docs/transformers/pr_15931/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(x7,"href","/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(k7,"href","/docs/transformers/pr_15931/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(R7,"href","/docs/transformers/pr_15931/en/model_doc/splinter#transformers.SplinterConfig"),d(S7,"href","/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(P7,"href","/docs/transformers/pr_15931/en/model_doc/swin#transformers.SwinConfig"),d($7,"href","/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5Config"),d(I7,"href","/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasConfig"),d(D7,"href","/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(j7,"href","/docs/transformers/pr_15931/en/model_doc/trocr#transformers.TrOCRConfig"),d(N7,"href","/docs/transformers/pr_15931/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(q7,"href","/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(G7,"href","/docs/transformers/pr_15931/en/model_doc/vilt#transformers.ViltConfig"),d(O7,"href","/docs/transformers/pr_15931/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(X7,"href","/docs/transformers/pr_15931/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(V7,"href","/docs/transformers/pr_15931/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(z7,"href","/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTConfig"),d(W7,"href","/docs/transformers/pr_15931/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Q7,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(H7,"href","/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMConfig"),d(U7,"href","/docs/transformers/pr_15931/en/model_doc/xglm#transformers.XGLMConfig"),d(J7,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMConfig"),d(Y7,"href","/docs/transformers/pr_15931/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(K7,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Z7,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(eB,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetConfig"),d(oB,"href","/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring"),d(bg,"class","docstring"),d(Xo,"class","docstring"),d(vg,"id","transformers.AutoTokenizer"),d(vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vg,"href","#transformers.AutoTokenizer"),d(Ni,"class","relative group"),d(rB,"href","/docs/transformers/pr_15931/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(tB,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertTokenizer"),d(aB,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(nB,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartTokenizer"),d(sB,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartTokenizerFast"),d(lB,"href","/docs/transformers/pr_15931/en/model_doc/barthez#transformers.BarthezTokenizer"),d(iB,"href","/docs/transformers/pr_15931/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(dB,"href","/docs/transformers/pr_15931/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(cB,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertTokenizer"),d(fB,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertTokenizerFast"),d(mB,"href","/docs/transformers/pr_15931/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(gB,"href","/docs/transformers/pr_15931/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(hB,"href","/docs/transformers/pr_15931/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(pB,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(_B,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(uB,"href","/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(bB,"href","/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(vB,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(TB,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(FB,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(CB,"href","/docs/transformers/pr_15931/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(MB,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertTokenizer"),d(EB,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(yB,"href","/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineTokenizer"),d(wB,"href","/docs/transformers/pr_15931/en/model_doc/clip#transformers.CLIPTokenizer"),d(AB,"href","/docs/transformers/pr_15931/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(LB,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(BB,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(xB,"href","/docs/transformers/pr_15931/en/model_doc/cpm#transformers.CpmTokenizer"),d(kB,"href","/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(RB,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaTokenizer"),d(SB,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(PB,"href","/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d($B,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(IB,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(DB,"href","/docs/transformers/pr_15931/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(jB,"href","/docs/transformers/pr_15931/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(NB,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraTokenizer"),d(qB,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(GB,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(OB,"href","/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetTokenizer"),d(XB,"href","/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(VB,"href","/docs/transformers/pr_15931/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(zB,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelTokenizer"),d(WB,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(QB,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(HB,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(UB,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(JB,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(YB,"href","/docs/transformers/pr_15931/en/model_doc/herbert#transformers.HerbertTokenizer"),d(KB,"href","/docs/transformers/pr_15931/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(ZB,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ex,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaTokenizer"),d(ox,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(rx,"href","/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(tx,"href","/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(ax,"href","/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(nx,"href","/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(sx,"href","/docs/transformers/pr_15931/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(lx,"href","/docs/transformers/pr_15931/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(ix,"href","/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDTokenizer"),d(dx,"href","/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDTokenizerFast"),d(cx,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerTokenizer"),d(fx,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(mx,"href","/docs/transformers/pr_15931/en/model_doc/luke#transformers.LukeTokenizer"),d(gx,"href","/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(hx,"href","/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(px,"href","/docs/transformers/pr_15931/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(_x,"href","/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianTokenizer"),d(ux,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartTokenizer"),d(bx,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(vx,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(Tx,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(Fx,"href","/docs/transformers/pr_15931/en/model_doc/mluke#transformers.MLukeTokenizer"),d(Cx,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(Mx,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(Ex,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(yx,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(wx,"href","/docs/transformers/pr_15931/en/model_doc/mt5#transformers.T5Tokenizer"),d(Ax,"href","/docs/transformers/pr_15931/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Lx,"href","/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Bx,"href","/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(xx,"href","/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(kx,"href","/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Rx,"href","/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Sx,"href","/docs/transformers/pr_15931/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Px,"href","/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartTokenizer"),d($x,"href","/docs/transformers/pr_15931/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(Ix,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertTokenizer"),d(Dx,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertTokenizerFast"),d(jx,"href","/docs/transformers/pr_15931/en/model_doc/rag#transformers.RagTokenizer"),d(Nx,"href","/docs/transformers/pr_15931/en/model_doc/realm#transformers.RealmTokenizer"),d(qx,"href","/docs/transformers/pr_15931/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Gx,"href","/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Ox,"href","/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Xx,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Vx,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(zx,"href","/docs/transformers/pr_15931/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Wx,"href","/docs/transformers/pr_15931/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Qx,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Hx,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Ux,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Jx,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Yx,"href","/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Kx,"href","/docs/transformers/pr_15931/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Zx,"href","/docs/transformers/pr_15931/en/model_doc/splinter#transformers.SplinterTokenizer"),d(ek,"href","/docs/transformers/pr_15931/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(ok,"href","/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(rk,"href","/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(tk,"href","/docs/transformers/pr_15931/en/model_doc/mt5#transformers.T5Tokenizer"),d(ak,"href","/docs/transformers/pr_15931/en/model_doc/mt5#transformers.T5TokenizerFast"),d(nk,"href","/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasTokenizer"),d(sk,"href","/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(lk,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ik,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(dk,"href","/docs/transformers/pr_15931/en/model_doc/xglm#transformers.XGLMTokenizer"),d(ck,"href","/docs/transformers/pr_15931/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(fk,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMTokenizer"),d(mk,"href","/docs/transformers/pr_15931/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(gk,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(hk,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(pk,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(_k,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(mo,"class","docstring"),d(Ug,"class","docstring"),d(Vo,"class","docstring"),d(Jg,"id","transformers.AutoFeatureExtractor"),d(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jg,"href","#transformers.AutoFeatureExtractor"),d(qi,"class","relative group"),d(uk,"href","/docs/transformers/pr_15931/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(bk,"href","/docs/transformers/pr_15931/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(vk,"href","/docs/transformers/pr_15931/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Tk,"href","/docs/transformers/pr_15931/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Fk,"href","/docs/transformers/pr_15931/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(Ck,"href","/docs/transformers/pr_15931/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(Mk,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ek,"href","/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(yk,"href","/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(wk,"href","/docs/transformers/pr_15931/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Ak,"href","/docs/transformers/pr_15931/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Lk,"href","/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(Bk,"href","/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(xk,"href","/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(kk,"href","/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Rk,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(xe,"class","docstring"),d(gh,"class","docstring"),d(zo,"class","docstring"),d(hh,"id","transformers.AutoProcessor"),d(hh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hh,"href","#transformers.AutoProcessor"),d(Gi,"class","relative group"),d(Sk,"href","/docs/transformers/pr_15931/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(Pk,"href","/docs/transformers/pr_15931/en/model_doc/clip#transformers.CLIPProcessor"),d($k,"href","/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(Ik,"href","/docs/transformers/pr_15931/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(Dk,"href","/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(jk,"href","/docs/transformers/pr_15931/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(Nk,"href","/docs/transformers/pr_15931/en/model_doc/trocr#transformers.TrOCRProcessor"),d(qk,"href","/docs/transformers/pr_15931/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(Gk,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(ke,"class","docstring"),d(Eh,"class","docstring"),d(Wo,"class","docstring"),d(yh,"id","transformers.AutoModel"),d(yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yh,"href","#transformers.AutoModel"),d(Xi,"class","relative group"),d(qr,"class","docstring"),d(Ok,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertModel"),d(Xk,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartModel"),d(Vk,"href","/docs/transformers/pr_15931/en/model_doc/beit#transformers.BeitModel"),d(zk,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertModel"),d(Wk,"href","/docs/transformers/pr_15931/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Qk,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdModel"),d(Hk,"href","/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Uk,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(Jk,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Yk,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertModel"),d(Kk,"href","/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineModel"),d(Zk,"href","/docs/transformers/pr_15931/en/model_doc/clip#transformers.CLIPModel"),d(eR,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertModel"),d(oR,"href","/docs/transformers/pr_15931/en/model_doc/convnext#transformers.ConvNextModel"),d(rR,"href","/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLModel"),d(tR,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(aR,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(nR,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaModel"),d(sR,"href","/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(lR,"href","/docs/transformers/pr_15931/en/model_doc/deit#transformers.DeiTModel"),d(iR,"href","/docs/transformers/pr_15931/en/model_doc/detr#transformers.DetrModel"),d(dR,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertModel"),d(cR,"href","/docs/transformers/pr_15931/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(fR,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraModel"),d(mR,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertModel"),d(gR,"href","/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetModel"),d(hR,"href","/docs/transformers/pr_15931/en/model_doc/fsmt#transformers.FSMTModel"),d(pR,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelModel"),d(_R,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelBaseModel"),d(uR,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2Model"),d(bR,"href","/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(vR,"href","/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJModel"),d(TR,"href","/docs/transformers/pr_15931/en/model_doc/hubert#transformers.HubertModel"),d(FR,"href","/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertModel"),d(CR,"href","/docs/transformers/pr_15931/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(MR,"href","/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(ER,"href","/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(yR,"href","/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDModel"),d(wR,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerModel"),d(AR,"href","/docs/transformers/pr_15931/en/model_doc/luke#transformers.LukeModel"),d(LR,"href","/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertModel"),d(BR,"href","/docs/transformers/pr_15931/en/model_doc/m2m_100#transformers.M2M100Model"),d(xR,"href","/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianModel"),d(kR,"href","/docs/transformers/pr_15931/en/model_doc/maskformer#transformers.MaskFormerModel"),d(RR,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartModel"),d(SR,"href","/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(PR,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertModel"),d($R,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetModel"),d(IR,"href","/docs/transformers/pr_15931/en/model_doc/mt5#transformers.MT5Model"),d(DR,"href","/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerModel"),d(jR,"href","/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(NR,"href","/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusModel"),d(qR,"href","/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverModel"),d(GR,"href","/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartModel"),d(OR,"href","/docs/transformers/pr_15931/en/model_doc/poolformer#transformers.PoolFormerModel"),d(XR,"href","/docs/transformers/pr_15931/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(VR,"href","/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertModel"),d(zR,"href","/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerModel"),d(WR,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertModel"),d(QR,"href","/docs/transformers/pr_15931/en/model_doc/retribert#transformers.RetriBertModel"),d(HR,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaModel"),d(UR,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerModel"),d(JR,"href","/docs/transformers/pr_15931/en/model_doc/segformer#transformers.SegformerModel"),d(YR,"href","/docs/transformers/pr_15931/en/model_doc/sew#transformers.SEWModel"),d(KR,"href","/docs/transformers/pr_15931/en/model_doc/sew-d#transformers.SEWDModel"),d(ZR,"href","/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(eS,"href","/docs/transformers/pr_15931/en/model_doc/splinter#transformers.SplinterModel"),d(oS,"href","/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(rS,"href","/docs/transformers/pr_15931/en/model_doc/swin#transformers.SwinModel"),d(tS,"href","/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5Model"),d(aS,"href","/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasModel"),d(nS,"href","/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(sS,"href","/docs/transformers/pr_15931/en/model_doc/unispeech#transformers.UniSpeechModel"),d(lS,"href","/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(iS,"href","/docs/transformers/pr_15931/en/model_doc/vilt#transformers.ViltModel"),d(dS,"href","/docs/transformers/pr_15931/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(cS,"href","/docs/transformers/pr_15931/en/model_doc/visual_bert#transformers.VisualBertModel"),d(fS,"href","/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTModel"),d(mS,"href","/docs/transformers/pr_15931/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(gS,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(hS,"href","/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMModel"),d(pS,"href","/docs/transformers/pr_15931/en/model_doc/xglm#transformers.XGLMModel"),d(_S,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMModel"),d(uS,"href","/docs/transformers/pr_15931/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(bS,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(vS,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(TS,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetModel"),d(FS,"href","/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoModel"),d(Re,"class","docstring"),d(Qo,"class","docstring"),d(n_,"id","transformers.AutoModelForPreTraining"),d(n_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n_,"href","#transformers.AutoModelForPreTraining"),d(Wi,"class","relative group"),d(Gr,"class","docstring"),d(CS,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertForPreTraining"),d(MS,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(ES,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForPreTraining"),d(yS,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(wS,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(AS,"href","/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(LS,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(BS,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(xS,"href","/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(kS,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(RS,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForPreTraining"),d(SS,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(PS,"href","/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForPreTraining"),d($S,"href","/docs/transformers/pr_15931/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(IS,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(DS,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(jS,"href","/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(NS,"href","/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(qS,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(GS,"href","/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(OS,"href","/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(XS,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(VS,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(zS,"href","/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(WS,"href","/docs/transformers/pr_15931/en/model_doc/retribert#transformers.RetriBertModel"),d(QS,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(HS,"href","/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(US,"href","/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(JS,"href","/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(YS,"href","/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(KS,"href","/docs/transformers/pr_15931/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(ZS,"href","/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(eP,"href","/docs/transformers/pr_15931/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(oP,"href","/docs/transformers/pr_15931/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(rP,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(tP,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(aP,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(nP,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(sP,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Se,"class","docstring"),d(Ho,"class","docstring"),d(W_,"id","transformers.AutoModelForCausalLM"),d(W_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W_,"href","#transformers.AutoModelForCausalLM"),d(Ui,"class","relative group"),d(Or,"class","docstring"),d(lP,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartForCausalLM"),d(iP,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertLMHeadModel"),d(dP,"href","/docs/transformers/pr_15931/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(cP,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(fP,"href","/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(mP,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(gP,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(hP,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(pP,"href","/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(_P,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(uP,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForCausalLM"),d(bP,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(vP,"href","/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(TP,"href","/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(FP,"href","/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianForCausalLM"),d(CP,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartForCausalLM"),d(MP,"href","/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(EP,"href","/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(yP,"href","/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(wP,"href","/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(AP,"href","/docs/transformers/pr_15931/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(LP,"href","/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(BP,"href","/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(xP,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(kP,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(RP,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(SP,"href","/docs/transformers/pr_15931/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(PP,"href","/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d($P,"href","/docs/transformers/pr_15931/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(IP,"href","/docs/transformers/pr_15931/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(DP,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(jP,"href","/docs/transformers/pr_15931/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(NP,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(qP,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(GP,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Pe,"class","docstring"),d(Uo,"class","docstring"),d(Bu,"id","transformers.AutoModelForMaskedLM"),d(Bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bu,"href","#transformers.AutoModelForMaskedLM"),d(Ki,"class","relative group"),d(Xr,"class","docstring"),d(OP,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(XP,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(VP,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForMaskedLM"),d(zP,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(WP,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(QP,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(HP,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(UP,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(JP,"href","/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(YP,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(KP,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(ZP,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(e$,"href","/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(o$,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(r$,"href","/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(t$,"href","/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(a$,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(n$,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(s$,"href","/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(l$,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(i$,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(d$,"href","/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(c$,"href","/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(f$,"href","/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(m$,"href","/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(g$,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(h$,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(p$,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(_$,"href","/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(u$,"href","/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(b$,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(v$,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(T$,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(F$,"href","/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoForMaskedLM"),d($e,"class","docstring"),d(Jo,"class","docstring"),d(m1,"id","transformers.AutoModelForSeq2SeqLM"),d(m1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m1,"href","#transformers.AutoModelForSeq2SeqLM"),d(od,"class","relative group"),d(Vr,"class","docstring"),d(C$,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(M$,"href","/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(E$,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(y$,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(w$,"href","/docs/transformers/pr_15931/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(A$,"href","/docs/transformers/pr_15931/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(L$,"href","/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(B$,"href","/docs/transformers/pr_15931/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(x$,"href","/docs/transformers/pr_15931/en/model_doc/marian#transformers.MarianMTModel"),d(k$,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(R$,"href","/docs/transformers/pr_15931/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(S$,"href","/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(P$,"href","/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d($$,"href","/docs/transformers/pr_15931/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(I$,"href","/docs/transformers/pr_15931/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(D$,"href","/docs/transformers/pr_15931/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ie,"class","docstring"),d(Yo,"class","docstring"),d(x1,"id","transformers.AutoModelForSequenceClassification"),d(x1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x1,"href","#transformers.AutoModelForSequenceClassification"),d(ad,"class","relative group"),d(zr,"class","docstring"),d(j$,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(N$,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartForSequenceClassification"),d(q$,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForSequenceClassification"),d(G$,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(O$,"href","/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(X$,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(V$,"href","/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(z$,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(W$,"href","/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Q$,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(H$,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(U$,"href","/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(J$,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Y$,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(K$,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Z$,"href","/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(eI,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(oI,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(rI,"href","/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(tI,"href","/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(aI,"href","/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(nI,"href","/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(sI,"href","/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(lI,"href","/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDForSequenceClassification"),d(iI,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(dI,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(cI,"href","/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(fI,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(mI,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(gI,"href","/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(hI,"href","/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(pI,"href","/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(_I,"href","/docs/transformers/pr_15931/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(uI,"href","/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(bI,"href","/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(vI,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(TI,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(FI,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(CI,"href","/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(MI,"href","/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(EI,"href","/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(yI,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(wI,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(AI,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(LI,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(BI,"href","/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(De,"class","docstring"),d(Ko,"class","docstring"),d(Eb,"id","transformers.AutoModelForMultipleChoice"),d(Eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Eb,"href","#transformers.AutoModelForMultipleChoice"),d(ld,"class","relative group"),d(Wr,"class","docstring"),d(xI,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(kI,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForMultipleChoice"),d(RI,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(SI,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(PI,"href","/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineForMultipleChoice"),d($I,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(II,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(DI,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(jI,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(NI,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(qI,"href","/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(GI,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(OI,"href","/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(XI,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(VI,"href","/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(zI,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(WI,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(QI,"href","/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(HI,"href","/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(UI,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(JI,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(YI,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(KI,"href","/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(ZI,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(eD,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(oD,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(rD,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(tD,"href","/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(je,"class","docstring"),d(Zo,"class","docstring"),d(e3,"id","transformers.AutoModelForNextSentencePrediction"),d(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e3,"href","#transformers.AutoModelForNextSentencePrediction"),d(cd,"class","relative group"),d(Qr,"class","docstring"),d(aD,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(nD,"href","/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(sD,"href","/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(lD,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(iD,"href","/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ne,"class","docstring"),d(er,"class","docstring"),d(l3,"id","transformers.AutoModelForTokenClassification"),d(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l3,"href","#transformers.AutoModelForTokenClassification"),d(gd,"class","relative group"),d(Hr,"class","docstring"),d(dD,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(cD,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForTokenClassification"),d(fD,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(mD,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(gD,"href","/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineForTokenClassification"),d(hD,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(pD,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(_D,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(uD,"href","/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(bD,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(vD,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(TD,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(FD,"href","/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(CD,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(MD,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(ED,"href","/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(yD,"href","/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(wD,"href","/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(AD,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(LD,"href","/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(BD,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(xD,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(kD,"href","/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(RD,"href","/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(SD,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(PD,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d($D,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(ID,"href","/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(DD,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(jD,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(ND,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(qD,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(GD,"href","/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(qe,"class","docstring"),d(or,"class","docstring"),d(O3,"id","transformers.AutoModelForQuestionAnswering"),d(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O3,"href","#transformers.AutoModelForQuestionAnswering"),d(_d,"class","relative group"),d(Ur,"class","docstring"),d(OD,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(XD,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_15931/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_15931/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(oj,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(rj,"href","/docs/transformers/pr_15931/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(tj,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(aj,"href","/docs/transformers/pr_15931/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(nj,"href","/docs/transformers/pr_15931/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_15931/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(lj,"href","/docs/transformers/pr_15931/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(dj,"href","/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(fj,"href","/docs/transformers/pr_15931/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(gj,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_15931/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(pj,"href","/docs/transformers/pr_15931/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_15931/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(bj,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(vj,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(Tj,"href","/docs/transformers/pr_15931/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(Fj,"href","/docs/transformers/pr_15931/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(Cj,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(Mj,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(Ej,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(yj,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(wj,"href","/docs/transformers/pr_15931/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Ge,"class","docstring"),d(rr,"class","docstring"),d(B5,"id","transformers.AutoModelForTableQuestionAnswering"),d(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B5,"href","#transformers.AutoModelForTableQuestionAnswering"),d(vd,"class","relative group"),d(Jr,"class","docstring"),d(Aj,"href","/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Oe,"class","docstring"),d(tr,"class","docstring"),d(R5,"id","transformers.AutoModelForImageClassification"),d(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R5,"href","#transformers.AutoModelForImageClassification"),d(Cd,"class","relative group"),d(Yr,"class","docstring"),d(Lj,"href","/docs/transformers/pr_15931/en/model_doc/beit#transformers.BeitForImageClassification"),d(Bj,"href","/docs/transformers/pr_15931/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(xj,"href","/docs/transformers/pr_15931/en/model_doc/deit#transformers.DeiTForImageClassification"),d(kj,"href","/docs/transformers/pr_15931/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Rj,"href","/docs/transformers/pr_15931/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Sj,"href","/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(Pj,"href","/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d($j,"href","/docs/transformers/pr_15931/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Ij,"href","/docs/transformers/pr_15931/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Dj,"href","/docs/transformers/pr_15931/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(jj,"href","/docs/transformers/pr_15931/en/model_doc/swin#transformers.SwinForImageClassification"),d(Nj,"href","/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTForImageClassification"),d(Xe,"class","docstring"),d(ar,"class","docstring"),d(G5,"id","transformers.AutoModelForVision2Seq"),d(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G5,"href","#transformers.AutoModelForVision2Seq"),d(yd,"class","relative group"),d(Kr,"class","docstring"),d(qj,"href","/docs/transformers/pr_15931/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ve,"class","docstring"),d(nr,"class","docstring"),d(V5,"id","transformers.AutoModelForAudioClassification"),d(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V5,"href","#transformers.AutoModelForAudioClassification"),d(Ld,"class","relative group"),d(Zr,"class","docstring"),d(Gj,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(Oj,"href","/docs/transformers/pr_15931/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(Xj,"href","/docs/transformers/pr_15931/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(Vj,"href","/docs/transformers/pr_15931/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(zj,"href","/docs/transformers/pr_15931/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(Wj,"href","/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(Qj,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(Hj,"href","/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(ze,"class","docstring"),d(sr,"class","docstring"),d(e2,"id","transformers.AutoModelForAudioFrameClassification"),d(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e2,"href","#transformers.AutoModelForAudioFrameClassification"),d(kd,"class","relative group"),d(et,"class","docstring"),d(Uj,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(Jj,"href","/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(Yj,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(Kj,"href","/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(We,"class","docstring"),d(lr,"class","docstring"),d(s2,"id","transformers.AutoModelForCTC"),d(s2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s2,"href","#transformers.AutoModelForCTC"),d(Pd,"class","relative group"),d(ot,"class","docstring"),d(Zj,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(eN,"href","/docs/transformers/pr_15931/en/model_doc/hubert#transformers.HubertForCTC"),d(oN,"href","/docs/transformers/pr_15931/en/model_doc/sew#transformers.SEWForCTC"),d(rN,"href","/docs/transformers/pr_15931/en/model_doc/sew-d#transformers.SEWDForCTC"),d(tN,"href","/docs/transformers/pr_15931/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(aN,"href","/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(nN,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(sN,"href","/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Qe,"class","docstring"),d(ir,"class","docstring"),d(_2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Dd,"class","relative group"),d(rt,"class","docstring"),d(lN,"href","/docs/transformers/pr_15931/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(iN,"href","/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(He,"class","docstring"),d(dr,"class","docstring"),d(T2,"id","transformers.AutoModelForAudioXVector"),d(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T2,"href","#transformers.AutoModelForAudioXVector"),d(qd,"class","relative group"),d(tt,"class","docstring"),d(dN,"href","/docs/transformers/pr_15931/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(cN,"href","/docs/transformers/pr_15931/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(fN,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(mN,"href","/docs/transformers/pr_15931/en/model_doc/wavlm#transformers.WavLMForXVector"),d(Ue,"class","docstring"),d(cr,"class","docstring"),d(w2,"id","transformers.AutoModelForMaskedImageModeling"),d(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w2,"href","#transformers.AutoModelForMaskedImageModeling"),d(Xd,"class","relative group"),d(at,"class","docstring"),d(gN,"href","/docs/transformers/pr_15931/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(hN,"href","/docs/transformers/pr_15931/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(pN,"href","/docs/transformers/pr_15931/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(Je,"class","docstring"),d(fr,"class","docstring"),d(k2,"id","transformers.AutoModelForObjectDetection"),d(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k2,"href","#transformers.AutoModelForObjectDetection"),d(Qd,"class","relative group"),d(nt,"class","docstring"),d(_N,"href","/docs/transformers/pr_15931/en/model_doc/detr#transformers.DetrForObjectDetection"),d(Ye,"class","docstring"),d(mr,"class","docstring"),d(P2,"id","transformers.AutoModelForImageSegmentation"),d(P2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P2,"href","#transformers.AutoModelForImageSegmentation"),d(Jd,"class","relative group"),d(st,"class","docstring"),d(uN,"href","/docs/transformers/pr_15931/en/model_doc/detr#transformers.DetrForSegmentation"),d(Ke,"class","docstring"),d(gr,"class","docstring"),d(D2,"id","transformers.AutoModelForSemanticSegmentation"),d(D2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D2,"href","#transformers.AutoModelForSemanticSegmentation"),d(Zd,"class","relative group"),d(lt,"class","docstring"),d(bN,"href","/docs/transformers/pr_15931/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(vN,"href","/docs/transformers/pr_15931/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Ze,"class","docstring"),d(hr,"class","docstring"),d(G2,"id","transformers.TFAutoModel"),d(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G2,"href","#transformers.TFAutoModel"),d(rc,"class","relative group"),d(it,"class","docstring"),d(TN,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertModel"),d(FN,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.TFBartModel"),d(CN,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertModel"),d(MN,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(EN,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(yN,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertModel"),d(wN,"href","/docs/transformers/pr_15931/en/model_doc/clip#transformers.TFCLIPModel"),d(AN,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.TFConvBertModel"),d(LN,"href","/docs/transformers/pr_15931/en/model_doc/convnext#transformers.TFConvNextModel"),d(BN,"href","/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.TFCTRLModel"),d(xN,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.TFDebertaModel"),d(kN,"href","/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(RN,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(SN,"href","/docs/transformers/pr_15931/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(PN,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraModel"),d($N,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(IN,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelModel"),d(DN,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(jN,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.TFGPT2Model"),d(NN,"href","/docs/transformers/pr_15931/en/model_doc/hubert#transformers.TFHubertModel"),d(qN,"href","/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(GN,"href","/docs/transformers/pr_15931/en/model_doc/led#transformers.TFLEDModel"),d(ON,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.TFLongformerModel"),d(XN,"href","/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.TFLxmertModel"),d(VN,"href","/docs/transformers/pr_15931/en/model_doc/marian#transformers.TFMarianModel"),d(zN,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.TFMBartModel"),d(WN,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(QN,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetModel"),d(HN,"href","/docs/transformers/pr_15931/en/model_doc/mt5#transformers.TFMT5Model"),d(UN,"href","/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(JN,"href","/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.TFPegasusModel"),d(YN,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertModel"),d(KN,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaModel"),d(ZN,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerModel"),d(eq,"href","/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(oq,"href","/docs/transformers/pr_15931/en/model_doc/t5#transformers.TFT5Model"),d(rq,"href","/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TFTapasModel"),d(tq,"href","/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(aq,"href","/docs/transformers/pr_15931/en/model_doc/vit#transformers.TFViTModel"),d(nq,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(sq,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMModel"),d(lq,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(iq,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetModel"),d(go,"class","docstring"),d(pr,"class","docstring"),d(Bv,"id","transformers.TFAutoModelForPreTraining"),d(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bv,"href","#transformers.TFAutoModelForPreTraining"),d(nc,"class","relative group"),d(dt,"class","docstring"),d(dq,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(cq,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertForPreTraining"),d(mq,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(gq,"href","/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(hq,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(pq,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(_q,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(uq,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(bq,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(vq,"href","/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(Tq,"href","/docs/transformers/pr_15931/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(Fq,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(Cq,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(Mq,"href","/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(Eq,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(yq,"href","/docs/transformers/pr_15931/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(wq,"href","/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(Aq,"href","/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(Lq,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(Bq,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(xq,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(ho,"class","docstring"),d(_r,"class","docstring"),d(Kv,"id","transformers.TFAutoModelForCausalLM"),d(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kv,"href","#transformers.TFAutoModelForCausalLM"),d(ic,"class","relative group"),d(ct,"class","docstring"),d(kq,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(Rq,"href","/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(Sq,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(Pq,"href","/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d($q,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(Iq,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(Dq,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(jq,"href","/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(Nq,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(qq,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(ur,"class","docstring"),d(dT,"id","transformers.TFAutoModelForImageClassification"),d(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dT,"href","#transformers.TFAutoModelForImageClassification"),d(fc,"class","relative group"),d(ft,"class","docstring"),d(Gq,"href","/docs/transformers/pr_15931/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(Oq,"href","/docs/transformers/pr_15931/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring"),d(br,"class","docstring"),d(mT,"id","transformers.TFAutoModelForMaskedLM"),d(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mT,"href","#transformers.TFAutoModelForMaskedLM"),d(hc,"class","relative group"),d(mt,"class","docstring"),d(Xq,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(Vq,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(zq,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(Wq,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(Qq,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(Hq,"href","/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(Uq,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(Jq,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(Yq,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(Kq,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(Zq,"href","/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(eG,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(oG,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(rG,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(tG,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(aG,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(nG,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(sG,"href","/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(lG,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(iG,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(uo,"class","docstring"),d(vr,"class","docstring"),d(ST,"id","transformers.TFAutoModelForSeq2SeqLM"),d(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ST,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(uc,"class","relative group"),d(gt,"class","docstring"),d(dG,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(cG,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(fG,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(mG,"href","/docs/transformers/pr_15931/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(gG,"href","/docs/transformers/pr_15931/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(hG,"href","/docs/transformers/pr_15931/en/model_doc/marian#transformers.TFMarianMTModel"),d(pG,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(_G,"href","/docs/transformers/pr_15931/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(uG,"href","/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(bG,"href","/docs/transformers/pr_15931/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(bo,"class","docstring"),d(Tr,"class","docstring"),d(VT,"id","transformers.TFAutoModelForSequenceClassification"),d(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VT,"href","#transformers.TFAutoModelForSequenceClassification"),d(Tc,"class","relative group"),d(ht,"class","docstring"),d(vG,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(TG,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(FG,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(CG,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(MG,"href","/docs/transformers/pr_15931/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(EG,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(yG,"href","/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(wG,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(AG,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(LG,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(BG,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(xG,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(kG,"href","/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(RG,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(SG,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(PG,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d($G,"href","/docs/transformers/pr_15931/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(IG,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(DG,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(jG,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(NG,"href","/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(qG,"href","/docs/transformers/pr_15931/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(GG,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(OG,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(XG,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(Fr,"class","docstring"),d(_F,"id","transformers.TFAutoModelForMultipleChoice"),d(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_F,"href","#transformers.TFAutoModelForMultipleChoice"),d(Mc,"class","relative group"),d(pt,"class","docstring"),d(VG,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(zG,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(WG,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(QG,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(HG,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(UG,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(JG,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(YG,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(KG,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(ZG,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(eO,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(oO,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(rO,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(tO,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(aO,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(nO,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(sO,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Cr,"class","docstring"),d(PF,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PF,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(wc,"class","relative group"),d(_t,"class","docstring"),d(lO,"href","/docs/transformers/pr_15931/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Fo,"class","docstring"),d(Mr,"class","docstring"),d(IF,"id","transformers.TFAutoModelForTokenClassification"),d(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IF,"href","#transformers.TFAutoModelForTokenClassification"),d(Bc,"class","relative group"),d(ut,"class","docstring"),d(iO,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(dO,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(cO,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(fO,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(mO,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(gO,"href","/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(hO,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(pO,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(_O,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(uO,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(bO,"href","/docs/transformers/pr_15931/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(vO,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(TO,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(FO,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(CO,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(MO,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(EO,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(yO,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(wO,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(AO,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring"),d(Er,"class","docstring"),d(t9,"id","transformers.TFAutoModelForQuestionAnswering"),d(t9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t9,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Rc,"class","relative group"),d(bt,"class","docstring"),d(LO,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(BO,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(xO,"href","/docs/transformers/pr_15931/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(kO,"href","/docs/transformers/pr_15931/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(RO,"href","/docs/transformers/pr_15931/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(SO,"href","/docs/transformers/pr_15931/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(PO,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d($O,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(IO,"href","/docs/transformers/pr_15931/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(DO,"href","/docs/transformers/pr_15931/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(jO,"href","/docs/transformers/pr_15931/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(NO,"href","/docs/transformers/pr_15931/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(qO,"href","/docs/transformers/pr_15931/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(GO,"href","/docs/transformers/pr_15931/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(OO,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(XO,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(VO,"href","/docs/transformers/pr_15931/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(zO,"href","/docs/transformers/pr_15931/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(WO,"href","/docs/transformers/pr_15931/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(M9,"id","transformers.TFAutoModelForVision2Seq"),d(M9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M9,"href","#transformers.TFAutoModelForVision2Seq"),d($c,"class","relative group"),d(vt,"class","docstring"),d(QO,"href","/docs/transformers/pr_15931/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Eo,"class","docstring"),d(wr,"class","docstring"),d(y9,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(y9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y9,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(jc,"class","relative group"),d(Tt,"class","docstring"),d(HO,"href","/docs/transformers/pr_15931/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring"),d(Ar,"class","docstring"),d(A9,"id","transformers.FlaxAutoModel"),d(A9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A9,"href","#transformers.FlaxAutoModel"),d(Gc,"class","relative group"),d(Ft,"class","docstring"),d(UO,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertModel"),d(JO,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.FlaxBartModel"),d(YO,"href","/docs/transformers/pr_15931/en/model_doc/beit#transformers.FlaxBeitModel"),d(KO,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertModel"),d(ZO,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(eX,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(oX,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(rX,"href","/docs/transformers/pr_15931/en/model_doc/clip#transformers.FlaxCLIPModel"),d(tX,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(aX,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraModel"),d(nX,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(sX,"href","/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(lX,"href","/docs/transformers/pr_15931/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(iX,"href","/docs/transformers/pr_15931/en/model_doc/marian#transformers.FlaxMarianModel"),d(dX,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.FlaxMBartModel"),d(cX,"href","/docs/transformers/pr_15931/en/model_doc/mt5#transformers.FlaxMT5Model"),d(fX,"href","/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(mX,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(gX,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(hX,"href","/docs/transformers/pr_15931/en/model_doc/t5#transformers.FlaxT5Model"),d(pX,"href","/docs/transformers/pr_15931/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(_X,"href","/docs/transformers/pr_15931/en/model_doc/vit#transformers.FlaxViTModel"),d(uX,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(bX,"href","/docs/transformers/pr_15931/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(wo,"class","docstring"),d(Lr,"class","docstring"),d(K9,"id","transformers.FlaxAutoModelForCausalLM"),d(K9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K9,"href","#transformers.FlaxAutoModelForCausalLM"),d(Vc,"class","relative group"),d(Ct,"class","docstring"),d(vX,"href","/docs/transformers/pr_15931/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(TX,"href","/docs/transformers/pr_15931/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(FX,"href","/docs/transformers/pr_15931/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(CX,"href","/docs/transformers/pr_15931/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Ao,"class","docstring"),d(Br,"class","docstring"),d(tC,"id","transformers.FlaxAutoModelForPreTraining"),d(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tC,"href","#transformers.FlaxAutoModelForPreTraining"),d(Qc,"class","relative group"),d(Mt,"class","docstring"),d(MX,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(EX,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(yX,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(wX,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(AX,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(LX,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_15931/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(xX,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(kX,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(RX,"href","/docs/transformers/pr_15931/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_15931/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Lo,"class","docstring"),d(xr,"class","docstring"),d(pC,"id","transformers.FlaxAutoModelForMaskedLM"),d(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pC,"href","#transformers.FlaxAutoModelForMaskedLM"),d(Jc,"class","relative group"),d(Et,"class","docstring"),d(PX,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d($X,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(IX,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(DX,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(jX,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(NX,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(qX,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(GX,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(OX,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Bo,"class","docstring"),d(kr,"class","docstring"),d(yC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(Zc,"class","relative group"),d(yt,"class","docstring"),d(XX,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(VX,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(zX,"href","/docs/transformers/pr_15931/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(WX,"href","/docs/transformers/pr_15931/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(QX,"href","/docs/transformers/pr_15931/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(HX,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(UX,"href","/docs/transformers/pr_15931/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(JX,"href","/docs/transformers/pr_15931/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(YX,"href","/docs/transformers/pr_15931/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(xo,"class","docstring"),d(Rr,"class","docstring"),d($C,"id","transformers.FlaxAutoModelForSequenceClassification"),d($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($C,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(rf,"class","relative group"),d(wt,"class","docstring"),d(KX,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(eV,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(oV,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(rV,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(tV,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(aV,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(nV,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(sV,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(ko,"class","docstring"),d(Sr,"class","docstring"),d(zC,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(nf,"class","relative group"),d(At,"class","docstring"),d(lV,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(iV,"href","/docs/transformers/pr_15931/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(dV,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(cV,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(fV,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(mV,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(gV,"href","/docs/transformers/pr_15931/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(hV,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(pV,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Ro,"class","docstring"),d(Pr,"class","docstring"),d(o4,"id","transformers.FlaxAutoModelForTokenClassification"),d(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(df,"class","relative group"),d(Lt,"class","docstring"),d(_V,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(uV,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(bV,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(vV,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(TV,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(FV,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(CV,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(So,"class","docstring"),d($r,"class","docstring"),d(d4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(mf,"class","relative group"),d(Bt,"class","docstring"),d(MV,"href","/docs/transformers/pr_15931/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(EV,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(yV,"href","/docs/transformers/pr_15931/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(wV,"href","/docs/transformers/pr_15931/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(AV,"href","/docs/transformers/pr_15931/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(LV,"href","/docs/transformers/pr_15931/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(BV,"href","/docs/transformers/pr_15931/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Po,"class","docstring"),d(Ir,"class","docstring"),d(u4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(pf,"class","relative group"),d(xt,"class","docstring"),d(xV,"href","/docs/transformers/pr_15931/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(v4,"id","transformers.FlaxAutoModelForImageClassification"),d(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v4,"href","#transformers.FlaxAutoModelForImageClassification"),d(bf,"class","relative group"),d(kt,"class","docstring"),d(kV,"href","/docs/transformers/pr_15931/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(RV,"href","/docs/transformers/pr_15931/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(Io,"class","docstring"),d(jr,"class","docstring"),d(C4,"id","transformers.FlaxAutoModelForVision2Seq"),d(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C4,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Ff,"class","relative group"),d(Rt,"class","docstring"),d(SV,"href","/docs/transformers/pr_15931/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Nr,"class","docstring")},m(c,u){e(document.head,J),b(c,Be,u),b(c,ie,u),e(ie,me),e(me,no),g(ce,no,null),e(ie,ue),e(ie,Go),e(Go,Bi),b(c,yf,u),b(c,sa,u),e(sa,xi),e(sa,ki),e(ki,MM),e(sa,wf),b(c,ye,u),b(c,io,u),e(io,Ri),e(io,In),e(In,EM),e(io,Dn),e(io,jn),e(jn,yM),e(io,Si),e(io,Nn),e(Nn,wM),e(io,Pi),b(c,Af,u),g($a,c,u),b(c,co,u),b(c,ge,u),e(ge,d8),e(ge,$i),e($i,c8),e(ge,f8),b(c,Oo,u),b(c,Ia,u),e(Ia,m8),e(Ia,Lf),e(Lf,g8),e(Ia,qRe),b(c,x7e,u),b(c,Ii,u),e(Ii,Bf),e(Bf,EW),g(AM,EW,null),e(Ii,GRe),e(Ii,yW),e(yW,ORe),b(c,k7e,u),b(c,qn,u),e(qn,XRe),e(qn,wW),e(wW,VRe),e(qn,zRe),e(qn,AW),e(AW,WRe),e(qn,QRe),b(c,R7e,u),g(LM,c,u),b(c,S7e,u),b(c,h8,u),e(h8,HRe),b(c,P7e,u),g(xf,c,u),b(c,$7e,u),b(c,Di,u),e(Di,kf),e(kf,LW),g(BM,LW,null),e(Di,URe),e(Di,BW),e(BW,JRe),b(c,I7e,u),b(c,Xo,u),g(xM,Xo,null),e(Xo,YRe),e(Xo,kM),e(kM,KRe),e(kM,p8),e(p8,ZRe),e(kM,eSe),e(Xo,oSe),e(Xo,RM),e(RM,rSe),e(RM,xW),e(xW,tSe),e(RM,aSe),e(Xo,nSe),e(Xo,fo),g(SM,fo,null),e(fo,sSe),e(fo,kW),e(kW,lSe),e(fo,iSe),e(fo,ji),e(ji,dSe),e(ji,RW),e(RW,cSe),e(ji,fSe),e(ji,SW),e(SW,mSe),e(ji,gSe),e(fo,hSe),e(fo,v),e(v,Rf),e(Rf,PW),e(PW,pSe),e(Rf,_Se),e(Rf,_8),e(_8,uSe),e(Rf,bSe),e(v,vSe),e(v,Sf),e(Sf,$W),e($W,TSe),e(Sf,FSe),e(Sf,u8),e(u8,CSe),e(Sf,MSe),e(v,ESe),e(v,Pf),e(Pf,IW),e(IW,ySe),e(Pf,wSe),e(Pf,b8),e(b8,ASe),e(Pf,LSe),e(v,BSe),e(v,$f),e($f,DW),e(DW,xSe),e($f,kSe),e($f,v8),e(v8,RSe),e($f,SSe),e(v,PSe),e(v,If),e(If,jW),e(jW,$Se),e(If,ISe),e(If,T8),e(T8,DSe),e(If,jSe),e(v,NSe),e(v,Df),e(Df,NW),e(NW,qSe),e(Df,GSe),e(Df,F8),e(F8,OSe),e(Df,XSe),e(v,VSe),e(v,jf),e(jf,qW),e(qW,zSe),e(jf,WSe),e(jf,C8),e(C8,QSe),e(jf,HSe),e(v,USe),e(v,Nf),e(Nf,GW),e(GW,JSe),e(Nf,YSe),e(Nf,M8),e(M8,KSe),e(Nf,ZSe),e(v,ePe),e(v,qf),e(qf,OW),e(OW,oPe),e(qf,rPe),e(qf,E8),e(E8,tPe),e(qf,aPe),e(v,nPe),e(v,Gf),e(Gf,XW),e(XW,sPe),e(Gf,lPe),e(Gf,y8),e(y8,iPe),e(Gf,dPe),e(v,cPe),e(v,Of),e(Of,VW),e(VW,fPe),e(Of,mPe),e(Of,w8),e(w8,gPe),e(Of,hPe),e(v,pPe),e(v,Xf),e(Xf,zW),e(zW,_Pe),e(Xf,uPe),e(Xf,A8),e(A8,bPe),e(Xf,vPe),e(v,TPe),e(v,Vf),e(Vf,WW),e(WW,FPe),e(Vf,CPe),e(Vf,L8),e(L8,MPe),e(Vf,EPe),e(v,yPe),e(v,zf),e(zf,QW),e(QW,wPe),e(zf,APe),e(zf,B8),e(B8,LPe),e(zf,BPe),e(v,xPe),e(v,Wf),e(Wf,HW),e(HW,kPe),e(Wf,RPe),e(Wf,x8),e(x8,SPe),e(Wf,PPe),e(v,$Pe),e(v,Qf),e(Qf,UW),e(UW,IPe),e(Qf,DPe),e(Qf,k8),e(k8,jPe),e(Qf,NPe),e(v,qPe),e(v,Hf),e(Hf,JW),e(JW,GPe),e(Hf,OPe),e(Hf,R8),e(R8,XPe),e(Hf,VPe),e(v,zPe),e(v,Uf),e(Uf,YW),e(YW,WPe),e(Uf,QPe),e(Uf,S8),e(S8,HPe),e(Uf,UPe),e(v,JPe),e(v,Jf),e(Jf,KW),e(KW,YPe),e(Jf,KPe),e(Jf,P8),e(P8,ZPe),e(Jf,e$e),e(v,o$e),e(v,Yf),e(Yf,ZW),e(ZW,r$e),e(Yf,t$e),e(Yf,$8),e($8,a$e),e(Yf,n$e),e(v,s$e),e(v,Kf),e(Kf,eQ),e(eQ,l$e),e(Kf,i$e),e(Kf,I8),e(I8,d$e),e(Kf,c$e),e(v,f$e),e(v,Zf),e(Zf,oQ),e(oQ,m$e),e(Zf,g$e),e(Zf,D8),e(D8,h$e),e(Zf,p$e),e(v,_$e),e(v,em),e(em,rQ),e(rQ,u$e),e(em,b$e),e(em,j8),e(j8,v$e),e(em,T$e),e(v,F$e),e(v,om),e(om,tQ),e(tQ,C$e),e(om,M$e),e(om,N8),e(N8,E$e),e(om,y$e),e(v,w$e),e(v,rm),e(rm,aQ),e(aQ,A$e),e(rm,L$e),e(rm,q8),e(q8,B$e),e(rm,x$e),e(v,k$e),e(v,tm),e(tm,nQ),e(nQ,R$e),e(tm,S$e),e(tm,G8),e(G8,P$e),e(tm,$$e),e(v,I$e),e(v,am),e(am,sQ),e(sQ,D$e),e(am,j$e),e(am,O8),e(O8,N$e),e(am,q$e),e(v,G$e),e(v,nm),e(nm,lQ),e(lQ,O$e),e(nm,X$e),e(nm,X8),e(X8,V$e),e(nm,z$e),e(v,W$e),e(v,sm),e(sm,iQ),e(iQ,Q$e),e(sm,H$e),e(sm,V8),e(V8,U$e),e(sm,J$e),e(v,Y$e),e(v,lm),e(lm,dQ),e(dQ,K$e),e(lm,Z$e),e(lm,z8),e(z8,eIe),e(lm,oIe),e(v,rIe),e(v,im),e(im,cQ),e(cQ,tIe),e(im,aIe),e(im,W8),e(W8,nIe),e(im,sIe),e(v,lIe),e(v,dm),e(dm,fQ),e(fQ,iIe),e(dm,dIe),e(dm,Q8),e(Q8,cIe),e(dm,fIe),e(v,mIe),e(v,cm),e(cm,mQ),e(mQ,gIe),e(cm,hIe),e(cm,H8),e(H8,pIe),e(cm,_Ie),e(v,uIe),e(v,fm),e(fm,gQ),e(gQ,bIe),e(fm,vIe),e(fm,U8),e(U8,TIe),e(fm,FIe),e(v,CIe),e(v,mm),e(mm,hQ),e(hQ,MIe),e(mm,EIe),e(mm,J8),e(J8,yIe),e(mm,wIe),e(v,AIe),e(v,gm),e(gm,pQ),e(pQ,LIe),e(gm,BIe),e(gm,Y8),e(Y8,xIe),e(gm,kIe),e(v,RIe),e(v,hm),e(hm,_Q),e(_Q,SIe),e(hm,PIe),e(hm,K8),e(K8,$Ie),e(hm,IIe),e(v,DIe),e(v,pm),e(pm,uQ),e(uQ,jIe),e(pm,NIe),e(pm,Z8),e(Z8,qIe),e(pm,GIe),e(v,OIe),e(v,_m),e(_m,bQ),e(bQ,XIe),e(_m,VIe),e(_m,e7),e(e7,zIe),e(_m,WIe),e(v,QIe),e(v,um),e(um,vQ),e(vQ,HIe),e(um,UIe),e(um,o7),e(o7,JIe),e(um,YIe),e(v,KIe),e(v,bm),e(bm,TQ),e(TQ,ZIe),e(bm,eDe),e(bm,r7),e(r7,oDe),e(bm,rDe),e(v,tDe),e(v,vm),e(vm,FQ),e(FQ,aDe),e(vm,nDe),e(vm,t7),e(t7,sDe),e(vm,lDe),e(v,iDe),e(v,Tm),e(Tm,CQ),e(CQ,dDe),e(Tm,cDe),e(Tm,a7),e(a7,fDe),e(Tm,mDe),e(v,gDe),e(v,Fm),e(Fm,MQ),e(MQ,hDe),e(Fm,pDe),e(Fm,n7),e(n7,_De),e(Fm,uDe),e(v,bDe),e(v,Cm),e(Cm,EQ),e(EQ,vDe),e(Cm,TDe),e(Cm,s7),e(s7,FDe),e(Cm,CDe),e(v,MDe),e(v,Mm),e(Mm,yQ),e(yQ,EDe),e(Mm,yDe),e(Mm,l7),e(l7,wDe),e(Mm,ADe),e(v,LDe),e(v,Em),e(Em,wQ),e(wQ,BDe),e(Em,xDe),e(Em,i7),e(i7,kDe),e(Em,RDe),e(v,SDe),e(v,ym),e(ym,AQ),e(AQ,PDe),e(ym,$De),e(ym,d7),e(d7,IDe),e(ym,DDe),e(v,jDe),e(v,wm),e(wm,LQ),e(LQ,NDe),e(wm,qDe),e(wm,c7),e(c7,GDe),e(wm,ODe),e(v,XDe),e(v,Am),e(Am,BQ),e(BQ,VDe),e(Am,zDe),e(Am,f7),e(f7,WDe),e(Am,QDe),e(v,HDe),e(v,Lm),e(Lm,xQ),e(xQ,UDe),e(Lm,JDe),e(Lm,m7),e(m7,YDe),e(Lm,KDe),e(v,ZDe),e(v,Bm),e(Bm,kQ),e(kQ,eje),e(Bm,oje),e(Bm,g7),e(g7,rje),e(Bm,tje),e(v,aje),e(v,xm),e(xm,RQ),e(RQ,nje),e(xm,sje),e(xm,h7),e(h7,lje),e(xm,ije),e(v,dje),e(v,km),e(km,SQ),e(SQ,cje),e(km,fje),e(km,p7),e(p7,mje),e(km,gje),e(v,hje),e(v,Rm),e(Rm,PQ),e(PQ,pje),e(Rm,_je),e(Rm,_7),e(_7,uje),e(Rm,bje),e(v,vje),e(v,Sm),e(Sm,$Q),e($Q,Tje),e(Sm,Fje),e(Sm,u7),e(u7,Cje),e(Sm,Mje),e(v,Eje),e(v,Pm),e(Pm,IQ),e(IQ,yje),e(Pm,wje),e(Pm,b7),e(b7,Aje),e(Pm,Lje),e(v,Bje),e(v,$m),e($m,DQ),e(DQ,xje),e($m,kje),e($m,v7),e(v7,Rje),e($m,Sje),e(v,Pje),e(v,Im),e(Im,jQ),e(jQ,$je),e(Im,Ije),e(Im,T7),e(T7,Dje),e(Im,jje),e(v,Nje),e(v,Dm),e(Dm,NQ),e(NQ,qje),e(Dm,Gje),e(Dm,F7),e(F7,Oje),e(Dm,Xje),e(v,Vje),e(v,jm),e(jm,qQ),e(qQ,zje),e(jm,Wje),e(jm,C7),e(C7,Qje),e(jm,Hje),e(v,Uje),e(v,Nm),e(Nm,GQ),e(GQ,Jje),e(Nm,Yje),e(Nm,M7),e(M7,Kje),e(Nm,Zje),e(v,eNe),e(v,qm),e(qm,OQ),e(OQ,oNe),e(qm,rNe),e(qm,E7),e(E7,tNe),e(qm,aNe),e(v,nNe),e(v,Gm),e(Gm,XQ),e(XQ,sNe),e(Gm,lNe),e(Gm,y7),e(y7,iNe),e(Gm,dNe),e(v,cNe),e(v,Om),e(Om,VQ),e(VQ,fNe),e(Om,mNe),e(Om,w7),e(w7,gNe),e(Om,hNe),e(v,pNe),e(v,Xm),e(Xm,zQ),e(zQ,_Ne),e(Xm,uNe),e(Xm,A7),e(A7,bNe),e(Xm,vNe),e(v,TNe),e(v,Vm),e(Vm,WQ),e(WQ,FNe),e(Vm,CNe),e(Vm,L7),e(L7,MNe),e(Vm,ENe),e(v,yNe),e(v,zm),e(zm,QQ),e(QQ,wNe),e(zm,ANe),e(zm,B7),e(B7,LNe),e(zm,BNe),e(v,xNe),e(v,Wm),e(Wm,HQ),e(HQ,kNe),e(Wm,RNe),e(Wm,x7),e(x7,SNe),e(Wm,PNe),e(v,$Ne),e(v,Qm),e(Qm,UQ),e(UQ,INe),e(Qm,DNe),e(Qm,k7),e(k7,jNe),e(Qm,NNe),e(v,qNe),e(v,Hm),e(Hm,JQ),e(JQ,GNe),e(Hm,ONe),e(Hm,R7),e(R7,XNe),e(Hm,VNe),e(v,zNe),e(v,Um),e(Um,YQ),e(YQ,WNe),e(Um,QNe),e(Um,S7),e(S7,HNe),e(Um,UNe),e(v,JNe),e(v,Jm),e(Jm,KQ),e(KQ,YNe),e(Jm,KNe),e(Jm,P7),e(P7,ZNe),e(Jm,eqe),e(v,oqe),e(v,Ym),e(Ym,ZQ),e(ZQ,rqe),e(Ym,tqe),e(Ym,$7),e($7,aqe),e(Ym,nqe),e(v,sqe),e(v,Km),e(Km,eH),e(eH,lqe),e(Km,iqe),e(Km,I7),e(I7,dqe),e(Km,cqe),e(v,fqe),e(v,Zm),e(Zm,oH),e(oH,mqe),e(Zm,gqe),e(Zm,D7),e(D7,hqe),e(Zm,pqe),e(v,_qe),e(v,eg),e(eg,rH),e(rH,uqe),e(eg,bqe),e(eg,j7),e(j7,vqe),e(eg,Tqe),e(v,Fqe),e(v,og),e(og,tH),e(tH,Cqe),e(og,Mqe),e(og,N7),e(N7,Eqe),e(og,yqe),e(v,wqe),e(v,rg),e(rg,aH),e(aH,Aqe),e(rg,Lqe),e(rg,q7),e(q7,Bqe),e(rg,xqe),e(v,kqe),e(v,tg),e(tg,nH),e(nH,Rqe),e(tg,Sqe),e(tg,G7),e(G7,Pqe),e(tg,$qe),e(v,Iqe),e(v,ag),e(ag,sH),e(sH,Dqe),e(ag,jqe),e(ag,O7),e(O7,Nqe),e(ag,qqe),e(v,Gqe),e(v,ng),e(ng,lH),e(lH,Oqe),e(ng,Xqe),e(ng,X7),e(X7,Vqe),e(ng,zqe),e(v,Wqe),e(v,sg),e(sg,iH),e(iH,Qqe),e(sg,Hqe),e(sg,V7),e(V7,Uqe),e(sg,Jqe),e(v,Yqe),e(v,lg),e(lg,dH),e(dH,Kqe),e(lg,Zqe),e(lg,z7),e(z7,eGe),e(lg,oGe),e(v,rGe),e(v,ig),e(ig,cH),e(cH,tGe),e(ig,aGe),e(ig,W7),e(W7,nGe),e(ig,sGe),e(v,lGe),e(v,dg),e(dg,fH),e(fH,iGe),e(dg,dGe),e(dg,Q7),e(Q7,cGe),e(dg,fGe),e(v,mGe),e(v,cg),e(cg,mH),e(mH,gGe),e(cg,hGe),e(cg,H7),e(H7,pGe),e(cg,_Ge),e(v,uGe),e(v,fg),e(fg,gH),e(gH,bGe),e(fg,vGe),e(fg,U7),e(U7,TGe),e(fg,FGe),e(v,CGe),e(v,mg),e(mg,hH),e(hH,MGe),e(mg,EGe),e(mg,J7),e(J7,yGe),e(mg,wGe),e(v,AGe),e(v,gg),e(gg,pH),e(pH,LGe),e(gg,BGe),e(gg,Y7),e(Y7,xGe),e(gg,kGe),e(v,RGe),e(v,hg),e(hg,_H),e(_H,SGe),e(hg,PGe),e(hg,K7),e(K7,$Ge),e(hg,IGe),e(v,DGe),e(v,pg),e(pg,uH),e(uH,jGe),e(pg,NGe),e(pg,Z7),e(Z7,qGe),e(pg,GGe),e(v,OGe),e(v,_g),e(_g,bH),e(bH,XGe),e(_g,VGe),e(_g,eB),e(eB,zGe),e(_g,WGe),e(v,QGe),e(v,ug),e(ug,vH),e(vH,HGe),e(ug,UGe),e(ug,oB),e(oB,JGe),e(ug,YGe),e(fo,KGe),e(fo,TH),e(TH,ZGe),e(fo,eOe),g(PM,fo,null),e(Xo,oOe),e(Xo,bg),g($M,bg,null),e(bg,rOe),e(bg,FH),e(FH,tOe),b(c,D7e,u),b(c,Ni,u),e(Ni,vg),e(vg,CH),g(IM,CH,null),e(Ni,aOe),e(Ni,MH),e(MH,nOe),b(c,j7e,u),b(c,Vo,u),g(DM,Vo,null),e(Vo,sOe),e(Vo,jM),e(jM,lOe),e(jM,rB),e(rB,iOe),e(jM,dOe),e(Vo,cOe),e(Vo,NM),e(NM,fOe),e(NM,EH),e(EH,mOe),e(NM,gOe),e(Vo,hOe),e(Vo,mo),g(qM,mo,null),e(mo,pOe),e(mo,yH),e(yH,_Oe),e(mo,uOe),e(mo,Da),e(Da,bOe),e(Da,wH),e(wH,vOe),e(Da,TOe),e(Da,AH),e(AH,FOe),e(Da,COe),e(Da,LH),e(LH,MOe),e(Da,EOe),e(mo,yOe),e(mo,M),e(M,Gn),e(Gn,BH),e(BH,wOe),e(Gn,AOe),e(Gn,tB),e(tB,LOe),e(Gn,BOe),e(Gn,aB),e(aB,xOe),e(Gn,kOe),e(M,ROe),e(M,On),e(On,xH),e(xH,SOe),e(On,POe),e(On,nB),e(nB,$Oe),e(On,IOe),e(On,sB),e(sB,DOe),e(On,jOe),e(M,NOe),e(M,Xn),e(Xn,kH),e(kH,qOe),e(Xn,GOe),e(Xn,lB),e(lB,OOe),e(Xn,XOe),e(Xn,iB),e(iB,VOe),e(Xn,zOe),e(M,WOe),e(M,Tg),e(Tg,RH),e(RH,QOe),e(Tg,HOe),e(Tg,dB),e(dB,UOe),e(Tg,JOe),e(M,YOe),e(M,Vn),e(Vn,SH),e(SH,KOe),e(Vn,ZOe),e(Vn,cB),e(cB,eXe),e(Vn,oXe),e(Vn,fB),e(fB,rXe),e(Vn,tXe),e(M,aXe),e(M,Fg),e(Fg,PH),e(PH,nXe),e(Fg,sXe),e(Fg,mB),e(mB,lXe),e(Fg,iXe),e(M,dXe),e(M,Cg),e(Cg,$H),e($H,cXe),e(Cg,fXe),e(Cg,gB),e(gB,mXe),e(Cg,gXe),e(M,hXe),e(M,Mg),e(Mg,IH),e(IH,pXe),e(Mg,_Xe),e(Mg,hB),e(hB,uXe),e(Mg,bXe),e(M,vXe),e(M,zn),e(zn,DH),e(DH,TXe),e(zn,FXe),e(zn,pB),e(pB,CXe),e(zn,MXe),e(zn,_B),e(_B,EXe),e(zn,yXe),e(M,wXe),e(M,Wn),e(Wn,jH),e(jH,AXe),e(Wn,LXe),e(Wn,uB),e(uB,BXe),e(Wn,xXe),e(Wn,bB),e(bB,kXe),e(Wn,RXe),e(M,SXe),e(M,Qn),e(Qn,NH),e(NH,PXe),e(Qn,$Xe),e(Qn,vB),e(vB,IXe),e(Qn,DXe),e(Qn,TB),e(TB,jXe),e(Qn,NXe),e(M,qXe),e(M,Eg),e(Eg,qH),e(qH,GXe),e(Eg,OXe),e(Eg,FB),e(FB,XXe),e(Eg,VXe),e(M,zXe),e(M,yg),e(yg,GH),e(GH,WXe),e(yg,QXe),e(yg,CB),e(CB,HXe),e(yg,UXe),e(M,JXe),e(M,Hn),e(Hn,OH),e(OH,YXe),e(Hn,KXe),e(Hn,MB),e(MB,ZXe),e(Hn,eVe),e(Hn,EB),e(EB,oVe),e(Hn,rVe),e(M,tVe),e(M,wg),e(wg,XH),e(XH,aVe),e(wg,nVe),e(wg,yB),e(yB,sVe),e(wg,lVe),e(M,iVe),e(M,Un),e(Un,VH),e(VH,dVe),e(Un,cVe),e(Un,wB),e(wB,fVe),e(Un,mVe),e(Un,AB),e(AB,gVe),e(Un,hVe),e(M,pVe),e(M,Jn),e(Jn,zH),e(zH,_Ve),e(Jn,uVe),e(Jn,LB),e(LB,bVe),e(Jn,vVe),e(Jn,BB),e(BB,TVe),e(Jn,FVe),e(M,CVe),e(M,Yn),e(Yn,WH),e(WH,MVe),e(Yn,EVe),e(Yn,xB),e(xB,yVe),e(Yn,wVe),e(Yn,QH),e(QH,AVe),e(Yn,LVe),e(M,BVe),e(M,Ag),e(Ag,HH),e(HH,xVe),e(Ag,kVe),e(Ag,kB),e(kB,RVe),e(Ag,SVe),e(M,PVe),e(M,Kn),e(Kn,UH),e(UH,$Ve),e(Kn,IVe),e(Kn,RB),e(RB,DVe),e(Kn,jVe),e(Kn,SB),e(SB,NVe),e(Kn,qVe),e(M,GVe),e(M,Lg),e(Lg,JH),e(JH,OVe),e(Lg,XVe),e(Lg,PB),e(PB,VVe),e(Lg,zVe),e(M,WVe),e(M,Zn),e(Zn,YH),e(YH,QVe),e(Zn,HVe),e(Zn,$B),e($B,UVe),e(Zn,JVe),e(Zn,IB),e(IB,YVe),e(Zn,KVe),e(M,ZVe),e(M,es),e(es,KH),e(KH,eze),e(es,oze),e(es,DB),e(DB,rze),e(es,tze),e(es,jB),e(jB,aze),e(es,nze),e(M,sze),e(M,os),e(os,ZH),e(ZH,lze),e(os,ize),e(os,NB),e(NB,dze),e(os,cze),e(os,qB),e(qB,fze),e(os,mze),e(M,gze),e(M,Bg),e(Bg,eU),e(eU,hze),e(Bg,pze),e(Bg,GB),e(GB,_ze),e(Bg,uze),e(M,bze),e(M,rs),e(rs,oU),e(oU,vze),e(rs,Tze),e(rs,OB),e(OB,Fze),e(rs,Cze),e(rs,XB),e(XB,Mze),e(rs,Eze),e(M,yze),e(M,xg),e(xg,rU),e(rU,wze),e(xg,Aze),e(xg,VB),e(VB,Lze),e(xg,Bze),e(M,xze),e(M,ts),e(ts,tU),e(tU,kze),e(ts,Rze),e(ts,zB),e(zB,Sze),e(ts,Pze),e(ts,WB),e(WB,$ze),e(ts,Ize),e(M,Dze),e(M,as),e(as,aU),e(aU,jze),e(as,Nze),e(as,QB),e(QB,qze),e(as,Gze),e(as,HB),e(HB,Oze),e(as,Xze),e(M,Vze),e(M,ns),e(ns,nU),e(nU,zze),e(ns,Wze),e(ns,UB),e(UB,Qze),e(ns,Hze),e(ns,JB),e(JB,Uze),e(ns,Jze),e(M,Yze),e(M,ss),e(ss,sU),e(sU,Kze),e(ss,Zze),e(ss,YB),e(YB,eWe),e(ss,oWe),e(ss,KB),e(KB,rWe),e(ss,tWe),e(M,aWe),e(M,kg),e(kg,lU),e(lU,nWe),e(kg,sWe),e(kg,ZB),e(ZB,lWe),e(kg,iWe),e(M,dWe),e(M,ls),e(ls,iU),e(iU,cWe),e(ls,fWe),e(ls,ex),e(ex,mWe),e(ls,gWe),e(ls,ox),e(ox,hWe),e(ls,pWe),e(M,_We),e(M,is),e(is,dU),e(dU,uWe),e(is,bWe),e(is,rx),e(rx,vWe),e(is,TWe),e(is,tx),e(tx,FWe),e(is,CWe),e(M,MWe),e(M,ds),e(ds,cU),e(cU,EWe),e(ds,yWe),e(ds,ax),e(ax,wWe),e(ds,AWe),e(ds,nx),e(nx,LWe),e(ds,BWe),e(M,xWe),e(M,cs),e(cs,fU),e(fU,kWe),e(cs,RWe),e(cs,sx),e(sx,SWe),e(cs,PWe),e(cs,lx),e(lx,$We),e(cs,IWe),e(M,DWe),e(M,fs),e(fs,mU),e(mU,jWe),e(fs,NWe),e(fs,ix),e(ix,qWe),e(fs,GWe),e(fs,dx),e(dx,OWe),e(fs,XWe),e(M,VWe),e(M,ms),e(ms,gU),e(gU,zWe),e(ms,WWe),e(ms,cx),e(cx,QWe),e(ms,HWe),e(ms,fx),e(fx,UWe),e(ms,JWe),e(M,YWe),e(M,Rg),e(Rg,hU),e(hU,KWe),e(Rg,ZWe),e(Rg,mx),e(mx,eQe),e(Rg,oQe),e(M,rQe),e(M,gs),e(gs,pU),e(pU,tQe),e(gs,aQe),e(gs,gx),e(gx,nQe),e(gs,sQe),e(gs,hx),e(hx,lQe),e(gs,iQe),e(M,dQe),e(M,Sg),e(Sg,_U),e(_U,cQe),e(Sg,fQe),e(Sg,px),e(px,mQe),e(Sg,gQe),e(M,hQe),e(M,Pg),e(Pg,uU),e(uU,pQe),e(Pg,_Qe),e(Pg,_x),e(_x,uQe),e(Pg,bQe),e(M,vQe),e(M,hs),e(hs,bU),e(bU,TQe),e(hs,FQe),e(hs,ux),e(ux,CQe),e(hs,MQe),e(hs,bx),e(bx,EQe),e(hs,yQe),e(M,wQe),e(M,ps),e(ps,vU),e(vU,AQe),e(ps,LQe),e(ps,vx),e(vx,BQe),e(ps,xQe),e(ps,Tx),e(Tx,kQe),e(ps,RQe),e(M,SQe),e(M,$g),e($g,TU),e(TU,PQe),e($g,$Qe),e($g,Fx),e(Fx,IQe),e($g,DQe),e(M,jQe),e(M,_s),e(_s,FU),e(FU,NQe),e(_s,qQe),e(_s,Cx),e(Cx,GQe),e(_s,OQe),e(_s,Mx),e(Mx,XQe),e(_s,VQe),e(M,zQe),e(M,us),e(us,CU),e(CU,WQe),e(us,QQe),e(us,Ex),e(Ex,HQe),e(us,UQe),e(us,yx),e(yx,JQe),e(us,YQe),e(M,KQe),e(M,bs),e(bs,MU),e(MU,ZQe),e(bs,eHe),e(bs,wx),e(wx,oHe),e(bs,rHe),e(bs,Ax),e(Ax,tHe),e(bs,aHe),e(M,nHe),e(M,vs),e(vs,EU),e(EU,sHe),e(vs,lHe),e(vs,Lx),e(Lx,iHe),e(vs,dHe),e(vs,Bx),e(Bx,cHe),e(vs,fHe),e(M,mHe),e(M,Ts),e(Ts,yU),e(yU,gHe),e(Ts,hHe),e(Ts,xx),e(xx,pHe),e(Ts,_He),e(Ts,kx),e(kx,uHe),e(Ts,bHe),e(M,vHe),e(M,Ig),e(Ig,wU),e(wU,THe),e(Ig,FHe),e(Ig,Rx),e(Rx,CHe),e(Ig,MHe),e(M,EHe),e(M,Dg),e(Dg,AU),e(AU,yHe),e(Dg,wHe),e(Dg,Sx),e(Sx,AHe),e(Dg,LHe),e(M,BHe),e(M,jg),e(jg,LU),e(LU,xHe),e(jg,kHe),e(jg,Px),e(Px,RHe),e(jg,SHe),e(M,PHe),e(M,Ng),e(Ng,BU),e(BU,$He),e(Ng,IHe),e(Ng,$x),e($x,DHe),e(Ng,jHe),e(M,NHe),e(M,Fs),e(Fs,xU),e(xU,qHe),e(Fs,GHe),e(Fs,Ix),e(Ix,OHe),e(Fs,XHe),e(Fs,Dx),e(Dx,VHe),e(Fs,zHe),e(M,WHe),e(M,qg),e(qg,kU),e(kU,QHe),e(qg,HHe),e(qg,jx),e(jx,UHe),e(qg,JHe),e(M,YHe),e(M,Cs),e(Cs,RU),e(RU,KHe),e(Cs,ZHe),e(Cs,Nx),e(Nx,eUe),e(Cs,oUe),e(Cs,qx),e(qx,rUe),e(Cs,tUe),e(M,aUe),e(M,Ms),e(Ms,SU),e(SU,nUe),e(Ms,sUe),e(Ms,Gx),e(Gx,lUe),e(Ms,iUe),e(Ms,Ox),e(Ox,dUe),e(Ms,cUe),e(M,fUe),e(M,Es),e(Es,PU),e(PU,mUe),e(Es,gUe),e(Es,Xx),e(Xx,hUe),e(Es,pUe),e(Es,Vx),e(Vx,_Ue),e(Es,uUe),e(M,bUe),e(M,ys),e(ys,$U),e($U,vUe),e(ys,TUe),e(ys,zx),e(zx,FUe),e(ys,CUe),e(ys,Wx),e(Wx,MUe),e(ys,EUe),e(M,yUe),e(M,ws),e(ws,IU),e(IU,wUe),e(ws,AUe),e(ws,Qx),e(Qx,LUe),e(ws,BUe),e(ws,Hx),e(Hx,xUe),e(ws,kUe),e(M,RUe),e(M,As),e(As,DU),e(DU,SUe),e(As,PUe),e(As,Ux),e(Ux,$Ue),e(As,IUe),e(As,Jx),e(Jx,DUe),e(As,jUe),e(M,NUe),e(M,Gg),e(Gg,jU),e(jU,qUe),e(Gg,GUe),e(Gg,Yx),e(Yx,OUe),e(Gg,XUe),e(M,VUe),e(M,Og),e(Og,NU),e(NU,zUe),e(Og,WUe),e(Og,Kx),e(Kx,QUe),e(Og,HUe),e(M,UUe),e(M,Ls),e(Ls,qU),e(qU,JUe),e(Ls,YUe),e(Ls,Zx),e(Zx,KUe),e(Ls,ZUe),e(Ls,ek),e(ek,eJe),e(Ls,oJe),e(M,rJe),e(M,Bs),e(Bs,GU),e(GU,tJe),e(Bs,aJe),e(Bs,ok),e(ok,nJe),e(Bs,sJe),e(Bs,rk),e(rk,lJe),e(Bs,iJe),e(M,dJe),e(M,xs),e(xs,OU),e(OU,cJe),e(xs,fJe),e(xs,tk),e(tk,mJe),e(xs,gJe),e(xs,ak),e(ak,hJe),e(xs,pJe),e(M,_Je),e(M,Xg),e(Xg,XU),e(XU,uJe),e(Xg,bJe),e(Xg,nk),e(nk,vJe),e(Xg,TJe),e(M,FJe),e(M,Vg),e(Vg,VU),e(VU,CJe),e(Vg,MJe),e(Vg,sk),e(sk,EJe),e(Vg,yJe),e(M,wJe),e(M,zg),e(zg,zU),e(zU,AJe),e(zg,LJe),e(zg,lk),e(lk,BJe),e(zg,xJe),e(M,kJe),e(M,Wg),e(Wg,WU),e(WU,RJe),e(Wg,SJe),e(Wg,ik),e(ik,PJe),e(Wg,$Je),e(M,IJe),e(M,ks),e(ks,QU),e(QU,DJe),e(ks,jJe),e(ks,dk),e(dk,NJe),e(ks,qJe),e(ks,ck),e(ck,GJe),e(ks,OJe),e(M,XJe),e(M,Qg),e(Qg,HU),e(HU,VJe),e(Qg,zJe),e(Qg,fk),e(fk,WJe),e(Qg,QJe),e(M,HJe),e(M,Hg),e(Hg,UU),e(UU,UJe),e(Hg,JJe),e(Hg,mk),e(mk,YJe),e(Hg,KJe),e(M,ZJe),e(M,Rs),e(Rs,JU),e(JU,eYe),e(Rs,oYe),e(Rs,gk),e(gk,rYe),e(Rs,tYe),e(Rs,hk),e(hk,aYe),e(Rs,nYe),e(M,sYe),e(M,Ss),e(Ss,YU),e(YU,lYe),e(Ss,iYe),e(Ss,pk),e(pk,dYe),e(Ss,cYe),e(Ss,_k),e(_k,fYe),e(Ss,mYe),e(mo,gYe),e(mo,KU),e(KU,hYe),e(mo,pYe),g(GM,mo,null),e(Vo,_Ye),e(Vo,Ug),g(OM,Ug,null),e(Ug,uYe),e(Ug,ZU),e(ZU,bYe),b(c,N7e,u),b(c,qi,u),e(qi,Jg),e(Jg,eJ),g(XM,eJ,null),e(qi,vYe),e(qi,oJ),e(oJ,TYe),b(c,q7e,u),b(c,zo,u),g(VM,zo,null),e(zo,FYe),e(zo,zM),e(zM,CYe),e(zM,uk),e(uk,MYe),e(zM,EYe),e(zo,yYe),e(zo,WM),e(WM,wYe),e(WM,rJ),e(rJ,AYe),e(WM,LYe),e(zo,BYe),e(zo,xe),g(QM,xe,null),e(xe,xYe),e(xe,tJ),e(tJ,kYe),e(xe,RYe),e(xe,ja),e(ja,SYe),e(ja,aJ),e(aJ,PYe),e(ja,$Ye),e(ja,nJ),e(nJ,IYe),e(ja,DYe),e(ja,sJ),e(sJ,jYe),e(ja,NYe),e(xe,qYe),e(xe,se),e(se,Yg),e(Yg,lJ),e(lJ,GYe),e(Yg,OYe),e(Yg,bk),e(bk,XYe),e(Yg,VYe),e(se,zYe),e(se,Kg),e(Kg,iJ),e(iJ,WYe),e(Kg,QYe),e(Kg,vk),e(vk,HYe),e(Kg,UYe),e(se,JYe),e(se,Zg),e(Zg,dJ),e(dJ,YYe),e(Zg,KYe),e(Zg,Tk),e(Tk,ZYe),e(Zg,eKe),e(se,oKe),e(se,eh),e(eh,cJ),e(cJ,rKe),e(eh,tKe),e(eh,Fk),e(Fk,aKe),e(eh,nKe),e(se,sKe),e(se,oh),e(oh,fJ),e(fJ,lKe),e(oh,iKe),e(oh,Ck),e(Ck,dKe),e(oh,cKe),e(se,fKe),e(se,rh),e(rh,mJ),e(mJ,mKe),e(rh,gKe),e(rh,Mk),e(Mk,hKe),e(rh,pKe),e(se,_Ke),e(se,th),e(th,gJ),e(gJ,uKe),e(th,bKe),e(th,Ek),e(Ek,vKe),e(th,TKe),e(se,FKe),e(se,ah),e(ah,hJ),e(hJ,CKe),e(ah,MKe),e(ah,yk),e(yk,EKe),e(ah,yKe),e(se,wKe),e(se,nh),e(nh,pJ),e(pJ,AKe),e(nh,LKe),e(nh,wk),e(wk,BKe),e(nh,xKe),e(se,kKe),e(se,sh),e(sh,_J),e(_J,RKe),e(sh,SKe),e(sh,Ak),e(Ak,PKe),e(sh,$Ke),e(se,IKe),e(se,lh),e(lh,uJ),e(uJ,DKe),e(lh,jKe),e(lh,Lk),e(Lk,NKe),e(lh,qKe),e(se,GKe),e(se,ih),e(ih,bJ),e(bJ,OKe),e(ih,XKe),e(ih,Bk),e(Bk,VKe),e(ih,zKe),e(se,WKe),e(se,dh),e(dh,vJ),e(vJ,QKe),e(dh,HKe),e(dh,xk),e(xk,UKe),e(dh,JKe),e(se,YKe),e(se,ch),e(ch,TJ),e(TJ,KKe),e(ch,ZKe),e(ch,kk),e(kk,eZe),e(ch,oZe),e(se,rZe),e(se,fh),e(fh,FJ),e(FJ,tZe),e(fh,aZe),e(fh,Rk),e(Rk,nZe),e(fh,sZe),e(xe,lZe),g(mh,xe,null),e(xe,iZe),e(xe,CJ),e(CJ,dZe),e(xe,cZe),g(HM,xe,null),e(zo,fZe),e(zo,gh),g(UM,gh,null),e(gh,mZe),e(gh,MJ),e(MJ,gZe),b(c,G7e,u),b(c,Gi,u),e(Gi,hh),e(hh,EJ),g(JM,EJ,null),e(Gi,hZe),e(Gi,yJ),e(yJ,pZe),b(c,O7e,u),b(c,Wo,u),g(YM,Wo,null),e(Wo,_Ze),e(Wo,KM),e(KM,uZe),e(KM,Sk),e(Sk,bZe),e(KM,vZe),e(Wo,TZe),e(Wo,ZM),e(ZM,FZe),e(ZM,wJ),e(wJ,CZe),e(ZM,MZe),e(Wo,EZe),e(Wo,ke),g(eE,ke,null),e(ke,yZe),e(ke,AJ),e(AJ,wZe),e(ke,AZe),e(ke,Oi),e(Oi,LZe),e(Oi,LJ),e(LJ,BZe),e(Oi,xZe),e(Oi,BJ),e(BJ,kZe),e(Oi,RZe),e(ke,SZe),e(ke,we),e(we,ph),e(ph,xJ),e(xJ,PZe),e(ph,$Ze),e(ph,Pk),e(Pk,IZe),e(ph,DZe),e(we,jZe),e(we,_h),e(_h,kJ),e(kJ,NZe),e(_h,qZe),e(_h,$k),e($k,GZe),e(_h,OZe),e(we,XZe),e(we,uh),e(uh,RJ),e(RJ,VZe),e(uh,zZe),e(uh,Ik),e(Ik,WZe),e(uh,QZe),e(we,HZe),e(we,bh),e(bh,SJ),e(SJ,UZe),e(bh,JZe),e(bh,Dk),e(Dk,YZe),e(bh,KZe),e(we,ZZe),e(we,vh),e(vh,PJ),e(PJ,eeo),e(vh,oeo),e(vh,jk),e(jk,reo),e(vh,teo),e(we,aeo),e(we,Th),e(Th,$J),e($J,neo),e(Th,seo),e(Th,Nk),e(Nk,leo),e(Th,ieo),e(we,deo),e(we,Fh),e(Fh,IJ),e(IJ,ceo),e(Fh,feo),e(Fh,qk),e(qk,meo),e(Fh,geo),e(we,heo),e(we,Ch),e(Ch,DJ),e(DJ,peo),e(Ch,_eo),e(Ch,Gk),e(Gk,ueo),e(Ch,beo),e(ke,veo),g(Mh,ke,null),e(ke,Teo),e(ke,jJ),e(jJ,Feo),e(ke,Ceo),g(oE,ke,null),e(Wo,Meo),e(Wo,Eh),g(rE,Eh,null),e(Eh,Eeo),e(Eh,NJ),e(NJ,yeo),b(c,X7e,u),b(c,Xi,u),e(Xi,yh),e(yh,qJ),g(tE,qJ,null),e(Xi,weo),e(Xi,GJ),e(GJ,Aeo),b(c,V7e,u),b(c,Qo,u),g(aE,Qo,null),e(Qo,Leo),e(Qo,Vi),e(Vi,Beo),e(Vi,OJ),e(OJ,xeo),e(Vi,keo),e(Vi,XJ),e(XJ,Reo),e(Vi,Seo),e(Qo,Peo),e(Qo,nE),e(nE,$eo),e(nE,VJ),e(VJ,Ieo),e(nE,Deo),e(Qo,jeo),e(Qo,qr),g(sE,qr,null),e(qr,Neo),e(qr,zJ),e(zJ,qeo),e(qr,Geo),e(qr,zi),e(zi,Oeo),e(zi,WJ),e(WJ,Xeo),e(zi,Veo),e(zi,QJ),e(QJ,zeo),e(zi,Weo),e(qr,Qeo),e(qr,HJ),e(HJ,Heo),e(qr,Ueo),g(lE,qr,null),e(Qo,Jeo),e(Qo,Re),g(iE,Re,null),e(Re,Yeo),e(Re,UJ),e(UJ,Keo),e(Re,Zeo),e(Re,Na),e(Na,eoo),e(Na,JJ),e(JJ,ooo),e(Na,roo),e(Na,YJ),e(YJ,too),e(Na,aoo),e(Na,KJ),e(KJ,noo),e(Na,soo),e(Re,loo),e(Re,F),e(F,wh),e(wh,ZJ),e(ZJ,ioo),e(wh,doo),e(wh,Ok),e(Ok,coo),e(wh,foo),e(F,moo),e(F,Ah),e(Ah,eY),e(eY,goo),e(Ah,hoo),e(Ah,Xk),e(Xk,poo),e(Ah,_oo),e(F,uoo),e(F,Lh),e(Lh,oY),e(oY,boo),e(Lh,voo),e(Lh,Vk),e(Vk,Too),e(Lh,Foo),e(F,Coo),e(F,Bh),e(Bh,rY),e(rY,Moo),e(Bh,Eoo),e(Bh,zk),e(zk,yoo),e(Bh,woo),e(F,Aoo),e(F,xh),e(xh,tY),e(tY,Loo),e(xh,Boo),e(xh,Wk),e(Wk,xoo),e(xh,koo),e(F,Roo),e(F,kh),e(kh,aY),e(aY,Soo),e(kh,Poo),e(kh,Qk),e(Qk,$oo),e(kh,Ioo),e(F,Doo),e(F,Rh),e(Rh,nY),e(nY,joo),e(Rh,Noo),e(Rh,Hk),e(Hk,qoo),e(Rh,Goo),e(F,Ooo),e(F,Sh),e(Sh,sY),e(sY,Xoo),e(Sh,Voo),e(Sh,Uk),e(Uk,zoo),e(Sh,Woo),e(F,Qoo),e(F,Ph),e(Ph,lY),e(lY,Hoo),e(Ph,Uoo),e(Ph,Jk),e(Jk,Joo),e(Ph,Yoo),e(F,Koo),e(F,$h),e($h,iY),e(iY,Zoo),e($h,ero),e($h,Yk),e(Yk,oro),e($h,rro),e(F,tro),e(F,Ih),e(Ih,dY),e(dY,aro),e(Ih,nro),e(Ih,Kk),e(Kk,sro),e(Ih,lro),e(F,iro),e(F,Dh),e(Dh,cY),e(cY,dro),e(Dh,cro),e(Dh,Zk),e(Zk,fro),e(Dh,mro),e(F,gro),e(F,jh),e(jh,fY),e(fY,hro),e(jh,pro),e(jh,eR),e(eR,_ro),e(jh,uro),e(F,bro),e(F,Nh),e(Nh,mY),e(mY,vro),e(Nh,Tro),e(Nh,oR),e(oR,Fro),e(Nh,Cro),e(F,Mro),e(F,qh),e(qh,gY),e(gY,Ero),e(qh,yro),e(qh,rR),e(rR,wro),e(qh,Aro),e(F,Lro),e(F,Gh),e(Gh,hY),e(hY,Bro),e(Gh,xro),e(Gh,tR),e(tR,kro),e(Gh,Rro),e(F,Sro),e(F,Oh),e(Oh,pY),e(pY,Pro),e(Oh,$ro),e(Oh,aR),e(aR,Iro),e(Oh,Dro),e(F,jro),e(F,Xh),e(Xh,_Y),e(_Y,Nro),e(Xh,qro),e(Xh,nR),e(nR,Gro),e(Xh,Oro),e(F,Xro),e(F,Vh),e(Vh,uY),e(uY,Vro),e(Vh,zro),e(Vh,sR),e(sR,Wro),e(Vh,Qro),e(F,Hro),e(F,zh),e(zh,bY),e(bY,Uro),e(zh,Jro),e(zh,lR),e(lR,Yro),e(zh,Kro),e(F,Zro),e(F,Wh),e(Wh,vY),e(vY,eto),e(Wh,oto),e(Wh,iR),e(iR,rto),e(Wh,tto),e(F,ato),e(F,Qh),e(Qh,TY),e(TY,nto),e(Qh,sto),e(Qh,dR),e(dR,lto),e(Qh,ito),e(F,dto),e(F,Hh),e(Hh,FY),e(FY,cto),e(Hh,fto),e(Hh,cR),e(cR,mto),e(Hh,gto),e(F,hto),e(F,Uh),e(Uh,CY),e(CY,pto),e(Uh,_to),e(Uh,fR),e(fR,uto),e(Uh,bto),e(F,vto),e(F,Jh),e(Jh,MY),e(MY,Tto),e(Jh,Fto),e(Jh,mR),e(mR,Cto),e(Jh,Mto),e(F,Eto),e(F,Yh),e(Yh,EY),e(EY,yto),e(Yh,wto),e(Yh,gR),e(gR,Ato),e(Yh,Lto),e(F,Bto),e(F,Kh),e(Kh,yY),e(yY,xto),e(Kh,kto),e(Kh,hR),e(hR,Rto),e(Kh,Sto),e(F,Pto),e(F,Ps),e(Ps,wY),e(wY,$to),e(Ps,Ito),e(Ps,pR),e(pR,Dto),e(Ps,jto),e(Ps,_R),e(_R,Nto),e(Ps,qto),e(F,Gto),e(F,Zh),e(Zh,AY),e(AY,Oto),e(Zh,Xto),e(Zh,uR),e(uR,Vto),e(Zh,zto),e(F,Wto),e(F,ep),e(ep,LY),e(LY,Qto),e(ep,Hto),e(ep,bR),e(bR,Uto),e(ep,Jto),e(F,Yto),e(F,op),e(op,BY),e(BY,Kto),e(op,Zto),e(op,vR),e(vR,eao),e(op,oao),e(F,rao),e(F,rp),e(rp,xY),e(xY,tao),e(rp,aao),e(rp,TR),e(TR,nao),e(rp,sao),e(F,lao),e(F,tp),e(tp,kY),e(kY,iao),e(tp,dao),e(tp,FR),e(FR,cao),e(tp,fao),e(F,mao),e(F,ap),e(ap,RY),e(RY,gao),e(ap,hao),e(ap,CR),e(CR,pao),e(ap,_ao),e(F,uao),e(F,np),e(np,SY),e(SY,bao),e(np,vao),e(np,MR),e(MR,Tao),e(np,Fao),e(F,Cao),e(F,sp),e(sp,PY),e(PY,Mao),e(sp,Eao),e(sp,ER),e(ER,yao),e(sp,wao),e(F,Aao),e(F,lp),e(lp,$Y),e($Y,Lao),e(lp,Bao),e(lp,yR),e(yR,xao),e(lp,kao),e(F,Rao),e(F,ip),e(ip,IY),e(IY,Sao),e(ip,Pao),e(ip,wR),e(wR,$ao),e(ip,Iao),e(F,Dao),e(F,dp),e(dp,DY),e(DY,jao),e(dp,Nao),e(dp,AR),e(AR,qao),e(dp,Gao),e(F,Oao),e(F,cp),e(cp,jY),e(jY,Xao),e(cp,Vao),e(cp,LR),e(LR,zao),e(cp,Wao),e(F,Qao),e(F,fp),e(fp,NY),e(NY,Hao),e(fp,Uao),e(fp,BR),e(BR,Jao),e(fp,Yao),e(F,Kao),e(F,mp),e(mp,qY),e(qY,Zao),e(mp,eno),e(mp,xR),e(xR,ono),e(mp,rno),e(F,tno),e(F,gp),e(gp,GY),e(GY,ano),e(gp,nno),e(gp,kR),e(kR,sno),e(gp,lno),e(F,ino),e(F,hp),e(hp,OY),e(OY,dno),e(hp,cno),e(hp,RR),e(RR,fno),e(hp,mno),e(F,gno),e(F,pp),e(pp,XY),e(XY,hno),e(pp,pno),e(pp,SR),e(SR,_no),e(pp,uno),e(F,bno),e(F,_p),e(_p,VY),e(VY,vno),e(_p,Tno),e(_p,PR),e(PR,Fno),e(_p,Cno),e(F,Mno),e(F,up),e(up,zY),e(zY,Eno),e(up,yno),e(up,$R),e($R,wno),e(up,Ano),e(F,Lno),e(F,bp),e(bp,WY),e(WY,Bno),e(bp,xno),e(bp,IR),e(IR,kno),e(bp,Rno),e(F,Sno),e(F,vp),e(vp,QY),e(QY,Pno),e(vp,$no),e(vp,DR),e(DR,Ino),e(vp,Dno),e(F,jno),e(F,Tp),e(Tp,HY),e(HY,Nno),e(Tp,qno),e(Tp,jR),e(jR,Gno),e(Tp,Ono),e(F,Xno),e(F,Fp),e(Fp,UY),e(UY,Vno),e(Fp,zno),e(Fp,NR),e(NR,Wno),e(Fp,Qno),e(F,Hno),e(F,Cp),e(Cp,JY),e(JY,Uno),e(Cp,Jno),e(Cp,qR),e(qR,Yno),e(Cp,Kno),e(F,Zno),e(F,Mp),e(Mp,YY),e(YY,eso),e(Mp,oso),e(Mp,GR),e(GR,rso),e(Mp,tso),e(F,aso),e(F,Ep),e(Ep,KY),e(KY,nso),e(Ep,sso),e(Ep,OR),e(OR,lso),e(Ep,iso),e(F,dso),e(F,yp),e(yp,ZY),e(ZY,cso),e(yp,fso),e(yp,XR),e(XR,mso),e(yp,gso),e(F,hso),e(F,wp),e(wp,eK),e(eK,pso),e(wp,_so),e(wp,VR),e(VR,uso),e(wp,bso),e(F,vso),e(F,Ap),e(Ap,oK),e(oK,Tso),e(Ap,Fso),e(Ap,zR),e(zR,Cso),e(Ap,Mso),e(F,Eso),e(F,Lp),e(Lp,rK),e(rK,yso),e(Lp,wso),e(Lp,WR),e(WR,Aso),e(Lp,Lso),e(F,Bso),e(F,Bp),e(Bp,tK),e(tK,xso),e(Bp,kso),e(Bp,QR),e(QR,Rso),e(Bp,Sso),e(F,Pso),e(F,xp),e(xp,aK),e(aK,$so),e(xp,Iso),e(xp,HR),e(HR,Dso),e(xp,jso),e(F,Nso),e(F,kp),e(kp,nK),e(nK,qso),e(kp,Gso),e(kp,UR),e(UR,Oso),e(kp,Xso),e(F,Vso),e(F,Rp),e(Rp,sK),e(sK,zso),e(Rp,Wso),e(Rp,JR),e(JR,Qso),e(Rp,Hso),e(F,Uso),e(F,Sp),e(Sp,lK),e(lK,Jso),e(Sp,Yso),e(Sp,YR),e(YR,Kso),e(Sp,Zso),e(F,elo),e(F,Pp),e(Pp,iK),e(iK,olo),e(Pp,rlo),e(Pp,KR),e(KR,tlo),e(Pp,alo),e(F,nlo),e(F,$p),e($p,dK),e(dK,slo),e($p,llo),e($p,ZR),e(ZR,ilo),e($p,dlo),e(F,clo),e(F,Ip),e(Ip,cK),e(cK,flo),e(Ip,mlo),e(Ip,eS),e(eS,glo),e(Ip,hlo),e(F,plo),e(F,Dp),e(Dp,fK),e(fK,_lo),e(Dp,ulo),e(Dp,oS),e(oS,blo),e(Dp,vlo),e(F,Tlo),e(F,jp),e(jp,mK),e(mK,Flo),e(jp,Clo),e(jp,rS),e(rS,Mlo),e(jp,Elo),e(F,ylo),e(F,Np),e(Np,gK),e(gK,wlo),e(Np,Alo),e(Np,tS),e(tS,Llo),e(Np,Blo),e(F,xlo),e(F,qp),e(qp,hK),e(hK,klo),e(qp,Rlo),e(qp,aS),e(aS,Slo),e(qp,Plo),e(F,$lo),e(F,Gp),e(Gp,pK),e(pK,Ilo),e(Gp,Dlo),e(Gp,nS),e(nS,jlo),e(Gp,Nlo),e(F,qlo),e(F,Op),e(Op,_K),e(_K,Glo),e(Op,Olo),e(Op,sS),e(sS,Xlo),e(Op,Vlo),e(F,zlo),e(F,Xp),e(Xp,uK),e(uK,Wlo),e(Xp,Qlo),e(Xp,lS),e(lS,Hlo),e(Xp,Ulo),e(F,Jlo),e(F,Vp),e(Vp,bK),e(bK,Ylo),e(Vp,Klo),e(Vp,iS),e(iS,Zlo),e(Vp,eio),e(F,oio),e(F,zp),e(zp,vK),e(vK,rio),e(zp,tio),e(zp,dS),e(dS,aio),e(zp,nio),e(F,sio),e(F,Wp),e(Wp,TK),e(TK,lio),e(Wp,iio),e(Wp,cS),e(cS,dio),e(Wp,cio),e(F,fio),e(F,Qp),e(Qp,FK),e(FK,mio),e(Qp,gio),e(Qp,fS),e(fS,hio),e(Qp,pio),e(F,_io),e(F,Hp),e(Hp,CK),e(CK,uio),e(Hp,bio),e(Hp,mS),e(mS,vio),e(Hp,Tio),e(F,Fio),e(F,Up),e(Up,MK),e(MK,Cio),e(Up,Mio),e(Up,gS),e(gS,Eio),e(Up,yio),e(F,wio),e(F,Jp),e(Jp,EK),e(EK,Aio),e(Jp,Lio),e(Jp,hS),e(hS,Bio),e(Jp,xio),e(F,kio),e(F,Yp),e(Yp,yK),e(yK,Rio),e(Yp,Sio),e(Yp,pS),e(pS,Pio),e(Yp,$io),e(F,Iio),e(F,Kp),e(Kp,wK),e(wK,Dio),e(Kp,jio),e(Kp,_S),e(_S,Nio),e(Kp,qio),e(F,Gio),e(F,Zp),e(Zp,AK),e(AK,Oio),e(Zp,Xio),e(Zp,uS),e(uS,Vio),e(Zp,zio),e(F,Wio),e(F,e_),e(e_,LK),e(LK,Qio),e(e_,Hio),e(e_,bS),e(bS,Uio),e(e_,Jio),e(F,Yio),e(F,o_),e(o_,BK),e(BK,Kio),e(o_,Zio),e(o_,vS),e(vS,edo),e(o_,odo),e(F,rdo),e(F,r_),e(r_,xK),e(xK,tdo),e(r_,ado),e(r_,TS),e(TS,ndo),e(r_,sdo),e(F,ldo),e(F,t_),e(t_,kK),e(kK,ido),e(t_,ddo),e(t_,FS),e(FS,cdo),e(t_,fdo),e(Re,mdo),e(Re,a_),e(a_,gdo),e(a_,RK),e(RK,hdo),e(a_,pdo),e(a_,SK),e(SK,_do),e(Re,udo),e(Re,PK),e(PK,bdo),e(Re,vdo),g(dE,Re,null),b(c,z7e,u),b(c,Wi,u),e(Wi,n_),e(n_,$K),g(cE,$K,null),e(Wi,Tdo),e(Wi,IK),e(IK,Fdo),b(c,W7e,u),b(c,Ho,u),g(fE,Ho,null),e(Ho,Cdo),e(Ho,Qi),e(Qi,Mdo),e(Qi,DK),e(DK,Edo),e(Qi,ydo),e(Qi,jK),e(jK,wdo),e(Qi,Ado),e(Ho,Ldo),e(Ho,mE),e(mE,Bdo),e(mE,NK),e(NK,xdo),e(mE,kdo),e(Ho,Rdo),e(Ho,Gr),g(gE,Gr,null),e(Gr,Sdo),e(Gr,qK),e(qK,Pdo),e(Gr,$do),e(Gr,Hi),e(Hi,Ido),e(Hi,GK),e(GK,Ddo),e(Hi,jdo),e(Hi,OK),e(OK,Ndo),e(Hi,qdo),e(Gr,Gdo),e(Gr,XK),e(XK,Odo),e(Gr,Xdo),g(hE,Gr,null),e(Ho,Vdo),e(Ho,Se),g(pE,Se,null),e(Se,zdo),e(Se,VK),e(VK,Wdo),e(Se,Qdo),e(Se,qa),e(qa,Hdo),e(qa,zK),e(zK,Udo),e(qa,Jdo),e(qa,WK),e(WK,Ydo),e(qa,Kdo),e(qa,QK),e(QK,Zdo),e(qa,eco),e(Se,oco),e(Se,k),e(k,s_),e(s_,HK),e(HK,rco),e(s_,tco),e(s_,CS),e(CS,aco),e(s_,nco),e(k,sco),e(k,l_),e(l_,UK),e(UK,lco),e(l_,ico),e(l_,MS),e(MS,dco),e(l_,cco),e(k,fco),e(k,i_),e(i_,JK),e(JK,mco),e(i_,gco),e(i_,ES),e(ES,hco),e(i_,pco),e(k,_co),e(k,d_),e(d_,YK),e(YK,uco),e(d_,bco),e(d_,yS),e(yS,vco),e(d_,Tco),e(k,Fco),e(k,c_),e(c_,KK),e(KK,Cco),e(c_,Mco),e(c_,wS),e(wS,Eco),e(c_,yco),e(k,wco),e(k,f_),e(f_,ZK),e(ZK,Aco),e(f_,Lco),e(f_,AS),e(AS,Bco),e(f_,xco),e(k,kco),e(k,m_),e(m_,eZ),e(eZ,Rco),e(m_,Sco),e(m_,LS),e(LS,Pco),e(m_,$co),e(k,Ico),e(k,g_),e(g_,oZ),e(oZ,Dco),e(g_,jco),e(g_,BS),e(BS,Nco),e(g_,qco),e(k,Gco),e(k,h_),e(h_,rZ),e(rZ,Oco),e(h_,Xco),e(h_,xS),e(xS,Vco),e(h_,zco),e(k,Wco),e(k,p_),e(p_,tZ),e(tZ,Qco),e(p_,Hco),e(p_,kS),e(kS,Uco),e(p_,Jco),e(k,Yco),e(k,__),e(__,aZ),e(aZ,Kco),e(__,Zco),e(__,RS),e(RS,efo),e(__,ofo),e(k,rfo),e(k,u_),e(u_,nZ),e(nZ,tfo),e(u_,afo),e(u_,SS),e(SS,nfo),e(u_,sfo),e(k,lfo),e(k,b_),e(b_,sZ),e(sZ,ifo),e(b_,dfo),e(b_,PS),e(PS,cfo),e(b_,ffo),e(k,mfo),e(k,v_),e(v_,lZ),e(lZ,gfo),e(v_,hfo),e(v_,$S),e($S,pfo),e(v_,_fo),e(k,ufo),e(k,T_),e(T_,iZ),e(iZ,bfo),e(T_,vfo),e(T_,IS),e(IS,Tfo),e(T_,Ffo),e(k,Cfo),e(k,F_),e(F_,dZ),e(dZ,Mfo),e(F_,Efo),e(F_,DS),e(DS,yfo),e(F_,wfo),e(k,Afo),e(k,C_),e(C_,cZ),e(cZ,Lfo),e(C_,Bfo),e(C_,jS),e(jS,xfo),e(C_,kfo),e(k,Rfo),e(k,M_),e(M_,fZ),e(fZ,Sfo),e(M_,Pfo),e(M_,NS),e(NS,$fo),e(M_,Ifo),e(k,Dfo),e(k,E_),e(E_,mZ),e(mZ,jfo),e(E_,Nfo),e(E_,qS),e(qS,qfo),e(E_,Gfo),e(k,Ofo),e(k,y_),e(y_,gZ),e(gZ,Xfo),e(y_,Vfo),e(y_,GS),e(GS,zfo),e(y_,Wfo),e(k,Qfo),e(k,w_),e(w_,hZ),e(hZ,Hfo),e(w_,Ufo),e(w_,OS),e(OS,Jfo),e(w_,Yfo),e(k,Kfo),e(k,A_),e(A_,pZ),e(pZ,Zfo),e(A_,emo),e(A_,XS),e(XS,omo),e(A_,rmo),e(k,tmo),e(k,L_),e(L_,_Z),e(_Z,amo),e(L_,nmo),e(L_,VS),e(VS,smo),e(L_,lmo),e(k,imo),e(k,B_),e(B_,uZ),e(uZ,dmo),e(B_,cmo),e(B_,zS),e(zS,fmo),e(B_,mmo),e(k,gmo),e(k,x_),e(x_,bZ),e(bZ,hmo),e(x_,pmo),e(x_,WS),e(WS,_mo),e(x_,umo),e(k,bmo),e(k,k_),e(k_,vZ),e(vZ,vmo),e(k_,Tmo),e(k_,QS),e(QS,Fmo),e(k_,Cmo),e(k,Mmo),e(k,R_),e(R_,TZ),e(TZ,Emo),e(R_,ymo),e(R_,HS),e(HS,wmo),e(R_,Amo),e(k,Lmo),e(k,S_),e(S_,FZ),e(FZ,Bmo),e(S_,xmo),e(S_,US),e(US,kmo),e(S_,Rmo),e(k,Smo),e(k,P_),e(P_,CZ),e(CZ,Pmo),e(P_,$mo),e(P_,JS),e(JS,Imo),e(P_,Dmo),e(k,jmo),e(k,$_),e($_,MZ),e(MZ,Nmo),e($_,qmo),e($_,YS),e(YS,Gmo),e($_,Omo),e(k,Xmo),e(k,I_),e(I_,EZ),e(EZ,Vmo),e(I_,zmo),e(I_,KS),e(KS,Wmo),e(I_,Qmo),e(k,Hmo),e(k,D_),e(D_,yZ),e(yZ,Umo),e(D_,Jmo),e(D_,ZS),e(ZS,Ymo),e(D_,Kmo),e(k,Zmo),e(k,j_),e(j_,wZ),e(wZ,ego),e(j_,ogo),e(j_,eP),e(eP,rgo),e(j_,tgo),e(k,ago),e(k,N_),e(N_,AZ),e(AZ,ngo),e(N_,sgo),e(N_,oP),e(oP,lgo),e(N_,igo),e(k,dgo),e(k,q_),e(q_,LZ),e(LZ,cgo),e(q_,fgo),e(q_,rP),e(rP,mgo),e(q_,ggo),e(k,hgo),e(k,G_),e(G_,BZ),e(BZ,pgo),e(G_,_go),e(G_,tP),e(tP,ugo),e(G_,bgo),e(k,vgo),e(k,O_),e(O_,xZ),e(xZ,Tgo),e(O_,Fgo),e(O_,aP),e(aP,Cgo),e(O_,Mgo),e(k,Ego),e(k,X_),e(X_,kZ),e(kZ,ygo),e(X_,wgo),e(X_,nP),e(nP,Ago),e(X_,Lgo),e(k,Bgo),e(k,V_),e(V_,RZ),e(RZ,xgo),e(V_,kgo),e(V_,sP),e(sP,Rgo),e(V_,Sgo),e(Se,Pgo),e(Se,z_),e(z_,$go),e(z_,SZ),e(SZ,Igo),e(z_,Dgo),e(z_,PZ),e(PZ,jgo),e(Se,Ngo),e(Se,$Z),e($Z,qgo),e(Se,Ggo),g(_E,Se,null),b(c,Q7e,u),b(c,Ui,u),e(Ui,W_),e(W_,IZ),g(uE,IZ,null),e(Ui,Ogo),e(Ui,DZ),e(DZ,Xgo),b(c,H7e,u),b(c,Uo,u),g(bE,Uo,null),e(Uo,Vgo),e(Uo,Ji),e(Ji,zgo),e(Ji,jZ),e(jZ,Wgo),e(Ji,Qgo),e(Ji,NZ),e(NZ,Hgo),e(Ji,Ugo),e(Uo,Jgo),e(Uo,vE),e(vE,Ygo),e(vE,qZ),e(qZ,Kgo),e(vE,Zgo),e(Uo,eho),e(Uo,Or),g(TE,Or,null),e(Or,oho),e(Or,GZ),e(GZ,rho),e(Or,tho),e(Or,Yi),e(Yi,aho),e(Yi,OZ),e(OZ,nho),e(Yi,sho),e(Yi,XZ),e(XZ,lho),e(Yi,iho),e(Or,dho),e(Or,VZ),e(VZ,cho),e(Or,fho),g(FE,Or,null),e(Uo,mho),e(Uo,Pe),g(CE,Pe,null),e(Pe,gho),e(Pe,zZ),e(zZ,hho),e(Pe,pho),e(Pe,Ga),e(Ga,_ho),e(Ga,WZ),e(WZ,uho),e(Ga,bho),e(Ga,QZ),e(QZ,vho),e(Ga,Tho),e(Ga,HZ),e(HZ,Fho),e(Ga,Cho),e(Pe,Mho),e(Pe,$),e($,Q_),e(Q_,UZ),e(UZ,Eho),e(Q_,yho),e(Q_,lP),e(lP,who),e(Q_,Aho),e($,Lho),e($,H_),e(H_,JZ),e(JZ,Bho),e(H_,xho),e(H_,iP),e(iP,kho),e(H_,Rho),e($,Sho),e($,U_),e(U_,YZ),e(YZ,Pho),e(U_,$ho),e(U_,dP),e(dP,Iho),e(U_,Dho),e($,jho),e($,J_),e(J_,KZ),e(KZ,Nho),e(J_,qho),e(J_,cP),e(cP,Gho),e(J_,Oho),e($,Xho),e($,Y_),e(Y_,ZZ),e(ZZ,Vho),e(Y_,zho),e(Y_,fP),e(fP,Who),e(Y_,Qho),e($,Hho),e($,K_),e(K_,eee),e(eee,Uho),e(K_,Jho),e(K_,mP),e(mP,Yho),e(K_,Kho),e($,Zho),e($,Z_),e(Z_,oee),e(oee,epo),e(Z_,opo),e(Z_,gP),e(gP,rpo),e(Z_,tpo),e($,apo),e($,eu),e(eu,ree),e(ree,npo),e(eu,spo),e(eu,hP),e(hP,lpo),e(eu,ipo),e($,dpo),e($,ou),e(ou,tee),e(tee,cpo),e(ou,fpo),e(ou,pP),e(pP,mpo),e(ou,gpo),e($,hpo),e($,ru),e(ru,aee),e(aee,ppo),e(ru,_po),e(ru,_P),e(_P,upo),e(ru,bpo),e($,vpo),e($,tu),e(tu,nee),e(nee,Tpo),e(tu,Fpo),e(tu,uP),e(uP,Cpo),e(tu,Mpo),e($,Epo),e($,au),e(au,see),e(see,ypo),e(au,wpo),e(au,bP),e(bP,Apo),e(au,Lpo),e($,Bpo),e($,nu),e(nu,lee),e(lee,xpo),e(nu,kpo),e(nu,vP),e(vP,Rpo),e(nu,Spo),e($,Ppo),e($,su),e(su,iee),e(iee,$po),e(su,Ipo),e(su,TP),e(TP,Dpo),e(su,jpo),e($,Npo),e($,lu),e(lu,dee),e(dee,qpo),e(lu,Gpo),e(lu,FP),e(FP,Opo),e(lu,Xpo),e($,Vpo),e($,iu),e(iu,cee),e(cee,zpo),e(iu,Wpo),e(iu,CP),e(CP,Qpo),e(iu,Hpo),e($,Upo),e($,du),e(du,fee),e(fee,Jpo),e(du,Ypo),e(du,MP),e(MP,Kpo),e(du,Zpo),e($,e_o),e($,cu),e(cu,mee),e(mee,o_o),e(cu,r_o),e(cu,EP),e(EP,t_o),e(cu,a_o),e($,n_o),e($,fu),e(fu,gee),e(gee,s_o),e(fu,l_o),e(fu,yP),e(yP,i_o),e(fu,d_o),e($,c_o),e($,mu),e(mu,hee),e(hee,f_o),e(mu,m_o),e(mu,wP),e(wP,g_o),e(mu,h_o),e($,p_o),e($,gu),e(gu,pee),e(pee,__o),e(gu,u_o),e(gu,AP),e(AP,b_o),e(gu,v_o),e($,T_o),e($,hu),e(hu,_ee),e(_ee,F_o),e(hu,C_o),e(hu,LP),e(LP,M_o),e(hu,E_o),e($,y_o),e($,pu),e(pu,uee),e(uee,w_o),e(pu,A_o),e(pu,BP),e(BP,L_o),e(pu,B_o),e($,x_o),e($,_u),e(_u,bee),e(bee,k_o),e(_u,R_o),e(_u,xP),e(xP,S_o),e(_u,P_o),e($,$_o),e($,uu),e(uu,vee),e(vee,I_o),e(uu,D_o),e(uu,kP),e(kP,j_o),e(uu,N_o),e($,q_o),e($,bu),e(bu,Tee),e(Tee,G_o),e(bu,O_o),e(bu,RP),e(RP,X_o),e(bu,V_o),e($,z_o),e($,vu),e(vu,Fee),e(Fee,W_o),e(vu,Q_o),e(vu,SP),e(SP,H_o),e(vu,U_o),e($,J_o),e($,Tu),e(Tu,Cee),e(Cee,Y_o),e(Tu,K_o),e(Tu,PP),e(PP,Z_o),e(Tu,euo),e($,ouo),e($,Fu),e(Fu,Mee),e(Mee,ruo),e(Fu,tuo),e(Fu,$P),e($P,auo),e(Fu,nuo),e($,suo),e($,Cu),e(Cu,Eee),e(Eee,luo),e(Cu,iuo),e(Cu,IP),e(IP,duo),e(Cu,cuo),e($,fuo),e($,Mu),e(Mu,yee),e(yee,muo),e(Mu,guo),e(Mu,DP),e(DP,huo),e(Mu,puo),e($,_uo),e($,Eu),e(Eu,wee),e(wee,uuo),e(Eu,buo),e(Eu,jP),e(jP,vuo),e(Eu,Tuo),e($,Fuo),e($,yu),e(yu,Aee),e(Aee,Cuo),e(yu,Muo),e(yu,NP),e(NP,Euo),e(yu,yuo),e($,wuo),e($,wu),e(wu,Lee),e(Lee,Auo),e(wu,Luo),e(wu,qP),e(qP,Buo),e(wu,xuo),e($,kuo),e($,Au),e(Au,Bee),e(Bee,Ruo),e(Au,Suo),e(Au,GP),e(GP,Puo),e(Au,$uo),e(Pe,Iuo),e(Pe,Lu),e(Lu,Duo),e(Lu,xee),e(xee,juo),e(Lu,Nuo),e(Lu,kee),e(kee,quo),e(Pe,Guo),e(Pe,Ree),e(Ree,Ouo),e(Pe,Xuo),g(ME,Pe,null),b(c,U7e,u),b(c,Ki,u),e(Ki,Bu),e(Bu,See),g(EE,See,null),e(Ki,Vuo),e(Ki,Pee),e(Pee,zuo),b(c,J7e,u),b(c,Jo,u),g(yE,Jo,null),e(Jo,Wuo),e(Jo,Zi),e(Zi,Quo),e(Zi,$ee),e($ee,Huo),e(Zi,Uuo),e(Zi,Iee),e(Iee,Juo),e(Zi,Yuo),e(Jo,Kuo),e(Jo,wE),e(wE,Zuo),e(wE,Dee),e(Dee,e1o),e(wE,o1o),e(Jo,r1o),e(Jo,Xr),g(AE,Xr,null),e(Xr,t1o),e(Xr,jee),e(jee,a1o),e(Xr,n1o),e(Xr,ed),e(ed,s1o),e(ed,Nee),e(Nee,l1o),e(ed,i1o),e(ed,qee),e(qee,d1o),e(ed,c1o),e(Xr,f1o),e(Xr,Gee),e(Gee,m1o),e(Xr,g1o),g(LE,Xr,null),e(Jo,h1o),e(Jo,$e),g(BE,$e,null),e($e,p1o),e($e,Oee),e(Oee,_1o),e($e,u1o),e($e,Oa),e(Oa,b1o),e(Oa,Xee),e(Xee,v1o),e(Oa,T1o),e(Oa,Vee),e(Vee,F1o),e(Oa,C1o),e(Oa,zee),e(zee,M1o),e(Oa,E1o),e($e,y1o),e($e,I),e(I,xu),e(xu,Wee),e(Wee,w1o),e(xu,A1o),e(xu,OP),e(OP,L1o),e(xu,B1o),e(I,x1o),e(I,ku),e(ku,Qee),e(Qee,k1o),e(ku,R1o),e(ku,XP),e(XP,S1o),e(ku,P1o),e(I,$1o),e(I,Ru),e(Ru,Hee),e(Hee,I1o),e(Ru,D1o),e(Ru,VP),e(VP,j1o),e(Ru,N1o),e(I,q1o),e(I,Su),e(Su,Uee),e(Uee,G1o),e(Su,O1o),e(Su,zP),e(zP,X1o),e(Su,V1o),e(I,z1o),e(I,Pu),e(Pu,Jee),e(Jee,W1o),e(Pu,Q1o),e(Pu,WP),e(WP,H1o),e(Pu,U1o),e(I,J1o),e(I,$u),e($u,Yee),e(Yee,Y1o),e($u,K1o),e($u,QP),e(QP,Z1o),e($u,ebo),e(I,obo),e(I,Iu),e(Iu,Kee),e(Kee,rbo),e(Iu,tbo),e(Iu,HP),e(HP,abo),e(Iu,nbo),e(I,sbo),e(I,Du),e(Du,Zee),e(Zee,lbo),e(Du,ibo),e(Du,UP),e(UP,dbo),e(Du,cbo),e(I,fbo),e(I,ju),e(ju,eoe),e(eoe,mbo),e(ju,gbo),e(ju,JP),e(JP,hbo),e(ju,pbo),e(I,_bo),e(I,Nu),e(Nu,ooe),e(ooe,ubo),e(Nu,bbo),e(Nu,YP),e(YP,vbo),e(Nu,Tbo),e(I,Fbo),e(I,qu),e(qu,roe),e(roe,Cbo),e(qu,Mbo),e(qu,KP),e(KP,Ebo),e(qu,ybo),e(I,wbo),e(I,Gu),e(Gu,toe),e(toe,Abo),e(Gu,Lbo),e(Gu,ZP),e(ZP,Bbo),e(Gu,xbo),e(I,kbo),e(I,Ou),e(Ou,aoe),e(aoe,Rbo),e(Ou,Sbo),e(Ou,e$),e(e$,Pbo),e(Ou,$bo),e(I,Ibo),e(I,Xu),e(Xu,noe),e(noe,Dbo),e(Xu,jbo),e(Xu,o$),e(o$,Nbo),e(Xu,qbo),e(I,Gbo),e(I,Vu),e(Vu,soe),e(soe,Obo),e(Vu,Xbo),e(Vu,r$),e(r$,Vbo),e(Vu,zbo),e(I,Wbo),e(I,zu),e(zu,loe),e(loe,Qbo),e(zu,Hbo),e(zu,t$),e(t$,Ubo),e(zu,Jbo),e(I,Ybo),e(I,Wu),e(Wu,ioe),e(ioe,Kbo),e(Wu,Zbo),e(Wu,a$),e(a$,e3o),e(Wu,o3o),e(I,r3o),e(I,Qu),e(Qu,doe),e(doe,t3o),e(Qu,a3o),e(Qu,n$),e(n$,n3o),e(Qu,s3o),e(I,l3o),e(I,Hu),e(Hu,coe),e(coe,i3o),e(Hu,d3o),e(Hu,s$),e(s$,c3o),e(Hu,f3o),e(I,m3o),e(I,Uu),e(Uu,foe),e(foe,g3o),e(Uu,h3o),e(Uu,l$),e(l$,p3o),e(Uu,_3o),e(I,u3o),e(I,Ju),e(Ju,moe),e(moe,b3o),e(Ju,v3o),e(Ju,i$),e(i$,T3o),e(Ju,F3o),e(I,C3o),e(I,Yu),e(Yu,goe),e(goe,M3o),e(Yu,E3o),e(Yu,d$),e(d$,y3o),e(Yu,w3o),e(I,A3o),e(I,Ku),e(Ku,hoe),e(hoe,L3o),e(Ku,B3o),e(Ku,c$),e(c$,x3o),e(Ku,k3o),e(I,R3o),e(I,Zu),e(Zu,poe),e(poe,S3o),e(Zu,P3o),e(Zu,f$),e(f$,$3o),e(Zu,I3o),e(I,D3o),e(I,e1),e(e1,_oe),e(_oe,j3o),e(e1,N3o),e(e1,m$),e(m$,q3o),e(e1,G3o),e(I,O3o),e(I,o1),e(o1,uoe),e(uoe,X3o),e(o1,V3o),e(o1,g$),e(g$,z3o),e(o1,W3o),e(I,Q3o),e(I,r1),e(r1,boe),e(boe,H3o),e(r1,U3o),e(r1,h$),e(h$,J3o),e(r1,Y3o),e(I,K3o),e(I,t1),e(t1,voe),e(voe,Z3o),e(t1,e5o),e(t1,p$),e(p$,o5o),e(t1,r5o),e(I,t5o),e(I,a1),e(a1,Toe),e(Toe,a5o),e(a1,n5o),e(a1,_$),e(_$,s5o),e(a1,l5o),e(I,i5o),e(I,n1),e(n1,Foe),e(Foe,d5o),e(n1,c5o),e(n1,u$),e(u$,f5o),e(n1,m5o),e(I,g5o),e(I,s1),e(s1,Coe),e(Coe,h5o),e(s1,p5o),e(s1,Moe),e(Moe,_5o),e(s1,u5o),e(I,b5o),e(I,l1),e(l1,Eoe),e(Eoe,v5o),e(l1,T5o),e(l1,b$),e(b$,F5o),e(l1,C5o),e(I,M5o),e(I,i1),e(i1,yoe),e(yoe,E5o),e(i1,y5o),e(i1,v$),e(v$,w5o),e(i1,A5o),e(I,L5o),e(I,d1),e(d1,woe),e(woe,B5o),e(d1,x5o),e(d1,T$),e(T$,k5o),e(d1,R5o),e(I,S5o),e(I,c1),e(c1,Aoe),e(Aoe,P5o),e(c1,$5o),e(c1,F$),e(F$,I5o),e(c1,D5o),e($e,j5o),e($e,f1),e(f1,N5o),e(f1,Loe),e(Loe,q5o),e(f1,G5o),e(f1,Boe),e(Boe,O5o),e($e,X5o),e($e,xoe),e(xoe,V5o),e($e,z5o),g(xE,$e,null),b(c,Y7e,u),b(c,od,u),e(od,m1),e(m1,koe),g(kE,koe,null),e(od,W5o),e(od,Roe),e(Roe,Q5o),b(c,K7e,u),b(c,Yo,u),g(RE,Yo,null),e(Yo,H5o),e(Yo,rd),e(rd,U5o),e(rd,Soe),e(Soe,J5o),e(rd,Y5o),e(rd,Poe),e(Poe,K5o),e(rd,Z5o),e(Yo,e2o),e(Yo,SE),e(SE,o2o),e(SE,$oe),e($oe,r2o),e(SE,t2o),e(Yo,a2o),e(Yo,Vr),g(PE,Vr,null),e(Vr,n2o),e(Vr,Ioe),e(Ioe,s2o),e(Vr,l2o),e(Vr,td),e(td,i2o),e(td,Doe),e(Doe,d2o),e(td,c2o),e(td,joe),e(joe,f2o),e(td,m2o),e(Vr,g2o),e(Vr,Noe),e(Noe,h2o),e(Vr,p2o),g($E,Vr,null),e(Yo,_2o),e(Yo,Ie),g(IE,Ie,null),e(Ie,u2o),e(Ie,qoe),e(qoe,b2o),e(Ie,v2o),e(Ie,Xa),e(Xa,T2o),e(Xa,Goe),e(Goe,F2o),e(Xa,C2o),e(Xa,Ooe),e(Ooe,M2o),e(Xa,E2o),e(Xa,Xoe),e(Xoe,y2o),e(Xa,w2o),e(Ie,A2o),e(Ie,ae),e(ae,g1),e(g1,Voe),e(Voe,L2o),e(g1,B2o),e(g1,C$),e(C$,x2o),e(g1,k2o),e(ae,R2o),e(ae,h1),e(h1,zoe),e(zoe,S2o),e(h1,P2o),e(h1,M$),e(M$,$2o),e(h1,I2o),e(ae,D2o),e(ae,p1),e(p1,Woe),e(Woe,j2o),e(p1,N2o),e(p1,E$),e(E$,q2o),e(p1,G2o),e(ae,O2o),e(ae,_1),e(_1,Qoe),e(Qoe,X2o),e(_1,V2o),e(_1,y$),e(y$,z2o),e(_1,W2o),e(ae,Q2o),e(ae,u1),e(u1,Hoe),e(Hoe,H2o),e(u1,U2o),e(u1,w$),e(w$,J2o),e(u1,Y2o),e(ae,K2o),e(ae,b1),e(b1,Uoe),e(Uoe,Z2o),e(b1,evo),e(b1,A$),e(A$,ovo),e(b1,rvo),e(ae,tvo),e(ae,v1),e(v1,Joe),e(Joe,avo),e(v1,nvo),e(v1,L$),e(L$,svo),e(v1,lvo),e(ae,ivo),e(ae,T1),e(T1,Yoe),e(Yoe,dvo),e(T1,cvo),e(T1,B$),e(B$,fvo),e(T1,mvo),e(ae,gvo),e(ae,F1),e(F1,Koe),e(Koe,hvo),e(F1,pvo),e(F1,x$),e(x$,_vo),e(F1,uvo),e(ae,bvo),e(ae,C1),e(C1,Zoe),e(Zoe,vvo),e(C1,Tvo),e(C1,k$),e(k$,Fvo),e(C1,Cvo),e(ae,Mvo),e(ae,M1),e(M1,ere),e(ere,Evo),e(M1,yvo),e(M1,R$),e(R$,wvo),e(M1,Avo),e(ae,Lvo),e(ae,E1),e(E1,ore),e(ore,Bvo),e(E1,xvo),e(E1,S$),e(S$,kvo),e(E1,Rvo),e(ae,Svo),e(ae,y1),e(y1,rre),e(rre,Pvo),e(y1,$vo),e(y1,P$),e(P$,Ivo),e(y1,Dvo),e(ae,jvo),e(ae,w1),e(w1,tre),e(tre,Nvo),e(w1,qvo),e(w1,$$),e($$,Gvo),e(w1,Ovo),e(ae,Xvo),e(ae,A1),e(A1,are),e(are,Vvo),e(A1,zvo),e(A1,I$),e(I$,Wvo),e(A1,Qvo),e(ae,Hvo),e(ae,L1),e(L1,nre),e(nre,Uvo),e(L1,Jvo),e(L1,D$),e(D$,Yvo),e(L1,Kvo),e(Ie,Zvo),e(Ie,B1),e(B1,eTo),e(B1,sre),e(sre,oTo),e(B1,rTo),e(B1,lre),e(lre,tTo),e(Ie,aTo),e(Ie,ire),e(ire,nTo),e(Ie,sTo),g(DE,Ie,null),b(c,Z7e,u),b(c,ad,u),e(ad,x1),e(x1,dre),g(jE,dre,null),e(ad,lTo),e(ad,cre),e(cre,iTo),b(c,eBe,u),b(c,Ko,u),g(NE,Ko,null),e(Ko,dTo),e(Ko,nd),e(nd,cTo),e(nd,fre),e(fre,fTo),e(nd,mTo),e(nd,mre),e(mre,gTo),e(nd,hTo),e(Ko,pTo),e(Ko,qE),e(qE,_To),e(qE,gre),e(gre,uTo),e(qE,bTo),e(Ko,vTo),e(Ko,zr),g(GE,zr,null),e(zr,TTo),e(zr,hre),e(hre,FTo),e(zr,CTo),e(zr,sd),e(sd,MTo),e(sd,pre),e(pre,ETo),e(sd,yTo),e(sd,_re),e(_re,wTo),e(sd,ATo),e(zr,LTo),e(zr,ure),e(ure,BTo),e(zr,xTo),g(OE,zr,null),e(Ko,kTo),e(Ko,De),g(XE,De,null),e(De,RTo),e(De,bre),e(bre,STo),e(De,PTo),e(De,Va),e(Va,$To),e(Va,vre),e(vre,ITo),e(Va,DTo),e(Va,Tre),e(Tre,jTo),e(Va,NTo),e(Va,Fre),e(Fre,qTo),e(Va,GTo),e(De,OTo),e(De,A),e(A,k1),e(k1,Cre),e(Cre,XTo),e(k1,VTo),e(k1,j$),e(j$,zTo),e(k1,WTo),e(A,QTo),e(A,R1),e(R1,Mre),e(Mre,HTo),e(R1,UTo),e(R1,N$),e(N$,JTo),e(R1,YTo),e(A,KTo),e(A,S1),e(S1,Ere),e(Ere,ZTo),e(S1,eFo),e(S1,q$),e(q$,oFo),e(S1,rFo),e(A,tFo),e(A,P1),e(P1,yre),e(yre,aFo),e(P1,nFo),e(P1,G$),e(G$,sFo),e(P1,lFo),e(A,iFo),e(A,$1),e($1,wre),e(wre,dFo),e($1,cFo),e($1,O$),e(O$,fFo),e($1,mFo),e(A,gFo),e(A,I1),e(I1,Are),e(Are,hFo),e(I1,pFo),e(I1,X$),e(X$,_Fo),e(I1,uFo),e(A,bFo),e(A,D1),e(D1,Lre),e(Lre,vFo),e(D1,TFo),e(D1,V$),e(V$,FFo),e(D1,CFo),e(A,MFo),e(A,j1),e(j1,Bre),e(Bre,EFo),e(j1,yFo),e(j1,z$),e(z$,wFo),e(j1,AFo),e(A,LFo),e(A,N1),e(N1,xre),e(xre,BFo),e(N1,xFo),e(N1,W$),e(W$,kFo),e(N1,RFo),e(A,SFo),e(A,q1),e(q1,kre),e(kre,PFo),e(q1,$Fo),e(q1,Q$),e(Q$,IFo),e(q1,DFo),e(A,jFo),e(A,G1),e(G1,Rre),e(Rre,NFo),e(G1,qFo),e(G1,H$),e(H$,GFo),e(G1,OFo),e(A,XFo),e(A,O1),e(O1,Sre),e(Sre,VFo),e(O1,zFo),e(O1,U$),e(U$,WFo),e(O1,QFo),e(A,HFo),e(A,X1),e(X1,Pre),e(Pre,UFo),e(X1,JFo),e(X1,J$),e(J$,YFo),e(X1,KFo),e(A,ZFo),e(A,V1),e(V1,$re),e($re,e9o),e(V1,o9o),e(V1,Y$),e(Y$,r9o),e(V1,t9o),e(A,a9o),e(A,z1),e(z1,Ire),e(Ire,n9o),e(z1,s9o),e(z1,K$),e(K$,l9o),e(z1,i9o),e(A,d9o),e(A,W1),e(W1,Dre),e(Dre,c9o),e(W1,f9o),e(W1,Z$),e(Z$,m9o),e(W1,g9o),e(A,h9o),e(A,Q1),e(Q1,jre),e(jre,p9o),e(Q1,_9o),e(Q1,eI),e(eI,u9o),e(Q1,b9o),e(A,v9o),e(A,H1),e(H1,Nre),e(Nre,T9o),e(H1,F9o),e(H1,oI),e(oI,C9o),e(H1,M9o),e(A,E9o),e(A,U1),e(U1,qre),e(qre,y9o),e(U1,w9o),e(U1,rI),e(rI,A9o),e(U1,L9o),e(A,B9o),e(A,J1),e(J1,Gre),e(Gre,x9o),e(J1,k9o),e(J1,tI),e(tI,R9o),e(J1,S9o),e(A,P9o),e(A,Y1),e(Y1,Ore),e(Ore,$9o),e(Y1,I9o),e(Y1,aI),e(aI,D9o),e(Y1,j9o),e(A,N9o),e(A,K1),e(K1,Xre),e(Xre,q9o),e(K1,G9o),e(K1,nI),e(nI,O9o),e(K1,X9o),e(A,V9o),e(A,Z1),e(Z1,Vre),e(Vre,z9o),e(Z1,W9o),e(Z1,sI),e(sI,Q9o),e(Z1,H9o),e(A,U9o),e(A,eb),e(eb,zre),e(zre,J9o),e(eb,Y9o),e(eb,lI),e(lI,K9o),e(eb,Z9o),e(A,eCo),e(A,ob),e(ob,Wre),e(Wre,oCo),e(ob,rCo),e(ob,iI),e(iI,tCo),e(ob,aCo),e(A,nCo),e(A,rb),e(rb,Qre),e(Qre,sCo),e(rb,lCo),e(rb,dI),e(dI,iCo),e(rb,dCo),e(A,cCo),e(A,tb),e(tb,Hre),e(Hre,fCo),e(tb,mCo),e(tb,cI),e(cI,gCo),e(tb,hCo),e(A,pCo),e(A,ab),e(ab,Ure),e(Ure,_Co),e(ab,uCo),e(ab,fI),e(fI,bCo),e(ab,vCo),e(A,TCo),e(A,nb),e(nb,Jre),e(Jre,FCo),e(nb,CCo),e(nb,mI),e(mI,MCo),e(nb,ECo),e(A,yCo),e(A,sb),e(sb,Yre),e(Yre,wCo),e(sb,ACo),e(sb,gI),e(gI,LCo),e(sb,BCo),e(A,xCo),e(A,lb),e(lb,Kre),e(Kre,kCo),e(lb,RCo),e(lb,hI),e(hI,SCo),e(lb,PCo),e(A,$Co),e(A,ib),e(ib,Zre),e(Zre,ICo),e(ib,DCo),e(ib,pI),e(pI,jCo),e(ib,NCo),e(A,qCo),e(A,db),e(db,ete),e(ete,GCo),e(db,OCo),e(db,_I),e(_I,XCo),e(db,VCo),e(A,zCo),e(A,cb),e(cb,ote),e(ote,WCo),e(cb,QCo),e(cb,uI),e(uI,HCo),e(cb,UCo),e(A,JCo),e(A,fb),e(fb,rte),e(rte,YCo),e(fb,KCo),e(fb,bI),e(bI,ZCo),e(fb,e4o),e(A,o4o),e(A,mb),e(mb,tte),e(tte,r4o),e(mb,t4o),e(mb,vI),e(vI,a4o),e(mb,n4o),e(A,s4o),e(A,gb),e(gb,ate),e(ate,l4o),e(gb,i4o),e(gb,TI),e(TI,d4o),e(gb,c4o),e(A,f4o),e(A,hb),e(hb,nte),e(nte,m4o),e(hb,g4o),e(hb,FI),e(FI,h4o),e(hb,p4o),e(A,_4o),e(A,pb),e(pb,ste),e(ste,u4o),e(pb,b4o),e(pb,CI),e(CI,v4o),e(pb,T4o),e(A,F4o),e(A,_b),e(_b,lte),e(lte,C4o),e(_b,M4o),e(_b,MI),e(MI,E4o),e(_b,y4o),e(A,w4o),e(A,ub),e(ub,ite),e(ite,A4o),e(ub,L4o),e(ub,EI),e(EI,B4o),e(ub,x4o),e(A,k4o),e(A,bb),e(bb,dte),e(dte,R4o),e(bb,S4o),e(bb,yI),e(yI,P4o),e(bb,$4o),e(A,I4o),e(A,vb),e(vb,cte),e(cte,D4o),e(vb,j4o),e(vb,wI),e(wI,N4o),e(vb,q4o),e(A,G4o),e(A,Tb),e(Tb,fte),e(fte,O4o),e(Tb,X4o),e(Tb,AI),e(AI,V4o),e(Tb,z4o),e(A,W4o),e(A,Fb),e(Fb,mte),e(mte,Q4o),e(Fb,H4o),e(Fb,LI),e(LI,U4o),e(Fb,J4o),e(A,Y4o),e(A,Cb),e(Cb,gte),e(gte,K4o),e(Cb,Z4o),e(Cb,BI),e(BI,eMo),e(Cb,oMo),e(De,rMo),e(De,Mb),e(Mb,tMo),e(Mb,hte),e(hte,aMo),e(Mb,nMo),e(Mb,pte),e(pte,sMo),e(De,lMo),e(De,_te),e(_te,iMo),e(De,dMo),g(VE,De,null),b(c,oBe,u),b(c,ld,u),e(ld,Eb),e(Eb,ute),g(zE,ute,null),e(ld,cMo),e(ld,bte),e(bte,fMo),b(c,rBe,u),b(c,Zo,u),g(WE,Zo,null),e(Zo,mMo),e(Zo,id),e(id,gMo),e(id,vte),e(vte,hMo),e(id,pMo),e(id,Tte),e(Tte,_Mo),e(id,uMo),e(Zo,bMo),e(Zo,QE),e(QE,vMo),e(QE,Fte),e(Fte,TMo),e(QE,FMo),e(Zo,CMo),e(Zo,Wr),g(HE,Wr,null),e(Wr,MMo),e(Wr,Cte),e(Cte,EMo),e(Wr,yMo),e(Wr,dd),e(dd,wMo),e(dd,Mte),e(Mte,AMo),e(dd,LMo),e(dd,Ete),e(Ete,BMo),e(dd,xMo),e(Wr,kMo),e(Wr,yte),e(yte,RMo),e(Wr,SMo),g(UE,Wr,null),e(Zo,PMo),e(Zo,je),g(JE,je,null),e(je,$Mo),e(je,wte),e(wte,IMo),e(je,DMo),e(je,za),e(za,jMo),e(za,Ate),e(Ate,NMo),e(za,qMo),e(za,Lte),e(Lte,GMo),e(za,OMo),e(za,Bte),e(Bte,XMo),e(za,VMo),e(je,zMo),e(je,G),e(G,yb),e(yb,xte),e(xte,WMo),e(yb,QMo),e(yb,xI),e(xI,HMo),e(yb,UMo),e(G,JMo),e(G,wb),e(wb,kte),e(kte,YMo),e(wb,KMo),e(wb,kI),e(kI,ZMo),e(wb,eEo),e(G,oEo),e(G,Ab),e(Ab,Rte),e(Rte,rEo),e(Ab,tEo),e(Ab,RI),e(RI,aEo),e(Ab,nEo),e(G,sEo),e(G,Lb),e(Lb,Ste),e(Ste,lEo),e(Lb,iEo),e(Lb,SI),e(SI,dEo),e(Lb,cEo),e(G,fEo),e(G,Bb),e(Bb,Pte),e(Pte,mEo),e(Bb,gEo),e(Bb,PI),e(PI,hEo),e(Bb,pEo),e(G,_Eo),e(G,xb),e(xb,$te),e($te,uEo),e(xb,bEo),e(xb,$I),e($I,vEo),e(xb,TEo),e(G,FEo),e(G,kb),e(kb,Ite),e(Ite,CEo),e(kb,MEo),e(kb,II),e(II,EEo),e(kb,yEo),e(G,wEo),e(G,Rb),e(Rb,Dte),e(Dte,AEo),e(Rb,LEo),e(Rb,DI),e(DI,BEo),e(Rb,xEo),e(G,kEo),e(G,Sb),e(Sb,jte),e(jte,REo),e(Sb,SEo),e(Sb,jI),e(jI,PEo),e(Sb,$Eo),e(G,IEo),e(G,Pb),e(Pb,Nte),e(Nte,DEo),e(Pb,jEo),e(Pb,NI),e(NI,NEo),e(Pb,qEo),e(G,GEo),e(G,$b),e($b,qte),e(qte,OEo),e($b,XEo),e($b,qI),e(qI,VEo),e($b,zEo),e(G,WEo),e(G,Ib),e(Ib,Gte),e(Gte,QEo),e(Ib,HEo),e(Ib,GI),e(GI,UEo),e(Ib,JEo),e(G,YEo),e(G,Db),e(Db,Ote),e(Ote,KEo),e(Db,ZEo),e(Db,OI),e(OI,eyo),e(Db,oyo),e(G,ryo),e(G,jb),e(jb,Xte),e(Xte,tyo),e(jb,ayo),e(jb,XI),e(XI,nyo),e(jb,syo),e(G,lyo),e(G,Nb),e(Nb,Vte),e(Vte,iyo),e(Nb,dyo),e(Nb,VI),e(VI,cyo),e(Nb,fyo),e(G,myo),e(G,qb),e(qb,zte),e(zte,gyo),e(qb,hyo),e(qb,zI),e(zI,pyo),e(qb,_yo),e(G,uyo),e(G,Gb),e(Gb,Wte),e(Wte,byo),e(Gb,vyo),e(Gb,WI),e(WI,Tyo),e(Gb,Fyo),e(G,Cyo),e(G,Ob),e(Ob,Qte),e(Qte,Myo),e(Ob,Eyo),e(Ob,QI),e(QI,yyo),e(Ob,wyo),e(G,Ayo),e(G,Xb),e(Xb,Hte),e(Hte,Lyo),e(Xb,Byo),e(Xb,HI),e(HI,xyo),e(Xb,kyo),e(G,Ryo),e(G,Vb),e(Vb,Ute),e(Ute,Syo),e(Vb,Pyo),e(Vb,UI),e(UI,$yo),e(Vb,Iyo),e(G,Dyo),e(G,zb),e(zb,Jte),e(Jte,jyo),e(zb,Nyo),e(zb,JI),e(JI,qyo),e(zb,Gyo),e(G,Oyo),e(G,Wb),e(Wb,Yte),e(Yte,Xyo),e(Wb,Vyo),e(Wb,YI),e(YI,zyo),e(Wb,Wyo),e(G,Qyo),e(G,Qb),e(Qb,Kte),e(Kte,Hyo),e(Qb,Uyo),e(Qb,KI),e(KI,Jyo),e(Qb,Yyo),e(G,Kyo),e(G,Hb),e(Hb,Zte),e(Zte,Zyo),e(Hb,ewo),e(Hb,ZI),e(ZI,owo),e(Hb,rwo),e(G,two),e(G,Ub),e(Ub,eae),e(eae,awo),e(Ub,nwo),e(Ub,eD),e(eD,swo),e(Ub,lwo),e(G,iwo),e(G,Jb),e(Jb,oae),e(oae,dwo),e(Jb,cwo),e(Jb,oD),e(oD,fwo),e(Jb,mwo),e(G,gwo),e(G,Yb),e(Yb,rae),e(rae,hwo),e(Yb,pwo),e(Yb,rD),e(rD,_wo),e(Yb,uwo),e(G,bwo),e(G,Kb),e(Kb,tae),e(tae,vwo),e(Kb,Two),e(Kb,tD),e(tD,Fwo),e(Kb,Cwo),e(je,Mwo),e(je,Zb),e(Zb,Ewo),e(Zb,aae),e(aae,ywo),e(Zb,wwo),e(Zb,nae),e(nae,Awo),e(je,Lwo),e(je,sae),e(sae,Bwo),e(je,xwo),g(YE,je,null),b(c,tBe,u),b(c,cd,u),e(cd,e3),e(e3,lae),g(KE,lae,null),e(cd,kwo),e(cd,iae),e(iae,Rwo),b(c,aBe,u),b(c,er,u),g(ZE,er,null),e(er,Swo),e(er,fd),e(fd,Pwo),e(fd,dae),e(dae,$wo),e(fd,Iwo),e(fd,cae),e(cae,Dwo),e(fd,jwo),e(er,Nwo),e(er,ey),e(ey,qwo),e(ey,fae),e(fae,Gwo),e(ey,Owo),e(er,Xwo),e(er,Qr),g(oy,Qr,null),e(Qr,Vwo),e(Qr,mae),e(mae,zwo),e(Qr,Wwo),e(Qr,md),e(md,Qwo),e(md,gae),e(gae,Hwo),e(md,Uwo),e(md,hae),e(hae,Jwo),e(md,Ywo),e(Qr,Kwo),e(Qr,pae),e(pae,Zwo),e(Qr,e6o),g(ry,Qr,null),e(er,o6o),e(er,Ne),g(ty,Ne,null),e(Ne,r6o),e(Ne,_ae),e(_ae,t6o),e(Ne,a6o),e(Ne,Wa),e(Wa,n6o),e(Wa,uae),e(uae,s6o),e(Wa,l6o),e(Wa,bae),e(bae,i6o),e(Wa,d6o),e(Wa,vae),e(vae,c6o),e(Wa,f6o),e(Ne,m6o),e(Ne,na),e(na,o3),e(o3,Tae),e(Tae,g6o),e(o3,h6o),e(o3,aD),e(aD,p6o),e(o3,_6o),e(na,u6o),e(na,r3),e(r3,Fae),e(Fae,b6o),e(r3,v6o),e(r3,nD),e(nD,T6o),e(r3,F6o),e(na,C6o),e(na,t3),e(t3,Cae),e(Cae,M6o),e(t3,E6o),e(t3,sD),e(sD,y6o),e(t3,w6o),e(na,A6o),e(na,a3),e(a3,Mae),e(Mae,L6o),e(a3,B6o),e(a3,lD),e(lD,x6o),e(a3,k6o),e(na,R6o),e(na,n3),e(n3,Eae),e(Eae,S6o),e(n3,P6o),e(n3,iD),e(iD,$6o),e(n3,I6o),e(Ne,D6o),e(Ne,s3),e(s3,j6o),e(s3,yae),e(yae,N6o),e(s3,q6o),e(s3,wae),e(wae,G6o),e(Ne,O6o),e(Ne,Aae),e(Aae,X6o),e(Ne,V6o),g(ay,Ne,null),b(c,nBe,u),b(c,gd,u),e(gd,l3),e(l3,Lae),g(ny,Lae,null),e(gd,z6o),e(gd,Bae),e(Bae,W6o),b(c,sBe,u),b(c,or,u),g(sy,or,null),e(or,Q6o),e(or,hd),e(hd,H6o),e(hd,xae),e(xae,U6o),e(hd,J6o),e(hd,kae),e(kae,Y6o),e(hd,K6o),e(or,Z6o),e(or,ly),e(ly,eAo),e(ly,Rae),e(Rae,oAo),e(ly,rAo),e(or,tAo),e(or,Hr),g(iy,Hr,null),e(Hr,aAo),e(Hr,Sae),e(Sae,nAo),e(Hr,sAo),e(Hr,pd),e(pd,lAo),e(pd,Pae),e(Pae,iAo),e(pd,dAo),e(pd,$ae),e($ae,cAo),e(pd,fAo),e(Hr,mAo),e(Hr,Iae),e(Iae,gAo),e(Hr,hAo),g(dy,Hr,null),e(or,pAo),e(or,qe),g(cy,qe,null),e(qe,_Ao),e(qe,Dae),e(Dae,uAo),e(qe,bAo),e(qe,Qa),e(Qa,vAo),e(Qa,jae),e(jae,TAo),e(Qa,FAo),e(Qa,Nae),e(Nae,CAo),e(Qa,MAo),e(Qa,qae),e(qae,EAo),e(Qa,yAo),e(qe,wAo),e(qe,N),e(N,i3),e(i3,Gae),e(Gae,AAo),e(i3,LAo),e(i3,dD),e(dD,BAo),e(i3,xAo),e(N,kAo),e(N,d3),e(d3,Oae),e(Oae,RAo),e(d3,SAo),e(d3,cD),e(cD,PAo),e(d3,$Ao),e(N,IAo),e(N,c3),e(c3,Xae),e(Xae,DAo),e(c3,jAo),e(c3,fD),e(fD,NAo),e(c3,qAo),e(N,GAo),e(N,f3),e(f3,Vae),e(Vae,OAo),e(f3,XAo),e(f3,mD),e(mD,VAo),e(f3,zAo),e(N,WAo),e(N,m3),e(m3,zae),e(zae,QAo),e(m3,HAo),e(m3,gD),e(gD,UAo),e(m3,JAo),e(N,YAo),e(N,g3),e(g3,Wae),e(Wae,KAo),e(g3,ZAo),e(g3,hD),e(hD,e0o),e(g3,o0o),e(N,r0o),e(N,h3),e(h3,Qae),e(Qae,t0o),e(h3,a0o),e(h3,pD),e(pD,n0o),e(h3,s0o),e(N,l0o),e(N,p3),e(p3,Hae),e(Hae,i0o),e(p3,d0o),e(p3,_D),e(_D,c0o),e(p3,f0o),e(N,m0o),e(N,_3),e(_3,Uae),e(Uae,g0o),e(_3,h0o),e(_3,uD),e(uD,p0o),e(_3,_0o),e(N,u0o),e(N,u3),e(u3,Jae),e(Jae,b0o),e(u3,v0o),e(u3,bD),e(bD,T0o),e(u3,F0o),e(N,C0o),e(N,b3),e(b3,Yae),e(Yae,M0o),e(b3,E0o),e(b3,vD),e(vD,y0o),e(b3,w0o),e(N,A0o),e(N,v3),e(v3,Kae),e(Kae,L0o),e(v3,B0o),e(v3,TD),e(TD,x0o),e(v3,k0o),e(N,R0o),e(N,T3),e(T3,Zae),e(Zae,S0o),e(T3,P0o),e(T3,FD),e(FD,$0o),e(T3,I0o),e(N,D0o),e(N,F3),e(F3,ene),e(ene,j0o),e(F3,N0o),e(F3,CD),e(CD,q0o),e(F3,G0o),e(N,O0o),e(N,C3),e(C3,one),e(one,X0o),e(C3,V0o),e(C3,MD),e(MD,z0o),e(C3,W0o),e(N,Q0o),e(N,M3),e(M3,rne),e(rne,H0o),e(M3,U0o),e(M3,ED),e(ED,J0o),e(M3,Y0o),e(N,K0o),e(N,E3),e(E3,tne),e(tne,Z0o),e(E3,eLo),e(E3,yD),e(yD,oLo),e(E3,rLo),e(N,tLo),e(N,y3),e(y3,ane),e(ane,aLo),e(y3,nLo),e(y3,wD),e(wD,sLo),e(y3,lLo),e(N,iLo),e(N,w3),e(w3,nne),e(nne,dLo),e(w3,cLo),e(w3,AD),e(AD,fLo),e(w3,mLo),e(N,gLo),e(N,A3),e(A3,sne),e(sne,hLo),e(A3,pLo),e(A3,LD),e(LD,_Lo),e(A3,uLo),e(N,bLo),e(N,L3),e(L3,lne),e(lne,vLo),e(L3,TLo),e(L3,BD),e(BD,FLo),e(L3,CLo),e(N,MLo),e(N,B3),e(B3,ine),e(ine,ELo),e(B3,yLo),e(B3,xD),e(xD,wLo),e(B3,ALo),e(N,LLo),e(N,x3),e(x3,dne),e(dne,BLo),e(x3,xLo),e(x3,kD),e(kD,kLo),e(x3,RLo),e(N,SLo),e(N,k3),e(k3,cne),e(cne,PLo),e(k3,$Lo),e(k3,RD),e(RD,ILo),e(k3,DLo),e(N,jLo),e(N,R3),e(R3,fne),e(fne,NLo),e(R3,qLo),e(R3,SD),e(SD,GLo),e(R3,OLo),e(N,XLo),e(N,S3),e(S3,mne),e(mne,VLo),e(S3,zLo),e(S3,PD),e(PD,WLo),e(S3,QLo),e(N,HLo),e(N,P3),e(P3,gne),e(gne,ULo),e(P3,JLo),e(P3,$D),e($D,YLo),e(P3,KLo),e(N,ZLo),e(N,$3),e($3,hne),e(hne,e8o),e($3,o8o),e($3,ID),e(ID,r8o),e($3,t8o),e(N,a8o),e(N,I3),e(I3,pne),e(pne,n8o),e(I3,s8o),e(I3,DD),e(DD,l8o),e(I3,i8o),e(N,d8o),e(N,D3),e(D3,_ne),e(_ne,c8o),e(D3,f8o),e(D3,jD),e(jD,m8o),e(D3,g8o),e(N,h8o),e(N,j3),e(j3,une),e(une,p8o),e(j3,_8o),e(j3,ND),e(ND,u8o),e(j3,b8o),e(N,v8o),e(N,N3),e(N3,bne),e(bne,T8o),e(N3,F8o),e(N3,qD),e(qD,C8o),e(N3,M8o),e(N,E8o),e(N,q3),e(q3,vne),e(vne,y8o),e(q3,w8o),e(q3,GD),e(GD,A8o),e(q3,L8o),e(qe,B8o),e(qe,G3),e(G3,x8o),e(G3,Tne),e(Tne,k8o),e(G3,R8o),e(G3,Fne),e(Fne,S8o),e(qe,P8o),e(qe,Cne),e(Cne,$8o),e(qe,I8o),g(fy,qe,null),b(c,lBe,u),b(c,_d,u),e(_d,O3),e(O3,Mne),g(my,Mne,null),e(_d,D8o),e(_d,Ene),e(Ene,j8o),b(c,iBe,u),b(c,rr,u),g(gy,rr,null),e(rr,N8o),e(rr,ud),e(ud,q8o),e(ud,yne),e(yne,G8o),e(ud,O8o),e(ud,wne),e(wne,X8o),e(ud,V8o),e(rr,z8o),e(rr,hy),e(hy,W8o),e(hy,Ane),e(Ane,Q8o),e(hy,H8o),e(rr,U8o),e(rr,Ur),g(py,Ur,null),e(Ur,J8o),e(Ur,Lne),e(Lne,Y8o),e(Ur,K8o),e(Ur,bd),e(bd,Z8o),e(bd,Bne),e(Bne,e7o),e(bd,o7o),e(bd,xne),e(xne,r7o),e(bd,t7o),e(Ur,a7o),e(Ur,kne),e(kne,n7o),e(Ur,s7o),g(_y,Ur,null),e(rr,l7o),e(rr,Ge),g(uy,Ge,null),e(Ge,i7o),e(Ge,Rne),e(Rne,d7o),e(Ge,c7o),e(Ge,Ha),e(Ha,f7o),e(Ha,Sne),e(Sne,m7o),e(Ha,g7o),e(Ha,Pne),e(Pne,h7o),e(Ha,p7o),e(Ha,$ne),e($ne,_7o),e(Ha,u7o),e(Ge,b7o),e(Ge,R),e(R,X3),e(X3,Ine),e(Ine,v7o),e(X3,T7o),e(X3,OD),e(OD,F7o),e(X3,C7o),e(R,M7o),e(R,V3),e(V3,Dne),e(Dne,E7o),e(V3,y7o),e(V3,XD),e(XD,w7o),e(V3,A7o),e(R,L7o),e(R,z3),e(z3,jne),e(jne,B7o),e(z3,x7o),e(z3,VD),e(VD,k7o),e(z3,R7o),e(R,S7o),e(R,W3),e(W3,Nne),e(Nne,P7o),e(W3,$7o),e(W3,zD),e(zD,I7o),e(W3,D7o),e(R,j7o),e(R,Q3),e(Q3,qne),e(qne,N7o),e(Q3,q7o),e(Q3,WD),e(WD,G7o),e(Q3,O7o),e(R,X7o),e(R,H3),e(H3,Gne),e(Gne,V7o),e(H3,z7o),e(H3,QD),e(QD,W7o),e(H3,Q7o),e(R,H7o),e(R,U3),e(U3,One),e(One,U7o),e(U3,J7o),e(U3,HD),e(HD,Y7o),e(U3,K7o),e(R,Z7o),e(R,J3),e(J3,Xne),e(Xne,eBo),e(J3,oBo),e(J3,UD),e(UD,rBo),e(J3,tBo),e(R,aBo),e(R,Y3),e(Y3,Vne),e(Vne,nBo),e(Y3,sBo),e(Y3,JD),e(JD,lBo),e(Y3,iBo),e(R,dBo),e(R,K3),e(K3,zne),e(zne,cBo),e(K3,fBo),e(K3,YD),e(YD,mBo),e(K3,gBo),e(R,hBo),e(R,Z3),e(Z3,Wne),e(Wne,pBo),e(Z3,_Bo),e(Z3,KD),e(KD,uBo),e(Z3,bBo),e(R,vBo),e(R,e5),e(e5,Qne),e(Qne,TBo),e(e5,FBo),e(e5,ZD),e(ZD,CBo),e(e5,MBo),e(R,EBo),e(R,o5),e(o5,Hne),e(Hne,yBo),e(o5,wBo),e(o5,ej),e(ej,ABo),e(o5,LBo),e(R,BBo),e(R,r5),e(r5,Une),e(Une,xBo),e(r5,kBo),e(r5,oj),e(oj,RBo),e(r5,SBo),e(R,PBo),e(R,t5),e(t5,Jne),e(Jne,$Bo),e(t5,IBo),e(t5,rj),e(rj,DBo),e(t5,jBo),e(R,NBo),e(R,a5),e(a5,Yne),e(Yne,qBo),e(a5,GBo),e(a5,tj),e(tj,OBo),e(a5,XBo),e(R,VBo),e(R,n5),e(n5,Kne),e(Kne,zBo),e(n5,WBo),e(n5,aj),e(aj,QBo),e(n5,HBo),e(R,UBo),e(R,s5),e(s5,Zne),e(Zne,JBo),e(s5,YBo),e(s5,nj),e(nj,KBo),e(s5,ZBo),e(R,exo),e(R,l5),e(l5,ese),e(ese,oxo),e(l5,rxo),e(l5,sj),e(sj,txo),e(l5,axo),e(R,nxo),e(R,i5),e(i5,ose),e(ose,sxo),e(i5,lxo),e(i5,lj),e(lj,ixo),e(i5,dxo),e(R,cxo),e(R,d5),e(d5,rse),e(rse,fxo),e(d5,mxo),e(d5,ij),e(ij,gxo),e(d5,hxo),e(R,pxo),e(R,c5),e(c5,tse),e(tse,_xo),e(c5,uxo),e(c5,dj),e(dj,bxo),e(c5,vxo),e(R,Txo),e(R,f5),e(f5,ase),e(ase,Fxo),e(f5,Cxo),e(f5,cj),e(cj,Mxo),e(f5,Exo),e(R,yxo),e(R,m5),e(m5,nse),e(nse,wxo),e(m5,Axo),e(m5,fj),e(fj,Lxo),e(m5,Bxo),e(R,xxo),e(R,g5),e(g5,sse),e(sse,kxo),e(g5,Rxo),e(g5,mj),e(mj,Sxo),e(g5,Pxo),e(R,$xo),e(R,h5),e(h5,lse),e(lse,Ixo),e(h5,Dxo),e(h5,gj),e(gj,jxo),e(h5,Nxo),e(R,qxo),e(R,p5),e(p5,ise),e(ise,Gxo),e(p5,Oxo),e(p5,hj),e(hj,Xxo),e(p5,Vxo),e(R,zxo),e(R,_5),e(_5,dse),e(dse,Wxo),e(_5,Qxo),e(_5,pj),e(pj,Hxo),e(_5,Uxo),e(R,Jxo),e(R,u5),e(u5,cse),e(cse,Yxo),e(u5,Kxo),e(u5,_j),e(_j,Zxo),e(u5,eko),e(R,oko),e(R,b5),e(b5,fse),e(fse,rko),e(b5,tko),e(b5,uj),e(uj,ako),e(b5,nko),e(R,sko),e(R,v5),e(v5,mse),e(mse,lko),e(v5,iko),e(v5,bj),e(bj,dko),e(v5,cko),e(R,fko),e(R,T5),e(T5,gse),e(gse,mko),e(T5,gko),e(T5,vj),e(vj,hko),e(T5,pko),e(R,_ko),e(R,F5),e(F5,hse),e(hse,uko),e(F5,bko),e(F5,Tj),e(Tj,vko),e(F5,Tko),e(R,Fko),e(R,C5),e(C5,pse),e(pse,Cko),e(C5,Mko),e(C5,Fj),e(Fj,Eko),e(C5,yko),e(R,wko),e(R,M5),e(M5,_se),e(_se,Ako),e(M5,Lko),e(M5,Cj),e(Cj,Bko),e(M5,xko),e(R,kko),e(R,E5),e(E5,use),e(use,Rko),e(E5,Sko),e(E5,Mj),e(Mj,Pko),e(E5,$ko),e(R,Iko),e(R,y5),e(y5,bse),e(bse,Dko),e(y5,jko),e(y5,Ej),e(Ej,Nko),e(y5,qko),e(R,Gko),e(R,w5),e(w5,vse),e(vse,Oko),e(w5,Xko),e(w5,yj),e(yj,Vko),e(w5,zko),e(R,Wko),e(R,A5),e(A5,Tse),e(Tse,Qko),e(A5,Hko),e(A5,wj),e(wj,Uko),e(A5,Jko),e(Ge,Yko),e(Ge,L5),e(L5,Kko),e(L5,Fse),e(Fse,Zko),e(L5,eRo),e(L5,Cse),e(Cse,oRo),e(Ge,rRo),e(Ge,Mse),e(Mse,tRo),e(Ge,aRo),g(by,Ge,null),b(c,dBe,u),b(c,vd,u),e(vd,B5),e(B5,Ese),g(vy,Ese,null),e(vd,nRo),e(vd,yse),e(yse,sRo),b(c,cBe,u),b(c,tr,u),g(Ty,tr,null),e(tr,lRo),e(tr,Td),e(Td,iRo),e(Td,wse),e(wse,dRo),e(Td,cRo),e(Td,Ase),e(Ase,fRo),e(Td,mRo),e(tr,gRo),e(tr,Fy),e(Fy,hRo),e(Fy,Lse),e(Lse,pRo),e(Fy,_Ro),e(tr,uRo),e(tr,Jr),g(Cy,Jr,null),e(Jr,bRo),e(Jr,Bse),e(Bse,vRo),e(Jr,TRo),e(Jr,Fd),e(Fd,FRo),e(Fd,xse),e(xse,CRo),e(Fd,MRo),e(Fd,kse),e(kse,ERo),e(Fd,yRo),e(Jr,wRo),e(Jr,Rse),e(Rse,ARo),e(Jr,LRo),g(My,Jr,null),e(tr,BRo),e(tr,Oe),g(Ey,Oe,null),e(Oe,xRo),e(Oe,Sse),e(Sse,kRo),e(Oe,RRo),e(Oe,Ua),e(Ua,SRo),e(Ua,Pse),e(Pse,PRo),e(Ua,$Ro),e(Ua,$se),e($se,IRo),e(Ua,DRo),e(Ua,Ise),e(Ise,jRo),e(Ua,NRo),e(Oe,qRo),e(Oe,Dse),e(Dse,x5),e(x5,jse),e(jse,GRo),e(x5,ORo),e(x5,Aj),e(Aj,XRo),e(x5,VRo),e(Oe,zRo),e(Oe,k5),e(k5,WRo),e(k5,Nse),e(Nse,QRo),e(k5,HRo),e(k5,qse),e(qse,URo),e(Oe,JRo),e(Oe,Gse),e(Gse,YRo),e(Oe,KRo),g(yy,Oe,null),b(c,fBe,u),b(c,Cd,u),e(Cd,R5),e(R5,Ose),g(wy,Ose,null),e(Cd,ZRo),e(Cd,Xse),e(Xse,eSo),b(c,mBe,u),b(c,ar,u),g(Ay,ar,null),e(ar,oSo),e(ar,Md),e(Md,rSo),e(Md,Vse),e(Vse,tSo),e(Md,aSo),e(Md,zse),e(zse,nSo),e(Md,sSo),e(ar,lSo),e(ar,Ly),e(Ly,iSo),e(Ly,Wse),e(Wse,dSo),e(Ly,cSo),e(ar,fSo),e(ar,Yr),g(By,Yr,null),e(Yr,mSo),e(Yr,Qse),e(Qse,gSo),e(Yr,hSo),e(Yr,Ed),e(Ed,pSo),e(Ed,Hse),e(Hse,_So),e(Ed,uSo),e(Ed,Use),e(Use,bSo),e(Ed,vSo),e(Yr,TSo),e(Yr,Jse),e(Jse,FSo),e(Yr,CSo),g(xy,Yr,null),e(ar,MSo),e(ar,Xe),g(ky,Xe,null),e(Xe,ESo),e(Xe,Yse),e(Yse,ySo),e(Xe,wSo),e(Xe,Ja),e(Ja,ASo),e(Ja,Kse),e(Kse,LSo),e(Ja,BSo),e(Ja,Zse),e(Zse,xSo),e(Ja,kSo),e(Ja,ele),e(ele,RSo),e(Ja,SSo),e(Xe,PSo),e(Xe,be),e(be,S5),e(S5,ole),e(ole,$So),e(S5,ISo),e(S5,Lj),e(Lj,DSo),e(S5,jSo),e(be,NSo),e(be,P5),e(P5,rle),e(rle,qSo),e(P5,GSo),e(P5,Bj),e(Bj,OSo),e(P5,XSo),e(be,VSo),e(be,$s),e($s,tle),e(tle,zSo),e($s,WSo),e($s,xj),e(xj,QSo),e($s,HSo),e($s,kj),e(kj,USo),e($s,JSo),e(be,YSo),e(be,$5),e($5,ale),e(ale,KSo),e($5,ZSo),e($5,Rj),e(Rj,ePo),e($5,oPo),e(be,rPo),e(be,la),e(la,nle),e(nle,tPo),e(la,aPo),e(la,Sj),e(Sj,nPo),e(la,sPo),e(la,Pj),e(Pj,lPo),e(la,iPo),e(la,$j),e($j,dPo),e(la,cPo),e(be,fPo),e(be,I5),e(I5,sle),e(sle,mPo),e(I5,gPo),e(I5,Ij),e(Ij,hPo),e(I5,pPo),e(be,_Po),e(be,D5),e(D5,lle),e(lle,uPo),e(D5,bPo),e(D5,Dj),e(Dj,vPo),e(D5,TPo),e(be,FPo),e(be,j5),e(j5,ile),e(ile,CPo),e(j5,MPo),e(j5,jj),e(jj,EPo),e(j5,yPo),e(be,wPo),e(be,N5),e(N5,dle),e(dle,APo),e(N5,LPo),e(N5,Nj),e(Nj,BPo),e(N5,xPo),e(Xe,kPo),e(Xe,q5),e(q5,RPo),e(q5,cle),e(cle,SPo),e(q5,PPo),e(q5,fle),e(fle,$Po),e(Xe,IPo),e(Xe,mle),e(mle,DPo),e(Xe,jPo),g(Ry,Xe,null),b(c,gBe,u),b(c,yd,u),e(yd,G5),e(G5,gle),g(Sy,gle,null),e(yd,NPo),e(yd,hle),e(hle,qPo),b(c,hBe,u),b(c,nr,u),g(Py,nr,null),e(nr,GPo),e(nr,wd),e(wd,OPo),e(wd,ple),e(ple,XPo),e(wd,VPo),e(wd,_le),e(_le,zPo),e(wd,WPo),e(nr,QPo),e(nr,$y),e($y,HPo),e($y,ule),e(ule,UPo),e($y,JPo),e(nr,YPo),e(nr,Kr),g(Iy,Kr,null),e(Kr,KPo),e(Kr,ble),e(ble,ZPo),e(Kr,e$o),e(Kr,Ad),e(Ad,o$o),e(Ad,vle),e(vle,r$o),e(Ad,t$o),e(Ad,Tle),e(Tle,a$o),e(Ad,n$o),e(Kr,s$o),e(Kr,Fle),e(Fle,l$o),e(Kr,i$o),g(Dy,Kr,null),e(nr,d$o),e(nr,Ve),g(jy,Ve,null),e(Ve,c$o),e(Ve,Cle),e(Cle,f$o),e(Ve,m$o),e(Ve,Ya),e(Ya,g$o),e(Ya,Mle),e(Mle,h$o),e(Ya,p$o),e(Ya,Ele),e(Ele,_$o),e(Ya,u$o),e(Ya,yle),e(yle,b$o),e(Ya,v$o),e(Ve,T$o),e(Ve,wle),e(wle,O5),e(O5,Ale),e(Ale,F$o),e(O5,C$o),e(O5,qj),e(qj,M$o),e(O5,E$o),e(Ve,y$o),e(Ve,X5),e(X5,w$o),e(X5,Lle),e(Lle,A$o),e(X5,L$o),e(X5,Ble),e(Ble,B$o),e(Ve,x$o),e(Ve,xle),e(xle,k$o),e(Ve,R$o),g(Ny,Ve,null),b(c,pBe,u),b(c,Ld,u),e(Ld,V5),e(V5,kle),g(qy,kle,null),e(Ld,S$o),e(Ld,Rle),e(Rle,P$o),b(c,_Be,u),b(c,sr,u),g(Gy,sr,null),e(sr,$$o),e(sr,Bd),e(Bd,I$o),e(Bd,Sle),e(Sle,D$o),e(Bd,j$o),e(Bd,Ple),e(Ple,N$o),e(Bd,q$o),e(sr,G$o),e(sr,Oy),e(Oy,O$o),e(Oy,$le),e($le,X$o),e(Oy,V$o),e(sr,z$o),e(sr,Zr),g(Xy,Zr,null),e(Zr,W$o),e(Zr,Ile),e(Ile,Q$o),e(Zr,H$o),e(Zr,xd),e(xd,U$o),e(xd,Dle),e(Dle,J$o),e(xd,Y$o),e(xd,jle),e(jle,K$o),e(xd,Z$o),e(Zr,eIo),e(Zr,Nle),e(Nle,oIo),e(Zr,rIo),g(Vy,Zr,null),e(sr,tIo),e(sr,ze),g(zy,ze,null),e(ze,aIo),e(ze,qle),e(qle,nIo),e(ze,sIo),e(ze,Ka),e(Ka,lIo),e(Ka,Gle),e(Gle,iIo),e(Ka,dIo),e(Ka,Ole),e(Ole,cIo),e(Ka,fIo),e(Ka,Xle),e(Xle,mIo),e(Ka,gIo),e(ze,hIo),e(ze,Ae),e(Ae,z5),e(z5,Vle),e(Vle,pIo),e(z5,_Io),e(z5,Gj),e(Gj,uIo),e(z5,bIo),e(Ae,vIo),e(Ae,W5),e(W5,zle),e(zle,TIo),e(W5,FIo),e(W5,Oj),e(Oj,CIo),e(W5,MIo),e(Ae,EIo),e(Ae,Q5),e(Q5,Wle),e(Wle,yIo),e(Q5,wIo),e(Q5,Xj),e(Xj,AIo),e(Q5,LIo),e(Ae,BIo),e(Ae,H5),e(H5,Qle),e(Qle,xIo),e(H5,kIo),e(H5,Vj),e(Vj,RIo),e(H5,SIo),e(Ae,PIo),e(Ae,U5),e(U5,Hle),e(Hle,$Io),e(U5,IIo),e(U5,zj),e(zj,DIo),e(U5,jIo),e(Ae,NIo),e(Ae,J5),e(J5,Ule),e(Ule,qIo),e(J5,GIo),e(J5,Wj),e(Wj,OIo),e(J5,XIo),e(Ae,VIo),e(Ae,Y5),e(Y5,Jle),e(Jle,zIo),e(Y5,WIo),e(Y5,Qj),e(Qj,QIo),e(Y5,HIo),e(Ae,UIo),e(Ae,K5),e(K5,Yle),e(Yle,JIo),e(K5,YIo),e(K5,Hj),e(Hj,KIo),e(K5,ZIo),e(ze,eDo),e(ze,Z5),e(Z5,oDo),e(Z5,Kle),e(Kle,rDo),e(Z5,tDo),e(Z5,Zle),e(Zle,aDo),e(ze,nDo),e(ze,eie),e(eie,sDo),e(ze,lDo),g(Wy,ze,null),b(c,uBe,u),b(c,kd,u),e(kd,e2),e(e2,oie),g(Qy,oie,null),e(kd,iDo),e(kd,rie),e(rie,dDo),b(c,bBe,u),b(c,lr,u),g(Hy,lr,null),e(lr,cDo),e(lr,Rd),e(Rd,fDo),e(Rd,tie),e(tie,mDo),e(Rd,gDo),e(Rd,aie),e(aie,hDo),e(Rd,pDo),e(lr,_Do),e(lr,Uy),e(Uy,uDo),e(Uy,nie),e(nie,bDo),e(Uy,vDo),e(lr,TDo),e(lr,et),g(Jy,et,null),e(et,FDo),e(et,sie),e(sie,CDo),e(et,MDo),e(et,Sd),e(Sd,EDo),e(Sd,lie),e(lie,yDo),e(Sd,wDo),e(Sd,iie),e(iie,ADo),e(Sd,LDo),e(et,BDo),e(et,die),e(die,xDo),e(et,kDo),g(Yy,et,null),e(lr,RDo),e(lr,We),g(Ky,We,null),e(We,SDo),e(We,cie),e(cie,PDo),e(We,$Do),e(We,Za),e(Za,IDo),e(Za,fie),e(fie,DDo),e(Za,jDo),e(Za,mie),e(mie,NDo),e(Za,qDo),e(Za,gie),e(gie,GDo),e(Za,ODo),e(We,XDo),e(We,en),e(en,o2),e(o2,hie),e(hie,VDo),e(o2,zDo),e(o2,Uj),e(Uj,WDo),e(o2,QDo),e(en,HDo),e(en,r2),e(r2,pie),e(pie,UDo),e(r2,JDo),e(r2,Jj),e(Jj,YDo),e(r2,KDo),e(en,ZDo),e(en,t2),e(t2,_ie),e(_ie,ejo),e(t2,ojo),e(t2,Yj),e(Yj,rjo),e(t2,tjo),e(en,ajo),e(en,a2),e(a2,uie),e(uie,njo),e(a2,sjo),e(a2,Kj),e(Kj,ljo),e(a2,ijo),e(We,djo),e(We,n2),e(n2,cjo),e(n2,bie),e(bie,fjo),e(n2,mjo),e(n2,vie),e(vie,gjo),e(We,hjo),e(We,Tie),e(Tie,pjo),e(We,_jo),g(Zy,We,null),b(c,vBe,u),b(c,Pd,u),e(Pd,s2),e(s2,Fie),g(ew,Fie,null),e(Pd,ujo),e(Pd,Cie),e(Cie,bjo),b(c,TBe,u),b(c,ir,u),g(ow,ir,null),e(ir,vjo),e(ir,$d),e($d,Tjo),e($d,Mie),e(Mie,Fjo),e($d,Cjo),e($d,Eie),e(Eie,Mjo),e($d,Ejo),e(ir,yjo),e(ir,rw),e(rw,wjo),e(rw,yie),e(yie,Ajo),e(rw,Ljo),e(ir,Bjo),e(ir,ot),g(tw,ot,null),e(ot,xjo),e(ot,wie),e(wie,kjo),e(ot,Rjo),e(ot,Id),e(Id,Sjo),e(Id,Aie),e(Aie,Pjo),e(Id,$jo),e(Id,Lie),e(Lie,Ijo),e(Id,Djo),e(ot,jjo),e(ot,Bie),e(Bie,Njo),e(ot,qjo),g(aw,ot,null),e(ir,Gjo),e(ir,Qe),g(nw,Qe,null),e(Qe,Ojo),e(Qe,xie),e(xie,Xjo),e(Qe,Vjo),e(Qe,on),e(on,zjo),e(on,kie),e(kie,Wjo),e(on,Qjo),e(on,Rie),e(Rie,Hjo),e(on,Ujo),e(on,Sie),e(Sie,Jjo),e(on,Yjo),e(Qe,Kjo),e(Qe,Le),e(Le,l2),e(l2,Pie),e(Pie,Zjo),e(l2,eNo),e(l2,Zj),e(Zj,oNo),e(l2,rNo),e(Le,tNo),e(Le,i2),e(i2,$ie),e($ie,aNo),e(i2,nNo),e(i2,eN),e(eN,sNo),e(i2,lNo),e(Le,iNo),e(Le,d2),e(d2,Iie),e(Iie,dNo),e(d2,cNo),e(d2,oN),e(oN,fNo),e(d2,mNo),e(Le,gNo),e(Le,c2),e(c2,Die),e(Die,hNo),e(c2,pNo),e(c2,rN),e(rN,_No),e(c2,uNo),e(Le,bNo),e(Le,f2),e(f2,jie),e(jie,vNo),e(f2,TNo),e(f2,tN),e(tN,FNo),e(f2,CNo),e(Le,MNo),e(Le,m2),e(m2,Nie),e(Nie,ENo),e(m2,yNo),e(m2,aN),e(aN,wNo),e(m2,ANo),e(Le,LNo),e(Le,g2),e(g2,qie),e(qie,BNo),e(g2,xNo),e(g2,nN),e(nN,kNo),e(g2,RNo),e(Le,SNo),e(Le,h2),e(h2,Gie),e(Gie,PNo),e(h2,$No),e(h2,sN),e(sN,INo),e(h2,DNo),e(Qe,jNo),e(Qe,p2),e(p2,NNo),e(p2,Oie),e(Oie,qNo),e(p2,GNo),e(p2,Xie),e(Xie,ONo),e(Qe,XNo),e(Qe,Vie),e(Vie,VNo),e(Qe,zNo),g(sw,Qe,null),b(c,FBe,u),b(c,Dd,u),e(Dd,_2),e(_2,zie),g(lw,zie,null),e(Dd,WNo),e(Dd,Wie),e(Wie,QNo),b(c,CBe,u),b(c,dr,u),g(iw,dr,null),e(dr,HNo),e(dr,jd),e(jd,UNo),e(jd,Qie),e(Qie,JNo),e(jd,YNo),e(jd,Hie),e(Hie,KNo),e(jd,ZNo),e(dr,eqo),e(dr,dw),e(dw,oqo),e(dw,Uie),e(Uie,rqo),e(dw,tqo),e(dr,aqo),e(dr,rt),g(cw,rt,null),e(rt,nqo),e(rt,Jie),e(Jie,sqo),e(rt,lqo),e(rt,Nd),e(Nd,iqo),e(Nd,Yie),e(Yie,dqo),e(Nd,cqo),e(Nd,Kie),e(Kie,fqo),e(Nd,mqo),e(rt,gqo),e(rt,Zie),e(Zie,hqo),e(rt,pqo),g(fw,rt,null),e(dr,_qo),e(dr,He),g(mw,He,null),e(He,uqo),e(He,ede),e(ede,bqo),e(He,vqo),e(He,rn),e(rn,Tqo),e(rn,ode),e(ode,Fqo),e(rn,Cqo),e(rn,rde),e(rde,Mqo),e(rn,Eqo),e(rn,tde),e(tde,yqo),e(rn,wqo),e(He,Aqo),e(He,gw),e(gw,u2),e(u2,ade),e(ade,Lqo),e(u2,Bqo),e(u2,lN),e(lN,xqo),e(u2,kqo),e(gw,Rqo),e(gw,b2),e(b2,nde),e(nde,Sqo),e(b2,Pqo),e(b2,iN),e(iN,$qo),e(b2,Iqo),e(He,Dqo),e(He,v2),e(v2,jqo),e(v2,sde),e(sde,Nqo),e(v2,qqo),e(v2,lde),e(lde,Gqo),e(He,Oqo),e(He,ide),e(ide,Xqo),e(He,Vqo),g(hw,He,null),b(c,MBe,u),b(c,qd,u),e(qd,T2),e(T2,dde),g(pw,dde,null),e(qd,zqo),e(qd,cde),e(cde,Wqo),b(c,EBe,u),b(c,cr,u),g(_w,cr,null),e(cr,Qqo),e(cr,Gd),e(Gd,Hqo),e(Gd,fde),e(fde,Uqo),e(Gd,Jqo),e(Gd,mde),e(mde,Yqo),e(Gd,Kqo),e(cr,Zqo),e(cr,uw),e(uw,eGo),e(uw,gde),e(gde,oGo),e(uw,rGo),e(cr,tGo),e(cr,tt),g(bw,tt,null),e(tt,aGo),e(tt,hde),e(hde,nGo),e(tt,sGo),e(tt,Od),e(Od,lGo),e(Od,pde),e(pde,iGo),e(Od,dGo),e(Od,_de),e(_de,cGo),e(Od,fGo),e(tt,mGo),e(tt,ude),e(ude,gGo),e(tt,hGo),g(vw,tt,null),e(cr,pGo),e(cr,Ue),g(Tw,Ue,null),e(Ue,_Go),e(Ue,bde),e(bde,uGo),e(Ue,bGo),e(Ue,tn),e(tn,vGo),e(tn,vde),e(vde,TGo),e(tn,FGo),e(tn,Tde),e(Tde,CGo),e(tn,MGo),e(tn,Fde),e(Fde,EGo),e(tn,yGo),e(Ue,wGo),e(Ue,an),e(an,F2),e(F2,Cde),e(Cde,AGo),e(F2,LGo),e(F2,dN),e(dN,BGo),e(F2,xGo),e(an,kGo),e(an,C2),e(C2,Mde),e(Mde,RGo),e(C2,SGo),e(C2,cN),e(cN,PGo),e(C2,$Go),e(an,IGo),e(an,M2),e(M2,Ede),e(Ede,DGo),e(M2,jGo),e(M2,fN),e(fN,NGo),e(M2,qGo),e(an,GGo),e(an,E2),e(E2,yde),e(yde,OGo),e(E2,XGo),e(E2,mN),e(mN,VGo),e(E2,zGo),e(Ue,WGo),e(Ue,y2),e(y2,QGo),e(y2,wde),e(wde,HGo),e(y2,UGo),e(y2,Ade),e(Ade,JGo),e(Ue,YGo),e(Ue,Lde),e(Lde,KGo),e(Ue,ZGo),g(Fw,Ue,null),b(c,yBe,u),b(c,Xd,u),e(Xd,w2),e(w2,Bde),g(Cw,Bde,null),e(Xd,eOo),e(Xd,xde),e(xde,oOo),b(c,wBe,u),b(c,fr,u),g(Mw,fr,null),e(fr,rOo),e(fr,Vd),e(Vd,tOo),e(Vd,kde),e(kde,aOo),e(Vd,nOo),e(Vd,Rde),e(Rde,sOo),e(Vd,lOo),e(fr,iOo),e(fr,Ew),e(Ew,dOo),e(Ew,Sde),e(Sde,cOo),e(Ew,fOo),e(fr,mOo),e(fr,at),g(yw,at,null),e(at,gOo),e(at,Pde),e(Pde,hOo),e(at,pOo),e(at,zd),e(zd,_Oo),e(zd,$de),e($de,uOo),e(zd,bOo),e(zd,Ide),e(Ide,vOo),e(zd,TOo),e(at,FOo),e(at,Dde),e(Dde,COo),e(at,MOo),g(ww,at,null),e(fr,EOo),e(fr,Je),g(Aw,Je,null),e(Je,yOo),e(Je,jde),e(jde,wOo),e(Je,AOo),e(Je,nn),e(nn,LOo),e(nn,Nde),e(Nde,BOo),e(nn,xOo),e(nn,qde),e(qde,kOo),e(nn,ROo),e(nn,Gde),e(Gde,SOo),e(nn,POo),e(Je,$Oo),e(Je,Wd),e(Wd,A2),e(A2,Ode),e(Ode,IOo),e(A2,DOo),e(A2,gN),e(gN,jOo),e(A2,NOo),e(Wd,qOo),e(Wd,L2),e(L2,Xde),e(Xde,GOo),e(L2,OOo),e(L2,hN),e(hN,XOo),e(L2,VOo),e(Wd,zOo),e(Wd,B2),e(B2,Vde),e(Vde,WOo),e(B2,QOo),e(B2,pN),e(pN,HOo),e(B2,UOo),e(Je,JOo),e(Je,x2),e(x2,YOo),e(x2,zde),e(zde,KOo),e(x2,ZOo),e(x2,Wde),e(Wde,eXo),e(Je,oXo),e(Je,Qde),e(Qde,rXo),e(Je,tXo),g(Lw,Je,null),b(c,ABe,u),b(c,Qd,u),e(Qd,k2),e(k2,Hde),g(Bw,Hde,null),e(Qd,aXo),e(Qd,Ude),e(Ude,nXo),b(c,LBe,u),b(c,mr,u),g(xw,mr,null),e(mr,sXo),e(mr,Hd),e(Hd,lXo),e(Hd,Jde),e(Jde,iXo),e(Hd,dXo),e(Hd,Yde),e(Yde,cXo),e(Hd,fXo),e(mr,mXo),e(mr,kw),e(kw,gXo),e(kw,Kde),e(Kde,hXo),e(kw,pXo),e(mr,_Xo),e(mr,nt),g(Rw,nt,null),e(nt,uXo),e(nt,Zde),e(Zde,bXo),e(nt,vXo),e(nt,Ud),e(Ud,TXo),e(Ud,ece),e(ece,FXo),e(Ud,CXo),e(Ud,oce),e(oce,MXo),e(Ud,EXo),e(nt,yXo),e(nt,rce),e(rce,wXo),e(nt,AXo),g(Sw,nt,null),e(mr,LXo),e(mr,Ye),g(Pw,Ye,null),e(Ye,BXo),e(Ye,tce),e(tce,xXo),e(Ye,kXo),e(Ye,sn),e(sn,RXo),e(sn,ace),e(ace,SXo),e(sn,PXo),e(sn,nce),e(nce,$Xo),e(sn,IXo),e(sn,sce),e(sce,DXo),e(sn,jXo),e(Ye,NXo),e(Ye,lce),e(lce,R2),e(R2,ice),e(ice,qXo),e(R2,GXo),e(R2,_N),e(_N,OXo),e(R2,XXo),e(Ye,VXo),e(Ye,S2),e(S2,zXo),e(S2,dce),e(dce,WXo),e(S2,QXo),e(S2,cce),e(cce,HXo),e(Ye,UXo),e(Ye,fce),e(fce,JXo),e(Ye,YXo),g($w,Ye,null),b(c,BBe,u),b(c,Jd,u),e(Jd,P2),e(P2,mce),g(Iw,mce,null),e(Jd,KXo),e(Jd,gce),e(gce,ZXo),b(c,xBe,u),b(c,gr,u),g(Dw,gr,null),e(gr,eVo),e(gr,Yd),e(Yd,oVo),e(Yd,hce),e(hce,rVo),e(Yd,tVo),e(Yd,pce),e(pce,aVo),e(Yd,nVo),e(gr,sVo),e(gr,jw),e(jw,lVo),e(jw,_ce),e(_ce,iVo),e(jw,dVo),e(gr,cVo),e(gr,st),g(Nw,st,null),e(st,fVo),e(st,uce),e(uce,mVo),e(st,gVo),e(st,Kd),e(Kd,hVo),e(Kd,bce),e(bce,pVo),e(Kd,_Vo),e(Kd,vce),e(vce,uVo),e(Kd,bVo),e(st,vVo),e(st,Tce),e(Tce,TVo),e(st,FVo),g(qw,st,null),e(gr,CVo),e(gr,Ke),g(Gw,Ke,null),e(Ke,MVo),e(Ke,Fce),e(Fce,EVo),e(Ke,yVo),e(Ke,ln),e(ln,wVo),e(ln,Cce),e(Cce,AVo),e(ln,LVo),e(ln,Mce),e(Mce,BVo),e(ln,xVo),e(ln,Ece),e(Ece,kVo),e(ln,RVo),e(Ke,SVo),e(Ke,yce),e(yce,$2),e($2,wce),e(wce,PVo),e($2,$Vo),e($2,uN),e(uN,IVo),e($2,DVo),e(Ke,jVo),e(Ke,I2),e(I2,NVo),e(I2,Ace),e(Ace,qVo),e(I2,GVo),e(I2,Lce),e(Lce,OVo),e(Ke,XVo),e(Ke,Bce),e(Bce,VVo),e(Ke,zVo),g(Ow,Ke,null),b(c,kBe,u),b(c,Zd,u),e(Zd,D2),e(D2,xce),g(Xw,xce,null),e(Zd,WVo),e(Zd,kce),e(kce,QVo),b(c,RBe,u),b(c,hr,u),g(Vw,hr,null),e(hr,HVo),e(hr,ec),e(ec,UVo),e(ec,Rce),e(Rce,JVo),e(ec,YVo),e(ec,Sce),e(Sce,KVo),e(ec,ZVo),e(hr,ezo),e(hr,zw),e(zw,ozo),e(zw,Pce),e(Pce,rzo),e(zw,tzo),e(hr,azo),e(hr,lt),g(Ww,lt,null),e(lt,nzo),e(lt,$ce),e($ce,szo),e(lt,lzo),e(lt,oc),e(oc,izo),e(oc,Ice),e(Ice,dzo),e(oc,czo),e(oc,Dce),e(Dce,fzo),e(oc,mzo),e(lt,gzo),e(lt,jce),e(jce,hzo),e(lt,pzo),g(Qw,lt,null),e(hr,_zo),e(hr,Ze),g(Hw,Ze,null),e(Ze,uzo),e(Ze,Nce),e(Nce,bzo),e(Ze,vzo),e(Ze,dn),e(dn,Tzo),e(dn,qce),e(qce,Fzo),e(dn,Czo),e(dn,Gce),e(Gce,Mzo),e(dn,Ezo),e(dn,Oce),e(Oce,yzo),e(dn,wzo),e(Ze,Azo),e(Ze,Uw),e(Uw,j2),e(j2,Xce),e(Xce,Lzo),e(j2,Bzo),e(j2,bN),e(bN,xzo),e(j2,kzo),e(Uw,Rzo),e(Uw,N2),e(N2,Vce),e(Vce,Szo),e(N2,Pzo),e(N2,vN),e(vN,$zo),e(N2,Izo),e(Ze,Dzo),e(Ze,q2),e(q2,jzo),e(q2,zce),e(zce,Nzo),e(q2,qzo),e(q2,Wce),e(Wce,Gzo),e(Ze,Ozo),e(Ze,Qce),e(Qce,Xzo),e(Ze,Vzo),g(Jw,Ze,null),b(c,SBe,u),b(c,rc,u),e(rc,G2),e(G2,Hce),g(Yw,Hce,null),e(rc,zzo),e(rc,Uce),e(Uce,Wzo),b(c,PBe,u),b(c,pr,u),g(Kw,pr,null),e(pr,Qzo),e(pr,tc),e(tc,Hzo),e(tc,Jce),e(Jce,Uzo),e(tc,Jzo),e(tc,Yce),e(Yce,Yzo),e(tc,Kzo),e(pr,Zzo),e(pr,Zw),e(Zw,eWo),e(Zw,Kce),e(Kce,oWo),e(Zw,rWo),e(pr,tWo),e(pr,it),g(e6,it,null),e(it,aWo),e(it,Zce),e(Zce,nWo),e(it,sWo),e(it,ac),e(ac,lWo),e(ac,efe),e(efe,iWo),e(ac,dWo),e(ac,ofe),e(ofe,cWo),e(ac,fWo),e(it,mWo),e(it,rfe),e(rfe,gWo),e(it,hWo),g(o6,it,null),e(pr,pWo),e(pr,go),g(r6,go,null),e(go,_Wo),e(go,tfe),e(tfe,uWo),e(go,bWo),e(go,cn),e(cn,vWo),e(cn,afe),e(afe,TWo),e(cn,FWo),e(cn,nfe),e(nfe,CWo),e(cn,MWo),e(cn,sfe),e(sfe,EWo),e(cn,yWo),e(go,wWo),e(go,B),e(B,O2),e(O2,lfe),e(lfe,AWo),e(O2,LWo),e(O2,TN),e(TN,BWo),e(O2,xWo),e(B,kWo),e(B,X2),e(X2,ife),e(ife,RWo),e(X2,SWo),e(X2,FN),e(FN,PWo),e(X2,$Wo),e(B,IWo),e(B,V2),e(V2,dfe),e(dfe,DWo),e(V2,jWo),e(V2,CN),e(CN,NWo),e(V2,qWo),e(B,GWo),e(B,z2),e(z2,cfe),e(cfe,OWo),e(z2,XWo),e(z2,MN),e(MN,VWo),e(z2,zWo),e(B,WWo),e(B,W2),e(W2,ffe),e(ffe,QWo),e(W2,HWo),e(W2,EN),e(EN,UWo),e(W2,JWo),e(B,YWo),e(B,Q2),e(Q2,mfe),e(mfe,KWo),e(Q2,ZWo),e(Q2,yN),e(yN,eQo),e(Q2,oQo),e(B,rQo),e(B,H2),e(H2,gfe),e(gfe,tQo),e(H2,aQo),e(H2,wN),e(wN,nQo),e(H2,sQo),e(B,lQo),e(B,U2),e(U2,hfe),e(hfe,iQo),e(U2,dQo),e(U2,AN),e(AN,cQo),e(U2,fQo),e(B,mQo),e(B,J2),e(J2,pfe),e(pfe,gQo),e(J2,hQo),e(J2,LN),e(LN,pQo),e(J2,_Qo),e(B,uQo),e(B,Y2),e(Y2,_fe),e(_fe,bQo),e(Y2,vQo),e(Y2,BN),e(BN,TQo),e(Y2,FQo),e(B,CQo),e(B,K2),e(K2,ufe),e(ufe,MQo),e(K2,EQo),e(K2,xN),e(xN,yQo),e(K2,wQo),e(B,AQo),e(B,Z2),e(Z2,bfe),e(bfe,LQo),e(Z2,BQo),e(Z2,kN),e(kN,xQo),e(Z2,kQo),e(B,RQo),e(B,ev),e(ev,vfe),e(vfe,SQo),e(ev,PQo),e(ev,RN),e(RN,$Qo),e(ev,IQo),e(B,DQo),e(B,ov),e(ov,Tfe),e(Tfe,jQo),e(ov,NQo),e(ov,SN),e(SN,qQo),e(ov,GQo),e(B,OQo),e(B,rv),e(rv,Ffe),e(Ffe,XQo),e(rv,VQo),e(rv,PN),e(PN,zQo),e(rv,WQo),e(B,QQo),e(B,tv),e(tv,Cfe),e(Cfe,HQo),e(tv,UQo),e(tv,$N),e($N,JQo),e(tv,YQo),e(B,KQo),e(B,Is),e(Is,Mfe),e(Mfe,ZQo),e(Is,eHo),e(Is,IN),e(IN,oHo),e(Is,rHo),e(Is,DN),e(DN,tHo),e(Is,aHo),e(B,nHo),e(B,av),e(av,Efe),e(Efe,sHo),e(av,lHo),e(av,jN),e(jN,iHo),e(av,dHo),e(B,cHo),e(B,nv),e(nv,yfe),e(yfe,fHo),e(nv,mHo),e(nv,NN),e(NN,gHo),e(nv,hHo),e(B,pHo),e(B,sv),e(sv,wfe),e(wfe,_Ho),e(sv,uHo),e(sv,qN),e(qN,bHo),e(sv,vHo),e(B,THo),e(B,lv),e(lv,Afe),e(Afe,FHo),e(lv,CHo),e(lv,GN),e(GN,MHo),e(lv,EHo),e(B,yHo),e(B,iv),e(iv,Lfe),e(Lfe,wHo),e(iv,AHo),e(iv,ON),e(ON,LHo),e(iv,BHo),e(B,xHo),e(B,dv),e(dv,Bfe),e(Bfe,kHo),e(dv,RHo),e(dv,XN),e(XN,SHo),e(dv,PHo),e(B,$Ho),e(B,cv),e(cv,xfe),e(xfe,IHo),e(cv,DHo),e(cv,VN),e(VN,jHo),e(cv,NHo),e(B,qHo),e(B,fv),e(fv,kfe),e(kfe,GHo),e(fv,OHo),e(fv,zN),e(zN,XHo),e(fv,VHo),e(B,zHo),e(B,mv),e(mv,Rfe),e(Rfe,WHo),e(mv,QHo),e(mv,WN),e(WN,HHo),e(mv,UHo),e(B,JHo),e(B,gv),e(gv,Sfe),e(Sfe,YHo),e(gv,KHo),e(gv,QN),e(QN,ZHo),e(gv,eUo),e(B,oUo),e(B,hv),e(hv,Pfe),e(Pfe,rUo),e(hv,tUo),e(hv,HN),e(HN,aUo),e(hv,nUo),e(B,sUo),e(B,pv),e(pv,$fe),e($fe,lUo),e(pv,iUo),e(pv,UN),e(UN,dUo),e(pv,cUo),e(B,fUo),e(B,_v),e(_v,Ife),e(Ife,mUo),e(_v,gUo),e(_v,JN),e(JN,hUo),e(_v,pUo),e(B,_Uo),e(B,uv),e(uv,Dfe),e(Dfe,uUo),e(uv,bUo),e(uv,YN),e(YN,vUo),e(uv,TUo),e(B,FUo),e(B,bv),e(bv,jfe),e(jfe,CUo),e(bv,MUo),e(bv,KN),e(KN,EUo),e(bv,yUo),e(B,wUo),e(B,vv),e(vv,Nfe),e(Nfe,AUo),e(vv,LUo),e(vv,ZN),e(ZN,BUo),e(vv,xUo),e(B,kUo),e(B,Tv),e(Tv,qfe),e(qfe,RUo),e(Tv,SUo),e(Tv,eq),e(eq,PUo),e(Tv,$Uo),e(B,IUo),e(B,Fv),e(Fv,Gfe),e(Gfe,DUo),e(Fv,jUo),e(Fv,oq),e(oq,NUo),e(Fv,qUo),e(B,GUo),e(B,Cv),e(Cv,Ofe),e(Ofe,OUo),e(Cv,XUo),e(Cv,rq),e(rq,VUo),e(Cv,zUo),e(B,WUo),e(B,Mv),e(Mv,Xfe),e(Xfe,QUo),e(Mv,HUo),e(Mv,tq),e(tq,UUo),e(Mv,JUo),e(B,YUo),e(B,Ev),e(Ev,Vfe),e(Vfe,KUo),e(Ev,ZUo),e(Ev,aq),e(aq,eJo),e(Ev,oJo),e(B,rJo),e(B,yv),e(yv,zfe),e(zfe,tJo),e(yv,aJo),e(yv,nq),e(nq,nJo),e(yv,sJo),e(B,lJo),e(B,wv),e(wv,Wfe),e(Wfe,iJo),e(wv,dJo),e(wv,sq),e(sq,cJo),e(wv,fJo),e(B,mJo),e(B,Av),e(Av,Qfe),e(Qfe,gJo),e(Av,hJo),e(Av,lq),e(lq,pJo),e(Av,_Jo),e(B,uJo),e(B,Lv),e(Lv,Hfe),e(Hfe,bJo),e(Lv,vJo),e(Lv,iq),e(iq,TJo),e(Lv,FJo),e(go,CJo),e(go,Ufe),e(Ufe,MJo),e(go,EJo),g(t6,go,null),b(c,$Be,u),b(c,nc,u),e(nc,Bv),e(Bv,Jfe),g(a6,Jfe,null),e(nc,yJo),e(nc,Yfe),e(Yfe,wJo),b(c,IBe,u),b(c,_r,u),g(n6,_r,null),e(_r,AJo),e(_r,sc),e(sc,LJo),e(sc,Kfe),e(Kfe,BJo),e(sc,xJo),e(sc,Zfe),e(Zfe,kJo),e(sc,RJo),e(_r,SJo),e(_r,s6),e(s6,PJo),e(s6,eme),e(eme,$Jo),e(s6,IJo),e(_r,DJo),e(_r,dt),g(l6,dt,null),e(dt,jJo),e(dt,ome),e(ome,NJo),e(dt,qJo),e(dt,lc),e(lc,GJo),e(lc,rme),e(rme,OJo),e(lc,XJo),e(lc,tme),e(tme,VJo),e(lc,zJo),e(dt,WJo),e(dt,ame),e(ame,QJo),e(dt,HJo),g(i6,dt,null),e(_r,UJo),e(_r,ho),g(d6,ho,null),e(ho,JJo),e(ho,nme),e(nme,YJo),e(ho,KJo),e(ho,fn),e(fn,ZJo),e(fn,sme),e(sme,eYo),e(fn,oYo),e(fn,lme),e(lme,rYo),e(fn,tYo),e(fn,ime),e(ime,aYo),e(fn,nYo),e(ho,sYo),e(ho,H),e(H,xv),e(xv,dme),e(dme,lYo),e(xv,iYo),e(xv,dq),e(dq,dYo),e(xv,cYo),e(H,fYo),e(H,kv),e(kv,cme),e(cme,mYo),e(kv,gYo),e(kv,cq),e(cq,hYo),e(kv,pYo),e(H,_Yo),e(H,Rv),e(Rv,fme),e(fme,uYo),e(Rv,bYo),e(Rv,fq),e(fq,vYo),e(Rv,TYo),e(H,FYo),e(H,Sv),e(Sv,mme),e(mme,CYo),e(Sv,MYo),e(Sv,mq),e(mq,EYo),e(Sv,yYo),e(H,wYo),e(H,Pv),e(Pv,gme),e(gme,AYo),e(Pv,LYo),e(Pv,gq),e(gq,BYo),e(Pv,xYo),e(H,kYo),e(H,$v),e($v,hme),e(hme,RYo),e($v,SYo),e($v,hq),e(hq,PYo),e($v,$Yo),e(H,IYo),e(H,Iv),e(Iv,pme),e(pme,DYo),e(Iv,jYo),e(Iv,pq),e(pq,NYo),e(Iv,qYo),e(H,GYo),e(H,Dv),e(Dv,_me),e(_me,OYo),e(Dv,XYo),e(Dv,_q),e(_q,VYo),e(Dv,zYo),e(H,WYo),e(H,jv),e(jv,ume),e(ume,QYo),e(jv,HYo),e(jv,uq),e(uq,UYo),e(jv,JYo),e(H,YYo),e(H,Nv),e(Nv,bme),e(bme,KYo),e(Nv,ZYo),e(Nv,bq),e(bq,eKo),e(Nv,oKo),e(H,rKo),e(H,qv),e(qv,vme),e(vme,tKo),e(qv,aKo),e(qv,vq),e(vq,nKo),e(qv,sKo),e(H,lKo),e(H,Gv),e(Gv,Tme),e(Tme,iKo),e(Gv,dKo),e(Gv,Tq),e(Tq,cKo),e(Gv,fKo),e(H,mKo),e(H,Ov),e(Ov,Fme),e(Fme,gKo),e(Ov,hKo),e(Ov,Fq),e(Fq,pKo),e(Ov,_Ko),e(H,uKo),e(H,Xv),e(Xv,Cme),e(Cme,bKo),e(Xv,vKo),e(Xv,Cq),e(Cq,TKo),e(Xv,FKo),e(H,CKo),e(H,Vv),e(Vv,Mme),e(Mme,MKo),e(Vv,EKo),e(Vv,Mq),e(Mq,yKo),e(Vv,wKo),e(H,AKo),e(H,zv),e(zv,Eme),e(Eme,LKo),e(zv,BKo),e(zv,Eq),e(Eq,xKo),e(zv,kKo),e(H,RKo),e(H,Wv),e(Wv,yme),e(yme,SKo),e(Wv,PKo),e(Wv,yq),e(yq,$Ko),e(Wv,IKo),e(H,DKo),e(H,Qv),e(Qv,wme),e(wme,jKo),e(Qv,NKo),e(Qv,wq),e(wq,qKo),e(Qv,GKo),e(H,OKo),e(H,Hv),e(Hv,Ame),e(Ame,XKo),e(Hv,VKo),e(Hv,Aq),e(Aq,zKo),e(Hv,WKo),e(H,QKo),e(H,Uv),e(Uv,Lme),e(Lme,HKo),e(Uv,UKo),e(Uv,Lq),e(Lq,JKo),e(Uv,YKo),e(H,KKo),e(H,Jv),e(Jv,Bme),e(Bme,ZKo),e(Jv,eZo),e(Jv,Bq),e(Bq,oZo),e(Jv,rZo),e(H,tZo),e(H,Yv),e(Yv,xme),e(xme,aZo),e(Yv,nZo),e(Yv,xq),e(xq,sZo),e(Yv,lZo),e(ho,iZo),e(ho,kme),e(kme,dZo),e(ho,cZo),g(c6,ho,null),b(c,DBe,u),b(c,ic,u),e(ic,Kv),e(Kv,Rme),g(f6,Rme,null),e(ic,fZo),e(ic,Sme),e(Sme,mZo),b(c,jBe,u),b(c,ur,u),g(m6,ur,null),e(ur,gZo),e(ur,dc),e(dc,hZo),e(dc,Pme),e(Pme,pZo),e(dc,_Zo),e(dc,$me),e($me,uZo),e(dc,bZo),e(ur,vZo),e(ur,g6),e(g6,TZo),e(g6,Ime),e(Ime,FZo),e(g6,CZo),e(ur,MZo),e(ur,ct),g(h6,ct,null),e(ct,EZo),e(ct,Dme),e(Dme,yZo),e(ct,wZo),e(ct,cc),e(cc,AZo),e(cc,jme),e(jme,LZo),e(cc,BZo),e(cc,Nme),e(Nme,xZo),e(cc,kZo),e(ct,RZo),e(ct,qme),e(qme,SZo),e(ct,PZo),g(p6,ct,null),e(ur,$Zo),e(ur,po),g(_6,po,null),e(po,IZo),e(po,Gme),e(Gme,DZo),e(po,jZo),e(po,mn),e(mn,NZo),e(mn,Ome),e(Ome,qZo),e(mn,GZo),e(mn,Xme),e(Xme,OZo),e(mn,XZo),e(mn,Vme),e(Vme,VZo),e(mn,zZo),e(po,WZo),e(po,he),e(he,Zv),e(Zv,zme),e(zme,QZo),e(Zv,HZo),e(Zv,kq),e(kq,UZo),e(Zv,JZo),e(he,YZo),e(he,eT),e(eT,Wme),e(Wme,KZo),e(eT,ZZo),e(eT,Rq),e(Rq,eer),e(eT,oer),e(he,rer),e(he,oT),e(oT,Qme),e(Qme,ter),e(oT,aer),e(oT,Sq),e(Sq,ner),e(oT,ser),e(he,ler),e(he,rT),e(rT,Hme),e(Hme,ier),e(rT,der),e(rT,Pq),e(Pq,cer),e(rT,fer),e(he,mer),e(he,tT),e(tT,Ume),e(Ume,ger),e(tT,her),e(tT,$q),e($q,per),e(tT,_er),e(he,uer),e(he,aT),e(aT,Jme),e(Jme,ber),e(aT,ver),e(aT,Iq),e(Iq,Ter),e(aT,Fer),e(he,Cer),e(he,nT),e(nT,Yme),e(Yme,Mer),e(nT,Eer),e(nT,Dq),e(Dq,yer),e(nT,wer),e(he,Aer),e(he,sT),e(sT,Kme),e(Kme,Ler),e(sT,Ber),e(sT,jq),e(jq,xer),e(sT,ker),e(he,Rer),e(he,lT),e(lT,Zme),e(Zme,Ser),e(lT,Per),e(lT,Nq),e(Nq,$er),e(lT,Ier),e(he,Der),e(he,iT),e(iT,ege),e(ege,jer),e(iT,Ner),e(iT,qq),e(qq,qer),e(iT,Ger),e(po,Oer),e(po,oge),e(oge,Xer),e(po,Ver),g(u6,po,null),b(c,NBe,u),b(c,fc,u),e(fc,dT),e(dT,rge),g(b6,rge,null),e(fc,zer),e(fc,tge),e(tge,Wer),b(c,qBe,u),b(c,br,u),g(v6,br,null),e(br,Qer),e(br,mc),e(mc,Her),e(mc,age),e(age,Uer),e(mc,Jer),e(mc,nge),e(nge,Yer),e(mc,Ker),e(br,Zer),e(br,T6),e(T6,eor),e(T6,sge),e(sge,oor),e(T6,ror),e(br,tor),e(br,ft),g(F6,ft,null),e(ft,aor),e(ft,lge),e(lge,nor),e(ft,sor),e(ft,gc),e(gc,lor),e(gc,ige),e(ige,ior),e(gc,dor),e(gc,dge),e(dge,cor),e(gc,mor),e(ft,gor),e(ft,cge),e(cge,hor),e(ft,por),g(C6,ft,null),e(br,_or),e(br,_o),g(M6,_o,null),e(_o,uor),e(_o,fge),e(fge,bor),e(_o,vor),e(_o,gn),e(gn,Tor),e(gn,mge),e(mge,For),e(gn,Cor),e(gn,gge),e(gge,Mor),e(gn,Eor),e(gn,hge),e(hge,yor),e(gn,wor),e(_o,Aor),e(_o,E6),e(E6,cT),e(cT,pge),e(pge,Lor),e(cT,Bor),e(cT,Gq),e(Gq,xor),e(cT,kor),e(E6,Ror),e(E6,fT),e(fT,_ge),e(_ge,Sor),e(fT,Por),e(fT,Oq),e(Oq,$or),e(fT,Ior),e(_o,Dor),e(_o,uge),e(uge,jor),e(_o,Nor),g(y6,_o,null),b(c,GBe,u),b(c,hc,u),e(hc,mT),e(mT,bge),g(w6,bge,null),e(hc,qor),e(hc,vge),e(vge,Gor),b(c,OBe,u),b(c,vr,u),g(A6,vr,null),e(vr,Oor),e(vr,pc),e(pc,Xor),e(pc,Tge),e(Tge,Vor),e(pc,zor),e(pc,Fge),e(Fge,Wor),e(pc,Qor),e(vr,Hor),e(vr,L6),e(L6,Uor),e(L6,Cge),e(Cge,Jor),e(L6,Yor),e(vr,Kor),e(vr,mt),g(B6,mt,null),e(mt,Zor),e(mt,Mge),e(Mge,err),e(mt,orr),e(mt,_c),e(_c,rrr),e(_c,Ege),e(Ege,trr),e(_c,arr),e(_c,yge),e(yge,nrr),e(_c,srr),e(mt,lrr),e(mt,wge),e(wge,irr),e(mt,drr),g(x6,mt,null),e(vr,crr),e(vr,uo),g(k6,uo,null),e(uo,frr),e(uo,Age),e(Age,mrr),e(uo,grr),e(uo,hn),e(hn,hrr),e(hn,Lge),e(Lge,prr),e(hn,_rr),e(hn,Bge),e(Bge,urr),e(hn,brr),e(hn,xge),e(xge,vrr),e(hn,Trr),e(uo,Frr),e(uo,Y),e(Y,gT),e(gT,kge),e(kge,Crr),e(gT,Mrr),e(gT,Xq),e(Xq,Err),e(gT,yrr),e(Y,wrr),e(Y,hT),e(hT,Rge),e(Rge,Arr),e(hT,Lrr),e(hT,Vq),e(Vq,Brr),e(hT,xrr),e(Y,krr),e(Y,pT),e(pT,Sge),e(Sge,Rrr),e(pT,Srr),e(pT,zq),e(zq,Prr),e(pT,$rr),e(Y,Irr),e(Y,_T),e(_T,Pge),e(Pge,Drr),e(_T,jrr),e(_T,Wq),e(Wq,Nrr),e(_T,qrr),e(Y,Grr),e(Y,uT),e(uT,$ge),e($ge,Orr),e(uT,Xrr),e(uT,Qq),e(Qq,Vrr),e(uT,zrr),e(Y,Wrr),e(Y,bT),e(bT,Ige),e(Ige,Qrr),e(bT,Hrr),e(bT,Hq),e(Hq,Urr),e(bT,Jrr),e(Y,Yrr),e(Y,vT),e(vT,Dge),e(Dge,Krr),e(vT,Zrr),e(vT,Uq),e(Uq,etr),e(vT,otr),e(Y,rtr),e(Y,TT),e(TT,jge),e(jge,ttr),e(TT,atr),e(TT,Jq),e(Jq,ntr),e(TT,str),e(Y,ltr),e(Y,FT),e(FT,Nge),e(Nge,itr),e(FT,dtr),e(FT,Yq),e(Yq,ctr),e(FT,ftr),e(Y,mtr),e(Y,CT),e(CT,qge),e(qge,gtr),e(CT,htr),e(CT,Kq),e(Kq,ptr),e(CT,_tr),e(Y,utr),e(Y,MT),e(MT,Gge),e(Gge,btr),e(MT,vtr),e(MT,Zq),e(Zq,Ttr),e(MT,Ftr),e(Y,Ctr),e(Y,ET),e(ET,Oge),e(Oge,Mtr),e(ET,Etr),e(ET,eG),e(eG,ytr),e(ET,wtr),e(Y,Atr),e(Y,yT),e(yT,Xge),e(Xge,Ltr),e(yT,Btr),e(yT,oG),e(oG,xtr),e(yT,ktr),e(Y,Rtr),e(Y,wT),e(wT,Vge),e(Vge,Str),e(wT,Ptr),e(wT,rG),e(rG,$tr),e(wT,Itr),e(Y,Dtr),e(Y,AT),e(AT,zge),e(zge,jtr),e(AT,Ntr),e(AT,tG),e(tG,qtr),e(AT,Gtr),e(Y,Otr),e(Y,LT),e(LT,Wge),e(Wge,Xtr),e(LT,Vtr),e(LT,aG),e(aG,ztr),e(LT,Wtr),e(Y,Qtr),e(Y,BT),e(BT,Qge),e(Qge,Htr),e(BT,Utr),e(BT,nG),e(nG,Jtr),e(BT,Ytr),e(Y,Ktr),e(Y,xT),e(xT,Hge),e(Hge,Ztr),e(xT,ear),e(xT,sG),e(sG,oar),e(xT,rar),e(Y,tar),e(Y,kT),e(kT,Uge),e(Uge,aar),e(kT,nar),e(kT,lG),e(lG,sar),e(kT,lar),e(Y,iar),e(Y,RT),e(RT,Jge),e(Jge,dar),e(RT,car),e(RT,iG),e(iG,far),e(RT,mar),e(uo,gar),e(uo,Yge),e(Yge,har),e(uo,par),g(R6,uo,null),b(c,XBe,u),b(c,uc,u),e(uc,ST),e(ST,Kge),g(S6,Kge,null),e(uc,_ar),e(uc,Zge),e(Zge,uar),b(c,VBe,u),b(c,Tr,u),g(P6,Tr,null),e(Tr,bar),e(Tr,bc),e(bc,Tar),e(bc,ehe),e(ehe,Far),e(bc,Car),e(bc,ohe),e(ohe,Mar),e(bc,Ear),e(Tr,yar),e(Tr,$6),e($6,war),e($6,rhe),e(rhe,Aar),e($6,Lar),e(Tr,Bar),e(Tr,gt),g(I6,gt,null),e(gt,xar),e(gt,the),e(the,kar),e(gt,Rar),e(gt,vc),e(vc,Sar),e(vc,ahe),e(ahe,Par),e(vc,$ar),e(vc,nhe),e(nhe,Iar),e(vc,Dar),e(gt,jar),e(gt,she),e(she,Nar),e(gt,qar),g(D6,gt,null),e(Tr,Gar),e(Tr,bo),g(j6,bo,null),e(bo,Oar),e(bo,lhe),e(lhe,Xar),e(bo,Var),e(bo,pn),e(pn,zar),e(pn,ihe),e(ihe,War),e(pn,Qar),e(pn,dhe),e(dhe,Har),e(pn,Uar),e(pn,che),e(che,Jar),e(pn,Yar),e(bo,Kar),e(bo,pe),e(pe,PT),e(PT,fhe),e(fhe,Zar),e(PT,enr),e(PT,dG),e(dG,onr),e(PT,rnr),e(pe,tnr),e(pe,$T),e($T,mhe),e(mhe,anr),e($T,nnr),e($T,cG),e(cG,snr),e($T,lnr),e(pe,inr),e(pe,IT),e(IT,ghe),e(ghe,dnr),e(IT,cnr),e(IT,fG),e(fG,fnr),e(IT,mnr),e(pe,gnr),e(pe,DT),e(DT,hhe),e(hhe,hnr),e(DT,pnr),e(DT,mG),e(mG,_nr),e(DT,unr),e(pe,bnr),e(pe,jT),e(jT,phe),e(phe,vnr),e(jT,Tnr),e(jT,gG),e(gG,Fnr),e(jT,Cnr),e(pe,Mnr),e(pe,NT),e(NT,_he),e(_he,Enr),e(NT,ynr),e(NT,hG),e(hG,wnr),e(NT,Anr),e(pe,Lnr),e(pe,qT),e(qT,uhe),e(uhe,Bnr),e(qT,xnr),e(qT,pG),e(pG,knr),e(qT,Rnr),e(pe,Snr),e(pe,GT),e(GT,bhe),e(bhe,Pnr),e(GT,$nr),e(GT,_G),e(_G,Inr),e(GT,Dnr),e(pe,jnr),e(pe,OT),e(OT,vhe),e(vhe,Nnr),e(OT,qnr),e(OT,uG),e(uG,Gnr),e(OT,Onr),e(pe,Xnr),e(pe,XT),e(XT,The),e(The,Vnr),e(XT,znr),e(XT,bG),e(bG,Wnr),e(XT,Qnr),e(bo,Hnr),e(bo,Fhe),e(Fhe,Unr),e(bo,Jnr),g(N6,bo,null),b(c,zBe,u),b(c,Tc,u),e(Tc,VT),e(VT,Che),g(q6,Che,null),e(Tc,Ynr),e(Tc,Mhe),e(Mhe,Knr),b(c,WBe,u),b(c,Fr,u),g(G6,Fr,null),e(Fr,Znr),e(Fr,Fc),e(Fc,esr),e(Fc,Ehe),e(Ehe,osr),e(Fc,rsr),e(Fc,yhe),e(yhe,tsr),e(Fc,asr),e(Fr,nsr),e(Fr,O6),e(O6,ssr),e(O6,whe),e(whe,lsr),e(O6,isr),e(Fr,dsr),e(Fr,ht),g(X6,ht,null),e(ht,csr),e(ht,Ahe),e(Ahe,fsr),e(ht,msr),e(ht,Cc),e(Cc,gsr),e(Cc,Lhe),e(Lhe,hsr),e(Cc,psr),e(Cc,Bhe),e(Bhe,_sr),e(Cc,usr),e(ht,bsr),e(ht,xhe),e(xhe,vsr),e(ht,Tsr),g(V6,ht,null),e(Fr,Fsr),e(Fr,vo),g(z6,vo,null),e(vo,Csr),e(vo,khe),e(khe,Msr),e(vo,Esr),e(vo,_n),e(_n,ysr),e(_n,Rhe),e(Rhe,wsr),e(_n,Asr),e(_n,She),e(She,Lsr),e(_n,Bsr),e(_n,Phe),e(Phe,xsr),e(_n,ksr),e(vo,Rsr),e(vo,X),e(X,zT),e(zT,$he),e($he,Ssr),e(zT,Psr),e(zT,vG),e(vG,$sr),e(zT,Isr),e(X,Dsr),e(X,WT),e(WT,Ihe),e(Ihe,jsr),e(WT,Nsr),e(WT,TG),e(TG,qsr),e(WT,Gsr),e(X,Osr),e(X,QT),e(QT,Dhe),e(Dhe,Xsr),e(QT,Vsr),e(QT,FG),e(FG,zsr),e(QT,Wsr),e(X,Qsr),e(X,HT),e(HT,jhe),e(jhe,Hsr),e(HT,Usr),e(HT,CG),e(CG,Jsr),e(HT,Ysr),e(X,Ksr),e(X,UT),e(UT,Nhe),e(Nhe,Zsr),e(UT,elr),e(UT,MG),e(MG,olr),e(UT,rlr),e(X,tlr),e(X,JT),e(JT,qhe),e(qhe,alr),e(JT,nlr),e(JT,EG),e(EG,slr),e(JT,llr),e(X,ilr),e(X,YT),e(YT,Ghe),e(Ghe,dlr),e(YT,clr),e(YT,yG),e(yG,flr),e(YT,mlr),e(X,glr),e(X,KT),e(KT,Ohe),e(Ohe,hlr),e(KT,plr),e(KT,wG),e(wG,_lr),e(KT,ulr),e(X,blr),e(X,ZT),e(ZT,Xhe),e(Xhe,vlr),e(ZT,Tlr),e(ZT,AG),e(AG,Flr),e(ZT,Clr),e(X,Mlr),e(X,eF),e(eF,Vhe),e(Vhe,Elr),e(eF,ylr),e(eF,LG),e(LG,wlr),e(eF,Alr),e(X,Llr),e(X,oF),e(oF,zhe),e(zhe,Blr),e(oF,xlr),e(oF,BG),e(BG,klr),e(oF,Rlr),e(X,Slr),e(X,rF),e(rF,Whe),e(Whe,Plr),e(rF,$lr),e(rF,xG),e(xG,Ilr),e(rF,Dlr),e(X,jlr),e(X,tF),e(tF,Qhe),e(Qhe,Nlr),e(tF,qlr),e(tF,kG),e(kG,Glr),e(tF,Olr),e(X,Xlr),e(X,aF),e(aF,Hhe),e(Hhe,Vlr),e(aF,zlr),e(aF,RG),e(RG,Wlr),e(aF,Qlr),e(X,Hlr),e(X,nF),e(nF,Uhe),e(Uhe,Ulr),e(nF,Jlr),e(nF,SG),e(SG,Ylr),e(nF,Klr),e(X,Zlr),e(X,sF),e(sF,Jhe),e(Jhe,eir),e(sF,oir),e(sF,PG),e(PG,rir),e(sF,tir),e(X,air),e(X,lF),e(lF,Yhe),e(Yhe,nir),e(lF,sir),e(lF,$G),e($G,lir),e(lF,iir),e(X,dir),e(X,iF),e(iF,Khe),e(Khe,cir),e(iF,fir),e(iF,IG),e(IG,mir),e(iF,gir),e(X,hir),e(X,dF),e(dF,Zhe),e(Zhe,pir),e(dF,_ir),e(dF,DG),e(DG,uir),e(dF,bir),e(X,vir),e(X,cF),e(cF,epe),e(epe,Tir),e(cF,Fir),e(cF,jG),e(jG,Cir),e(cF,Mir),e(X,Eir),e(X,fF),e(fF,ope),e(ope,yir),e(fF,wir),e(fF,NG),e(NG,Air),e(fF,Lir),e(X,Bir),e(X,mF),e(mF,rpe),e(rpe,xir),e(mF,kir),e(mF,qG),e(qG,Rir),e(mF,Sir),e(X,Pir),e(X,gF),e(gF,tpe),e(tpe,$ir),e(gF,Iir),e(gF,GG),e(GG,Dir),e(gF,jir),e(X,Nir),e(X,hF),e(hF,ape),e(ape,qir),e(hF,Gir),e(hF,OG),e(OG,Oir),e(hF,Xir),e(X,Vir),e(X,pF),e(pF,npe),e(npe,zir),e(pF,Wir),e(pF,XG),e(XG,Qir),e(pF,Hir),e(vo,Uir),e(vo,spe),e(spe,Jir),e(vo,Yir),g(W6,vo,null),b(c,QBe,u),b(c,Mc,u),e(Mc,_F),e(_F,lpe),g(Q6,lpe,null),e(Mc,Kir),e(Mc,ipe),e(ipe,Zir),b(c,HBe,u),b(c,Cr,u),g(H6,Cr,null),e(Cr,edr),e(Cr,Ec),e(Ec,odr),e(Ec,dpe),e(dpe,rdr),e(Ec,tdr),e(Ec,cpe),e(cpe,adr),e(Ec,ndr),e(Cr,sdr),e(Cr,U6),e(U6,ldr),e(U6,fpe),e(fpe,idr),e(U6,ddr),e(Cr,cdr),e(Cr,pt),g(J6,pt,null),e(pt,fdr),e(pt,mpe),e(mpe,mdr),e(pt,gdr),e(pt,yc),e(yc,hdr),e(yc,gpe),e(gpe,pdr),e(yc,_dr),e(yc,hpe),e(hpe,udr),e(yc,bdr),e(pt,vdr),e(pt,ppe),e(ppe,Tdr),e(pt,Fdr),g(Y6,pt,null),e(Cr,Cdr),e(Cr,To),g(K6,To,null),e(To,Mdr),e(To,_pe),e(_pe,Edr),e(To,ydr),e(To,un),e(un,wdr),e(un,upe),e(upe,Adr),e(un,Ldr),e(un,bpe),e(bpe,Bdr),e(un,xdr),e(un,vpe),e(vpe,kdr),e(un,Rdr),e(To,Sdr),e(To,te),e(te,uF),e(uF,Tpe),e(Tpe,Pdr),e(uF,$dr),e(uF,VG),e(VG,Idr),e(uF,Ddr),e(te,jdr),e(te,bF),e(bF,Fpe),e(Fpe,Ndr),e(bF,qdr),e(bF,zG),e(zG,Gdr),e(bF,Odr),e(te,Xdr),e(te,vF),e(vF,Cpe),e(Cpe,Vdr),e(vF,zdr),e(vF,WG),e(WG,Wdr),e(vF,Qdr),e(te,Hdr),e(te,TF),e(TF,Mpe),e(Mpe,Udr),e(TF,Jdr),e(TF,QG),e(QG,Ydr),e(TF,Kdr),e(te,Zdr),e(te,FF),e(FF,Epe),e(Epe,ecr),e(FF,ocr),e(FF,HG),e(HG,rcr),e(FF,tcr),e(te,acr),e(te,CF),e(CF,ype),e(ype,ncr),e(CF,scr),e(CF,UG),e(UG,lcr),e(CF,icr),e(te,dcr),e(te,MF),e(MF,wpe),e(wpe,ccr),e(MF,fcr),e(MF,JG),e(JG,mcr),e(MF,gcr),e(te,hcr),e(te,EF),e(EF,Ape),e(Ape,pcr),e(EF,_cr),e(EF,YG),e(YG,ucr),e(EF,bcr),e(te,vcr),e(te,yF),e(yF,Lpe),e(Lpe,Tcr),e(yF,Fcr),e(yF,KG),e(KG,Ccr),e(yF,Mcr),e(te,Ecr),e(te,wF),e(wF,Bpe),e(Bpe,ycr),e(wF,wcr),e(wF,ZG),e(ZG,Acr),e(wF,Lcr),e(te,Bcr),e(te,AF),e(AF,xpe),e(xpe,xcr),e(AF,kcr),e(AF,eO),e(eO,Rcr),e(AF,Scr),e(te,Pcr),e(te,LF),e(LF,kpe),e(kpe,$cr),e(LF,Icr),e(LF,oO),e(oO,Dcr),e(LF,jcr),e(te,Ncr),e(te,BF),e(BF,Rpe),e(Rpe,qcr),e(BF,Gcr),e(BF,rO),e(rO,Ocr),e(BF,Xcr),e(te,Vcr),e(te,xF),e(xF,Spe),e(Spe,zcr),e(xF,Wcr),e(xF,tO),e(tO,Qcr),e(xF,Hcr),e(te,Ucr),e(te,kF),e(kF,Ppe),e(Ppe,Jcr),e(kF,Ycr),e(kF,aO),e(aO,Kcr),e(kF,Zcr),e(te,efr),e(te,RF),e(RF,$pe),e($pe,ofr),e(RF,rfr),e(RF,nO),e(nO,tfr),e(RF,afr),e(te,nfr),e(te,SF),e(SF,Ipe),e(Ipe,sfr),e(SF,lfr),e(SF,sO),e(sO,ifr),e(SF,dfr),e(To,cfr),e(To,Dpe),e(Dpe,ffr),e(To,mfr),g(Z6,To,null),b(c,UBe,u),b(c,wc,u),e(wc,PF),e(PF,jpe),g(eA,jpe,null),e(wc,gfr),e(wc,Npe),e(Npe,hfr),b(c,JBe,u),b(c,Mr,u),g(oA,Mr,null),e(Mr,pfr),e(Mr,Ac),e(Ac,_fr),e(Ac,qpe),e(qpe,ufr),e(Ac,bfr),e(Ac,Gpe),e(Gpe,vfr),e(Ac,Tfr),e(Mr,Ffr),e(Mr,rA),e(rA,Cfr),e(rA,Ope),e(Ope,Mfr),e(rA,Efr),e(Mr,yfr),e(Mr,_t),g(tA,_t,null),e(_t,wfr),e(_t,Xpe),e(Xpe,Afr),e(_t,Lfr),e(_t,Lc),e(Lc,Bfr),e(Lc,Vpe),e(Vpe,xfr),e(Lc,kfr),e(Lc,zpe),e(zpe,Rfr),e(Lc,Sfr),e(_t,Pfr),e(_t,Wpe),e(Wpe,$fr),e(_t,Ifr),g(aA,_t,null),e(Mr,Dfr),e(Mr,Fo),g(nA,Fo,null),e(Fo,jfr),e(Fo,Qpe),e(Qpe,Nfr),e(Fo,qfr),e(Fo,bn),e(bn,Gfr),e(bn,Hpe),e(Hpe,Ofr),e(bn,Xfr),e(bn,Upe),e(Upe,Vfr),e(bn,zfr),e(bn,Jpe),e(Jpe,Wfr),e(bn,Qfr),e(Fo,Hfr),e(Fo,Ype),e(Ype,$F),e($F,Kpe),e(Kpe,Ufr),e($F,Jfr),e($F,lO),e(lO,Yfr),e($F,Kfr),e(Fo,Zfr),e(Fo,Zpe),e(Zpe,emr),e(Fo,omr),g(sA,Fo,null),b(c,YBe,u),b(c,Bc,u),e(Bc,IF),e(IF,e_e),g(lA,e_e,null),e(Bc,rmr),e(Bc,o_e),e(o_e,tmr),b(c,KBe,u),b(c,Er,u),g(iA,Er,null),e(Er,amr),e(Er,xc),e(xc,nmr),e(xc,r_e),e(r_e,smr),e(xc,lmr),e(xc,t_e),e(t_e,imr),e(xc,dmr),e(Er,cmr),e(Er,dA),e(dA,fmr),e(dA,a_e),e(a_e,mmr),e(dA,gmr),e(Er,hmr),e(Er,ut),g(cA,ut,null),e(ut,pmr),e(ut,n_e),e(n_e,_mr),e(ut,umr),e(ut,kc),e(kc,bmr),e(kc,s_e),e(s_e,vmr),e(kc,Tmr),e(kc,l_e),e(l_e,Fmr),e(kc,Cmr),e(ut,Mmr),e(ut,i_e),e(i_e,Emr),e(ut,ymr),g(fA,ut,null),e(Er,wmr),e(Er,Co),g(mA,Co,null),e(Co,Amr),e(Co,d_e),e(d_e,Lmr),e(Co,Bmr),e(Co,vn),e(vn,xmr),e(vn,c_e),e(c_e,kmr),e(vn,Rmr),e(vn,f_e),e(f_e,Smr),e(vn,Pmr),e(vn,m_e),e(m_e,$mr),e(vn,Imr),e(Co,Dmr),e(Co,K),e(K,DF),e(DF,g_e),e(g_e,jmr),e(DF,Nmr),e(DF,iO),e(iO,qmr),e(DF,Gmr),e(K,Omr),e(K,jF),e(jF,h_e),e(h_e,Xmr),e(jF,Vmr),e(jF,dO),e(dO,zmr),e(jF,Wmr),e(K,Qmr),e(K,NF),e(NF,p_e),e(p_e,Hmr),e(NF,Umr),e(NF,cO),e(cO,Jmr),e(NF,Ymr),e(K,Kmr),e(K,qF),e(qF,__e),e(__e,Zmr),e(qF,egr),e(qF,fO),e(fO,ogr),e(qF,rgr),e(K,tgr),e(K,GF),e(GF,u_e),e(u_e,agr),e(GF,ngr),e(GF,mO),e(mO,sgr),e(GF,lgr),e(K,igr),e(K,OF),e(OF,b_e),e(b_e,dgr),e(OF,cgr),e(OF,gO),e(gO,fgr),e(OF,mgr),e(K,ggr),e(K,XF),e(XF,v_e),e(v_e,hgr),e(XF,pgr),e(XF,hO),e(hO,_gr),e(XF,ugr),e(K,bgr),e(K,VF),e(VF,T_e),e(T_e,vgr),e(VF,Tgr),e(VF,pO),e(pO,Fgr),e(VF,Cgr),e(K,Mgr),e(K,zF),e(zF,F_e),e(F_e,Egr),e(zF,ygr),e(zF,_O),e(_O,wgr),e(zF,Agr),e(K,Lgr),e(K,WF),e(WF,C_e),e(C_e,Bgr),e(WF,xgr),e(WF,uO),e(uO,kgr),e(WF,Rgr),e(K,Sgr),e(K,QF),e(QF,M_e),e(M_e,Pgr),e(QF,$gr),e(QF,bO),e(bO,Igr),e(QF,Dgr),e(K,jgr),e(K,HF),e(HF,E_e),e(E_e,Ngr),e(HF,qgr),e(HF,vO),e(vO,Ggr),e(HF,Ogr),e(K,Xgr),e(K,UF),e(UF,y_e),e(y_e,Vgr),e(UF,zgr),e(UF,TO),e(TO,Wgr),e(UF,Qgr),e(K,Hgr),e(K,JF),e(JF,w_e),e(w_e,Ugr),e(JF,Jgr),e(JF,FO),e(FO,Ygr),e(JF,Kgr),e(K,Zgr),e(K,YF),e(YF,A_e),e(A_e,ehr),e(YF,ohr),e(YF,CO),e(CO,rhr),e(YF,thr),e(K,ahr),e(K,KF),e(KF,L_e),e(L_e,nhr),e(KF,shr),e(KF,MO),e(MO,lhr),e(KF,ihr),e(K,dhr),e(K,ZF),e(ZF,B_e),e(B_e,chr),e(ZF,fhr),e(ZF,EO),e(EO,mhr),e(ZF,ghr),e(K,hhr),e(K,e9),e(e9,x_e),e(x_e,phr),e(e9,_hr),e(e9,yO),e(yO,uhr),e(e9,bhr),e(K,vhr),e(K,o9),e(o9,k_e),e(k_e,Thr),e(o9,Fhr),e(o9,wO),e(wO,Chr),e(o9,Mhr),e(K,Ehr),e(K,r9),e(r9,R_e),e(R_e,yhr),e(r9,whr),e(r9,AO),e(AO,Ahr),e(r9,Lhr),e(Co,Bhr),e(Co,S_e),e(S_e,xhr),e(Co,khr),g(gA,Co,null),b(c,ZBe,u),b(c,Rc,u),e(Rc,t9),e(t9,P_e),g(hA,P_e,null),e(Rc,Rhr),e(Rc,$_e),e($_e,Shr),b(c,exe,u),b(c,yr,u),g(pA,yr,null),e(yr,Phr),e(yr,Sc),e(Sc,$hr),e(Sc,I_e),e(I_e,Ihr),e(Sc,Dhr),e(Sc,D_e),e(D_e,jhr),e(Sc,Nhr),e(yr,qhr),e(yr,_A),e(_A,Ghr),e(_A,j_e),e(j_e,Ohr),e(_A,Xhr),e(yr,Vhr),e(yr,bt),g(uA,bt,null),e(bt,zhr),e(bt,N_e),e(N_e,Whr),e(bt,Qhr),e(bt,Pc),e(Pc,Hhr),e(Pc,q_e),e(q_e,Uhr),e(Pc,Jhr),e(Pc,G_e),e(G_e,Yhr),e(Pc,Khr),e(bt,Zhr),e(bt,O_e),e(O_e,epr),e(bt,opr),g(bA,bt,null),e(yr,rpr),e(yr,Mo),g(vA,Mo,null),e(Mo,tpr),e(Mo,X_e),e(X_e,apr),e(Mo,npr),e(Mo,Tn),e(Tn,spr),e(Tn,V_e),e(V_e,lpr),e(Tn,ipr),e(Tn,z_e),e(z_e,dpr),e(Tn,cpr),e(Tn,W_e),e(W_e,fpr),e(Tn,mpr),e(Mo,gpr),e(Mo,Z),e(Z,a9),e(a9,Q_e),e(Q_e,hpr),e(a9,ppr),e(a9,LO),e(LO,_pr),e(a9,upr),e(Z,bpr),e(Z,n9),e(n9,H_e),e(H_e,vpr),e(n9,Tpr),e(n9,BO),e(BO,Fpr),e(n9,Cpr),e(Z,Mpr),e(Z,s9),e(s9,U_e),e(U_e,Epr),e(s9,ypr),e(s9,xO),e(xO,wpr),e(s9,Apr),e(Z,Lpr),e(Z,l9),e(l9,J_e),e(J_e,Bpr),e(l9,xpr),e(l9,kO),e(kO,kpr),e(l9,Rpr),e(Z,Spr),e(Z,i9),e(i9,Y_e),e(Y_e,Ppr),e(i9,$pr),e(i9,RO),e(RO,Ipr),e(i9,Dpr),e(Z,jpr),e(Z,d9),e(d9,K_e),e(K_e,Npr),e(d9,qpr),e(d9,SO),e(SO,Gpr),e(d9,Opr),e(Z,Xpr),e(Z,c9),e(c9,Z_e),e(Z_e,Vpr),e(c9,zpr),e(c9,PO),e(PO,Wpr),e(c9,Qpr),e(Z,Hpr),e(Z,f9),e(f9,eue),e(eue,Upr),e(f9,Jpr),e(f9,$O),e($O,Ypr),e(f9,Kpr),e(Z,Zpr),e(Z,m9),e(m9,oue),e(oue,e_r),e(m9,o_r),e(m9,IO),e(IO,r_r),e(m9,t_r),e(Z,a_r),e(Z,g9),e(g9,rue),e(rue,n_r),e(g9,s_r),e(g9,DO),e(DO,l_r),e(g9,i_r),e(Z,d_r),e(Z,h9),e(h9,tue),e(tue,c_r),e(h9,f_r),e(h9,jO),e(jO,m_r),e(h9,g_r),e(Z,h_r),e(Z,p9),e(p9,aue),e(aue,p_r),e(p9,__r),e(p9,NO),e(NO,u_r),e(p9,b_r),e(Z,v_r),e(Z,_9),e(_9,nue),e(nue,T_r),e(_9,F_r),e(_9,qO),e(qO,C_r),e(_9,M_r),e(Z,E_r),e(Z,u9),e(u9,sue),e(sue,y_r),e(u9,w_r),e(u9,GO),e(GO,A_r),e(u9,L_r),e(Z,B_r),e(Z,b9),e(b9,lue),e(lue,x_r),e(b9,k_r),e(b9,OO),e(OO,R_r),e(b9,S_r),e(Z,P_r),e(Z,v9),e(v9,iue),e(iue,$_r),e(v9,I_r),e(v9,XO),e(XO,D_r),e(v9,j_r),e(Z,N_r),e(Z,T9),e(T9,due),e(due,q_r),e(T9,G_r),e(T9,VO),e(VO,O_r),e(T9,X_r),e(Z,V_r),e(Z,F9),e(F9,cue),e(cue,z_r),e(F9,W_r),e(F9,zO),e(zO,Q_r),e(F9,H_r),e(Z,U_r),e(Z,C9),e(C9,fue),e(fue,J_r),e(C9,Y_r),e(C9,WO),e(WO,K_r),e(C9,Z_r),e(Mo,eur),e(Mo,mue),e(mue,our),e(Mo,rur),g(TA,Mo,null),b(c,oxe,u),b(c,$c,u),e($c,M9),e(M9,gue),g(FA,gue,null),e($c,tur),e($c,hue),e(hue,aur),b(c,rxe,u),b(c,wr,u),g(CA,wr,null),e(wr,nur),e(wr,Ic),e(Ic,sur),e(Ic,pue),e(pue,lur),e(Ic,iur),e(Ic,_ue),e(_ue,dur),e(Ic,cur),e(wr,fur),e(wr,MA),e(MA,mur),e(MA,uue),e(uue,gur),e(MA,hur),e(wr,pur),e(wr,vt),g(EA,vt,null),e(vt,_ur),e(vt,bue),e(bue,uur),e(vt,bur),e(vt,Dc),e(Dc,vur),e(Dc,vue),e(vue,Tur),e(Dc,Fur),e(Dc,Tue),e(Tue,Cur),e(Dc,Mur),e(vt,Eur),e(vt,Fue),e(Fue,yur),e(vt,wur),g(yA,vt,null),e(wr,Aur),e(wr,Eo),g(wA,Eo,null),e(Eo,Lur),e(Eo,Cue),e(Cue,Bur),e(Eo,xur),e(Eo,Fn),e(Fn,kur),e(Fn,Mue),e(Mue,Rur),e(Fn,Sur),e(Fn,Eue),e(Eue,Pur),e(Fn,$ur),e(Fn,yue),e(yue,Iur),e(Fn,Dur),e(Eo,jur),e(Eo,wue),e(wue,E9),e(E9,Aue),e(Aue,Nur),e(E9,qur),e(E9,QO),e(QO,Gur),e(E9,Our),e(Eo,Xur),e(Eo,Lue),e(Lue,Vur),e(Eo,zur),g(AA,Eo,null),b(c,txe,u),b(c,jc,u),e(jc,y9),e(y9,Bue),g(LA,Bue,null),e(jc,Wur),e(jc,xue),e(xue,Qur),b(c,axe,u),b(c,Ar,u),g(BA,Ar,null),e(Ar,Hur),e(Ar,Nc),e(Nc,Uur),e(Nc,kue),e(kue,Jur),e(Nc,Yur),e(Nc,Rue),e(Rue,Kur),e(Nc,Zur),e(Ar,e1r),e(Ar,xA),e(xA,o1r),e(xA,Sue),e(Sue,r1r),e(xA,t1r),e(Ar,a1r),e(Ar,Tt),g(kA,Tt,null),e(Tt,n1r),e(Tt,Pue),e(Pue,s1r),e(Tt,l1r),e(Tt,qc),e(qc,i1r),e(qc,$ue),e($ue,d1r),e(qc,c1r),e(qc,Iue),e(Iue,f1r),e(qc,m1r),e(Tt,g1r),e(Tt,Due),e(Due,h1r),e(Tt,p1r),g(RA,Tt,null),e(Ar,_1r),e(Ar,yo),g(SA,yo,null),e(yo,u1r),e(yo,jue),e(jue,b1r),e(yo,v1r),e(yo,Cn),e(Cn,T1r),e(Cn,Nue),e(Nue,F1r),e(Cn,C1r),e(Cn,que),e(que,M1r),e(Cn,E1r),e(Cn,Gue),e(Gue,y1r),e(Cn,w1r),e(yo,A1r),e(yo,Oue),e(Oue,w9),e(w9,Xue),e(Xue,L1r),e(w9,B1r),e(w9,HO),e(HO,x1r),e(w9,k1r),e(yo,R1r),e(yo,Vue),e(Vue,S1r),e(yo,P1r),g(PA,yo,null),b(c,nxe,u),b(c,Gc,u),e(Gc,A9),e(A9,zue),g($A,zue,null),e(Gc,$1r),e(Gc,Wue),e(Wue,I1r),b(c,sxe,u),b(c,Lr,u),g(IA,Lr,null),e(Lr,D1r),e(Lr,Oc),e(Oc,j1r),e(Oc,Que),e(Que,N1r),e(Oc,q1r),e(Oc,Hue),e(Hue,G1r),e(Oc,O1r),e(Lr,X1r),e(Lr,DA),e(DA,V1r),e(DA,Uue),e(Uue,z1r),e(DA,W1r),e(Lr,Q1r),e(Lr,Ft),g(jA,Ft,null),e(Ft,H1r),e(Ft,Jue),e(Jue,U1r),e(Ft,J1r),e(Ft,Xc),e(Xc,Y1r),e(Xc,Yue),e(Yue,K1r),e(Xc,Z1r),e(Xc,Kue),e(Kue,ebr),e(Xc,obr),e(Ft,rbr),e(Ft,Zue),e(Zue,tbr),e(Ft,abr),g(NA,Ft,null),e(Lr,nbr),e(Lr,wo),g(qA,wo,null),e(wo,sbr),e(wo,e1e),e(e1e,lbr),e(wo,ibr),e(wo,Mn),e(Mn,dbr),e(Mn,o1e),e(o1e,cbr),e(Mn,fbr),e(Mn,r1e),e(r1e,mbr),e(Mn,gbr),e(Mn,t1e),e(t1e,hbr),e(Mn,pbr),e(wo,_br),e(wo,z),e(z,L9),e(L9,a1e),e(a1e,ubr),e(L9,bbr),e(L9,UO),e(UO,vbr),e(L9,Tbr),e(z,Fbr),e(z,B9),e(B9,n1e),e(n1e,Cbr),e(B9,Mbr),e(B9,JO),e(JO,Ebr),e(B9,ybr),e(z,wbr),e(z,x9),e(x9,s1e),e(s1e,Abr),e(x9,Lbr),e(x9,YO),e(YO,Bbr),e(x9,xbr),e(z,kbr),e(z,k9),e(k9,l1e),e(l1e,Rbr),e(k9,Sbr),e(k9,KO),e(KO,Pbr),e(k9,$br),e(z,Ibr),e(z,R9),e(R9,i1e),e(i1e,Dbr),e(R9,jbr),e(R9,ZO),e(ZO,Nbr),e(R9,qbr),e(z,Gbr),e(z,S9),e(S9,d1e),e(d1e,Obr),e(S9,Xbr),e(S9,eX),e(eX,Vbr),e(S9,zbr),e(z,Wbr),e(z,P9),e(P9,c1e),e(c1e,Qbr),e(P9,Hbr),e(P9,oX),e(oX,Ubr),e(P9,Jbr),e(z,Ybr),e(z,$9),e($9,f1e),e(f1e,Kbr),e($9,Zbr),e($9,rX),e(rX,e3r),e($9,o3r),e(z,r3r),e(z,I9),e(I9,m1e),e(m1e,t3r),e(I9,a3r),e(I9,tX),e(tX,n3r),e(I9,s3r),e(z,l3r),e(z,D9),e(D9,g1e),e(g1e,i3r),e(D9,d3r),e(D9,aX),e(aX,c3r),e(D9,f3r),e(z,m3r),e(z,j9),e(j9,h1e),e(h1e,g3r),e(j9,h3r),e(j9,nX),e(nX,p3r),e(j9,_3r),e(z,u3r),e(z,N9),e(N9,p1e),e(p1e,b3r),e(N9,v3r),e(N9,sX),e(sX,T3r),e(N9,F3r),e(z,C3r),e(z,q9),e(q9,_1e),e(_1e,M3r),e(q9,E3r),e(q9,lX),e(lX,y3r),e(q9,w3r),e(z,A3r),e(z,G9),e(G9,u1e),e(u1e,L3r),e(G9,B3r),e(G9,iX),e(iX,x3r),e(G9,k3r),e(z,R3r),e(z,O9),e(O9,b1e),e(b1e,S3r),e(O9,P3r),e(O9,dX),e(dX,$3r),e(O9,I3r),e(z,D3r),e(z,X9),e(X9,v1e),e(v1e,j3r),e(X9,N3r),e(X9,cX),e(cX,q3r),e(X9,G3r),e(z,O3r),e(z,V9),e(V9,T1e),e(T1e,X3r),e(V9,V3r),e(V9,fX),e(fX,z3r),e(V9,W3r),e(z,Q3r),e(z,z9),e(z9,F1e),e(F1e,H3r),e(z9,U3r),e(z9,mX),e(mX,J3r),e(z9,Y3r),e(z,K3r),e(z,W9),e(W9,C1e),e(C1e,Z3r),e(W9,e5r),e(W9,gX),e(gX,o5r),e(W9,r5r),e(z,t5r),e(z,Q9),e(Q9,M1e),e(M1e,a5r),e(Q9,n5r),e(Q9,hX),e(hX,s5r),e(Q9,l5r),e(z,i5r),e(z,H9),e(H9,E1e),e(E1e,d5r),e(H9,c5r),e(H9,pX),e(pX,f5r),e(H9,m5r),e(z,g5r),e(z,U9),e(U9,y1e),e(y1e,h5r),e(U9,p5r),e(U9,_X),e(_X,_5r),e(U9,u5r),e(z,b5r),e(z,J9),e(J9,w1e),e(w1e,v5r),e(J9,T5r),e(J9,uX),e(uX,F5r),e(J9,C5r),e(z,M5r),e(z,Y9),e(Y9,A1e),e(A1e,E5r),e(Y9,y5r),e(Y9,bX),e(bX,w5r),e(Y9,A5r),e(wo,L5r),e(wo,L1e),e(L1e,B5r),e(wo,x5r),g(GA,wo,null),b(c,lxe,u),b(c,Vc,u),e(Vc,K9),e(K9,B1e),g(OA,B1e,null),e(Vc,k5r),e(Vc,x1e),e(x1e,R5r),b(c,ixe,u),b(c,Br,u),g(XA,Br,null),e(Br,S5r),e(Br,zc),e(zc,P5r),e(zc,k1e),e(k1e,$5r),e(zc,I5r),e(zc,R1e),e(R1e,D5r),e(zc,j5r),e(Br,N5r),e(Br,VA),e(VA,q5r),e(VA,S1e),e(S1e,G5r),e(VA,O5r),e(Br,X5r),e(Br,Ct),g(zA,Ct,null),e(Ct,V5r),e(Ct,P1e),e(P1e,z5r),e(Ct,W5r),e(Ct,Wc),e(Wc,Q5r),e(Wc,$1e),e($1e,H5r),e(Wc,U5r),e(Wc,I1e),e(I1e,J5r),e(Wc,Y5r),e(Ct,K5r),e(Ct,D1e),e(D1e,Z5r),e(Ct,e2r),g(WA,Ct,null),e(Br,o2r),e(Br,Ao),g(QA,Ao,null),e(Ao,r2r),e(Ao,j1e),e(j1e,t2r),e(Ao,a2r),e(Ao,En),e(En,n2r),e(En,N1e),e(N1e,s2r),e(En,l2r),e(En,q1e),e(q1e,i2r),e(En,d2r),e(En,G1e),e(G1e,c2r),e(En,f2r),e(Ao,m2r),e(Ao,yn),e(yn,Z9),e(Z9,O1e),e(O1e,g2r),e(Z9,h2r),e(Z9,vX),e(vX,p2r),e(Z9,_2r),e(yn,u2r),e(yn,eC),e(eC,X1e),e(X1e,b2r),e(eC,v2r),e(eC,TX),e(TX,T2r),e(eC,F2r),e(yn,C2r),e(yn,oC),e(oC,V1e),e(V1e,M2r),e(oC,E2r),e(oC,FX),e(FX,y2r),e(oC,w2r),e(yn,A2r),e(yn,rC),e(rC,z1e),e(z1e,L2r),e(rC,B2r),e(rC,CX),e(CX,x2r),e(rC,k2r),e(Ao,R2r),e(Ao,W1e),e(W1e,S2r),e(Ao,P2r),g(HA,Ao,null),b(c,dxe,u),b(c,Qc,u),e(Qc,tC),e(tC,Q1e),g(UA,Q1e,null),e(Qc,$2r),e(Qc,H1e),e(H1e,I2r),b(c,cxe,u),b(c,xr,u),g(JA,xr,null),e(xr,D2r),e(xr,Hc),e(Hc,j2r),e(Hc,U1e),e(U1e,N2r),e(Hc,q2r),e(Hc,J1e),e(J1e,G2r),e(Hc,O2r),e(xr,X2r),e(xr,YA),e(YA,V2r),e(YA,Y1e),e(Y1e,z2r),e(YA,W2r),e(xr,Q2r),e(xr,Mt),g(KA,Mt,null),e(Mt,H2r),e(Mt,K1e),e(K1e,U2r),e(Mt,J2r),e(Mt,Uc),e(Uc,Y2r),e(Uc,Z1e),e(Z1e,K2r),e(Uc,Z2r),e(Uc,ebe),e(ebe,evr),e(Uc,ovr),e(Mt,rvr),e(Mt,obe),e(obe,tvr),e(Mt,avr),g(ZA,Mt,null),e(xr,nvr),e(xr,Lo),g(e0,Lo,null),e(Lo,svr),e(Lo,rbe),e(rbe,lvr),e(Lo,ivr),e(Lo,wn),e(wn,dvr),e(wn,tbe),e(tbe,cvr),e(wn,fvr),e(wn,abe),e(abe,mvr),e(wn,gvr),e(wn,nbe),e(nbe,hvr),e(wn,pvr),e(Lo,_vr),e(Lo,fe),e(fe,aC),e(aC,sbe),e(sbe,uvr),e(aC,bvr),e(aC,MX),e(MX,vvr),e(aC,Tvr),e(fe,Fvr),e(fe,nC),e(nC,lbe),e(lbe,Cvr),e(nC,Mvr),e(nC,EX),e(EX,Evr),e(nC,yvr),e(fe,wvr),e(fe,sC),e(sC,ibe),e(ibe,Avr),e(sC,Lvr),e(sC,yX),e(yX,Bvr),e(sC,xvr),e(fe,kvr),e(fe,lC),e(lC,dbe),e(dbe,Rvr),e(lC,Svr),e(lC,wX),e(wX,Pvr),e(lC,$vr),e(fe,Ivr),e(fe,iC),e(iC,cbe),e(cbe,Dvr),e(iC,jvr),e(iC,AX),e(AX,Nvr),e(iC,qvr),e(fe,Gvr),e(fe,dC),e(dC,fbe),e(fbe,Ovr),e(dC,Xvr),e(dC,LX),e(LX,Vvr),e(dC,zvr),e(fe,Wvr),e(fe,cC),e(cC,mbe),e(mbe,Qvr),e(cC,Hvr),e(cC,BX),e(BX,Uvr),e(cC,Jvr),e(fe,Yvr),e(fe,fC),e(fC,gbe),e(gbe,Kvr),e(fC,Zvr),e(fC,xX),e(xX,eTr),e(fC,oTr),e(fe,rTr),e(fe,mC),e(mC,hbe),e(hbe,tTr),e(mC,aTr),e(mC,kX),e(kX,nTr),e(mC,sTr),e(fe,lTr),e(fe,gC),e(gC,pbe),e(pbe,iTr),e(gC,dTr),e(gC,RX),e(RX,cTr),e(gC,fTr),e(fe,mTr),e(fe,hC),e(hC,_be),e(_be,gTr),e(hC,hTr),e(hC,SX),e(SX,pTr),e(hC,_Tr),e(Lo,uTr),e(Lo,ube),e(ube,bTr),e(Lo,vTr),g(o0,Lo,null),b(c,fxe,u),b(c,Jc,u),e(Jc,pC),e(pC,bbe),g(r0,bbe,null),e(Jc,TTr),e(Jc,vbe),e(vbe,FTr),b(c,mxe,u),b(c,kr,u),g(t0,kr,null),e(kr,CTr),e(kr,Yc),e(Yc,MTr),e(Yc,Tbe),e(Tbe,ETr),e(Yc,yTr),e(Yc,Fbe),e(Fbe,wTr),e(Yc,ATr),e(kr,LTr),e(kr,a0),e(a0,BTr),e(a0,Cbe),e(Cbe,xTr),e(a0,kTr),e(kr,RTr),e(kr,Et),g(n0,Et,null),e(Et,STr),e(Et,Mbe),e(Mbe,PTr),e(Et,$Tr),e(Et,Kc),e(Kc,ITr),e(Kc,Ebe),e(Ebe,DTr),e(Kc,jTr),e(Kc,ybe),e(ybe,NTr),e(Kc,qTr),e(Et,GTr),e(Et,wbe),e(wbe,OTr),e(Et,XTr),g(s0,Et,null),e(kr,VTr),e(kr,Bo),g(l0,Bo,null),e(Bo,zTr),e(Bo,Abe),e(Abe,WTr),e(Bo,QTr),e(Bo,An),e(An,HTr),e(An,Lbe),e(Lbe,UTr),e(An,JTr),e(An,Bbe),e(Bbe,YTr),e(An,KTr),e(An,xbe),e(xbe,ZTr),e(An,eFr),e(Bo,oFr),e(Bo,ve),e(ve,_C),e(_C,kbe),e(kbe,rFr),e(_C,tFr),e(_C,PX),e(PX,aFr),e(_C,nFr),e(ve,sFr),e(ve,uC),e(uC,Rbe),e(Rbe,lFr),e(uC,iFr),e(uC,$X),e($X,dFr),e(uC,cFr),e(ve,fFr),e(ve,bC),e(bC,Sbe),e(Sbe,mFr),e(bC,gFr),e(bC,IX),e(IX,hFr),e(bC,pFr),e(ve,_Fr),e(ve,vC),e(vC,Pbe),e(Pbe,uFr),e(vC,bFr),e(vC,DX),e(DX,vFr),e(vC,TFr),e(ve,FFr),e(ve,TC),e(TC,$be),e($be,CFr),e(TC,MFr),e(TC,jX),e(jX,EFr),e(TC,yFr),e(ve,wFr),e(ve,FC),e(FC,Ibe),e(Ibe,AFr),e(FC,LFr),e(FC,NX),e(NX,BFr),e(FC,xFr),e(ve,kFr),e(ve,CC),e(CC,Dbe),e(Dbe,RFr),e(CC,SFr),e(CC,qX),e(qX,PFr),e(CC,$Fr),e(ve,IFr),e(ve,MC),e(MC,jbe),e(jbe,DFr),e(MC,jFr),e(MC,GX),e(GX,NFr),e(MC,qFr),e(ve,GFr),e(ve,EC),e(EC,Nbe),e(Nbe,OFr),e(EC,XFr),e(EC,OX),e(OX,VFr),e(EC,zFr),e(Bo,WFr),e(Bo,qbe),e(qbe,QFr),e(Bo,HFr),g(i0,Bo,null),b(c,gxe,u),b(c,Zc,u),e(Zc,yC),e(yC,Gbe),g(d0,Gbe,null),e(Zc,UFr),e(Zc,Obe),e(Obe,JFr),b(c,hxe,u),b(c,Rr,u),g(c0,Rr,null),e(Rr,YFr),e(Rr,ef),e(ef,KFr),e(ef,Xbe),e(Xbe,ZFr),e(ef,e9r),e(ef,Vbe),e(Vbe,o9r),e(ef,r9r),e(Rr,t9r),e(Rr,f0),e(f0,a9r),e(f0,zbe),e(zbe,n9r),e(f0,s9r),e(Rr,l9r),e(Rr,yt),g(m0,yt,null),e(yt,i9r),e(yt,Wbe),e(Wbe,d9r),e(yt,c9r),e(yt,of),e(of,f9r),e(of,Qbe),e(Qbe,m9r),e(of,g9r),e(of,Hbe),e(Hbe,h9r),e(of,p9r),e(yt,_9r),e(yt,Ube),e(Ube,u9r),e(yt,b9r),g(g0,yt,null),e(Rr,v9r),e(Rr,xo),g(h0,xo,null),e(xo,T9r),e(xo,Jbe),e(Jbe,F9r),e(xo,C9r),e(xo,Ln),e(Ln,M9r),e(Ln,Ybe),e(Ybe,E9r),e(Ln,y9r),e(Ln,Kbe),e(Kbe,w9r),e(Ln,A9r),e(Ln,Zbe),e(Zbe,L9r),e(Ln,B9r),e(xo,x9r),e(xo,Te),e(Te,wC),e(wC,e3e),e(e3e,k9r),e(wC,R9r),e(wC,XX),e(XX,S9r),e(wC,P9r),e(Te,$9r),e(Te,AC),e(AC,o3e),e(o3e,I9r),e(AC,D9r),e(AC,VX),e(VX,j9r),e(AC,N9r),e(Te,q9r),e(Te,LC),e(LC,r3e),e(r3e,G9r),e(LC,O9r),e(LC,zX),e(zX,X9r),e(LC,V9r),e(Te,z9r),e(Te,BC),e(BC,t3e),e(t3e,W9r),e(BC,Q9r),e(BC,WX),e(WX,H9r),e(BC,U9r),e(Te,J9r),e(Te,xC),e(xC,a3e),e(a3e,Y9r),e(xC,K9r),e(xC,QX),e(QX,Z9r),e(xC,eCr),e(Te,oCr),e(Te,kC),e(kC,n3e),e(n3e,rCr),e(kC,tCr),e(kC,HX),e(HX,aCr),e(kC,nCr),e(Te,sCr),e(Te,RC),e(RC,s3e),e(s3e,lCr),e(RC,iCr),e(RC,UX),e(UX,dCr),e(RC,cCr),e(Te,fCr),e(Te,SC),e(SC,l3e),e(l3e,mCr),e(SC,gCr),e(SC,JX),e(JX,hCr),e(SC,pCr),e(Te,_Cr),e(Te,PC),e(PC,i3e),e(i3e,uCr),e(PC,bCr),e(PC,YX),e(YX,vCr),e(PC,TCr),e(xo,FCr),e(xo,d3e),e(d3e,CCr),e(xo,MCr),g(p0,xo,null),b(c,pxe,u),b(c,rf,u),e(rf,$C),e($C,c3e),g(_0,c3e,null),e(rf,ECr),e(rf,f3e),e(f3e,yCr),b(c,_xe,u),b(c,Sr,u),g(u0,Sr,null),e(Sr,wCr),e(Sr,tf),e(tf,ACr),e(tf,m3e),e(m3e,LCr),e(tf,BCr),e(tf,g3e),e(g3e,xCr),e(tf,kCr),e(Sr,RCr),e(Sr,b0),e(b0,SCr),e(b0,h3e),e(h3e,PCr),e(b0,$Cr),e(Sr,ICr),e(Sr,wt),g(v0,wt,null),e(wt,DCr),e(wt,p3e),e(p3e,jCr),e(wt,NCr),e(wt,af),e(af,qCr),e(af,_3e),e(_3e,GCr),e(af,OCr),e(af,u3e),e(u3e,XCr),e(af,VCr),e(wt,zCr),e(wt,b3e),e(b3e,WCr),e(wt,QCr),g(T0,wt,null),e(Sr,HCr),e(Sr,ko),g(F0,ko,null),e(ko,UCr),e(ko,v3e),e(v3e,JCr),e(ko,YCr),e(ko,Bn),e(Bn,KCr),e(Bn,T3e),e(T3e,ZCr),e(Bn,e4r),e(Bn,F3e),e(F3e,o4r),e(Bn,r4r),e(Bn,C3e),e(C3e,t4r),e(Bn,a4r),e(ko,n4r),e(ko,Fe),e(Fe,IC),e(IC,M3e),e(M3e,s4r),e(IC,l4r),e(IC,KX),e(KX,i4r),e(IC,d4r),e(Fe,c4r),e(Fe,DC),e(DC,E3e),e(E3e,f4r),e(DC,m4r),e(DC,ZX),e(ZX,g4r),e(DC,h4r),e(Fe,p4r),e(Fe,jC),e(jC,y3e),e(y3e,_4r),e(jC,u4r),e(jC,eV),e(eV,b4r),e(jC,v4r),e(Fe,T4r),e(Fe,NC),e(NC,w3e),e(w3e,F4r),e(NC,C4r),e(NC,oV),e(oV,M4r),e(NC,E4r),e(Fe,y4r),e(Fe,qC),e(qC,A3e),e(A3e,w4r),e(qC,A4r),e(qC,rV),e(rV,L4r),e(qC,B4r),e(Fe,x4r),e(Fe,GC),e(GC,L3e),e(L3e,k4r),e(GC,R4r),e(GC,tV),e(tV,S4r),e(GC,P4r),e(Fe,$4r),e(Fe,OC),e(OC,B3e),e(B3e,I4r),e(OC,D4r),e(OC,aV),e(aV,j4r),e(OC,N4r),e(Fe,q4r),e(Fe,XC),e(XC,x3e),e(x3e,G4r),e(XC,O4r),e(XC,nV),e(nV,X4r),e(XC,V4r),e(Fe,z4r),e(Fe,VC),e(VC,k3e),e(k3e,W4r),e(VC,Q4r),e(VC,sV),e(sV,H4r),e(VC,U4r),e(ko,J4r),e(ko,R3e),e(R3e,Y4r),e(ko,K4r),g(C0,ko,null),b(c,uxe,u),b(c,nf,u),e(nf,zC),e(zC,S3e),g(M0,S3e,null),e(nf,Z4r),e(nf,P3e),e(P3e,eMr),b(c,bxe,u),b(c,Pr,u),g(E0,Pr,null),e(Pr,oMr),e(Pr,sf),e(sf,rMr),e(sf,$3e),e($3e,tMr),e(sf,aMr),e(sf,I3e),e(I3e,nMr),e(sf,sMr),e(Pr,lMr),e(Pr,y0),e(y0,iMr),e(y0,D3e),e(D3e,dMr),e(y0,cMr),e(Pr,fMr),e(Pr,At),g(w0,At,null),e(At,mMr),e(At,j3e),e(j3e,gMr),e(At,hMr),e(At,lf),e(lf,pMr),e(lf,N3e),e(N3e,_Mr),e(lf,uMr),e(lf,q3e),e(q3e,bMr),e(lf,vMr),e(At,TMr),e(At,G3e),e(G3e,FMr),e(At,CMr),g(A0,At,null),e(Pr,MMr),e(Pr,Ro),g(L0,Ro,null),e(Ro,EMr),e(Ro,O3e),e(O3e,yMr),e(Ro,wMr),e(Ro,xn),e(xn,AMr),e(xn,X3e),e(X3e,LMr),e(xn,BMr),e(xn,V3e),e(V3e,xMr),e(xn,kMr),e(xn,z3e),e(z3e,RMr),e(xn,SMr),e(Ro,PMr),e(Ro,Ce),e(Ce,WC),e(WC,W3e),e(W3e,$Mr),e(WC,IMr),e(WC,lV),e(lV,DMr),e(WC,jMr),e(Ce,NMr),e(Ce,QC),e(QC,Q3e),e(Q3e,qMr),e(QC,GMr),e(QC,iV),e(iV,OMr),e(QC,XMr),e(Ce,VMr),e(Ce,HC),e(HC,H3e),e(H3e,zMr),e(HC,WMr),e(HC,dV),e(dV,QMr),e(HC,HMr),e(Ce,UMr),e(Ce,UC),e(UC,U3e),e(U3e,JMr),e(UC,YMr),e(UC,cV),e(cV,KMr),e(UC,ZMr),e(Ce,eEr),e(Ce,JC),e(JC,J3e),e(J3e,oEr),e(JC,rEr),e(JC,fV),e(fV,tEr),e(JC,aEr),e(Ce,nEr),e(Ce,YC),e(YC,Y3e),e(Y3e,sEr),e(YC,lEr),e(YC,mV),e(mV,iEr),e(YC,dEr),e(Ce,cEr),e(Ce,KC),e(KC,K3e),e(K3e,fEr),e(KC,mEr),e(KC,gV),e(gV,gEr),e(KC,hEr),e(Ce,pEr),e(Ce,ZC),e(ZC,Z3e),e(Z3e,_Er),e(ZC,uEr),e(ZC,hV),e(hV,bEr),e(ZC,vEr),e(Ce,TEr),e(Ce,e4),e(e4,e5e),e(e5e,FEr),e(e4,CEr),e(e4,pV),e(pV,MEr),e(e4,EEr),e(Ro,yEr),e(Ro,o5e),e(o5e,wEr),e(Ro,AEr),g(B0,Ro,null),b(c,vxe,u),b(c,df,u),e(df,o4),e(o4,r5e),g(x0,r5e,null),e(df,LEr),e(df,t5e),e(t5e,BEr),b(c,Txe,u),b(c,$r,u),g(k0,$r,null),e($r,xEr),e($r,cf),e(cf,kEr),e(cf,a5e),e(a5e,REr),e(cf,SEr),e(cf,n5e),e(n5e,PEr),e(cf,$Er),e($r,IEr),e($r,R0),e(R0,DEr),e(R0,s5e),e(s5e,jEr),e(R0,NEr),e($r,qEr),e($r,Lt),g(S0,Lt,null),e(Lt,GEr),e(Lt,l5e),e(l5e,OEr),e(Lt,XEr),e(Lt,ff),e(ff,VEr),e(ff,i5e),e(i5e,zEr),e(ff,WEr),e(ff,d5e),e(d5e,QEr),e(ff,HEr),e(Lt,UEr),e(Lt,c5e),e(c5e,JEr),e(Lt,YEr),g(P0,Lt,null),e($r,KEr),e($r,So),g($0,So,null),e(So,ZEr),e(So,f5e),e(f5e,eyr),e(So,oyr),e(So,kn),e(kn,ryr),e(kn,m5e),e(m5e,tyr),e(kn,ayr),e(kn,g5e),e(g5e,nyr),e(kn,syr),e(kn,h5e),e(h5e,lyr),e(kn,iyr),e(So,dyr),e(So,so),e(so,r4),e(r4,p5e),e(p5e,cyr),e(r4,fyr),e(r4,_V),e(_V,myr),e(r4,gyr),e(so,hyr),e(so,t4),e(t4,_5e),e(_5e,pyr),e(t4,_yr),e(t4,uV),e(uV,uyr),e(t4,byr),e(so,vyr),e(so,a4),e(a4,u5e),e(u5e,Tyr),e(a4,Fyr),e(a4,bV),e(bV,Cyr),e(a4,Myr),e(so,Eyr),e(so,n4),e(n4,b5e),e(b5e,yyr),e(n4,wyr),e(n4,vV),e(vV,Ayr),e(n4,Lyr),e(so,Byr),e(so,s4),e(s4,v5e),e(v5e,xyr),e(s4,kyr),e(s4,TV),e(TV,Ryr),e(s4,Syr),e(so,Pyr),e(so,l4),e(l4,T5e),e(T5e,$yr),e(l4,Iyr),e(l4,FV),e(FV,Dyr),e(l4,jyr),e(so,Nyr),e(so,i4),e(i4,F5e),e(F5e,qyr),e(i4,Gyr),e(i4,CV),e(CV,Oyr),e(i4,Xyr),e(So,Vyr),e(So,C5e),e(C5e,zyr),e(So,Wyr),g(I0,So,null),b(c,Fxe,u),b(c,mf,u),e(mf,d4),e(d4,M5e),g(D0,M5e,null),e(mf,Qyr),e(mf,E5e),e(E5e,Hyr),b(c,Cxe,u),b(c,Ir,u),g(j0,Ir,null),e(Ir,Uyr),e(Ir,gf),e(gf,Jyr),e(gf,y5e),e(y5e,Yyr),e(gf,Kyr),e(gf,w5e),e(w5e,Zyr),e(gf,ewr),e(Ir,owr),e(Ir,N0),e(N0,rwr),e(N0,A5e),e(A5e,twr),e(N0,awr),e(Ir,nwr),e(Ir,Bt),g(q0,Bt,null),e(Bt,swr),e(Bt,L5e),e(L5e,lwr),e(Bt,iwr),e(Bt,hf),e(hf,dwr),e(hf,B5e),e(B5e,cwr),e(hf,fwr),e(hf,x5e),e(x5e,mwr),e(hf,gwr),e(Bt,hwr),e(Bt,k5e),e(k5e,pwr),e(Bt,_wr),g(G0,Bt,null),e(Ir,uwr),e(Ir,Po),g(O0,Po,null),e(Po,bwr),e(Po,R5e),e(R5e,vwr),e(Po,Twr),e(Po,Rn),e(Rn,Fwr),e(Rn,S5e),e(S5e,Cwr),e(Rn,Mwr),e(Rn,P5e),e(P5e,Ewr),e(Rn,ywr),e(Rn,$5e),e($5e,wwr),e(Rn,Awr),e(Po,Lwr),e(Po,lo),e(lo,c4),e(c4,I5e),e(I5e,Bwr),e(c4,xwr),e(c4,MV),e(MV,kwr),e(c4,Rwr),e(lo,Swr),e(lo,f4),e(f4,D5e),e(D5e,Pwr),e(f4,$wr),e(f4,EV),e(EV,Iwr),e(f4,Dwr),e(lo,jwr),e(lo,m4),e(m4,j5e),e(j5e,Nwr),e(m4,qwr),e(m4,yV),e(yV,Gwr),e(m4,Owr),e(lo,Xwr),e(lo,g4),e(g4,N5e),e(N5e,Vwr),e(g4,zwr),e(g4,wV),e(wV,Wwr),e(g4,Qwr),e(lo,Hwr),e(lo,h4),e(h4,q5e),e(q5e,Uwr),e(h4,Jwr),e(h4,AV),e(AV,Ywr),e(h4,Kwr),e(lo,Zwr),e(lo,p4),e(p4,G5e),e(G5e,e6r),e(p4,o6r),e(p4,LV),e(LV,r6r),e(p4,t6r),e(lo,a6r),e(lo,_4),e(_4,O5e),e(O5e,n6r),e(_4,s6r),e(_4,BV),e(BV,l6r),e(_4,i6r),e(Po,d6r),e(Po,X5e),e(X5e,c6r),e(Po,f6r),g(X0,Po,null),b(c,Mxe,u),b(c,pf,u),e(pf,u4),e(u4,V5e),g(V0,V5e,null),e(pf,m6r),e(pf,z5e),e(z5e,g6r),b(c,Exe,u),b(c,Dr,u),g(z0,Dr,null),e(Dr,h6r),e(Dr,_f),e(_f,p6r),e(_f,W5e),e(W5e,_6r),e(_f,u6r),e(_f,Q5e),e(Q5e,b6r),e(_f,v6r),e(Dr,T6r),e(Dr,W0),e(W0,F6r),e(W0,H5e),e(H5e,C6r),e(W0,M6r),e(Dr,E6r),e(Dr,xt),g(Q0,xt,null),e(xt,y6r),e(xt,U5e),e(U5e,w6r),e(xt,A6r),e(xt,uf),e(uf,L6r),e(uf,J5e),e(J5e,B6r),e(uf,x6r),e(uf,Y5e),e(Y5e,k6r),e(uf,R6r),e(xt,S6r),e(xt,K5e),e(K5e,P6r),e(xt,$6r),g(H0,xt,null),e(Dr,I6r),e(Dr,$o),g(U0,$o,null),e($o,D6r),e($o,Z5e),e(Z5e,j6r),e($o,N6r),e($o,Sn),e(Sn,q6r),e(Sn,e2e),e(e2e,G6r),e(Sn,O6r),e(Sn,o2e),e(o2e,X6r),e(Sn,V6r),e(Sn,r2e),e(r2e,z6r),e(Sn,W6r),e($o,Q6r),e($o,t2e),e(t2e,b4),e(b4,a2e),e(a2e,H6r),e(b4,U6r),e(b4,xV),e(xV,J6r),e(b4,Y6r),e($o,K6r),e($o,n2e),e(n2e,Z6r),e($o,eAr),g(J0,$o,null),b(c,yxe,u),b(c,bf,u),e(bf,v4),e(v4,s2e),g(Y0,s2e,null),e(bf,oAr),e(bf,l2e),e(l2e,rAr),b(c,wxe,u),b(c,jr,u),g(K0,jr,null),e(jr,tAr),e(jr,vf),e(vf,aAr),e(vf,i2e),e(i2e,nAr),e(vf,sAr),e(vf,d2e),e(d2e,lAr),e(vf,iAr),e(jr,dAr),e(jr,Z0),e(Z0,cAr),e(Z0,c2e),e(c2e,fAr),e(Z0,mAr),e(jr,gAr),e(jr,kt),g(eL,kt,null),e(kt,hAr),e(kt,f2e),e(f2e,pAr),e(kt,_Ar),e(kt,Tf),e(Tf,uAr),e(Tf,m2e),e(m2e,bAr),e(Tf,vAr),e(Tf,g2e),e(g2e,TAr),e(Tf,FAr),e(kt,CAr),e(kt,h2e),e(h2e,MAr),e(kt,EAr),g(oL,kt,null),e(jr,yAr),e(jr,Io),g(rL,Io,null),e(Io,wAr),e(Io,p2e),e(p2e,AAr),e(Io,LAr),e(Io,Pn),e(Pn,BAr),e(Pn,_2e),e(_2e,xAr),e(Pn,kAr),e(Pn,u2e),e(u2e,RAr),e(Pn,SAr),e(Pn,b2e),e(b2e,PAr),e(Pn,$Ar),e(Io,IAr),e(Io,tL),e(tL,T4),e(T4,v2e),e(v2e,DAr),e(T4,jAr),e(T4,kV),e(kV,NAr),e(T4,qAr),e(tL,GAr),e(tL,F4),e(F4,T2e),e(T2e,OAr),e(F4,XAr),e(F4,RV),e(RV,VAr),e(F4,zAr),e(Io,WAr),e(Io,F2e),e(F2e,QAr),e(Io,HAr),g(aL,Io,null),b(c,Axe,u),b(c,Ff,u),e(Ff,C4),e(C4,C2e),g(nL,C2e,null),e(Ff,UAr),e(Ff,M2e),e(M2e,JAr),b(c,Lxe,u),b(c,Nr,u),g(sL,Nr,null),e(Nr,YAr),e(Nr,Cf),e(Cf,KAr),e(Cf,E2e),e(E2e,ZAr),e(Cf,e0r),e(Cf,y2e),e(y2e,o0r),e(Cf,r0r),e(Nr,t0r),e(Nr,lL),e(lL,a0r),e(lL,w2e),e(w2e,n0r),e(lL,s0r),e(Nr,l0r),e(Nr,Rt),g(iL,Rt,null),e(Rt,i0r),e(Rt,A2e),e(A2e,d0r),e(Rt,c0r),e(Rt,Mf),e(Mf,f0r),e(Mf,L2e),e(L2e,m0r),e(Mf,g0r),e(Mf,B2e),e(B2e,h0r),e(Mf,p0r),e(Rt,_0r),e(Rt,x2e),e(x2e,u0r),e(Rt,b0r),g(dL,Rt,null),e(Nr,v0r),e(Nr,Do),g(cL,Do,null),e(Do,T0r),e(Do,k2e),e(k2e,F0r),e(Do,C0r),e(Do,$n),e($n,M0r),e($n,R2e),e(R2e,E0r),e($n,y0r),e($n,S2e),e(S2e,w0r),e($n,A0r),e($n,P2e),e(P2e,L0r),e($n,B0r),e(Do,x0r),e(Do,$2e),e($2e,M4),e(M4,I2e),e(I2e,k0r),e(M4,R0r),e(M4,SV),e(SV,S0r),e(M4,P0r),e(Do,$0r),e(Do,D2e),e(D2e,I0r),e(Do,D0r),g(fL,Do,null),Bxe=!0},p(c,[u]){const mL={};u&2&&(mL.$$scope={dirty:u,ctx:c}),xf.$set(mL);const j2e={};u&2&&(j2e.$$scope={dirty:u,ctx:c}),mh.$set(j2e);const N2e={};u&2&&(N2e.$$scope={dirty:u,ctx:c}),Mh.$set(N2e)},i(c){Bxe||(h(ce.$$.fragment,c),h($a.$$.fragment,c),h(AM.$$.fragment,c),h(LM.$$.fragment,c),h(xf.$$.fragment,c),h(BM.$$.fragment,c),h(xM.$$.fragment,c),h(SM.$$.fragment,c),h(PM.$$.fragment,c),h($M.$$.fragment,c),h(IM.$$.fragment,c),h(DM.$$.fragment,c),h(qM.$$.fragment,c),h(GM.$$.fragment,c),h(OM.$$.fragment,c),h(XM.$$.fragment,c),h(VM.$$.fragment,c),h(QM.$$.fragment,c),h(mh.$$.fragment,c),h(HM.$$.fragment,c),h(UM.$$.fragment,c),h(JM.$$.fragment,c),h(YM.$$.fragment,c),h(eE.$$.fragment,c),h(Mh.$$.fragment,c),h(oE.$$.fragment,c),h(rE.$$.fragment,c),h(tE.$$.fragment,c),h(aE.$$.fragment,c),h(sE.$$.fragment,c),h(lE.$$.fragment,c),h(iE.$$.fragment,c),h(dE.$$.fragment,c),h(cE.$$.fragment,c),h(fE.$$.fragment,c),h(gE.$$.fragment,c),h(hE.$$.fragment,c),h(pE.$$.fragment,c),h(_E.$$.fragment,c),h(uE.$$.fragment,c),h(bE.$$.fragment,c),h(TE.$$.fragment,c),h(FE.$$.fragment,c),h(CE.$$.fragment,c),h(ME.$$.fragment,c),h(EE.$$.fragment,c),h(yE.$$.fragment,c),h(AE.$$.fragment,c),h(LE.$$.fragment,c),h(BE.$$.fragment,c),h(xE.$$.fragment,c),h(kE.$$.fragment,c),h(RE.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(DE.$$.fragment,c),h(jE.$$.fragment,c),h(NE.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(XE.$$.fragment,c),h(VE.$$.fragment,c),h(zE.$$.fragment,c),h(WE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h(Py.$$.fragment,c),h(Iy.$$.fragment,c),h(Dy.$$.fragment,c),h(jy.$$.fragment,c),h(Ny.$$.fragment,c),h(qy.$$.fragment,c),h(Gy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Cw.$$.fragment,c),h(Mw.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(Bw.$$.fragment,c),h(xw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Dw.$$.fragment,c),h(Nw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(Vw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(h6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(u6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(F6.$$.fragment,c),h(C6.$$.fragment,c),h(M6.$$.fragment,c),h(y6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(B6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(S6.$$.fragment,c),h(P6.$$.fragment,c),h(I6.$$.fragment,c),h(D6.$$.fragment,c),h(j6.$$.fragment,c),h(N6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(X6.$$.fragment,c),h(V6.$$.fragment,c),h(z6.$$.fragment,c),h(W6.$$.fragment,c),h(Q6.$$.fragment,c),h(H6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(jA.$$.fragment,c),h(NA.$$.fragment,c),h(qA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(C0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(B0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(D0.$$.fragment,c),h(j0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),Bxe=!0)},o(c){p(ce.$$.fragment,c),p($a.$$.fragment,c),p(AM.$$.fragment,c),p(LM.$$.fragment,c),p(xf.$$.fragment,c),p(BM.$$.fragment,c),p(xM.$$.fragment,c),p(SM.$$.fragment,c),p(PM.$$.fragment,c),p($M.$$.fragment,c),p(IM.$$.fragment,c),p(DM.$$.fragment,c),p(qM.$$.fragment,c),p(GM.$$.fragment,c),p(OM.$$.fragment,c),p(XM.$$.fragment,c),p(VM.$$.fragment,c),p(QM.$$.fragment,c),p(mh.$$.fragment,c),p(HM.$$.fragment,c),p(UM.$$.fragment,c),p(JM.$$.fragment,c),p(YM.$$.fragment,c),p(eE.$$.fragment,c),p(Mh.$$.fragment,c),p(oE.$$.fragment,c),p(rE.$$.fragment,c),p(tE.$$.fragment,c),p(aE.$$.fragment,c),p(sE.$$.fragment,c),p(lE.$$.fragment,c),p(iE.$$.fragment,c),p(dE.$$.fragment,c),p(cE.$$.fragment,c),p(fE.$$.fragment,c),p(gE.$$.fragment,c),p(hE.$$.fragment,c),p(pE.$$.fragment,c),p(_E.$$.fragment,c),p(uE.$$.fragment,c),p(bE.$$.fragment,c),p(TE.$$.fragment,c),p(FE.$$.fragment,c),p(CE.$$.fragment,c),p(ME.$$.fragment,c),p(EE.$$.fragment,c),p(yE.$$.fragment,c),p(AE.$$.fragment,c),p(LE.$$.fragment,c),p(BE.$$.fragment,c),p(xE.$$.fragment,c),p(kE.$$.fragment,c),p(RE.$$.fragment,c),p(PE.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(DE.$$.fragment,c),p(jE.$$.fragment,c),p(NE.$$.fragment,c),p(GE.$$.fragment,c),p(OE.$$.fragment,c),p(XE.$$.fragment,c),p(VE.$$.fragment,c),p(zE.$$.fragment,c),p(WE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p(Py.$$.fragment,c),p(Iy.$$.fragment,c),p(Dy.$$.fragment,c),p(jy.$$.fragment,c),p(Ny.$$.fragment,c),p(qy.$$.fragment,c),p(Gy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Cw.$$.fragment,c),p(Mw.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(Bw.$$.fragment,c),p(xw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(Dw.$$.fragment,c),p(Nw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(Vw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(e6.$$.fragment,c),p(o6.$$.fragment,c),p(r6.$$.fragment,c),p(t6.$$.fragment,c),p(a6.$$.fragment,c),p(n6.$$.fragment,c),p(l6.$$.fragment,c),p(i6.$$.fragment,c),p(d6.$$.fragment,c),p(c6.$$.fragment,c),p(f6.$$.fragment,c),p(m6.$$.fragment,c),p(h6.$$.fragment,c),p(p6.$$.fragment,c),p(_6.$$.fragment,c),p(u6.$$.fragment,c),p(b6.$$.fragment,c),p(v6.$$.fragment,c),p(F6.$$.fragment,c),p(C6.$$.fragment,c),p(M6.$$.fragment,c),p(y6.$$.fragment,c),p(w6.$$.fragment,c),p(A6.$$.fragment,c),p(B6.$$.fragment,c),p(x6.$$.fragment,c),p(k6.$$.fragment,c),p(R6.$$.fragment,c),p(S6.$$.fragment,c),p(P6.$$.fragment,c),p(I6.$$.fragment,c),p(D6.$$.fragment,c),p(j6.$$.fragment,c),p(N6.$$.fragment,c),p(q6.$$.fragment,c),p(G6.$$.fragment,c),p(X6.$$.fragment,c),p(V6.$$.fragment,c),p(z6.$$.fragment,c),p(W6.$$.fragment,c),p(Q6.$$.fragment,c),p(H6.$$.fragment,c),p(J6.$$.fragment,c),p(Y6.$$.fragment,c),p(K6.$$.fragment,c),p(Z6.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(jA.$$.fragment,c),p(NA.$$.fragment,c),p(qA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(F0.$$.fragment,c),p(C0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(B0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(D0.$$.fragment,c),p(j0.$$.fragment,c),p(q0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(X0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),Bxe=!1},d(c){t(J),c&&t(Be),c&&t(ie),_(ce),c&&t(yf),c&&t(sa),c&&t(ye),c&&t(io),c&&t(Af),_($a,c),c&&t(co),c&&t(ge),c&&t(Oo),c&&t(Ia),c&&t(x7e),c&&t(Ii),_(AM),c&&t(k7e),c&&t(qn),c&&t(R7e),_(LM,c),c&&t(S7e),c&&t(h8),c&&t(P7e),_(xf,c),c&&t($7e),c&&t(Di),_(BM),c&&t(I7e),c&&t(Xo),_(xM),_(SM),_(PM),_($M),c&&t(D7e),c&&t(Ni),_(IM),c&&t(j7e),c&&t(Vo),_(DM),_(qM),_(GM),_(OM),c&&t(N7e),c&&t(qi),_(XM),c&&t(q7e),c&&t(zo),_(VM),_(QM),_(mh),_(HM),_(UM),c&&t(G7e),c&&t(Gi),_(JM),c&&t(O7e),c&&t(Wo),_(YM),_(eE),_(Mh),_(oE),_(rE),c&&t(X7e),c&&t(Xi),_(tE),c&&t(V7e),c&&t(Qo),_(aE),_(sE),_(lE),_(iE),_(dE),c&&t(z7e),c&&t(Wi),_(cE),c&&t(W7e),c&&t(Ho),_(fE),_(gE),_(hE),_(pE),_(_E),c&&t(Q7e),c&&t(Ui),_(uE),c&&t(H7e),c&&t(Uo),_(bE),_(TE),_(FE),_(CE),_(ME),c&&t(U7e),c&&t(Ki),_(EE),c&&t(J7e),c&&t(Jo),_(yE),_(AE),_(LE),_(BE),_(xE),c&&t(Y7e),c&&t(od),_(kE),c&&t(K7e),c&&t(Yo),_(RE),_(PE),_($E),_(IE),_(DE),c&&t(Z7e),c&&t(ad),_(jE),c&&t(eBe),c&&t(Ko),_(NE),_(GE),_(OE),_(XE),_(VE),c&&t(oBe),c&&t(ld),_(zE),c&&t(rBe),c&&t(Zo),_(WE),_(HE),_(UE),_(JE),_(YE),c&&t(tBe),c&&t(cd),_(KE),c&&t(aBe),c&&t(er),_(ZE),_(oy),_(ry),_(ty),_(ay),c&&t(nBe),c&&t(gd),_(ny),c&&t(sBe),c&&t(or),_(sy),_(iy),_(dy),_(cy),_(fy),c&&t(lBe),c&&t(_d),_(my),c&&t(iBe),c&&t(rr),_(gy),_(py),_(_y),_(uy),_(by),c&&t(dBe),c&&t(vd),_(vy),c&&t(cBe),c&&t(tr),_(Ty),_(Cy),_(My),_(Ey),_(yy),c&&t(fBe),c&&t(Cd),_(wy),c&&t(mBe),c&&t(ar),_(Ay),_(By),_(xy),_(ky),_(Ry),c&&t(gBe),c&&t(yd),_(Sy),c&&t(hBe),c&&t(nr),_(Py),_(Iy),_(Dy),_(jy),_(Ny),c&&t(pBe),c&&t(Ld),_(qy),c&&t(_Be),c&&t(sr),_(Gy),_(Xy),_(Vy),_(zy),_(Wy),c&&t(uBe),c&&t(kd),_(Qy),c&&t(bBe),c&&t(lr),_(Hy),_(Jy),_(Yy),_(Ky),_(Zy),c&&t(vBe),c&&t(Pd),_(ew),c&&t(TBe),c&&t(ir),_(ow),_(tw),_(aw),_(nw),_(sw),c&&t(FBe),c&&t(Dd),_(lw),c&&t(CBe),c&&t(dr),_(iw),_(cw),_(fw),_(mw),_(hw),c&&t(MBe),c&&t(qd),_(pw),c&&t(EBe),c&&t(cr),_(_w),_(bw),_(vw),_(Tw),_(Fw),c&&t(yBe),c&&t(Xd),_(Cw),c&&t(wBe),c&&t(fr),_(Mw),_(yw),_(ww),_(Aw),_(Lw),c&&t(ABe),c&&t(Qd),_(Bw),c&&t(LBe),c&&t(mr),_(xw),_(Rw),_(Sw),_(Pw),_($w),c&&t(BBe),c&&t(Jd),_(Iw),c&&t(xBe),c&&t(gr),_(Dw),_(Nw),_(qw),_(Gw),_(Ow),c&&t(kBe),c&&t(Zd),_(Xw),c&&t(RBe),c&&t(hr),_(Vw),_(Ww),_(Qw),_(Hw),_(Jw),c&&t(SBe),c&&t(rc),_(Yw),c&&t(PBe),c&&t(pr),_(Kw),_(e6),_(o6),_(r6),_(t6),c&&t($Be),c&&t(nc),_(a6),c&&t(IBe),c&&t(_r),_(n6),_(l6),_(i6),_(d6),_(c6),c&&t(DBe),c&&t(ic),_(f6),c&&t(jBe),c&&t(ur),_(m6),_(h6),_(p6),_(_6),_(u6),c&&t(NBe),c&&t(fc),_(b6),c&&t(qBe),c&&t(br),_(v6),_(F6),_(C6),_(M6),_(y6),c&&t(GBe),c&&t(hc),_(w6),c&&t(OBe),c&&t(vr),_(A6),_(B6),_(x6),_(k6),_(R6),c&&t(XBe),c&&t(uc),_(S6),c&&t(VBe),c&&t(Tr),_(P6),_(I6),_(D6),_(j6),_(N6),c&&t(zBe),c&&t(Tc),_(q6),c&&t(WBe),c&&t(Fr),_(G6),_(X6),_(V6),_(z6),_(W6),c&&t(QBe),c&&t(Mc),_(Q6),c&&t(HBe),c&&t(Cr),_(H6),_(J6),_(Y6),_(K6),_(Z6),c&&t(UBe),c&&t(wc),_(eA),c&&t(JBe),c&&t(Mr),_(oA),_(tA),_(aA),_(nA),_(sA),c&&t(YBe),c&&t(Bc),_(lA),c&&t(KBe),c&&t(Er),_(iA),_(cA),_(fA),_(mA),_(gA),c&&t(ZBe),c&&t(Rc),_(hA),c&&t(exe),c&&t(yr),_(pA),_(uA),_(bA),_(vA),_(TA),c&&t(oxe),c&&t($c),_(FA),c&&t(rxe),c&&t(wr),_(CA),_(EA),_(yA),_(wA),_(AA),c&&t(txe),c&&t(jc),_(LA),c&&t(axe),c&&t(Ar),_(BA),_(kA),_(RA),_(SA),_(PA),c&&t(nxe),c&&t(Gc),_($A),c&&t(sxe),c&&t(Lr),_(IA),_(jA),_(NA),_(qA),_(GA),c&&t(lxe),c&&t(Vc),_(OA),c&&t(ixe),c&&t(Br),_(XA),_(zA),_(WA),_(QA),_(HA),c&&t(dxe),c&&t(Qc),_(UA),c&&t(cxe),c&&t(xr),_(JA),_(KA),_(ZA),_(e0),_(o0),c&&t(fxe),c&&t(Jc),_(r0),c&&t(mxe),c&&t(kr),_(t0),_(n0),_(s0),_(l0),_(i0),c&&t(gxe),c&&t(Zc),_(d0),c&&t(hxe),c&&t(Rr),_(c0),_(m0),_(g0),_(h0),_(p0),c&&t(pxe),c&&t(rf),_(_0),c&&t(_xe),c&&t(Sr),_(u0),_(v0),_(T0),_(F0),_(C0),c&&t(uxe),c&&t(nf),_(M0),c&&t(bxe),c&&t(Pr),_(E0),_(w0),_(A0),_(L0),_(B0),c&&t(vxe),c&&t(df),_(x0),c&&t(Txe),c&&t($r),_(k0),_(S0),_(P0),_($0),_(I0),c&&t(Fxe),c&&t(mf),_(D0),c&&t(Cxe),c&&t(Ir),_(j0),_(q0),_(G0),_(O0),_(X0),c&&t(Mxe),c&&t(pf),_(V0),c&&t(Exe),c&&t(Dr),_(z0),_(Q0),_(H0),_(U0),_(J0),c&&t(yxe),c&&t(bf),_(Y0),c&&t(wxe),c&&t(jr),_(K0),_(eL),_(oL),_(rL),_(aL),c&&t(Axe),c&&t(Ff),_(nL),c&&t(Lxe),c&&t(Nr),_(sL),_(iL),_(dL),_(cL),_(fL)}}}const S3t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function P3t(Li,J,Be){let{fw:ie}=J;return Li.$$set=me=>{"fw"in me&&Be(0,ie=me.fw)},[ie]}class G3t extends y3t{constructor(J){super();w3t(this,J,P3t,R3t,A3t,{fw:0})}}export{G3t as default,S3t as metadata};
