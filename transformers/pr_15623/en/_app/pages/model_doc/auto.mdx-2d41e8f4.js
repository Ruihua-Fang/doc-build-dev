import{S as hTt,i as pTt,s as _Tt,e as a,k as l,w as f,t as o,M as uTt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-4833417e.js";import{T as $Br}from"../../chunks/Tip-fffd6df1.js";import{D as M}from"../../chunks/Docstring-4f315ed9.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as V}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function bTt(Ii){let J,Pe,de,he,io,fe,Fe,Vo,ji,If,fa,Di,Ni,J4,jf,Le,co,qi,Gn,Y4,On,Xn,K4,Gi,Vn,Z4,Oi,Df,qa;return{c(){J=a("p"),Pe=o("If your "),de=a("code"),he=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Fe=o("PretrainedConfig"),Vo=o(`, make sure its
`),ji=a("code"),If=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Ni=o('"new-model"'),J4=o(")."),jf=l(),Le=a("p"),co=o("Likewise, if your "),qi=a("code"),Gn=o("NewModel"),Y4=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),K4=o(`, make sure its
`),Gi=a("code"),Vn=o("config_class"),Z4=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),Df=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){J=n(fo,"P",{});var pe=s(J);Pe=r(pe,"If your "),de=n(pe,"CODE",{});var X8=s(de);he=r(X8,"NewModelConfig"),X8.forEach(t),io=r(pe," is a subclass of "),fe=n(pe,"CODE",{});var Xi=s(fe);Fe=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(pe,`, make sure its
`),ji=n(pe,"CODE",{});var V8=s(ji);If=r(V8,"model_type"),V8.forEach(t),fa=r(pe," attribute is set to the same key you use when registering the config (here "),Di=n(pe,"CODE",{});var z8=s(Di);Ni=r(z8,'"new-model"'),z8.forEach(t),J4=r(pe,")."),pe.forEach(t),jf=i(fo),Le=n(fo,"P",{});var zo=s(Le);co=r(zo,"Likewise, if your "),qi=n(zo,"CODE",{});var Ga=s(qi);Gn=r(Ga,"NewModel"),Ga.forEach(t),Y4=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var W8=s(On);Xn=r(W8,"PreTrainedModel"),W8.forEach(t),K4=r(zo,`, make sure its
`),Gi=n(zo,"CODE",{});var Nf=s(Gi);Vn=r(Nf,"config_class"),Nf.forEach(t),Z4=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var Q8=s(Oi);Df=r(Q8,"NewModelConfig"),Q8.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel")},m(fo,pe){b(fo,J,pe),e(J,Pe),e(J,de),e(de,he),e(J,io),e(J,fe),e(fe,Fe),e(J,Vo),e(J,ji),e(ji,If),e(J,fa),e(J,Di),e(Di,Ni),e(J,J4),b(fo,jf,pe),b(fo,Le,pe),e(Le,co),e(Le,qi),e(qi,Gn),e(Le,Y4),e(Le,On),e(On,Xn),e(Le,K4),e(Le,Gi),e(Gi,Vn),e(Le,Z4),e(Le,Oi),e(Oi,Df),e(Le,qa)},d(fo){fo&&t(J),fo&&t(jf),fo&&t(Le)}}}function vTt(Ii){let J,Pe,de,he,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),he=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Fe=s(J);Pe=r(Fe,"Passing "),de=n(Fe,"CODE",{});var Vo=s(de);he=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Fe," is required when you want to use a private model."),Fe.forEach(t)},m(fe,Fe){b(fe,J,Fe),e(J,Pe),e(J,de),e(de,he),e(J,io)},d(fe){fe&&t(J)}}}function TTt(Ii){let J,Pe,de,he,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),he=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Fe=s(J);Pe=r(Fe,"Passing "),de=n(Fe,"CODE",{});var Vo=s(de);he=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Fe," is required when you want to use a private model."),Fe.forEach(t)},m(fe,Fe){b(fe,J,Fe),e(J,Pe),e(J,de),e(de,he),e(J,io)},d(fe){fe&&t(J)}}}function FTt(Ii){let J,Pe,de,he,io,fe,Fe,Vo,ji,If,fa,Di,Ni,J4,jf,Le,co,qi,Gn,Y4,On,Xn,K4,Gi,Vn,Z4,Oi,Df,qa,fo,pe,X8,Xi,V8,z8,zo,Ga,W8,Nf,Q8,RPe,bxe,Vi,qf,TQ,eE,SPe,FQ,PPe,vxe,zn,$Pe,CQ,IPe,jPe,MQ,DPe,NPe,Txe,oE,Fxe,H8,qPe,Cxe,Gf,Mxe,zi,Of,EQ,rE,GPe,yQ,OPe,Exe,Wo,tE,XPe,aE,VPe,U8,zPe,WPe,QPe,nE,HPe,wQ,UPe,JPe,YPe,mo,sE,KPe,AQ,ZPe,e$e,Wi,o$e,LQ,r$e,t$e,BQ,a$e,n$e,s$e,v,Xf,xQ,l$e,i$e,J8,d$e,c$e,f$e,Vf,kQ,m$e,g$e,Y8,h$e,p$e,_$e,zf,RQ,u$e,b$e,K8,v$e,T$e,F$e,Wf,SQ,C$e,M$e,Z8,E$e,y$e,w$e,Qf,PQ,A$e,L$e,e9,B$e,x$e,k$e,Hf,$Q,R$e,S$e,o9,P$e,$$e,I$e,Uf,IQ,j$e,D$e,r9,N$e,q$e,G$e,Jf,jQ,O$e,X$e,t9,V$e,z$e,W$e,Yf,DQ,Q$e,H$e,a9,U$e,J$e,Y$e,Kf,NQ,K$e,Z$e,n9,eIe,oIe,rIe,Zf,qQ,tIe,aIe,s9,nIe,sIe,lIe,em,GQ,iIe,dIe,l9,cIe,fIe,mIe,om,OQ,gIe,hIe,i9,pIe,_Ie,uIe,rm,XQ,bIe,vIe,d9,TIe,FIe,CIe,tm,VQ,MIe,EIe,c9,yIe,wIe,AIe,am,zQ,LIe,BIe,f9,xIe,kIe,RIe,nm,WQ,SIe,PIe,m9,$Ie,IIe,jIe,sm,QQ,DIe,NIe,g9,qIe,GIe,OIe,lm,HQ,XIe,VIe,h9,zIe,WIe,QIe,im,UQ,HIe,UIe,p9,JIe,YIe,KIe,dm,JQ,ZIe,eje,_9,oje,rje,tje,cm,YQ,aje,nje,u9,sje,lje,ije,fm,KQ,dje,cje,b9,fje,mje,gje,mm,ZQ,hje,pje,v9,_je,uje,bje,gm,eH,vje,Tje,T9,Fje,Cje,Mje,hm,oH,Eje,yje,F9,wje,Aje,Lje,pm,rH,Bje,xje,C9,kje,Rje,Sje,_m,tH,Pje,$je,M9,Ije,jje,Dje,um,aH,Nje,qje,E9,Gje,Oje,Xje,bm,nH,Vje,zje,y9,Wje,Qje,Hje,vm,sH,Uje,Jje,w9,Yje,Kje,Zje,Tm,lH,eDe,oDe,A9,rDe,tDe,aDe,Fm,iH,nDe,sDe,L9,lDe,iDe,dDe,Cm,dH,cDe,fDe,B9,mDe,gDe,hDe,Mm,cH,pDe,_De,x9,uDe,bDe,vDe,Em,fH,TDe,FDe,k9,CDe,MDe,EDe,ym,mH,yDe,wDe,R9,ADe,LDe,BDe,wm,gH,xDe,kDe,S9,RDe,SDe,PDe,Am,hH,$De,IDe,P9,jDe,DDe,NDe,Lm,pH,qDe,GDe,$9,ODe,XDe,VDe,Bm,_H,zDe,WDe,I9,QDe,HDe,UDe,xm,uH,JDe,YDe,j9,KDe,ZDe,eNe,km,bH,oNe,rNe,D9,tNe,aNe,nNe,Rm,vH,sNe,lNe,N9,iNe,dNe,cNe,Sm,TH,fNe,mNe,q9,gNe,hNe,pNe,Pm,FH,_Ne,uNe,G9,bNe,vNe,TNe,$m,CH,FNe,CNe,O9,MNe,ENe,yNe,Im,MH,wNe,ANe,X9,LNe,BNe,xNe,jm,EH,kNe,RNe,V9,SNe,PNe,$Ne,Dm,yH,INe,jNe,z9,DNe,NNe,qNe,Nm,wH,GNe,ONe,W9,XNe,VNe,zNe,qm,AH,WNe,QNe,Q9,HNe,UNe,JNe,Gm,LH,YNe,KNe,H9,ZNe,eqe,oqe,Om,BH,rqe,tqe,U9,aqe,nqe,sqe,Xm,xH,lqe,iqe,J9,dqe,cqe,fqe,Vm,kH,mqe,gqe,Y9,hqe,pqe,_qe,zm,RH,uqe,bqe,K9,vqe,Tqe,Fqe,Wm,SH,Cqe,Mqe,Z9,Eqe,yqe,wqe,Qm,PH,Aqe,Lqe,eB,Bqe,xqe,kqe,Hm,$H,Rqe,Sqe,oB,Pqe,$qe,Iqe,Um,IH,jqe,Dqe,rB,Nqe,qqe,Gqe,Jm,jH,Oqe,Xqe,tB,Vqe,zqe,Wqe,Ym,DH,Qqe,Hqe,aB,Uqe,Jqe,Yqe,Km,NH,Kqe,Zqe,nB,eGe,oGe,rGe,Zm,qH,tGe,aGe,sB,nGe,sGe,lGe,eg,GH,iGe,dGe,lB,cGe,fGe,mGe,og,OH,gGe,hGe,iB,pGe,_Ge,uGe,rg,XH,bGe,vGe,dB,TGe,FGe,CGe,tg,VH,MGe,EGe,cB,yGe,wGe,AGe,ag,zH,LGe,BGe,fB,xGe,kGe,RGe,ng,WH,SGe,PGe,mB,$Ge,IGe,jGe,sg,QH,DGe,NGe,gB,qGe,GGe,OGe,lg,HH,XGe,VGe,hB,zGe,WGe,QGe,ig,UH,HGe,UGe,pB,JGe,YGe,KGe,dg,JH,ZGe,eOe,_B,oOe,rOe,tOe,cg,YH,aOe,nOe,uB,sOe,lOe,iOe,fg,KH,dOe,cOe,bB,fOe,mOe,gOe,mg,ZH,hOe,pOe,vB,_Oe,uOe,bOe,gg,eU,vOe,TOe,TB,FOe,COe,MOe,hg,oU,EOe,yOe,FB,wOe,AOe,LOe,pg,rU,BOe,xOe,CB,kOe,ROe,SOe,_g,tU,POe,$Oe,MB,IOe,jOe,DOe,ug,aU,NOe,qOe,EB,GOe,OOe,XOe,bg,nU,VOe,zOe,yB,WOe,QOe,HOe,vg,sU,UOe,JOe,wB,YOe,KOe,ZOe,Tg,lU,eXe,oXe,AB,rXe,tXe,aXe,Fg,iU,nXe,sXe,LB,lXe,iXe,dXe,Cg,dU,cXe,fXe,BB,mXe,gXe,hXe,Mg,cU,pXe,_Xe,xB,uXe,bXe,vXe,Eg,fU,TXe,FXe,kB,CXe,MXe,EXe,yg,mU,yXe,wXe,RB,AXe,LXe,BXe,wg,gU,xXe,kXe,SB,RXe,SXe,PXe,Ag,hU,$Xe,IXe,PB,jXe,DXe,NXe,Lg,pU,qXe,GXe,$B,OXe,XXe,VXe,_U,zXe,WXe,lE,QXe,Bg,iE,HXe,uU,UXe,yxe,Qi,xg,bU,dE,JXe,vU,YXe,wxe,Qo,cE,KXe,fE,ZXe,IB,eVe,oVe,rVe,mE,tVe,TU,aVe,nVe,sVe,go,gE,lVe,FU,iVe,dVe,Oa,cVe,CU,fVe,mVe,MU,gVe,hVe,EU,pVe,_Ve,uVe,E,Wn,yU,bVe,vVe,jB,TVe,FVe,DB,CVe,MVe,EVe,Qn,wU,yVe,wVe,NB,AVe,LVe,qB,BVe,xVe,kVe,Hn,AU,RVe,SVe,GB,PVe,$Ve,OB,IVe,jVe,DVe,kg,LU,NVe,qVe,XB,GVe,OVe,XVe,Un,BU,VVe,zVe,VB,WVe,QVe,zB,HVe,UVe,JVe,Rg,xU,YVe,KVe,WB,ZVe,eze,oze,Sg,kU,rze,tze,QB,aze,nze,sze,Pg,RU,lze,ize,HB,dze,cze,fze,Jn,SU,mze,gze,UB,hze,pze,JB,_ze,uze,bze,Yn,PU,vze,Tze,YB,Fze,Cze,KB,Mze,Eze,yze,Kn,$U,wze,Aze,ZB,Lze,Bze,ex,xze,kze,Rze,$g,IU,Sze,Pze,ox,$ze,Ize,jze,Ig,jU,Dze,Nze,rx,qze,Gze,Oze,Zn,DU,Xze,Vze,tx,zze,Wze,ax,Qze,Hze,Uze,jg,NU,Jze,Yze,nx,Kze,Zze,eWe,es,qU,oWe,rWe,sx,tWe,aWe,lx,nWe,sWe,lWe,os,GU,iWe,dWe,ix,cWe,fWe,dx,mWe,gWe,hWe,rs,OU,pWe,_We,cx,uWe,bWe,XU,vWe,TWe,FWe,Dg,VU,CWe,MWe,fx,EWe,yWe,wWe,ts,zU,AWe,LWe,mx,BWe,xWe,gx,kWe,RWe,SWe,Ng,WU,PWe,$We,hx,IWe,jWe,DWe,as,QU,NWe,qWe,px,GWe,OWe,_x,XWe,VWe,zWe,ns,HU,WWe,QWe,ux,HWe,UWe,bx,JWe,YWe,KWe,ss,UU,ZWe,eQe,vx,oQe,rQe,Tx,tQe,aQe,nQe,qg,JU,sQe,lQe,Fx,iQe,dQe,cQe,ls,YU,fQe,mQe,Cx,gQe,hQe,Mx,pQe,_Qe,uQe,Gg,KU,bQe,vQe,Ex,TQe,FQe,CQe,is,ZU,MQe,EQe,yx,yQe,wQe,wx,AQe,LQe,BQe,ds,eJ,xQe,kQe,Ax,RQe,SQe,Lx,PQe,$Qe,IQe,cs,oJ,jQe,DQe,Bx,NQe,qQe,xx,GQe,OQe,XQe,fs,rJ,VQe,zQe,kx,WQe,QQe,Rx,HQe,UQe,JQe,Og,tJ,YQe,KQe,Sx,ZQe,eHe,oHe,ms,aJ,rHe,tHe,Px,aHe,nHe,$x,sHe,lHe,iHe,gs,nJ,dHe,cHe,Ix,fHe,mHe,jx,gHe,hHe,pHe,hs,sJ,_He,uHe,Dx,bHe,vHe,Nx,THe,FHe,CHe,ps,lJ,MHe,EHe,qx,yHe,wHe,Gx,AHe,LHe,BHe,_s,iJ,xHe,kHe,Ox,RHe,SHe,Xx,PHe,$He,IHe,us,dJ,jHe,DHe,Vx,NHe,qHe,zx,GHe,OHe,XHe,Xg,cJ,VHe,zHe,Wx,WHe,QHe,HHe,bs,fJ,UHe,JHe,Qx,YHe,KHe,Hx,ZHe,eUe,oUe,Vg,mJ,rUe,tUe,Ux,aUe,nUe,sUe,zg,gJ,lUe,iUe,Jx,dUe,cUe,fUe,vs,hJ,mUe,gUe,Yx,hUe,pUe,Kx,_Ue,uUe,bUe,Ts,pJ,vUe,TUe,Zx,FUe,CUe,ek,MUe,EUe,yUe,Wg,_J,wUe,AUe,ok,LUe,BUe,xUe,Fs,uJ,kUe,RUe,rk,SUe,PUe,tk,$Ue,IUe,jUe,Cs,bJ,DUe,NUe,ak,qUe,GUe,nk,OUe,XUe,VUe,Ms,vJ,zUe,WUe,sk,QUe,HUe,lk,UUe,JUe,YUe,Es,TJ,KUe,ZUe,ik,eJe,oJe,dk,rJe,tJe,aJe,ys,FJ,nJe,sJe,ck,lJe,iJe,fk,dJe,cJe,fJe,Qg,CJ,mJe,gJe,mk,hJe,pJe,_Je,Hg,MJ,uJe,bJe,gk,vJe,TJe,FJe,Ug,EJ,CJe,MJe,hk,EJe,yJe,wJe,Jg,yJ,AJe,LJe,pk,BJe,xJe,kJe,ws,wJ,RJe,SJe,_k,PJe,$Je,uk,IJe,jJe,DJe,Yg,AJ,NJe,qJe,bk,GJe,OJe,XJe,As,LJ,VJe,zJe,vk,WJe,QJe,Tk,HJe,UJe,JJe,Ls,BJ,YJe,KJe,Fk,ZJe,eYe,Ck,oYe,rYe,tYe,Bs,xJ,aYe,nYe,Mk,sYe,lYe,Ek,iYe,dYe,cYe,xs,kJ,fYe,mYe,yk,gYe,hYe,wk,pYe,_Ye,uYe,ks,RJ,bYe,vYe,Ak,TYe,FYe,Lk,CYe,MYe,EYe,Rs,SJ,yYe,wYe,Bk,AYe,LYe,xk,BYe,xYe,kYe,Kg,PJ,RYe,SYe,kk,PYe,$Ye,IYe,Zg,$J,jYe,DYe,Rk,NYe,qYe,GYe,Ss,IJ,OYe,XYe,Sk,VYe,zYe,Pk,WYe,QYe,HYe,Ps,jJ,UYe,JYe,$k,YYe,KYe,Ik,ZYe,eKe,oKe,$s,DJ,rKe,tKe,jk,aKe,nKe,Dk,sKe,lKe,iKe,eh,NJ,dKe,cKe,Nk,fKe,mKe,gKe,oh,qJ,hKe,pKe,qk,_Ke,uKe,bKe,rh,GJ,vKe,TKe,Gk,FKe,CKe,MKe,th,OJ,EKe,yKe,Ok,wKe,AKe,LKe,Is,XJ,BKe,xKe,Xk,kKe,RKe,Vk,SKe,PKe,$Ke,ah,VJ,IKe,jKe,zk,DKe,NKe,qKe,nh,zJ,GKe,OKe,Wk,XKe,VKe,zKe,js,WJ,WKe,QKe,Qk,HKe,UKe,Hk,JKe,YKe,KKe,Ds,QJ,ZKe,eZe,Uk,oZe,rZe,Jk,tZe,aZe,nZe,HJ,sZe,lZe,hE,iZe,sh,pE,dZe,UJ,cZe,Axe,Hi,lh,JJ,_E,fZe,YJ,mZe,Lxe,Ho,uE,gZe,bE,hZe,Yk,pZe,_Ze,uZe,vE,bZe,KJ,vZe,TZe,FZe,$e,TE,CZe,ZJ,MZe,EZe,Xa,yZe,eY,wZe,AZe,oY,LZe,BZe,rY,xZe,kZe,RZe,ae,ih,tY,SZe,PZe,Kk,$Ze,IZe,jZe,dh,aY,DZe,NZe,Zk,qZe,GZe,OZe,ch,nY,XZe,VZe,eR,zZe,WZe,QZe,fh,sY,HZe,UZe,oR,JZe,YZe,KZe,mh,lY,ZZe,eeo,rR,oeo,reo,teo,gh,iY,aeo,neo,tR,seo,leo,ieo,hh,dY,deo,ceo,aR,feo,meo,geo,ph,cY,heo,peo,nR,_eo,ueo,beo,_h,fY,veo,Teo,sR,Feo,Ceo,Meo,uh,mY,Eeo,yeo,lR,weo,Aeo,Leo,bh,gY,Beo,xeo,iR,keo,Reo,Seo,vh,hY,Peo,$eo,dR,Ieo,jeo,Deo,Th,pY,Neo,qeo,cR,Geo,Oeo,Xeo,Fh,_Y,Veo,zeo,fR,Weo,Qeo,Heo,Ch,uY,Ueo,Jeo,mR,Yeo,Keo,Zeo,Mh,bY,eoo,ooo,gR,roo,too,aoo,Eh,noo,vY,soo,loo,FE,ioo,yh,CE,doo,TY,coo,Bxe,Ui,wh,FY,ME,foo,CY,moo,xxe,Uo,EE,goo,yE,hoo,hR,poo,_oo,uoo,wE,boo,MY,voo,Too,Foo,Ie,AE,Coo,EY,Moo,Eoo,Ji,yoo,yY,woo,Aoo,wY,Loo,Boo,xoo,Be,Ah,AY,koo,Roo,pR,Soo,Poo,$oo,Lh,LY,Ioo,joo,_R,Doo,Noo,qoo,Bh,BY,Goo,Ooo,uR,Xoo,Voo,zoo,xh,xY,Woo,Qoo,bR,Hoo,Uoo,Joo,kh,kY,Yoo,Koo,vR,Zoo,ero,oro,Rh,RY,rro,tro,TR,aro,nro,sro,Sh,SY,lro,iro,FR,dro,cro,fro,Ph,PY,mro,gro,CR,hro,pro,_ro,$h,uro,$Y,bro,vro,LE,Tro,Ih,BE,Fro,IY,Cro,kxe,Yi,jh,jY,xE,Mro,DY,Ero,Rxe,Jo,kE,yro,Ki,wro,NY,Aro,Lro,qY,Bro,xro,kro,RE,Rro,GY,Sro,Pro,$ro,Vr,SE,Iro,OY,jro,Dro,Zi,Nro,XY,qro,Gro,VY,Oro,Xro,Vro,zY,zro,Wro,PE,Qro,je,$E,Hro,WY,Uro,Jro,Va,Yro,QY,Kro,Zro,HY,eto,oto,UY,rto,tto,ato,F,Dh,JY,nto,sto,MR,lto,ito,dto,Nh,YY,cto,fto,ER,mto,gto,hto,qh,KY,pto,_to,yR,uto,bto,vto,Gh,ZY,Tto,Fto,wR,Cto,Mto,Eto,Oh,eK,yto,wto,AR,Ato,Lto,Bto,Xh,oK,xto,kto,LR,Rto,Sto,Pto,Vh,rK,$to,Ito,BR,jto,Dto,Nto,zh,tK,qto,Gto,xR,Oto,Xto,Vto,Wh,aK,zto,Wto,kR,Qto,Hto,Uto,Qh,nK,Jto,Yto,RR,Kto,Zto,eao,Hh,sK,oao,rao,SR,tao,aao,nao,Uh,lK,sao,lao,PR,iao,dao,cao,Jh,iK,fao,mao,$R,gao,hao,pao,Yh,dK,_ao,uao,IR,bao,vao,Tao,Kh,cK,Fao,Cao,jR,Mao,Eao,yao,Zh,fK,wao,Aao,DR,Lao,Bao,xao,ep,mK,kao,Rao,NR,Sao,Pao,$ao,op,gK,Iao,jao,qR,Dao,Nao,qao,rp,hK,Gao,Oao,GR,Xao,Vao,zao,tp,pK,Wao,Qao,OR,Hao,Uao,Jao,ap,_K,Yao,Kao,XR,Zao,eno,ono,np,uK,rno,tno,VR,ano,nno,sno,sp,bK,lno,ino,zR,dno,cno,fno,lp,vK,mno,gno,WR,hno,pno,_no,ip,TK,uno,bno,QR,vno,Tno,Fno,dp,FK,Cno,Mno,HR,Eno,yno,wno,cp,CK,Ano,Lno,UR,Bno,xno,kno,Ns,MK,Rno,Sno,JR,Pno,$no,YR,Ino,jno,Dno,fp,EK,Nno,qno,KR,Gno,Ono,Xno,mp,yK,Vno,zno,ZR,Wno,Qno,Hno,gp,wK,Uno,Jno,eS,Yno,Kno,Zno,hp,AK,eso,oso,oS,rso,tso,aso,pp,LK,nso,sso,rS,lso,iso,dso,_p,BK,cso,fso,tS,mso,gso,hso,up,xK,pso,_so,aS,uso,bso,vso,bp,kK,Tso,Fso,nS,Cso,Mso,Eso,vp,RK,yso,wso,sS,Aso,Lso,Bso,Tp,SK,xso,kso,lS,Rso,Sso,Pso,Fp,PK,$so,Iso,iS,jso,Dso,Nso,Cp,$K,qso,Gso,dS,Oso,Xso,Vso,Mp,IK,zso,Wso,cS,Qso,Hso,Uso,Ep,jK,Jso,Yso,fS,Kso,Zso,elo,yp,DK,olo,rlo,mS,tlo,alo,nlo,wp,NK,slo,llo,gS,ilo,dlo,clo,Ap,qK,flo,mlo,hS,glo,hlo,plo,Lp,GK,_lo,ulo,pS,blo,vlo,Tlo,Bp,OK,Flo,Clo,_S,Mlo,Elo,ylo,xp,XK,wlo,Alo,uS,Llo,Blo,xlo,kp,VK,klo,Rlo,bS,Slo,Plo,$lo,Rp,zK,Ilo,jlo,vS,Dlo,Nlo,qlo,Sp,WK,Glo,Olo,TS,Xlo,Vlo,zlo,Pp,QK,Wlo,Qlo,FS,Hlo,Ulo,Jlo,$p,HK,Ylo,Klo,CS,Zlo,eio,oio,Ip,UK,rio,tio,MS,aio,nio,sio,jp,JK,lio,iio,ES,dio,cio,fio,Dp,YK,mio,gio,yS,hio,pio,_io,Np,KK,uio,bio,wS,vio,Tio,Fio,qp,ZK,Cio,Mio,AS,Eio,yio,wio,Gp,eZ,Aio,Lio,LS,Bio,xio,kio,Op,oZ,Rio,Sio,BS,Pio,$io,Iio,Xp,rZ,jio,Dio,xS,Nio,qio,Gio,Vp,tZ,Oio,Xio,kS,Vio,zio,Wio,zp,aZ,Qio,Hio,RS,Uio,Jio,Yio,Wp,nZ,Kio,Zio,SS,edo,odo,rdo,Qp,sZ,tdo,ado,PS,ndo,sdo,ldo,Hp,lZ,ido,ddo,$S,cdo,fdo,mdo,Up,iZ,gdo,hdo,IS,pdo,_do,udo,Jp,dZ,bdo,vdo,jS,Tdo,Fdo,Cdo,Yp,cZ,Mdo,Edo,DS,ydo,wdo,Ado,Kp,fZ,Ldo,Bdo,NS,xdo,kdo,Rdo,Zp,mZ,Sdo,Pdo,qS,$do,Ido,jdo,e_,gZ,Ddo,Ndo,GS,qdo,Gdo,Odo,o_,hZ,Xdo,Vdo,OS,zdo,Wdo,Qdo,r_,pZ,Hdo,Udo,XS,Jdo,Ydo,Kdo,t_,_Z,Zdo,eco,VS,oco,rco,tco,a_,uZ,aco,nco,zS,sco,lco,ico,n_,bZ,dco,cco,WS,fco,mco,gco,s_,vZ,hco,pco,QS,_co,uco,bco,l_,TZ,vco,Tco,HS,Fco,Cco,Mco,i_,FZ,Eco,yco,US,wco,Aco,Lco,d_,CZ,Bco,xco,JS,kco,Rco,Sco,c_,MZ,Pco,$co,YS,Ico,jco,Dco,f_,EZ,Nco,qco,KS,Gco,Oco,Xco,m_,yZ,Vco,zco,ZS,Wco,Qco,Hco,g_,wZ,Uco,Jco,eP,Yco,Kco,Zco,h_,AZ,efo,ofo,oP,rfo,tfo,afo,p_,LZ,nfo,sfo,rP,lfo,ifo,dfo,__,cfo,BZ,ffo,mfo,xZ,gfo,hfo,kZ,pfo,_fo,IE,Sxe,ed,u_,RZ,jE,ufo,SZ,bfo,Pxe,Yo,DE,vfo,od,Tfo,PZ,Ffo,Cfo,$Z,Mfo,Efo,yfo,NE,wfo,IZ,Afo,Lfo,Bfo,zr,qE,xfo,jZ,kfo,Rfo,rd,Sfo,DZ,Pfo,$fo,NZ,Ifo,jfo,Dfo,qZ,Nfo,qfo,GE,Gfo,De,OE,Ofo,GZ,Xfo,Vfo,za,zfo,OZ,Wfo,Qfo,XZ,Hfo,Ufo,VZ,Jfo,Yfo,Kfo,k,b_,zZ,Zfo,emo,tP,omo,rmo,tmo,v_,WZ,amo,nmo,aP,smo,lmo,imo,T_,QZ,dmo,cmo,nP,fmo,mmo,gmo,F_,HZ,hmo,pmo,sP,_mo,umo,bmo,C_,UZ,vmo,Tmo,lP,Fmo,Cmo,Mmo,M_,JZ,Emo,ymo,iP,wmo,Amo,Lmo,E_,YZ,Bmo,xmo,dP,kmo,Rmo,Smo,y_,KZ,Pmo,$mo,cP,Imo,jmo,Dmo,w_,ZZ,Nmo,qmo,fP,Gmo,Omo,Xmo,A_,eee,Vmo,zmo,mP,Wmo,Qmo,Hmo,L_,oee,Umo,Jmo,gP,Ymo,Kmo,Zmo,B_,ree,ego,ogo,hP,rgo,tgo,ago,x_,tee,ngo,sgo,pP,lgo,igo,dgo,k_,aee,cgo,fgo,_P,mgo,ggo,hgo,R_,nee,pgo,_go,uP,ugo,bgo,vgo,S_,see,Tgo,Fgo,bP,Cgo,Mgo,Ego,P_,lee,ygo,wgo,vP,Ago,Lgo,Bgo,$_,iee,xgo,kgo,TP,Rgo,Sgo,Pgo,I_,dee,$go,Igo,FP,jgo,Dgo,Ngo,j_,cee,qgo,Ggo,CP,Ogo,Xgo,Vgo,D_,fee,zgo,Wgo,MP,Qgo,Hgo,Ugo,N_,mee,Jgo,Ygo,EP,Kgo,Zgo,eho,q_,gee,oho,rho,yP,tho,aho,nho,G_,hee,sho,lho,wP,iho,dho,cho,O_,pee,fho,mho,AP,gho,hho,pho,X_,_ee,_ho,uho,LP,bho,vho,Tho,V_,uee,Fho,Cho,BP,Mho,Eho,yho,z_,bee,who,Aho,xP,Lho,Bho,xho,W_,vee,kho,Rho,kP,Sho,Pho,$ho,Q_,Tee,Iho,jho,RP,Dho,Nho,qho,H_,Fee,Gho,Oho,SP,Xho,Vho,zho,U_,Cee,Who,Qho,PP,Hho,Uho,Jho,J_,Mee,Yho,Kho,$P,Zho,epo,opo,Y_,Eee,rpo,tpo,IP,apo,npo,spo,K_,yee,lpo,ipo,jP,dpo,cpo,fpo,Z_,wee,mpo,gpo,DP,hpo,ppo,_po,eu,Aee,upo,bpo,NP,vpo,Tpo,Fpo,ou,Lee,Cpo,Mpo,qP,Epo,ypo,wpo,ru,Bee,Apo,Lpo,GP,Bpo,xpo,kpo,tu,Rpo,xee,Spo,Ppo,kee,$po,Ipo,Ree,jpo,Dpo,XE,$xe,td,au,See,VE,Npo,Pee,qpo,Ixe,Ko,zE,Gpo,ad,Opo,$ee,Xpo,Vpo,Iee,zpo,Wpo,Qpo,WE,Hpo,jee,Upo,Jpo,Ypo,Wr,QE,Kpo,Dee,Zpo,e_o,nd,o_o,Nee,r_o,t_o,qee,a_o,n_o,s_o,Gee,l_o,i_o,HE,d_o,Ne,UE,c_o,Oee,f_o,m_o,Wa,g_o,Xee,h_o,p_o,Vee,__o,u_o,zee,b_o,v_o,T_o,$,nu,Wee,F_o,C_o,OP,M_o,E_o,y_o,su,Qee,w_o,A_o,XP,L_o,B_o,x_o,lu,Hee,k_o,R_o,VP,S_o,P_o,$_o,iu,Uee,I_o,j_o,zP,D_o,N_o,q_o,du,Jee,G_o,O_o,WP,X_o,V_o,z_o,cu,Yee,W_o,Q_o,QP,H_o,U_o,J_o,fu,Kee,Y_o,K_o,HP,Z_o,euo,ouo,mu,Zee,ruo,tuo,UP,auo,nuo,suo,gu,eoe,luo,iuo,JP,duo,cuo,fuo,hu,ooe,muo,guo,YP,huo,puo,_uo,pu,roe,uuo,buo,KP,vuo,Tuo,Fuo,_u,toe,Cuo,Muo,ZP,Euo,yuo,wuo,uu,aoe,Auo,Luo,e$,Buo,xuo,kuo,bu,noe,Ruo,Suo,o$,Puo,$uo,Iuo,vu,soe,juo,Duo,r$,Nuo,quo,Guo,Tu,loe,Ouo,Xuo,t$,Vuo,zuo,Wuo,Fu,ioe,Quo,Huo,a$,Uuo,Juo,Yuo,Cu,doe,Kuo,Zuo,n$,e2o,o2o,r2o,Mu,coe,t2o,a2o,s$,n2o,s2o,l2o,Eu,foe,i2o,d2o,l$,c2o,f2o,m2o,yu,moe,g2o,h2o,i$,p2o,_2o,u2o,wu,goe,b2o,v2o,d$,T2o,F2o,C2o,Au,hoe,M2o,E2o,c$,y2o,w2o,A2o,Lu,poe,L2o,B2o,f$,x2o,k2o,R2o,Bu,_oe,S2o,P2o,m$,$2o,I2o,j2o,xu,uoe,D2o,N2o,g$,q2o,G2o,O2o,ku,boe,X2o,V2o,h$,z2o,W2o,Q2o,Ru,voe,H2o,U2o,p$,J2o,Y2o,K2o,Su,Toe,Z2o,e1o,_$,o1o,r1o,t1o,Pu,Foe,a1o,n1o,u$,s1o,l1o,i1o,$u,Coe,d1o,c1o,b$,f1o,m1o,g1o,Iu,Moe,h1o,p1o,v$,_1o,u1o,b1o,ju,Eoe,v1o,T1o,T$,F1o,C1o,M1o,Du,yoe,E1o,y1o,F$,w1o,A1o,L1o,Nu,woe,B1o,x1o,C$,k1o,R1o,S1o,qu,P1o,Aoe,$1o,I1o,Loe,j1o,D1o,Boe,N1o,q1o,JE,jxe,sd,Gu,xoe,YE,G1o,koe,O1o,Dxe,Zo,KE,X1o,ld,V1o,Roe,z1o,W1o,Soe,Q1o,H1o,U1o,ZE,J1o,Poe,Y1o,K1o,Z1o,Qr,ey,ebo,$oe,obo,rbo,id,tbo,Ioe,abo,nbo,joe,sbo,lbo,ibo,Doe,dbo,cbo,oy,fbo,qe,ry,mbo,Noe,gbo,hbo,Qa,pbo,qoe,_bo,ubo,Goe,bbo,vbo,Ooe,Tbo,Fbo,Cbo,I,Ou,Xoe,Mbo,Ebo,M$,ybo,wbo,Abo,Xu,Voe,Lbo,Bbo,E$,xbo,kbo,Rbo,Vu,zoe,Sbo,Pbo,y$,$bo,Ibo,jbo,zu,Woe,Dbo,Nbo,w$,qbo,Gbo,Obo,Wu,Qoe,Xbo,Vbo,A$,zbo,Wbo,Qbo,Qu,Hoe,Hbo,Ubo,L$,Jbo,Ybo,Kbo,Hu,Uoe,Zbo,e3o,B$,o3o,r3o,t3o,Uu,Joe,a3o,n3o,x$,s3o,l3o,i3o,Ju,Yoe,d3o,c3o,k$,f3o,m3o,g3o,Yu,Koe,h3o,p3o,R$,_3o,u3o,b3o,Ku,Zoe,v3o,T3o,S$,F3o,C3o,M3o,Zu,ere,E3o,y3o,P$,w3o,A3o,L3o,e2,ore,B3o,x3o,$$,k3o,R3o,S3o,o2,rre,P3o,$3o,I$,I3o,j3o,D3o,r2,tre,N3o,q3o,j$,G3o,O3o,X3o,t2,are,V3o,z3o,D$,W3o,Q3o,H3o,a2,nre,U3o,J3o,N$,Y3o,K3o,Z3o,n2,sre,e5o,o5o,q$,r5o,t5o,a5o,s2,lre,n5o,s5o,G$,l5o,i5o,d5o,l2,ire,c5o,f5o,O$,m5o,g5o,h5o,i2,dre,p5o,_5o,X$,u5o,b5o,v5o,d2,cre,T5o,F5o,V$,C5o,M5o,E5o,c2,fre,y5o,w5o,z$,A5o,L5o,B5o,f2,mre,x5o,k5o,W$,R5o,S5o,P5o,m2,gre,$5o,I5o,Q$,j5o,D5o,N5o,g2,hre,q5o,G5o,H$,O5o,X5o,V5o,h2,pre,z5o,W5o,U$,Q5o,H5o,U5o,p2,_re,J5o,Y5o,J$,K5o,Z5o,evo,_2,ure,ovo,rvo,Y$,tvo,avo,nvo,u2,bre,svo,lvo,K$,ivo,dvo,cvo,b2,vre,fvo,mvo,Tre,gvo,hvo,pvo,v2,Fre,_vo,uvo,Z$,bvo,vvo,Tvo,T2,Cre,Fvo,Cvo,eI,Mvo,Evo,yvo,F2,Mre,wvo,Avo,oI,Lvo,Bvo,xvo,C2,Ere,kvo,Rvo,rI,Svo,Pvo,$vo,M2,Ivo,yre,jvo,Dvo,wre,Nvo,qvo,Are,Gvo,Ovo,ty,Nxe,dd,E2,Lre,ay,Xvo,Bre,Vvo,qxe,er,ny,zvo,cd,Wvo,xre,Qvo,Hvo,kre,Uvo,Jvo,Yvo,sy,Kvo,Rre,Zvo,e6o,o6o,Hr,ly,r6o,Sre,t6o,a6o,fd,n6o,Pre,s6o,l6o,$re,i6o,d6o,c6o,Ire,f6o,m6o,iy,g6o,Ge,dy,h6o,jre,p6o,_6o,Ha,u6o,Dre,b6o,v6o,Nre,T6o,F6o,qre,C6o,M6o,E6o,ne,y2,Gre,y6o,w6o,tI,A6o,L6o,B6o,w2,Ore,x6o,k6o,aI,R6o,S6o,P6o,A2,Xre,$6o,I6o,nI,j6o,D6o,N6o,L2,Vre,q6o,G6o,sI,O6o,X6o,V6o,B2,zre,z6o,W6o,lI,Q6o,H6o,U6o,x2,Wre,J6o,Y6o,iI,K6o,Z6o,eTo,k2,Qre,oTo,rTo,dI,tTo,aTo,nTo,R2,Hre,sTo,lTo,cI,iTo,dTo,cTo,S2,Ure,fTo,mTo,fI,gTo,hTo,pTo,P2,Jre,_To,uTo,mI,bTo,vTo,TTo,$2,Yre,FTo,CTo,gI,MTo,ETo,yTo,I2,Kre,wTo,ATo,hI,LTo,BTo,xTo,j2,Zre,kTo,RTo,pI,STo,PTo,$To,D2,ete,ITo,jTo,_I,DTo,NTo,qTo,N2,ote,GTo,OTo,uI,XTo,VTo,zTo,q2,rte,WTo,QTo,bI,HTo,UTo,JTo,G2,YTo,tte,KTo,ZTo,ate,eFo,oFo,nte,rFo,tFo,cy,Gxe,md,O2,ste,fy,aFo,lte,nFo,Oxe,or,my,sFo,gd,lFo,ite,iFo,dFo,dte,cFo,fFo,mFo,gy,gFo,cte,hFo,pFo,_Fo,Ur,hy,uFo,fte,bFo,vFo,hd,TFo,mte,FFo,CFo,gte,MFo,EFo,yFo,hte,wFo,AFo,py,LFo,Oe,_y,BFo,pte,xFo,kFo,Ua,RFo,_te,SFo,PFo,ute,$Fo,IFo,bte,jFo,DFo,NFo,A,X2,vte,qFo,GFo,vI,OFo,XFo,VFo,V2,Tte,zFo,WFo,TI,QFo,HFo,UFo,z2,Fte,JFo,YFo,FI,KFo,ZFo,eCo,W2,Cte,oCo,rCo,CI,tCo,aCo,nCo,Q2,Mte,sCo,lCo,MI,iCo,dCo,cCo,H2,Ete,fCo,mCo,EI,gCo,hCo,pCo,U2,yte,_Co,uCo,yI,bCo,vCo,TCo,J2,wte,FCo,CCo,wI,MCo,ECo,yCo,Y2,Ate,wCo,ACo,AI,LCo,BCo,xCo,K2,Lte,kCo,RCo,LI,SCo,PCo,$Co,Z2,Bte,ICo,jCo,BI,DCo,NCo,qCo,e1,xte,GCo,OCo,xI,XCo,VCo,zCo,o1,kte,WCo,QCo,kI,HCo,UCo,JCo,r1,Rte,YCo,KCo,RI,ZCo,eMo,oMo,t1,Ste,rMo,tMo,SI,aMo,nMo,sMo,a1,Pte,lMo,iMo,PI,dMo,cMo,fMo,n1,$te,mMo,gMo,$I,hMo,pMo,_Mo,s1,Ite,uMo,bMo,II,vMo,TMo,FMo,l1,jte,CMo,MMo,jI,EMo,yMo,wMo,i1,Dte,AMo,LMo,DI,BMo,xMo,kMo,d1,Nte,RMo,SMo,NI,PMo,$Mo,IMo,c1,qte,jMo,DMo,qI,NMo,qMo,GMo,f1,Gte,OMo,XMo,GI,VMo,zMo,WMo,m1,Ote,QMo,HMo,OI,UMo,JMo,YMo,g1,Xte,KMo,ZMo,XI,e4o,o4o,r4o,h1,Vte,t4o,a4o,VI,n4o,s4o,l4o,p1,zte,i4o,d4o,zI,c4o,f4o,m4o,_1,Wte,g4o,h4o,WI,p4o,_4o,u4o,u1,Qte,b4o,v4o,QI,T4o,F4o,C4o,b1,Hte,M4o,E4o,HI,y4o,w4o,A4o,v1,Ute,L4o,B4o,UI,x4o,k4o,R4o,T1,Jte,S4o,P4o,JI,$4o,I4o,j4o,F1,Yte,D4o,N4o,YI,q4o,G4o,O4o,C1,Kte,X4o,V4o,KI,z4o,W4o,Q4o,M1,Zte,H4o,U4o,ZI,J4o,Y4o,K4o,E1,eae,Z4o,eEo,ej,oEo,rEo,tEo,y1,oae,aEo,nEo,oj,sEo,lEo,iEo,w1,rae,dEo,cEo,rj,fEo,mEo,gEo,A1,tae,hEo,pEo,tj,_Eo,uEo,bEo,L1,aae,vEo,TEo,aj,FEo,CEo,MEo,B1,nae,EEo,yEo,nj,wEo,AEo,LEo,x1,sae,BEo,xEo,sj,kEo,REo,SEo,k1,lae,PEo,$Eo,lj,IEo,jEo,DEo,R1,iae,NEo,qEo,ij,GEo,OEo,XEo,S1,dae,VEo,zEo,dj,WEo,QEo,HEo,P1,cae,UEo,JEo,cj,YEo,KEo,ZEo,$1,eyo,fae,oyo,ryo,mae,tyo,ayo,gae,nyo,syo,uy,Xxe,pd,I1,hae,by,lyo,pae,iyo,Vxe,rr,vy,dyo,_d,cyo,_ae,fyo,myo,uae,gyo,hyo,pyo,Ty,_yo,bae,uyo,byo,vyo,Jr,Fy,Tyo,vae,Fyo,Cyo,ud,Myo,Tae,Eyo,yyo,Fae,wyo,Ayo,Lyo,Cae,Byo,xyo,Cy,kyo,Xe,My,Ryo,Mae,Syo,Pyo,Ja,$yo,Eae,Iyo,jyo,yae,Dyo,Nyo,wae,qyo,Gyo,Oyo,G,j1,Aae,Xyo,Vyo,fj,zyo,Wyo,Qyo,D1,Lae,Hyo,Uyo,mj,Jyo,Yyo,Kyo,N1,Bae,Zyo,ewo,gj,owo,rwo,two,q1,xae,awo,nwo,hj,swo,lwo,iwo,G1,kae,dwo,cwo,pj,fwo,mwo,gwo,O1,Rae,hwo,pwo,_j,_wo,uwo,bwo,X1,Sae,vwo,Two,uj,Fwo,Cwo,Mwo,V1,Pae,Ewo,ywo,bj,wwo,Awo,Lwo,z1,$ae,Bwo,xwo,vj,kwo,Rwo,Swo,W1,Iae,Pwo,$wo,Tj,Iwo,jwo,Dwo,Q1,jae,Nwo,qwo,Fj,Gwo,Owo,Xwo,H1,Dae,Vwo,zwo,Cj,Wwo,Qwo,Hwo,U1,Nae,Uwo,Jwo,Mj,Ywo,Kwo,Zwo,J1,qae,eAo,oAo,Ej,rAo,tAo,aAo,Y1,Gae,nAo,sAo,yj,lAo,iAo,dAo,K1,Oae,cAo,fAo,wj,mAo,gAo,hAo,Z1,Xae,pAo,_Ao,Aj,uAo,bAo,vAo,eb,Vae,TAo,FAo,Lj,CAo,MAo,EAo,ob,zae,yAo,wAo,Bj,AAo,LAo,BAo,rb,Wae,xAo,kAo,xj,RAo,SAo,PAo,tb,Qae,$Ao,IAo,kj,jAo,DAo,NAo,ab,Hae,qAo,GAo,Rj,OAo,XAo,VAo,nb,Uae,zAo,WAo,Sj,QAo,HAo,UAo,sb,Jae,JAo,YAo,Pj,KAo,ZAo,e0o,lb,Yae,o0o,r0o,$j,t0o,a0o,n0o,ib,Kae,s0o,l0o,Ij,i0o,d0o,c0o,db,Zae,f0o,m0o,jj,g0o,h0o,p0o,cb,ene,_0o,u0o,Dj,b0o,v0o,T0o,fb,F0o,one,C0o,M0o,rne,E0o,y0o,tne,w0o,A0o,Ey,zxe,bd,mb,ane,yy,L0o,nne,B0o,Wxe,tr,wy,x0o,vd,k0o,sne,R0o,S0o,lne,P0o,$0o,I0o,Ay,j0o,ine,D0o,N0o,q0o,Yr,Ly,G0o,dne,O0o,X0o,Td,V0o,cne,z0o,W0o,fne,Q0o,H0o,U0o,mne,J0o,Y0o,By,K0o,Ve,xy,Z0o,gne,eLo,oLo,Ya,rLo,hne,tLo,aLo,pne,nLo,sLo,_ne,lLo,iLo,dLo,da,gb,une,cLo,fLo,Nj,mLo,gLo,hLo,hb,bne,pLo,_Lo,qj,uLo,bLo,vLo,pb,vne,TLo,FLo,Gj,CLo,MLo,ELo,_b,Tne,yLo,wLo,Oj,ALo,LLo,BLo,ub,Fne,xLo,kLo,Xj,RLo,SLo,PLo,bb,$Lo,Cne,ILo,jLo,Mne,DLo,NLo,Ene,qLo,GLo,ky,Qxe,Fd,vb,yne,Ry,OLo,wne,XLo,Hxe,ar,Sy,VLo,Cd,zLo,Ane,WLo,QLo,Lne,HLo,ULo,JLo,Py,YLo,Bne,KLo,ZLo,e7o,Kr,$y,o7o,xne,r7o,t7o,Md,a7o,kne,n7o,s7o,Rne,l7o,i7o,d7o,Sne,c7o,f7o,Iy,m7o,ze,jy,g7o,Pne,h7o,p7o,Ka,_7o,$ne,u7o,b7o,Ine,v7o,T7o,jne,F7o,C7o,M7o,N,Tb,Dne,E7o,y7o,Vj,w7o,A7o,L7o,Fb,Nne,B7o,x7o,zj,k7o,R7o,S7o,Cb,qne,P7o,$7o,Wj,I7o,j7o,D7o,Mb,Gne,N7o,q7o,Qj,G7o,O7o,X7o,Eb,One,V7o,z7o,Hj,W7o,Q7o,H7o,yb,Xne,U7o,J7o,Uj,Y7o,K7o,Z7o,wb,Vne,e8o,o8o,Jj,r8o,t8o,a8o,Ab,zne,n8o,s8o,Yj,l8o,i8o,d8o,Lb,Wne,c8o,f8o,Kj,m8o,g8o,h8o,Bb,Qne,p8o,_8o,Zj,u8o,b8o,v8o,xb,Hne,T8o,F8o,eD,C8o,M8o,E8o,kb,Une,y8o,w8o,oD,A8o,L8o,B8o,Rb,Jne,x8o,k8o,rD,R8o,S8o,P8o,Sb,Yne,$8o,I8o,tD,j8o,D8o,N8o,Pb,Kne,q8o,G8o,aD,O8o,X8o,V8o,$b,Zne,z8o,W8o,nD,Q8o,H8o,U8o,Ib,ese,J8o,Y8o,sD,K8o,Z8o,e9o,jb,ose,o9o,r9o,lD,t9o,a9o,n9o,Db,rse,s9o,l9o,iD,i9o,d9o,c9o,Nb,tse,f9o,m9o,dD,g9o,h9o,p9o,qb,ase,_9o,u9o,cD,b9o,v9o,T9o,Gb,nse,F9o,C9o,fD,M9o,E9o,y9o,Ob,sse,w9o,A9o,mD,L9o,B9o,x9o,Xb,lse,k9o,R9o,gD,S9o,P9o,$9o,Vb,ise,I9o,j9o,hD,D9o,N9o,q9o,zb,dse,G9o,O9o,pD,X9o,V9o,z9o,Wb,cse,W9o,Q9o,_D,H9o,U9o,J9o,Qb,fse,Y9o,K9o,uD,Z9o,eBo,oBo,Hb,mse,rBo,tBo,bD,aBo,nBo,sBo,Ub,gse,lBo,iBo,vD,dBo,cBo,fBo,Jb,hse,mBo,gBo,TD,hBo,pBo,_Bo,Yb,pse,uBo,bBo,FD,vBo,TBo,FBo,Kb,_se,CBo,MBo,CD,EBo,yBo,wBo,Zb,ABo,use,LBo,BBo,bse,xBo,kBo,vse,RBo,SBo,Dy,Uxe,Ed,e3,Tse,Ny,PBo,Fse,$Bo,Jxe,nr,qy,IBo,yd,jBo,Cse,DBo,NBo,Mse,qBo,GBo,OBo,Gy,XBo,Ese,VBo,zBo,WBo,Zr,Oy,QBo,yse,HBo,UBo,wd,JBo,wse,YBo,KBo,Ase,ZBo,exo,oxo,Lse,rxo,txo,Xy,axo,We,Vy,nxo,Bse,sxo,lxo,Za,ixo,xse,dxo,cxo,kse,fxo,mxo,Rse,gxo,hxo,pxo,R,o3,Sse,_xo,uxo,MD,bxo,vxo,Txo,r3,Pse,Fxo,Cxo,ED,Mxo,Exo,yxo,t3,$se,wxo,Axo,yD,Lxo,Bxo,xxo,a3,Ise,kxo,Rxo,wD,Sxo,Pxo,$xo,n3,jse,Ixo,jxo,AD,Dxo,Nxo,qxo,s3,Dse,Gxo,Oxo,LD,Xxo,Vxo,zxo,l3,Nse,Wxo,Qxo,BD,Hxo,Uxo,Jxo,i3,qse,Yxo,Kxo,xD,Zxo,eko,oko,d3,Gse,rko,tko,kD,ako,nko,sko,c3,Ose,lko,iko,RD,dko,cko,fko,f3,Xse,mko,gko,SD,hko,pko,_ko,m3,Vse,uko,bko,PD,vko,Tko,Fko,g3,zse,Cko,Mko,$D,Eko,yko,wko,h3,Wse,Ako,Lko,ID,Bko,xko,kko,p3,Qse,Rko,Sko,jD,Pko,$ko,Iko,_3,Hse,jko,Dko,DD,Nko,qko,Gko,u3,Use,Oko,Xko,ND,Vko,zko,Wko,b3,Jse,Qko,Hko,qD,Uko,Jko,Yko,v3,Yse,Kko,Zko,GD,eRo,oRo,rRo,T3,Kse,tRo,aRo,OD,nRo,sRo,lRo,F3,Zse,iRo,dRo,XD,cRo,fRo,mRo,C3,ele,gRo,hRo,VD,pRo,_Ro,uRo,M3,ole,bRo,vRo,zD,TRo,FRo,CRo,E3,rle,MRo,ERo,WD,yRo,wRo,ARo,y3,tle,LRo,BRo,QD,xRo,kRo,RRo,w3,ale,SRo,PRo,HD,$Ro,IRo,jRo,A3,nle,DRo,NRo,UD,qRo,GRo,ORo,L3,sle,XRo,VRo,JD,zRo,WRo,QRo,B3,lle,HRo,URo,YD,JRo,YRo,KRo,x3,ile,ZRo,eSo,KD,oSo,rSo,tSo,k3,dle,aSo,nSo,ZD,sSo,lSo,iSo,R3,cle,dSo,cSo,eN,fSo,mSo,gSo,S3,fle,hSo,pSo,oN,_So,uSo,bSo,P3,mle,vSo,TSo,rN,FSo,CSo,MSo,$3,gle,ESo,ySo,tN,wSo,ASo,LSo,I3,hle,BSo,xSo,aN,kSo,RSo,SSo,j3,ple,PSo,$So,nN,ISo,jSo,DSo,D3,_le,NSo,qSo,sN,GSo,OSo,XSo,N3,ule,VSo,zSo,lN,WSo,QSo,HSo,q3,USo,ble,JSo,YSo,vle,KSo,ZSo,Tle,ePo,oPo,zy,Yxe,Ad,G3,Fle,Wy,rPo,Cle,tPo,Kxe,sr,Qy,aPo,Ld,nPo,Mle,sPo,lPo,Ele,iPo,dPo,cPo,Hy,fPo,yle,mPo,gPo,hPo,et,Uy,pPo,wle,_Po,uPo,Bd,bPo,Ale,vPo,TPo,Lle,FPo,CPo,MPo,Ble,EPo,yPo,Jy,wPo,Qe,Yy,APo,xle,LPo,BPo,en,xPo,kle,kPo,RPo,Rle,SPo,PPo,Sle,$Po,IPo,jPo,Ple,O3,$le,DPo,NPo,iN,qPo,GPo,OPo,X3,XPo,Ile,VPo,zPo,jle,WPo,QPo,Dle,HPo,UPo,Ky,Zxe,xd,V3,Nle,Zy,JPo,qle,YPo,eke,lr,ew,KPo,kd,ZPo,Gle,e$o,o$o,Ole,r$o,t$o,a$o,ow,n$o,Xle,s$o,l$o,i$o,ot,rw,d$o,Vle,c$o,f$o,Rd,m$o,zle,g$o,h$o,Wle,p$o,_$o,u$o,Qle,b$o,v$o,tw,T$o,He,aw,F$o,Hle,C$o,M$o,on,E$o,Ule,y$o,w$o,Jle,A$o,L$o,Yle,B$o,x$o,k$o,Ce,z3,Kle,R$o,S$o,dN,P$o,$$o,I$o,W3,Zle,j$o,D$o,cN,N$o,q$o,G$o,qs,eie,O$o,X$o,fN,V$o,z$o,mN,W$o,Q$o,H$o,Q3,oie,U$o,J$o,gN,Y$o,K$o,Z$o,ma,rie,eIo,oIo,hN,rIo,tIo,pN,aIo,nIo,_N,sIo,lIo,iIo,H3,tie,dIo,cIo,uN,fIo,mIo,gIo,U3,aie,hIo,pIo,bN,_Io,uIo,bIo,J3,nie,vIo,TIo,vN,FIo,CIo,MIo,Y3,sie,EIo,yIo,TN,wIo,AIo,LIo,K3,BIo,lie,xIo,kIo,iie,RIo,SIo,die,PIo,$Io,nw,oke,Sd,Z3,cie,sw,IIo,fie,jIo,rke,ir,lw,DIo,Pd,NIo,mie,qIo,GIo,gie,OIo,XIo,VIo,iw,zIo,hie,WIo,QIo,HIo,rt,dw,UIo,pie,JIo,YIo,$d,KIo,_ie,ZIo,ejo,uie,ojo,rjo,tjo,bie,ajo,njo,cw,sjo,Ue,fw,ljo,vie,ijo,djo,rn,cjo,Tie,fjo,mjo,Fie,gjo,hjo,Cie,pjo,_jo,ujo,Mie,e5,Eie,bjo,vjo,FN,Tjo,Fjo,Cjo,o5,Mjo,yie,Ejo,yjo,wie,wjo,Ajo,Aie,Ljo,Bjo,mw,tke,Id,r5,Lie,gw,xjo,Bie,kjo,ake,dr,hw,Rjo,jd,Sjo,xie,Pjo,$jo,kie,Ijo,jjo,Djo,pw,Njo,Rie,qjo,Gjo,Ojo,tt,_w,Xjo,Sie,Vjo,zjo,Dd,Wjo,Pie,Qjo,Hjo,$ie,Ujo,Jjo,Yjo,Iie,Kjo,Zjo,uw,eDo,Je,bw,oDo,jie,rDo,tDo,tn,aDo,Die,nDo,sDo,Nie,lDo,iDo,qie,dDo,cDo,fDo,xe,t5,Gie,mDo,gDo,CN,hDo,pDo,_Do,a5,Oie,uDo,bDo,MN,vDo,TDo,FDo,n5,Xie,CDo,MDo,EN,EDo,yDo,wDo,s5,Vie,ADo,LDo,yN,BDo,xDo,kDo,l5,zie,RDo,SDo,wN,PDo,$Do,IDo,i5,Wie,jDo,DDo,AN,NDo,qDo,GDo,d5,Qie,ODo,XDo,LN,VDo,zDo,WDo,c5,Hie,QDo,HDo,BN,UDo,JDo,YDo,f5,KDo,Uie,ZDo,eNo,Jie,oNo,rNo,Yie,tNo,aNo,vw,nke,Nd,m5,Kie,Tw,nNo,Zie,sNo,ske,cr,Fw,lNo,qd,iNo,ede,dNo,cNo,ode,fNo,mNo,gNo,Cw,hNo,rde,pNo,_No,uNo,at,Mw,bNo,tde,vNo,TNo,Gd,FNo,ade,CNo,MNo,nde,ENo,yNo,wNo,sde,ANo,LNo,Ew,BNo,Ye,yw,xNo,lde,kNo,RNo,an,SNo,ide,PNo,$No,dde,INo,jNo,cde,DNo,NNo,qNo,nn,g5,fde,GNo,ONo,xN,XNo,VNo,zNo,h5,mde,WNo,QNo,kN,HNo,UNo,JNo,p5,gde,YNo,KNo,RN,ZNo,eqo,oqo,_5,hde,rqo,tqo,SN,aqo,nqo,sqo,u5,lqo,pde,iqo,dqo,_de,cqo,fqo,ude,mqo,gqo,ww,lke,Od,b5,bde,Aw,hqo,vde,pqo,ike,fr,Lw,_qo,Xd,uqo,Tde,bqo,vqo,Fde,Tqo,Fqo,Cqo,Bw,Mqo,Cde,Eqo,yqo,wqo,nt,xw,Aqo,Mde,Lqo,Bqo,Vd,xqo,Ede,kqo,Rqo,yde,Sqo,Pqo,$qo,wde,Iqo,jqo,kw,Dqo,Ke,Rw,Nqo,Ade,qqo,Gqo,sn,Oqo,Lde,Xqo,Vqo,Bde,zqo,Wqo,xde,Qqo,Hqo,Uqo,ke,v5,kde,Jqo,Yqo,PN,Kqo,Zqo,eGo,T5,Rde,oGo,rGo,$N,tGo,aGo,nGo,F5,Sde,sGo,lGo,IN,iGo,dGo,cGo,C5,Pde,fGo,mGo,jN,gGo,hGo,pGo,M5,$de,_Go,uGo,DN,bGo,vGo,TGo,E5,Ide,FGo,CGo,NN,MGo,EGo,yGo,y5,jde,wGo,AGo,qN,LGo,BGo,xGo,w5,Dde,kGo,RGo,GN,SGo,PGo,$Go,A5,IGo,Nde,jGo,DGo,qde,NGo,qGo,Gde,GGo,OGo,Sw,dke,zd,L5,Ode,Pw,XGo,Xde,VGo,cke,mr,$w,zGo,Wd,WGo,Vde,QGo,HGo,zde,UGo,JGo,YGo,Iw,KGo,Wde,ZGo,eOo,oOo,st,jw,rOo,Qde,tOo,aOo,Qd,nOo,Hde,sOo,lOo,Ude,iOo,dOo,cOo,Jde,fOo,mOo,Dw,gOo,Ze,Nw,hOo,Yde,pOo,_Oo,ln,uOo,Kde,bOo,vOo,Zde,TOo,FOo,ece,COo,MOo,EOo,qw,B5,oce,yOo,wOo,ON,AOo,LOo,BOo,x5,rce,xOo,kOo,XN,ROo,SOo,POo,k5,$Oo,tce,IOo,jOo,ace,DOo,NOo,nce,qOo,GOo,Gw,fke,Hd,R5,sce,Ow,OOo,lce,XOo,mke,gr,Xw,VOo,Ud,zOo,ice,WOo,QOo,dce,HOo,UOo,JOo,Vw,YOo,cce,KOo,ZOo,eXo,lt,zw,oXo,fce,rXo,tXo,Jd,aXo,mce,nXo,sXo,gce,lXo,iXo,dXo,hce,cXo,fXo,Ww,mXo,eo,Qw,gXo,pce,hXo,pXo,dn,_Xo,_ce,uXo,bXo,uce,vXo,TXo,bce,FXo,CXo,MXo,cn,S5,vce,EXo,yXo,VN,wXo,AXo,LXo,P5,Tce,BXo,xXo,zN,kXo,RXo,SXo,$5,Fce,PXo,$Xo,WN,IXo,jXo,DXo,I5,Cce,NXo,qXo,QN,GXo,OXo,XXo,j5,VXo,Mce,zXo,WXo,Ece,QXo,HXo,yce,UXo,JXo,Hw,gke,Yd,D5,wce,Uw,YXo,Ace,KXo,hke,hr,Jw,ZXo,Kd,eVo,Lce,oVo,rVo,Bce,tVo,aVo,nVo,Yw,sVo,xce,lVo,iVo,dVo,it,Kw,cVo,kce,fVo,mVo,Zd,gVo,Rce,hVo,pVo,Sce,_Vo,uVo,bVo,Pce,vVo,TVo,Zw,FVo,oo,eA,CVo,$ce,MVo,EVo,fn,yVo,Ice,wVo,AVo,jce,LVo,BVo,Dce,xVo,kVo,RVo,ec,N5,Nce,SVo,PVo,HN,$Vo,IVo,jVo,q5,qce,DVo,NVo,UN,qVo,GVo,OVo,G5,Gce,XVo,VVo,JN,zVo,WVo,QVo,O5,HVo,Oce,UVo,JVo,Xce,YVo,KVo,Vce,ZVo,ezo,oA,pke,oc,X5,zce,rA,ozo,Wce,rzo,_ke,pr,tA,tzo,rc,azo,Qce,nzo,szo,Hce,lzo,izo,dzo,aA,czo,Uce,fzo,mzo,gzo,dt,nA,hzo,Jce,pzo,_zo,tc,uzo,Yce,bzo,vzo,Kce,Tzo,Fzo,Czo,Zce,Mzo,Ezo,sA,yzo,ro,lA,wzo,efe,Azo,Lzo,mn,Bzo,ofe,xzo,kzo,rfe,Rzo,Szo,tfe,Pzo,$zo,Izo,afe,V5,nfe,jzo,Dzo,YN,Nzo,qzo,Gzo,z5,Ozo,sfe,Xzo,Vzo,lfe,zzo,Wzo,ife,Qzo,Hzo,iA,uke,ac,W5,dfe,dA,Uzo,cfe,Jzo,bke,_r,cA,Yzo,nc,Kzo,ffe,Zzo,eWo,mfe,oWo,rWo,tWo,fA,aWo,gfe,nWo,sWo,lWo,ct,mA,iWo,hfe,dWo,cWo,sc,fWo,pfe,mWo,gWo,_fe,hWo,pWo,_Wo,ufe,uWo,bWo,gA,vWo,to,hA,TWo,bfe,FWo,CWo,gn,MWo,vfe,EWo,yWo,Tfe,wWo,AWo,Ffe,LWo,BWo,xWo,Cfe,Q5,Mfe,kWo,RWo,KN,SWo,PWo,$Wo,H5,IWo,Efe,jWo,DWo,yfe,NWo,qWo,wfe,GWo,OWo,pA,vke,lc,U5,Afe,_A,XWo,Lfe,VWo,Tke,ur,uA,zWo,ic,WWo,Bfe,QWo,HWo,xfe,UWo,JWo,YWo,bA,KWo,kfe,ZWo,eQo,oQo,ft,vA,rQo,Rfe,tQo,aQo,dc,nQo,Sfe,sQo,lQo,Pfe,iQo,dQo,cQo,$fe,fQo,mQo,TA,gQo,ao,FA,hQo,Ife,pQo,_Qo,hn,uQo,jfe,bQo,vQo,Dfe,TQo,FQo,Nfe,CQo,MQo,EQo,CA,J5,qfe,yQo,wQo,ZN,AQo,LQo,BQo,Y5,Gfe,xQo,kQo,eq,RQo,SQo,PQo,K5,$Qo,Ofe,IQo,jQo,Xfe,DQo,NQo,Vfe,qQo,GQo,MA,Fke,cc,Z5,zfe,EA,OQo,Wfe,XQo,Cke,br,yA,VQo,fc,zQo,Qfe,WQo,QQo,Hfe,HQo,UQo,JQo,wA,YQo,Ufe,KQo,ZQo,eHo,mt,AA,oHo,Jfe,rHo,tHo,mc,aHo,Yfe,nHo,sHo,Kfe,lHo,iHo,dHo,Zfe,cHo,fHo,LA,mHo,no,BA,gHo,eme,hHo,pHo,pn,_Ho,ome,uHo,bHo,rme,vHo,THo,tme,FHo,CHo,MHo,ame,ev,nme,EHo,yHo,oq,wHo,AHo,LHo,ov,BHo,sme,xHo,kHo,lme,RHo,SHo,ime,PHo,$Ho,xA,Mke,gc,rv,dme,kA,IHo,cme,jHo,Eke,vr,RA,DHo,hc,NHo,fme,qHo,GHo,mme,OHo,XHo,VHo,SA,zHo,gme,WHo,QHo,HHo,gt,PA,UHo,hme,JHo,YHo,pc,KHo,pme,ZHo,eUo,_me,oUo,rUo,tUo,ume,aUo,nUo,$A,sUo,ho,IA,lUo,bme,iUo,dUo,_n,cUo,vme,fUo,mUo,Tme,gUo,hUo,Fme,pUo,_Uo,uUo,B,tv,Cme,bUo,vUo,rq,TUo,FUo,CUo,av,Mme,MUo,EUo,tq,yUo,wUo,AUo,nv,Eme,LUo,BUo,aq,xUo,kUo,RUo,sv,yme,SUo,PUo,nq,$Uo,IUo,jUo,lv,wme,DUo,NUo,sq,qUo,GUo,OUo,iv,Ame,XUo,VUo,lq,zUo,WUo,QUo,dv,Lme,HUo,UUo,iq,JUo,YUo,KUo,cv,Bme,ZUo,eJo,dq,oJo,rJo,tJo,fv,xme,aJo,nJo,cq,sJo,lJo,iJo,mv,kme,dJo,cJo,fq,fJo,mJo,gJo,gv,Rme,hJo,pJo,mq,_Jo,uJo,bJo,hv,Sme,vJo,TJo,gq,FJo,CJo,MJo,pv,Pme,EJo,yJo,hq,wJo,AJo,LJo,_v,$me,BJo,xJo,pq,kJo,RJo,SJo,uv,Ime,PJo,$Jo,_q,IJo,jJo,DJo,bv,jme,NJo,qJo,uq,GJo,OJo,XJo,Gs,Dme,VJo,zJo,bq,WJo,QJo,vq,HJo,UJo,JJo,vv,Nme,YJo,KJo,Tq,ZJo,eYo,oYo,Tv,qme,rYo,tYo,Fq,aYo,nYo,sYo,Fv,Gme,lYo,iYo,Cq,dYo,cYo,fYo,Cv,Ome,mYo,gYo,Mq,hYo,pYo,_Yo,Mv,Xme,uYo,bYo,Eq,vYo,TYo,FYo,Ev,Vme,CYo,MYo,yq,EYo,yYo,wYo,yv,zme,AYo,LYo,wq,BYo,xYo,kYo,wv,Wme,RYo,SYo,Aq,PYo,$Yo,IYo,Av,Qme,jYo,DYo,Lq,NYo,qYo,GYo,Lv,Hme,OYo,XYo,Bq,VYo,zYo,WYo,Bv,Ume,QYo,HYo,xq,UYo,JYo,YYo,xv,Jme,KYo,ZYo,kq,eKo,oKo,rKo,kv,Yme,tKo,aKo,Rq,nKo,sKo,lKo,Rv,Kme,iKo,dKo,Sq,cKo,fKo,mKo,Sv,Zme,gKo,hKo,Pq,pKo,_Ko,uKo,Pv,ege,bKo,vKo,$q,TKo,FKo,CKo,$v,oge,MKo,EKo,Iq,yKo,wKo,AKo,Iv,rge,LKo,BKo,jq,xKo,kKo,RKo,jv,tge,SKo,PKo,Dq,$Ko,IKo,jKo,Dv,age,DKo,NKo,Nq,qKo,GKo,OKo,Nv,nge,XKo,VKo,qq,zKo,WKo,QKo,qv,sge,HKo,UKo,Gq,JKo,YKo,KKo,Gv,lge,ZKo,eZo,Oq,oZo,rZo,tZo,Ov,ige,aZo,nZo,Xq,sZo,lZo,iZo,Xv,dge,dZo,cZo,Vq,fZo,mZo,gZo,Vv,cge,hZo,pZo,zq,_Zo,uZo,bZo,fge,vZo,TZo,jA,yke,_c,zv,mge,DA,FZo,gge,CZo,wke,Tr,NA,MZo,uc,EZo,hge,yZo,wZo,pge,AZo,LZo,BZo,qA,xZo,_ge,kZo,RZo,SZo,ht,GA,PZo,uge,$Zo,IZo,bc,jZo,bge,DZo,NZo,vge,qZo,GZo,OZo,Tge,XZo,VZo,OA,zZo,po,XA,WZo,Fge,QZo,HZo,un,UZo,Cge,JZo,YZo,Mge,KZo,ZZo,Ege,eer,oer,rer,H,Wv,yge,ter,aer,Wq,ner,ser,ler,Qv,wge,ier,der,Qq,cer,fer,mer,Hv,Age,ger,her,Hq,per,_er,uer,Uv,Lge,ber,ver,Uq,Ter,Fer,Cer,Jv,Bge,Mer,Eer,Jq,yer,wer,Aer,Yv,xge,Ler,Ber,Yq,xer,ker,Rer,Kv,kge,Ser,Per,Kq,$er,Ier,jer,Zv,Rge,Der,Ner,Zq,qer,Ger,Oer,e6,Sge,Xer,Ver,eG,zer,Wer,Qer,o6,Pge,Her,Uer,oG,Jer,Yer,Ker,r6,$ge,Zer,eor,rG,oor,ror,tor,t6,Ige,aor,nor,tG,sor,lor,ior,a6,jge,dor,cor,aG,mor,gor,hor,n6,Dge,por,_or,nG,uor,bor,vor,s6,Nge,Tor,For,sG,Cor,Mor,Eor,l6,qge,yor,wor,lG,Aor,Lor,Bor,i6,Gge,xor,kor,iG,Ror,Sor,Por,d6,Oge,$or,Ior,dG,jor,Dor,Nor,c6,Xge,qor,Gor,cG,Oor,Xor,Vor,f6,Vge,zor,Wor,fG,Qor,Hor,Uor,m6,zge,Jor,Yor,mG,Kor,Zor,err,g6,Wge,orr,rrr,gG,trr,arr,nrr,Qge,srr,lrr,VA,Ake,vc,h6,Hge,zA,irr,Uge,drr,Lke,Fr,WA,crr,Tc,frr,Jge,mrr,grr,Yge,hrr,prr,_rr,QA,urr,Kge,brr,vrr,Trr,pt,HA,Frr,Zge,Crr,Mrr,Fc,Err,ehe,yrr,wrr,ohe,Arr,Lrr,Brr,rhe,xrr,krr,UA,Rrr,_o,JA,Srr,the,Prr,$rr,bn,Irr,ahe,jrr,Drr,nhe,Nrr,qrr,she,Grr,Orr,Xrr,me,p6,lhe,Vrr,zrr,hG,Wrr,Qrr,Hrr,_6,ihe,Urr,Jrr,pG,Yrr,Krr,Zrr,u6,dhe,etr,otr,_G,rtr,ttr,atr,b6,che,ntr,str,uG,ltr,itr,dtr,v6,fhe,ctr,ftr,bG,mtr,gtr,htr,T6,mhe,ptr,_tr,vG,utr,btr,vtr,F6,ghe,Ttr,Ftr,TG,Ctr,Mtr,Etr,C6,hhe,ytr,wtr,FG,Atr,Ltr,Btr,M6,phe,xtr,ktr,CG,Rtr,Str,Ptr,E6,_he,$tr,Itr,MG,jtr,Dtr,Ntr,y6,uhe,qtr,Gtr,EG,Otr,Xtr,Vtr,bhe,ztr,Wtr,YA,Bke,Cc,w6,vhe,KA,Qtr,The,Htr,xke,Cr,ZA,Utr,Mc,Jtr,Fhe,Ytr,Ktr,Che,Ztr,ear,oar,e0,rar,Mhe,tar,aar,nar,_t,o0,sar,Ehe,lar,iar,Ec,dar,yhe,car,far,whe,mar,gar,har,Ahe,par,_ar,r0,uar,uo,t0,bar,Lhe,Tar,Far,vn,Car,Bhe,Mar,Ear,xhe,yar,war,khe,Aar,Lar,Bar,a0,A6,Rhe,xar,kar,yG,Rar,Sar,Par,L6,She,$ar,Iar,wG,jar,Dar,Nar,Phe,qar,Gar,n0,kke,yc,B6,$he,s0,Oar,Ihe,Xar,Rke,Mr,l0,Var,wc,zar,jhe,War,Qar,Dhe,Har,Uar,Jar,i0,Yar,Nhe,Kar,Zar,enr,ut,d0,onr,qhe,rnr,tnr,Ac,anr,Ghe,nnr,snr,Ohe,lnr,inr,dnr,Xhe,cnr,fnr,c0,mnr,bo,f0,gnr,Vhe,hnr,pnr,Tn,_nr,zhe,unr,bnr,Whe,vnr,Tnr,Qhe,Fnr,Cnr,Mnr,Y,x6,Hhe,Enr,ynr,AG,wnr,Anr,Lnr,k6,Uhe,Bnr,xnr,LG,knr,Rnr,Snr,R6,Jhe,Pnr,$nr,BG,Inr,jnr,Dnr,S6,Yhe,Nnr,qnr,xG,Gnr,Onr,Xnr,P6,Khe,Vnr,znr,kG,Wnr,Qnr,Hnr,$6,Zhe,Unr,Jnr,RG,Ynr,Knr,Znr,I6,epe,esr,osr,SG,rsr,tsr,asr,j6,ope,nsr,ssr,PG,lsr,isr,dsr,D6,rpe,csr,fsr,$G,msr,gsr,hsr,N6,tpe,psr,_sr,IG,usr,bsr,vsr,q6,ape,Tsr,Fsr,jG,Csr,Msr,Esr,G6,npe,ysr,wsr,DG,Asr,Lsr,Bsr,O6,spe,xsr,ksr,NG,Rsr,Ssr,Psr,X6,lpe,$sr,Isr,qG,jsr,Dsr,Nsr,V6,ipe,qsr,Gsr,GG,Osr,Xsr,Vsr,z6,dpe,zsr,Wsr,OG,Qsr,Hsr,Usr,W6,cpe,Jsr,Ysr,XG,Ksr,Zsr,elr,Q6,fpe,olr,rlr,VG,tlr,alr,nlr,H6,mpe,slr,llr,zG,ilr,dlr,clr,U6,gpe,flr,mlr,WG,glr,hlr,plr,hpe,_lr,ulr,m0,Ske,Lc,J6,ppe,g0,blr,_pe,vlr,Pke,Er,h0,Tlr,Bc,Flr,upe,Clr,Mlr,bpe,Elr,ylr,wlr,p0,Alr,vpe,Llr,Blr,xlr,bt,_0,klr,Tpe,Rlr,Slr,xc,Plr,Fpe,$lr,Ilr,Cpe,jlr,Dlr,Nlr,Mpe,qlr,Glr,u0,Olr,vo,b0,Xlr,Epe,Vlr,zlr,Fn,Wlr,ype,Qlr,Hlr,wpe,Ulr,Jlr,Ape,Ylr,Klr,Zlr,_e,Y6,Lpe,eir,oir,QG,rir,tir,air,K6,Bpe,nir,sir,HG,lir,iir,dir,Z6,xpe,cir,fir,UG,mir,gir,hir,eT,kpe,pir,_ir,JG,uir,bir,vir,oT,Rpe,Tir,Fir,YG,Cir,Mir,Eir,rT,Spe,yir,wir,KG,Air,Lir,Bir,tT,Ppe,xir,kir,ZG,Rir,Sir,Pir,aT,$pe,$ir,Iir,eO,jir,Dir,Nir,nT,Ipe,qir,Gir,oO,Oir,Xir,Vir,sT,jpe,zir,Wir,rO,Qir,Hir,Uir,Dpe,Jir,Yir,v0,$ke,kc,lT,Npe,T0,Kir,qpe,Zir,Ike,yr,F0,edr,Rc,odr,Gpe,rdr,tdr,Ope,adr,ndr,sdr,C0,ldr,Xpe,idr,ddr,cdr,vt,M0,fdr,Vpe,mdr,gdr,Sc,hdr,zpe,pdr,_dr,Wpe,udr,bdr,vdr,Qpe,Tdr,Fdr,E0,Cdr,To,y0,Mdr,Hpe,Edr,ydr,Cn,wdr,Upe,Adr,Ldr,Jpe,Bdr,xdr,Ype,kdr,Rdr,Sdr,X,iT,Kpe,Pdr,$dr,tO,Idr,jdr,Ddr,dT,Zpe,Ndr,qdr,aO,Gdr,Odr,Xdr,cT,e_e,Vdr,zdr,nO,Wdr,Qdr,Hdr,fT,o_e,Udr,Jdr,sO,Ydr,Kdr,Zdr,mT,r_e,ecr,ocr,lO,rcr,tcr,acr,gT,t_e,ncr,scr,iO,lcr,icr,dcr,hT,a_e,ccr,fcr,dO,mcr,gcr,hcr,pT,n_e,pcr,_cr,cO,ucr,bcr,vcr,_T,s_e,Tcr,Fcr,fO,Ccr,Mcr,Ecr,uT,l_e,ycr,wcr,mO,Acr,Lcr,Bcr,bT,i_e,xcr,kcr,gO,Rcr,Scr,Pcr,vT,d_e,$cr,Icr,hO,jcr,Dcr,Ncr,TT,c_e,qcr,Gcr,pO,Ocr,Xcr,Vcr,FT,f_e,zcr,Wcr,_O,Qcr,Hcr,Ucr,CT,m_e,Jcr,Ycr,uO,Kcr,Zcr,efr,MT,g_e,ofr,rfr,bO,tfr,afr,nfr,ET,h_e,sfr,lfr,vO,ifr,dfr,cfr,yT,p_e,ffr,mfr,TO,gfr,hfr,pfr,wT,__e,_fr,ufr,FO,bfr,vfr,Tfr,AT,u_e,Ffr,Cfr,CO,Mfr,Efr,yfr,LT,b_e,wfr,Afr,MO,Lfr,Bfr,xfr,BT,v_e,kfr,Rfr,EO,Sfr,Pfr,$fr,xT,T_e,Ifr,jfr,yO,Dfr,Nfr,qfr,kT,F_e,Gfr,Ofr,wO,Xfr,Vfr,zfr,RT,C_e,Wfr,Qfr,AO,Hfr,Ufr,Jfr,ST,M_e,Yfr,Kfr,LO,Zfr,emr,omr,E_e,rmr,tmr,w0,jke,Pc,PT,y_e,A0,amr,w_e,nmr,Dke,wr,L0,smr,$c,lmr,A_e,imr,dmr,L_e,cmr,fmr,mmr,B0,gmr,B_e,hmr,pmr,_mr,Tt,x0,umr,x_e,bmr,vmr,Ic,Tmr,k_e,Fmr,Cmr,R_e,Mmr,Emr,ymr,S_e,wmr,Amr,k0,Lmr,Fo,R0,Bmr,P_e,xmr,kmr,Mn,Rmr,$_e,Smr,Pmr,I_e,$mr,Imr,j_e,jmr,Dmr,Nmr,te,$T,D_e,qmr,Gmr,BO,Omr,Xmr,Vmr,IT,N_e,zmr,Wmr,xO,Qmr,Hmr,Umr,jT,q_e,Jmr,Ymr,kO,Kmr,Zmr,egr,DT,G_e,ogr,rgr,RO,tgr,agr,ngr,NT,O_e,sgr,lgr,SO,igr,dgr,cgr,qT,X_e,fgr,mgr,PO,ggr,hgr,pgr,GT,V_e,_gr,ugr,$O,bgr,vgr,Tgr,OT,z_e,Fgr,Cgr,IO,Mgr,Egr,ygr,XT,W_e,wgr,Agr,jO,Lgr,Bgr,xgr,VT,Q_e,kgr,Rgr,DO,Sgr,Pgr,$gr,zT,H_e,Igr,jgr,NO,Dgr,Ngr,qgr,WT,U_e,Ggr,Ogr,qO,Xgr,Vgr,zgr,QT,J_e,Wgr,Qgr,GO,Hgr,Ugr,Jgr,HT,Y_e,Ygr,Kgr,OO,Zgr,ehr,ohr,UT,K_e,rhr,thr,XO,ahr,nhr,shr,JT,Z_e,lhr,ihr,VO,dhr,chr,fhr,YT,eue,mhr,ghr,zO,hhr,phr,_hr,oue,uhr,bhr,S0,Nke,jc,KT,rue,P0,vhr,tue,Thr,qke,Ar,$0,Fhr,Dc,Chr,aue,Mhr,Ehr,nue,yhr,whr,Ahr,I0,Lhr,sue,Bhr,xhr,khr,Ft,j0,Rhr,lue,Shr,Phr,Nc,$hr,iue,Ihr,jhr,due,Dhr,Nhr,qhr,cue,Ghr,Ohr,D0,Xhr,Co,N0,Vhr,fue,zhr,Whr,En,Qhr,mue,Hhr,Uhr,gue,Jhr,Yhr,hue,Khr,Zhr,epr,pue,ZT,_ue,opr,rpr,WO,tpr,apr,npr,uue,spr,lpr,q0,Gke,qc,eF,bue,G0,ipr,vue,dpr,Oke,Lr,O0,cpr,Gc,fpr,Tue,mpr,gpr,Fue,hpr,ppr,_pr,X0,upr,Cue,bpr,vpr,Tpr,Ct,V0,Fpr,Mue,Cpr,Mpr,Oc,Epr,Eue,ypr,wpr,yue,Apr,Lpr,Bpr,wue,xpr,kpr,z0,Rpr,Mo,W0,Spr,Aue,Ppr,$pr,yn,Ipr,Lue,jpr,Dpr,Bue,Npr,qpr,xue,Gpr,Opr,Xpr,K,oF,kue,Vpr,zpr,QO,Wpr,Qpr,Hpr,rF,Rue,Upr,Jpr,HO,Ypr,Kpr,Zpr,tF,Sue,e_r,o_r,UO,r_r,t_r,a_r,aF,Pue,n_r,s_r,JO,l_r,i_r,d_r,nF,$ue,c_r,f_r,YO,m_r,g_r,h_r,sF,Iue,p_r,__r,KO,u_r,b_r,v_r,lF,jue,T_r,F_r,ZO,C_r,M_r,E_r,iF,Due,y_r,w_r,eX,A_r,L_r,B_r,dF,Nue,x_r,k_r,oX,R_r,S_r,P_r,cF,que,$_r,I_r,rX,j_r,D_r,N_r,fF,Gue,q_r,G_r,tX,O_r,X_r,V_r,mF,Oue,z_r,W_r,aX,Q_r,H_r,U_r,gF,Xue,J_r,Y_r,nX,K_r,Z_r,eur,hF,Vue,our,rur,sX,tur,aur,nur,pF,zue,sur,lur,lX,iur,dur,cur,_F,Wue,fur,mur,iX,gur,hur,pur,uF,Que,_ur,uur,dX,bur,vur,Tur,bF,Hue,Fur,Cur,cX,Mur,Eur,yur,vF,Uue,wur,Aur,fX,Lur,Bur,xur,TF,Jue,kur,Rur,mX,Sur,Pur,$ur,Yue,Iur,jur,Q0,Xke,Xc,FF,Kue,H0,Dur,Zue,Nur,Vke,Br,U0,qur,Vc,Gur,e2e,Our,Xur,o2e,Vur,zur,Wur,J0,Qur,r2e,Hur,Uur,Jur,Mt,Y0,Yur,t2e,Kur,Zur,zc,e2r,a2e,o2r,r2r,n2e,t2r,a2r,n2r,s2e,s2r,l2r,K0,i2r,Eo,Z0,d2r,l2e,c2r,f2r,wn,m2r,i2e,g2r,h2r,d2e,p2r,_2r,c2e,u2r,b2r,v2r,Z,CF,f2e,T2r,F2r,gX,C2r,M2r,E2r,MF,m2e,y2r,w2r,hX,A2r,L2r,B2r,EF,g2e,x2r,k2r,pX,R2r,S2r,P2r,yF,h2e,$2r,I2r,_X,j2r,D2r,N2r,wF,p2e,q2r,G2r,uX,O2r,X2r,V2r,AF,_2e,z2r,W2r,bX,Q2r,H2r,U2r,LF,u2e,J2r,Y2r,vX,K2r,Z2r,e1r,BF,b2e,o1r,r1r,TX,t1r,a1r,n1r,xF,v2e,s1r,l1r,FX,i1r,d1r,c1r,kF,T2e,f1r,m1r,CX,g1r,h1r,p1r,RF,F2e,_1r,u1r,MX,b1r,v1r,T1r,SF,C2e,F1r,C1r,EX,M1r,E1r,y1r,PF,M2e,w1r,A1r,yX,L1r,B1r,x1r,$F,E2e,k1r,R1r,wX,S1r,P1r,$1r,IF,y2e,I1r,j1r,AX,D1r,N1r,q1r,jF,w2e,G1r,O1r,LX,X1r,V1r,z1r,DF,A2e,W1r,Q1r,BX,H1r,U1r,J1r,NF,L2e,Y1r,K1r,xX,Z1r,ebr,obr,qF,B2e,rbr,tbr,kX,abr,nbr,sbr,GF,x2e,lbr,ibr,RX,dbr,cbr,fbr,k2e,mbr,gbr,eL,zke,Wc,OF,R2e,oL,hbr,S2e,pbr,Wke,xr,rL,_br,Qc,ubr,P2e,bbr,vbr,$2e,Tbr,Fbr,Cbr,tL,Mbr,I2e,Ebr,ybr,wbr,Et,aL,Abr,j2e,Lbr,Bbr,Hc,xbr,D2e,kbr,Rbr,N2e,Sbr,Pbr,$br,q2e,Ibr,jbr,nL,Dbr,yo,sL,Nbr,G2e,qbr,Gbr,An,Obr,O2e,Xbr,Vbr,X2e,zbr,Wbr,V2e,Qbr,Hbr,Ubr,z2e,XF,W2e,Jbr,Ybr,SX,Kbr,Zbr,e3r,Q2e,o3r,r3r,lL,Qke,Uc,VF,H2e,iL,t3r,U2e,a3r,Hke,kr,dL,n3r,Jc,s3r,J2e,l3r,i3r,Y2e,d3r,c3r,f3r,cL,m3r,K2e,g3r,h3r,p3r,yt,fL,_3r,Z2e,u3r,b3r,Yc,v3r,e1e,T3r,F3r,o1e,C3r,M3r,E3r,r1e,y3r,w3r,mL,A3r,wo,gL,L3r,t1e,B3r,x3r,Ln,k3r,a1e,R3r,S3r,n1e,P3r,$3r,s1e,I3r,j3r,D3r,l1e,zF,i1e,N3r,q3r,PX,G3r,O3r,X3r,d1e,V3r,z3r,hL,Uke,Kc,WF,c1e,pL,W3r,f1e,Q3r,Jke,Rr,_L,H3r,Zc,U3r,m1e,J3r,Y3r,g1e,K3r,Z3r,e5r,uL,o5r,h1e,r5r,t5r,a5r,wt,bL,n5r,p1e,s5r,l5r,ef,i5r,_1e,d5r,c5r,u1e,f5r,m5r,g5r,b1e,h5r,p5r,vL,_5r,Ao,TL,u5r,v1e,b5r,v5r,Bn,T5r,T1e,F5r,C5r,F1e,M5r,E5r,C1e,y5r,w5r,A5r,z,QF,M1e,L5r,B5r,$X,x5r,k5r,R5r,HF,E1e,S5r,P5r,IX,$5r,I5r,j5r,UF,y1e,D5r,N5r,jX,q5r,G5r,O5r,JF,w1e,X5r,V5r,DX,z5r,W5r,Q5r,YF,A1e,H5r,U5r,NX,J5r,Y5r,K5r,KF,L1e,Z5r,evr,qX,ovr,rvr,tvr,ZF,B1e,avr,nvr,GX,svr,lvr,ivr,eC,x1e,dvr,cvr,OX,fvr,mvr,gvr,oC,k1e,hvr,pvr,XX,_vr,uvr,bvr,rC,R1e,vvr,Tvr,VX,Fvr,Cvr,Mvr,tC,S1e,Evr,yvr,zX,wvr,Avr,Lvr,aC,P1e,Bvr,xvr,WX,kvr,Rvr,Svr,nC,$1e,Pvr,$vr,QX,Ivr,jvr,Dvr,sC,I1e,Nvr,qvr,HX,Gvr,Ovr,Xvr,lC,j1e,Vvr,zvr,UX,Wvr,Qvr,Hvr,iC,D1e,Uvr,Jvr,JX,Yvr,Kvr,Zvr,dC,N1e,e6r,o6r,YX,r6r,t6r,a6r,cC,q1e,n6r,s6r,KX,l6r,i6r,d6r,fC,G1e,c6r,f6r,ZX,m6r,g6r,h6r,mC,O1e,p6r,_6r,eV,u6r,b6r,v6r,gC,X1e,T6r,F6r,oV,C6r,M6r,E6r,hC,V1e,y6r,w6r,rV,A6r,L6r,B6r,pC,z1e,x6r,k6r,tV,R6r,S6r,P6r,_C,W1e,$6r,I6r,aV,j6r,D6r,N6r,uC,Q1e,q6r,G6r,nV,O6r,X6r,V6r,H1e,z6r,W6r,FL,Yke,of,bC,U1e,CL,Q6r,J1e,H6r,Kke,Sr,ML,U6r,rf,J6r,Y1e,Y6r,K6r,K1e,Z6r,eTr,oTr,EL,rTr,Z1e,tTr,aTr,nTr,At,yL,sTr,ebe,lTr,iTr,tf,dTr,obe,cTr,fTr,rbe,mTr,gTr,hTr,tbe,pTr,_Tr,wL,uTr,Lo,AL,bTr,abe,vTr,TTr,xn,FTr,nbe,CTr,MTr,sbe,ETr,yTr,lbe,wTr,ATr,LTr,ca,vC,ibe,BTr,xTr,sV,kTr,RTr,STr,TC,dbe,PTr,$Tr,lV,ITr,jTr,DTr,FC,cbe,NTr,qTr,iV,GTr,OTr,XTr,CC,fbe,VTr,zTr,dV,WTr,QTr,HTr,MC,mbe,UTr,JTr,cV,YTr,KTr,ZTr,gbe,eFr,oFr,LL,Zke,af,EC,hbe,BL,rFr,pbe,tFr,eRe,Pr,xL,aFr,nf,nFr,_be,sFr,lFr,ube,iFr,dFr,cFr,kL,fFr,bbe,mFr,gFr,hFr,Lt,RL,pFr,vbe,_Fr,uFr,sf,bFr,Tbe,vFr,TFr,Fbe,FFr,CFr,MFr,Cbe,EFr,yFr,SL,wFr,Bo,PL,AFr,Mbe,LFr,BFr,kn,xFr,Ebe,kFr,RFr,ybe,SFr,PFr,wbe,$Fr,IFr,jFr,ce,yC,Abe,DFr,NFr,fV,qFr,GFr,OFr,wC,Lbe,XFr,VFr,mV,zFr,WFr,QFr,AC,Bbe,HFr,UFr,gV,JFr,YFr,KFr,LC,xbe,ZFr,eCr,hV,oCr,rCr,tCr,BC,kbe,aCr,nCr,pV,sCr,lCr,iCr,xC,Rbe,dCr,cCr,_V,fCr,mCr,gCr,kC,Sbe,hCr,pCr,uV,_Cr,uCr,bCr,RC,Pbe,vCr,TCr,bV,FCr,CCr,MCr,SC,$be,ECr,yCr,vV,wCr,ACr,LCr,PC,Ibe,BCr,xCr,TV,kCr,RCr,SCr,$C,jbe,PCr,$Cr,FV,ICr,jCr,DCr,IC,Dbe,NCr,qCr,CV,GCr,OCr,XCr,Nbe,VCr,zCr,$L,oRe,lf,jC,qbe,IL,WCr,Gbe,QCr,rRe,$r,jL,HCr,df,UCr,Obe,JCr,YCr,Xbe,KCr,ZCr,eMr,DL,oMr,Vbe,rMr,tMr,aMr,Bt,NL,nMr,zbe,sMr,lMr,cf,iMr,Wbe,dMr,cMr,Qbe,fMr,mMr,gMr,Hbe,hMr,pMr,qL,_Mr,xo,GL,uMr,Ube,bMr,vMr,Rn,TMr,Jbe,FMr,CMr,Ybe,MMr,EMr,Kbe,yMr,wMr,AMr,ue,DC,Zbe,LMr,BMr,MV,xMr,kMr,RMr,NC,e3e,SMr,PMr,EV,$Mr,IMr,jMr,qC,o3e,DMr,NMr,yV,qMr,GMr,OMr,GC,r3e,XMr,VMr,wV,zMr,WMr,QMr,OC,t3e,HMr,UMr,AV,JMr,YMr,KMr,XC,a3e,ZMr,e4r,LV,o4r,r4r,t4r,VC,n3e,a4r,n4r,BV,s4r,l4r,i4r,zC,s3e,d4r,c4r,xV,f4r,m4r,g4r,WC,l3e,h4r,p4r,kV,_4r,u4r,b4r,QC,i3e,v4r,T4r,RV,F4r,C4r,M4r,d3e,E4r,y4r,OL,tRe,ff,HC,c3e,XL,w4r,f3e,A4r,aRe,Ir,VL,L4r,mf,B4r,m3e,x4r,k4r,g3e,R4r,S4r,P4r,zL,$4r,h3e,I4r,j4r,D4r,xt,WL,N4r,p3e,q4r,G4r,gf,O4r,_3e,X4r,V4r,u3e,z4r,W4r,Q4r,b3e,H4r,U4r,QL,J4r,ko,HL,Y4r,v3e,K4r,Z4r,Sn,eEr,T3e,oEr,rEr,F3e,tEr,aEr,C3e,nEr,sEr,lEr,Me,UC,M3e,iEr,dEr,SV,cEr,fEr,mEr,JC,E3e,gEr,hEr,PV,pEr,_Er,uEr,YC,y3e,bEr,vEr,$V,TEr,FEr,CEr,KC,w3e,MEr,EEr,IV,yEr,wEr,AEr,ZC,A3e,LEr,BEr,jV,xEr,kEr,REr,eM,L3e,SEr,PEr,DV,$Er,IEr,jEr,oM,B3e,DEr,NEr,NV,qEr,GEr,OEr,rM,x3e,XEr,VEr,qV,zEr,WEr,QEr,tM,k3e,HEr,UEr,GV,JEr,YEr,KEr,R3e,ZEr,eyr,UL,nRe,hf,aM,S3e,JL,oyr,P3e,ryr,sRe,jr,YL,tyr,pf,ayr,$3e,nyr,syr,I3e,lyr,iyr,dyr,KL,cyr,j3e,fyr,myr,gyr,kt,ZL,hyr,D3e,pyr,_yr,_f,uyr,N3e,byr,vyr,q3e,Tyr,Fyr,Cyr,G3e,Myr,Eyr,e7,yyr,Ro,o7,wyr,O3e,Ayr,Lyr,Pn,Byr,X3e,xyr,kyr,V3e,Ryr,Syr,z3e,Pyr,$yr,Iyr,be,nM,W3e,jyr,Dyr,OV,Nyr,qyr,Gyr,sM,Q3e,Oyr,Xyr,XV,Vyr,zyr,Wyr,lM,H3e,Qyr,Hyr,VV,Uyr,Jyr,Yyr,iM,U3e,Kyr,Zyr,zV,ewr,owr,rwr,dM,J3e,twr,awr,WV,nwr,swr,lwr,cM,Y3e,iwr,dwr,QV,cwr,fwr,mwr,fM,K3e,gwr,hwr,HV,pwr,_wr,uwr,mM,Z3e,bwr,vwr,UV,Twr,Fwr,Cwr,gM,e5e,Mwr,Ewr,JV,ywr,wwr,Awr,hM,o5e,Lwr,Bwr,YV,xwr,kwr,Rwr,r5e,Swr,Pwr,r7,lRe,uf,pM,t5e,t7,$wr,a5e,Iwr,iRe,Dr,a7,jwr,bf,Dwr,n5e,Nwr,qwr,s5e,Gwr,Owr,Xwr,n7,Vwr,l5e,zwr,Wwr,Qwr,Rt,s7,Hwr,i5e,Uwr,Jwr,vf,Ywr,d5e,Kwr,Zwr,c5e,eAr,oAr,rAr,f5e,tAr,aAr,l7,nAr,So,i7,sAr,m5e,lAr,iAr,$n,dAr,g5e,cAr,fAr,h5e,mAr,gAr,p5e,hAr,pAr,_Ar,ve,_M,_5e,uAr,bAr,KV,vAr,TAr,FAr,uM,u5e,CAr,MAr,ZV,EAr,yAr,wAr,bM,b5e,AAr,LAr,ez,BAr,xAr,kAr,vM,v5e,RAr,SAr,oz,PAr,$Ar,IAr,TM,T5e,jAr,DAr,rz,NAr,qAr,GAr,FM,F5e,OAr,XAr,tz,VAr,zAr,WAr,CM,C5e,QAr,HAr,az,UAr,JAr,YAr,MM,M5e,KAr,ZAr,nz,e0r,o0r,r0r,EM,E5e,t0r,a0r,sz,n0r,s0r,l0r,yM,y5e,i0r,d0r,lz,c0r,f0r,m0r,w5e,g0r,h0r,d7,dRe,Tf,wM,A5e,c7,p0r,L5e,_0r,cRe,Nr,f7,u0r,Ff,b0r,B5e,v0r,T0r,x5e,F0r,C0r,M0r,m7,E0r,k5e,y0r,w0r,A0r,St,g7,L0r,R5e,B0r,x0r,Cf,k0r,S5e,R0r,S0r,P5e,P0r,$0r,I0r,$5e,j0r,D0r,h7,N0r,Po,p7,q0r,I5e,G0r,O0r,In,X0r,j5e,V0r,z0r,D5e,W0r,Q0r,N5e,H0r,U0r,J0r,Re,AM,q5e,Y0r,K0r,iz,Z0r,eLr,oLr,LM,G5e,rLr,tLr,dz,aLr,nLr,sLr,BM,O5e,lLr,iLr,cz,dLr,cLr,fLr,xM,X5e,mLr,gLr,fz,hLr,pLr,_Lr,kM,V5e,uLr,bLr,mz,vLr,TLr,FLr,RM,z5e,CLr,MLr,gz,ELr,yLr,wLr,SM,W5e,ALr,LLr,hz,BLr,xLr,kLr,PM,Q5e,RLr,SLr,pz,PLr,$Lr,ILr,H5e,jLr,DLr,_7,fRe,Mf,$M,U5e,u7,NLr,J5e,qLr,mRe,qr,b7,GLr,Ef,OLr,Y5e,XLr,VLr,K5e,zLr,WLr,QLr,v7,HLr,Z5e,ULr,JLr,YLr,Pt,T7,KLr,eve,ZLr,e7r,yf,o7r,ove,r7r,t7r,rve,a7r,n7r,s7r,tve,l7r,i7r,F7,d7r,$o,C7,c7r,ave,f7r,m7r,jn,g7r,nve,h7r,p7r,sve,_7r,u7r,lve,b7r,v7r,T7r,Se,IM,ive,F7r,C7r,_z,M7r,E7r,y7r,jM,dve,w7r,A7r,uz,L7r,B7r,x7r,DM,cve,k7r,R7r,bz,S7r,P7r,$7r,NM,fve,I7r,j7r,vz,D7r,N7r,q7r,qM,mve,G7r,O7r,Tz,X7r,V7r,z7r,GM,gve,W7r,Q7r,Fz,H7r,U7r,J7r,OM,hve,Y7r,K7r,Cz,Z7r,e8r,o8r,XM,pve,r8r,t8r,Mz,a8r,n8r,s8r,_ve,l8r,i8r,M7,gRe,wf,VM,uve,E7,d8r,bve,c8r,hRe,Gr,y7,f8r,Af,m8r,vve,g8r,h8r,Tve,p8r,_8r,u8r,w7,b8r,Fve,v8r,T8r,F8r,$t,A7,C8r,Cve,M8r,E8r,Lf,y8r,Mve,w8r,A8r,Eve,L8r,B8r,x8r,yve,k8r,R8r,L7,S8r,Io,B7,P8r,wve,$8r,I8r,Dn,j8r,Ave,D8r,N8r,Lve,q8r,G8r,Bve,O8r,X8r,V8r,xve,zM,kve,z8r,W8r,Ez,Q8r,H8r,U8r,Rve,J8r,Y8r,x7,pRe,Bf,WM,Sve,k7,K8r,Pve,Z8r,_Re,Or,R7,e9r,xf,o9r,$ve,r9r,t9r,Ive,a9r,n9r,s9r,S7,l9r,jve,i9r,d9r,c9r,It,P7,f9r,Dve,m9r,g9r,kf,h9r,Nve,p9r,_9r,qve,u9r,b9r,v9r,Gve,T9r,F9r,$7,C9r,jo,I7,M9r,Ove,E9r,y9r,Nn,w9r,Xve,A9r,L9r,Vve,B9r,x9r,zve,k9r,R9r,S9r,j7,QM,Wve,P9r,$9r,yz,I9r,j9r,D9r,HM,Qve,N9r,q9r,wz,G9r,O9r,X9r,Hve,V9r,z9r,D7,uRe,Rf,UM,Uve,N7,W9r,Jve,Q9r,bRe,Xr,q7,H9r,Sf,U9r,Yve,J9r,Y9r,Kve,K9r,Z9r,eBr,G7,oBr,Zve,rBr,tBr,aBr,jt,O7,nBr,e6e,sBr,lBr,Pf,iBr,o6e,dBr,cBr,r6e,fBr,mBr,gBr,t6e,hBr,pBr,X7,_Br,Do,V7,uBr,a6e,bBr,vBr,qn,TBr,n6e,FBr,CBr,s6e,MBr,EBr,l6e,yBr,wBr,ABr,i6e,JM,d6e,LBr,BBr,Az,xBr,kBr,RBr,c6e,SBr,PBr,z7,vRe;return fe=new V({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),eE=new V({}),oE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new $Br({props:{warning:"&lcub;true}",$$slots:{default:[bTt]},$$scope:{ctx:Ii}}}),rE=new V({}),tE=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/configuration_auto.py#L527"}}),sE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/configuration_auto.py#L550",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),lE=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),iE=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/configuration_auto.py#L672",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),dE=new V({}),cE=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/tokenization_auto.py#L352"}}),gE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15623/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),hE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),pE=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),_E=new V({}),uE=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/feature_extraction_auto.py#L170"}}),TE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/feature_extraction_auto.py#L184",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15623/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Eh=new $Br({props:{$$slots:{default:[vTt]},$$scope:{ctx:Ii}}}),FE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),CE=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/feature_extraction_auto.py#L311",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),ME=new V({}),EE=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/processing_auto.py#L71"}}),AE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),$h=new $Br({props:{$$slots:{default:[TTt]},$$scope:{ctx:Ii}}}),LE=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),BE=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),xE=new V({}),kE=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L697"}}),SE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),PE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),$E=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jE=new V({}),DE=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L704"}}),qE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),GE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),OE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VE=new V({}),zE=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L719"}}),QE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),HE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),UE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JE=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YE=new V({}),KE=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L726"}}),ey=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),ry=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new V({}),ny=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L733"}}),ly=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),dy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fy=new V({}),my=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L742"}}),hy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),py=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),_y=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new V({}),vy=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L776"}}),Fy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),My=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yy=new V({}),wy=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L783"}}),Ly=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),By=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),xy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new V({}),Sy=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L769"}}),$y=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),jy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ny=new V({}),qy=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L751"}}),Oy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Vy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Wy=new V({}),Qy=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L758"}}),Uy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Yy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new V({}),ew=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L792"}}),rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15623/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new V({}),lw=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L831"}}),dw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),fw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new V({}),hw=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L838"}}),_w=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),bw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new V({}),Fw=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L861"}}),Mw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),yw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new V({}),Lw=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L845"}}),xw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Rw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new V({}),$w=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L852"}}),jw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Nw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Gw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ow=new V({}),Xw=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L870"}}),zw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Qw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uw=new V({}),Jw=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L877"}}),Kw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),eA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rA=new V({}),tA=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L824"}}),nA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),sA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),lA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dA=new V({}),cA=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L799"}}),mA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),gA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),hA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_A=new V({}),uA=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L806"}}),vA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),TA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),FA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),MA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EA=new V({}),yA=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_auto.py#L815"}}),AA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),LA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),BA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new V({}),RA=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_tf_auto.py#L378"}}),PA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),IA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DA=new V({}),NA=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_tf_auto.py#L385"}}),GA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),XA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new V({}),WA=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_tf_auto.py#L400"}}),HA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),JA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new V({}),ZA=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_tf_auto.py#L407"}}),o0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),r0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),t0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s0=new V({}),l0=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),d0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),c0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),f0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g0=new V({}),h0=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),_0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),u0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),b0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T0=new V({}),F0=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_tf_auto.py#L437"}}),M0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),E0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),y0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A0=new V({}),L0=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),x0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),k0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),R0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P0=new V({}),$0=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),j0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),D0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),N0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G0=new V({}),O0=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),V0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),z0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),W0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H0=new V({}),U0=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),Y0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),K0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),Z0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oL=new V({}),rL=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_tf_auto.py#L414"}}),aL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),nL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),sL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iL=new V({}),dL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),fL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),mL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),gL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pL=new V({}),_L=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),bL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),vL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),TL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CL=new V({}),ML=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),yL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),wL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),AL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BL=new V({}),xL=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),RL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),SL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),PL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IL=new V({}),jL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),NL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),qL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),GL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XL=new V({}),VL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),WL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),QL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),HL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JL=new V({}),YL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),ZL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),e7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),o7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t7=new V({}),a7=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),s7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),l7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),i7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c7=new V({}),f7=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),g7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),h7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),p7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u7=new V({}),b7=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),T7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),F7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),C7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E7=new V({}),y7=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),A7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),L7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),B7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k7=new V({}),R7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),P7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),$7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),I7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N7=new V({}),q7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),O7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15623/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15623/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),X7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),V7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15623/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15623/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15623/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Pe=l(),de=a("h1"),he=a("a"),io=a("span"),f(fe.$$.fragment),Fe=l(),Vo=a("span"),ji=o("Auto Classes"),If=l(),fa=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),J4=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Le=l(),co=a("p"),qi=o("Instantiating one of "),Gn=a("a"),Y4=o("AutoConfig"),On=o(", "),Xn=a("a"),K4=o("AutoModel"),Gi=o(`, and
`),Vn=a("a"),Z4=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(qa.$$.fragment),fo=l(),pe=a("p"),X8=o("will create a model that is an instance of "),Xi=a("a"),V8=o("BertModel"),z8=o("."),zo=l(),Ga=a("p"),W8=o("There is one class of "),Nf=a("code"),Q8=o("AutoModel"),RPe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bxe=l(),Vi=a("h2"),qf=a("a"),TQ=a("span"),f(eE.$$.fragment),SPe=l(),FQ=a("span"),PPe=o("Extending the Auto Classes"),vxe=l(),zn=a("p"),$Pe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),CQ=a("code"),IPe=o("NewModel"),jPe=o(", make sure you have a "),MQ=a("code"),DPe=o("NewModelConfig"),NPe=o(` then you can add those to the auto
classes like this:`),Txe=l(),f(oE.$$.fragment),Fxe=l(),H8=a("p"),qPe=o("You will then be able to use the auto classes like you would usually do!"),Cxe=l(),f(Gf.$$.fragment),Mxe=l(),zi=a("h2"),Of=a("a"),EQ=a("span"),f(rE.$$.fragment),GPe=l(),yQ=a("span"),OPe=o("AutoConfig"),Exe=l(),Wo=a("div"),f(tE.$$.fragment),XPe=l(),aE=a("p"),VPe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),U8=a("a"),zPe=o("from_pretrained()"),WPe=o(" class method."),QPe=l(),nE=a("p"),HPe=o("This class cannot be instantiated directly using "),wQ=a("code"),UPe=o("__init__()"),JPe=o(" (throws an error)."),YPe=l(),mo=a("div"),f(sE.$$.fragment),KPe=l(),AQ=a("p"),ZPe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),e$e=l(),Wi=a("p"),o$e=o("The configuration class to instantiate is selected based on the "),LQ=a("code"),r$e=o("model_type"),t$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),BQ=a("code"),a$e=o("pretrained_model_name_or_path"),n$e=o(":"),s$e=l(),v=a("ul"),Xf=a("li"),xQ=a("strong"),l$e=o("albert"),i$e=o(" \u2014 "),J8=a("a"),d$e=o("AlbertConfig"),c$e=o(" (ALBERT model)"),f$e=l(),Vf=a("li"),kQ=a("strong"),m$e=o("bart"),g$e=o(" \u2014 "),Y8=a("a"),h$e=o("BartConfig"),p$e=o(" (BART model)"),_$e=l(),zf=a("li"),RQ=a("strong"),u$e=o("beit"),b$e=o(" \u2014 "),K8=a("a"),v$e=o("BeitConfig"),T$e=o(" (BEiT model)"),F$e=l(),Wf=a("li"),SQ=a("strong"),C$e=o("bert"),M$e=o(" \u2014 "),Z8=a("a"),E$e=o("BertConfig"),y$e=o(" (BERT model)"),w$e=l(),Qf=a("li"),PQ=a("strong"),A$e=o("bert-generation"),L$e=o(" \u2014 "),e9=a("a"),B$e=o("BertGenerationConfig"),x$e=o(" (Bert Generation model)"),k$e=l(),Hf=a("li"),$Q=a("strong"),R$e=o("big_bird"),S$e=o(" \u2014 "),o9=a("a"),P$e=o("BigBirdConfig"),$$e=o(" (BigBird model)"),I$e=l(),Uf=a("li"),IQ=a("strong"),j$e=o("bigbird_pegasus"),D$e=o(" \u2014 "),r9=a("a"),N$e=o("BigBirdPegasusConfig"),q$e=o(" (BigBirdPegasus model)"),G$e=l(),Jf=a("li"),jQ=a("strong"),O$e=o("blenderbot"),X$e=o(" \u2014 "),t9=a("a"),V$e=o("BlenderbotConfig"),z$e=o(" (Blenderbot model)"),W$e=l(),Yf=a("li"),DQ=a("strong"),Q$e=o("blenderbot-small"),H$e=o(" \u2014 "),a9=a("a"),U$e=o("BlenderbotSmallConfig"),J$e=o(" (BlenderbotSmall model)"),Y$e=l(),Kf=a("li"),NQ=a("strong"),K$e=o("camembert"),Z$e=o(" \u2014 "),n9=a("a"),eIe=o("CamembertConfig"),oIe=o(" (CamemBERT model)"),rIe=l(),Zf=a("li"),qQ=a("strong"),tIe=o("canine"),aIe=o(" \u2014 "),s9=a("a"),nIe=o("CanineConfig"),sIe=o(" (Canine model)"),lIe=l(),em=a("li"),GQ=a("strong"),iIe=o("clip"),dIe=o(" \u2014 "),l9=a("a"),cIe=o("CLIPConfig"),fIe=o(" (CLIP model)"),mIe=l(),om=a("li"),OQ=a("strong"),gIe=o("convbert"),hIe=o(" \u2014 "),i9=a("a"),pIe=o("ConvBertConfig"),_Ie=o(" (ConvBERT model)"),uIe=l(),rm=a("li"),XQ=a("strong"),bIe=o("convnext"),vIe=o(" \u2014 "),d9=a("a"),TIe=o("ConvNextConfig"),FIe=o(" (ConvNext model)"),CIe=l(),tm=a("li"),VQ=a("strong"),MIe=o("ctrl"),EIe=o(" \u2014 "),c9=a("a"),yIe=o("CTRLConfig"),wIe=o(" (CTRL model)"),AIe=l(),am=a("li"),zQ=a("strong"),LIe=o("data2vec-audio"),BIe=o(" \u2014 "),f9=a("a"),xIe=o("Data2VecAudioConfig"),kIe=o(" (Data2VecAudio model)"),RIe=l(),nm=a("li"),WQ=a("strong"),SIe=o("data2vec-text"),PIe=o(" \u2014 "),m9=a("a"),$Ie=o("Data2VecTextConfig"),IIe=o(" (Data2VecText model)"),jIe=l(),sm=a("li"),QQ=a("strong"),DIe=o("deberta"),NIe=o(" \u2014 "),g9=a("a"),qIe=o("DebertaConfig"),GIe=o(" (DeBERTa model)"),OIe=l(),lm=a("li"),HQ=a("strong"),XIe=o("deberta-v2"),VIe=o(" \u2014 "),h9=a("a"),zIe=o("DebertaV2Config"),WIe=o(" (DeBERTa-v2 model)"),QIe=l(),im=a("li"),UQ=a("strong"),HIe=o("deit"),UIe=o(" \u2014 "),p9=a("a"),JIe=o("DeiTConfig"),YIe=o(" (DeiT model)"),KIe=l(),dm=a("li"),JQ=a("strong"),ZIe=o("detr"),eje=o(" \u2014 "),_9=a("a"),oje=o("DetrConfig"),rje=o(" (DETR model)"),tje=l(),cm=a("li"),YQ=a("strong"),aje=o("distilbert"),nje=o(" \u2014 "),u9=a("a"),sje=o("DistilBertConfig"),lje=o(" (DistilBERT model)"),ije=l(),fm=a("li"),KQ=a("strong"),dje=o("dpr"),cje=o(" \u2014 "),b9=a("a"),fje=o("DPRConfig"),mje=o(" (DPR model)"),gje=l(),mm=a("li"),ZQ=a("strong"),hje=o("electra"),pje=o(" \u2014 "),v9=a("a"),_je=o("ElectraConfig"),uje=o(" (ELECTRA model)"),bje=l(),gm=a("li"),eH=a("strong"),vje=o("encoder-decoder"),Tje=o(" \u2014 "),T9=a("a"),Fje=o("EncoderDecoderConfig"),Cje=o(" (Encoder decoder model)"),Mje=l(),hm=a("li"),oH=a("strong"),Eje=o("flaubert"),yje=o(" \u2014 "),F9=a("a"),wje=o("FlaubertConfig"),Aje=o(" (FlauBERT model)"),Lje=l(),pm=a("li"),rH=a("strong"),Bje=o("fnet"),xje=o(" \u2014 "),C9=a("a"),kje=o("FNetConfig"),Rje=o(" (FNet model)"),Sje=l(),_m=a("li"),tH=a("strong"),Pje=o("fsmt"),$je=o(" \u2014 "),M9=a("a"),Ije=o("FSMTConfig"),jje=o(" (FairSeq Machine-Translation model)"),Dje=l(),um=a("li"),aH=a("strong"),Nje=o("funnel"),qje=o(" \u2014 "),E9=a("a"),Gje=o("FunnelConfig"),Oje=o(" (Funnel Transformer model)"),Xje=l(),bm=a("li"),nH=a("strong"),Vje=o("gpt2"),zje=o(" \u2014 "),y9=a("a"),Wje=o("GPT2Config"),Qje=o(" (OpenAI GPT-2 model)"),Hje=l(),vm=a("li"),sH=a("strong"),Uje=o("gpt_neo"),Jje=o(" \u2014 "),w9=a("a"),Yje=o("GPTNeoConfig"),Kje=o(" (GPT Neo model)"),Zje=l(),Tm=a("li"),lH=a("strong"),eDe=o("gptj"),oDe=o(" \u2014 "),A9=a("a"),rDe=o("GPTJConfig"),tDe=o(" (GPT-J model)"),aDe=l(),Fm=a("li"),iH=a("strong"),nDe=o("hubert"),sDe=o(" \u2014 "),L9=a("a"),lDe=o("HubertConfig"),iDe=o(" (Hubert model)"),dDe=l(),Cm=a("li"),dH=a("strong"),cDe=o("ibert"),fDe=o(" \u2014 "),B9=a("a"),mDe=o("IBertConfig"),gDe=o(" (I-BERT model)"),hDe=l(),Mm=a("li"),cH=a("strong"),pDe=o("imagegpt"),_De=o(" \u2014 "),x9=a("a"),uDe=o("ImageGPTConfig"),bDe=o(" (ImageGPT model)"),vDe=l(),Em=a("li"),fH=a("strong"),TDe=o("layoutlm"),FDe=o(" \u2014 "),k9=a("a"),CDe=o("LayoutLMConfig"),MDe=o(" (LayoutLM model)"),EDe=l(),ym=a("li"),mH=a("strong"),yDe=o("layoutlmv2"),wDe=o(" \u2014 "),R9=a("a"),ADe=o("LayoutLMv2Config"),LDe=o(" (LayoutLMv2 model)"),BDe=l(),wm=a("li"),gH=a("strong"),xDe=o("led"),kDe=o(" \u2014 "),S9=a("a"),RDe=o("LEDConfig"),SDe=o(" (LED model)"),PDe=l(),Am=a("li"),hH=a("strong"),$De=o("longformer"),IDe=o(" \u2014 "),P9=a("a"),jDe=o("LongformerConfig"),DDe=o(" (Longformer model)"),NDe=l(),Lm=a("li"),pH=a("strong"),qDe=o("luke"),GDe=o(" \u2014 "),$9=a("a"),ODe=o("LukeConfig"),XDe=o(" (LUKE model)"),VDe=l(),Bm=a("li"),_H=a("strong"),zDe=o("lxmert"),WDe=o(" \u2014 "),I9=a("a"),QDe=o("LxmertConfig"),HDe=o(" (LXMERT model)"),UDe=l(),xm=a("li"),uH=a("strong"),JDe=o("m2m_100"),YDe=o(" \u2014 "),j9=a("a"),KDe=o("M2M100Config"),ZDe=o(" (M2M100 model)"),eNe=l(),km=a("li"),bH=a("strong"),oNe=o("marian"),rNe=o(" \u2014 "),D9=a("a"),tNe=o("MarianConfig"),aNe=o(" (Marian model)"),nNe=l(),Rm=a("li"),vH=a("strong"),sNe=o("maskformer"),lNe=o(" \u2014 "),N9=a("a"),iNe=o("MaskFormerConfig"),dNe=o(" (MaskFormer model)"),cNe=l(),Sm=a("li"),TH=a("strong"),fNe=o("mbart"),mNe=o(" \u2014 "),q9=a("a"),gNe=o("MBartConfig"),hNe=o(" (mBART model)"),pNe=l(),Pm=a("li"),FH=a("strong"),_Ne=o("megatron-bert"),uNe=o(" \u2014 "),G9=a("a"),bNe=o("MegatronBertConfig"),vNe=o(" (MegatronBert model)"),TNe=l(),$m=a("li"),CH=a("strong"),FNe=o("mobilebert"),CNe=o(" \u2014 "),O9=a("a"),MNe=o("MobileBertConfig"),ENe=o(" (MobileBERT model)"),yNe=l(),Im=a("li"),MH=a("strong"),wNe=o("mpnet"),ANe=o(" \u2014 "),X9=a("a"),LNe=o("MPNetConfig"),BNe=o(" (MPNet model)"),xNe=l(),jm=a("li"),EH=a("strong"),kNe=o("mt5"),RNe=o(" \u2014 "),V9=a("a"),SNe=o("MT5Config"),PNe=o(" (mT5 model)"),$Ne=l(),Dm=a("li"),yH=a("strong"),INe=o("nystromformer"),jNe=o(" \u2014 "),z9=a("a"),DNe=o("NystromformerConfig"),NNe=o(" (Nystromformer model)"),qNe=l(),Nm=a("li"),wH=a("strong"),GNe=o("openai-gpt"),ONe=o(" \u2014 "),W9=a("a"),XNe=o("OpenAIGPTConfig"),VNe=o(" (OpenAI GPT model)"),zNe=l(),qm=a("li"),AH=a("strong"),WNe=o("pegasus"),QNe=o(" \u2014 "),Q9=a("a"),HNe=o("PegasusConfig"),UNe=o(" (Pegasus model)"),JNe=l(),Gm=a("li"),LH=a("strong"),YNe=o("perceiver"),KNe=o(" \u2014 "),H9=a("a"),ZNe=o("PerceiverConfig"),eqe=o(" (Perceiver model)"),oqe=l(),Om=a("li"),BH=a("strong"),rqe=o("plbart"),tqe=o(" \u2014 "),U9=a("a"),aqe=o("PLBartConfig"),nqe=o(" (PLBart model)"),sqe=l(),Xm=a("li"),xH=a("strong"),lqe=o("poolformer"),iqe=o(" \u2014 "),J9=a("a"),dqe=o("PoolFormerConfig"),cqe=o(" (PoolFormer model)"),fqe=l(),Vm=a("li"),kH=a("strong"),mqe=o("prophetnet"),gqe=o(" \u2014 "),Y9=a("a"),hqe=o("ProphetNetConfig"),pqe=o(" (ProphetNet model)"),_qe=l(),zm=a("li"),RH=a("strong"),uqe=o("qdqbert"),bqe=o(" \u2014 "),K9=a("a"),vqe=o("QDQBertConfig"),Tqe=o(" (QDQBert model)"),Fqe=l(),Wm=a("li"),SH=a("strong"),Cqe=o("rag"),Mqe=o(" \u2014 "),Z9=a("a"),Eqe=o("RagConfig"),yqe=o(" (RAG model)"),wqe=l(),Qm=a("li"),PH=a("strong"),Aqe=o("realm"),Lqe=o(" \u2014 "),eB=a("a"),Bqe=o("RealmConfig"),xqe=o(" (Realm model)"),kqe=l(),Hm=a("li"),$H=a("strong"),Rqe=o("reformer"),Sqe=o(" \u2014 "),oB=a("a"),Pqe=o("ReformerConfig"),$qe=o(" (Reformer model)"),Iqe=l(),Um=a("li"),IH=a("strong"),jqe=o("rembert"),Dqe=o(" \u2014 "),rB=a("a"),Nqe=o("RemBertConfig"),qqe=o(" (RemBERT model)"),Gqe=l(),Jm=a("li"),jH=a("strong"),Oqe=o("retribert"),Xqe=o(" \u2014 "),tB=a("a"),Vqe=o("RetriBertConfig"),zqe=o(" (RetriBERT model)"),Wqe=l(),Ym=a("li"),DH=a("strong"),Qqe=o("roberta"),Hqe=o(" \u2014 "),aB=a("a"),Uqe=o("RobertaConfig"),Jqe=o(" (RoBERTa model)"),Yqe=l(),Km=a("li"),NH=a("strong"),Kqe=o("roformer"),Zqe=o(" \u2014 "),nB=a("a"),eGe=o("RoFormerConfig"),oGe=o(" (RoFormer model)"),rGe=l(),Zm=a("li"),qH=a("strong"),tGe=o("segformer"),aGe=o(" \u2014 "),sB=a("a"),nGe=o("SegformerConfig"),sGe=o(" (SegFormer model)"),lGe=l(),eg=a("li"),GH=a("strong"),iGe=o("sew"),dGe=o(" \u2014 "),lB=a("a"),cGe=o("SEWConfig"),fGe=o(" (SEW model)"),mGe=l(),og=a("li"),OH=a("strong"),gGe=o("sew-d"),hGe=o(" \u2014 "),iB=a("a"),pGe=o("SEWDConfig"),_Ge=o(" (SEW-D model)"),uGe=l(),rg=a("li"),XH=a("strong"),bGe=o("speech-encoder-decoder"),vGe=o(" \u2014 "),dB=a("a"),TGe=o("SpeechEncoderDecoderConfig"),FGe=o(" (Speech Encoder decoder model)"),CGe=l(),tg=a("li"),VH=a("strong"),MGe=o("speech_to_text"),EGe=o(" \u2014 "),cB=a("a"),yGe=o("Speech2TextConfig"),wGe=o(" (Speech2Text model)"),AGe=l(),ag=a("li"),zH=a("strong"),LGe=o("speech_to_text_2"),BGe=o(" \u2014 "),fB=a("a"),xGe=o("Speech2Text2Config"),kGe=o(" (Speech2Text2 model)"),RGe=l(),ng=a("li"),WH=a("strong"),SGe=o("splinter"),PGe=o(" \u2014 "),mB=a("a"),$Ge=o("SplinterConfig"),IGe=o(" (Splinter model)"),jGe=l(),sg=a("li"),QH=a("strong"),DGe=o("squeezebert"),NGe=o(" \u2014 "),gB=a("a"),qGe=o("SqueezeBertConfig"),GGe=o(" (SqueezeBERT model)"),OGe=l(),lg=a("li"),HH=a("strong"),XGe=o("swin"),VGe=o(" \u2014 "),hB=a("a"),zGe=o("SwinConfig"),WGe=o(" (Swin model)"),QGe=l(),ig=a("li"),UH=a("strong"),HGe=o("t5"),UGe=o(" \u2014 "),pB=a("a"),JGe=o("T5Config"),YGe=o(" (T5 model)"),KGe=l(),dg=a("li"),JH=a("strong"),ZGe=o("tapas"),eOe=o(" \u2014 "),_B=a("a"),oOe=o("TapasConfig"),rOe=o(" (TAPAS model)"),tOe=l(),cg=a("li"),YH=a("strong"),aOe=o("transfo-xl"),nOe=o(" \u2014 "),uB=a("a"),sOe=o("TransfoXLConfig"),lOe=o(" (Transformer-XL model)"),iOe=l(),fg=a("li"),KH=a("strong"),dOe=o("trocr"),cOe=o(" \u2014 "),bB=a("a"),fOe=o("TrOCRConfig"),mOe=o(" (TrOCR model)"),gOe=l(),mg=a("li"),ZH=a("strong"),hOe=o("unispeech"),pOe=o(" \u2014 "),vB=a("a"),_Oe=o("UniSpeechConfig"),uOe=o(" (UniSpeech model)"),bOe=l(),gg=a("li"),eU=a("strong"),vOe=o("unispeech-sat"),TOe=o(" \u2014 "),TB=a("a"),FOe=o("UniSpeechSatConfig"),COe=o(" (UniSpeechSat model)"),MOe=l(),hg=a("li"),oU=a("strong"),EOe=o("vilt"),yOe=o(" \u2014 "),FB=a("a"),wOe=o("ViltConfig"),AOe=o(" (ViLT model)"),LOe=l(),pg=a("li"),rU=a("strong"),BOe=o("vision-encoder-decoder"),xOe=o(" \u2014 "),CB=a("a"),kOe=o("VisionEncoderDecoderConfig"),ROe=o(" (Vision Encoder decoder model)"),SOe=l(),_g=a("li"),tU=a("strong"),POe=o("vision-text-dual-encoder"),$Oe=o(" \u2014 "),MB=a("a"),IOe=o("VisionTextDualEncoderConfig"),jOe=o(" (VisionTextDualEncoder model)"),DOe=l(),ug=a("li"),aU=a("strong"),NOe=o("visual_bert"),qOe=o(" \u2014 "),EB=a("a"),GOe=o("VisualBertConfig"),OOe=o(" (VisualBert model)"),XOe=l(),bg=a("li"),nU=a("strong"),VOe=o("vit"),zOe=o(" \u2014 "),yB=a("a"),WOe=o("ViTConfig"),QOe=o(" (ViT model)"),HOe=l(),vg=a("li"),sU=a("strong"),UOe=o("vit_mae"),JOe=o(" \u2014 "),wB=a("a"),YOe=o("ViTMAEConfig"),KOe=o(" (ViTMAE model)"),ZOe=l(),Tg=a("li"),lU=a("strong"),eXe=o("wav2vec2"),oXe=o(" \u2014 "),AB=a("a"),rXe=o("Wav2Vec2Config"),tXe=o(" (Wav2Vec2 model)"),aXe=l(),Fg=a("li"),iU=a("strong"),nXe=o("wavlm"),sXe=o(" \u2014 "),LB=a("a"),lXe=o("WavLMConfig"),iXe=o(" (WavLM model)"),dXe=l(),Cg=a("li"),dU=a("strong"),cXe=o("xglm"),fXe=o(" \u2014 "),BB=a("a"),mXe=o("XGLMConfig"),gXe=o(" (XGLM model)"),hXe=l(),Mg=a("li"),cU=a("strong"),pXe=o("xlm"),_Xe=o(" \u2014 "),xB=a("a"),uXe=o("XLMConfig"),bXe=o(" (XLM model)"),vXe=l(),Eg=a("li"),fU=a("strong"),TXe=o("xlm-prophetnet"),FXe=o(" \u2014 "),kB=a("a"),CXe=o("XLMProphetNetConfig"),MXe=o(" (XLMProphetNet model)"),EXe=l(),yg=a("li"),mU=a("strong"),yXe=o("xlm-roberta"),wXe=o(" \u2014 "),RB=a("a"),AXe=o("XLMRobertaConfig"),LXe=o(" (XLM-RoBERTa model)"),BXe=l(),wg=a("li"),gU=a("strong"),xXe=o("xlm-roberta-xl"),kXe=o(" \u2014 "),SB=a("a"),RXe=o("XLMRobertaXLConfig"),SXe=o(" (XLM-RoBERTa-XL model)"),PXe=l(),Ag=a("li"),hU=a("strong"),$Xe=o("xlnet"),IXe=o(" \u2014 "),PB=a("a"),jXe=o("XLNetConfig"),DXe=o(" (XLNet model)"),NXe=l(),Lg=a("li"),pU=a("strong"),qXe=o("yoso"),GXe=o(" \u2014 "),$B=a("a"),OXe=o("YosoConfig"),XXe=o(" (YOSO model)"),VXe=l(),_U=a("p"),zXe=o("Examples:"),WXe=l(),f(lE.$$.fragment),QXe=l(),Bg=a("div"),f(iE.$$.fragment),HXe=l(),uU=a("p"),UXe=o("Register a new configuration for this class."),yxe=l(),Qi=a("h2"),xg=a("a"),bU=a("span"),f(dE.$$.fragment),JXe=l(),vU=a("span"),YXe=o("AutoTokenizer"),wxe=l(),Qo=a("div"),f(cE.$$.fragment),KXe=l(),fE=a("p"),ZXe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),IB=a("a"),eVe=o("AutoTokenizer.from_pretrained()"),oVe=o(" class method."),rVe=l(),mE=a("p"),tVe=o("This class cannot be instantiated directly using "),TU=a("code"),aVe=o("__init__()"),nVe=o(" (throws an error)."),sVe=l(),go=a("div"),f(gE.$$.fragment),lVe=l(),FU=a("p"),iVe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),dVe=l(),Oa=a("p"),cVe=o("The tokenizer class to instantiate is selected based on the "),CU=a("code"),fVe=o("model_type"),mVe=o(` property of the config object (either
passed as an argument or loaded from `),MU=a("code"),gVe=o("pretrained_model_name_or_path"),hVe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EU=a("code"),pVe=o("pretrained_model_name_or_path"),_Ve=o(":"),uVe=l(),E=a("ul"),Wn=a("li"),yU=a("strong"),bVe=o("albert"),vVe=o(" \u2014 "),jB=a("a"),TVe=o("AlbertTokenizer"),FVe=o(" or "),DB=a("a"),CVe=o("AlbertTokenizerFast"),MVe=o(" (ALBERT model)"),EVe=l(),Qn=a("li"),wU=a("strong"),yVe=o("bart"),wVe=o(" \u2014 "),NB=a("a"),AVe=o("BartTokenizer"),LVe=o(" or "),qB=a("a"),BVe=o("BartTokenizerFast"),xVe=o(" (BART model)"),kVe=l(),Hn=a("li"),AU=a("strong"),RVe=o("barthez"),SVe=o(" \u2014 "),GB=a("a"),PVe=o("BarthezTokenizer"),$Ve=o(" or "),OB=a("a"),IVe=o("BarthezTokenizerFast"),jVe=o(" (BARThez model)"),DVe=l(),kg=a("li"),LU=a("strong"),NVe=o("bartpho"),qVe=o(" \u2014 "),XB=a("a"),GVe=o("BartphoTokenizer"),OVe=o(" (BARTpho model)"),XVe=l(),Un=a("li"),BU=a("strong"),VVe=o("bert"),zVe=o(" \u2014 "),VB=a("a"),WVe=o("BertTokenizer"),QVe=o(" or "),zB=a("a"),HVe=o("BertTokenizerFast"),UVe=o(" (BERT model)"),JVe=l(),Rg=a("li"),xU=a("strong"),YVe=o("bert-generation"),KVe=o(" \u2014 "),WB=a("a"),ZVe=o("BertGenerationTokenizer"),eze=o(" (Bert Generation model)"),oze=l(),Sg=a("li"),kU=a("strong"),rze=o("bert-japanese"),tze=o(" \u2014 "),QB=a("a"),aze=o("BertJapaneseTokenizer"),nze=o(" (BertJapanese model)"),sze=l(),Pg=a("li"),RU=a("strong"),lze=o("bertweet"),ize=o(" \u2014 "),HB=a("a"),dze=o("BertweetTokenizer"),cze=o(" (Bertweet model)"),fze=l(),Jn=a("li"),SU=a("strong"),mze=o("big_bird"),gze=o(" \u2014 "),UB=a("a"),hze=o("BigBirdTokenizer"),pze=o(" or "),JB=a("a"),_ze=o("BigBirdTokenizerFast"),uze=o(" (BigBird model)"),bze=l(),Yn=a("li"),PU=a("strong"),vze=o("bigbird_pegasus"),Tze=o(" \u2014 "),YB=a("a"),Fze=o("PegasusTokenizer"),Cze=o(" or "),KB=a("a"),Mze=o("PegasusTokenizerFast"),Eze=o(" (BigBirdPegasus model)"),yze=l(),Kn=a("li"),$U=a("strong"),wze=o("blenderbot"),Aze=o(" \u2014 "),ZB=a("a"),Lze=o("BlenderbotTokenizer"),Bze=o(" or "),ex=a("a"),xze=o("BlenderbotTokenizerFast"),kze=o(" (Blenderbot model)"),Rze=l(),$g=a("li"),IU=a("strong"),Sze=o("blenderbot-small"),Pze=o(" \u2014 "),ox=a("a"),$ze=o("BlenderbotSmallTokenizer"),Ize=o(" (BlenderbotSmall model)"),jze=l(),Ig=a("li"),jU=a("strong"),Dze=o("byt5"),Nze=o(" \u2014 "),rx=a("a"),qze=o("ByT5Tokenizer"),Gze=o(" (ByT5 model)"),Oze=l(),Zn=a("li"),DU=a("strong"),Xze=o("camembert"),Vze=o(" \u2014 "),tx=a("a"),zze=o("CamembertTokenizer"),Wze=o(" or "),ax=a("a"),Qze=o("CamembertTokenizerFast"),Hze=o(" (CamemBERT model)"),Uze=l(),jg=a("li"),NU=a("strong"),Jze=o("canine"),Yze=o(" \u2014 "),nx=a("a"),Kze=o("CanineTokenizer"),Zze=o(" (Canine model)"),eWe=l(),es=a("li"),qU=a("strong"),oWe=o("clip"),rWe=o(" \u2014 "),sx=a("a"),tWe=o("CLIPTokenizer"),aWe=o(" or "),lx=a("a"),nWe=o("CLIPTokenizerFast"),sWe=o(" (CLIP model)"),lWe=l(),os=a("li"),GU=a("strong"),iWe=o("convbert"),dWe=o(" \u2014 "),ix=a("a"),cWe=o("ConvBertTokenizer"),fWe=o(" or "),dx=a("a"),mWe=o("ConvBertTokenizerFast"),gWe=o(" (ConvBERT model)"),hWe=l(),rs=a("li"),OU=a("strong"),pWe=o("cpm"),_We=o(" \u2014 "),cx=a("a"),uWe=o("CpmTokenizer"),bWe=o(" or "),XU=a("code"),vWe=o("CpmTokenizerFast"),TWe=o(" (CPM model)"),FWe=l(),Dg=a("li"),VU=a("strong"),CWe=o("ctrl"),MWe=o(" \u2014 "),fx=a("a"),EWe=o("CTRLTokenizer"),yWe=o(" (CTRL model)"),wWe=l(),ts=a("li"),zU=a("strong"),AWe=o("deberta"),LWe=o(" \u2014 "),mx=a("a"),BWe=o("DebertaTokenizer"),xWe=o(" or "),gx=a("a"),kWe=o("DebertaTokenizerFast"),RWe=o(" (DeBERTa model)"),SWe=l(),Ng=a("li"),WU=a("strong"),PWe=o("deberta-v2"),$We=o(" \u2014 "),hx=a("a"),IWe=o("DebertaV2Tokenizer"),jWe=o(" (DeBERTa-v2 model)"),DWe=l(),as=a("li"),QU=a("strong"),NWe=o("distilbert"),qWe=o(" \u2014 "),px=a("a"),GWe=o("DistilBertTokenizer"),OWe=o(" or "),_x=a("a"),XWe=o("DistilBertTokenizerFast"),VWe=o(" (DistilBERT model)"),zWe=l(),ns=a("li"),HU=a("strong"),WWe=o("dpr"),QWe=o(" \u2014 "),ux=a("a"),HWe=o("DPRQuestionEncoderTokenizer"),UWe=o(" or "),bx=a("a"),JWe=o("DPRQuestionEncoderTokenizerFast"),YWe=o(" (DPR model)"),KWe=l(),ss=a("li"),UU=a("strong"),ZWe=o("electra"),eQe=o(" \u2014 "),vx=a("a"),oQe=o("ElectraTokenizer"),rQe=o(" or "),Tx=a("a"),tQe=o("ElectraTokenizerFast"),aQe=o(" (ELECTRA model)"),nQe=l(),qg=a("li"),JU=a("strong"),sQe=o("flaubert"),lQe=o(" \u2014 "),Fx=a("a"),iQe=o("FlaubertTokenizer"),dQe=o(" (FlauBERT model)"),cQe=l(),ls=a("li"),YU=a("strong"),fQe=o("fnet"),mQe=o(" \u2014 "),Cx=a("a"),gQe=o("FNetTokenizer"),hQe=o(" or "),Mx=a("a"),pQe=o("FNetTokenizerFast"),_Qe=o(" (FNet model)"),uQe=l(),Gg=a("li"),KU=a("strong"),bQe=o("fsmt"),vQe=o(" \u2014 "),Ex=a("a"),TQe=o("FSMTTokenizer"),FQe=o(" (FairSeq Machine-Translation model)"),CQe=l(),is=a("li"),ZU=a("strong"),MQe=o("funnel"),EQe=o(" \u2014 "),yx=a("a"),yQe=o("FunnelTokenizer"),wQe=o(" or "),wx=a("a"),AQe=o("FunnelTokenizerFast"),LQe=o(" (Funnel Transformer model)"),BQe=l(),ds=a("li"),eJ=a("strong"),xQe=o("gpt2"),kQe=o(" \u2014 "),Ax=a("a"),RQe=o("GPT2Tokenizer"),SQe=o(" or "),Lx=a("a"),PQe=o("GPT2TokenizerFast"),$Qe=o(" (OpenAI GPT-2 model)"),IQe=l(),cs=a("li"),oJ=a("strong"),jQe=o("gpt_neo"),DQe=o(" \u2014 "),Bx=a("a"),NQe=o("GPT2Tokenizer"),qQe=o(" or "),xx=a("a"),GQe=o("GPT2TokenizerFast"),OQe=o(" (GPT Neo model)"),XQe=l(),fs=a("li"),rJ=a("strong"),VQe=o("herbert"),zQe=o(" \u2014 "),kx=a("a"),WQe=o("HerbertTokenizer"),QQe=o(" or "),Rx=a("a"),HQe=o("HerbertTokenizerFast"),UQe=o(" (HerBERT model)"),JQe=l(),Og=a("li"),tJ=a("strong"),YQe=o("hubert"),KQe=o(" \u2014 "),Sx=a("a"),ZQe=o("Wav2Vec2CTCTokenizer"),eHe=o(" (Hubert model)"),oHe=l(),ms=a("li"),aJ=a("strong"),rHe=o("ibert"),tHe=o(" \u2014 "),Px=a("a"),aHe=o("RobertaTokenizer"),nHe=o(" or "),$x=a("a"),sHe=o("RobertaTokenizerFast"),lHe=o(" (I-BERT model)"),iHe=l(),gs=a("li"),nJ=a("strong"),dHe=o("layoutlm"),cHe=o(" \u2014 "),Ix=a("a"),fHe=o("LayoutLMTokenizer"),mHe=o(" or "),jx=a("a"),gHe=o("LayoutLMTokenizerFast"),hHe=o(" (LayoutLM model)"),pHe=l(),hs=a("li"),sJ=a("strong"),_He=o("layoutlmv2"),uHe=o(" \u2014 "),Dx=a("a"),bHe=o("LayoutLMv2Tokenizer"),vHe=o(" or "),Nx=a("a"),THe=o("LayoutLMv2TokenizerFast"),FHe=o(" (LayoutLMv2 model)"),CHe=l(),ps=a("li"),lJ=a("strong"),MHe=o("layoutxlm"),EHe=o(" \u2014 "),qx=a("a"),yHe=o("LayoutXLMTokenizer"),wHe=o(" or "),Gx=a("a"),AHe=o("LayoutXLMTokenizerFast"),LHe=o(" (LayoutXLM model)"),BHe=l(),_s=a("li"),iJ=a("strong"),xHe=o("led"),kHe=o(" \u2014 "),Ox=a("a"),RHe=o("LEDTokenizer"),SHe=o(" or "),Xx=a("a"),PHe=o("LEDTokenizerFast"),$He=o(" (LED model)"),IHe=l(),us=a("li"),dJ=a("strong"),jHe=o("longformer"),DHe=o(" \u2014 "),Vx=a("a"),NHe=o("LongformerTokenizer"),qHe=o(" or "),zx=a("a"),GHe=o("LongformerTokenizerFast"),OHe=o(" (Longformer model)"),XHe=l(),Xg=a("li"),cJ=a("strong"),VHe=o("luke"),zHe=o(" \u2014 "),Wx=a("a"),WHe=o("LukeTokenizer"),QHe=o(" (LUKE model)"),HHe=l(),bs=a("li"),fJ=a("strong"),UHe=o("lxmert"),JHe=o(" \u2014 "),Qx=a("a"),YHe=o("LxmertTokenizer"),KHe=o(" or "),Hx=a("a"),ZHe=o("LxmertTokenizerFast"),eUe=o(" (LXMERT model)"),oUe=l(),Vg=a("li"),mJ=a("strong"),rUe=o("m2m_100"),tUe=o(" \u2014 "),Ux=a("a"),aUe=o("M2M100Tokenizer"),nUe=o(" (M2M100 model)"),sUe=l(),zg=a("li"),gJ=a("strong"),lUe=o("marian"),iUe=o(" \u2014 "),Jx=a("a"),dUe=o("MarianTokenizer"),cUe=o(" (Marian model)"),fUe=l(),vs=a("li"),hJ=a("strong"),mUe=o("mbart"),gUe=o(" \u2014 "),Yx=a("a"),hUe=o("MBartTokenizer"),pUe=o(" or "),Kx=a("a"),_Ue=o("MBartTokenizerFast"),uUe=o(" (mBART model)"),bUe=l(),Ts=a("li"),pJ=a("strong"),vUe=o("mbart50"),TUe=o(" \u2014 "),Zx=a("a"),FUe=o("MBart50Tokenizer"),CUe=o(" or "),ek=a("a"),MUe=o("MBart50TokenizerFast"),EUe=o(" (mBART-50 model)"),yUe=l(),Wg=a("li"),_J=a("strong"),wUe=o("mluke"),AUe=o(" \u2014 "),ok=a("a"),LUe=o("MLukeTokenizer"),BUe=o(" (mLUKE model)"),xUe=l(),Fs=a("li"),uJ=a("strong"),kUe=o("mobilebert"),RUe=o(" \u2014 "),rk=a("a"),SUe=o("MobileBertTokenizer"),PUe=o(" or "),tk=a("a"),$Ue=o("MobileBertTokenizerFast"),IUe=o(" (MobileBERT model)"),jUe=l(),Cs=a("li"),bJ=a("strong"),DUe=o("mpnet"),NUe=o(" \u2014 "),ak=a("a"),qUe=o("MPNetTokenizer"),GUe=o(" or "),nk=a("a"),OUe=o("MPNetTokenizerFast"),XUe=o(" (MPNet model)"),VUe=l(),Ms=a("li"),vJ=a("strong"),zUe=o("mt5"),WUe=o(" \u2014 "),sk=a("a"),QUe=o("MT5Tokenizer"),HUe=o(" or "),lk=a("a"),UUe=o("MT5TokenizerFast"),JUe=o(" (mT5 model)"),YUe=l(),Es=a("li"),TJ=a("strong"),KUe=o("openai-gpt"),ZUe=o(" \u2014 "),ik=a("a"),eJe=o("OpenAIGPTTokenizer"),oJe=o(" or "),dk=a("a"),rJe=o("OpenAIGPTTokenizerFast"),tJe=o(" (OpenAI GPT model)"),aJe=l(),ys=a("li"),FJ=a("strong"),nJe=o("pegasus"),sJe=o(" \u2014 "),ck=a("a"),lJe=o("PegasusTokenizer"),iJe=o(" or "),fk=a("a"),dJe=o("PegasusTokenizerFast"),cJe=o(" (Pegasus model)"),fJe=l(),Qg=a("li"),CJ=a("strong"),mJe=o("perceiver"),gJe=o(" \u2014 "),mk=a("a"),hJe=o("PerceiverTokenizer"),pJe=o(" (Perceiver model)"),_Je=l(),Hg=a("li"),MJ=a("strong"),uJe=o("phobert"),bJe=o(" \u2014 "),gk=a("a"),vJe=o("PhobertTokenizer"),TJe=o(" (PhoBERT model)"),FJe=l(),Ug=a("li"),EJ=a("strong"),CJe=o("plbart"),MJe=o(" \u2014 "),hk=a("a"),EJe=o("PLBartTokenizer"),yJe=o(" (PLBart model)"),wJe=l(),Jg=a("li"),yJ=a("strong"),AJe=o("prophetnet"),LJe=o(" \u2014 "),pk=a("a"),BJe=o("ProphetNetTokenizer"),xJe=o(" (ProphetNet model)"),kJe=l(),ws=a("li"),wJ=a("strong"),RJe=o("qdqbert"),SJe=o(" \u2014 "),_k=a("a"),PJe=o("BertTokenizer"),$Je=o(" or "),uk=a("a"),IJe=o("BertTokenizerFast"),jJe=o(" (QDQBert model)"),DJe=l(),Yg=a("li"),AJ=a("strong"),NJe=o("rag"),qJe=o(" \u2014 "),bk=a("a"),GJe=o("RagTokenizer"),OJe=o(" (RAG model)"),XJe=l(),As=a("li"),LJ=a("strong"),VJe=o("realm"),zJe=o(" \u2014 "),vk=a("a"),WJe=o("RealmTokenizer"),QJe=o(" or "),Tk=a("a"),HJe=o("RealmTokenizerFast"),UJe=o(" (Realm model)"),JJe=l(),Ls=a("li"),BJ=a("strong"),YJe=o("reformer"),KJe=o(" \u2014 "),Fk=a("a"),ZJe=o("ReformerTokenizer"),eYe=o(" or "),Ck=a("a"),oYe=o("ReformerTokenizerFast"),rYe=o(" (Reformer model)"),tYe=l(),Bs=a("li"),xJ=a("strong"),aYe=o("rembert"),nYe=o(" \u2014 "),Mk=a("a"),sYe=o("RemBertTokenizer"),lYe=o(" or "),Ek=a("a"),iYe=o("RemBertTokenizerFast"),dYe=o(" (RemBERT model)"),cYe=l(),xs=a("li"),kJ=a("strong"),fYe=o("retribert"),mYe=o(" \u2014 "),yk=a("a"),gYe=o("RetriBertTokenizer"),hYe=o(" or "),wk=a("a"),pYe=o("RetriBertTokenizerFast"),_Ye=o(" (RetriBERT model)"),uYe=l(),ks=a("li"),RJ=a("strong"),bYe=o("roberta"),vYe=o(" \u2014 "),Ak=a("a"),TYe=o("RobertaTokenizer"),FYe=o(" or "),Lk=a("a"),CYe=o("RobertaTokenizerFast"),MYe=o(" (RoBERTa model)"),EYe=l(),Rs=a("li"),SJ=a("strong"),yYe=o("roformer"),wYe=o(" \u2014 "),Bk=a("a"),AYe=o("RoFormerTokenizer"),LYe=o(" or "),xk=a("a"),BYe=o("RoFormerTokenizerFast"),xYe=o(" (RoFormer model)"),kYe=l(),Kg=a("li"),PJ=a("strong"),RYe=o("speech_to_text"),SYe=o(" \u2014 "),kk=a("a"),PYe=o("Speech2TextTokenizer"),$Ye=o(" (Speech2Text model)"),IYe=l(),Zg=a("li"),$J=a("strong"),jYe=o("speech_to_text_2"),DYe=o(" \u2014 "),Rk=a("a"),NYe=o("Speech2Text2Tokenizer"),qYe=o(" (Speech2Text2 model)"),GYe=l(),Ss=a("li"),IJ=a("strong"),OYe=o("splinter"),XYe=o(" \u2014 "),Sk=a("a"),VYe=o("SplinterTokenizer"),zYe=o(" or "),Pk=a("a"),WYe=o("SplinterTokenizerFast"),QYe=o(" (Splinter model)"),HYe=l(),Ps=a("li"),jJ=a("strong"),UYe=o("squeezebert"),JYe=o(" \u2014 "),$k=a("a"),YYe=o("SqueezeBertTokenizer"),KYe=o(" or "),Ik=a("a"),ZYe=o("SqueezeBertTokenizerFast"),eKe=o(" (SqueezeBERT model)"),oKe=l(),$s=a("li"),DJ=a("strong"),rKe=o("t5"),tKe=o(" \u2014 "),jk=a("a"),aKe=o("T5Tokenizer"),nKe=o(" or "),Dk=a("a"),sKe=o("T5TokenizerFast"),lKe=o(" (T5 model)"),iKe=l(),eh=a("li"),NJ=a("strong"),dKe=o("tapas"),cKe=o(" \u2014 "),Nk=a("a"),fKe=o("TapasTokenizer"),mKe=o(" (TAPAS model)"),gKe=l(),oh=a("li"),qJ=a("strong"),hKe=o("transfo-xl"),pKe=o(" \u2014 "),qk=a("a"),_Ke=o("TransfoXLTokenizer"),uKe=o(" (Transformer-XL model)"),bKe=l(),rh=a("li"),GJ=a("strong"),vKe=o("wav2vec2"),TKe=o(" \u2014 "),Gk=a("a"),FKe=o("Wav2Vec2CTCTokenizer"),CKe=o(" (Wav2Vec2 model)"),MKe=l(),th=a("li"),OJ=a("strong"),EKe=o("wav2vec2_phoneme"),yKe=o(" \u2014 "),Ok=a("a"),wKe=o("Wav2Vec2PhonemeCTCTokenizer"),AKe=o(" (Wav2Vec2Phoneme model)"),LKe=l(),Is=a("li"),XJ=a("strong"),BKe=o("xglm"),xKe=o(" \u2014 "),Xk=a("a"),kKe=o("XGLMTokenizer"),RKe=o(" or "),Vk=a("a"),SKe=o("XGLMTokenizerFast"),PKe=o(" (XGLM model)"),$Ke=l(),ah=a("li"),VJ=a("strong"),IKe=o("xlm"),jKe=o(" \u2014 "),zk=a("a"),DKe=o("XLMTokenizer"),NKe=o(" (XLM model)"),qKe=l(),nh=a("li"),zJ=a("strong"),GKe=o("xlm-prophetnet"),OKe=o(" \u2014 "),Wk=a("a"),XKe=o("XLMProphetNetTokenizer"),VKe=o(" (XLMProphetNet model)"),zKe=l(),js=a("li"),WJ=a("strong"),WKe=o("xlm-roberta"),QKe=o(" \u2014 "),Qk=a("a"),HKe=o("XLMRobertaTokenizer"),UKe=o(" or "),Hk=a("a"),JKe=o("XLMRobertaTokenizerFast"),YKe=o(" (XLM-RoBERTa model)"),KKe=l(),Ds=a("li"),QJ=a("strong"),ZKe=o("xlnet"),eZe=o(" \u2014 "),Uk=a("a"),oZe=o("XLNetTokenizer"),rZe=o(" or "),Jk=a("a"),tZe=o("XLNetTokenizerFast"),aZe=o(" (XLNet model)"),nZe=l(),HJ=a("p"),sZe=o("Examples:"),lZe=l(),f(hE.$$.fragment),iZe=l(),sh=a("div"),f(pE.$$.fragment),dZe=l(),UJ=a("p"),cZe=o("Register a new tokenizer in this mapping."),Axe=l(),Hi=a("h2"),lh=a("a"),JJ=a("span"),f(_E.$$.fragment),fZe=l(),YJ=a("span"),mZe=o("AutoFeatureExtractor"),Lxe=l(),Ho=a("div"),f(uE.$$.fragment),gZe=l(),bE=a("p"),hZe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Yk=a("a"),pZe=o("AutoFeatureExtractor.from_pretrained()"),_Ze=o(" class method."),uZe=l(),vE=a("p"),bZe=o("This class cannot be instantiated directly using "),KJ=a("code"),vZe=o("__init__()"),TZe=o(" (throws an error)."),FZe=l(),$e=a("div"),f(TE.$$.fragment),CZe=l(),ZJ=a("p"),MZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),EZe=l(),Xa=a("p"),yZe=o("The feature extractor class to instantiate is selected based on the "),eY=a("code"),wZe=o("model_type"),AZe=o(` property of the config object
(either passed as an argument or loaded from `),oY=a("code"),LZe=o("pretrained_model_name_or_path"),BZe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),rY=a("code"),xZe=o("pretrained_model_name_or_path"),kZe=o(":"),RZe=l(),ae=a("ul"),ih=a("li"),tY=a("strong"),SZe=o("beit"),PZe=o(" \u2014 "),Kk=a("a"),$Ze=o("BeitFeatureExtractor"),IZe=o(" (BEiT model)"),jZe=l(),dh=a("li"),aY=a("strong"),DZe=o("clip"),NZe=o(" \u2014 "),Zk=a("a"),qZe=o("CLIPFeatureExtractor"),GZe=o(" (CLIP model)"),OZe=l(),ch=a("li"),nY=a("strong"),XZe=o("convnext"),VZe=o(" \u2014 "),eR=a("a"),zZe=o("ConvNextFeatureExtractor"),WZe=o(" (ConvNext model)"),QZe=l(),fh=a("li"),sY=a("strong"),HZe=o("deit"),UZe=o(" \u2014 "),oR=a("a"),JZe=o("DeiTFeatureExtractor"),YZe=o(" (DeiT model)"),KZe=l(),mh=a("li"),lY=a("strong"),ZZe=o("detr"),eeo=o(" \u2014 "),rR=a("a"),oeo=o("DetrFeatureExtractor"),reo=o(" (DETR model)"),teo=l(),gh=a("li"),iY=a("strong"),aeo=o("hubert"),neo=o(" \u2014 "),tR=a("a"),seo=o("Wav2Vec2FeatureExtractor"),leo=o(" (Hubert model)"),ieo=l(),hh=a("li"),dY=a("strong"),deo=o("layoutlmv2"),ceo=o(" \u2014 "),aR=a("a"),feo=o("LayoutLMv2FeatureExtractor"),meo=o(" (LayoutLMv2 model)"),geo=l(),ph=a("li"),cY=a("strong"),heo=o("maskformer"),peo=o(" \u2014 "),nR=a("a"),_eo=o("MaskFormerFeatureExtractor"),ueo=o(" (MaskFormer model)"),beo=l(),_h=a("li"),fY=a("strong"),veo=o("perceiver"),Teo=o(" \u2014 "),sR=a("a"),Feo=o("PerceiverFeatureExtractor"),Ceo=o(" (Perceiver model)"),Meo=l(),uh=a("li"),mY=a("strong"),Eeo=o("poolformer"),yeo=o(" \u2014 "),lR=a("a"),weo=o("PoolFormerFeatureExtractor"),Aeo=o(" (PoolFormer model)"),Leo=l(),bh=a("li"),gY=a("strong"),Beo=o("segformer"),xeo=o(" \u2014 "),iR=a("a"),keo=o("SegformerFeatureExtractor"),Reo=o(" (SegFormer model)"),Seo=l(),vh=a("li"),hY=a("strong"),Peo=o("speech_to_text"),$eo=o(" \u2014 "),dR=a("a"),Ieo=o("Speech2TextFeatureExtractor"),jeo=o(" (Speech2Text model)"),Deo=l(),Th=a("li"),pY=a("strong"),Neo=o("swin"),qeo=o(" \u2014 "),cR=a("a"),Geo=o("ViTFeatureExtractor"),Oeo=o(" (Swin model)"),Xeo=l(),Fh=a("li"),_Y=a("strong"),Veo=o("vit"),zeo=o(" \u2014 "),fR=a("a"),Weo=o("ViTFeatureExtractor"),Qeo=o(" (ViT model)"),Heo=l(),Ch=a("li"),uY=a("strong"),Ueo=o("vit_mae"),Jeo=o(" \u2014 "),mR=a("a"),Yeo=o("ViTFeatureExtractor"),Keo=o(" (ViTMAE model)"),Zeo=l(),Mh=a("li"),bY=a("strong"),eoo=o("wav2vec2"),ooo=o(" \u2014 "),gR=a("a"),roo=o("Wav2Vec2FeatureExtractor"),too=o(" (Wav2Vec2 model)"),aoo=l(),f(Eh.$$.fragment),noo=l(),vY=a("p"),soo=o("Examples:"),loo=l(),f(FE.$$.fragment),ioo=l(),yh=a("div"),f(CE.$$.fragment),doo=l(),TY=a("p"),coo=o("Register a new feature extractor for this class."),Bxe=l(),Ui=a("h2"),wh=a("a"),FY=a("span"),f(ME.$$.fragment),foo=l(),CY=a("span"),moo=o("AutoProcessor"),xxe=l(),Uo=a("div"),f(EE.$$.fragment),goo=l(),yE=a("p"),hoo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),hR=a("a"),poo=o("AutoProcessor.from_pretrained()"),_oo=o(" class method."),uoo=l(),wE=a("p"),boo=o("This class cannot be instantiated directly using "),MY=a("code"),voo=o("__init__()"),Too=o(" (throws an error)."),Foo=l(),Ie=a("div"),f(AE.$$.fragment),Coo=l(),EY=a("p"),Moo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Eoo=l(),Ji=a("p"),yoo=o("The processor class to instantiate is selected based on the "),yY=a("code"),woo=o("model_type"),Aoo=o(` property of the config object (either
passed as an argument or loaded from `),wY=a("code"),Loo=o("pretrained_model_name_or_path"),Boo=o(" if possible):"),xoo=l(),Be=a("ul"),Ah=a("li"),AY=a("strong"),koo=o("clip"),Roo=o(" \u2014 "),pR=a("a"),Soo=o("CLIPProcessor"),Poo=o(" (CLIP model)"),$oo=l(),Lh=a("li"),LY=a("strong"),Ioo=o("layoutlmv2"),joo=o(" \u2014 "),_R=a("a"),Doo=o("LayoutLMv2Processor"),Noo=o(" (LayoutLMv2 model)"),qoo=l(),Bh=a("li"),BY=a("strong"),Goo=o("layoutxlm"),Ooo=o(" \u2014 "),uR=a("a"),Xoo=o("LayoutXLMProcessor"),Voo=o(" (LayoutXLM model)"),zoo=l(),xh=a("li"),xY=a("strong"),Woo=o("speech_to_text"),Qoo=o(" \u2014 "),bR=a("a"),Hoo=o("Speech2TextProcessor"),Uoo=o(" (Speech2Text model)"),Joo=l(),kh=a("li"),kY=a("strong"),Yoo=o("speech_to_text_2"),Koo=o(" \u2014 "),vR=a("a"),Zoo=o("Speech2Text2Processor"),ero=o(" (Speech2Text2 model)"),oro=l(),Rh=a("li"),RY=a("strong"),rro=o("trocr"),tro=o(" \u2014 "),TR=a("a"),aro=o("TrOCRProcessor"),nro=o(" (TrOCR model)"),sro=l(),Sh=a("li"),SY=a("strong"),lro=o("vision-text-dual-encoder"),iro=o(" \u2014 "),FR=a("a"),dro=o("VisionTextDualEncoderProcessor"),cro=o(" (VisionTextDualEncoder model)"),fro=l(),Ph=a("li"),PY=a("strong"),mro=o("wav2vec2"),gro=o(" \u2014 "),CR=a("a"),hro=o("Wav2Vec2Processor"),pro=o(" (Wav2Vec2 model)"),_ro=l(),f($h.$$.fragment),uro=l(),$Y=a("p"),bro=o("Examples:"),vro=l(),f(LE.$$.fragment),Tro=l(),Ih=a("div"),f(BE.$$.fragment),Fro=l(),IY=a("p"),Cro=o("Register a new processor for this class."),kxe=l(),Yi=a("h2"),jh=a("a"),jY=a("span"),f(xE.$$.fragment),Mro=l(),DY=a("span"),Ero=o("AutoModel"),Rxe=l(),Jo=a("div"),f(kE.$$.fragment),yro=l(),Ki=a("p"),wro=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NY=a("code"),Aro=o("from_pretrained()"),Lro=o("class method or the "),qY=a("code"),Bro=o("from_config()"),xro=o(`class
method.`),kro=l(),RE=a("p"),Rro=o("This class cannot be instantiated directly using "),GY=a("code"),Sro=o("__init__()"),Pro=o(" (throws an error)."),$ro=l(),Vr=a("div"),f(SE.$$.fragment),Iro=l(),OY=a("p"),jro=o("Instantiates one of the base model classes of the library from a configuration."),Dro=l(),Zi=a("p"),Nro=o(`Note:
Loading a model from its configuration file does `),XY=a("strong"),qro=o("not"),Gro=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("code"),Oro=o("from_pretrained()"),Xro=o("to load the model weights."),Vro=l(),zY=a("p"),zro=o("Examples:"),Wro=l(),f(PE.$$.fragment),Qro=l(),je=a("div"),f($E.$$.fragment),Hro=l(),WY=a("p"),Uro=o("Instantiate one of the base model classes of the library from a pretrained model."),Jro=l(),Va=a("p"),Yro=o("The model class to instantiate is selected based on the "),QY=a("code"),Kro=o("model_type"),Zro=o(` property of the config object (either
passed as an argument or loaded from `),HY=a("code"),eto=o("pretrained_model_name_or_path"),oto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UY=a("code"),rto=o("pretrained_model_name_or_path"),tto=o(":"),ato=l(),F=a("ul"),Dh=a("li"),JY=a("strong"),nto=o("albert"),sto=o(" \u2014 "),MR=a("a"),lto=o("AlbertModel"),ito=o(" (ALBERT model)"),dto=l(),Nh=a("li"),YY=a("strong"),cto=o("bart"),fto=o(" \u2014 "),ER=a("a"),mto=o("BartModel"),gto=o(" (BART model)"),hto=l(),qh=a("li"),KY=a("strong"),pto=o("beit"),_to=o(" \u2014 "),yR=a("a"),uto=o("BeitModel"),bto=o(" (BEiT model)"),vto=l(),Gh=a("li"),ZY=a("strong"),Tto=o("bert"),Fto=o(" \u2014 "),wR=a("a"),Cto=o("BertModel"),Mto=o(" (BERT model)"),Eto=l(),Oh=a("li"),eK=a("strong"),yto=o("bert-generation"),wto=o(" \u2014 "),AR=a("a"),Ato=o("BertGenerationEncoder"),Lto=o(" (Bert Generation model)"),Bto=l(),Xh=a("li"),oK=a("strong"),xto=o("big_bird"),kto=o(" \u2014 "),LR=a("a"),Rto=o("BigBirdModel"),Sto=o(" (BigBird model)"),Pto=l(),Vh=a("li"),rK=a("strong"),$to=o("bigbird_pegasus"),Ito=o(" \u2014 "),BR=a("a"),jto=o("BigBirdPegasusModel"),Dto=o(" (BigBirdPegasus model)"),Nto=l(),zh=a("li"),tK=a("strong"),qto=o("blenderbot"),Gto=o(" \u2014 "),xR=a("a"),Oto=o("BlenderbotModel"),Xto=o(" (Blenderbot model)"),Vto=l(),Wh=a("li"),aK=a("strong"),zto=o("blenderbot-small"),Wto=o(" \u2014 "),kR=a("a"),Qto=o("BlenderbotSmallModel"),Hto=o(" (BlenderbotSmall model)"),Uto=l(),Qh=a("li"),nK=a("strong"),Jto=o("camembert"),Yto=o(" \u2014 "),RR=a("a"),Kto=o("CamembertModel"),Zto=o(" (CamemBERT model)"),eao=l(),Hh=a("li"),sK=a("strong"),oao=o("canine"),rao=o(" \u2014 "),SR=a("a"),tao=o("CanineModel"),aao=o(" (Canine model)"),nao=l(),Uh=a("li"),lK=a("strong"),sao=o("clip"),lao=o(" \u2014 "),PR=a("a"),iao=o("CLIPModel"),dao=o(" (CLIP model)"),cao=l(),Jh=a("li"),iK=a("strong"),fao=o("convbert"),mao=o(" \u2014 "),$R=a("a"),gao=o("ConvBertModel"),hao=o(" (ConvBERT model)"),pao=l(),Yh=a("li"),dK=a("strong"),_ao=o("convnext"),uao=o(" \u2014 "),IR=a("a"),bao=o("ConvNextModel"),vao=o(" (ConvNext model)"),Tao=l(),Kh=a("li"),cK=a("strong"),Fao=o("ctrl"),Cao=o(" \u2014 "),jR=a("a"),Mao=o("CTRLModel"),Eao=o(" (CTRL model)"),yao=l(),Zh=a("li"),fK=a("strong"),wao=o("data2vec-audio"),Aao=o(" \u2014 "),DR=a("a"),Lao=o("Data2VecAudioModel"),Bao=o(" (Data2VecAudio model)"),xao=l(),ep=a("li"),mK=a("strong"),kao=o("data2vec-text"),Rao=o(" \u2014 "),NR=a("a"),Sao=o("Data2VecTextModel"),Pao=o(" (Data2VecText model)"),$ao=l(),op=a("li"),gK=a("strong"),Iao=o("deberta"),jao=o(" \u2014 "),qR=a("a"),Dao=o("DebertaModel"),Nao=o(" (DeBERTa model)"),qao=l(),rp=a("li"),hK=a("strong"),Gao=o("deberta-v2"),Oao=o(" \u2014 "),GR=a("a"),Xao=o("DebertaV2Model"),Vao=o(" (DeBERTa-v2 model)"),zao=l(),tp=a("li"),pK=a("strong"),Wao=o("deit"),Qao=o(" \u2014 "),OR=a("a"),Hao=o("DeiTModel"),Uao=o(" (DeiT model)"),Jao=l(),ap=a("li"),_K=a("strong"),Yao=o("detr"),Kao=o(" \u2014 "),XR=a("a"),Zao=o("DetrModel"),eno=o(" (DETR model)"),ono=l(),np=a("li"),uK=a("strong"),rno=o("distilbert"),tno=o(" \u2014 "),VR=a("a"),ano=o("DistilBertModel"),nno=o(" (DistilBERT model)"),sno=l(),sp=a("li"),bK=a("strong"),lno=o("dpr"),ino=o(" \u2014 "),zR=a("a"),dno=o("DPRQuestionEncoder"),cno=o(" (DPR model)"),fno=l(),lp=a("li"),vK=a("strong"),mno=o("electra"),gno=o(" \u2014 "),WR=a("a"),hno=o("ElectraModel"),pno=o(" (ELECTRA model)"),_no=l(),ip=a("li"),TK=a("strong"),uno=o("flaubert"),bno=o(" \u2014 "),QR=a("a"),vno=o("FlaubertModel"),Tno=o(" (FlauBERT model)"),Fno=l(),dp=a("li"),FK=a("strong"),Cno=o("fnet"),Mno=o(" \u2014 "),HR=a("a"),Eno=o("FNetModel"),yno=o(" (FNet model)"),wno=l(),cp=a("li"),CK=a("strong"),Ano=o("fsmt"),Lno=o(" \u2014 "),UR=a("a"),Bno=o("FSMTModel"),xno=o(" (FairSeq Machine-Translation model)"),kno=l(),Ns=a("li"),MK=a("strong"),Rno=o("funnel"),Sno=o(" \u2014 "),JR=a("a"),Pno=o("FunnelModel"),$no=o(" or "),YR=a("a"),Ino=o("FunnelBaseModel"),jno=o(" (Funnel Transformer model)"),Dno=l(),fp=a("li"),EK=a("strong"),Nno=o("gpt2"),qno=o(" \u2014 "),KR=a("a"),Gno=o("GPT2Model"),Ono=o(" (OpenAI GPT-2 model)"),Xno=l(),mp=a("li"),yK=a("strong"),Vno=o("gpt_neo"),zno=o(" \u2014 "),ZR=a("a"),Wno=o("GPTNeoModel"),Qno=o(" (GPT Neo model)"),Hno=l(),gp=a("li"),wK=a("strong"),Uno=o("gptj"),Jno=o(" \u2014 "),eS=a("a"),Yno=o("GPTJModel"),Kno=o(" (GPT-J model)"),Zno=l(),hp=a("li"),AK=a("strong"),eso=o("hubert"),oso=o(" \u2014 "),oS=a("a"),rso=o("HubertModel"),tso=o(" (Hubert model)"),aso=l(),pp=a("li"),LK=a("strong"),nso=o("ibert"),sso=o(" \u2014 "),rS=a("a"),lso=o("IBertModel"),iso=o(" (I-BERT model)"),dso=l(),_p=a("li"),BK=a("strong"),cso=o("imagegpt"),fso=o(" \u2014 "),tS=a("a"),mso=o("ImageGPTModel"),gso=o(" (ImageGPT model)"),hso=l(),up=a("li"),xK=a("strong"),pso=o("layoutlm"),_so=o(" \u2014 "),aS=a("a"),uso=o("LayoutLMModel"),bso=o(" (LayoutLM model)"),vso=l(),bp=a("li"),kK=a("strong"),Tso=o("layoutlmv2"),Fso=o(" \u2014 "),nS=a("a"),Cso=o("LayoutLMv2Model"),Mso=o(" (LayoutLMv2 model)"),Eso=l(),vp=a("li"),RK=a("strong"),yso=o("led"),wso=o(" \u2014 "),sS=a("a"),Aso=o("LEDModel"),Lso=o(" (LED model)"),Bso=l(),Tp=a("li"),SK=a("strong"),xso=o("longformer"),kso=o(" \u2014 "),lS=a("a"),Rso=o("LongformerModel"),Sso=o(" (Longformer model)"),Pso=l(),Fp=a("li"),PK=a("strong"),$so=o("luke"),Iso=o(" \u2014 "),iS=a("a"),jso=o("LukeModel"),Dso=o(" (LUKE model)"),Nso=l(),Cp=a("li"),$K=a("strong"),qso=o("lxmert"),Gso=o(" \u2014 "),dS=a("a"),Oso=o("LxmertModel"),Xso=o(" (LXMERT model)"),Vso=l(),Mp=a("li"),IK=a("strong"),zso=o("m2m_100"),Wso=o(" \u2014 "),cS=a("a"),Qso=o("M2M100Model"),Hso=o(" (M2M100 model)"),Uso=l(),Ep=a("li"),jK=a("strong"),Jso=o("marian"),Yso=o(" \u2014 "),fS=a("a"),Kso=o("MarianModel"),Zso=o(" (Marian model)"),elo=l(),yp=a("li"),DK=a("strong"),olo=o("maskformer"),rlo=o(" \u2014 "),mS=a("a"),tlo=o("MaskFormerModel"),alo=o(" (MaskFormer model)"),nlo=l(),wp=a("li"),NK=a("strong"),slo=o("mbart"),llo=o(" \u2014 "),gS=a("a"),ilo=o("MBartModel"),dlo=o(" (mBART model)"),clo=l(),Ap=a("li"),qK=a("strong"),flo=o("megatron-bert"),mlo=o(" \u2014 "),hS=a("a"),glo=o("MegatronBertModel"),hlo=o(" (MegatronBert model)"),plo=l(),Lp=a("li"),GK=a("strong"),_lo=o("mobilebert"),ulo=o(" \u2014 "),pS=a("a"),blo=o("MobileBertModel"),vlo=o(" (MobileBERT model)"),Tlo=l(),Bp=a("li"),OK=a("strong"),Flo=o("mpnet"),Clo=o(" \u2014 "),_S=a("a"),Mlo=o("MPNetModel"),Elo=o(" (MPNet model)"),ylo=l(),xp=a("li"),XK=a("strong"),wlo=o("mt5"),Alo=o(" \u2014 "),uS=a("a"),Llo=o("MT5Model"),Blo=o(" (mT5 model)"),xlo=l(),kp=a("li"),VK=a("strong"),klo=o("nystromformer"),Rlo=o(" \u2014 "),bS=a("a"),Slo=o("NystromformerModel"),Plo=o(" (Nystromformer model)"),$lo=l(),Rp=a("li"),zK=a("strong"),Ilo=o("openai-gpt"),jlo=o(" \u2014 "),vS=a("a"),Dlo=o("OpenAIGPTModel"),Nlo=o(" (OpenAI GPT model)"),qlo=l(),Sp=a("li"),WK=a("strong"),Glo=o("pegasus"),Olo=o(" \u2014 "),TS=a("a"),Xlo=o("PegasusModel"),Vlo=o(" (Pegasus model)"),zlo=l(),Pp=a("li"),QK=a("strong"),Wlo=o("perceiver"),Qlo=o(" \u2014 "),FS=a("a"),Hlo=o("PerceiverModel"),Ulo=o(" (Perceiver model)"),Jlo=l(),$p=a("li"),HK=a("strong"),Ylo=o("plbart"),Klo=o(" \u2014 "),CS=a("a"),Zlo=o("PLBartModel"),eio=o(" (PLBart model)"),oio=l(),Ip=a("li"),UK=a("strong"),rio=o("poolformer"),tio=o(" \u2014 "),MS=a("a"),aio=o("PoolFormerModel"),nio=o(" (PoolFormer model)"),sio=l(),jp=a("li"),JK=a("strong"),lio=o("prophetnet"),iio=o(" \u2014 "),ES=a("a"),dio=o("ProphetNetModel"),cio=o(" (ProphetNet model)"),fio=l(),Dp=a("li"),YK=a("strong"),mio=o("qdqbert"),gio=o(" \u2014 "),yS=a("a"),hio=o("QDQBertModel"),pio=o(" (QDQBert model)"),_io=l(),Np=a("li"),KK=a("strong"),uio=o("reformer"),bio=o(" \u2014 "),wS=a("a"),vio=o("ReformerModel"),Tio=o(" (Reformer model)"),Fio=l(),qp=a("li"),ZK=a("strong"),Cio=o("rembert"),Mio=o(" \u2014 "),AS=a("a"),Eio=o("RemBertModel"),yio=o(" (RemBERT model)"),wio=l(),Gp=a("li"),eZ=a("strong"),Aio=o("retribert"),Lio=o(" \u2014 "),LS=a("a"),Bio=o("RetriBertModel"),xio=o(" (RetriBERT model)"),kio=l(),Op=a("li"),oZ=a("strong"),Rio=o("roberta"),Sio=o(" \u2014 "),BS=a("a"),Pio=o("RobertaModel"),$io=o(" (RoBERTa model)"),Iio=l(),Xp=a("li"),rZ=a("strong"),jio=o("roformer"),Dio=o(" \u2014 "),xS=a("a"),Nio=o("RoFormerModel"),qio=o(" (RoFormer model)"),Gio=l(),Vp=a("li"),tZ=a("strong"),Oio=o("segformer"),Xio=o(" \u2014 "),kS=a("a"),Vio=o("SegformerModel"),zio=o(" (SegFormer model)"),Wio=l(),zp=a("li"),aZ=a("strong"),Qio=o("sew"),Hio=o(" \u2014 "),RS=a("a"),Uio=o("SEWModel"),Jio=o(" (SEW model)"),Yio=l(),Wp=a("li"),nZ=a("strong"),Kio=o("sew-d"),Zio=o(" \u2014 "),SS=a("a"),edo=o("SEWDModel"),odo=o(" (SEW-D model)"),rdo=l(),Qp=a("li"),sZ=a("strong"),tdo=o("speech_to_text"),ado=o(" \u2014 "),PS=a("a"),ndo=o("Speech2TextModel"),sdo=o(" (Speech2Text model)"),ldo=l(),Hp=a("li"),lZ=a("strong"),ido=o("splinter"),ddo=o(" \u2014 "),$S=a("a"),cdo=o("SplinterModel"),fdo=o(" (Splinter model)"),mdo=l(),Up=a("li"),iZ=a("strong"),gdo=o("squeezebert"),hdo=o(" \u2014 "),IS=a("a"),pdo=o("SqueezeBertModel"),_do=o(" (SqueezeBERT model)"),udo=l(),Jp=a("li"),dZ=a("strong"),bdo=o("swin"),vdo=o(" \u2014 "),jS=a("a"),Tdo=o("SwinModel"),Fdo=o(" (Swin model)"),Cdo=l(),Yp=a("li"),cZ=a("strong"),Mdo=o("t5"),Edo=o(" \u2014 "),DS=a("a"),ydo=o("T5Model"),wdo=o(" (T5 model)"),Ado=l(),Kp=a("li"),fZ=a("strong"),Ldo=o("tapas"),Bdo=o(" \u2014 "),NS=a("a"),xdo=o("TapasModel"),kdo=o(" (TAPAS model)"),Rdo=l(),Zp=a("li"),mZ=a("strong"),Sdo=o("transfo-xl"),Pdo=o(" \u2014 "),qS=a("a"),$do=o("TransfoXLModel"),Ido=o(" (Transformer-XL model)"),jdo=l(),e_=a("li"),gZ=a("strong"),Ddo=o("unispeech"),Ndo=o(" \u2014 "),GS=a("a"),qdo=o("UniSpeechModel"),Gdo=o(" (UniSpeech model)"),Odo=l(),o_=a("li"),hZ=a("strong"),Xdo=o("unispeech-sat"),Vdo=o(" \u2014 "),OS=a("a"),zdo=o("UniSpeechSatModel"),Wdo=o(" (UniSpeechSat model)"),Qdo=l(),r_=a("li"),pZ=a("strong"),Hdo=o("vilt"),Udo=o(" \u2014 "),XS=a("a"),Jdo=o("ViltModel"),Ydo=o(" (ViLT model)"),Kdo=l(),t_=a("li"),_Z=a("strong"),Zdo=o("vision-text-dual-encoder"),eco=o(" \u2014 "),VS=a("a"),oco=o("VisionTextDualEncoderModel"),rco=o(" (VisionTextDualEncoder model)"),tco=l(),a_=a("li"),uZ=a("strong"),aco=o("visual_bert"),nco=o(" \u2014 "),zS=a("a"),sco=o("VisualBertModel"),lco=o(" (VisualBert model)"),ico=l(),n_=a("li"),bZ=a("strong"),dco=o("vit"),cco=o(" \u2014 "),WS=a("a"),fco=o("ViTModel"),mco=o(" (ViT model)"),gco=l(),s_=a("li"),vZ=a("strong"),hco=o("vit_mae"),pco=o(" \u2014 "),QS=a("a"),_co=o("ViTMAEModel"),uco=o(" (ViTMAE model)"),bco=l(),l_=a("li"),TZ=a("strong"),vco=o("wav2vec2"),Tco=o(" \u2014 "),HS=a("a"),Fco=o("Wav2Vec2Model"),Cco=o(" (Wav2Vec2 model)"),Mco=l(),i_=a("li"),FZ=a("strong"),Eco=o("wavlm"),yco=o(" \u2014 "),US=a("a"),wco=o("WavLMModel"),Aco=o(" (WavLM model)"),Lco=l(),d_=a("li"),CZ=a("strong"),Bco=o("xglm"),xco=o(" \u2014 "),JS=a("a"),kco=o("XGLMModel"),Rco=o(" (XGLM model)"),Sco=l(),c_=a("li"),MZ=a("strong"),Pco=o("xlm"),$co=o(" \u2014 "),YS=a("a"),Ico=o("XLMModel"),jco=o(" (XLM model)"),Dco=l(),f_=a("li"),EZ=a("strong"),Nco=o("xlm-prophetnet"),qco=o(" \u2014 "),KS=a("a"),Gco=o("XLMProphetNetModel"),Oco=o(" (XLMProphetNet model)"),Xco=l(),m_=a("li"),yZ=a("strong"),Vco=o("xlm-roberta"),zco=o(" \u2014 "),ZS=a("a"),Wco=o("XLMRobertaModel"),Qco=o(" (XLM-RoBERTa model)"),Hco=l(),g_=a("li"),wZ=a("strong"),Uco=o("xlm-roberta-xl"),Jco=o(" \u2014 "),eP=a("a"),Yco=o("XLMRobertaXLModel"),Kco=o(" (XLM-RoBERTa-XL model)"),Zco=l(),h_=a("li"),AZ=a("strong"),efo=o("xlnet"),ofo=o(" \u2014 "),oP=a("a"),rfo=o("XLNetModel"),tfo=o(" (XLNet model)"),afo=l(),p_=a("li"),LZ=a("strong"),nfo=o("yoso"),sfo=o(" \u2014 "),rP=a("a"),lfo=o("YosoModel"),ifo=o(" (YOSO model)"),dfo=l(),__=a("p"),cfo=o("The model is set in evaluation mode by default using "),BZ=a("code"),ffo=o("model.eval()"),mfo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xZ=a("code"),gfo=o("model.train()"),hfo=l(),kZ=a("p"),pfo=o("Examples:"),_fo=l(),f(IE.$$.fragment),Sxe=l(),ed=a("h2"),u_=a("a"),RZ=a("span"),f(jE.$$.fragment),ufo=l(),SZ=a("span"),bfo=o("AutoModelForPreTraining"),Pxe=l(),Yo=a("div"),f(DE.$$.fragment),vfo=l(),od=a("p"),Tfo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PZ=a("code"),Ffo=o("from_pretrained()"),Cfo=o("class method or the "),$Z=a("code"),Mfo=o("from_config()"),Efo=o(`class
method.`),yfo=l(),NE=a("p"),wfo=o("This class cannot be instantiated directly using "),IZ=a("code"),Afo=o("__init__()"),Lfo=o(" (throws an error)."),Bfo=l(),zr=a("div"),f(qE.$$.fragment),xfo=l(),jZ=a("p"),kfo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rfo=l(),rd=a("p"),Sfo=o(`Note:
Loading a model from its configuration file does `),DZ=a("strong"),Pfo=o("not"),$fo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=a("code"),Ifo=o("from_pretrained()"),jfo=o("to load the model weights."),Dfo=l(),qZ=a("p"),Nfo=o("Examples:"),qfo=l(),f(GE.$$.fragment),Gfo=l(),De=a("div"),f(OE.$$.fragment),Ofo=l(),GZ=a("p"),Xfo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vfo=l(),za=a("p"),zfo=o("The model class to instantiate is selected based on the "),OZ=a("code"),Wfo=o("model_type"),Qfo=o(` property of the config object (either
passed as an argument or loaded from `),XZ=a("code"),Hfo=o("pretrained_model_name_or_path"),Ufo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VZ=a("code"),Jfo=o("pretrained_model_name_or_path"),Yfo=o(":"),Kfo=l(),k=a("ul"),b_=a("li"),zZ=a("strong"),Zfo=o("albert"),emo=o(" \u2014 "),tP=a("a"),omo=o("AlbertForPreTraining"),rmo=o(" (ALBERT model)"),tmo=l(),v_=a("li"),WZ=a("strong"),amo=o("bart"),nmo=o(" \u2014 "),aP=a("a"),smo=o("BartForConditionalGeneration"),lmo=o(" (BART model)"),imo=l(),T_=a("li"),QZ=a("strong"),dmo=o("bert"),cmo=o(" \u2014 "),nP=a("a"),fmo=o("BertForPreTraining"),mmo=o(" (BERT model)"),gmo=l(),F_=a("li"),HZ=a("strong"),hmo=o("big_bird"),pmo=o(" \u2014 "),sP=a("a"),_mo=o("BigBirdForPreTraining"),umo=o(" (BigBird model)"),bmo=l(),C_=a("li"),UZ=a("strong"),vmo=o("camembert"),Tmo=o(" \u2014 "),lP=a("a"),Fmo=o("CamembertForMaskedLM"),Cmo=o(" (CamemBERT model)"),Mmo=l(),M_=a("li"),JZ=a("strong"),Emo=o("ctrl"),ymo=o(" \u2014 "),iP=a("a"),wmo=o("CTRLLMHeadModel"),Amo=o(" (CTRL model)"),Lmo=l(),E_=a("li"),YZ=a("strong"),Bmo=o("data2vec-text"),xmo=o(" \u2014 "),dP=a("a"),kmo=o("Data2VecTextForMaskedLM"),Rmo=o(" (Data2VecText model)"),Smo=l(),y_=a("li"),KZ=a("strong"),Pmo=o("deberta"),$mo=o(" \u2014 "),cP=a("a"),Imo=o("DebertaForMaskedLM"),jmo=o(" (DeBERTa model)"),Dmo=l(),w_=a("li"),ZZ=a("strong"),Nmo=o("deberta-v2"),qmo=o(" \u2014 "),fP=a("a"),Gmo=o("DebertaV2ForMaskedLM"),Omo=o(" (DeBERTa-v2 model)"),Xmo=l(),A_=a("li"),eee=a("strong"),Vmo=o("distilbert"),zmo=o(" \u2014 "),mP=a("a"),Wmo=o("DistilBertForMaskedLM"),Qmo=o(" (DistilBERT model)"),Hmo=l(),L_=a("li"),oee=a("strong"),Umo=o("electra"),Jmo=o(" \u2014 "),gP=a("a"),Ymo=o("ElectraForPreTraining"),Kmo=o(" (ELECTRA model)"),Zmo=l(),B_=a("li"),ree=a("strong"),ego=o("flaubert"),ogo=o(" \u2014 "),hP=a("a"),rgo=o("FlaubertWithLMHeadModel"),tgo=o(" (FlauBERT model)"),ago=l(),x_=a("li"),tee=a("strong"),ngo=o("fnet"),sgo=o(" \u2014 "),pP=a("a"),lgo=o("FNetForPreTraining"),igo=o(" (FNet model)"),dgo=l(),k_=a("li"),aee=a("strong"),cgo=o("fsmt"),fgo=o(" \u2014 "),_P=a("a"),mgo=o("FSMTForConditionalGeneration"),ggo=o(" (FairSeq Machine-Translation model)"),hgo=l(),R_=a("li"),nee=a("strong"),pgo=o("funnel"),_go=o(" \u2014 "),uP=a("a"),ugo=o("FunnelForPreTraining"),bgo=o(" (Funnel Transformer model)"),vgo=l(),S_=a("li"),see=a("strong"),Tgo=o("gpt2"),Fgo=o(" \u2014 "),bP=a("a"),Cgo=o("GPT2LMHeadModel"),Mgo=o(" (OpenAI GPT-2 model)"),Ego=l(),P_=a("li"),lee=a("strong"),ygo=o("ibert"),wgo=o(" \u2014 "),vP=a("a"),Ago=o("IBertForMaskedLM"),Lgo=o(" (I-BERT model)"),Bgo=l(),$_=a("li"),iee=a("strong"),xgo=o("layoutlm"),kgo=o(" \u2014 "),TP=a("a"),Rgo=o("LayoutLMForMaskedLM"),Sgo=o(" (LayoutLM model)"),Pgo=l(),I_=a("li"),dee=a("strong"),$go=o("longformer"),Igo=o(" \u2014 "),FP=a("a"),jgo=o("LongformerForMaskedLM"),Dgo=o(" (Longformer model)"),Ngo=l(),j_=a("li"),cee=a("strong"),qgo=o("lxmert"),Ggo=o(" \u2014 "),CP=a("a"),Ogo=o("LxmertForPreTraining"),Xgo=o(" (LXMERT model)"),Vgo=l(),D_=a("li"),fee=a("strong"),zgo=o("megatron-bert"),Wgo=o(" \u2014 "),MP=a("a"),Qgo=o("MegatronBertForPreTraining"),Hgo=o(" (MegatronBert model)"),Ugo=l(),N_=a("li"),mee=a("strong"),Jgo=o("mobilebert"),Ygo=o(" \u2014 "),EP=a("a"),Kgo=o("MobileBertForPreTraining"),Zgo=o(" (MobileBERT model)"),eho=l(),q_=a("li"),gee=a("strong"),oho=o("mpnet"),rho=o(" \u2014 "),yP=a("a"),tho=o("MPNetForMaskedLM"),aho=o(" (MPNet model)"),nho=l(),G_=a("li"),hee=a("strong"),sho=o("openai-gpt"),lho=o(" \u2014 "),wP=a("a"),iho=o("OpenAIGPTLMHeadModel"),dho=o(" (OpenAI GPT model)"),cho=l(),O_=a("li"),pee=a("strong"),fho=o("retribert"),mho=o(" \u2014 "),AP=a("a"),gho=o("RetriBertModel"),hho=o(" (RetriBERT model)"),pho=l(),X_=a("li"),_ee=a("strong"),_ho=o("roberta"),uho=o(" \u2014 "),LP=a("a"),bho=o("RobertaForMaskedLM"),vho=o(" (RoBERTa model)"),Tho=l(),V_=a("li"),uee=a("strong"),Fho=o("squeezebert"),Cho=o(" \u2014 "),BP=a("a"),Mho=o("SqueezeBertForMaskedLM"),Eho=o(" (SqueezeBERT model)"),yho=l(),z_=a("li"),bee=a("strong"),who=o("t5"),Aho=o(" \u2014 "),xP=a("a"),Lho=o("T5ForConditionalGeneration"),Bho=o(" (T5 model)"),xho=l(),W_=a("li"),vee=a("strong"),kho=o("tapas"),Rho=o(" \u2014 "),kP=a("a"),Sho=o("TapasForMaskedLM"),Pho=o(" (TAPAS model)"),$ho=l(),Q_=a("li"),Tee=a("strong"),Iho=o("transfo-xl"),jho=o(" \u2014 "),RP=a("a"),Dho=o("TransfoXLLMHeadModel"),Nho=o(" (Transformer-XL model)"),qho=l(),H_=a("li"),Fee=a("strong"),Gho=o("unispeech"),Oho=o(" \u2014 "),SP=a("a"),Xho=o("UniSpeechForPreTraining"),Vho=o(" (UniSpeech model)"),zho=l(),U_=a("li"),Cee=a("strong"),Who=o("unispeech-sat"),Qho=o(" \u2014 "),PP=a("a"),Hho=o("UniSpeechSatForPreTraining"),Uho=o(" (UniSpeechSat model)"),Jho=l(),J_=a("li"),Mee=a("strong"),Yho=o("visual_bert"),Kho=o(" \u2014 "),$P=a("a"),Zho=o("VisualBertForPreTraining"),epo=o(" (VisualBert model)"),opo=l(),Y_=a("li"),Eee=a("strong"),rpo=o("vit_mae"),tpo=o(" \u2014 "),IP=a("a"),apo=o("ViTMAEForPreTraining"),npo=o(" (ViTMAE model)"),spo=l(),K_=a("li"),yee=a("strong"),lpo=o("wav2vec2"),ipo=o(" \u2014 "),jP=a("a"),dpo=o("Wav2Vec2ForPreTraining"),cpo=o(" (Wav2Vec2 model)"),fpo=l(),Z_=a("li"),wee=a("strong"),mpo=o("xlm"),gpo=o(" \u2014 "),DP=a("a"),hpo=o("XLMWithLMHeadModel"),ppo=o(" (XLM model)"),_po=l(),eu=a("li"),Aee=a("strong"),upo=o("xlm-roberta"),bpo=o(" \u2014 "),NP=a("a"),vpo=o("XLMRobertaForMaskedLM"),Tpo=o(" (XLM-RoBERTa model)"),Fpo=l(),ou=a("li"),Lee=a("strong"),Cpo=o("xlm-roberta-xl"),Mpo=o(" \u2014 "),qP=a("a"),Epo=o("XLMRobertaXLForMaskedLM"),ypo=o(" (XLM-RoBERTa-XL model)"),wpo=l(),ru=a("li"),Bee=a("strong"),Apo=o("xlnet"),Lpo=o(" \u2014 "),GP=a("a"),Bpo=o("XLNetLMHeadModel"),xpo=o(" (XLNet model)"),kpo=l(),tu=a("p"),Rpo=o("The model is set in evaluation mode by default using "),xee=a("code"),Spo=o("model.eval()"),Ppo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kee=a("code"),$po=o("model.train()"),Ipo=l(),Ree=a("p"),jpo=o("Examples:"),Dpo=l(),f(XE.$$.fragment),$xe=l(),td=a("h2"),au=a("a"),See=a("span"),f(VE.$$.fragment),Npo=l(),Pee=a("span"),qpo=o("AutoModelForCausalLM"),Ixe=l(),Ko=a("div"),f(zE.$$.fragment),Gpo=l(),ad=a("p"),Opo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$ee=a("code"),Xpo=o("from_pretrained()"),Vpo=o("class method or the "),Iee=a("code"),zpo=o("from_config()"),Wpo=o(`class
method.`),Qpo=l(),WE=a("p"),Hpo=o("This class cannot be instantiated directly using "),jee=a("code"),Upo=o("__init__()"),Jpo=o(" (throws an error)."),Ypo=l(),Wr=a("div"),f(QE.$$.fragment),Kpo=l(),Dee=a("p"),Zpo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),e_o=l(),nd=a("p"),o_o=o(`Note:
Loading a model from its configuration file does `),Nee=a("strong"),r_o=o("not"),t_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=a("code"),a_o=o("from_pretrained()"),n_o=o("to load the model weights."),s_o=l(),Gee=a("p"),l_o=o("Examples:"),i_o=l(),f(HE.$$.fragment),d_o=l(),Ne=a("div"),f(UE.$$.fragment),c_o=l(),Oee=a("p"),f_o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),m_o=l(),Wa=a("p"),g_o=o("The model class to instantiate is selected based on the "),Xee=a("code"),h_o=o("model_type"),p_o=o(` property of the config object (either
passed as an argument or loaded from `),Vee=a("code"),__o=o("pretrained_model_name_or_path"),u_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zee=a("code"),b_o=o("pretrained_model_name_or_path"),v_o=o(":"),T_o=l(),$=a("ul"),nu=a("li"),Wee=a("strong"),F_o=o("bart"),C_o=o(" \u2014 "),OP=a("a"),M_o=o("BartForCausalLM"),E_o=o(" (BART model)"),y_o=l(),su=a("li"),Qee=a("strong"),w_o=o("bert"),A_o=o(" \u2014 "),XP=a("a"),L_o=o("BertLMHeadModel"),B_o=o(" (BERT model)"),x_o=l(),lu=a("li"),Hee=a("strong"),k_o=o("bert-generation"),R_o=o(" \u2014 "),VP=a("a"),S_o=o("BertGenerationDecoder"),P_o=o(" (Bert Generation model)"),$_o=l(),iu=a("li"),Uee=a("strong"),I_o=o("big_bird"),j_o=o(" \u2014 "),zP=a("a"),D_o=o("BigBirdForCausalLM"),N_o=o(" (BigBird model)"),q_o=l(),du=a("li"),Jee=a("strong"),G_o=o("bigbird_pegasus"),O_o=o(" \u2014 "),WP=a("a"),X_o=o("BigBirdPegasusForCausalLM"),V_o=o(" (BigBirdPegasus model)"),z_o=l(),cu=a("li"),Yee=a("strong"),W_o=o("blenderbot"),Q_o=o(" \u2014 "),QP=a("a"),H_o=o("BlenderbotForCausalLM"),U_o=o(" (Blenderbot model)"),J_o=l(),fu=a("li"),Kee=a("strong"),Y_o=o("blenderbot-small"),K_o=o(" \u2014 "),HP=a("a"),Z_o=o("BlenderbotSmallForCausalLM"),euo=o(" (BlenderbotSmall model)"),ouo=l(),mu=a("li"),Zee=a("strong"),ruo=o("camembert"),tuo=o(" \u2014 "),UP=a("a"),auo=o("CamembertForCausalLM"),nuo=o(" (CamemBERT model)"),suo=l(),gu=a("li"),eoe=a("strong"),luo=o("ctrl"),iuo=o(" \u2014 "),JP=a("a"),duo=o("CTRLLMHeadModel"),cuo=o(" (CTRL model)"),fuo=l(),hu=a("li"),ooe=a("strong"),muo=o("data2vec-text"),guo=o(" \u2014 "),YP=a("a"),huo=o("Data2VecTextForCausalLM"),puo=o(" (Data2VecText model)"),_uo=l(),pu=a("li"),roe=a("strong"),uuo=o("electra"),buo=o(" \u2014 "),KP=a("a"),vuo=o("ElectraForCausalLM"),Tuo=o(" (ELECTRA model)"),Fuo=l(),_u=a("li"),toe=a("strong"),Cuo=o("gpt2"),Muo=o(" \u2014 "),ZP=a("a"),Euo=o("GPT2LMHeadModel"),yuo=o(" (OpenAI GPT-2 model)"),wuo=l(),uu=a("li"),aoe=a("strong"),Auo=o("gpt_neo"),Luo=o(" \u2014 "),e$=a("a"),Buo=o("GPTNeoForCausalLM"),xuo=o(" (GPT Neo model)"),kuo=l(),bu=a("li"),noe=a("strong"),Ruo=o("gptj"),Suo=o(" \u2014 "),o$=a("a"),Puo=o("GPTJForCausalLM"),$uo=o(" (GPT-J model)"),Iuo=l(),vu=a("li"),soe=a("strong"),juo=o("marian"),Duo=o(" \u2014 "),r$=a("a"),Nuo=o("MarianForCausalLM"),quo=o(" (Marian model)"),Guo=l(),Tu=a("li"),loe=a("strong"),Ouo=o("mbart"),Xuo=o(" \u2014 "),t$=a("a"),Vuo=o("MBartForCausalLM"),zuo=o(" (mBART model)"),Wuo=l(),Fu=a("li"),ioe=a("strong"),Quo=o("megatron-bert"),Huo=o(" \u2014 "),a$=a("a"),Uuo=o("MegatronBertForCausalLM"),Juo=o(" (MegatronBert model)"),Yuo=l(),Cu=a("li"),doe=a("strong"),Kuo=o("openai-gpt"),Zuo=o(" \u2014 "),n$=a("a"),e2o=o("OpenAIGPTLMHeadModel"),o2o=o(" (OpenAI GPT model)"),r2o=l(),Mu=a("li"),coe=a("strong"),t2o=o("pegasus"),a2o=o(" \u2014 "),s$=a("a"),n2o=o("PegasusForCausalLM"),s2o=o(" (Pegasus model)"),l2o=l(),Eu=a("li"),foe=a("strong"),i2o=o("plbart"),d2o=o(" \u2014 "),l$=a("a"),c2o=o("PLBartForCausalLM"),f2o=o(" (PLBart model)"),m2o=l(),yu=a("li"),moe=a("strong"),g2o=o("prophetnet"),h2o=o(" \u2014 "),i$=a("a"),p2o=o("ProphetNetForCausalLM"),_2o=o(" (ProphetNet model)"),u2o=l(),wu=a("li"),goe=a("strong"),b2o=o("qdqbert"),v2o=o(" \u2014 "),d$=a("a"),T2o=o("QDQBertLMHeadModel"),F2o=o(" (QDQBert model)"),C2o=l(),Au=a("li"),hoe=a("strong"),M2o=o("reformer"),E2o=o(" \u2014 "),c$=a("a"),y2o=o("ReformerModelWithLMHead"),w2o=o(" (Reformer model)"),A2o=l(),Lu=a("li"),poe=a("strong"),L2o=o("rembert"),B2o=o(" \u2014 "),f$=a("a"),x2o=o("RemBertForCausalLM"),k2o=o(" (RemBERT model)"),R2o=l(),Bu=a("li"),_oe=a("strong"),S2o=o("roberta"),P2o=o(" \u2014 "),m$=a("a"),$2o=o("RobertaForCausalLM"),I2o=o(" (RoBERTa model)"),j2o=l(),xu=a("li"),uoe=a("strong"),D2o=o("roformer"),N2o=o(" \u2014 "),g$=a("a"),q2o=o("RoFormerForCausalLM"),G2o=o(" (RoFormer model)"),O2o=l(),ku=a("li"),boe=a("strong"),X2o=o("speech_to_text_2"),V2o=o(" \u2014 "),h$=a("a"),z2o=o("Speech2Text2ForCausalLM"),W2o=o(" (Speech2Text2 model)"),Q2o=l(),Ru=a("li"),voe=a("strong"),H2o=o("transfo-xl"),U2o=o(" \u2014 "),p$=a("a"),J2o=o("TransfoXLLMHeadModel"),Y2o=o(" (Transformer-XL model)"),K2o=l(),Su=a("li"),Toe=a("strong"),Z2o=o("trocr"),e1o=o(" \u2014 "),_$=a("a"),o1o=o("TrOCRForCausalLM"),r1o=o(" (TrOCR model)"),t1o=l(),Pu=a("li"),Foe=a("strong"),a1o=o("xglm"),n1o=o(" \u2014 "),u$=a("a"),s1o=o("XGLMForCausalLM"),l1o=o(" (XGLM model)"),i1o=l(),$u=a("li"),Coe=a("strong"),d1o=o("xlm"),c1o=o(" \u2014 "),b$=a("a"),f1o=o("XLMWithLMHeadModel"),m1o=o(" (XLM model)"),g1o=l(),Iu=a("li"),Moe=a("strong"),h1o=o("xlm-prophetnet"),p1o=o(" \u2014 "),v$=a("a"),_1o=o("XLMProphetNetForCausalLM"),u1o=o(" (XLMProphetNet model)"),b1o=l(),ju=a("li"),Eoe=a("strong"),v1o=o("xlm-roberta"),T1o=o(" \u2014 "),T$=a("a"),F1o=o("XLMRobertaForCausalLM"),C1o=o(" (XLM-RoBERTa model)"),M1o=l(),Du=a("li"),yoe=a("strong"),E1o=o("xlm-roberta-xl"),y1o=o(" \u2014 "),F$=a("a"),w1o=o("XLMRobertaXLForCausalLM"),A1o=o(" (XLM-RoBERTa-XL model)"),L1o=l(),Nu=a("li"),woe=a("strong"),B1o=o("xlnet"),x1o=o(" \u2014 "),C$=a("a"),k1o=o("XLNetLMHeadModel"),R1o=o(" (XLNet model)"),S1o=l(),qu=a("p"),P1o=o("The model is set in evaluation mode by default using "),Aoe=a("code"),$1o=o("model.eval()"),I1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Loe=a("code"),j1o=o("model.train()"),D1o=l(),Boe=a("p"),N1o=o("Examples:"),q1o=l(),f(JE.$$.fragment),jxe=l(),sd=a("h2"),Gu=a("a"),xoe=a("span"),f(YE.$$.fragment),G1o=l(),koe=a("span"),O1o=o("AutoModelForMaskedLM"),Dxe=l(),Zo=a("div"),f(KE.$$.fragment),X1o=l(),ld=a("p"),V1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Roe=a("code"),z1o=o("from_pretrained()"),W1o=o("class method or the "),Soe=a("code"),Q1o=o("from_config()"),H1o=o(`class
method.`),U1o=l(),ZE=a("p"),J1o=o("This class cannot be instantiated directly using "),Poe=a("code"),Y1o=o("__init__()"),K1o=o(" (throws an error)."),Z1o=l(),Qr=a("div"),f(ey.$$.fragment),ebo=l(),$oe=a("p"),obo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rbo=l(),id=a("p"),tbo=o(`Note:
Loading a model from its configuration file does `),Ioe=a("strong"),abo=o("not"),nbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=a("code"),sbo=o("from_pretrained()"),lbo=o("to load the model weights."),ibo=l(),Doe=a("p"),dbo=o("Examples:"),cbo=l(),f(oy.$$.fragment),fbo=l(),qe=a("div"),f(ry.$$.fragment),mbo=l(),Noe=a("p"),gbo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hbo=l(),Qa=a("p"),pbo=o("The model class to instantiate is selected based on the "),qoe=a("code"),_bo=o("model_type"),ubo=o(` property of the config object (either
passed as an argument or loaded from `),Goe=a("code"),bbo=o("pretrained_model_name_or_path"),vbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ooe=a("code"),Tbo=o("pretrained_model_name_or_path"),Fbo=o(":"),Cbo=l(),I=a("ul"),Ou=a("li"),Xoe=a("strong"),Mbo=o("albert"),Ebo=o(" \u2014 "),M$=a("a"),ybo=o("AlbertForMaskedLM"),wbo=o(" (ALBERT model)"),Abo=l(),Xu=a("li"),Voe=a("strong"),Lbo=o("bart"),Bbo=o(" \u2014 "),E$=a("a"),xbo=o("BartForConditionalGeneration"),kbo=o(" (BART model)"),Rbo=l(),Vu=a("li"),zoe=a("strong"),Sbo=o("bert"),Pbo=o(" \u2014 "),y$=a("a"),$bo=o("BertForMaskedLM"),Ibo=o(" (BERT model)"),jbo=l(),zu=a("li"),Woe=a("strong"),Dbo=o("big_bird"),Nbo=o(" \u2014 "),w$=a("a"),qbo=o("BigBirdForMaskedLM"),Gbo=o(" (BigBird model)"),Obo=l(),Wu=a("li"),Qoe=a("strong"),Xbo=o("camembert"),Vbo=o(" \u2014 "),A$=a("a"),zbo=o("CamembertForMaskedLM"),Wbo=o(" (CamemBERT model)"),Qbo=l(),Qu=a("li"),Hoe=a("strong"),Hbo=o("convbert"),Ubo=o(" \u2014 "),L$=a("a"),Jbo=o("ConvBertForMaskedLM"),Ybo=o(" (ConvBERT model)"),Kbo=l(),Hu=a("li"),Uoe=a("strong"),Zbo=o("data2vec-text"),e3o=o(" \u2014 "),B$=a("a"),o3o=o("Data2VecTextForMaskedLM"),r3o=o(" (Data2VecText model)"),t3o=l(),Uu=a("li"),Joe=a("strong"),a3o=o("deberta"),n3o=o(" \u2014 "),x$=a("a"),s3o=o("DebertaForMaskedLM"),l3o=o(" (DeBERTa model)"),i3o=l(),Ju=a("li"),Yoe=a("strong"),d3o=o("deberta-v2"),c3o=o(" \u2014 "),k$=a("a"),f3o=o("DebertaV2ForMaskedLM"),m3o=o(" (DeBERTa-v2 model)"),g3o=l(),Yu=a("li"),Koe=a("strong"),h3o=o("distilbert"),p3o=o(" \u2014 "),R$=a("a"),_3o=o("DistilBertForMaskedLM"),u3o=o(" (DistilBERT model)"),b3o=l(),Ku=a("li"),Zoe=a("strong"),v3o=o("electra"),T3o=o(" \u2014 "),S$=a("a"),F3o=o("ElectraForMaskedLM"),C3o=o(" (ELECTRA model)"),M3o=l(),Zu=a("li"),ere=a("strong"),E3o=o("flaubert"),y3o=o(" \u2014 "),P$=a("a"),w3o=o("FlaubertWithLMHeadModel"),A3o=o(" (FlauBERT model)"),L3o=l(),e2=a("li"),ore=a("strong"),B3o=o("fnet"),x3o=o(" \u2014 "),$$=a("a"),k3o=o("FNetForMaskedLM"),R3o=o(" (FNet model)"),S3o=l(),o2=a("li"),rre=a("strong"),P3o=o("funnel"),$3o=o(" \u2014 "),I$=a("a"),I3o=o("FunnelForMaskedLM"),j3o=o(" (Funnel Transformer model)"),D3o=l(),r2=a("li"),tre=a("strong"),N3o=o("ibert"),q3o=o(" \u2014 "),j$=a("a"),G3o=o("IBertForMaskedLM"),O3o=o(" (I-BERT model)"),X3o=l(),t2=a("li"),are=a("strong"),V3o=o("layoutlm"),z3o=o(" \u2014 "),D$=a("a"),W3o=o("LayoutLMForMaskedLM"),Q3o=o(" (LayoutLM model)"),H3o=l(),a2=a("li"),nre=a("strong"),U3o=o("longformer"),J3o=o(" \u2014 "),N$=a("a"),Y3o=o("LongformerForMaskedLM"),K3o=o(" (Longformer model)"),Z3o=l(),n2=a("li"),sre=a("strong"),e5o=o("mbart"),o5o=o(" \u2014 "),q$=a("a"),r5o=o("MBartForConditionalGeneration"),t5o=o(" (mBART model)"),a5o=l(),s2=a("li"),lre=a("strong"),n5o=o("megatron-bert"),s5o=o(" \u2014 "),G$=a("a"),l5o=o("MegatronBertForMaskedLM"),i5o=o(" (MegatronBert model)"),d5o=l(),l2=a("li"),ire=a("strong"),c5o=o("mobilebert"),f5o=o(" \u2014 "),O$=a("a"),m5o=o("MobileBertForMaskedLM"),g5o=o(" (MobileBERT model)"),h5o=l(),i2=a("li"),dre=a("strong"),p5o=o("mpnet"),_5o=o(" \u2014 "),X$=a("a"),u5o=o("MPNetForMaskedLM"),b5o=o(" (MPNet model)"),v5o=l(),d2=a("li"),cre=a("strong"),T5o=o("nystromformer"),F5o=o(" \u2014 "),V$=a("a"),C5o=o("NystromformerForMaskedLM"),M5o=o(" (Nystromformer model)"),E5o=l(),c2=a("li"),fre=a("strong"),y5o=o("perceiver"),w5o=o(" \u2014 "),z$=a("a"),A5o=o("PerceiverForMaskedLM"),L5o=o(" (Perceiver model)"),B5o=l(),f2=a("li"),mre=a("strong"),x5o=o("qdqbert"),k5o=o(" \u2014 "),W$=a("a"),R5o=o("QDQBertForMaskedLM"),S5o=o(" (QDQBert model)"),P5o=l(),m2=a("li"),gre=a("strong"),$5o=o("reformer"),I5o=o(" \u2014 "),Q$=a("a"),j5o=o("ReformerForMaskedLM"),D5o=o(" (Reformer model)"),N5o=l(),g2=a("li"),hre=a("strong"),q5o=o("rembert"),G5o=o(" \u2014 "),H$=a("a"),O5o=o("RemBertForMaskedLM"),X5o=o(" (RemBERT model)"),V5o=l(),h2=a("li"),pre=a("strong"),z5o=o("roberta"),W5o=o(" \u2014 "),U$=a("a"),Q5o=o("RobertaForMaskedLM"),H5o=o(" (RoBERTa model)"),U5o=l(),p2=a("li"),_re=a("strong"),J5o=o("roformer"),Y5o=o(" \u2014 "),J$=a("a"),K5o=o("RoFormerForMaskedLM"),Z5o=o(" (RoFormer model)"),evo=l(),_2=a("li"),ure=a("strong"),ovo=o("squeezebert"),rvo=o(" \u2014 "),Y$=a("a"),tvo=o("SqueezeBertForMaskedLM"),avo=o(" (SqueezeBERT model)"),nvo=l(),u2=a("li"),bre=a("strong"),svo=o("tapas"),lvo=o(" \u2014 "),K$=a("a"),ivo=o("TapasForMaskedLM"),dvo=o(" (TAPAS model)"),cvo=l(),b2=a("li"),vre=a("strong"),fvo=o("wav2vec2"),mvo=o(" \u2014 "),Tre=a("code"),gvo=o("Wav2Vec2ForMaskedLM"),hvo=o("(Wav2Vec2 model)"),pvo=l(),v2=a("li"),Fre=a("strong"),_vo=o("xlm"),uvo=o(" \u2014 "),Z$=a("a"),bvo=o("XLMWithLMHeadModel"),vvo=o(" (XLM model)"),Tvo=l(),T2=a("li"),Cre=a("strong"),Fvo=o("xlm-roberta"),Cvo=o(" \u2014 "),eI=a("a"),Mvo=o("XLMRobertaForMaskedLM"),Evo=o(" (XLM-RoBERTa model)"),yvo=l(),F2=a("li"),Mre=a("strong"),wvo=o("xlm-roberta-xl"),Avo=o(" \u2014 "),oI=a("a"),Lvo=o("XLMRobertaXLForMaskedLM"),Bvo=o(" (XLM-RoBERTa-XL model)"),xvo=l(),C2=a("li"),Ere=a("strong"),kvo=o("yoso"),Rvo=o(" \u2014 "),rI=a("a"),Svo=o("YosoForMaskedLM"),Pvo=o(" (YOSO model)"),$vo=l(),M2=a("p"),Ivo=o("The model is set in evaluation mode by default using "),yre=a("code"),jvo=o("model.eval()"),Dvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wre=a("code"),Nvo=o("model.train()"),qvo=l(),Are=a("p"),Gvo=o("Examples:"),Ovo=l(),f(ty.$$.fragment),Nxe=l(),dd=a("h2"),E2=a("a"),Lre=a("span"),f(ay.$$.fragment),Xvo=l(),Bre=a("span"),Vvo=o("AutoModelForSeq2SeqLM"),qxe=l(),er=a("div"),f(ny.$$.fragment),zvo=l(),cd=a("p"),Wvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xre=a("code"),Qvo=o("from_pretrained()"),Hvo=o("class method or the "),kre=a("code"),Uvo=o("from_config()"),Jvo=o(`class
method.`),Yvo=l(),sy=a("p"),Kvo=o("This class cannot be instantiated directly using "),Rre=a("code"),Zvo=o("__init__()"),e6o=o(" (throws an error)."),o6o=l(),Hr=a("div"),f(ly.$$.fragment),r6o=l(),Sre=a("p"),t6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),a6o=l(),fd=a("p"),n6o=o(`Note:
Loading a model from its configuration file does `),Pre=a("strong"),s6o=o("not"),l6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=a("code"),i6o=o("from_pretrained()"),d6o=o("to load the model weights."),c6o=l(),Ire=a("p"),f6o=o("Examples:"),m6o=l(),f(iy.$$.fragment),g6o=l(),Ge=a("div"),f(dy.$$.fragment),h6o=l(),jre=a("p"),p6o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_6o=l(),Ha=a("p"),u6o=o("The model class to instantiate is selected based on the "),Dre=a("code"),b6o=o("model_type"),v6o=o(` property of the config object (either
passed as an argument or loaded from `),Nre=a("code"),T6o=o("pretrained_model_name_or_path"),F6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qre=a("code"),C6o=o("pretrained_model_name_or_path"),M6o=o(":"),E6o=l(),ne=a("ul"),y2=a("li"),Gre=a("strong"),y6o=o("bart"),w6o=o(" \u2014 "),tI=a("a"),A6o=o("BartForConditionalGeneration"),L6o=o(" (BART model)"),B6o=l(),w2=a("li"),Ore=a("strong"),x6o=o("bigbird_pegasus"),k6o=o(" \u2014 "),aI=a("a"),R6o=o("BigBirdPegasusForConditionalGeneration"),S6o=o(" (BigBirdPegasus model)"),P6o=l(),A2=a("li"),Xre=a("strong"),$6o=o("blenderbot"),I6o=o(" \u2014 "),nI=a("a"),j6o=o("BlenderbotForConditionalGeneration"),D6o=o(" (Blenderbot model)"),N6o=l(),L2=a("li"),Vre=a("strong"),q6o=o("blenderbot-small"),G6o=o(" \u2014 "),sI=a("a"),O6o=o("BlenderbotSmallForConditionalGeneration"),X6o=o(" (BlenderbotSmall model)"),V6o=l(),B2=a("li"),zre=a("strong"),z6o=o("encoder-decoder"),W6o=o(" \u2014 "),lI=a("a"),Q6o=o("EncoderDecoderModel"),H6o=o(" (Encoder decoder model)"),U6o=l(),x2=a("li"),Wre=a("strong"),J6o=o("fsmt"),Y6o=o(" \u2014 "),iI=a("a"),K6o=o("FSMTForConditionalGeneration"),Z6o=o(" (FairSeq Machine-Translation model)"),eTo=l(),k2=a("li"),Qre=a("strong"),oTo=o("led"),rTo=o(" \u2014 "),dI=a("a"),tTo=o("LEDForConditionalGeneration"),aTo=o(" (LED model)"),nTo=l(),R2=a("li"),Hre=a("strong"),sTo=o("m2m_100"),lTo=o(" \u2014 "),cI=a("a"),iTo=o("M2M100ForConditionalGeneration"),dTo=o(" (M2M100 model)"),cTo=l(),S2=a("li"),Ure=a("strong"),fTo=o("marian"),mTo=o(" \u2014 "),fI=a("a"),gTo=o("MarianMTModel"),hTo=o(" (Marian model)"),pTo=l(),P2=a("li"),Jre=a("strong"),_To=o("mbart"),uTo=o(" \u2014 "),mI=a("a"),bTo=o("MBartForConditionalGeneration"),vTo=o(" (mBART model)"),TTo=l(),$2=a("li"),Yre=a("strong"),FTo=o("mt5"),CTo=o(" \u2014 "),gI=a("a"),MTo=o("MT5ForConditionalGeneration"),ETo=o(" (mT5 model)"),yTo=l(),I2=a("li"),Kre=a("strong"),wTo=o("pegasus"),ATo=o(" \u2014 "),hI=a("a"),LTo=o("PegasusForConditionalGeneration"),BTo=o(" (Pegasus model)"),xTo=l(),j2=a("li"),Zre=a("strong"),kTo=o("plbart"),RTo=o(" \u2014 "),pI=a("a"),STo=o("PLBartForConditionalGeneration"),PTo=o(" (PLBart model)"),$To=l(),D2=a("li"),ete=a("strong"),ITo=o("prophetnet"),jTo=o(" \u2014 "),_I=a("a"),DTo=o("ProphetNetForConditionalGeneration"),NTo=o(" (ProphetNet model)"),qTo=l(),N2=a("li"),ote=a("strong"),GTo=o("t5"),OTo=o(" \u2014 "),uI=a("a"),XTo=o("T5ForConditionalGeneration"),VTo=o(" (T5 model)"),zTo=l(),q2=a("li"),rte=a("strong"),WTo=o("xlm-prophetnet"),QTo=o(" \u2014 "),bI=a("a"),HTo=o("XLMProphetNetForConditionalGeneration"),UTo=o(" (XLMProphetNet model)"),JTo=l(),G2=a("p"),YTo=o("The model is set in evaluation mode by default using "),tte=a("code"),KTo=o("model.eval()"),ZTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ate=a("code"),eFo=o("model.train()"),oFo=l(),nte=a("p"),rFo=o("Examples:"),tFo=l(),f(cy.$$.fragment),Gxe=l(),md=a("h2"),O2=a("a"),ste=a("span"),f(fy.$$.fragment),aFo=l(),lte=a("span"),nFo=o("AutoModelForSequenceClassification"),Oxe=l(),or=a("div"),f(my.$$.fragment),sFo=l(),gd=a("p"),lFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ite=a("code"),iFo=o("from_pretrained()"),dFo=o("class method or the "),dte=a("code"),cFo=o("from_config()"),fFo=o(`class
method.`),mFo=l(),gy=a("p"),gFo=o("This class cannot be instantiated directly using "),cte=a("code"),hFo=o("__init__()"),pFo=o(" (throws an error)."),_Fo=l(),Ur=a("div"),f(hy.$$.fragment),uFo=l(),fte=a("p"),bFo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vFo=l(),hd=a("p"),TFo=o(`Note:
Loading a model from its configuration file does `),mte=a("strong"),FFo=o("not"),CFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=a("code"),MFo=o("from_pretrained()"),EFo=o("to load the model weights."),yFo=l(),hte=a("p"),wFo=o("Examples:"),AFo=l(),f(py.$$.fragment),LFo=l(),Oe=a("div"),f(_y.$$.fragment),BFo=l(),pte=a("p"),xFo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kFo=l(),Ua=a("p"),RFo=o("The model class to instantiate is selected based on the "),_te=a("code"),SFo=o("model_type"),PFo=o(` property of the config object (either
passed as an argument or loaded from `),ute=a("code"),$Fo=o("pretrained_model_name_or_path"),IFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bte=a("code"),jFo=o("pretrained_model_name_or_path"),DFo=o(":"),NFo=l(),A=a("ul"),X2=a("li"),vte=a("strong"),qFo=o("albert"),GFo=o(" \u2014 "),vI=a("a"),OFo=o("AlbertForSequenceClassification"),XFo=o(" (ALBERT model)"),VFo=l(),V2=a("li"),Tte=a("strong"),zFo=o("bart"),WFo=o(" \u2014 "),TI=a("a"),QFo=o("BartForSequenceClassification"),HFo=o(" (BART model)"),UFo=l(),z2=a("li"),Fte=a("strong"),JFo=o("bert"),YFo=o(" \u2014 "),FI=a("a"),KFo=o("BertForSequenceClassification"),ZFo=o(" (BERT model)"),eCo=l(),W2=a("li"),Cte=a("strong"),oCo=o("big_bird"),rCo=o(" \u2014 "),CI=a("a"),tCo=o("BigBirdForSequenceClassification"),aCo=o(" (BigBird model)"),nCo=l(),Q2=a("li"),Mte=a("strong"),sCo=o("bigbird_pegasus"),lCo=o(" \u2014 "),MI=a("a"),iCo=o("BigBirdPegasusForSequenceClassification"),dCo=o(" (BigBirdPegasus model)"),cCo=l(),H2=a("li"),Ete=a("strong"),fCo=o("camembert"),mCo=o(" \u2014 "),EI=a("a"),gCo=o("CamembertForSequenceClassification"),hCo=o(" (CamemBERT model)"),pCo=l(),U2=a("li"),yte=a("strong"),_Co=o("canine"),uCo=o(" \u2014 "),yI=a("a"),bCo=o("CanineForSequenceClassification"),vCo=o(" (Canine model)"),TCo=l(),J2=a("li"),wte=a("strong"),FCo=o("convbert"),CCo=o(" \u2014 "),wI=a("a"),MCo=o("ConvBertForSequenceClassification"),ECo=o(" (ConvBERT model)"),yCo=l(),Y2=a("li"),Ate=a("strong"),wCo=o("ctrl"),ACo=o(" \u2014 "),AI=a("a"),LCo=o("CTRLForSequenceClassification"),BCo=o(" (CTRL model)"),xCo=l(),K2=a("li"),Lte=a("strong"),kCo=o("data2vec-text"),RCo=o(" \u2014 "),LI=a("a"),SCo=o("Data2VecTextForSequenceClassification"),PCo=o(" (Data2VecText model)"),$Co=l(),Z2=a("li"),Bte=a("strong"),ICo=o("deberta"),jCo=o(" \u2014 "),BI=a("a"),DCo=o("DebertaForSequenceClassification"),NCo=o(" (DeBERTa model)"),qCo=l(),e1=a("li"),xte=a("strong"),GCo=o("deberta-v2"),OCo=o(" \u2014 "),xI=a("a"),XCo=o("DebertaV2ForSequenceClassification"),VCo=o(" (DeBERTa-v2 model)"),zCo=l(),o1=a("li"),kte=a("strong"),WCo=o("distilbert"),QCo=o(" \u2014 "),kI=a("a"),HCo=o("DistilBertForSequenceClassification"),UCo=o(" (DistilBERT model)"),JCo=l(),r1=a("li"),Rte=a("strong"),YCo=o("electra"),KCo=o(" \u2014 "),RI=a("a"),ZCo=o("ElectraForSequenceClassification"),eMo=o(" (ELECTRA model)"),oMo=l(),t1=a("li"),Ste=a("strong"),rMo=o("flaubert"),tMo=o(" \u2014 "),SI=a("a"),aMo=o("FlaubertForSequenceClassification"),nMo=o(" (FlauBERT model)"),sMo=l(),a1=a("li"),Pte=a("strong"),lMo=o("fnet"),iMo=o(" \u2014 "),PI=a("a"),dMo=o("FNetForSequenceClassification"),cMo=o(" (FNet model)"),fMo=l(),n1=a("li"),$te=a("strong"),mMo=o("funnel"),gMo=o(" \u2014 "),$I=a("a"),hMo=o("FunnelForSequenceClassification"),pMo=o(" (Funnel Transformer model)"),_Mo=l(),s1=a("li"),Ite=a("strong"),uMo=o("gpt2"),bMo=o(" \u2014 "),II=a("a"),vMo=o("GPT2ForSequenceClassification"),TMo=o(" (OpenAI GPT-2 model)"),FMo=l(),l1=a("li"),jte=a("strong"),CMo=o("gpt_neo"),MMo=o(" \u2014 "),jI=a("a"),EMo=o("GPTNeoForSequenceClassification"),yMo=o(" (GPT Neo model)"),wMo=l(),i1=a("li"),Dte=a("strong"),AMo=o("gptj"),LMo=o(" \u2014 "),DI=a("a"),BMo=o("GPTJForSequenceClassification"),xMo=o(" (GPT-J model)"),kMo=l(),d1=a("li"),Nte=a("strong"),RMo=o("ibert"),SMo=o(" \u2014 "),NI=a("a"),PMo=o("IBertForSequenceClassification"),$Mo=o(" (I-BERT model)"),IMo=l(),c1=a("li"),qte=a("strong"),jMo=o("layoutlm"),DMo=o(" \u2014 "),qI=a("a"),NMo=o("LayoutLMForSequenceClassification"),qMo=o(" (LayoutLM model)"),GMo=l(),f1=a("li"),Gte=a("strong"),OMo=o("layoutlmv2"),XMo=o(" \u2014 "),GI=a("a"),VMo=o("LayoutLMv2ForSequenceClassification"),zMo=o(" (LayoutLMv2 model)"),WMo=l(),m1=a("li"),Ote=a("strong"),QMo=o("led"),HMo=o(" \u2014 "),OI=a("a"),UMo=o("LEDForSequenceClassification"),JMo=o(" (LED model)"),YMo=l(),g1=a("li"),Xte=a("strong"),KMo=o("longformer"),ZMo=o(" \u2014 "),XI=a("a"),e4o=o("LongformerForSequenceClassification"),o4o=o(" (Longformer model)"),r4o=l(),h1=a("li"),Vte=a("strong"),t4o=o("mbart"),a4o=o(" \u2014 "),VI=a("a"),n4o=o("MBartForSequenceClassification"),s4o=o(" (mBART model)"),l4o=l(),p1=a("li"),zte=a("strong"),i4o=o("megatron-bert"),d4o=o(" \u2014 "),zI=a("a"),c4o=o("MegatronBertForSequenceClassification"),f4o=o(" (MegatronBert model)"),m4o=l(),_1=a("li"),Wte=a("strong"),g4o=o("mobilebert"),h4o=o(" \u2014 "),WI=a("a"),p4o=o("MobileBertForSequenceClassification"),_4o=o(" (MobileBERT model)"),u4o=l(),u1=a("li"),Qte=a("strong"),b4o=o("mpnet"),v4o=o(" \u2014 "),QI=a("a"),T4o=o("MPNetForSequenceClassification"),F4o=o(" (MPNet model)"),C4o=l(),b1=a("li"),Hte=a("strong"),M4o=o("nystromformer"),E4o=o(" \u2014 "),HI=a("a"),y4o=o("NystromformerForSequenceClassification"),w4o=o(" (Nystromformer model)"),A4o=l(),v1=a("li"),Ute=a("strong"),L4o=o("openai-gpt"),B4o=o(" \u2014 "),UI=a("a"),x4o=o("OpenAIGPTForSequenceClassification"),k4o=o(" (OpenAI GPT model)"),R4o=l(),T1=a("li"),Jte=a("strong"),S4o=o("perceiver"),P4o=o(" \u2014 "),JI=a("a"),$4o=o("PerceiverForSequenceClassification"),I4o=o(" (Perceiver model)"),j4o=l(),F1=a("li"),Yte=a("strong"),D4o=o("plbart"),N4o=o(" \u2014 "),YI=a("a"),q4o=o("PLBartForSequenceClassification"),G4o=o(" (PLBart model)"),O4o=l(),C1=a("li"),Kte=a("strong"),X4o=o("qdqbert"),V4o=o(" \u2014 "),KI=a("a"),z4o=o("QDQBertForSequenceClassification"),W4o=o(" (QDQBert model)"),Q4o=l(),M1=a("li"),Zte=a("strong"),H4o=o("reformer"),U4o=o(" \u2014 "),ZI=a("a"),J4o=o("ReformerForSequenceClassification"),Y4o=o(" (Reformer model)"),K4o=l(),E1=a("li"),eae=a("strong"),Z4o=o("rembert"),eEo=o(" \u2014 "),ej=a("a"),oEo=o("RemBertForSequenceClassification"),rEo=o(" (RemBERT model)"),tEo=l(),y1=a("li"),oae=a("strong"),aEo=o("roberta"),nEo=o(" \u2014 "),oj=a("a"),sEo=o("RobertaForSequenceClassification"),lEo=o(" (RoBERTa model)"),iEo=l(),w1=a("li"),rae=a("strong"),dEo=o("roformer"),cEo=o(" \u2014 "),rj=a("a"),fEo=o("RoFormerForSequenceClassification"),mEo=o(" (RoFormer model)"),gEo=l(),A1=a("li"),tae=a("strong"),hEo=o("squeezebert"),pEo=o(" \u2014 "),tj=a("a"),_Eo=o("SqueezeBertForSequenceClassification"),uEo=o(" (SqueezeBERT model)"),bEo=l(),L1=a("li"),aae=a("strong"),vEo=o("tapas"),TEo=o(" \u2014 "),aj=a("a"),FEo=o("TapasForSequenceClassification"),CEo=o(" (TAPAS model)"),MEo=l(),B1=a("li"),nae=a("strong"),EEo=o("transfo-xl"),yEo=o(" \u2014 "),nj=a("a"),wEo=o("TransfoXLForSequenceClassification"),AEo=o(" (Transformer-XL model)"),LEo=l(),x1=a("li"),sae=a("strong"),BEo=o("xlm"),xEo=o(" \u2014 "),sj=a("a"),kEo=o("XLMForSequenceClassification"),REo=o(" (XLM model)"),SEo=l(),k1=a("li"),lae=a("strong"),PEo=o("xlm-roberta"),$Eo=o(" \u2014 "),lj=a("a"),IEo=o("XLMRobertaForSequenceClassification"),jEo=o(" (XLM-RoBERTa model)"),DEo=l(),R1=a("li"),iae=a("strong"),NEo=o("xlm-roberta-xl"),qEo=o(" \u2014 "),ij=a("a"),GEo=o("XLMRobertaXLForSequenceClassification"),OEo=o(" (XLM-RoBERTa-XL model)"),XEo=l(),S1=a("li"),dae=a("strong"),VEo=o("xlnet"),zEo=o(" \u2014 "),dj=a("a"),WEo=o("XLNetForSequenceClassification"),QEo=o(" (XLNet model)"),HEo=l(),P1=a("li"),cae=a("strong"),UEo=o("yoso"),JEo=o(" \u2014 "),cj=a("a"),YEo=o("YosoForSequenceClassification"),KEo=o(" (YOSO model)"),ZEo=l(),$1=a("p"),eyo=o("The model is set in evaluation mode by default using "),fae=a("code"),oyo=o("model.eval()"),ryo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mae=a("code"),tyo=o("model.train()"),ayo=l(),gae=a("p"),nyo=o("Examples:"),syo=l(),f(uy.$$.fragment),Xxe=l(),pd=a("h2"),I1=a("a"),hae=a("span"),f(by.$$.fragment),lyo=l(),pae=a("span"),iyo=o("AutoModelForMultipleChoice"),Vxe=l(),rr=a("div"),f(vy.$$.fragment),dyo=l(),_d=a("p"),cyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_ae=a("code"),fyo=o("from_pretrained()"),myo=o("class method or the "),uae=a("code"),gyo=o("from_config()"),hyo=o(`class
method.`),pyo=l(),Ty=a("p"),_yo=o("This class cannot be instantiated directly using "),bae=a("code"),uyo=o("__init__()"),byo=o(" (throws an error)."),vyo=l(),Jr=a("div"),f(Fy.$$.fragment),Tyo=l(),vae=a("p"),Fyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Cyo=l(),ud=a("p"),Myo=o(`Note:
Loading a model from its configuration file does `),Tae=a("strong"),Eyo=o("not"),yyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fae=a("code"),wyo=o("from_pretrained()"),Ayo=o("to load the model weights."),Lyo=l(),Cae=a("p"),Byo=o("Examples:"),xyo=l(),f(Cy.$$.fragment),kyo=l(),Xe=a("div"),f(My.$$.fragment),Ryo=l(),Mae=a("p"),Syo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Pyo=l(),Ja=a("p"),$yo=o("The model class to instantiate is selected based on the "),Eae=a("code"),Iyo=o("model_type"),jyo=o(` property of the config object (either
passed as an argument or loaded from `),yae=a("code"),Dyo=o("pretrained_model_name_or_path"),Nyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wae=a("code"),qyo=o("pretrained_model_name_or_path"),Gyo=o(":"),Oyo=l(),G=a("ul"),j1=a("li"),Aae=a("strong"),Xyo=o("albert"),Vyo=o(" \u2014 "),fj=a("a"),zyo=o("AlbertForMultipleChoice"),Wyo=o(" (ALBERT model)"),Qyo=l(),D1=a("li"),Lae=a("strong"),Hyo=o("bert"),Uyo=o(" \u2014 "),mj=a("a"),Jyo=o("BertForMultipleChoice"),Yyo=o(" (BERT model)"),Kyo=l(),N1=a("li"),Bae=a("strong"),Zyo=o("big_bird"),ewo=o(" \u2014 "),gj=a("a"),owo=o("BigBirdForMultipleChoice"),rwo=o(" (BigBird model)"),two=l(),q1=a("li"),xae=a("strong"),awo=o("camembert"),nwo=o(" \u2014 "),hj=a("a"),swo=o("CamembertForMultipleChoice"),lwo=o(" (CamemBERT model)"),iwo=l(),G1=a("li"),kae=a("strong"),dwo=o("canine"),cwo=o(" \u2014 "),pj=a("a"),fwo=o("CanineForMultipleChoice"),mwo=o(" (Canine model)"),gwo=l(),O1=a("li"),Rae=a("strong"),hwo=o("convbert"),pwo=o(" \u2014 "),_j=a("a"),_wo=o("ConvBertForMultipleChoice"),uwo=o(" (ConvBERT model)"),bwo=l(),X1=a("li"),Sae=a("strong"),vwo=o("data2vec-text"),Two=o(" \u2014 "),uj=a("a"),Fwo=o("Data2VecTextForMultipleChoice"),Cwo=o(" (Data2VecText model)"),Mwo=l(),V1=a("li"),Pae=a("strong"),Ewo=o("distilbert"),ywo=o(" \u2014 "),bj=a("a"),wwo=o("DistilBertForMultipleChoice"),Awo=o(" (DistilBERT model)"),Lwo=l(),z1=a("li"),$ae=a("strong"),Bwo=o("electra"),xwo=o(" \u2014 "),vj=a("a"),kwo=o("ElectraForMultipleChoice"),Rwo=o(" (ELECTRA model)"),Swo=l(),W1=a("li"),Iae=a("strong"),Pwo=o("flaubert"),$wo=o(" \u2014 "),Tj=a("a"),Iwo=o("FlaubertForMultipleChoice"),jwo=o(" (FlauBERT model)"),Dwo=l(),Q1=a("li"),jae=a("strong"),Nwo=o("fnet"),qwo=o(" \u2014 "),Fj=a("a"),Gwo=o("FNetForMultipleChoice"),Owo=o(" (FNet model)"),Xwo=l(),H1=a("li"),Dae=a("strong"),Vwo=o("funnel"),zwo=o(" \u2014 "),Cj=a("a"),Wwo=o("FunnelForMultipleChoice"),Qwo=o(" (Funnel Transformer model)"),Hwo=l(),U1=a("li"),Nae=a("strong"),Uwo=o("ibert"),Jwo=o(" \u2014 "),Mj=a("a"),Ywo=o("IBertForMultipleChoice"),Kwo=o(" (I-BERT model)"),Zwo=l(),J1=a("li"),qae=a("strong"),eAo=o("longformer"),oAo=o(" \u2014 "),Ej=a("a"),rAo=o("LongformerForMultipleChoice"),tAo=o(" (Longformer model)"),aAo=l(),Y1=a("li"),Gae=a("strong"),nAo=o("megatron-bert"),sAo=o(" \u2014 "),yj=a("a"),lAo=o("MegatronBertForMultipleChoice"),iAo=o(" (MegatronBert model)"),dAo=l(),K1=a("li"),Oae=a("strong"),cAo=o("mobilebert"),fAo=o(" \u2014 "),wj=a("a"),mAo=o("MobileBertForMultipleChoice"),gAo=o(" (MobileBERT model)"),hAo=l(),Z1=a("li"),Xae=a("strong"),pAo=o("mpnet"),_Ao=o(" \u2014 "),Aj=a("a"),uAo=o("MPNetForMultipleChoice"),bAo=o(" (MPNet model)"),vAo=l(),eb=a("li"),Vae=a("strong"),TAo=o("nystromformer"),FAo=o(" \u2014 "),Lj=a("a"),CAo=o("NystromformerForMultipleChoice"),MAo=o(" (Nystromformer model)"),EAo=l(),ob=a("li"),zae=a("strong"),yAo=o("qdqbert"),wAo=o(" \u2014 "),Bj=a("a"),AAo=o("QDQBertForMultipleChoice"),LAo=o(" (QDQBert model)"),BAo=l(),rb=a("li"),Wae=a("strong"),xAo=o("rembert"),kAo=o(" \u2014 "),xj=a("a"),RAo=o("RemBertForMultipleChoice"),SAo=o(" (RemBERT model)"),PAo=l(),tb=a("li"),Qae=a("strong"),$Ao=o("roberta"),IAo=o(" \u2014 "),kj=a("a"),jAo=o("RobertaForMultipleChoice"),DAo=o(" (RoBERTa model)"),NAo=l(),ab=a("li"),Hae=a("strong"),qAo=o("roformer"),GAo=o(" \u2014 "),Rj=a("a"),OAo=o("RoFormerForMultipleChoice"),XAo=o(" (RoFormer model)"),VAo=l(),nb=a("li"),Uae=a("strong"),zAo=o("squeezebert"),WAo=o(" \u2014 "),Sj=a("a"),QAo=o("SqueezeBertForMultipleChoice"),HAo=o(" (SqueezeBERT model)"),UAo=l(),sb=a("li"),Jae=a("strong"),JAo=o("xlm"),YAo=o(" \u2014 "),Pj=a("a"),KAo=o("XLMForMultipleChoice"),ZAo=o(" (XLM model)"),e0o=l(),lb=a("li"),Yae=a("strong"),o0o=o("xlm-roberta"),r0o=o(" \u2014 "),$j=a("a"),t0o=o("XLMRobertaForMultipleChoice"),a0o=o(" (XLM-RoBERTa model)"),n0o=l(),ib=a("li"),Kae=a("strong"),s0o=o("xlm-roberta-xl"),l0o=o(" \u2014 "),Ij=a("a"),i0o=o("XLMRobertaXLForMultipleChoice"),d0o=o(" (XLM-RoBERTa-XL model)"),c0o=l(),db=a("li"),Zae=a("strong"),f0o=o("xlnet"),m0o=o(" \u2014 "),jj=a("a"),g0o=o("XLNetForMultipleChoice"),h0o=o(" (XLNet model)"),p0o=l(),cb=a("li"),ene=a("strong"),_0o=o("yoso"),u0o=o(" \u2014 "),Dj=a("a"),b0o=o("YosoForMultipleChoice"),v0o=o(" (YOSO model)"),T0o=l(),fb=a("p"),F0o=o("The model is set in evaluation mode by default using "),one=a("code"),C0o=o("model.eval()"),M0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rne=a("code"),E0o=o("model.train()"),y0o=l(),tne=a("p"),w0o=o("Examples:"),A0o=l(),f(Ey.$$.fragment),zxe=l(),bd=a("h2"),mb=a("a"),ane=a("span"),f(yy.$$.fragment),L0o=l(),nne=a("span"),B0o=o("AutoModelForNextSentencePrediction"),Wxe=l(),tr=a("div"),f(wy.$$.fragment),x0o=l(),vd=a("p"),k0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sne=a("code"),R0o=o("from_pretrained()"),S0o=o("class method or the "),lne=a("code"),P0o=o("from_config()"),$0o=o(`class
method.`),I0o=l(),Ay=a("p"),j0o=o("This class cannot be instantiated directly using "),ine=a("code"),D0o=o("__init__()"),N0o=o(" (throws an error)."),q0o=l(),Yr=a("div"),f(Ly.$$.fragment),G0o=l(),dne=a("p"),O0o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),X0o=l(),Td=a("p"),V0o=o(`Note:
Loading a model from its configuration file does `),cne=a("strong"),z0o=o("not"),W0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fne=a("code"),Q0o=o("from_pretrained()"),H0o=o("to load the model weights."),U0o=l(),mne=a("p"),J0o=o("Examples:"),Y0o=l(),f(By.$$.fragment),K0o=l(),Ve=a("div"),f(xy.$$.fragment),Z0o=l(),gne=a("p"),eLo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oLo=l(),Ya=a("p"),rLo=o("The model class to instantiate is selected based on the "),hne=a("code"),tLo=o("model_type"),aLo=o(` property of the config object (either
passed as an argument or loaded from `),pne=a("code"),nLo=o("pretrained_model_name_or_path"),sLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ne=a("code"),lLo=o("pretrained_model_name_or_path"),iLo=o(":"),dLo=l(),da=a("ul"),gb=a("li"),une=a("strong"),cLo=o("bert"),fLo=o(" \u2014 "),Nj=a("a"),mLo=o("BertForNextSentencePrediction"),gLo=o(" (BERT model)"),hLo=l(),hb=a("li"),bne=a("strong"),pLo=o("fnet"),_Lo=o(" \u2014 "),qj=a("a"),uLo=o("FNetForNextSentencePrediction"),bLo=o(" (FNet model)"),vLo=l(),pb=a("li"),vne=a("strong"),TLo=o("megatron-bert"),FLo=o(" \u2014 "),Gj=a("a"),CLo=o("MegatronBertForNextSentencePrediction"),MLo=o(" (MegatronBert model)"),ELo=l(),_b=a("li"),Tne=a("strong"),yLo=o("mobilebert"),wLo=o(" \u2014 "),Oj=a("a"),ALo=o("MobileBertForNextSentencePrediction"),LLo=o(" (MobileBERT model)"),BLo=l(),ub=a("li"),Fne=a("strong"),xLo=o("qdqbert"),kLo=o(" \u2014 "),Xj=a("a"),RLo=o("QDQBertForNextSentencePrediction"),SLo=o(" (QDQBert model)"),PLo=l(),bb=a("p"),$Lo=o("The model is set in evaluation mode by default using "),Cne=a("code"),ILo=o("model.eval()"),jLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=a("code"),DLo=o("model.train()"),NLo=l(),Ene=a("p"),qLo=o("Examples:"),GLo=l(),f(ky.$$.fragment),Qxe=l(),Fd=a("h2"),vb=a("a"),yne=a("span"),f(Ry.$$.fragment),OLo=l(),wne=a("span"),XLo=o("AutoModelForTokenClassification"),Hxe=l(),ar=a("div"),f(Sy.$$.fragment),VLo=l(),Cd=a("p"),zLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ane=a("code"),WLo=o("from_pretrained()"),QLo=o("class method or the "),Lne=a("code"),HLo=o("from_config()"),ULo=o(`class
method.`),JLo=l(),Py=a("p"),YLo=o("This class cannot be instantiated directly using "),Bne=a("code"),KLo=o("__init__()"),ZLo=o(" (throws an error)."),e7o=l(),Kr=a("div"),f($y.$$.fragment),o7o=l(),xne=a("p"),r7o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t7o=l(),Md=a("p"),a7o=o(`Note:
Loading a model from its configuration file does `),kne=a("strong"),n7o=o("not"),s7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rne=a("code"),l7o=o("from_pretrained()"),i7o=o("to load the model weights."),d7o=l(),Sne=a("p"),c7o=o("Examples:"),f7o=l(),f(Iy.$$.fragment),m7o=l(),ze=a("div"),f(jy.$$.fragment),g7o=l(),Pne=a("p"),h7o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p7o=l(),Ka=a("p"),_7o=o("The model class to instantiate is selected based on the "),$ne=a("code"),u7o=o("model_type"),b7o=o(` property of the config object (either
passed as an argument or loaded from `),Ine=a("code"),v7o=o("pretrained_model_name_or_path"),T7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jne=a("code"),F7o=o("pretrained_model_name_or_path"),C7o=o(":"),M7o=l(),N=a("ul"),Tb=a("li"),Dne=a("strong"),E7o=o("albert"),y7o=o(" \u2014 "),Vj=a("a"),w7o=o("AlbertForTokenClassification"),A7o=o(" (ALBERT model)"),L7o=l(),Fb=a("li"),Nne=a("strong"),B7o=o("bert"),x7o=o(" \u2014 "),zj=a("a"),k7o=o("BertForTokenClassification"),R7o=o(" (BERT model)"),S7o=l(),Cb=a("li"),qne=a("strong"),P7o=o("big_bird"),$7o=o(" \u2014 "),Wj=a("a"),I7o=o("BigBirdForTokenClassification"),j7o=o(" (BigBird model)"),D7o=l(),Mb=a("li"),Gne=a("strong"),N7o=o("camembert"),q7o=o(" \u2014 "),Qj=a("a"),G7o=o("CamembertForTokenClassification"),O7o=o(" (CamemBERT model)"),X7o=l(),Eb=a("li"),One=a("strong"),V7o=o("canine"),z7o=o(" \u2014 "),Hj=a("a"),W7o=o("CanineForTokenClassification"),Q7o=o(" (Canine model)"),H7o=l(),yb=a("li"),Xne=a("strong"),U7o=o("convbert"),J7o=o(" \u2014 "),Uj=a("a"),Y7o=o("ConvBertForTokenClassification"),K7o=o(" (ConvBERT model)"),Z7o=l(),wb=a("li"),Vne=a("strong"),e8o=o("data2vec-text"),o8o=o(" \u2014 "),Jj=a("a"),r8o=o("Data2VecTextForTokenClassification"),t8o=o(" (Data2VecText model)"),a8o=l(),Ab=a("li"),zne=a("strong"),n8o=o("deberta"),s8o=o(" \u2014 "),Yj=a("a"),l8o=o("DebertaForTokenClassification"),i8o=o(" (DeBERTa model)"),d8o=l(),Lb=a("li"),Wne=a("strong"),c8o=o("deberta-v2"),f8o=o(" \u2014 "),Kj=a("a"),m8o=o("DebertaV2ForTokenClassification"),g8o=o(" (DeBERTa-v2 model)"),h8o=l(),Bb=a("li"),Qne=a("strong"),p8o=o("distilbert"),_8o=o(" \u2014 "),Zj=a("a"),u8o=o("DistilBertForTokenClassification"),b8o=o(" (DistilBERT model)"),v8o=l(),xb=a("li"),Hne=a("strong"),T8o=o("electra"),F8o=o(" \u2014 "),eD=a("a"),C8o=o("ElectraForTokenClassification"),M8o=o(" (ELECTRA model)"),E8o=l(),kb=a("li"),Une=a("strong"),y8o=o("flaubert"),w8o=o(" \u2014 "),oD=a("a"),A8o=o("FlaubertForTokenClassification"),L8o=o(" (FlauBERT model)"),B8o=l(),Rb=a("li"),Jne=a("strong"),x8o=o("fnet"),k8o=o(" \u2014 "),rD=a("a"),R8o=o("FNetForTokenClassification"),S8o=o(" (FNet model)"),P8o=l(),Sb=a("li"),Yne=a("strong"),$8o=o("funnel"),I8o=o(" \u2014 "),tD=a("a"),j8o=o("FunnelForTokenClassification"),D8o=o(" (Funnel Transformer model)"),N8o=l(),Pb=a("li"),Kne=a("strong"),q8o=o("gpt2"),G8o=o(" \u2014 "),aD=a("a"),O8o=o("GPT2ForTokenClassification"),X8o=o(" (OpenAI GPT-2 model)"),V8o=l(),$b=a("li"),Zne=a("strong"),z8o=o("ibert"),W8o=o(" \u2014 "),nD=a("a"),Q8o=o("IBertForTokenClassification"),H8o=o(" (I-BERT model)"),U8o=l(),Ib=a("li"),ese=a("strong"),J8o=o("layoutlm"),Y8o=o(" \u2014 "),sD=a("a"),K8o=o("LayoutLMForTokenClassification"),Z8o=o(" (LayoutLM model)"),e9o=l(),jb=a("li"),ose=a("strong"),o9o=o("layoutlmv2"),r9o=o(" \u2014 "),lD=a("a"),t9o=o("LayoutLMv2ForTokenClassification"),a9o=o(" (LayoutLMv2 model)"),n9o=l(),Db=a("li"),rse=a("strong"),s9o=o("longformer"),l9o=o(" \u2014 "),iD=a("a"),i9o=o("LongformerForTokenClassification"),d9o=o(" (Longformer model)"),c9o=l(),Nb=a("li"),tse=a("strong"),f9o=o("megatron-bert"),m9o=o(" \u2014 "),dD=a("a"),g9o=o("MegatronBertForTokenClassification"),h9o=o(" (MegatronBert model)"),p9o=l(),qb=a("li"),ase=a("strong"),_9o=o("mobilebert"),u9o=o(" \u2014 "),cD=a("a"),b9o=o("MobileBertForTokenClassification"),v9o=o(" (MobileBERT model)"),T9o=l(),Gb=a("li"),nse=a("strong"),F9o=o("mpnet"),C9o=o(" \u2014 "),fD=a("a"),M9o=o("MPNetForTokenClassification"),E9o=o(" (MPNet model)"),y9o=l(),Ob=a("li"),sse=a("strong"),w9o=o("nystromformer"),A9o=o(" \u2014 "),mD=a("a"),L9o=o("NystromformerForTokenClassification"),B9o=o(" (Nystromformer model)"),x9o=l(),Xb=a("li"),lse=a("strong"),k9o=o("qdqbert"),R9o=o(" \u2014 "),gD=a("a"),S9o=o("QDQBertForTokenClassification"),P9o=o(" (QDQBert model)"),$9o=l(),Vb=a("li"),ise=a("strong"),I9o=o("rembert"),j9o=o(" \u2014 "),hD=a("a"),D9o=o("RemBertForTokenClassification"),N9o=o(" (RemBERT model)"),q9o=l(),zb=a("li"),dse=a("strong"),G9o=o("roberta"),O9o=o(" \u2014 "),pD=a("a"),X9o=o("RobertaForTokenClassification"),V9o=o(" (RoBERTa model)"),z9o=l(),Wb=a("li"),cse=a("strong"),W9o=o("roformer"),Q9o=o(" \u2014 "),_D=a("a"),H9o=o("RoFormerForTokenClassification"),U9o=o(" (RoFormer model)"),J9o=l(),Qb=a("li"),fse=a("strong"),Y9o=o("squeezebert"),K9o=o(" \u2014 "),uD=a("a"),Z9o=o("SqueezeBertForTokenClassification"),eBo=o(" (SqueezeBERT model)"),oBo=l(),Hb=a("li"),mse=a("strong"),rBo=o("xlm"),tBo=o(" \u2014 "),bD=a("a"),aBo=o("XLMForTokenClassification"),nBo=o(" (XLM model)"),sBo=l(),Ub=a("li"),gse=a("strong"),lBo=o("xlm-roberta"),iBo=o(" \u2014 "),vD=a("a"),dBo=o("XLMRobertaForTokenClassification"),cBo=o(" (XLM-RoBERTa model)"),fBo=l(),Jb=a("li"),hse=a("strong"),mBo=o("xlm-roberta-xl"),gBo=o(" \u2014 "),TD=a("a"),hBo=o("XLMRobertaXLForTokenClassification"),pBo=o(" (XLM-RoBERTa-XL model)"),_Bo=l(),Yb=a("li"),pse=a("strong"),uBo=o("xlnet"),bBo=o(" \u2014 "),FD=a("a"),vBo=o("XLNetForTokenClassification"),TBo=o(" (XLNet model)"),FBo=l(),Kb=a("li"),_se=a("strong"),CBo=o("yoso"),MBo=o(" \u2014 "),CD=a("a"),EBo=o("YosoForTokenClassification"),yBo=o(" (YOSO model)"),wBo=l(),Zb=a("p"),ABo=o("The model is set in evaluation mode by default using "),use=a("code"),LBo=o("model.eval()"),BBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bse=a("code"),xBo=o("model.train()"),kBo=l(),vse=a("p"),RBo=o("Examples:"),SBo=l(),f(Dy.$$.fragment),Uxe=l(),Ed=a("h2"),e3=a("a"),Tse=a("span"),f(Ny.$$.fragment),PBo=l(),Fse=a("span"),$Bo=o("AutoModelForQuestionAnswering"),Jxe=l(),nr=a("div"),f(qy.$$.fragment),IBo=l(),yd=a("p"),jBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cse=a("code"),DBo=o("from_pretrained()"),NBo=o("class method or the "),Mse=a("code"),qBo=o("from_config()"),GBo=o(`class
method.`),OBo=l(),Gy=a("p"),XBo=o("This class cannot be instantiated directly using "),Ese=a("code"),VBo=o("__init__()"),zBo=o(" (throws an error)."),WBo=l(),Zr=a("div"),f(Oy.$$.fragment),QBo=l(),yse=a("p"),HBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UBo=l(),wd=a("p"),JBo=o(`Note:
Loading a model from its configuration file does `),wse=a("strong"),YBo=o("not"),KBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ase=a("code"),ZBo=o("from_pretrained()"),exo=o("to load the model weights."),oxo=l(),Lse=a("p"),rxo=o("Examples:"),txo=l(),f(Xy.$$.fragment),axo=l(),We=a("div"),f(Vy.$$.fragment),nxo=l(),Bse=a("p"),sxo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lxo=l(),Za=a("p"),ixo=o("The model class to instantiate is selected based on the "),xse=a("code"),dxo=o("model_type"),cxo=o(` property of the config object (either
passed as an argument or loaded from `),kse=a("code"),fxo=o("pretrained_model_name_or_path"),mxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rse=a("code"),gxo=o("pretrained_model_name_or_path"),hxo=o(":"),pxo=l(),R=a("ul"),o3=a("li"),Sse=a("strong"),_xo=o("albert"),uxo=o(" \u2014 "),MD=a("a"),bxo=o("AlbertForQuestionAnswering"),vxo=o(" (ALBERT model)"),Txo=l(),r3=a("li"),Pse=a("strong"),Fxo=o("bart"),Cxo=o(" \u2014 "),ED=a("a"),Mxo=o("BartForQuestionAnswering"),Exo=o(" (BART model)"),yxo=l(),t3=a("li"),$se=a("strong"),wxo=o("bert"),Axo=o(" \u2014 "),yD=a("a"),Lxo=o("BertForQuestionAnswering"),Bxo=o(" (BERT model)"),xxo=l(),a3=a("li"),Ise=a("strong"),kxo=o("big_bird"),Rxo=o(" \u2014 "),wD=a("a"),Sxo=o("BigBirdForQuestionAnswering"),Pxo=o(" (BigBird model)"),$xo=l(),n3=a("li"),jse=a("strong"),Ixo=o("bigbird_pegasus"),jxo=o(" \u2014 "),AD=a("a"),Dxo=o("BigBirdPegasusForQuestionAnswering"),Nxo=o(" (BigBirdPegasus model)"),qxo=l(),s3=a("li"),Dse=a("strong"),Gxo=o("camembert"),Oxo=o(" \u2014 "),LD=a("a"),Xxo=o("CamembertForQuestionAnswering"),Vxo=o(" (CamemBERT model)"),zxo=l(),l3=a("li"),Nse=a("strong"),Wxo=o("canine"),Qxo=o(" \u2014 "),BD=a("a"),Hxo=o("CanineForQuestionAnswering"),Uxo=o(" (Canine model)"),Jxo=l(),i3=a("li"),qse=a("strong"),Yxo=o("convbert"),Kxo=o(" \u2014 "),xD=a("a"),Zxo=o("ConvBertForQuestionAnswering"),eko=o(" (ConvBERT model)"),oko=l(),d3=a("li"),Gse=a("strong"),rko=o("data2vec-text"),tko=o(" \u2014 "),kD=a("a"),ako=o("Data2VecTextForQuestionAnswering"),nko=o(" (Data2VecText model)"),sko=l(),c3=a("li"),Ose=a("strong"),lko=o("deberta"),iko=o(" \u2014 "),RD=a("a"),dko=o("DebertaForQuestionAnswering"),cko=o(" (DeBERTa model)"),fko=l(),f3=a("li"),Xse=a("strong"),mko=o("deberta-v2"),gko=o(" \u2014 "),SD=a("a"),hko=o("DebertaV2ForQuestionAnswering"),pko=o(" (DeBERTa-v2 model)"),_ko=l(),m3=a("li"),Vse=a("strong"),uko=o("distilbert"),bko=o(" \u2014 "),PD=a("a"),vko=o("DistilBertForQuestionAnswering"),Tko=o(" (DistilBERT model)"),Fko=l(),g3=a("li"),zse=a("strong"),Cko=o("electra"),Mko=o(" \u2014 "),$D=a("a"),Eko=o("ElectraForQuestionAnswering"),yko=o(" (ELECTRA model)"),wko=l(),h3=a("li"),Wse=a("strong"),Ako=o("flaubert"),Lko=o(" \u2014 "),ID=a("a"),Bko=o("FlaubertForQuestionAnsweringSimple"),xko=o(" (FlauBERT model)"),kko=l(),p3=a("li"),Qse=a("strong"),Rko=o("fnet"),Sko=o(" \u2014 "),jD=a("a"),Pko=o("FNetForQuestionAnswering"),$ko=o(" (FNet model)"),Iko=l(),_3=a("li"),Hse=a("strong"),jko=o("funnel"),Dko=o(" \u2014 "),DD=a("a"),Nko=o("FunnelForQuestionAnswering"),qko=o(" (Funnel Transformer model)"),Gko=l(),u3=a("li"),Use=a("strong"),Oko=o("gptj"),Xko=o(" \u2014 "),ND=a("a"),Vko=o("GPTJForQuestionAnswering"),zko=o(" (GPT-J model)"),Wko=l(),b3=a("li"),Jse=a("strong"),Qko=o("ibert"),Hko=o(" \u2014 "),qD=a("a"),Uko=o("IBertForQuestionAnswering"),Jko=o(" (I-BERT model)"),Yko=l(),v3=a("li"),Yse=a("strong"),Kko=o("layoutlmv2"),Zko=o(" \u2014 "),GD=a("a"),eRo=o("LayoutLMv2ForQuestionAnswering"),oRo=o(" (LayoutLMv2 model)"),rRo=l(),T3=a("li"),Kse=a("strong"),tRo=o("led"),aRo=o(" \u2014 "),OD=a("a"),nRo=o("LEDForQuestionAnswering"),sRo=o(" (LED model)"),lRo=l(),F3=a("li"),Zse=a("strong"),iRo=o("longformer"),dRo=o(" \u2014 "),XD=a("a"),cRo=o("LongformerForQuestionAnswering"),fRo=o(" (Longformer model)"),mRo=l(),C3=a("li"),ele=a("strong"),gRo=o("lxmert"),hRo=o(" \u2014 "),VD=a("a"),pRo=o("LxmertForQuestionAnswering"),_Ro=o(" (LXMERT model)"),uRo=l(),M3=a("li"),ole=a("strong"),bRo=o("mbart"),vRo=o(" \u2014 "),zD=a("a"),TRo=o("MBartForQuestionAnswering"),FRo=o(" (mBART model)"),CRo=l(),E3=a("li"),rle=a("strong"),MRo=o("megatron-bert"),ERo=o(" \u2014 "),WD=a("a"),yRo=o("MegatronBertForQuestionAnswering"),wRo=o(" (MegatronBert model)"),ARo=l(),y3=a("li"),tle=a("strong"),LRo=o("mobilebert"),BRo=o(" \u2014 "),QD=a("a"),xRo=o("MobileBertForQuestionAnswering"),kRo=o(" (MobileBERT model)"),RRo=l(),w3=a("li"),ale=a("strong"),SRo=o("mpnet"),PRo=o(" \u2014 "),HD=a("a"),$Ro=o("MPNetForQuestionAnswering"),IRo=o(" (MPNet model)"),jRo=l(),A3=a("li"),nle=a("strong"),DRo=o("nystromformer"),NRo=o(" \u2014 "),UD=a("a"),qRo=o("NystromformerForQuestionAnswering"),GRo=o(" (Nystromformer model)"),ORo=l(),L3=a("li"),sle=a("strong"),XRo=o("qdqbert"),VRo=o(" \u2014 "),JD=a("a"),zRo=o("QDQBertForQuestionAnswering"),WRo=o(" (QDQBert model)"),QRo=l(),B3=a("li"),lle=a("strong"),HRo=o("reformer"),URo=o(" \u2014 "),YD=a("a"),JRo=o("ReformerForQuestionAnswering"),YRo=o(" (Reformer model)"),KRo=l(),x3=a("li"),ile=a("strong"),ZRo=o("rembert"),eSo=o(" \u2014 "),KD=a("a"),oSo=o("RemBertForQuestionAnswering"),rSo=o(" (RemBERT model)"),tSo=l(),k3=a("li"),dle=a("strong"),aSo=o("roberta"),nSo=o(" \u2014 "),ZD=a("a"),sSo=o("RobertaForQuestionAnswering"),lSo=o(" (RoBERTa model)"),iSo=l(),R3=a("li"),cle=a("strong"),dSo=o("roformer"),cSo=o(" \u2014 "),eN=a("a"),fSo=o("RoFormerForQuestionAnswering"),mSo=o(" (RoFormer model)"),gSo=l(),S3=a("li"),fle=a("strong"),hSo=o("splinter"),pSo=o(" \u2014 "),oN=a("a"),_So=o("SplinterForQuestionAnswering"),uSo=o(" (Splinter model)"),bSo=l(),P3=a("li"),mle=a("strong"),vSo=o("squeezebert"),TSo=o(" \u2014 "),rN=a("a"),FSo=o("SqueezeBertForQuestionAnswering"),CSo=o(" (SqueezeBERT model)"),MSo=l(),$3=a("li"),gle=a("strong"),ESo=o("xlm"),ySo=o(" \u2014 "),tN=a("a"),wSo=o("XLMForQuestionAnsweringSimple"),ASo=o(" (XLM model)"),LSo=l(),I3=a("li"),hle=a("strong"),BSo=o("xlm-roberta"),xSo=o(" \u2014 "),aN=a("a"),kSo=o("XLMRobertaForQuestionAnswering"),RSo=o(" (XLM-RoBERTa model)"),SSo=l(),j3=a("li"),ple=a("strong"),PSo=o("xlm-roberta-xl"),$So=o(" \u2014 "),nN=a("a"),ISo=o("XLMRobertaXLForQuestionAnswering"),jSo=o(" (XLM-RoBERTa-XL model)"),DSo=l(),D3=a("li"),_le=a("strong"),NSo=o("xlnet"),qSo=o(" \u2014 "),sN=a("a"),GSo=o("XLNetForQuestionAnsweringSimple"),OSo=o(" (XLNet model)"),XSo=l(),N3=a("li"),ule=a("strong"),VSo=o("yoso"),zSo=o(" \u2014 "),lN=a("a"),WSo=o("YosoForQuestionAnswering"),QSo=o(" (YOSO model)"),HSo=l(),q3=a("p"),USo=o("The model is set in evaluation mode by default using "),ble=a("code"),JSo=o("model.eval()"),YSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=a("code"),KSo=o("model.train()"),ZSo=l(),Tle=a("p"),ePo=o("Examples:"),oPo=l(),f(zy.$$.fragment),Yxe=l(),Ad=a("h2"),G3=a("a"),Fle=a("span"),f(Wy.$$.fragment),rPo=l(),Cle=a("span"),tPo=o("AutoModelForTableQuestionAnswering"),Kxe=l(),sr=a("div"),f(Qy.$$.fragment),aPo=l(),Ld=a("p"),nPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Mle=a("code"),sPo=o("from_pretrained()"),lPo=o("class method or the "),Ele=a("code"),iPo=o("from_config()"),dPo=o(`class
method.`),cPo=l(),Hy=a("p"),fPo=o("This class cannot be instantiated directly using "),yle=a("code"),mPo=o("__init__()"),gPo=o(" (throws an error)."),hPo=l(),et=a("div"),f(Uy.$$.fragment),pPo=l(),wle=a("p"),_Po=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uPo=l(),Bd=a("p"),bPo=o(`Note:
Loading a model from its configuration file does `),Ale=a("strong"),vPo=o("not"),TPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lle=a("code"),FPo=o("from_pretrained()"),CPo=o("to load the model weights."),MPo=l(),Ble=a("p"),EPo=o("Examples:"),yPo=l(),f(Jy.$$.fragment),wPo=l(),Qe=a("div"),f(Yy.$$.fragment),APo=l(),xle=a("p"),LPo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),BPo=l(),en=a("p"),xPo=o("The model class to instantiate is selected based on the "),kle=a("code"),kPo=o("model_type"),RPo=o(` property of the config object (either
passed as an argument or loaded from `),Rle=a("code"),SPo=o("pretrained_model_name_or_path"),PPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sle=a("code"),$Po=o("pretrained_model_name_or_path"),IPo=o(":"),jPo=l(),Ple=a("ul"),O3=a("li"),$le=a("strong"),DPo=o("tapas"),NPo=o(" \u2014 "),iN=a("a"),qPo=o("TapasForQuestionAnswering"),GPo=o(" (TAPAS model)"),OPo=l(),X3=a("p"),XPo=o("The model is set in evaluation mode by default using "),Ile=a("code"),VPo=o("model.eval()"),zPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jle=a("code"),WPo=o("model.train()"),QPo=l(),Dle=a("p"),HPo=o("Examples:"),UPo=l(),f(Ky.$$.fragment),Zxe=l(),xd=a("h2"),V3=a("a"),Nle=a("span"),f(Zy.$$.fragment),JPo=l(),qle=a("span"),YPo=o("AutoModelForImageClassification"),eke=l(),lr=a("div"),f(ew.$$.fragment),KPo=l(),kd=a("p"),ZPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gle=a("code"),e$o=o("from_pretrained()"),o$o=o("class method or the "),Ole=a("code"),r$o=o("from_config()"),t$o=o(`class
method.`),a$o=l(),ow=a("p"),n$o=o("This class cannot be instantiated directly using "),Xle=a("code"),s$o=o("__init__()"),l$o=o(" (throws an error)."),i$o=l(),ot=a("div"),f(rw.$$.fragment),d$o=l(),Vle=a("p"),c$o=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),f$o=l(),Rd=a("p"),m$o=o(`Note:
Loading a model from its configuration file does `),zle=a("strong"),g$o=o("not"),h$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wle=a("code"),p$o=o("from_pretrained()"),_$o=o("to load the model weights."),u$o=l(),Qle=a("p"),b$o=o("Examples:"),v$o=l(),f(tw.$$.fragment),T$o=l(),He=a("div"),f(aw.$$.fragment),F$o=l(),Hle=a("p"),C$o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),M$o=l(),on=a("p"),E$o=o("The model class to instantiate is selected based on the "),Ule=a("code"),y$o=o("model_type"),w$o=o(` property of the config object (either
passed as an argument or loaded from `),Jle=a("code"),A$o=o("pretrained_model_name_or_path"),L$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=a("code"),B$o=o("pretrained_model_name_or_path"),x$o=o(":"),k$o=l(),Ce=a("ul"),z3=a("li"),Kle=a("strong"),R$o=o("beit"),S$o=o(" \u2014 "),dN=a("a"),P$o=o("BeitForImageClassification"),$$o=o(" (BEiT model)"),I$o=l(),W3=a("li"),Zle=a("strong"),j$o=o("convnext"),D$o=o(" \u2014 "),cN=a("a"),N$o=o("ConvNextForImageClassification"),q$o=o(" (ConvNext model)"),G$o=l(),qs=a("li"),eie=a("strong"),O$o=o("deit"),X$o=o(" \u2014 "),fN=a("a"),V$o=o("DeiTForImageClassification"),z$o=o(" or "),mN=a("a"),W$o=o("DeiTForImageClassificationWithTeacher"),Q$o=o(" (DeiT model)"),H$o=l(),Q3=a("li"),oie=a("strong"),U$o=o("imagegpt"),J$o=o(" \u2014 "),gN=a("a"),Y$o=o("ImageGPTForImageClassification"),K$o=o(" (ImageGPT model)"),Z$o=l(),ma=a("li"),rie=a("strong"),eIo=o("perceiver"),oIo=o(" \u2014 "),hN=a("a"),rIo=o("PerceiverForImageClassificationLearned"),tIo=o(" or "),pN=a("a"),aIo=o("PerceiverForImageClassificationFourier"),nIo=o(" or "),_N=a("a"),sIo=o("PerceiverForImageClassificationConvProcessing"),lIo=o(" (Perceiver model)"),iIo=l(),H3=a("li"),tie=a("strong"),dIo=o("poolformer"),cIo=o(" \u2014 "),uN=a("a"),fIo=o("PoolFormerForImageClassification"),mIo=o(" (PoolFormer model)"),gIo=l(),U3=a("li"),aie=a("strong"),hIo=o("segformer"),pIo=o(" \u2014 "),bN=a("a"),_Io=o("SegformerForImageClassification"),uIo=o(" (SegFormer model)"),bIo=l(),J3=a("li"),nie=a("strong"),vIo=o("swin"),TIo=o(" \u2014 "),vN=a("a"),FIo=o("SwinForImageClassification"),CIo=o(" (Swin model)"),MIo=l(),Y3=a("li"),sie=a("strong"),EIo=o("vit"),yIo=o(" \u2014 "),TN=a("a"),wIo=o("ViTForImageClassification"),AIo=o(" (ViT model)"),LIo=l(),K3=a("p"),BIo=o("The model is set in evaluation mode by default using "),lie=a("code"),xIo=o("model.eval()"),kIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iie=a("code"),RIo=o("model.train()"),SIo=l(),die=a("p"),PIo=o("Examples:"),$Io=l(),f(nw.$$.fragment),oke=l(),Sd=a("h2"),Z3=a("a"),cie=a("span"),f(sw.$$.fragment),IIo=l(),fie=a("span"),jIo=o("AutoModelForVision2Seq"),rke=l(),ir=a("div"),f(lw.$$.fragment),DIo=l(),Pd=a("p"),NIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mie=a("code"),qIo=o("from_pretrained()"),GIo=o("class method or the "),gie=a("code"),OIo=o("from_config()"),XIo=o(`class
method.`),VIo=l(),iw=a("p"),zIo=o("This class cannot be instantiated directly using "),hie=a("code"),WIo=o("__init__()"),QIo=o(" (throws an error)."),HIo=l(),rt=a("div"),f(dw.$$.fragment),UIo=l(),pie=a("p"),JIo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YIo=l(),$d=a("p"),KIo=o(`Note:
Loading a model from its configuration file does `),_ie=a("strong"),ZIo=o("not"),ejo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uie=a("code"),ojo=o("from_pretrained()"),rjo=o("to load the model weights."),tjo=l(),bie=a("p"),ajo=o("Examples:"),njo=l(),f(cw.$$.fragment),sjo=l(),Ue=a("div"),f(fw.$$.fragment),ljo=l(),vie=a("p"),ijo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),djo=l(),rn=a("p"),cjo=o("The model class to instantiate is selected based on the "),Tie=a("code"),fjo=o("model_type"),mjo=o(` property of the config object (either
passed as an argument or loaded from `),Fie=a("code"),gjo=o("pretrained_model_name_or_path"),hjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cie=a("code"),pjo=o("pretrained_model_name_or_path"),_jo=o(":"),ujo=l(),Mie=a("ul"),e5=a("li"),Eie=a("strong"),bjo=o("vision-encoder-decoder"),vjo=o(" \u2014 "),FN=a("a"),Tjo=o("VisionEncoderDecoderModel"),Fjo=o(" (Vision Encoder decoder model)"),Cjo=l(),o5=a("p"),Mjo=o("The model is set in evaluation mode by default using "),yie=a("code"),Ejo=o("model.eval()"),yjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=a("code"),wjo=o("model.train()"),Ajo=l(),Aie=a("p"),Ljo=o("Examples:"),Bjo=l(),f(mw.$$.fragment),tke=l(),Id=a("h2"),r5=a("a"),Lie=a("span"),f(gw.$$.fragment),xjo=l(),Bie=a("span"),kjo=o("AutoModelForAudioClassification"),ake=l(),dr=a("div"),f(hw.$$.fragment),Rjo=l(),jd=a("p"),Sjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),xie=a("code"),Pjo=o("from_pretrained()"),$jo=o("class method or the "),kie=a("code"),Ijo=o("from_config()"),jjo=o(`class
method.`),Djo=l(),pw=a("p"),Njo=o("This class cannot be instantiated directly using "),Rie=a("code"),qjo=o("__init__()"),Gjo=o(" (throws an error)."),Ojo=l(),tt=a("div"),f(_w.$$.fragment),Xjo=l(),Sie=a("p"),Vjo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),zjo=l(),Dd=a("p"),Wjo=o(`Note:
Loading a model from its configuration file does `),Pie=a("strong"),Qjo=o("not"),Hjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ie=a("code"),Ujo=o("from_pretrained()"),Jjo=o("to load the model weights."),Yjo=l(),Iie=a("p"),Kjo=o("Examples:"),Zjo=l(),f(uw.$$.fragment),eDo=l(),Je=a("div"),f(bw.$$.fragment),oDo=l(),jie=a("p"),rDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),tDo=l(),tn=a("p"),aDo=o("The model class to instantiate is selected based on the "),Die=a("code"),nDo=o("model_type"),sDo=o(` property of the config object (either
passed as an argument or loaded from `),Nie=a("code"),lDo=o("pretrained_model_name_or_path"),iDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=a("code"),dDo=o("pretrained_model_name_or_path"),cDo=o(":"),fDo=l(),xe=a("ul"),t5=a("li"),Gie=a("strong"),mDo=o("data2vec-audio"),gDo=o(" \u2014 "),CN=a("a"),hDo=o("Data2VecAudioForSequenceClassification"),pDo=o(" (Data2VecAudio model)"),_Do=l(),a5=a("li"),Oie=a("strong"),uDo=o("hubert"),bDo=o(" \u2014 "),MN=a("a"),vDo=o("HubertForSequenceClassification"),TDo=o(" (Hubert model)"),FDo=l(),n5=a("li"),Xie=a("strong"),CDo=o("sew"),MDo=o(" \u2014 "),EN=a("a"),EDo=o("SEWForSequenceClassification"),yDo=o(" (SEW model)"),wDo=l(),s5=a("li"),Vie=a("strong"),ADo=o("sew-d"),LDo=o(" \u2014 "),yN=a("a"),BDo=o("SEWDForSequenceClassification"),xDo=o(" (SEW-D model)"),kDo=l(),l5=a("li"),zie=a("strong"),RDo=o("unispeech"),SDo=o(" \u2014 "),wN=a("a"),PDo=o("UniSpeechForSequenceClassification"),$Do=o(" (UniSpeech model)"),IDo=l(),i5=a("li"),Wie=a("strong"),jDo=o("unispeech-sat"),DDo=o(" \u2014 "),AN=a("a"),NDo=o("UniSpeechSatForSequenceClassification"),qDo=o(" (UniSpeechSat model)"),GDo=l(),d5=a("li"),Qie=a("strong"),ODo=o("wav2vec2"),XDo=o(" \u2014 "),LN=a("a"),VDo=o("Wav2Vec2ForSequenceClassification"),zDo=o(" (Wav2Vec2 model)"),WDo=l(),c5=a("li"),Hie=a("strong"),QDo=o("wavlm"),HDo=o(" \u2014 "),BN=a("a"),UDo=o("WavLMForSequenceClassification"),JDo=o(" (WavLM model)"),YDo=l(),f5=a("p"),KDo=o("The model is set in evaluation mode by default using "),Uie=a("code"),ZDo=o("model.eval()"),eNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=a("code"),oNo=o("model.train()"),rNo=l(),Yie=a("p"),tNo=o("Examples:"),aNo=l(),f(vw.$$.fragment),nke=l(),Nd=a("h2"),m5=a("a"),Kie=a("span"),f(Tw.$$.fragment),nNo=l(),Zie=a("span"),sNo=o("AutoModelForAudioFrameClassification"),ske=l(),cr=a("div"),f(Fw.$$.fragment),lNo=l(),qd=a("p"),iNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ede=a("code"),dNo=o("from_pretrained()"),cNo=o("class method or the "),ode=a("code"),fNo=o("from_config()"),mNo=o(`class
method.`),gNo=l(),Cw=a("p"),hNo=o("This class cannot be instantiated directly using "),rde=a("code"),pNo=o("__init__()"),_No=o(" (throws an error)."),uNo=l(),at=a("div"),f(Mw.$$.fragment),bNo=l(),tde=a("p"),vNo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),TNo=l(),Gd=a("p"),FNo=o(`Note:
Loading a model from its configuration file does `),ade=a("strong"),CNo=o("not"),MNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=a("code"),ENo=o("from_pretrained()"),yNo=o("to load the model weights."),wNo=l(),sde=a("p"),ANo=o("Examples:"),LNo=l(),f(Ew.$$.fragment),BNo=l(),Ye=a("div"),f(yw.$$.fragment),xNo=l(),lde=a("p"),kNo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),RNo=l(),an=a("p"),SNo=o("The model class to instantiate is selected based on the "),ide=a("code"),PNo=o("model_type"),$No=o(` property of the config object (either
passed as an argument or loaded from `),dde=a("code"),INo=o("pretrained_model_name_or_path"),jNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=a("code"),DNo=o("pretrained_model_name_or_path"),NNo=o(":"),qNo=l(),nn=a("ul"),g5=a("li"),fde=a("strong"),GNo=o("data2vec-audio"),ONo=o(" \u2014 "),xN=a("a"),XNo=o("Data2VecAudioForAudioFrameClassification"),VNo=o(" (Data2VecAudio model)"),zNo=l(),h5=a("li"),mde=a("strong"),WNo=o("unispeech-sat"),QNo=o(" \u2014 "),kN=a("a"),HNo=o("UniSpeechSatForAudioFrameClassification"),UNo=o(" (UniSpeechSat model)"),JNo=l(),p5=a("li"),gde=a("strong"),YNo=o("wav2vec2"),KNo=o(" \u2014 "),RN=a("a"),ZNo=o("Wav2Vec2ForAudioFrameClassification"),eqo=o(" (Wav2Vec2 model)"),oqo=l(),_5=a("li"),hde=a("strong"),rqo=o("wavlm"),tqo=o(" \u2014 "),SN=a("a"),aqo=o("WavLMForAudioFrameClassification"),nqo=o(" (WavLM model)"),sqo=l(),u5=a("p"),lqo=o("The model is set in evaluation mode by default using "),pde=a("code"),iqo=o("model.eval()"),dqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=a("code"),cqo=o("model.train()"),fqo=l(),ude=a("p"),mqo=o("Examples:"),gqo=l(),f(ww.$$.fragment),lke=l(),Od=a("h2"),b5=a("a"),bde=a("span"),f(Aw.$$.fragment),hqo=l(),vde=a("span"),pqo=o("AutoModelForCTC"),ike=l(),fr=a("div"),f(Lw.$$.fragment),_qo=l(),Xd=a("p"),uqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Tde=a("code"),bqo=o("from_pretrained()"),vqo=o("class method or the "),Fde=a("code"),Tqo=o("from_config()"),Fqo=o(`class
method.`),Cqo=l(),Bw=a("p"),Mqo=o("This class cannot be instantiated directly using "),Cde=a("code"),Eqo=o("__init__()"),yqo=o(" (throws an error)."),wqo=l(),nt=a("div"),f(xw.$$.fragment),Aqo=l(),Mde=a("p"),Lqo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Bqo=l(),Vd=a("p"),xqo=o(`Note:
Loading a model from its configuration file does `),Ede=a("strong"),kqo=o("not"),Rqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yde=a("code"),Sqo=o("from_pretrained()"),Pqo=o("to load the model weights."),$qo=l(),wde=a("p"),Iqo=o("Examples:"),jqo=l(),f(kw.$$.fragment),Dqo=l(),Ke=a("div"),f(Rw.$$.fragment),Nqo=l(),Ade=a("p"),qqo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Gqo=l(),sn=a("p"),Oqo=o("The model class to instantiate is selected based on the "),Lde=a("code"),Xqo=o("model_type"),Vqo=o(` property of the config object (either
passed as an argument or loaded from `),Bde=a("code"),zqo=o("pretrained_model_name_or_path"),Wqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=a("code"),Qqo=o("pretrained_model_name_or_path"),Hqo=o(":"),Uqo=l(),ke=a("ul"),v5=a("li"),kde=a("strong"),Jqo=o("data2vec-audio"),Yqo=o(" \u2014 "),PN=a("a"),Kqo=o("Data2VecAudioForCTC"),Zqo=o(" (Data2VecAudio model)"),eGo=l(),T5=a("li"),Rde=a("strong"),oGo=o("hubert"),rGo=o(" \u2014 "),$N=a("a"),tGo=o("HubertForCTC"),aGo=o(" (Hubert model)"),nGo=l(),F5=a("li"),Sde=a("strong"),sGo=o("sew"),lGo=o(" \u2014 "),IN=a("a"),iGo=o("SEWForCTC"),dGo=o(" (SEW model)"),cGo=l(),C5=a("li"),Pde=a("strong"),fGo=o("sew-d"),mGo=o(" \u2014 "),jN=a("a"),gGo=o("SEWDForCTC"),hGo=o(" (SEW-D model)"),pGo=l(),M5=a("li"),$de=a("strong"),_Go=o("unispeech"),uGo=o(" \u2014 "),DN=a("a"),bGo=o("UniSpeechForCTC"),vGo=o(" (UniSpeech model)"),TGo=l(),E5=a("li"),Ide=a("strong"),FGo=o("unispeech-sat"),CGo=o(" \u2014 "),NN=a("a"),MGo=o("UniSpeechSatForCTC"),EGo=o(" (UniSpeechSat model)"),yGo=l(),y5=a("li"),jde=a("strong"),wGo=o("wav2vec2"),AGo=o(" \u2014 "),qN=a("a"),LGo=o("Wav2Vec2ForCTC"),BGo=o(" (Wav2Vec2 model)"),xGo=l(),w5=a("li"),Dde=a("strong"),kGo=o("wavlm"),RGo=o(" \u2014 "),GN=a("a"),SGo=o("WavLMForCTC"),PGo=o(" (WavLM model)"),$Go=l(),A5=a("p"),IGo=o("The model is set in evaluation mode by default using "),Nde=a("code"),jGo=o("model.eval()"),DGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=a("code"),NGo=o("model.train()"),qGo=l(),Gde=a("p"),GGo=o("Examples:"),OGo=l(),f(Sw.$$.fragment),dke=l(),zd=a("h2"),L5=a("a"),Ode=a("span"),f(Pw.$$.fragment),XGo=l(),Xde=a("span"),VGo=o("AutoModelForSpeechSeq2Seq"),cke=l(),mr=a("div"),f($w.$$.fragment),zGo=l(),Wd=a("p"),WGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Vde=a("code"),QGo=o("from_pretrained()"),HGo=o("class method or the "),zde=a("code"),UGo=o("from_config()"),JGo=o(`class
method.`),YGo=l(),Iw=a("p"),KGo=o("This class cannot be instantiated directly using "),Wde=a("code"),ZGo=o("__init__()"),eOo=o(" (throws an error)."),oOo=l(),st=a("div"),f(jw.$$.fragment),rOo=l(),Qde=a("p"),tOo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),aOo=l(),Qd=a("p"),nOo=o(`Note:
Loading a model from its configuration file does `),Hde=a("strong"),sOo=o("not"),lOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ude=a("code"),iOo=o("from_pretrained()"),dOo=o("to load the model weights."),cOo=l(),Jde=a("p"),fOo=o("Examples:"),mOo=l(),f(Dw.$$.fragment),gOo=l(),Ze=a("div"),f(Nw.$$.fragment),hOo=l(),Yde=a("p"),pOo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_Oo=l(),ln=a("p"),uOo=o("The model class to instantiate is selected based on the "),Kde=a("code"),bOo=o("model_type"),vOo=o(` property of the config object (either
passed as an argument or loaded from `),Zde=a("code"),TOo=o("pretrained_model_name_or_path"),FOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=a("code"),COo=o("pretrained_model_name_or_path"),MOo=o(":"),EOo=l(),qw=a("ul"),B5=a("li"),oce=a("strong"),yOo=o("speech-encoder-decoder"),wOo=o(" \u2014 "),ON=a("a"),AOo=o("SpeechEncoderDecoderModel"),LOo=o(" (Speech Encoder decoder model)"),BOo=l(),x5=a("li"),rce=a("strong"),xOo=o("speech_to_text"),kOo=o(" \u2014 "),XN=a("a"),ROo=o("Speech2TextForConditionalGeneration"),SOo=o(" (Speech2Text model)"),POo=l(),k5=a("p"),$Oo=o("The model is set in evaluation mode by default using "),tce=a("code"),IOo=o("model.eval()"),jOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=a("code"),DOo=o("model.train()"),NOo=l(),nce=a("p"),qOo=o("Examples:"),GOo=l(),f(Gw.$$.fragment),fke=l(),Hd=a("h2"),R5=a("a"),sce=a("span"),f(Ow.$$.fragment),OOo=l(),lce=a("span"),XOo=o("AutoModelForAudioXVector"),mke=l(),gr=a("div"),f(Xw.$$.fragment),VOo=l(),Ud=a("p"),zOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ice=a("code"),WOo=o("from_pretrained()"),QOo=o("class method or the "),dce=a("code"),HOo=o("from_config()"),UOo=o(`class
method.`),JOo=l(),Vw=a("p"),YOo=o("This class cannot be instantiated directly using "),cce=a("code"),KOo=o("__init__()"),ZOo=o(" (throws an error)."),eXo=l(),lt=a("div"),f(zw.$$.fragment),oXo=l(),fce=a("p"),rXo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),tXo=l(),Jd=a("p"),aXo=o(`Note:
Loading a model from its configuration file does `),mce=a("strong"),nXo=o("not"),sXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gce=a("code"),lXo=o("from_pretrained()"),iXo=o("to load the model weights."),dXo=l(),hce=a("p"),cXo=o("Examples:"),fXo=l(),f(Ww.$$.fragment),mXo=l(),eo=a("div"),f(Qw.$$.fragment),gXo=l(),pce=a("p"),hXo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),pXo=l(),dn=a("p"),_Xo=o("The model class to instantiate is selected based on the "),_ce=a("code"),uXo=o("model_type"),bXo=o(` property of the config object (either
passed as an argument or loaded from `),uce=a("code"),vXo=o("pretrained_model_name_or_path"),TXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=a("code"),FXo=o("pretrained_model_name_or_path"),CXo=o(":"),MXo=l(),cn=a("ul"),S5=a("li"),vce=a("strong"),EXo=o("data2vec-audio"),yXo=o(" \u2014 "),VN=a("a"),wXo=o("Data2VecAudioForXVector"),AXo=o(" (Data2VecAudio model)"),LXo=l(),P5=a("li"),Tce=a("strong"),BXo=o("unispeech-sat"),xXo=o(" \u2014 "),zN=a("a"),kXo=o("UniSpeechSatForXVector"),RXo=o(" (UniSpeechSat model)"),SXo=l(),$5=a("li"),Fce=a("strong"),PXo=o("wav2vec2"),$Xo=o(" \u2014 "),WN=a("a"),IXo=o("Wav2Vec2ForXVector"),jXo=o(" (Wav2Vec2 model)"),DXo=l(),I5=a("li"),Cce=a("strong"),NXo=o("wavlm"),qXo=o(" \u2014 "),QN=a("a"),GXo=o("WavLMForXVector"),OXo=o(" (WavLM model)"),XXo=l(),j5=a("p"),VXo=o("The model is set in evaluation mode by default using "),Mce=a("code"),zXo=o("model.eval()"),WXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=a("code"),QXo=o("model.train()"),HXo=l(),yce=a("p"),UXo=o("Examples:"),JXo=l(),f(Hw.$$.fragment),gke=l(),Yd=a("h2"),D5=a("a"),wce=a("span"),f(Uw.$$.fragment),YXo=l(),Ace=a("span"),KXo=o("AutoModelForMaskedImageModeling"),hke=l(),hr=a("div"),f(Jw.$$.fragment),ZXo=l(),Kd=a("p"),eVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Lce=a("code"),oVo=o("from_pretrained()"),rVo=o("class method or the "),Bce=a("code"),tVo=o("from_config()"),aVo=o(`class
method.`),nVo=l(),Yw=a("p"),sVo=o("This class cannot be instantiated directly using "),xce=a("code"),lVo=o("__init__()"),iVo=o(" (throws an error)."),dVo=l(),it=a("div"),f(Kw.$$.fragment),cVo=l(),kce=a("p"),fVo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),mVo=l(),Zd=a("p"),gVo=o(`Note:
Loading a model from its configuration file does `),Rce=a("strong"),hVo=o("not"),pVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sce=a("code"),_Vo=o("from_pretrained()"),uVo=o("to load the model weights."),bVo=l(),Pce=a("p"),vVo=o("Examples:"),TVo=l(),f(Zw.$$.fragment),FVo=l(),oo=a("div"),f(eA.$$.fragment),CVo=l(),$ce=a("p"),MVo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),EVo=l(),fn=a("p"),yVo=o("The model class to instantiate is selected based on the "),Ice=a("code"),wVo=o("model_type"),AVo=o(` property of the config object (either
passed as an argument or loaded from `),jce=a("code"),LVo=o("pretrained_model_name_or_path"),BVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=a("code"),xVo=o("pretrained_model_name_or_path"),kVo=o(":"),RVo=l(),ec=a("ul"),N5=a("li"),Nce=a("strong"),SVo=o("deit"),PVo=o(" \u2014 "),HN=a("a"),$Vo=o("DeiTForMaskedImageModeling"),IVo=o(" (DeiT model)"),jVo=l(),q5=a("li"),qce=a("strong"),DVo=o("swin"),NVo=o(" \u2014 "),UN=a("a"),qVo=o("SwinForMaskedImageModeling"),GVo=o(" (Swin model)"),OVo=l(),G5=a("li"),Gce=a("strong"),XVo=o("vit"),VVo=o(" \u2014 "),JN=a("a"),zVo=o("ViTForMaskedImageModeling"),WVo=o(" (ViT model)"),QVo=l(),O5=a("p"),HVo=o("The model is set in evaluation mode by default using "),Oce=a("code"),UVo=o("model.eval()"),JVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xce=a("code"),YVo=o("model.train()"),KVo=l(),Vce=a("p"),ZVo=o("Examples:"),ezo=l(),f(oA.$$.fragment),pke=l(),oc=a("h2"),X5=a("a"),zce=a("span"),f(rA.$$.fragment),ozo=l(),Wce=a("span"),rzo=o("AutoModelForObjectDetection"),_ke=l(),pr=a("div"),f(tA.$$.fragment),tzo=l(),rc=a("p"),azo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Qce=a("code"),nzo=o("from_pretrained()"),szo=o("class method or the "),Hce=a("code"),lzo=o("from_config()"),izo=o(`class
method.`),dzo=l(),aA=a("p"),czo=o("This class cannot be instantiated directly using "),Uce=a("code"),fzo=o("__init__()"),mzo=o(" (throws an error)."),gzo=l(),dt=a("div"),f(nA.$$.fragment),hzo=l(),Jce=a("p"),pzo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_zo=l(),tc=a("p"),uzo=o(`Note:
Loading a model from its configuration file does `),Yce=a("strong"),bzo=o("not"),vzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kce=a("code"),Tzo=o("from_pretrained()"),Fzo=o("to load the model weights."),Czo=l(),Zce=a("p"),Mzo=o("Examples:"),Ezo=l(),f(sA.$$.fragment),yzo=l(),ro=a("div"),f(lA.$$.fragment),wzo=l(),efe=a("p"),Azo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Lzo=l(),mn=a("p"),Bzo=o("The model class to instantiate is selected based on the "),ofe=a("code"),xzo=o("model_type"),kzo=o(` property of the config object (either
passed as an argument or loaded from `),rfe=a("code"),Rzo=o("pretrained_model_name_or_path"),Szo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=a("code"),Pzo=o("pretrained_model_name_or_path"),$zo=o(":"),Izo=l(),afe=a("ul"),V5=a("li"),nfe=a("strong"),jzo=o("detr"),Dzo=o(" \u2014 "),YN=a("a"),Nzo=o("DetrForObjectDetection"),qzo=o(" (DETR model)"),Gzo=l(),z5=a("p"),Ozo=o("The model is set in evaluation mode by default using "),sfe=a("code"),Xzo=o("model.eval()"),Vzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=a("code"),zzo=o("model.train()"),Wzo=l(),ife=a("p"),Qzo=o("Examples:"),Hzo=l(),f(iA.$$.fragment),uke=l(),ac=a("h2"),W5=a("a"),dfe=a("span"),f(dA.$$.fragment),Uzo=l(),cfe=a("span"),Jzo=o("AutoModelForImageSegmentation"),bke=l(),_r=a("div"),f(cA.$$.fragment),Yzo=l(),nc=a("p"),Kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ffe=a("code"),Zzo=o("from_pretrained()"),eWo=o("class method or the "),mfe=a("code"),oWo=o("from_config()"),rWo=o(`class
method.`),tWo=l(),fA=a("p"),aWo=o("This class cannot be instantiated directly using "),gfe=a("code"),nWo=o("__init__()"),sWo=o(" (throws an error)."),lWo=l(),ct=a("div"),f(mA.$$.fragment),iWo=l(),hfe=a("p"),dWo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),cWo=l(),sc=a("p"),fWo=o(`Note:
Loading a model from its configuration file does `),pfe=a("strong"),mWo=o("not"),gWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_fe=a("code"),hWo=o("from_pretrained()"),pWo=o("to load the model weights."),_Wo=l(),ufe=a("p"),uWo=o("Examples:"),bWo=l(),f(gA.$$.fragment),vWo=l(),to=a("div"),f(hA.$$.fragment),TWo=l(),bfe=a("p"),FWo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),CWo=l(),gn=a("p"),MWo=o("The model class to instantiate is selected based on the "),vfe=a("code"),EWo=o("model_type"),yWo=o(` property of the config object (either
passed as an argument or loaded from `),Tfe=a("code"),wWo=o("pretrained_model_name_or_path"),AWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=a("code"),LWo=o("pretrained_model_name_or_path"),BWo=o(":"),xWo=l(),Cfe=a("ul"),Q5=a("li"),Mfe=a("strong"),kWo=o("detr"),RWo=o(" \u2014 "),KN=a("a"),SWo=o("DetrForSegmentation"),PWo=o(" (DETR model)"),$Wo=l(),H5=a("p"),IWo=o("The model is set in evaluation mode by default using "),Efe=a("code"),jWo=o("model.eval()"),DWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=a("code"),NWo=o("model.train()"),qWo=l(),wfe=a("p"),GWo=o("Examples:"),OWo=l(),f(pA.$$.fragment),vke=l(),lc=a("h2"),U5=a("a"),Afe=a("span"),f(_A.$$.fragment),XWo=l(),Lfe=a("span"),VWo=o("AutoModelForSemanticSegmentation"),Tke=l(),ur=a("div"),f(uA.$$.fragment),zWo=l(),ic=a("p"),WWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Bfe=a("code"),QWo=o("from_pretrained()"),HWo=o("class method or the "),xfe=a("code"),UWo=o("from_config()"),JWo=o(`class
method.`),YWo=l(),bA=a("p"),KWo=o("This class cannot be instantiated directly using "),kfe=a("code"),ZWo=o("__init__()"),eQo=o(" (throws an error)."),oQo=l(),ft=a("div"),f(vA.$$.fragment),rQo=l(),Rfe=a("p"),tQo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),aQo=l(),dc=a("p"),nQo=o(`Note:
Loading a model from its configuration file does `),Sfe=a("strong"),sQo=o("not"),lQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pfe=a("code"),iQo=o("from_pretrained()"),dQo=o("to load the model weights."),cQo=l(),$fe=a("p"),fQo=o("Examples:"),mQo=l(),f(TA.$$.fragment),gQo=l(),ao=a("div"),f(FA.$$.fragment),hQo=l(),Ife=a("p"),pQo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_Qo=l(),hn=a("p"),uQo=o("The model class to instantiate is selected based on the "),jfe=a("code"),bQo=o("model_type"),vQo=o(` property of the config object (either
passed as an argument or loaded from `),Dfe=a("code"),TQo=o("pretrained_model_name_or_path"),FQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=a("code"),CQo=o("pretrained_model_name_or_path"),MQo=o(":"),EQo=l(),CA=a("ul"),J5=a("li"),qfe=a("strong"),yQo=o("beit"),wQo=o(" \u2014 "),ZN=a("a"),AQo=o("BeitForSemanticSegmentation"),LQo=o(" (BEiT model)"),BQo=l(),Y5=a("li"),Gfe=a("strong"),xQo=o("segformer"),kQo=o(" \u2014 "),eq=a("a"),RQo=o("SegformerForSemanticSegmentation"),SQo=o(" (SegFormer model)"),PQo=l(),K5=a("p"),$Qo=o("The model is set in evaluation mode by default using "),Ofe=a("code"),IQo=o("model.eval()"),jQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=a("code"),DQo=o("model.train()"),NQo=l(),Vfe=a("p"),qQo=o("Examples:"),GQo=l(),f(MA.$$.fragment),Fke=l(),cc=a("h2"),Z5=a("a"),zfe=a("span"),f(EA.$$.fragment),OQo=l(),Wfe=a("span"),XQo=o("AutoModelForInstanceSegmentation"),Cke=l(),br=a("div"),f(yA.$$.fragment),VQo=l(),fc=a("p"),zQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Qfe=a("code"),WQo=o("from_pretrained()"),QQo=o("class method or the "),Hfe=a("code"),HQo=o("from_config()"),UQo=o(`class
method.`),JQo=l(),wA=a("p"),YQo=o("This class cannot be instantiated directly using "),Ufe=a("code"),KQo=o("__init__()"),ZQo=o(" (throws an error)."),eHo=l(),mt=a("div"),f(AA.$$.fragment),oHo=l(),Jfe=a("p"),rHo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),tHo=l(),mc=a("p"),aHo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),nHo=o("not"),sHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kfe=a("code"),lHo=o("from_pretrained()"),iHo=o("to load the model weights."),dHo=l(),Zfe=a("p"),cHo=o("Examples:"),fHo=l(),f(LA.$$.fragment),mHo=l(),no=a("div"),f(BA.$$.fragment),gHo=l(),eme=a("p"),hHo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),pHo=l(),pn=a("p"),_Ho=o("The model class to instantiate is selected based on the "),ome=a("code"),uHo=o("model_type"),bHo=o(` property of the config object (either
passed as an argument or loaded from `),rme=a("code"),vHo=o("pretrained_model_name_or_path"),THo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=a("code"),FHo=o("pretrained_model_name_or_path"),CHo=o(":"),MHo=l(),ame=a("ul"),ev=a("li"),nme=a("strong"),EHo=o("maskformer"),yHo=o(" \u2014 "),oq=a("a"),wHo=o("MaskFormerForInstanceSegmentation"),AHo=o(" (MaskFormer model)"),LHo=l(),ov=a("p"),BHo=o("The model is set in evaluation mode by default using "),sme=a("code"),xHo=o("model.eval()"),kHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=a("code"),RHo=o("model.train()"),SHo=l(),ime=a("p"),PHo=o("Examples:"),$Ho=l(),f(xA.$$.fragment),Mke=l(),gc=a("h2"),rv=a("a"),dme=a("span"),f(kA.$$.fragment),IHo=l(),cme=a("span"),jHo=o("TFAutoModel"),Eke=l(),vr=a("div"),f(RA.$$.fragment),DHo=l(),hc=a("p"),NHo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fme=a("code"),qHo=o("from_pretrained()"),GHo=o("class method or the "),mme=a("code"),OHo=o("from_config()"),XHo=o(`class
method.`),VHo=l(),SA=a("p"),zHo=o("This class cannot be instantiated directly using "),gme=a("code"),WHo=o("__init__()"),QHo=o(" (throws an error)."),HHo=l(),gt=a("div"),f(PA.$$.fragment),UHo=l(),hme=a("p"),JHo=o("Instantiates one of the base model classes of the library from a configuration."),YHo=l(),pc=a("p"),KHo=o(`Note:
Loading a model from its configuration file does `),pme=a("strong"),ZHo=o("not"),eUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_me=a("code"),oUo=o("from_pretrained()"),rUo=o("to load the model weights."),tUo=l(),ume=a("p"),aUo=o("Examples:"),nUo=l(),f($A.$$.fragment),sUo=l(),ho=a("div"),f(IA.$$.fragment),lUo=l(),bme=a("p"),iUo=o("Instantiate one of the base model classes of the library from a pretrained model."),dUo=l(),_n=a("p"),cUo=o("The model class to instantiate is selected based on the "),vme=a("code"),fUo=o("model_type"),mUo=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),gUo=o("pretrained_model_name_or_path"),hUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=a("code"),pUo=o("pretrained_model_name_or_path"),_Uo=o(":"),uUo=l(),B=a("ul"),tv=a("li"),Cme=a("strong"),bUo=o("albert"),vUo=o(" \u2014 "),rq=a("a"),TUo=o("TFAlbertModel"),FUo=o(" (ALBERT model)"),CUo=l(),av=a("li"),Mme=a("strong"),MUo=o("bart"),EUo=o(" \u2014 "),tq=a("a"),yUo=o("TFBartModel"),wUo=o(" (BART model)"),AUo=l(),nv=a("li"),Eme=a("strong"),LUo=o("bert"),BUo=o(" \u2014 "),aq=a("a"),xUo=o("TFBertModel"),kUo=o(" (BERT model)"),RUo=l(),sv=a("li"),yme=a("strong"),SUo=o("blenderbot"),PUo=o(" \u2014 "),nq=a("a"),$Uo=o("TFBlenderbotModel"),IUo=o(" (Blenderbot model)"),jUo=l(),lv=a("li"),wme=a("strong"),DUo=o("blenderbot-small"),NUo=o(" \u2014 "),sq=a("a"),qUo=o("TFBlenderbotSmallModel"),GUo=o(" (BlenderbotSmall model)"),OUo=l(),iv=a("li"),Ame=a("strong"),XUo=o("camembert"),VUo=o(" \u2014 "),lq=a("a"),zUo=o("TFCamembertModel"),WUo=o(" (CamemBERT model)"),QUo=l(),dv=a("li"),Lme=a("strong"),HUo=o("clip"),UUo=o(" \u2014 "),iq=a("a"),JUo=o("TFCLIPModel"),YUo=o(" (CLIP model)"),KUo=l(),cv=a("li"),Bme=a("strong"),ZUo=o("convbert"),eJo=o(" \u2014 "),dq=a("a"),oJo=o("TFConvBertModel"),rJo=o(" (ConvBERT model)"),tJo=l(),fv=a("li"),xme=a("strong"),aJo=o("convnext"),nJo=o(" \u2014 "),cq=a("a"),sJo=o("TFConvNextModel"),lJo=o(" (ConvNext model)"),iJo=l(),mv=a("li"),kme=a("strong"),dJo=o("ctrl"),cJo=o(" \u2014 "),fq=a("a"),fJo=o("TFCTRLModel"),mJo=o(" (CTRL model)"),gJo=l(),gv=a("li"),Rme=a("strong"),hJo=o("deberta"),pJo=o(" \u2014 "),mq=a("a"),_Jo=o("TFDebertaModel"),uJo=o(" (DeBERTa model)"),bJo=l(),hv=a("li"),Sme=a("strong"),vJo=o("deberta-v2"),TJo=o(" \u2014 "),gq=a("a"),FJo=o("TFDebertaV2Model"),CJo=o(" (DeBERTa-v2 model)"),MJo=l(),pv=a("li"),Pme=a("strong"),EJo=o("distilbert"),yJo=o(" \u2014 "),hq=a("a"),wJo=o("TFDistilBertModel"),AJo=o(" (DistilBERT model)"),LJo=l(),_v=a("li"),$me=a("strong"),BJo=o("dpr"),xJo=o(" \u2014 "),pq=a("a"),kJo=o("TFDPRQuestionEncoder"),RJo=o(" (DPR model)"),SJo=l(),uv=a("li"),Ime=a("strong"),PJo=o("electra"),$Jo=o(" \u2014 "),_q=a("a"),IJo=o("TFElectraModel"),jJo=o(" (ELECTRA model)"),DJo=l(),bv=a("li"),jme=a("strong"),NJo=o("flaubert"),qJo=o(" \u2014 "),uq=a("a"),GJo=o("TFFlaubertModel"),OJo=o(" (FlauBERT model)"),XJo=l(),Gs=a("li"),Dme=a("strong"),VJo=o("funnel"),zJo=o(" \u2014 "),bq=a("a"),WJo=o("TFFunnelModel"),QJo=o(" or "),vq=a("a"),HJo=o("TFFunnelBaseModel"),UJo=o(" (Funnel Transformer model)"),JJo=l(),vv=a("li"),Nme=a("strong"),YJo=o("gpt2"),KJo=o(" \u2014 "),Tq=a("a"),ZJo=o("TFGPT2Model"),eYo=o(" (OpenAI GPT-2 model)"),oYo=l(),Tv=a("li"),qme=a("strong"),rYo=o("gptj"),tYo=o(" \u2014 "),Fq=a("a"),aYo=o("TFGPTJModel"),nYo=o(" (GPT-J model)"),sYo=l(),Fv=a("li"),Gme=a("strong"),lYo=o("hubert"),iYo=o(" \u2014 "),Cq=a("a"),dYo=o("TFHubertModel"),cYo=o(" (Hubert model)"),fYo=l(),Cv=a("li"),Ome=a("strong"),mYo=o("layoutlm"),gYo=o(" \u2014 "),Mq=a("a"),hYo=o("TFLayoutLMModel"),pYo=o(" (LayoutLM model)"),_Yo=l(),Mv=a("li"),Xme=a("strong"),uYo=o("led"),bYo=o(" \u2014 "),Eq=a("a"),vYo=o("TFLEDModel"),TYo=o(" (LED model)"),FYo=l(),Ev=a("li"),Vme=a("strong"),CYo=o("longformer"),MYo=o(" \u2014 "),yq=a("a"),EYo=o("TFLongformerModel"),yYo=o(" (Longformer model)"),wYo=l(),yv=a("li"),zme=a("strong"),AYo=o("lxmert"),LYo=o(" \u2014 "),wq=a("a"),BYo=o("TFLxmertModel"),xYo=o(" (LXMERT model)"),kYo=l(),wv=a("li"),Wme=a("strong"),RYo=o("marian"),SYo=o(" \u2014 "),Aq=a("a"),PYo=o("TFMarianModel"),$Yo=o(" (Marian model)"),IYo=l(),Av=a("li"),Qme=a("strong"),jYo=o("mbart"),DYo=o(" \u2014 "),Lq=a("a"),NYo=o("TFMBartModel"),qYo=o(" (mBART model)"),GYo=l(),Lv=a("li"),Hme=a("strong"),OYo=o("mobilebert"),XYo=o(" \u2014 "),Bq=a("a"),VYo=o("TFMobileBertModel"),zYo=o(" (MobileBERT model)"),WYo=l(),Bv=a("li"),Ume=a("strong"),QYo=o("mpnet"),HYo=o(" \u2014 "),xq=a("a"),UYo=o("TFMPNetModel"),JYo=o(" (MPNet model)"),YYo=l(),xv=a("li"),Jme=a("strong"),KYo=o("mt5"),ZYo=o(" \u2014 "),kq=a("a"),eKo=o("TFMT5Model"),oKo=o(" (mT5 model)"),rKo=l(),kv=a("li"),Yme=a("strong"),tKo=o("openai-gpt"),aKo=o(" \u2014 "),Rq=a("a"),nKo=o("TFOpenAIGPTModel"),sKo=o(" (OpenAI GPT model)"),lKo=l(),Rv=a("li"),Kme=a("strong"),iKo=o("pegasus"),dKo=o(" \u2014 "),Sq=a("a"),cKo=o("TFPegasusModel"),fKo=o(" (Pegasus model)"),mKo=l(),Sv=a("li"),Zme=a("strong"),gKo=o("rembert"),hKo=o(" \u2014 "),Pq=a("a"),pKo=o("TFRemBertModel"),_Ko=o(" (RemBERT model)"),uKo=l(),Pv=a("li"),ege=a("strong"),bKo=o("roberta"),vKo=o(" \u2014 "),$q=a("a"),TKo=o("TFRobertaModel"),FKo=o(" (RoBERTa model)"),CKo=l(),$v=a("li"),oge=a("strong"),MKo=o("roformer"),EKo=o(" \u2014 "),Iq=a("a"),yKo=o("TFRoFormerModel"),wKo=o(" (RoFormer model)"),AKo=l(),Iv=a("li"),rge=a("strong"),LKo=o("speech_to_text"),BKo=o(" \u2014 "),jq=a("a"),xKo=o("TFSpeech2TextModel"),kKo=o(" (Speech2Text model)"),RKo=l(),jv=a("li"),tge=a("strong"),SKo=o("t5"),PKo=o(" \u2014 "),Dq=a("a"),$Ko=o("TFT5Model"),IKo=o(" (T5 model)"),jKo=l(),Dv=a("li"),age=a("strong"),DKo=o("tapas"),NKo=o(" \u2014 "),Nq=a("a"),qKo=o("TFTapasModel"),GKo=o(" (TAPAS model)"),OKo=l(),Nv=a("li"),nge=a("strong"),XKo=o("transfo-xl"),VKo=o(" \u2014 "),qq=a("a"),zKo=o("TFTransfoXLModel"),WKo=o(" (Transformer-XL model)"),QKo=l(),qv=a("li"),sge=a("strong"),HKo=o("vit"),UKo=o(" \u2014 "),Gq=a("a"),JKo=o("TFViTModel"),YKo=o(" (ViT model)"),KKo=l(),Gv=a("li"),lge=a("strong"),ZKo=o("wav2vec2"),eZo=o(" \u2014 "),Oq=a("a"),oZo=o("TFWav2Vec2Model"),rZo=o(" (Wav2Vec2 model)"),tZo=l(),Ov=a("li"),ige=a("strong"),aZo=o("xlm"),nZo=o(" \u2014 "),Xq=a("a"),sZo=o("TFXLMModel"),lZo=o(" (XLM model)"),iZo=l(),Xv=a("li"),dge=a("strong"),dZo=o("xlm-roberta"),cZo=o(" \u2014 "),Vq=a("a"),fZo=o("TFXLMRobertaModel"),mZo=o(" (XLM-RoBERTa model)"),gZo=l(),Vv=a("li"),cge=a("strong"),hZo=o("xlnet"),pZo=o(" \u2014 "),zq=a("a"),_Zo=o("TFXLNetModel"),uZo=o(" (XLNet model)"),bZo=l(),fge=a("p"),vZo=o("Examples:"),TZo=l(),f(jA.$$.fragment),yke=l(),_c=a("h2"),zv=a("a"),mge=a("span"),f(DA.$$.fragment),FZo=l(),gge=a("span"),CZo=o("TFAutoModelForPreTraining"),wke=l(),Tr=a("div"),f(NA.$$.fragment),MZo=l(),uc=a("p"),EZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hge=a("code"),yZo=o("from_pretrained()"),wZo=o("class method or the "),pge=a("code"),AZo=o("from_config()"),LZo=o(`class
method.`),BZo=l(),qA=a("p"),xZo=o("This class cannot be instantiated directly using "),_ge=a("code"),kZo=o("__init__()"),RZo=o(" (throws an error)."),SZo=l(),ht=a("div"),f(GA.$$.fragment),PZo=l(),uge=a("p"),$Zo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),IZo=l(),bc=a("p"),jZo=o(`Note:
Loading a model from its configuration file does `),bge=a("strong"),DZo=o("not"),NZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vge=a("code"),qZo=o("from_pretrained()"),GZo=o("to load the model weights."),OZo=l(),Tge=a("p"),XZo=o("Examples:"),VZo=l(),f(OA.$$.fragment),zZo=l(),po=a("div"),f(XA.$$.fragment),WZo=l(),Fge=a("p"),QZo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),HZo=l(),un=a("p"),UZo=o("The model class to instantiate is selected based on the "),Cge=a("code"),JZo=o("model_type"),YZo=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),eer=o("pretrained_model_name_or_path"),oer=o(":"),rer=l(),H=a("ul"),Wv=a("li"),yge=a("strong"),ter=o("albert"),aer=o(" \u2014 "),Wq=a("a"),ner=o("TFAlbertForPreTraining"),ser=o(" (ALBERT model)"),ler=l(),Qv=a("li"),wge=a("strong"),ier=o("bart"),der=o(" \u2014 "),Qq=a("a"),cer=o("TFBartForConditionalGeneration"),fer=o(" (BART model)"),mer=l(),Hv=a("li"),Age=a("strong"),ger=o("bert"),her=o(" \u2014 "),Hq=a("a"),per=o("TFBertForPreTraining"),_er=o(" (BERT model)"),uer=l(),Uv=a("li"),Lge=a("strong"),ber=o("camembert"),ver=o(" \u2014 "),Uq=a("a"),Ter=o("TFCamembertForMaskedLM"),Fer=o(" (CamemBERT model)"),Cer=l(),Jv=a("li"),Bge=a("strong"),Mer=o("ctrl"),Eer=o(" \u2014 "),Jq=a("a"),yer=o("TFCTRLLMHeadModel"),wer=o(" (CTRL model)"),Aer=l(),Yv=a("li"),xge=a("strong"),Ler=o("distilbert"),Ber=o(" \u2014 "),Yq=a("a"),xer=o("TFDistilBertForMaskedLM"),ker=o(" (DistilBERT model)"),Rer=l(),Kv=a("li"),kge=a("strong"),Ser=o("electra"),Per=o(" \u2014 "),Kq=a("a"),$er=o("TFElectraForPreTraining"),Ier=o(" (ELECTRA model)"),jer=l(),Zv=a("li"),Rge=a("strong"),Der=o("flaubert"),Ner=o(" \u2014 "),Zq=a("a"),qer=o("TFFlaubertWithLMHeadModel"),Ger=o(" (FlauBERT model)"),Oer=l(),e6=a("li"),Sge=a("strong"),Xer=o("funnel"),Ver=o(" \u2014 "),eG=a("a"),zer=o("TFFunnelForPreTraining"),Wer=o(" (Funnel Transformer model)"),Qer=l(),o6=a("li"),Pge=a("strong"),Her=o("gpt2"),Uer=o(" \u2014 "),oG=a("a"),Jer=o("TFGPT2LMHeadModel"),Yer=o(" (OpenAI GPT-2 model)"),Ker=l(),r6=a("li"),$ge=a("strong"),Zer=o("layoutlm"),eor=o(" \u2014 "),rG=a("a"),oor=o("TFLayoutLMForMaskedLM"),ror=o(" (LayoutLM model)"),tor=l(),t6=a("li"),Ige=a("strong"),aor=o("lxmert"),nor=o(" \u2014 "),tG=a("a"),sor=o("TFLxmertForPreTraining"),lor=o(" (LXMERT model)"),ior=l(),a6=a("li"),jge=a("strong"),dor=o("mobilebert"),cor=o(" \u2014 "),aG=a("a"),mor=o("TFMobileBertForPreTraining"),gor=o(" (MobileBERT model)"),hor=l(),n6=a("li"),Dge=a("strong"),por=o("mpnet"),_or=o(" \u2014 "),nG=a("a"),uor=o("TFMPNetForMaskedLM"),bor=o(" (MPNet model)"),vor=l(),s6=a("li"),Nge=a("strong"),Tor=o("openai-gpt"),For=o(" \u2014 "),sG=a("a"),Cor=o("TFOpenAIGPTLMHeadModel"),Mor=o(" (OpenAI GPT model)"),Eor=l(),l6=a("li"),qge=a("strong"),yor=o("roberta"),wor=o(" \u2014 "),lG=a("a"),Aor=o("TFRobertaForMaskedLM"),Lor=o(" (RoBERTa model)"),Bor=l(),i6=a("li"),Gge=a("strong"),xor=o("t5"),kor=o(" \u2014 "),iG=a("a"),Ror=o("TFT5ForConditionalGeneration"),Sor=o(" (T5 model)"),Por=l(),d6=a("li"),Oge=a("strong"),$or=o("tapas"),Ior=o(" \u2014 "),dG=a("a"),jor=o("TFTapasForMaskedLM"),Dor=o(" (TAPAS model)"),Nor=l(),c6=a("li"),Xge=a("strong"),qor=o("transfo-xl"),Gor=o(" \u2014 "),cG=a("a"),Oor=o("TFTransfoXLLMHeadModel"),Xor=o(" (Transformer-XL model)"),Vor=l(),f6=a("li"),Vge=a("strong"),zor=o("xlm"),Wor=o(" \u2014 "),fG=a("a"),Qor=o("TFXLMWithLMHeadModel"),Hor=o(" (XLM model)"),Uor=l(),m6=a("li"),zge=a("strong"),Jor=o("xlm-roberta"),Yor=o(" \u2014 "),mG=a("a"),Kor=o("TFXLMRobertaForMaskedLM"),Zor=o(" (XLM-RoBERTa model)"),err=l(),g6=a("li"),Wge=a("strong"),orr=o("xlnet"),rrr=o(" \u2014 "),gG=a("a"),trr=o("TFXLNetLMHeadModel"),arr=o(" (XLNet model)"),nrr=l(),Qge=a("p"),srr=o("Examples:"),lrr=l(),f(VA.$$.fragment),Ake=l(),vc=a("h2"),h6=a("a"),Hge=a("span"),f(zA.$$.fragment),irr=l(),Uge=a("span"),drr=o("TFAutoModelForCausalLM"),Lke=l(),Fr=a("div"),f(WA.$$.fragment),crr=l(),Tc=a("p"),frr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Jge=a("code"),mrr=o("from_pretrained()"),grr=o("class method or the "),Yge=a("code"),hrr=o("from_config()"),prr=o(`class
method.`),_rr=l(),QA=a("p"),urr=o("This class cannot be instantiated directly using "),Kge=a("code"),brr=o("__init__()"),vrr=o(" (throws an error)."),Trr=l(),pt=a("div"),f(HA.$$.fragment),Frr=l(),Zge=a("p"),Crr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mrr=l(),Fc=a("p"),Err=o(`Note:
Loading a model from its configuration file does `),ehe=a("strong"),yrr=o("not"),wrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ohe=a("code"),Arr=o("from_pretrained()"),Lrr=o("to load the model weights."),Brr=l(),rhe=a("p"),xrr=o("Examples:"),krr=l(),f(UA.$$.fragment),Rrr=l(),_o=a("div"),f(JA.$$.fragment),Srr=l(),the=a("p"),Prr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$rr=l(),bn=a("p"),Irr=o("The model class to instantiate is selected based on the "),ahe=a("code"),jrr=o("model_type"),Drr=o(` property of the config object (either
passed as an argument or loaded from `),nhe=a("code"),Nrr=o("pretrained_model_name_or_path"),qrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=a("code"),Grr=o("pretrained_model_name_or_path"),Orr=o(":"),Xrr=l(),me=a("ul"),p6=a("li"),lhe=a("strong"),Vrr=o("bert"),zrr=o(" \u2014 "),hG=a("a"),Wrr=o("TFBertLMHeadModel"),Qrr=o(" (BERT model)"),Hrr=l(),_6=a("li"),ihe=a("strong"),Urr=o("ctrl"),Jrr=o(" \u2014 "),pG=a("a"),Yrr=o("TFCTRLLMHeadModel"),Krr=o(" (CTRL model)"),Zrr=l(),u6=a("li"),dhe=a("strong"),etr=o("gpt2"),otr=o(" \u2014 "),_G=a("a"),rtr=o("TFGPT2LMHeadModel"),ttr=o(" (OpenAI GPT-2 model)"),atr=l(),b6=a("li"),che=a("strong"),ntr=o("gptj"),str=o(" \u2014 "),uG=a("a"),ltr=o("TFGPTJForCausalLM"),itr=o(" (GPT-J model)"),dtr=l(),v6=a("li"),fhe=a("strong"),ctr=o("openai-gpt"),ftr=o(" \u2014 "),bG=a("a"),mtr=o("TFOpenAIGPTLMHeadModel"),gtr=o(" (OpenAI GPT model)"),htr=l(),T6=a("li"),mhe=a("strong"),ptr=o("rembert"),_tr=o(" \u2014 "),vG=a("a"),utr=o("TFRemBertForCausalLM"),btr=o(" (RemBERT model)"),vtr=l(),F6=a("li"),ghe=a("strong"),Ttr=o("roberta"),Ftr=o(" \u2014 "),TG=a("a"),Ctr=o("TFRobertaForCausalLM"),Mtr=o(" (RoBERTa model)"),Etr=l(),C6=a("li"),hhe=a("strong"),ytr=o("roformer"),wtr=o(" \u2014 "),FG=a("a"),Atr=o("TFRoFormerForCausalLM"),Ltr=o(" (RoFormer model)"),Btr=l(),M6=a("li"),phe=a("strong"),xtr=o("transfo-xl"),ktr=o(" \u2014 "),CG=a("a"),Rtr=o("TFTransfoXLLMHeadModel"),Str=o(" (Transformer-XL model)"),Ptr=l(),E6=a("li"),_he=a("strong"),$tr=o("xlm"),Itr=o(" \u2014 "),MG=a("a"),jtr=o("TFXLMWithLMHeadModel"),Dtr=o(" (XLM model)"),Ntr=l(),y6=a("li"),uhe=a("strong"),qtr=o("xlnet"),Gtr=o(" \u2014 "),EG=a("a"),Otr=o("TFXLNetLMHeadModel"),Xtr=o(" (XLNet model)"),Vtr=l(),bhe=a("p"),ztr=o("Examples:"),Wtr=l(),f(YA.$$.fragment),Bke=l(),Cc=a("h2"),w6=a("a"),vhe=a("span"),f(KA.$$.fragment),Qtr=l(),The=a("span"),Htr=o("TFAutoModelForImageClassification"),xke=l(),Cr=a("div"),f(ZA.$$.fragment),Utr=l(),Mc=a("p"),Jtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Fhe=a("code"),Ytr=o("from_pretrained()"),Ktr=o("class method or the "),Che=a("code"),Ztr=o("from_config()"),ear=o(`class
method.`),oar=l(),e0=a("p"),rar=o("This class cannot be instantiated directly using "),Mhe=a("code"),tar=o("__init__()"),aar=o(" (throws an error)."),nar=l(),_t=a("div"),f(o0.$$.fragment),sar=l(),Ehe=a("p"),lar=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iar=l(),Ec=a("p"),dar=o(`Note:
Loading a model from its configuration file does `),yhe=a("strong"),car=o("not"),far=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),whe=a("code"),mar=o("from_pretrained()"),gar=o("to load the model weights."),har=l(),Ahe=a("p"),par=o("Examples:"),_ar=l(),f(r0.$$.fragment),uar=l(),uo=a("div"),f(t0.$$.fragment),bar=l(),Lhe=a("p"),Tar=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Far=l(),vn=a("p"),Car=o("The model class to instantiate is selected based on the "),Bhe=a("code"),Mar=o("model_type"),Ear=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),yar=o("pretrained_model_name_or_path"),war=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=a("code"),Aar=o("pretrained_model_name_or_path"),Lar=o(":"),Bar=l(),a0=a("ul"),A6=a("li"),Rhe=a("strong"),xar=o("convnext"),kar=o(" \u2014 "),yG=a("a"),Rar=o("TFConvNextForImageClassification"),Sar=o(" (ConvNext model)"),Par=l(),L6=a("li"),She=a("strong"),$ar=o("vit"),Iar=o(" \u2014 "),wG=a("a"),jar=o("TFViTForImageClassification"),Dar=o(" (ViT model)"),Nar=l(),Phe=a("p"),qar=o("Examples:"),Gar=l(),f(n0.$$.fragment),kke=l(),yc=a("h2"),B6=a("a"),$he=a("span"),f(s0.$$.fragment),Oar=l(),Ihe=a("span"),Xar=o("TFAutoModelForMaskedLM"),Rke=l(),Mr=a("div"),f(l0.$$.fragment),Var=l(),wc=a("p"),zar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jhe=a("code"),War=o("from_pretrained()"),Qar=o("class method or the "),Dhe=a("code"),Har=o("from_config()"),Uar=o(`class
method.`),Jar=l(),i0=a("p"),Yar=o("This class cannot be instantiated directly using "),Nhe=a("code"),Kar=o("__init__()"),Zar=o(" (throws an error)."),enr=l(),ut=a("div"),f(d0.$$.fragment),onr=l(),qhe=a("p"),rnr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tnr=l(),Ac=a("p"),anr=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),nnr=o("not"),snr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ohe=a("code"),lnr=o("from_pretrained()"),inr=o("to load the model weights."),dnr=l(),Xhe=a("p"),cnr=o("Examples:"),fnr=l(),f(c0.$$.fragment),mnr=l(),bo=a("div"),f(f0.$$.fragment),gnr=l(),Vhe=a("p"),hnr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pnr=l(),Tn=a("p"),_nr=o("The model class to instantiate is selected based on the "),zhe=a("code"),unr=o("model_type"),bnr=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),vnr=o("pretrained_model_name_or_path"),Tnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),Fnr=o("pretrained_model_name_or_path"),Cnr=o(":"),Mnr=l(),Y=a("ul"),x6=a("li"),Hhe=a("strong"),Enr=o("albert"),ynr=o(" \u2014 "),AG=a("a"),wnr=o("TFAlbertForMaskedLM"),Anr=o(" (ALBERT model)"),Lnr=l(),k6=a("li"),Uhe=a("strong"),Bnr=o("bert"),xnr=o(" \u2014 "),LG=a("a"),knr=o("TFBertForMaskedLM"),Rnr=o(" (BERT model)"),Snr=l(),R6=a("li"),Jhe=a("strong"),Pnr=o("camembert"),$nr=o(" \u2014 "),BG=a("a"),Inr=o("TFCamembertForMaskedLM"),jnr=o(" (CamemBERT model)"),Dnr=l(),S6=a("li"),Yhe=a("strong"),Nnr=o("convbert"),qnr=o(" \u2014 "),xG=a("a"),Gnr=o("TFConvBertForMaskedLM"),Onr=o(" (ConvBERT model)"),Xnr=l(),P6=a("li"),Khe=a("strong"),Vnr=o("deberta"),znr=o(" \u2014 "),kG=a("a"),Wnr=o("TFDebertaForMaskedLM"),Qnr=o(" (DeBERTa model)"),Hnr=l(),$6=a("li"),Zhe=a("strong"),Unr=o("deberta-v2"),Jnr=o(" \u2014 "),RG=a("a"),Ynr=o("TFDebertaV2ForMaskedLM"),Knr=o(" (DeBERTa-v2 model)"),Znr=l(),I6=a("li"),epe=a("strong"),esr=o("distilbert"),osr=o(" \u2014 "),SG=a("a"),rsr=o("TFDistilBertForMaskedLM"),tsr=o(" (DistilBERT model)"),asr=l(),j6=a("li"),ope=a("strong"),nsr=o("electra"),ssr=o(" \u2014 "),PG=a("a"),lsr=o("TFElectraForMaskedLM"),isr=o(" (ELECTRA model)"),dsr=l(),D6=a("li"),rpe=a("strong"),csr=o("flaubert"),fsr=o(" \u2014 "),$G=a("a"),msr=o("TFFlaubertWithLMHeadModel"),gsr=o(" (FlauBERT model)"),hsr=l(),N6=a("li"),tpe=a("strong"),psr=o("funnel"),_sr=o(" \u2014 "),IG=a("a"),usr=o("TFFunnelForMaskedLM"),bsr=o(" (Funnel Transformer model)"),vsr=l(),q6=a("li"),ape=a("strong"),Tsr=o("layoutlm"),Fsr=o(" \u2014 "),jG=a("a"),Csr=o("TFLayoutLMForMaskedLM"),Msr=o(" (LayoutLM model)"),Esr=l(),G6=a("li"),npe=a("strong"),ysr=o("longformer"),wsr=o(" \u2014 "),DG=a("a"),Asr=o("TFLongformerForMaskedLM"),Lsr=o(" (Longformer model)"),Bsr=l(),O6=a("li"),spe=a("strong"),xsr=o("mobilebert"),ksr=o(" \u2014 "),NG=a("a"),Rsr=o("TFMobileBertForMaskedLM"),Ssr=o(" (MobileBERT model)"),Psr=l(),X6=a("li"),lpe=a("strong"),$sr=o("mpnet"),Isr=o(" \u2014 "),qG=a("a"),jsr=o("TFMPNetForMaskedLM"),Dsr=o(" (MPNet model)"),Nsr=l(),V6=a("li"),ipe=a("strong"),qsr=o("rembert"),Gsr=o(" \u2014 "),GG=a("a"),Osr=o("TFRemBertForMaskedLM"),Xsr=o(" (RemBERT model)"),Vsr=l(),z6=a("li"),dpe=a("strong"),zsr=o("roberta"),Wsr=o(" \u2014 "),OG=a("a"),Qsr=o("TFRobertaForMaskedLM"),Hsr=o(" (RoBERTa model)"),Usr=l(),W6=a("li"),cpe=a("strong"),Jsr=o("roformer"),Ysr=o(" \u2014 "),XG=a("a"),Ksr=o("TFRoFormerForMaskedLM"),Zsr=o(" (RoFormer model)"),elr=l(),Q6=a("li"),fpe=a("strong"),olr=o("tapas"),rlr=o(" \u2014 "),VG=a("a"),tlr=o("TFTapasForMaskedLM"),alr=o(" (TAPAS model)"),nlr=l(),H6=a("li"),mpe=a("strong"),slr=o("xlm"),llr=o(" \u2014 "),zG=a("a"),ilr=o("TFXLMWithLMHeadModel"),dlr=o(" (XLM model)"),clr=l(),U6=a("li"),gpe=a("strong"),flr=o("xlm-roberta"),mlr=o(" \u2014 "),WG=a("a"),glr=o("TFXLMRobertaForMaskedLM"),hlr=o(" (XLM-RoBERTa model)"),plr=l(),hpe=a("p"),_lr=o("Examples:"),ulr=l(),f(m0.$$.fragment),Ske=l(),Lc=a("h2"),J6=a("a"),ppe=a("span"),f(g0.$$.fragment),blr=l(),_pe=a("span"),vlr=o("TFAutoModelForSeq2SeqLM"),Pke=l(),Er=a("div"),f(h0.$$.fragment),Tlr=l(),Bc=a("p"),Flr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),upe=a("code"),Clr=o("from_pretrained()"),Mlr=o("class method or the "),bpe=a("code"),Elr=o("from_config()"),ylr=o(`class
method.`),wlr=l(),p0=a("p"),Alr=o("This class cannot be instantiated directly using "),vpe=a("code"),Llr=o("__init__()"),Blr=o(" (throws an error)."),xlr=l(),bt=a("div"),f(_0.$$.fragment),klr=l(),Tpe=a("p"),Rlr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Slr=l(),xc=a("p"),Plr=o(`Note:
Loading a model from its configuration file does `),Fpe=a("strong"),$lr=o("not"),Ilr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cpe=a("code"),jlr=o("from_pretrained()"),Dlr=o("to load the model weights."),Nlr=l(),Mpe=a("p"),qlr=o("Examples:"),Glr=l(),f(u0.$$.fragment),Olr=l(),vo=a("div"),f(b0.$$.fragment),Xlr=l(),Epe=a("p"),Vlr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zlr=l(),Fn=a("p"),Wlr=o("The model class to instantiate is selected based on the "),ype=a("code"),Qlr=o("model_type"),Hlr=o(` property of the config object (either
passed as an argument or loaded from `),wpe=a("code"),Ulr=o("pretrained_model_name_or_path"),Jlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=a("code"),Ylr=o("pretrained_model_name_or_path"),Klr=o(":"),Zlr=l(),_e=a("ul"),Y6=a("li"),Lpe=a("strong"),eir=o("bart"),oir=o(" \u2014 "),QG=a("a"),rir=o("TFBartForConditionalGeneration"),tir=o(" (BART model)"),air=l(),K6=a("li"),Bpe=a("strong"),nir=o("blenderbot"),sir=o(" \u2014 "),HG=a("a"),lir=o("TFBlenderbotForConditionalGeneration"),iir=o(" (Blenderbot model)"),dir=l(),Z6=a("li"),xpe=a("strong"),cir=o("blenderbot-small"),fir=o(" \u2014 "),UG=a("a"),mir=o("TFBlenderbotSmallForConditionalGeneration"),gir=o(" (BlenderbotSmall model)"),hir=l(),eT=a("li"),kpe=a("strong"),pir=o("encoder-decoder"),_ir=o(" \u2014 "),JG=a("a"),uir=o("TFEncoderDecoderModel"),bir=o(" (Encoder decoder model)"),vir=l(),oT=a("li"),Rpe=a("strong"),Tir=o("led"),Fir=o(" \u2014 "),YG=a("a"),Cir=o("TFLEDForConditionalGeneration"),Mir=o(" (LED model)"),Eir=l(),rT=a("li"),Spe=a("strong"),yir=o("marian"),wir=o(" \u2014 "),KG=a("a"),Air=o("TFMarianMTModel"),Lir=o(" (Marian model)"),Bir=l(),tT=a("li"),Ppe=a("strong"),xir=o("mbart"),kir=o(" \u2014 "),ZG=a("a"),Rir=o("TFMBartForConditionalGeneration"),Sir=o(" (mBART model)"),Pir=l(),aT=a("li"),$pe=a("strong"),$ir=o("mt5"),Iir=o(" \u2014 "),eO=a("a"),jir=o("TFMT5ForConditionalGeneration"),Dir=o(" (mT5 model)"),Nir=l(),nT=a("li"),Ipe=a("strong"),qir=o("pegasus"),Gir=o(" \u2014 "),oO=a("a"),Oir=o("TFPegasusForConditionalGeneration"),Xir=o(" (Pegasus model)"),Vir=l(),sT=a("li"),jpe=a("strong"),zir=o("t5"),Wir=o(" \u2014 "),rO=a("a"),Qir=o("TFT5ForConditionalGeneration"),Hir=o(" (T5 model)"),Uir=l(),Dpe=a("p"),Jir=o("Examples:"),Yir=l(),f(v0.$$.fragment),$ke=l(),kc=a("h2"),lT=a("a"),Npe=a("span"),f(T0.$$.fragment),Kir=l(),qpe=a("span"),Zir=o("TFAutoModelForSequenceClassification"),Ike=l(),yr=a("div"),f(F0.$$.fragment),edr=l(),Rc=a("p"),odr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Gpe=a("code"),rdr=o("from_pretrained()"),tdr=o("class method or the "),Ope=a("code"),adr=o("from_config()"),ndr=o(`class
method.`),sdr=l(),C0=a("p"),ldr=o("This class cannot be instantiated directly using "),Xpe=a("code"),idr=o("__init__()"),ddr=o(" (throws an error)."),cdr=l(),vt=a("div"),f(M0.$$.fragment),fdr=l(),Vpe=a("p"),mdr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gdr=l(),Sc=a("p"),hdr=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),pdr=o("not"),_dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wpe=a("code"),udr=o("from_pretrained()"),bdr=o("to load the model weights."),vdr=l(),Qpe=a("p"),Tdr=o("Examples:"),Fdr=l(),f(E0.$$.fragment),Cdr=l(),To=a("div"),f(y0.$$.fragment),Mdr=l(),Hpe=a("p"),Edr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ydr=l(),Cn=a("p"),wdr=o("The model class to instantiate is selected based on the "),Upe=a("code"),Adr=o("model_type"),Ldr=o(` property of the config object (either
passed as an argument or loaded from `),Jpe=a("code"),Bdr=o("pretrained_model_name_or_path"),xdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=a("code"),kdr=o("pretrained_model_name_or_path"),Rdr=o(":"),Sdr=l(),X=a("ul"),iT=a("li"),Kpe=a("strong"),Pdr=o("albert"),$dr=o(" \u2014 "),tO=a("a"),Idr=o("TFAlbertForSequenceClassification"),jdr=o(" (ALBERT model)"),Ddr=l(),dT=a("li"),Zpe=a("strong"),Ndr=o("bert"),qdr=o(" \u2014 "),aO=a("a"),Gdr=o("TFBertForSequenceClassification"),Odr=o(" (BERT model)"),Xdr=l(),cT=a("li"),e_e=a("strong"),Vdr=o("camembert"),zdr=o(" \u2014 "),nO=a("a"),Wdr=o("TFCamembertForSequenceClassification"),Qdr=o(" (CamemBERT model)"),Hdr=l(),fT=a("li"),o_e=a("strong"),Udr=o("convbert"),Jdr=o(" \u2014 "),sO=a("a"),Ydr=o("TFConvBertForSequenceClassification"),Kdr=o(" (ConvBERT model)"),Zdr=l(),mT=a("li"),r_e=a("strong"),ecr=o("ctrl"),ocr=o(" \u2014 "),lO=a("a"),rcr=o("TFCTRLForSequenceClassification"),tcr=o(" (CTRL model)"),acr=l(),gT=a("li"),t_e=a("strong"),ncr=o("deberta"),scr=o(" \u2014 "),iO=a("a"),lcr=o("TFDebertaForSequenceClassification"),icr=o(" (DeBERTa model)"),dcr=l(),hT=a("li"),a_e=a("strong"),ccr=o("deberta-v2"),fcr=o(" \u2014 "),dO=a("a"),mcr=o("TFDebertaV2ForSequenceClassification"),gcr=o(" (DeBERTa-v2 model)"),hcr=l(),pT=a("li"),n_e=a("strong"),pcr=o("distilbert"),_cr=o(" \u2014 "),cO=a("a"),ucr=o("TFDistilBertForSequenceClassification"),bcr=o(" (DistilBERT model)"),vcr=l(),_T=a("li"),s_e=a("strong"),Tcr=o("electra"),Fcr=o(" \u2014 "),fO=a("a"),Ccr=o("TFElectraForSequenceClassification"),Mcr=o(" (ELECTRA model)"),Ecr=l(),uT=a("li"),l_e=a("strong"),ycr=o("flaubert"),wcr=o(" \u2014 "),mO=a("a"),Acr=o("TFFlaubertForSequenceClassification"),Lcr=o(" (FlauBERT model)"),Bcr=l(),bT=a("li"),i_e=a("strong"),xcr=o("funnel"),kcr=o(" \u2014 "),gO=a("a"),Rcr=o("TFFunnelForSequenceClassification"),Scr=o(" (Funnel Transformer model)"),Pcr=l(),vT=a("li"),d_e=a("strong"),$cr=o("gpt2"),Icr=o(" \u2014 "),hO=a("a"),jcr=o("TFGPT2ForSequenceClassification"),Dcr=o(" (OpenAI GPT-2 model)"),Ncr=l(),TT=a("li"),c_e=a("strong"),qcr=o("gptj"),Gcr=o(" \u2014 "),pO=a("a"),Ocr=o("TFGPTJForSequenceClassification"),Xcr=o(" (GPT-J model)"),Vcr=l(),FT=a("li"),f_e=a("strong"),zcr=o("layoutlm"),Wcr=o(" \u2014 "),_O=a("a"),Qcr=o("TFLayoutLMForSequenceClassification"),Hcr=o(" (LayoutLM model)"),Ucr=l(),CT=a("li"),m_e=a("strong"),Jcr=o("longformer"),Ycr=o(" \u2014 "),uO=a("a"),Kcr=o("TFLongformerForSequenceClassification"),Zcr=o(" (Longformer model)"),efr=l(),MT=a("li"),g_e=a("strong"),ofr=o("mobilebert"),rfr=o(" \u2014 "),bO=a("a"),tfr=o("TFMobileBertForSequenceClassification"),afr=o(" (MobileBERT model)"),nfr=l(),ET=a("li"),h_e=a("strong"),sfr=o("mpnet"),lfr=o(" \u2014 "),vO=a("a"),ifr=o("TFMPNetForSequenceClassification"),dfr=o(" (MPNet model)"),cfr=l(),yT=a("li"),p_e=a("strong"),ffr=o("openai-gpt"),mfr=o(" \u2014 "),TO=a("a"),gfr=o("TFOpenAIGPTForSequenceClassification"),hfr=o(" (OpenAI GPT model)"),pfr=l(),wT=a("li"),__e=a("strong"),_fr=o("rembert"),ufr=o(" \u2014 "),FO=a("a"),bfr=o("TFRemBertForSequenceClassification"),vfr=o(" (RemBERT model)"),Tfr=l(),AT=a("li"),u_e=a("strong"),Ffr=o("roberta"),Cfr=o(" \u2014 "),CO=a("a"),Mfr=o("TFRobertaForSequenceClassification"),Efr=o(" (RoBERTa model)"),yfr=l(),LT=a("li"),b_e=a("strong"),wfr=o("roformer"),Afr=o(" \u2014 "),MO=a("a"),Lfr=o("TFRoFormerForSequenceClassification"),Bfr=o(" (RoFormer model)"),xfr=l(),BT=a("li"),v_e=a("strong"),kfr=o("tapas"),Rfr=o(" \u2014 "),EO=a("a"),Sfr=o("TFTapasForSequenceClassification"),Pfr=o(" (TAPAS model)"),$fr=l(),xT=a("li"),T_e=a("strong"),Ifr=o("transfo-xl"),jfr=o(" \u2014 "),yO=a("a"),Dfr=o("TFTransfoXLForSequenceClassification"),Nfr=o(" (Transformer-XL model)"),qfr=l(),kT=a("li"),F_e=a("strong"),Gfr=o("xlm"),Ofr=o(" \u2014 "),wO=a("a"),Xfr=o("TFXLMForSequenceClassification"),Vfr=o(" (XLM model)"),zfr=l(),RT=a("li"),C_e=a("strong"),Wfr=o("xlm-roberta"),Qfr=o(" \u2014 "),AO=a("a"),Hfr=o("TFXLMRobertaForSequenceClassification"),Ufr=o(" (XLM-RoBERTa model)"),Jfr=l(),ST=a("li"),M_e=a("strong"),Yfr=o("xlnet"),Kfr=o(" \u2014 "),LO=a("a"),Zfr=o("TFXLNetForSequenceClassification"),emr=o(" (XLNet model)"),omr=l(),E_e=a("p"),rmr=o("Examples:"),tmr=l(),f(w0.$$.fragment),jke=l(),Pc=a("h2"),PT=a("a"),y_e=a("span"),f(A0.$$.fragment),amr=l(),w_e=a("span"),nmr=o("TFAutoModelForMultipleChoice"),Dke=l(),wr=a("div"),f(L0.$$.fragment),smr=l(),$c=a("p"),lmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),A_e=a("code"),imr=o("from_pretrained()"),dmr=o("class method or the "),L_e=a("code"),cmr=o("from_config()"),fmr=o(`class
method.`),mmr=l(),B0=a("p"),gmr=o("This class cannot be instantiated directly using "),B_e=a("code"),hmr=o("__init__()"),pmr=o(" (throws an error)."),_mr=l(),Tt=a("div"),f(x0.$$.fragment),umr=l(),x_e=a("p"),bmr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vmr=l(),Ic=a("p"),Tmr=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),Fmr=o("not"),Cmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),R_e=a("code"),Mmr=o("from_pretrained()"),Emr=o("to load the model weights."),ymr=l(),S_e=a("p"),wmr=o("Examples:"),Amr=l(),f(k0.$$.fragment),Lmr=l(),Fo=a("div"),f(R0.$$.fragment),Bmr=l(),P_e=a("p"),xmr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kmr=l(),Mn=a("p"),Rmr=o("The model class to instantiate is selected based on the "),$_e=a("code"),Smr=o("model_type"),Pmr=o(` property of the config object (either
passed as an argument or loaded from `),I_e=a("code"),$mr=o("pretrained_model_name_or_path"),Imr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=a("code"),jmr=o("pretrained_model_name_or_path"),Dmr=o(":"),Nmr=l(),te=a("ul"),$T=a("li"),D_e=a("strong"),qmr=o("albert"),Gmr=o(" \u2014 "),BO=a("a"),Omr=o("TFAlbertForMultipleChoice"),Xmr=o(" (ALBERT model)"),Vmr=l(),IT=a("li"),N_e=a("strong"),zmr=o("bert"),Wmr=o(" \u2014 "),xO=a("a"),Qmr=o("TFBertForMultipleChoice"),Hmr=o(" (BERT model)"),Umr=l(),jT=a("li"),q_e=a("strong"),Jmr=o("camembert"),Ymr=o(" \u2014 "),kO=a("a"),Kmr=o("TFCamembertForMultipleChoice"),Zmr=o(" (CamemBERT model)"),egr=l(),DT=a("li"),G_e=a("strong"),ogr=o("convbert"),rgr=o(" \u2014 "),RO=a("a"),tgr=o("TFConvBertForMultipleChoice"),agr=o(" (ConvBERT model)"),ngr=l(),NT=a("li"),O_e=a("strong"),sgr=o("distilbert"),lgr=o(" \u2014 "),SO=a("a"),igr=o("TFDistilBertForMultipleChoice"),dgr=o(" (DistilBERT model)"),cgr=l(),qT=a("li"),X_e=a("strong"),fgr=o("electra"),mgr=o(" \u2014 "),PO=a("a"),ggr=o("TFElectraForMultipleChoice"),hgr=o(" (ELECTRA model)"),pgr=l(),GT=a("li"),V_e=a("strong"),_gr=o("flaubert"),ugr=o(" \u2014 "),$O=a("a"),bgr=o("TFFlaubertForMultipleChoice"),vgr=o(" (FlauBERT model)"),Tgr=l(),OT=a("li"),z_e=a("strong"),Fgr=o("funnel"),Cgr=o(" \u2014 "),IO=a("a"),Mgr=o("TFFunnelForMultipleChoice"),Egr=o(" (Funnel Transformer model)"),ygr=l(),XT=a("li"),W_e=a("strong"),wgr=o("longformer"),Agr=o(" \u2014 "),jO=a("a"),Lgr=o("TFLongformerForMultipleChoice"),Bgr=o(" (Longformer model)"),xgr=l(),VT=a("li"),Q_e=a("strong"),kgr=o("mobilebert"),Rgr=o(" \u2014 "),DO=a("a"),Sgr=o("TFMobileBertForMultipleChoice"),Pgr=o(" (MobileBERT model)"),$gr=l(),zT=a("li"),H_e=a("strong"),Igr=o("mpnet"),jgr=o(" \u2014 "),NO=a("a"),Dgr=o("TFMPNetForMultipleChoice"),Ngr=o(" (MPNet model)"),qgr=l(),WT=a("li"),U_e=a("strong"),Ggr=o("rembert"),Ogr=o(" \u2014 "),qO=a("a"),Xgr=o("TFRemBertForMultipleChoice"),Vgr=o(" (RemBERT model)"),zgr=l(),QT=a("li"),J_e=a("strong"),Wgr=o("roberta"),Qgr=o(" \u2014 "),GO=a("a"),Hgr=o("TFRobertaForMultipleChoice"),Ugr=o(" (RoBERTa model)"),Jgr=l(),HT=a("li"),Y_e=a("strong"),Ygr=o("roformer"),Kgr=o(" \u2014 "),OO=a("a"),Zgr=o("TFRoFormerForMultipleChoice"),ehr=o(" (RoFormer model)"),ohr=l(),UT=a("li"),K_e=a("strong"),rhr=o("xlm"),thr=o(" \u2014 "),XO=a("a"),ahr=o("TFXLMForMultipleChoice"),nhr=o(" (XLM model)"),shr=l(),JT=a("li"),Z_e=a("strong"),lhr=o("xlm-roberta"),ihr=o(" \u2014 "),VO=a("a"),dhr=o("TFXLMRobertaForMultipleChoice"),chr=o(" (XLM-RoBERTa model)"),fhr=l(),YT=a("li"),eue=a("strong"),mhr=o("xlnet"),ghr=o(" \u2014 "),zO=a("a"),hhr=o("TFXLNetForMultipleChoice"),phr=o(" (XLNet model)"),_hr=l(),oue=a("p"),uhr=o("Examples:"),bhr=l(),f(S0.$$.fragment),Nke=l(),jc=a("h2"),KT=a("a"),rue=a("span"),f(P0.$$.fragment),vhr=l(),tue=a("span"),Thr=o("TFAutoModelForTableQuestionAnswering"),qke=l(),Ar=a("div"),f($0.$$.fragment),Fhr=l(),Dc=a("p"),Chr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aue=a("code"),Mhr=o("from_pretrained()"),Ehr=o("class method or the "),nue=a("code"),yhr=o("from_config()"),whr=o(`class
method.`),Ahr=l(),I0=a("p"),Lhr=o("This class cannot be instantiated directly using "),sue=a("code"),Bhr=o("__init__()"),xhr=o(" (throws an error)."),khr=l(),Ft=a("div"),f(j0.$$.fragment),Rhr=l(),lue=a("p"),Shr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Phr=l(),Nc=a("p"),$hr=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),Ihr=o("not"),jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),due=a("code"),Dhr=o("from_pretrained()"),Nhr=o("to load the model weights."),qhr=l(),cue=a("p"),Ghr=o("Examples:"),Ohr=l(),f(D0.$$.fragment),Xhr=l(),Co=a("div"),f(N0.$$.fragment),Vhr=l(),fue=a("p"),zhr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Whr=l(),En=a("p"),Qhr=o("The model class to instantiate is selected based on the "),mue=a("code"),Hhr=o("model_type"),Uhr=o(` property of the config object (either
passed as an argument or loaded from `),gue=a("code"),Jhr=o("pretrained_model_name_or_path"),Yhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=a("code"),Khr=o("pretrained_model_name_or_path"),Zhr=o(":"),epr=l(),pue=a("ul"),ZT=a("li"),_ue=a("strong"),opr=o("tapas"),rpr=o(" \u2014 "),WO=a("a"),tpr=o("TFTapasForQuestionAnswering"),apr=o(" (TAPAS model)"),npr=l(),uue=a("p"),spr=o("Examples:"),lpr=l(),f(q0.$$.fragment),Gke=l(),qc=a("h2"),eF=a("a"),bue=a("span"),f(G0.$$.fragment),ipr=l(),vue=a("span"),dpr=o("TFAutoModelForTokenClassification"),Oke=l(),Lr=a("div"),f(O0.$$.fragment),cpr=l(),Gc=a("p"),fpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tue=a("code"),mpr=o("from_pretrained()"),gpr=o("class method or the "),Fue=a("code"),hpr=o("from_config()"),ppr=o(`class
method.`),_pr=l(),X0=a("p"),upr=o("This class cannot be instantiated directly using "),Cue=a("code"),bpr=o("__init__()"),vpr=o(" (throws an error)."),Tpr=l(),Ct=a("div"),f(V0.$$.fragment),Fpr=l(),Mue=a("p"),Cpr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mpr=l(),Oc=a("p"),Epr=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),ypr=o("not"),wpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yue=a("code"),Apr=o("from_pretrained()"),Lpr=o("to load the model weights."),Bpr=l(),wue=a("p"),xpr=o("Examples:"),kpr=l(),f(z0.$$.fragment),Rpr=l(),Mo=a("div"),f(W0.$$.fragment),Spr=l(),Aue=a("p"),Ppr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$pr=l(),yn=a("p"),Ipr=o("The model class to instantiate is selected based on the "),Lue=a("code"),jpr=o("model_type"),Dpr=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),Npr=o("pretrained_model_name_or_path"),qpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),Gpr=o("pretrained_model_name_or_path"),Opr=o(":"),Xpr=l(),K=a("ul"),oF=a("li"),kue=a("strong"),Vpr=o("albert"),zpr=o(" \u2014 "),QO=a("a"),Wpr=o("TFAlbertForTokenClassification"),Qpr=o(" (ALBERT model)"),Hpr=l(),rF=a("li"),Rue=a("strong"),Upr=o("bert"),Jpr=o(" \u2014 "),HO=a("a"),Ypr=o("TFBertForTokenClassification"),Kpr=o(" (BERT model)"),Zpr=l(),tF=a("li"),Sue=a("strong"),e_r=o("camembert"),o_r=o(" \u2014 "),UO=a("a"),r_r=o("TFCamembertForTokenClassification"),t_r=o(" (CamemBERT model)"),a_r=l(),aF=a("li"),Pue=a("strong"),n_r=o("convbert"),s_r=o(" \u2014 "),JO=a("a"),l_r=o("TFConvBertForTokenClassification"),i_r=o(" (ConvBERT model)"),d_r=l(),nF=a("li"),$ue=a("strong"),c_r=o("deberta"),f_r=o(" \u2014 "),YO=a("a"),m_r=o("TFDebertaForTokenClassification"),g_r=o(" (DeBERTa model)"),h_r=l(),sF=a("li"),Iue=a("strong"),p_r=o("deberta-v2"),__r=o(" \u2014 "),KO=a("a"),u_r=o("TFDebertaV2ForTokenClassification"),b_r=o(" (DeBERTa-v2 model)"),v_r=l(),lF=a("li"),jue=a("strong"),T_r=o("distilbert"),F_r=o(" \u2014 "),ZO=a("a"),C_r=o("TFDistilBertForTokenClassification"),M_r=o(" (DistilBERT model)"),E_r=l(),iF=a("li"),Due=a("strong"),y_r=o("electra"),w_r=o(" \u2014 "),eX=a("a"),A_r=o("TFElectraForTokenClassification"),L_r=o(" (ELECTRA model)"),B_r=l(),dF=a("li"),Nue=a("strong"),x_r=o("flaubert"),k_r=o(" \u2014 "),oX=a("a"),R_r=o("TFFlaubertForTokenClassification"),S_r=o(" (FlauBERT model)"),P_r=l(),cF=a("li"),que=a("strong"),$_r=o("funnel"),I_r=o(" \u2014 "),rX=a("a"),j_r=o("TFFunnelForTokenClassification"),D_r=o(" (Funnel Transformer model)"),N_r=l(),fF=a("li"),Gue=a("strong"),q_r=o("layoutlm"),G_r=o(" \u2014 "),tX=a("a"),O_r=o("TFLayoutLMForTokenClassification"),X_r=o(" (LayoutLM model)"),V_r=l(),mF=a("li"),Oue=a("strong"),z_r=o("longformer"),W_r=o(" \u2014 "),aX=a("a"),Q_r=o("TFLongformerForTokenClassification"),H_r=o(" (Longformer model)"),U_r=l(),gF=a("li"),Xue=a("strong"),J_r=o("mobilebert"),Y_r=o(" \u2014 "),nX=a("a"),K_r=o("TFMobileBertForTokenClassification"),Z_r=o(" (MobileBERT model)"),eur=l(),hF=a("li"),Vue=a("strong"),our=o("mpnet"),rur=o(" \u2014 "),sX=a("a"),tur=o("TFMPNetForTokenClassification"),aur=o(" (MPNet model)"),nur=l(),pF=a("li"),zue=a("strong"),sur=o("rembert"),lur=o(" \u2014 "),lX=a("a"),iur=o("TFRemBertForTokenClassification"),dur=o(" (RemBERT model)"),cur=l(),_F=a("li"),Wue=a("strong"),fur=o("roberta"),mur=o(" \u2014 "),iX=a("a"),gur=o("TFRobertaForTokenClassification"),hur=o(" (RoBERTa model)"),pur=l(),uF=a("li"),Que=a("strong"),_ur=o("roformer"),uur=o(" \u2014 "),dX=a("a"),bur=o("TFRoFormerForTokenClassification"),vur=o(" (RoFormer model)"),Tur=l(),bF=a("li"),Hue=a("strong"),Fur=o("xlm"),Cur=o(" \u2014 "),cX=a("a"),Mur=o("TFXLMForTokenClassification"),Eur=o(" (XLM model)"),yur=l(),vF=a("li"),Uue=a("strong"),wur=o("xlm-roberta"),Aur=o(" \u2014 "),fX=a("a"),Lur=o("TFXLMRobertaForTokenClassification"),Bur=o(" (XLM-RoBERTa model)"),xur=l(),TF=a("li"),Jue=a("strong"),kur=o("xlnet"),Rur=o(" \u2014 "),mX=a("a"),Sur=o("TFXLNetForTokenClassification"),Pur=o(" (XLNet model)"),$ur=l(),Yue=a("p"),Iur=o("Examples:"),jur=l(),f(Q0.$$.fragment),Xke=l(),Xc=a("h2"),FF=a("a"),Kue=a("span"),f(H0.$$.fragment),Dur=l(),Zue=a("span"),Nur=o("TFAutoModelForQuestionAnswering"),Vke=l(),Br=a("div"),f(U0.$$.fragment),qur=l(),Vc=a("p"),Gur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),e2e=a("code"),Our=o("from_pretrained()"),Xur=o("class method or the "),o2e=a("code"),Vur=o("from_config()"),zur=o(`class
method.`),Wur=l(),J0=a("p"),Qur=o("This class cannot be instantiated directly using "),r2e=a("code"),Hur=o("__init__()"),Uur=o(" (throws an error)."),Jur=l(),Mt=a("div"),f(Y0.$$.fragment),Yur=l(),t2e=a("p"),Kur=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Zur=l(),zc=a("p"),e2r=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),o2r=o("not"),r2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),n2e=a("code"),t2r=o("from_pretrained()"),a2r=o("to load the model weights."),n2r=l(),s2e=a("p"),s2r=o("Examples:"),l2r=l(),f(K0.$$.fragment),i2r=l(),Eo=a("div"),f(Z0.$$.fragment),d2r=l(),l2e=a("p"),c2r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),f2r=l(),wn=a("p"),m2r=o("The model class to instantiate is selected based on the "),i2e=a("code"),g2r=o("model_type"),h2r=o(` property of the config object (either
passed as an argument or loaded from `),d2e=a("code"),p2r=o("pretrained_model_name_or_path"),_2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=a("code"),u2r=o("pretrained_model_name_or_path"),b2r=o(":"),v2r=l(),Z=a("ul"),CF=a("li"),f2e=a("strong"),T2r=o("albert"),F2r=o(" \u2014 "),gX=a("a"),C2r=o("TFAlbertForQuestionAnswering"),M2r=o(" (ALBERT model)"),E2r=l(),MF=a("li"),m2e=a("strong"),y2r=o("bert"),w2r=o(" \u2014 "),hX=a("a"),A2r=o("TFBertForQuestionAnswering"),L2r=o(" (BERT model)"),B2r=l(),EF=a("li"),g2e=a("strong"),x2r=o("camembert"),k2r=o(" \u2014 "),pX=a("a"),R2r=o("TFCamembertForQuestionAnswering"),S2r=o(" (CamemBERT model)"),P2r=l(),yF=a("li"),h2e=a("strong"),$2r=o("convbert"),I2r=o(" \u2014 "),_X=a("a"),j2r=o("TFConvBertForQuestionAnswering"),D2r=o(" (ConvBERT model)"),N2r=l(),wF=a("li"),p2e=a("strong"),q2r=o("deberta"),G2r=o(" \u2014 "),uX=a("a"),O2r=o("TFDebertaForQuestionAnswering"),X2r=o(" (DeBERTa model)"),V2r=l(),AF=a("li"),_2e=a("strong"),z2r=o("deberta-v2"),W2r=o(" \u2014 "),bX=a("a"),Q2r=o("TFDebertaV2ForQuestionAnswering"),H2r=o(" (DeBERTa-v2 model)"),U2r=l(),LF=a("li"),u2e=a("strong"),J2r=o("distilbert"),Y2r=o(" \u2014 "),vX=a("a"),K2r=o("TFDistilBertForQuestionAnswering"),Z2r=o(" (DistilBERT model)"),e1r=l(),BF=a("li"),b2e=a("strong"),o1r=o("electra"),r1r=o(" \u2014 "),TX=a("a"),t1r=o("TFElectraForQuestionAnswering"),a1r=o(" (ELECTRA model)"),n1r=l(),xF=a("li"),v2e=a("strong"),s1r=o("flaubert"),l1r=o(" \u2014 "),FX=a("a"),i1r=o("TFFlaubertForQuestionAnsweringSimple"),d1r=o(" (FlauBERT model)"),c1r=l(),kF=a("li"),T2e=a("strong"),f1r=o("funnel"),m1r=o(" \u2014 "),CX=a("a"),g1r=o("TFFunnelForQuestionAnswering"),h1r=o(" (Funnel Transformer model)"),p1r=l(),RF=a("li"),F2e=a("strong"),_1r=o("gptj"),u1r=o(" \u2014 "),MX=a("a"),b1r=o("TFGPTJForQuestionAnswering"),v1r=o(" (GPT-J model)"),T1r=l(),SF=a("li"),C2e=a("strong"),F1r=o("longformer"),C1r=o(" \u2014 "),EX=a("a"),M1r=o("TFLongformerForQuestionAnswering"),E1r=o(" (Longformer model)"),y1r=l(),PF=a("li"),M2e=a("strong"),w1r=o("mobilebert"),A1r=o(" \u2014 "),yX=a("a"),L1r=o("TFMobileBertForQuestionAnswering"),B1r=o(" (MobileBERT model)"),x1r=l(),$F=a("li"),E2e=a("strong"),k1r=o("mpnet"),R1r=o(" \u2014 "),wX=a("a"),S1r=o("TFMPNetForQuestionAnswering"),P1r=o(" (MPNet model)"),$1r=l(),IF=a("li"),y2e=a("strong"),I1r=o("rembert"),j1r=o(" \u2014 "),AX=a("a"),D1r=o("TFRemBertForQuestionAnswering"),N1r=o(" (RemBERT model)"),q1r=l(),jF=a("li"),w2e=a("strong"),G1r=o("roberta"),O1r=o(" \u2014 "),LX=a("a"),X1r=o("TFRobertaForQuestionAnswering"),V1r=o(" (RoBERTa model)"),z1r=l(),DF=a("li"),A2e=a("strong"),W1r=o("roformer"),Q1r=o(" \u2014 "),BX=a("a"),H1r=o("TFRoFormerForQuestionAnswering"),U1r=o(" (RoFormer model)"),J1r=l(),NF=a("li"),L2e=a("strong"),Y1r=o("xlm"),K1r=o(" \u2014 "),xX=a("a"),Z1r=o("TFXLMForQuestionAnsweringSimple"),ebr=o(" (XLM model)"),obr=l(),qF=a("li"),B2e=a("strong"),rbr=o("xlm-roberta"),tbr=o(" \u2014 "),kX=a("a"),abr=o("TFXLMRobertaForQuestionAnswering"),nbr=o(" (XLM-RoBERTa model)"),sbr=l(),GF=a("li"),x2e=a("strong"),lbr=o("xlnet"),ibr=o(" \u2014 "),RX=a("a"),dbr=o("TFXLNetForQuestionAnsweringSimple"),cbr=o(" (XLNet model)"),fbr=l(),k2e=a("p"),mbr=o("Examples:"),gbr=l(),f(eL.$$.fragment),zke=l(),Wc=a("h2"),OF=a("a"),R2e=a("span"),f(oL.$$.fragment),hbr=l(),S2e=a("span"),pbr=o("TFAutoModelForVision2Seq"),Wke=l(),xr=a("div"),f(rL.$$.fragment),_br=l(),Qc=a("p"),ubr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),P2e=a("code"),bbr=o("from_pretrained()"),vbr=o("class method or the "),$2e=a("code"),Tbr=o("from_config()"),Fbr=o(`class
method.`),Cbr=l(),tL=a("p"),Mbr=o("This class cannot be instantiated directly using "),I2e=a("code"),Ebr=o("__init__()"),ybr=o(" (throws an error)."),wbr=l(),Et=a("div"),f(aL.$$.fragment),Abr=l(),j2e=a("p"),Lbr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Bbr=l(),Hc=a("p"),xbr=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),kbr=o("not"),Rbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N2e=a("code"),Sbr=o("from_pretrained()"),Pbr=o("to load the model weights."),$br=l(),q2e=a("p"),Ibr=o("Examples:"),jbr=l(),f(nL.$$.fragment),Dbr=l(),yo=a("div"),f(sL.$$.fragment),Nbr=l(),G2e=a("p"),qbr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Gbr=l(),An=a("p"),Obr=o("The model class to instantiate is selected based on the "),O2e=a("code"),Xbr=o("model_type"),Vbr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),zbr=o("pretrained_model_name_or_path"),Wbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),Qbr=o("pretrained_model_name_or_path"),Hbr=o(":"),Ubr=l(),z2e=a("ul"),XF=a("li"),W2e=a("strong"),Jbr=o("vision-encoder-decoder"),Ybr=o(" \u2014 "),SX=a("a"),Kbr=o("TFVisionEncoderDecoderModel"),Zbr=o(" (Vision Encoder decoder model)"),e3r=l(),Q2e=a("p"),o3r=o("Examples:"),r3r=l(),f(lL.$$.fragment),Qke=l(),Uc=a("h2"),VF=a("a"),H2e=a("span"),f(iL.$$.fragment),t3r=l(),U2e=a("span"),a3r=o("TFAutoModelForSpeechSeq2Seq"),Hke=l(),kr=a("div"),f(dL.$$.fragment),n3r=l(),Jc=a("p"),s3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),J2e=a("code"),l3r=o("from_pretrained()"),i3r=o("class method or the "),Y2e=a("code"),d3r=o("from_config()"),c3r=o(`class
method.`),f3r=l(),cL=a("p"),m3r=o("This class cannot be instantiated directly using "),K2e=a("code"),g3r=o("__init__()"),h3r=o(" (throws an error)."),p3r=l(),yt=a("div"),f(fL.$$.fragment),_3r=l(),Z2e=a("p"),u3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),b3r=l(),Yc=a("p"),v3r=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),T3r=o("not"),F3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o1e=a("code"),C3r=o("from_pretrained()"),M3r=o("to load the model weights."),E3r=l(),r1e=a("p"),y3r=o("Examples:"),w3r=l(),f(mL.$$.fragment),A3r=l(),wo=a("div"),f(gL.$$.fragment),L3r=l(),t1e=a("p"),B3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),x3r=l(),Ln=a("p"),k3r=o("The model class to instantiate is selected based on the "),a1e=a("code"),R3r=o("model_type"),S3r=o(` property of the config object (either
passed as an argument or loaded from `),n1e=a("code"),P3r=o("pretrained_model_name_or_path"),$3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=a("code"),I3r=o("pretrained_model_name_or_path"),j3r=o(":"),D3r=l(),l1e=a("ul"),zF=a("li"),i1e=a("strong"),N3r=o("speech_to_text"),q3r=o(" \u2014 "),PX=a("a"),G3r=o("TFSpeech2TextForConditionalGeneration"),O3r=o(" (Speech2Text model)"),X3r=l(),d1e=a("p"),V3r=o("Examples:"),z3r=l(),f(hL.$$.fragment),Uke=l(),Kc=a("h2"),WF=a("a"),c1e=a("span"),f(pL.$$.fragment),W3r=l(),f1e=a("span"),Q3r=o("FlaxAutoModel"),Jke=l(),Rr=a("div"),f(_L.$$.fragment),H3r=l(),Zc=a("p"),U3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),m1e=a("code"),J3r=o("from_pretrained()"),Y3r=o("class method or the "),g1e=a("code"),K3r=o("from_config()"),Z3r=o(`class
method.`),e5r=l(),uL=a("p"),o5r=o("This class cannot be instantiated directly using "),h1e=a("code"),r5r=o("__init__()"),t5r=o(" (throws an error)."),a5r=l(),wt=a("div"),f(bL.$$.fragment),n5r=l(),p1e=a("p"),s5r=o("Instantiates one of the base model classes of the library from a configuration."),l5r=l(),ef=a("p"),i5r=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),d5r=o("not"),c5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u1e=a("code"),f5r=o("from_pretrained()"),m5r=o("to load the model weights."),g5r=l(),b1e=a("p"),h5r=o("Examples:"),p5r=l(),f(vL.$$.fragment),_5r=l(),Ao=a("div"),f(TL.$$.fragment),u5r=l(),v1e=a("p"),b5r=o("Instantiate one of the base model classes of the library from a pretrained model."),v5r=l(),Bn=a("p"),T5r=o("The model class to instantiate is selected based on the "),T1e=a("code"),F5r=o("model_type"),C5r=o(` property of the config object (either
passed as an argument or loaded from `),F1e=a("code"),M5r=o("pretrained_model_name_or_path"),E5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),y5r=o("pretrained_model_name_or_path"),w5r=o(":"),A5r=l(),z=a("ul"),QF=a("li"),M1e=a("strong"),L5r=o("albert"),B5r=o(" \u2014 "),$X=a("a"),x5r=o("FlaxAlbertModel"),k5r=o(" (ALBERT model)"),R5r=l(),HF=a("li"),E1e=a("strong"),S5r=o("bart"),P5r=o(" \u2014 "),IX=a("a"),$5r=o("FlaxBartModel"),I5r=o(" (BART model)"),j5r=l(),UF=a("li"),y1e=a("strong"),D5r=o("beit"),N5r=o(" \u2014 "),jX=a("a"),q5r=o("FlaxBeitModel"),G5r=o(" (BEiT model)"),O5r=l(),JF=a("li"),w1e=a("strong"),X5r=o("bert"),V5r=o(" \u2014 "),DX=a("a"),z5r=o("FlaxBertModel"),W5r=o(" (BERT model)"),Q5r=l(),YF=a("li"),A1e=a("strong"),H5r=o("big_bird"),U5r=o(" \u2014 "),NX=a("a"),J5r=o("FlaxBigBirdModel"),Y5r=o(" (BigBird model)"),K5r=l(),KF=a("li"),L1e=a("strong"),Z5r=o("blenderbot"),evr=o(" \u2014 "),qX=a("a"),ovr=o("FlaxBlenderbotModel"),rvr=o(" (Blenderbot model)"),tvr=l(),ZF=a("li"),B1e=a("strong"),avr=o("blenderbot-small"),nvr=o(" \u2014 "),GX=a("a"),svr=o("FlaxBlenderbotSmallModel"),lvr=o(" (BlenderbotSmall model)"),ivr=l(),eC=a("li"),x1e=a("strong"),dvr=o("clip"),cvr=o(" \u2014 "),OX=a("a"),fvr=o("FlaxCLIPModel"),mvr=o(" (CLIP model)"),gvr=l(),oC=a("li"),k1e=a("strong"),hvr=o("distilbert"),pvr=o(" \u2014 "),XX=a("a"),_vr=o("FlaxDistilBertModel"),uvr=o(" (DistilBERT model)"),bvr=l(),rC=a("li"),R1e=a("strong"),vvr=o("electra"),Tvr=o(" \u2014 "),VX=a("a"),Fvr=o("FlaxElectraModel"),Cvr=o(" (ELECTRA model)"),Mvr=l(),tC=a("li"),S1e=a("strong"),Evr=o("gpt2"),yvr=o(" \u2014 "),zX=a("a"),wvr=o("FlaxGPT2Model"),Avr=o(" (OpenAI GPT-2 model)"),Lvr=l(),aC=a("li"),P1e=a("strong"),Bvr=o("gpt_neo"),xvr=o(" \u2014 "),WX=a("a"),kvr=o("FlaxGPTNeoModel"),Rvr=o(" (GPT Neo model)"),Svr=l(),nC=a("li"),$1e=a("strong"),Pvr=o("gptj"),$vr=o(" \u2014 "),QX=a("a"),Ivr=o("FlaxGPTJModel"),jvr=o(" (GPT-J model)"),Dvr=l(),sC=a("li"),I1e=a("strong"),Nvr=o("marian"),qvr=o(" \u2014 "),HX=a("a"),Gvr=o("FlaxMarianModel"),Ovr=o(" (Marian model)"),Xvr=l(),lC=a("li"),j1e=a("strong"),Vvr=o("mbart"),zvr=o(" \u2014 "),UX=a("a"),Wvr=o("FlaxMBartModel"),Qvr=o(" (mBART model)"),Hvr=l(),iC=a("li"),D1e=a("strong"),Uvr=o("mt5"),Jvr=o(" \u2014 "),JX=a("a"),Yvr=o("FlaxMT5Model"),Kvr=o(" (mT5 model)"),Zvr=l(),dC=a("li"),N1e=a("strong"),e6r=o("pegasus"),o6r=o(" \u2014 "),YX=a("a"),r6r=o("FlaxPegasusModel"),t6r=o(" (Pegasus model)"),a6r=l(),cC=a("li"),q1e=a("strong"),n6r=o("roberta"),s6r=o(" \u2014 "),KX=a("a"),l6r=o("FlaxRobertaModel"),i6r=o(" (RoBERTa model)"),d6r=l(),fC=a("li"),G1e=a("strong"),c6r=o("roformer"),f6r=o(" \u2014 "),ZX=a("a"),m6r=o("FlaxRoFormerModel"),g6r=o(" (RoFormer model)"),h6r=l(),mC=a("li"),O1e=a("strong"),p6r=o("t5"),_6r=o(" \u2014 "),eV=a("a"),u6r=o("FlaxT5Model"),b6r=o(" (T5 model)"),v6r=l(),gC=a("li"),X1e=a("strong"),T6r=o("vision-text-dual-encoder"),F6r=o(" \u2014 "),oV=a("a"),C6r=o("FlaxVisionTextDualEncoderModel"),M6r=o(" (VisionTextDualEncoder model)"),E6r=l(),hC=a("li"),V1e=a("strong"),y6r=o("vit"),w6r=o(" \u2014 "),rV=a("a"),A6r=o("FlaxViTModel"),L6r=o(" (ViT model)"),B6r=l(),pC=a("li"),z1e=a("strong"),x6r=o("wav2vec2"),k6r=o(" \u2014 "),tV=a("a"),R6r=o("FlaxWav2Vec2Model"),S6r=o(" (Wav2Vec2 model)"),P6r=l(),_C=a("li"),W1e=a("strong"),$6r=o("xglm"),I6r=o(" \u2014 "),aV=a("a"),j6r=o("FlaxXGLMModel"),D6r=o(" (XGLM model)"),N6r=l(),uC=a("li"),Q1e=a("strong"),q6r=o("xlm-roberta"),G6r=o(" \u2014 "),nV=a("a"),O6r=o("FlaxXLMRobertaModel"),X6r=o(" (XLM-RoBERTa model)"),V6r=l(),H1e=a("p"),z6r=o("Examples:"),W6r=l(),f(FL.$$.fragment),Yke=l(),of=a("h2"),bC=a("a"),U1e=a("span"),f(CL.$$.fragment),Q6r=l(),J1e=a("span"),H6r=o("FlaxAutoModelForCausalLM"),Kke=l(),Sr=a("div"),f(ML.$$.fragment),U6r=l(),rf=a("p"),J6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Y1e=a("code"),Y6r=o("from_pretrained()"),K6r=o("class method or the "),K1e=a("code"),Z6r=o("from_config()"),eTr=o(`class
method.`),oTr=l(),EL=a("p"),rTr=o("This class cannot be instantiated directly using "),Z1e=a("code"),tTr=o("__init__()"),aTr=o(" (throws an error)."),nTr=l(),At=a("div"),f(yL.$$.fragment),sTr=l(),ebe=a("p"),lTr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iTr=l(),tf=a("p"),dTr=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),cTr=o("not"),fTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rbe=a("code"),mTr=o("from_pretrained()"),gTr=o("to load the model weights."),hTr=l(),tbe=a("p"),pTr=o("Examples:"),_Tr=l(),f(wL.$$.fragment),uTr=l(),Lo=a("div"),f(AL.$$.fragment),bTr=l(),abe=a("p"),vTr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),TTr=l(),xn=a("p"),FTr=o("The model class to instantiate is selected based on the "),nbe=a("code"),CTr=o("model_type"),MTr=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),ETr=o("pretrained_model_name_or_path"),yTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),wTr=o("pretrained_model_name_or_path"),ATr=o(":"),LTr=l(),ca=a("ul"),vC=a("li"),ibe=a("strong"),BTr=o("bart"),xTr=o(" \u2014 "),sV=a("a"),kTr=o("FlaxBartForCausalLM"),RTr=o(" (BART model)"),STr=l(),TC=a("li"),dbe=a("strong"),PTr=o("gpt2"),$Tr=o(" \u2014 "),lV=a("a"),ITr=o("FlaxGPT2LMHeadModel"),jTr=o(" (OpenAI GPT-2 model)"),DTr=l(),FC=a("li"),cbe=a("strong"),NTr=o("gpt_neo"),qTr=o(" \u2014 "),iV=a("a"),GTr=o("FlaxGPTNeoForCausalLM"),OTr=o(" (GPT Neo model)"),XTr=l(),CC=a("li"),fbe=a("strong"),VTr=o("gptj"),zTr=o(" \u2014 "),dV=a("a"),WTr=o("FlaxGPTJForCausalLM"),QTr=o(" (GPT-J model)"),HTr=l(),MC=a("li"),mbe=a("strong"),UTr=o("xglm"),JTr=o(" \u2014 "),cV=a("a"),YTr=o("FlaxXGLMForCausalLM"),KTr=o(" (XGLM model)"),ZTr=l(),gbe=a("p"),eFr=o("Examples:"),oFr=l(),f(LL.$$.fragment),Zke=l(),af=a("h2"),EC=a("a"),hbe=a("span"),f(BL.$$.fragment),rFr=l(),pbe=a("span"),tFr=o("FlaxAutoModelForPreTraining"),eRe=l(),Pr=a("div"),f(xL.$$.fragment),aFr=l(),nf=a("p"),nFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_be=a("code"),sFr=o("from_pretrained()"),lFr=o("class method or the "),ube=a("code"),iFr=o("from_config()"),dFr=o(`class
method.`),cFr=l(),kL=a("p"),fFr=o("This class cannot be instantiated directly using "),bbe=a("code"),mFr=o("__init__()"),gFr=o(" (throws an error)."),hFr=l(),Lt=a("div"),f(RL.$$.fragment),pFr=l(),vbe=a("p"),_Fr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uFr=l(),sf=a("p"),bFr=o(`Note:
Loading a model from its configuration file does `),Tbe=a("strong"),vFr=o("not"),TFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fbe=a("code"),FFr=o("from_pretrained()"),CFr=o("to load the model weights."),MFr=l(),Cbe=a("p"),EFr=o("Examples:"),yFr=l(),f(SL.$$.fragment),wFr=l(),Bo=a("div"),f(PL.$$.fragment),AFr=l(),Mbe=a("p"),LFr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BFr=l(),kn=a("p"),xFr=o("The model class to instantiate is selected based on the "),Ebe=a("code"),kFr=o("model_type"),RFr=o(` property of the config object (either
passed as an argument or loaded from `),ybe=a("code"),SFr=o("pretrained_model_name_or_path"),PFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),$Fr=o("pretrained_model_name_or_path"),IFr=o(":"),jFr=l(),ce=a("ul"),yC=a("li"),Abe=a("strong"),DFr=o("albert"),NFr=o(" \u2014 "),fV=a("a"),qFr=o("FlaxAlbertForPreTraining"),GFr=o(" (ALBERT model)"),OFr=l(),wC=a("li"),Lbe=a("strong"),XFr=o("bart"),VFr=o(" \u2014 "),mV=a("a"),zFr=o("FlaxBartForConditionalGeneration"),WFr=o(" (BART model)"),QFr=l(),AC=a("li"),Bbe=a("strong"),HFr=o("bert"),UFr=o(" \u2014 "),gV=a("a"),JFr=o("FlaxBertForPreTraining"),YFr=o(" (BERT model)"),KFr=l(),LC=a("li"),xbe=a("strong"),ZFr=o("big_bird"),eCr=o(" \u2014 "),hV=a("a"),oCr=o("FlaxBigBirdForPreTraining"),rCr=o(" (BigBird model)"),tCr=l(),BC=a("li"),kbe=a("strong"),aCr=o("electra"),nCr=o(" \u2014 "),pV=a("a"),sCr=o("FlaxElectraForPreTraining"),lCr=o(" (ELECTRA model)"),iCr=l(),xC=a("li"),Rbe=a("strong"),dCr=o("mbart"),cCr=o(" \u2014 "),_V=a("a"),fCr=o("FlaxMBartForConditionalGeneration"),mCr=o(" (mBART model)"),gCr=l(),kC=a("li"),Sbe=a("strong"),hCr=o("mt5"),pCr=o(" \u2014 "),uV=a("a"),_Cr=o("FlaxMT5ForConditionalGeneration"),uCr=o(" (mT5 model)"),bCr=l(),RC=a("li"),Pbe=a("strong"),vCr=o("roberta"),TCr=o(" \u2014 "),bV=a("a"),FCr=o("FlaxRobertaForMaskedLM"),CCr=o(" (RoBERTa model)"),MCr=l(),SC=a("li"),$be=a("strong"),ECr=o("roformer"),yCr=o(" \u2014 "),vV=a("a"),wCr=o("FlaxRoFormerForMaskedLM"),ACr=o(" (RoFormer model)"),LCr=l(),PC=a("li"),Ibe=a("strong"),BCr=o("t5"),xCr=o(" \u2014 "),TV=a("a"),kCr=o("FlaxT5ForConditionalGeneration"),RCr=o(" (T5 model)"),SCr=l(),$C=a("li"),jbe=a("strong"),PCr=o("wav2vec2"),$Cr=o(" \u2014 "),FV=a("a"),ICr=o("FlaxWav2Vec2ForPreTraining"),jCr=o(" (Wav2Vec2 model)"),DCr=l(),IC=a("li"),Dbe=a("strong"),NCr=o("xlm-roberta"),qCr=o(" \u2014 "),CV=a("a"),GCr=o("FlaxXLMRobertaForMaskedLM"),OCr=o(" (XLM-RoBERTa model)"),XCr=l(),Nbe=a("p"),VCr=o("Examples:"),zCr=l(),f($L.$$.fragment),oRe=l(),lf=a("h2"),jC=a("a"),qbe=a("span"),f(IL.$$.fragment),WCr=l(),Gbe=a("span"),QCr=o("FlaxAutoModelForMaskedLM"),rRe=l(),$r=a("div"),f(jL.$$.fragment),HCr=l(),df=a("p"),UCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Obe=a("code"),JCr=o("from_pretrained()"),YCr=o("class method or the "),Xbe=a("code"),KCr=o("from_config()"),ZCr=o(`class
method.`),eMr=l(),DL=a("p"),oMr=o("This class cannot be instantiated directly using "),Vbe=a("code"),rMr=o("__init__()"),tMr=o(" (throws an error)."),aMr=l(),Bt=a("div"),f(NL.$$.fragment),nMr=l(),zbe=a("p"),sMr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lMr=l(),cf=a("p"),iMr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),dMr=o("not"),cMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qbe=a("code"),fMr=o("from_pretrained()"),mMr=o("to load the model weights."),gMr=l(),Hbe=a("p"),hMr=o("Examples:"),pMr=l(),f(qL.$$.fragment),_Mr=l(),xo=a("div"),f(GL.$$.fragment),uMr=l(),Ube=a("p"),bMr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vMr=l(),Rn=a("p"),TMr=o("The model class to instantiate is selected based on the "),Jbe=a("code"),FMr=o("model_type"),CMr=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),MMr=o("pretrained_model_name_or_path"),EMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),yMr=o("pretrained_model_name_or_path"),wMr=o(":"),AMr=l(),ue=a("ul"),DC=a("li"),Zbe=a("strong"),LMr=o("albert"),BMr=o(" \u2014 "),MV=a("a"),xMr=o("FlaxAlbertForMaskedLM"),kMr=o(" (ALBERT model)"),RMr=l(),NC=a("li"),e3e=a("strong"),SMr=o("bart"),PMr=o(" \u2014 "),EV=a("a"),$Mr=o("FlaxBartForConditionalGeneration"),IMr=o(" (BART model)"),jMr=l(),qC=a("li"),o3e=a("strong"),DMr=o("bert"),NMr=o(" \u2014 "),yV=a("a"),qMr=o("FlaxBertForMaskedLM"),GMr=o(" (BERT model)"),OMr=l(),GC=a("li"),r3e=a("strong"),XMr=o("big_bird"),VMr=o(" \u2014 "),wV=a("a"),zMr=o("FlaxBigBirdForMaskedLM"),WMr=o(" (BigBird model)"),QMr=l(),OC=a("li"),t3e=a("strong"),HMr=o("distilbert"),UMr=o(" \u2014 "),AV=a("a"),JMr=o("FlaxDistilBertForMaskedLM"),YMr=o(" (DistilBERT model)"),KMr=l(),XC=a("li"),a3e=a("strong"),ZMr=o("electra"),e4r=o(" \u2014 "),LV=a("a"),o4r=o("FlaxElectraForMaskedLM"),r4r=o(" (ELECTRA model)"),t4r=l(),VC=a("li"),n3e=a("strong"),a4r=o("mbart"),n4r=o(" \u2014 "),BV=a("a"),s4r=o("FlaxMBartForConditionalGeneration"),l4r=o(" (mBART model)"),i4r=l(),zC=a("li"),s3e=a("strong"),d4r=o("roberta"),c4r=o(" \u2014 "),xV=a("a"),f4r=o("FlaxRobertaForMaskedLM"),m4r=o(" (RoBERTa model)"),g4r=l(),WC=a("li"),l3e=a("strong"),h4r=o("roformer"),p4r=o(" \u2014 "),kV=a("a"),_4r=o("FlaxRoFormerForMaskedLM"),u4r=o(" (RoFormer model)"),b4r=l(),QC=a("li"),i3e=a("strong"),v4r=o("xlm-roberta"),T4r=o(" \u2014 "),RV=a("a"),F4r=o("FlaxXLMRobertaForMaskedLM"),C4r=o(" (XLM-RoBERTa model)"),M4r=l(),d3e=a("p"),E4r=o("Examples:"),y4r=l(),f(OL.$$.fragment),tRe=l(),ff=a("h2"),HC=a("a"),c3e=a("span"),f(XL.$$.fragment),w4r=l(),f3e=a("span"),A4r=o("FlaxAutoModelForSeq2SeqLM"),aRe=l(),Ir=a("div"),f(VL.$$.fragment),L4r=l(),mf=a("p"),B4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),m3e=a("code"),x4r=o("from_pretrained()"),k4r=o("class method or the "),g3e=a("code"),R4r=o("from_config()"),S4r=o(`class
method.`),P4r=l(),zL=a("p"),$4r=o("This class cannot be instantiated directly using "),h3e=a("code"),I4r=o("__init__()"),j4r=o(" (throws an error)."),D4r=l(),xt=a("div"),f(WL.$$.fragment),N4r=l(),p3e=a("p"),q4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G4r=l(),gf=a("p"),O4r=o(`Note:
Loading a model from its configuration file does `),_3e=a("strong"),X4r=o("not"),V4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u3e=a("code"),z4r=o("from_pretrained()"),W4r=o("to load the model weights."),Q4r=l(),b3e=a("p"),H4r=o("Examples:"),U4r=l(),f(QL.$$.fragment),J4r=l(),ko=a("div"),f(HL.$$.fragment),Y4r=l(),v3e=a("p"),K4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Z4r=l(),Sn=a("p"),eEr=o("The model class to instantiate is selected based on the "),T3e=a("code"),oEr=o("model_type"),rEr=o(` property of the config object (either
passed as an argument or loaded from `),F3e=a("code"),tEr=o("pretrained_model_name_or_path"),aEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(":"),lEr=l(),Me=a("ul"),UC=a("li"),M3e=a("strong"),iEr=o("bart"),dEr=o(" \u2014 "),SV=a("a"),cEr=o("FlaxBartForConditionalGeneration"),fEr=o(" (BART model)"),mEr=l(),JC=a("li"),E3e=a("strong"),gEr=o("blenderbot"),hEr=o(" \u2014 "),PV=a("a"),pEr=o("FlaxBlenderbotForConditionalGeneration"),_Er=o(" (Blenderbot model)"),uEr=l(),YC=a("li"),y3e=a("strong"),bEr=o("blenderbot-small"),vEr=o(" \u2014 "),$V=a("a"),TEr=o("FlaxBlenderbotSmallForConditionalGeneration"),FEr=o(" (BlenderbotSmall model)"),CEr=l(),KC=a("li"),w3e=a("strong"),MEr=o("encoder-decoder"),EEr=o(" \u2014 "),IV=a("a"),yEr=o("FlaxEncoderDecoderModel"),wEr=o(" (Encoder decoder model)"),AEr=l(),ZC=a("li"),A3e=a("strong"),LEr=o("marian"),BEr=o(" \u2014 "),jV=a("a"),xEr=o("FlaxMarianMTModel"),kEr=o(" (Marian model)"),REr=l(),eM=a("li"),L3e=a("strong"),SEr=o("mbart"),PEr=o(" \u2014 "),DV=a("a"),$Er=o("FlaxMBartForConditionalGeneration"),IEr=o(" (mBART model)"),jEr=l(),oM=a("li"),B3e=a("strong"),DEr=o("mt5"),NEr=o(" \u2014 "),NV=a("a"),qEr=o("FlaxMT5ForConditionalGeneration"),GEr=o(" (mT5 model)"),OEr=l(),rM=a("li"),x3e=a("strong"),XEr=o("pegasus"),VEr=o(" \u2014 "),qV=a("a"),zEr=o("FlaxPegasusForConditionalGeneration"),WEr=o(" (Pegasus model)"),QEr=l(),tM=a("li"),k3e=a("strong"),HEr=o("t5"),UEr=o(" \u2014 "),GV=a("a"),JEr=o("FlaxT5ForConditionalGeneration"),YEr=o(" (T5 model)"),KEr=l(),R3e=a("p"),ZEr=o("Examples:"),eyr=l(),f(UL.$$.fragment),nRe=l(),hf=a("h2"),aM=a("a"),S3e=a("span"),f(JL.$$.fragment),oyr=l(),P3e=a("span"),ryr=o("FlaxAutoModelForSequenceClassification"),sRe=l(),jr=a("div"),f(YL.$$.fragment),tyr=l(),pf=a("p"),ayr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$3e=a("code"),nyr=o("from_pretrained()"),syr=o("class method or the "),I3e=a("code"),lyr=o("from_config()"),iyr=o(`class
method.`),dyr=l(),KL=a("p"),cyr=o("This class cannot be instantiated directly using "),j3e=a("code"),fyr=o("__init__()"),myr=o(" (throws an error)."),gyr=l(),kt=a("div"),f(ZL.$$.fragment),hyr=l(),D3e=a("p"),pyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_yr=l(),_f=a("p"),uyr=o(`Note:
Loading a model from its configuration file does `),N3e=a("strong"),byr=o("not"),vyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),q3e=a("code"),Tyr=o("from_pretrained()"),Fyr=o("to load the model weights."),Cyr=l(),G3e=a("p"),Myr=o("Examples:"),Eyr=l(),f(e7.$$.fragment),yyr=l(),Ro=a("div"),f(o7.$$.fragment),wyr=l(),O3e=a("p"),Ayr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lyr=l(),Pn=a("p"),Byr=o("The model class to instantiate is selected based on the "),X3e=a("code"),xyr=o("model_type"),kyr=o(` property of the config object (either
passed as an argument or loaded from `),V3e=a("code"),Ryr=o("pretrained_model_name_or_path"),Syr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=a("code"),Pyr=o("pretrained_model_name_or_path"),$yr=o(":"),Iyr=l(),be=a("ul"),nM=a("li"),W3e=a("strong"),jyr=o("albert"),Dyr=o(" \u2014 "),OV=a("a"),Nyr=o("FlaxAlbertForSequenceClassification"),qyr=o(" (ALBERT model)"),Gyr=l(),sM=a("li"),Q3e=a("strong"),Oyr=o("bart"),Xyr=o(" \u2014 "),XV=a("a"),Vyr=o("FlaxBartForSequenceClassification"),zyr=o(" (BART model)"),Wyr=l(),lM=a("li"),H3e=a("strong"),Qyr=o("bert"),Hyr=o(" \u2014 "),VV=a("a"),Uyr=o("FlaxBertForSequenceClassification"),Jyr=o(" (BERT model)"),Yyr=l(),iM=a("li"),U3e=a("strong"),Kyr=o("big_bird"),Zyr=o(" \u2014 "),zV=a("a"),ewr=o("FlaxBigBirdForSequenceClassification"),owr=o(" (BigBird model)"),rwr=l(),dM=a("li"),J3e=a("strong"),twr=o("distilbert"),awr=o(" \u2014 "),WV=a("a"),nwr=o("FlaxDistilBertForSequenceClassification"),swr=o(" (DistilBERT model)"),lwr=l(),cM=a("li"),Y3e=a("strong"),iwr=o("electra"),dwr=o(" \u2014 "),QV=a("a"),cwr=o("FlaxElectraForSequenceClassification"),fwr=o(" (ELECTRA model)"),mwr=l(),fM=a("li"),K3e=a("strong"),gwr=o("mbart"),hwr=o(" \u2014 "),HV=a("a"),pwr=o("FlaxMBartForSequenceClassification"),_wr=o(" (mBART model)"),uwr=l(),mM=a("li"),Z3e=a("strong"),bwr=o("roberta"),vwr=o(" \u2014 "),UV=a("a"),Twr=o("FlaxRobertaForSequenceClassification"),Fwr=o(" (RoBERTa model)"),Cwr=l(),gM=a("li"),e5e=a("strong"),Mwr=o("roformer"),Ewr=o(" \u2014 "),JV=a("a"),ywr=o("FlaxRoFormerForSequenceClassification"),wwr=o(" (RoFormer model)"),Awr=l(),hM=a("li"),o5e=a("strong"),Lwr=o("xlm-roberta"),Bwr=o(" \u2014 "),YV=a("a"),xwr=o("FlaxXLMRobertaForSequenceClassification"),kwr=o(" (XLM-RoBERTa model)"),Rwr=l(),r5e=a("p"),Swr=o("Examples:"),Pwr=l(),f(r7.$$.fragment),lRe=l(),uf=a("h2"),pM=a("a"),t5e=a("span"),f(t7.$$.fragment),$wr=l(),a5e=a("span"),Iwr=o("FlaxAutoModelForQuestionAnswering"),iRe=l(),Dr=a("div"),f(a7.$$.fragment),jwr=l(),bf=a("p"),Dwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),n5e=a("code"),Nwr=o("from_pretrained()"),qwr=o("class method or the "),s5e=a("code"),Gwr=o("from_config()"),Owr=o(`class
method.`),Xwr=l(),n7=a("p"),Vwr=o("This class cannot be instantiated directly using "),l5e=a("code"),zwr=o("__init__()"),Wwr=o(" (throws an error)."),Qwr=l(),Rt=a("div"),f(s7.$$.fragment),Hwr=l(),i5e=a("p"),Uwr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jwr=l(),vf=a("p"),Ywr=o(`Note:
Loading a model from its configuration file does `),d5e=a("strong"),Kwr=o("not"),Zwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),c5e=a("code"),eAr=o("from_pretrained()"),oAr=o("to load the model weights."),rAr=l(),f5e=a("p"),tAr=o("Examples:"),aAr=l(),f(l7.$$.fragment),nAr=l(),So=a("div"),f(i7.$$.fragment),sAr=l(),m5e=a("p"),lAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iAr=l(),$n=a("p"),dAr=o("The model class to instantiate is selected based on the "),g5e=a("code"),cAr=o("model_type"),fAr=o(` property of the config object (either
passed as an argument or loaded from `),h5e=a("code"),mAr=o("pretrained_model_name_or_path"),gAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=a("code"),hAr=o("pretrained_model_name_or_path"),pAr=o(":"),_Ar=l(),ve=a("ul"),_M=a("li"),_5e=a("strong"),uAr=o("albert"),bAr=o(" \u2014 "),KV=a("a"),vAr=o("FlaxAlbertForQuestionAnswering"),TAr=o(" (ALBERT model)"),FAr=l(),uM=a("li"),u5e=a("strong"),CAr=o("bart"),MAr=o(" \u2014 "),ZV=a("a"),EAr=o("FlaxBartForQuestionAnswering"),yAr=o(" (BART model)"),wAr=l(),bM=a("li"),b5e=a("strong"),AAr=o("bert"),LAr=o(" \u2014 "),ez=a("a"),BAr=o("FlaxBertForQuestionAnswering"),xAr=o(" (BERT model)"),kAr=l(),vM=a("li"),v5e=a("strong"),RAr=o("big_bird"),SAr=o(" \u2014 "),oz=a("a"),PAr=o("FlaxBigBirdForQuestionAnswering"),$Ar=o(" (BigBird model)"),IAr=l(),TM=a("li"),T5e=a("strong"),jAr=o("distilbert"),DAr=o(" \u2014 "),rz=a("a"),NAr=o("FlaxDistilBertForQuestionAnswering"),qAr=o(" (DistilBERT model)"),GAr=l(),FM=a("li"),F5e=a("strong"),OAr=o("electra"),XAr=o(" \u2014 "),tz=a("a"),VAr=o("FlaxElectraForQuestionAnswering"),zAr=o(" (ELECTRA model)"),WAr=l(),CM=a("li"),C5e=a("strong"),QAr=o("mbart"),HAr=o(" \u2014 "),az=a("a"),UAr=o("FlaxMBartForQuestionAnswering"),JAr=o(" (mBART model)"),YAr=l(),MM=a("li"),M5e=a("strong"),KAr=o("roberta"),ZAr=o(" \u2014 "),nz=a("a"),e0r=o("FlaxRobertaForQuestionAnswering"),o0r=o(" (RoBERTa model)"),r0r=l(),EM=a("li"),E5e=a("strong"),t0r=o("roformer"),a0r=o(" \u2014 "),sz=a("a"),n0r=o("FlaxRoFormerForQuestionAnswering"),s0r=o(" (RoFormer model)"),l0r=l(),yM=a("li"),y5e=a("strong"),i0r=o("xlm-roberta"),d0r=o(" \u2014 "),lz=a("a"),c0r=o("FlaxXLMRobertaForQuestionAnswering"),f0r=o(" (XLM-RoBERTa model)"),m0r=l(),w5e=a("p"),g0r=o("Examples:"),h0r=l(),f(d7.$$.fragment),dRe=l(),Tf=a("h2"),wM=a("a"),A5e=a("span"),f(c7.$$.fragment),p0r=l(),L5e=a("span"),_0r=o("FlaxAutoModelForTokenClassification"),cRe=l(),Nr=a("div"),f(f7.$$.fragment),u0r=l(),Ff=a("p"),b0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),B5e=a("code"),v0r=o("from_pretrained()"),T0r=o("class method or the "),x5e=a("code"),F0r=o("from_config()"),C0r=o(`class
method.`),M0r=l(),m7=a("p"),E0r=o("This class cannot be instantiated directly using "),k5e=a("code"),y0r=o("__init__()"),w0r=o(" (throws an error)."),A0r=l(),St=a("div"),f(g7.$$.fragment),L0r=l(),R5e=a("p"),B0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),x0r=l(),Cf=a("p"),k0r=o(`Note:
Loading a model from its configuration file does `),S5e=a("strong"),R0r=o("not"),S0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),P5e=a("code"),P0r=o("from_pretrained()"),$0r=o("to load the model weights."),I0r=l(),$5e=a("p"),j0r=o("Examples:"),D0r=l(),f(h7.$$.fragment),N0r=l(),Po=a("div"),f(p7.$$.fragment),q0r=l(),I5e=a("p"),G0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),O0r=l(),In=a("p"),X0r=o("The model class to instantiate is selected based on the "),j5e=a("code"),V0r=o("model_type"),z0r=o(` property of the config object (either
passed as an argument or loaded from `),D5e=a("code"),W0r=o("pretrained_model_name_or_path"),Q0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=a("code"),H0r=o("pretrained_model_name_or_path"),U0r=o(":"),J0r=l(),Re=a("ul"),AM=a("li"),q5e=a("strong"),Y0r=o("albert"),K0r=o(" \u2014 "),iz=a("a"),Z0r=o("FlaxAlbertForTokenClassification"),eLr=o(" (ALBERT model)"),oLr=l(),LM=a("li"),G5e=a("strong"),rLr=o("bert"),tLr=o(" \u2014 "),dz=a("a"),aLr=o("FlaxBertForTokenClassification"),nLr=o(" (BERT model)"),sLr=l(),BM=a("li"),O5e=a("strong"),lLr=o("big_bird"),iLr=o(" \u2014 "),cz=a("a"),dLr=o("FlaxBigBirdForTokenClassification"),cLr=o(" (BigBird model)"),fLr=l(),xM=a("li"),X5e=a("strong"),mLr=o("distilbert"),gLr=o(" \u2014 "),fz=a("a"),hLr=o("FlaxDistilBertForTokenClassification"),pLr=o(" (DistilBERT model)"),_Lr=l(),kM=a("li"),V5e=a("strong"),uLr=o("electra"),bLr=o(" \u2014 "),mz=a("a"),vLr=o("FlaxElectraForTokenClassification"),TLr=o(" (ELECTRA model)"),FLr=l(),RM=a("li"),z5e=a("strong"),CLr=o("roberta"),MLr=o(" \u2014 "),gz=a("a"),ELr=o("FlaxRobertaForTokenClassification"),yLr=o(" (RoBERTa model)"),wLr=l(),SM=a("li"),W5e=a("strong"),ALr=o("roformer"),LLr=o(" \u2014 "),hz=a("a"),BLr=o("FlaxRoFormerForTokenClassification"),xLr=o(" (RoFormer model)"),kLr=l(),PM=a("li"),Q5e=a("strong"),RLr=o("xlm-roberta"),SLr=o(" \u2014 "),pz=a("a"),PLr=o("FlaxXLMRobertaForTokenClassification"),$Lr=o(" (XLM-RoBERTa model)"),ILr=l(),H5e=a("p"),jLr=o("Examples:"),DLr=l(),f(_7.$$.fragment),fRe=l(),Mf=a("h2"),$M=a("a"),U5e=a("span"),f(u7.$$.fragment),NLr=l(),J5e=a("span"),qLr=o("FlaxAutoModelForMultipleChoice"),mRe=l(),qr=a("div"),f(b7.$$.fragment),GLr=l(),Ef=a("p"),OLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Y5e=a("code"),XLr=o("from_pretrained()"),VLr=o("class method or the "),K5e=a("code"),zLr=o("from_config()"),WLr=o(`class
method.`),QLr=l(),v7=a("p"),HLr=o("This class cannot be instantiated directly using "),Z5e=a("code"),ULr=o("__init__()"),JLr=o(" (throws an error)."),YLr=l(),Pt=a("div"),f(T7.$$.fragment),KLr=l(),eve=a("p"),ZLr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),e7r=l(),yf=a("p"),o7r=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),r7r=o("not"),t7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rve=a("code"),a7r=o("from_pretrained()"),n7r=o("to load the model weights."),s7r=l(),tve=a("p"),l7r=o("Examples:"),i7r=l(),f(F7.$$.fragment),d7r=l(),$o=a("div"),f(C7.$$.fragment),c7r=l(),ave=a("p"),f7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),m7r=l(),jn=a("p"),g7r=o("The model class to instantiate is selected based on the "),nve=a("code"),h7r=o("model_type"),p7r=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),_7r=o("pretrained_model_name_or_path"),u7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),b7r=o("pretrained_model_name_or_path"),v7r=o(":"),T7r=l(),Se=a("ul"),IM=a("li"),ive=a("strong"),F7r=o("albert"),C7r=o(" \u2014 "),_z=a("a"),M7r=o("FlaxAlbertForMultipleChoice"),E7r=o(" (ALBERT model)"),y7r=l(),jM=a("li"),dve=a("strong"),w7r=o("bert"),A7r=o(" \u2014 "),uz=a("a"),L7r=o("FlaxBertForMultipleChoice"),B7r=o(" (BERT model)"),x7r=l(),DM=a("li"),cve=a("strong"),k7r=o("big_bird"),R7r=o(" \u2014 "),bz=a("a"),S7r=o("FlaxBigBirdForMultipleChoice"),P7r=o(" (BigBird model)"),$7r=l(),NM=a("li"),fve=a("strong"),I7r=o("distilbert"),j7r=o(" \u2014 "),vz=a("a"),D7r=o("FlaxDistilBertForMultipleChoice"),N7r=o(" (DistilBERT model)"),q7r=l(),qM=a("li"),mve=a("strong"),G7r=o("electra"),O7r=o(" \u2014 "),Tz=a("a"),X7r=o("FlaxElectraForMultipleChoice"),V7r=o(" (ELECTRA model)"),z7r=l(),GM=a("li"),gve=a("strong"),W7r=o("roberta"),Q7r=o(" \u2014 "),Fz=a("a"),H7r=o("FlaxRobertaForMultipleChoice"),U7r=o(" (RoBERTa model)"),J7r=l(),OM=a("li"),hve=a("strong"),Y7r=o("roformer"),K7r=o(" \u2014 "),Cz=a("a"),Z7r=o("FlaxRoFormerForMultipleChoice"),e8r=o(" (RoFormer model)"),o8r=l(),XM=a("li"),pve=a("strong"),r8r=o("xlm-roberta"),t8r=o(" \u2014 "),Mz=a("a"),a8r=o("FlaxXLMRobertaForMultipleChoice"),n8r=o(" (XLM-RoBERTa model)"),s8r=l(),_ve=a("p"),l8r=o("Examples:"),i8r=l(),f(M7.$$.fragment),gRe=l(),wf=a("h2"),VM=a("a"),uve=a("span"),f(E7.$$.fragment),d8r=l(),bve=a("span"),c8r=o("FlaxAutoModelForNextSentencePrediction"),hRe=l(),Gr=a("div"),f(y7.$$.fragment),f8r=l(),Af=a("p"),m8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vve=a("code"),g8r=o("from_pretrained()"),h8r=o("class method or the "),Tve=a("code"),p8r=o("from_config()"),_8r=o(`class
method.`),u8r=l(),w7=a("p"),b8r=o("This class cannot be instantiated directly using "),Fve=a("code"),v8r=o("__init__()"),T8r=o(" (throws an error)."),F8r=l(),$t=a("div"),f(A7.$$.fragment),C8r=l(),Cve=a("p"),M8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),E8r=l(),Lf=a("p"),y8r=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),w8r=o("not"),A8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eve=a("code"),L8r=o("from_pretrained()"),B8r=o("to load the model weights."),x8r=l(),yve=a("p"),k8r=o("Examples:"),R8r=l(),f(L7.$$.fragment),S8r=l(),Io=a("div"),f(B7.$$.fragment),P8r=l(),wve=a("p"),$8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),I8r=l(),Dn=a("p"),j8r=o("The model class to instantiate is selected based on the "),Ave=a("code"),D8r=o("model_type"),N8r=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),q8r=o("pretrained_model_name_or_path"),G8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),O8r=o("pretrained_model_name_or_path"),X8r=o(":"),V8r=l(),xve=a("ul"),zM=a("li"),kve=a("strong"),z8r=o("bert"),W8r=o(" \u2014 "),Ez=a("a"),Q8r=o("FlaxBertForNextSentencePrediction"),H8r=o(" (BERT model)"),U8r=l(),Rve=a("p"),J8r=o("Examples:"),Y8r=l(),f(x7.$$.fragment),pRe=l(),Bf=a("h2"),WM=a("a"),Sve=a("span"),f(k7.$$.fragment),K8r=l(),Pve=a("span"),Z8r=o("FlaxAutoModelForImageClassification"),_Re=l(),Or=a("div"),f(R7.$$.fragment),e9r=l(),xf=a("p"),o9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$ve=a("code"),r9r=o("from_pretrained()"),t9r=o("class method or the "),Ive=a("code"),a9r=o("from_config()"),n9r=o(`class
method.`),s9r=l(),S7=a("p"),l9r=o("This class cannot be instantiated directly using "),jve=a("code"),i9r=o("__init__()"),d9r=o(" (throws an error)."),c9r=l(),It=a("div"),f(P7.$$.fragment),f9r=l(),Dve=a("p"),m9r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),g9r=l(),kf=a("p"),h9r=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),p9r=o("not"),_9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qve=a("code"),u9r=o("from_pretrained()"),b9r=o("to load the model weights."),v9r=l(),Gve=a("p"),T9r=o("Examples:"),F9r=l(),f($7.$$.fragment),C9r=l(),jo=a("div"),f(I7.$$.fragment),M9r=l(),Ove=a("p"),E9r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),y9r=l(),Nn=a("p"),w9r=o("The model class to instantiate is selected based on the "),Xve=a("code"),A9r=o("model_type"),L9r=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),B9r=o("pretrained_model_name_or_path"),x9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=a("code"),k9r=o("pretrained_model_name_or_path"),R9r=o(":"),S9r=l(),j7=a("ul"),QM=a("li"),Wve=a("strong"),P9r=o("beit"),$9r=o(" \u2014 "),yz=a("a"),I9r=o("FlaxBeitForImageClassification"),j9r=o(" (BEiT model)"),D9r=l(),HM=a("li"),Qve=a("strong"),N9r=o("vit"),q9r=o(" \u2014 "),wz=a("a"),G9r=o("FlaxViTForImageClassification"),O9r=o(" (ViT model)"),X9r=l(),Hve=a("p"),V9r=o("Examples:"),z9r=l(),f(D7.$$.fragment),uRe=l(),Rf=a("h2"),UM=a("a"),Uve=a("span"),f(N7.$$.fragment),W9r=l(),Jve=a("span"),Q9r=o("FlaxAutoModelForVision2Seq"),bRe=l(),Xr=a("div"),f(q7.$$.fragment),H9r=l(),Sf=a("p"),U9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Yve=a("code"),J9r=o("from_pretrained()"),Y9r=o("class method or the "),Kve=a("code"),K9r=o("from_config()"),Z9r=o(`class
method.`),eBr=l(),G7=a("p"),oBr=o("This class cannot be instantiated directly using "),Zve=a("code"),rBr=o("__init__()"),tBr=o(" (throws an error)."),aBr=l(),jt=a("div"),f(O7.$$.fragment),nBr=l(),e6e=a("p"),sBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lBr=l(),Pf=a("p"),iBr=o(`Note:
Loading a model from its configuration file does `),o6e=a("strong"),dBr=o("not"),cBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),r6e=a("code"),fBr=o("from_pretrained()"),mBr=o("to load the model weights."),gBr=l(),t6e=a("p"),hBr=o("Examples:"),pBr=l(),f(X7.$$.fragment),_Br=l(),Do=a("div"),f(V7.$$.fragment),uBr=l(),a6e=a("p"),bBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vBr=l(),qn=a("p"),TBr=o("The model class to instantiate is selected based on the "),n6e=a("code"),FBr=o("model_type"),CBr=o(` property of the config object (either
passed as an argument or loaded from `),s6e=a("code"),MBr=o("pretrained_model_name_or_path"),EBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=a("code"),yBr=o("pretrained_model_name_or_path"),wBr=o(":"),ABr=l(),i6e=a("ul"),JM=a("li"),d6e=a("strong"),LBr=o("vision-encoder-decoder"),BBr=o(" \u2014 "),Az=a("a"),xBr=o("FlaxVisionEncoderDecoderModel"),kBr=o(" (Vision Encoder decoder model)"),RBr=l(),c6e=a("p"),SBr=o("Examples:"),PBr=l(),f(z7.$$.fragment),this.h()},l(c){const u=uTt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Pe=i(c),de=n(c,"H1",{class:!0});var W7=s(de);he=n(W7,"A",{id:!0,class:!0,href:!0});var f6e=s(he);io=n(f6e,"SPAN",{});var m6e=s(io);m(fe.$$.fragment,m6e),m6e.forEach(t),f6e.forEach(t),Fe=i(W7),Vo=n(W7,"SPAN",{});var IBr=s(Vo);ji=r(IBr,"Auto Classes"),IBr.forEach(t),W7.forEach(t),If=i(c),fa=n(c,"P",{});var TRe=s(fa);Di=r(TRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(TRe,"CODE",{});var jBr=s(Ni);J4=r(jBr,"from_pretrained()"),jBr.forEach(t),jf=r(TRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),TRe.forEach(t),Le=i(c),co=n(c,"P",{});var YM=s(co);qi=r(YM,"Instantiating one of "),Gn=n(YM,"A",{href:!0});var DBr=s(Gn);Y4=r(DBr,"AutoConfig"),DBr.forEach(t),On=r(YM,", "),Xn=n(YM,"A",{href:!0});var NBr=s(Xn);K4=r(NBr,"AutoModel"),NBr.forEach(t),Gi=r(YM,`, and
`),Vn=n(YM,"A",{href:!0});var qBr=s(Vn);Z4=r(qBr,"AutoTokenizer"),qBr.forEach(t),Oi=r(YM," will directly create a class of the relevant architecture. For instance"),YM.forEach(t),Df=i(c),m(qa.$$.fragment,c),fo=i(c),pe=n(c,"P",{});var FRe=s(pe);X8=r(FRe,"will create a model that is an instance of "),Xi=n(FRe,"A",{href:!0});var GBr=s(Xi);V8=r(GBr,"BertModel"),GBr.forEach(t),z8=r(FRe,"."),FRe.forEach(t),zo=i(c),Ga=n(c,"P",{});var CRe=s(Ga);W8=r(CRe,"There is one class of "),Nf=n(CRe,"CODE",{});var OBr=s(Nf);Q8=r(OBr,"AutoModel"),OBr.forEach(t),RPe=r(CRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),CRe.forEach(t),bxe=i(c),Vi=n(c,"H2",{class:!0});var MRe=s(Vi);qf=n(MRe,"A",{id:!0,class:!0,href:!0});var XBr=s(qf);TQ=n(XBr,"SPAN",{});var VBr=s(TQ);m(eE.$$.fragment,VBr),VBr.forEach(t),XBr.forEach(t),SPe=i(MRe),FQ=n(MRe,"SPAN",{});var zBr=s(FQ);PPe=r(zBr,"Extending the Auto Classes"),zBr.forEach(t),MRe.forEach(t),vxe=i(c),zn=n(c,"P",{});var Lz=s(zn);$Pe=r(Lz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),CQ=n(Lz,"CODE",{});var WBr=s(CQ);IPe=r(WBr,"NewModel"),WBr.forEach(t),jPe=r(Lz,", make sure you have a "),MQ=n(Lz,"CODE",{});var QBr=s(MQ);DPe=r(QBr,"NewModelConfig"),QBr.forEach(t),NPe=r(Lz,` then you can add those to the auto
classes like this:`),Lz.forEach(t),Txe=i(c),m(oE.$$.fragment,c),Fxe=i(c),H8=n(c,"P",{});var HBr=s(H8);qPe=r(HBr,"You will then be able to use the auto classes like you would usually do!"),HBr.forEach(t),Cxe=i(c),m(Gf.$$.fragment,c),Mxe=i(c),zi=n(c,"H2",{class:!0});var ERe=s(zi);Of=n(ERe,"A",{id:!0,class:!0,href:!0});var UBr=s(Of);EQ=n(UBr,"SPAN",{});var JBr=s(EQ);m(rE.$$.fragment,JBr),JBr.forEach(t),UBr.forEach(t),GPe=i(ERe),yQ=n(ERe,"SPAN",{});var YBr=s(yQ);OPe=r(YBr,"AutoConfig"),YBr.forEach(t),ERe.forEach(t),Exe=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);m(tE.$$.fragment,Os),XPe=i(Os),aE=n(Os,"P",{});var yRe=s(aE);VPe=r(yRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),U8=n(yRe,"A",{href:!0});var KBr=s(U8);zPe=r(KBr,"from_pretrained()"),KBr.forEach(t),WPe=r(yRe," class method."),yRe.forEach(t),QPe=i(Os),nE=n(Os,"P",{});var wRe=s(nE);HPe=r(wRe,"This class cannot be instantiated directly using "),wQ=n(wRe,"CODE",{});var ZBr=s(wQ);UPe=r(ZBr,"__init__()"),ZBr.forEach(t),JPe=r(wRe," (throws an error)."),wRe.forEach(t),YPe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(sE.$$.fragment,ga),KPe=i(ga),AQ=n(ga,"P",{});var exr=s(AQ);ZPe=r(exr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),exr.forEach(t),e$e=i(ga),Wi=n(ga,"P",{});var Bz=s(Wi);o$e=r(Bz,"The configuration class to instantiate is selected based on the "),LQ=n(Bz,"CODE",{});var oxr=s(LQ);r$e=r(oxr,"model_type"),oxr.forEach(t),t$e=r(Bz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),BQ=n(Bz,"CODE",{});var rxr=s(BQ);a$e=r(rxr,"pretrained_model_name_or_path"),rxr.forEach(t),n$e=r(Bz,":"),Bz.forEach(t),s$e=i(ga),v=n(ga,"UL",{});var T=s(v);Xf=n(T,"LI",{});var g6e=s(Xf);xQ=n(g6e,"STRONG",{});var txr=s(xQ);l$e=r(txr,"albert"),txr.forEach(t),i$e=r(g6e," \u2014 "),J8=n(g6e,"A",{href:!0});var axr=s(J8);d$e=r(axr,"AlbertConfig"),axr.forEach(t),c$e=r(g6e," (ALBERT model)"),g6e.forEach(t),f$e=i(T),Vf=n(T,"LI",{});var h6e=s(Vf);kQ=n(h6e,"STRONG",{});var nxr=s(kQ);m$e=r(nxr,"bart"),nxr.forEach(t),g$e=r(h6e," \u2014 "),Y8=n(h6e,"A",{href:!0});var sxr=s(Y8);h$e=r(sxr,"BartConfig"),sxr.forEach(t),p$e=r(h6e," (BART model)"),h6e.forEach(t),_$e=i(T),zf=n(T,"LI",{});var p6e=s(zf);RQ=n(p6e,"STRONG",{});var lxr=s(RQ);u$e=r(lxr,"beit"),lxr.forEach(t),b$e=r(p6e," \u2014 "),K8=n(p6e,"A",{href:!0});var ixr=s(K8);v$e=r(ixr,"BeitConfig"),ixr.forEach(t),T$e=r(p6e," (BEiT model)"),p6e.forEach(t),F$e=i(T),Wf=n(T,"LI",{});var _6e=s(Wf);SQ=n(_6e,"STRONG",{});var dxr=s(SQ);C$e=r(dxr,"bert"),dxr.forEach(t),M$e=r(_6e," \u2014 "),Z8=n(_6e,"A",{href:!0});var cxr=s(Z8);E$e=r(cxr,"BertConfig"),cxr.forEach(t),y$e=r(_6e," (BERT model)"),_6e.forEach(t),w$e=i(T),Qf=n(T,"LI",{});var u6e=s(Qf);PQ=n(u6e,"STRONG",{});var fxr=s(PQ);A$e=r(fxr,"bert-generation"),fxr.forEach(t),L$e=r(u6e," \u2014 "),e9=n(u6e,"A",{href:!0});var mxr=s(e9);B$e=r(mxr,"BertGenerationConfig"),mxr.forEach(t),x$e=r(u6e," (Bert Generation model)"),u6e.forEach(t),k$e=i(T),Hf=n(T,"LI",{});var b6e=s(Hf);$Q=n(b6e,"STRONG",{});var gxr=s($Q);R$e=r(gxr,"big_bird"),gxr.forEach(t),S$e=r(b6e," \u2014 "),o9=n(b6e,"A",{href:!0});var hxr=s(o9);P$e=r(hxr,"BigBirdConfig"),hxr.forEach(t),$$e=r(b6e," (BigBird model)"),b6e.forEach(t),I$e=i(T),Uf=n(T,"LI",{});var v6e=s(Uf);IQ=n(v6e,"STRONG",{});var pxr=s(IQ);j$e=r(pxr,"bigbird_pegasus"),pxr.forEach(t),D$e=r(v6e," \u2014 "),r9=n(v6e,"A",{href:!0});var _xr=s(r9);N$e=r(_xr,"BigBirdPegasusConfig"),_xr.forEach(t),q$e=r(v6e," (BigBirdPegasus model)"),v6e.forEach(t),G$e=i(T),Jf=n(T,"LI",{});var T6e=s(Jf);jQ=n(T6e,"STRONG",{});var uxr=s(jQ);O$e=r(uxr,"blenderbot"),uxr.forEach(t),X$e=r(T6e," \u2014 "),t9=n(T6e,"A",{href:!0});var bxr=s(t9);V$e=r(bxr,"BlenderbotConfig"),bxr.forEach(t),z$e=r(T6e," (Blenderbot model)"),T6e.forEach(t),W$e=i(T),Yf=n(T,"LI",{});var F6e=s(Yf);DQ=n(F6e,"STRONG",{});var vxr=s(DQ);Q$e=r(vxr,"blenderbot-small"),vxr.forEach(t),H$e=r(F6e," \u2014 "),a9=n(F6e,"A",{href:!0});var Txr=s(a9);U$e=r(Txr,"BlenderbotSmallConfig"),Txr.forEach(t),J$e=r(F6e," (BlenderbotSmall model)"),F6e.forEach(t),Y$e=i(T),Kf=n(T,"LI",{});var C6e=s(Kf);NQ=n(C6e,"STRONG",{});var Fxr=s(NQ);K$e=r(Fxr,"camembert"),Fxr.forEach(t),Z$e=r(C6e," \u2014 "),n9=n(C6e,"A",{href:!0});var Cxr=s(n9);eIe=r(Cxr,"CamembertConfig"),Cxr.forEach(t),oIe=r(C6e," (CamemBERT model)"),C6e.forEach(t),rIe=i(T),Zf=n(T,"LI",{});var M6e=s(Zf);qQ=n(M6e,"STRONG",{});var Mxr=s(qQ);tIe=r(Mxr,"canine"),Mxr.forEach(t),aIe=r(M6e," \u2014 "),s9=n(M6e,"A",{href:!0});var Exr=s(s9);nIe=r(Exr,"CanineConfig"),Exr.forEach(t),sIe=r(M6e," (Canine model)"),M6e.forEach(t),lIe=i(T),em=n(T,"LI",{});var E6e=s(em);GQ=n(E6e,"STRONG",{});var yxr=s(GQ);iIe=r(yxr,"clip"),yxr.forEach(t),dIe=r(E6e," \u2014 "),l9=n(E6e,"A",{href:!0});var wxr=s(l9);cIe=r(wxr,"CLIPConfig"),wxr.forEach(t),fIe=r(E6e," (CLIP model)"),E6e.forEach(t),mIe=i(T),om=n(T,"LI",{});var y6e=s(om);OQ=n(y6e,"STRONG",{});var Axr=s(OQ);gIe=r(Axr,"convbert"),Axr.forEach(t),hIe=r(y6e," \u2014 "),i9=n(y6e,"A",{href:!0});var Lxr=s(i9);pIe=r(Lxr,"ConvBertConfig"),Lxr.forEach(t),_Ie=r(y6e," (ConvBERT model)"),y6e.forEach(t),uIe=i(T),rm=n(T,"LI",{});var w6e=s(rm);XQ=n(w6e,"STRONG",{});var Bxr=s(XQ);bIe=r(Bxr,"convnext"),Bxr.forEach(t),vIe=r(w6e," \u2014 "),d9=n(w6e,"A",{href:!0});var xxr=s(d9);TIe=r(xxr,"ConvNextConfig"),xxr.forEach(t),FIe=r(w6e," (ConvNext model)"),w6e.forEach(t),CIe=i(T),tm=n(T,"LI",{});var A6e=s(tm);VQ=n(A6e,"STRONG",{});var kxr=s(VQ);MIe=r(kxr,"ctrl"),kxr.forEach(t),EIe=r(A6e," \u2014 "),c9=n(A6e,"A",{href:!0});var Rxr=s(c9);yIe=r(Rxr,"CTRLConfig"),Rxr.forEach(t),wIe=r(A6e," (CTRL model)"),A6e.forEach(t),AIe=i(T),am=n(T,"LI",{});var L6e=s(am);zQ=n(L6e,"STRONG",{});var Sxr=s(zQ);LIe=r(Sxr,"data2vec-audio"),Sxr.forEach(t),BIe=r(L6e," \u2014 "),f9=n(L6e,"A",{href:!0});var Pxr=s(f9);xIe=r(Pxr,"Data2VecAudioConfig"),Pxr.forEach(t),kIe=r(L6e," (Data2VecAudio model)"),L6e.forEach(t),RIe=i(T),nm=n(T,"LI",{});var B6e=s(nm);WQ=n(B6e,"STRONG",{});var $xr=s(WQ);SIe=r($xr,"data2vec-text"),$xr.forEach(t),PIe=r(B6e," \u2014 "),m9=n(B6e,"A",{href:!0});var Ixr=s(m9);$Ie=r(Ixr,"Data2VecTextConfig"),Ixr.forEach(t),IIe=r(B6e," (Data2VecText model)"),B6e.forEach(t),jIe=i(T),sm=n(T,"LI",{});var x6e=s(sm);QQ=n(x6e,"STRONG",{});var jxr=s(QQ);DIe=r(jxr,"deberta"),jxr.forEach(t),NIe=r(x6e," \u2014 "),g9=n(x6e,"A",{href:!0});var Dxr=s(g9);qIe=r(Dxr,"DebertaConfig"),Dxr.forEach(t),GIe=r(x6e," (DeBERTa model)"),x6e.forEach(t),OIe=i(T),lm=n(T,"LI",{});var k6e=s(lm);HQ=n(k6e,"STRONG",{});var Nxr=s(HQ);XIe=r(Nxr,"deberta-v2"),Nxr.forEach(t),VIe=r(k6e," \u2014 "),h9=n(k6e,"A",{href:!0});var qxr=s(h9);zIe=r(qxr,"DebertaV2Config"),qxr.forEach(t),WIe=r(k6e," (DeBERTa-v2 model)"),k6e.forEach(t),QIe=i(T),im=n(T,"LI",{});var R6e=s(im);UQ=n(R6e,"STRONG",{});var Gxr=s(UQ);HIe=r(Gxr,"deit"),Gxr.forEach(t),UIe=r(R6e," \u2014 "),p9=n(R6e,"A",{href:!0});var Oxr=s(p9);JIe=r(Oxr,"DeiTConfig"),Oxr.forEach(t),YIe=r(R6e," (DeiT model)"),R6e.forEach(t),KIe=i(T),dm=n(T,"LI",{});var S6e=s(dm);JQ=n(S6e,"STRONG",{});var Xxr=s(JQ);ZIe=r(Xxr,"detr"),Xxr.forEach(t),eje=r(S6e," \u2014 "),_9=n(S6e,"A",{href:!0});var Vxr=s(_9);oje=r(Vxr,"DetrConfig"),Vxr.forEach(t),rje=r(S6e," (DETR model)"),S6e.forEach(t),tje=i(T),cm=n(T,"LI",{});var P6e=s(cm);YQ=n(P6e,"STRONG",{});var zxr=s(YQ);aje=r(zxr,"distilbert"),zxr.forEach(t),nje=r(P6e," \u2014 "),u9=n(P6e,"A",{href:!0});var Wxr=s(u9);sje=r(Wxr,"DistilBertConfig"),Wxr.forEach(t),lje=r(P6e," (DistilBERT model)"),P6e.forEach(t),ije=i(T),fm=n(T,"LI",{});var $6e=s(fm);KQ=n($6e,"STRONG",{});var Qxr=s(KQ);dje=r(Qxr,"dpr"),Qxr.forEach(t),cje=r($6e," \u2014 "),b9=n($6e,"A",{href:!0});var Hxr=s(b9);fje=r(Hxr,"DPRConfig"),Hxr.forEach(t),mje=r($6e," (DPR model)"),$6e.forEach(t),gje=i(T),mm=n(T,"LI",{});var I6e=s(mm);ZQ=n(I6e,"STRONG",{});var Uxr=s(ZQ);hje=r(Uxr,"electra"),Uxr.forEach(t),pje=r(I6e," \u2014 "),v9=n(I6e,"A",{href:!0});var Jxr=s(v9);_je=r(Jxr,"ElectraConfig"),Jxr.forEach(t),uje=r(I6e," (ELECTRA model)"),I6e.forEach(t),bje=i(T),gm=n(T,"LI",{});var j6e=s(gm);eH=n(j6e,"STRONG",{});var Yxr=s(eH);vje=r(Yxr,"encoder-decoder"),Yxr.forEach(t),Tje=r(j6e," \u2014 "),T9=n(j6e,"A",{href:!0});var Kxr=s(T9);Fje=r(Kxr,"EncoderDecoderConfig"),Kxr.forEach(t),Cje=r(j6e," (Encoder decoder model)"),j6e.forEach(t),Mje=i(T),hm=n(T,"LI",{});var D6e=s(hm);oH=n(D6e,"STRONG",{});var Zxr=s(oH);Eje=r(Zxr,"flaubert"),Zxr.forEach(t),yje=r(D6e," \u2014 "),F9=n(D6e,"A",{href:!0});var ekr=s(F9);wje=r(ekr,"FlaubertConfig"),ekr.forEach(t),Aje=r(D6e," (FlauBERT model)"),D6e.forEach(t),Lje=i(T),pm=n(T,"LI",{});var N6e=s(pm);rH=n(N6e,"STRONG",{});var okr=s(rH);Bje=r(okr,"fnet"),okr.forEach(t),xje=r(N6e," \u2014 "),C9=n(N6e,"A",{href:!0});var rkr=s(C9);kje=r(rkr,"FNetConfig"),rkr.forEach(t),Rje=r(N6e," (FNet model)"),N6e.forEach(t),Sje=i(T),_m=n(T,"LI",{});var q6e=s(_m);tH=n(q6e,"STRONG",{});var tkr=s(tH);Pje=r(tkr,"fsmt"),tkr.forEach(t),$je=r(q6e," \u2014 "),M9=n(q6e,"A",{href:!0});var akr=s(M9);Ije=r(akr,"FSMTConfig"),akr.forEach(t),jje=r(q6e," (FairSeq Machine-Translation model)"),q6e.forEach(t),Dje=i(T),um=n(T,"LI",{});var G6e=s(um);aH=n(G6e,"STRONG",{});var nkr=s(aH);Nje=r(nkr,"funnel"),nkr.forEach(t),qje=r(G6e," \u2014 "),E9=n(G6e,"A",{href:!0});var skr=s(E9);Gje=r(skr,"FunnelConfig"),skr.forEach(t),Oje=r(G6e," (Funnel Transformer model)"),G6e.forEach(t),Xje=i(T),bm=n(T,"LI",{});var O6e=s(bm);nH=n(O6e,"STRONG",{});var lkr=s(nH);Vje=r(lkr,"gpt2"),lkr.forEach(t),zje=r(O6e," \u2014 "),y9=n(O6e,"A",{href:!0});var ikr=s(y9);Wje=r(ikr,"GPT2Config"),ikr.forEach(t),Qje=r(O6e," (OpenAI GPT-2 model)"),O6e.forEach(t),Hje=i(T),vm=n(T,"LI",{});var X6e=s(vm);sH=n(X6e,"STRONG",{});var dkr=s(sH);Uje=r(dkr,"gpt_neo"),dkr.forEach(t),Jje=r(X6e," \u2014 "),w9=n(X6e,"A",{href:!0});var ckr=s(w9);Yje=r(ckr,"GPTNeoConfig"),ckr.forEach(t),Kje=r(X6e," (GPT Neo model)"),X6e.forEach(t),Zje=i(T),Tm=n(T,"LI",{});var V6e=s(Tm);lH=n(V6e,"STRONG",{});var fkr=s(lH);eDe=r(fkr,"gptj"),fkr.forEach(t),oDe=r(V6e," \u2014 "),A9=n(V6e,"A",{href:!0});var mkr=s(A9);rDe=r(mkr,"GPTJConfig"),mkr.forEach(t),tDe=r(V6e," (GPT-J model)"),V6e.forEach(t),aDe=i(T),Fm=n(T,"LI",{});var z6e=s(Fm);iH=n(z6e,"STRONG",{});var gkr=s(iH);nDe=r(gkr,"hubert"),gkr.forEach(t),sDe=r(z6e," \u2014 "),L9=n(z6e,"A",{href:!0});var hkr=s(L9);lDe=r(hkr,"HubertConfig"),hkr.forEach(t),iDe=r(z6e," (Hubert model)"),z6e.forEach(t),dDe=i(T),Cm=n(T,"LI",{});var W6e=s(Cm);dH=n(W6e,"STRONG",{});var pkr=s(dH);cDe=r(pkr,"ibert"),pkr.forEach(t),fDe=r(W6e," \u2014 "),B9=n(W6e,"A",{href:!0});var _kr=s(B9);mDe=r(_kr,"IBertConfig"),_kr.forEach(t),gDe=r(W6e," (I-BERT model)"),W6e.forEach(t),hDe=i(T),Mm=n(T,"LI",{});var Q6e=s(Mm);cH=n(Q6e,"STRONG",{});var ukr=s(cH);pDe=r(ukr,"imagegpt"),ukr.forEach(t),_De=r(Q6e," \u2014 "),x9=n(Q6e,"A",{href:!0});var bkr=s(x9);uDe=r(bkr,"ImageGPTConfig"),bkr.forEach(t),bDe=r(Q6e," (ImageGPT model)"),Q6e.forEach(t),vDe=i(T),Em=n(T,"LI",{});var H6e=s(Em);fH=n(H6e,"STRONG",{});var vkr=s(fH);TDe=r(vkr,"layoutlm"),vkr.forEach(t),FDe=r(H6e," \u2014 "),k9=n(H6e,"A",{href:!0});var Tkr=s(k9);CDe=r(Tkr,"LayoutLMConfig"),Tkr.forEach(t),MDe=r(H6e," (LayoutLM model)"),H6e.forEach(t),EDe=i(T),ym=n(T,"LI",{});var U6e=s(ym);mH=n(U6e,"STRONG",{});var Fkr=s(mH);yDe=r(Fkr,"layoutlmv2"),Fkr.forEach(t),wDe=r(U6e," \u2014 "),R9=n(U6e,"A",{href:!0});var Ckr=s(R9);ADe=r(Ckr,"LayoutLMv2Config"),Ckr.forEach(t),LDe=r(U6e," (LayoutLMv2 model)"),U6e.forEach(t),BDe=i(T),wm=n(T,"LI",{});var J6e=s(wm);gH=n(J6e,"STRONG",{});var Mkr=s(gH);xDe=r(Mkr,"led"),Mkr.forEach(t),kDe=r(J6e," \u2014 "),S9=n(J6e,"A",{href:!0});var Ekr=s(S9);RDe=r(Ekr,"LEDConfig"),Ekr.forEach(t),SDe=r(J6e," (LED model)"),J6e.forEach(t),PDe=i(T),Am=n(T,"LI",{});var Y6e=s(Am);hH=n(Y6e,"STRONG",{});var ykr=s(hH);$De=r(ykr,"longformer"),ykr.forEach(t),IDe=r(Y6e," \u2014 "),P9=n(Y6e,"A",{href:!0});var wkr=s(P9);jDe=r(wkr,"LongformerConfig"),wkr.forEach(t),DDe=r(Y6e," (Longformer model)"),Y6e.forEach(t),NDe=i(T),Lm=n(T,"LI",{});var K6e=s(Lm);pH=n(K6e,"STRONG",{});var Akr=s(pH);qDe=r(Akr,"luke"),Akr.forEach(t),GDe=r(K6e," \u2014 "),$9=n(K6e,"A",{href:!0});var Lkr=s($9);ODe=r(Lkr,"LukeConfig"),Lkr.forEach(t),XDe=r(K6e," (LUKE model)"),K6e.forEach(t),VDe=i(T),Bm=n(T,"LI",{});var Z6e=s(Bm);_H=n(Z6e,"STRONG",{});var Bkr=s(_H);zDe=r(Bkr,"lxmert"),Bkr.forEach(t),WDe=r(Z6e," \u2014 "),I9=n(Z6e,"A",{href:!0});var xkr=s(I9);QDe=r(xkr,"LxmertConfig"),xkr.forEach(t),HDe=r(Z6e," (LXMERT model)"),Z6e.forEach(t),UDe=i(T),xm=n(T,"LI",{});var eTe=s(xm);uH=n(eTe,"STRONG",{});var kkr=s(uH);JDe=r(kkr,"m2m_100"),kkr.forEach(t),YDe=r(eTe," \u2014 "),j9=n(eTe,"A",{href:!0});var Rkr=s(j9);KDe=r(Rkr,"M2M100Config"),Rkr.forEach(t),ZDe=r(eTe," (M2M100 model)"),eTe.forEach(t),eNe=i(T),km=n(T,"LI",{});var oTe=s(km);bH=n(oTe,"STRONG",{});var Skr=s(bH);oNe=r(Skr,"marian"),Skr.forEach(t),rNe=r(oTe," \u2014 "),D9=n(oTe,"A",{href:!0});var Pkr=s(D9);tNe=r(Pkr,"MarianConfig"),Pkr.forEach(t),aNe=r(oTe," (Marian model)"),oTe.forEach(t),nNe=i(T),Rm=n(T,"LI",{});var rTe=s(Rm);vH=n(rTe,"STRONG",{});var $kr=s(vH);sNe=r($kr,"maskformer"),$kr.forEach(t),lNe=r(rTe," \u2014 "),N9=n(rTe,"A",{href:!0});var Ikr=s(N9);iNe=r(Ikr,"MaskFormerConfig"),Ikr.forEach(t),dNe=r(rTe," (MaskFormer model)"),rTe.forEach(t),cNe=i(T),Sm=n(T,"LI",{});var tTe=s(Sm);TH=n(tTe,"STRONG",{});var jkr=s(TH);fNe=r(jkr,"mbart"),jkr.forEach(t),mNe=r(tTe," \u2014 "),q9=n(tTe,"A",{href:!0});var Dkr=s(q9);gNe=r(Dkr,"MBartConfig"),Dkr.forEach(t),hNe=r(tTe," (mBART model)"),tTe.forEach(t),pNe=i(T),Pm=n(T,"LI",{});var aTe=s(Pm);FH=n(aTe,"STRONG",{});var Nkr=s(FH);_Ne=r(Nkr,"megatron-bert"),Nkr.forEach(t),uNe=r(aTe," \u2014 "),G9=n(aTe,"A",{href:!0});var qkr=s(G9);bNe=r(qkr,"MegatronBertConfig"),qkr.forEach(t),vNe=r(aTe," (MegatronBert model)"),aTe.forEach(t),TNe=i(T),$m=n(T,"LI",{});var nTe=s($m);CH=n(nTe,"STRONG",{});var Gkr=s(CH);FNe=r(Gkr,"mobilebert"),Gkr.forEach(t),CNe=r(nTe," \u2014 "),O9=n(nTe,"A",{href:!0});var Okr=s(O9);MNe=r(Okr,"MobileBertConfig"),Okr.forEach(t),ENe=r(nTe," (MobileBERT model)"),nTe.forEach(t),yNe=i(T),Im=n(T,"LI",{});var sTe=s(Im);MH=n(sTe,"STRONG",{});var Xkr=s(MH);wNe=r(Xkr,"mpnet"),Xkr.forEach(t),ANe=r(sTe," \u2014 "),X9=n(sTe,"A",{href:!0});var Vkr=s(X9);LNe=r(Vkr,"MPNetConfig"),Vkr.forEach(t),BNe=r(sTe," (MPNet model)"),sTe.forEach(t),xNe=i(T),jm=n(T,"LI",{});var lTe=s(jm);EH=n(lTe,"STRONG",{});var zkr=s(EH);kNe=r(zkr,"mt5"),zkr.forEach(t),RNe=r(lTe," \u2014 "),V9=n(lTe,"A",{href:!0});var Wkr=s(V9);SNe=r(Wkr,"MT5Config"),Wkr.forEach(t),PNe=r(lTe," (mT5 model)"),lTe.forEach(t),$Ne=i(T),Dm=n(T,"LI",{});var iTe=s(Dm);yH=n(iTe,"STRONG",{});var Qkr=s(yH);INe=r(Qkr,"nystromformer"),Qkr.forEach(t),jNe=r(iTe," \u2014 "),z9=n(iTe,"A",{href:!0});var Hkr=s(z9);DNe=r(Hkr,"NystromformerConfig"),Hkr.forEach(t),NNe=r(iTe," (Nystromformer model)"),iTe.forEach(t),qNe=i(T),Nm=n(T,"LI",{});var dTe=s(Nm);wH=n(dTe,"STRONG",{});var Ukr=s(wH);GNe=r(Ukr,"openai-gpt"),Ukr.forEach(t),ONe=r(dTe," \u2014 "),W9=n(dTe,"A",{href:!0});var Jkr=s(W9);XNe=r(Jkr,"OpenAIGPTConfig"),Jkr.forEach(t),VNe=r(dTe," (OpenAI GPT model)"),dTe.forEach(t),zNe=i(T),qm=n(T,"LI",{});var cTe=s(qm);AH=n(cTe,"STRONG",{});var Ykr=s(AH);WNe=r(Ykr,"pegasus"),Ykr.forEach(t),QNe=r(cTe," \u2014 "),Q9=n(cTe,"A",{href:!0});var Kkr=s(Q9);HNe=r(Kkr,"PegasusConfig"),Kkr.forEach(t),UNe=r(cTe," (Pegasus model)"),cTe.forEach(t),JNe=i(T),Gm=n(T,"LI",{});var fTe=s(Gm);LH=n(fTe,"STRONG",{});var Zkr=s(LH);YNe=r(Zkr,"perceiver"),Zkr.forEach(t),KNe=r(fTe," \u2014 "),H9=n(fTe,"A",{href:!0});var eRr=s(H9);ZNe=r(eRr,"PerceiverConfig"),eRr.forEach(t),eqe=r(fTe," (Perceiver model)"),fTe.forEach(t),oqe=i(T),Om=n(T,"LI",{});var mTe=s(Om);BH=n(mTe,"STRONG",{});var oRr=s(BH);rqe=r(oRr,"plbart"),oRr.forEach(t),tqe=r(mTe," \u2014 "),U9=n(mTe,"A",{href:!0});var rRr=s(U9);aqe=r(rRr,"PLBartConfig"),rRr.forEach(t),nqe=r(mTe," (PLBart model)"),mTe.forEach(t),sqe=i(T),Xm=n(T,"LI",{});var gTe=s(Xm);xH=n(gTe,"STRONG",{});var tRr=s(xH);lqe=r(tRr,"poolformer"),tRr.forEach(t),iqe=r(gTe," \u2014 "),J9=n(gTe,"A",{href:!0});var aRr=s(J9);dqe=r(aRr,"PoolFormerConfig"),aRr.forEach(t),cqe=r(gTe," (PoolFormer model)"),gTe.forEach(t),fqe=i(T),Vm=n(T,"LI",{});var hTe=s(Vm);kH=n(hTe,"STRONG",{});var nRr=s(kH);mqe=r(nRr,"prophetnet"),nRr.forEach(t),gqe=r(hTe," \u2014 "),Y9=n(hTe,"A",{href:!0});var sRr=s(Y9);hqe=r(sRr,"ProphetNetConfig"),sRr.forEach(t),pqe=r(hTe," (ProphetNet model)"),hTe.forEach(t),_qe=i(T),zm=n(T,"LI",{});var pTe=s(zm);RH=n(pTe,"STRONG",{});var lRr=s(RH);uqe=r(lRr,"qdqbert"),lRr.forEach(t),bqe=r(pTe," \u2014 "),K9=n(pTe,"A",{href:!0});var iRr=s(K9);vqe=r(iRr,"QDQBertConfig"),iRr.forEach(t),Tqe=r(pTe," (QDQBert model)"),pTe.forEach(t),Fqe=i(T),Wm=n(T,"LI",{});var _Te=s(Wm);SH=n(_Te,"STRONG",{});var dRr=s(SH);Cqe=r(dRr,"rag"),dRr.forEach(t),Mqe=r(_Te," \u2014 "),Z9=n(_Te,"A",{href:!0});var cRr=s(Z9);Eqe=r(cRr,"RagConfig"),cRr.forEach(t),yqe=r(_Te," (RAG model)"),_Te.forEach(t),wqe=i(T),Qm=n(T,"LI",{});var uTe=s(Qm);PH=n(uTe,"STRONG",{});var fRr=s(PH);Aqe=r(fRr,"realm"),fRr.forEach(t),Lqe=r(uTe," \u2014 "),eB=n(uTe,"A",{href:!0});var mRr=s(eB);Bqe=r(mRr,"RealmConfig"),mRr.forEach(t),xqe=r(uTe," (Realm model)"),uTe.forEach(t),kqe=i(T),Hm=n(T,"LI",{});var bTe=s(Hm);$H=n(bTe,"STRONG",{});var gRr=s($H);Rqe=r(gRr,"reformer"),gRr.forEach(t),Sqe=r(bTe," \u2014 "),oB=n(bTe,"A",{href:!0});var hRr=s(oB);Pqe=r(hRr,"ReformerConfig"),hRr.forEach(t),$qe=r(bTe," (Reformer model)"),bTe.forEach(t),Iqe=i(T),Um=n(T,"LI",{});var vTe=s(Um);IH=n(vTe,"STRONG",{});var pRr=s(IH);jqe=r(pRr,"rembert"),pRr.forEach(t),Dqe=r(vTe," \u2014 "),rB=n(vTe,"A",{href:!0});var _Rr=s(rB);Nqe=r(_Rr,"RemBertConfig"),_Rr.forEach(t),qqe=r(vTe," (RemBERT model)"),vTe.forEach(t),Gqe=i(T),Jm=n(T,"LI",{});var TTe=s(Jm);jH=n(TTe,"STRONG",{});var uRr=s(jH);Oqe=r(uRr,"retribert"),uRr.forEach(t),Xqe=r(TTe," \u2014 "),tB=n(TTe,"A",{href:!0});var bRr=s(tB);Vqe=r(bRr,"RetriBertConfig"),bRr.forEach(t),zqe=r(TTe," (RetriBERT model)"),TTe.forEach(t),Wqe=i(T),Ym=n(T,"LI",{});var FTe=s(Ym);DH=n(FTe,"STRONG",{});var vRr=s(DH);Qqe=r(vRr,"roberta"),vRr.forEach(t),Hqe=r(FTe," \u2014 "),aB=n(FTe,"A",{href:!0});var TRr=s(aB);Uqe=r(TRr,"RobertaConfig"),TRr.forEach(t),Jqe=r(FTe," (RoBERTa model)"),FTe.forEach(t),Yqe=i(T),Km=n(T,"LI",{});var CTe=s(Km);NH=n(CTe,"STRONG",{});var FRr=s(NH);Kqe=r(FRr,"roformer"),FRr.forEach(t),Zqe=r(CTe," \u2014 "),nB=n(CTe,"A",{href:!0});var CRr=s(nB);eGe=r(CRr,"RoFormerConfig"),CRr.forEach(t),oGe=r(CTe," (RoFormer model)"),CTe.forEach(t),rGe=i(T),Zm=n(T,"LI",{});var MTe=s(Zm);qH=n(MTe,"STRONG",{});var MRr=s(qH);tGe=r(MRr,"segformer"),MRr.forEach(t),aGe=r(MTe," \u2014 "),sB=n(MTe,"A",{href:!0});var ERr=s(sB);nGe=r(ERr,"SegformerConfig"),ERr.forEach(t),sGe=r(MTe," (SegFormer model)"),MTe.forEach(t),lGe=i(T),eg=n(T,"LI",{});var ETe=s(eg);GH=n(ETe,"STRONG",{});var yRr=s(GH);iGe=r(yRr,"sew"),yRr.forEach(t),dGe=r(ETe," \u2014 "),lB=n(ETe,"A",{href:!0});var wRr=s(lB);cGe=r(wRr,"SEWConfig"),wRr.forEach(t),fGe=r(ETe," (SEW model)"),ETe.forEach(t),mGe=i(T),og=n(T,"LI",{});var yTe=s(og);OH=n(yTe,"STRONG",{});var ARr=s(OH);gGe=r(ARr,"sew-d"),ARr.forEach(t),hGe=r(yTe," \u2014 "),iB=n(yTe,"A",{href:!0});var LRr=s(iB);pGe=r(LRr,"SEWDConfig"),LRr.forEach(t),_Ge=r(yTe," (SEW-D model)"),yTe.forEach(t),uGe=i(T),rg=n(T,"LI",{});var wTe=s(rg);XH=n(wTe,"STRONG",{});var BRr=s(XH);bGe=r(BRr,"speech-encoder-decoder"),BRr.forEach(t),vGe=r(wTe," \u2014 "),dB=n(wTe,"A",{href:!0});var xRr=s(dB);TGe=r(xRr,"SpeechEncoderDecoderConfig"),xRr.forEach(t),FGe=r(wTe," (Speech Encoder decoder model)"),wTe.forEach(t),CGe=i(T),tg=n(T,"LI",{});var ATe=s(tg);VH=n(ATe,"STRONG",{});var kRr=s(VH);MGe=r(kRr,"speech_to_text"),kRr.forEach(t),EGe=r(ATe," \u2014 "),cB=n(ATe,"A",{href:!0});var RRr=s(cB);yGe=r(RRr,"Speech2TextConfig"),RRr.forEach(t),wGe=r(ATe," (Speech2Text model)"),ATe.forEach(t),AGe=i(T),ag=n(T,"LI",{});var LTe=s(ag);zH=n(LTe,"STRONG",{});var SRr=s(zH);LGe=r(SRr,"speech_to_text_2"),SRr.forEach(t),BGe=r(LTe," \u2014 "),fB=n(LTe,"A",{href:!0});var PRr=s(fB);xGe=r(PRr,"Speech2Text2Config"),PRr.forEach(t),kGe=r(LTe," (Speech2Text2 model)"),LTe.forEach(t),RGe=i(T),ng=n(T,"LI",{});var BTe=s(ng);WH=n(BTe,"STRONG",{});var $Rr=s(WH);SGe=r($Rr,"splinter"),$Rr.forEach(t),PGe=r(BTe," \u2014 "),mB=n(BTe,"A",{href:!0});var IRr=s(mB);$Ge=r(IRr,"SplinterConfig"),IRr.forEach(t),IGe=r(BTe," (Splinter model)"),BTe.forEach(t),jGe=i(T),sg=n(T,"LI",{});var xTe=s(sg);QH=n(xTe,"STRONG",{});var jRr=s(QH);DGe=r(jRr,"squeezebert"),jRr.forEach(t),NGe=r(xTe," \u2014 "),gB=n(xTe,"A",{href:!0});var DRr=s(gB);qGe=r(DRr,"SqueezeBertConfig"),DRr.forEach(t),GGe=r(xTe," (SqueezeBERT model)"),xTe.forEach(t),OGe=i(T),lg=n(T,"LI",{});var kTe=s(lg);HH=n(kTe,"STRONG",{});var NRr=s(HH);XGe=r(NRr,"swin"),NRr.forEach(t),VGe=r(kTe," \u2014 "),hB=n(kTe,"A",{href:!0});var qRr=s(hB);zGe=r(qRr,"SwinConfig"),qRr.forEach(t),WGe=r(kTe," (Swin model)"),kTe.forEach(t),QGe=i(T),ig=n(T,"LI",{});var RTe=s(ig);UH=n(RTe,"STRONG",{});var GRr=s(UH);HGe=r(GRr,"t5"),GRr.forEach(t),UGe=r(RTe," \u2014 "),pB=n(RTe,"A",{href:!0});var ORr=s(pB);JGe=r(ORr,"T5Config"),ORr.forEach(t),YGe=r(RTe," (T5 model)"),RTe.forEach(t),KGe=i(T),dg=n(T,"LI",{});var STe=s(dg);JH=n(STe,"STRONG",{});var XRr=s(JH);ZGe=r(XRr,"tapas"),XRr.forEach(t),eOe=r(STe," \u2014 "),_B=n(STe,"A",{href:!0});var VRr=s(_B);oOe=r(VRr,"TapasConfig"),VRr.forEach(t),rOe=r(STe," (TAPAS model)"),STe.forEach(t),tOe=i(T),cg=n(T,"LI",{});var PTe=s(cg);YH=n(PTe,"STRONG",{});var zRr=s(YH);aOe=r(zRr,"transfo-xl"),zRr.forEach(t),nOe=r(PTe," \u2014 "),uB=n(PTe,"A",{href:!0});var WRr=s(uB);sOe=r(WRr,"TransfoXLConfig"),WRr.forEach(t),lOe=r(PTe," (Transformer-XL model)"),PTe.forEach(t),iOe=i(T),fg=n(T,"LI",{});var $Te=s(fg);KH=n($Te,"STRONG",{});var QRr=s(KH);dOe=r(QRr,"trocr"),QRr.forEach(t),cOe=r($Te," \u2014 "),bB=n($Te,"A",{href:!0});var HRr=s(bB);fOe=r(HRr,"TrOCRConfig"),HRr.forEach(t),mOe=r($Te," (TrOCR model)"),$Te.forEach(t),gOe=i(T),mg=n(T,"LI",{});var ITe=s(mg);ZH=n(ITe,"STRONG",{});var URr=s(ZH);hOe=r(URr,"unispeech"),URr.forEach(t),pOe=r(ITe," \u2014 "),vB=n(ITe,"A",{href:!0});var JRr=s(vB);_Oe=r(JRr,"UniSpeechConfig"),JRr.forEach(t),uOe=r(ITe," (UniSpeech model)"),ITe.forEach(t),bOe=i(T),gg=n(T,"LI",{});var jTe=s(gg);eU=n(jTe,"STRONG",{});var YRr=s(eU);vOe=r(YRr,"unispeech-sat"),YRr.forEach(t),TOe=r(jTe," \u2014 "),TB=n(jTe,"A",{href:!0});var KRr=s(TB);FOe=r(KRr,"UniSpeechSatConfig"),KRr.forEach(t),COe=r(jTe," (UniSpeechSat model)"),jTe.forEach(t),MOe=i(T),hg=n(T,"LI",{});var DTe=s(hg);oU=n(DTe,"STRONG",{});var ZRr=s(oU);EOe=r(ZRr,"vilt"),ZRr.forEach(t),yOe=r(DTe," \u2014 "),FB=n(DTe,"A",{href:!0});var eSr=s(FB);wOe=r(eSr,"ViltConfig"),eSr.forEach(t),AOe=r(DTe," (ViLT model)"),DTe.forEach(t),LOe=i(T),pg=n(T,"LI",{});var NTe=s(pg);rU=n(NTe,"STRONG",{});var oSr=s(rU);BOe=r(oSr,"vision-encoder-decoder"),oSr.forEach(t),xOe=r(NTe," \u2014 "),CB=n(NTe,"A",{href:!0});var rSr=s(CB);kOe=r(rSr,"VisionEncoderDecoderConfig"),rSr.forEach(t),ROe=r(NTe," (Vision Encoder decoder model)"),NTe.forEach(t),SOe=i(T),_g=n(T,"LI",{});var qTe=s(_g);tU=n(qTe,"STRONG",{});var tSr=s(tU);POe=r(tSr,"vision-text-dual-encoder"),tSr.forEach(t),$Oe=r(qTe," \u2014 "),MB=n(qTe,"A",{href:!0});var aSr=s(MB);IOe=r(aSr,"VisionTextDualEncoderConfig"),aSr.forEach(t),jOe=r(qTe," (VisionTextDualEncoder model)"),qTe.forEach(t),DOe=i(T),ug=n(T,"LI",{});var GTe=s(ug);aU=n(GTe,"STRONG",{});var nSr=s(aU);NOe=r(nSr,"visual_bert"),nSr.forEach(t),qOe=r(GTe," \u2014 "),EB=n(GTe,"A",{href:!0});var sSr=s(EB);GOe=r(sSr,"VisualBertConfig"),sSr.forEach(t),OOe=r(GTe," (VisualBert model)"),GTe.forEach(t),XOe=i(T),bg=n(T,"LI",{});var OTe=s(bg);nU=n(OTe,"STRONG",{});var lSr=s(nU);VOe=r(lSr,"vit"),lSr.forEach(t),zOe=r(OTe," \u2014 "),yB=n(OTe,"A",{href:!0});var iSr=s(yB);WOe=r(iSr,"ViTConfig"),iSr.forEach(t),QOe=r(OTe," (ViT model)"),OTe.forEach(t),HOe=i(T),vg=n(T,"LI",{});var XTe=s(vg);sU=n(XTe,"STRONG",{});var dSr=s(sU);UOe=r(dSr,"vit_mae"),dSr.forEach(t),JOe=r(XTe," \u2014 "),wB=n(XTe,"A",{href:!0});var cSr=s(wB);YOe=r(cSr,"ViTMAEConfig"),cSr.forEach(t),KOe=r(XTe," (ViTMAE model)"),XTe.forEach(t),ZOe=i(T),Tg=n(T,"LI",{});var VTe=s(Tg);lU=n(VTe,"STRONG",{});var fSr=s(lU);eXe=r(fSr,"wav2vec2"),fSr.forEach(t),oXe=r(VTe," \u2014 "),AB=n(VTe,"A",{href:!0});var mSr=s(AB);rXe=r(mSr,"Wav2Vec2Config"),mSr.forEach(t),tXe=r(VTe," (Wav2Vec2 model)"),VTe.forEach(t),aXe=i(T),Fg=n(T,"LI",{});var zTe=s(Fg);iU=n(zTe,"STRONG",{});var gSr=s(iU);nXe=r(gSr,"wavlm"),gSr.forEach(t),sXe=r(zTe," \u2014 "),LB=n(zTe,"A",{href:!0});var hSr=s(LB);lXe=r(hSr,"WavLMConfig"),hSr.forEach(t),iXe=r(zTe," (WavLM model)"),zTe.forEach(t),dXe=i(T),Cg=n(T,"LI",{});var WTe=s(Cg);dU=n(WTe,"STRONG",{});var pSr=s(dU);cXe=r(pSr,"xglm"),pSr.forEach(t),fXe=r(WTe," \u2014 "),BB=n(WTe,"A",{href:!0});var _Sr=s(BB);mXe=r(_Sr,"XGLMConfig"),_Sr.forEach(t),gXe=r(WTe," (XGLM model)"),WTe.forEach(t),hXe=i(T),Mg=n(T,"LI",{});var QTe=s(Mg);cU=n(QTe,"STRONG",{});var uSr=s(cU);pXe=r(uSr,"xlm"),uSr.forEach(t),_Xe=r(QTe," \u2014 "),xB=n(QTe,"A",{href:!0});var bSr=s(xB);uXe=r(bSr,"XLMConfig"),bSr.forEach(t),bXe=r(QTe," (XLM model)"),QTe.forEach(t),vXe=i(T),Eg=n(T,"LI",{});var HTe=s(Eg);fU=n(HTe,"STRONG",{});var vSr=s(fU);TXe=r(vSr,"xlm-prophetnet"),vSr.forEach(t),FXe=r(HTe," \u2014 "),kB=n(HTe,"A",{href:!0});var TSr=s(kB);CXe=r(TSr,"XLMProphetNetConfig"),TSr.forEach(t),MXe=r(HTe," (XLMProphetNet model)"),HTe.forEach(t),EXe=i(T),yg=n(T,"LI",{});var UTe=s(yg);mU=n(UTe,"STRONG",{});var FSr=s(mU);yXe=r(FSr,"xlm-roberta"),FSr.forEach(t),wXe=r(UTe," \u2014 "),RB=n(UTe,"A",{href:!0});var CSr=s(RB);AXe=r(CSr,"XLMRobertaConfig"),CSr.forEach(t),LXe=r(UTe," (XLM-RoBERTa model)"),UTe.forEach(t),BXe=i(T),wg=n(T,"LI",{});var JTe=s(wg);gU=n(JTe,"STRONG",{});var MSr=s(gU);xXe=r(MSr,"xlm-roberta-xl"),MSr.forEach(t),kXe=r(JTe," \u2014 "),SB=n(JTe,"A",{href:!0});var ESr=s(SB);RXe=r(ESr,"XLMRobertaXLConfig"),ESr.forEach(t),SXe=r(JTe," (XLM-RoBERTa-XL model)"),JTe.forEach(t),PXe=i(T),Ag=n(T,"LI",{});var YTe=s(Ag);hU=n(YTe,"STRONG",{});var ySr=s(hU);$Xe=r(ySr,"xlnet"),ySr.forEach(t),IXe=r(YTe," \u2014 "),PB=n(YTe,"A",{href:!0});var wSr=s(PB);jXe=r(wSr,"XLNetConfig"),wSr.forEach(t),DXe=r(YTe," (XLNet model)"),YTe.forEach(t),NXe=i(T),Lg=n(T,"LI",{});var KTe=s(Lg);pU=n(KTe,"STRONG",{});var ASr=s(pU);qXe=r(ASr,"yoso"),ASr.forEach(t),GXe=r(KTe," \u2014 "),$B=n(KTe,"A",{href:!0});var LSr=s($B);OXe=r(LSr,"YosoConfig"),LSr.forEach(t),XXe=r(KTe," (YOSO model)"),KTe.forEach(t),T.forEach(t),VXe=i(ga),_U=n(ga,"P",{});var BSr=s(_U);zXe=r(BSr,"Examples:"),BSr.forEach(t),WXe=i(ga),m(lE.$$.fragment,ga),ga.forEach(t),QXe=i(Os),Bg=n(Os,"DIV",{class:!0});var ARe=s(Bg);m(iE.$$.fragment,ARe),HXe=i(ARe),uU=n(ARe,"P",{});var xSr=s(uU);UXe=r(xSr,"Register a new configuration for this class."),xSr.forEach(t),ARe.forEach(t),Os.forEach(t),yxe=i(c),Qi=n(c,"H2",{class:!0});var LRe=s(Qi);xg=n(LRe,"A",{id:!0,class:!0,href:!0});var kSr=s(xg);bU=n(kSr,"SPAN",{});var RSr=s(bU);m(dE.$$.fragment,RSr),RSr.forEach(t),kSr.forEach(t),JXe=i(LRe),vU=n(LRe,"SPAN",{});var SSr=s(vU);YXe=r(SSr,"AutoTokenizer"),SSr.forEach(t),LRe.forEach(t),wxe=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(cE.$$.fragment,Xs),KXe=i(Xs),fE=n(Xs,"P",{});var BRe=s(fE);ZXe=r(BRe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),IB=n(BRe,"A",{href:!0});var PSr=s(IB);eVe=r(PSr,"AutoTokenizer.from_pretrained()"),PSr.forEach(t),oVe=r(BRe," class method."),BRe.forEach(t),rVe=i(Xs),mE=n(Xs,"P",{});var xRe=s(mE);tVe=r(xRe,"This class cannot be instantiated directly using "),TU=n(xRe,"CODE",{});var $Sr=s(TU);aVe=r($Sr,"__init__()"),$Sr.forEach(t),nVe=r(xRe," (throws an error)."),xRe.forEach(t),sVe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(gE.$$.fragment,ha),lVe=i(ha),FU=n(ha,"P",{});var ISr=s(FU);iVe=r(ISr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ISr.forEach(t),dVe=i(ha),Oa=n(ha,"P",{});var KM=s(Oa);cVe=r(KM,"The tokenizer class to instantiate is selected based on the "),CU=n(KM,"CODE",{});var jSr=s(CU);fVe=r(jSr,"model_type"),jSr.forEach(t),mVe=r(KM,` property of the config object (either
passed as an argument or loaded from `),MU=n(KM,"CODE",{});var DSr=s(MU);gVe=r(DSr,"pretrained_model_name_or_path"),DSr.forEach(t),hVe=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EU=n(KM,"CODE",{});var NSr=s(EU);pVe=r(NSr,"pretrained_model_name_or_path"),NSr.forEach(t),_Ve=r(KM,":"),KM.forEach(t),uVe=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var Q7=s(Wn);yU=n(Q7,"STRONG",{});var qSr=s(yU);bVe=r(qSr,"albert"),qSr.forEach(t),vVe=r(Q7," \u2014 "),jB=n(Q7,"A",{href:!0});var GSr=s(jB);TVe=r(GSr,"AlbertTokenizer"),GSr.forEach(t),FVe=r(Q7," or "),DB=n(Q7,"A",{href:!0});var OSr=s(DB);CVe=r(OSr,"AlbertTokenizerFast"),OSr.forEach(t),MVe=r(Q7," (ALBERT model)"),Q7.forEach(t),EVe=i(y),Qn=n(y,"LI",{});var H7=s(Qn);wU=n(H7,"STRONG",{});var XSr=s(wU);yVe=r(XSr,"bart"),XSr.forEach(t),wVe=r(H7," \u2014 "),NB=n(H7,"A",{href:!0});var VSr=s(NB);AVe=r(VSr,"BartTokenizer"),VSr.forEach(t),LVe=r(H7," or "),qB=n(H7,"A",{href:!0});var zSr=s(qB);BVe=r(zSr,"BartTokenizerFast"),zSr.forEach(t),xVe=r(H7," (BART model)"),H7.forEach(t),kVe=i(y),Hn=n(y,"LI",{});var U7=s(Hn);AU=n(U7,"STRONG",{});var WSr=s(AU);RVe=r(WSr,"barthez"),WSr.forEach(t),SVe=r(U7," \u2014 "),GB=n(U7,"A",{href:!0});var QSr=s(GB);PVe=r(QSr,"BarthezTokenizer"),QSr.forEach(t),$Ve=r(U7," or "),OB=n(U7,"A",{href:!0});var HSr=s(OB);IVe=r(HSr,"BarthezTokenizerFast"),HSr.forEach(t),jVe=r(U7," (BARThez model)"),U7.forEach(t),DVe=i(y),kg=n(y,"LI",{});var ZTe=s(kg);LU=n(ZTe,"STRONG",{});var USr=s(LU);NVe=r(USr,"bartpho"),USr.forEach(t),qVe=r(ZTe," \u2014 "),XB=n(ZTe,"A",{href:!0});var JSr=s(XB);GVe=r(JSr,"BartphoTokenizer"),JSr.forEach(t),OVe=r(ZTe," (BARTpho model)"),ZTe.forEach(t),XVe=i(y),Un=n(y,"LI",{});var J7=s(Un);BU=n(J7,"STRONG",{});var YSr=s(BU);VVe=r(YSr,"bert"),YSr.forEach(t),zVe=r(J7," \u2014 "),VB=n(J7,"A",{href:!0});var KSr=s(VB);WVe=r(KSr,"BertTokenizer"),KSr.forEach(t),QVe=r(J7," or "),zB=n(J7,"A",{href:!0});var ZSr=s(zB);HVe=r(ZSr,"BertTokenizerFast"),ZSr.forEach(t),UVe=r(J7," (BERT model)"),J7.forEach(t),JVe=i(y),Rg=n(y,"LI",{});var eFe=s(Rg);xU=n(eFe,"STRONG",{});var ePr=s(xU);YVe=r(ePr,"bert-generation"),ePr.forEach(t),KVe=r(eFe," \u2014 "),WB=n(eFe,"A",{href:!0});var oPr=s(WB);ZVe=r(oPr,"BertGenerationTokenizer"),oPr.forEach(t),eze=r(eFe," (Bert Generation model)"),eFe.forEach(t),oze=i(y),Sg=n(y,"LI",{});var oFe=s(Sg);kU=n(oFe,"STRONG",{});var rPr=s(kU);rze=r(rPr,"bert-japanese"),rPr.forEach(t),tze=r(oFe," \u2014 "),QB=n(oFe,"A",{href:!0});var tPr=s(QB);aze=r(tPr,"BertJapaneseTokenizer"),tPr.forEach(t),nze=r(oFe," (BertJapanese model)"),oFe.forEach(t),sze=i(y),Pg=n(y,"LI",{});var rFe=s(Pg);RU=n(rFe,"STRONG",{});var aPr=s(RU);lze=r(aPr,"bertweet"),aPr.forEach(t),ize=r(rFe," \u2014 "),HB=n(rFe,"A",{href:!0});var nPr=s(HB);dze=r(nPr,"BertweetTokenizer"),nPr.forEach(t),cze=r(rFe," (Bertweet model)"),rFe.forEach(t),fze=i(y),Jn=n(y,"LI",{});var Y7=s(Jn);SU=n(Y7,"STRONG",{});var sPr=s(SU);mze=r(sPr,"big_bird"),sPr.forEach(t),gze=r(Y7," \u2014 "),UB=n(Y7,"A",{href:!0});var lPr=s(UB);hze=r(lPr,"BigBirdTokenizer"),lPr.forEach(t),pze=r(Y7," or "),JB=n(Y7,"A",{href:!0});var iPr=s(JB);_ze=r(iPr,"BigBirdTokenizerFast"),iPr.forEach(t),uze=r(Y7," (BigBird model)"),Y7.forEach(t),bze=i(y),Yn=n(y,"LI",{});var K7=s(Yn);PU=n(K7,"STRONG",{});var dPr=s(PU);vze=r(dPr,"bigbird_pegasus"),dPr.forEach(t),Tze=r(K7," \u2014 "),YB=n(K7,"A",{href:!0});var cPr=s(YB);Fze=r(cPr,"PegasusTokenizer"),cPr.forEach(t),Cze=r(K7," or "),KB=n(K7,"A",{href:!0});var fPr=s(KB);Mze=r(fPr,"PegasusTokenizerFast"),fPr.forEach(t),Eze=r(K7," (BigBirdPegasus model)"),K7.forEach(t),yze=i(y),Kn=n(y,"LI",{});var Z7=s(Kn);$U=n(Z7,"STRONG",{});var mPr=s($U);wze=r(mPr,"blenderbot"),mPr.forEach(t),Aze=r(Z7," \u2014 "),ZB=n(Z7,"A",{href:!0});var gPr=s(ZB);Lze=r(gPr,"BlenderbotTokenizer"),gPr.forEach(t),Bze=r(Z7," or "),ex=n(Z7,"A",{href:!0});var hPr=s(ex);xze=r(hPr,"BlenderbotTokenizerFast"),hPr.forEach(t),kze=r(Z7," (Blenderbot model)"),Z7.forEach(t),Rze=i(y),$g=n(y,"LI",{});var tFe=s($g);IU=n(tFe,"STRONG",{});var pPr=s(IU);Sze=r(pPr,"blenderbot-small"),pPr.forEach(t),Pze=r(tFe," \u2014 "),ox=n(tFe,"A",{href:!0});var _Pr=s(ox);$ze=r(_Pr,"BlenderbotSmallTokenizer"),_Pr.forEach(t),Ize=r(tFe," (BlenderbotSmall model)"),tFe.forEach(t),jze=i(y),Ig=n(y,"LI",{});var aFe=s(Ig);jU=n(aFe,"STRONG",{});var uPr=s(jU);Dze=r(uPr,"byt5"),uPr.forEach(t),Nze=r(aFe," \u2014 "),rx=n(aFe,"A",{href:!0});var bPr=s(rx);qze=r(bPr,"ByT5Tokenizer"),bPr.forEach(t),Gze=r(aFe," (ByT5 model)"),aFe.forEach(t),Oze=i(y),Zn=n(y,"LI",{});var e8=s(Zn);DU=n(e8,"STRONG",{});var vPr=s(DU);Xze=r(vPr,"camembert"),vPr.forEach(t),Vze=r(e8," \u2014 "),tx=n(e8,"A",{href:!0});var TPr=s(tx);zze=r(TPr,"CamembertTokenizer"),TPr.forEach(t),Wze=r(e8," or "),ax=n(e8,"A",{href:!0});var FPr=s(ax);Qze=r(FPr,"CamembertTokenizerFast"),FPr.forEach(t),Hze=r(e8," (CamemBERT model)"),e8.forEach(t),Uze=i(y),jg=n(y,"LI",{});var nFe=s(jg);NU=n(nFe,"STRONG",{});var CPr=s(NU);Jze=r(CPr,"canine"),CPr.forEach(t),Yze=r(nFe," \u2014 "),nx=n(nFe,"A",{href:!0});var MPr=s(nx);Kze=r(MPr,"CanineTokenizer"),MPr.forEach(t),Zze=r(nFe," (Canine model)"),nFe.forEach(t),eWe=i(y),es=n(y,"LI",{});var o8=s(es);qU=n(o8,"STRONG",{});var EPr=s(qU);oWe=r(EPr,"clip"),EPr.forEach(t),rWe=r(o8," \u2014 "),sx=n(o8,"A",{href:!0});var yPr=s(sx);tWe=r(yPr,"CLIPTokenizer"),yPr.forEach(t),aWe=r(o8," or "),lx=n(o8,"A",{href:!0});var wPr=s(lx);nWe=r(wPr,"CLIPTokenizerFast"),wPr.forEach(t),sWe=r(o8," (CLIP model)"),o8.forEach(t),lWe=i(y),os=n(y,"LI",{});var r8=s(os);GU=n(r8,"STRONG",{});var APr=s(GU);iWe=r(APr,"convbert"),APr.forEach(t),dWe=r(r8," \u2014 "),ix=n(r8,"A",{href:!0});var LPr=s(ix);cWe=r(LPr,"ConvBertTokenizer"),LPr.forEach(t),fWe=r(r8," or "),dx=n(r8,"A",{href:!0});var BPr=s(dx);mWe=r(BPr,"ConvBertTokenizerFast"),BPr.forEach(t),gWe=r(r8," (ConvBERT model)"),r8.forEach(t),hWe=i(y),rs=n(y,"LI",{});var t8=s(rs);OU=n(t8,"STRONG",{});var xPr=s(OU);pWe=r(xPr,"cpm"),xPr.forEach(t),_We=r(t8," \u2014 "),cx=n(t8,"A",{href:!0});var kPr=s(cx);uWe=r(kPr,"CpmTokenizer"),kPr.forEach(t),bWe=r(t8," or "),XU=n(t8,"CODE",{});var RPr=s(XU);vWe=r(RPr,"CpmTokenizerFast"),RPr.forEach(t),TWe=r(t8," (CPM model)"),t8.forEach(t),FWe=i(y),Dg=n(y,"LI",{});var sFe=s(Dg);VU=n(sFe,"STRONG",{});var SPr=s(VU);CWe=r(SPr,"ctrl"),SPr.forEach(t),MWe=r(sFe," \u2014 "),fx=n(sFe,"A",{href:!0});var PPr=s(fx);EWe=r(PPr,"CTRLTokenizer"),PPr.forEach(t),yWe=r(sFe," (CTRL model)"),sFe.forEach(t),wWe=i(y),ts=n(y,"LI",{});var a8=s(ts);zU=n(a8,"STRONG",{});var $Pr=s(zU);AWe=r($Pr,"deberta"),$Pr.forEach(t),LWe=r(a8," \u2014 "),mx=n(a8,"A",{href:!0});var IPr=s(mx);BWe=r(IPr,"DebertaTokenizer"),IPr.forEach(t),xWe=r(a8," or "),gx=n(a8,"A",{href:!0});var jPr=s(gx);kWe=r(jPr,"DebertaTokenizerFast"),jPr.forEach(t),RWe=r(a8," (DeBERTa model)"),a8.forEach(t),SWe=i(y),Ng=n(y,"LI",{});var lFe=s(Ng);WU=n(lFe,"STRONG",{});var DPr=s(WU);PWe=r(DPr,"deberta-v2"),DPr.forEach(t),$We=r(lFe," \u2014 "),hx=n(lFe,"A",{href:!0});var NPr=s(hx);IWe=r(NPr,"DebertaV2Tokenizer"),NPr.forEach(t),jWe=r(lFe," (DeBERTa-v2 model)"),lFe.forEach(t),DWe=i(y),as=n(y,"LI",{});var n8=s(as);QU=n(n8,"STRONG",{});var qPr=s(QU);NWe=r(qPr,"distilbert"),qPr.forEach(t),qWe=r(n8," \u2014 "),px=n(n8,"A",{href:!0});var GPr=s(px);GWe=r(GPr,"DistilBertTokenizer"),GPr.forEach(t),OWe=r(n8," or "),_x=n(n8,"A",{href:!0});var OPr=s(_x);XWe=r(OPr,"DistilBertTokenizerFast"),OPr.forEach(t),VWe=r(n8," (DistilBERT model)"),n8.forEach(t),zWe=i(y),ns=n(y,"LI",{});var s8=s(ns);HU=n(s8,"STRONG",{});var XPr=s(HU);WWe=r(XPr,"dpr"),XPr.forEach(t),QWe=r(s8," \u2014 "),ux=n(s8,"A",{href:!0});var VPr=s(ux);HWe=r(VPr,"DPRQuestionEncoderTokenizer"),VPr.forEach(t),UWe=r(s8," or "),bx=n(s8,"A",{href:!0});var zPr=s(bx);JWe=r(zPr,"DPRQuestionEncoderTokenizerFast"),zPr.forEach(t),YWe=r(s8," (DPR model)"),s8.forEach(t),KWe=i(y),ss=n(y,"LI",{});var l8=s(ss);UU=n(l8,"STRONG",{});var WPr=s(UU);ZWe=r(WPr,"electra"),WPr.forEach(t),eQe=r(l8," \u2014 "),vx=n(l8,"A",{href:!0});var QPr=s(vx);oQe=r(QPr,"ElectraTokenizer"),QPr.forEach(t),rQe=r(l8," or "),Tx=n(l8,"A",{href:!0});var HPr=s(Tx);tQe=r(HPr,"ElectraTokenizerFast"),HPr.forEach(t),aQe=r(l8," (ELECTRA model)"),l8.forEach(t),nQe=i(y),qg=n(y,"LI",{});var iFe=s(qg);JU=n(iFe,"STRONG",{});var UPr=s(JU);sQe=r(UPr,"flaubert"),UPr.forEach(t),lQe=r(iFe," \u2014 "),Fx=n(iFe,"A",{href:!0});var JPr=s(Fx);iQe=r(JPr,"FlaubertTokenizer"),JPr.forEach(t),dQe=r(iFe," (FlauBERT model)"),iFe.forEach(t),cQe=i(y),ls=n(y,"LI",{});var i8=s(ls);YU=n(i8,"STRONG",{});var YPr=s(YU);fQe=r(YPr,"fnet"),YPr.forEach(t),mQe=r(i8," \u2014 "),Cx=n(i8,"A",{href:!0});var KPr=s(Cx);gQe=r(KPr,"FNetTokenizer"),KPr.forEach(t),hQe=r(i8," or "),Mx=n(i8,"A",{href:!0});var ZPr=s(Mx);pQe=r(ZPr,"FNetTokenizerFast"),ZPr.forEach(t),_Qe=r(i8," (FNet model)"),i8.forEach(t),uQe=i(y),Gg=n(y,"LI",{});var dFe=s(Gg);KU=n(dFe,"STRONG",{});var e$r=s(KU);bQe=r(e$r,"fsmt"),e$r.forEach(t),vQe=r(dFe," \u2014 "),Ex=n(dFe,"A",{href:!0});var o$r=s(Ex);TQe=r(o$r,"FSMTTokenizer"),o$r.forEach(t),FQe=r(dFe," (FairSeq Machine-Translation model)"),dFe.forEach(t),CQe=i(y),is=n(y,"LI",{});var d8=s(is);ZU=n(d8,"STRONG",{});var r$r=s(ZU);MQe=r(r$r,"funnel"),r$r.forEach(t),EQe=r(d8," \u2014 "),yx=n(d8,"A",{href:!0});var t$r=s(yx);yQe=r(t$r,"FunnelTokenizer"),t$r.forEach(t),wQe=r(d8," or "),wx=n(d8,"A",{href:!0});var a$r=s(wx);AQe=r(a$r,"FunnelTokenizerFast"),a$r.forEach(t),LQe=r(d8," (Funnel Transformer model)"),d8.forEach(t),BQe=i(y),ds=n(y,"LI",{});var c8=s(ds);eJ=n(c8,"STRONG",{});var n$r=s(eJ);xQe=r(n$r,"gpt2"),n$r.forEach(t),kQe=r(c8," \u2014 "),Ax=n(c8,"A",{href:!0});var s$r=s(Ax);RQe=r(s$r,"GPT2Tokenizer"),s$r.forEach(t),SQe=r(c8," or "),Lx=n(c8,"A",{href:!0});var l$r=s(Lx);PQe=r(l$r,"GPT2TokenizerFast"),l$r.forEach(t),$Qe=r(c8," (OpenAI GPT-2 model)"),c8.forEach(t),IQe=i(y),cs=n(y,"LI",{});var f8=s(cs);oJ=n(f8,"STRONG",{});var i$r=s(oJ);jQe=r(i$r,"gpt_neo"),i$r.forEach(t),DQe=r(f8," \u2014 "),Bx=n(f8,"A",{href:!0});var d$r=s(Bx);NQe=r(d$r,"GPT2Tokenizer"),d$r.forEach(t),qQe=r(f8," or "),xx=n(f8,"A",{href:!0});var c$r=s(xx);GQe=r(c$r,"GPT2TokenizerFast"),c$r.forEach(t),OQe=r(f8," (GPT Neo model)"),f8.forEach(t),XQe=i(y),fs=n(y,"LI",{});var m8=s(fs);rJ=n(m8,"STRONG",{});var f$r=s(rJ);VQe=r(f$r,"herbert"),f$r.forEach(t),zQe=r(m8," \u2014 "),kx=n(m8,"A",{href:!0});var m$r=s(kx);WQe=r(m$r,"HerbertTokenizer"),m$r.forEach(t),QQe=r(m8," or "),Rx=n(m8,"A",{href:!0});var g$r=s(Rx);HQe=r(g$r,"HerbertTokenizerFast"),g$r.forEach(t),UQe=r(m8," (HerBERT model)"),m8.forEach(t),JQe=i(y),Og=n(y,"LI",{});var cFe=s(Og);tJ=n(cFe,"STRONG",{});var h$r=s(tJ);YQe=r(h$r,"hubert"),h$r.forEach(t),KQe=r(cFe," \u2014 "),Sx=n(cFe,"A",{href:!0});var p$r=s(Sx);ZQe=r(p$r,"Wav2Vec2CTCTokenizer"),p$r.forEach(t),eHe=r(cFe," (Hubert model)"),cFe.forEach(t),oHe=i(y),ms=n(y,"LI",{});var g8=s(ms);aJ=n(g8,"STRONG",{});var _$r=s(aJ);rHe=r(_$r,"ibert"),_$r.forEach(t),tHe=r(g8," \u2014 "),Px=n(g8,"A",{href:!0});var u$r=s(Px);aHe=r(u$r,"RobertaTokenizer"),u$r.forEach(t),nHe=r(g8," or "),$x=n(g8,"A",{href:!0});var b$r=s($x);sHe=r(b$r,"RobertaTokenizerFast"),b$r.forEach(t),lHe=r(g8," (I-BERT model)"),g8.forEach(t),iHe=i(y),gs=n(y,"LI",{});var h8=s(gs);nJ=n(h8,"STRONG",{});var v$r=s(nJ);dHe=r(v$r,"layoutlm"),v$r.forEach(t),cHe=r(h8," \u2014 "),Ix=n(h8,"A",{href:!0});var T$r=s(Ix);fHe=r(T$r,"LayoutLMTokenizer"),T$r.forEach(t),mHe=r(h8," or "),jx=n(h8,"A",{href:!0});var F$r=s(jx);gHe=r(F$r,"LayoutLMTokenizerFast"),F$r.forEach(t),hHe=r(h8," (LayoutLM model)"),h8.forEach(t),pHe=i(y),hs=n(y,"LI",{});var p8=s(hs);sJ=n(p8,"STRONG",{});var C$r=s(sJ);_He=r(C$r,"layoutlmv2"),C$r.forEach(t),uHe=r(p8," \u2014 "),Dx=n(p8,"A",{href:!0});var M$r=s(Dx);bHe=r(M$r,"LayoutLMv2Tokenizer"),M$r.forEach(t),vHe=r(p8," or "),Nx=n(p8,"A",{href:!0});var E$r=s(Nx);THe=r(E$r,"LayoutLMv2TokenizerFast"),E$r.forEach(t),FHe=r(p8," (LayoutLMv2 model)"),p8.forEach(t),CHe=i(y),ps=n(y,"LI",{});var _8=s(ps);lJ=n(_8,"STRONG",{});var y$r=s(lJ);MHe=r(y$r,"layoutxlm"),y$r.forEach(t),EHe=r(_8," \u2014 "),qx=n(_8,"A",{href:!0});var w$r=s(qx);yHe=r(w$r,"LayoutXLMTokenizer"),w$r.forEach(t),wHe=r(_8," or "),Gx=n(_8,"A",{href:!0});var A$r=s(Gx);AHe=r(A$r,"LayoutXLMTokenizerFast"),A$r.forEach(t),LHe=r(_8," (LayoutXLM model)"),_8.forEach(t),BHe=i(y),_s=n(y,"LI",{});var u8=s(_s);iJ=n(u8,"STRONG",{});var L$r=s(iJ);xHe=r(L$r,"led"),L$r.forEach(t),kHe=r(u8," \u2014 "),Ox=n(u8,"A",{href:!0});var B$r=s(Ox);RHe=r(B$r,"LEDTokenizer"),B$r.forEach(t),SHe=r(u8," or "),Xx=n(u8,"A",{href:!0});var x$r=s(Xx);PHe=r(x$r,"LEDTokenizerFast"),x$r.forEach(t),$He=r(u8," (LED model)"),u8.forEach(t),IHe=i(y),us=n(y,"LI",{});var b8=s(us);dJ=n(b8,"STRONG",{});var k$r=s(dJ);jHe=r(k$r,"longformer"),k$r.forEach(t),DHe=r(b8," \u2014 "),Vx=n(b8,"A",{href:!0});var R$r=s(Vx);NHe=r(R$r,"LongformerTokenizer"),R$r.forEach(t),qHe=r(b8," or "),zx=n(b8,"A",{href:!0});var S$r=s(zx);GHe=r(S$r,"LongformerTokenizerFast"),S$r.forEach(t),OHe=r(b8," (Longformer model)"),b8.forEach(t),XHe=i(y),Xg=n(y,"LI",{});var fFe=s(Xg);cJ=n(fFe,"STRONG",{});var P$r=s(cJ);VHe=r(P$r,"luke"),P$r.forEach(t),zHe=r(fFe," \u2014 "),Wx=n(fFe,"A",{href:!0});var $$r=s(Wx);WHe=r($$r,"LukeTokenizer"),$$r.forEach(t),QHe=r(fFe," (LUKE model)"),fFe.forEach(t),HHe=i(y),bs=n(y,"LI",{});var v8=s(bs);fJ=n(v8,"STRONG",{});var I$r=s(fJ);UHe=r(I$r,"lxmert"),I$r.forEach(t),JHe=r(v8," \u2014 "),Qx=n(v8,"A",{href:!0});var j$r=s(Qx);YHe=r(j$r,"LxmertTokenizer"),j$r.forEach(t),KHe=r(v8," or "),Hx=n(v8,"A",{href:!0});var D$r=s(Hx);ZHe=r(D$r,"LxmertTokenizerFast"),D$r.forEach(t),eUe=r(v8," (LXMERT model)"),v8.forEach(t),oUe=i(y),Vg=n(y,"LI",{});var mFe=s(Vg);mJ=n(mFe,"STRONG",{});var N$r=s(mJ);rUe=r(N$r,"m2m_100"),N$r.forEach(t),tUe=r(mFe," \u2014 "),Ux=n(mFe,"A",{href:!0});var q$r=s(Ux);aUe=r(q$r,"M2M100Tokenizer"),q$r.forEach(t),nUe=r(mFe," (M2M100 model)"),mFe.forEach(t),sUe=i(y),zg=n(y,"LI",{});var gFe=s(zg);gJ=n(gFe,"STRONG",{});var G$r=s(gJ);lUe=r(G$r,"marian"),G$r.forEach(t),iUe=r(gFe," \u2014 "),Jx=n(gFe,"A",{href:!0});var O$r=s(Jx);dUe=r(O$r,"MarianTokenizer"),O$r.forEach(t),cUe=r(gFe," (Marian model)"),gFe.forEach(t),fUe=i(y),vs=n(y,"LI",{});var T8=s(vs);hJ=n(T8,"STRONG",{});var X$r=s(hJ);mUe=r(X$r,"mbart"),X$r.forEach(t),gUe=r(T8," \u2014 "),Yx=n(T8,"A",{href:!0});var V$r=s(Yx);hUe=r(V$r,"MBartTokenizer"),V$r.forEach(t),pUe=r(T8," or "),Kx=n(T8,"A",{href:!0});var z$r=s(Kx);_Ue=r(z$r,"MBartTokenizerFast"),z$r.forEach(t),uUe=r(T8," (mBART model)"),T8.forEach(t),bUe=i(y),Ts=n(y,"LI",{});var F8=s(Ts);pJ=n(F8,"STRONG",{});var W$r=s(pJ);vUe=r(W$r,"mbart50"),W$r.forEach(t),TUe=r(F8," \u2014 "),Zx=n(F8,"A",{href:!0});var Q$r=s(Zx);FUe=r(Q$r,"MBart50Tokenizer"),Q$r.forEach(t),CUe=r(F8," or "),ek=n(F8,"A",{href:!0});var H$r=s(ek);MUe=r(H$r,"MBart50TokenizerFast"),H$r.forEach(t),EUe=r(F8," (mBART-50 model)"),F8.forEach(t),yUe=i(y),Wg=n(y,"LI",{});var hFe=s(Wg);_J=n(hFe,"STRONG",{});var U$r=s(_J);wUe=r(U$r,"mluke"),U$r.forEach(t),AUe=r(hFe," \u2014 "),ok=n(hFe,"A",{href:!0});var J$r=s(ok);LUe=r(J$r,"MLukeTokenizer"),J$r.forEach(t),BUe=r(hFe," (mLUKE model)"),hFe.forEach(t),xUe=i(y),Fs=n(y,"LI",{});var C8=s(Fs);uJ=n(C8,"STRONG",{});var Y$r=s(uJ);kUe=r(Y$r,"mobilebert"),Y$r.forEach(t),RUe=r(C8," \u2014 "),rk=n(C8,"A",{href:!0});var K$r=s(rk);SUe=r(K$r,"MobileBertTokenizer"),K$r.forEach(t),PUe=r(C8," or "),tk=n(C8,"A",{href:!0});var Z$r=s(tk);$Ue=r(Z$r,"MobileBertTokenizerFast"),Z$r.forEach(t),IUe=r(C8," (MobileBERT model)"),C8.forEach(t),jUe=i(y),Cs=n(y,"LI",{});var M8=s(Cs);bJ=n(M8,"STRONG",{});var eIr=s(bJ);DUe=r(eIr,"mpnet"),eIr.forEach(t),NUe=r(M8," \u2014 "),ak=n(M8,"A",{href:!0});var oIr=s(ak);qUe=r(oIr,"MPNetTokenizer"),oIr.forEach(t),GUe=r(M8," or "),nk=n(M8,"A",{href:!0});var rIr=s(nk);OUe=r(rIr,"MPNetTokenizerFast"),rIr.forEach(t),XUe=r(M8," (MPNet model)"),M8.forEach(t),VUe=i(y),Ms=n(y,"LI",{});var E8=s(Ms);vJ=n(E8,"STRONG",{});var tIr=s(vJ);zUe=r(tIr,"mt5"),tIr.forEach(t),WUe=r(E8," \u2014 "),sk=n(E8,"A",{href:!0});var aIr=s(sk);QUe=r(aIr,"MT5Tokenizer"),aIr.forEach(t),HUe=r(E8," or "),lk=n(E8,"A",{href:!0});var nIr=s(lk);UUe=r(nIr,"MT5TokenizerFast"),nIr.forEach(t),JUe=r(E8," (mT5 model)"),E8.forEach(t),YUe=i(y),Es=n(y,"LI",{});var y8=s(Es);TJ=n(y8,"STRONG",{});var sIr=s(TJ);KUe=r(sIr,"openai-gpt"),sIr.forEach(t),ZUe=r(y8," \u2014 "),ik=n(y8,"A",{href:!0});var lIr=s(ik);eJe=r(lIr,"OpenAIGPTTokenizer"),lIr.forEach(t),oJe=r(y8," or "),dk=n(y8,"A",{href:!0});var iIr=s(dk);rJe=r(iIr,"OpenAIGPTTokenizerFast"),iIr.forEach(t),tJe=r(y8," (OpenAI GPT model)"),y8.forEach(t),aJe=i(y),ys=n(y,"LI",{});var w8=s(ys);FJ=n(w8,"STRONG",{});var dIr=s(FJ);nJe=r(dIr,"pegasus"),dIr.forEach(t),sJe=r(w8," \u2014 "),ck=n(w8,"A",{href:!0});var cIr=s(ck);lJe=r(cIr,"PegasusTokenizer"),cIr.forEach(t),iJe=r(w8," or "),fk=n(w8,"A",{href:!0});var fIr=s(fk);dJe=r(fIr,"PegasusTokenizerFast"),fIr.forEach(t),cJe=r(w8," (Pegasus model)"),w8.forEach(t),fJe=i(y),Qg=n(y,"LI",{});var pFe=s(Qg);CJ=n(pFe,"STRONG",{});var mIr=s(CJ);mJe=r(mIr,"perceiver"),mIr.forEach(t),gJe=r(pFe," \u2014 "),mk=n(pFe,"A",{href:!0});var gIr=s(mk);hJe=r(gIr,"PerceiverTokenizer"),gIr.forEach(t),pJe=r(pFe," (Perceiver model)"),pFe.forEach(t),_Je=i(y),Hg=n(y,"LI",{});var _Fe=s(Hg);MJ=n(_Fe,"STRONG",{});var hIr=s(MJ);uJe=r(hIr,"phobert"),hIr.forEach(t),bJe=r(_Fe," \u2014 "),gk=n(_Fe,"A",{href:!0});var pIr=s(gk);vJe=r(pIr,"PhobertTokenizer"),pIr.forEach(t),TJe=r(_Fe," (PhoBERT model)"),_Fe.forEach(t),FJe=i(y),Ug=n(y,"LI",{});var uFe=s(Ug);EJ=n(uFe,"STRONG",{});var _Ir=s(EJ);CJe=r(_Ir,"plbart"),_Ir.forEach(t),MJe=r(uFe," \u2014 "),hk=n(uFe,"A",{href:!0});var uIr=s(hk);EJe=r(uIr,"PLBartTokenizer"),uIr.forEach(t),yJe=r(uFe," (PLBart model)"),uFe.forEach(t),wJe=i(y),Jg=n(y,"LI",{});var bFe=s(Jg);yJ=n(bFe,"STRONG",{});var bIr=s(yJ);AJe=r(bIr,"prophetnet"),bIr.forEach(t),LJe=r(bFe," \u2014 "),pk=n(bFe,"A",{href:!0});var vIr=s(pk);BJe=r(vIr,"ProphetNetTokenizer"),vIr.forEach(t),xJe=r(bFe," (ProphetNet model)"),bFe.forEach(t),kJe=i(y),ws=n(y,"LI",{});var A8=s(ws);wJ=n(A8,"STRONG",{});var TIr=s(wJ);RJe=r(TIr,"qdqbert"),TIr.forEach(t),SJe=r(A8," \u2014 "),_k=n(A8,"A",{href:!0});var FIr=s(_k);PJe=r(FIr,"BertTokenizer"),FIr.forEach(t),$Je=r(A8," or "),uk=n(A8,"A",{href:!0});var CIr=s(uk);IJe=r(CIr,"BertTokenizerFast"),CIr.forEach(t),jJe=r(A8," (QDQBert model)"),A8.forEach(t),DJe=i(y),Yg=n(y,"LI",{});var vFe=s(Yg);AJ=n(vFe,"STRONG",{});var MIr=s(AJ);NJe=r(MIr,"rag"),MIr.forEach(t),qJe=r(vFe," \u2014 "),bk=n(vFe,"A",{href:!0});var EIr=s(bk);GJe=r(EIr,"RagTokenizer"),EIr.forEach(t),OJe=r(vFe," (RAG model)"),vFe.forEach(t),XJe=i(y),As=n(y,"LI",{});var L8=s(As);LJ=n(L8,"STRONG",{});var yIr=s(LJ);VJe=r(yIr,"realm"),yIr.forEach(t),zJe=r(L8," \u2014 "),vk=n(L8,"A",{href:!0});var wIr=s(vk);WJe=r(wIr,"RealmTokenizer"),wIr.forEach(t),QJe=r(L8," or "),Tk=n(L8,"A",{href:!0});var AIr=s(Tk);HJe=r(AIr,"RealmTokenizerFast"),AIr.forEach(t),UJe=r(L8," (Realm model)"),L8.forEach(t),JJe=i(y),Ls=n(y,"LI",{});var B8=s(Ls);BJ=n(B8,"STRONG",{});var LIr=s(BJ);YJe=r(LIr,"reformer"),LIr.forEach(t),KJe=r(B8," \u2014 "),Fk=n(B8,"A",{href:!0});var BIr=s(Fk);ZJe=r(BIr,"ReformerTokenizer"),BIr.forEach(t),eYe=r(B8," or "),Ck=n(B8,"A",{href:!0});var xIr=s(Ck);oYe=r(xIr,"ReformerTokenizerFast"),xIr.forEach(t),rYe=r(B8," (Reformer model)"),B8.forEach(t),tYe=i(y),Bs=n(y,"LI",{});var x8=s(Bs);xJ=n(x8,"STRONG",{});var kIr=s(xJ);aYe=r(kIr,"rembert"),kIr.forEach(t),nYe=r(x8," \u2014 "),Mk=n(x8,"A",{href:!0});var RIr=s(Mk);sYe=r(RIr,"RemBertTokenizer"),RIr.forEach(t),lYe=r(x8," or "),Ek=n(x8,"A",{href:!0});var SIr=s(Ek);iYe=r(SIr,"RemBertTokenizerFast"),SIr.forEach(t),dYe=r(x8," (RemBERT model)"),x8.forEach(t),cYe=i(y),xs=n(y,"LI",{});var k8=s(xs);kJ=n(k8,"STRONG",{});var PIr=s(kJ);fYe=r(PIr,"retribert"),PIr.forEach(t),mYe=r(k8," \u2014 "),yk=n(k8,"A",{href:!0});var $Ir=s(yk);gYe=r($Ir,"RetriBertTokenizer"),$Ir.forEach(t),hYe=r(k8," or "),wk=n(k8,"A",{href:!0});var IIr=s(wk);pYe=r(IIr,"RetriBertTokenizerFast"),IIr.forEach(t),_Ye=r(k8," (RetriBERT model)"),k8.forEach(t),uYe=i(y),ks=n(y,"LI",{});var R8=s(ks);RJ=n(R8,"STRONG",{});var jIr=s(RJ);bYe=r(jIr,"roberta"),jIr.forEach(t),vYe=r(R8," \u2014 "),Ak=n(R8,"A",{href:!0});var DIr=s(Ak);TYe=r(DIr,"RobertaTokenizer"),DIr.forEach(t),FYe=r(R8," or "),Lk=n(R8,"A",{href:!0});var NIr=s(Lk);CYe=r(NIr,"RobertaTokenizerFast"),NIr.forEach(t),MYe=r(R8," (RoBERTa model)"),R8.forEach(t),EYe=i(y),Rs=n(y,"LI",{});var S8=s(Rs);SJ=n(S8,"STRONG",{});var qIr=s(SJ);yYe=r(qIr,"roformer"),qIr.forEach(t),wYe=r(S8," \u2014 "),Bk=n(S8,"A",{href:!0});var GIr=s(Bk);AYe=r(GIr,"RoFormerTokenizer"),GIr.forEach(t),LYe=r(S8," or "),xk=n(S8,"A",{href:!0});var OIr=s(xk);BYe=r(OIr,"RoFormerTokenizerFast"),OIr.forEach(t),xYe=r(S8," (RoFormer model)"),S8.forEach(t),kYe=i(y),Kg=n(y,"LI",{});var TFe=s(Kg);PJ=n(TFe,"STRONG",{});var XIr=s(PJ);RYe=r(XIr,"speech_to_text"),XIr.forEach(t),SYe=r(TFe," \u2014 "),kk=n(TFe,"A",{href:!0});var VIr=s(kk);PYe=r(VIr,"Speech2TextTokenizer"),VIr.forEach(t),$Ye=r(TFe," (Speech2Text model)"),TFe.forEach(t),IYe=i(y),Zg=n(y,"LI",{});var FFe=s(Zg);$J=n(FFe,"STRONG",{});var zIr=s($J);jYe=r(zIr,"speech_to_text_2"),zIr.forEach(t),DYe=r(FFe," \u2014 "),Rk=n(FFe,"A",{href:!0});var WIr=s(Rk);NYe=r(WIr,"Speech2Text2Tokenizer"),WIr.forEach(t),qYe=r(FFe," (Speech2Text2 model)"),FFe.forEach(t),GYe=i(y),Ss=n(y,"LI",{});var P8=s(Ss);IJ=n(P8,"STRONG",{});var QIr=s(IJ);OYe=r(QIr,"splinter"),QIr.forEach(t),XYe=r(P8," \u2014 "),Sk=n(P8,"A",{href:!0});var HIr=s(Sk);VYe=r(HIr,"SplinterTokenizer"),HIr.forEach(t),zYe=r(P8," or "),Pk=n(P8,"A",{href:!0});var UIr=s(Pk);WYe=r(UIr,"SplinterTokenizerFast"),UIr.forEach(t),QYe=r(P8," (Splinter model)"),P8.forEach(t),HYe=i(y),Ps=n(y,"LI",{});var $8=s(Ps);jJ=n($8,"STRONG",{});var JIr=s(jJ);UYe=r(JIr,"squeezebert"),JIr.forEach(t),JYe=r($8," \u2014 "),$k=n($8,"A",{href:!0});var YIr=s($k);YYe=r(YIr,"SqueezeBertTokenizer"),YIr.forEach(t),KYe=r($8," or "),Ik=n($8,"A",{href:!0});var KIr=s(Ik);ZYe=r(KIr,"SqueezeBertTokenizerFast"),KIr.forEach(t),eKe=r($8," (SqueezeBERT model)"),$8.forEach(t),oKe=i(y),$s=n(y,"LI",{});var I8=s($s);DJ=n(I8,"STRONG",{});var ZIr=s(DJ);rKe=r(ZIr,"t5"),ZIr.forEach(t),tKe=r(I8," \u2014 "),jk=n(I8,"A",{href:!0});var ejr=s(jk);aKe=r(ejr,"T5Tokenizer"),ejr.forEach(t),nKe=r(I8," or "),Dk=n(I8,"A",{href:!0});var ojr=s(Dk);sKe=r(ojr,"T5TokenizerFast"),ojr.forEach(t),lKe=r(I8," (T5 model)"),I8.forEach(t),iKe=i(y),eh=n(y,"LI",{});var CFe=s(eh);NJ=n(CFe,"STRONG",{});var rjr=s(NJ);dKe=r(rjr,"tapas"),rjr.forEach(t),cKe=r(CFe," \u2014 "),Nk=n(CFe,"A",{href:!0});var tjr=s(Nk);fKe=r(tjr,"TapasTokenizer"),tjr.forEach(t),mKe=r(CFe," (TAPAS model)"),CFe.forEach(t),gKe=i(y),oh=n(y,"LI",{});var MFe=s(oh);qJ=n(MFe,"STRONG",{});var ajr=s(qJ);hKe=r(ajr,"transfo-xl"),ajr.forEach(t),pKe=r(MFe," \u2014 "),qk=n(MFe,"A",{href:!0});var njr=s(qk);_Ke=r(njr,"TransfoXLTokenizer"),njr.forEach(t),uKe=r(MFe," (Transformer-XL model)"),MFe.forEach(t),bKe=i(y),rh=n(y,"LI",{});var EFe=s(rh);GJ=n(EFe,"STRONG",{});var sjr=s(GJ);vKe=r(sjr,"wav2vec2"),sjr.forEach(t),TKe=r(EFe," \u2014 "),Gk=n(EFe,"A",{href:!0});var ljr=s(Gk);FKe=r(ljr,"Wav2Vec2CTCTokenizer"),ljr.forEach(t),CKe=r(EFe," (Wav2Vec2 model)"),EFe.forEach(t),MKe=i(y),th=n(y,"LI",{});var yFe=s(th);OJ=n(yFe,"STRONG",{});var ijr=s(OJ);EKe=r(ijr,"wav2vec2_phoneme"),ijr.forEach(t),yKe=r(yFe," \u2014 "),Ok=n(yFe,"A",{href:!0});var djr=s(Ok);wKe=r(djr,"Wav2Vec2PhonemeCTCTokenizer"),djr.forEach(t),AKe=r(yFe," (Wav2Vec2Phoneme model)"),yFe.forEach(t),LKe=i(y),Is=n(y,"LI",{});var j8=s(Is);XJ=n(j8,"STRONG",{});var cjr=s(XJ);BKe=r(cjr,"xglm"),cjr.forEach(t),xKe=r(j8," \u2014 "),Xk=n(j8,"A",{href:!0});var fjr=s(Xk);kKe=r(fjr,"XGLMTokenizer"),fjr.forEach(t),RKe=r(j8," or "),Vk=n(j8,"A",{href:!0});var mjr=s(Vk);SKe=r(mjr,"XGLMTokenizerFast"),mjr.forEach(t),PKe=r(j8," (XGLM model)"),j8.forEach(t),$Ke=i(y),ah=n(y,"LI",{});var wFe=s(ah);VJ=n(wFe,"STRONG",{});var gjr=s(VJ);IKe=r(gjr,"xlm"),gjr.forEach(t),jKe=r(wFe," \u2014 "),zk=n(wFe,"A",{href:!0});var hjr=s(zk);DKe=r(hjr,"XLMTokenizer"),hjr.forEach(t),NKe=r(wFe," (XLM model)"),wFe.forEach(t),qKe=i(y),nh=n(y,"LI",{});var AFe=s(nh);zJ=n(AFe,"STRONG",{});var pjr=s(zJ);GKe=r(pjr,"xlm-prophetnet"),pjr.forEach(t),OKe=r(AFe," \u2014 "),Wk=n(AFe,"A",{href:!0});var _jr=s(Wk);XKe=r(_jr,"XLMProphetNetTokenizer"),_jr.forEach(t),VKe=r(AFe," (XLMProphetNet model)"),AFe.forEach(t),zKe=i(y),js=n(y,"LI",{});var D8=s(js);WJ=n(D8,"STRONG",{});var ujr=s(WJ);WKe=r(ujr,"xlm-roberta"),ujr.forEach(t),QKe=r(D8," \u2014 "),Qk=n(D8,"A",{href:!0});var bjr=s(Qk);HKe=r(bjr,"XLMRobertaTokenizer"),bjr.forEach(t),UKe=r(D8," or "),Hk=n(D8,"A",{href:!0});var vjr=s(Hk);JKe=r(vjr,"XLMRobertaTokenizerFast"),vjr.forEach(t),YKe=r(D8," (XLM-RoBERTa model)"),D8.forEach(t),KKe=i(y),Ds=n(y,"LI",{});var N8=s(Ds);QJ=n(N8,"STRONG",{});var Tjr=s(QJ);ZKe=r(Tjr,"xlnet"),Tjr.forEach(t),eZe=r(N8," \u2014 "),Uk=n(N8,"A",{href:!0});var Fjr=s(Uk);oZe=r(Fjr,"XLNetTokenizer"),Fjr.forEach(t),rZe=r(N8," or "),Jk=n(N8,"A",{href:!0});var Cjr=s(Jk);tZe=r(Cjr,"XLNetTokenizerFast"),Cjr.forEach(t),aZe=r(N8," (XLNet model)"),N8.forEach(t),y.forEach(t),nZe=i(ha),HJ=n(ha,"P",{});var Mjr=s(HJ);sZe=r(Mjr,"Examples:"),Mjr.forEach(t),lZe=i(ha),m(hE.$$.fragment,ha),ha.forEach(t),iZe=i(Xs),sh=n(Xs,"DIV",{class:!0});var kRe=s(sh);m(pE.$$.fragment,kRe),dZe=i(kRe),UJ=n(kRe,"P",{});var Ejr=s(UJ);cZe=r(Ejr,"Register a new tokenizer in this mapping."),Ejr.forEach(t),kRe.forEach(t),Xs.forEach(t),Axe=i(c),Hi=n(c,"H2",{class:!0});var RRe=s(Hi);lh=n(RRe,"A",{id:!0,class:!0,href:!0});var yjr=s(lh);JJ=n(yjr,"SPAN",{});var wjr=s(JJ);m(_E.$$.fragment,wjr),wjr.forEach(t),yjr.forEach(t),fZe=i(RRe),YJ=n(RRe,"SPAN",{});var Ajr=s(YJ);mZe=r(Ajr,"AutoFeatureExtractor"),Ajr.forEach(t),RRe.forEach(t),Lxe=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(uE.$$.fragment,Vs),gZe=i(Vs),bE=n(Vs,"P",{});var SRe=s(bE);hZe=r(SRe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Yk=n(SRe,"A",{href:!0});var Ljr=s(Yk);pZe=r(Ljr,"AutoFeatureExtractor.from_pretrained()"),Ljr.forEach(t),_Ze=r(SRe," class method."),SRe.forEach(t),uZe=i(Vs),vE=n(Vs,"P",{});var PRe=s(vE);bZe=r(PRe,"This class cannot be instantiated directly using "),KJ=n(PRe,"CODE",{});var Bjr=s(KJ);vZe=r(Bjr,"__init__()"),Bjr.forEach(t),TZe=r(PRe," (throws an error)."),PRe.forEach(t),FZe=i(Vs),$e=n(Vs,"DIV",{class:!0});var Dt=s($e);m(TE.$$.fragment,Dt),CZe=i(Dt),ZJ=n(Dt,"P",{});var xjr=s(ZJ);MZe=r(xjr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),xjr.forEach(t),EZe=i(Dt),Xa=n(Dt,"P",{});var ZM=s(Xa);yZe=r(ZM,"The feature extractor class to instantiate is selected based on the "),eY=n(ZM,"CODE",{});var kjr=s(eY);wZe=r(kjr,"model_type"),kjr.forEach(t),AZe=r(ZM,` property of the config object
(either passed as an argument or loaded from `),oY=n(ZM,"CODE",{});var Rjr=s(oY);LZe=r(Rjr,"pretrained_model_name_or_path"),Rjr.forEach(t),BZe=r(ZM,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),rY=n(ZM,"CODE",{});var Sjr=s(rY);xZe=r(Sjr,"pretrained_model_name_or_path"),Sjr.forEach(t),kZe=r(ZM,":"),ZM.forEach(t),RZe=i(Dt),ae=n(Dt,"UL",{});var le=s(ae);ih=n(le,"LI",{});var LFe=s(ih);tY=n(LFe,"STRONG",{});var Pjr=s(tY);SZe=r(Pjr,"beit"),Pjr.forEach(t),PZe=r(LFe," \u2014 "),Kk=n(LFe,"A",{href:!0});var $jr=s(Kk);$Ze=r($jr,"BeitFeatureExtractor"),$jr.forEach(t),IZe=r(LFe," (BEiT model)"),LFe.forEach(t),jZe=i(le),dh=n(le,"LI",{});var BFe=s(dh);aY=n(BFe,"STRONG",{});var Ijr=s(aY);DZe=r(Ijr,"clip"),Ijr.forEach(t),NZe=r(BFe," \u2014 "),Zk=n(BFe,"A",{href:!0});var jjr=s(Zk);qZe=r(jjr,"CLIPFeatureExtractor"),jjr.forEach(t),GZe=r(BFe," (CLIP model)"),BFe.forEach(t),OZe=i(le),ch=n(le,"LI",{});var xFe=s(ch);nY=n(xFe,"STRONG",{});var Djr=s(nY);XZe=r(Djr,"convnext"),Djr.forEach(t),VZe=r(xFe," \u2014 "),eR=n(xFe,"A",{href:!0});var Njr=s(eR);zZe=r(Njr,"ConvNextFeatureExtractor"),Njr.forEach(t),WZe=r(xFe," (ConvNext model)"),xFe.forEach(t),QZe=i(le),fh=n(le,"LI",{});var kFe=s(fh);sY=n(kFe,"STRONG",{});var qjr=s(sY);HZe=r(qjr,"deit"),qjr.forEach(t),UZe=r(kFe," \u2014 "),oR=n(kFe,"A",{href:!0});var Gjr=s(oR);JZe=r(Gjr,"DeiTFeatureExtractor"),Gjr.forEach(t),YZe=r(kFe," (DeiT model)"),kFe.forEach(t),KZe=i(le),mh=n(le,"LI",{});var RFe=s(mh);lY=n(RFe,"STRONG",{});var Ojr=s(lY);ZZe=r(Ojr,"detr"),Ojr.forEach(t),eeo=r(RFe," \u2014 "),rR=n(RFe,"A",{href:!0});var Xjr=s(rR);oeo=r(Xjr,"DetrFeatureExtractor"),Xjr.forEach(t),reo=r(RFe," (DETR model)"),RFe.forEach(t),teo=i(le),gh=n(le,"LI",{});var SFe=s(gh);iY=n(SFe,"STRONG",{});var Vjr=s(iY);aeo=r(Vjr,"hubert"),Vjr.forEach(t),neo=r(SFe," \u2014 "),tR=n(SFe,"A",{href:!0});var zjr=s(tR);seo=r(zjr,"Wav2Vec2FeatureExtractor"),zjr.forEach(t),leo=r(SFe," (Hubert model)"),SFe.forEach(t),ieo=i(le),hh=n(le,"LI",{});var PFe=s(hh);dY=n(PFe,"STRONG",{});var Wjr=s(dY);deo=r(Wjr,"layoutlmv2"),Wjr.forEach(t),ceo=r(PFe," \u2014 "),aR=n(PFe,"A",{href:!0});var Qjr=s(aR);feo=r(Qjr,"LayoutLMv2FeatureExtractor"),Qjr.forEach(t),meo=r(PFe," (LayoutLMv2 model)"),PFe.forEach(t),geo=i(le),ph=n(le,"LI",{});var $Fe=s(ph);cY=n($Fe,"STRONG",{});var Hjr=s(cY);heo=r(Hjr,"maskformer"),Hjr.forEach(t),peo=r($Fe," \u2014 "),nR=n($Fe,"A",{href:!0});var Ujr=s(nR);_eo=r(Ujr,"MaskFormerFeatureExtractor"),Ujr.forEach(t),ueo=r($Fe," (MaskFormer model)"),$Fe.forEach(t),beo=i(le),_h=n(le,"LI",{});var IFe=s(_h);fY=n(IFe,"STRONG",{});var Jjr=s(fY);veo=r(Jjr,"perceiver"),Jjr.forEach(t),Teo=r(IFe," \u2014 "),sR=n(IFe,"A",{href:!0});var Yjr=s(sR);Feo=r(Yjr,"PerceiverFeatureExtractor"),Yjr.forEach(t),Ceo=r(IFe," (Perceiver model)"),IFe.forEach(t),Meo=i(le),uh=n(le,"LI",{});var jFe=s(uh);mY=n(jFe,"STRONG",{});var Kjr=s(mY);Eeo=r(Kjr,"poolformer"),Kjr.forEach(t),yeo=r(jFe," \u2014 "),lR=n(jFe,"A",{href:!0});var Zjr=s(lR);weo=r(Zjr,"PoolFormerFeatureExtractor"),Zjr.forEach(t),Aeo=r(jFe," (PoolFormer model)"),jFe.forEach(t),Leo=i(le),bh=n(le,"LI",{});var DFe=s(bh);gY=n(DFe,"STRONG",{});var eDr=s(gY);Beo=r(eDr,"segformer"),eDr.forEach(t),xeo=r(DFe," \u2014 "),iR=n(DFe,"A",{href:!0});var oDr=s(iR);keo=r(oDr,"SegformerFeatureExtractor"),oDr.forEach(t),Reo=r(DFe," (SegFormer model)"),DFe.forEach(t),Seo=i(le),vh=n(le,"LI",{});var NFe=s(vh);hY=n(NFe,"STRONG",{});var rDr=s(hY);Peo=r(rDr,"speech_to_text"),rDr.forEach(t),$eo=r(NFe," \u2014 "),dR=n(NFe,"A",{href:!0});var tDr=s(dR);Ieo=r(tDr,"Speech2TextFeatureExtractor"),tDr.forEach(t),jeo=r(NFe," (Speech2Text model)"),NFe.forEach(t),Deo=i(le),Th=n(le,"LI",{});var qFe=s(Th);pY=n(qFe,"STRONG",{});var aDr=s(pY);Neo=r(aDr,"swin"),aDr.forEach(t),qeo=r(qFe," \u2014 "),cR=n(qFe,"A",{href:!0});var nDr=s(cR);Geo=r(nDr,"ViTFeatureExtractor"),nDr.forEach(t),Oeo=r(qFe," (Swin model)"),qFe.forEach(t),Xeo=i(le),Fh=n(le,"LI",{});var GFe=s(Fh);_Y=n(GFe,"STRONG",{});var sDr=s(_Y);Veo=r(sDr,"vit"),sDr.forEach(t),zeo=r(GFe," \u2014 "),fR=n(GFe,"A",{href:!0});var lDr=s(fR);Weo=r(lDr,"ViTFeatureExtractor"),lDr.forEach(t),Qeo=r(GFe," (ViT model)"),GFe.forEach(t),Heo=i(le),Ch=n(le,"LI",{});var OFe=s(Ch);uY=n(OFe,"STRONG",{});var iDr=s(uY);Ueo=r(iDr,"vit_mae"),iDr.forEach(t),Jeo=r(OFe," \u2014 "),mR=n(OFe,"A",{href:!0});var dDr=s(mR);Yeo=r(dDr,"ViTFeatureExtractor"),dDr.forEach(t),Keo=r(OFe," (ViTMAE model)"),OFe.forEach(t),Zeo=i(le),Mh=n(le,"LI",{});var XFe=s(Mh);bY=n(XFe,"STRONG",{});var cDr=s(bY);eoo=r(cDr,"wav2vec2"),cDr.forEach(t),ooo=r(XFe," \u2014 "),gR=n(XFe,"A",{href:!0});var fDr=s(gR);roo=r(fDr,"Wav2Vec2FeatureExtractor"),fDr.forEach(t),too=r(XFe," (Wav2Vec2 model)"),XFe.forEach(t),le.forEach(t),aoo=i(Dt),m(Eh.$$.fragment,Dt),noo=i(Dt),vY=n(Dt,"P",{});var mDr=s(vY);soo=r(mDr,"Examples:"),mDr.forEach(t),loo=i(Dt),m(FE.$$.fragment,Dt),Dt.forEach(t),ioo=i(Vs),yh=n(Vs,"DIV",{class:!0});var $Re=s(yh);m(CE.$$.fragment,$Re),doo=i($Re),TY=n($Re,"P",{});var gDr=s(TY);coo=r(gDr,"Register a new feature extractor for this class."),gDr.forEach(t),$Re.forEach(t),Vs.forEach(t),Bxe=i(c),Ui=n(c,"H2",{class:!0});var IRe=s(Ui);wh=n(IRe,"A",{id:!0,class:!0,href:!0});var hDr=s(wh);FY=n(hDr,"SPAN",{});var pDr=s(FY);m(ME.$$.fragment,pDr),pDr.forEach(t),hDr.forEach(t),foo=i(IRe),CY=n(IRe,"SPAN",{});var _Dr=s(CY);moo=r(_Dr,"AutoProcessor"),_Dr.forEach(t),IRe.forEach(t),xxe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(EE.$$.fragment,zs),goo=i(zs),yE=n(zs,"P",{});var jRe=s(yE);hoo=r(jRe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),hR=n(jRe,"A",{href:!0});var uDr=s(hR);poo=r(uDr,"AutoProcessor.from_pretrained()"),uDr.forEach(t),_oo=r(jRe," class method."),jRe.forEach(t),uoo=i(zs),wE=n(zs,"P",{});var DRe=s(wE);boo=r(DRe,"This class cannot be instantiated directly using "),MY=n(DRe,"CODE",{});var bDr=s(MY);voo=r(bDr,"__init__()"),bDr.forEach(t),Too=r(DRe," (throws an error)."),DRe.forEach(t),Foo=i(zs),Ie=n(zs,"DIV",{class:!0});var Nt=s(Ie);m(AE.$$.fragment,Nt),Coo=i(Nt),EY=n(Nt,"P",{});var vDr=s(EY);Moo=r(vDr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),vDr.forEach(t),Eoo=i(Nt),Ji=n(Nt,"P",{});var xz=s(Ji);yoo=r(xz,"The processor class to instantiate is selected based on the "),yY=n(xz,"CODE",{});var TDr=s(yY);woo=r(TDr,"model_type"),TDr.forEach(t),Aoo=r(xz,` property of the config object (either
passed as an argument or loaded from `),wY=n(xz,"CODE",{});var FDr=s(wY);Loo=r(FDr,"pretrained_model_name_or_path"),FDr.forEach(t),Boo=r(xz," if possible):"),xz.forEach(t),xoo=i(Nt),Be=n(Nt,"UL",{});var No=s(Be);Ah=n(No,"LI",{});var VFe=s(Ah);AY=n(VFe,"STRONG",{});var CDr=s(AY);koo=r(CDr,"clip"),CDr.forEach(t),Roo=r(VFe," \u2014 "),pR=n(VFe,"A",{href:!0});var MDr=s(pR);Soo=r(MDr,"CLIPProcessor"),MDr.forEach(t),Poo=r(VFe," (CLIP model)"),VFe.forEach(t),$oo=i(No),Lh=n(No,"LI",{});var zFe=s(Lh);LY=n(zFe,"STRONG",{});var EDr=s(LY);Ioo=r(EDr,"layoutlmv2"),EDr.forEach(t),joo=r(zFe," \u2014 "),_R=n(zFe,"A",{href:!0});var yDr=s(_R);Doo=r(yDr,"LayoutLMv2Processor"),yDr.forEach(t),Noo=r(zFe," (LayoutLMv2 model)"),zFe.forEach(t),qoo=i(No),Bh=n(No,"LI",{});var WFe=s(Bh);BY=n(WFe,"STRONG",{});var wDr=s(BY);Goo=r(wDr,"layoutxlm"),wDr.forEach(t),Ooo=r(WFe," \u2014 "),uR=n(WFe,"A",{href:!0});var ADr=s(uR);Xoo=r(ADr,"LayoutXLMProcessor"),ADr.forEach(t),Voo=r(WFe," (LayoutXLM model)"),WFe.forEach(t),zoo=i(No),xh=n(No,"LI",{});var QFe=s(xh);xY=n(QFe,"STRONG",{});var LDr=s(xY);Woo=r(LDr,"speech_to_text"),LDr.forEach(t),Qoo=r(QFe," \u2014 "),bR=n(QFe,"A",{href:!0});var BDr=s(bR);Hoo=r(BDr,"Speech2TextProcessor"),BDr.forEach(t),Uoo=r(QFe," (Speech2Text model)"),QFe.forEach(t),Joo=i(No),kh=n(No,"LI",{});var HFe=s(kh);kY=n(HFe,"STRONG",{});var xDr=s(kY);Yoo=r(xDr,"speech_to_text_2"),xDr.forEach(t),Koo=r(HFe," \u2014 "),vR=n(HFe,"A",{href:!0});var kDr=s(vR);Zoo=r(kDr,"Speech2Text2Processor"),kDr.forEach(t),ero=r(HFe," (Speech2Text2 model)"),HFe.forEach(t),oro=i(No),Rh=n(No,"LI",{});var UFe=s(Rh);RY=n(UFe,"STRONG",{});var RDr=s(RY);rro=r(RDr,"trocr"),RDr.forEach(t),tro=r(UFe," \u2014 "),TR=n(UFe,"A",{href:!0});var SDr=s(TR);aro=r(SDr,"TrOCRProcessor"),SDr.forEach(t),nro=r(UFe," (TrOCR model)"),UFe.forEach(t),sro=i(No),Sh=n(No,"LI",{});var JFe=s(Sh);SY=n(JFe,"STRONG",{});var PDr=s(SY);lro=r(PDr,"vision-text-dual-encoder"),PDr.forEach(t),iro=r(JFe," \u2014 "),FR=n(JFe,"A",{href:!0});var $Dr=s(FR);dro=r($Dr,"VisionTextDualEncoderProcessor"),$Dr.forEach(t),cro=r(JFe," (VisionTextDualEncoder model)"),JFe.forEach(t),fro=i(No),Ph=n(No,"LI",{});var YFe=s(Ph);PY=n(YFe,"STRONG",{});var IDr=s(PY);mro=r(IDr,"wav2vec2"),IDr.forEach(t),gro=r(YFe," \u2014 "),CR=n(YFe,"A",{href:!0});var jDr=s(CR);hro=r(jDr,"Wav2Vec2Processor"),jDr.forEach(t),pro=r(YFe," (Wav2Vec2 model)"),YFe.forEach(t),No.forEach(t),_ro=i(Nt),m($h.$$.fragment,Nt),uro=i(Nt),$Y=n(Nt,"P",{});var DDr=s($Y);bro=r(DDr,"Examples:"),DDr.forEach(t),vro=i(Nt),m(LE.$$.fragment,Nt),Nt.forEach(t),Tro=i(zs),Ih=n(zs,"DIV",{class:!0});var NRe=s(Ih);m(BE.$$.fragment,NRe),Fro=i(NRe),IY=n(NRe,"P",{});var NDr=s(IY);Cro=r(NDr,"Register a new processor for this class."),NDr.forEach(t),NRe.forEach(t),zs.forEach(t),kxe=i(c),Yi=n(c,"H2",{class:!0});var qRe=s(Yi);jh=n(qRe,"A",{id:!0,class:!0,href:!0});var qDr=s(jh);jY=n(qDr,"SPAN",{});var GDr=s(jY);m(xE.$$.fragment,GDr),GDr.forEach(t),qDr.forEach(t),Mro=i(qRe),DY=n(qRe,"SPAN",{});var ODr=s(DY);Ero=r(ODr,"AutoModel"),ODr.forEach(t),qRe.forEach(t),Rxe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(kE.$$.fragment,Ws),yro=i(Ws),Ki=n(Ws,"P",{});var kz=s(Ki);wro=r(kz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NY=n(kz,"CODE",{});var XDr=s(NY);Aro=r(XDr,"from_pretrained()"),XDr.forEach(t),Lro=r(kz,"class method or the "),qY=n(kz,"CODE",{});var VDr=s(qY);Bro=r(VDr,"from_config()"),VDr.forEach(t),xro=r(kz,`class
method.`),kz.forEach(t),kro=i(Ws),RE=n(Ws,"P",{});var GRe=s(RE);Rro=r(GRe,"This class cannot be instantiated directly using "),GY=n(GRe,"CODE",{});var zDr=s(GY);Sro=r(zDr,"__init__()"),zDr.forEach(t),Pro=r(GRe," (throws an error)."),GRe.forEach(t),$ro=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(SE.$$.fragment,Qs),Iro=i(Qs),OY=n(Qs,"P",{});var WDr=s(OY);jro=r(WDr,"Instantiates one of the base model classes of the library from a configuration."),WDr.forEach(t),Dro=i(Qs),Zi=n(Qs,"P",{});var Rz=s(Zi);Nro=r(Rz,`Note:
Loading a model from its configuration file does `),XY=n(Rz,"STRONG",{});var QDr=s(XY);qro=r(QDr,"not"),QDr.forEach(t),Gro=r(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(Rz,"CODE",{});var HDr=s(VY);Oro=r(HDr,"from_pretrained()"),HDr.forEach(t),Xro=r(Rz,"to load the model weights."),Rz.forEach(t),Vro=i(Qs),zY=n(Qs,"P",{});var UDr=s(zY);zro=r(UDr,"Examples:"),UDr.forEach(t),Wro=i(Qs),m(PE.$$.fragment,Qs),Qs.forEach(t),Qro=i(Ws),je=n(Ws,"DIV",{class:!0});var qt=s(je);m($E.$$.fragment,qt),Hro=i(qt),WY=n(qt,"P",{});var JDr=s(WY);Uro=r(JDr,"Instantiate one of the base model classes of the library from a pretrained model."),JDr.forEach(t),Jro=i(qt),Va=n(qt,"P",{});var e4=s(Va);Yro=r(e4,"The model class to instantiate is selected based on the "),QY=n(e4,"CODE",{});var YDr=s(QY);Kro=r(YDr,"model_type"),YDr.forEach(t),Zro=r(e4,` property of the config object (either
passed as an argument or loaded from `),HY=n(e4,"CODE",{});var KDr=s(HY);eto=r(KDr,"pretrained_model_name_or_path"),KDr.forEach(t),oto=r(e4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UY=n(e4,"CODE",{});var ZDr=s(UY);rto=r(ZDr,"pretrained_model_name_or_path"),ZDr.forEach(t),tto=r(e4,":"),e4.forEach(t),ato=i(qt),F=n(qt,"UL",{});var C=s(F);Dh=n(C,"LI",{});var KFe=s(Dh);JY=n(KFe,"STRONG",{});var eNr=s(JY);nto=r(eNr,"albert"),eNr.forEach(t),sto=r(KFe," \u2014 "),MR=n(KFe,"A",{href:!0});var oNr=s(MR);lto=r(oNr,"AlbertModel"),oNr.forEach(t),ito=r(KFe," (ALBERT model)"),KFe.forEach(t),dto=i(C),Nh=n(C,"LI",{});var ZFe=s(Nh);YY=n(ZFe,"STRONG",{});var rNr=s(YY);cto=r(rNr,"bart"),rNr.forEach(t),fto=r(ZFe," \u2014 "),ER=n(ZFe,"A",{href:!0});var tNr=s(ER);mto=r(tNr,"BartModel"),tNr.forEach(t),gto=r(ZFe," (BART model)"),ZFe.forEach(t),hto=i(C),qh=n(C,"LI",{});var eCe=s(qh);KY=n(eCe,"STRONG",{});var aNr=s(KY);pto=r(aNr,"beit"),aNr.forEach(t),_to=r(eCe," \u2014 "),yR=n(eCe,"A",{href:!0});var nNr=s(yR);uto=r(nNr,"BeitModel"),nNr.forEach(t),bto=r(eCe," (BEiT model)"),eCe.forEach(t),vto=i(C),Gh=n(C,"LI",{});var oCe=s(Gh);ZY=n(oCe,"STRONG",{});var sNr=s(ZY);Tto=r(sNr,"bert"),sNr.forEach(t),Fto=r(oCe," \u2014 "),wR=n(oCe,"A",{href:!0});var lNr=s(wR);Cto=r(lNr,"BertModel"),lNr.forEach(t),Mto=r(oCe," (BERT model)"),oCe.forEach(t),Eto=i(C),Oh=n(C,"LI",{});var rCe=s(Oh);eK=n(rCe,"STRONG",{});var iNr=s(eK);yto=r(iNr,"bert-generation"),iNr.forEach(t),wto=r(rCe," \u2014 "),AR=n(rCe,"A",{href:!0});var dNr=s(AR);Ato=r(dNr,"BertGenerationEncoder"),dNr.forEach(t),Lto=r(rCe," (Bert Generation model)"),rCe.forEach(t),Bto=i(C),Xh=n(C,"LI",{});var tCe=s(Xh);oK=n(tCe,"STRONG",{});var cNr=s(oK);xto=r(cNr,"big_bird"),cNr.forEach(t),kto=r(tCe," \u2014 "),LR=n(tCe,"A",{href:!0});var fNr=s(LR);Rto=r(fNr,"BigBirdModel"),fNr.forEach(t),Sto=r(tCe," (BigBird model)"),tCe.forEach(t),Pto=i(C),Vh=n(C,"LI",{});var aCe=s(Vh);rK=n(aCe,"STRONG",{});var mNr=s(rK);$to=r(mNr,"bigbird_pegasus"),mNr.forEach(t),Ito=r(aCe," \u2014 "),BR=n(aCe,"A",{href:!0});var gNr=s(BR);jto=r(gNr,"BigBirdPegasusModel"),gNr.forEach(t),Dto=r(aCe," (BigBirdPegasus model)"),aCe.forEach(t),Nto=i(C),zh=n(C,"LI",{});var nCe=s(zh);tK=n(nCe,"STRONG",{});var hNr=s(tK);qto=r(hNr,"blenderbot"),hNr.forEach(t),Gto=r(nCe," \u2014 "),xR=n(nCe,"A",{href:!0});var pNr=s(xR);Oto=r(pNr,"BlenderbotModel"),pNr.forEach(t),Xto=r(nCe," (Blenderbot model)"),nCe.forEach(t),Vto=i(C),Wh=n(C,"LI",{});var sCe=s(Wh);aK=n(sCe,"STRONG",{});var _Nr=s(aK);zto=r(_Nr,"blenderbot-small"),_Nr.forEach(t),Wto=r(sCe," \u2014 "),kR=n(sCe,"A",{href:!0});var uNr=s(kR);Qto=r(uNr,"BlenderbotSmallModel"),uNr.forEach(t),Hto=r(sCe," (BlenderbotSmall model)"),sCe.forEach(t),Uto=i(C),Qh=n(C,"LI",{});var lCe=s(Qh);nK=n(lCe,"STRONG",{});var bNr=s(nK);Jto=r(bNr,"camembert"),bNr.forEach(t),Yto=r(lCe," \u2014 "),RR=n(lCe,"A",{href:!0});var vNr=s(RR);Kto=r(vNr,"CamembertModel"),vNr.forEach(t),Zto=r(lCe," (CamemBERT model)"),lCe.forEach(t),eao=i(C),Hh=n(C,"LI",{});var iCe=s(Hh);sK=n(iCe,"STRONG",{});var TNr=s(sK);oao=r(TNr,"canine"),TNr.forEach(t),rao=r(iCe," \u2014 "),SR=n(iCe,"A",{href:!0});var FNr=s(SR);tao=r(FNr,"CanineModel"),FNr.forEach(t),aao=r(iCe," (Canine model)"),iCe.forEach(t),nao=i(C),Uh=n(C,"LI",{});var dCe=s(Uh);lK=n(dCe,"STRONG",{});var CNr=s(lK);sao=r(CNr,"clip"),CNr.forEach(t),lao=r(dCe," \u2014 "),PR=n(dCe,"A",{href:!0});var MNr=s(PR);iao=r(MNr,"CLIPModel"),MNr.forEach(t),dao=r(dCe," (CLIP model)"),dCe.forEach(t),cao=i(C),Jh=n(C,"LI",{});var cCe=s(Jh);iK=n(cCe,"STRONG",{});var ENr=s(iK);fao=r(ENr,"convbert"),ENr.forEach(t),mao=r(cCe," \u2014 "),$R=n(cCe,"A",{href:!0});var yNr=s($R);gao=r(yNr,"ConvBertModel"),yNr.forEach(t),hao=r(cCe," (ConvBERT model)"),cCe.forEach(t),pao=i(C),Yh=n(C,"LI",{});var fCe=s(Yh);dK=n(fCe,"STRONG",{});var wNr=s(dK);_ao=r(wNr,"convnext"),wNr.forEach(t),uao=r(fCe," \u2014 "),IR=n(fCe,"A",{href:!0});var ANr=s(IR);bao=r(ANr,"ConvNextModel"),ANr.forEach(t),vao=r(fCe," (ConvNext model)"),fCe.forEach(t),Tao=i(C),Kh=n(C,"LI",{});var mCe=s(Kh);cK=n(mCe,"STRONG",{});var LNr=s(cK);Fao=r(LNr,"ctrl"),LNr.forEach(t),Cao=r(mCe," \u2014 "),jR=n(mCe,"A",{href:!0});var BNr=s(jR);Mao=r(BNr,"CTRLModel"),BNr.forEach(t),Eao=r(mCe," (CTRL model)"),mCe.forEach(t),yao=i(C),Zh=n(C,"LI",{});var gCe=s(Zh);fK=n(gCe,"STRONG",{});var xNr=s(fK);wao=r(xNr,"data2vec-audio"),xNr.forEach(t),Aao=r(gCe," \u2014 "),DR=n(gCe,"A",{href:!0});var kNr=s(DR);Lao=r(kNr,"Data2VecAudioModel"),kNr.forEach(t),Bao=r(gCe," (Data2VecAudio model)"),gCe.forEach(t),xao=i(C),ep=n(C,"LI",{});var hCe=s(ep);mK=n(hCe,"STRONG",{});var RNr=s(mK);kao=r(RNr,"data2vec-text"),RNr.forEach(t),Rao=r(hCe," \u2014 "),NR=n(hCe,"A",{href:!0});var SNr=s(NR);Sao=r(SNr,"Data2VecTextModel"),SNr.forEach(t),Pao=r(hCe," (Data2VecText model)"),hCe.forEach(t),$ao=i(C),op=n(C,"LI",{});var pCe=s(op);gK=n(pCe,"STRONG",{});var PNr=s(gK);Iao=r(PNr,"deberta"),PNr.forEach(t),jao=r(pCe," \u2014 "),qR=n(pCe,"A",{href:!0});var $Nr=s(qR);Dao=r($Nr,"DebertaModel"),$Nr.forEach(t),Nao=r(pCe," (DeBERTa model)"),pCe.forEach(t),qao=i(C),rp=n(C,"LI",{});var _Ce=s(rp);hK=n(_Ce,"STRONG",{});var INr=s(hK);Gao=r(INr,"deberta-v2"),INr.forEach(t),Oao=r(_Ce," \u2014 "),GR=n(_Ce,"A",{href:!0});var jNr=s(GR);Xao=r(jNr,"DebertaV2Model"),jNr.forEach(t),Vao=r(_Ce," (DeBERTa-v2 model)"),_Ce.forEach(t),zao=i(C),tp=n(C,"LI",{});var uCe=s(tp);pK=n(uCe,"STRONG",{});var DNr=s(pK);Wao=r(DNr,"deit"),DNr.forEach(t),Qao=r(uCe," \u2014 "),OR=n(uCe,"A",{href:!0});var NNr=s(OR);Hao=r(NNr,"DeiTModel"),NNr.forEach(t),Uao=r(uCe," (DeiT model)"),uCe.forEach(t),Jao=i(C),ap=n(C,"LI",{});var bCe=s(ap);_K=n(bCe,"STRONG",{});var qNr=s(_K);Yao=r(qNr,"detr"),qNr.forEach(t),Kao=r(bCe," \u2014 "),XR=n(bCe,"A",{href:!0});var GNr=s(XR);Zao=r(GNr,"DetrModel"),GNr.forEach(t),eno=r(bCe," (DETR model)"),bCe.forEach(t),ono=i(C),np=n(C,"LI",{});var vCe=s(np);uK=n(vCe,"STRONG",{});var ONr=s(uK);rno=r(ONr,"distilbert"),ONr.forEach(t),tno=r(vCe," \u2014 "),VR=n(vCe,"A",{href:!0});var XNr=s(VR);ano=r(XNr,"DistilBertModel"),XNr.forEach(t),nno=r(vCe," (DistilBERT model)"),vCe.forEach(t),sno=i(C),sp=n(C,"LI",{});var TCe=s(sp);bK=n(TCe,"STRONG",{});var VNr=s(bK);lno=r(VNr,"dpr"),VNr.forEach(t),ino=r(TCe," \u2014 "),zR=n(TCe,"A",{href:!0});var zNr=s(zR);dno=r(zNr,"DPRQuestionEncoder"),zNr.forEach(t),cno=r(TCe," (DPR model)"),TCe.forEach(t),fno=i(C),lp=n(C,"LI",{});var FCe=s(lp);vK=n(FCe,"STRONG",{});var WNr=s(vK);mno=r(WNr,"electra"),WNr.forEach(t),gno=r(FCe," \u2014 "),WR=n(FCe,"A",{href:!0});var QNr=s(WR);hno=r(QNr,"ElectraModel"),QNr.forEach(t),pno=r(FCe," (ELECTRA model)"),FCe.forEach(t),_no=i(C),ip=n(C,"LI",{});var CCe=s(ip);TK=n(CCe,"STRONG",{});var HNr=s(TK);uno=r(HNr,"flaubert"),HNr.forEach(t),bno=r(CCe," \u2014 "),QR=n(CCe,"A",{href:!0});var UNr=s(QR);vno=r(UNr,"FlaubertModel"),UNr.forEach(t),Tno=r(CCe," (FlauBERT model)"),CCe.forEach(t),Fno=i(C),dp=n(C,"LI",{});var MCe=s(dp);FK=n(MCe,"STRONG",{});var JNr=s(FK);Cno=r(JNr,"fnet"),JNr.forEach(t),Mno=r(MCe," \u2014 "),HR=n(MCe,"A",{href:!0});var YNr=s(HR);Eno=r(YNr,"FNetModel"),YNr.forEach(t),yno=r(MCe," (FNet model)"),MCe.forEach(t),wno=i(C),cp=n(C,"LI",{});var ECe=s(cp);CK=n(ECe,"STRONG",{});var KNr=s(CK);Ano=r(KNr,"fsmt"),KNr.forEach(t),Lno=r(ECe," \u2014 "),UR=n(ECe,"A",{href:!0});var ZNr=s(UR);Bno=r(ZNr,"FSMTModel"),ZNr.forEach(t),xno=r(ECe," (FairSeq Machine-Translation model)"),ECe.forEach(t),kno=i(C),Ns=n(C,"LI",{});var q8=s(Ns);MK=n(q8,"STRONG",{});var eqr=s(MK);Rno=r(eqr,"funnel"),eqr.forEach(t),Sno=r(q8," \u2014 "),JR=n(q8,"A",{href:!0});var oqr=s(JR);Pno=r(oqr,"FunnelModel"),oqr.forEach(t),$no=r(q8," or "),YR=n(q8,"A",{href:!0});var rqr=s(YR);Ino=r(rqr,"FunnelBaseModel"),rqr.forEach(t),jno=r(q8," (Funnel Transformer model)"),q8.forEach(t),Dno=i(C),fp=n(C,"LI",{});var yCe=s(fp);EK=n(yCe,"STRONG",{});var tqr=s(EK);Nno=r(tqr,"gpt2"),tqr.forEach(t),qno=r(yCe," \u2014 "),KR=n(yCe,"A",{href:!0});var aqr=s(KR);Gno=r(aqr,"GPT2Model"),aqr.forEach(t),Ono=r(yCe," (OpenAI GPT-2 model)"),yCe.forEach(t),Xno=i(C),mp=n(C,"LI",{});var wCe=s(mp);yK=n(wCe,"STRONG",{});var nqr=s(yK);Vno=r(nqr,"gpt_neo"),nqr.forEach(t),zno=r(wCe," \u2014 "),ZR=n(wCe,"A",{href:!0});var sqr=s(ZR);Wno=r(sqr,"GPTNeoModel"),sqr.forEach(t),Qno=r(wCe," (GPT Neo model)"),wCe.forEach(t),Hno=i(C),gp=n(C,"LI",{});var ACe=s(gp);wK=n(ACe,"STRONG",{});var lqr=s(wK);Uno=r(lqr,"gptj"),lqr.forEach(t),Jno=r(ACe," \u2014 "),eS=n(ACe,"A",{href:!0});var iqr=s(eS);Yno=r(iqr,"GPTJModel"),iqr.forEach(t),Kno=r(ACe," (GPT-J model)"),ACe.forEach(t),Zno=i(C),hp=n(C,"LI",{});var LCe=s(hp);AK=n(LCe,"STRONG",{});var dqr=s(AK);eso=r(dqr,"hubert"),dqr.forEach(t),oso=r(LCe," \u2014 "),oS=n(LCe,"A",{href:!0});var cqr=s(oS);rso=r(cqr,"HubertModel"),cqr.forEach(t),tso=r(LCe," (Hubert model)"),LCe.forEach(t),aso=i(C),pp=n(C,"LI",{});var BCe=s(pp);LK=n(BCe,"STRONG",{});var fqr=s(LK);nso=r(fqr,"ibert"),fqr.forEach(t),sso=r(BCe," \u2014 "),rS=n(BCe,"A",{href:!0});var mqr=s(rS);lso=r(mqr,"IBertModel"),mqr.forEach(t),iso=r(BCe," (I-BERT model)"),BCe.forEach(t),dso=i(C),_p=n(C,"LI",{});var xCe=s(_p);BK=n(xCe,"STRONG",{});var gqr=s(BK);cso=r(gqr,"imagegpt"),gqr.forEach(t),fso=r(xCe," \u2014 "),tS=n(xCe,"A",{href:!0});var hqr=s(tS);mso=r(hqr,"ImageGPTModel"),hqr.forEach(t),gso=r(xCe," (ImageGPT model)"),xCe.forEach(t),hso=i(C),up=n(C,"LI",{});var kCe=s(up);xK=n(kCe,"STRONG",{});var pqr=s(xK);pso=r(pqr,"layoutlm"),pqr.forEach(t),_so=r(kCe," \u2014 "),aS=n(kCe,"A",{href:!0});var _qr=s(aS);uso=r(_qr,"LayoutLMModel"),_qr.forEach(t),bso=r(kCe," (LayoutLM model)"),kCe.forEach(t),vso=i(C),bp=n(C,"LI",{});var RCe=s(bp);kK=n(RCe,"STRONG",{});var uqr=s(kK);Tso=r(uqr,"layoutlmv2"),uqr.forEach(t),Fso=r(RCe," \u2014 "),nS=n(RCe,"A",{href:!0});var bqr=s(nS);Cso=r(bqr,"LayoutLMv2Model"),bqr.forEach(t),Mso=r(RCe," (LayoutLMv2 model)"),RCe.forEach(t),Eso=i(C),vp=n(C,"LI",{});var SCe=s(vp);RK=n(SCe,"STRONG",{});var vqr=s(RK);yso=r(vqr,"led"),vqr.forEach(t),wso=r(SCe," \u2014 "),sS=n(SCe,"A",{href:!0});var Tqr=s(sS);Aso=r(Tqr,"LEDModel"),Tqr.forEach(t),Lso=r(SCe," (LED model)"),SCe.forEach(t),Bso=i(C),Tp=n(C,"LI",{});var PCe=s(Tp);SK=n(PCe,"STRONG",{});var Fqr=s(SK);xso=r(Fqr,"longformer"),Fqr.forEach(t),kso=r(PCe," \u2014 "),lS=n(PCe,"A",{href:!0});var Cqr=s(lS);Rso=r(Cqr,"LongformerModel"),Cqr.forEach(t),Sso=r(PCe," (Longformer model)"),PCe.forEach(t),Pso=i(C),Fp=n(C,"LI",{});var $Ce=s(Fp);PK=n($Ce,"STRONG",{});var Mqr=s(PK);$so=r(Mqr,"luke"),Mqr.forEach(t),Iso=r($Ce," \u2014 "),iS=n($Ce,"A",{href:!0});var Eqr=s(iS);jso=r(Eqr,"LukeModel"),Eqr.forEach(t),Dso=r($Ce," (LUKE model)"),$Ce.forEach(t),Nso=i(C),Cp=n(C,"LI",{});var ICe=s(Cp);$K=n(ICe,"STRONG",{});var yqr=s($K);qso=r(yqr,"lxmert"),yqr.forEach(t),Gso=r(ICe," \u2014 "),dS=n(ICe,"A",{href:!0});var wqr=s(dS);Oso=r(wqr,"LxmertModel"),wqr.forEach(t),Xso=r(ICe," (LXMERT model)"),ICe.forEach(t),Vso=i(C),Mp=n(C,"LI",{});var jCe=s(Mp);IK=n(jCe,"STRONG",{});var Aqr=s(IK);zso=r(Aqr,"m2m_100"),Aqr.forEach(t),Wso=r(jCe," \u2014 "),cS=n(jCe,"A",{href:!0});var Lqr=s(cS);Qso=r(Lqr,"M2M100Model"),Lqr.forEach(t),Hso=r(jCe," (M2M100 model)"),jCe.forEach(t),Uso=i(C),Ep=n(C,"LI",{});var DCe=s(Ep);jK=n(DCe,"STRONG",{});var Bqr=s(jK);Jso=r(Bqr,"marian"),Bqr.forEach(t),Yso=r(DCe," \u2014 "),fS=n(DCe,"A",{href:!0});var xqr=s(fS);Kso=r(xqr,"MarianModel"),xqr.forEach(t),Zso=r(DCe," (Marian model)"),DCe.forEach(t),elo=i(C),yp=n(C,"LI",{});var NCe=s(yp);DK=n(NCe,"STRONG",{});var kqr=s(DK);olo=r(kqr,"maskformer"),kqr.forEach(t),rlo=r(NCe," \u2014 "),mS=n(NCe,"A",{href:!0});var Rqr=s(mS);tlo=r(Rqr,"MaskFormerModel"),Rqr.forEach(t),alo=r(NCe," (MaskFormer model)"),NCe.forEach(t),nlo=i(C),wp=n(C,"LI",{});var qCe=s(wp);NK=n(qCe,"STRONG",{});var Sqr=s(NK);slo=r(Sqr,"mbart"),Sqr.forEach(t),llo=r(qCe," \u2014 "),gS=n(qCe,"A",{href:!0});var Pqr=s(gS);ilo=r(Pqr,"MBartModel"),Pqr.forEach(t),dlo=r(qCe," (mBART model)"),qCe.forEach(t),clo=i(C),Ap=n(C,"LI",{});var GCe=s(Ap);qK=n(GCe,"STRONG",{});var $qr=s(qK);flo=r($qr,"megatron-bert"),$qr.forEach(t),mlo=r(GCe," \u2014 "),hS=n(GCe,"A",{href:!0});var Iqr=s(hS);glo=r(Iqr,"MegatronBertModel"),Iqr.forEach(t),hlo=r(GCe," (MegatronBert model)"),GCe.forEach(t),plo=i(C),Lp=n(C,"LI",{});var OCe=s(Lp);GK=n(OCe,"STRONG",{});var jqr=s(GK);_lo=r(jqr,"mobilebert"),jqr.forEach(t),ulo=r(OCe," \u2014 "),pS=n(OCe,"A",{href:!0});var Dqr=s(pS);blo=r(Dqr,"MobileBertModel"),Dqr.forEach(t),vlo=r(OCe," (MobileBERT model)"),OCe.forEach(t),Tlo=i(C),Bp=n(C,"LI",{});var XCe=s(Bp);OK=n(XCe,"STRONG",{});var Nqr=s(OK);Flo=r(Nqr,"mpnet"),Nqr.forEach(t),Clo=r(XCe," \u2014 "),_S=n(XCe,"A",{href:!0});var qqr=s(_S);Mlo=r(qqr,"MPNetModel"),qqr.forEach(t),Elo=r(XCe," (MPNet model)"),XCe.forEach(t),ylo=i(C),xp=n(C,"LI",{});var VCe=s(xp);XK=n(VCe,"STRONG",{});var Gqr=s(XK);wlo=r(Gqr,"mt5"),Gqr.forEach(t),Alo=r(VCe," \u2014 "),uS=n(VCe,"A",{href:!0});var Oqr=s(uS);Llo=r(Oqr,"MT5Model"),Oqr.forEach(t),Blo=r(VCe," (mT5 model)"),VCe.forEach(t),xlo=i(C),kp=n(C,"LI",{});var zCe=s(kp);VK=n(zCe,"STRONG",{});var Xqr=s(VK);klo=r(Xqr,"nystromformer"),Xqr.forEach(t),Rlo=r(zCe," \u2014 "),bS=n(zCe,"A",{href:!0});var Vqr=s(bS);Slo=r(Vqr,"NystromformerModel"),Vqr.forEach(t),Plo=r(zCe," (Nystromformer model)"),zCe.forEach(t),$lo=i(C),Rp=n(C,"LI",{});var WCe=s(Rp);zK=n(WCe,"STRONG",{});var zqr=s(zK);Ilo=r(zqr,"openai-gpt"),zqr.forEach(t),jlo=r(WCe," \u2014 "),vS=n(WCe,"A",{href:!0});var Wqr=s(vS);Dlo=r(Wqr,"OpenAIGPTModel"),Wqr.forEach(t),Nlo=r(WCe," (OpenAI GPT model)"),WCe.forEach(t),qlo=i(C),Sp=n(C,"LI",{});var QCe=s(Sp);WK=n(QCe,"STRONG",{});var Qqr=s(WK);Glo=r(Qqr,"pegasus"),Qqr.forEach(t),Olo=r(QCe," \u2014 "),TS=n(QCe,"A",{href:!0});var Hqr=s(TS);Xlo=r(Hqr,"PegasusModel"),Hqr.forEach(t),Vlo=r(QCe," (Pegasus model)"),QCe.forEach(t),zlo=i(C),Pp=n(C,"LI",{});var HCe=s(Pp);QK=n(HCe,"STRONG",{});var Uqr=s(QK);Wlo=r(Uqr,"perceiver"),Uqr.forEach(t),Qlo=r(HCe," \u2014 "),FS=n(HCe,"A",{href:!0});var Jqr=s(FS);Hlo=r(Jqr,"PerceiverModel"),Jqr.forEach(t),Ulo=r(HCe," (Perceiver model)"),HCe.forEach(t),Jlo=i(C),$p=n(C,"LI",{});var UCe=s($p);HK=n(UCe,"STRONG",{});var Yqr=s(HK);Ylo=r(Yqr,"plbart"),Yqr.forEach(t),Klo=r(UCe," \u2014 "),CS=n(UCe,"A",{href:!0});var Kqr=s(CS);Zlo=r(Kqr,"PLBartModel"),Kqr.forEach(t),eio=r(UCe," (PLBart model)"),UCe.forEach(t),oio=i(C),Ip=n(C,"LI",{});var JCe=s(Ip);UK=n(JCe,"STRONG",{});var Zqr=s(UK);rio=r(Zqr,"poolformer"),Zqr.forEach(t),tio=r(JCe," \u2014 "),MS=n(JCe,"A",{href:!0});var eGr=s(MS);aio=r(eGr,"PoolFormerModel"),eGr.forEach(t),nio=r(JCe," (PoolFormer model)"),JCe.forEach(t),sio=i(C),jp=n(C,"LI",{});var YCe=s(jp);JK=n(YCe,"STRONG",{});var oGr=s(JK);lio=r(oGr,"prophetnet"),oGr.forEach(t),iio=r(YCe," \u2014 "),ES=n(YCe,"A",{href:!0});var rGr=s(ES);dio=r(rGr,"ProphetNetModel"),rGr.forEach(t),cio=r(YCe," (ProphetNet model)"),YCe.forEach(t),fio=i(C),Dp=n(C,"LI",{});var KCe=s(Dp);YK=n(KCe,"STRONG",{});var tGr=s(YK);mio=r(tGr,"qdqbert"),tGr.forEach(t),gio=r(KCe," \u2014 "),yS=n(KCe,"A",{href:!0});var aGr=s(yS);hio=r(aGr,"QDQBertModel"),aGr.forEach(t),pio=r(KCe," (QDQBert model)"),KCe.forEach(t),_io=i(C),Np=n(C,"LI",{});var ZCe=s(Np);KK=n(ZCe,"STRONG",{});var nGr=s(KK);uio=r(nGr,"reformer"),nGr.forEach(t),bio=r(ZCe," \u2014 "),wS=n(ZCe,"A",{href:!0});var sGr=s(wS);vio=r(sGr,"ReformerModel"),sGr.forEach(t),Tio=r(ZCe," (Reformer model)"),ZCe.forEach(t),Fio=i(C),qp=n(C,"LI",{});var eMe=s(qp);ZK=n(eMe,"STRONG",{});var lGr=s(ZK);Cio=r(lGr,"rembert"),lGr.forEach(t),Mio=r(eMe," \u2014 "),AS=n(eMe,"A",{href:!0});var iGr=s(AS);Eio=r(iGr,"RemBertModel"),iGr.forEach(t),yio=r(eMe," (RemBERT model)"),eMe.forEach(t),wio=i(C),Gp=n(C,"LI",{});var oMe=s(Gp);eZ=n(oMe,"STRONG",{});var dGr=s(eZ);Aio=r(dGr,"retribert"),dGr.forEach(t),Lio=r(oMe," \u2014 "),LS=n(oMe,"A",{href:!0});var cGr=s(LS);Bio=r(cGr,"RetriBertModel"),cGr.forEach(t),xio=r(oMe," (RetriBERT model)"),oMe.forEach(t),kio=i(C),Op=n(C,"LI",{});var rMe=s(Op);oZ=n(rMe,"STRONG",{});var fGr=s(oZ);Rio=r(fGr,"roberta"),fGr.forEach(t),Sio=r(rMe," \u2014 "),BS=n(rMe,"A",{href:!0});var mGr=s(BS);Pio=r(mGr,"RobertaModel"),mGr.forEach(t),$io=r(rMe," (RoBERTa model)"),rMe.forEach(t),Iio=i(C),Xp=n(C,"LI",{});var tMe=s(Xp);rZ=n(tMe,"STRONG",{});var gGr=s(rZ);jio=r(gGr,"roformer"),gGr.forEach(t),Dio=r(tMe," \u2014 "),xS=n(tMe,"A",{href:!0});var hGr=s(xS);Nio=r(hGr,"RoFormerModel"),hGr.forEach(t),qio=r(tMe," (RoFormer model)"),tMe.forEach(t),Gio=i(C),Vp=n(C,"LI",{});var aMe=s(Vp);tZ=n(aMe,"STRONG",{});var pGr=s(tZ);Oio=r(pGr,"segformer"),pGr.forEach(t),Xio=r(aMe," \u2014 "),kS=n(aMe,"A",{href:!0});var _Gr=s(kS);Vio=r(_Gr,"SegformerModel"),_Gr.forEach(t),zio=r(aMe," (SegFormer model)"),aMe.forEach(t),Wio=i(C),zp=n(C,"LI",{});var nMe=s(zp);aZ=n(nMe,"STRONG",{});var uGr=s(aZ);Qio=r(uGr,"sew"),uGr.forEach(t),Hio=r(nMe," \u2014 "),RS=n(nMe,"A",{href:!0});var bGr=s(RS);Uio=r(bGr,"SEWModel"),bGr.forEach(t),Jio=r(nMe," (SEW model)"),nMe.forEach(t),Yio=i(C),Wp=n(C,"LI",{});var sMe=s(Wp);nZ=n(sMe,"STRONG",{});var vGr=s(nZ);Kio=r(vGr,"sew-d"),vGr.forEach(t),Zio=r(sMe," \u2014 "),SS=n(sMe,"A",{href:!0});var TGr=s(SS);edo=r(TGr,"SEWDModel"),TGr.forEach(t),odo=r(sMe," (SEW-D model)"),sMe.forEach(t),rdo=i(C),Qp=n(C,"LI",{});var lMe=s(Qp);sZ=n(lMe,"STRONG",{});var FGr=s(sZ);tdo=r(FGr,"speech_to_text"),FGr.forEach(t),ado=r(lMe," \u2014 "),PS=n(lMe,"A",{href:!0});var CGr=s(PS);ndo=r(CGr,"Speech2TextModel"),CGr.forEach(t),sdo=r(lMe," (Speech2Text model)"),lMe.forEach(t),ldo=i(C),Hp=n(C,"LI",{});var iMe=s(Hp);lZ=n(iMe,"STRONG",{});var MGr=s(lZ);ido=r(MGr,"splinter"),MGr.forEach(t),ddo=r(iMe," \u2014 "),$S=n(iMe,"A",{href:!0});var EGr=s($S);cdo=r(EGr,"SplinterModel"),EGr.forEach(t),fdo=r(iMe," (Splinter model)"),iMe.forEach(t),mdo=i(C),Up=n(C,"LI",{});var dMe=s(Up);iZ=n(dMe,"STRONG",{});var yGr=s(iZ);gdo=r(yGr,"squeezebert"),yGr.forEach(t),hdo=r(dMe," \u2014 "),IS=n(dMe,"A",{href:!0});var wGr=s(IS);pdo=r(wGr,"SqueezeBertModel"),wGr.forEach(t),_do=r(dMe," (SqueezeBERT model)"),dMe.forEach(t),udo=i(C),Jp=n(C,"LI",{});var cMe=s(Jp);dZ=n(cMe,"STRONG",{});var AGr=s(dZ);bdo=r(AGr,"swin"),AGr.forEach(t),vdo=r(cMe," \u2014 "),jS=n(cMe,"A",{href:!0});var LGr=s(jS);Tdo=r(LGr,"SwinModel"),LGr.forEach(t),Fdo=r(cMe," (Swin model)"),cMe.forEach(t),Cdo=i(C),Yp=n(C,"LI",{});var fMe=s(Yp);cZ=n(fMe,"STRONG",{});var BGr=s(cZ);Mdo=r(BGr,"t5"),BGr.forEach(t),Edo=r(fMe," \u2014 "),DS=n(fMe,"A",{href:!0});var xGr=s(DS);ydo=r(xGr,"T5Model"),xGr.forEach(t),wdo=r(fMe," (T5 model)"),fMe.forEach(t),Ado=i(C),Kp=n(C,"LI",{});var mMe=s(Kp);fZ=n(mMe,"STRONG",{});var kGr=s(fZ);Ldo=r(kGr,"tapas"),kGr.forEach(t),Bdo=r(mMe," \u2014 "),NS=n(mMe,"A",{href:!0});var RGr=s(NS);xdo=r(RGr,"TapasModel"),RGr.forEach(t),kdo=r(mMe," (TAPAS model)"),mMe.forEach(t),Rdo=i(C),Zp=n(C,"LI",{});var gMe=s(Zp);mZ=n(gMe,"STRONG",{});var SGr=s(mZ);Sdo=r(SGr,"transfo-xl"),SGr.forEach(t),Pdo=r(gMe," \u2014 "),qS=n(gMe,"A",{href:!0});var PGr=s(qS);$do=r(PGr,"TransfoXLModel"),PGr.forEach(t),Ido=r(gMe," (Transformer-XL model)"),gMe.forEach(t),jdo=i(C),e_=n(C,"LI",{});var hMe=s(e_);gZ=n(hMe,"STRONG",{});var $Gr=s(gZ);Ddo=r($Gr,"unispeech"),$Gr.forEach(t),Ndo=r(hMe," \u2014 "),GS=n(hMe,"A",{href:!0});var IGr=s(GS);qdo=r(IGr,"UniSpeechModel"),IGr.forEach(t),Gdo=r(hMe," (UniSpeech model)"),hMe.forEach(t),Odo=i(C),o_=n(C,"LI",{});var pMe=s(o_);hZ=n(pMe,"STRONG",{});var jGr=s(hZ);Xdo=r(jGr,"unispeech-sat"),jGr.forEach(t),Vdo=r(pMe," \u2014 "),OS=n(pMe,"A",{href:!0});var DGr=s(OS);zdo=r(DGr,"UniSpeechSatModel"),DGr.forEach(t),Wdo=r(pMe," (UniSpeechSat model)"),pMe.forEach(t),Qdo=i(C),r_=n(C,"LI",{});var _Me=s(r_);pZ=n(_Me,"STRONG",{});var NGr=s(pZ);Hdo=r(NGr,"vilt"),NGr.forEach(t),Udo=r(_Me," \u2014 "),XS=n(_Me,"A",{href:!0});var qGr=s(XS);Jdo=r(qGr,"ViltModel"),qGr.forEach(t),Ydo=r(_Me," (ViLT model)"),_Me.forEach(t),Kdo=i(C),t_=n(C,"LI",{});var uMe=s(t_);_Z=n(uMe,"STRONG",{});var GGr=s(_Z);Zdo=r(GGr,"vision-text-dual-encoder"),GGr.forEach(t),eco=r(uMe," \u2014 "),VS=n(uMe,"A",{href:!0});var OGr=s(VS);oco=r(OGr,"VisionTextDualEncoderModel"),OGr.forEach(t),rco=r(uMe," (VisionTextDualEncoder model)"),uMe.forEach(t),tco=i(C),a_=n(C,"LI",{});var bMe=s(a_);uZ=n(bMe,"STRONG",{});var XGr=s(uZ);aco=r(XGr,"visual_bert"),XGr.forEach(t),nco=r(bMe," \u2014 "),zS=n(bMe,"A",{href:!0});var VGr=s(zS);sco=r(VGr,"VisualBertModel"),VGr.forEach(t),lco=r(bMe," (VisualBert model)"),bMe.forEach(t),ico=i(C),n_=n(C,"LI",{});var vMe=s(n_);bZ=n(vMe,"STRONG",{});var zGr=s(bZ);dco=r(zGr,"vit"),zGr.forEach(t),cco=r(vMe," \u2014 "),WS=n(vMe,"A",{href:!0});var WGr=s(WS);fco=r(WGr,"ViTModel"),WGr.forEach(t),mco=r(vMe," (ViT model)"),vMe.forEach(t),gco=i(C),s_=n(C,"LI",{});var TMe=s(s_);vZ=n(TMe,"STRONG",{});var QGr=s(vZ);hco=r(QGr,"vit_mae"),QGr.forEach(t),pco=r(TMe," \u2014 "),QS=n(TMe,"A",{href:!0});var HGr=s(QS);_co=r(HGr,"ViTMAEModel"),HGr.forEach(t),uco=r(TMe," (ViTMAE model)"),TMe.forEach(t),bco=i(C),l_=n(C,"LI",{});var FMe=s(l_);TZ=n(FMe,"STRONG",{});var UGr=s(TZ);vco=r(UGr,"wav2vec2"),UGr.forEach(t),Tco=r(FMe," \u2014 "),HS=n(FMe,"A",{href:!0});var JGr=s(HS);Fco=r(JGr,"Wav2Vec2Model"),JGr.forEach(t),Cco=r(FMe," (Wav2Vec2 model)"),FMe.forEach(t),Mco=i(C),i_=n(C,"LI",{});var CMe=s(i_);FZ=n(CMe,"STRONG",{});var YGr=s(FZ);Eco=r(YGr,"wavlm"),YGr.forEach(t),yco=r(CMe," \u2014 "),US=n(CMe,"A",{href:!0});var KGr=s(US);wco=r(KGr,"WavLMModel"),KGr.forEach(t),Aco=r(CMe," (WavLM model)"),CMe.forEach(t),Lco=i(C),d_=n(C,"LI",{});var MMe=s(d_);CZ=n(MMe,"STRONG",{});var ZGr=s(CZ);Bco=r(ZGr,"xglm"),ZGr.forEach(t),xco=r(MMe," \u2014 "),JS=n(MMe,"A",{href:!0});var eOr=s(JS);kco=r(eOr,"XGLMModel"),eOr.forEach(t),Rco=r(MMe," (XGLM model)"),MMe.forEach(t),Sco=i(C),c_=n(C,"LI",{});var EMe=s(c_);MZ=n(EMe,"STRONG",{});var oOr=s(MZ);Pco=r(oOr,"xlm"),oOr.forEach(t),$co=r(EMe," \u2014 "),YS=n(EMe,"A",{href:!0});var rOr=s(YS);Ico=r(rOr,"XLMModel"),rOr.forEach(t),jco=r(EMe," (XLM model)"),EMe.forEach(t),Dco=i(C),f_=n(C,"LI",{});var yMe=s(f_);EZ=n(yMe,"STRONG",{});var tOr=s(EZ);Nco=r(tOr,"xlm-prophetnet"),tOr.forEach(t),qco=r(yMe," \u2014 "),KS=n(yMe,"A",{href:!0});var aOr=s(KS);Gco=r(aOr,"XLMProphetNetModel"),aOr.forEach(t),Oco=r(yMe," (XLMProphetNet model)"),yMe.forEach(t),Xco=i(C),m_=n(C,"LI",{});var wMe=s(m_);yZ=n(wMe,"STRONG",{});var nOr=s(yZ);Vco=r(nOr,"xlm-roberta"),nOr.forEach(t),zco=r(wMe," \u2014 "),ZS=n(wMe,"A",{href:!0});var sOr=s(ZS);Wco=r(sOr,"XLMRobertaModel"),sOr.forEach(t),Qco=r(wMe," (XLM-RoBERTa model)"),wMe.forEach(t),Hco=i(C),g_=n(C,"LI",{});var AMe=s(g_);wZ=n(AMe,"STRONG",{});var lOr=s(wZ);Uco=r(lOr,"xlm-roberta-xl"),lOr.forEach(t),Jco=r(AMe," \u2014 "),eP=n(AMe,"A",{href:!0});var iOr=s(eP);Yco=r(iOr,"XLMRobertaXLModel"),iOr.forEach(t),Kco=r(AMe," (XLM-RoBERTa-XL model)"),AMe.forEach(t),Zco=i(C),h_=n(C,"LI",{});var LMe=s(h_);AZ=n(LMe,"STRONG",{});var dOr=s(AZ);efo=r(dOr,"xlnet"),dOr.forEach(t),ofo=r(LMe," \u2014 "),oP=n(LMe,"A",{href:!0});var cOr=s(oP);rfo=r(cOr,"XLNetModel"),cOr.forEach(t),tfo=r(LMe," (XLNet model)"),LMe.forEach(t),afo=i(C),p_=n(C,"LI",{});var BMe=s(p_);LZ=n(BMe,"STRONG",{});var fOr=s(LZ);nfo=r(fOr,"yoso"),fOr.forEach(t),sfo=r(BMe," \u2014 "),rP=n(BMe,"A",{href:!0});var mOr=s(rP);lfo=r(mOr,"YosoModel"),mOr.forEach(t),ifo=r(BMe," (YOSO model)"),BMe.forEach(t),C.forEach(t),dfo=i(qt),__=n(qt,"P",{});var xMe=s(__);cfo=r(xMe,"The model is set in evaluation mode by default using "),BZ=n(xMe,"CODE",{});var gOr=s(BZ);ffo=r(gOr,"model.eval()"),gOr.forEach(t),mfo=r(xMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xZ=n(xMe,"CODE",{});var hOr=s(xZ);gfo=r(hOr,"model.train()"),hOr.forEach(t),xMe.forEach(t),hfo=i(qt),kZ=n(qt,"P",{});var pOr=s(kZ);pfo=r(pOr,"Examples:"),pOr.forEach(t),_fo=i(qt),m(IE.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),Sxe=i(c),ed=n(c,"H2",{class:!0});var ORe=s(ed);u_=n(ORe,"A",{id:!0,class:!0,href:!0});var _Or=s(u_);RZ=n(_Or,"SPAN",{});var uOr=s(RZ);m(jE.$$.fragment,uOr),uOr.forEach(t),_Or.forEach(t),ufo=i(ORe),SZ=n(ORe,"SPAN",{});var bOr=s(SZ);bfo=r(bOr,"AutoModelForPreTraining"),bOr.forEach(t),ORe.forEach(t),Pxe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(DE.$$.fragment,Hs),vfo=i(Hs),od=n(Hs,"P",{});var Sz=s(od);Tfo=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PZ=n(Sz,"CODE",{});var vOr=s(PZ);Ffo=r(vOr,"from_pretrained()"),vOr.forEach(t),Cfo=r(Sz,"class method or the "),$Z=n(Sz,"CODE",{});var TOr=s($Z);Mfo=r(TOr,"from_config()"),TOr.forEach(t),Efo=r(Sz,`class
method.`),Sz.forEach(t),yfo=i(Hs),NE=n(Hs,"P",{});var XRe=s(NE);wfo=r(XRe,"This class cannot be instantiated directly using "),IZ=n(XRe,"CODE",{});var FOr=s(IZ);Afo=r(FOr,"__init__()"),FOr.forEach(t),Lfo=r(XRe," (throws an error)."),XRe.forEach(t),Bfo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(qE.$$.fragment,Us),xfo=i(Us),jZ=n(Us,"P",{});var COr=s(jZ);kfo=r(COr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),COr.forEach(t),Rfo=i(Us),rd=n(Us,"P",{});var Pz=s(rd);Sfo=r(Pz,`Note:
Loading a model from its configuration file does `),DZ=n(Pz,"STRONG",{});var MOr=s(DZ);Pfo=r(MOr,"not"),MOr.forEach(t),$fo=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),NZ=n(Pz,"CODE",{});var EOr=s(NZ);Ifo=r(EOr,"from_pretrained()"),EOr.forEach(t),jfo=r(Pz,"to load the model weights."),Pz.forEach(t),Dfo=i(Us),qZ=n(Us,"P",{});var yOr=s(qZ);Nfo=r(yOr,"Examples:"),yOr.forEach(t),qfo=i(Us),m(GE.$$.fragment,Us),Us.forEach(t),Gfo=i(Hs),De=n(Hs,"DIV",{class:!0});var Gt=s(De);m(OE.$$.fragment,Gt),Ofo=i(Gt),GZ=n(Gt,"P",{});var wOr=s(GZ);Xfo=r(wOr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wOr.forEach(t),Vfo=i(Gt),za=n(Gt,"P",{});var o4=s(za);zfo=r(o4,"The model class to instantiate is selected based on the "),OZ=n(o4,"CODE",{});var AOr=s(OZ);Wfo=r(AOr,"model_type"),AOr.forEach(t),Qfo=r(o4,` property of the config object (either
passed as an argument or loaded from `),XZ=n(o4,"CODE",{});var LOr=s(XZ);Hfo=r(LOr,"pretrained_model_name_or_path"),LOr.forEach(t),Ufo=r(o4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VZ=n(o4,"CODE",{});var BOr=s(VZ);Jfo=r(BOr,"pretrained_model_name_or_path"),BOr.forEach(t),Yfo=r(o4,":"),o4.forEach(t),Kfo=i(Gt),k=n(Gt,"UL",{});var S=s(k);b_=n(S,"LI",{});var kMe=s(b_);zZ=n(kMe,"STRONG",{});var xOr=s(zZ);Zfo=r(xOr,"albert"),xOr.forEach(t),emo=r(kMe," \u2014 "),tP=n(kMe,"A",{href:!0});var kOr=s(tP);omo=r(kOr,"AlbertForPreTraining"),kOr.forEach(t),rmo=r(kMe," (ALBERT model)"),kMe.forEach(t),tmo=i(S),v_=n(S,"LI",{});var RMe=s(v_);WZ=n(RMe,"STRONG",{});var ROr=s(WZ);amo=r(ROr,"bart"),ROr.forEach(t),nmo=r(RMe," \u2014 "),aP=n(RMe,"A",{href:!0});var SOr=s(aP);smo=r(SOr,"BartForConditionalGeneration"),SOr.forEach(t),lmo=r(RMe," (BART model)"),RMe.forEach(t),imo=i(S),T_=n(S,"LI",{});var SMe=s(T_);QZ=n(SMe,"STRONG",{});var POr=s(QZ);dmo=r(POr,"bert"),POr.forEach(t),cmo=r(SMe," \u2014 "),nP=n(SMe,"A",{href:!0});var $Or=s(nP);fmo=r($Or,"BertForPreTraining"),$Or.forEach(t),mmo=r(SMe," (BERT model)"),SMe.forEach(t),gmo=i(S),F_=n(S,"LI",{});var PMe=s(F_);HZ=n(PMe,"STRONG",{});var IOr=s(HZ);hmo=r(IOr,"big_bird"),IOr.forEach(t),pmo=r(PMe," \u2014 "),sP=n(PMe,"A",{href:!0});var jOr=s(sP);_mo=r(jOr,"BigBirdForPreTraining"),jOr.forEach(t),umo=r(PMe," (BigBird model)"),PMe.forEach(t),bmo=i(S),C_=n(S,"LI",{});var $Me=s(C_);UZ=n($Me,"STRONG",{});var DOr=s(UZ);vmo=r(DOr,"camembert"),DOr.forEach(t),Tmo=r($Me," \u2014 "),lP=n($Me,"A",{href:!0});var NOr=s(lP);Fmo=r(NOr,"CamembertForMaskedLM"),NOr.forEach(t),Cmo=r($Me," (CamemBERT model)"),$Me.forEach(t),Mmo=i(S),M_=n(S,"LI",{});var IMe=s(M_);JZ=n(IMe,"STRONG",{});var qOr=s(JZ);Emo=r(qOr,"ctrl"),qOr.forEach(t),ymo=r(IMe," \u2014 "),iP=n(IMe,"A",{href:!0});var GOr=s(iP);wmo=r(GOr,"CTRLLMHeadModel"),GOr.forEach(t),Amo=r(IMe," (CTRL model)"),IMe.forEach(t),Lmo=i(S),E_=n(S,"LI",{});var jMe=s(E_);YZ=n(jMe,"STRONG",{});var OOr=s(YZ);Bmo=r(OOr,"data2vec-text"),OOr.forEach(t),xmo=r(jMe," \u2014 "),dP=n(jMe,"A",{href:!0});var XOr=s(dP);kmo=r(XOr,"Data2VecTextForMaskedLM"),XOr.forEach(t),Rmo=r(jMe," (Data2VecText model)"),jMe.forEach(t),Smo=i(S),y_=n(S,"LI",{});var DMe=s(y_);KZ=n(DMe,"STRONG",{});var VOr=s(KZ);Pmo=r(VOr,"deberta"),VOr.forEach(t),$mo=r(DMe," \u2014 "),cP=n(DMe,"A",{href:!0});var zOr=s(cP);Imo=r(zOr,"DebertaForMaskedLM"),zOr.forEach(t),jmo=r(DMe," (DeBERTa model)"),DMe.forEach(t),Dmo=i(S),w_=n(S,"LI",{});var NMe=s(w_);ZZ=n(NMe,"STRONG",{});var WOr=s(ZZ);Nmo=r(WOr,"deberta-v2"),WOr.forEach(t),qmo=r(NMe," \u2014 "),fP=n(NMe,"A",{href:!0});var QOr=s(fP);Gmo=r(QOr,"DebertaV2ForMaskedLM"),QOr.forEach(t),Omo=r(NMe," (DeBERTa-v2 model)"),NMe.forEach(t),Xmo=i(S),A_=n(S,"LI",{});var qMe=s(A_);eee=n(qMe,"STRONG",{});var HOr=s(eee);Vmo=r(HOr,"distilbert"),HOr.forEach(t),zmo=r(qMe," \u2014 "),mP=n(qMe,"A",{href:!0});var UOr=s(mP);Wmo=r(UOr,"DistilBertForMaskedLM"),UOr.forEach(t),Qmo=r(qMe," (DistilBERT model)"),qMe.forEach(t),Hmo=i(S),L_=n(S,"LI",{});var GMe=s(L_);oee=n(GMe,"STRONG",{});var JOr=s(oee);Umo=r(JOr,"electra"),JOr.forEach(t),Jmo=r(GMe," \u2014 "),gP=n(GMe,"A",{href:!0});var YOr=s(gP);Ymo=r(YOr,"ElectraForPreTraining"),YOr.forEach(t),Kmo=r(GMe," (ELECTRA model)"),GMe.forEach(t),Zmo=i(S),B_=n(S,"LI",{});var OMe=s(B_);ree=n(OMe,"STRONG",{});var KOr=s(ree);ego=r(KOr,"flaubert"),KOr.forEach(t),ogo=r(OMe," \u2014 "),hP=n(OMe,"A",{href:!0});var ZOr=s(hP);rgo=r(ZOr,"FlaubertWithLMHeadModel"),ZOr.forEach(t),tgo=r(OMe," (FlauBERT model)"),OMe.forEach(t),ago=i(S),x_=n(S,"LI",{});var XMe=s(x_);tee=n(XMe,"STRONG",{});var eXr=s(tee);ngo=r(eXr,"fnet"),eXr.forEach(t),sgo=r(XMe," \u2014 "),pP=n(XMe,"A",{href:!0});var oXr=s(pP);lgo=r(oXr,"FNetForPreTraining"),oXr.forEach(t),igo=r(XMe," (FNet model)"),XMe.forEach(t),dgo=i(S),k_=n(S,"LI",{});var VMe=s(k_);aee=n(VMe,"STRONG",{});var rXr=s(aee);cgo=r(rXr,"fsmt"),rXr.forEach(t),fgo=r(VMe," \u2014 "),_P=n(VMe,"A",{href:!0});var tXr=s(_P);mgo=r(tXr,"FSMTForConditionalGeneration"),tXr.forEach(t),ggo=r(VMe," (FairSeq Machine-Translation model)"),VMe.forEach(t),hgo=i(S),R_=n(S,"LI",{});var zMe=s(R_);nee=n(zMe,"STRONG",{});var aXr=s(nee);pgo=r(aXr,"funnel"),aXr.forEach(t),_go=r(zMe," \u2014 "),uP=n(zMe,"A",{href:!0});var nXr=s(uP);ugo=r(nXr,"FunnelForPreTraining"),nXr.forEach(t),bgo=r(zMe," (Funnel Transformer model)"),zMe.forEach(t),vgo=i(S),S_=n(S,"LI",{});var WMe=s(S_);see=n(WMe,"STRONG",{});var sXr=s(see);Tgo=r(sXr,"gpt2"),sXr.forEach(t),Fgo=r(WMe," \u2014 "),bP=n(WMe,"A",{href:!0});var lXr=s(bP);Cgo=r(lXr,"GPT2LMHeadModel"),lXr.forEach(t),Mgo=r(WMe," (OpenAI GPT-2 model)"),WMe.forEach(t),Ego=i(S),P_=n(S,"LI",{});var QMe=s(P_);lee=n(QMe,"STRONG",{});var iXr=s(lee);ygo=r(iXr,"ibert"),iXr.forEach(t),wgo=r(QMe," \u2014 "),vP=n(QMe,"A",{href:!0});var dXr=s(vP);Ago=r(dXr,"IBertForMaskedLM"),dXr.forEach(t),Lgo=r(QMe," (I-BERT model)"),QMe.forEach(t),Bgo=i(S),$_=n(S,"LI",{});var HMe=s($_);iee=n(HMe,"STRONG",{});var cXr=s(iee);xgo=r(cXr,"layoutlm"),cXr.forEach(t),kgo=r(HMe," \u2014 "),TP=n(HMe,"A",{href:!0});var fXr=s(TP);Rgo=r(fXr,"LayoutLMForMaskedLM"),fXr.forEach(t),Sgo=r(HMe," (LayoutLM model)"),HMe.forEach(t),Pgo=i(S),I_=n(S,"LI",{});var UMe=s(I_);dee=n(UMe,"STRONG",{});var mXr=s(dee);$go=r(mXr,"longformer"),mXr.forEach(t),Igo=r(UMe," \u2014 "),FP=n(UMe,"A",{href:!0});var gXr=s(FP);jgo=r(gXr,"LongformerForMaskedLM"),gXr.forEach(t),Dgo=r(UMe," (Longformer model)"),UMe.forEach(t),Ngo=i(S),j_=n(S,"LI",{});var JMe=s(j_);cee=n(JMe,"STRONG",{});var hXr=s(cee);qgo=r(hXr,"lxmert"),hXr.forEach(t),Ggo=r(JMe," \u2014 "),CP=n(JMe,"A",{href:!0});var pXr=s(CP);Ogo=r(pXr,"LxmertForPreTraining"),pXr.forEach(t),Xgo=r(JMe," (LXMERT model)"),JMe.forEach(t),Vgo=i(S),D_=n(S,"LI",{});var YMe=s(D_);fee=n(YMe,"STRONG",{});var _Xr=s(fee);zgo=r(_Xr,"megatron-bert"),_Xr.forEach(t),Wgo=r(YMe," \u2014 "),MP=n(YMe,"A",{href:!0});var uXr=s(MP);Qgo=r(uXr,"MegatronBertForPreTraining"),uXr.forEach(t),Hgo=r(YMe," (MegatronBert model)"),YMe.forEach(t),Ugo=i(S),N_=n(S,"LI",{});var KMe=s(N_);mee=n(KMe,"STRONG",{});var bXr=s(mee);Jgo=r(bXr,"mobilebert"),bXr.forEach(t),Ygo=r(KMe," \u2014 "),EP=n(KMe,"A",{href:!0});var vXr=s(EP);Kgo=r(vXr,"MobileBertForPreTraining"),vXr.forEach(t),Zgo=r(KMe," (MobileBERT model)"),KMe.forEach(t),eho=i(S),q_=n(S,"LI",{});var ZMe=s(q_);gee=n(ZMe,"STRONG",{});var TXr=s(gee);oho=r(TXr,"mpnet"),TXr.forEach(t),rho=r(ZMe," \u2014 "),yP=n(ZMe,"A",{href:!0});var FXr=s(yP);tho=r(FXr,"MPNetForMaskedLM"),FXr.forEach(t),aho=r(ZMe," (MPNet model)"),ZMe.forEach(t),nho=i(S),G_=n(S,"LI",{});var e4e=s(G_);hee=n(e4e,"STRONG",{});var CXr=s(hee);sho=r(CXr,"openai-gpt"),CXr.forEach(t),lho=r(e4e," \u2014 "),wP=n(e4e,"A",{href:!0});var MXr=s(wP);iho=r(MXr,"OpenAIGPTLMHeadModel"),MXr.forEach(t),dho=r(e4e," (OpenAI GPT model)"),e4e.forEach(t),cho=i(S),O_=n(S,"LI",{});var o4e=s(O_);pee=n(o4e,"STRONG",{});var EXr=s(pee);fho=r(EXr,"retribert"),EXr.forEach(t),mho=r(o4e," \u2014 "),AP=n(o4e,"A",{href:!0});var yXr=s(AP);gho=r(yXr,"RetriBertModel"),yXr.forEach(t),hho=r(o4e," (RetriBERT model)"),o4e.forEach(t),pho=i(S),X_=n(S,"LI",{});var r4e=s(X_);_ee=n(r4e,"STRONG",{});var wXr=s(_ee);_ho=r(wXr,"roberta"),wXr.forEach(t),uho=r(r4e," \u2014 "),LP=n(r4e,"A",{href:!0});var AXr=s(LP);bho=r(AXr,"RobertaForMaskedLM"),AXr.forEach(t),vho=r(r4e," (RoBERTa model)"),r4e.forEach(t),Tho=i(S),V_=n(S,"LI",{});var t4e=s(V_);uee=n(t4e,"STRONG",{});var LXr=s(uee);Fho=r(LXr,"squeezebert"),LXr.forEach(t),Cho=r(t4e," \u2014 "),BP=n(t4e,"A",{href:!0});var BXr=s(BP);Mho=r(BXr,"SqueezeBertForMaskedLM"),BXr.forEach(t),Eho=r(t4e," (SqueezeBERT model)"),t4e.forEach(t),yho=i(S),z_=n(S,"LI",{});var a4e=s(z_);bee=n(a4e,"STRONG",{});var xXr=s(bee);who=r(xXr,"t5"),xXr.forEach(t),Aho=r(a4e," \u2014 "),xP=n(a4e,"A",{href:!0});var kXr=s(xP);Lho=r(kXr,"T5ForConditionalGeneration"),kXr.forEach(t),Bho=r(a4e," (T5 model)"),a4e.forEach(t),xho=i(S),W_=n(S,"LI",{});var n4e=s(W_);vee=n(n4e,"STRONG",{});var RXr=s(vee);kho=r(RXr,"tapas"),RXr.forEach(t),Rho=r(n4e," \u2014 "),kP=n(n4e,"A",{href:!0});var SXr=s(kP);Sho=r(SXr,"TapasForMaskedLM"),SXr.forEach(t),Pho=r(n4e," (TAPAS model)"),n4e.forEach(t),$ho=i(S),Q_=n(S,"LI",{});var s4e=s(Q_);Tee=n(s4e,"STRONG",{});var PXr=s(Tee);Iho=r(PXr,"transfo-xl"),PXr.forEach(t),jho=r(s4e," \u2014 "),RP=n(s4e,"A",{href:!0});var $Xr=s(RP);Dho=r($Xr,"TransfoXLLMHeadModel"),$Xr.forEach(t),Nho=r(s4e," (Transformer-XL model)"),s4e.forEach(t),qho=i(S),H_=n(S,"LI",{});var l4e=s(H_);Fee=n(l4e,"STRONG",{});var IXr=s(Fee);Gho=r(IXr,"unispeech"),IXr.forEach(t),Oho=r(l4e," \u2014 "),SP=n(l4e,"A",{href:!0});var jXr=s(SP);Xho=r(jXr,"UniSpeechForPreTraining"),jXr.forEach(t),Vho=r(l4e," (UniSpeech model)"),l4e.forEach(t),zho=i(S),U_=n(S,"LI",{});var i4e=s(U_);Cee=n(i4e,"STRONG",{});var DXr=s(Cee);Who=r(DXr,"unispeech-sat"),DXr.forEach(t),Qho=r(i4e," \u2014 "),PP=n(i4e,"A",{href:!0});var NXr=s(PP);Hho=r(NXr,"UniSpeechSatForPreTraining"),NXr.forEach(t),Uho=r(i4e," (UniSpeechSat model)"),i4e.forEach(t),Jho=i(S),J_=n(S,"LI",{});var d4e=s(J_);Mee=n(d4e,"STRONG",{});var qXr=s(Mee);Yho=r(qXr,"visual_bert"),qXr.forEach(t),Kho=r(d4e," \u2014 "),$P=n(d4e,"A",{href:!0});var GXr=s($P);Zho=r(GXr,"VisualBertForPreTraining"),GXr.forEach(t),epo=r(d4e," (VisualBert model)"),d4e.forEach(t),opo=i(S),Y_=n(S,"LI",{});var c4e=s(Y_);Eee=n(c4e,"STRONG",{});var OXr=s(Eee);rpo=r(OXr,"vit_mae"),OXr.forEach(t),tpo=r(c4e," \u2014 "),IP=n(c4e,"A",{href:!0});var XXr=s(IP);apo=r(XXr,"ViTMAEForPreTraining"),XXr.forEach(t),npo=r(c4e," (ViTMAE model)"),c4e.forEach(t),spo=i(S),K_=n(S,"LI",{});var f4e=s(K_);yee=n(f4e,"STRONG",{});var VXr=s(yee);lpo=r(VXr,"wav2vec2"),VXr.forEach(t),ipo=r(f4e," \u2014 "),jP=n(f4e,"A",{href:!0});var zXr=s(jP);dpo=r(zXr,"Wav2Vec2ForPreTraining"),zXr.forEach(t),cpo=r(f4e," (Wav2Vec2 model)"),f4e.forEach(t),fpo=i(S),Z_=n(S,"LI",{});var m4e=s(Z_);wee=n(m4e,"STRONG",{});var WXr=s(wee);mpo=r(WXr,"xlm"),WXr.forEach(t),gpo=r(m4e," \u2014 "),DP=n(m4e,"A",{href:!0});var QXr=s(DP);hpo=r(QXr,"XLMWithLMHeadModel"),QXr.forEach(t),ppo=r(m4e," (XLM model)"),m4e.forEach(t),_po=i(S),eu=n(S,"LI",{});var g4e=s(eu);Aee=n(g4e,"STRONG",{});var HXr=s(Aee);upo=r(HXr,"xlm-roberta"),HXr.forEach(t),bpo=r(g4e," \u2014 "),NP=n(g4e,"A",{href:!0});var UXr=s(NP);vpo=r(UXr,"XLMRobertaForMaskedLM"),UXr.forEach(t),Tpo=r(g4e," (XLM-RoBERTa model)"),g4e.forEach(t),Fpo=i(S),ou=n(S,"LI",{});var h4e=s(ou);Lee=n(h4e,"STRONG",{});var JXr=s(Lee);Cpo=r(JXr,"xlm-roberta-xl"),JXr.forEach(t),Mpo=r(h4e," \u2014 "),qP=n(h4e,"A",{href:!0});var YXr=s(qP);Epo=r(YXr,"XLMRobertaXLForMaskedLM"),YXr.forEach(t),ypo=r(h4e," (XLM-RoBERTa-XL model)"),h4e.forEach(t),wpo=i(S),ru=n(S,"LI",{});var p4e=s(ru);Bee=n(p4e,"STRONG",{});var KXr=s(Bee);Apo=r(KXr,"xlnet"),KXr.forEach(t),Lpo=r(p4e," \u2014 "),GP=n(p4e,"A",{href:!0});var ZXr=s(GP);Bpo=r(ZXr,"XLNetLMHeadModel"),ZXr.forEach(t),xpo=r(p4e," (XLNet model)"),p4e.forEach(t),S.forEach(t),kpo=i(Gt),tu=n(Gt,"P",{});var _4e=s(tu);Rpo=r(_4e,"The model is set in evaluation mode by default using "),xee=n(_4e,"CODE",{});var eVr=s(xee);Spo=r(eVr,"model.eval()"),eVr.forEach(t),Ppo=r(_4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kee=n(_4e,"CODE",{});var oVr=s(kee);$po=r(oVr,"model.train()"),oVr.forEach(t),_4e.forEach(t),Ipo=i(Gt),Ree=n(Gt,"P",{});var rVr=s(Ree);jpo=r(rVr,"Examples:"),rVr.forEach(t),Dpo=i(Gt),m(XE.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),$xe=i(c),td=n(c,"H2",{class:!0});var VRe=s(td);au=n(VRe,"A",{id:!0,class:!0,href:!0});var tVr=s(au);See=n(tVr,"SPAN",{});var aVr=s(See);m(VE.$$.fragment,aVr),aVr.forEach(t),tVr.forEach(t),Npo=i(VRe),Pee=n(VRe,"SPAN",{});var nVr=s(Pee);qpo=r(nVr,"AutoModelForCausalLM"),nVr.forEach(t),VRe.forEach(t),Ixe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(zE.$$.fragment,Js),Gpo=i(Js),ad=n(Js,"P",{});var $z=s(ad);Opo=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$ee=n($z,"CODE",{});var sVr=s($ee);Xpo=r(sVr,"from_pretrained()"),sVr.forEach(t),Vpo=r($z,"class method or the "),Iee=n($z,"CODE",{});var lVr=s(Iee);zpo=r(lVr,"from_config()"),lVr.forEach(t),Wpo=r($z,`class
method.`),$z.forEach(t),Qpo=i(Js),WE=n(Js,"P",{});var zRe=s(WE);Hpo=r(zRe,"This class cannot be instantiated directly using "),jee=n(zRe,"CODE",{});var iVr=s(jee);Upo=r(iVr,"__init__()"),iVr.forEach(t),Jpo=r(zRe," (throws an error)."),zRe.forEach(t),Ypo=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(QE.$$.fragment,Ys),Kpo=i(Ys),Dee=n(Ys,"P",{});var dVr=s(Dee);Zpo=r(dVr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dVr.forEach(t),e_o=i(Ys),nd=n(Ys,"P",{});var Iz=s(nd);o_o=r(Iz,`Note:
Loading a model from its configuration file does `),Nee=n(Iz,"STRONG",{});var cVr=s(Nee);r_o=r(cVr,"not"),cVr.forEach(t),t_o=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=n(Iz,"CODE",{});var fVr=s(qee);a_o=r(fVr,"from_pretrained()"),fVr.forEach(t),n_o=r(Iz,"to load the model weights."),Iz.forEach(t),s_o=i(Ys),Gee=n(Ys,"P",{});var mVr=s(Gee);l_o=r(mVr,"Examples:"),mVr.forEach(t),i_o=i(Ys),m(HE.$$.fragment,Ys),Ys.forEach(t),d_o=i(Js),Ne=n(Js,"DIV",{class:!0});var Ot=s(Ne);m(UE.$$.fragment,Ot),c_o=i(Ot),Oee=n(Ot,"P",{});var gVr=s(Oee);f_o=r(gVr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gVr.forEach(t),m_o=i(Ot),Wa=n(Ot,"P",{});var r4=s(Wa);g_o=r(r4,"The model class to instantiate is selected based on the "),Xee=n(r4,"CODE",{});var hVr=s(Xee);h_o=r(hVr,"model_type"),hVr.forEach(t),p_o=r(r4,` property of the config object (either
passed as an argument or loaded from `),Vee=n(r4,"CODE",{});var pVr=s(Vee);__o=r(pVr,"pretrained_model_name_or_path"),pVr.forEach(t),u_o=r(r4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zee=n(r4,"CODE",{});var _Vr=s(zee);b_o=r(_Vr,"pretrained_model_name_or_path"),_Vr.forEach(t),v_o=r(r4,":"),r4.forEach(t),T_o=i(Ot),$=n(Ot,"UL",{});var j=s($);nu=n(j,"LI",{});var u4e=s(nu);Wee=n(u4e,"STRONG",{});var uVr=s(Wee);F_o=r(uVr,"bart"),uVr.forEach(t),C_o=r(u4e," \u2014 "),OP=n(u4e,"A",{href:!0});var bVr=s(OP);M_o=r(bVr,"BartForCausalLM"),bVr.forEach(t),E_o=r(u4e," (BART model)"),u4e.forEach(t),y_o=i(j),su=n(j,"LI",{});var b4e=s(su);Qee=n(b4e,"STRONG",{});var vVr=s(Qee);w_o=r(vVr,"bert"),vVr.forEach(t),A_o=r(b4e," \u2014 "),XP=n(b4e,"A",{href:!0});var TVr=s(XP);L_o=r(TVr,"BertLMHeadModel"),TVr.forEach(t),B_o=r(b4e," (BERT model)"),b4e.forEach(t),x_o=i(j),lu=n(j,"LI",{});var v4e=s(lu);Hee=n(v4e,"STRONG",{});var FVr=s(Hee);k_o=r(FVr,"bert-generation"),FVr.forEach(t),R_o=r(v4e," \u2014 "),VP=n(v4e,"A",{href:!0});var CVr=s(VP);S_o=r(CVr,"BertGenerationDecoder"),CVr.forEach(t),P_o=r(v4e," (Bert Generation model)"),v4e.forEach(t),$_o=i(j),iu=n(j,"LI",{});var T4e=s(iu);Uee=n(T4e,"STRONG",{});var MVr=s(Uee);I_o=r(MVr,"big_bird"),MVr.forEach(t),j_o=r(T4e," \u2014 "),zP=n(T4e,"A",{href:!0});var EVr=s(zP);D_o=r(EVr,"BigBirdForCausalLM"),EVr.forEach(t),N_o=r(T4e," (BigBird model)"),T4e.forEach(t),q_o=i(j),du=n(j,"LI",{});var F4e=s(du);Jee=n(F4e,"STRONG",{});var yVr=s(Jee);G_o=r(yVr,"bigbird_pegasus"),yVr.forEach(t),O_o=r(F4e," \u2014 "),WP=n(F4e,"A",{href:!0});var wVr=s(WP);X_o=r(wVr,"BigBirdPegasusForCausalLM"),wVr.forEach(t),V_o=r(F4e," (BigBirdPegasus model)"),F4e.forEach(t),z_o=i(j),cu=n(j,"LI",{});var C4e=s(cu);Yee=n(C4e,"STRONG",{});var AVr=s(Yee);W_o=r(AVr,"blenderbot"),AVr.forEach(t),Q_o=r(C4e," \u2014 "),QP=n(C4e,"A",{href:!0});var LVr=s(QP);H_o=r(LVr,"BlenderbotForCausalLM"),LVr.forEach(t),U_o=r(C4e," (Blenderbot model)"),C4e.forEach(t),J_o=i(j),fu=n(j,"LI",{});var M4e=s(fu);Kee=n(M4e,"STRONG",{});var BVr=s(Kee);Y_o=r(BVr,"blenderbot-small"),BVr.forEach(t),K_o=r(M4e," \u2014 "),HP=n(M4e,"A",{href:!0});var xVr=s(HP);Z_o=r(xVr,"BlenderbotSmallForCausalLM"),xVr.forEach(t),euo=r(M4e," (BlenderbotSmall model)"),M4e.forEach(t),ouo=i(j),mu=n(j,"LI",{});var E4e=s(mu);Zee=n(E4e,"STRONG",{});var kVr=s(Zee);ruo=r(kVr,"camembert"),kVr.forEach(t),tuo=r(E4e," \u2014 "),UP=n(E4e,"A",{href:!0});var RVr=s(UP);auo=r(RVr,"CamembertForCausalLM"),RVr.forEach(t),nuo=r(E4e," (CamemBERT model)"),E4e.forEach(t),suo=i(j),gu=n(j,"LI",{});var y4e=s(gu);eoe=n(y4e,"STRONG",{});var SVr=s(eoe);luo=r(SVr,"ctrl"),SVr.forEach(t),iuo=r(y4e," \u2014 "),JP=n(y4e,"A",{href:!0});var PVr=s(JP);duo=r(PVr,"CTRLLMHeadModel"),PVr.forEach(t),cuo=r(y4e," (CTRL model)"),y4e.forEach(t),fuo=i(j),hu=n(j,"LI",{});var w4e=s(hu);ooe=n(w4e,"STRONG",{});var $Vr=s(ooe);muo=r($Vr,"data2vec-text"),$Vr.forEach(t),guo=r(w4e," \u2014 "),YP=n(w4e,"A",{href:!0});var IVr=s(YP);huo=r(IVr,"Data2VecTextForCausalLM"),IVr.forEach(t),puo=r(w4e," (Data2VecText model)"),w4e.forEach(t),_uo=i(j),pu=n(j,"LI",{});var A4e=s(pu);roe=n(A4e,"STRONG",{});var jVr=s(roe);uuo=r(jVr,"electra"),jVr.forEach(t),buo=r(A4e," \u2014 "),KP=n(A4e,"A",{href:!0});var DVr=s(KP);vuo=r(DVr,"ElectraForCausalLM"),DVr.forEach(t),Tuo=r(A4e," (ELECTRA model)"),A4e.forEach(t),Fuo=i(j),_u=n(j,"LI",{});var L4e=s(_u);toe=n(L4e,"STRONG",{});var NVr=s(toe);Cuo=r(NVr,"gpt2"),NVr.forEach(t),Muo=r(L4e," \u2014 "),ZP=n(L4e,"A",{href:!0});var qVr=s(ZP);Euo=r(qVr,"GPT2LMHeadModel"),qVr.forEach(t),yuo=r(L4e," (OpenAI GPT-2 model)"),L4e.forEach(t),wuo=i(j),uu=n(j,"LI",{});var B4e=s(uu);aoe=n(B4e,"STRONG",{});var GVr=s(aoe);Auo=r(GVr,"gpt_neo"),GVr.forEach(t),Luo=r(B4e," \u2014 "),e$=n(B4e,"A",{href:!0});var OVr=s(e$);Buo=r(OVr,"GPTNeoForCausalLM"),OVr.forEach(t),xuo=r(B4e," (GPT Neo model)"),B4e.forEach(t),kuo=i(j),bu=n(j,"LI",{});var x4e=s(bu);noe=n(x4e,"STRONG",{});var XVr=s(noe);Ruo=r(XVr,"gptj"),XVr.forEach(t),Suo=r(x4e," \u2014 "),o$=n(x4e,"A",{href:!0});var VVr=s(o$);Puo=r(VVr,"GPTJForCausalLM"),VVr.forEach(t),$uo=r(x4e," (GPT-J model)"),x4e.forEach(t),Iuo=i(j),vu=n(j,"LI",{});var k4e=s(vu);soe=n(k4e,"STRONG",{});var zVr=s(soe);juo=r(zVr,"marian"),zVr.forEach(t),Duo=r(k4e," \u2014 "),r$=n(k4e,"A",{href:!0});var WVr=s(r$);Nuo=r(WVr,"MarianForCausalLM"),WVr.forEach(t),quo=r(k4e," (Marian model)"),k4e.forEach(t),Guo=i(j),Tu=n(j,"LI",{});var R4e=s(Tu);loe=n(R4e,"STRONG",{});var QVr=s(loe);Ouo=r(QVr,"mbart"),QVr.forEach(t),Xuo=r(R4e," \u2014 "),t$=n(R4e,"A",{href:!0});var HVr=s(t$);Vuo=r(HVr,"MBartForCausalLM"),HVr.forEach(t),zuo=r(R4e," (mBART model)"),R4e.forEach(t),Wuo=i(j),Fu=n(j,"LI",{});var S4e=s(Fu);ioe=n(S4e,"STRONG",{});var UVr=s(ioe);Quo=r(UVr,"megatron-bert"),UVr.forEach(t),Huo=r(S4e," \u2014 "),a$=n(S4e,"A",{href:!0});var JVr=s(a$);Uuo=r(JVr,"MegatronBertForCausalLM"),JVr.forEach(t),Juo=r(S4e," (MegatronBert model)"),S4e.forEach(t),Yuo=i(j),Cu=n(j,"LI",{});var P4e=s(Cu);doe=n(P4e,"STRONG",{});var YVr=s(doe);Kuo=r(YVr,"openai-gpt"),YVr.forEach(t),Zuo=r(P4e," \u2014 "),n$=n(P4e,"A",{href:!0});var KVr=s(n$);e2o=r(KVr,"OpenAIGPTLMHeadModel"),KVr.forEach(t),o2o=r(P4e," (OpenAI GPT model)"),P4e.forEach(t),r2o=i(j),Mu=n(j,"LI",{});var $4e=s(Mu);coe=n($4e,"STRONG",{});var ZVr=s(coe);t2o=r(ZVr,"pegasus"),ZVr.forEach(t),a2o=r($4e," \u2014 "),s$=n($4e,"A",{href:!0});var ezr=s(s$);n2o=r(ezr,"PegasusForCausalLM"),ezr.forEach(t),s2o=r($4e," (Pegasus model)"),$4e.forEach(t),l2o=i(j),Eu=n(j,"LI",{});var I4e=s(Eu);foe=n(I4e,"STRONG",{});var ozr=s(foe);i2o=r(ozr,"plbart"),ozr.forEach(t),d2o=r(I4e," \u2014 "),l$=n(I4e,"A",{href:!0});var rzr=s(l$);c2o=r(rzr,"PLBartForCausalLM"),rzr.forEach(t),f2o=r(I4e," (PLBart model)"),I4e.forEach(t),m2o=i(j),yu=n(j,"LI",{});var j4e=s(yu);moe=n(j4e,"STRONG",{});var tzr=s(moe);g2o=r(tzr,"prophetnet"),tzr.forEach(t),h2o=r(j4e," \u2014 "),i$=n(j4e,"A",{href:!0});var azr=s(i$);p2o=r(azr,"ProphetNetForCausalLM"),azr.forEach(t),_2o=r(j4e," (ProphetNet model)"),j4e.forEach(t),u2o=i(j),wu=n(j,"LI",{});var D4e=s(wu);goe=n(D4e,"STRONG",{});var nzr=s(goe);b2o=r(nzr,"qdqbert"),nzr.forEach(t),v2o=r(D4e," \u2014 "),d$=n(D4e,"A",{href:!0});var szr=s(d$);T2o=r(szr,"QDQBertLMHeadModel"),szr.forEach(t),F2o=r(D4e," (QDQBert model)"),D4e.forEach(t),C2o=i(j),Au=n(j,"LI",{});var N4e=s(Au);hoe=n(N4e,"STRONG",{});var lzr=s(hoe);M2o=r(lzr,"reformer"),lzr.forEach(t),E2o=r(N4e," \u2014 "),c$=n(N4e,"A",{href:!0});var izr=s(c$);y2o=r(izr,"ReformerModelWithLMHead"),izr.forEach(t),w2o=r(N4e," (Reformer model)"),N4e.forEach(t),A2o=i(j),Lu=n(j,"LI",{});var q4e=s(Lu);poe=n(q4e,"STRONG",{});var dzr=s(poe);L2o=r(dzr,"rembert"),dzr.forEach(t),B2o=r(q4e," \u2014 "),f$=n(q4e,"A",{href:!0});var czr=s(f$);x2o=r(czr,"RemBertForCausalLM"),czr.forEach(t),k2o=r(q4e," (RemBERT model)"),q4e.forEach(t),R2o=i(j),Bu=n(j,"LI",{});var G4e=s(Bu);_oe=n(G4e,"STRONG",{});var fzr=s(_oe);S2o=r(fzr,"roberta"),fzr.forEach(t),P2o=r(G4e," \u2014 "),m$=n(G4e,"A",{href:!0});var mzr=s(m$);$2o=r(mzr,"RobertaForCausalLM"),mzr.forEach(t),I2o=r(G4e," (RoBERTa model)"),G4e.forEach(t),j2o=i(j),xu=n(j,"LI",{});var O4e=s(xu);uoe=n(O4e,"STRONG",{});var gzr=s(uoe);D2o=r(gzr,"roformer"),gzr.forEach(t),N2o=r(O4e," \u2014 "),g$=n(O4e,"A",{href:!0});var hzr=s(g$);q2o=r(hzr,"RoFormerForCausalLM"),hzr.forEach(t),G2o=r(O4e," (RoFormer model)"),O4e.forEach(t),O2o=i(j),ku=n(j,"LI",{});var X4e=s(ku);boe=n(X4e,"STRONG",{});var pzr=s(boe);X2o=r(pzr,"speech_to_text_2"),pzr.forEach(t),V2o=r(X4e," \u2014 "),h$=n(X4e,"A",{href:!0});var _zr=s(h$);z2o=r(_zr,"Speech2Text2ForCausalLM"),_zr.forEach(t),W2o=r(X4e," (Speech2Text2 model)"),X4e.forEach(t),Q2o=i(j),Ru=n(j,"LI",{});var V4e=s(Ru);voe=n(V4e,"STRONG",{});var uzr=s(voe);H2o=r(uzr,"transfo-xl"),uzr.forEach(t),U2o=r(V4e," \u2014 "),p$=n(V4e,"A",{href:!0});var bzr=s(p$);J2o=r(bzr,"TransfoXLLMHeadModel"),bzr.forEach(t),Y2o=r(V4e," (Transformer-XL model)"),V4e.forEach(t),K2o=i(j),Su=n(j,"LI",{});var z4e=s(Su);Toe=n(z4e,"STRONG",{});var vzr=s(Toe);Z2o=r(vzr,"trocr"),vzr.forEach(t),e1o=r(z4e," \u2014 "),_$=n(z4e,"A",{href:!0});var Tzr=s(_$);o1o=r(Tzr,"TrOCRForCausalLM"),Tzr.forEach(t),r1o=r(z4e," (TrOCR model)"),z4e.forEach(t),t1o=i(j),Pu=n(j,"LI",{});var W4e=s(Pu);Foe=n(W4e,"STRONG",{});var Fzr=s(Foe);a1o=r(Fzr,"xglm"),Fzr.forEach(t),n1o=r(W4e," \u2014 "),u$=n(W4e,"A",{href:!0});var Czr=s(u$);s1o=r(Czr,"XGLMForCausalLM"),Czr.forEach(t),l1o=r(W4e," (XGLM model)"),W4e.forEach(t),i1o=i(j),$u=n(j,"LI",{});var Q4e=s($u);Coe=n(Q4e,"STRONG",{});var Mzr=s(Coe);d1o=r(Mzr,"xlm"),Mzr.forEach(t),c1o=r(Q4e," \u2014 "),b$=n(Q4e,"A",{href:!0});var Ezr=s(b$);f1o=r(Ezr,"XLMWithLMHeadModel"),Ezr.forEach(t),m1o=r(Q4e," (XLM model)"),Q4e.forEach(t),g1o=i(j),Iu=n(j,"LI",{});var H4e=s(Iu);Moe=n(H4e,"STRONG",{});var yzr=s(Moe);h1o=r(yzr,"xlm-prophetnet"),yzr.forEach(t),p1o=r(H4e," \u2014 "),v$=n(H4e,"A",{href:!0});var wzr=s(v$);_1o=r(wzr,"XLMProphetNetForCausalLM"),wzr.forEach(t),u1o=r(H4e," (XLMProphetNet model)"),H4e.forEach(t),b1o=i(j),ju=n(j,"LI",{});var U4e=s(ju);Eoe=n(U4e,"STRONG",{});var Azr=s(Eoe);v1o=r(Azr,"xlm-roberta"),Azr.forEach(t),T1o=r(U4e," \u2014 "),T$=n(U4e,"A",{href:!0});var Lzr=s(T$);F1o=r(Lzr,"XLMRobertaForCausalLM"),Lzr.forEach(t),C1o=r(U4e," (XLM-RoBERTa model)"),U4e.forEach(t),M1o=i(j),Du=n(j,"LI",{});var J4e=s(Du);yoe=n(J4e,"STRONG",{});var Bzr=s(yoe);E1o=r(Bzr,"xlm-roberta-xl"),Bzr.forEach(t),y1o=r(J4e," \u2014 "),F$=n(J4e,"A",{href:!0});var xzr=s(F$);w1o=r(xzr,"XLMRobertaXLForCausalLM"),xzr.forEach(t),A1o=r(J4e," (XLM-RoBERTa-XL model)"),J4e.forEach(t),L1o=i(j),Nu=n(j,"LI",{});var Y4e=s(Nu);woe=n(Y4e,"STRONG",{});var kzr=s(woe);B1o=r(kzr,"xlnet"),kzr.forEach(t),x1o=r(Y4e," \u2014 "),C$=n(Y4e,"A",{href:!0});var Rzr=s(C$);k1o=r(Rzr,"XLNetLMHeadModel"),Rzr.forEach(t),R1o=r(Y4e," (XLNet model)"),Y4e.forEach(t),j.forEach(t),S1o=i(Ot),qu=n(Ot,"P",{});var K4e=s(qu);P1o=r(K4e,"The model is set in evaluation mode by default using "),Aoe=n(K4e,"CODE",{});var Szr=s(Aoe);$1o=r(Szr,"model.eval()"),Szr.forEach(t),I1o=r(K4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Loe=n(K4e,"CODE",{});var Pzr=s(Loe);j1o=r(Pzr,"model.train()"),Pzr.forEach(t),K4e.forEach(t),D1o=i(Ot),Boe=n(Ot,"P",{});var $zr=s(Boe);N1o=r($zr,"Examples:"),$zr.forEach(t),q1o=i(Ot),m(JE.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),jxe=i(c),sd=n(c,"H2",{class:!0});var WRe=s(sd);Gu=n(WRe,"A",{id:!0,class:!0,href:!0});var Izr=s(Gu);xoe=n(Izr,"SPAN",{});var jzr=s(xoe);m(YE.$$.fragment,jzr),jzr.forEach(t),Izr.forEach(t),G1o=i(WRe),koe=n(WRe,"SPAN",{});var Dzr=s(koe);O1o=r(Dzr,"AutoModelForMaskedLM"),Dzr.forEach(t),WRe.forEach(t),Dxe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(KE.$$.fragment,Ks),X1o=i(Ks),ld=n(Ks,"P",{});var jz=s(ld);V1o=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Roe=n(jz,"CODE",{});var Nzr=s(Roe);z1o=r(Nzr,"from_pretrained()"),Nzr.forEach(t),W1o=r(jz,"class method or the "),Soe=n(jz,"CODE",{});var qzr=s(Soe);Q1o=r(qzr,"from_config()"),qzr.forEach(t),H1o=r(jz,`class
method.`),jz.forEach(t),U1o=i(Ks),ZE=n(Ks,"P",{});var QRe=s(ZE);J1o=r(QRe,"This class cannot be instantiated directly using "),Poe=n(QRe,"CODE",{});var Gzr=s(Poe);Y1o=r(Gzr,"__init__()"),Gzr.forEach(t),K1o=r(QRe," (throws an error)."),QRe.forEach(t),Z1o=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(ey.$$.fragment,Zs),ebo=i(Zs),$oe=n(Zs,"P",{});var Ozr=s($oe);obo=r(Ozr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ozr.forEach(t),rbo=i(Zs),id=n(Zs,"P",{});var Dz=s(id);tbo=r(Dz,`Note:
Loading a model from its configuration file does `),Ioe=n(Dz,"STRONG",{});var Xzr=s(Ioe);abo=r(Xzr,"not"),Xzr.forEach(t),nbo=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=n(Dz,"CODE",{});var Vzr=s(joe);sbo=r(Vzr,"from_pretrained()"),Vzr.forEach(t),lbo=r(Dz,"to load the model weights."),Dz.forEach(t),ibo=i(Zs),Doe=n(Zs,"P",{});var zzr=s(Doe);dbo=r(zzr,"Examples:"),zzr.forEach(t),cbo=i(Zs),m(oy.$$.fragment,Zs),Zs.forEach(t),fbo=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);m(ry.$$.fragment,Xt),mbo=i(Xt),Noe=n(Xt,"P",{});var Wzr=s(Noe);gbo=r(Wzr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Wzr.forEach(t),hbo=i(Xt),Qa=n(Xt,"P",{});var t4=s(Qa);pbo=r(t4,"The model class to instantiate is selected based on the "),qoe=n(t4,"CODE",{});var Qzr=s(qoe);_bo=r(Qzr,"model_type"),Qzr.forEach(t),ubo=r(t4,` property of the config object (either
passed as an argument or loaded from `),Goe=n(t4,"CODE",{});var Hzr=s(Goe);bbo=r(Hzr,"pretrained_model_name_or_path"),Hzr.forEach(t),vbo=r(t4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ooe=n(t4,"CODE",{});var Uzr=s(Ooe);Tbo=r(Uzr,"pretrained_model_name_or_path"),Uzr.forEach(t),Fbo=r(t4,":"),t4.forEach(t),Cbo=i(Xt),I=n(Xt,"UL",{});var D=s(I);Ou=n(D,"LI",{});var Z4e=s(Ou);Xoe=n(Z4e,"STRONG",{});var Jzr=s(Xoe);Mbo=r(Jzr,"albert"),Jzr.forEach(t),Ebo=r(Z4e," \u2014 "),M$=n(Z4e,"A",{href:!0});var Yzr=s(M$);ybo=r(Yzr,"AlbertForMaskedLM"),Yzr.forEach(t),wbo=r(Z4e," (ALBERT model)"),Z4e.forEach(t),Abo=i(D),Xu=n(D,"LI",{});var eEe=s(Xu);Voe=n(eEe,"STRONG",{});var Kzr=s(Voe);Lbo=r(Kzr,"bart"),Kzr.forEach(t),Bbo=r(eEe," \u2014 "),E$=n(eEe,"A",{href:!0});var Zzr=s(E$);xbo=r(Zzr,"BartForConditionalGeneration"),Zzr.forEach(t),kbo=r(eEe," (BART model)"),eEe.forEach(t),Rbo=i(D),Vu=n(D,"LI",{});var oEe=s(Vu);zoe=n(oEe,"STRONG",{});var eWr=s(zoe);Sbo=r(eWr,"bert"),eWr.forEach(t),Pbo=r(oEe," \u2014 "),y$=n(oEe,"A",{href:!0});var oWr=s(y$);$bo=r(oWr,"BertForMaskedLM"),oWr.forEach(t),Ibo=r(oEe," (BERT model)"),oEe.forEach(t),jbo=i(D),zu=n(D,"LI",{});var rEe=s(zu);Woe=n(rEe,"STRONG",{});var rWr=s(Woe);Dbo=r(rWr,"big_bird"),rWr.forEach(t),Nbo=r(rEe," \u2014 "),w$=n(rEe,"A",{href:!0});var tWr=s(w$);qbo=r(tWr,"BigBirdForMaskedLM"),tWr.forEach(t),Gbo=r(rEe," (BigBird model)"),rEe.forEach(t),Obo=i(D),Wu=n(D,"LI",{});var tEe=s(Wu);Qoe=n(tEe,"STRONG",{});var aWr=s(Qoe);Xbo=r(aWr,"camembert"),aWr.forEach(t),Vbo=r(tEe," \u2014 "),A$=n(tEe,"A",{href:!0});var nWr=s(A$);zbo=r(nWr,"CamembertForMaskedLM"),nWr.forEach(t),Wbo=r(tEe," (CamemBERT model)"),tEe.forEach(t),Qbo=i(D),Qu=n(D,"LI",{});var aEe=s(Qu);Hoe=n(aEe,"STRONG",{});var sWr=s(Hoe);Hbo=r(sWr,"convbert"),sWr.forEach(t),Ubo=r(aEe," \u2014 "),L$=n(aEe,"A",{href:!0});var lWr=s(L$);Jbo=r(lWr,"ConvBertForMaskedLM"),lWr.forEach(t),Ybo=r(aEe," (ConvBERT model)"),aEe.forEach(t),Kbo=i(D),Hu=n(D,"LI",{});var nEe=s(Hu);Uoe=n(nEe,"STRONG",{});var iWr=s(Uoe);Zbo=r(iWr,"data2vec-text"),iWr.forEach(t),e3o=r(nEe," \u2014 "),B$=n(nEe,"A",{href:!0});var dWr=s(B$);o3o=r(dWr,"Data2VecTextForMaskedLM"),dWr.forEach(t),r3o=r(nEe," (Data2VecText model)"),nEe.forEach(t),t3o=i(D),Uu=n(D,"LI",{});var sEe=s(Uu);Joe=n(sEe,"STRONG",{});var cWr=s(Joe);a3o=r(cWr,"deberta"),cWr.forEach(t),n3o=r(sEe," \u2014 "),x$=n(sEe,"A",{href:!0});var fWr=s(x$);s3o=r(fWr,"DebertaForMaskedLM"),fWr.forEach(t),l3o=r(sEe," (DeBERTa model)"),sEe.forEach(t),i3o=i(D),Ju=n(D,"LI",{});var lEe=s(Ju);Yoe=n(lEe,"STRONG",{});var mWr=s(Yoe);d3o=r(mWr,"deberta-v2"),mWr.forEach(t),c3o=r(lEe," \u2014 "),k$=n(lEe,"A",{href:!0});var gWr=s(k$);f3o=r(gWr,"DebertaV2ForMaskedLM"),gWr.forEach(t),m3o=r(lEe," (DeBERTa-v2 model)"),lEe.forEach(t),g3o=i(D),Yu=n(D,"LI",{});var iEe=s(Yu);Koe=n(iEe,"STRONG",{});var hWr=s(Koe);h3o=r(hWr,"distilbert"),hWr.forEach(t),p3o=r(iEe," \u2014 "),R$=n(iEe,"A",{href:!0});var pWr=s(R$);_3o=r(pWr,"DistilBertForMaskedLM"),pWr.forEach(t),u3o=r(iEe," (DistilBERT model)"),iEe.forEach(t),b3o=i(D),Ku=n(D,"LI",{});var dEe=s(Ku);Zoe=n(dEe,"STRONG",{});var _Wr=s(Zoe);v3o=r(_Wr,"electra"),_Wr.forEach(t),T3o=r(dEe," \u2014 "),S$=n(dEe,"A",{href:!0});var uWr=s(S$);F3o=r(uWr,"ElectraForMaskedLM"),uWr.forEach(t),C3o=r(dEe," (ELECTRA model)"),dEe.forEach(t),M3o=i(D),Zu=n(D,"LI",{});var cEe=s(Zu);ere=n(cEe,"STRONG",{});var bWr=s(ere);E3o=r(bWr,"flaubert"),bWr.forEach(t),y3o=r(cEe," \u2014 "),P$=n(cEe,"A",{href:!0});var vWr=s(P$);w3o=r(vWr,"FlaubertWithLMHeadModel"),vWr.forEach(t),A3o=r(cEe," (FlauBERT model)"),cEe.forEach(t),L3o=i(D),e2=n(D,"LI",{});var fEe=s(e2);ore=n(fEe,"STRONG",{});var TWr=s(ore);B3o=r(TWr,"fnet"),TWr.forEach(t),x3o=r(fEe," \u2014 "),$$=n(fEe,"A",{href:!0});var FWr=s($$);k3o=r(FWr,"FNetForMaskedLM"),FWr.forEach(t),R3o=r(fEe," (FNet model)"),fEe.forEach(t),S3o=i(D),o2=n(D,"LI",{});var mEe=s(o2);rre=n(mEe,"STRONG",{});var CWr=s(rre);P3o=r(CWr,"funnel"),CWr.forEach(t),$3o=r(mEe," \u2014 "),I$=n(mEe,"A",{href:!0});var MWr=s(I$);I3o=r(MWr,"FunnelForMaskedLM"),MWr.forEach(t),j3o=r(mEe," (Funnel Transformer model)"),mEe.forEach(t),D3o=i(D),r2=n(D,"LI",{});var gEe=s(r2);tre=n(gEe,"STRONG",{});var EWr=s(tre);N3o=r(EWr,"ibert"),EWr.forEach(t),q3o=r(gEe," \u2014 "),j$=n(gEe,"A",{href:!0});var yWr=s(j$);G3o=r(yWr,"IBertForMaskedLM"),yWr.forEach(t),O3o=r(gEe," (I-BERT model)"),gEe.forEach(t),X3o=i(D),t2=n(D,"LI",{});var hEe=s(t2);are=n(hEe,"STRONG",{});var wWr=s(are);V3o=r(wWr,"layoutlm"),wWr.forEach(t),z3o=r(hEe," \u2014 "),D$=n(hEe,"A",{href:!0});var AWr=s(D$);W3o=r(AWr,"LayoutLMForMaskedLM"),AWr.forEach(t),Q3o=r(hEe," (LayoutLM model)"),hEe.forEach(t),H3o=i(D),a2=n(D,"LI",{});var pEe=s(a2);nre=n(pEe,"STRONG",{});var LWr=s(nre);U3o=r(LWr,"longformer"),LWr.forEach(t),J3o=r(pEe," \u2014 "),N$=n(pEe,"A",{href:!0});var BWr=s(N$);Y3o=r(BWr,"LongformerForMaskedLM"),BWr.forEach(t),K3o=r(pEe," (Longformer model)"),pEe.forEach(t),Z3o=i(D),n2=n(D,"LI",{});var _Ee=s(n2);sre=n(_Ee,"STRONG",{});var xWr=s(sre);e5o=r(xWr,"mbart"),xWr.forEach(t),o5o=r(_Ee," \u2014 "),q$=n(_Ee,"A",{href:!0});var kWr=s(q$);r5o=r(kWr,"MBartForConditionalGeneration"),kWr.forEach(t),t5o=r(_Ee," (mBART model)"),_Ee.forEach(t),a5o=i(D),s2=n(D,"LI",{});var uEe=s(s2);lre=n(uEe,"STRONG",{});var RWr=s(lre);n5o=r(RWr,"megatron-bert"),RWr.forEach(t),s5o=r(uEe," \u2014 "),G$=n(uEe,"A",{href:!0});var SWr=s(G$);l5o=r(SWr,"MegatronBertForMaskedLM"),SWr.forEach(t),i5o=r(uEe," (MegatronBert model)"),uEe.forEach(t),d5o=i(D),l2=n(D,"LI",{});var bEe=s(l2);ire=n(bEe,"STRONG",{});var PWr=s(ire);c5o=r(PWr,"mobilebert"),PWr.forEach(t),f5o=r(bEe," \u2014 "),O$=n(bEe,"A",{href:!0});var $Wr=s(O$);m5o=r($Wr,"MobileBertForMaskedLM"),$Wr.forEach(t),g5o=r(bEe," (MobileBERT model)"),bEe.forEach(t),h5o=i(D),i2=n(D,"LI",{});var vEe=s(i2);dre=n(vEe,"STRONG",{});var IWr=s(dre);p5o=r(IWr,"mpnet"),IWr.forEach(t),_5o=r(vEe," \u2014 "),X$=n(vEe,"A",{href:!0});var jWr=s(X$);u5o=r(jWr,"MPNetForMaskedLM"),jWr.forEach(t),b5o=r(vEe," (MPNet model)"),vEe.forEach(t),v5o=i(D),d2=n(D,"LI",{});var TEe=s(d2);cre=n(TEe,"STRONG",{});var DWr=s(cre);T5o=r(DWr,"nystromformer"),DWr.forEach(t),F5o=r(TEe," \u2014 "),V$=n(TEe,"A",{href:!0});var NWr=s(V$);C5o=r(NWr,"NystromformerForMaskedLM"),NWr.forEach(t),M5o=r(TEe," (Nystromformer model)"),TEe.forEach(t),E5o=i(D),c2=n(D,"LI",{});var FEe=s(c2);fre=n(FEe,"STRONG",{});var qWr=s(fre);y5o=r(qWr,"perceiver"),qWr.forEach(t),w5o=r(FEe," \u2014 "),z$=n(FEe,"A",{href:!0});var GWr=s(z$);A5o=r(GWr,"PerceiverForMaskedLM"),GWr.forEach(t),L5o=r(FEe," (Perceiver model)"),FEe.forEach(t),B5o=i(D),f2=n(D,"LI",{});var CEe=s(f2);mre=n(CEe,"STRONG",{});var OWr=s(mre);x5o=r(OWr,"qdqbert"),OWr.forEach(t),k5o=r(CEe," \u2014 "),W$=n(CEe,"A",{href:!0});var XWr=s(W$);R5o=r(XWr,"QDQBertForMaskedLM"),XWr.forEach(t),S5o=r(CEe," (QDQBert model)"),CEe.forEach(t),P5o=i(D),m2=n(D,"LI",{});var MEe=s(m2);gre=n(MEe,"STRONG",{});var VWr=s(gre);$5o=r(VWr,"reformer"),VWr.forEach(t),I5o=r(MEe," \u2014 "),Q$=n(MEe,"A",{href:!0});var zWr=s(Q$);j5o=r(zWr,"ReformerForMaskedLM"),zWr.forEach(t),D5o=r(MEe," (Reformer model)"),MEe.forEach(t),N5o=i(D),g2=n(D,"LI",{});var EEe=s(g2);hre=n(EEe,"STRONG",{});var WWr=s(hre);q5o=r(WWr,"rembert"),WWr.forEach(t),G5o=r(EEe," \u2014 "),H$=n(EEe,"A",{href:!0});var QWr=s(H$);O5o=r(QWr,"RemBertForMaskedLM"),QWr.forEach(t),X5o=r(EEe," (RemBERT model)"),EEe.forEach(t),V5o=i(D),h2=n(D,"LI",{});var yEe=s(h2);pre=n(yEe,"STRONG",{});var HWr=s(pre);z5o=r(HWr,"roberta"),HWr.forEach(t),W5o=r(yEe," \u2014 "),U$=n(yEe,"A",{href:!0});var UWr=s(U$);Q5o=r(UWr,"RobertaForMaskedLM"),UWr.forEach(t),H5o=r(yEe," (RoBERTa model)"),yEe.forEach(t),U5o=i(D),p2=n(D,"LI",{});var wEe=s(p2);_re=n(wEe,"STRONG",{});var JWr=s(_re);J5o=r(JWr,"roformer"),JWr.forEach(t),Y5o=r(wEe," \u2014 "),J$=n(wEe,"A",{href:!0});var YWr=s(J$);K5o=r(YWr,"RoFormerForMaskedLM"),YWr.forEach(t),Z5o=r(wEe," (RoFormer model)"),wEe.forEach(t),evo=i(D),_2=n(D,"LI",{});var AEe=s(_2);ure=n(AEe,"STRONG",{});var KWr=s(ure);ovo=r(KWr,"squeezebert"),KWr.forEach(t),rvo=r(AEe," \u2014 "),Y$=n(AEe,"A",{href:!0});var ZWr=s(Y$);tvo=r(ZWr,"SqueezeBertForMaskedLM"),ZWr.forEach(t),avo=r(AEe," (SqueezeBERT model)"),AEe.forEach(t),nvo=i(D),u2=n(D,"LI",{});var LEe=s(u2);bre=n(LEe,"STRONG",{});var eQr=s(bre);svo=r(eQr,"tapas"),eQr.forEach(t),lvo=r(LEe," \u2014 "),K$=n(LEe,"A",{href:!0});var oQr=s(K$);ivo=r(oQr,"TapasForMaskedLM"),oQr.forEach(t),dvo=r(LEe," (TAPAS model)"),LEe.forEach(t),cvo=i(D),b2=n(D,"LI",{});var BEe=s(b2);vre=n(BEe,"STRONG",{});var rQr=s(vre);fvo=r(rQr,"wav2vec2"),rQr.forEach(t),mvo=r(BEe," \u2014 "),Tre=n(BEe,"CODE",{});var tQr=s(Tre);gvo=r(tQr,"Wav2Vec2ForMaskedLM"),tQr.forEach(t),hvo=r(BEe,"(Wav2Vec2 model)"),BEe.forEach(t),pvo=i(D),v2=n(D,"LI",{});var xEe=s(v2);Fre=n(xEe,"STRONG",{});var aQr=s(Fre);_vo=r(aQr,"xlm"),aQr.forEach(t),uvo=r(xEe," \u2014 "),Z$=n(xEe,"A",{href:!0});var nQr=s(Z$);bvo=r(nQr,"XLMWithLMHeadModel"),nQr.forEach(t),vvo=r(xEe," (XLM model)"),xEe.forEach(t),Tvo=i(D),T2=n(D,"LI",{});var kEe=s(T2);Cre=n(kEe,"STRONG",{});var sQr=s(Cre);Fvo=r(sQr,"xlm-roberta"),sQr.forEach(t),Cvo=r(kEe," \u2014 "),eI=n(kEe,"A",{href:!0});var lQr=s(eI);Mvo=r(lQr,"XLMRobertaForMaskedLM"),lQr.forEach(t),Evo=r(kEe," (XLM-RoBERTa model)"),kEe.forEach(t),yvo=i(D),F2=n(D,"LI",{});var REe=s(F2);Mre=n(REe,"STRONG",{});var iQr=s(Mre);wvo=r(iQr,"xlm-roberta-xl"),iQr.forEach(t),Avo=r(REe," \u2014 "),oI=n(REe,"A",{href:!0});var dQr=s(oI);Lvo=r(dQr,"XLMRobertaXLForMaskedLM"),dQr.forEach(t),Bvo=r(REe," (XLM-RoBERTa-XL model)"),REe.forEach(t),xvo=i(D),C2=n(D,"LI",{});var SEe=s(C2);Ere=n(SEe,"STRONG",{});var cQr=s(Ere);kvo=r(cQr,"yoso"),cQr.forEach(t),Rvo=r(SEe," \u2014 "),rI=n(SEe,"A",{href:!0});var fQr=s(rI);Svo=r(fQr,"YosoForMaskedLM"),fQr.forEach(t),Pvo=r(SEe," (YOSO model)"),SEe.forEach(t),D.forEach(t),$vo=i(Xt),M2=n(Xt,"P",{});var PEe=s(M2);Ivo=r(PEe,"The model is set in evaluation mode by default using "),yre=n(PEe,"CODE",{});var mQr=s(yre);jvo=r(mQr,"model.eval()"),mQr.forEach(t),Dvo=r(PEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wre=n(PEe,"CODE",{});var gQr=s(wre);Nvo=r(gQr,"model.train()"),gQr.forEach(t),PEe.forEach(t),qvo=i(Xt),Are=n(Xt,"P",{});var hQr=s(Are);Gvo=r(hQr,"Examples:"),hQr.forEach(t),Ovo=i(Xt),m(ty.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),Nxe=i(c),dd=n(c,"H2",{class:!0});var HRe=s(dd);E2=n(HRe,"A",{id:!0,class:!0,href:!0});var pQr=s(E2);Lre=n(pQr,"SPAN",{});var _Qr=s(Lre);m(ay.$$.fragment,_Qr),_Qr.forEach(t),pQr.forEach(t),Xvo=i(HRe),Bre=n(HRe,"SPAN",{});var uQr=s(Bre);Vvo=r(uQr,"AutoModelForSeq2SeqLM"),uQr.forEach(t),HRe.forEach(t),qxe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(ny.$$.fragment,el),zvo=i(el),cd=n(el,"P",{});var Nz=s(cd);Wvo=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xre=n(Nz,"CODE",{});var bQr=s(xre);Qvo=r(bQr,"from_pretrained()"),bQr.forEach(t),Hvo=r(Nz,"class method or the "),kre=n(Nz,"CODE",{});var vQr=s(kre);Uvo=r(vQr,"from_config()"),vQr.forEach(t),Jvo=r(Nz,`class
method.`),Nz.forEach(t),Yvo=i(el),sy=n(el,"P",{});var URe=s(sy);Kvo=r(URe,"This class cannot be instantiated directly using "),Rre=n(URe,"CODE",{});var TQr=s(Rre);Zvo=r(TQr,"__init__()"),TQr.forEach(t),e6o=r(URe," (throws an error)."),URe.forEach(t),o6o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(ly.$$.fragment,ol),r6o=i(ol),Sre=n(ol,"P",{});var FQr=s(Sre);t6o=r(FQr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FQr.forEach(t),a6o=i(ol),fd=n(ol,"P",{});var qz=s(fd);n6o=r(qz,`Note:
Loading a model from its configuration file does `),Pre=n(qz,"STRONG",{});var CQr=s(Pre);s6o=r(CQr,"not"),CQr.forEach(t),l6o=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=n(qz,"CODE",{});var MQr=s($re);i6o=r(MQr,"from_pretrained()"),MQr.forEach(t),d6o=r(qz,"to load the model weights."),qz.forEach(t),c6o=i(ol),Ire=n(ol,"P",{});var EQr=s(Ire);f6o=r(EQr,"Examples:"),EQr.forEach(t),m6o=i(ol),m(iy.$$.fragment,ol),ol.forEach(t),g6o=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(dy.$$.fragment,Vt),h6o=i(Vt),jre=n(Vt,"P",{});var yQr=s(jre);p6o=r(yQr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yQr.forEach(t),_6o=i(Vt),Ha=n(Vt,"P",{});var a4=s(Ha);u6o=r(a4,"The model class to instantiate is selected based on the "),Dre=n(a4,"CODE",{});var wQr=s(Dre);b6o=r(wQr,"model_type"),wQr.forEach(t),v6o=r(a4,` property of the config object (either
passed as an argument or loaded from `),Nre=n(a4,"CODE",{});var AQr=s(Nre);T6o=r(AQr,"pretrained_model_name_or_path"),AQr.forEach(t),F6o=r(a4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qre=n(a4,"CODE",{});var LQr=s(qre);C6o=r(LQr,"pretrained_model_name_or_path"),LQr.forEach(t),M6o=r(a4,":"),a4.forEach(t),E6o=i(Vt),ne=n(Vt,"UL",{});var ie=s(ne);y2=n(ie,"LI",{});var $Ee=s(y2);Gre=n($Ee,"STRONG",{});var BQr=s(Gre);y6o=r(BQr,"bart"),BQr.forEach(t),w6o=r($Ee," \u2014 "),tI=n($Ee,"A",{href:!0});var xQr=s(tI);A6o=r(xQr,"BartForConditionalGeneration"),xQr.forEach(t),L6o=r($Ee," (BART model)"),$Ee.forEach(t),B6o=i(ie),w2=n(ie,"LI",{});var IEe=s(w2);Ore=n(IEe,"STRONG",{});var kQr=s(Ore);x6o=r(kQr,"bigbird_pegasus"),kQr.forEach(t),k6o=r(IEe," \u2014 "),aI=n(IEe,"A",{href:!0});var RQr=s(aI);R6o=r(RQr,"BigBirdPegasusForConditionalGeneration"),RQr.forEach(t),S6o=r(IEe," (BigBirdPegasus model)"),IEe.forEach(t),P6o=i(ie),A2=n(ie,"LI",{});var jEe=s(A2);Xre=n(jEe,"STRONG",{});var SQr=s(Xre);$6o=r(SQr,"blenderbot"),SQr.forEach(t),I6o=r(jEe," \u2014 "),nI=n(jEe,"A",{href:!0});var PQr=s(nI);j6o=r(PQr,"BlenderbotForConditionalGeneration"),PQr.forEach(t),D6o=r(jEe," (Blenderbot model)"),jEe.forEach(t),N6o=i(ie),L2=n(ie,"LI",{});var DEe=s(L2);Vre=n(DEe,"STRONG",{});var $Qr=s(Vre);q6o=r($Qr,"blenderbot-small"),$Qr.forEach(t),G6o=r(DEe," \u2014 "),sI=n(DEe,"A",{href:!0});var IQr=s(sI);O6o=r(IQr,"BlenderbotSmallForConditionalGeneration"),IQr.forEach(t),X6o=r(DEe," (BlenderbotSmall model)"),DEe.forEach(t),V6o=i(ie),B2=n(ie,"LI",{});var NEe=s(B2);zre=n(NEe,"STRONG",{});var jQr=s(zre);z6o=r(jQr,"encoder-decoder"),jQr.forEach(t),W6o=r(NEe," \u2014 "),lI=n(NEe,"A",{href:!0});var DQr=s(lI);Q6o=r(DQr,"EncoderDecoderModel"),DQr.forEach(t),H6o=r(NEe," (Encoder decoder model)"),NEe.forEach(t),U6o=i(ie),x2=n(ie,"LI",{});var qEe=s(x2);Wre=n(qEe,"STRONG",{});var NQr=s(Wre);J6o=r(NQr,"fsmt"),NQr.forEach(t),Y6o=r(qEe," \u2014 "),iI=n(qEe,"A",{href:!0});var qQr=s(iI);K6o=r(qQr,"FSMTForConditionalGeneration"),qQr.forEach(t),Z6o=r(qEe," (FairSeq Machine-Translation model)"),qEe.forEach(t),eTo=i(ie),k2=n(ie,"LI",{});var GEe=s(k2);Qre=n(GEe,"STRONG",{});var GQr=s(Qre);oTo=r(GQr,"led"),GQr.forEach(t),rTo=r(GEe," \u2014 "),dI=n(GEe,"A",{href:!0});var OQr=s(dI);tTo=r(OQr,"LEDForConditionalGeneration"),OQr.forEach(t),aTo=r(GEe," (LED model)"),GEe.forEach(t),nTo=i(ie),R2=n(ie,"LI",{});var OEe=s(R2);Hre=n(OEe,"STRONG",{});var XQr=s(Hre);sTo=r(XQr,"m2m_100"),XQr.forEach(t),lTo=r(OEe," \u2014 "),cI=n(OEe,"A",{href:!0});var VQr=s(cI);iTo=r(VQr,"M2M100ForConditionalGeneration"),VQr.forEach(t),dTo=r(OEe," (M2M100 model)"),OEe.forEach(t),cTo=i(ie),S2=n(ie,"LI",{});var XEe=s(S2);Ure=n(XEe,"STRONG",{});var zQr=s(Ure);fTo=r(zQr,"marian"),zQr.forEach(t),mTo=r(XEe," \u2014 "),fI=n(XEe,"A",{href:!0});var WQr=s(fI);gTo=r(WQr,"MarianMTModel"),WQr.forEach(t),hTo=r(XEe," (Marian model)"),XEe.forEach(t),pTo=i(ie),P2=n(ie,"LI",{});var VEe=s(P2);Jre=n(VEe,"STRONG",{});var QQr=s(Jre);_To=r(QQr,"mbart"),QQr.forEach(t),uTo=r(VEe," \u2014 "),mI=n(VEe,"A",{href:!0});var HQr=s(mI);bTo=r(HQr,"MBartForConditionalGeneration"),HQr.forEach(t),vTo=r(VEe," (mBART model)"),VEe.forEach(t),TTo=i(ie),$2=n(ie,"LI",{});var zEe=s($2);Yre=n(zEe,"STRONG",{});var UQr=s(Yre);FTo=r(UQr,"mt5"),UQr.forEach(t),CTo=r(zEe," \u2014 "),gI=n(zEe,"A",{href:!0});var JQr=s(gI);MTo=r(JQr,"MT5ForConditionalGeneration"),JQr.forEach(t),ETo=r(zEe," (mT5 model)"),zEe.forEach(t),yTo=i(ie),I2=n(ie,"LI",{});var WEe=s(I2);Kre=n(WEe,"STRONG",{});var YQr=s(Kre);wTo=r(YQr,"pegasus"),YQr.forEach(t),ATo=r(WEe," \u2014 "),hI=n(WEe,"A",{href:!0});var KQr=s(hI);LTo=r(KQr,"PegasusForConditionalGeneration"),KQr.forEach(t),BTo=r(WEe," (Pegasus model)"),WEe.forEach(t),xTo=i(ie),j2=n(ie,"LI",{});var QEe=s(j2);Zre=n(QEe,"STRONG",{});var ZQr=s(Zre);kTo=r(ZQr,"plbart"),ZQr.forEach(t),RTo=r(QEe," \u2014 "),pI=n(QEe,"A",{href:!0});var eHr=s(pI);STo=r(eHr,"PLBartForConditionalGeneration"),eHr.forEach(t),PTo=r(QEe," (PLBart model)"),QEe.forEach(t),$To=i(ie),D2=n(ie,"LI",{});var HEe=s(D2);ete=n(HEe,"STRONG",{});var oHr=s(ete);ITo=r(oHr,"prophetnet"),oHr.forEach(t),jTo=r(HEe," \u2014 "),_I=n(HEe,"A",{href:!0});var rHr=s(_I);DTo=r(rHr,"ProphetNetForConditionalGeneration"),rHr.forEach(t),NTo=r(HEe," (ProphetNet model)"),HEe.forEach(t),qTo=i(ie),N2=n(ie,"LI",{});var UEe=s(N2);ote=n(UEe,"STRONG",{});var tHr=s(ote);GTo=r(tHr,"t5"),tHr.forEach(t),OTo=r(UEe," \u2014 "),uI=n(UEe,"A",{href:!0});var aHr=s(uI);XTo=r(aHr,"T5ForConditionalGeneration"),aHr.forEach(t),VTo=r(UEe," (T5 model)"),UEe.forEach(t),zTo=i(ie),q2=n(ie,"LI",{});var JEe=s(q2);rte=n(JEe,"STRONG",{});var nHr=s(rte);WTo=r(nHr,"xlm-prophetnet"),nHr.forEach(t),QTo=r(JEe," \u2014 "),bI=n(JEe,"A",{href:!0});var sHr=s(bI);HTo=r(sHr,"XLMProphetNetForConditionalGeneration"),sHr.forEach(t),UTo=r(JEe," (XLMProphetNet model)"),JEe.forEach(t),ie.forEach(t),JTo=i(Vt),G2=n(Vt,"P",{});var YEe=s(G2);YTo=r(YEe,"The model is set in evaluation mode by default using "),tte=n(YEe,"CODE",{});var lHr=s(tte);KTo=r(lHr,"model.eval()"),lHr.forEach(t),ZTo=r(YEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ate=n(YEe,"CODE",{});var iHr=s(ate);eFo=r(iHr,"model.train()"),iHr.forEach(t),YEe.forEach(t),oFo=i(Vt),nte=n(Vt,"P",{});var dHr=s(nte);rFo=r(dHr,"Examples:"),dHr.forEach(t),tFo=i(Vt),m(cy.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Gxe=i(c),md=n(c,"H2",{class:!0});var JRe=s(md);O2=n(JRe,"A",{id:!0,class:!0,href:!0});var cHr=s(O2);ste=n(cHr,"SPAN",{});var fHr=s(ste);m(fy.$$.fragment,fHr),fHr.forEach(t),cHr.forEach(t),aFo=i(JRe),lte=n(JRe,"SPAN",{});var mHr=s(lte);nFo=r(mHr,"AutoModelForSequenceClassification"),mHr.forEach(t),JRe.forEach(t),Oxe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(my.$$.fragment,rl),sFo=i(rl),gd=n(rl,"P",{});var Gz=s(gd);lFo=r(Gz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ite=n(Gz,"CODE",{});var gHr=s(ite);iFo=r(gHr,"from_pretrained()"),gHr.forEach(t),dFo=r(Gz,"class method or the "),dte=n(Gz,"CODE",{});var hHr=s(dte);cFo=r(hHr,"from_config()"),hHr.forEach(t),fFo=r(Gz,`class
method.`),Gz.forEach(t),mFo=i(rl),gy=n(rl,"P",{});var YRe=s(gy);gFo=r(YRe,"This class cannot be instantiated directly using "),cte=n(YRe,"CODE",{});var pHr=s(cte);hFo=r(pHr,"__init__()"),pHr.forEach(t),pFo=r(YRe," (throws an error)."),YRe.forEach(t),_Fo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(hy.$$.fragment,tl),uFo=i(tl),fte=n(tl,"P",{});var _Hr=s(fte);bFo=r(_Hr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Hr.forEach(t),vFo=i(tl),hd=n(tl,"P",{});var Oz=s(hd);TFo=r(Oz,`Note:
Loading a model from its configuration file does `),mte=n(Oz,"STRONG",{});var uHr=s(mte);FFo=r(uHr,"not"),uHr.forEach(t),CFo=r(Oz,` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=n(Oz,"CODE",{});var bHr=s(gte);MFo=r(bHr,"from_pretrained()"),bHr.forEach(t),EFo=r(Oz,"to load the model weights."),Oz.forEach(t),yFo=i(tl),hte=n(tl,"P",{});var vHr=s(hte);wFo=r(vHr,"Examples:"),vHr.forEach(t),AFo=i(tl),m(py.$$.fragment,tl),tl.forEach(t),LFo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(_y.$$.fragment,zt),BFo=i(zt),pte=n(zt,"P",{});var THr=s(pte);xFo=r(THr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),THr.forEach(t),kFo=i(zt),Ua=n(zt,"P",{});var n4=s(Ua);RFo=r(n4,"The model class to instantiate is selected based on the "),_te=n(n4,"CODE",{});var FHr=s(_te);SFo=r(FHr,"model_type"),FHr.forEach(t),PFo=r(n4,` property of the config object (either
passed as an argument or loaded from `),ute=n(n4,"CODE",{});var CHr=s(ute);$Fo=r(CHr,"pretrained_model_name_or_path"),CHr.forEach(t),IFo=r(n4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bte=n(n4,"CODE",{});var MHr=s(bte);jFo=r(MHr,"pretrained_model_name_or_path"),MHr.forEach(t),DFo=r(n4,":"),n4.forEach(t),NFo=i(zt),A=n(zt,"UL",{});var L=s(A);X2=n(L,"LI",{});var KEe=s(X2);vte=n(KEe,"STRONG",{});var EHr=s(vte);qFo=r(EHr,"albert"),EHr.forEach(t),GFo=r(KEe," \u2014 "),vI=n(KEe,"A",{href:!0});var yHr=s(vI);OFo=r(yHr,"AlbertForSequenceClassification"),yHr.forEach(t),XFo=r(KEe," (ALBERT model)"),KEe.forEach(t),VFo=i(L),V2=n(L,"LI",{});var ZEe=s(V2);Tte=n(ZEe,"STRONG",{});var wHr=s(Tte);zFo=r(wHr,"bart"),wHr.forEach(t),WFo=r(ZEe," \u2014 "),TI=n(ZEe,"A",{href:!0});var AHr=s(TI);QFo=r(AHr,"BartForSequenceClassification"),AHr.forEach(t),HFo=r(ZEe," (BART model)"),ZEe.forEach(t),UFo=i(L),z2=n(L,"LI",{});var eye=s(z2);Fte=n(eye,"STRONG",{});var LHr=s(Fte);JFo=r(LHr,"bert"),LHr.forEach(t),YFo=r(eye," \u2014 "),FI=n(eye,"A",{href:!0});var BHr=s(FI);KFo=r(BHr,"BertForSequenceClassification"),BHr.forEach(t),ZFo=r(eye," (BERT model)"),eye.forEach(t),eCo=i(L),W2=n(L,"LI",{});var oye=s(W2);Cte=n(oye,"STRONG",{});var xHr=s(Cte);oCo=r(xHr,"big_bird"),xHr.forEach(t),rCo=r(oye," \u2014 "),CI=n(oye,"A",{href:!0});var kHr=s(CI);tCo=r(kHr,"BigBirdForSequenceClassification"),kHr.forEach(t),aCo=r(oye," (BigBird model)"),oye.forEach(t),nCo=i(L),Q2=n(L,"LI",{});var rye=s(Q2);Mte=n(rye,"STRONG",{});var RHr=s(Mte);sCo=r(RHr,"bigbird_pegasus"),RHr.forEach(t),lCo=r(rye," \u2014 "),MI=n(rye,"A",{href:!0});var SHr=s(MI);iCo=r(SHr,"BigBirdPegasusForSequenceClassification"),SHr.forEach(t),dCo=r(rye," (BigBirdPegasus model)"),rye.forEach(t),cCo=i(L),H2=n(L,"LI",{});var tye=s(H2);Ete=n(tye,"STRONG",{});var PHr=s(Ete);fCo=r(PHr,"camembert"),PHr.forEach(t),mCo=r(tye," \u2014 "),EI=n(tye,"A",{href:!0});var $Hr=s(EI);gCo=r($Hr,"CamembertForSequenceClassification"),$Hr.forEach(t),hCo=r(tye," (CamemBERT model)"),tye.forEach(t),pCo=i(L),U2=n(L,"LI",{});var aye=s(U2);yte=n(aye,"STRONG",{});var IHr=s(yte);_Co=r(IHr,"canine"),IHr.forEach(t),uCo=r(aye," \u2014 "),yI=n(aye,"A",{href:!0});var jHr=s(yI);bCo=r(jHr,"CanineForSequenceClassification"),jHr.forEach(t),vCo=r(aye," (Canine model)"),aye.forEach(t),TCo=i(L),J2=n(L,"LI",{});var nye=s(J2);wte=n(nye,"STRONG",{});var DHr=s(wte);FCo=r(DHr,"convbert"),DHr.forEach(t),CCo=r(nye," \u2014 "),wI=n(nye,"A",{href:!0});var NHr=s(wI);MCo=r(NHr,"ConvBertForSequenceClassification"),NHr.forEach(t),ECo=r(nye," (ConvBERT model)"),nye.forEach(t),yCo=i(L),Y2=n(L,"LI",{});var sye=s(Y2);Ate=n(sye,"STRONG",{});var qHr=s(Ate);wCo=r(qHr,"ctrl"),qHr.forEach(t),ACo=r(sye," \u2014 "),AI=n(sye,"A",{href:!0});var GHr=s(AI);LCo=r(GHr,"CTRLForSequenceClassification"),GHr.forEach(t),BCo=r(sye," (CTRL model)"),sye.forEach(t),xCo=i(L),K2=n(L,"LI",{});var lye=s(K2);Lte=n(lye,"STRONG",{});var OHr=s(Lte);kCo=r(OHr,"data2vec-text"),OHr.forEach(t),RCo=r(lye," \u2014 "),LI=n(lye,"A",{href:!0});var XHr=s(LI);SCo=r(XHr,"Data2VecTextForSequenceClassification"),XHr.forEach(t),PCo=r(lye," (Data2VecText model)"),lye.forEach(t),$Co=i(L),Z2=n(L,"LI",{});var iye=s(Z2);Bte=n(iye,"STRONG",{});var VHr=s(Bte);ICo=r(VHr,"deberta"),VHr.forEach(t),jCo=r(iye," \u2014 "),BI=n(iye,"A",{href:!0});var zHr=s(BI);DCo=r(zHr,"DebertaForSequenceClassification"),zHr.forEach(t),NCo=r(iye," (DeBERTa model)"),iye.forEach(t),qCo=i(L),e1=n(L,"LI",{});var dye=s(e1);xte=n(dye,"STRONG",{});var WHr=s(xte);GCo=r(WHr,"deberta-v2"),WHr.forEach(t),OCo=r(dye," \u2014 "),xI=n(dye,"A",{href:!0});var QHr=s(xI);XCo=r(QHr,"DebertaV2ForSequenceClassification"),QHr.forEach(t),VCo=r(dye," (DeBERTa-v2 model)"),dye.forEach(t),zCo=i(L),o1=n(L,"LI",{});var cye=s(o1);kte=n(cye,"STRONG",{});var HHr=s(kte);WCo=r(HHr,"distilbert"),HHr.forEach(t),QCo=r(cye," \u2014 "),kI=n(cye,"A",{href:!0});var UHr=s(kI);HCo=r(UHr,"DistilBertForSequenceClassification"),UHr.forEach(t),UCo=r(cye," (DistilBERT model)"),cye.forEach(t),JCo=i(L),r1=n(L,"LI",{});var fye=s(r1);Rte=n(fye,"STRONG",{});var JHr=s(Rte);YCo=r(JHr,"electra"),JHr.forEach(t),KCo=r(fye," \u2014 "),RI=n(fye,"A",{href:!0});var YHr=s(RI);ZCo=r(YHr,"ElectraForSequenceClassification"),YHr.forEach(t),eMo=r(fye," (ELECTRA model)"),fye.forEach(t),oMo=i(L),t1=n(L,"LI",{});var mye=s(t1);Ste=n(mye,"STRONG",{});var KHr=s(Ste);rMo=r(KHr,"flaubert"),KHr.forEach(t),tMo=r(mye," \u2014 "),SI=n(mye,"A",{href:!0});var ZHr=s(SI);aMo=r(ZHr,"FlaubertForSequenceClassification"),ZHr.forEach(t),nMo=r(mye," (FlauBERT model)"),mye.forEach(t),sMo=i(L),a1=n(L,"LI",{});var gye=s(a1);Pte=n(gye,"STRONG",{});var eUr=s(Pte);lMo=r(eUr,"fnet"),eUr.forEach(t),iMo=r(gye," \u2014 "),PI=n(gye,"A",{href:!0});var oUr=s(PI);dMo=r(oUr,"FNetForSequenceClassification"),oUr.forEach(t),cMo=r(gye," (FNet model)"),gye.forEach(t),fMo=i(L),n1=n(L,"LI",{});var hye=s(n1);$te=n(hye,"STRONG",{});var rUr=s($te);mMo=r(rUr,"funnel"),rUr.forEach(t),gMo=r(hye," \u2014 "),$I=n(hye,"A",{href:!0});var tUr=s($I);hMo=r(tUr,"FunnelForSequenceClassification"),tUr.forEach(t),pMo=r(hye," (Funnel Transformer model)"),hye.forEach(t),_Mo=i(L),s1=n(L,"LI",{});var pye=s(s1);Ite=n(pye,"STRONG",{});var aUr=s(Ite);uMo=r(aUr,"gpt2"),aUr.forEach(t),bMo=r(pye," \u2014 "),II=n(pye,"A",{href:!0});var nUr=s(II);vMo=r(nUr,"GPT2ForSequenceClassification"),nUr.forEach(t),TMo=r(pye," (OpenAI GPT-2 model)"),pye.forEach(t),FMo=i(L),l1=n(L,"LI",{});var _ye=s(l1);jte=n(_ye,"STRONG",{});var sUr=s(jte);CMo=r(sUr,"gpt_neo"),sUr.forEach(t),MMo=r(_ye," \u2014 "),jI=n(_ye,"A",{href:!0});var lUr=s(jI);EMo=r(lUr,"GPTNeoForSequenceClassification"),lUr.forEach(t),yMo=r(_ye," (GPT Neo model)"),_ye.forEach(t),wMo=i(L),i1=n(L,"LI",{});var uye=s(i1);Dte=n(uye,"STRONG",{});var iUr=s(Dte);AMo=r(iUr,"gptj"),iUr.forEach(t),LMo=r(uye," \u2014 "),DI=n(uye,"A",{href:!0});var dUr=s(DI);BMo=r(dUr,"GPTJForSequenceClassification"),dUr.forEach(t),xMo=r(uye," (GPT-J model)"),uye.forEach(t),kMo=i(L),d1=n(L,"LI",{});var bye=s(d1);Nte=n(bye,"STRONG",{});var cUr=s(Nte);RMo=r(cUr,"ibert"),cUr.forEach(t),SMo=r(bye," \u2014 "),NI=n(bye,"A",{href:!0});var fUr=s(NI);PMo=r(fUr,"IBertForSequenceClassification"),fUr.forEach(t),$Mo=r(bye," (I-BERT model)"),bye.forEach(t),IMo=i(L),c1=n(L,"LI",{});var vye=s(c1);qte=n(vye,"STRONG",{});var mUr=s(qte);jMo=r(mUr,"layoutlm"),mUr.forEach(t),DMo=r(vye," \u2014 "),qI=n(vye,"A",{href:!0});var gUr=s(qI);NMo=r(gUr,"LayoutLMForSequenceClassification"),gUr.forEach(t),qMo=r(vye," (LayoutLM model)"),vye.forEach(t),GMo=i(L),f1=n(L,"LI",{});var Tye=s(f1);Gte=n(Tye,"STRONG",{});var hUr=s(Gte);OMo=r(hUr,"layoutlmv2"),hUr.forEach(t),XMo=r(Tye," \u2014 "),GI=n(Tye,"A",{href:!0});var pUr=s(GI);VMo=r(pUr,"LayoutLMv2ForSequenceClassification"),pUr.forEach(t),zMo=r(Tye," (LayoutLMv2 model)"),Tye.forEach(t),WMo=i(L),m1=n(L,"LI",{});var Fye=s(m1);Ote=n(Fye,"STRONG",{});var _Ur=s(Ote);QMo=r(_Ur,"led"),_Ur.forEach(t),HMo=r(Fye," \u2014 "),OI=n(Fye,"A",{href:!0});var uUr=s(OI);UMo=r(uUr,"LEDForSequenceClassification"),uUr.forEach(t),JMo=r(Fye," (LED model)"),Fye.forEach(t),YMo=i(L),g1=n(L,"LI",{});var Cye=s(g1);Xte=n(Cye,"STRONG",{});var bUr=s(Xte);KMo=r(bUr,"longformer"),bUr.forEach(t),ZMo=r(Cye," \u2014 "),XI=n(Cye,"A",{href:!0});var vUr=s(XI);e4o=r(vUr,"LongformerForSequenceClassification"),vUr.forEach(t),o4o=r(Cye," (Longformer model)"),Cye.forEach(t),r4o=i(L),h1=n(L,"LI",{});var Mye=s(h1);Vte=n(Mye,"STRONG",{});var TUr=s(Vte);t4o=r(TUr,"mbart"),TUr.forEach(t),a4o=r(Mye," \u2014 "),VI=n(Mye,"A",{href:!0});var FUr=s(VI);n4o=r(FUr,"MBartForSequenceClassification"),FUr.forEach(t),s4o=r(Mye," (mBART model)"),Mye.forEach(t),l4o=i(L),p1=n(L,"LI",{});var Eye=s(p1);zte=n(Eye,"STRONG",{});var CUr=s(zte);i4o=r(CUr,"megatron-bert"),CUr.forEach(t),d4o=r(Eye," \u2014 "),zI=n(Eye,"A",{href:!0});var MUr=s(zI);c4o=r(MUr,"MegatronBertForSequenceClassification"),MUr.forEach(t),f4o=r(Eye," (MegatronBert model)"),Eye.forEach(t),m4o=i(L),_1=n(L,"LI",{});var yye=s(_1);Wte=n(yye,"STRONG",{});var EUr=s(Wte);g4o=r(EUr,"mobilebert"),EUr.forEach(t),h4o=r(yye," \u2014 "),WI=n(yye,"A",{href:!0});var yUr=s(WI);p4o=r(yUr,"MobileBertForSequenceClassification"),yUr.forEach(t),_4o=r(yye," (MobileBERT model)"),yye.forEach(t),u4o=i(L),u1=n(L,"LI",{});var wye=s(u1);Qte=n(wye,"STRONG",{});var wUr=s(Qte);b4o=r(wUr,"mpnet"),wUr.forEach(t),v4o=r(wye," \u2014 "),QI=n(wye,"A",{href:!0});var AUr=s(QI);T4o=r(AUr,"MPNetForSequenceClassification"),AUr.forEach(t),F4o=r(wye," (MPNet model)"),wye.forEach(t),C4o=i(L),b1=n(L,"LI",{});var Aye=s(b1);Hte=n(Aye,"STRONG",{});var LUr=s(Hte);M4o=r(LUr,"nystromformer"),LUr.forEach(t),E4o=r(Aye," \u2014 "),HI=n(Aye,"A",{href:!0});var BUr=s(HI);y4o=r(BUr,"NystromformerForSequenceClassification"),BUr.forEach(t),w4o=r(Aye," (Nystromformer model)"),Aye.forEach(t),A4o=i(L),v1=n(L,"LI",{});var Lye=s(v1);Ute=n(Lye,"STRONG",{});var xUr=s(Ute);L4o=r(xUr,"openai-gpt"),xUr.forEach(t),B4o=r(Lye," \u2014 "),UI=n(Lye,"A",{href:!0});var kUr=s(UI);x4o=r(kUr,"OpenAIGPTForSequenceClassification"),kUr.forEach(t),k4o=r(Lye," (OpenAI GPT model)"),Lye.forEach(t),R4o=i(L),T1=n(L,"LI",{});var Bye=s(T1);Jte=n(Bye,"STRONG",{});var RUr=s(Jte);S4o=r(RUr,"perceiver"),RUr.forEach(t),P4o=r(Bye," \u2014 "),JI=n(Bye,"A",{href:!0});var SUr=s(JI);$4o=r(SUr,"PerceiverForSequenceClassification"),SUr.forEach(t),I4o=r(Bye," (Perceiver model)"),Bye.forEach(t),j4o=i(L),F1=n(L,"LI",{});var xye=s(F1);Yte=n(xye,"STRONG",{});var PUr=s(Yte);D4o=r(PUr,"plbart"),PUr.forEach(t),N4o=r(xye," \u2014 "),YI=n(xye,"A",{href:!0});var $Ur=s(YI);q4o=r($Ur,"PLBartForSequenceClassification"),$Ur.forEach(t),G4o=r(xye," (PLBart model)"),xye.forEach(t),O4o=i(L),C1=n(L,"LI",{});var kye=s(C1);Kte=n(kye,"STRONG",{});var IUr=s(Kte);X4o=r(IUr,"qdqbert"),IUr.forEach(t),V4o=r(kye," \u2014 "),KI=n(kye,"A",{href:!0});var jUr=s(KI);z4o=r(jUr,"QDQBertForSequenceClassification"),jUr.forEach(t),W4o=r(kye," (QDQBert model)"),kye.forEach(t),Q4o=i(L),M1=n(L,"LI",{});var Rye=s(M1);Zte=n(Rye,"STRONG",{});var DUr=s(Zte);H4o=r(DUr,"reformer"),DUr.forEach(t),U4o=r(Rye," \u2014 "),ZI=n(Rye,"A",{href:!0});var NUr=s(ZI);J4o=r(NUr,"ReformerForSequenceClassification"),NUr.forEach(t),Y4o=r(Rye," (Reformer model)"),Rye.forEach(t),K4o=i(L),E1=n(L,"LI",{});var Sye=s(E1);eae=n(Sye,"STRONG",{});var qUr=s(eae);Z4o=r(qUr,"rembert"),qUr.forEach(t),eEo=r(Sye," \u2014 "),ej=n(Sye,"A",{href:!0});var GUr=s(ej);oEo=r(GUr,"RemBertForSequenceClassification"),GUr.forEach(t),rEo=r(Sye," (RemBERT model)"),Sye.forEach(t),tEo=i(L),y1=n(L,"LI",{});var Pye=s(y1);oae=n(Pye,"STRONG",{});var OUr=s(oae);aEo=r(OUr,"roberta"),OUr.forEach(t),nEo=r(Pye," \u2014 "),oj=n(Pye,"A",{href:!0});var XUr=s(oj);sEo=r(XUr,"RobertaForSequenceClassification"),XUr.forEach(t),lEo=r(Pye," (RoBERTa model)"),Pye.forEach(t),iEo=i(L),w1=n(L,"LI",{});var $ye=s(w1);rae=n($ye,"STRONG",{});var VUr=s(rae);dEo=r(VUr,"roformer"),VUr.forEach(t),cEo=r($ye," \u2014 "),rj=n($ye,"A",{href:!0});var zUr=s(rj);fEo=r(zUr,"RoFormerForSequenceClassification"),zUr.forEach(t),mEo=r($ye," (RoFormer model)"),$ye.forEach(t),gEo=i(L),A1=n(L,"LI",{});var Iye=s(A1);tae=n(Iye,"STRONG",{});var WUr=s(tae);hEo=r(WUr,"squeezebert"),WUr.forEach(t),pEo=r(Iye," \u2014 "),tj=n(Iye,"A",{href:!0});var QUr=s(tj);_Eo=r(QUr,"SqueezeBertForSequenceClassification"),QUr.forEach(t),uEo=r(Iye," (SqueezeBERT model)"),Iye.forEach(t),bEo=i(L),L1=n(L,"LI",{});var jye=s(L1);aae=n(jye,"STRONG",{});var HUr=s(aae);vEo=r(HUr,"tapas"),HUr.forEach(t),TEo=r(jye," \u2014 "),aj=n(jye,"A",{href:!0});var UUr=s(aj);FEo=r(UUr,"TapasForSequenceClassification"),UUr.forEach(t),CEo=r(jye," (TAPAS model)"),jye.forEach(t),MEo=i(L),B1=n(L,"LI",{});var Dye=s(B1);nae=n(Dye,"STRONG",{});var JUr=s(nae);EEo=r(JUr,"transfo-xl"),JUr.forEach(t),yEo=r(Dye," \u2014 "),nj=n(Dye,"A",{href:!0});var YUr=s(nj);wEo=r(YUr,"TransfoXLForSequenceClassification"),YUr.forEach(t),AEo=r(Dye," (Transformer-XL model)"),Dye.forEach(t),LEo=i(L),x1=n(L,"LI",{});var Nye=s(x1);sae=n(Nye,"STRONG",{});var KUr=s(sae);BEo=r(KUr,"xlm"),KUr.forEach(t),xEo=r(Nye," \u2014 "),sj=n(Nye,"A",{href:!0});var ZUr=s(sj);kEo=r(ZUr,"XLMForSequenceClassification"),ZUr.forEach(t),REo=r(Nye," (XLM model)"),Nye.forEach(t),SEo=i(L),k1=n(L,"LI",{});var qye=s(k1);lae=n(qye,"STRONG",{});var eJr=s(lae);PEo=r(eJr,"xlm-roberta"),eJr.forEach(t),$Eo=r(qye," \u2014 "),lj=n(qye,"A",{href:!0});var oJr=s(lj);IEo=r(oJr,"XLMRobertaForSequenceClassification"),oJr.forEach(t),jEo=r(qye," (XLM-RoBERTa model)"),qye.forEach(t),DEo=i(L),R1=n(L,"LI",{});var Gye=s(R1);iae=n(Gye,"STRONG",{});var rJr=s(iae);NEo=r(rJr,"xlm-roberta-xl"),rJr.forEach(t),qEo=r(Gye," \u2014 "),ij=n(Gye,"A",{href:!0});var tJr=s(ij);GEo=r(tJr,"XLMRobertaXLForSequenceClassification"),tJr.forEach(t),OEo=r(Gye," (XLM-RoBERTa-XL model)"),Gye.forEach(t),XEo=i(L),S1=n(L,"LI",{});var Oye=s(S1);dae=n(Oye,"STRONG",{});var aJr=s(dae);VEo=r(aJr,"xlnet"),aJr.forEach(t),zEo=r(Oye," \u2014 "),dj=n(Oye,"A",{href:!0});var nJr=s(dj);WEo=r(nJr,"XLNetForSequenceClassification"),nJr.forEach(t),QEo=r(Oye," (XLNet model)"),Oye.forEach(t),HEo=i(L),P1=n(L,"LI",{});var Xye=s(P1);cae=n(Xye,"STRONG",{});var sJr=s(cae);UEo=r(sJr,"yoso"),sJr.forEach(t),JEo=r(Xye," \u2014 "),cj=n(Xye,"A",{href:!0});var lJr=s(cj);YEo=r(lJr,"YosoForSequenceClassification"),lJr.forEach(t),KEo=r(Xye," (YOSO model)"),Xye.forEach(t),L.forEach(t),ZEo=i(zt),$1=n(zt,"P",{});var Vye=s($1);eyo=r(Vye,"The model is set in evaluation mode by default using "),fae=n(Vye,"CODE",{});var iJr=s(fae);oyo=r(iJr,"model.eval()"),iJr.forEach(t),ryo=r(Vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mae=n(Vye,"CODE",{});var dJr=s(mae);tyo=r(dJr,"model.train()"),dJr.forEach(t),Vye.forEach(t),ayo=i(zt),gae=n(zt,"P",{});var cJr=s(gae);nyo=r(cJr,"Examples:"),cJr.forEach(t),syo=i(zt),m(uy.$$.fragment,zt),zt.forEach(t),rl.forEach(t),Xxe=i(c),pd=n(c,"H2",{class:!0});var KRe=s(pd);I1=n(KRe,"A",{id:!0,class:!0,href:!0});var fJr=s(I1);hae=n(fJr,"SPAN",{});var mJr=s(hae);m(by.$$.fragment,mJr),mJr.forEach(t),fJr.forEach(t),lyo=i(KRe),pae=n(KRe,"SPAN",{});var gJr=s(pae);iyo=r(gJr,"AutoModelForMultipleChoice"),gJr.forEach(t),KRe.forEach(t),Vxe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(vy.$$.fragment,al),dyo=i(al),_d=n(al,"P",{});var Xz=s(_d);cyo=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_ae=n(Xz,"CODE",{});var hJr=s(_ae);fyo=r(hJr,"from_pretrained()"),hJr.forEach(t),myo=r(Xz,"class method or the "),uae=n(Xz,"CODE",{});var pJr=s(uae);gyo=r(pJr,"from_config()"),pJr.forEach(t),hyo=r(Xz,`class
method.`),Xz.forEach(t),pyo=i(al),Ty=n(al,"P",{});var ZRe=s(Ty);_yo=r(ZRe,"This class cannot be instantiated directly using "),bae=n(ZRe,"CODE",{});var _Jr=s(bae);uyo=r(_Jr,"__init__()"),_Jr.forEach(t),byo=r(ZRe," (throws an error)."),ZRe.forEach(t),vyo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(Fy.$$.fragment,nl),Tyo=i(nl),vae=n(nl,"P",{});var uJr=s(vae);Fyo=r(uJr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uJr.forEach(t),Cyo=i(nl),ud=n(nl,"P",{});var Vz=s(ud);Myo=r(Vz,`Note:
Loading a model from its configuration file does `),Tae=n(Vz,"STRONG",{});var bJr=s(Tae);Eyo=r(bJr,"not"),bJr.forEach(t),yyo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fae=n(Vz,"CODE",{});var vJr=s(Fae);wyo=r(vJr,"from_pretrained()"),vJr.forEach(t),Ayo=r(Vz,"to load the model weights."),Vz.forEach(t),Lyo=i(nl),Cae=n(nl,"P",{});var TJr=s(Cae);Byo=r(TJr,"Examples:"),TJr.forEach(t),xyo=i(nl),m(Cy.$$.fragment,nl),nl.forEach(t),kyo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);m(My.$$.fragment,Wt),Ryo=i(Wt),Mae=n(Wt,"P",{});var FJr=s(Mae);Syo=r(FJr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FJr.forEach(t),Pyo=i(Wt),Ja=n(Wt,"P",{});var s4=s(Ja);$yo=r(s4,"The model class to instantiate is selected based on the "),Eae=n(s4,"CODE",{});var CJr=s(Eae);Iyo=r(CJr,"model_type"),CJr.forEach(t),jyo=r(s4,` property of the config object (either
passed as an argument or loaded from `),yae=n(s4,"CODE",{});var MJr=s(yae);Dyo=r(MJr,"pretrained_model_name_or_path"),MJr.forEach(t),Nyo=r(s4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wae=n(s4,"CODE",{});var EJr=s(wae);qyo=r(EJr,"pretrained_model_name_or_path"),EJr.forEach(t),Gyo=r(s4,":"),s4.forEach(t),Oyo=i(Wt),G=n(Wt,"UL",{});var O=s(G);j1=n(O,"LI",{});var zye=s(j1);Aae=n(zye,"STRONG",{});var yJr=s(Aae);Xyo=r(yJr,"albert"),yJr.forEach(t),Vyo=r(zye," \u2014 "),fj=n(zye,"A",{href:!0});var wJr=s(fj);zyo=r(wJr,"AlbertForMultipleChoice"),wJr.forEach(t),Wyo=r(zye," (ALBERT model)"),zye.forEach(t),Qyo=i(O),D1=n(O,"LI",{});var Wye=s(D1);Lae=n(Wye,"STRONG",{});var AJr=s(Lae);Hyo=r(AJr,"bert"),AJr.forEach(t),Uyo=r(Wye," \u2014 "),mj=n(Wye,"A",{href:!0});var LJr=s(mj);Jyo=r(LJr,"BertForMultipleChoice"),LJr.forEach(t),Yyo=r(Wye," (BERT model)"),Wye.forEach(t),Kyo=i(O),N1=n(O,"LI",{});var Qye=s(N1);Bae=n(Qye,"STRONG",{});var BJr=s(Bae);Zyo=r(BJr,"big_bird"),BJr.forEach(t),ewo=r(Qye," \u2014 "),gj=n(Qye,"A",{href:!0});var xJr=s(gj);owo=r(xJr,"BigBirdForMultipleChoice"),xJr.forEach(t),rwo=r(Qye," (BigBird model)"),Qye.forEach(t),two=i(O),q1=n(O,"LI",{});var Hye=s(q1);xae=n(Hye,"STRONG",{});var kJr=s(xae);awo=r(kJr,"camembert"),kJr.forEach(t),nwo=r(Hye," \u2014 "),hj=n(Hye,"A",{href:!0});var RJr=s(hj);swo=r(RJr,"CamembertForMultipleChoice"),RJr.forEach(t),lwo=r(Hye," (CamemBERT model)"),Hye.forEach(t),iwo=i(O),G1=n(O,"LI",{});var Uye=s(G1);kae=n(Uye,"STRONG",{});var SJr=s(kae);dwo=r(SJr,"canine"),SJr.forEach(t),cwo=r(Uye," \u2014 "),pj=n(Uye,"A",{href:!0});var PJr=s(pj);fwo=r(PJr,"CanineForMultipleChoice"),PJr.forEach(t),mwo=r(Uye," (Canine model)"),Uye.forEach(t),gwo=i(O),O1=n(O,"LI",{});var Jye=s(O1);Rae=n(Jye,"STRONG",{});var $Jr=s(Rae);hwo=r($Jr,"convbert"),$Jr.forEach(t),pwo=r(Jye," \u2014 "),_j=n(Jye,"A",{href:!0});var IJr=s(_j);_wo=r(IJr,"ConvBertForMultipleChoice"),IJr.forEach(t),uwo=r(Jye," (ConvBERT model)"),Jye.forEach(t),bwo=i(O),X1=n(O,"LI",{});var Yye=s(X1);Sae=n(Yye,"STRONG",{});var jJr=s(Sae);vwo=r(jJr,"data2vec-text"),jJr.forEach(t),Two=r(Yye," \u2014 "),uj=n(Yye,"A",{href:!0});var DJr=s(uj);Fwo=r(DJr,"Data2VecTextForMultipleChoice"),DJr.forEach(t),Cwo=r(Yye," (Data2VecText model)"),Yye.forEach(t),Mwo=i(O),V1=n(O,"LI",{});var Kye=s(V1);Pae=n(Kye,"STRONG",{});var NJr=s(Pae);Ewo=r(NJr,"distilbert"),NJr.forEach(t),ywo=r(Kye," \u2014 "),bj=n(Kye,"A",{href:!0});var qJr=s(bj);wwo=r(qJr,"DistilBertForMultipleChoice"),qJr.forEach(t),Awo=r(Kye," (DistilBERT model)"),Kye.forEach(t),Lwo=i(O),z1=n(O,"LI",{});var Zye=s(z1);$ae=n(Zye,"STRONG",{});var GJr=s($ae);Bwo=r(GJr,"electra"),GJr.forEach(t),xwo=r(Zye," \u2014 "),vj=n(Zye,"A",{href:!0});var OJr=s(vj);kwo=r(OJr,"ElectraForMultipleChoice"),OJr.forEach(t),Rwo=r(Zye," (ELECTRA model)"),Zye.forEach(t),Swo=i(O),W1=n(O,"LI",{});var ewe=s(W1);Iae=n(ewe,"STRONG",{});var XJr=s(Iae);Pwo=r(XJr,"flaubert"),XJr.forEach(t),$wo=r(ewe," \u2014 "),Tj=n(ewe,"A",{href:!0});var VJr=s(Tj);Iwo=r(VJr,"FlaubertForMultipleChoice"),VJr.forEach(t),jwo=r(ewe," (FlauBERT model)"),ewe.forEach(t),Dwo=i(O),Q1=n(O,"LI",{});var owe=s(Q1);jae=n(owe,"STRONG",{});var zJr=s(jae);Nwo=r(zJr,"fnet"),zJr.forEach(t),qwo=r(owe," \u2014 "),Fj=n(owe,"A",{href:!0});var WJr=s(Fj);Gwo=r(WJr,"FNetForMultipleChoice"),WJr.forEach(t),Owo=r(owe," (FNet model)"),owe.forEach(t),Xwo=i(O),H1=n(O,"LI",{});var rwe=s(H1);Dae=n(rwe,"STRONG",{});var QJr=s(Dae);Vwo=r(QJr,"funnel"),QJr.forEach(t),zwo=r(rwe," \u2014 "),Cj=n(rwe,"A",{href:!0});var HJr=s(Cj);Wwo=r(HJr,"FunnelForMultipleChoice"),HJr.forEach(t),Qwo=r(rwe," (Funnel Transformer model)"),rwe.forEach(t),Hwo=i(O),U1=n(O,"LI",{});var twe=s(U1);Nae=n(twe,"STRONG",{});var UJr=s(Nae);Uwo=r(UJr,"ibert"),UJr.forEach(t),Jwo=r(twe," \u2014 "),Mj=n(twe,"A",{href:!0});var JJr=s(Mj);Ywo=r(JJr,"IBertForMultipleChoice"),JJr.forEach(t),Kwo=r(twe," (I-BERT model)"),twe.forEach(t),Zwo=i(O),J1=n(O,"LI",{});var awe=s(J1);qae=n(awe,"STRONG",{});var YJr=s(qae);eAo=r(YJr,"longformer"),YJr.forEach(t),oAo=r(awe," \u2014 "),Ej=n(awe,"A",{href:!0});var KJr=s(Ej);rAo=r(KJr,"LongformerForMultipleChoice"),KJr.forEach(t),tAo=r(awe," (Longformer model)"),awe.forEach(t),aAo=i(O),Y1=n(O,"LI",{});var nwe=s(Y1);Gae=n(nwe,"STRONG",{});var ZJr=s(Gae);nAo=r(ZJr,"megatron-bert"),ZJr.forEach(t),sAo=r(nwe," \u2014 "),yj=n(nwe,"A",{href:!0});var eYr=s(yj);lAo=r(eYr,"MegatronBertForMultipleChoice"),eYr.forEach(t),iAo=r(nwe," (MegatronBert model)"),nwe.forEach(t),dAo=i(O),K1=n(O,"LI",{});var swe=s(K1);Oae=n(swe,"STRONG",{});var oYr=s(Oae);cAo=r(oYr,"mobilebert"),oYr.forEach(t),fAo=r(swe," \u2014 "),wj=n(swe,"A",{href:!0});var rYr=s(wj);mAo=r(rYr,"MobileBertForMultipleChoice"),rYr.forEach(t),gAo=r(swe," (MobileBERT model)"),swe.forEach(t),hAo=i(O),Z1=n(O,"LI",{});var lwe=s(Z1);Xae=n(lwe,"STRONG",{});var tYr=s(Xae);pAo=r(tYr,"mpnet"),tYr.forEach(t),_Ao=r(lwe," \u2014 "),Aj=n(lwe,"A",{href:!0});var aYr=s(Aj);uAo=r(aYr,"MPNetForMultipleChoice"),aYr.forEach(t),bAo=r(lwe," (MPNet model)"),lwe.forEach(t),vAo=i(O),eb=n(O,"LI",{});var iwe=s(eb);Vae=n(iwe,"STRONG",{});var nYr=s(Vae);TAo=r(nYr,"nystromformer"),nYr.forEach(t),FAo=r(iwe," \u2014 "),Lj=n(iwe,"A",{href:!0});var sYr=s(Lj);CAo=r(sYr,"NystromformerForMultipleChoice"),sYr.forEach(t),MAo=r(iwe," (Nystromformer model)"),iwe.forEach(t),EAo=i(O),ob=n(O,"LI",{});var dwe=s(ob);zae=n(dwe,"STRONG",{});var lYr=s(zae);yAo=r(lYr,"qdqbert"),lYr.forEach(t),wAo=r(dwe," \u2014 "),Bj=n(dwe,"A",{href:!0});var iYr=s(Bj);AAo=r(iYr,"QDQBertForMultipleChoice"),iYr.forEach(t),LAo=r(dwe," (QDQBert model)"),dwe.forEach(t),BAo=i(O),rb=n(O,"LI",{});var cwe=s(rb);Wae=n(cwe,"STRONG",{});var dYr=s(Wae);xAo=r(dYr,"rembert"),dYr.forEach(t),kAo=r(cwe," \u2014 "),xj=n(cwe,"A",{href:!0});var cYr=s(xj);RAo=r(cYr,"RemBertForMultipleChoice"),cYr.forEach(t),SAo=r(cwe," (RemBERT model)"),cwe.forEach(t),PAo=i(O),tb=n(O,"LI",{});var fwe=s(tb);Qae=n(fwe,"STRONG",{});var fYr=s(Qae);$Ao=r(fYr,"roberta"),fYr.forEach(t),IAo=r(fwe," \u2014 "),kj=n(fwe,"A",{href:!0});var mYr=s(kj);jAo=r(mYr,"RobertaForMultipleChoice"),mYr.forEach(t),DAo=r(fwe," (RoBERTa model)"),fwe.forEach(t),NAo=i(O),ab=n(O,"LI",{});var mwe=s(ab);Hae=n(mwe,"STRONG",{});var gYr=s(Hae);qAo=r(gYr,"roformer"),gYr.forEach(t),GAo=r(mwe," \u2014 "),Rj=n(mwe,"A",{href:!0});var hYr=s(Rj);OAo=r(hYr,"RoFormerForMultipleChoice"),hYr.forEach(t),XAo=r(mwe," (RoFormer model)"),mwe.forEach(t),VAo=i(O),nb=n(O,"LI",{});var gwe=s(nb);Uae=n(gwe,"STRONG",{});var pYr=s(Uae);zAo=r(pYr,"squeezebert"),pYr.forEach(t),WAo=r(gwe," \u2014 "),Sj=n(gwe,"A",{href:!0});var _Yr=s(Sj);QAo=r(_Yr,"SqueezeBertForMultipleChoice"),_Yr.forEach(t),HAo=r(gwe," (SqueezeBERT model)"),gwe.forEach(t),UAo=i(O),sb=n(O,"LI",{});var hwe=s(sb);Jae=n(hwe,"STRONG",{});var uYr=s(Jae);JAo=r(uYr,"xlm"),uYr.forEach(t),YAo=r(hwe," \u2014 "),Pj=n(hwe,"A",{href:!0});var bYr=s(Pj);KAo=r(bYr,"XLMForMultipleChoice"),bYr.forEach(t),ZAo=r(hwe," (XLM model)"),hwe.forEach(t),e0o=i(O),lb=n(O,"LI",{});var pwe=s(lb);Yae=n(pwe,"STRONG",{});var vYr=s(Yae);o0o=r(vYr,"xlm-roberta"),vYr.forEach(t),r0o=r(pwe," \u2014 "),$j=n(pwe,"A",{href:!0});var TYr=s($j);t0o=r(TYr,"XLMRobertaForMultipleChoice"),TYr.forEach(t),a0o=r(pwe," (XLM-RoBERTa model)"),pwe.forEach(t),n0o=i(O),ib=n(O,"LI",{});var _we=s(ib);Kae=n(_we,"STRONG",{});var FYr=s(Kae);s0o=r(FYr,"xlm-roberta-xl"),FYr.forEach(t),l0o=r(_we," \u2014 "),Ij=n(_we,"A",{href:!0});var CYr=s(Ij);i0o=r(CYr,"XLMRobertaXLForMultipleChoice"),CYr.forEach(t),d0o=r(_we," (XLM-RoBERTa-XL model)"),_we.forEach(t),c0o=i(O),db=n(O,"LI",{});var uwe=s(db);Zae=n(uwe,"STRONG",{});var MYr=s(Zae);f0o=r(MYr,"xlnet"),MYr.forEach(t),m0o=r(uwe," \u2014 "),jj=n(uwe,"A",{href:!0});var EYr=s(jj);g0o=r(EYr,"XLNetForMultipleChoice"),EYr.forEach(t),h0o=r(uwe," (XLNet model)"),uwe.forEach(t),p0o=i(O),cb=n(O,"LI",{});var bwe=s(cb);ene=n(bwe,"STRONG",{});var yYr=s(ene);_0o=r(yYr,"yoso"),yYr.forEach(t),u0o=r(bwe," \u2014 "),Dj=n(bwe,"A",{href:!0});var wYr=s(Dj);b0o=r(wYr,"YosoForMultipleChoice"),wYr.forEach(t),v0o=r(bwe," (YOSO model)"),bwe.forEach(t),O.forEach(t),T0o=i(Wt),fb=n(Wt,"P",{});var vwe=s(fb);F0o=r(vwe,"The model is set in evaluation mode by default using "),one=n(vwe,"CODE",{});var AYr=s(one);C0o=r(AYr,"model.eval()"),AYr.forEach(t),M0o=r(vwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rne=n(vwe,"CODE",{});var LYr=s(rne);E0o=r(LYr,"model.train()"),LYr.forEach(t),vwe.forEach(t),y0o=i(Wt),tne=n(Wt,"P",{});var BYr=s(tne);w0o=r(BYr,"Examples:"),BYr.forEach(t),A0o=i(Wt),m(Ey.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),zxe=i(c),bd=n(c,"H2",{class:!0});var eSe=s(bd);mb=n(eSe,"A",{id:!0,class:!0,href:!0});var xYr=s(mb);ane=n(xYr,"SPAN",{});var kYr=s(ane);m(yy.$$.fragment,kYr),kYr.forEach(t),xYr.forEach(t),L0o=i(eSe),nne=n(eSe,"SPAN",{});var RYr=s(nne);B0o=r(RYr,"AutoModelForNextSentencePrediction"),RYr.forEach(t),eSe.forEach(t),Wxe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(wy.$$.fragment,sl),x0o=i(sl),vd=n(sl,"P",{});var zz=s(vd);k0o=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sne=n(zz,"CODE",{});var SYr=s(sne);R0o=r(SYr,"from_pretrained()"),SYr.forEach(t),S0o=r(zz,"class method or the "),lne=n(zz,"CODE",{});var PYr=s(lne);P0o=r(PYr,"from_config()"),PYr.forEach(t),$0o=r(zz,`class
method.`),zz.forEach(t),I0o=i(sl),Ay=n(sl,"P",{});var oSe=s(Ay);j0o=r(oSe,"This class cannot be instantiated directly using "),ine=n(oSe,"CODE",{});var $Yr=s(ine);D0o=r($Yr,"__init__()"),$Yr.forEach(t),N0o=r(oSe," (throws an error)."),oSe.forEach(t),q0o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(Ly.$$.fragment,ll),G0o=i(ll),dne=n(ll,"P",{});var IYr=s(dne);O0o=r(IYr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),IYr.forEach(t),X0o=i(ll),Td=n(ll,"P",{});var Wz=s(Td);V0o=r(Wz,`Note:
Loading a model from its configuration file does `),cne=n(Wz,"STRONG",{});var jYr=s(cne);z0o=r(jYr,"not"),jYr.forEach(t),W0o=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),fne=n(Wz,"CODE",{});var DYr=s(fne);Q0o=r(DYr,"from_pretrained()"),DYr.forEach(t),H0o=r(Wz,"to load the model weights."),Wz.forEach(t),U0o=i(ll),mne=n(ll,"P",{});var NYr=s(mne);J0o=r(NYr,"Examples:"),NYr.forEach(t),Y0o=i(ll),m(By.$$.fragment,ll),ll.forEach(t),K0o=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(xy.$$.fragment,Qt),Z0o=i(Qt),gne=n(Qt,"P",{});var qYr=s(gne);eLo=r(qYr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qYr.forEach(t),oLo=i(Qt),Ya=n(Qt,"P",{});var l4=s(Ya);rLo=r(l4,"The model class to instantiate is selected based on the "),hne=n(l4,"CODE",{});var GYr=s(hne);tLo=r(GYr,"model_type"),GYr.forEach(t),aLo=r(l4,` property of the config object (either
passed as an argument or loaded from `),pne=n(l4,"CODE",{});var OYr=s(pne);nLo=r(OYr,"pretrained_model_name_or_path"),OYr.forEach(t),sLo=r(l4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ne=n(l4,"CODE",{});var XYr=s(_ne);lLo=r(XYr,"pretrained_model_name_or_path"),XYr.forEach(t),iLo=r(l4,":"),l4.forEach(t),dLo=i(Qt),da=n(Qt,"UL",{});var il=s(da);gb=n(il,"LI",{});var Twe=s(gb);une=n(Twe,"STRONG",{});var VYr=s(une);cLo=r(VYr,"bert"),VYr.forEach(t),fLo=r(Twe," \u2014 "),Nj=n(Twe,"A",{href:!0});var zYr=s(Nj);mLo=r(zYr,"BertForNextSentencePrediction"),zYr.forEach(t),gLo=r(Twe," (BERT model)"),Twe.forEach(t),hLo=i(il),hb=n(il,"LI",{});var Fwe=s(hb);bne=n(Fwe,"STRONG",{});var WYr=s(bne);pLo=r(WYr,"fnet"),WYr.forEach(t),_Lo=r(Fwe," \u2014 "),qj=n(Fwe,"A",{href:!0});var QYr=s(qj);uLo=r(QYr,"FNetForNextSentencePrediction"),QYr.forEach(t),bLo=r(Fwe," (FNet model)"),Fwe.forEach(t),vLo=i(il),pb=n(il,"LI",{});var Cwe=s(pb);vne=n(Cwe,"STRONG",{});var HYr=s(vne);TLo=r(HYr,"megatron-bert"),HYr.forEach(t),FLo=r(Cwe," \u2014 "),Gj=n(Cwe,"A",{href:!0});var UYr=s(Gj);CLo=r(UYr,"MegatronBertForNextSentencePrediction"),UYr.forEach(t),MLo=r(Cwe," (MegatronBert model)"),Cwe.forEach(t),ELo=i(il),_b=n(il,"LI",{});var Mwe=s(_b);Tne=n(Mwe,"STRONG",{});var JYr=s(Tne);yLo=r(JYr,"mobilebert"),JYr.forEach(t),wLo=r(Mwe," \u2014 "),Oj=n(Mwe,"A",{href:!0});var YYr=s(Oj);ALo=r(YYr,"MobileBertForNextSentencePrediction"),YYr.forEach(t),LLo=r(Mwe," (MobileBERT model)"),Mwe.forEach(t),BLo=i(il),ub=n(il,"LI",{});var Ewe=s(ub);Fne=n(Ewe,"STRONG",{});var KYr=s(Fne);xLo=r(KYr,"qdqbert"),KYr.forEach(t),kLo=r(Ewe," \u2014 "),Xj=n(Ewe,"A",{href:!0});var ZYr=s(Xj);RLo=r(ZYr,"QDQBertForNextSentencePrediction"),ZYr.forEach(t),SLo=r(Ewe," (QDQBert model)"),Ewe.forEach(t),il.forEach(t),PLo=i(Qt),bb=n(Qt,"P",{});var ywe=s(bb);$Lo=r(ywe,"The model is set in evaluation mode by default using "),Cne=n(ywe,"CODE",{});var eKr=s(Cne);ILo=r(eKr,"model.eval()"),eKr.forEach(t),jLo=r(ywe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=n(ywe,"CODE",{});var oKr=s(Mne);DLo=r(oKr,"model.train()"),oKr.forEach(t),ywe.forEach(t),NLo=i(Qt),Ene=n(Qt,"P",{});var rKr=s(Ene);qLo=r(rKr,"Examples:"),rKr.forEach(t),GLo=i(Qt),m(ky.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),Qxe=i(c),Fd=n(c,"H2",{class:!0});var rSe=s(Fd);vb=n(rSe,"A",{id:!0,class:!0,href:!0});var tKr=s(vb);yne=n(tKr,"SPAN",{});var aKr=s(yne);m(Ry.$$.fragment,aKr),aKr.forEach(t),tKr.forEach(t),OLo=i(rSe),wne=n(rSe,"SPAN",{});var nKr=s(wne);XLo=r(nKr,"AutoModelForTokenClassification"),nKr.forEach(t),rSe.forEach(t),Hxe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(Sy.$$.fragment,dl),VLo=i(dl),Cd=n(dl,"P",{});var Qz=s(Cd);zLo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ane=n(Qz,"CODE",{});var sKr=s(Ane);WLo=r(sKr,"from_pretrained()"),sKr.forEach(t),QLo=r(Qz,"class method or the "),Lne=n(Qz,"CODE",{});var lKr=s(Lne);HLo=r(lKr,"from_config()"),lKr.forEach(t),ULo=r(Qz,`class
method.`),Qz.forEach(t),JLo=i(dl),Py=n(dl,"P",{});var tSe=s(Py);YLo=r(tSe,"This class cannot be instantiated directly using "),Bne=n(tSe,"CODE",{});var iKr=s(Bne);KLo=r(iKr,"__init__()"),iKr.forEach(t),ZLo=r(tSe," (throws an error)."),tSe.forEach(t),e7o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m($y.$$.fragment,cl),o7o=i(cl),xne=n(cl,"P",{});var dKr=s(xne);r7o=r(dKr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),dKr.forEach(t),t7o=i(cl),Md=n(cl,"P",{});var Hz=s(Md);a7o=r(Hz,`Note:
Loading a model from its configuration file does `),kne=n(Hz,"STRONG",{});var cKr=s(kne);n7o=r(cKr,"not"),cKr.forEach(t),s7o=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rne=n(Hz,"CODE",{});var fKr=s(Rne);l7o=r(fKr,"from_pretrained()"),fKr.forEach(t),i7o=r(Hz,"to load the model weights."),Hz.forEach(t),d7o=i(cl),Sne=n(cl,"P",{});var mKr=s(Sne);c7o=r(mKr,"Examples:"),mKr.forEach(t),f7o=i(cl),m(Iy.$$.fragment,cl),cl.forEach(t),m7o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(jy.$$.fragment,Ht),g7o=i(Ht),Pne=n(Ht,"P",{});var gKr=s(Pne);h7o=r(gKr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gKr.forEach(t),p7o=i(Ht),Ka=n(Ht,"P",{});var i4=s(Ka);_7o=r(i4,"The model class to instantiate is selected based on the "),$ne=n(i4,"CODE",{});var hKr=s($ne);u7o=r(hKr,"model_type"),hKr.forEach(t),b7o=r(i4,` property of the config object (either
passed as an argument or loaded from `),Ine=n(i4,"CODE",{});var pKr=s(Ine);v7o=r(pKr,"pretrained_model_name_or_path"),pKr.forEach(t),T7o=r(i4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jne=n(i4,"CODE",{});var _Kr=s(jne);F7o=r(_Kr,"pretrained_model_name_or_path"),_Kr.forEach(t),C7o=r(i4,":"),i4.forEach(t),M7o=i(Ht),N=n(Ht,"UL",{});var q=s(N);Tb=n(q,"LI",{});var wwe=s(Tb);Dne=n(wwe,"STRONG",{});var uKr=s(Dne);E7o=r(uKr,"albert"),uKr.forEach(t),y7o=r(wwe," \u2014 "),Vj=n(wwe,"A",{href:!0});var bKr=s(Vj);w7o=r(bKr,"AlbertForTokenClassification"),bKr.forEach(t),A7o=r(wwe," (ALBERT model)"),wwe.forEach(t),L7o=i(q),Fb=n(q,"LI",{});var Awe=s(Fb);Nne=n(Awe,"STRONG",{});var vKr=s(Nne);B7o=r(vKr,"bert"),vKr.forEach(t),x7o=r(Awe," \u2014 "),zj=n(Awe,"A",{href:!0});var TKr=s(zj);k7o=r(TKr,"BertForTokenClassification"),TKr.forEach(t),R7o=r(Awe," (BERT model)"),Awe.forEach(t),S7o=i(q),Cb=n(q,"LI",{});var Lwe=s(Cb);qne=n(Lwe,"STRONG",{});var FKr=s(qne);P7o=r(FKr,"big_bird"),FKr.forEach(t),$7o=r(Lwe," \u2014 "),Wj=n(Lwe,"A",{href:!0});var CKr=s(Wj);I7o=r(CKr,"BigBirdForTokenClassification"),CKr.forEach(t),j7o=r(Lwe," (BigBird model)"),Lwe.forEach(t),D7o=i(q),Mb=n(q,"LI",{});var Bwe=s(Mb);Gne=n(Bwe,"STRONG",{});var MKr=s(Gne);N7o=r(MKr,"camembert"),MKr.forEach(t),q7o=r(Bwe," \u2014 "),Qj=n(Bwe,"A",{href:!0});var EKr=s(Qj);G7o=r(EKr,"CamembertForTokenClassification"),EKr.forEach(t),O7o=r(Bwe," (CamemBERT model)"),Bwe.forEach(t),X7o=i(q),Eb=n(q,"LI",{});var xwe=s(Eb);One=n(xwe,"STRONG",{});var yKr=s(One);V7o=r(yKr,"canine"),yKr.forEach(t),z7o=r(xwe," \u2014 "),Hj=n(xwe,"A",{href:!0});var wKr=s(Hj);W7o=r(wKr,"CanineForTokenClassification"),wKr.forEach(t),Q7o=r(xwe," (Canine model)"),xwe.forEach(t),H7o=i(q),yb=n(q,"LI",{});var kwe=s(yb);Xne=n(kwe,"STRONG",{});var AKr=s(Xne);U7o=r(AKr,"convbert"),AKr.forEach(t),J7o=r(kwe," \u2014 "),Uj=n(kwe,"A",{href:!0});var LKr=s(Uj);Y7o=r(LKr,"ConvBertForTokenClassification"),LKr.forEach(t),K7o=r(kwe," (ConvBERT model)"),kwe.forEach(t),Z7o=i(q),wb=n(q,"LI",{});var Rwe=s(wb);Vne=n(Rwe,"STRONG",{});var BKr=s(Vne);e8o=r(BKr,"data2vec-text"),BKr.forEach(t),o8o=r(Rwe," \u2014 "),Jj=n(Rwe,"A",{href:!0});var xKr=s(Jj);r8o=r(xKr,"Data2VecTextForTokenClassification"),xKr.forEach(t),t8o=r(Rwe," (Data2VecText model)"),Rwe.forEach(t),a8o=i(q),Ab=n(q,"LI",{});var Swe=s(Ab);zne=n(Swe,"STRONG",{});var kKr=s(zne);n8o=r(kKr,"deberta"),kKr.forEach(t),s8o=r(Swe," \u2014 "),Yj=n(Swe,"A",{href:!0});var RKr=s(Yj);l8o=r(RKr,"DebertaForTokenClassification"),RKr.forEach(t),i8o=r(Swe," (DeBERTa model)"),Swe.forEach(t),d8o=i(q),Lb=n(q,"LI",{});var Pwe=s(Lb);Wne=n(Pwe,"STRONG",{});var SKr=s(Wne);c8o=r(SKr,"deberta-v2"),SKr.forEach(t),f8o=r(Pwe," \u2014 "),Kj=n(Pwe,"A",{href:!0});var PKr=s(Kj);m8o=r(PKr,"DebertaV2ForTokenClassification"),PKr.forEach(t),g8o=r(Pwe," (DeBERTa-v2 model)"),Pwe.forEach(t),h8o=i(q),Bb=n(q,"LI",{});var $we=s(Bb);Qne=n($we,"STRONG",{});var $Kr=s(Qne);p8o=r($Kr,"distilbert"),$Kr.forEach(t),_8o=r($we," \u2014 "),Zj=n($we,"A",{href:!0});var IKr=s(Zj);u8o=r(IKr,"DistilBertForTokenClassification"),IKr.forEach(t),b8o=r($we," (DistilBERT model)"),$we.forEach(t),v8o=i(q),xb=n(q,"LI",{});var Iwe=s(xb);Hne=n(Iwe,"STRONG",{});var jKr=s(Hne);T8o=r(jKr,"electra"),jKr.forEach(t),F8o=r(Iwe," \u2014 "),eD=n(Iwe,"A",{href:!0});var DKr=s(eD);C8o=r(DKr,"ElectraForTokenClassification"),DKr.forEach(t),M8o=r(Iwe," (ELECTRA model)"),Iwe.forEach(t),E8o=i(q),kb=n(q,"LI",{});var jwe=s(kb);Une=n(jwe,"STRONG",{});var NKr=s(Une);y8o=r(NKr,"flaubert"),NKr.forEach(t),w8o=r(jwe," \u2014 "),oD=n(jwe,"A",{href:!0});var qKr=s(oD);A8o=r(qKr,"FlaubertForTokenClassification"),qKr.forEach(t),L8o=r(jwe," (FlauBERT model)"),jwe.forEach(t),B8o=i(q),Rb=n(q,"LI",{});var Dwe=s(Rb);Jne=n(Dwe,"STRONG",{});var GKr=s(Jne);x8o=r(GKr,"fnet"),GKr.forEach(t),k8o=r(Dwe," \u2014 "),rD=n(Dwe,"A",{href:!0});var OKr=s(rD);R8o=r(OKr,"FNetForTokenClassification"),OKr.forEach(t),S8o=r(Dwe," (FNet model)"),Dwe.forEach(t),P8o=i(q),Sb=n(q,"LI",{});var Nwe=s(Sb);Yne=n(Nwe,"STRONG",{});var XKr=s(Yne);$8o=r(XKr,"funnel"),XKr.forEach(t),I8o=r(Nwe," \u2014 "),tD=n(Nwe,"A",{href:!0});var VKr=s(tD);j8o=r(VKr,"FunnelForTokenClassification"),VKr.forEach(t),D8o=r(Nwe," (Funnel Transformer model)"),Nwe.forEach(t),N8o=i(q),Pb=n(q,"LI",{});var qwe=s(Pb);Kne=n(qwe,"STRONG",{});var zKr=s(Kne);q8o=r(zKr,"gpt2"),zKr.forEach(t),G8o=r(qwe," \u2014 "),aD=n(qwe,"A",{href:!0});var WKr=s(aD);O8o=r(WKr,"GPT2ForTokenClassification"),WKr.forEach(t),X8o=r(qwe," (OpenAI GPT-2 model)"),qwe.forEach(t),V8o=i(q),$b=n(q,"LI",{});var Gwe=s($b);Zne=n(Gwe,"STRONG",{});var QKr=s(Zne);z8o=r(QKr,"ibert"),QKr.forEach(t),W8o=r(Gwe," \u2014 "),nD=n(Gwe,"A",{href:!0});var HKr=s(nD);Q8o=r(HKr,"IBertForTokenClassification"),HKr.forEach(t),H8o=r(Gwe," (I-BERT model)"),Gwe.forEach(t),U8o=i(q),Ib=n(q,"LI",{});var Owe=s(Ib);ese=n(Owe,"STRONG",{});var UKr=s(ese);J8o=r(UKr,"layoutlm"),UKr.forEach(t),Y8o=r(Owe," \u2014 "),sD=n(Owe,"A",{href:!0});var JKr=s(sD);K8o=r(JKr,"LayoutLMForTokenClassification"),JKr.forEach(t),Z8o=r(Owe," (LayoutLM model)"),Owe.forEach(t),e9o=i(q),jb=n(q,"LI",{});var Xwe=s(jb);ose=n(Xwe,"STRONG",{});var YKr=s(ose);o9o=r(YKr,"layoutlmv2"),YKr.forEach(t),r9o=r(Xwe," \u2014 "),lD=n(Xwe,"A",{href:!0});var KKr=s(lD);t9o=r(KKr,"LayoutLMv2ForTokenClassification"),KKr.forEach(t),a9o=r(Xwe," (LayoutLMv2 model)"),Xwe.forEach(t),n9o=i(q),Db=n(q,"LI",{});var Vwe=s(Db);rse=n(Vwe,"STRONG",{});var ZKr=s(rse);s9o=r(ZKr,"longformer"),ZKr.forEach(t),l9o=r(Vwe," \u2014 "),iD=n(Vwe,"A",{href:!0});var eZr=s(iD);i9o=r(eZr,"LongformerForTokenClassification"),eZr.forEach(t),d9o=r(Vwe," (Longformer model)"),Vwe.forEach(t),c9o=i(q),Nb=n(q,"LI",{});var zwe=s(Nb);tse=n(zwe,"STRONG",{});var oZr=s(tse);f9o=r(oZr,"megatron-bert"),oZr.forEach(t),m9o=r(zwe," \u2014 "),dD=n(zwe,"A",{href:!0});var rZr=s(dD);g9o=r(rZr,"MegatronBertForTokenClassification"),rZr.forEach(t),h9o=r(zwe," (MegatronBert model)"),zwe.forEach(t),p9o=i(q),qb=n(q,"LI",{});var Wwe=s(qb);ase=n(Wwe,"STRONG",{});var tZr=s(ase);_9o=r(tZr,"mobilebert"),tZr.forEach(t),u9o=r(Wwe," \u2014 "),cD=n(Wwe,"A",{href:!0});var aZr=s(cD);b9o=r(aZr,"MobileBertForTokenClassification"),aZr.forEach(t),v9o=r(Wwe," (MobileBERT model)"),Wwe.forEach(t),T9o=i(q),Gb=n(q,"LI",{});var Qwe=s(Gb);nse=n(Qwe,"STRONG",{});var nZr=s(nse);F9o=r(nZr,"mpnet"),nZr.forEach(t),C9o=r(Qwe," \u2014 "),fD=n(Qwe,"A",{href:!0});var sZr=s(fD);M9o=r(sZr,"MPNetForTokenClassification"),sZr.forEach(t),E9o=r(Qwe," (MPNet model)"),Qwe.forEach(t),y9o=i(q),Ob=n(q,"LI",{});var Hwe=s(Ob);sse=n(Hwe,"STRONG",{});var lZr=s(sse);w9o=r(lZr,"nystromformer"),lZr.forEach(t),A9o=r(Hwe," \u2014 "),mD=n(Hwe,"A",{href:!0});var iZr=s(mD);L9o=r(iZr,"NystromformerForTokenClassification"),iZr.forEach(t),B9o=r(Hwe," (Nystromformer model)"),Hwe.forEach(t),x9o=i(q),Xb=n(q,"LI",{});var Uwe=s(Xb);lse=n(Uwe,"STRONG",{});var dZr=s(lse);k9o=r(dZr,"qdqbert"),dZr.forEach(t),R9o=r(Uwe," \u2014 "),gD=n(Uwe,"A",{href:!0});var cZr=s(gD);S9o=r(cZr,"QDQBertForTokenClassification"),cZr.forEach(t),P9o=r(Uwe," (QDQBert model)"),Uwe.forEach(t),$9o=i(q),Vb=n(q,"LI",{});var Jwe=s(Vb);ise=n(Jwe,"STRONG",{});var fZr=s(ise);I9o=r(fZr,"rembert"),fZr.forEach(t),j9o=r(Jwe," \u2014 "),hD=n(Jwe,"A",{href:!0});var mZr=s(hD);D9o=r(mZr,"RemBertForTokenClassification"),mZr.forEach(t),N9o=r(Jwe," (RemBERT model)"),Jwe.forEach(t),q9o=i(q),zb=n(q,"LI",{});var Ywe=s(zb);dse=n(Ywe,"STRONG",{});var gZr=s(dse);G9o=r(gZr,"roberta"),gZr.forEach(t),O9o=r(Ywe," \u2014 "),pD=n(Ywe,"A",{href:!0});var hZr=s(pD);X9o=r(hZr,"RobertaForTokenClassification"),hZr.forEach(t),V9o=r(Ywe," (RoBERTa model)"),Ywe.forEach(t),z9o=i(q),Wb=n(q,"LI",{});var Kwe=s(Wb);cse=n(Kwe,"STRONG",{});var pZr=s(cse);W9o=r(pZr,"roformer"),pZr.forEach(t),Q9o=r(Kwe," \u2014 "),_D=n(Kwe,"A",{href:!0});var _Zr=s(_D);H9o=r(_Zr,"RoFormerForTokenClassification"),_Zr.forEach(t),U9o=r(Kwe," (RoFormer model)"),Kwe.forEach(t),J9o=i(q),Qb=n(q,"LI",{});var Zwe=s(Qb);fse=n(Zwe,"STRONG",{});var uZr=s(fse);Y9o=r(uZr,"squeezebert"),uZr.forEach(t),K9o=r(Zwe," \u2014 "),uD=n(Zwe,"A",{href:!0});var bZr=s(uD);Z9o=r(bZr,"SqueezeBertForTokenClassification"),bZr.forEach(t),eBo=r(Zwe," (SqueezeBERT model)"),Zwe.forEach(t),oBo=i(q),Hb=n(q,"LI",{});var eAe=s(Hb);mse=n(eAe,"STRONG",{});var vZr=s(mse);rBo=r(vZr,"xlm"),vZr.forEach(t),tBo=r(eAe," \u2014 "),bD=n(eAe,"A",{href:!0});var TZr=s(bD);aBo=r(TZr,"XLMForTokenClassification"),TZr.forEach(t),nBo=r(eAe," (XLM model)"),eAe.forEach(t),sBo=i(q),Ub=n(q,"LI",{});var oAe=s(Ub);gse=n(oAe,"STRONG",{});var FZr=s(gse);lBo=r(FZr,"xlm-roberta"),FZr.forEach(t),iBo=r(oAe," \u2014 "),vD=n(oAe,"A",{href:!0});var CZr=s(vD);dBo=r(CZr,"XLMRobertaForTokenClassification"),CZr.forEach(t),cBo=r(oAe," (XLM-RoBERTa model)"),oAe.forEach(t),fBo=i(q),Jb=n(q,"LI",{});var rAe=s(Jb);hse=n(rAe,"STRONG",{});var MZr=s(hse);mBo=r(MZr,"xlm-roberta-xl"),MZr.forEach(t),gBo=r(rAe," \u2014 "),TD=n(rAe,"A",{href:!0});var EZr=s(TD);hBo=r(EZr,"XLMRobertaXLForTokenClassification"),EZr.forEach(t),pBo=r(rAe," (XLM-RoBERTa-XL model)"),rAe.forEach(t),_Bo=i(q),Yb=n(q,"LI",{});var tAe=s(Yb);pse=n(tAe,"STRONG",{});var yZr=s(pse);uBo=r(yZr,"xlnet"),yZr.forEach(t),bBo=r(tAe," \u2014 "),FD=n(tAe,"A",{href:!0});var wZr=s(FD);vBo=r(wZr,"XLNetForTokenClassification"),wZr.forEach(t),TBo=r(tAe," (XLNet model)"),tAe.forEach(t),FBo=i(q),Kb=n(q,"LI",{});var aAe=s(Kb);_se=n(aAe,"STRONG",{});var AZr=s(_se);CBo=r(AZr,"yoso"),AZr.forEach(t),MBo=r(aAe," \u2014 "),CD=n(aAe,"A",{href:!0});var LZr=s(CD);EBo=r(LZr,"YosoForTokenClassification"),LZr.forEach(t),yBo=r(aAe," (YOSO model)"),aAe.forEach(t),q.forEach(t),wBo=i(Ht),Zb=n(Ht,"P",{});var nAe=s(Zb);ABo=r(nAe,"The model is set in evaluation mode by default using "),use=n(nAe,"CODE",{});var BZr=s(use);LBo=r(BZr,"model.eval()"),BZr.forEach(t),BBo=r(nAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bse=n(nAe,"CODE",{});var xZr=s(bse);xBo=r(xZr,"model.train()"),xZr.forEach(t),nAe.forEach(t),kBo=i(Ht),vse=n(Ht,"P",{});var kZr=s(vse);RBo=r(kZr,"Examples:"),kZr.forEach(t),SBo=i(Ht),m(Dy.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Uxe=i(c),Ed=n(c,"H2",{class:!0});var aSe=s(Ed);e3=n(aSe,"A",{id:!0,class:!0,href:!0});var RZr=s(e3);Tse=n(RZr,"SPAN",{});var SZr=s(Tse);m(Ny.$$.fragment,SZr),SZr.forEach(t),RZr.forEach(t),PBo=i(aSe),Fse=n(aSe,"SPAN",{});var PZr=s(Fse);$Bo=r(PZr,"AutoModelForQuestionAnswering"),PZr.forEach(t),aSe.forEach(t),Jxe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(qy.$$.fragment,fl),IBo=i(fl),yd=n(fl,"P",{});var Uz=s(yd);jBo=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cse=n(Uz,"CODE",{});var $Zr=s(Cse);DBo=r($Zr,"from_pretrained()"),$Zr.forEach(t),NBo=r(Uz,"class method or the "),Mse=n(Uz,"CODE",{});var IZr=s(Mse);qBo=r(IZr,"from_config()"),IZr.forEach(t),GBo=r(Uz,`class
method.`),Uz.forEach(t),OBo=i(fl),Gy=n(fl,"P",{});var nSe=s(Gy);XBo=r(nSe,"This class cannot be instantiated directly using "),Ese=n(nSe,"CODE",{});var jZr=s(Ese);VBo=r(jZr,"__init__()"),jZr.forEach(t),zBo=r(nSe," (throws an error)."),nSe.forEach(t),WBo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(Oy.$$.fragment,ml),QBo=i(ml),yse=n(ml,"P",{});var DZr=s(yse);HBo=r(DZr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DZr.forEach(t),UBo=i(ml),wd=n(ml,"P",{});var Jz=s(wd);JBo=r(Jz,`Note:
Loading a model from its configuration file does `),wse=n(Jz,"STRONG",{});var NZr=s(wse);YBo=r(NZr,"not"),NZr.forEach(t),KBo=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ase=n(Jz,"CODE",{});var qZr=s(Ase);ZBo=r(qZr,"from_pretrained()"),qZr.forEach(t),exo=r(Jz,"to load the model weights."),Jz.forEach(t),oxo=i(ml),Lse=n(ml,"P",{});var GZr=s(Lse);rxo=r(GZr,"Examples:"),GZr.forEach(t),txo=i(ml),m(Xy.$$.fragment,ml),ml.forEach(t),axo=i(fl),We=n(fl,"DIV",{class:!0});var Ut=s(We);m(Vy.$$.fragment,Ut),nxo=i(Ut),Bse=n(Ut,"P",{});var OZr=s(Bse);sxo=r(OZr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),OZr.forEach(t),lxo=i(Ut),Za=n(Ut,"P",{});var d4=s(Za);ixo=r(d4,"The model class to instantiate is selected based on the "),xse=n(d4,"CODE",{});var XZr=s(xse);dxo=r(XZr,"model_type"),XZr.forEach(t),cxo=r(d4,` property of the config object (either
passed as an argument or loaded from `),kse=n(d4,"CODE",{});var VZr=s(kse);fxo=r(VZr,"pretrained_model_name_or_path"),VZr.forEach(t),mxo=r(d4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rse=n(d4,"CODE",{});var zZr=s(Rse);gxo=r(zZr,"pretrained_model_name_or_path"),zZr.forEach(t),hxo=r(d4,":"),d4.forEach(t),pxo=i(Ut),R=n(Ut,"UL",{});var P=s(R);o3=n(P,"LI",{});var sAe=s(o3);Sse=n(sAe,"STRONG",{});var WZr=s(Sse);_xo=r(WZr,"albert"),WZr.forEach(t),uxo=r(sAe," \u2014 "),MD=n(sAe,"A",{href:!0});var QZr=s(MD);bxo=r(QZr,"AlbertForQuestionAnswering"),QZr.forEach(t),vxo=r(sAe," (ALBERT model)"),sAe.forEach(t),Txo=i(P),r3=n(P,"LI",{});var lAe=s(r3);Pse=n(lAe,"STRONG",{});var HZr=s(Pse);Fxo=r(HZr,"bart"),HZr.forEach(t),Cxo=r(lAe," \u2014 "),ED=n(lAe,"A",{href:!0});var UZr=s(ED);Mxo=r(UZr,"BartForQuestionAnswering"),UZr.forEach(t),Exo=r(lAe," (BART model)"),lAe.forEach(t),yxo=i(P),t3=n(P,"LI",{});var iAe=s(t3);$se=n(iAe,"STRONG",{});var JZr=s($se);wxo=r(JZr,"bert"),JZr.forEach(t),Axo=r(iAe," \u2014 "),yD=n(iAe,"A",{href:!0});var YZr=s(yD);Lxo=r(YZr,"BertForQuestionAnswering"),YZr.forEach(t),Bxo=r(iAe," (BERT model)"),iAe.forEach(t),xxo=i(P),a3=n(P,"LI",{});var dAe=s(a3);Ise=n(dAe,"STRONG",{});var KZr=s(Ise);kxo=r(KZr,"big_bird"),KZr.forEach(t),Rxo=r(dAe," \u2014 "),wD=n(dAe,"A",{href:!0});var ZZr=s(wD);Sxo=r(ZZr,"BigBirdForQuestionAnswering"),ZZr.forEach(t),Pxo=r(dAe," (BigBird model)"),dAe.forEach(t),$xo=i(P),n3=n(P,"LI",{});var cAe=s(n3);jse=n(cAe,"STRONG",{});var eet=s(jse);Ixo=r(eet,"bigbird_pegasus"),eet.forEach(t),jxo=r(cAe," \u2014 "),AD=n(cAe,"A",{href:!0});var oet=s(AD);Dxo=r(oet,"BigBirdPegasusForQuestionAnswering"),oet.forEach(t),Nxo=r(cAe," (BigBirdPegasus model)"),cAe.forEach(t),qxo=i(P),s3=n(P,"LI",{});var fAe=s(s3);Dse=n(fAe,"STRONG",{});var ret=s(Dse);Gxo=r(ret,"camembert"),ret.forEach(t),Oxo=r(fAe," \u2014 "),LD=n(fAe,"A",{href:!0});var tet=s(LD);Xxo=r(tet,"CamembertForQuestionAnswering"),tet.forEach(t),Vxo=r(fAe," (CamemBERT model)"),fAe.forEach(t),zxo=i(P),l3=n(P,"LI",{});var mAe=s(l3);Nse=n(mAe,"STRONG",{});var aet=s(Nse);Wxo=r(aet,"canine"),aet.forEach(t),Qxo=r(mAe," \u2014 "),BD=n(mAe,"A",{href:!0});var net=s(BD);Hxo=r(net,"CanineForQuestionAnswering"),net.forEach(t),Uxo=r(mAe," (Canine model)"),mAe.forEach(t),Jxo=i(P),i3=n(P,"LI",{});var gAe=s(i3);qse=n(gAe,"STRONG",{});var set=s(qse);Yxo=r(set,"convbert"),set.forEach(t),Kxo=r(gAe," \u2014 "),xD=n(gAe,"A",{href:!0});var iet=s(xD);Zxo=r(iet,"ConvBertForQuestionAnswering"),iet.forEach(t),eko=r(gAe," (ConvBERT model)"),gAe.forEach(t),oko=i(P),d3=n(P,"LI",{});var hAe=s(d3);Gse=n(hAe,"STRONG",{});var det=s(Gse);rko=r(det,"data2vec-text"),det.forEach(t),tko=r(hAe," \u2014 "),kD=n(hAe,"A",{href:!0});var cet=s(kD);ako=r(cet,"Data2VecTextForQuestionAnswering"),cet.forEach(t),nko=r(hAe," (Data2VecText model)"),hAe.forEach(t),sko=i(P),c3=n(P,"LI",{});var pAe=s(c3);Ose=n(pAe,"STRONG",{});var fet=s(Ose);lko=r(fet,"deberta"),fet.forEach(t),iko=r(pAe," \u2014 "),RD=n(pAe,"A",{href:!0});var met=s(RD);dko=r(met,"DebertaForQuestionAnswering"),met.forEach(t),cko=r(pAe," (DeBERTa model)"),pAe.forEach(t),fko=i(P),f3=n(P,"LI",{});var _Ae=s(f3);Xse=n(_Ae,"STRONG",{});var get=s(Xse);mko=r(get,"deberta-v2"),get.forEach(t),gko=r(_Ae," \u2014 "),SD=n(_Ae,"A",{href:!0});var het=s(SD);hko=r(het,"DebertaV2ForQuestionAnswering"),het.forEach(t),pko=r(_Ae," (DeBERTa-v2 model)"),_Ae.forEach(t),_ko=i(P),m3=n(P,"LI",{});var uAe=s(m3);Vse=n(uAe,"STRONG",{});var pet=s(Vse);uko=r(pet,"distilbert"),pet.forEach(t),bko=r(uAe," \u2014 "),PD=n(uAe,"A",{href:!0});var _et=s(PD);vko=r(_et,"DistilBertForQuestionAnswering"),_et.forEach(t),Tko=r(uAe," (DistilBERT model)"),uAe.forEach(t),Fko=i(P),g3=n(P,"LI",{});var bAe=s(g3);zse=n(bAe,"STRONG",{});var uet=s(zse);Cko=r(uet,"electra"),uet.forEach(t),Mko=r(bAe," \u2014 "),$D=n(bAe,"A",{href:!0});var bet=s($D);Eko=r(bet,"ElectraForQuestionAnswering"),bet.forEach(t),yko=r(bAe," (ELECTRA model)"),bAe.forEach(t),wko=i(P),h3=n(P,"LI",{});var vAe=s(h3);Wse=n(vAe,"STRONG",{});var vet=s(Wse);Ako=r(vet,"flaubert"),vet.forEach(t),Lko=r(vAe," \u2014 "),ID=n(vAe,"A",{href:!0});var Tet=s(ID);Bko=r(Tet,"FlaubertForQuestionAnsweringSimple"),Tet.forEach(t),xko=r(vAe," (FlauBERT model)"),vAe.forEach(t),kko=i(P),p3=n(P,"LI",{});var TAe=s(p3);Qse=n(TAe,"STRONG",{});var Fet=s(Qse);Rko=r(Fet,"fnet"),Fet.forEach(t),Sko=r(TAe," \u2014 "),jD=n(TAe,"A",{href:!0});var Cet=s(jD);Pko=r(Cet,"FNetForQuestionAnswering"),Cet.forEach(t),$ko=r(TAe," (FNet model)"),TAe.forEach(t),Iko=i(P),_3=n(P,"LI",{});var FAe=s(_3);Hse=n(FAe,"STRONG",{});var Met=s(Hse);jko=r(Met,"funnel"),Met.forEach(t),Dko=r(FAe," \u2014 "),DD=n(FAe,"A",{href:!0});var Eet=s(DD);Nko=r(Eet,"FunnelForQuestionAnswering"),Eet.forEach(t),qko=r(FAe," (Funnel Transformer model)"),FAe.forEach(t),Gko=i(P),u3=n(P,"LI",{});var CAe=s(u3);Use=n(CAe,"STRONG",{});var yet=s(Use);Oko=r(yet,"gptj"),yet.forEach(t),Xko=r(CAe," \u2014 "),ND=n(CAe,"A",{href:!0});var wet=s(ND);Vko=r(wet,"GPTJForQuestionAnswering"),wet.forEach(t),zko=r(CAe," (GPT-J model)"),CAe.forEach(t),Wko=i(P),b3=n(P,"LI",{});var MAe=s(b3);Jse=n(MAe,"STRONG",{});var Aet=s(Jse);Qko=r(Aet,"ibert"),Aet.forEach(t),Hko=r(MAe," \u2014 "),qD=n(MAe,"A",{href:!0});var Let=s(qD);Uko=r(Let,"IBertForQuestionAnswering"),Let.forEach(t),Jko=r(MAe," (I-BERT model)"),MAe.forEach(t),Yko=i(P),v3=n(P,"LI",{});var EAe=s(v3);Yse=n(EAe,"STRONG",{});var Bet=s(Yse);Kko=r(Bet,"layoutlmv2"),Bet.forEach(t),Zko=r(EAe," \u2014 "),GD=n(EAe,"A",{href:!0});var xet=s(GD);eRo=r(xet,"LayoutLMv2ForQuestionAnswering"),xet.forEach(t),oRo=r(EAe," (LayoutLMv2 model)"),EAe.forEach(t),rRo=i(P),T3=n(P,"LI",{});var yAe=s(T3);Kse=n(yAe,"STRONG",{});var ket=s(Kse);tRo=r(ket,"led"),ket.forEach(t),aRo=r(yAe," \u2014 "),OD=n(yAe,"A",{href:!0});var Ret=s(OD);nRo=r(Ret,"LEDForQuestionAnswering"),Ret.forEach(t),sRo=r(yAe," (LED model)"),yAe.forEach(t),lRo=i(P),F3=n(P,"LI",{});var wAe=s(F3);Zse=n(wAe,"STRONG",{});var Set=s(Zse);iRo=r(Set,"longformer"),Set.forEach(t),dRo=r(wAe," \u2014 "),XD=n(wAe,"A",{href:!0});var Pet=s(XD);cRo=r(Pet,"LongformerForQuestionAnswering"),Pet.forEach(t),fRo=r(wAe," (Longformer model)"),wAe.forEach(t),mRo=i(P),C3=n(P,"LI",{});var AAe=s(C3);ele=n(AAe,"STRONG",{});var $et=s(ele);gRo=r($et,"lxmert"),$et.forEach(t),hRo=r(AAe," \u2014 "),VD=n(AAe,"A",{href:!0});var Iet=s(VD);pRo=r(Iet,"LxmertForQuestionAnswering"),Iet.forEach(t),_Ro=r(AAe," (LXMERT model)"),AAe.forEach(t),uRo=i(P),M3=n(P,"LI",{});var LAe=s(M3);ole=n(LAe,"STRONG",{});var jet=s(ole);bRo=r(jet,"mbart"),jet.forEach(t),vRo=r(LAe," \u2014 "),zD=n(LAe,"A",{href:!0});var Det=s(zD);TRo=r(Det,"MBartForQuestionAnswering"),Det.forEach(t),FRo=r(LAe," (mBART model)"),LAe.forEach(t),CRo=i(P),E3=n(P,"LI",{});var BAe=s(E3);rle=n(BAe,"STRONG",{});var Net=s(rle);MRo=r(Net,"megatron-bert"),Net.forEach(t),ERo=r(BAe," \u2014 "),WD=n(BAe,"A",{href:!0});var qet=s(WD);yRo=r(qet,"MegatronBertForQuestionAnswering"),qet.forEach(t),wRo=r(BAe," (MegatronBert model)"),BAe.forEach(t),ARo=i(P),y3=n(P,"LI",{});var xAe=s(y3);tle=n(xAe,"STRONG",{});var Get=s(tle);LRo=r(Get,"mobilebert"),Get.forEach(t),BRo=r(xAe," \u2014 "),QD=n(xAe,"A",{href:!0});var Oet=s(QD);xRo=r(Oet,"MobileBertForQuestionAnswering"),Oet.forEach(t),kRo=r(xAe," (MobileBERT model)"),xAe.forEach(t),RRo=i(P),w3=n(P,"LI",{});var kAe=s(w3);ale=n(kAe,"STRONG",{});var Xet=s(ale);SRo=r(Xet,"mpnet"),Xet.forEach(t),PRo=r(kAe," \u2014 "),HD=n(kAe,"A",{href:!0});var Vet=s(HD);$Ro=r(Vet,"MPNetForQuestionAnswering"),Vet.forEach(t),IRo=r(kAe," (MPNet model)"),kAe.forEach(t),jRo=i(P),A3=n(P,"LI",{});var RAe=s(A3);nle=n(RAe,"STRONG",{});var zet=s(nle);DRo=r(zet,"nystromformer"),zet.forEach(t),NRo=r(RAe," \u2014 "),UD=n(RAe,"A",{href:!0});var Wet=s(UD);qRo=r(Wet,"NystromformerForQuestionAnswering"),Wet.forEach(t),GRo=r(RAe," (Nystromformer model)"),RAe.forEach(t),ORo=i(P),L3=n(P,"LI",{});var SAe=s(L3);sle=n(SAe,"STRONG",{});var Qet=s(sle);XRo=r(Qet,"qdqbert"),Qet.forEach(t),VRo=r(SAe," \u2014 "),JD=n(SAe,"A",{href:!0});var Het=s(JD);zRo=r(Het,"QDQBertForQuestionAnswering"),Het.forEach(t),WRo=r(SAe," (QDQBert model)"),SAe.forEach(t),QRo=i(P),B3=n(P,"LI",{});var PAe=s(B3);lle=n(PAe,"STRONG",{});var Uet=s(lle);HRo=r(Uet,"reformer"),Uet.forEach(t),URo=r(PAe," \u2014 "),YD=n(PAe,"A",{href:!0});var Jet=s(YD);JRo=r(Jet,"ReformerForQuestionAnswering"),Jet.forEach(t),YRo=r(PAe," (Reformer model)"),PAe.forEach(t),KRo=i(P),x3=n(P,"LI",{});var $Ae=s(x3);ile=n($Ae,"STRONG",{});var Yet=s(ile);ZRo=r(Yet,"rembert"),Yet.forEach(t),eSo=r($Ae," \u2014 "),KD=n($Ae,"A",{href:!0});var Ket=s(KD);oSo=r(Ket,"RemBertForQuestionAnswering"),Ket.forEach(t),rSo=r($Ae," (RemBERT model)"),$Ae.forEach(t),tSo=i(P),k3=n(P,"LI",{});var IAe=s(k3);dle=n(IAe,"STRONG",{});var Zet=s(dle);aSo=r(Zet,"roberta"),Zet.forEach(t),nSo=r(IAe," \u2014 "),ZD=n(IAe,"A",{href:!0});var eot=s(ZD);sSo=r(eot,"RobertaForQuestionAnswering"),eot.forEach(t),lSo=r(IAe," (RoBERTa model)"),IAe.forEach(t),iSo=i(P),R3=n(P,"LI",{});var jAe=s(R3);cle=n(jAe,"STRONG",{});var oot=s(cle);dSo=r(oot,"roformer"),oot.forEach(t),cSo=r(jAe," \u2014 "),eN=n(jAe,"A",{href:!0});var rot=s(eN);fSo=r(rot,"RoFormerForQuestionAnswering"),rot.forEach(t),mSo=r(jAe," (RoFormer model)"),jAe.forEach(t),gSo=i(P),S3=n(P,"LI",{});var DAe=s(S3);fle=n(DAe,"STRONG",{});var tot=s(fle);hSo=r(tot,"splinter"),tot.forEach(t),pSo=r(DAe," \u2014 "),oN=n(DAe,"A",{href:!0});var aot=s(oN);_So=r(aot,"SplinterForQuestionAnswering"),aot.forEach(t),uSo=r(DAe," (Splinter model)"),DAe.forEach(t),bSo=i(P),P3=n(P,"LI",{});var NAe=s(P3);mle=n(NAe,"STRONG",{});var not=s(mle);vSo=r(not,"squeezebert"),not.forEach(t),TSo=r(NAe," \u2014 "),rN=n(NAe,"A",{href:!0});var sot=s(rN);FSo=r(sot,"SqueezeBertForQuestionAnswering"),sot.forEach(t),CSo=r(NAe," (SqueezeBERT model)"),NAe.forEach(t),MSo=i(P),$3=n(P,"LI",{});var qAe=s($3);gle=n(qAe,"STRONG",{});var lot=s(gle);ESo=r(lot,"xlm"),lot.forEach(t),ySo=r(qAe," \u2014 "),tN=n(qAe,"A",{href:!0});var iot=s(tN);wSo=r(iot,"XLMForQuestionAnsweringSimple"),iot.forEach(t),ASo=r(qAe," (XLM model)"),qAe.forEach(t),LSo=i(P),I3=n(P,"LI",{});var GAe=s(I3);hle=n(GAe,"STRONG",{});var dot=s(hle);BSo=r(dot,"xlm-roberta"),dot.forEach(t),xSo=r(GAe," \u2014 "),aN=n(GAe,"A",{href:!0});var cot=s(aN);kSo=r(cot,"XLMRobertaForQuestionAnswering"),cot.forEach(t),RSo=r(GAe," (XLM-RoBERTa model)"),GAe.forEach(t),SSo=i(P),j3=n(P,"LI",{});var OAe=s(j3);ple=n(OAe,"STRONG",{});var fot=s(ple);PSo=r(fot,"xlm-roberta-xl"),fot.forEach(t),$So=r(OAe," \u2014 "),nN=n(OAe,"A",{href:!0});var mot=s(nN);ISo=r(mot,"XLMRobertaXLForQuestionAnswering"),mot.forEach(t),jSo=r(OAe," (XLM-RoBERTa-XL model)"),OAe.forEach(t),DSo=i(P),D3=n(P,"LI",{});var XAe=s(D3);_le=n(XAe,"STRONG",{});var got=s(_le);NSo=r(got,"xlnet"),got.forEach(t),qSo=r(XAe," \u2014 "),sN=n(XAe,"A",{href:!0});var hot=s(sN);GSo=r(hot,"XLNetForQuestionAnsweringSimple"),hot.forEach(t),OSo=r(XAe," (XLNet model)"),XAe.forEach(t),XSo=i(P),N3=n(P,"LI",{});var VAe=s(N3);ule=n(VAe,"STRONG",{});var pot=s(ule);VSo=r(pot,"yoso"),pot.forEach(t),zSo=r(VAe," \u2014 "),lN=n(VAe,"A",{href:!0});var _ot=s(lN);WSo=r(_ot,"YosoForQuestionAnswering"),_ot.forEach(t),QSo=r(VAe," (YOSO model)"),VAe.forEach(t),P.forEach(t),HSo=i(Ut),q3=n(Ut,"P",{});var zAe=s(q3);USo=r(zAe,"The model is set in evaluation mode by default using "),ble=n(zAe,"CODE",{});var uot=s(ble);JSo=r(uot,"model.eval()"),uot.forEach(t),YSo=r(zAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=n(zAe,"CODE",{});var bot=s(vle);KSo=r(bot,"model.train()"),bot.forEach(t),zAe.forEach(t),ZSo=i(Ut),Tle=n(Ut,"P",{});var vot=s(Tle);ePo=r(vot,"Examples:"),vot.forEach(t),oPo=i(Ut),m(zy.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),Yxe=i(c),Ad=n(c,"H2",{class:!0});var sSe=s(Ad);G3=n(sSe,"A",{id:!0,class:!0,href:!0});var Tot=s(G3);Fle=n(Tot,"SPAN",{});var Fot=s(Fle);m(Wy.$$.fragment,Fot),Fot.forEach(t),Tot.forEach(t),rPo=i(sSe),Cle=n(sSe,"SPAN",{});var Cot=s(Cle);tPo=r(Cot,"AutoModelForTableQuestionAnswering"),Cot.forEach(t),sSe.forEach(t),Kxe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(Qy.$$.fragment,gl),aPo=i(gl),Ld=n(gl,"P",{});var Yz=s(Ld);nPo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Mle=n(Yz,"CODE",{});var Mot=s(Mle);sPo=r(Mot,"from_pretrained()"),Mot.forEach(t),lPo=r(Yz,"class method or the "),Ele=n(Yz,"CODE",{});var Eot=s(Ele);iPo=r(Eot,"from_config()"),Eot.forEach(t),dPo=r(Yz,`class
method.`),Yz.forEach(t),cPo=i(gl),Hy=n(gl,"P",{});var lSe=s(Hy);fPo=r(lSe,"This class cannot be instantiated directly using "),yle=n(lSe,"CODE",{});var yot=s(yle);mPo=r(yot,"__init__()"),yot.forEach(t),gPo=r(lSe," (throws an error)."),lSe.forEach(t),hPo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(Uy.$$.fragment,hl),pPo=i(hl),wle=n(hl,"P",{});var wot=s(wle);_Po=r(wot,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wot.forEach(t),uPo=i(hl),Bd=n(hl,"P",{});var Kz=s(Bd);bPo=r(Kz,`Note:
Loading a model from its configuration file does `),Ale=n(Kz,"STRONG",{});var Aot=s(Ale);vPo=r(Aot,"not"),Aot.forEach(t),TPo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lle=n(Kz,"CODE",{});var Lot=s(Lle);FPo=r(Lot,"from_pretrained()"),Lot.forEach(t),CPo=r(Kz,"to load the model weights."),Kz.forEach(t),MPo=i(hl),Ble=n(hl,"P",{});var Bot=s(Ble);EPo=r(Bot,"Examples:"),Bot.forEach(t),yPo=i(hl),m(Jy.$$.fragment,hl),hl.forEach(t),wPo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);m(Yy.$$.fragment,Jt),APo=i(Jt),xle=n(Jt,"P",{});var xot=s(xle);LPo=r(xot,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xot.forEach(t),BPo=i(Jt),en=n(Jt,"P",{});var c4=s(en);xPo=r(c4,"The model class to instantiate is selected based on the "),kle=n(c4,"CODE",{});var kot=s(kle);kPo=r(kot,"model_type"),kot.forEach(t),RPo=r(c4,` property of the config object (either
passed as an argument or loaded from `),Rle=n(c4,"CODE",{});var Rot=s(Rle);SPo=r(Rot,"pretrained_model_name_or_path"),Rot.forEach(t),PPo=r(c4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sle=n(c4,"CODE",{});var Sot=s(Sle);$Po=r(Sot,"pretrained_model_name_or_path"),Sot.forEach(t),IPo=r(c4,":"),c4.forEach(t),jPo=i(Jt),Ple=n(Jt,"UL",{});var Pot=s(Ple);O3=n(Pot,"LI",{});var WAe=s(O3);$le=n(WAe,"STRONG",{});var $ot=s($le);DPo=r($ot,"tapas"),$ot.forEach(t),NPo=r(WAe," \u2014 "),iN=n(WAe,"A",{href:!0});var Iot=s(iN);qPo=r(Iot,"TapasForQuestionAnswering"),Iot.forEach(t),GPo=r(WAe," (TAPAS model)"),WAe.forEach(t),Pot.forEach(t),OPo=i(Jt),X3=n(Jt,"P",{});var QAe=s(X3);XPo=r(QAe,"The model is set in evaluation mode by default using "),Ile=n(QAe,"CODE",{});var jot=s(Ile);VPo=r(jot,"model.eval()"),jot.forEach(t),zPo=r(QAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jle=n(QAe,"CODE",{});var Dot=s(jle);WPo=r(Dot,"model.train()"),Dot.forEach(t),QAe.forEach(t),QPo=i(Jt),Dle=n(Jt,"P",{});var Not=s(Dle);HPo=r(Not,"Examples:"),Not.forEach(t),UPo=i(Jt),m(Ky.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),Zxe=i(c),xd=n(c,"H2",{class:!0});var iSe=s(xd);V3=n(iSe,"A",{id:!0,class:!0,href:!0});var qot=s(V3);Nle=n(qot,"SPAN",{});var Got=s(Nle);m(Zy.$$.fragment,Got),Got.forEach(t),qot.forEach(t),JPo=i(iSe),qle=n(iSe,"SPAN",{});var Oot=s(qle);YPo=r(Oot,"AutoModelForImageClassification"),Oot.forEach(t),iSe.forEach(t),eke=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(ew.$$.fragment,pl),KPo=i(pl),kd=n(pl,"P",{});var Zz=s(kd);ZPo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gle=n(Zz,"CODE",{});var Xot=s(Gle);e$o=r(Xot,"from_pretrained()"),Xot.forEach(t),o$o=r(Zz,"class method or the "),Ole=n(Zz,"CODE",{});var Vot=s(Ole);r$o=r(Vot,"from_config()"),Vot.forEach(t),t$o=r(Zz,`class
method.`),Zz.forEach(t),a$o=i(pl),ow=n(pl,"P",{});var dSe=s(ow);n$o=r(dSe,"This class cannot be instantiated directly using "),Xle=n(dSe,"CODE",{});var zot=s(Xle);s$o=r(zot,"__init__()"),zot.forEach(t),l$o=r(dSe," (throws an error)."),dSe.forEach(t),i$o=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(rw.$$.fragment,_l),d$o=i(_l),Vle=n(_l,"P",{});var Wot=s(Vle);c$o=r(Wot,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wot.forEach(t),f$o=i(_l),Rd=n(_l,"P",{});var eW=s(Rd);m$o=r(eW,`Note:
Loading a model from its configuration file does `),zle=n(eW,"STRONG",{});var Qot=s(zle);g$o=r(Qot,"not"),Qot.forEach(t),h$o=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wle=n(eW,"CODE",{});var Hot=s(Wle);p$o=r(Hot,"from_pretrained()"),Hot.forEach(t),_$o=r(eW,"to load the model weights."),eW.forEach(t),u$o=i(_l),Qle=n(_l,"P",{});var Uot=s(Qle);b$o=r(Uot,"Examples:"),Uot.forEach(t),v$o=i(_l),m(tw.$$.fragment,_l),_l.forEach(t),T$o=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(aw.$$.fragment,Yt),F$o=i(Yt),Hle=n(Yt,"P",{});var Jot=s(Hle);C$o=r(Jot,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jot.forEach(t),M$o=i(Yt),on=n(Yt,"P",{});var f4=s(on);E$o=r(f4,"The model class to instantiate is selected based on the "),Ule=n(f4,"CODE",{});var Yot=s(Ule);y$o=r(Yot,"model_type"),Yot.forEach(t),w$o=r(f4,` property of the config object (either
passed as an argument or loaded from `),Jle=n(f4,"CODE",{});var Kot=s(Jle);A$o=r(Kot,"pretrained_model_name_or_path"),Kot.forEach(t),L$o=r(f4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=n(f4,"CODE",{});var Zot=s(Yle);B$o=r(Zot,"pretrained_model_name_or_path"),Zot.forEach(t),x$o=r(f4,":"),f4.forEach(t),k$o=i(Yt),Ce=n(Yt,"UL",{});var so=s(Ce);z3=n(so,"LI",{});var HAe=s(z3);Kle=n(HAe,"STRONG",{});var ert=s(Kle);R$o=r(ert,"beit"),ert.forEach(t),S$o=r(HAe," \u2014 "),dN=n(HAe,"A",{href:!0});var ort=s(dN);P$o=r(ort,"BeitForImageClassification"),ort.forEach(t),$$o=r(HAe," (BEiT model)"),HAe.forEach(t),I$o=i(so),W3=n(so,"LI",{});var UAe=s(W3);Zle=n(UAe,"STRONG",{});var rrt=s(Zle);j$o=r(rrt,"convnext"),rrt.forEach(t),D$o=r(UAe," \u2014 "),cN=n(UAe,"A",{href:!0});var trt=s(cN);N$o=r(trt,"ConvNextForImageClassification"),trt.forEach(t),q$o=r(UAe," (ConvNext model)"),UAe.forEach(t),G$o=i(so),qs=n(so,"LI",{});var G8=s(qs);eie=n(G8,"STRONG",{});var art=s(eie);O$o=r(art,"deit"),art.forEach(t),X$o=r(G8," \u2014 "),fN=n(G8,"A",{href:!0});var nrt=s(fN);V$o=r(nrt,"DeiTForImageClassification"),nrt.forEach(t),z$o=r(G8," or "),mN=n(G8,"A",{href:!0});var srt=s(mN);W$o=r(srt,"DeiTForImageClassificationWithTeacher"),srt.forEach(t),Q$o=r(G8," (DeiT model)"),G8.forEach(t),H$o=i(so),Q3=n(so,"LI",{});var JAe=s(Q3);oie=n(JAe,"STRONG",{});var lrt=s(oie);U$o=r(lrt,"imagegpt"),lrt.forEach(t),J$o=r(JAe," \u2014 "),gN=n(JAe,"A",{href:!0});var irt=s(gN);Y$o=r(irt,"ImageGPTForImageClassification"),irt.forEach(t),K$o=r(JAe," (ImageGPT model)"),JAe.forEach(t),Z$o=i(so),ma=n(so,"LI",{});var $f=s(ma);rie=n($f,"STRONG",{});var drt=s(rie);eIo=r(drt,"perceiver"),drt.forEach(t),oIo=r($f," \u2014 "),hN=n($f,"A",{href:!0});var crt=s(hN);rIo=r(crt,"PerceiverForImageClassificationLearned"),crt.forEach(t),tIo=r($f," or "),pN=n($f,"A",{href:!0});var frt=s(pN);aIo=r(frt,"PerceiverForImageClassificationFourier"),frt.forEach(t),nIo=r($f," or "),_N=n($f,"A",{href:!0});var mrt=s(_N);sIo=r(mrt,"PerceiverForImageClassificationConvProcessing"),mrt.forEach(t),lIo=r($f," (Perceiver model)"),$f.forEach(t),iIo=i(so),H3=n(so,"LI",{});var YAe=s(H3);tie=n(YAe,"STRONG",{});var grt=s(tie);dIo=r(grt,"poolformer"),grt.forEach(t),cIo=r(YAe," \u2014 "),uN=n(YAe,"A",{href:!0});var hrt=s(uN);fIo=r(hrt,"PoolFormerForImageClassification"),hrt.forEach(t),mIo=r(YAe," (PoolFormer model)"),YAe.forEach(t),gIo=i(so),U3=n(so,"LI",{});var KAe=s(U3);aie=n(KAe,"STRONG",{});var prt=s(aie);hIo=r(prt,"segformer"),prt.forEach(t),pIo=r(KAe," \u2014 "),bN=n(KAe,"A",{href:!0});var _rt=s(bN);_Io=r(_rt,"SegformerForImageClassification"),_rt.forEach(t),uIo=r(KAe," (SegFormer model)"),KAe.forEach(t),bIo=i(so),J3=n(so,"LI",{});var ZAe=s(J3);nie=n(ZAe,"STRONG",{});var urt=s(nie);vIo=r(urt,"swin"),urt.forEach(t),TIo=r(ZAe," \u2014 "),vN=n(ZAe,"A",{href:!0});var brt=s(vN);FIo=r(brt,"SwinForImageClassification"),brt.forEach(t),CIo=r(ZAe," (Swin model)"),ZAe.forEach(t),MIo=i(so),Y3=n(so,"LI",{});var e0e=s(Y3);sie=n(e0e,"STRONG",{});var vrt=s(sie);EIo=r(vrt,"vit"),vrt.forEach(t),yIo=r(e0e," \u2014 "),TN=n(e0e,"A",{href:!0});var Trt=s(TN);wIo=r(Trt,"ViTForImageClassification"),Trt.forEach(t),AIo=r(e0e," (ViT model)"),e0e.forEach(t),so.forEach(t),LIo=i(Yt),K3=n(Yt,"P",{});var o0e=s(K3);BIo=r(o0e,"The model is set in evaluation mode by default using "),lie=n(o0e,"CODE",{});var Frt=s(lie);xIo=r(Frt,"model.eval()"),Frt.forEach(t),kIo=r(o0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iie=n(o0e,"CODE",{});var Crt=s(iie);RIo=r(Crt,"model.train()"),Crt.forEach(t),o0e.forEach(t),SIo=i(Yt),die=n(Yt,"P",{});var Mrt=s(die);PIo=r(Mrt,"Examples:"),Mrt.forEach(t),$Io=i(Yt),m(nw.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),oke=i(c),Sd=n(c,"H2",{class:!0});var cSe=s(Sd);Z3=n(cSe,"A",{id:!0,class:!0,href:!0});var Ert=s(Z3);cie=n(Ert,"SPAN",{});var yrt=s(cie);m(sw.$$.fragment,yrt),yrt.forEach(t),Ert.forEach(t),IIo=i(cSe),fie=n(cSe,"SPAN",{});var wrt=s(fie);jIo=r(wrt,"AutoModelForVision2Seq"),wrt.forEach(t),cSe.forEach(t),rke=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(lw.$$.fragment,ul),DIo=i(ul),Pd=n(ul,"P",{});var oW=s(Pd);NIo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mie=n(oW,"CODE",{});var Art=s(mie);qIo=r(Art,"from_pretrained()"),Art.forEach(t),GIo=r(oW,"class method or the "),gie=n(oW,"CODE",{});var Lrt=s(gie);OIo=r(Lrt,"from_config()"),Lrt.forEach(t),XIo=r(oW,`class
method.`),oW.forEach(t),VIo=i(ul),iw=n(ul,"P",{});var fSe=s(iw);zIo=r(fSe,"This class cannot be instantiated directly using "),hie=n(fSe,"CODE",{});var Brt=s(hie);WIo=r(Brt,"__init__()"),Brt.forEach(t),QIo=r(fSe," (throws an error)."),fSe.forEach(t),HIo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(dw.$$.fragment,bl),UIo=i(bl),pie=n(bl,"P",{});var xrt=s(pie);JIo=r(xrt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xrt.forEach(t),YIo=i(bl),$d=n(bl,"P",{});var rW=s($d);KIo=r(rW,`Note:
Loading a model from its configuration file does `),_ie=n(rW,"STRONG",{});var krt=s(_ie);ZIo=r(krt,"not"),krt.forEach(t),ejo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),uie=n(rW,"CODE",{});var Rrt=s(uie);ojo=r(Rrt,"from_pretrained()"),Rrt.forEach(t),rjo=r(rW,"to load the model weights."),rW.forEach(t),tjo=i(bl),bie=n(bl,"P",{});var Srt=s(bie);ajo=r(Srt,"Examples:"),Srt.forEach(t),njo=i(bl),m(cw.$$.fragment,bl),bl.forEach(t),sjo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(fw.$$.fragment,Kt),ljo=i(Kt),vie=n(Kt,"P",{});var Prt=s(vie);ijo=r(Prt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Prt.forEach(t),djo=i(Kt),rn=n(Kt,"P",{});var m4=s(rn);cjo=r(m4,"The model class to instantiate is selected based on the "),Tie=n(m4,"CODE",{});var $rt=s(Tie);fjo=r($rt,"model_type"),$rt.forEach(t),mjo=r(m4,` property of the config object (either
passed as an argument or loaded from `),Fie=n(m4,"CODE",{});var Irt=s(Fie);gjo=r(Irt,"pretrained_model_name_or_path"),Irt.forEach(t),hjo=r(m4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cie=n(m4,"CODE",{});var jrt=s(Cie);pjo=r(jrt,"pretrained_model_name_or_path"),jrt.forEach(t),_jo=r(m4,":"),m4.forEach(t),ujo=i(Kt),Mie=n(Kt,"UL",{});var Drt=s(Mie);e5=n(Drt,"LI",{});var r0e=s(e5);Eie=n(r0e,"STRONG",{});var Nrt=s(Eie);bjo=r(Nrt,"vision-encoder-decoder"),Nrt.forEach(t),vjo=r(r0e," \u2014 "),FN=n(r0e,"A",{href:!0});var qrt=s(FN);Tjo=r(qrt,"VisionEncoderDecoderModel"),qrt.forEach(t),Fjo=r(r0e," (Vision Encoder decoder model)"),r0e.forEach(t),Drt.forEach(t),Cjo=i(Kt),o5=n(Kt,"P",{});var t0e=s(o5);Mjo=r(t0e,"The model is set in evaluation mode by default using "),yie=n(t0e,"CODE",{});var Grt=s(yie);Ejo=r(Grt,"model.eval()"),Grt.forEach(t),yjo=r(t0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wie=n(t0e,"CODE",{});var Ort=s(wie);wjo=r(Ort,"model.train()"),Ort.forEach(t),t0e.forEach(t),Ajo=i(Kt),Aie=n(Kt,"P",{});var Xrt=s(Aie);Ljo=r(Xrt,"Examples:"),Xrt.forEach(t),Bjo=i(Kt),m(mw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),tke=i(c),Id=n(c,"H2",{class:!0});var mSe=s(Id);r5=n(mSe,"A",{id:!0,class:!0,href:!0});var Vrt=s(r5);Lie=n(Vrt,"SPAN",{});var zrt=s(Lie);m(gw.$$.fragment,zrt),zrt.forEach(t),Vrt.forEach(t),xjo=i(mSe),Bie=n(mSe,"SPAN",{});var Wrt=s(Bie);kjo=r(Wrt,"AutoModelForAudioClassification"),Wrt.forEach(t),mSe.forEach(t),ake=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(hw.$$.fragment,vl),Rjo=i(vl),jd=n(vl,"P",{});var tW=s(jd);Sjo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),xie=n(tW,"CODE",{});var Qrt=s(xie);Pjo=r(Qrt,"from_pretrained()"),Qrt.forEach(t),$jo=r(tW,"class method or the "),kie=n(tW,"CODE",{});var Hrt=s(kie);Ijo=r(Hrt,"from_config()"),Hrt.forEach(t),jjo=r(tW,`class
method.`),tW.forEach(t),Djo=i(vl),pw=n(vl,"P",{});var gSe=s(pw);Njo=r(gSe,"This class cannot be instantiated directly using "),Rie=n(gSe,"CODE",{});var Urt=s(Rie);qjo=r(Urt,"__init__()"),Urt.forEach(t),Gjo=r(gSe," (throws an error)."),gSe.forEach(t),Ojo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(_w.$$.fragment,Tl),Xjo=i(Tl),Sie=n(Tl,"P",{});var Jrt=s(Sie);Vjo=r(Jrt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Jrt.forEach(t),zjo=i(Tl),Dd=n(Tl,"P",{});var aW=s(Dd);Wjo=r(aW,`Note:
Loading a model from its configuration file does `),Pie=n(aW,"STRONG",{});var Yrt=s(Pie);Qjo=r(Yrt,"not"),Yrt.forEach(t),Hjo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ie=n(aW,"CODE",{});var Krt=s($ie);Ujo=r(Krt,"from_pretrained()"),Krt.forEach(t),Jjo=r(aW,"to load the model weights."),aW.forEach(t),Yjo=i(Tl),Iie=n(Tl,"P",{});var Zrt=s(Iie);Kjo=r(Zrt,"Examples:"),Zrt.forEach(t),Zjo=i(Tl),m(uw.$$.fragment,Tl),Tl.forEach(t),eDo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(bw.$$.fragment,Zt),oDo=i(Zt),jie=n(Zt,"P",{});var ett=s(jie);rDo=r(ett,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ett.forEach(t),tDo=i(Zt),tn=n(Zt,"P",{});var g4=s(tn);aDo=r(g4,"The model class to instantiate is selected based on the "),Die=n(g4,"CODE",{});var ott=s(Die);nDo=r(ott,"model_type"),ott.forEach(t),sDo=r(g4,` property of the config object (either
passed as an argument or loaded from `),Nie=n(g4,"CODE",{});var rtt=s(Nie);lDo=r(rtt,"pretrained_model_name_or_path"),rtt.forEach(t),iDo=r(g4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=n(g4,"CODE",{});var ttt=s(qie);dDo=r(ttt,"pretrained_model_name_or_path"),ttt.forEach(t),cDo=r(g4,":"),g4.forEach(t),fDo=i(Zt),xe=n(Zt,"UL",{});var qo=s(xe);t5=n(qo,"LI",{});var a0e=s(t5);Gie=n(a0e,"STRONG",{});var att=s(Gie);mDo=r(att,"data2vec-audio"),att.forEach(t),gDo=r(a0e," \u2014 "),CN=n(a0e,"A",{href:!0});var ntt=s(CN);hDo=r(ntt,"Data2VecAudioForSequenceClassification"),ntt.forEach(t),pDo=r(a0e," (Data2VecAudio model)"),a0e.forEach(t),_Do=i(qo),a5=n(qo,"LI",{});var n0e=s(a5);Oie=n(n0e,"STRONG",{});var stt=s(Oie);uDo=r(stt,"hubert"),stt.forEach(t),bDo=r(n0e," \u2014 "),MN=n(n0e,"A",{href:!0});var ltt=s(MN);vDo=r(ltt,"HubertForSequenceClassification"),ltt.forEach(t),TDo=r(n0e," (Hubert model)"),n0e.forEach(t),FDo=i(qo),n5=n(qo,"LI",{});var s0e=s(n5);Xie=n(s0e,"STRONG",{});var itt=s(Xie);CDo=r(itt,"sew"),itt.forEach(t),MDo=r(s0e," \u2014 "),EN=n(s0e,"A",{href:!0});var dtt=s(EN);EDo=r(dtt,"SEWForSequenceClassification"),dtt.forEach(t),yDo=r(s0e," (SEW model)"),s0e.forEach(t),wDo=i(qo),s5=n(qo,"LI",{});var l0e=s(s5);Vie=n(l0e,"STRONG",{});var ctt=s(Vie);ADo=r(ctt,"sew-d"),ctt.forEach(t),LDo=r(l0e," \u2014 "),yN=n(l0e,"A",{href:!0});var ftt=s(yN);BDo=r(ftt,"SEWDForSequenceClassification"),ftt.forEach(t),xDo=r(l0e," (SEW-D model)"),l0e.forEach(t),kDo=i(qo),l5=n(qo,"LI",{});var i0e=s(l5);zie=n(i0e,"STRONG",{});var mtt=s(zie);RDo=r(mtt,"unispeech"),mtt.forEach(t),SDo=r(i0e," \u2014 "),wN=n(i0e,"A",{href:!0});var gtt=s(wN);PDo=r(gtt,"UniSpeechForSequenceClassification"),gtt.forEach(t),$Do=r(i0e," (UniSpeech model)"),i0e.forEach(t),IDo=i(qo),i5=n(qo,"LI",{});var d0e=s(i5);Wie=n(d0e,"STRONG",{});var htt=s(Wie);jDo=r(htt,"unispeech-sat"),htt.forEach(t),DDo=r(d0e," \u2014 "),AN=n(d0e,"A",{href:!0});var ptt=s(AN);NDo=r(ptt,"UniSpeechSatForSequenceClassification"),ptt.forEach(t),qDo=r(d0e," (UniSpeechSat model)"),d0e.forEach(t),GDo=i(qo),d5=n(qo,"LI",{});var c0e=s(d5);Qie=n(c0e,"STRONG",{});var _tt=s(Qie);ODo=r(_tt,"wav2vec2"),_tt.forEach(t),XDo=r(c0e," \u2014 "),LN=n(c0e,"A",{href:!0});var utt=s(LN);VDo=r(utt,"Wav2Vec2ForSequenceClassification"),utt.forEach(t),zDo=r(c0e," (Wav2Vec2 model)"),c0e.forEach(t),WDo=i(qo),c5=n(qo,"LI",{});var f0e=s(c5);Hie=n(f0e,"STRONG",{});var btt=s(Hie);QDo=r(btt,"wavlm"),btt.forEach(t),HDo=r(f0e," \u2014 "),BN=n(f0e,"A",{href:!0});var vtt=s(BN);UDo=r(vtt,"WavLMForSequenceClassification"),vtt.forEach(t),JDo=r(f0e," (WavLM model)"),f0e.forEach(t),qo.forEach(t),YDo=i(Zt),f5=n(Zt,"P",{});var m0e=s(f5);KDo=r(m0e,"The model is set in evaluation mode by default using "),Uie=n(m0e,"CODE",{});var Ttt=s(Uie);ZDo=r(Ttt,"model.eval()"),Ttt.forEach(t),eNo=r(m0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=n(m0e,"CODE",{});var Ftt=s(Jie);oNo=r(Ftt,"model.train()"),Ftt.forEach(t),m0e.forEach(t),rNo=i(Zt),Yie=n(Zt,"P",{});var Ctt=s(Yie);tNo=r(Ctt,"Examples:"),Ctt.forEach(t),aNo=i(Zt),m(vw.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),nke=i(c),Nd=n(c,"H2",{class:!0});var hSe=s(Nd);m5=n(hSe,"A",{id:!0,class:!0,href:!0});var Mtt=s(m5);Kie=n(Mtt,"SPAN",{});var Ett=s(Kie);m(Tw.$$.fragment,Ett),Ett.forEach(t),Mtt.forEach(t),nNo=i(hSe),Zie=n(hSe,"SPAN",{});var ytt=s(Zie);sNo=r(ytt,"AutoModelForAudioFrameClassification"),ytt.forEach(t),hSe.forEach(t),ske=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(Fw.$$.fragment,Fl),lNo=i(Fl),qd=n(Fl,"P",{});var nW=s(qd);iNo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ede=n(nW,"CODE",{});var wtt=s(ede);dNo=r(wtt,"from_pretrained()"),wtt.forEach(t),cNo=r(nW,"class method or the "),ode=n(nW,"CODE",{});var Att=s(ode);fNo=r(Att,"from_config()"),Att.forEach(t),mNo=r(nW,`class
method.`),nW.forEach(t),gNo=i(Fl),Cw=n(Fl,"P",{});var pSe=s(Cw);hNo=r(pSe,"This class cannot be instantiated directly using "),rde=n(pSe,"CODE",{});var Ltt=s(rde);pNo=r(Ltt,"__init__()"),Ltt.forEach(t),_No=r(pSe," (throws an error)."),pSe.forEach(t),uNo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(Mw.$$.fragment,Cl),bNo=i(Cl),tde=n(Cl,"P",{});var Btt=s(tde);vNo=r(Btt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Btt.forEach(t),TNo=i(Cl),Gd=n(Cl,"P",{});var sW=s(Gd);FNo=r(sW,`Note:
Loading a model from its configuration file does `),ade=n(sW,"STRONG",{});var xtt=s(ade);CNo=r(xtt,"not"),xtt.forEach(t),MNo=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=n(sW,"CODE",{});var ktt=s(nde);ENo=r(ktt,"from_pretrained()"),ktt.forEach(t),yNo=r(sW,"to load the model weights."),sW.forEach(t),wNo=i(Cl),sde=n(Cl,"P",{});var Rtt=s(sde);ANo=r(Rtt,"Examples:"),Rtt.forEach(t),LNo=i(Cl),m(Ew.$$.fragment,Cl),Cl.forEach(t),BNo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);m(yw.$$.fragment,ea),xNo=i(ea),lde=n(ea,"P",{});var Stt=s(lde);kNo=r(Stt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Stt.forEach(t),RNo=i(ea),an=n(ea,"P",{});var h4=s(an);SNo=r(h4,"The model class to instantiate is selected based on the "),ide=n(h4,"CODE",{});var Ptt=s(ide);PNo=r(Ptt,"model_type"),Ptt.forEach(t),$No=r(h4,` property of the config object (either
passed as an argument or loaded from `),dde=n(h4,"CODE",{});var $tt=s(dde);INo=r($tt,"pretrained_model_name_or_path"),$tt.forEach(t),jNo=r(h4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=n(h4,"CODE",{});var Itt=s(cde);DNo=r(Itt,"pretrained_model_name_or_path"),Itt.forEach(t),NNo=r(h4,":"),h4.forEach(t),qNo=i(ea),nn=n(ea,"UL",{});var p4=s(nn);g5=n(p4,"LI",{});var g0e=s(g5);fde=n(g0e,"STRONG",{});var jtt=s(fde);GNo=r(jtt,"data2vec-audio"),jtt.forEach(t),ONo=r(g0e," \u2014 "),xN=n(g0e,"A",{href:!0});var Dtt=s(xN);XNo=r(Dtt,"Data2VecAudioForAudioFrameClassification"),Dtt.forEach(t),VNo=r(g0e," (Data2VecAudio model)"),g0e.forEach(t),zNo=i(p4),h5=n(p4,"LI",{});var h0e=s(h5);mde=n(h0e,"STRONG",{});var Ntt=s(mde);WNo=r(Ntt,"unispeech-sat"),Ntt.forEach(t),QNo=r(h0e," \u2014 "),kN=n(h0e,"A",{href:!0});var qtt=s(kN);HNo=r(qtt,"UniSpeechSatForAudioFrameClassification"),qtt.forEach(t),UNo=r(h0e," (UniSpeechSat model)"),h0e.forEach(t),JNo=i(p4),p5=n(p4,"LI",{});var p0e=s(p5);gde=n(p0e,"STRONG",{});var Gtt=s(gde);YNo=r(Gtt,"wav2vec2"),Gtt.forEach(t),KNo=r(p0e," \u2014 "),RN=n(p0e,"A",{href:!0});var Ott=s(RN);ZNo=r(Ott,"Wav2Vec2ForAudioFrameClassification"),Ott.forEach(t),eqo=r(p0e," (Wav2Vec2 model)"),p0e.forEach(t),oqo=i(p4),_5=n(p4,"LI",{});var _0e=s(_5);hde=n(_0e,"STRONG",{});var Xtt=s(hde);rqo=r(Xtt,"wavlm"),Xtt.forEach(t),tqo=r(_0e," \u2014 "),SN=n(_0e,"A",{href:!0});var Vtt=s(SN);aqo=r(Vtt,"WavLMForAudioFrameClassification"),Vtt.forEach(t),nqo=r(_0e," (WavLM model)"),_0e.forEach(t),p4.forEach(t),sqo=i(ea),u5=n(ea,"P",{});var u0e=s(u5);lqo=r(u0e,"The model is set in evaluation mode by default using "),pde=n(u0e,"CODE",{});var ztt=s(pde);iqo=r(ztt,"model.eval()"),ztt.forEach(t),dqo=r(u0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=n(u0e,"CODE",{});var Wtt=s(_de);cqo=r(Wtt,"model.train()"),Wtt.forEach(t),u0e.forEach(t),fqo=i(ea),ude=n(ea,"P",{});var Qtt=s(ude);mqo=r(Qtt,"Examples:"),Qtt.forEach(t),gqo=i(ea),m(ww.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),lke=i(c),Od=n(c,"H2",{class:!0});var _Se=s(Od);b5=n(_Se,"A",{id:!0,class:!0,href:!0});var Htt=s(b5);bde=n(Htt,"SPAN",{});var Utt=s(bde);m(Aw.$$.fragment,Utt),Utt.forEach(t),Htt.forEach(t),hqo=i(_Se),vde=n(_Se,"SPAN",{});var Jtt=s(vde);pqo=r(Jtt,"AutoModelForCTC"),Jtt.forEach(t),_Se.forEach(t),ike=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(Lw.$$.fragment,Ml),_qo=i(Ml),Xd=n(Ml,"P",{});var lW=s(Xd);uqo=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Tde=n(lW,"CODE",{});var Ytt=s(Tde);bqo=r(Ytt,"from_pretrained()"),Ytt.forEach(t),vqo=r(lW,"class method or the "),Fde=n(lW,"CODE",{});var Ktt=s(Fde);Tqo=r(Ktt,"from_config()"),Ktt.forEach(t),Fqo=r(lW,`class
method.`),lW.forEach(t),Cqo=i(Ml),Bw=n(Ml,"P",{});var uSe=s(Bw);Mqo=r(uSe,"This class cannot be instantiated directly using "),Cde=n(uSe,"CODE",{});var Ztt=s(Cde);Eqo=r(Ztt,"__init__()"),Ztt.forEach(t),yqo=r(uSe," (throws an error)."),uSe.forEach(t),wqo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(xw.$$.fragment,El),Aqo=i(El),Mde=n(El,"P",{});var eat=s(Mde);Lqo=r(eat,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),eat.forEach(t),Bqo=i(El),Vd=n(El,"P",{});var iW=s(Vd);xqo=r(iW,`Note:
Loading a model from its configuration file does `),Ede=n(iW,"STRONG",{});var oat=s(Ede);kqo=r(oat,"not"),oat.forEach(t),Rqo=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yde=n(iW,"CODE",{});var rat=s(yde);Sqo=r(rat,"from_pretrained()"),rat.forEach(t),Pqo=r(iW,"to load the model weights."),iW.forEach(t),$qo=i(El),wde=n(El,"P",{});var tat=s(wde);Iqo=r(tat,"Examples:"),tat.forEach(t),jqo=i(El),m(kw.$$.fragment,El),El.forEach(t),Dqo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);m(Rw.$$.fragment,oa),Nqo=i(oa),Ade=n(oa,"P",{});var aat=s(Ade);qqo=r(aat,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),aat.forEach(t),Gqo=i(oa),sn=n(oa,"P",{});var _4=s(sn);Oqo=r(_4,"The model class to instantiate is selected based on the "),Lde=n(_4,"CODE",{});var nat=s(Lde);Xqo=r(nat,"model_type"),nat.forEach(t),Vqo=r(_4,` property of the config object (either
passed as an argument or loaded from `),Bde=n(_4,"CODE",{});var sat=s(Bde);zqo=r(sat,"pretrained_model_name_or_path"),sat.forEach(t),Wqo=r(_4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=n(_4,"CODE",{});var lat=s(xde);Qqo=r(lat,"pretrained_model_name_or_path"),lat.forEach(t),Hqo=r(_4,":"),_4.forEach(t),Uqo=i(oa),ke=n(oa,"UL",{});var Go=s(ke);v5=n(Go,"LI",{});var b0e=s(v5);kde=n(b0e,"STRONG",{});var iat=s(kde);Jqo=r(iat,"data2vec-audio"),iat.forEach(t),Yqo=r(b0e," \u2014 "),PN=n(b0e,"A",{href:!0});var dat=s(PN);Kqo=r(dat,"Data2VecAudioForCTC"),dat.forEach(t),Zqo=r(b0e," (Data2VecAudio model)"),b0e.forEach(t),eGo=i(Go),T5=n(Go,"LI",{});var v0e=s(T5);Rde=n(v0e,"STRONG",{});var cat=s(Rde);oGo=r(cat,"hubert"),cat.forEach(t),rGo=r(v0e," \u2014 "),$N=n(v0e,"A",{href:!0});var fat=s($N);tGo=r(fat,"HubertForCTC"),fat.forEach(t),aGo=r(v0e," (Hubert model)"),v0e.forEach(t),nGo=i(Go),F5=n(Go,"LI",{});var T0e=s(F5);Sde=n(T0e,"STRONG",{});var mat=s(Sde);sGo=r(mat,"sew"),mat.forEach(t),lGo=r(T0e," \u2014 "),IN=n(T0e,"A",{href:!0});var gat=s(IN);iGo=r(gat,"SEWForCTC"),gat.forEach(t),dGo=r(T0e," (SEW model)"),T0e.forEach(t),cGo=i(Go),C5=n(Go,"LI",{});var F0e=s(C5);Pde=n(F0e,"STRONG",{});var hat=s(Pde);fGo=r(hat,"sew-d"),hat.forEach(t),mGo=r(F0e," \u2014 "),jN=n(F0e,"A",{href:!0});var pat=s(jN);gGo=r(pat,"SEWDForCTC"),pat.forEach(t),hGo=r(F0e," (SEW-D model)"),F0e.forEach(t),pGo=i(Go),M5=n(Go,"LI",{});var C0e=s(M5);$de=n(C0e,"STRONG",{});var _at=s($de);_Go=r(_at,"unispeech"),_at.forEach(t),uGo=r(C0e," \u2014 "),DN=n(C0e,"A",{href:!0});var uat=s(DN);bGo=r(uat,"UniSpeechForCTC"),uat.forEach(t),vGo=r(C0e," (UniSpeech model)"),C0e.forEach(t),TGo=i(Go),E5=n(Go,"LI",{});var M0e=s(E5);Ide=n(M0e,"STRONG",{});var bat=s(Ide);FGo=r(bat,"unispeech-sat"),bat.forEach(t),CGo=r(M0e," \u2014 "),NN=n(M0e,"A",{href:!0});var vat=s(NN);MGo=r(vat,"UniSpeechSatForCTC"),vat.forEach(t),EGo=r(M0e," (UniSpeechSat model)"),M0e.forEach(t),yGo=i(Go),y5=n(Go,"LI",{});var E0e=s(y5);jde=n(E0e,"STRONG",{});var Tat=s(jde);wGo=r(Tat,"wav2vec2"),Tat.forEach(t),AGo=r(E0e," \u2014 "),qN=n(E0e,"A",{href:!0});var Fat=s(qN);LGo=r(Fat,"Wav2Vec2ForCTC"),Fat.forEach(t),BGo=r(E0e," (Wav2Vec2 model)"),E0e.forEach(t),xGo=i(Go),w5=n(Go,"LI",{});var y0e=s(w5);Dde=n(y0e,"STRONG",{});var Cat=s(Dde);kGo=r(Cat,"wavlm"),Cat.forEach(t),RGo=r(y0e," \u2014 "),GN=n(y0e,"A",{href:!0});var Mat=s(GN);SGo=r(Mat,"WavLMForCTC"),Mat.forEach(t),PGo=r(y0e," (WavLM model)"),y0e.forEach(t),Go.forEach(t),$Go=i(oa),A5=n(oa,"P",{});var w0e=s(A5);IGo=r(w0e,"The model is set in evaluation mode by default using "),Nde=n(w0e,"CODE",{});var Eat=s(Nde);jGo=r(Eat,"model.eval()"),Eat.forEach(t),DGo=r(w0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=n(w0e,"CODE",{});var yat=s(qde);NGo=r(yat,"model.train()"),yat.forEach(t),w0e.forEach(t),qGo=i(oa),Gde=n(oa,"P",{});var wat=s(Gde);GGo=r(wat,"Examples:"),wat.forEach(t),OGo=i(oa),m(Sw.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),dke=i(c),zd=n(c,"H2",{class:!0});var bSe=s(zd);L5=n(bSe,"A",{id:!0,class:!0,href:!0});var Aat=s(L5);Ode=n(Aat,"SPAN",{});var Lat=s(Ode);m(Pw.$$.fragment,Lat),Lat.forEach(t),Aat.forEach(t),XGo=i(bSe),Xde=n(bSe,"SPAN",{});var Bat=s(Xde);VGo=r(Bat,"AutoModelForSpeechSeq2Seq"),Bat.forEach(t),bSe.forEach(t),cke=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m($w.$$.fragment,yl),zGo=i(yl),Wd=n(yl,"P",{});var dW=s(Wd);WGo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Vde=n(dW,"CODE",{});var xat=s(Vde);QGo=r(xat,"from_pretrained()"),xat.forEach(t),HGo=r(dW,"class method or the "),zde=n(dW,"CODE",{});var kat=s(zde);UGo=r(kat,"from_config()"),kat.forEach(t),JGo=r(dW,`class
method.`),dW.forEach(t),YGo=i(yl),Iw=n(yl,"P",{});var vSe=s(Iw);KGo=r(vSe,"This class cannot be instantiated directly using "),Wde=n(vSe,"CODE",{});var Rat=s(Wde);ZGo=r(Rat,"__init__()"),Rat.forEach(t),eOo=r(vSe," (throws an error)."),vSe.forEach(t),oOo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(jw.$$.fragment,wl),rOo=i(wl),Qde=n(wl,"P",{});var Sat=s(Qde);tOo=r(Sat,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Sat.forEach(t),aOo=i(wl),Qd=n(wl,"P",{});var cW=s(Qd);nOo=r(cW,`Note:
Loading a model from its configuration file does `),Hde=n(cW,"STRONG",{});var Pat=s(Hde);sOo=r(Pat,"not"),Pat.forEach(t),lOo=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ude=n(cW,"CODE",{});var $at=s(Ude);iOo=r($at,"from_pretrained()"),$at.forEach(t),dOo=r(cW,"to load the model weights."),cW.forEach(t),cOo=i(wl),Jde=n(wl,"P",{});var Iat=s(Jde);fOo=r(Iat,"Examples:"),Iat.forEach(t),mOo=i(wl),m(Dw.$$.fragment,wl),wl.forEach(t),gOo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(Nw.$$.fragment,ra),hOo=i(ra),Yde=n(ra,"P",{});var jat=s(Yde);pOo=r(jat,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jat.forEach(t),_Oo=i(ra),ln=n(ra,"P",{});var u4=s(ln);uOo=r(u4,"The model class to instantiate is selected based on the "),Kde=n(u4,"CODE",{});var Dat=s(Kde);bOo=r(Dat,"model_type"),Dat.forEach(t),vOo=r(u4,` property of the config object (either
passed as an argument or loaded from `),Zde=n(u4,"CODE",{});var Nat=s(Zde);TOo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),FOo=r(u4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=n(u4,"CODE",{});var qat=s(ece);COo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),MOo=r(u4,":"),u4.forEach(t),EOo=i(ra),qw=n(ra,"UL",{});var TSe=s(qw);B5=n(TSe,"LI",{});var A0e=s(B5);oce=n(A0e,"STRONG",{});var Gat=s(oce);yOo=r(Gat,"speech-encoder-decoder"),Gat.forEach(t),wOo=r(A0e," \u2014 "),ON=n(A0e,"A",{href:!0});var Oat=s(ON);AOo=r(Oat,"SpeechEncoderDecoderModel"),Oat.forEach(t),LOo=r(A0e," (Speech Encoder decoder model)"),A0e.forEach(t),BOo=i(TSe),x5=n(TSe,"LI",{});var L0e=s(x5);rce=n(L0e,"STRONG",{});var Xat=s(rce);xOo=r(Xat,"speech_to_text"),Xat.forEach(t),kOo=r(L0e," \u2014 "),XN=n(L0e,"A",{href:!0});var Vat=s(XN);ROo=r(Vat,"Speech2TextForConditionalGeneration"),Vat.forEach(t),SOo=r(L0e," (Speech2Text model)"),L0e.forEach(t),TSe.forEach(t),POo=i(ra),k5=n(ra,"P",{});var B0e=s(k5);$Oo=r(B0e,"The model is set in evaluation mode by default using "),tce=n(B0e,"CODE",{});var zat=s(tce);IOo=r(zat,"model.eval()"),zat.forEach(t),jOo=r(B0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ace=n(B0e,"CODE",{});var Wat=s(ace);DOo=r(Wat,"model.train()"),Wat.forEach(t),B0e.forEach(t),NOo=i(ra),nce=n(ra,"P",{});var Qat=s(nce);qOo=r(Qat,"Examples:"),Qat.forEach(t),GOo=i(ra),m(Gw.$$.fragment,ra),ra.forEach(t),yl.forEach(t),fke=i(c),Hd=n(c,"H2",{class:!0});var FSe=s(Hd);R5=n(FSe,"A",{id:!0,class:!0,href:!0});var Hat=s(R5);sce=n(Hat,"SPAN",{});var Uat=s(sce);m(Ow.$$.fragment,Uat),Uat.forEach(t),Hat.forEach(t),OOo=i(FSe),lce=n(FSe,"SPAN",{});var Jat=s(lce);XOo=r(Jat,"AutoModelForAudioXVector"),Jat.forEach(t),FSe.forEach(t),mke=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(Xw.$$.fragment,Al),VOo=i(Al),Ud=n(Al,"P",{});var fW=s(Ud);zOo=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ice=n(fW,"CODE",{});var Yat=s(ice);WOo=r(Yat,"from_pretrained()"),Yat.forEach(t),QOo=r(fW,"class method or the "),dce=n(fW,"CODE",{});var Kat=s(dce);HOo=r(Kat,"from_config()"),Kat.forEach(t),UOo=r(fW,`class
method.`),fW.forEach(t),JOo=i(Al),Vw=n(Al,"P",{});var CSe=s(Vw);YOo=r(CSe,"This class cannot be instantiated directly using "),cce=n(CSe,"CODE",{});var Zat=s(cce);KOo=r(Zat,"__init__()"),Zat.forEach(t),ZOo=r(CSe," (throws an error)."),CSe.forEach(t),eXo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(zw.$$.fragment,Ll),oXo=i(Ll),fce=n(Ll,"P",{});var ent=s(fce);rXo=r(ent,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ent.forEach(t),tXo=i(Ll),Jd=n(Ll,"P",{});var mW=s(Jd);aXo=r(mW,`Note:
Loading a model from its configuration file does `),mce=n(mW,"STRONG",{});var ont=s(mce);nXo=r(ont,"not"),ont.forEach(t),sXo=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gce=n(mW,"CODE",{});var rnt=s(gce);lXo=r(rnt,"from_pretrained()"),rnt.forEach(t),iXo=r(mW,"to load the model weights."),mW.forEach(t),dXo=i(Ll),hce=n(Ll,"P",{});var tnt=s(hce);cXo=r(tnt,"Examples:"),tnt.forEach(t),fXo=i(Ll),m(Ww.$$.fragment,Ll),Ll.forEach(t),mXo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);m(Qw.$$.fragment,ta),gXo=i(ta),pce=n(ta,"P",{});var ant=s(pce);hXo=r(ant,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ant.forEach(t),pXo=i(ta),dn=n(ta,"P",{});var b4=s(dn);_Xo=r(b4,"The model class to instantiate is selected based on the "),_ce=n(b4,"CODE",{});var nnt=s(_ce);uXo=r(nnt,"model_type"),nnt.forEach(t),bXo=r(b4,` property of the config object (either
passed as an argument or loaded from `),uce=n(b4,"CODE",{});var snt=s(uce);vXo=r(snt,"pretrained_model_name_or_path"),snt.forEach(t),TXo=r(b4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=n(b4,"CODE",{});var lnt=s(bce);FXo=r(lnt,"pretrained_model_name_or_path"),lnt.forEach(t),CXo=r(b4,":"),b4.forEach(t),MXo=i(ta),cn=n(ta,"UL",{});var v4=s(cn);S5=n(v4,"LI",{});var x0e=s(S5);vce=n(x0e,"STRONG",{});var int=s(vce);EXo=r(int,"data2vec-audio"),int.forEach(t),yXo=r(x0e," \u2014 "),VN=n(x0e,"A",{href:!0});var dnt=s(VN);wXo=r(dnt,"Data2VecAudioForXVector"),dnt.forEach(t),AXo=r(x0e," (Data2VecAudio model)"),x0e.forEach(t),LXo=i(v4),P5=n(v4,"LI",{});var k0e=s(P5);Tce=n(k0e,"STRONG",{});var cnt=s(Tce);BXo=r(cnt,"unispeech-sat"),cnt.forEach(t),xXo=r(k0e," \u2014 "),zN=n(k0e,"A",{href:!0});var fnt=s(zN);kXo=r(fnt,"UniSpeechSatForXVector"),fnt.forEach(t),RXo=r(k0e," (UniSpeechSat model)"),k0e.forEach(t),SXo=i(v4),$5=n(v4,"LI",{});var R0e=s($5);Fce=n(R0e,"STRONG",{});var mnt=s(Fce);PXo=r(mnt,"wav2vec2"),mnt.forEach(t),$Xo=r(R0e," \u2014 "),WN=n(R0e,"A",{href:!0});var gnt=s(WN);IXo=r(gnt,"Wav2Vec2ForXVector"),gnt.forEach(t),jXo=r(R0e," (Wav2Vec2 model)"),R0e.forEach(t),DXo=i(v4),I5=n(v4,"LI",{});var S0e=s(I5);Cce=n(S0e,"STRONG",{});var hnt=s(Cce);NXo=r(hnt,"wavlm"),hnt.forEach(t),qXo=r(S0e," \u2014 "),QN=n(S0e,"A",{href:!0});var pnt=s(QN);GXo=r(pnt,"WavLMForXVector"),pnt.forEach(t),OXo=r(S0e," (WavLM model)"),S0e.forEach(t),v4.forEach(t),XXo=i(ta),j5=n(ta,"P",{});var P0e=s(j5);VXo=r(P0e,"The model is set in evaluation mode by default using "),Mce=n(P0e,"CODE",{});var _nt=s(Mce);zXo=r(_nt,"model.eval()"),_nt.forEach(t),WXo=r(P0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=n(P0e,"CODE",{});var unt=s(Ece);QXo=r(unt,"model.train()"),unt.forEach(t),P0e.forEach(t),HXo=i(ta),yce=n(ta,"P",{});var bnt=s(yce);UXo=r(bnt,"Examples:"),bnt.forEach(t),JXo=i(ta),m(Hw.$$.fragment,ta),ta.forEach(t),Al.forEach(t),gke=i(c),Yd=n(c,"H2",{class:!0});var MSe=s(Yd);D5=n(MSe,"A",{id:!0,class:!0,href:!0});var vnt=s(D5);wce=n(vnt,"SPAN",{});var Tnt=s(wce);m(Uw.$$.fragment,Tnt),Tnt.forEach(t),vnt.forEach(t),YXo=i(MSe),Ace=n(MSe,"SPAN",{});var Fnt=s(Ace);KXo=r(Fnt,"AutoModelForMaskedImageModeling"),Fnt.forEach(t),MSe.forEach(t),hke=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(Jw.$$.fragment,Bl),ZXo=i(Bl),Kd=n(Bl,"P",{});var gW=s(Kd);eVo=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Lce=n(gW,"CODE",{});var Cnt=s(Lce);oVo=r(Cnt,"from_pretrained()"),Cnt.forEach(t),rVo=r(gW,"class method or the "),Bce=n(gW,"CODE",{});var Mnt=s(Bce);tVo=r(Mnt,"from_config()"),Mnt.forEach(t),aVo=r(gW,`class
method.`),gW.forEach(t),nVo=i(Bl),Yw=n(Bl,"P",{});var ESe=s(Yw);sVo=r(ESe,"This class cannot be instantiated directly using "),xce=n(ESe,"CODE",{});var Ent=s(xce);lVo=r(Ent,"__init__()"),Ent.forEach(t),iVo=r(ESe," (throws an error)."),ESe.forEach(t),dVo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(Kw.$$.fragment,xl),cVo=i(xl),kce=n(xl,"P",{});var ynt=s(kce);fVo=r(ynt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ynt.forEach(t),mVo=i(xl),Zd=n(xl,"P",{});var hW=s(Zd);gVo=r(hW,`Note:
Loading a model from its configuration file does `),Rce=n(hW,"STRONG",{});var wnt=s(Rce);hVo=r(wnt,"not"),wnt.forEach(t),pVo=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sce=n(hW,"CODE",{});var Ant=s(Sce);_Vo=r(Ant,"from_pretrained()"),Ant.forEach(t),uVo=r(hW,"to load the model weights."),hW.forEach(t),bVo=i(xl),Pce=n(xl,"P",{});var Lnt=s(Pce);vVo=r(Lnt,"Examples:"),Lnt.forEach(t),TVo=i(xl),m(Zw.$$.fragment,xl),xl.forEach(t),FVo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(eA.$$.fragment,aa),CVo=i(aa),$ce=n(aa,"P",{});var Bnt=s($ce);MVo=r(Bnt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Bnt.forEach(t),EVo=i(aa),fn=n(aa,"P",{});var T4=s(fn);yVo=r(T4,"The model class to instantiate is selected based on the "),Ice=n(T4,"CODE",{});var xnt=s(Ice);wVo=r(xnt,"model_type"),xnt.forEach(t),AVo=r(T4,` property of the config object (either
passed as an argument or loaded from `),jce=n(T4,"CODE",{});var knt=s(jce);LVo=r(knt,"pretrained_model_name_or_path"),knt.forEach(t),BVo=r(T4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=n(T4,"CODE",{});var Rnt=s(Dce);xVo=r(Rnt,"pretrained_model_name_or_path"),Rnt.forEach(t),kVo=r(T4,":"),T4.forEach(t),RVo=i(aa),ec=n(aa,"UL",{});var pW=s(ec);N5=n(pW,"LI",{});var $0e=s(N5);Nce=n($0e,"STRONG",{});var Snt=s(Nce);SVo=r(Snt,"deit"),Snt.forEach(t),PVo=r($0e," \u2014 "),HN=n($0e,"A",{href:!0});var Pnt=s(HN);$Vo=r(Pnt,"DeiTForMaskedImageModeling"),Pnt.forEach(t),IVo=r($0e," (DeiT model)"),$0e.forEach(t),jVo=i(pW),q5=n(pW,"LI",{});var I0e=s(q5);qce=n(I0e,"STRONG",{});var $nt=s(qce);DVo=r($nt,"swin"),$nt.forEach(t),NVo=r(I0e," \u2014 "),UN=n(I0e,"A",{href:!0});var Int=s(UN);qVo=r(Int,"SwinForMaskedImageModeling"),Int.forEach(t),GVo=r(I0e," (Swin model)"),I0e.forEach(t),OVo=i(pW),G5=n(pW,"LI",{});var j0e=s(G5);Gce=n(j0e,"STRONG",{});var jnt=s(Gce);XVo=r(jnt,"vit"),jnt.forEach(t),VVo=r(j0e," \u2014 "),JN=n(j0e,"A",{href:!0});var Dnt=s(JN);zVo=r(Dnt,"ViTForMaskedImageModeling"),Dnt.forEach(t),WVo=r(j0e," (ViT model)"),j0e.forEach(t),pW.forEach(t),QVo=i(aa),O5=n(aa,"P",{});var D0e=s(O5);HVo=r(D0e,"The model is set in evaluation mode by default using "),Oce=n(D0e,"CODE",{});var Nnt=s(Oce);UVo=r(Nnt,"model.eval()"),Nnt.forEach(t),JVo=r(D0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xce=n(D0e,"CODE",{});var qnt=s(Xce);YVo=r(qnt,"model.train()"),qnt.forEach(t),D0e.forEach(t),KVo=i(aa),Vce=n(aa,"P",{});var Gnt=s(Vce);ZVo=r(Gnt,"Examples:"),Gnt.forEach(t),ezo=i(aa),m(oA.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),pke=i(c),oc=n(c,"H2",{class:!0});var ySe=s(oc);X5=n(ySe,"A",{id:!0,class:!0,href:!0});var Ont=s(X5);zce=n(Ont,"SPAN",{});var Xnt=s(zce);m(rA.$$.fragment,Xnt),Xnt.forEach(t),Ont.forEach(t),ozo=i(ySe),Wce=n(ySe,"SPAN",{});var Vnt=s(Wce);rzo=r(Vnt,"AutoModelForObjectDetection"),Vnt.forEach(t),ySe.forEach(t),_ke=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(tA.$$.fragment,kl),tzo=i(kl),rc=n(kl,"P",{});var _W=s(rc);azo=r(_W,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Qce=n(_W,"CODE",{});var znt=s(Qce);nzo=r(znt,"from_pretrained()"),znt.forEach(t),szo=r(_W,"class method or the "),Hce=n(_W,"CODE",{});var Wnt=s(Hce);lzo=r(Wnt,"from_config()"),Wnt.forEach(t),izo=r(_W,`class
method.`),_W.forEach(t),dzo=i(kl),aA=n(kl,"P",{});var wSe=s(aA);czo=r(wSe,"This class cannot be instantiated directly using "),Uce=n(wSe,"CODE",{});var Qnt=s(Uce);fzo=r(Qnt,"__init__()"),Qnt.forEach(t),mzo=r(wSe," (throws an error)."),wSe.forEach(t),gzo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(nA.$$.fragment,Rl),hzo=i(Rl),Jce=n(Rl,"P",{});var Hnt=s(Jce);pzo=r(Hnt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Hnt.forEach(t),_zo=i(Rl),tc=n(Rl,"P",{});var uW=s(tc);uzo=r(uW,`Note:
Loading a model from its configuration file does `),Yce=n(uW,"STRONG",{});var Unt=s(Yce);bzo=r(Unt,"not"),Unt.forEach(t),vzo=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kce=n(uW,"CODE",{});var Jnt=s(Kce);Tzo=r(Jnt,"from_pretrained()"),Jnt.forEach(t),Fzo=r(uW,"to load the model weights."),uW.forEach(t),Czo=i(Rl),Zce=n(Rl,"P",{});var Ynt=s(Zce);Mzo=r(Ynt,"Examples:"),Ynt.forEach(t),Ezo=i(Rl),m(sA.$$.fragment,Rl),Rl.forEach(t),yzo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);m(lA.$$.fragment,na),wzo=i(na),efe=n(na,"P",{});var Knt=s(efe);Azo=r(Knt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Knt.forEach(t),Lzo=i(na),mn=n(na,"P",{});var F4=s(mn);Bzo=r(F4,"The model class to instantiate is selected based on the "),ofe=n(F4,"CODE",{});var Znt=s(ofe);xzo=r(Znt,"model_type"),Znt.forEach(t),kzo=r(F4,` property of the config object (either
passed as an argument or loaded from `),rfe=n(F4,"CODE",{});var est=s(rfe);Rzo=r(est,"pretrained_model_name_or_path"),est.forEach(t),Szo=r(F4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=n(F4,"CODE",{});var ost=s(tfe);Pzo=r(ost,"pretrained_model_name_or_path"),ost.forEach(t),$zo=r(F4,":"),F4.forEach(t),Izo=i(na),afe=n(na,"UL",{});var rst=s(afe);V5=n(rst,"LI",{});var N0e=s(V5);nfe=n(N0e,"STRONG",{});var tst=s(nfe);jzo=r(tst,"detr"),tst.forEach(t),Dzo=r(N0e," \u2014 "),YN=n(N0e,"A",{href:!0});var ast=s(YN);Nzo=r(ast,"DetrForObjectDetection"),ast.forEach(t),qzo=r(N0e," (DETR model)"),N0e.forEach(t),rst.forEach(t),Gzo=i(na),z5=n(na,"P",{});var q0e=s(z5);Ozo=r(q0e,"The model is set in evaluation mode by default using "),sfe=n(q0e,"CODE",{});var nst=s(sfe);Xzo=r(nst,"model.eval()"),nst.forEach(t),Vzo=r(q0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=n(q0e,"CODE",{});var sst=s(lfe);zzo=r(sst,"model.train()"),sst.forEach(t),q0e.forEach(t),Wzo=i(na),ife=n(na,"P",{});var lst=s(ife);Qzo=r(lst,"Examples:"),lst.forEach(t),Hzo=i(na),m(iA.$$.fragment,na),na.forEach(t),kl.forEach(t),uke=i(c),ac=n(c,"H2",{class:!0});var ASe=s(ac);W5=n(ASe,"A",{id:!0,class:!0,href:!0});var ist=s(W5);dfe=n(ist,"SPAN",{});var dst=s(dfe);m(dA.$$.fragment,dst),dst.forEach(t),ist.forEach(t),Uzo=i(ASe),cfe=n(ASe,"SPAN",{});var cst=s(cfe);Jzo=r(cst,"AutoModelForImageSegmentation"),cst.forEach(t),ASe.forEach(t),bke=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(cA.$$.fragment,Sl),Yzo=i(Sl),nc=n(Sl,"P",{});var bW=s(nc);Kzo=r(bW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ffe=n(bW,"CODE",{});var fst=s(ffe);Zzo=r(fst,"from_pretrained()"),fst.forEach(t),eWo=r(bW,"class method or the "),mfe=n(bW,"CODE",{});var mst=s(mfe);oWo=r(mst,"from_config()"),mst.forEach(t),rWo=r(bW,`class
method.`),bW.forEach(t),tWo=i(Sl),fA=n(Sl,"P",{});var LSe=s(fA);aWo=r(LSe,"This class cannot be instantiated directly using "),gfe=n(LSe,"CODE",{});var gst=s(gfe);nWo=r(gst,"__init__()"),gst.forEach(t),sWo=r(LSe," (throws an error)."),LSe.forEach(t),lWo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(mA.$$.fragment,Pl),iWo=i(Pl),hfe=n(Pl,"P",{});var hst=s(hfe);dWo=r(hst,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hst.forEach(t),cWo=i(Pl),sc=n(Pl,"P",{});var vW=s(sc);fWo=r(vW,`Note:
Loading a model from its configuration file does `),pfe=n(vW,"STRONG",{});var pst=s(pfe);mWo=r(pst,"not"),pst.forEach(t),gWo=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_fe=n(vW,"CODE",{});var _st=s(_fe);hWo=r(_st,"from_pretrained()"),_st.forEach(t),pWo=r(vW,"to load the model weights."),vW.forEach(t),_Wo=i(Pl),ufe=n(Pl,"P",{});var ust=s(ufe);uWo=r(ust,"Examples:"),ust.forEach(t),bWo=i(Pl),m(gA.$$.fragment,Pl),Pl.forEach(t),vWo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);m(hA.$$.fragment,sa),TWo=i(sa),bfe=n(sa,"P",{});var bst=s(bfe);FWo=r(bst,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),bst.forEach(t),CWo=i(sa),gn=n(sa,"P",{});var C4=s(gn);MWo=r(C4,"The model class to instantiate is selected based on the "),vfe=n(C4,"CODE",{});var vst=s(vfe);EWo=r(vst,"model_type"),vst.forEach(t),yWo=r(C4,` property of the config object (either
passed as an argument or loaded from `),Tfe=n(C4,"CODE",{});var Tst=s(Tfe);wWo=r(Tst,"pretrained_model_name_or_path"),Tst.forEach(t),AWo=r(C4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=n(C4,"CODE",{});var Fst=s(Ffe);LWo=r(Fst,"pretrained_model_name_or_path"),Fst.forEach(t),BWo=r(C4,":"),C4.forEach(t),xWo=i(sa),Cfe=n(sa,"UL",{});var Cst=s(Cfe);Q5=n(Cst,"LI",{});var G0e=s(Q5);Mfe=n(G0e,"STRONG",{});var Mst=s(Mfe);kWo=r(Mst,"detr"),Mst.forEach(t),RWo=r(G0e," \u2014 "),KN=n(G0e,"A",{href:!0});var Est=s(KN);SWo=r(Est,"DetrForSegmentation"),Est.forEach(t),PWo=r(G0e," (DETR model)"),G0e.forEach(t),Cst.forEach(t),$Wo=i(sa),H5=n(sa,"P",{});var O0e=s(H5);IWo=r(O0e,"The model is set in evaluation mode by default using "),Efe=n(O0e,"CODE",{});var yst=s(Efe);jWo=r(yst,"model.eval()"),yst.forEach(t),DWo=r(O0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yfe=n(O0e,"CODE",{});var wst=s(yfe);NWo=r(wst,"model.train()"),wst.forEach(t),O0e.forEach(t),qWo=i(sa),wfe=n(sa,"P",{});var Ast=s(wfe);GWo=r(Ast,"Examples:"),Ast.forEach(t),OWo=i(sa),m(pA.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),vke=i(c),lc=n(c,"H2",{class:!0});var BSe=s(lc);U5=n(BSe,"A",{id:!0,class:!0,href:!0});var Lst=s(U5);Afe=n(Lst,"SPAN",{});var Bst=s(Afe);m(_A.$$.fragment,Bst),Bst.forEach(t),Lst.forEach(t),XWo=i(BSe),Lfe=n(BSe,"SPAN",{});var xst=s(Lfe);VWo=r(xst,"AutoModelForSemanticSegmentation"),xst.forEach(t),BSe.forEach(t),Tke=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(uA.$$.fragment,$l),zWo=i($l),ic=n($l,"P",{});var TW=s(ic);WWo=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Bfe=n(TW,"CODE",{});var kst=s(Bfe);QWo=r(kst,"from_pretrained()"),kst.forEach(t),HWo=r(TW,"class method or the "),xfe=n(TW,"CODE",{});var Rst=s(xfe);UWo=r(Rst,"from_config()"),Rst.forEach(t),JWo=r(TW,`class
method.`),TW.forEach(t),YWo=i($l),bA=n($l,"P",{});var xSe=s(bA);KWo=r(xSe,"This class cannot be instantiated directly using "),kfe=n(xSe,"CODE",{});var Sst=s(kfe);ZWo=r(Sst,"__init__()"),Sst.forEach(t),eQo=r(xSe," (throws an error)."),xSe.forEach(t),oQo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(vA.$$.fragment,Il),rQo=i(Il),Rfe=n(Il,"P",{});var Pst=s(Rfe);tQo=r(Pst,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Pst.forEach(t),aQo=i(Il),dc=n(Il,"P",{});var FW=s(dc);nQo=r(FW,`Note:
Loading a model from its configuration file does `),Sfe=n(FW,"STRONG",{});var $st=s(Sfe);sQo=r($st,"not"),$st.forEach(t),lQo=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pfe=n(FW,"CODE",{});var Ist=s(Pfe);iQo=r(Ist,"from_pretrained()"),Ist.forEach(t),dQo=r(FW,"to load the model weights."),FW.forEach(t),cQo=i(Il),$fe=n(Il,"P",{});var jst=s($fe);fQo=r(jst,"Examples:"),jst.forEach(t),mQo=i(Il),m(TA.$$.fragment,Il),Il.forEach(t),gQo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(FA.$$.fragment,la),hQo=i(la),Ife=n(la,"P",{});var Dst=s(Ife);pQo=r(Dst,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Dst.forEach(t),_Qo=i(la),hn=n(la,"P",{});var M4=s(hn);uQo=r(M4,"The model class to instantiate is selected based on the "),jfe=n(M4,"CODE",{});var Nst=s(jfe);bQo=r(Nst,"model_type"),Nst.forEach(t),vQo=r(M4,` property of the config object (either
passed as an argument or loaded from `),Dfe=n(M4,"CODE",{});var qst=s(Dfe);TQo=r(qst,"pretrained_model_name_or_path"),qst.forEach(t),FQo=r(M4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nfe=n(M4,"CODE",{});var Gst=s(Nfe);CQo=r(Gst,"pretrained_model_name_or_path"),Gst.forEach(t),MQo=r(M4,":"),M4.forEach(t),EQo=i(la),CA=n(la,"UL",{});var kSe=s(CA);J5=n(kSe,"LI",{});var X0e=s(J5);qfe=n(X0e,"STRONG",{});var Ost=s(qfe);yQo=r(Ost,"beit"),Ost.forEach(t),wQo=r(X0e," \u2014 "),ZN=n(X0e,"A",{href:!0});var Xst=s(ZN);AQo=r(Xst,"BeitForSemanticSegmentation"),Xst.forEach(t),LQo=r(X0e," (BEiT model)"),X0e.forEach(t),BQo=i(kSe),Y5=n(kSe,"LI",{});var V0e=s(Y5);Gfe=n(V0e,"STRONG",{});var Vst=s(Gfe);xQo=r(Vst,"segformer"),Vst.forEach(t),kQo=r(V0e," \u2014 "),eq=n(V0e,"A",{href:!0});var zst=s(eq);RQo=r(zst,"SegformerForSemanticSegmentation"),zst.forEach(t),SQo=r(V0e," (SegFormer model)"),V0e.forEach(t),kSe.forEach(t),PQo=i(la),K5=n(la,"P",{});var z0e=s(K5);$Qo=r(z0e,"The model is set in evaluation mode by default using "),Ofe=n(z0e,"CODE",{});var Wst=s(Ofe);IQo=r(Wst,"model.eval()"),Wst.forEach(t),jQo=r(z0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=n(z0e,"CODE",{});var Qst=s(Xfe);DQo=r(Qst,"model.train()"),Qst.forEach(t),z0e.forEach(t),NQo=i(la),Vfe=n(la,"P",{});var Hst=s(Vfe);qQo=r(Hst,"Examples:"),Hst.forEach(t),GQo=i(la),m(MA.$$.fragment,la),la.forEach(t),$l.forEach(t),Fke=i(c),cc=n(c,"H2",{class:!0});var RSe=s(cc);Z5=n(RSe,"A",{id:!0,class:!0,href:!0});var Ust=s(Z5);zfe=n(Ust,"SPAN",{});var Jst=s(zfe);m(EA.$$.fragment,Jst),Jst.forEach(t),Ust.forEach(t),OQo=i(RSe),Wfe=n(RSe,"SPAN",{});var Yst=s(Wfe);XQo=r(Yst,"AutoModelForInstanceSegmentation"),Yst.forEach(t),RSe.forEach(t),Cke=i(c),br=n(c,"DIV",{class:!0});var jl=s(br);m(yA.$$.fragment,jl),VQo=i(jl),fc=n(jl,"P",{});var CW=s(fc);zQo=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Qfe=n(CW,"CODE",{});var Kst=s(Qfe);WQo=r(Kst,"from_pretrained()"),Kst.forEach(t),QQo=r(CW,"class method or the "),Hfe=n(CW,"CODE",{});var Zst=s(Hfe);HQo=r(Zst,"from_config()"),Zst.forEach(t),UQo=r(CW,`class
method.`),CW.forEach(t),JQo=i(jl),wA=n(jl,"P",{});var SSe=s(wA);YQo=r(SSe,"This class cannot be instantiated directly using "),Ufe=n(SSe,"CODE",{});var elt=s(Ufe);KQo=r(elt,"__init__()"),elt.forEach(t),ZQo=r(SSe," (throws an error)."),SSe.forEach(t),eHo=i(jl),mt=n(jl,"DIV",{class:!0});var Dl=s(mt);m(AA.$$.fragment,Dl),oHo=i(Dl),Jfe=n(Dl,"P",{});var olt=s(Jfe);rHo=r(olt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),olt.forEach(t),tHo=i(Dl),mc=n(Dl,"P",{});var MW=s(mc);aHo=r(MW,`Note:
Loading a model from its configuration file does `),Yfe=n(MW,"STRONG",{});var rlt=s(Yfe);nHo=r(rlt,"not"),rlt.forEach(t),sHo=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kfe=n(MW,"CODE",{});var tlt=s(Kfe);lHo=r(tlt,"from_pretrained()"),tlt.forEach(t),iHo=r(MW,"to load the model weights."),MW.forEach(t),dHo=i(Dl),Zfe=n(Dl,"P",{});var alt=s(Zfe);cHo=r(alt,"Examples:"),alt.forEach(t),fHo=i(Dl),m(LA.$$.fragment,Dl),Dl.forEach(t),mHo=i(jl),no=n(jl,"DIV",{class:!0});var ia=s(no);m(BA.$$.fragment,ia),gHo=i(ia),eme=n(ia,"P",{});var nlt=s(eme);hHo=r(nlt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),nlt.forEach(t),pHo=i(ia),pn=n(ia,"P",{});var E4=s(pn);_Ho=r(E4,"The model class to instantiate is selected based on the "),ome=n(E4,"CODE",{});var slt=s(ome);uHo=r(slt,"model_type"),slt.forEach(t),bHo=r(E4,` property of the config object (either
passed as an argument or loaded from `),rme=n(E4,"CODE",{});var llt=s(rme);vHo=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),THo=r(E4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tme=n(E4,"CODE",{});var ilt=s(tme);FHo=r(ilt,"pretrained_model_name_or_path"),ilt.forEach(t),CHo=r(E4,":"),E4.forEach(t),MHo=i(ia),ame=n(ia,"UL",{});var dlt=s(ame);ev=n(dlt,"LI",{});var W0e=s(ev);nme=n(W0e,"STRONG",{});var clt=s(nme);EHo=r(clt,"maskformer"),clt.forEach(t),yHo=r(W0e," \u2014 "),oq=n(W0e,"A",{href:!0});var flt=s(oq);wHo=r(flt,"MaskFormerForInstanceSegmentation"),flt.forEach(t),AHo=r(W0e," (MaskFormer model)"),W0e.forEach(t),dlt.forEach(t),LHo=i(ia),ov=n(ia,"P",{});var Q0e=s(ov);BHo=r(Q0e,"The model is set in evaluation mode by default using "),sme=n(Q0e,"CODE",{});var mlt=s(sme);xHo=r(mlt,"model.eval()"),mlt.forEach(t),kHo=r(Q0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=n(Q0e,"CODE",{});var glt=s(lme);RHo=r(glt,"model.train()"),glt.forEach(t),Q0e.forEach(t),SHo=i(ia),ime=n(ia,"P",{});var hlt=s(ime);PHo=r(hlt,"Examples:"),hlt.forEach(t),$Ho=i(ia),m(xA.$$.fragment,ia),ia.forEach(t),jl.forEach(t),Mke=i(c),gc=n(c,"H2",{class:!0});var PSe=s(gc);rv=n(PSe,"A",{id:!0,class:!0,href:!0});var plt=s(rv);dme=n(plt,"SPAN",{});var _lt=s(dme);m(kA.$$.fragment,_lt),_lt.forEach(t),plt.forEach(t),IHo=i(PSe),cme=n(PSe,"SPAN",{});var ult=s(cme);jHo=r(ult,"TFAutoModel"),ult.forEach(t),PSe.forEach(t),Eke=i(c),vr=n(c,"DIV",{class:!0});var Nl=s(vr);m(RA.$$.fragment,Nl),DHo=i(Nl),hc=n(Nl,"P",{});var EW=s(hc);NHo=r(EW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fme=n(EW,"CODE",{});var blt=s(fme);qHo=r(blt,"from_pretrained()"),blt.forEach(t),GHo=r(EW,"class method or the "),mme=n(EW,"CODE",{});var vlt=s(mme);OHo=r(vlt,"from_config()"),vlt.forEach(t),XHo=r(EW,`class
method.`),EW.forEach(t),VHo=i(Nl),SA=n(Nl,"P",{});var $Se=s(SA);zHo=r($Se,"This class cannot be instantiated directly using "),gme=n($Se,"CODE",{});var Tlt=s(gme);WHo=r(Tlt,"__init__()"),Tlt.forEach(t),QHo=r($Se," (throws an error)."),$Se.forEach(t),HHo=i(Nl),gt=n(Nl,"DIV",{class:!0});var ql=s(gt);m(PA.$$.fragment,ql),UHo=i(ql),hme=n(ql,"P",{});var Flt=s(hme);JHo=r(Flt,"Instantiates one of the base model classes of the library from a configuration."),Flt.forEach(t),YHo=i(ql),pc=n(ql,"P",{});var yW=s(pc);KHo=r(yW,`Note:
Loading a model from its configuration file does `),pme=n(yW,"STRONG",{});var Clt=s(pme);ZHo=r(Clt,"not"),Clt.forEach(t),eUo=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_me=n(yW,"CODE",{});var Mlt=s(_me);oUo=r(Mlt,"from_pretrained()"),Mlt.forEach(t),rUo=r(yW,"to load the model weights."),yW.forEach(t),tUo=i(ql),ume=n(ql,"P",{});var Elt=s(ume);aUo=r(Elt,"Examples:"),Elt.forEach(t),nUo=i(ql),m($A.$$.fragment,ql),ql.forEach(t),sUo=i(Nl),ho=n(Nl,"DIV",{class:!0});var pa=s(ho);m(IA.$$.fragment,pa),lUo=i(pa),bme=n(pa,"P",{});var ylt=s(bme);iUo=r(ylt,"Instantiate one of the base model classes of the library from a pretrained model."),ylt.forEach(t),dUo=i(pa),_n=n(pa,"P",{});var y4=s(_n);cUo=r(y4,"The model class to instantiate is selected based on the "),vme=n(y4,"CODE",{});var wlt=s(vme);fUo=r(wlt,"model_type"),wlt.forEach(t),mUo=r(y4,` property of the config object (either
passed as an argument or loaded from `),Tme=n(y4,"CODE",{});var Alt=s(Tme);gUo=r(Alt,"pretrained_model_name_or_path"),Alt.forEach(t),hUo=r(y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=n(y4,"CODE",{});var Llt=s(Fme);pUo=r(Llt,"pretrained_model_name_or_path"),Llt.forEach(t),_Uo=r(y4,":"),y4.forEach(t),uUo=i(pa),B=n(pa,"UL",{});var x=s(B);tv=n(x,"LI",{});var H0e=s(tv);Cme=n(H0e,"STRONG",{});var Blt=s(Cme);bUo=r(Blt,"albert"),Blt.forEach(t),vUo=r(H0e," \u2014 "),rq=n(H0e,"A",{href:!0});var xlt=s(rq);TUo=r(xlt,"TFAlbertModel"),xlt.forEach(t),FUo=r(H0e," (ALBERT model)"),H0e.forEach(t),CUo=i(x),av=n(x,"LI",{});var U0e=s(av);Mme=n(U0e,"STRONG",{});var klt=s(Mme);MUo=r(klt,"bart"),klt.forEach(t),EUo=r(U0e," \u2014 "),tq=n(U0e,"A",{href:!0});var Rlt=s(tq);yUo=r(Rlt,"TFBartModel"),Rlt.forEach(t),wUo=r(U0e," (BART model)"),U0e.forEach(t),AUo=i(x),nv=n(x,"LI",{});var J0e=s(nv);Eme=n(J0e,"STRONG",{});var Slt=s(Eme);LUo=r(Slt,"bert"),Slt.forEach(t),BUo=r(J0e," \u2014 "),aq=n(J0e,"A",{href:!0});var Plt=s(aq);xUo=r(Plt,"TFBertModel"),Plt.forEach(t),kUo=r(J0e," (BERT model)"),J0e.forEach(t),RUo=i(x),sv=n(x,"LI",{});var Y0e=s(sv);yme=n(Y0e,"STRONG",{});var $lt=s(yme);SUo=r($lt,"blenderbot"),$lt.forEach(t),PUo=r(Y0e," \u2014 "),nq=n(Y0e,"A",{href:!0});var Ilt=s(nq);$Uo=r(Ilt,"TFBlenderbotModel"),Ilt.forEach(t),IUo=r(Y0e," (Blenderbot model)"),Y0e.forEach(t),jUo=i(x),lv=n(x,"LI",{});var K0e=s(lv);wme=n(K0e,"STRONG",{});var jlt=s(wme);DUo=r(jlt,"blenderbot-small"),jlt.forEach(t),NUo=r(K0e," \u2014 "),sq=n(K0e,"A",{href:!0});var Dlt=s(sq);qUo=r(Dlt,"TFBlenderbotSmallModel"),Dlt.forEach(t),GUo=r(K0e," (BlenderbotSmall model)"),K0e.forEach(t),OUo=i(x),iv=n(x,"LI",{});var Z0e=s(iv);Ame=n(Z0e,"STRONG",{});var Nlt=s(Ame);XUo=r(Nlt,"camembert"),Nlt.forEach(t),VUo=r(Z0e," \u2014 "),lq=n(Z0e,"A",{href:!0});var qlt=s(lq);zUo=r(qlt,"TFCamembertModel"),qlt.forEach(t),WUo=r(Z0e," (CamemBERT model)"),Z0e.forEach(t),QUo=i(x),dv=n(x,"LI",{});var eLe=s(dv);Lme=n(eLe,"STRONG",{});var Glt=s(Lme);HUo=r(Glt,"clip"),Glt.forEach(t),UUo=r(eLe," \u2014 "),iq=n(eLe,"A",{href:!0});var Olt=s(iq);JUo=r(Olt,"TFCLIPModel"),Olt.forEach(t),YUo=r(eLe," (CLIP model)"),eLe.forEach(t),KUo=i(x),cv=n(x,"LI",{});var oLe=s(cv);Bme=n(oLe,"STRONG",{});var Xlt=s(Bme);ZUo=r(Xlt,"convbert"),Xlt.forEach(t),eJo=r(oLe," \u2014 "),dq=n(oLe,"A",{href:!0});var Vlt=s(dq);oJo=r(Vlt,"TFConvBertModel"),Vlt.forEach(t),rJo=r(oLe," (ConvBERT model)"),oLe.forEach(t),tJo=i(x),fv=n(x,"LI",{});var rLe=s(fv);xme=n(rLe,"STRONG",{});var zlt=s(xme);aJo=r(zlt,"convnext"),zlt.forEach(t),nJo=r(rLe," \u2014 "),cq=n(rLe,"A",{href:!0});var Wlt=s(cq);sJo=r(Wlt,"TFConvNextModel"),Wlt.forEach(t),lJo=r(rLe," (ConvNext model)"),rLe.forEach(t),iJo=i(x),mv=n(x,"LI",{});var tLe=s(mv);kme=n(tLe,"STRONG",{});var Qlt=s(kme);dJo=r(Qlt,"ctrl"),Qlt.forEach(t),cJo=r(tLe," \u2014 "),fq=n(tLe,"A",{href:!0});var Hlt=s(fq);fJo=r(Hlt,"TFCTRLModel"),Hlt.forEach(t),mJo=r(tLe," (CTRL model)"),tLe.forEach(t),gJo=i(x),gv=n(x,"LI",{});var aLe=s(gv);Rme=n(aLe,"STRONG",{});var Ult=s(Rme);hJo=r(Ult,"deberta"),Ult.forEach(t),pJo=r(aLe," \u2014 "),mq=n(aLe,"A",{href:!0});var Jlt=s(mq);_Jo=r(Jlt,"TFDebertaModel"),Jlt.forEach(t),uJo=r(aLe," (DeBERTa model)"),aLe.forEach(t),bJo=i(x),hv=n(x,"LI",{});var nLe=s(hv);Sme=n(nLe,"STRONG",{});var Ylt=s(Sme);vJo=r(Ylt,"deberta-v2"),Ylt.forEach(t),TJo=r(nLe," \u2014 "),gq=n(nLe,"A",{href:!0});var Klt=s(gq);FJo=r(Klt,"TFDebertaV2Model"),Klt.forEach(t),CJo=r(nLe," (DeBERTa-v2 model)"),nLe.forEach(t),MJo=i(x),pv=n(x,"LI",{});var sLe=s(pv);Pme=n(sLe,"STRONG",{});var Zlt=s(Pme);EJo=r(Zlt,"distilbert"),Zlt.forEach(t),yJo=r(sLe," \u2014 "),hq=n(sLe,"A",{href:!0});var eit=s(hq);wJo=r(eit,"TFDistilBertModel"),eit.forEach(t),AJo=r(sLe," (DistilBERT model)"),sLe.forEach(t),LJo=i(x),_v=n(x,"LI",{});var lLe=s(_v);$me=n(lLe,"STRONG",{});var oit=s($me);BJo=r(oit,"dpr"),oit.forEach(t),xJo=r(lLe," \u2014 "),pq=n(lLe,"A",{href:!0});var rit=s(pq);kJo=r(rit,"TFDPRQuestionEncoder"),rit.forEach(t),RJo=r(lLe," (DPR model)"),lLe.forEach(t),SJo=i(x),uv=n(x,"LI",{});var iLe=s(uv);Ime=n(iLe,"STRONG",{});var tit=s(Ime);PJo=r(tit,"electra"),tit.forEach(t),$Jo=r(iLe," \u2014 "),_q=n(iLe,"A",{href:!0});var ait=s(_q);IJo=r(ait,"TFElectraModel"),ait.forEach(t),jJo=r(iLe," (ELECTRA model)"),iLe.forEach(t),DJo=i(x),bv=n(x,"LI",{});var dLe=s(bv);jme=n(dLe,"STRONG",{});var nit=s(jme);NJo=r(nit,"flaubert"),nit.forEach(t),qJo=r(dLe," \u2014 "),uq=n(dLe,"A",{href:!0});var sit=s(uq);GJo=r(sit,"TFFlaubertModel"),sit.forEach(t),OJo=r(dLe," (FlauBERT model)"),dLe.forEach(t),XJo=i(x),Gs=n(x,"LI",{});var O8=s(Gs);Dme=n(O8,"STRONG",{});var lit=s(Dme);VJo=r(lit,"funnel"),lit.forEach(t),zJo=r(O8," \u2014 "),bq=n(O8,"A",{href:!0});var iit=s(bq);WJo=r(iit,"TFFunnelModel"),iit.forEach(t),QJo=r(O8," or "),vq=n(O8,"A",{href:!0});var dit=s(vq);HJo=r(dit,"TFFunnelBaseModel"),dit.forEach(t),UJo=r(O8," (Funnel Transformer model)"),O8.forEach(t),JJo=i(x),vv=n(x,"LI",{});var cLe=s(vv);Nme=n(cLe,"STRONG",{});var cit=s(Nme);YJo=r(cit,"gpt2"),cit.forEach(t),KJo=r(cLe," \u2014 "),Tq=n(cLe,"A",{href:!0});var fit=s(Tq);ZJo=r(fit,"TFGPT2Model"),fit.forEach(t),eYo=r(cLe," (OpenAI GPT-2 model)"),cLe.forEach(t),oYo=i(x),Tv=n(x,"LI",{});var fLe=s(Tv);qme=n(fLe,"STRONG",{});var mit=s(qme);rYo=r(mit,"gptj"),mit.forEach(t),tYo=r(fLe," \u2014 "),Fq=n(fLe,"A",{href:!0});var git=s(Fq);aYo=r(git,"TFGPTJModel"),git.forEach(t),nYo=r(fLe," (GPT-J model)"),fLe.forEach(t),sYo=i(x),Fv=n(x,"LI",{});var mLe=s(Fv);Gme=n(mLe,"STRONG",{});var hit=s(Gme);lYo=r(hit,"hubert"),hit.forEach(t),iYo=r(mLe," \u2014 "),Cq=n(mLe,"A",{href:!0});var pit=s(Cq);dYo=r(pit,"TFHubertModel"),pit.forEach(t),cYo=r(mLe," (Hubert model)"),mLe.forEach(t),fYo=i(x),Cv=n(x,"LI",{});var gLe=s(Cv);Ome=n(gLe,"STRONG",{});var _it=s(Ome);mYo=r(_it,"layoutlm"),_it.forEach(t),gYo=r(gLe," \u2014 "),Mq=n(gLe,"A",{href:!0});var uit=s(Mq);hYo=r(uit,"TFLayoutLMModel"),uit.forEach(t),pYo=r(gLe," (LayoutLM model)"),gLe.forEach(t),_Yo=i(x),Mv=n(x,"LI",{});var hLe=s(Mv);Xme=n(hLe,"STRONG",{});var bit=s(Xme);uYo=r(bit,"led"),bit.forEach(t),bYo=r(hLe," \u2014 "),Eq=n(hLe,"A",{href:!0});var vit=s(Eq);vYo=r(vit,"TFLEDModel"),vit.forEach(t),TYo=r(hLe," (LED model)"),hLe.forEach(t),FYo=i(x),Ev=n(x,"LI",{});var pLe=s(Ev);Vme=n(pLe,"STRONG",{});var Tit=s(Vme);CYo=r(Tit,"longformer"),Tit.forEach(t),MYo=r(pLe," \u2014 "),yq=n(pLe,"A",{href:!0});var Fit=s(yq);EYo=r(Fit,"TFLongformerModel"),Fit.forEach(t),yYo=r(pLe," (Longformer model)"),pLe.forEach(t),wYo=i(x),yv=n(x,"LI",{});var _Le=s(yv);zme=n(_Le,"STRONG",{});var Cit=s(zme);AYo=r(Cit,"lxmert"),Cit.forEach(t),LYo=r(_Le," \u2014 "),wq=n(_Le,"A",{href:!0});var Mit=s(wq);BYo=r(Mit,"TFLxmertModel"),Mit.forEach(t),xYo=r(_Le," (LXMERT model)"),_Le.forEach(t),kYo=i(x),wv=n(x,"LI",{});var uLe=s(wv);Wme=n(uLe,"STRONG",{});var Eit=s(Wme);RYo=r(Eit,"marian"),Eit.forEach(t),SYo=r(uLe," \u2014 "),Aq=n(uLe,"A",{href:!0});var yit=s(Aq);PYo=r(yit,"TFMarianModel"),yit.forEach(t),$Yo=r(uLe," (Marian model)"),uLe.forEach(t),IYo=i(x),Av=n(x,"LI",{});var bLe=s(Av);Qme=n(bLe,"STRONG",{});var wit=s(Qme);jYo=r(wit,"mbart"),wit.forEach(t),DYo=r(bLe," \u2014 "),Lq=n(bLe,"A",{href:!0});var Ait=s(Lq);NYo=r(Ait,"TFMBartModel"),Ait.forEach(t),qYo=r(bLe," (mBART model)"),bLe.forEach(t),GYo=i(x),Lv=n(x,"LI",{});var vLe=s(Lv);Hme=n(vLe,"STRONG",{});var Lit=s(Hme);OYo=r(Lit,"mobilebert"),Lit.forEach(t),XYo=r(vLe," \u2014 "),Bq=n(vLe,"A",{href:!0});var Bit=s(Bq);VYo=r(Bit,"TFMobileBertModel"),Bit.forEach(t),zYo=r(vLe," (MobileBERT model)"),vLe.forEach(t),WYo=i(x),Bv=n(x,"LI",{});var TLe=s(Bv);Ume=n(TLe,"STRONG",{});var xit=s(Ume);QYo=r(xit,"mpnet"),xit.forEach(t),HYo=r(TLe," \u2014 "),xq=n(TLe,"A",{href:!0});var kit=s(xq);UYo=r(kit,"TFMPNetModel"),kit.forEach(t),JYo=r(TLe," (MPNet model)"),TLe.forEach(t),YYo=i(x),xv=n(x,"LI",{});var FLe=s(xv);Jme=n(FLe,"STRONG",{});var Rit=s(Jme);KYo=r(Rit,"mt5"),Rit.forEach(t),ZYo=r(FLe," \u2014 "),kq=n(FLe,"A",{href:!0});var Sit=s(kq);eKo=r(Sit,"TFMT5Model"),Sit.forEach(t),oKo=r(FLe," (mT5 model)"),FLe.forEach(t),rKo=i(x),kv=n(x,"LI",{});var CLe=s(kv);Yme=n(CLe,"STRONG",{});var Pit=s(Yme);tKo=r(Pit,"openai-gpt"),Pit.forEach(t),aKo=r(CLe," \u2014 "),Rq=n(CLe,"A",{href:!0});var $it=s(Rq);nKo=r($it,"TFOpenAIGPTModel"),$it.forEach(t),sKo=r(CLe," (OpenAI GPT model)"),CLe.forEach(t),lKo=i(x),Rv=n(x,"LI",{});var MLe=s(Rv);Kme=n(MLe,"STRONG",{});var Iit=s(Kme);iKo=r(Iit,"pegasus"),Iit.forEach(t),dKo=r(MLe," \u2014 "),Sq=n(MLe,"A",{href:!0});var jit=s(Sq);cKo=r(jit,"TFPegasusModel"),jit.forEach(t),fKo=r(MLe," (Pegasus model)"),MLe.forEach(t),mKo=i(x),Sv=n(x,"LI",{});var ELe=s(Sv);Zme=n(ELe,"STRONG",{});var Dit=s(Zme);gKo=r(Dit,"rembert"),Dit.forEach(t),hKo=r(ELe," \u2014 "),Pq=n(ELe,"A",{href:!0});var Nit=s(Pq);pKo=r(Nit,"TFRemBertModel"),Nit.forEach(t),_Ko=r(ELe," (RemBERT model)"),ELe.forEach(t),uKo=i(x),Pv=n(x,"LI",{});var yLe=s(Pv);ege=n(yLe,"STRONG",{});var qit=s(ege);bKo=r(qit,"roberta"),qit.forEach(t),vKo=r(yLe," \u2014 "),$q=n(yLe,"A",{href:!0});var Git=s($q);TKo=r(Git,"TFRobertaModel"),Git.forEach(t),FKo=r(yLe," (RoBERTa model)"),yLe.forEach(t),CKo=i(x),$v=n(x,"LI",{});var wLe=s($v);oge=n(wLe,"STRONG",{});var Oit=s(oge);MKo=r(Oit,"roformer"),Oit.forEach(t),EKo=r(wLe," \u2014 "),Iq=n(wLe,"A",{href:!0});var Xit=s(Iq);yKo=r(Xit,"TFRoFormerModel"),Xit.forEach(t),wKo=r(wLe," (RoFormer model)"),wLe.forEach(t),AKo=i(x),Iv=n(x,"LI",{});var ALe=s(Iv);rge=n(ALe,"STRONG",{});var Vit=s(rge);LKo=r(Vit,"speech_to_text"),Vit.forEach(t),BKo=r(ALe," \u2014 "),jq=n(ALe,"A",{href:!0});var zit=s(jq);xKo=r(zit,"TFSpeech2TextModel"),zit.forEach(t),kKo=r(ALe," (Speech2Text model)"),ALe.forEach(t),RKo=i(x),jv=n(x,"LI",{});var LLe=s(jv);tge=n(LLe,"STRONG",{});var Wit=s(tge);SKo=r(Wit,"t5"),Wit.forEach(t),PKo=r(LLe," \u2014 "),Dq=n(LLe,"A",{href:!0});var Qit=s(Dq);$Ko=r(Qit,"TFT5Model"),Qit.forEach(t),IKo=r(LLe," (T5 model)"),LLe.forEach(t),jKo=i(x),Dv=n(x,"LI",{});var BLe=s(Dv);age=n(BLe,"STRONG",{});var Hit=s(age);DKo=r(Hit,"tapas"),Hit.forEach(t),NKo=r(BLe," \u2014 "),Nq=n(BLe,"A",{href:!0});var Uit=s(Nq);qKo=r(Uit,"TFTapasModel"),Uit.forEach(t),GKo=r(BLe," (TAPAS model)"),BLe.forEach(t),OKo=i(x),Nv=n(x,"LI",{});var xLe=s(Nv);nge=n(xLe,"STRONG",{});var Jit=s(nge);XKo=r(Jit,"transfo-xl"),Jit.forEach(t),VKo=r(xLe," \u2014 "),qq=n(xLe,"A",{href:!0});var Yit=s(qq);zKo=r(Yit,"TFTransfoXLModel"),Yit.forEach(t),WKo=r(xLe," (Transformer-XL model)"),xLe.forEach(t),QKo=i(x),qv=n(x,"LI",{});var kLe=s(qv);sge=n(kLe,"STRONG",{});var Kit=s(sge);HKo=r(Kit,"vit"),Kit.forEach(t),UKo=r(kLe," \u2014 "),Gq=n(kLe,"A",{href:!0});var Zit=s(Gq);JKo=r(Zit,"TFViTModel"),Zit.forEach(t),YKo=r(kLe," (ViT model)"),kLe.forEach(t),KKo=i(x),Gv=n(x,"LI",{});var RLe=s(Gv);lge=n(RLe,"STRONG",{});var edt=s(lge);ZKo=r(edt,"wav2vec2"),edt.forEach(t),eZo=r(RLe," \u2014 "),Oq=n(RLe,"A",{href:!0});var odt=s(Oq);oZo=r(odt,"TFWav2Vec2Model"),odt.forEach(t),rZo=r(RLe," (Wav2Vec2 model)"),RLe.forEach(t),tZo=i(x),Ov=n(x,"LI",{});var SLe=s(Ov);ige=n(SLe,"STRONG",{});var rdt=s(ige);aZo=r(rdt,"xlm"),rdt.forEach(t),nZo=r(SLe," \u2014 "),Xq=n(SLe,"A",{href:!0});var tdt=s(Xq);sZo=r(tdt,"TFXLMModel"),tdt.forEach(t),lZo=r(SLe," (XLM model)"),SLe.forEach(t),iZo=i(x),Xv=n(x,"LI",{});var PLe=s(Xv);dge=n(PLe,"STRONG",{});var adt=s(dge);dZo=r(adt,"xlm-roberta"),adt.forEach(t),cZo=r(PLe," \u2014 "),Vq=n(PLe,"A",{href:!0});var ndt=s(Vq);fZo=r(ndt,"TFXLMRobertaModel"),ndt.forEach(t),mZo=r(PLe," (XLM-RoBERTa model)"),PLe.forEach(t),gZo=i(x),Vv=n(x,"LI",{});var $Le=s(Vv);cge=n($Le,"STRONG",{});var sdt=s(cge);hZo=r(sdt,"xlnet"),sdt.forEach(t),pZo=r($Le," \u2014 "),zq=n($Le,"A",{href:!0});var ldt=s(zq);_Zo=r(ldt,"TFXLNetModel"),ldt.forEach(t),uZo=r($Le," (XLNet model)"),$Le.forEach(t),x.forEach(t),bZo=i(pa),fge=n(pa,"P",{});var idt=s(fge);vZo=r(idt,"Examples:"),idt.forEach(t),TZo=i(pa),m(jA.$$.fragment,pa),pa.forEach(t),Nl.forEach(t),yke=i(c),_c=n(c,"H2",{class:!0});var ISe=s(_c);zv=n(ISe,"A",{id:!0,class:!0,href:!0});var ddt=s(zv);mge=n(ddt,"SPAN",{});var cdt=s(mge);m(DA.$$.fragment,cdt),cdt.forEach(t),ddt.forEach(t),FZo=i(ISe),gge=n(ISe,"SPAN",{});var fdt=s(gge);CZo=r(fdt,"TFAutoModelForPreTraining"),fdt.forEach(t),ISe.forEach(t),wke=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(NA.$$.fragment,Gl),MZo=i(Gl),uc=n(Gl,"P",{});var wW=s(uc);EZo=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hge=n(wW,"CODE",{});var mdt=s(hge);yZo=r(mdt,"from_pretrained()"),mdt.forEach(t),wZo=r(wW,"class method or the "),pge=n(wW,"CODE",{});var gdt=s(pge);AZo=r(gdt,"from_config()"),gdt.forEach(t),LZo=r(wW,`class
method.`),wW.forEach(t),BZo=i(Gl),qA=n(Gl,"P",{});var jSe=s(qA);xZo=r(jSe,"This class cannot be instantiated directly using "),_ge=n(jSe,"CODE",{});var hdt=s(_ge);kZo=r(hdt,"__init__()"),hdt.forEach(t),RZo=r(jSe," (throws an error)."),jSe.forEach(t),SZo=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(GA.$$.fragment,Ol),PZo=i(Ol),uge=n(Ol,"P",{});var pdt=s(uge);$Zo=r(pdt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pdt.forEach(t),IZo=i(Ol),bc=n(Ol,"P",{});var AW=s(bc);jZo=r(AW,`Note:
Loading a model from its configuration file does `),bge=n(AW,"STRONG",{});var _dt=s(bge);DZo=r(_dt,"not"),_dt.forEach(t),NZo=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vge=n(AW,"CODE",{});var udt=s(vge);qZo=r(udt,"from_pretrained()"),udt.forEach(t),GZo=r(AW,"to load the model weights."),AW.forEach(t),OZo=i(Ol),Tge=n(Ol,"P",{});var bdt=s(Tge);XZo=r(bdt,"Examples:"),bdt.forEach(t),VZo=i(Ol),m(OA.$$.fragment,Ol),Ol.forEach(t),zZo=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(XA.$$.fragment,_a),WZo=i(_a),Fge=n(_a,"P",{});var vdt=s(Fge);QZo=r(vdt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vdt.forEach(t),HZo=i(_a),un=n(_a,"P",{});var w4=s(un);UZo=r(w4,"The model class to instantiate is selected based on the "),Cge=n(w4,"CODE",{});var Tdt=s(Cge);JZo=r(Tdt,"model_type"),Tdt.forEach(t),YZo=r(w4,` property of the config object (either
passed as an argument or loaded from `),Mge=n(w4,"CODE",{});var Fdt=s(Mge);KZo=r(Fdt,"pretrained_model_name_or_path"),Fdt.forEach(t),ZZo=r(w4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(w4,"CODE",{});var Cdt=s(Ege);eer=r(Cdt,"pretrained_model_name_or_path"),Cdt.forEach(t),oer=r(w4,":"),w4.forEach(t),rer=i(_a),H=n(_a,"UL",{});var U=s(H);Wv=n(U,"LI",{});var ILe=s(Wv);yge=n(ILe,"STRONG",{});var Mdt=s(yge);ter=r(Mdt,"albert"),Mdt.forEach(t),aer=r(ILe," \u2014 "),Wq=n(ILe,"A",{href:!0});var Edt=s(Wq);ner=r(Edt,"TFAlbertForPreTraining"),Edt.forEach(t),ser=r(ILe," (ALBERT model)"),ILe.forEach(t),ler=i(U),Qv=n(U,"LI",{});var jLe=s(Qv);wge=n(jLe,"STRONG",{});var ydt=s(wge);ier=r(ydt,"bart"),ydt.forEach(t),der=r(jLe," \u2014 "),Qq=n(jLe,"A",{href:!0});var wdt=s(Qq);cer=r(wdt,"TFBartForConditionalGeneration"),wdt.forEach(t),fer=r(jLe," (BART model)"),jLe.forEach(t),mer=i(U),Hv=n(U,"LI",{});var DLe=s(Hv);Age=n(DLe,"STRONG",{});var Adt=s(Age);ger=r(Adt,"bert"),Adt.forEach(t),her=r(DLe," \u2014 "),Hq=n(DLe,"A",{href:!0});var Ldt=s(Hq);per=r(Ldt,"TFBertForPreTraining"),Ldt.forEach(t),_er=r(DLe," (BERT model)"),DLe.forEach(t),uer=i(U),Uv=n(U,"LI",{});var NLe=s(Uv);Lge=n(NLe,"STRONG",{});var Bdt=s(Lge);ber=r(Bdt,"camembert"),Bdt.forEach(t),ver=r(NLe," \u2014 "),Uq=n(NLe,"A",{href:!0});var xdt=s(Uq);Ter=r(xdt,"TFCamembertForMaskedLM"),xdt.forEach(t),Fer=r(NLe," (CamemBERT model)"),NLe.forEach(t),Cer=i(U),Jv=n(U,"LI",{});var qLe=s(Jv);Bge=n(qLe,"STRONG",{});var kdt=s(Bge);Mer=r(kdt,"ctrl"),kdt.forEach(t),Eer=r(qLe," \u2014 "),Jq=n(qLe,"A",{href:!0});var Rdt=s(Jq);yer=r(Rdt,"TFCTRLLMHeadModel"),Rdt.forEach(t),wer=r(qLe," (CTRL model)"),qLe.forEach(t),Aer=i(U),Yv=n(U,"LI",{});var GLe=s(Yv);xge=n(GLe,"STRONG",{});var Sdt=s(xge);Ler=r(Sdt,"distilbert"),Sdt.forEach(t),Ber=r(GLe," \u2014 "),Yq=n(GLe,"A",{href:!0});var Pdt=s(Yq);xer=r(Pdt,"TFDistilBertForMaskedLM"),Pdt.forEach(t),ker=r(GLe," (DistilBERT model)"),GLe.forEach(t),Rer=i(U),Kv=n(U,"LI",{});var OLe=s(Kv);kge=n(OLe,"STRONG",{});var $dt=s(kge);Ser=r($dt,"electra"),$dt.forEach(t),Per=r(OLe," \u2014 "),Kq=n(OLe,"A",{href:!0});var Idt=s(Kq);$er=r(Idt,"TFElectraForPreTraining"),Idt.forEach(t),Ier=r(OLe," (ELECTRA model)"),OLe.forEach(t),jer=i(U),Zv=n(U,"LI",{});var XLe=s(Zv);Rge=n(XLe,"STRONG",{});var jdt=s(Rge);Der=r(jdt,"flaubert"),jdt.forEach(t),Ner=r(XLe," \u2014 "),Zq=n(XLe,"A",{href:!0});var Ddt=s(Zq);qer=r(Ddt,"TFFlaubertWithLMHeadModel"),Ddt.forEach(t),Ger=r(XLe," (FlauBERT model)"),XLe.forEach(t),Oer=i(U),e6=n(U,"LI",{});var VLe=s(e6);Sge=n(VLe,"STRONG",{});var Ndt=s(Sge);Xer=r(Ndt,"funnel"),Ndt.forEach(t),Ver=r(VLe," \u2014 "),eG=n(VLe,"A",{href:!0});var qdt=s(eG);zer=r(qdt,"TFFunnelForPreTraining"),qdt.forEach(t),Wer=r(VLe," (Funnel Transformer model)"),VLe.forEach(t),Qer=i(U),o6=n(U,"LI",{});var zLe=s(o6);Pge=n(zLe,"STRONG",{});var Gdt=s(Pge);Her=r(Gdt,"gpt2"),Gdt.forEach(t),Uer=r(zLe," \u2014 "),oG=n(zLe,"A",{href:!0});var Odt=s(oG);Jer=r(Odt,"TFGPT2LMHeadModel"),Odt.forEach(t),Yer=r(zLe," (OpenAI GPT-2 model)"),zLe.forEach(t),Ker=i(U),r6=n(U,"LI",{});var WLe=s(r6);$ge=n(WLe,"STRONG",{});var Xdt=s($ge);Zer=r(Xdt,"layoutlm"),Xdt.forEach(t),eor=r(WLe," \u2014 "),rG=n(WLe,"A",{href:!0});var Vdt=s(rG);oor=r(Vdt,"TFLayoutLMForMaskedLM"),Vdt.forEach(t),ror=r(WLe," (LayoutLM model)"),WLe.forEach(t),tor=i(U),t6=n(U,"LI",{});var QLe=s(t6);Ige=n(QLe,"STRONG",{});var zdt=s(Ige);aor=r(zdt,"lxmert"),zdt.forEach(t),nor=r(QLe," \u2014 "),tG=n(QLe,"A",{href:!0});var Wdt=s(tG);sor=r(Wdt,"TFLxmertForPreTraining"),Wdt.forEach(t),lor=r(QLe," (LXMERT model)"),QLe.forEach(t),ior=i(U),a6=n(U,"LI",{});var HLe=s(a6);jge=n(HLe,"STRONG",{});var Qdt=s(jge);dor=r(Qdt,"mobilebert"),Qdt.forEach(t),cor=r(HLe," \u2014 "),aG=n(HLe,"A",{href:!0});var Hdt=s(aG);mor=r(Hdt,"TFMobileBertForPreTraining"),Hdt.forEach(t),gor=r(HLe," (MobileBERT model)"),HLe.forEach(t),hor=i(U),n6=n(U,"LI",{});var ULe=s(n6);Dge=n(ULe,"STRONG",{});var Udt=s(Dge);por=r(Udt,"mpnet"),Udt.forEach(t),_or=r(ULe," \u2014 "),nG=n(ULe,"A",{href:!0});var Jdt=s(nG);uor=r(Jdt,"TFMPNetForMaskedLM"),Jdt.forEach(t),bor=r(ULe," (MPNet model)"),ULe.forEach(t),vor=i(U),s6=n(U,"LI",{});var JLe=s(s6);Nge=n(JLe,"STRONG",{});var Ydt=s(Nge);Tor=r(Ydt,"openai-gpt"),Ydt.forEach(t),For=r(JLe," \u2014 "),sG=n(JLe,"A",{href:!0});var Kdt=s(sG);Cor=r(Kdt,"TFOpenAIGPTLMHeadModel"),Kdt.forEach(t),Mor=r(JLe," (OpenAI GPT model)"),JLe.forEach(t),Eor=i(U),l6=n(U,"LI",{});var YLe=s(l6);qge=n(YLe,"STRONG",{});var Zdt=s(qge);yor=r(Zdt,"roberta"),Zdt.forEach(t),wor=r(YLe," \u2014 "),lG=n(YLe,"A",{href:!0});var ect=s(lG);Aor=r(ect,"TFRobertaForMaskedLM"),ect.forEach(t),Lor=r(YLe," (RoBERTa model)"),YLe.forEach(t),Bor=i(U),i6=n(U,"LI",{});var KLe=s(i6);Gge=n(KLe,"STRONG",{});var oct=s(Gge);xor=r(oct,"t5"),oct.forEach(t),kor=r(KLe," \u2014 "),iG=n(KLe,"A",{href:!0});var rct=s(iG);Ror=r(rct,"TFT5ForConditionalGeneration"),rct.forEach(t),Sor=r(KLe," (T5 model)"),KLe.forEach(t),Por=i(U),d6=n(U,"LI",{});var ZLe=s(d6);Oge=n(ZLe,"STRONG",{});var tct=s(Oge);$or=r(tct,"tapas"),tct.forEach(t),Ior=r(ZLe," \u2014 "),dG=n(ZLe,"A",{href:!0});var act=s(dG);jor=r(act,"TFTapasForMaskedLM"),act.forEach(t),Dor=r(ZLe," (TAPAS model)"),ZLe.forEach(t),Nor=i(U),c6=n(U,"LI",{});var e7e=s(c6);Xge=n(e7e,"STRONG",{});var nct=s(Xge);qor=r(nct,"transfo-xl"),nct.forEach(t),Gor=r(e7e," \u2014 "),cG=n(e7e,"A",{href:!0});var sct=s(cG);Oor=r(sct,"TFTransfoXLLMHeadModel"),sct.forEach(t),Xor=r(e7e," (Transformer-XL model)"),e7e.forEach(t),Vor=i(U),f6=n(U,"LI",{});var o7e=s(f6);Vge=n(o7e,"STRONG",{});var lct=s(Vge);zor=r(lct,"xlm"),lct.forEach(t),Wor=r(o7e," \u2014 "),fG=n(o7e,"A",{href:!0});var ict=s(fG);Qor=r(ict,"TFXLMWithLMHeadModel"),ict.forEach(t),Hor=r(o7e," (XLM model)"),o7e.forEach(t),Uor=i(U),m6=n(U,"LI",{});var r7e=s(m6);zge=n(r7e,"STRONG",{});var dct=s(zge);Jor=r(dct,"xlm-roberta"),dct.forEach(t),Yor=r(r7e," \u2014 "),mG=n(r7e,"A",{href:!0});var cct=s(mG);Kor=r(cct,"TFXLMRobertaForMaskedLM"),cct.forEach(t),Zor=r(r7e," (XLM-RoBERTa model)"),r7e.forEach(t),err=i(U),g6=n(U,"LI",{});var t7e=s(g6);Wge=n(t7e,"STRONG",{});var fct=s(Wge);orr=r(fct,"xlnet"),fct.forEach(t),rrr=r(t7e," \u2014 "),gG=n(t7e,"A",{href:!0});var mct=s(gG);trr=r(mct,"TFXLNetLMHeadModel"),mct.forEach(t),arr=r(t7e," (XLNet model)"),t7e.forEach(t),U.forEach(t),nrr=i(_a),Qge=n(_a,"P",{});var gct=s(Qge);srr=r(gct,"Examples:"),gct.forEach(t),lrr=i(_a),m(VA.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),Ake=i(c),vc=n(c,"H2",{class:!0});var DSe=s(vc);h6=n(DSe,"A",{id:!0,class:!0,href:!0});var hct=s(h6);Hge=n(hct,"SPAN",{});var pct=s(Hge);m(zA.$$.fragment,pct),pct.forEach(t),hct.forEach(t),irr=i(DSe),Uge=n(DSe,"SPAN",{});var _ct=s(Uge);drr=r(_ct,"TFAutoModelForCausalLM"),_ct.forEach(t),DSe.forEach(t),Lke=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(WA.$$.fragment,Xl),crr=i(Xl),Tc=n(Xl,"P",{});var LW=s(Tc);frr=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Jge=n(LW,"CODE",{});var uct=s(Jge);mrr=r(uct,"from_pretrained()"),uct.forEach(t),grr=r(LW,"class method or the "),Yge=n(LW,"CODE",{});var bct=s(Yge);hrr=r(bct,"from_config()"),bct.forEach(t),prr=r(LW,`class
method.`),LW.forEach(t),_rr=i(Xl),QA=n(Xl,"P",{});var NSe=s(QA);urr=r(NSe,"This class cannot be instantiated directly using "),Kge=n(NSe,"CODE",{});var vct=s(Kge);brr=r(vct,"__init__()"),vct.forEach(t),vrr=r(NSe," (throws an error)."),NSe.forEach(t),Trr=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(HA.$$.fragment,Vl),Frr=i(Vl),Zge=n(Vl,"P",{});var Tct=s(Zge);Crr=r(Tct,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Tct.forEach(t),Mrr=i(Vl),Fc=n(Vl,"P",{});var BW=s(Fc);Err=r(BW,`Note:
Loading a model from its configuration file does `),ehe=n(BW,"STRONG",{});var Fct=s(ehe);yrr=r(Fct,"not"),Fct.forEach(t),wrr=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ohe=n(BW,"CODE",{});var Cct=s(ohe);Arr=r(Cct,"from_pretrained()"),Cct.forEach(t),Lrr=r(BW,"to load the model weights."),BW.forEach(t),Brr=i(Vl),rhe=n(Vl,"P",{});var Mct=s(rhe);xrr=r(Mct,"Examples:"),Mct.forEach(t),krr=i(Vl),m(UA.$$.fragment,Vl),Vl.forEach(t),Rrr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(JA.$$.fragment,ua),Srr=i(ua),the=n(ua,"P",{});var Ect=s(the);Prr=r(Ect,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ect.forEach(t),$rr=i(ua),bn=n(ua,"P",{});var A4=s(bn);Irr=r(A4,"The model class to instantiate is selected based on the "),ahe=n(A4,"CODE",{});var yct=s(ahe);jrr=r(yct,"model_type"),yct.forEach(t),Drr=r(A4,` property of the config object (either
passed as an argument or loaded from `),nhe=n(A4,"CODE",{});var wct=s(nhe);Nrr=r(wct,"pretrained_model_name_or_path"),wct.forEach(t),qrr=r(A4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=n(A4,"CODE",{});var Act=s(she);Grr=r(Act,"pretrained_model_name_or_path"),Act.forEach(t),Orr=r(A4,":"),A4.forEach(t),Xrr=i(ua),me=n(ua,"UL",{});var Te=s(me);p6=n(Te,"LI",{});var a7e=s(p6);lhe=n(a7e,"STRONG",{});var Lct=s(lhe);Vrr=r(Lct,"bert"),Lct.forEach(t),zrr=r(a7e," \u2014 "),hG=n(a7e,"A",{href:!0});var Bct=s(hG);Wrr=r(Bct,"TFBertLMHeadModel"),Bct.forEach(t),Qrr=r(a7e," (BERT model)"),a7e.forEach(t),Hrr=i(Te),_6=n(Te,"LI",{});var n7e=s(_6);ihe=n(n7e,"STRONG",{});var xct=s(ihe);Urr=r(xct,"ctrl"),xct.forEach(t),Jrr=r(n7e," \u2014 "),pG=n(n7e,"A",{href:!0});var kct=s(pG);Yrr=r(kct,"TFCTRLLMHeadModel"),kct.forEach(t),Krr=r(n7e," (CTRL model)"),n7e.forEach(t),Zrr=i(Te),u6=n(Te,"LI",{});var s7e=s(u6);dhe=n(s7e,"STRONG",{});var Rct=s(dhe);etr=r(Rct,"gpt2"),Rct.forEach(t),otr=r(s7e," \u2014 "),_G=n(s7e,"A",{href:!0});var Sct=s(_G);rtr=r(Sct,"TFGPT2LMHeadModel"),Sct.forEach(t),ttr=r(s7e," (OpenAI GPT-2 model)"),s7e.forEach(t),atr=i(Te),b6=n(Te,"LI",{});var l7e=s(b6);che=n(l7e,"STRONG",{});var Pct=s(che);ntr=r(Pct,"gptj"),Pct.forEach(t),str=r(l7e," \u2014 "),uG=n(l7e,"A",{href:!0});var $ct=s(uG);ltr=r($ct,"TFGPTJForCausalLM"),$ct.forEach(t),itr=r(l7e," (GPT-J model)"),l7e.forEach(t),dtr=i(Te),v6=n(Te,"LI",{});var i7e=s(v6);fhe=n(i7e,"STRONG",{});var Ict=s(fhe);ctr=r(Ict,"openai-gpt"),Ict.forEach(t),ftr=r(i7e," \u2014 "),bG=n(i7e,"A",{href:!0});var jct=s(bG);mtr=r(jct,"TFOpenAIGPTLMHeadModel"),jct.forEach(t),gtr=r(i7e," (OpenAI GPT model)"),i7e.forEach(t),htr=i(Te),T6=n(Te,"LI",{});var d7e=s(T6);mhe=n(d7e,"STRONG",{});var Dct=s(mhe);ptr=r(Dct,"rembert"),Dct.forEach(t),_tr=r(d7e," \u2014 "),vG=n(d7e,"A",{href:!0});var Nct=s(vG);utr=r(Nct,"TFRemBertForCausalLM"),Nct.forEach(t),btr=r(d7e," (RemBERT model)"),d7e.forEach(t),vtr=i(Te),F6=n(Te,"LI",{});var c7e=s(F6);ghe=n(c7e,"STRONG",{});var qct=s(ghe);Ttr=r(qct,"roberta"),qct.forEach(t),Ftr=r(c7e," \u2014 "),TG=n(c7e,"A",{href:!0});var Gct=s(TG);Ctr=r(Gct,"TFRobertaForCausalLM"),Gct.forEach(t),Mtr=r(c7e," (RoBERTa model)"),c7e.forEach(t),Etr=i(Te),C6=n(Te,"LI",{});var f7e=s(C6);hhe=n(f7e,"STRONG",{});var Oct=s(hhe);ytr=r(Oct,"roformer"),Oct.forEach(t),wtr=r(f7e," \u2014 "),FG=n(f7e,"A",{href:!0});var Xct=s(FG);Atr=r(Xct,"TFRoFormerForCausalLM"),Xct.forEach(t),Ltr=r(f7e," (RoFormer model)"),f7e.forEach(t),Btr=i(Te),M6=n(Te,"LI",{});var m7e=s(M6);phe=n(m7e,"STRONG",{});var Vct=s(phe);xtr=r(Vct,"transfo-xl"),Vct.forEach(t),ktr=r(m7e," \u2014 "),CG=n(m7e,"A",{href:!0});var zct=s(CG);Rtr=r(zct,"TFTransfoXLLMHeadModel"),zct.forEach(t),Str=r(m7e," (Transformer-XL model)"),m7e.forEach(t),Ptr=i(Te),E6=n(Te,"LI",{});var g7e=s(E6);_he=n(g7e,"STRONG",{});var Wct=s(_he);$tr=r(Wct,"xlm"),Wct.forEach(t),Itr=r(g7e," \u2014 "),MG=n(g7e,"A",{href:!0});var Qct=s(MG);jtr=r(Qct,"TFXLMWithLMHeadModel"),Qct.forEach(t),Dtr=r(g7e," (XLM model)"),g7e.forEach(t),Ntr=i(Te),y6=n(Te,"LI",{});var h7e=s(y6);uhe=n(h7e,"STRONG",{});var Hct=s(uhe);qtr=r(Hct,"xlnet"),Hct.forEach(t),Gtr=r(h7e," \u2014 "),EG=n(h7e,"A",{href:!0});var Uct=s(EG);Otr=r(Uct,"TFXLNetLMHeadModel"),Uct.forEach(t),Xtr=r(h7e," (XLNet model)"),h7e.forEach(t),Te.forEach(t),Vtr=i(ua),bhe=n(ua,"P",{});var Jct=s(bhe);ztr=r(Jct,"Examples:"),Jct.forEach(t),Wtr=i(ua),m(YA.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),Bke=i(c),Cc=n(c,"H2",{class:!0});var qSe=s(Cc);w6=n(qSe,"A",{id:!0,class:!0,href:!0});var Yct=s(w6);vhe=n(Yct,"SPAN",{});var Kct=s(vhe);m(KA.$$.fragment,Kct),Kct.forEach(t),Yct.forEach(t),Qtr=i(qSe),The=n(qSe,"SPAN",{});var Zct=s(The);Htr=r(Zct,"TFAutoModelForImageClassification"),Zct.forEach(t),qSe.forEach(t),xke=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(ZA.$$.fragment,zl),Utr=i(zl),Mc=n(zl,"P",{});var xW=s(Mc);Jtr=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Fhe=n(xW,"CODE",{});var eft=s(Fhe);Ytr=r(eft,"from_pretrained()"),eft.forEach(t),Ktr=r(xW,"class method or the "),Che=n(xW,"CODE",{});var oft=s(Che);Ztr=r(oft,"from_config()"),oft.forEach(t),ear=r(xW,`class
method.`),xW.forEach(t),oar=i(zl),e0=n(zl,"P",{});var GSe=s(e0);rar=r(GSe,"This class cannot be instantiated directly using "),Mhe=n(GSe,"CODE",{});var rft=s(Mhe);tar=r(rft,"__init__()"),rft.forEach(t),aar=r(GSe," (throws an error)."),GSe.forEach(t),nar=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(o0.$$.fragment,Wl),sar=i(Wl),Ehe=n(Wl,"P",{});var tft=s(Ehe);lar=r(tft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tft.forEach(t),iar=i(Wl),Ec=n(Wl,"P",{});var kW=s(Ec);dar=r(kW,`Note:
Loading a model from its configuration file does `),yhe=n(kW,"STRONG",{});var aft=s(yhe);car=r(aft,"not"),aft.forEach(t),far=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),whe=n(kW,"CODE",{});var nft=s(whe);mar=r(nft,"from_pretrained()"),nft.forEach(t),gar=r(kW,"to load the model weights."),kW.forEach(t),har=i(Wl),Ahe=n(Wl,"P",{});var sft=s(Ahe);par=r(sft,"Examples:"),sft.forEach(t),_ar=i(Wl),m(r0.$$.fragment,Wl),Wl.forEach(t),uar=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(t0.$$.fragment,ba),bar=i(ba),Lhe=n(ba,"P",{});var lft=s(Lhe);Tar=r(lft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lft.forEach(t),Far=i(ba),vn=n(ba,"P",{});var L4=s(vn);Car=r(L4,"The model class to instantiate is selected based on the "),Bhe=n(L4,"CODE",{});var ift=s(Bhe);Mar=r(ift,"model_type"),ift.forEach(t),Ear=r(L4,` property of the config object (either
passed as an argument or loaded from `),xhe=n(L4,"CODE",{});var dft=s(xhe);yar=r(dft,"pretrained_model_name_or_path"),dft.forEach(t),war=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),khe=n(L4,"CODE",{});var cft=s(khe);Aar=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),Lar=r(L4,":"),L4.forEach(t),Bar=i(ba),a0=n(ba,"UL",{});var OSe=s(a0);A6=n(OSe,"LI",{});var p7e=s(A6);Rhe=n(p7e,"STRONG",{});var fft=s(Rhe);xar=r(fft,"convnext"),fft.forEach(t),kar=r(p7e," \u2014 "),yG=n(p7e,"A",{href:!0});var mft=s(yG);Rar=r(mft,"TFConvNextForImageClassification"),mft.forEach(t),Sar=r(p7e," (ConvNext model)"),p7e.forEach(t),Par=i(OSe),L6=n(OSe,"LI",{});var _7e=s(L6);She=n(_7e,"STRONG",{});var gft=s(She);$ar=r(gft,"vit"),gft.forEach(t),Iar=r(_7e," \u2014 "),wG=n(_7e,"A",{href:!0});var hft=s(wG);jar=r(hft,"TFViTForImageClassification"),hft.forEach(t),Dar=r(_7e," (ViT model)"),_7e.forEach(t),OSe.forEach(t),Nar=i(ba),Phe=n(ba,"P",{});var pft=s(Phe);qar=r(pft,"Examples:"),pft.forEach(t),Gar=i(ba),m(n0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),kke=i(c),yc=n(c,"H2",{class:!0});var XSe=s(yc);B6=n(XSe,"A",{id:!0,class:!0,href:!0});var _ft=s(B6);$he=n(_ft,"SPAN",{});var uft=s($he);m(s0.$$.fragment,uft),uft.forEach(t),_ft.forEach(t),Oar=i(XSe),Ihe=n(XSe,"SPAN",{});var bft=s(Ihe);Xar=r(bft,"TFAutoModelForMaskedLM"),bft.forEach(t),XSe.forEach(t),Rke=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(l0.$$.fragment,Ql),Var=i(Ql),wc=n(Ql,"P",{});var RW=s(wc);zar=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jhe=n(RW,"CODE",{});var vft=s(jhe);War=r(vft,"from_pretrained()"),vft.forEach(t),Qar=r(RW,"class method or the "),Dhe=n(RW,"CODE",{});var Tft=s(Dhe);Har=r(Tft,"from_config()"),Tft.forEach(t),Uar=r(RW,`class
method.`),RW.forEach(t),Jar=i(Ql),i0=n(Ql,"P",{});var VSe=s(i0);Yar=r(VSe,"This class cannot be instantiated directly using "),Nhe=n(VSe,"CODE",{});var Fft=s(Nhe);Kar=r(Fft,"__init__()"),Fft.forEach(t),Zar=r(VSe," (throws an error)."),VSe.forEach(t),enr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(d0.$$.fragment,Hl),onr=i(Hl),qhe=n(Hl,"P",{});var Cft=s(qhe);rnr=r(Cft,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cft.forEach(t),tnr=i(Hl),Ac=n(Hl,"P",{});var SW=s(Ac);anr=r(SW,`Note:
Loading a model from its configuration file does `),Ghe=n(SW,"STRONG",{});var Mft=s(Ghe);nnr=r(Mft,"not"),Mft.forEach(t),snr=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ohe=n(SW,"CODE",{});var Eft=s(Ohe);lnr=r(Eft,"from_pretrained()"),Eft.forEach(t),inr=r(SW,"to load the model weights."),SW.forEach(t),dnr=i(Hl),Xhe=n(Hl,"P",{});var yft=s(Xhe);cnr=r(yft,"Examples:"),yft.forEach(t),fnr=i(Hl),m(c0.$$.fragment,Hl),Hl.forEach(t),mnr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(f0.$$.fragment,va),gnr=i(va),Vhe=n(va,"P",{});var wft=s(Vhe);hnr=r(wft,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wft.forEach(t),pnr=i(va),Tn=n(va,"P",{});var B4=s(Tn);_nr=r(B4,"The model class to instantiate is selected based on the "),zhe=n(B4,"CODE",{});var Aft=s(zhe);unr=r(Aft,"model_type"),Aft.forEach(t),bnr=r(B4,` property of the config object (either
passed as an argument or loaded from `),Whe=n(B4,"CODE",{});var Lft=s(Whe);vnr=r(Lft,"pretrained_model_name_or_path"),Lft.forEach(t),Tnr=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(B4,"CODE",{});var Bft=s(Qhe);Fnr=r(Bft,"pretrained_model_name_or_path"),Bft.forEach(t),Cnr=r(B4,":"),B4.forEach(t),Mnr=i(va),Y=n(va,"UL",{});var ee=s(Y);x6=n(ee,"LI",{});var u7e=s(x6);Hhe=n(u7e,"STRONG",{});var xft=s(Hhe);Enr=r(xft,"albert"),xft.forEach(t),ynr=r(u7e," \u2014 "),AG=n(u7e,"A",{href:!0});var kft=s(AG);wnr=r(kft,"TFAlbertForMaskedLM"),kft.forEach(t),Anr=r(u7e," (ALBERT model)"),u7e.forEach(t),Lnr=i(ee),k6=n(ee,"LI",{});var b7e=s(k6);Uhe=n(b7e,"STRONG",{});var Rft=s(Uhe);Bnr=r(Rft,"bert"),Rft.forEach(t),xnr=r(b7e," \u2014 "),LG=n(b7e,"A",{href:!0});var Sft=s(LG);knr=r(Sft,"TFBertForMaskedLM"),Sft.forEach(t),Rnr=r(b7e," (BERT model)"),b7e.forEach(t),Snr=i(ee),R6=n(ee,"LI",{});var v7e=s(R6);Jhe=n(v7e,"STRONG",{});var Pft=s(Jhe);Pnr=r(Pft,"camembert"),Pft.forEach(t),$nr=r(v7e," \u2014 "),BG=n(v7e,"A",{href:!0});var $ft=s(BG);Inr=r($ft,"TFCamembertForMaskedLM"),$ft.forEach(t),jnr=r(v7e," (CamemBERT model)"),v7e.forEach(t),Dnr=i(ee),S6=n(ee,"LI",{});var T7e=s(S6);Yhe=n(T7e,"STRONG",{});var Ift=s(Yhe);Nnr=r(Ift,"convbert"),Ift.forEach(t),qnr=r(T7e," \u2014 "),xG=n(T7e,"A",{href:!0});var jft=s(xG);Gnr=r(jft,"TFConvBertForMaskedLM"),jft.forEach(t),Onr=r(T7e," (ConvBERT model)"),T7e.forEach(t),Xnr=i(ee),P6=n(ee,"LI",{});var F7e=s(P6);Khe=n(F7e,"STRONG",{});var Dft=s(Khe);Vnr=r(Dft,"deberta"),Dft.forEach(t),znr=r(F7e," \u2014 "),kG=n(F7e,"A",{href:!0});var Nft=s(kG);Wnr=r(Nft,"TFDebertaForMaskedLM"),Nft.forEach(t),Qnr=r(F7e," (DeBERTa model)"),F7e.forEach(t),Hnr=i(ee),$6=n(ee,"LI",{});var C7e=s($6);Zhe=n(C7e,"STRONG",{});var qft=s(Zhe);Unr=r(qft,"deberta-v2"),qft.forEach(t),Jnr=r(C7e," \u2014 "),RG=n(C7e,"A",{href:!0});var Gft=s(RG);Ynr=r(Gft,"TFDebertaV2ForMaskedLM"),Gft.forEach(t),Knr=r(C7e," (DeBERTa-v2 model)"),C7e.forEach(t),Znr=i(ee),I6=n(ee,"LI",{});var M7e=s(I6);epe=n(M7e,"STRONG",{});var Oft=s(epe);esr=r(Oft,"distilbert"),Oft.forEach(t),osr=r(M7e," \u2014 "),SG=n(M7e,"A",{href:!0});var Xft=s(SG);rsr=r(Xft,"TFDistilBertForMaskedLM"),Xft.forEach(t),tsr=r(M7e," (DistilBERT model)"),M7e.forEach(t),asr=i(ee),j6=n(ee,"LI",{});var E7e=s(j6);ope=n(E7e,"STRONG",{});var Vft=s(ope);nsr=r(Vft,"electra"),Vft.forEach(t),ssr=r(E7e," \u2014 "),PG=n(E7e,"A",{href:!0});var zft=s(PG);lsr=r(zft,"TFElectraForMaskedLM"),zft.forEach(t),isr=r(E7e," (ELECTRA model)"),E7e.forEach(t),dsr=i(ee),D6=n(ee,"LI",{});var y7e=s(D6);rpe=n(y7e,"STRONG",{});var Wft=s(rpe);csr=r(Wft,"flaubert"),Wft.forEach(t),fsr=r(y7e," \u2014 "),$G=n(y7e,"A",{href:!0});var Qft=s($G);msr=r(Qft,"TFFlaubertWithLMHeadModel"),Qft.forEach(t),gsr=r(y7e," (FlauBERT model)"),y7e.forEach(t),hsr=i(ee),N6=n(ee,"LI",{});var w7e=s(N6);tpe=n(w7e,"STRONG",{});var Hft=s(tpe);psr=r(Hft,"funnel"),Hft.forEach(t),_sr=r(w7e," \u2014 "),IG=n(w7e,"A",{href:!0});var Uft=s(IG);usr=r(Uft,"TFFunnelForMaskedLM"),Uft.forEach(t),bsr=r(w7e," (Funnel Transformer model)"),w7e.forEach(t),vsr=i(ee),q6=n(ee,"LI",{});var A7e=s(q6);ape=n(A7e,"STRONG",{});var Jft=s(ape);Tsr=r(Jft,"layoutlm"),Jft.forEach(t),Fsr=r(A7e," \u2014 "),jG=n(A7e,"A",{href:!0});var Yft=s(jG);Csr=r(Yft,"TFLayoutLMForMaskedLM"),Yft.forEach(t),Msr=r(A7e," (LayoutLM model)"),A7e.forEach(t),Esr=i(ee),G6=n(ee,"LI",{});var L7e=s(G6);npe=n(L7e,"STRONG",{});var Kft=s(npe);ysr=r(Kft,"longformer"),Kft.forEach(t),wsr=r(L7e," \u2014 "),DG=n(L7e,"A",{href:!0});var Zft=s(DG);Asr=r(Zft,"TFLongformerForMaskedLM"),Zft.forEach(t),Lsr=r(L7e," (Longformer model)"),L7e.forEach(t),Bsr=i(ee),O6=n(ee,"LI",{});var B7e=s(O6);spe=n(B7e,"STRONG",{});var emt=s(spe);xsr=r(emt,"mobilebert"),emt.forEach(t),ksr=r(B7e," \u2014 "),NG=n(B7e,"A",{href:!0});var omt=s(NG);Rsr=r(omt,"TFMobileBertForMaskedLM"),omt.forEach(t),Ssr=r(B7e," (MobileBERT model)"),B7e.forEach(t),Psr=i(ee),X6=n(ee,"LI",{});var x7e=s(X6);lpe=n(x7e,"STRONG",{});var rmt=s(lpe);$sr=r(rmt,"mpnet"),rmt.forEach(t),Isr=r(x7e," \u2014 "),qG=n(x7e,"A",{href:!0});var tmt=s(qG);jsr=r(tmt,"TFMPNetForMaskedLM"),tmt.forEach(t),Dsr=r(x7e," (MPNet model)"),x7e.forEach(t),Nsr=i(ee),V6=n(ee,"LI",{});var k7e=s(V6);ipe=n(k7e,"STRONG",{});var amt=s(ipe);qsr=r(amt,"rembert"),amt.forEach(t),Gsr=r(k7e," \u2014 "),GG=n(k7e,"A",{href:!0});var nmt=s(GG);Osr=r(nmt,"TFRemBertForMaskedLM"),nmt.forEach(t),Xsr=r(k7e," (RemBERT model)"),k7e.forEach(t),Vsr=i(ee),z6=n(ee,"LI",{});var R7e=s(z6);dpe=n(R7e,"STRONG",{});var smt=s(dpe);zsr=r(smt,"roberta"),smt.forEach(t),Wsr=r(R7e," \u2014 "),OG=n(R7e,"A",{href:!0});var lmt=s(OG);Qsr=r(lmt,"TFRobertaForMaskedLM"),lmt.forEach(t),Hsr=r(R7e," (RoBERTa model)"),R7e.forEach(t),Usr=i(ee),W6=n(ee,"LI",{});var S7e=s(W6);cpe=n(S7e,"STRONG",{});var imt=s(cpe);Jsr=r(imt,"roformer"),imt.forEach(t),Ysr=r(S7e," \u2014 "),XG=n(S7e,"A",{href:!0});var dmt=s(XG);Ksr=r(dmt,"TFRoFormerForMaskedLM"),dmt.forEach(t),Zsr=r(S7e," (RoFormer model)"),S7e.forEach(t),elr=i(ee),Q6=n(ee,"LI",{});var P7e=s(Q6);fpe=n(P7e,"STRONG",{});var cmt=s(fpe);olr=r(cmt,"tapas"),cmt.forEach(t),rlr=r(P7e," \u2014 "),VG=n(P7e,"A",{href:!0});var fmt=s(VG);tlr=r(fmt,"TFTapasForMaskedLM"),fmt.forEach(t),alr=r(P7e," (TAPAS model)"),P7e.forEach(t),nlr=i(ee),H6=n(ee,"LI",{});var $7e=s(H6);mpe=n($7e,"STRONG",{});var mmt=s(mpe);slr=r(mmt,"xlm"),mmt.forEach(t),llr=r($7e," \u2014 "),zG=n($7e,"A",{href:!0});var gmt=s(zG);ilr=r(gmt,"TFXLMWithLMHeadModel"),gmt.forEach(t),dlr=r($7e," (XLM model)"),$7e.forEach(t),clr=i(ee),U6=n(ee,"LI",{});var I7e=s(U6);gpe=n(I7e,"STRONG",{});var hmt=s(gpe);flr=r(hmt,"xlm-roberta"),hmt.forEach(t),mlr=r(I7e," \u2014 "),WG=n(I7e,"A",{href:!0});var pmt=s(WG);glr=r(pmt,"TFXLMRobertaForMaskedLM"),pmt.forEach(t),hlr=r(I7e," (XLM-RoBERTa model)"),I7e.forEach(t),ee.forEach(t),plr=i(va),hpe=n(va,"P",{});var _mt=s(hpe);_lr=r(_mt,"Examples:"),_mt.forEach(t),ulr=i(va),m(m0.$$.fragment,va),va.forEach(t),Ql.forEach(t),Ske=i(c),Lc=n(c,"H2",{class:!0});var zSe=s(Lc);J6=n(zSe,"A",{id:!0,class:!0,href:!0});var umt=s(J6);ppe=n(umt,"SPAN",{});var bmt=s(ppe);m(g0.$$.fragment,bmt),bmt.forEach(t),umt.forEach(t),blr=i(zSe),_pe=n(zSe,"SPAN",{});var vmt=s(_pe);vlr=r(vmt,"TFAutoModelForSeq2SeqLM"),vmt.forEach(t),zSe.forEach(t),Pke=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(h0.$$.fragment,Ul),Tlr=i(Ul),Bc=n(Ul,"P",{});var PW=s(Bc);Flr=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),upe=n(PW,"CODE",{});var Tmt=s(upe);Clr=r(Tmt,"from_pretrained()"),Tmt.forEach(t),Mlr=r(PW,"class method or the "),bpe=n(PW,"CODE",{});var Fmt=s(bpe);Elr=r(Fmt,"from_config()"),Fmt.forEach(t),ylr=r(PW,`class
method.`),PW.forEach(t),wlr=i(Ul),p0=n(Ul,"P",{});var WSe=s(p0);Alr=r(WSe,"This class cannot be instantiated directly using "),vpe=n(WSe,"CODE",{});var Cmt=s(vpe);Llr=r(Cmt,"__init__()"),Cmt.forEach(t),Blr=r(WSe," (throws an error)."),WSe.forEach(t),xlr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(_0.$$.fragment,Jl),klr=i(Jl),Tpe=n(Jl,"P",{});var Mmt=s(Tpe);Rlr=r(Mmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Mmt.forEach(t),Slr=i(Jl),xc=n(Jl,"P",{});var $W=s(xc);Plr=r($W,`Note:
Loading a model from its configuration file does `),Fpe=n($W,"STRONG",{});var Emt=s(Fpe);$lr=r(Emt,"not"),Emt.forEach(t),Ilr=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cpe=n($W,"CODE",{});var ymt=s(Cpe);jlr=r(ymt,"from_pretrained()"),ymt.forEach(t),Dlr=r($W,"to load the model weights."),$W.forEach(t),Nlr=i(Jl),Mpe=n(Jl,"P",{});var wmt=s(Mpe);qlr=r(wmt,"Examples:"),wmt.forEach(t),Glr=i(Jl),m(u0.$$.fragment,Jl),Jl.forEach(t),Olr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(b0.$$.fragment,Ta),Xlr=i(Ta),Epe=n(Ta,"P",{});var Amt=s(Epe);Vlr=r(Amt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Amt.forEach(t),zlr=i(Ta),Fn=n(Ta,"P",{});var x4=s(Fn);Wlr=r(x4,"The model class to instantiate is selected based on the "),ype=n(x4,"CODE",{});var Lmt=s(ype);Qlr=r(Lmt,"model_type"),Lmt.forEach(t),Hlr=r(x4,` property of the config object (either
passed as an argument or loaded from `),wpe=n(x4,"CODE",{});var Bmt=s(wpe);Ulr=r(Bmt,"pretrained_model_name_or_path"),Bmt.forEach(t),Jlr=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=n(x4,"CODE",{});var xmt=s(Ape);Ylr=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),Klr=r(x4,":"),x4.forEach(t),Zlr=i(Ta),_e=n(Ta,"UL",{});var Ee=s(_e);Y6=n(Ee,"LI",{});var j7e=s(Y6);Lpe=n(j7e,"STRONG",{});var kmt=s(Lpe);eir=r(kmt,"bart"),kmt.forEach(t),oir=r(j7e," \u2014 "),QG=n(j7e,"A",{href:!0});var Rmt=s(QG);rir=r(Rmt,"TFBartForConditionalGeneration"),Rmt.forEach(t),tir=r(j7e," (BART model)"),j7e.forEach(t),air=i(Ee),K6=n(Ee,"LI",{});var D7e=s(K6);Bpe=n(D7e,"STRONG",{});var Smt=s(Bpe);nir=r(Smt,"blenderbot"),Smt.forEach(t),sir=r(D7e," \u2014 "),HG=n(D7e,"A",{href:!0});var Pmt=s(HG);lir=r(Pmt,"TFBlenderbotForConditionalGeneration"),Pmt.forEach(t),iir=r(D7e," (Blenderbot model)"),D7e.forEach(t),dir=i(Ee),Z6=n(Ee,"LI",{});var N7e=s(Z6);xpe=n(N7e,"STRONG",{});var $mt=s(xpe);cir=r($mt,"blenderbot-small"),$mt.forEach(t),fir=r(N7e," \u2014 "),UG=n(N7e,"A",{href:!0});var Imt=s(UG);mir=r(Imt,"TFBlenderbotSmallForConditionalGeneration"),Imt.forEach(t),gir=r(N7e," (BlenderbotSmall model)"),N7e.forEach(t),hir=i(Ee),eT=n(Ee,"LI",{});var q7e=s(eT);kpe=n(q7e,"STRONG",{});var jmt=s(kpe);pir=r(jmt,"encoder-decoder"),jmt.forEach(t),_ir=r(q7e," \u2014 "),JG=n(q7e,"A",{href:!0});var Dmt=s(JG);uir=r(Dmt,"TFEncoderDecoderModel"),Dmt.forEach(t),bir=r(q7e," (Encoder decoder model)"),q7e.forEach(t),vir=i(Ee),oT=n(Ee,"LI",{});var G7e=s(oT);Rpe=n(G7e,"STRONG",{});var Nmt=s(Rpe);Tir=r(Nmt,"led"),Nmt.forEach(t),Fir=r(G7e," \u2014 "),YG=n(G7e,"A",{href:!0});var qmt=s(YG);Cir=r(qmt,"TFLEDForConditionalGeneration"),qmt.forEach(t),Mir=r(G7e," (LED model)"),G7e.forEach(t),Eir=i(Ee),rT=n(Ee,"LI",{});var O7e=s(rT);Spe=n(O7e,"STRONG",{});var Gmt=s(Spe);yir=r(Gmt,"marian"),Gmt.forEach(t),wir=r(O7e," \u2014 "),KG=n(O7e,"A",{href:!0});var Omt=s(KG);Air=r(Omt,"TFMarianMTModel"),Omt.forEach(t),Lir=r(O7e," (Marian model)"),O7e.forEach(t),Bir=i(Ee),tT=n(Ee,"LI",{});var X7e=s(tT);Ppe=n(X7e,"STRONG",{});var Xmt=s(Ppe);xir=r(Xmt,"mbart"),Xmt.forEach(t),kir=r(X7e," \u2014 "),ZG=n(X7e,"A",{href:!0});var Vmt=s(ZG);Rir=r(Vmt,"TFMBartForConditionalGeneration"),Vmt.forEach(t),Sir=r(X7e," (mBART model)"),X7e.forEach(t),Pir=i(Ee),aT=n(Ee,"LI",{});var V7e=s(aT);$pe=n(V7e,"STRONG",{});var zmt=s($pe);$ir=r(zmt,"mt5"),zmt.forEach(t),Iir=r(V7e," \u2014 "),eO=n(V7e,"A",{href:!0});var Wmt=s(eO);jir=r(Wmt,"TFMT5ForConditionalGeneration"),Wmt.forEach(t),Dir=r(V7e," (mT5 model)"),V7e.forEach(t),Nir=i(Ee),nT=n(Ee,"LI",{});var z7e=s(nT);Ipe=n(z7e,"STRONG",{});var Qmt=s(Ipe);qir=r(Qmt,"pegasus"),Qmt.forEach(t),Gir=r(z7e," \u2014 "),oO=n(z7e,"A",{href:!0});var Hmt=s(oO);Oir=r(Hmt,"TFPegasusForConditionalGeneration"),Hmt.forEach(t),Xir=r(z7e," (Pegasus model)"),z7e.forEach(t),Vir=i(Ee),sT=n(Ee,"LI",{});var W7e=s(sT);jpe=n(W7e,"STRONG",{});var Umt=s(jpe);zir=r(Umt,"t5"),Umt.forEach(t),Wir=r(W7e," \u2014 "),rO=n(W7e,"A",{href:!0});var Jmt=s(rO);Qir=r(Jmt,"TFT5ForConditionalGeneration"),Jmt.forEach(t),Hir=r(W7e," (T5 model)"),W7e.forEach(t),Ee.forEach(t),Uir=i(Ta),Dpe=n(Ta,"P",{});var Ymt=s(Dpe);Jir=r(Ymt,"Examples:"),Ymt.forEach(t),Yir=i(Ta),m(v0.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),$ke=i(c),kc=n(c,"H2",{class:!0});var QSe=s(kc);lT=n(QSe,"A",{id:!0,class:!0,href:!0});var Kmt=s(lT);Npe=n(Kmt,"SPAN",{});var Zmt=s(Npe);m(T0.$$.fragment,Zmt),Zmt.forEach(t),Kmt.forEach(t),Kir=i(QSe),qpe=n(QSe,"SPAN",{});var egt=s(qpe);Zir=r(egt,"TFAutoModelForSequenceClassification"),egt.forEach(t),QSe.forEach(t),Ike=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(F0.$$.fragment,Yl),edr=i(Yl),Rc=n(Yl,"P",{});var IW=s(Rc);odr=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Gpe=n(IW,"CODE",{});var ogt=s(Gpe);rdr=r(ogt,"from_pretrained()"),ogt.forEach(t),tdr=r(IW,"class method or the "),Ope=n(IW,"CODE",{});var rgt=s(Ope);adr=r(rgt,"from_config()"),rgt.forEach(t),ndr=r(IW,`class
method.`),IW.forEach(t),sdr=i(Yl),C0=n(Yl,"P",{});var HSe=s(C0);ldr=r(HSe,"This class cannot be instantiated directly using "),Xpe=n(HSe,"CODE",{});var tgt=s(Xpe);idr=r(tgt,"__init__()"),tgt.forEach(t),ddr=r(HSe," (throws an error)."),HSe.forEach(t),cdr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(M0.$$.fragment,Kl),fdr=i(Kl),Vpe=n(Kl,"P",{});var agt=s(Vpe);mdr=r(agt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),agt.forEach(t),gdr=i(Kl),Sc=n(Kl,"P",{});var jW=s(Sc);hdr=r(jW,`Note:
Loading a model from its configuration file does `),zpe=n(jW,"STRONG",{});var ngt=s(zpe);pdr=r(ngt,"not"),ngt.forEach(t),_dr=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wpe=n(jW,"CODE",{});var sgt=s(Wpe);udr=r(sgt,"from_pretrained()"),sgt.forEach(t),bdr=r(jW,"to load the model weights."),jW.forEach(t),vdr=i(Kl),Qpe=n(Kl,"P",{});var lgt=s(Qpe);Tdr=r(lgt,"Examples:"),lgt.forEach(t),Fdr=i(Kl),m(E0.$$.fragment,Kl),Kl.forEach(t),Cdr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(y0.$$.fragment,Fa),Mdr=i(Fa),Hpe=n(Fa,"P",{});var igt=s(Hpe);Edr=r(igt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),igt.forEach(t),ydr=i(Fa),Cn=n(Fa,"P",{});var k4=s(Cn);wdr=r(k4,"The model class to instantiate is selected based on the "),Upe=n(k4,"CODE",{});var dgt=s(Upe);Adr=r(dgt,"model_type"),dgt.forEach(t),Ldr=r(k4,` property of the config object (either
passed as an argument or loaded from `),Jpe=n(k4,"CODE",{});var cgt=s(Jpe);Bdr=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),xdr=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=n(k4,"CODE",{});var fgt=s(Ype);kdr=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),Rdr=r(k4,":"),k4.forEach(t),Sdr=i(Fa),X=n(Fa,"UL",{});var W=s(X);iT=n(W,"LI",{});var Q7e=s(iT);Kpe=n(Q7e,"STRONG",{});var mgt=s(Kpe);Pdr=r(mgt,"albert"),mgt.forEach(t),$dr=r(Q7e," \u2014 "),tO=n(Q7e,"A",{href:!0});var ggt=s(tO);Idr=r(ggt,"TFAlbertForSequenceClassification"),ggt.forEach(t),jdr=r(Q7e," (ALBERT model)"),Q7e.forEach(t),Ddr=i(W),dT=n(W,"LI",{});var H7e=s(dT);Zpe=n(H7e,"STRONG",{});var hgt=s(Zpe);Ndr=r(hgt,"bert"),hgt.forEach(t),qdr=r(H7e," \u2014 "),aO=n(H7e,"A",{href:!0});var pgt=s(aO);Gdr=r(pgt,"TFBertForSequenceClassification"),pgt.forEach(t),Odr=r(H7e," (BERT model)"),H7e.forEach(t),Xdr=i(W),cT=n(W,"LI",{});var U7e=s(cT);e_e=n(U7e,"STRONG",{});var _gt=s(e_e);Vdr=r(_gt,"camembert"),_gt.forEach(t),zdr=r(U7e," \u2014 "),nO=n(U7e,"A",{href:!0});var ugt=s(nO);Wdr=r(ugt,"TFCamembertForSequenceClassification"),ugt.forEach(t),Qdr=r(U7e," (CamemBERT model)"),U7e.forEach(t),Hdr=i(W),fT=n(W,"LI",{});var J7e=s(fT);o_e=n(J7e,"STRONG",{});var bgt=s(o_e);Udr=r(bgt,"convbert"),bgt.forEach(t),Jdr=r(J7e," \u2014 "),sO=n(J7e,"A",{href:!0});var vgt=s(sO);Ydr=r(vgt,"TFConvBertForSequenceClassification"),vgt.forEach(t),Kdr=r(J7e," (ConvBERT model)"),J7e.forEach(t),Zdr=i(W),mT=n(W,"LI",{});var Y7e=s(mT);r_e=n(Y7e,"STRONG",{});var Tgt=s(r_e);ecr=r(Tgt,"ctrl"),Tgt.forEach(t),ocr=r(Y7e," \u2014 "),lO=n(Y7e,"A",{href:!0});var Fgt=s(lO);rcr=r(Fgt,"TFCTRLForSequenceClassification"),Fgt.forEach(t),tcr=r(Y7e," (CTRL model)"),Y7e.forEach(t),acr=i(W),gT=n(W,"LI",{});var K7e=s(gT);t_e=n(K7e,"STRONG",{});var Cgt=s(t_e);ncr=r(Cgt,"deberta"),Cgt.forEach(t),scr=r(K7e," \u2014 "),iO=n(K7e,"A",{href:!0});var Mgt=s(iO);lcr=r(Mgt,"TFDebertaForSequenceClassification"),Mgt.forEach(t),icr=r(K7e," (DeBERTa model)"),K7e.forEach(t),dcr=i(W),hT=n(W,"LI",{});var Z7e=s(hT);a_e=n(Z7e,"STRONG",{});var Egt=s(a_e);ccr=r(Egt,"deberta-v2"),Egt.forEach(t),fcr=r(Z7e," \u2014 "),dO=n(Z7e,"A",{href:!0});var ygt=s(dO);mcr=r(ygt,"TFDebertaV2ForSequenceClassification"),ygt.forEach(t),gcr=r(Z7e," (DeBERTa-v2 model)"),Z7e.forEach(t),hcr=i(W),pT=n(W,"LI",{});var e8e=s(pT);n_e=n(e8e,"STRONG",{});var wgt=s(n_e);pcr=r(wgt,"distilbert"),wgt.forEach(t),_cr=r(e8e," \u2014 "),cO=n(e8e,"A",{href:!0});var Agt=s(cO);ucr=r(Agt,"TFDistilBertForSequenceClassification"),Agt.forEach(t),bcr=r(e8e," (DistilBERT model)"),e8e.forEach(t),vcr=i(W),_T=n(W,"LI",{});var o8e=s(_T);s_e=n(o8e,"STRONG",{});var Lgt=s(s_e);Tcr=r(Lgt,"electra"),Lgt.forEach(t),Fcr=r(o8e," \u2014 "),fO=n(o8e,"A",{href:!0});var Bgt=s(fO);Ccr=r(Bgt,"TFElectraForSequenceClassification"),Bgt.forEach(t),Mcr=r(o8e," (ELECTRA model)"),o8e.forEach(t),Ecr=i(W),uT=n(W,"LI",{});var r8e=s(uT);l_e=n(r8e,"STRONG",{});var xgt=s(l_e);ycr=r(xgt,"flaubert"),xgt.forEach(t),wcr=r(r8e," \u2014 "),mO=n(r8e,"A",{href:!0});var kgt=s(mO);Acr=r(kgt,"TFFlaubertForSequenceClassification"),kgt.forEach(t),Lcr=r(r8e," (FlauBERT model)"),r8e.forEach(t),Bcr=i(W),bT=n(W,"LI",{});var t8e=s(bT);i_e=n(t8e,"STRONG",{});var Rgt=s(i_e);xcr=r(Rgt,"funnel"),Rgt.forEach(t),kcr=r(t8e," \u2014 "),gO=n(t8e,"A",{href:!0});var Sgt=s(gO);Rcr=r(Sgt,"TFFunnelForSequenceClassification"),Sgt.forEach(t),Scr=r(t8e," (Funnel Transformer model)"),t8e.forEach(t),Pcr=i(W),vT=n(W,"LI",{});var a8e=s(vT);d_e=n(a8e,"STRONG",{});var Pgt=s(d_e);$cr=r(Pgt,"gpt2"),Pgt.forEach(t),Icr=r(a8e," \u2014 "),hO=n(a8e,"A",{href:!0});var $gt=s(hO);jcr=r($gt,"TFGPT2ForSequenceClassification"),$gt.forEach(t),Dcr=r(a8e," (OpenAI GPT-2 model)"),a8e.forEach(t),Ncr=i(W),TT=n(W,"LI",{});var n8e=s(TT);c_e=n(n8e,"STRONG",{});var Igt=s(c_e);qcr=r(Igt,"gptj"),Igt.forEach(t),Gcr=r(n8e," \u2014 "),pO=n(n8e,"A",{href:!0});var jgt=s(pO);Ocr=r(jgt,"TFGPTJForSequenceClassification"),jgt.forEach(t),Xcr=r(n8e," (GPT-J model)"),n8e.forEach(t),Vcr=i(W),FT=n(W,"LI",{});var s8e=s(FT);f_e=n(s8e,"STRONG",{});var Dgt=s(f_e);zcr=r(Dgt,"layoutlm"),Dgt.forEach(t),Wcr=r(s8e," \u2014 "),_O=n(s8e,"A",{href:!0});var Ngt=s(_O);Qcr=r(Ngt,"TFLayoutLMForSequenceClassification"),Ngt.forEach(t),Hcr=r(s8e," (LayoutLM model)"),s8e.forEach(t),Ucr=i(W),CT=n(W,"LI",{});var l8e=s(CT);m_e=n(l8e,"STRONG",{});var qgt=s(m_e);Jcr=r(qgt,"longformer"),qgt.forEach(t),Ycr=r(l8e," \u2014 "),uO=n(l8e,"A",{href:!0});var Ggt=s(uO);Kcr=r(Ggt,"TFLongformerForSequenceClassification"),Ggt.forEach(t),Zcr=r(l8e," (Longformer model)"),l8e.forEach(t),efr=i(W),MT=n(W,"LI",{});var i8e=s(MT);g_e=n(i8e,"STRONG",{});var Ogt=s(g_e);ofr=r(Ogt,"mobilebert"),Ogt.forEach(t),rfr=r(i8e," \u2014 "),bO=n(i8e,"A",{href:!0});var Xgt=s(bO);tfr=r(Xgt,"TFMobileBertForSequenceClassification"),Xgt.forEach(t),afr=r(i8e," (MobileBERT model)"),i8e.forEach(t),nfr=i(W),ET=n(W,"LI",{});var d8e=s(ET);h_e=n(d8e,"STRONG",{});var Vgt=s(h_e);sfr=r(Vgt,"mpnet"),Vgt.forEach(t),lfr=r(d8e," \u2014 "),vO=n(d8e,"A",{href:!0});var zgt=s(vO);ifr=r(zgt,"TFMPNetForSequenceClassification"),zgt.forEach(t),dfr=r(d8e," (MPNet model)"),d8e.forEach(t),cfr=i(W),yT=n(W,"LI",{});var c8e=s(yT);p_e=n(c8e,"STRONG",{});var Wgt=s(p_e);ffr=r(Wgt,"openai-gpt"),Wgt.forEach(t),mfr=r(c8e," \u2014 "),TO=n(c8e,"A",{href:!0});var Qgt=s(TO);gfr=r(Qgt,"TFOpenAIGPTForSequenceClassification"),Qgt.forEach(t),hfr=r(c8e," (OpenAI GPT model)"),c8e.forEach(t),pfr=i(W),wT=n(W,"LI",{});var f8e=s(wT);__e=n(f8e,"STRONG",{});var Hgt=s(__e);_fr=r(Hgt,"rembert"),Hgt.forEach(t),ufr=r(f8e," \u2014 "),FO=n(f8e,"A",{href:!0});var Ugt=s(FO);bfr=r(Ugt,"TFRemBertForSequenceClassification"),Ugt.forEach(t),vfr=r(f8e," (RemBERT model)"),f8e.forEach(t),Tfr=i(W),AT=n(W,"LI",{});var m8e=s(AT);u_e=n(m8e,"STRONG",{});var Jgt=s(u_e);Ffr=r(Jgt,"roberta"),Jgt.forEach(t),Cfr=r(m8e," \u2014 "),CO=n(m8e,"A",{href:!0});var Ygt=s(CO);Mfr=r(Ygt,"TFRobertaForSequenceClassification"),Ygt.forEach(t),Efr=r(m8e," (RoBERTa model)"),m8e.forEach(t),yfr=i(W),LT=n(W,"LI",{});var g8e=s(LT);b_e=n(g8e,"STRONG",{});var Kgt=s(b_e);wfr=r(Kgt,"roformer"),Kgt.forEach(t),Afr=r(g8e," \u2014 "),MO=n(g8e,"A",{href:!0});var Zgt=s(MO);Lfr=r(Zgt,"TFRoFormerForSequenceClassification"),Zgt.forEach(t),Bfr=r(g8e," (RoFormer model)"),g8e.forEach(t),xfr=i(W),BT=n(W,"LI",{});var h8e=s(BT);v_e=n(h8e,"STRONG",{});var eht=s(v_e);kfr=r(eht,"tapas"),eht.forEach(t),Rfr=r(h8e," \u2014 "),EO=n(h8e,"A",{href:!0});var oht=s(EO);Sfr=r(oht,"TFTapasForSequenceClassification"),oht.forEach(t),Pfr=r(h8e," (TAPAS model)"),h8e.forEach(t),$fr=i(W),xT=n(W,"LI",{});var p8e=s(xT);T_e=n(p8e,"STRONG",{});var rht=s(T_e);Ifr=r(rht,"transfo-xl"),rht.forEach(t),jfr=r(p8e," \u2014 "),yO=n(p8e,"A",{href:!0});var tht=s(yO);Dfr=r(tht,"TFTransfoXLForSequenceClassification"),tht.forEach(t),Nfr=r(p8e," (Transformer-XL model)"),p8e.forEach(t),qfr=i(W),kT=n(W,"LI",{});var _8e=s(kT);F_e=n(_8e,"STRONG",{});var aht=s(F_e);Gfr=r(aht,"xlm"),aht.forEach(t),Ofr=r(_8e," \u2014 "),wO=n(_8e,"A",{href:!0});var nht=s(wO);Xfr=r(nht,"TFXLMForSequenceClassification"),nht.forEach(t),Vfr=r(_8e," (XLM model)"),_8e.forEach(t),zfr=i(W),RT=n(W,"LI",{});var u8e=s(RT);C_e=n(u8e,"STRONG",{});var sht=s(C_e);Wfr=r(sht,"xlm-roberta"),sht.forEach(t),Qfr=r(u8e," \u2014 "),AO=n(u8e,"A",{href:!0});var lht=s(AO);Hfr=r(lht,"TFXLMRobertaForSequenceClassification"),lht.forEach(t),Ufr=r(u8e," (XLM-RoBERTa model)"),u8e.forEach(t),Jfr=i(W),ST=n(W,"LI",{});var b8e=s(ST);M_e=n(b8e,"STRONG",{});var iht=s(M_e);Yfr=r(iht,"xlnet"),iht.forEach(t),Kfr=r(b8e," \u2014 "),LO=n(b8e,"A",{href:!0});var dht=s(LO);Zfr=r(dht,"TFXLNetForSequenceClassification"),dht.forEach(t),emr=r(b8e," (XLNet model)"),b8e.forEach(t),W.forEach(t),omr=i(Fa),E_e=n(Fa,"P",{});var cht=s(E_e);rmr=r(cht,"Examples:"),cht.forEach(t),tmr=i(Fa),m(w0.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),jke=i(c),Pc=n(c,"H2",{class:!0});var USe=s(Pc);PT=n(USe,"A",{id:!0,class:!0,href:!0});var fht=s(PT);y_e=n(fht,"SPAN",{});var mht=s(y_e);m(A0.$$.fragment,mht),mht.forEach(t),fht.forEach(t),amr=i(USe),w_e=n(USe,"SPAN",{});var ght=s(w_e);nmr=r(ght,"TFAutoModelForMultipleChoice"),ght.forEach(t),USe.forEach(t),Dke=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(L0.$$.fragment,Zl),smr=i(Zl),$c=n(Zl,"P",{});var DW=s($c);lmr=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),A_e=n(DW,"CODE",{});var hht=s(A_e);imr=r(hht,"from_pretrained()"),hht.forEach(t),dmr=r(DW,"class method or the "),L_e=n(DW,"CODE",{});var pht=s(L_e);cmr=r(pht,"from_config()"),pht.forEach(t),fmr=r(DW,`class
method.`),DW.forEach(t),mmr=i(Zl),B0=n(Zl,"P",{});var JSe=s(B0);gmr=r(JSe,"This class cannot be instantiated directly using "),B_e=n(JSe,"CODE",{});var _ht=s(B_e);hmr=r(_ht,"__init__()"),_ht.forEach(t),pmr=r(JSe," (throws an error)."),JSe.forEach(t),_mr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(x0.$$.fragment,ei),umr=i(ei),x_e=n(ei,"P",{});var uht=s(x_e);bmr=r(uht,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uht.forEach(t),vmr=i(ei),Ic=n(ei,"P",{});var NW=s(Ic);Tmr=r(NW,`Note:
Loading a model from its configuration file does `),k_e=n(NW,"STRONG",{});var bht=s(k_e);Fmr=r(bht,"not"),bht.forEach(t),Cmr=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),R_e=n(NW,"CODE",{});var vht=s(R_e);Mmr=r(vht,"from_pretrained()"),vht.forEach(t),Emr=r(NW,"to load the model weights."),NW.forEach(t),ymr=i(ei),S_e=n(ei,"P",{});var Tht=s(S_e);wmr=r(Tht,"Examples:"),Tht.forEach(t),Amr=i(ei),m(k0.$$.fragment,ei),ei.forEach(t),Lmr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(R0.$$.fragment,Ca),Bmr=i(Ca),P_e=n(Ca,"P",{});var Fht=s(P_e);xmr=r(Fht,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Fht.forEach(t),kmr=i(Ca),Mn=n(Ca,"P",{});var R4=s(Mn);Rmr=r(R4,"The model class to instantiate is selected based on the "),$_e=n(R4,"CODE",{});var Cht=s($_e);Smr=r(Cht,"model_type"),Cht.forEach(t),Pmr=r(R4,` property of the config object (either
passed as an argument or loaded from `),I_e=n(R4,"CODE",{});var Mht=s(I_e);$mr=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),Imr=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=n(R4,"CODE",{});var Eht=s(j_e);jmr=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),Dmr=r(R4,":"),R4.forEach(t),Nmr=i(Ca),te=n(Ca,"UL",{});var se=s(te);$T=n(se,"LI",{});var v8e=s($T);D_e=n(v8e,"STRONG",{});var yht=s(D_e);qmr=r(yht,"albert"),yht.forEach(t),Gmr=r(v8e," \u2014 "),BO=n(v8e,"A",{href:!0});var wht=s(BO);Omr=r(wht,"TFAlbertForMultipleChoice"),wht.forEach(t),Xmr=r(v8e," (ALBERT model)"),v8e.forEach(t),Vmr=i(se),IT=n(se,"LI",{});var T8e=s(IT);N_e=n(T8e,"STRONG",{});var Aht=s(N_e);zmr=r(Aht,"bert"),Aht.forEach(t),Wmr=r(T8e," \u2014 "),xO=n(T8e,"A",{href:!0});var Lht=s(xO);Qmr=r(Lht,"TFBertForMultipleChoice"),Lht.forEach(t),Hmr=r(T8e," (BERT model)"),T8e.forEach(t),Umr=i(se),jT=n(se,"LI",{});var F8e=s(jT);q_e=n(F8e,"STRONG",{});var Bht=s(q_e);Jmr=r(Bht,"camembert"),Bht.forEach(t),Ymr=r(F8e," \u2014 "),kO=n(F8e,"A",{href:!0});var xht=s(kO);Kmr=r(xht,"TFCamembertForMultipleChoice"),xht.forEach(t),Zmr=r(F8e," (CamemBERT model)"),F8e.forEach(t),egr=i(se),DT=n(se,"LI",{});var C8e=s(DT);G_e=n(C8e,"STRONG",{});var kht=s(G_e);ogr=r(kht,"convbert"),kht.forEach(t),rgr=r(C8e," \u2014 "),RO=n(C8e,"A",{href:!0});var Rht=s(RO);tgr=r(Rht,"TFConvBertForMultipleChoice"),Rht.forEach(t),agr=r(C8e," (ConvBERT model)"),C8e.forEach(t),ngr=i(se),NT=n(se,"LI",{});var M8e=s(NT);O_e=n(M8e,"STRONG",{});var Sht=s(O_e);sgr=r(Sht,"distilbert"),Sht.forEach(t),lgr=r(M8e," \u2014 "),SO=n(M8e,"A",{href:!0});var Pht=s(SO);igr=r(Pht,"TFDistilBertForMultipleChoice"),Pht.forEach(t),dgr=r(M8e," (DistilBERT model)"),M8e.forEach(t),cgr=i(se),qT=n(se,"LI",{});var E8e=s(qT);X_e=n(E8e,"STRONG",{});var $ht=s(X_e);fgr=r($ht,"electra"),$ht.forEach(t),mgr=r(E8e," \u2014 "),PO=n(E8e,"A",{href:!0});var Iht=s(PO);ggr=r(Iht,"TFElectraForMultipleChoice"),Iht.forEach(t),hgr=r(E8e," (ELECTRA model)"),E8e.forEach(t),pgr=i(se),GT=n(se,"LI",{});var y8e=s(GT);V_e=n(y8e,"STRONG",{});var jht=s(V_e);_gr=r(jht,"flaubert"),jht.forEach(t),ugr=r(y8e," \u2014 "),$O=n(y8e,"A",{href:!0});var Dht=s($O);bgr=r(Dht,"TFFlaubertForMultipleChoice"),Dht.forEach(t),vgr=r(y8e," (FlauBERT model)"),y8e.forEach(t),Tgr=i(se),OT=n(se,"LI",{});var w8e=s(OT);z_e=n(w8e,"STRONG",{});var Nht=s(z_e);Fgr=r(Nht,"funnel"),Nht.forEach(t),Cgr=r(w8e," \u2014 "),IO=n(w8e,"A",{href:!0});var qht=s(IO);Mgr=r(qht,"TFFunnelForMultipleChoice"),qht.forEach(t),Egr=r(w8e," (Funnel Transformer model)"),w8e.forEach(t),ygr=i(se),XT=n(se,"LI",{});var A8e=s(XT);W_e=n(A8e,"STRONG",{});var Ght=s(W_e);wgr=r(Ght,"longformer"),Ght.forEach(t),Agr=r(A8e," \u2014 "),jO=n(A8e,"A",{href:!0});var Oht=s(jO);Lgr=r(Oht,"TFLongformerForMultipleChoice"),Oht.forEach(t),Bgr=r(A8e," (Longformer model)"),A8e.forEach(t),xgr=i(se),VT=n(se,"LI",{});var L8e=s(VT);Q_e=n(L8e,"STRONG",{});var Xht=s(Q_e);kgr=r(Xht,"mobilebert"),Xht.forEach(t),Rgr=r(L8e," \u2014 "),DO=n(L8e,"A",{href:!0});var Vht=s(DO);Sgr=r(Vht,"TFMobileBertForMultipleChoice"),Vht.forEach(t),Pgr=r(L8e," (MobileBERT model)"),L8e.forEach(t),$gr=i(se),zT=n(se,"LI",{});var B8e=s(zT);H_e=n(B8e,"STRONG",{});var zht=s(H_e);Igr=r(zht,"mpnet"),zht.forEach(t),jgr=r(B8e," \u2014 "),NO=n(B8e,"A",{href:!0});var Wht=s(NO);Dgr=r(Wht,"TFMPNetForMultipleChoice"),Wht.forEach(t),Ngr=r(B8e," (MPNet model)"),B8e.forEach(t),qgr=i(se),WT=n(se,"LI",{});var x8e=s(WT);U_e=n(x8e,"STRONG",{});var Qht=s(U_e);Ggr=r(Qht,"rembert"),Qht.forEach(t),Ogr=r(x8e," \u2014 "),qO=n(x8e,"A",{href:!0});var Hht=s(qO);Xgr=r(Hht,"TFRemBertForMultipleChoice"),Hht.forEach(t),Vgr=r(x8e," (RemBERT model)"),x8e.forEach(t),zgr=i(se),QT=n(se,"LI",{});var k8e=s(QT);J_e=n(k8e,"STRONG",{});var Uht=s(J_e);Wgr=r(Uht,"roberta"),Uht.forEach(t),Qgr=r(k8e," \u2014 "),GO=n(k8e,"A",{href:!0});var Jht=s(GO);Hgr=r(Jht,"TFRobertaForMultipleChoice"),Jht.forEach(t),Ugr=r(k8e," (RoBERTa model)"),k8e.forEach(t),Jgr=i(se),HT=n(se,"LI",{});var R8e=s(HT);Y_e=n(R8e,"STRONG",{});var Yht=s(Y_e);Ygr=r(Yht,"roformer"),Yht.forEach(t),Kgr=r(R8e," \u2014 "),OO=n(R8e,"A",{href:!0});var Kht=s(OO);Zgr=r(Kht,"TFRoFormerForMultipleChoice"),Kht.forEach(t),ehr=r(R8e," (RoFormer model)"),R8e.forEach(t),ohr=i(se),UT=n(se,"LI",{});var S8e=s(UT);K_e=n(S8e,"STRONG",{});var Zht=s(K_e);rhr=r(Zht,"xlm"),Zht.forEach(t),thr=r(S8e," \u2014 "),XO=n(S8e,"A",{href:!0});var ept=s(XO);ahr=r(ept,"TFXLMForMultipleChoice"),ept.forEach(t),nhr=r(S8e," (XLM model)"),S8e.forEach(t),shr=i(se),JT=n(se,"LI",{});var P8e=s(JT);Z_e=n(P8e,"STRONG",{});var opt=s(Z_e);lhr=r(opt,"xlm-roberta"),opt.forEach(t),ihr=r(P8e," \u2014 "),VO=n(P8e,"A",{href:!0});var rpt=s(VO);dhr=r(rpt,"TFXLMRobertaForMultipleChoice"),rpt.forEach(t),chr=r(P8e," (XLM-RoBERTa model)"),P8e.forEach(t),fhr=i(se),YT=n(se,"LI",{});var $8e=s(YT);eue=n($8e,"STRONG",{});var tpt=s(eue);mhr=r(tpt,"xlnet"),tpt.forEach(t),ghr=r($8e," \u2014 "),zO=n($8e,"A",{href:!0});var apt=s(zO);hhr=r(apt,"TFXLNetForMultipleChoice"),apt.forEach(t),phr=r($8e," (XLNet model)"),$8e.forEach(t),se.forEach(t),_hr=i(Ca),oue=n(Ca,"P",{});var npt=s(oue);uhr=r(npt,"Examples:"),npt.forEach(t),bhr=i(Ca),m(S0.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),Nke=i(c),jc=n(c,"H2",{class:!0});var YSe=s(jc);KT=n(YSe,"A",{id:!0,class:!0,href:!0});var spt=s(KT);rue=n(spt,"SPAN",{});var lpt=s(rue);m(P0.$$.fragment,lpt),lpt.forEach(t),spt.forEach(t),vhr=i(YSe),tue=n(YSe,"SPAN",{});var ipt=s(tue);Thr=r(ipt,"TFAutoModelForTableQuestionAnswering"),ipt.forEach(t),YSe.forEach(t),qke=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m($0.$$.fragment,oi),Fhr=i(oi),Dc=n(oi,"P",{});var qW=s(Dc);Chr=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aue=n(qW,"CODE",{});var dpt=s(aue);Mhr=r(dpt,"from_pretrained()"),dpt.forEach(t),Ehr=r(qW,"class method or the "),nue=n(qW,"CODE",{});var cpt=s(nue);yhr=r(cpt,"from_config()"),cpt.forEach(t),whr=r(qW,`class
method.`),qW.forEach(t),Ahr=i(oi),I0=n(oi,"P",{});var KSe=s(I0);Lhr=r(KSe,"This class cannot be instantiated directly using "),sue=n(KSe,"CODE",{});var fpt=s(sue);Bhr=r(fpt,"__init__()"),fpt.forEach(t),xhr=r(KSe," (throws an error)."),KSe.forEach(t),khr=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(j0.$$.fragment,ri),Rhr=i(ri),lue=n(ri,"P",{});var mpt=s(lue);Shr=r(mpt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mpt.forEach(t),Phr=i(ri),Nc=n(ri,"P",{});var GW=s(Nc);$hr=r(GW,`Note:
Loading a model from its configuration file does `),iue=n(GW,"STRONG",{});var gpt=s(iue);Ihr=r(gpt,"not"),gpt.forEach(t),jhr=r(GW,` load the model weights. It only affects the
model\u2019s configuration. Use `),due=n(GW,"CODE",{});var hpt=s(due);Dhr=r(hpt,"from_pretrained()"),hpt.forEach(t),Nhr=r(GW,"to load the model weights."),GW.forEach(t),qhr=i(ri),cue=n(ri,"P",{});var ppt=s(cue);Ghr=r(ppt,"Examples:"),ppt.forEach(t),Ohr=i(ri),m(D0.$$.fragment,ri),ri.forEach(t),Xhr=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(N0.$$.fragment,Ma),Vhr=i(Ma),fue=n(Ma,"P",{});var _pt=s(fue);zhr=r(_pt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_pt.forEach(t),Whr=i(Ma),En=n(Ma,"P",{});var S4=s(En);Qhr=r(S4,"The model class to instantiate is selected based on the "),mue=n(S4,"CODE",{});var upt=s(mue);Hhr=r(upt,"model_type"),upt.forEach(t),Uhr=r(S4,` property of the config object (either
passed as an argument or loaded from `),gue=n(S4,"CODE",{});var bpt=s(gue);Jhr=r(bpt,"pretrained_model_name_or_path"),bpt.forEach(t),Yhr=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=n(S4,"CODE",{});var vpt=s(hue);Khr=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),Zhr=r(S4,":"),S4.forEach(t),epr=i(Ma),pue=n(Ma,"UL",{});var Tpt=s(pue);ZT=n(Tpt,"LI",{});var I8e=s(ZT);_ue=n(I8e,"STRONG",{});var Fpt=s(_ue);opr=r(Fpt,"tapas"),Fpt.forEach(t),rpr=r(I8e," \u2014 "),WO=n(I8e,"A",{href:!0});var Cpt=s(WO);tpr=r(Cpt,"TFTapasForQuestionAnswering"),Cpt.forEach(t),apr=r(I8e," (TAPAS model)"),I8e.forEach(t),Tpt.forEach(t),npr=i(Ma),uue=n(Ma,"P",{});var Mpt=s(uue);spr=r(Mpt,"Examples:"),Mpt.forEach(t),lpr=i(Ma),m(q0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),Gke=i(c),qc=n(c,"H2",{class:!0});var ZSe=s(qc);eF=n(ZSe,"A",{id:!0,class:!0,href:!0});var Ept=s(eF);bue=n(Ept,"SPAN",{});var ypt=s(bue);m(G0.$$.fragment,ypt),ypt.forEach(t),Ept.forEach(t),ipr=i(ZSe),vue=n(ZSe,"SPAN",{});var wpt=s(vue);dpr=r(wpt,"TFAutoModelForTokenClassification"),wpt.forEach(t),ZSe.forEach(t),Oke=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(O0.$$.fragment,ti),cpr=i(ti),Gc=n(ti,"P",{});var OW=s(Gc);fpr=r(OW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Tue=n(OW,"CODE",{});var Apt=s(Tue);mpr=r(Apt,"from_pretrained()"),Apt.forEach(t),gpr=r(OW,"class method or the "),Fue=n(OW,"CODE",{});var Lpt=s(Fue);hpr=r(Lpt,"from_config()"),Lpt.forEach(t),ppr=r(OW,`class
method.`),OW.forEach(t),_pr=i(ti),X0=n(ti,"P",{});var ePe=s(X0);upr=r(ePe,"This class cannot be instantiated directly using "),Cue=n(ePe,"CODE",{});var Bpt=s(Cue);bpr=r(Bpt,"__init__()"),Bpt.forEach(t),vpr=r(ePe," (throws an error)."),ePe.forEach(t),Tpr=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(V0.$$.fragment,ai),Fpr=i(ai),Mue=n(ai,"P",{});var xpt=s(Mue);Cpr=r(xpt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xpt.forEach(t),Mpr=i(ai),Oc=n(ai,"P",{});var XW=s(Oc);Epr=r(XW,`Note:
Loading a model from its configuration file does `),Eue=n(XW,"STRONG",{});var kpt=s(Eue);ypr=r(kpt,"not"),kpt.forEach(t),wpr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),yue=n(XW,"CODE",{});var Rpt=s(yue);Apr=r(Rpt,"from_pretrained()"),Rpt.forEach(t),Lpr=r(XW,"to load the model weights."),XW.forEach(t),Bpr=i(ai),wue=n(ai,"P",{});var Spt=s(wue);xpr=r(Spt,"Examples:"),Spt.forEach(t),kpr=i(ai),m(z0.$$.fragment,ai),ai.forEach(t),Rpr=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(W0.$$.fragment,Ea),Spr=i(Ea),Aue=n(Ea,"P",{});var Ppt=s(Aue);Ppr=r(Ppt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ppt.forEach(t),$pr=i(Ea),yn=n(Ea,"P",{});var P4=s(yn);Ipr=r(P4,"The model class to instantiate is selected based on the "),Lue=n(P4,"CODE",{});var $pt=s(Lue);jpr=r($pt,"model_type"),$pt.forEach(t),Dpr=r(P4,` property of the config object (either
passed as an argument or loaded from `),Bue=n(P4,"CODE",{});var Ipt=s(Bue);Npr=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),qpr=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(P4,"CODE",{});var jpt=s(xue);Gpr=r(jpt,"pretrained_model_name_or_path"),jpt.forEach(t),Opr=r(P4,":"),P4.forEach(t),Xpr=i(Ea),K=n(Ea,"UL",{});var oe=s(K);oF=n(oe,"LI",{});var j8e=s(oF);kue=n(j8e,"STRONG",{});var Dpt=s(kue);Vpr=r(Dpt,"albert"),Dpt.forEach(t),zpr=r(j8e," \u2014 "),QO=n(j8e,"A",{href:!0});var Npt=s(QO);Wpr=r(Npt,"TFAlbertForTokenClassification"),Npt.forEach(t),Qpr=r(j8e," (ALBERT model)"),j8e.forEach(t),Hpr=i(oe),rF=n(oe,"LI",{});var D8e=s(rF);Rue=n(D8e,"STRONG",{});var qpt=s(Rue);Upr=r(qpt,"bert"),qpt.forEach(t),Jpr=r(D8e," \u2014 "),HO=n(D8e,"A",{href:!0});var Gpt=s(HO);Ypr=r(Gpt,"TFBertForTokenClassification"),Gpt.forEach(t),Kpr=r(D8e," (BERT model)"),D8e.forEach(t),Zpr=i(oe),tF=n(oe,"LI",{});var N8e=s(tF);Sue=n(N8e,"STRONG",{});var Opt=s(Sue);e_r=r(Opt,"camembert"),Opt.forEach(t),o_r=r(N8e," \u2014 "),UO=n(N8e,"A",{href:!0});var Xpt=s(UO);r_r=r(Xpt,"TFCamembertForTokenClassification"),Xpt.forEach(t),t_r=r(N8e," (CamemBERT model)"),N8e.forEach(t),a_r=i(oe),aF=n(oe,"LI",{});var q8e=s(aF);Pue=n(q8e,"STRONG",{});var Vpt=s(Pue);n_r=r(Vpt,"convbert"),Vpt.forEach(t),s_r=r(q8e," \u2014 "),JO=n(q8e,"A",{href:!0});var zpt=s(JO);l_r=r(zpt,"TFConvBertForTokenClassification"),zpt.forEach(t),i_r=r(q8e," (ConvBERT model)"),q8e.forEach(t),d_r=i(oe),nF=n(oe,"LI",{});var G8e=s(nF);$ue=n(G8e,"STRONG",{});var Wpt=s($ue);c_r=r(Wpt,"deberta"),Wpt.forEach(t),f_r=r(G8e," \u2014 "),YO=n(G8e,"A",{href:!0});var Qpt=s(YO);m_r=r(Qpt,"TFDebertaForTokenClassification"),Qpt.forEach(t),g_r=r(G8e," (DeBERTa model)"),G8e.forEach(t),h_r=i(oe),sF=n(oe,"LI",{});var O8e=s(sF);Iue=n(O8e,"STRONG",{});var Hpt=s(Iue);p_r=r(Hpt,"deberta-v2"),Hpt.forEach(t),__r=r(O8e," \u2014 "),KO=n(O8e,"A",{href:!0});var Upt=s(KO);u_r=r(Upt,"TFDebertaV2ForTokenClassification"),Upt.forEach(t),b_r=r(O8e," (DeBERTa-v2 model)"),O8e.forEach(t),v_r=i(oe),lF=n(oe,"LI",{});var X8e=s(lF);jue=n(X8e,"STRONG",{});var Jpt=s(jue);T_r=r(Jpt,"distilbert"),Jpt.forEach(t),F_r=r(X8e," \u2014 "),ZO=n(X8e,"A",{href:!0});var Ypt=s(ZO);C_r=r(Ypt,"TFDistilBertForTokenClassification"),Ypt.forEach(t),M_r=r(X8e," (DistilBERT model)"),X8e.forEach(t),E_r=i(oe),iF=n(oe,"LI",{});var V8e=s(iF);Due=n(V8e,"STRONG",{});var Kpt=s(Due);y_r=r(Kpt,"electra"),Kpt.forEach(t),w_r=r(V8e," \u2014 "),eX=n(V8e,"A",{href:!0});var Zpt=s(eX);A_r=r(Zpt,"TFElectraForTokenClassification"),Zpt.forEach(t),L_r=r(V8e," (ELECTRA model)"),V8e.forEach(t),B_r=i(oe),dF=n(oe,"LI",{});var z8e=s(dF);Nue=n(z8e,"STRONG",{});var e_t=s(Nue);x_r=r(e_t,"flaubert"),e_t.forEach(t),k_r=r(z8e," \u2014 "),oX=n(z8e,"A",{href:!0});var o_t=s(oX);R_r=r(o_t,"TFFlaubertForTokenClassification"),o_t.forEach(t),S_r=r(z8e," (FlauBERT model)"),z8e.forEach(t),P_r=i(oe),cF=n(oe,"LI",{});var W8e=s(cF);que=n(W8e,"STRONG",{});var r_t=s(que);$_r=r(r_t,"funnel"),r_t.forEach(t),I_r=r(W8e," \u2014 "),rX=n(W8e,"A",{href:!0});var t_t=s(rX);j_r=r(t_t,"TFFunnelForTokenClassification"),t_t.forEach(t),D_r=r(W8e," (Funnel Transformer model)"),W8e.forEach(t),N_r=i(oe),fF=n(oe,"LI",{});var Q8e=s(fF);Gue=n(Q8e,"STRONG",{});var a_t=s(Gue);q_r=r(a_t,"layoutlm"),a_t.forEach(t),G_r=r(Q8e," \u2014 "),tX=n(Q8e,"A",{href:!0});var n_t=s(tX);O_r=r(n_t,"TFLayoutLMForTokenClassification"),n_t.forEach(t),X_r=r(Q8e," (LayoutLM model)"),Q8e.forEach(t),V_r=i(oe),mF=n(oe,"LI",{});var H8e=s(mF);Oue=n(H8e,"STRONG",{});var s_t=s(Oue);z_r=r(s_t,"longformer"),s_t.forEach(t),W_r=r(H8e," \u2014 "),aX=n(H8e,"A",{href:!0});var l_t=s(aX);Q_r=r(l_t,"TFLongformerForTokenClassification"),l_t.forEach(t),H_r=r(H8e," (Longformer model)"),H8e.forEach(t),U_r=i(oe),gF=n(oe,"LI",{});var U8e=s(gF);Xue=n(U8e,"STRONG",{});var i_t=s(Xue);J_r=r(i_t,"mobilebert"),i_t.forEach(t),Y_r=r(U8e," \u2014 "),nX=n(U8e,"A",{href:!0});var d_t=s(nX);K_r=r(d_t,"TFMobileBertForTokenClassification"),d_t.forEach(t),Z_r=r(U8e," (MobileBERT model)"),U8e.forEach(t),eur=i(oe),hF=n(oe,"LI",{});var J8e=s(hF);Vue=n(J8e,"STRONG",{});var c_t=s(Vue);our=r(c_t,"mpnet"),c_t.forEach(t),rur=r(J8e," \u2014 "),sX=n(J8e,"A",{href:!0});var f_t=s(sX);tur=r(f_t,"TFMPNetForTokenClassification"),f_t.forEach(t),aur=r(J8e," (MPNet model)"),J8e.forEach(t),nur=i(oe),pF=n(oe,"LI",{});var Y8e=s(pF);zue=n(Y8e,"STRONG",{});var m_t=s(zue);sur=r(m_t,"rembert"),m_t.forEach(t),lur=r(Y8e," \u2014 "),lX=n(Y8e,"A",{href:!0});var g_t=s(lX);iur=r(g_t,"TFRemBertForTokenClassification"),g_t.forEach(t),dur=r(Y8e," (RemBERT model)"),Y8e.forEach(t),cur=i(oe),_F=n(oe,"LI",{});var K8e=s(_F);Wue=n(K8e,"STRONG",{});var h_t=s(Wue);fur=r(h_t,"roberta"),h_t.forEach(t),mur=r(K8e," \u2014 "),iX=n(K8e,"A",{href:!0});var p_t=s(iX);gur=r(p_t,"TFRobertaForTokenClassification"),p_t.forEach(t),hur=r(K8e," (RoBERTa model)"),K8e.forEach(t),pur=i(oe),uF=n(oe,"LI",{});var Z8e=s(uF);Que=n(Z8e,"STRONG",{});var __t=s(Que);_ur=r(__t,"roformer"),__t.forEach(t),uur=r(Z8e," \u2014 "),dX=n(Z8e,"A",{href:!0});var u_t=s(dX);bur=r(u_t,"TFRoFormerForTokenClassification"),u_t.forEach(t),vur=r(Z8e," (RoFormer model)"),Z8e.forEach(t),Tur=i(oe),bF=n(oe,"LI",{});var e9e=s(bF);Hue=n(e9e,"STRONG",{});var b_t=s(Hue);Fur=r(b_t,"xlm"),b_t.forEach(t),Cur=r(e9e," \u2014 "),cX=n(e9e,"A",{href:!0});var v_t=s(cX);Mur=r(v_t,"TFXLMForTokenClassification"),v_t.forEach(t),Eur=r(e9e," (XLM model)"),e9e.forEach(t),yur=i(oe),vF=n(oe,"LI",{});var o9e=s(vF);Uue=n(o9e,"STRONG",{});var T_t=s(Uue);wur=r(T_t,"xlm-roberta"),T_t.forEach(t),Aur=r(o9e," \u2014 "),fX=n(o9e,"A",{href:!0});var F_t=s(fX);Lur=r(F_t,"TFXLMRobertaForTokenClassification"),F_t.forEach(t),Bur=r(o9e," (XLM-RoBERTa model)"),o9e.forEach(t),xur=i(oe),TF=n(oe,"LI",{});var r9e=s(TF);Jue=n(r9e,"STRONG",{});var C_t=s(Jue);kur=r(C_t,"xlnet"),C_t.forEach(t),Rur=r(r9e," \u2014 "),mX=n(r9e,"A",{href:!0});var M_t=s(mX);Sur=r(M_t,"TFXLNetForTokenClassification"),M_t.forEach(t),Pur=r(r9e," (XLNet model)"),r9e.forEach(t),oe.forEach(t),$ur=i(Ea),Yue=n(Ea,"P",{});var E_t=s(Yue);Iur=r(E_t,"Examples:"),E_t.forEach(t),jur=i(Ea),m(Q0.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),Xke=i(c),Xc=n(c,"H2",{class:!0});var oPe=s(Xc);FF=n(oPe,"A",{id:!0,class:!0,href:!0});var y_t=s(FF);Kue=n(y_t,"SPAN",{});var w_t=s(Kue);m(H0.$$.fragment,w_t),w_t.forEach(t),y_t.forEach(t),Dur=i(oPe),Zue=n(oPe,"SPAN",{});var A_t=s(Zue);Nur=r(A_t,"TFAutoModelForQuestionAnswering"),A_t.forEach(t),oPe.forEach(t),Vke=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(U0.$$.fragment,ni),qur=i(ni),Vc=n(ni,"P",{});var VW=s(Vc);Gur=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),e2e=n(VW,"CODE",{});var L_t=s(e2e);Our=r(L_t,"from_pretrained()"),L_t.forEach(t),Xur=r(VW,"class method or the "),o2e=n(VW,"CODE",{});var B_t=s(o2e);Vur=r(B_t,"from_config()"),B_t.forEach(t),zur=r(VW,`class
method.`),VW.forEach(t),Wur=i(ni),J0=n(ni,"P",{});var rPe=s(J0);Qur=r(rPe,"This class cannot be instantiated directly using "),r2e=n(rPe,"CODE",{});var x_t=s(r2e);Hur=r(x_t,"__init__()"),x_t.forEach(t),Uur=r(rPe," (throws an error)."),rPe.forEach(t),Jur=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(Y0.$$.fragment,si),Yur=i(si),t2e=n(si,"P",{});var k_t=s(t2e);Kur=r(k_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k_t.forEach(t),Zur=i(si),zc=n(si,"P",{});var zW=s(zc);e2r=r(zW,`Note:
Loading a model from its configuration file does `),a2e=n(zW,"STRONG",{});var R_t=s(a2e);o2r=r(R_t,"not"),R_t.forEach(t),r2r=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),n2e=n(zW,"CODE",{});var S_t=s(n2e);t2r=r(S_t,"from_pretrained()"),S_t.forEach(t),a2r=r(zW,"to load the model weights."),zW.forEach(t),n2r=i(si),s2e=n(si,"P",{});var P_t=s(s2e);s2r=r(P_t,"Examples:"),P_t.forEach(t),l2r=i(si),m(K0.$$.fragment,si),si.forEach(t),i2r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(Z0.$$.fragment,ya),d2r=i(ya),l2e=n(ya,"P",{});var $_t=s(l2e);c2r=r($_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$_t.forEach(t),f2r=i(ya),wn=n(ya,"P",{});var $4=s(wn);m2r=r($4,"The model class to instantiate is selected based on the "),i2e=n($4,"CODE",{});var I_t=s(i2e);g2r=r(I_t,"model_type"),I_t.forEach(t),h2r=r($4,` property of the config object (either
passed as an argument or loaded from `),d2e=n($4,"CODE",{});var j_t=s(d2e);p2r=r(j_t,"pretrained_model_name_or_path"),j_t.forEach(t),_2r=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c2e=n($4,"CODE",{});var D_t=s(c2e);u2r=r(D_t,"pretrained_model_name_or_path"),D_t.forEach(t),b2r=r($4,":"),$4.forEach(t),v2r=i(ya),Z=n(ya,"UL",{});var re=s(Z);CF=n(re,"LI",{});var t9e=s(CF);f2e=n(t9e,"STRONG",{});var N_t=s(f2e);T2r=r(N_t,"albert"),N_t.forEach(t),F2r=r(t9e," \u2014 "),gX=n(t9e,"A",{href:!0});var q_t=s(gX);C2r=r(q_t,"TFAlbertForQuestionAnswering"),q_t.forEach(t),M2r=r(t9e," (ALBERT model)"),t9e.forEach(t),E2r=i(re),MF=n(re,"LI",{});var a9e=s(MF);m2e=n(a9e,"STRONG",{});var G_t=s(m2e);y2r=r(G_t,"bert"),G_t.forEach(t),w2r=r(a9e," \u2014 "),hX=n(a9e,"A",{href:!0});var O_t=s(hX);A2r=r(O_t,"TFBertForQuestionAnswering"),O_t.forEach(t),L2r=r(a9e," (BERT model)"),a9e.forEach(t),B2r=i(re),EF=n(re,"LI",{});var n9e=s(EF);g2e=n(n9e,"STRONG",{});var X_t=s(g2e);x2r=r(X_t,"camembert"),X_t.forEach(t),k2r=r(n9e," \u2014 "),pX=n(n9e,"A",{href:!0});var V_t=s(pX);R2r=r(V_t,"TFCamembertForQuestionAnswering"),V_t.forEach(t),S2r=r(n9e," (CamemBERT model)"),n9e.forEach(t),P2r=i(re),yF=n(re,"LI",{});var s9e=s(yF);h2e=n(s9e,"STRONG",{});var z_t=s(h2e);$2r=r(z_t,"convbert"),z_t.forEach(t),I2r=r(s9e," \u2014 "),_X=n(s9e,"A",{href:!0});var W_t=s(_X);j2r=r(W_t,"TFConvBertForQuestionAnswering"),W_t.forEach(t),D2r=r(s9e," (ConvBERT model)"),s9e.forEach(t),N2r=i(re),wF=n(re,"LI",{});var l9e=s(wF);p2e=n(l9e,"STRONG",{});var Q_t=s(p2e);q2r=r(Q_t,"deberta"),Q_t.forEach(t),G2r=r(l9e," \u2014 "),uX=n(l9e,"A",{href:!0});var H_t=s(uX);O2r=r(H_t,"TFDebertaForQuestionAnswering"),H_t.forEach(t),X2r=r(l9e," (DeBERTa model)"),l9e.forEach(t),V2r=i(re),AF=n(re,"LI",{});var i9e=s(AF);_2e=n(i9e,"STRONG",{});var U_t=s(_2e);z2r=r(U_t,"deberta-v2"),U_t.forEach(t),W2r=r(i9e," \u2014 "),bX=n(i9e,"A",{href:!0});var J_t=s(bX);Q2r=r(J_t,"TFDebertaV2ForQuestionAnswering"),J_t.forEach(t),H2r=r(i9e," (DeBERTa-v2 model)"),i9e.forEach(t),U2r=i(re),LF=n(re,"LI",{});var d9e=s(LF);u2e=n(d9e,"STRONG",{});var Y_t=s(u2e);J2r=r(Y_t,"distilbert"),Y_t.forEach(t),Y2r=r(d9e," \u2014 "),vX=n(d9e,"A",{href:!0});var K_t=s(vX);K2r=r(K_t,"TFDistilBertForQuestionAnswering"),K_t.forEach(t),Z2r=r(d9e," (DistilBERT model)"),d9e.forEach(t),e1r=i(re),BF=n(re,"LI",{});var c9e=s(BF);b2e=n(c9e,"STRONG",{});var Z_t=s(b2e);o1r=r(Z_t,"electra"),Z_t.forEach(t),r1r=r(c9e," \u2014 "),TX=n(c9e,"A",{href:!0});var eut=s(TX);t1r=r(eut,"TFElectraForQuestionAnswering"),eut.forEach(t),a1r=r(c9e," (ELECTRA model)"),c9e.forEach(t),n1r=i(re),xF=n(re,"LI",{});var f9e=s(xF);v2e=n(f9e,"STRONG",{});var out=s(v2e);s1r=r(out,"flaubert"),out.forEach(t),l1r=r(f9e," \u2014 "),FX=n(f9e,"A",{href:!0});var rut=s(FX);i1r=r(rut,"TFFlaubertForQuestionAnsweringSimple"),rut.forEach(t),d1r=r(f9e," (FlauBERT model)"),f9e.forEach(t),c1r=i(re),kF=n(re,"LI",{});var m9e=s(kF);T2e=n(m9e,"STRONG",{});var tut=s(T2e);f1r=r(tut,"funnel"),tut.forEach(t),m1r=r(m9e," \u2014 "),CX=n(m9e,"A",{href:!0});var aut=s(CX);g1r=r(aut,"TFFunnelForQuestionAnswering"),aut.forEach(t),h1r=r(m9e," (Funnel Transformer model)"),m9e.forEach(t),p1r=i(re),RF=n(re,"LI",{});var g9e=s(RF);F2e=n(g9e,"STRONG",{});var nut=s(F2e);_1r=r(nut,"gptj"),nut.forEach(t),u1r=r(g9e," \u2014 "),MX=n(g9e,"A",{href:!0});var sut=s(MX);b1r=r(sut,"TFGPTJForQuestionAnswering"),sut.forEach(t),v1r=r(g9e," (GPT-J model)"),g9e.forEach(t),T1r=i(re),SF=n(re,"LI",{});var h9e=s(SF);C2e=n(h9e,"STRONG",{});var lut=s(C2e);F1r=r(lut,"longformer"),lut.forEach(t),C1r=r(h9e," \u2014 "),EX=n(h9e,"A",{href:!0});var iut=s(EX);M1r=r(iut,"TFLongformerForQuestionAnswering"),iut.forEach(t),E1r=r(h9e," (Longformer model)"),h9e.forEach(t),y1r=i(re),PF=n(re,"LI",{});var p9e=s(PF);M2e=n(p9e,"STRONG",{});var dut=s(M2e);w1r=r(dut,"mobilebert"),dut.forEach(t),A1r=r(p9e," \u2014 "),yX=n(p9e,"A",{href:!0});var cut=s(yX);L1r=r(cut,"TFMobileBertForQuestionAnswering"),cut.forEach(t),B1r=r(p9e," (MobileBERT model)"),p9e.forEach(t),x1r=i(re),$F=n(re,"LI",{});var _9e=s($F);E2e=n(_9e,"STRONG",{});var fut=s(E2e);k1r=r(fut,"mpnet"),fut.forEach(t),R1r=r(_9e," \u2014 "),wX=n(_9e,"A",{href:!0});var mut=s(wX);S1r=r(mut,"TFMPNetForQuestionAnswering"),mut.forEach(t),P1r=r(_9e," (MPNet model)"),_9e.forEach(t),$1r=i(re),IF=n(re,"LI",{});var u9e=s(IF);y2e=n(u9e,"STRONG",{});var gut=s(y2e);I1r=r(gut,"rembert"),gut.forEach(t),j1r=r(u9e," \u2014 "),AX=n(u9e,"A",{href:!0});var hut=s(AX);D1r=r(hut,"TFRemBertForQuestionAnswering"),hut.forEach(t),N1r=r(u9e," (RemBERT model)"),u9e.forEach(t),q1r=i(re),jF=n(re,"LI",{});var b9e=s(jF);w2e=n(b9e,"STRONG",{});var put=s(w2e);G1r=r(put,"roberta"),put.forEach(t),O1r=r(b9e," \u2014 "),LX=n(b9e,"A",{href:!0});var _ut=s(LX);X1r=r(_ut,"TFRobertaForQuestionAnswering"),_ut.forEach(t),V1r=r(b9e," (RoBERTa model)"),b9e.forEach(t),z1r=i(re),DF=n(re,"LI",{});var v9e=s(DF);A2e=n(v9e,"STRONG",{});var uut=s(A2e);W1r=r(uut,"roformer"),uut.forEach(t),Q1r=r(v9e," \u2014 "),BX=n(v9e,"A",{href:!0});var but=s(BX);H1r=r(but,"TFRoFormerForQuestionAnswering"),but.forEach(t),U1r=r(v9e," (RoFormer model)"),v9e.forEach(t),J1r=i(re),NF=n(re,"LI",{});var T9e=s(NF);L2e=n(T9e,"STRONG",{});var vut=s(L2e);Y1r=r(vut,"xlm"),vut.forEach(t),K1r=r(T9e," \u2014 "),xX=n(T9e,"A",{href:!0});var Tut=s(xX);Z1r=r(Tut,"TFXLMForQuestionAnsweringSimple"),Tut.forEach(t),ebr=r(T9e," (XLM model)"),T9e.forEach(t),obr=i(re),qF=n(re,"LI",{});var F9e=s(qF);B2e=n(F9e,"STRONG",{});var Fut=s(B2e);rbr=r(Fut,"xlm-roberta"),Fut.forEach(t),tbr=r(F9e," \u2014 "),kX=n(F9e,"A",{href:!0});var Cut=s(kX);abr=r(Cut,"TFXLMRobertaForQuestionAnswering"),Cut.forEach(t),nbr=r(F9e," (XLM-RoBERTa model)"),F9e.forEach(t),sbr=i(re),GF=n(re,"LI",{});var C9e=s(GF);x2e=n(C9e,"STRONG",{});var Mut=s(x2e);lbr=r(Mut,"xlnet"),Mut.forEach(t),ibr=r(C9e," \u2014 "),RX=n(C9e,"A",{href:!0});var Eut=s(RX);dbr=r(Eut,"TFXLNetForQuestionAnsweringSimple"),Eut.forEach(t),cbr=r(C9e," (XLNet model)"),C9e.forEach(t),re.forEach(t),fbr=i(ya),k2e=n(ya,"P",{});var yut=s(k2e);mbr=r(yut,"Examples:"),yut.forEach(t),gbr=i(ya),m(eL.$$.fragment,ya),ya.forEach(t),ni.forEach(t),zke=i(c),Wc=n(c,"H2",{class:!0});var tPe=s(Wc);OF=n(tPe,"A",{id:!0,class:!0,href:!0});var wut=s(OF);R2e=n(wut,"SPAN",{});var Aut=s(R2e);m(oL.$$.fragment,Aut),Aut.forEach(t),wut.forEach(t),hbr=i(tPe),S2e=n(tPe,"SPAN",{});var Lut=s(S2e);pbr=r(Lut,"TFAutoModelForVision2Seq"),Lut.forEach(t),tPe.forEach(t),Wke=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(rL.$$.fragment,li),_br=i(li),Qc=n(li,"P",{});var WW=s(Qc);ubr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),P2e=n(WW,"CODE",{});var But=s(P2e);bbr=r(But,"from_pretrained()"),But.forEach(t),vbr=r(WW,"class method or the "),$2e=n(WW,"CODE",{});var xut=s($2e);Tbr=r(xut,"from_config()"),xut.forEach(t),Fbr=r(WW,`class
method.`),WW.forEach(t),Cbr=i(li),tL=n(li,"P",{});var aPe=s(tL);Mbr=r(aPe,"This class cannot be instantiated directly using "),I2e=n(aPe,"CODE",{});var kut=s(I2e);Ebr=r(kut,"__init__()"),kut.forEach(t),ybr=r(aPe," (throws an error)."),aPe.forEach(t),wbr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(aL.$$.fragment,ii),Abr=i(ii),j2e=n(ii,"P",{});var Rut=s(j2e);Lbr=r(Rut,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Rut.forEach(t),Bbr=i(ii),Hc=n(ii,"P",{});var QW=s(Hc);xbr=r(QW,`Note:
Loading a model from its configuration file does `),D2e=n(QW,"STRONG",{});var Sut=s(D2e);kbr=r(Sut,"not"),Sut.forEach(t),Rbr=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),N2e=n(QW,"CODE",{});var Put=s(N2e);Sbr=r(Put,"from_pretrained()"),Put.forEach(t),Pbr=r(QW,"to load the model weights."),QW.forEach(t),$br=i(ii),q2e=n(ii,"P",{});var $ut=s(q2e);Ibr=r($ut,"Examples:"),$ut.forEach(t),jbr=i(ii),m(nL.$$.fragment,ii),ii.forEach(t),Dbr=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(sL.$$.fragment,wa),Nbr=i(wa),G2e=n(wa,"P",{});var Iut=s(G2e);qbr=r(Iut,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Iut.forEach(t),Gbr=i(wa),An=n(wa,"P",{});var I4=s(An);Obr=r(I4,"The model class to instantiate is selected based on the "),O2e=n(I4,"CODE",{});var jut=s(O2e);Xbr=r(jut,"model_type"),jut.forEach(t),Vbr=r(I4,` property of the config object (either
passed as an argument or loaded from `),X2e=n(I4,"CODE",{});var Dut=s(X2e);zbr=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),Wbr=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(I4,"CODE",{});var Nut=s(V2e);Qbr=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),Hbr=r(I4,":"),I4.forEach(t),Ubr=i(wa),z2e=n(wa,"UL",{});var qut=s(z2e);XF=n(qut,"LI",{});var M9e=s(XF);W2e=n(M9e,"STRONG",{});var Gut=s(W2e);Jbr=r(Gut,"vision-encoder-decoder"),Gut.forEach(t),Ybr=r(M9e," \u2014 "),SX=n(M9e,"A",{href:!0});var Out=s(SX);Kbr=r(Out,"TFVisionEncoderDecoderModel"),Out.forEach(t),Zbr=r(M9e," (Vision Encoder decoder model)"),M9e.forEach(t),qut.forEach(t),e3r=i(wa),Q2e=n(wa,"P",{});var Xut=s(Q2e);o3r=r(Xut,"Examples:"),Xut.forEach(t),r3r=i(wa),m(lL.$$.fragment,wa),wa.forEach(t),li.forEach(t),Qke=i(c),Uc=n(c,"H2",{class:!0});var nPe=s(Uc);VF=n(nPe,"A",{id:!0,class:!0,href:!0});var Vut=s(VF);H2e=n(Vut,"SPAN",{});var zut=s(H2e);m(iL.$$.fragment,zut),zut.forEach(t),Vut.forEach(t),t3r=i(nPe),U2e=n(nPe,"SPAN",{});var Wut=s(U2e);a3r=r(Wut,"TFAutoModelForSpeechSeq2Seq"),Wut.forEach(t),nPe.forEach(t),Hke=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(dL.$$.fragment,di),n3r=i(di),Jc=n(di,"P",{});var HW=s(Jc);s3r=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),J2e=n(HW,"CODE",{});var Qut=s(J2e);l3r=r(Qut,"from_pretrained()"),Qut.forEach(t),i3r=r(HW,"class method or the "),Y2e=n(HW,"CODE",{});var Hut=s(Y2e);d3r=r(Hut,"from_config()"),Hut.forEach(t),c3r=r(HW,`class
method.`),HW.forEach(t),f3r=i(di),cL=n(di,"P",{});var sPe=s(cL);m3r=r(sPe,"This class cannot be instantiated directly using "),K2e=n(sPe,"CODE",{});var Uut=s(K2e);g3r=r(Uut,"__init__()"),Uut.forEach(t),h3r=r(sPe," (throws an error)."),sPe.forEach(t),p3r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(fL.$$.fragment,ci),_3r=i(ci),Z2e=n(ci,"P",{});var Jut=s(Z2e);u3r=r(Jut,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Jut.forEach(t),b3r=i(ci),Yc=n(ci,"P",{});var UW=s(Yc);v3r=r(UW,`Note:
Loading a model from its configuration file does `),e1e=n(UW,"STRONG",{});var Yut=s(e1e);T3r=r(Yut,"not"),Yut.forEach(t),F3r=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),o1e=n(UW,"CODE",{});var Kut=s(o1e);C3r=r(Kut,"from_pretrained()"),Kut.forEach(t),M3r=r(UW,"to load the model weights."),UW.forEach(t),E3r=i(ci),r1e=n(ci,"P",{});var Zut=s(r1e);y3r=r(Zut,"Examples:"),Zut.forEach(t),w3r=i(ci),m(mL.$$.fragment,ci),ci.forEach(t),A3r=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(gL.$$.fragment,Aa),L3r=i(Aa),t1e=n(Aa,"P",{});var e2t=s(t1e);B3r=r(e2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),e2t.forEach(t),x3r=i(Aa),Ln=n(Aa,"P",{});var j4=s(Ln);k3r=r(j4,"The model class to instantiate is selected based on the "),a1e=n(j4,"CODE",{});var o2t=s(a1e);R3r=r(o2t,"model_type"),o2t.forEach(t),S3r=r(j4,` property of the config object (either
passed as an argument or loaded from `),n1e=n(j4,"CODE",{});var r2t=s(n1e);P3r=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),$3r=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=n(j4,"CODE",{});var t2t=s(s1e);I3r=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),j3r=r(j4,":"),j4.forEach(t),D3r=i(Aa),l1e=n(Aa,"UL",{});var a2t=s(l1e);zF=n(a2t,"LI",{});var E9e=s(zF);i1e=n(E9e,"STRONG",{});var n2t=s(i1e);N3r=r(n2t,"speech_to_text"),n2t.forEach(t),q3r=r(E9e," \u2014 "),PX=n(E9e,"A",{href:!0});var s2t=s(PX);G3r=r(s2t,"TFSpeech2TextForConditionalGeneration"),s2t.forEach(t),O3r=r(E9e," (Speech2Text model)"),E9e.forEach(t),a2t.forEach(t),X3r=i(Aa),d1e=n(Aa,"P",{});var l2t=s(d1e);V3r=r(l2t,"Examples:"),l2t.forEach(t),z3r=i(Aa),m(hL.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),Uke=i(c),Kc=n(c,"H2",{class:!0});var lPe=s(Kc);WF=n(lPe,"A",{id:!0,class:!0,href:!0});var i2t=s(WF);c1e=n(i2t,"SPAN",{});var d2t=s(c1e);m(pL.$$.fragment,d2t),d2t.forEach(t),i2t.forEach(t),W3r=i(lPe),f1e=n(lPe,"SPAN",{});var c2t=s(f1e);Q3r=r(c2t,"FlaxAutoModel"),c2t.forEach(t),lPe.forEach(t),Jke=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(_L.$$.fragment,fi),H3r=i(fi),Zc=n(fi,"P",{});var JW=s(Zc);U3r=r(JW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),m1e=n(JW,"CODE",{});var f2t=s(m1e);J3r=r(f2t,"from_pretrained()"),f2t.forEach(t),Y3r=r(JW,"class method or the "),g1e=n(JW,"CODE",{});var m2t=s(g1e);K3r=r(m2t,"from_config()"),m2t.forEach(t),Z3r=r(JW,`class
method.`),JW.forEach(t),e5r=i(fi),uL=n(fi,"P",{});var iPe=s(uL);o5r=r(iPe,"This class cannot be instantiated directly using "),h1e=n(iPe,"CODE",{});var g2t=s(h1e);r5r=r(g2t,"__init__()"),g2t.forEach(t),t5r=r(iPe," (throws an error)."),iPe.forEach(t),a5r=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(bL.$$.fragment,mi),n5r=i(mi),p1e=n(mi,"P",{});var h2t=s(p1e);s5r=r(h2t,"Instantiates one of the base model classes of the library from a configuration."),h2t.forEach(t),l5r=i(mi),ef=n(mi,"P",{});var YW=s(ef);i5r=r(YW,`Note:
Loading a model from its configuration file does `),_1e=n(YW,"STRONG",{});var p2t=s(_1e);d5r=r(p2t,"not"),p2t.forEach(t),c5r=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),u1e=n(YW,"CODE",{});var _2t=s(u1e);f5r=r(_2t,"from_pretrained()"),_2t.forEach(t),m5r=r(YW,"to load the model weights."),YW.forEach(t),g5r=i(mi),b1e=n(mi,"P",{});var u2t=s(b1e);h5r=r(u2t,"Examples:"),u2t.forEach(t),p5r=i(mi),m(vL.$$.fragment,mi),mi.forEach(t),_5r=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(TL.$$.fragment,La),u5r=i(La),v1e=n(La,"P",{});var b2t=s(v1e);b5r=r(b2t,"Instantiate one of the base model classes of the library from a pretrained model."),b2t.forEach(t),v5r=i(La),Bn=n(La,"P",{});var D4=s(Bn);T5r=r(D4,"The model class to instantiate is selected based on the "),T1e=n(D4,"CODE",{});var v2t=s(T1e);F5r=r(v2t,"model_type"),v2t.forEach(t),C5r=r(D4,` property of the config object (either
passed as an argument or loaded from `),F1e=n(D4,"CODE",{});var T2t=s(F1e);M5r=r(T2t,"pretrained_model_name_or_path"),T2t.forEach(t),E5r=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(D4,"CODE",{});var F2t=s(C1e);y5r=r(F2t,"pretrained_model_name_or_path"),F2t.forEach(t),w5r=r(D4,":"),D4.forEach(t),A5r=i(La),z=n(La,"UL",{});var Q=s(z);QF=n(Q,"LI",{});var y9e=s(QF);M1e=n(y9e,"STRONG",{});var C2t=s(M1e);L5r=r(C2t,"albert"),C2t.forEach(t),B5r=r(y9e," \u2014 "),$X=n(y9e,"A",{href:!0});var M2t=s($X);x5r=r(M2t,"FlaxAlbertModel"),M2t.forEach(t),k5r=r(y9e," (ALBERT model)"),y9e.forEach(t),R5r=i(Q),HF=n(Q,"LI",{});var w9e=s(HF);E1e=n(w9e,"STRONG",{});var E2t=s(E1e);S5r=r(E2t,"bart"),E2t.forEach(t),P5r=r(w9e," \u2014 "),IX=n(w9e,"A",{href:!0});var y2t=s(IX);$5r=r(y2t,"FlaxBartModel"),y2t.forEach(t),I5r=r(w9e," (BART model)"),w9e.forEach(t),j5r=i(Q),UF=n(Q,"LI",{});var A9e=s(UF);y1e=n(A9e,"STRONG",{});var w2t=s(y1e);D5r=r(w2t,"beit"),w2t.forEach(t),N5r=r(A9e," \u2014 "),jX=n(A9e,"A",{href:!0});var A2t=s(jX);q5r=r(A2t,"FlaxBeitModel"),A2t.forEach(t),G5r=r(A9e," (BEiT model)"),A9e.forEach(t),O5r=i(Q),JF=n(Q,"LI",{});var L9e=s(JF);w1e=n(L9e,"STRONG",{});var L2t=s(w1e);X5r=r(L2t,"bert"),L2t.forEach(t),V5r=r(L9e," \u2014 "),DX=n(L9e,"A",{href:!0});var B2t=s(DX);z5r=r(B2t,"FlaxBertModel"),B2t.forEach(t),W5r=r(L9e," (BERT model)"),L9e.forEach(t),Q5r=i(Q),YF=n(Q,"LI",{});var B9e=s(YF);A1e=n(B9e,"STRONG",{});var x2t=s(A1e);H5r=r(x2t,"big_bird"),x2t.forEach(t),U5r=r(B9e," \u2014 "),NX=n(B9e,"A",{href:!0});var k2t=s(NX);J5r=r(k2t,"FlaxBigBirdModel"),k2t.forEach(t),Y5r=r(B9e," (BigBird model)"),B9e.forEach(t),K5r=i(Q),KF=n(Q,"LI",{});var x9e=s(KF);L1e=n(x9e,"STRONG",{});var R2t=s(L1e);Z5r=r(R2t,"blenderbot"),R2t.forEach(t),evr=r(x9e," \u2014 "),qX=n(x9e,"A",{href:!0});var S2t=s(qX);ovr=r(S2t,"FlaxBlenderbotModel"),S2t.forEach(t),rvr=r(x9e," (Blenderbot model)"),x9e.forEach(t),tvr=i(Q),ZF=n(Q,"LI",{});var k9e=s(ZF);B1e=n(k9e,"STRONG",{});var P2t=s(B1e);avr=r(P2t,"blenderbot-small"),P2t.forEach(t),nvr=r(k9e," \u2014 "),GX=n(k9e,"A",{href:!0});var $2t=s(GX);svr=r($2t,"FlaxBlenderbotSmallModel"),$2t.forEach(t),lvr=r(k9e," (BlenderbotSmall model)"),k9e.forEach(t),ivr=i(Q),eC=n(Q,"LI",{});var R9e=s(eC);x1e=n(R9e,"STRONG",{});var I2t=s(x1e);dvr=r(I2t,"clip"),I2t.forEach(t),cvr=r(R9e," \u2014 "),OX=n(R9e,"A",{href:!0});var j2t=s(OX);fvr=r(j2t,"FlaxCLIPModel"),j2t.forEach(t),mvr=r(R9e," (CLIP model)"),R9e.forEach(t),gvr=i(Q),oC=n(Q,"LI",{});var S9e=s(oC);k1e=n(S9e,"STRONG",{});var D2t=s(k1e);hvr=r(D2t,"distilbert"),D2t.forEach(t),pvr=r(S9e," \u2014 "),XX=n(S9e,"A",{href:!0});var N2t=s(XX);_vr=r(N2t,"FlaxDistilBertModel"),N2t.forEach(t),uvr=r(S9e," (DistilBERT model)"),S9e.forEach(t),bvr=i(Q),rC=n(Q,"LI",{});var P9e=s(rC);R1e=n(P9e,"STRONG",{});var q2t=s(R1e);vvr=r(q2t,"electra"),q2t.forEach(t),Tvr=r(P9e," \u2014 "),VX=n(P9e,"A",{href:!0});var G2t=s(VX);Fvr=r(G2t,"FlaxElectraModel"),G2t.forEach(t),Cvr=r(P9e," (ELECTRA model)"),P9e.forEach(t),Mvr=i(Q),tC=n(Q,"LI",{});var $9e=s(tC);S1e=n($9e,"STRONG",{});var O2t=s(S1e);Evr=r(O2t,"gpt2"),O2t.forEach(t),yvr=r($9e," \u2014 "),zX=n($9e,"A",{href:!0});var X2t=s(zX);wvr=r(X2t,"FlaxGPT2Model"),X2t.forEach(t),Avr=r($9e," (OpenAI GPT-2 model)"),$9e.forEach(t),Lvr=i(Q),aC=n(Q,"LI",{});var I9e=s(aC);P1e=n(I9e,"STRONG",{});var V2t=s(P1e);Bvr=r(V2t,"gpt_neo"),V2t.forEach(t),xvr=r(I9e," \u2014 "),WX=n(I9e,"A",{href:!0});var z2t=s(WX);kvr=r(z2t,"FlaxGPTNeoModel"),z2t.forEach(t),Rvr=r(I9e," (GPT Neo model)"),I9e.forEach(t),Svr=i(Q),nC=n(Q,"LI",{});var j9e=s(nC);$1e=n(j9e,"STRONG",{});var W2t=s($1e);Pvr=r(W2t,"gptj"),W2t.forEach(t),$vr=r(j9e," \u2014 "),QX=n(j9e,"A",{href:!0});var Q2t=s(QX);Ivr=r(Q2t,"FlaxGPTJModel"),Q2t.forEach(t),jvr=r(j9e," (GPT-J model)"),j9e.forEach(t),Dvr=i(Q),sC=n(Q,"LI",{});var D9e=s(sC);I1e=n(D9e,"STRONG",{});var H2t=s(I1e);Nvr=r(H2t,"marian"),H2t.forEach(t),qvr=r(D9e," \u2014 "),HX=n(D9e,"A",{href:!0});var U2t=s(HX);Gvr=r(U2t,"FlaxMarianModel"),U2t.forEach(t),Ovr=r(D9e," (Marian model)"),D9e.forEach(t),Xvr=i(Q),lC=n(Q,"LI",{});var N9e=s(lC);j1e=n(N9e,"STRONG",{});var J2t=s(j1e);Vvr=r(J2t,"mbart"),J2t.forEach(t),zvr=r(N9e," \u2014 "),UX=n(N9e,"A",{href:!0});var Y2t=s(UX);Wvr=r(Y2t,"FlaxMBartModel"),Y2t.forEach(t),Qvr=r(N9e," (mBART model)"),N9e.forEach(t),Hvr=i(Q),iC=n(Q,"LI",{});var q9e=s(iC);D1e=n(q9e,"STRONG",{});var K2t=s(D1e);Uvr=r(K2t,"mt5"),K2t.forEach(t),Jvr=r(q9e," \u2014 "),JX=n(q9e,"A",{href:!0});var Z2t=s(JX);Yvr=r(Z2t,"FlaxMT5Model"),Z2t.forEach(t),Kvr=r(q9e," (mT5 model)"),q9e.forEach(t),Zvr=i(Q),dC=n(Q,"LI",{});var G9e=s(dC);N1e=n(G9e,"STRONG",{});var e1t=s(N1e);e6r=r(e1t,"pegasus"),e1t.forEach(t),o6r=r(G9e," \u2014 "),YX=n(G9e,"A",{href:!0});var o1t=s(YX);r6r=r(o1t,"FlaxPegasusModel"),o1t.forEach(t),t6r=r(G9e," (Pegasus model)"),G9e.forEach(t),a6r=i(Q),cC=n(Q,"LI",{});var O9e=s(cC);q1e=n(O9e,"STRONG",{});var r1t=s(q1e);n6r=r(r1t,"roberta"),r1t.forEach(t),s6r=r(O9e," \u2014 "),KX=n(O9e,"A",{href:!0});var t1t=s(KX);l6r=r(t1t,"FlaxRobertaModel"),t1t.forEach(t),i6r=r(O9e," (RoBERTa model)"),O9e.forEach(t),d6r=i(Q),fC=n(Q,"LI",{});var X9e=s(fC);G1e=n(X9e,"STRONG",{});var a1t=s(G1e);c6r=r(a1t,"roformer"),a1t.forEach(t),f6r=r(X9e," \u2014 "),ZX=n(X9e,"A",{href:!0});var n1t=s(ZX);m6r=r(n1t,"FlaxRoFormerModel"),n1t.forEach(t),g6r=r(X9e," (RoFormer model)"),X9e.forEach(t),h6r=i(Q),mC=n(Q,"LI",{});var V9e=s(mC);O1e=n(V9e,"STRONG",{});var s1t=s(O1e);p6r=r(s1t,"t5"),s1t.forEach(t),_6r=r(V9e," \u2014 "),eV=n(V9e,"A",{href:!0});var l1t=s(eV);u6r=r(l1t,"FlaxT5Model"),l1t.forEach(t),b6r=r(V9e," (T5 model)"),V9e.forEach(t),v6r=i(Q),gC=n(Q,"LI",{});var z9e=s(gC);X1e=n(z9e,"STRONG",{});var i1t=s(X1e);T6r=r(i1t,"vision-text-dual-encoder"),i1t.forEach(t),F6r=r(z9e," \u2014 "),oV=n(z9e,"A",{href:!0});var d1t=s(oV);C6r=r(d1t,"FlaxVisionTextDualEncoderModel"),d1t.forEach(t),M6r=r(z9e," (VisionTextDualEncoder model)"),z9e.forEach(t),E6r=i(Q),hC=n(Q,"LI",{});var W9e=s(hC);V1e=n(W9e,"STRONG",{});var c1t=s(V1e);y6r=r(c1t,"vit"),c1t.forEach(t),w6r=r(W9e," \u2014 "),rV=n(W9e,"A",{href:!0});var f1t=s(rV);A6r=r(f1t,"FlaxViTModel"),f1t.forEach(t),L6r=r(W9e," (ViT model)"),W9e.forEach(t),B6r=i(Q),pC=n(Q,"LI",{});var Q9e=s(pC);z1e=n(Q9e,"STRONG",{});var m1t=s(z1e);x6r=r(m1t,"wav2vec2"),m1t.forEach(t),k6r=r(Q9e," \u2014 "),tV=n(Q9e,"A",{href:!0});var g1t=s(tV);R6r=r(g1t,"FlaxWav2Vec2Model"),g1t.forEach(t),S6r=r(Q9e," (Wav2Vec2 model)"),Q9e.forEach(t),P6r=i(Q),_C=n(Q,"LI",{});var H9e=s(_C);W1e=n(H9e,"STRONG",{});var h1t=s(W1e);$6r=r(h1t,"xglm"),h1t.forEach(t),I6r=r(H9e," \u2014 "),aV=n(H9e,"A",{href:!0});var p1t=s(aV);j6r=r(p1t,"FlaxXGLMModel"),p1t.forEach(t),D6r=r(H9e," (XGLM model)"),H9e.forEach(t),N6r=i(Q),uC=n(Q,"LI",{});var U9e=s(uC);Q1e=n(U9e,"STRONG",{});var _1t=s(Q1e);q6r=r(_1t,"xlm-roberta"),_1t.forEach(t),G6r=r(U9e," \u2014 "),nV=n(U9e,"A",{href:!0});var u1t=s(nV);O6r=r(u1t,"FlaxXLMRobertaModel"),u1t.forEach(t),X6r=r(U9e," (XLM-RoBERTa model)"),U9e.forEach(t),Q.forEach(t),V6r=i(La),H1e=n(La,"P",{});var b1t=s(H1e);z6r=r(b1t,"Examples:"),b1t.forEach(t),W6r=i(La),m(FL.$$.fragment,La),La.forEach(t),fi.forEach(t),Yke=i(c),of=n(c,"H2",{class:!0});var dPe=s(of);bC=n(dPe,"A",{id:!0,class:!0,href:!0});var v1t=s(bC);U1e=n(v1t,"SPAN",{});var T1t=s(U1e);m(CL.$$.fragment,T1t),T1t.forEach(t),v1t.forEach(t),Q6r=i(dPe),J1e=n(dPe,"SPAN",{});var F1t=s(J1e);H6r=r(F1t,"FlaxAutoModelForCausalLM"),F1t.forEach(t),dPe.forEach(t),Kke=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(ML.$$.fragment,gi),U6r=i(gi),rf=n(gi,"P",{});var KW=s(rf);J6r=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Y1e=n(KW,"CODE",{});var C1t=s(Y1e);Y6r=r(C1t,"from_pretrained()"),C1t.forEach(t),K6r=r(KW,"class method or the "),K1e=n(KW,"CODE",{});var M1t=s(K1e);Z6r=r(M1t,"from_config()"),M1t.forEach(t),eTr=r(KW,`class
method.`),KW.forEach(t),oTr=i(gi),EL=n(gi,"P",{});var cPe=s(EL);rTr=r(cPe,"This class cannot be instantiated directly using "),Z1e=n(cPe,"CODE",{});var E1t=s(Z1e);tTr=r(E1t,"__init__()"),E1t.forEach(t),aTr=r(cPe," (throws an error)."),cPe.forEach(t),nTr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(yL.$$.fragment,hi),sTr=i(hi),ebe=n(hi,"P",{});var y1t=s(ebe);lTr=r(y1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y1t.forEach(t),iTr=i(hi),tf=n(hi,"P",{});var ZW=s(tf);dTr=r(ZW,`Note:
Loading a model from its configuration file does `),obe=n(ZW,"STRONG",{});var w1t=s(obe);cTr=r(w1t,"not"),w1t.forEach(t),fTr=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),rbe=n(ZW,"CODE",{});var A1t=s(rbe);mTr=r(A1t,"from_pretrained()"),A1t.forEach(t),gTr=r(ZW,"to load the model weights."),ZW.forEach(t),hTr=i(hi),tbe=n(hi,"P",{});var L1t=s(tbe);pTr=r(L1t,"Examples:"),L1t.forEach(t),_Tr=i(hi),m(wL.$$.fragment,hi),hi.forEach(t),uTr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(AL.$$.fragment,Ba),bTr=i(Ba),abe=n(Ba,"P",{});var B1t=s(abe);vTr=r(B1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),B1t.forEach(t),TTr=i(Ba),xn=n(Ba,"P",{});var N4=s(xn);FTr=r(N4,"The model class to instantiate is selected based on the "),nbe=n(N4,"CODE",{});var x1t=s(nbe);CTr=r(x1t,"model_type"),x1t.forEach(t),MTr=r(N4,` property of the config object (either
passed as an argument or loaded from `),sbe=n(N4,"CODE",{});var k1t=s(sbe);ETr=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),yTr=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n(N4,"CODE",{});var R1t=s(lbe);wTr=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),ATr=r(N4,":"),N4.forEach(t),LTr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);vC=n(pi,"LI",{});var J9e=s(vC);ibe=n(J9e,"STRONG",{});var S1t=s(ibe);BTr=r(S1t,"bart"),S1t.forEach(t),xTr=r(J9e," \u2014 "),sV=n(J9e,"A",{href:!0});var P1t=s(sV);kTr=r(P1t,"FlaxBartForCausalLM"),P1t.forEach(t),RTr=r(J9e," (BART model)"),J9e.forEach(t),STr=i(pi),TC=n(pi,"LI",{});var Y9e=s(TC);dbe=n(Y9e,"STRONG",{});var $1t=s(dbe);PTr=r($1t,"gpt2"),$1t.forEach(t),$Tr=r(Y9e," \u2014 "),lV=n(Y9e,"A",{href:!0});var I1t=s(lV);ITr=r(I1t,"FlaxGPT2LMHeadModel"),I1t.forEach(t),jTr=r(Y9e," (OpenAI GPT-2 model)"),Y9e.forEach(t),DTr=i(pi),FC=n(pi,"LI",{});var K9e=s(FC);cbe=n(K9e,"STRONG",{});var j1t=s(cbe);NTr=r(j1t,"gpt_neo"),j1t.forEach(t),qTr=r(K9e," \u2014 "),iV=n(K9e,"A",{href:!0});var D1t=s(iV);GTr=r(D1t,"FlaxGPTNeoForCausalLM"),D1t.forEach(t),OTr=r(K9e," (GPT Neo model)"),K9e.forEach(t),XTr=i(pi),CC=n(pi,"LI",{});var Z9e=s(CC);fbe=n(Z9e,"STRONG",{});var N1t=s(fbe);VTr=r(N1t,"gptj"),N1t.forEach(t),zTr=r(Z9e," \u2014 "),dV=n(Z9e,"A",{href:!0});var q1t=s(dV);WTr=r(q1t,"FlaxGPTJForCausalLM"),q1t.forEach(t),QTr=r(Z9e," (GPT-J model)"),Z9e.forEach(t),HTr=i(pi),MC=n(pi,"LI",{});var eBe=s(MC);mbe=n(eBe,"STRONG",{});var G1t=s(mbe);UTr=r(G1t,"xglm"),G1t.forEach(t),JTr=r(eBe," \u2014 "),cV=n(eBe,"A",{href:!0});var O1t=s(cV);YTr=r(O1t,"FlaxXGLMForCausalLM"),O1t.forEach(t),KTr=r(eBe," (XGLM model)"),eBe.forEach(t),pi.forEach(t),ZTr=i(Ba),gbe=n(Ba,"P",{});var X1t=s(gbe);eFr=r(X1t,"Examples:"),X1t.forEach(t),oFr=i(Ba),m(LL.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),Zke=i(c),af=n(c,"H2",{class:!0});var fPe=s(af);EC=n(fPe,"A",{id:!0,class:!0,href:!0});var V1t=s(EC);hbe=n(V1t,"SPAN",{});var z1t=s(hbe);m(BL.$$.fragment,z1t),z1t.forEach(t),V1t.forEach(t),rFr=i(fPe),pbe=n(fPe,"SPAN",{});var W1t=s(pbe);tFr=r(W1t,"FlaxAutoModelForPreTraining"),W1t.forEach(t),fPe.forEach(t),eRe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(xL.$$.fragment,_i),aFr=i(_i),nf=n(_i,"P",{});var eQ=s(nf);nFr=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_be=n(eQ,"CODE",{});var Q1t=s(_be);sFr=r(Q1t,"from_pretrained()"),Q1t.forEach(t),lFr=r(eQ,"class method or the "),ube=n(eQ,"CODE",{});var H1t=s(ube);iFr=r(H1t,"from_config()"),H1t.forEach(t),dFr=r(eQ,`class
method.`),eQ.forEach(t),cFr=i(_i),kL=n(_i,"P",{});var mPe=s(kL);fFr=r(mPe,"This class cannot be instantiated directly using "),bbe=n(mPe,"CODE",{});var U1t=s(bbe);mFr=r(U1t,"__init__()"),U1t.forEach(t),gFr=r(mPe," (throws an error)."),mPe.forEach(t),hFr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(RL.$$.fragment,ui),pFr=i(ui),vbe=n(ui,"P",{});var J1t=s(vbe);_Fr=r(J1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),J1t.forEach(t),uFr=i(ui),sf=n(ui,"P",{});var oQ=s(sf);bFr=r(oQ,`Note:
Loading a model from its configuration file does `),Tbe=n(oQ,"STRONG",{});var Y1t=s(Tbe);vFr=r(Y1t,"not"),Y1t.forEach(t),TFr=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fbe=n(oQ,"CODE",{});var K1t=s(Fbe);FFr=r(K1t,"from_pretrained()"),K1t.forEach(t),CFr=r(oQ,"to load the model weights."),oQ.forEach(t),MFr=i(ui),Cbe=n(ui,"P",{});var Z1t=s(Cbe);EFr=r(Z1t,"Examples:"),Z1t.forEach(t),yFr=i(ui),m(SL.$$.fragment,ui),ui.forEach(t),wFr=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(PL.$$.fragment,xa),AFr=i(xa),Mbe=n(xa,"P",{});var ebt=s(Mbe);LFr=r(ebt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ebt.forEach(t),BFr=i(xa),kn=n(xa,"P",{});var q4=s(kn);xFr=r(q4,"The model class to instantiate is selected based on the "),Ebe=n(q4,"CODE",{});var obt=s(Ebe);kFr=r(obt,"model_type"),obt.forEach(t),RFr=r(q4,` property of the config object (either
passed as an argument or loaded from `),ybe=n(q4,"CODE",{});var rbt=s(ybe);SFr=r(rbt,"pretrained_model_name_or_path"),rbt.forEach(t),PFr=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(q4,"CODE",{});var tbt=s(wbe);$Fr=r(tbt,"pretrained_model_name_or_path"),tbt.forEach(t),IFr=r(q4,":"),q4.forEach(t),jFr=i(xa),ce=n(xa,"UL",{});var ge=s(ce);yC=n(ge,"LI",{});var oBe=s(yC);Abe=n(oBe,"STRONG",{});var abt=s(Abe);DFr=r(abt,"albert"),abt.forEach(t),NFr=r(oBe," \u2014 "),fV=n(oBe,"A",{href:!0});var nbt=s(fV);qFr=r(nbt,"FlaxAlbertForPreTraining"),nbt.forEach(t),GFr=r(oBe," (ALBERT model)"),oBe.forEach(t),OFr=i(ge),wC=n(ge,"LI",{});var rBe=s(wC);Lbe=n(rBe,"STRONG",{});var sbt=s(Lbe);XFr=r(sbt,"bart"),sbt.forEach(t),VFr=r(rBe," \u2014 "),mV=n(rBe,"A",{href:!0});var lbt=s(mV);zFr=r(lbt,"FlaxBartForConditionalGeneration"),lbt.forEach(t),WFr=r(rBe," (BART model)"),rBe.forEach(t),QFr=i(ge),AC=n(ge,"LI",{});var tBe=s(AC);Bbe=n(tBe,"STRONG",{});var ibt=s(Bbe);HFr=r(ibt,"bert"),ibt.forEach(t),UFr=r(tBe," \u2014 "),gV=n(tBe,"A",{href:!0});var dbt=s(gV);JFr=r(dbt,"FlaxBertForPreTraining"),dbt.forEach(t),YFr=r(tBe," (BERT model)"),tBe.forEach(t),KFr=i(ge),LC=n(ge,"LI",{});var aBe=s(LC);xbe=n(aBe,"STRONG",{});var cbt=s(xbe);ZFr=r(cbt,"big_bird"),cbt.forEach(t),eCr=r(aBe," \u2014 "),hV=n(aBe,"A",{href:!0});var fbt=s(hV);oCr=r(fbt,"FlaxBigBirdForPreTraining"),fbt.forEach(t),rCr=r(aBe," (BigBird model)"),aBe.forEach(t),tCr=i(ge),BC=n(ge,"LI",{});var nBe=s(BC);kbe=n(nBe,"STRONG",{});var mbt=s(kbe);aCr=r(mbt,"electra"),mbt.forEach(t),nCr=r(nBe," \u2014 "),pV=n(nBe,"A",{href:!0});var gbt=s(pV);sCr=r(gbt,"FlaxElectraForPreTraining"),gbt.forEach(t),lCr=r(nBe," (ELECTRA model)"),nBe.forEach(t),iCr=i(ge),xC=n(ge,"LI",{});var sBe=s(xC);Rbe=n(sBe,"STRONG",{});var hbt=s(Rbe);dCr=r(hbt,"mbart"),hbt.forEach(t),cCr=r(sBe," \u2014 "),_V=n(sBe,"A",{href:!0});var pbt=s(_V);fCr=r(pbt,"FlaxMBartForConditionalGeneration"),pbt.forEach(t),mCr=r(sBe," (mBART model)"),sBe.forEach(t),gCr=i(ge),kC=n(ge,"LI",{});var lBe=s(kC);Sbe=n(lBe,"STRONG",{});var _bt=s(Sbe);hCr=r(_bt,"mt5"),_bt.forEach(t),pCr=r(lBe," \u2014 "),uV=n(lBe,"A",{href:!0});var ubt=s(uV);_Cr=r(ubt,"FlaxMT5ForConditionalGeneration"),ubt.forEach(t),uCr=r(lBe," (mT5 model)"),lBe.forEach(t),bCr=i(ge),RC=n(ge,"LI",{});var iBe=s(RC);Pbe=n(iBe,"STRONG",{});var bbt=s(Pbe);vCr=r(bbt,"roberta"),bbt.forEach(t),TCr=r(iBe," \u2014 "),bV=n(iBe,"A",{href:!0});var vbt=s(bV);FCr=r(vbt,"FlaxRobertaForMaskedLM"),vbt.forEach(t),CCr=r(iBe," (RoBERTa model)"),iBe.forEach(t),MCr=i(ge),SC=n(ge,"LI",{});var dBe=s(SC);$be=n(dBe,"STRONG",{});var Tbt=s($be);ECr=r(Tbt,"roformer"),Tbt.forEach(t),yCr=r(dBe," \u2014 "),vV=n(dBe,"A",{href:!0});var Fbt=s(vV);wCr=r(Fbt,"FlaxRoFormerForMaskedLM"),Fbt.forEach(t),ACr=r(dBe," (RoFormer model)"),dBe.forEach(t),LCr=i(ge),PC=n(ge,"LI",{});var cBe=s(PC);Ibe=n(cBe,"STRONG",{});var Cbt=s(Ibe);BCr=r(Cbt,"t5"),Cbt.forEach(t),xCr=r(cBe," \u2014 "),TV=n(cBe,"A",{href:!0});var Mbt=s(TV);kCr=r(Mbt,"FlaxT5ForConditionalGeneration"),Mbt.forEach(t),RCr=r(cBe," (T5 model)"),cBe.forEach(t),SCr=i(ge),$C=n(ge,"LI",{});var fBe=s($C);jbe=n(fBe,"STRONG",{});var Ebt=s(jbe);PCr=r(Ebt,"wav2vec2"),Ebt.forEach(t),$Cr=r(fBe," \u2014 "),FV=n(fBe,"A",{href:!0});var ybt=s(FV);ICr=r(ybt,"FlaxWav2Vec2ForPreTraining"),ybt.forEach(t),jCr=r(fBe," (Wav2Vec2 model)"),fBe.forEach(t),DCr=i(ge),IC=n(ge,"LI",{});var mBe=s(IC);Dbe=n(mBe,"STRONG",{});var wbt=s(Dbe);NCr=r(wbt,"xlm-roberta"),wbt.forEach(t),qCr=r(mBe," \u2014 "),CV=n(mBe,"A",{href:!0});var Abt=s(CV);GCr=r(Abt,"FlaxXLMRobertaForMaskedLM"),Abt.forEach(t),OCr=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),ge.forEach(t),XCr=i(xa),Nbe=n(xa,"P",{});var Lbt=s(Nbe);VCr=r(Lbt,"Examples:"),Lbt.forEach(t),zCr=i(xa),m($L.$$.fragment,xa),xa.forEach(t),_i.forEach(t),oRe=i(c),lf=n(c,"H2",{class:!0});var gPe=s(lf);jC=n(gPe,"A",{id:!0,class:!0,href:!0});var Bbt=s(jC);qbe=n(Bbt,"SPAN",{});var xbt=s(qbe);m(IL.$$.fragment,xbt),xbt.forEach(t),Bbt.forEach(t),WCr=i(gPe),Gbe=n(gPe,"SPAN",{});var kbt=s(Gbe);QCr=r(kbt,"FlaxAutoModelForMaskedLM"),kbt.forEach(t),gPe.forEach(t),rRe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(jL.$$.fragment,bi),HCr=i(bi),df=n(bi,"P",{});var rQ=s(df);UCr=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Obe=n(rQ,"CODE",{});var Rbt=s(Obe);JCr=r(Rbt,"from_pretrained()"),Rbt.forEach(t),YCr=r(rQ,"class method or the "),Xbe=n(rQ,"CODE",{});var Sbt=s(Xbe);KCr=r(Sbt,"from_config()"),Sbt.forEach(t),ZCr=r(rQ,`class
method.`),rQ.forEach(t),eMr=i(bi),DL=n(bi,"P",{});var hPe=s(DL);oMr=r(hPe,"This class cannot be instantiated directly using "),Vbe=n(hPe,"CODE",{});var Pbt=s(Vbe);rMr=r(Pbt,"__init__()"),Pbt.forEach(t),tMr=r(hPe," (throws an error)."),hPe.forEach(t),aMr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(NL.$$.fragment,vi),nMr=i(vi),zbe=n(vi,"P",{});var $bt=s(zbe);sMr=r($bt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$bt.forEach(t),lMr=i(vi),cf=n(vi,"P",{});var tQ=s(cf);iMr=r(tQ,`Note:
Loading a model from its configuration file does `),Wbe=n(tQ,"STRONG",{});var Ibt=s(Wbe);dMr=r(Ibt,"not"),Ibt.forEach(t),cMr=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qbe=n(tQ,"CODE",{});var jbt=s(Qbe);fMr=r(jbt,"from_pretrained()"),jbt.forEach(t),mMr=r(tQ,"to load the model weights."),tQ.forEach(t),gMr=i(vi),Hbe=n(vi,"P",{});var Dbt=s(Hbe);hMr=r(Dbt,"Examples:"),Dbt.forEach(t),pMr=i(vi),m(qL.$$.fragment,vi),vi.forEach(t),_Mr=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(GL.$$.fragment,ka),uMr=i(ka),Ube=n(ka,"P",{});var Nbt=s(Ube);bMr=r(Nbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Nbt.forEach(t),vMr=i(ka),Rn=n(ka,"P",{});var G4=s(Rn);TMr=r(G4,"The model class to instantiate is selected based on the "),Jbe=n(G4,"CODE",{});var qbt=s(Jbe);FMr=r(qbt,"model_type"),qbt.forEach(t),CMr=r(G4,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(G4,"CODE",{});var Gbt=s(Ybe);MMr=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),EMr=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(G4,"CODE",{});var Obt=s(Kbe);yMr=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),wMr=r(G4,":"),G4.forEach(t),AMr=i(ka),ue=n(ka,"UL",{});var ye=s(ue);DC=n(ye,"LI",{});var gBe=s(DC);Zbe=n(gBe,"STRONG",{});var Xbt=s(Zbe);LMr=r(Xbt,"albert"),Xbt.forEach(t),BMr=r(gBe," \u2014 "),MV=n(gBe,"A",{href:!0});var Vbt=s(MV);xMr=r(Vbt,"FlaxAlbertForMaskedLM"),Vbt.forEach(t),kMr=r(gBe," (ALBERT model)"),gBe.forEach(t),RMr=i(ye),NC=n(ye,"LI",{});var hBe=s(NC);e3e=n(hBe,"STRONG",{});var zbt=s(e3e);SMr=r(zbt,"bart"),zbt.forEach(t),PMr=r(hBe," \u2014 "),EV=n(hBe,"A",{href:!0});var Wbt=s(EV);$Mr=r(Wbt,"FlaxBartForConditionalGeneration"),Wbt.forEach(t),IMr=r(hBe," (BART model)"),hBe.forEach(t),jMr=i(ye),qC=n(ye,"LI",{});var pBe=s(qC);o3e=n(pBe,"STRONG",{});var Qbt=s(o3e);DMr=r(Qbt,"bert"),Qbt.forEach(t),NMr=r(pBe," \u2014 "),yV=n(pBe,"A",{href:!0});var Hbt=s(yV);qMr=r(Hbt,"FlaxBertForMaskedLM"),Hbt.forEach(t),GMr=r(pBe," (BERT model)"),pBe.forEach(t),OMr=i(ye),GC=n(ye,"LI",{});var _Be=s(GC);r3e=n(_Be,"STRONG",{});var Ubt=s(r3e);XMr=r(Ubt,"big_bird"),Ubt.forEach(t),VMr=r(_Be," \u2014 "),wV=n(_Be,"A",{href:!0});var Jbt=s(wV);zMr=r(Jbt,"FlaxBigBirdForMaskedLM"),Jbt.forEach(t),WMr=r(_Be," (BigBird model)"),_Be.forEach(t),QMr=i(ye),OC=n(ye,"LI",{});var uBe=s(OC);t3e=n(uBe,"STRONG",{});var Ybt=s(t3e);HMr=r(Ybt,"distilbert"),Ybt.forEach(t),UMr=r(uBe," \u2014 "),AV=n(uBe,"A",{href:!0});var Kbt=s(AV);JMr=r(Kbt,"FlaxDistilBertForMaskedLM"),Kbt.forEach(t),YMr=r(uBe," (DistilBERT model)"),uBe.forEach(t),KMr=i(ye),XC=n(ye,"LI",{});var bBe=s(XC);a3e=n(bBe,"STRONG",{});var Zbt=s(a3e);ZMr=r(Zbt,"electra"),Zbt.forEach(t),e4r=r(bBe," \u2014 "),LV=n(bBe,"A",{href:!0});var e3t=s(LV);o4r=r(e3t,"FlaxElectraForMaskedLM"),e3t.forEach(t),r4r=r(bBe," (ELECTRA model)"),bBe.forEach(t),t4r=i(ye),VC=n(ye,"LI",{});var vBe=s(VC);n3e=n(vBe,"STRONG",{});var o3t=s(n3e);a4r=r(o3t,"mbart"),o3t.forEach(t),n4r=r(vBe," \u2014 "),BV=n(vBe,"A",{href:!0});var r3t=s(BV);s4r=r(r3t,"FlaxMBartForConditionalGeneration"),r3t.forEach(t),l4r=r(vBe," (mBART model)"),vBe.forEach(t),i4r=i(ye),zC=n(ye,"LI",{});var TBe=s(zC);s3e=n(TBe,"STRONG",{});var t3t=s(s3e);d4r=r(t3t,"roberta"),t3t.forEach(t),c4r=r(TBe," \u2014 "),xV=n(TBe,"A",{href:!0});var a3t=s(xV);f4r=r(a3t,"FlaxRobertaForMaskedLM"),a3t.forEach(t),m4r=r(TBe," (RoBERTa model)"),TBe.forEach(t),g4r=i(ye),WC=n(ye,"LI",{});var FBe=s(WC);l3e=n(FBe,"STRONG",{});var n3t=s(l3e);h4r=r(n3t,"roformer"),n3t.forEach(t),p4r=r(FBe," \u2014 "),kV=n(FBe,"A",{href:!0});var s3t=s(kV);_4r=r(s3t,"FlaxRoFormerForMaskedLM"),s3t.forEach(t),u4r=r(FBe," (RoFormer model)"),FBe.forEach(t),b4r=i(ye),QC=n(ye,"LI",{});var CBe=s(QC);i3e=n(CBe,"STRONG",{});var l3t=s(i3e);v4r=r(l3t,"xlm-roberta"),l3t.forEach(t),T4r=r(CBe," \u2014 "),RV=n(CBe,"A",{href:!0});var i3t=s(RV);F4r=r(i3t,"FlaxXLMRobertaForMaskedLM"),i3t.forEach(t),C4r=r(CBe," (XLM-RoBERTa model)"),CBe.forEach(t),ye.forEach(t),M4r=i(ka),d3e=n(ka,"P",{});var d3t=s(d3e);E4r=r(d3t,"Examples:"),d3t.forEach(t),y4r=i(ka),m(OL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),tRe=i(c),ff=n(c,"H2",{class:!0});var pPe=s(ff);HC=n(pPe,"A",{id:!0,class:!0,href:!0});var c3t=s(HC);c3e=n(c3t,"SPAN",{});var f3t=s(c3e);m(XL.$$.fragment,f3t),f3t.forEach(t),c3t.forEach(t),w4r=i(pPe),f3e=n(pPe,"SPAN",{});var m3t=s(f3e);A4r=r(m3t,"FlaxAutoModelForSeq2SeqLM"),m3t.forEach(t),pPe.forEach(t),aRe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(VL.$$.fragment,Ti),L4r=i(Ti),mf=n(Ti,"P",{});var aQ=s(mf);B4r=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),m3e=n(aQ,"CODE",{});var g3t=s(m3e);x4r=r(g3t,"from_pretrained()"),g3t.forEach(t),k4r=r(aQ,"class method or the "),g3e=n(aQ,"CODE",{});var h3t=s(g3e);R4r=r(h3t,"from_config()"),h3t.forEach(t),S4r=r(aQ,`class
method.`),aQ.forEach(t),P4r=i(Ti),zL=n(Ti,"P",{});var _Pe=s(zL);$4r=r(_Pe,"This class cannot be instantiated directly using "),h3e=n(_Pe,"CODE",{});var p3t=s(h3e);I4r=r(p3t,"__init__()"),p3t.forEach(t),j4r=r(_Pe," (throws an error)."),_Pe.forEach(t),D4r=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(WL.$$.fragment,Fi),N4r=i(Fi),p3e=n(Fi,"P",{});var _3t=s(p3e);q4r=r(_3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_3t.forEach(t),G4r=i(Fi),gf=n(Fi,"P",{});var nQ=s(gf);O4r=r(nQ,`Note:
Loading a model from its configuration file does `),_3e=n(nQ,"STRONG",{});var u3t=s(_3e);X4r=r(u3t,"not"),u3t.forEach(t),V4r=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),u3e=n(nQ,"CODE",{});var b3t=s(u3e);z4r=r(b3t,"from_pretrained()"),b3t.forEach(t),W4r=r(nQ,"to load the model weights."),nQ.forEach(t),Q4r=i(Fi),b3e=n(Fi,"P",{});var v3t=s(b3e);H4r=r(v3t,"Examples:"),v3t.forEach(t),U4r=i(Fi),m(QL.$$.fragment,Fi),Fi.forEach(t),J4r=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(HL.$$.fragment,Ra),Y4r=i(Ra),v3e=n(Ra,"P",{});var T3t=s(v3e);K4r=r(T3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),T3t.forEach(t),Z4r=i(Ra),Sn=n(Ra,"P",{});var O4=s(Sn);eEr=r(O4,"The model class to instantiate is selected based on the "),T3e=n(O4,"CODE",{});var F3t=s(T3e);oEr=r(F3t,"model_type"),F3t.forEach(t),rEr=r(O4,` property of the config object (either
passed as an argument or loaded from `),F3e=n(O4,"CODE",{});var C3t=s(F3e);tEr=r(C3t,"pretrained_model_name_or_path"),C3t.forEach(t),aEr=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C3e=n(O4,"CODE",{});var M3t=s(C3e);nEr=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),sEr=r(O4,":"),O4.forEach(t),lEr=i(Ra),Me=n(Ra,"UL",{});var lo=s(Me);UC=n(lo,"LI",{});var MBe=s(UC);M3e=n(MBe,"STRONG",{});var E3t=s(M3e);iEr=r(E3t,"bart"),E3t.forEach(t),dEr=r(MBe," \u2014 "),SV=n(MBe,"A",{href:!0});var y3t=s(SV);cEr=r(y3t,"FlaxBartForConditionalGeneration"),y3t.forEach(t),fEr=r(MBe," (BART model)"),MBe.forEach(t),mEr=i(lo),JC=n(lo,"LI",{});var EBe=s(JC);E3e=n(EBe,"STRONG",{});var w3t=s(E3e);gEr=r(w3t,"blenderbot"),w3t.forEach(t),hEr=r(EBe," \u2014 "),PV=n(EBe,"A",{href:!0});var A3t=s(PV);pEr=r(A3t,"FlaxBlenderbotForConditionalGeneration"),A3t.forEach(t),_Er=r(EBe," (Blenderbot model)"),EBe.forEach(t),uEr=i(lo),YC=n(lo,"LI",{});var yBe=s(YC);y3e=n(yBe,"STRONG",{});var L3t=s(y3e);bEr=r(L3t,"blenderbot-small"),L3t.forEach(t),vEr=r(yBe," \u2014 "),$V=n(yBe,"A",{href:!0});var B3t=s($V);TEr=r(B3t,"FlaxBlenderbotSmallForConditionalGeneration"),B3t.forEach(t),FEr=r(yBe," (BlenderbotSmall model)"),yBe.forEach(t),CEr=i(lo),KC=n(lo,"LI",{});var wBe=s(KC);w3e=n(wBe,"STRONG",{});var x3t=s(w3e);MEr=r(x3t,"encoder-decoder"),x3t.forEach(t),EEr=r(wBe," \u2014 "),IV=n(wBe,"A",{href:!0});var k3t=s(IV);yEr=r(k3t,"FlaxEncoderDecoderModel"),k3t.forEach(t),wEr=r(wBe," (Encoder decoder model)"),wBe.forEach(t),AEr=i(lo),ZC=n(lo,"LI",{});var ABe=s(ZC);A3e=n(ABe,"STRONG",{});var R3t=s(A3e);LEr=r(R3t,"marian"),R3t.forEach(t),BEr=r(ABe," \u2014 "),jV=n(ABe,"A",{href:!0});var S3t=s(jV);xEr=r(S3t,"FlaxMarianMTModel"),S3t.forEach(t),kEr=r(ABe," (Marian model)"),ABe.forEach(t),REr=i(lo),eM=n(lo,"LI",{});var LBe=s(eM);L3e=n(LBe,"STRONG",{});var P3t=s(L3e);SEr=r(P3t,"mbart"),P3t.forEach(t),PEr=r(LBe," \u2014 "),DV=n(LBe,"A",{href:!0});var $3t=s(DV);$Er=r($3t,"FlaxMBartForConditionalGeneration"),$3t.forEach(t),IEr=r(LBe," (mBART model)"),LBe.forEach(t),jEr=i(lo),oM=n(lo,"LI",{});var BBe=s(oM);B3e=n(BBe,"STRONG",{});var I3t=s(B3e);DEr=r(I3t,"mt5"),I3t.forEach(t),NEr=r(BBe," \u2014 "),NV=n(BBe,"A",{href:!0});var j3t=s(NV);qEr=r(j3t,"FlaxMT5ForConditionalGeneration"),j3t.forEach(t),GEr=r(BBe," (mT5 model)"),BBe.forEach(t),OEr=i(lo),rM=n(lo,"LI",{});var xBe=s(rM);x3e=n(xBe,"STRONG",{});var D3t=s(x3e);XEr=r(D3t,"pegasus"),D3t.forEach(t),VEr=r(xBe," \u2014 "),qV=n(xBe,"A",{href:!0});var N3t=s(qV);zEr=r(N3t,"FlaxPegasusForConditionalGeneration"),N3t.forEach(t),WEr=r(xBe," (Pegasus model)"),xBe.forEach(t),QEr=i(lo),tM=n(lo,"LI",{});var kBe=s(tM);k3e=n(kBe,"STRONG",{});var q3t=s(k3e);HEr=r(q3t,"t5"),q3t.forEach(t),UEr=r(kBe," \u2014 "),GV=n(kBe,"A",{href:!0});var G3t=s(GV);JEr=r(G3t,"FlaxT5ForConditionalGeneration"),G3t.forEach(t),YEr=r(kBe," (T5 model)"),kBe.forEach(t),lo.forEach(t),KEr=i(Ra),R3e=n(Ra,"P",{});var O3t=s(R3e);ZEr=r(O3t,"Examples:"),O3t.forEach(t),eyr=i(Ra),m(UL.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),nRe=i(c),hf=n(c,"H2",{class:!0});var uPe=s(hf);aM=n(uPe,"A",{id:!0,class:!0,href:!0});var X3t=s(aM);S3e=n(X3t,"SPAN",{});var V3t=s(S3e);m(JL.$$.fragment,V3t),V3t.forEach(t),X3t.forEach(t),oyr=i(uPe),P3e=n(uPe,"SPAN",{});var z3t=s(P3e);ryr=r(z3t,"FlaxAutoModelForSequenceClassification"),z3t.forEach(t),uPe.forEach(t),sRe=i(c),jr=n(c,"DIV",{class:!0});var Ci=s(jr);m(YL.$$.fragment,Ci),tyr=i(Ci),pf=n(Ci,"P",{});var sQ=s(pf);ayr=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$3e=n(sQ,"CODE",{});var W3t=s($3e);nyr=r(W3t,"from_pretrained()"),W3t.forEach(t),syr=r(sQ,"class method or the "),I3e=n(sQ,"CODE",{});var Q3t=s(I3e);lyr=r(Q3t,"from_config()"),Q3t.forEach(t),iyr=r(sQ,`class
method.`),sQ.forEach(t),dyr=i(Ci),KL=n(Ci,"P",{});var bPe=s(KL);cyr=r(bPe,"This class cannot be instantiated directly using "),j3e=n(bPe,"CODE",{});var H3t=s(j3e);fyr=r(H3t,"__init__()"),H3t.forEach(t),myr=r(bPe," (throws an error)."),bPe.forEach(t),gyr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(ZL.$$.fragment,Mi),hyr=i(Mi),D3e=n(Mi,"P",{});var U3t=s(D3e);pyr=r(U3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),U3t.forEach(t),_yr=i(Mi),_f=n(Mi,"P",{});var lQ=s(_f);uyr=r(lQ,`Note:
Loading a model from its configuration file does `),N3e=n(lQ,"STRONG",{});var J3t=s(N3e);byr=r(J3t,"not"),J3t.forEach(t),vyr=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),q3e=n(lQ,"CODE",{});var Y3t=s(q3e);Tyr=r(Y3t,"from_pretrained()"),Y3t.forEach(t),Fyr=r(lQ,"to load the model weights."),lQ.forEach(t),Cyr=i(Mi),G3e=n(Mi,"P",{});var K3t=s(G3e);Myr=r(K3t,"Examples:"),K3t.forEach(t),Eyr=i(Mi),m(e7.$$.fragment,Mi),Mi.forEach(t),yyr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(o7.$$.fragment,Sa),wyr=i(Sa),O3e=n(Sa,"P",{});var Z3t=s(O3e);Ayr=r(Z3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Z3t.forEach(t),Lyr=i(Sa),Pn=n(Sa,"P",{});var X4=s(Pn);Byr=r(X4,"The model class to instantiate is selected based on the "),X3e=n(X4,"CODE",{});var e5t=s(X3e);xyr=r(e5t,"model_type"),e5t.forEach(t),kyr=r(X4,` property of the config object (either
passed as an argument or loaded from `),V3e=n(X4,"CODE",{});var o5t=s(V3e);Ryr=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),Syr=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=n(X4,"CODE",{});var r5t=s(z3e);Pyr=r(r5t,"pretrained_model_name_or_path"),r5t.forEach(t),$yr=r(X4,":"),X4.forEach(t),Iyr=i(Sa),be=n(Sa,"UL",{});var we=s(be);nM=n(we,"LI",{});var RBe=s(nM);W3e=n(RBe,"STRONG",{});var t5t=s(W3e);jyr=r(t5t,"albert"),t5t.forEach(t),Dyr=r(RBe," \u2014 "),OV=n(RBe,"A",{href:!0});var a5t=s(OV);Nyr=r(a5t,"FlaxAlbertForSequenceClassification"),a5t.forEach(t),qyr=r(RBe," (ALBERT model)"),RBe.forEach(t),Gyr=i(we),sM=n(we,"LI",{});var SBe=s(sM);Q3e=n(SBe,"STRONG",{});var n5t=s(Q3e);Oyr=r(n5t,"bart"),n5t.forEach(t),Xyr=r(SBe," \u2014 "),XV=n(SBe,"A",{href:!0});var s5t=s(XV);Vyr=r(s5t,"FlaxBartForSequenceClassification"),s5t.forEach(t),zyr=r(SBe," (BART model)"),SBe.forEach(t),Wyr=i(we),lM=n(we,"LI",{});var PBe=s(lM);H3e=n(PBe,"STRONG",{});var l5t=s(H3e);Qyr=r(l5t,"bert"),l5t.forEach(t),Hyr=r(PBe," \u2014 "),VV=n(PBe,"A",{href:!0});var i5t=s(VV);Uyr=r(i5t,"FlaxBertForSequenceClassification"),i5t.forEach(t),Jyr=r(PBe," (BERT model)"),PBe.forEach(t),Yyr=i(we),iM=n(we,"LI",{});var $Be=s(iM);U3e=n($Be,"STRONG",{});var d5t=s(U3e);Kyr=r(d5t,"big_bird"),d5t.forEach(t),Zyr=r($Be," \u2014 "),zV=n($Be,"A",{href:!0});var c5t=s(zV);ewr=r(c5t,"FlaxBigBirdForSequenceClassification"),c5t.forEach(t),owr=r($Be," (BigBird model)"),$Be.forEach(t),rwr=i(we),dM=n(we,"LI",{});var IBe=s(dM);J3e=n(IBe,"STRONG",{});var f5t=s(J3e);twr=r(f5t,"distilbert"),f5t.forEach(t),awr=r(IBe," \u2014 "),WV=n(IBe,"A",{href:!0});var m5t=s(WV);nwr=r(m5t,"FlaxDistilBertForSequenceClassification"),m5t.forEach(t),swr=r(IBe," (DistilBERT model)"),IBe.forEach(t),lwr=i(we),cM=n(we,"LI",{});var jBe=s(cM);Y3e=n(jBe,"STRONG",{});var g5t=s(Y3e);iwr=r(g5t,"electra"),g5t.forEach(t),dwr=r(jBe," \u2014 "),QV=n(jBe,"A",{href:!0});var h5t=s(QV);cwr=r(h5t,"FlaxElectraForSequenceClassification"),h5t.forEach(t),fwr=r(jBe," (ELECTRA model)"),jBe.forEach(t),mwr=i(we),fM=n(we,"LI",{});var DBe=s(fM);K3e=n(DBe,"STRONG",{});var p5t=s(K3e);gwr=r(p5t,"mbart"),p5t.forEach(t),hwr=r(DBe," \u2014 "),HV=n(DBe,"A",{href:!0});var _5t=s(HV);pwr=r(_5t,"FlaxMBartForSequenceClassification"),_5t.forEach(t),_wr=r(DBe," (mBART model)"),DBe.forEach(t),uwr=i(we),mM=n(we,"LI",{});var NBe=s(mM);Z3e=n(NBe,"STRONG",{});var u5t=s(Z3e);bwr=r(u5t,"roberta"),u5t.forEach(t),vwr=r(NBe," \u2014 "),UV=n(NBe,"A",{href:!0});var b5t=s(UV);Twr=r(b5t,"FlaxRobertaForSequenceClassification"),b5t.forEach(t),Fwr=r(NBe," (RoBERTa model)"),NBe.forEach(t),Cwr=i(we),gM=n(we,"LI",{});var qBe=s(gM);e5e=n(qBe,"STRONG",{});var v5t=s(e5e);Mwr=r(v5t,"roformer"),v5t.forEach(t),Ewr=r(qBe," \u2014 "),JV=n(qBe,"A",{href:!0});var T5t=s(JV);ywr=r(T5t,"FlaxRoFormerForSequenceClassification"),T5t.forEach(t),wwr=r(qBe," (RoFormer model)"),qBe.forEach(t),Awr=i(we),hM=n(we,"LI",{});var GBe=s(hM);o5e=n(GBe,"STRONG",{});var F5t=s(o5e);Lwr=r(F5t,"xlm-roberta"),F5t.forEach(t),Bwr=r(GBe," \u2014 "),YV=n(GBe,"A",{href:!0});var C5t=s(YV);xwr=r(C5t,"FlaxXLMRobertaForSequenceClassification"),C5t.forEach(t),kwr=r(GBe," (XLM-RoBERTa model)"),GBe.forEach(t),we.forEach(t),Rwr=i(Sa),r5e=n(Sa,"P",{});var M5t=s(r5e);Swr=r(M5t,"Examples:"),M5t.forEach(t),Pwr=i(Sa),m(r7.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),lRe=i(c),uf=n(c,"H2",{class:!0});var vPe=s(uf);pM=n(vPe,"A",{id:!0,class:!0,href:!0});var E5t=s(pM);t5e=n(E5t,"SPAN",{});var y5t=s(t5e);m(t7.$$.fragment,y5t),y5t.forEach(t),E5t.forEach(t),$wr=i(vPe),a5e=n(vPe,"SPAN",{});var w5t=s(a5e);Iwr=r(w5t,"FlaxAutoModelForQuestionAnswering"),w5t.forEach(t),vPe.forEach(t),iRe=i(c),Dr=n(c,"DIV",{class:!0});var Ei=s(Dr);m(a7.$$.fragment,Ei),jwr=i(Ei),bf=n(Ei,"P",{});var iQ=s(bf);Dwr=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),n5e=n(iQ,"CODE",{});var A5t=s(n5e);Nwr=r(A5t,"from_pretrained()"),A5t.forEach(t),qwr=r(iQ,"class method or the "),s5e=n(iQ,"CODE",{});var L5t=s(s5e);Gwr=r(L5t,"from_config()"),L5t.forEach(t),Owr=r(iQ,`class
method.`),iQ.forEach(t),Xwr=i(Ei),n7=n(Ei,"P",{});var TPe=s(n7);Vwr=r(TPe,"This class cannot be instantiated directly using "),l5e=n(TPe,"CODE",{});var B5t=s(l5e);zwr=r(B5t,"__init__()"),B5t.forEach(t),Wwr=r(TPe," (throws an error)."),TPe.forEach(t),Qwr=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(s7.$$.fragment,yi),Hwr=i(yi),i5e=n(yi,"P",{});var x5t=s(i5e);Uwr=r(x5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),x5t.forEach(t),Jwr=i(yi),vf=n(yi,"P",{});var dQ=s(vf);Ywr=r(dQ,`Note:
Loading a model from its configuration file does `),d5e=n(dQ,"STRONG",{});var k5t=s(d5e);Kwr=r(k5t,"not"),k5t.forEach(t),Zwr=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),c5e=n(dQ,"CODE",{});var R5t=s(c5e);eAr=r(R5t,"from_pretrained()"),R5t.forEach(t),oAr=r(dQ,"to load the model weights."),dQ.forEach(t),rAr=i(yi),f5e=n(yi,"P",{});var S5t=s(f5e);tAr=r(S5t,"Examples:"),S5t.forEach(t),aAr=i(yi),m(l7.$$.fragment,yi),yi.forEach(t),nAr=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(i7.$$.fragment,Pa),sAr=i(Pa),m5e=n(Pa,"P",{});var P5t=s(m5e);lAr=r(P5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),P5t.forEach(t),iAr=i(Pa),$n=n(Pa,"P",{});var V4=s($n);dAr=r(V4,"The model class to instantiate is selected based on the "),g5e=n(V4,"CODE",{});var $5t=s(g5e);cAr=r($5t,"model_type"),$5t.forEach(t),fAr=r(V4,` property of the config object (either
passed as an argument or loaded from `),h5e=n(V4,"CODE",{});var I5t=s(h5e);mAr=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),gAr=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=n(V4,"CODE",{});var j5t=s(p5e);hAr=r(j5t,"pretrained_model_name_or_path"),j5t.forEach(t),pAr=r(V4,":"),V4.forEach(t),_Ar=i(Pa),ve=n(Pa,"UL",{});var Ae=s(ve);_M=n(Ae,"LI",{});var OBe=s(_M);_5e=n(OBe,"STRONG",{});var D5t=s(_5e);uAr=r(D5t,"albert"),D5t.forEach(t),bAr=r(OBe," \u2014 "),KV=n(OBe,"A",{href:!0});var N5t=s(KV);vAr=r(N5t,"FlaxAlbertForQuestionAnswering"),N5t.forEach(t),TAr=r(OBe," (ALBERT model)"),OBe.forEach(t),FAr=i(Ae),uM=n(Ae,"LI",{});var XBe=s(uM);u5e=n(XBe,"STRONG",{});var q5t=s(u5e);CAr=r(q5t,"bart"),q5t.forEach(t),MAr=r(XBe," \u2014 "),ZV=n(XBe,"A",{href:!0});var G5t=s(ZV);EAr=r(G5t,"FlaxBartForQuestionAnswering"),G5t.forEach(t),yAr=r(XBe," (BART model)"),XBe.forEach(t),wAr=i(Ae),bM=n(Ae,"LI",{});var VBe=s(bM);b5e=n(VBe,"STRONG",{});var O5t=s(b5e);AAr=r(O5t,"bert"),O5t.forEach(t),LAr=r(VBe," \u2014 "),ez=n(VBe,"A",{href:!0});var X5t=s(ez);BAr=r(X5t,"FlaxBertForQuestionAnswering"),X5t.forEach(t),xAr=r(VBe," (BERT model)"),VBe.forEach(t),kAr=i(Ae),vM=n(Ae,"LI",{});var zBe=s(vM);v5e=n(zBe,"STRONG",{});var V5t=s(v5e);RAr=r(V5t,"big_bird"),V5t.forEach(t),SAr=r(zBe," \u2014 "),oz=n(zBe,"A",{href:!0});var z5t=s(oz);PAr=r(z5t,"FlaxBigBirdForQuestionAnswering"),z5t.forEach(t),$Ar=r(zBe," (BigBird model)"),zBe.forEach(t),IAr=i(Ae),TM=n(Ae,"LI",{});var WBe=s(TM);T5e=n(WBe,"STRONG",{});var W5t=s(T5e);jAr=r(W5t,"distilbert"),W5t.forEach(t),DAr=r(WBe," \u2014 "),rz=n(WBe,"A",{href:!0});var Q5t=s(rz);NAr=r(Q5t,"FlaxDistilBertForQuestionAnswering"),Q5t.forEach(t),qAr=r(WBe," (DistilBERT model)"),WBe.forEach(t),GAr=i(Ae),FM=n(Ae,"LI",{});var QBe=s(FM);F5e=n(QBe,"STRONG",{});var H5t=s(F5e);OAr=r(H5t,"electra"),H5t.forEach(t),XAr=r(QBe," \u2014 "),tz=n(QBe,"A",{href:!0});var U5t=s(tz);VAr=r(U5t,"FlaxElectraForQuestionAnswering"),U5t.forEach(t),zAr=r(QBe," (ELECTRA model)"),QBe.forEach(t),WAr=i(Ae),CM=n(Ae,"LI",{});var HBe=s(CM);C5e=n(HBe,"STRONG",{});var J5t=s(C5e);QAr=r(J5t,"mbart"),J5t.forEach(t),HAr=r(HBe," \u2014 "),az=n(HBe,"A",{href:!0});var Y5t=s(az);UAr=r(Y5t,"FlaxMBartForQuestionAnswering"),Y5t.forEach(t),JAr=r(HBe," (mBART model)"),HBe.forEach(t),YAr=i(Ae),MM=n(Ae,"LI",{});var UBe=s(MM);M5e=n(UBe,"STRONG",{});var K5t=s(M5e);KAr=r(K5t,"roberta"),K5t.forEach(t),ZAr=r(UBe," \u2014 "),nz=n(UBe,"A",{href:!0});var Z5t=s(nz);e0r=r(Z5t,"FlaxRobertaForQuestionAnswering"),Z5t.forEach(t),o0r=r(UBe," (RoBERTa model)"),UBe.forEach(t),r0r=i(Ae),EM=n(Ae,"LI",{});var JBe=s(EM);E5e=n(JBe,"STRONG",{});var evt=s(E5e);t0r=r(evt,"roformer"),evt.forEach(t),a0r=r(JBe," \u2014 "),sz=n(JBe,"A",{href:!0});var ovt=s(sz);n0r=r(ovt,"FlaxRoFormerForQuestionAnswering"),ovt.forEach(t),s0r=r(JBe," (RoFormer model)"),JBe.forEach(t),l0r=i(Ae),yM=n(Ae,"LI",{});var YBe=s(yM);y5e=n(YBe,"STRONG",{});var rvt=s(y5e);i0r=r(rvt,"xlm-roberta"),rvt.forEach(t),d0r=r(YBe," \u2014 "),lz=n(YBe,"A",{href:!0});var tvt=s(lz);c0r=r(tvt,"FlaxXLMRobertaForQuestionAnswering"),tvt.forEach(t),f0r=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),Ae.forEach(t),m0r=i(Pa),w5e=n(Pa,"P",{});var avt=s(w5e);g0r=r(avt,"Examples:"),avt.forEach(t),h0r=i(Pa),m(d7.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),dRe=i(c),Tf=n(c,"H2",{class:!0});var FPe=s(Tf);wM=n(FPe,"A",{id:!0,class:!0,href:!0});var nvt=s(wM);A5e=n(nvt,"SPAN",{});var svt=s(A5e);m(c7.$$.fragment,svt),svt.forEach(t),nvt.forEach(t),p0r=i(FPe),L5e=n(FPe,"SPAN",{});var lvt=s(L5e);_0r=r(lvt,"FlaxAutoModelForTokenClassification"),lvt.forEach(t),FPe.forEach(t),cRe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);m(f7.$$.fragment,wi),u0r=i(wi),Ff=n(wi,"P",{});var cQ=s(Ff);b0r=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),B5e=n(cQ,"CODE",{});var ivt=s(B5e);v0r=r(ivt,"from_pretrained()"),ivt.forEach(t),T0r=r(cQ,"class method or the "),x5e=n(cQ,"CODE",{});var dvt=s(x5e);F0r=r(dvt,"from_config()"),dvt.forEach(t),C0r=r(cQ,`class
method.`),cQ.forEach(t),M0r=i(wi),m7=n(wi,"P",{});var CPe=s(m7);E0r=r(CPe,"This class cannot be instantiated directly using "),k5e=n(CPe,"CODE",{});var cvt=s(k5e);y0r=r(cvt,"__init__()"),cvt.forEach(t),w0r=r(CPe," (throws an error)."),CPe.forEach(t),A0r=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(g7.$$.fragment,Ai),L0r=i(Ai),R5e=n(Ai,"P",{});var fvt=s(R5e);B0r=r(fvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fvt.forEach(t),x0r=i(Ai),Cf=n(Ai,"P",{});var fQ=s(Cf);k0r=r(fQ,`Note:
Loading a model from its configuration file does `),S5e=n(fQ,"STRONG",{});var mvt=s(S5e);R0r=r(mvt,"not"),mvt.forEach(t),S0r=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),P5e=n(fQ,"CODE",{});var gvt=s(P5e);P0r=r(gvt,"from_pretrained()"),gvt.forEach(t),$0r=r(fQ,"to load the model weights."),fQ.forEach(t),I0r=i(Ai),$5e=n(Ai,"P",{});var hvt=s($5e);j0r=r(hvt,"Examples:"),hvt.forEach(t),D0r=i(Ai),m(h7.$$.fragment,Ai),Ai.forEach(t),N0r=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(p7.$$.fragment,$a),q0r=i($a),I5e=n($a,"P",{});var pvt=s(I5e);G0r=r(pvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pvt.forEach(t),O0r=i($a),In=n($a,"P",{});var z4=s(In);X0r=r(z4,"The model class to instantiate is selected based on the "),j5e=n(z4,"CODE",{});var _vt=s(j5e);V0r=r(_vt,"model_type"),_vt.forEach(t),z0r=r(z4,` property of the config object (either
passed as an argument or loaded from `),D5e=n(z4,"CODE",{});var uvt=s(D5e);W0r=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),Q0r=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N5e=n(z4,"CODE",{});var bvt=s(N5e);H0r=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),U0r=r(z4,":"),z4.forEach(t),J0r=i($a),Re=n($a,"UL",{});var Oo=s(Re);AM=n(Oo,"LI",{});var KBe=s(AM);q5e=n(KBe,"STRONG",{});var vvt=s(q5e);Y0r=r(vvt,"albert"),vvt.forEach(t),K0r=r(KBe," \u2014 "),iz=n(KBe,"A",{href:!0});var Tvt=s(iz);Z0r=r(Tvt,"FlaxAlbertForTokenClassification"),Tvt.forEach(t),eLr=r(KBe," (ALBERT model)"),KBe.forEach(t),oLr=i(Oo),LM=n(Oo,"LI",{});var ZBe=s(LM);G5e=n(ZBe,"STRONG",{});var Fvt=s(G5e);rLr=r(Fvt,"bert"),Fvt.forEach(t),tLr=r(ZBe," \u2014 "),dz=n(ZBe,"A",{href:!0});var Cvt=s(dz);aLr=r(Cvt,"FlaxBertForTokenClassification"),Cvt.forEach(t),nLr=r(ZBe," (BERT model)"),ZBe.forEach(t),sLr=i(Oo),BM=n(Oo,"LI",{});var exe=s(BM);O5e=n(exe,"STRONG",{});var Mvt=s(O5e);lLr=r(Mvt,"big_bird"),Mvt.forEach(t),iLr=r(exe," \u2014 "),cz=n(exe,"A",{href:!0});var Evt=s(cz);dLr=r(Evt,"FlaxBigBirdForTokenClassification"),Evt.forEach(t),cLr=r(exe," (BigBird model)"),exe.forEach(t),fLr=i(Oo),xM=n(Oo,"LI",{});var oxe=s(xM);X5e=n(oxe,"STRONG",{});var yvt=s(X5e);mLr=r(yvt,"distilbert"),yvt.forEach(t),gLr=r(oxe," \u2014 "),fz=n(oxe,"A",{href:!0});var wvt=s(fz);hLr=r(wvt,"FlaxDistilBertForTokenClassification"),wvt.forEach(t),pLr=r(oxe," (DistilBERT model)"),oxe.forEach(t),_Lr=i(Oo),kM=n(Oo,"LI",{});var rxe=s(kM);V5e=n(rxe,"STRONG",{});var Avt=s(V5e);uLr=r(Avt,"electra"),Avt.forEach(t),bLr=r(rxe," \u2014 "),mz=n(rxe,"A",{href:!0});var Lvt=s(mz);vLr=r(Lvt,"FlaxElectraForTokenClassification"),Lvt.forEach(t),TLr=r(rxe," (ELECTRA model)"),rxe.forEach(t),FLr=i(Oo),RM=n(Oo,"LI",{});var txe=s(RM);z5e=n(txe,"STRONG",{});var Bvt=s(z5e);CLr=r(Bvt,"roberta"),Bvt.forEach(t),MLr=r(txe," \u2014 "),gz=n(txe,"A",{href:!0});var xvt=s(gz);ELr=r(xvt,"FlaxRobertaForTokenClassification"),xvt.forEach(t),yLr=r(txe," (RoBERTa model)"),txe.forEach(t),wLr=i(Oo),SM=n(Oo,"LI",{});var axe=s(SM);W5e=n(axe,"STRONG",{});var kvt=s(W5e);ALr=r(kvt,"roformer"),kvt.forEach(t),LLr=r(axe," \u2014 "),hz=n(axe,"A",{href:!0});var Rvt=s(hz);BLr=r(Rvt,"FlaxRoFormerForTokenClassification"),Rvt.forEach(t),xLr=r(axe," (RoFormer model)"),axe.forEach(t),kLr=i(Oo),PM=n(Oo,"LI",{});var nxe=s(PM);Q5e=n(nxe,"STRONG",{});var Svt=s(Q5e);RLr=r(Svt,"xlm-roberta"),Svt.forEach(t),SLr=r(nxe," \u2014 "),pz=n(nxe,"A",{href:!0});var Pvt=s(pz);PLr=r(Pvt,"FlaxXLMRobertaForTokenClassification"),Pvt.forEach(t),$Lr=r(nxe," (XLM-RoBERTa model)"),nxe.forEach(t),Oo.forEach(t),ILr=i($a),H5e=n($a,"P",{});var $vt=s(H5e);jLr=r($vt,"Examples:"),$vt.forEach(t),DLr=i($a),m(_7.$$.fragment,$a),$a.forEach(t),wi.forEach(t),fRe=i(c),Mf=n(c,"H2",{class:!0});var MPe=s(Mf);$M=n(MPe,"A",{id:!0,class:!0,href:!0});var Ivt=s($M);U5e=n(Ivt,"SPAN",{});var jvt=s(U5e);m(u7.$$.fragment,jvt),jvt.forEach(t),Ivt.forEach(t),NLr=i(MPe),J5e=n(MPe,"SPAN",{});var Dvt=s(J5e);qLr=r(Dvt,"FlaxAutoModelForMultipleChoice"),Dvt.forEach(t),MPe.forEach(t),mRe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(b7.$$.fragment,Li),GLr=i(Li),Ef=n(Li,"P",{});var mQ=s(Ef);OLr=r(mQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Y5e=n(mQ,"CODE",{});var Nvt=s(Y5e);XLr=r(Nvt,"from_pretrained()"),Nvt.forEach(t),VLr=r(mQ,"class method or the "),K5e=n(mQ,"CODE",{});var qvt=s(K5e);zLr=r(qvt,"from_config()"),qvt.forEach(t),WLr=r(mQ,`class
method.`),mQ.forEach(t),QLr=i(Li),v7=n(Li,"P",{});var EPe=s(v7);HLr=r(EPe,"This class cannot be instantiated directly using "),Z5e=n(EPe,"CODE",{});var Gvt=s(Z5e);ULr=r(Gvt,"__init__()"),Gvt.forEach(t),JLr=r(EPe," (throws an error)."),EPe.forEach(t),YLr=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(T7.$$.fragment,Bi),KLr=i(Bi),eve=n(Bi,"P",{});var Ovt=s(eve);ZLr=r(Ovt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ovt.forEach(t),e7r=i(Bi),yf=n(Bi,"P",{});var gQ=s(yf);o7r=r(gQ,`Note:
Loading a model from its configuration file does `),ove=n(gQ,"STRONG",{});var Xvt=s(ove);r7r=r(Xvt,"not"),Xvt.forEach(t),t7r=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rve=n(gQ,"CODE",{});var Vvt=s(rve);a7r=r(Vvt,"from_pretrained()"),Vvt.forEach(t),n7r=r(gQ,"to load the model weights."),gQ.forEach(t),s7r=i(Bi),tve=n(Bi,"P",{});var zvt=s(tve);l7r=r(zvt,"Examples:"),zvt.forEach(t),i7r=i(Bi),m(F7.$$.fragment,Bi),Bi.forEach(t),d7r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(C7.$$.fragment,Ia),c7r=i(Ia),ave=n(Ia,"P",{});var Wvt=s(ave);f7r=r(Wvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wvt.forEach(t),m7r=i(Ia),jn=n(Ia,"P",{});var W4=s(jn);g7r=r(W4,"The model class to instantiate is selected based on the "),nve=n(W4,"CODE",{});var Qvt=s(nve);h7r=r(Qvt,"model_type"),Qvt.forEach(t),p7r=r(W4,` property of the config object (either
passed as an argument or loaded from `),sve=n(W4,"CODE",{});var Hvt=s(sve);_7r=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),u7r=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(W4,"CODE",{});var Uvt=s(lve);b7r=r(Uvt,"pretrained_model_name_or_path"),Uvt.forEach(t),v7r=r(W4,":"),W4.forEach(t),T7r=i(Ia),Se=n(Ia,"UL",{});var Xo=s(Se);IM=n(Xo,"LI",{});var sxe=s(IM);ive=n(sxe,"STRONG",{});var Jvt=s(ive);F7r=r(Jvt,"albert"),Jvt.forEach(t),C7r=r(sxe," \u2014 "),_z=n(sxe,"A",{href:!0});var Yvt=s(_z);M7r=r(Yvt,"FlaxAlbertForMultipleChoice"),Yvt.forEach(t),E7r=r(sxe," (ALBERT model)"),sxe.forEach(t),y7r=i(Xo),jM=n(Xo,"LI",{});var lxe=s(jM);dve=n(lxe,"STRONG",{});var Kvt=s(dve);w7r=r(Kvt,"bert"),Kvt.forEach(t),A7r=r(lxe," \u2014 "),uz=n(lxe,"A",{href:!0});var Zvt=s(uz);L7r=r(Zvt,"FlaxBertForMultipleChoice"),Zvt.forEach(t),B7r=r(lxe," (BERT model)"),lxe.forEach(t),x7r=i(Xo),DM=n(Xo,"LI",{});var ixe=s(DM);cve=n(ixe,"STRONG",{});var e6t=s(cve);k7r=r(e6t,"big_bird"),e6t.forEach(t),R7r=r(ixe," \u2014 "),bz=n(ixe,"A",{href:!0});var o6t=s(bz);S7r=r(o6t,"FlaxBigBirdForMultipleChoice"),o6t.forEach(t),P7r=r(ixe," (BigBird model)"),ixe.forEach(t),$7r=i(Xo),NM=n(Xo,"LI",{});var dxe=s(NM);fve=n(dxe,"STRONG",{});var r6t=s(fve);I7r=r(r6t,"distilbert"),r6t.forEach(t),j7r=r(dxe," \u2014 "),vz=n(dxe,"A",{href:!0});var t6t=s(vz);D7r=r(t6t,"FlaxDistilBertForMultipleChoice"),t6t.forEach(t),N7r=r(dxe," (DistilBERT model)"),dxe.forEach(t),q7r=i(Xo),qM=n(Xo,"LI",{});var cxe=s(qM);mve=n(cxe,"STRONG",{});var a6t=s(mve);G7r=r(a6t,"electra"),a6t.forEach(t),O7r=r(cxe," \u2014 "),Tz=n(cxe,"A",{href:!0});var n6t=s(Tz);X7r=r(n6t,"FlaxElectraForMultipleChoice"),n6t.forEach(t),V7r=r(cxe," (ELECTRA model)"),cxe.forEach(t),z7r=i(Xo),GM=n(Xo,"LI",{});var fxe=s(GM);gve=n(fxe,"STRONG",{});var s6t=s(gve);W7r=r(s6t,"roberta"),s6t.forEach(t),Q7r=r(fxe," \u2014 "),Fz=n(fxe,"A",{href:!0});var l6t=s(Fz);H7r=r(l6t,"FlaxRobertaForMultipleChoice"),l6t.forEach(t),U7r=r(fxe," (RoBERTa model)"),fxe.forEach(t),J7r=i(Xo),OM=n(Xo,"LI",{});var mxe=s(OM);hve=n(mxe,"STRONG",{});var i6t=s(hve);Y7r=r(i6t,"roformer"),i6t.forEach(t),K7r=r(mxe," \u2014 "),Cz=n(mxe,"A",{href:!0});var d6t=s(Cz);Z7r=r(d6t,"FlaxRoFormerForMultipleChoice"),d6t.forEach(t),e8r=r(mxe," (RoFormer model)"),mxe.forEach(t),o8r=i(Xo),XM=n(Xo,"LI",{});var gxe=s(XM);pve=n(gxe,"STRONG",{});var c6t=s(pve);r8r=r(c6t,"xlm-roberta"),c6t.forEach(t),t8r=r(gxe," \u2014 "),Mz=n(gxe,"A",{href:!0});var f6t=s(Mz);a8r=r(f6t,"FlaxXLMRobertaForMultipleChoice"),f6t.forEach(t),n8r=r(gxe," (XLM-RoBERTa model)"),gxe.forEach(t),Xo.forEach(t),s8r=i(Ia),_ve=n(Ia,"P",{});var m6t=s(_ve);l8r=r(m6t,"Examples:"),m6t.forEach(t),i8r=i(Ia),m(M7.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),gRe=i(c),wf=n(c,"H2",{class:!0});var yPe=s(wf);VM=n(yPe,"A",{id:!0,class:!0,href:!0});var g6t=s(VM);uve=n(g6t,"SPAN",{});var h6t=s(uve);m(E7.$$.fragment,h6t),h6t.forEach(t),g6t.forEach(t),d8r=i(yPe),bve=n(yPe,"SPAN",{});var p6t=s(bve);c8r=r(p6t,"FlaxAutoModelForNextSentencePrediction"),p6t.forEach(t),yPe.forEach(t),hRe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);m(y7.$$.fragment,xi),f8r=i(xi),Af=n(xi,"P",{});var hQ=s(Af);m8r=r(hQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vve=n(hQ,"CODE",{});var _6t=s(vve);g8r=r(_6t,"from_pretrained()"),_6t.forEach(t),h8r=r(hQ,"class method or the "),Tve=n(hQ,"CODE",{});var u6t=s(Tve);p8r=r(u6t,"from_config()"),u6t.forEach(t),_8r=r(hQ,`class
method.`),hQ.forEach(t),u8r=i(xi),w7=n(xi,"P",{});var wPe=s(w7);b8r=r(wPe,"This class cannot be instantiated directly using "),Fve=n(wPe,"CODE",{});var b6t=s(Fve);v8r=r(b6t,"__init__()"),b6t.forEach(t),T8r=r(wPe," (throws an error)."),wPe.forEach(t),F8r=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(A7.$$.fragment,ki),C8r=i(ki),Cve=n(ki,"P",{});var v6t=s(Cve);M8r=r(v6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),v6t.forEach(t),E8r=i(ki),Lf=n(ki,"P",{});var pQ=s(Lf);y8r=r(pQ,`Note:
Loading a model from its configuration file does `),Mve=n(pQ,"STRONG",{});var T6t=s(Mve);w8r=r(T6t,"not"),T6t.forEach(t),A8r=r(pQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eve=n(pQ,"CODE",{});var F6t=s(Eve);L8r=r(F6t,"from_pretrained()"),F6t.forEach(t),B8r=r(pQ,"to load the model weights."),pQ.forEach(t),x8r=i(ki),yve=n(ki,"P",{});var C6t=s(yve);k8r=r(C6t,"Examples:"),C6t.forEach(t),R8r=i(ki),m(L7.$$.fragment,ki),ki.forEach(t),S8r=i(xi),Io=n(xi,"DIV",{class:!0});var ja=s(Io);m(B7.$$.fragment,ja),P8r=i(ja),wve=n(ja,"P",{});var M6t=s(wve);$8r=r(M6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),M6t.forEach(t),I8r=i(ja),Dn=n(ja,"P",{});var Q4=s(Dn);j8r=r(Q4,"The model class to instantiate is selected based on the "),Ave=n(Q4,"CODE",{});var E6t=s(Ave);D8r=r(E6t,"model_type"),E6t.forEach(t),N8r=r(Q4,` property of the config object (either
passed as an argument or loaded from `),Lve=n(Q4,"CODE",{});var y6t=s(Lve);q8r=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),G8r=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(Q4,"CODE",{});var w6t=s(Bve);O8r=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),X8r=r(Q4,":"),Q4.forEach(t),V8r=i(ja),xve=n(ja,"UL",{});var A6t=s(xve);zM=n(A6t,"LI",{});var hxe=s(zM);kve=n(hxe,"STRONG",{});var L6t=s(kve);z8r=r(L6t,"bert"),L6t.forEach(t),W8r=r(hxe," \u2014 "),Ez=n(hxe,"A",{href:!0});var B6t=s(Ez);Q8r=r(B6t,"FlaxBertForNextSentencePrediction"),B6t.forEach(t),H8r=r(hxe," (BERT model)"),hxe.forEach(t),A6t.forEach(t),U8r=i(ja),Rve=n(ja,"P",{});var x6t=s(Rve);J8r=r(x6t,"Examples:"),x6t.forEach(t),Y8r=i(ja),m(x7.$$.fragment,ja),ja.forEach(t),xi.forEach(t),pRe=i(c),Bf=n(c,"H2",{class:!0});var APe=s(Bf);WM=n(APe,"A",{id:!0,class:!0,href:!0});var k6t=s(WM);Sve=n(k6t,"SPAN",{});var R6t=s(Sve);m(k7.$$.fragment,R6t),R6t.forEach(t),k6t.forEach(t),K8r=i(APe),Pve=n(APe,"SPAN",{});var S6t=s(Pve);Z8r=r(S6t,"FlaxAutoModelForImageClassification"),S6t.forEach(t),APe.forEach(t),_Re=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(R7.$$.fragment,Ri),e9r=i(Ri),xf=n(Ri,"P",{});var _Q=s(xf);o9r=r(_Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$ve=n(_Q,"CODE",{});var P6t=s($ve);r9r=r(P6t,"from_pretrained()"),P6t.forEach(t),t9r=r(_Q,"class method or the "),Ive=n(_Q,"CODE",{});var $6t=s(Ive);a9r=r($6t,"from_config()"),$6t.forEach(t),n9r=r(_Q,`class
method.`),_Q.forEach(t),s9r=i(Ri),S7=n(Ri,"P",{});var LPe=s(S7);l9r=r(LPe,"This class cannot be instantiated directly using "),jve=n(LPe,"CODE",{});var I6t=s(jve);i9r=r(I6t,"__init__()"),I6t.forEach(t),d9r=r(LPe," (throws an error)."),LPe.forEach(t),c9r=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(P7.$$.fragment,Si),f9r=i(Si),Dve=n(Si,"P",{});var j6t=s(Dve);m9r=r(j6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),j6t.forEach(t),g9r=i(Si),kf=n(Si,"P",{});var uQ=s(kf);h9r=r(uQ,`Note:
Loading a model from its configuration file does `),Nve=n(uQ,"STRONG",{});var D6t=s(Nve);p9r=r(D6t,"not"),D6t.forEach(t),_9r=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qve=n(uQ,"CODE",{});var N6t=s(qve);u9r=r(N6t,"from_pretrained()"),N6t.forEach(t),b9r=r(uQ,"to load the model weights."),uQ.forEach(t),v9r=i(Si),Gve=n(Si,"P",{});var q6t=s(Gve);T9r=r(q6t,"Examples:"),q6t.forEach(t),F9r=i(Si),m($7.$$.fragment,Si),Si.forEach(t),C9r=i(Ri),jo=n(Ri,"DIV",{class:!0});var Da=s(jo);m(I7.$$.fragment,Da),M9r=i(Da),Ove=n(Da,"P",{});var G6t=s(Ove);E9r=r(G6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),G6t.forEach(t),y9r=i(Da),Nn=n(Da,"P",{});var H4=s(Nn);w9r=r(H4,"The model class to instantiate is selected based on the "),Xve=n(H4,"CODE",{});var O6t=s(Xve);A9r=r(O6t,"model_type"),O6t.forEach(t),L9r=r(H4,` property of the config object (either
passed as an argument or loaded from `),Vve=n(H4,"CODE",{});var X6t=s(Vve);B9r=r(X6t,"pretrained_model_name_or_path"),X6t.forEach(t),x9r=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=n(H4,"CODE",{});var V6t=s(zve);k9r=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),R9r=r(H4,":"),H4.forEach(t),S9r=i(Da),j7=n(Da,"UL",{});var BPe=s(j7);QM=n(BPe,"LI",{});var pxe=s(QM);Wve=n(pxe,"STRONG",{});var z6t=s(Wve);P9r=r(z6t,"beit"),z6t.forEach(t),$9r=r(pxe," \u2014 "),yz=n(pxe,"A",{href:!0});var W6t=s(yz);I9r=r(W6t,"FlaxBeitForImageClassification"),W6t.forEach(t),j9r=r(pxe," (BEiT model)"),pxe.forEach(t),D9r=i(BPe),HM=n(BPe,"LI",{});var _xe=s(HM);Qve=n(_xe,"STRONG",{});var Q6t=s(Qve);N9r=r(Q6t,"vit"),Q6t.forEach(t),q9r=r(_xe," \u2014 "),wz=n(_xe,"A",{href:!0});var H6t=s(wz);G9r=r(H6t,"FlaxViTForImageClassification"),H6t.forEach(t),O9r=r(_xe," (ViT model)"),_xe.forEach(t),BPe.forEach(t),X9r=i(Da),Hve=n(Da,"P",{});var U6t=s(Hve);V9r=r(U6t,"Examples:"),U6t.forEach(t),z9r=i(Da),m(D7.$$.fragment,Da),Da.forEach(t),Ri.forEach(t),uRe=i(c),Rf=n(c,"H2",{class:!0});var xPe=s(Rf);UM=n(xPe,"A",{id:!0,class:!0,href:!0});var J6t=s(UM);Uve=n(J6t,"SPAN",{});var Y6t=s(Uve);m(N7.$$.fragment,Y6t),Y6t.forEach(t),J6t.forEach(t),W9r=i(xPe),Jve=n(xPe,"SPAN",{});var K6t=s(Jve);Q9r=r(K6t,"FlaxAutoModelForVision2Seq"),K6t.forEach(t),xPe.forEach(t),bRe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(q7.$$.fragment,Pi),H9r=i(Pi),Sf=n(Pi,"P",{});var bQ=s(Sf);U9r=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Yve=n(bQ,"CODE",{});var Z6t=s(Yve);J9r=r(Z6t,"from_pretrained()"),Z6t.forEach(t),Y9r=r(bQ,"class method or the "),Kve=n(bQ,"CODE",{});var eTt=s(Kve);K9r=r(eTt,"from_config()"),eTt.forEach(t),Z9r=r(bQ,`class
method.`),bQ.forEach(t),eBr=i(Pi),G7=n(Pi,"P",{});var kPe=s(G7);oBr=r(kPe,"This class cannot be instantiated directly using "),Zve=n(kPe,"CODE",{});var oTt=s(Zve);rBr=r(oTt,"__init__()"),oTt.forEach(t),tBr=r(kPe," (throws an error)."),kPe.forEach(t),aBr=i(Pi),jt=n(Pi,"DIV",{class:!0});var $i=s(jt);m(O7.$$.fragment,$i),nBr=i($i),e6e=n($i,"P",{});var rTt=s(e6e);sBr=r(rTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rTt.forEach(t),lBr=i($i),Pf=n($i,"P",{});var vQ=s(Pf);iBr=r(vQ,`Note:
Loading a model from its configuration file does `),o6e=n(vQ,"STRONG",{});var tTt=s(o6e);dBr=r(tTt,"not"),tTt.forEach(t),cBr=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),r6e=n(vQ,"CODE",{});var aTt=s(r6e);fBr=r(aTt,"from_pretrained()"),aTt.forEach(t),mBr=r(vQ,"to load the model weights."),vQ.forEach(t),gBr=i($i),t6e=n($i,"P",{});var nTt=s(t6e);hBr=r(nTt,"Examples:"),nTt.forEach(t),pBr=i($i),m(X7.$$.fragment,$i),$i.forEach(t),_Br=i(Pi),Do=n(Pi,"DIV",{class:!0});var Na=s(Do);m(V7.$$.fragment,Na),uBr=i(Na),a6e=n(Na,"P",{});var sTt=s(a6e);bBr=r(sTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sTt.forEach(t),vBr=i(Na),qn=n(Na,"P",{});var U4=s(qn);TBr=r(U4,"The model class to instantiate is selected based on the "),n6e=n(U4,"CODE",{});var lTt=s(n6e);FBr=r(lTt,"model_type"),lTt.forEach(t),CBr=r(U4,` property of the config object (either
passed as an argument or loaded from `),s6e=n(U4,"CODE",{});var iTt=s(s6e);MBr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),EBr=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=n(U4,"CODE",{});var dTt=s(l6e);yBr=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),wBr=r(U4,":"),U4.forEach(t),ABr=i(Na),i6e=n(Na,"UL",{});var cTt=s(i6e);JM=n(cTt,"LI",{});var uxe=s(JM);d6e=n(uxe,"STRONG",{});var fTt=s(d6e);LBr=r(fTt,"vision-encoder-decoder"),fTt.forEach(t),BBr=r(uxe," \u2014 "),Az=n(uxe,"A",{href:!0});var mTt=s(Az);xBr=r(mTt,"FlaxVisionEncoderDecoderModel"),mTt.forEach(t),kBr=r(uxe," (Vision Encoder decoder model)"),uxe.forEach(t),cTt.forEach(t),RBr=i(Na),c6e=n(Na,"P",{});var gTt=s(c6e);SBr=r(gTt,"Examples:"),gTt.forEach(t),PBr=i(Na),m(z7.$$.fragment,Na),Na.forEach(t),Pi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(CTt)),d(he,"id","auto-classes"),d(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(he,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_15623/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_15623/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_15623/en/model_doc/auto#transformers.AutoTokenizer"),d(Xi,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertModel"),d(qf,"id","extending-the-auto-classes"),d(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(U8,"href","/docs/transformers/pr_15623/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(J8,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertConfig"),d(Y8,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartConfig"),d(K8,"href","/docs/transformers/pr_15623/en/model_doc/beit#transformers.BeitConfig"),d(Z8,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertConfig"),d(e9,"href","/docs/transformers/pr_15623/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(o9,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdConfig"),d(r9,"href","/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(t9,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(a9,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(n9,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertConfig"),d(s9,"href","/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineConfig"),d(l9,"href","/docs/transformers/pr_15623/en/model_doc/clip#transformers.CLIPConfig"),d(i9,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertConfig"),d(d9,"href","/docs/transformers/pr_15623/en/model_doc/convnext#transformers.ConvNextConfig"),d(c9,"href","/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLConfig"),d(f9,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(m9,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(g9,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaConfig"),d(h9,"href","/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(p9,"href","/docs/transformers/pr_15623/en/model_doc/deit#transformers.DeiTConfig"),d(_9,"href","/docs/transformers/pr_15623/en/model_doc/detr#transformers.DetrConfig"),d(u9,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertConfig"),d(b9,"href","/docs/transformers/pr_15623/en/model_doc/dpr#transformers.DPRConfig"),d(v9,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraConfig"),d(T9,"href","/docs/transformers/pr_15623/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(F9,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertConfig"),d(C9,"href","/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetConfig"),d(M9,"href","/docs/transformers/pr_15623/en/model_doc/fsmt#transformers.FSMTConfig"),d(E9,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelConfig"),d(y9,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Config"),d(w9,"href","/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(A9,"href","/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJConfig"),d(L9,"href","/docs/transformers/pr_15623/en/model_doc/hubert#transformers.HubertConfig"),d(B9,"href","/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertConfig"),d(x9,"href","/docs/transformers/pr_15623/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(k9,"href","/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(R9,"href","/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(S9,"href","/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDConfig"),d(P9,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerConfig"),d($9,"href","/docs/transformers/pr_15623/en/model_doc/luke#transformers.LukeConfig"),d(I9,"href","/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertConfig"),d(j9,"href","/docs/transformers/pr_15623/en/model_doc/m2m_100#transformers.M2M100Config"),d(D9,"href","/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianConfig"),d(N9,"href","/docs/transformers/pr_15623/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(q9,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartConfig"),d(G9,"href","/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(O9,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(X9,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetConfig"),d(V9,"href","/docs/transformers/pr_15623/en/model_doc/mt5#transformers.MT5Config"),d(z9,"href","/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(W9,"href","/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Q9,"href","/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusConfig"),d(H9,"href","/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverConfig"),d(U9,"href","/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartConfig"),d(J9,"href","/docs/transformers/pr_15623/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Y9,"href","/docs/transformers/pr_15623/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(K9,"href","/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Z9,"href","/docs/transformers/pr_15623/en/model_doc/rag#transformers.RagConfig"),d(eB,"href","/docs/transformers/pr_15623/en/model_doc/realm#transformers.RealmConfig"),d(oB,"href","/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerConfig"),d(rB,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertConfig"),d(tB,"href","/docs/transformers/pr_15623/en/model_doc/retribert#transformers.RetriBertConfig"),d(aB,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaConfig"),d(nB,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerConfig"),d(sB,"href","/docs/transformers/pr_15623/en/model_doc/segformer#transformers.SegformerConfig"),d(lB,"href","/docs/transformers/pr_15623/en/model_doc/sew#transformers.SEWConfig"),d(iB,"href","/docs/transformers/pr_15623/en/model_doc/sew-d#transformers.SEWDConfig"),d(dB,"href","/docs/transformers/pr_15623/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(cB,"href","/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(fB,"href","/docs/transformers/pr_15623/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(mB,"href","/docs/transformers/pr_15623/en/model_doc/splinter#transformers.SplinterConfig"),d(gB,"href","/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(hB,"href","/docs/transformers/pr_15623/en/model_doc/swin#transformers.SwinConfig"),d(pB,"href","/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5Config"),d(_B,"href","/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasConfig"),d(uB,"href","/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(bB,"href","/docs/transformers/pr_15623/en/model_doc/trocr#transformers.TrOCRConfig"),d(vB,"href","/docs/transformers/pr_15623/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(TB,"href","/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(FB,"href","/docs/transformers/pr_15623/en/model_doc/vilt#transformers.ViltConfig"),d(CB,"href","/docs/transformers/pr_15623/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(MB,"href","/docs/transformers/pr_15623/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(EB,"href","/docs/transformers/pr_15623/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(yB,"href","/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTConfig"),d(wB,"href","/docs/transformers/pr_15623/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(AB,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(LB,"href","/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMConfig"),d(BB,"href","/docs/transformers/pr_15623/en/model_doc/xglm#transformers.XGLMConfig"),d(xB,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMConfig"),d(kB,"href","/docs/transformers/pr_15623/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(RB,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(SB,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(PB,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetConfig"),d($B,"href","/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Bg,"class","docstring"),d(Wo,"class","docstring"),d(xg,"id","transformers.AutoTokenizer"),d(xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xg,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(IB,"href","/docs/transformers/pr_15623/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(jB,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertTokenizer"),d(DB,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(NB,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartTokenizer"),d(qB,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartTokenizerFast"),d(GB,"href","/docs/transformers/pr_15623/en/model_doc/barthez#transformers.BarthezTokenizer"),d(OB,"href","/docs/transformers/pr_15623/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(XB,"href","/docs/transformers/pr_15623/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(VB,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertTokenizer"),d(zB,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertTokenizerFast"),d(WB,"href","/docs/transformers/pr_15623/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(QB,"href","/docs/transformers/pr_15623/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(HB,"href","/docs/transformers/pr_15623/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(UB,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(JB,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(YB,"href","/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(KB,"href","/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(ZB,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(ex,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(ox,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(rx,"href","/docs/transformers/pr_15623/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(tx,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertTokenizer"),d(ax,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(nx,"href","/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineTokenizer"),d(sx,"href","/docs/transformers/pr_15623/en/model_doc/clip#transformers.CLIPTokenizer"),d(lx,"href","/docs/transformers/pr_15623/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(ix,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(dx,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(cx,"href","/docs/transformers/pr_15623/en/model_doc/cpm#transformers.CpmTokenizer"),d(fx,"href","/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(mx,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaTokenizer"),d(gx,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(hx,"href","/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(px,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(_x,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(ux,"href","/docs/transformers/pr_15623/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(bx,"href","/docs/transformers/pr_15623/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(vx,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraTokenizer"),d(Tx,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Fx,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Cx,"href","/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetTokenizer"),d(Mx,"href","/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Ex,"href","/docs/transformers/pr_15623/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(yx,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelTokenizer"),d(wx,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Ax,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Lx,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Bx,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(xx,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(kx,"href","/docs/transformers/pr_15623/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Rx,"href","/docs/transformers/pr_15623/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(Sx,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Px,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaTokenizer"),d($x,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Ix,"href","/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(jx,"href","/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(Dx,"href","/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(Nx,"href","/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(qx,"href","/docs/transformers/pr_15623/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(Gx,"href","/docs/transformers/pr_15623/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(Ox,"href","/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDTokenizer"),d(Xx,"href","/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDTokenizerFast"),d(Vx,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerTokenizer"),d(zx,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(Wx,"href","/docs/transformers/pr_15623/en/model_doc/luke#transformers.LukeTokenizer"),d(Qx,"href","/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(Hx,"href","/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(Ux,"href","/docs/transformers/pr_15623/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(Jx,"href","/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianTokenizer"),d(Yx,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartTokenizer"),d(Kx,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(Zx,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(ek,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(ok,"href","/docs/transformers/pr_15623/en/model_doc/mluke#transformers.MLukeTokenizer"),d(rk,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(tk,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(ak,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(nk,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(sk,"href","/docs/transformers/pr_15623/en/model_doc/mt5#transformers.T5Tokenizer"),d(lk,"href","/docs/transformers/pr_15623/en/model_doc/mt5#transformers.T5TokenizerFast"),d(ik,"href","/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(dk,"href","/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(ck,"href","/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(fk,"href","/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(mk,"href","/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(gk,"href","/docs/transformers/pr_15623/en/model_doc/phobert#transformers.PhobertTokenizer"),d(hk,"href","/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartTokenizer"),d(pk,"href","/docs/transformers/pr_15623/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(_k,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertTokenizer"),d(uk,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertTokenizerFast"),d(bk,"href","/docs/transformers/pr_15623/en/model_doc/rag#transformers.RagTokenizer"),d(vk,"href","/docs/transformers/pr_15623/en/model_doc/realm#transformers.RealmTokenizer"),d(Tk,"href","/docs/transformers/pr_15623/en/model_doc/realm#transformers.RealmTokenizerFast"),d(Fk,"href","/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Ck,"href","/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Mk,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Ek,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(yk,"href","/docs/transformers/pr_15623/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(wk,"href","/docs/transformers/pr_15623/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Ak,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Lk,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Bk,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(xk,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(kk,"href","/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Rk,"href","/docs/transformers/pr_15623/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Sk,"href","/docs/transformers/pr_15623/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Pk,"href","/docs/transformers/pr_15623/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d($k,"href","/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Ik,"href","/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(jk,"href","/docs/transformers/pr_15623/en/model_doc/mt5#transformers.T5Tokenizer"),d(Dk,"href","/docs/transformers/pr_15623/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Nk,"href","/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasTokenizer"),d(qk,"href","/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(Gk,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Ok,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(Xk,"href","/docs/transformers/pr_15623/en/model_doc/xglm#transformers.XGLMTokenizer"),d(Vk,"href","/docs/transformers/pr_15623/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(zk,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMTokenizer"),d(Wk,"href","/docs/transformers/pr_15623/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(Qk,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(Hk,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(Uk,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(Jk,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(sh,"class","docstring"),d(Qo,"class","docstring"),d(lh,"id","transformers.AutoFeatureExtractor"),d(lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lh,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(Yk,"href","/docs/transformers/pr_15623/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(Kk,"href","/docs/transformers/pr_15623/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(Zk,"href","/docs/transformers/pr_15623/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(eR,"href","/docs/transformers/pr_15623/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(oR,"href","/docs/transformers/pr_15623/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(rR,"href","/docs/transformers/pr_15623/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(tR,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(aR,"href","/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(nR,"href","/docs/transformers/pr_15623/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(sR,"href","/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(lR,"href","/docs/transformers/pr_15623/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(iR,"href","/docs/transformers/pr_15623/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(dR,"href","/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(cR,"href","/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(fR,"href","/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(mR,"href","/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(gR,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(yh,"class","docstring"),d(Ho,"class","docstring"),d(wh,"id","transformers.AutoProcessor"),d(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(hR,"href","/docs/transformers/pr_15623/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(pR,"href","/docs/transformers/pr_15623/en/model_doc/clip#transformers.CLIPProcessor"),d(_R,"href","/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(uR,"href","/docs/transformers/pr_15623/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(bR,"href","/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(vR,"href","/docs/transformers/pr_15623/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(TR,"href","/docs/transformers/pr_15623/en/model_doc/trocr#transformers.TrOCRProcessor"),d(FR,"href","/docs/transformers/pr_15623/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(CR,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Ih,"class","docstring"),d(Uo,"class","docstring"),d(jh,"id","transformers.AutoModel"),d(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(Vr,"class","docstring"),d(MR,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertModel"),d(ER,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartModel"),d(yR,"href","/docs/transformers/pr_15623/en/model_doc/beit#transformers.BeitModel"),d(wR,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertModel"),d(AR,"href","/docs/transformers/pr_15623/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(LR,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdModel"),d(BR,"href","/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(xR,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(kR,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(RR,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertModel"),d(SR,"href","/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineModel"),d(PR,"href","/docs/transformers/pr_15623/en/model_doc/clip#transformers.CLIPModel"),d($R,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertModel"),d(IR,"href","/docs/transformers/pr_15623/en/model_doc/convnext#transformers.ConvNextModel"),d(jR,"href","/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLModel"),d(DR,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(NR,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(qR,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaModel"),d(GR,"href","/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(OR,"href","/docs/transformers/pr_15623/en/model_doc/deit#transformers.DeiTModel"),d(XR,"href","/docs/transformers/pr_15623/en/model_doc/detr#transformers.DetrModel"),d(VR,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertModel"),d(zR,"href","/docs/transformers/pr_15623/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(WR,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraModel"),d(QR,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertModel"),d(HR,"href","/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetModel"),d(UR,"href","/docs/transformers/pr_15623/en/model_doc/fsmt#transformers.FSMTModel"),d(JR,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelModel"),d(YR,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelBaseModel"),d(KR,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2Model"),d(ZR,"href","/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(eS,"href","/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJModel"),d(oS,"href","/docs/transformers/pr_15623/en/model_doc/hubert#transformers.HubertModel"),d(rS,"href","/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertModel"),d(tS,"href","/docs/transformers/pr_15623/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(aS,"href","/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(nS,"href","/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(sS,"href","/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDModel"),d(lS,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerModel"),d(iS,"href","/docs/transformers/pr_15623/en/model_doc/luke#transformers.LukeModel"),d(dS,"href","/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertModel"),d(cS,"href","/docs/transformers/pr_15623/en/model_doc/m2m_100#transformers.M2M100Model"),d(fS,"href","/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianModel"),d(mS,"href","/docs/transformers/pr_15623/en/model_doc/maskformer#transformers.MaskFormerModel"),d(gS,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartModel"),d(hS,"href","/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(pS,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertModel"),d(_S,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetModel"),d(uS,"href","/docs/transformers/pr_15623/en/model_doc/mt5#transformers.MT5Model"),d(bS,"href","/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerModel"),d(vS,"href","/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(TS,"href","/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusModel"),d(FS,"href","/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverModel"),d(CS,"href","/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartModel"),d(MS,"href","/docs/transformers/pr_15623/en/model_doc/poolformer#transformers.PoolFormerModel"),d(ES,"href","/docs/transformers/pr_15623/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(yS,"href","/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertModel"),d(wS,"href","/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerModel"),d(AS,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertModel"),d(LS,"href","/docs/transformers/pr_15623/en/model_doc/retribert#transformers.RetriBertModel"),d(BS,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaModel"),d(xS,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerModel"),d(kS,"href","/docs/transformers/pr_15623/en/model_doc/segformer#transformers.SegformerModel"),d(RS,"href","/docs/transformers/pr_15623/en/model_doc/sew#transformers.SEWModel"),d(SS,"href","/docs/transformers/pr_15623/en/model_doc/sew-d#transformers.SEWDModel"),d(PS,"href","/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d($S,"href","/docs/transformers/pr_15623/en/model_doc/splinter#transformers.SplinterModel"),d(IS,"href","/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(jS,"href","/docs/transformers/pr_15623/en/model_doc/swin#transformers.SwinModel"),d(DS,"href","/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5Model"),d(NS,"href","/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasModel"),d(qS,"href","/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(GS,"href","/docs/transformers/pr_15623/en/model_doc/unispeech#transformers.UniSpeechModel"),d(OS,"href","/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(XS,"href","/docs/transformers/pr_15623/en/model_doc/vilt#transformers.ViltModel"),d(VS,"href","/docs/transformers/pr_15623/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(zS,"href","/docs/transformers/pr_15623/en/model_doc/visual_bert#transformers.VisualBertModel"),d(WS,"href","/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTModel"),d(QS,"href","/docs/transformers/pr_15623/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(HS,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(US,"href","/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMModel"),d(JS,"href","/docs/transformers/pr_15623/en/model_doc/xglm#transformers.XGLMModel"),d(YS,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMModel"),d(KS,"href","/docs/transformers/pr_15623/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(ZS,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(eP,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(oP,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetModel"),d(rP,"href","/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoModel"),d(je,"class","docstring"),d(Jo,"class","docstring"),d(u_,"id","transformers.AutoModelForPreTraining"),d(u_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(zr,"class","docstring"),d(tP,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertForPreTraining"),d(aP,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(nP,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForPreTraining"),d(sP,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(lP,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(iP,"href","/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(dP,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(cP,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(fP,"href","/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(mP,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(gP,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForPreTraining"),d(hP,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(pP,"href","/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForPreTraining"),d(_P,"href","/docs/transformers/pr_15623/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(uP,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(bP,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(vP,"href","/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(TP,"href","/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(FP,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(CP,"href","/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(MP,"href","/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(EP,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(yP,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(wP,"href","/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(AP,"href","/docs/transformers/pr_15623/en/model_doc/retribert#transformers.RetriBertModel"),d(LP,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(BP,"href","/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(xP,"href","/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(kP,"href","/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(RP,"href","/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(SP,"href","/docs/transformers/pr_15623/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(PP,"href","/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d($P,"href","/docs/transformers/pr_15623/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(IP,"href","/docs/transformers/pr_15623/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(jP,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(DP,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(NP,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(qP,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(GP,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring"),d(Yo,"class","docstring"),d(au,"id","transformers.AutoModelForCausalLM"),d(au,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(au,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(Wr,"class","docstring"),d(OP,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartForCausalLM"),d(XP,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertLMHeadModel"),d(VP,"href","/docs/transformers/pr_15623/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(zP,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(WP,"href","/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(QP,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(HP,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(UP,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(JP,"href","/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(YP,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(KP,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForCausalLM"),d(ZP,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(e$,"href","/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(o$,"href","/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(r$,"href","/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianForCausalLM"),d(t$,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartForCausalLM"),d(a$,"href","/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(n$,"href","/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(s$,"href","/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(l$,"href","/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(i$,"href","/docs/transformers/pr_15623/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(d$,"href","/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(c$,"href","/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(f$,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(m$,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(g$,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(h$,"href","/docs/transformers/pr_15623/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(p$,"href","/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(_$,"href","/docs/transformers/pr_15623/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(u$,"href","/docs/transformers/pr_15623/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(b$,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(v$,"href","/docs/transformers/pr_15623/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(T$,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(F$,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(C$,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Ko,"class","docstring"),d(Gu,"id","transformers.AutoModelForMaskedLM"),d(Gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gu,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(Qr,"class","docstring"),d(M$,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(E$,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(y$,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForMaskedLM"),d(w$,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(A$,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(L$,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(B$,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(x$,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(k$,"href","/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(R$,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(S$,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(P$,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d($$,"href","/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(I$,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(j$,"href","/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(D$,"href","/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(N$,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(q$,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(G$,"href","/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(O$,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(X$,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(V$,"href","/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(z$,"href","/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(W$,"href","/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(Q$,"href","/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(H$,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(U$,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(J$,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(Y$,"href","/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(K$,"href","/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(Z$,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(eI,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(oI,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(rI,"href","/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(qe,"class","docstring"),d(Zo,"class","docstring"),d(E2,"id","transformers.AutoModelForSeq2SeqLM"),d(E2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E2,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(Hr,"class","docstring"),d(tI,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(aI,"href","/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(nI,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(sI,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(lI,"href","/docs/transformers/pr_15623/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(iI,"href","/docs/transformers/pr_15623/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(dI,"href","/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(cI,"href","/docs/transformers/pr_15623/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(fI,"href","/docs/transformers/pr_15623/en/model_doc/marian#transformers.MarianMTModel"),d(mI,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(gI,"href","/docs/transformers/pr_15623/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(hI,"href","/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(pI,"href","/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(_I,"href","/docs/transformers/pr_15623/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(uI,"href","/docs/transformers/pr_15623/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(bI,"href","/docs/transformers/pr_15623/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(O2,"id","transformers.AutoModelForSequenceClassification"),d(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O2,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Ur,"class","docstring"),d(vI,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(TI,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartForSequenceClassification"),d(FI,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForSequenceClassification"),d(CI,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(MI,"href","/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(EI,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(yI,"href","/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(wI,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(AI,"href","/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(LI,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(BI,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(xI,"href","/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(kI,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(RI,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(SI,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(PI,"href","/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d($I,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(II,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(jI,"href","/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(DI,"href","/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(NI,"href","/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(qI,"href","/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(GI,"href","/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(OI,"href","/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDForSequenceClassification"),d(XI,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(VI,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(zI,"href","/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(WI,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(QI,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(HI,"href","/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(UI,"href","/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(JI,"href","/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(YI,"href","/docs/transformers/pr_15623/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(KI,"href","/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(ej,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(oj,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(rj,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(tj,"href","/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(aj,"href","/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(nj,"href","/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(sj,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(lj,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(ij,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(dj,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(cj,"href","/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(I1,"id","transformers.AutoModelForMultipleChoice"),d(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I1,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(Jr,"class","docstring"),d(fj,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(mj,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForMultipleChoice"),d(gj,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(hj,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(pj,"href","/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(_j,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(uj,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(bj,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(vj,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(Tj,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Fj,"href","/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(Cj,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Mj,"href","/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Ej,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(yj,"href","/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(wj,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Aj,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Lj,"href","/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Bj,"href","/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(xj,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(kj,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Rj,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Sj,"href","/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Pj,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d($j,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Ij,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(jj,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(Dj,"href","/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring"),d(rr,"class","docstring"),d(mb,"id","transformers.AutoModelForNextSentencePrediction"),d(mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mb,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(Yr,"class","docstring"),d(Nj,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(qj,"href","/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(Gj,"href","/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(Oj,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(Xj,"href","/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d(vb,"id","transformers.AutoModelForTokenClassification"),d(vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vb,"href","#transformers.AutoModelForTokenClassification"),d(Fd,"class","relative group"),d(Kr,"class","docstring"),d(Vj,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(zj,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForTokenClassification"),d(Wj,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Qj,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(Hj,"href","/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Uj,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(Jj,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Yj,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(Kj,"href","/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Zj,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(eD,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(oD,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(rD,"href","/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(tD,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(aD,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(nD,"href","/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(sD,"href","/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(lD,"href","/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(iD,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(dD,"href","/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(cD,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(fD,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(mD,"href","/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(gD,"href","/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(hD,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(pD,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(_D,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(uD,"href","/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(bD,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(vD,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(TD,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(FD,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(CD,"href","/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(e3,"id","transformers.AutoModelForQuestionAnswering"),d(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e3,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Zr,"class","docstring"),d(MD,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_15623/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_15623/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d($D,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(ID,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(jD,"href","/docs/transformers/pr_15623/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(DD,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(ND,"href","/docs/transformers/pr_15623/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(qD,"href","/docs/transformers/pr_15623/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(GD,"href","/docs/transformers/pr_15623/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(OD,"href","/docs/transformers/pr_15623/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(XD,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_15623/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_15623/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_15623/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_15623/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(eN,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(oN,"href","/docs/transformers/pr_15623/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(rN,"href","/docs/transformers/pr_15623/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(tN,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(aN,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(nN,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(sN,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(lN,"href","/docs/transformers/pr_15623/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring"),d(nr,"class","docstring"),d(G3,"id","transformers.AutoModelForTableQuestionAnswering"),d(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G3,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(et,"class","docstring"),d(iN,"href","/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(V3,"id","transformers.AutoModelForImageClassification"),d(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V3,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(ot,"class","docstring"),d(dN,"href","/docs/transformers/pr_15623/en/model_doc/beit#transformers.BeitForImageClassification"),d(cN,"href","/docs/transformers/pr_15623/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(fN,"href","/docs/transformers/pr_15623/en/model_doc/deit#transformers.DeiTForImageClassification"),d(mN,"href","/docs/transformers/pr_15623/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(gN,"href","/docs/transformers/pr_15623/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(hN,"href","/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(pN,"href","/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(_N,"href","/docs/transformers/pr_15623/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(uN,"href","/docs/transformers/pr_15623/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(bN,"href","/docs/transformers/pr_15623/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(vN,"href","/docs/transformers/pr_15623/en/model_doc/swin#transformers.SwinForImageClassification"),d(TN,"href","/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(Z3,"id","transformers.AutoModelForVision2Seq"),d(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z3,"href","#transformers.AutoModelForVision2Seq"),d(Sd,"class","relative group"),d(rt,"class","docstring"),d(FN,"href","/docs/transformers/pr_15623/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(r5,"id","transformers.AutoModelForAudioClassification"),d(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r5,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(tt,"class","docstring"),d(CN,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(MN,"href","/docs/transformers/pr_15623/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(EN,"href","/docs/transformers/pr_15623/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(yN,"href","/docs/transformers/pr_15623/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(wN,"href","/docs/transformers/pr_15623/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(AN,"href","/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(LN,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(BN,"href","/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(m5,"id","transformers.AutoModelForAudioFrameClassification"),d(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m5,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(at,"class","docstring"),d(xN,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(kN,"href","/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(RN,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(SN,"href","/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(b5,"id","transformers.AutoModelForCTC"),d(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b5,"href","#transformers.AutoModelForCTC"),d(Od,"class","relative group"),d(nt,"class","docstring"),d(PN,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d($N,"href","/docs/transformers/pr_15623/en/model_doc/hubert#transformers.HubertForCTC"),d(IN,"href","/docs/transformers/pr_15623/en/model_doc/sew#transformers.SEWForCTC"),d(jN,"href","/docs/transformers/pr_15623/en/model_doc/sew-d#transformers.SEWDForCTC"),d(DN,"href","/docs/transformers/pr_15623/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(NN,"href","/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(qN,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(GN,"href","/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(L5,"id","transformers.AutoModelForSpeechSeq2Seq"),d(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L5,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(st,"class","docstring"),d(ON,"href","/docs/transformers/pr_15623/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(XN,"href","/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(R5,"id","transformers.AutoModelForAudioXVector"),d(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R5,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(lt,"class","docstring"),d(VN,"href","/docs/transformers/pr_15623/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(zN,"href","/docs/transformers/pr_15623/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(WN,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(QN,"href","/docs/transformers/pr_15623/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(D5,"id","transformers.AutoModelForMaskedImageModeling"),d(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D5,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(it,"class","docstring"),d(HN,"href","/docs/transformers/pr_15623/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(UN,"href","/docs/transformers/pr_15623/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(JN,"href","/docs/transformers/pr_15623/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(X5,"id","transformers.AutoModelForObjectDetection"),d(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X5,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(dt,"class","docstring"),d(YN,"href","/docs/transformers/pr_15623/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(W5,"id","transformers.AutoModelForImageSegmentation"),d(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W5,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(ct,"class","docstring"),d(KN,"href","/docs/transformers/pr_15623/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(U5,"id","transformers.AutoModelForSemanticSegmentation"),d(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U5,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(ft,"class","docstring"),d(ZN,"href","/docs/transformers/pr_15623/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(eq,"href","/docs/transformers/pr_15623/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(Z5,"id","transformers.AutoModelForInstanceSegmentation"),d(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z5,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(mt,"class","docstring"),d(oq,"href","/docs/transformers/pr_15623/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(rv,"id","transformers.TFAutoModel"),d(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rv,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(gt,"class","docstring"),d(rq,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertModel"),d(tq,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.TFBartModel"),d(aq,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertModel"),d(nq,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(sq,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(lq,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertModel"),d(iq,"href","/docs/transformers/pr_15623/en/model_doc/clip#transformers.TFCLIPModel"),d(dq,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.TFConvBertModel"),d(cq,"href","/docs/transformers/pr_15623/en/model_doc/convnext#transformers.TFConvNextModel"),d(fq,"href","/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.TFCTRLModel"),d(mq,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.TFDebertaModel"),d(gq,"href","/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(hq,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(pq,"href","/docs/transformers/pr_15623/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(_q,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraModel"),d(uq,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(bq,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelModel"),d(vq,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Tq,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Fq,"href","/docs/transformers/pr_15623/en/model_doc/gptj#transformers.TFGPTJModel"),d(Cq,"href","/docs/transformers/pr_15623/en/model_doc/hubert#transformers.TFHubertModel"),d(Mq,"href","/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Eq,"href","/docs/transformers/pr_15623/en/model_doc/led#transformers.TFLEDModel"),d(yq,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.TFLongformerModel"),d(wq,"href","/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.TFLxmertModel"),d(Aq,"href","/docs/transformers/pr_15623/en/model_doc/marian#transformers.TFMarianModel"),d(Lq,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.TFMBartModel"),d(Bq,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(xq,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetModel"),d(kq,"href","/docs/transformers/pr_15623/en/model_doc/mt5#transformers.TFMT5Model"),d(Rq,"href","/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(Sq,"href","/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.TFPegasusModel"),d(Pq,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertModel"),d($q,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaModel"),d(Iq,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerModel"),d(jq,"href","/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(Dq,"href","/docs/transformers/pr_15623/en/model_doc/t5#transformers.TFT5Model"),d(Nq,"href","/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TFTapasModel"),d(qq,"href","/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(Gq,"href","/docs/transformers/pr_15623/en/model_doc/vit#transformers.TFViTModel"),d(Oq,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(Xq,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMModel"),d(Vq,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(zq,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(zv,"id","transformers.TFAutoModelForPreTraining"),d(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zv,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(ht,"class","docstring"),d(Wq,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(Qq,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(Hq,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertForPreTraining"),d(Uq,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(Jq,"href","/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(Yq,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(Kq,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(Zq,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(eG,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(oG,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(rG,"href","/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(tG,"href","/docs/transformers/pr_15623/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(aG,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(nG,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(sG,"href","/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(lG,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(iG,"href","/docs/transformers/pr_15623/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(dG,"href","/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(cG,"href","/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(fG,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(mG,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(gG,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(h6,"id","transformers.TFAutoModelForCausalLM"),d(h6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h6,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(pt,"class","docstring"),d(hG,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(pG,"href","/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(_G,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(uG,"href","/docs/transformers/pr_15623/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(bG,"href","/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(vG,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(TG,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(FG,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(CG,"href","/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(MG,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(EG,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(w6,"id","transformers.TFAutoModelForImageClassification"),d(w6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w6,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(_t,"class","docstring"),d(yG,"href","/docs/transformers/pr_15623/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(wG,"href","/docs/transformers/pr_15623/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(B6,"id","transformers.TFAutoModelForMaskedLM"),d(B6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B6,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(ut,"class","docstring"),d(AG,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(LG,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(BG,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(xG,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(kG,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(RG,"href","/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(SG,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(PG,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d($G,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(IG,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(jG,"href","/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(DG,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(NG,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(qG,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(GG,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(OG,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(XG,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(VG,"href","/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(zG,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(WG,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(J6,"id","transformers.TFAutoModelForSeq2SeqLM"),d(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J6,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(bt,"class","docstring"),d(QG,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(HG,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(UG,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(JG,"href","/docs/transformers/pr_15623/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(YG,"href","/docs/transformers/pr_15623/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(KG,"href","/docs/transformers/pr_15623/en/model_doc/marian#transformers.TFMarianMTModel"),d(ZG,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(eO,"href","/docs/transformers/pr_15623/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(oO,"href","/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(rO,"href","/docs/transformers/pr_15623/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(lT,"id","transformers.TFAutoModelForSequenceClassification"),d(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lT,"href","#transformers.TFAutoModelForSequenceClassification"),d(kc,"class","relative group"),d(vt,"class","docstring"),d(tO,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(aO,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(nO,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(sO,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(lO,"href","/docs/transformers/pr_15623/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(iO,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(dO,"href","/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(cO,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(fO,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(mO,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(gO,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(hO,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(pO,"href","/docs/transformers/pr_15623/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(_O,"href","/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(uO,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(bO,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(vO,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(TO,"href","/docs/transformers/pr_15623/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(FO,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(CO,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(MO,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(EO,"href","/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(yO,"href","/docs/transformers/pr_15623/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(wO,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(AO,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(LO,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(PT,"id","transformers.TFAutoModelForMultipleChoice"),d(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Tt,"class","docstring"),d(BO,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(xO,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(kO,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(RO,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(SO,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(PO,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d($O,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(IO,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(jO,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(DO,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(NO,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(qO,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(GO,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(OO,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(XO,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(VO,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(zO,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(KT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(jc,"class","relative group"),d(Ft,"class","docstring"),d(WO,"href","/docs/transformers/pr_15623/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(eF,"id","transformers.TFAutoModelForTokenClassification"),d(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eF,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(Ct,"class","docstring"),d(QO,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(HO,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(UO,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(JO,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(YO,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(KO,"href","/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(ZO,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(eX,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(oX,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(rX,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(tX,"href","/docs/transformers/pr_15623/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(aX,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(nX,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(sX,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(lX,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(iX,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(dX,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(cX,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(fX,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(mX,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(FF,"id","transformers.TFAutoModelForQuestionAnswering"),d(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FF,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Mt,"class","docstring"),d(gX,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(hX,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(pX,"href","/docs/transformers/pr_15623/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(_X,"href","/docs/transformers/pr_15623/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(uX,"href","/docs/transformers/pr_15623/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(bX,"href","/docs/transformers/pr_15623/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(vX,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(TX,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(FX,"href","/docs/transformers/pr_15623/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(CX,"href","/docs/transformers/pr_15623/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(MX,"href","/docs/transformers/pr_15623/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(EX,"href","/docs/transformers/pr_15623/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(yX,"href","/docs/transformers/pr_15623/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(wX,"href","/docs/transformers/pr_15623/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(AX,"href","/docs/transformers/pr_15623/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(LX,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(BX,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(xX,"href","/docs/transformers/pr_15623/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(kX,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(RX,"href","/docs/transformers/pr_15623/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(OF,"id","transformers.TFAutoModelForVision2Seq"),d(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OF,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(Et,"class","docstring"),d(SX,"href","/docs/transformers/pr_15623/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(VF,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VF,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(yt,"class","docstring"),d(PX,"href","/docs/transformers/pr_15623/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(WF,"id","transformers.FlaxAutoModel"),d(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WF,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wt,"class","docstring"),d($X,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertModel"),d(IX,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartModel"),d(jX,"href","/docs/transformers/pr_15623/en/model_doc/beit#transformers.FlaxBeitModel"),d(DX,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertModel"),d(NX,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(qX,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(GX,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(OX,"href","/docs/transformers/pr_15623/en/model_doc/clip#transformers.FlaxCLIPModel"),d(XX,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(VX,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraModel"),d(zX,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(WX,"href","/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(QX,"href","/docs/transformers/pr_15623/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(HX,"href","/docs/transformers/pr_15623/en/model_doc/marian#transformers.FlaxMarianModel"),d(UX,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.FlaxMBartModel"),d(JX,"href","/docs/transformers/pr_15623/en/model_doc/mt5#transformers.FlaxMT5Model"),d(YX,"href","/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(KX,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(ZX,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(eV,"href","/docs/transformers/pr_15623/en/model_doc/t5#transformers.FlaxT5Model"),d(oV,"href","/docs/transformers/pr_15623/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(rV,"href","/docs/transformers/pr_15623/en/model_doc/vit#transformers.FlaxViTModel"),d(tV,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(aV,"href","/docs/transformers/pr_15623/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(nV,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(bC,"id","transformers.FlaxAutoModelForCausalLM"),d(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bC,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(At,"class","docstring"),d(sV,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(lV,"href","/docs/transformers/pr_15623/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(iV,"href","/docs/transformers/pr_15623/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(dV,"href","/docs/transformers/pr_15623/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(cV,"href","/docs/transformers/pr_15623/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(EC,"id","transformers.FlaxAutoModelForPreTraining"),d(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EC,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(Lt,"class","docstring"),d(fV,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(mV,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(gV,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(hV,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(pV,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(_V,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(uV,"href","/docs/transformers/pr_15623/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(bV,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(vV,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(TV,"href","/docs/transformers/pr_15623/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(FV,"href","/docs/transformers/pr_15623/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(CV,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(jC,"id","transformers.FlaxAutoModelForMaskedLM"),d(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jC,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(Bt,"class","docstring"),d(MV,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(EV,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(yV,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(wV,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(AV,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(LV,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(BV,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(xV,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(kV,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(RV,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(HC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(xt,"class","docstring"),d(SV,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(PV,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d($V,"href","/docs/transformers/pr_15623/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(IV,"href","/docs/transformers/pr_15623/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(jV,"href","/docs/transformers/pr_15623/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(DV,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(NV,"href","/docs/transformers/pr_15623/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(qV,"href","/docs/transformers/pr_15623/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(GV,"href","/docs/transformers/pr_15623/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(aM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(kt,"class","docstring"),d(OV,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(XV,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(VV,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(zV,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(WV,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(QV,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(HV,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(UV,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(JV,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(YV,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(jr,"class","docstring"),d(pM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(Rt,"class","docstring"),d(KV,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(ZV,"href","/docs/transformers/pr_15623/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(ez,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(oz,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(rz,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(tz,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(az,"href","/docs/transformers/pr_15623/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(nz,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(sz,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(lz,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Dr,"class","docstring"),d(wM,"id","transformers.FlaxAutoModelForTokenClassification"),d(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(St,"class","docstring"),d(iz,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(dz,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(cz,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(fz,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(mz,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(gz,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(hz,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(pz,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(Nr,"class","docstring"),d($M,"id","transformers.FlaxAutoModelForMultipleChoice"),d($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($M,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mf,"class","relative group"),d(Pt,"class","docstring"),d(_z,"href","/docs/transformers/pr_15623/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(uz,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(bz,"href","/docs/transformers/pr_15623/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(vz,"href","/docs/transformers/pr_15623/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_15623/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_15623/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_15623/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_15623/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(VM,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VM,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wf,"class","relative group"),d($t,"class","docstring"),d(Ez,"href","/docs/transformers/pr_15623/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(WM,"id","transformers.FlaxAutoModelForImageClassification"),d(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WM,"href","#transformers.FlaxAutoModelForImageClassification"),d(Bf,"class","relative group"),d(It,"class","docstring"),d(yz,"href","/docs/transformers/pr_15623/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(wz,"href","/docs/transformers/pr_15623/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(jo,"class","docstring"),d(Or,"class","docstring"),d(UM,"id","transformers.FlaxAutoModelForVision2Seq"),d(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UM,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(jt,"class","docstring"),d(Az,"href","/docs/transformers/pr_15623/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,J),b(c,Pe,u),b(c,de,u),e(de,he),e(he,io),g(fe,io,null),e(de,Fe),e(de,Vo),e(Vo,ji),b(c,If,u),b(c,fa,u),e(fa,Di),e(fa,Ni),e(Ni,J4),e(fa,jf),b(c,Le,u),b(c,co,u),e(co,qi),e(co,Gn),e(Gn,Y4),e(co,On),e(co,Xn),e(Xn,K4),e(co,Gi),e(co,Vn),e(Vn,Z4),e(co,Oi),b(c,Df,u),g(qa,c,u),b(c,fo,u),b(c,pe,u),e(pe,X8),e(pe,Xi),e(Xi,V8),e(pe,z8),b(c,zo,u),b(c,Ga,u),e(Ga,W8),e(Ga,Nf),e(Nf,Q8),e(Ga,RPe),b(c,bxe,u),b(c,Vi,u),e(Vi,qf),e(qf,TQ),g(eE,TQ,null),e(Vi,SPe),e(Vi,FQ),e(FQ,PPe),b(c,vxe,u),b(c,zn,u),e(zn,$Pe),e(zn,CQ),e(CQ,IPe),e(zn,jPe),e(zn,MQ),e(MQ,DPe),e(zn,NPe),b(c,Txe,u),g(oE,c,u),b(c,Fxe,u),b(c,H8,u),e(H8,qPe),b(c,Cxe,u),g(Gf,c,u),b(c,Mxe,u),b(c,zi,u),e(zi,Of),e(Of,EQ),g(rE,EQ,null),e(zi,GPe),e(zi,yQ),e(yQ,OPe),b(c,Exe,u),b(c,Wo,u),g(tE,Wo,null),e(Wo,XPe),e(Wo,aE),e(aE,VPe),e(aE,U8),e(U8,zPe),e(aE,WPe),e(Wo,QPe),e(Wo,nE),e(nE,HPe),e(nE,wQ),e(wQ,UPe),e(nE,JPe),e(Wo,YPe),e(Wo,mo),g(sE,mo,null),e(mo,KPe),e(mo,AQ),e(AQ,ZPe),e(mo,e$e),e(mo,Wi),e(Wi,o$e),e(Wi,LQ),e(LQ,r$e),e(Wi,t$e),e(Wi,BQ),e(BQ,a$e),e(Wi,n$e),e(mo,s$e),e(mo,v),e(v,Xf),e(Xf,xQ),e(xQ,l$e),e(Xf,i$e),e(Xf,J8),e(J8,d$e),e(Xf,c$e),e(v,f$e),e(v,Vf),e(Vf,kQ),e(kQ,m$e),e(Vf,g$e),e(Vf,Y8),e(Y8,h$e),e(Vf,p$e),e(v,_$e),e(v,zf),e(zf,RQ),e(RQ,u$e),e(zf,b$e),e(zf,K8),e(K8,v$e),e(zf,T$e),e(v,F$e),e(v,Wf),e(Wf,SQ),e(SQ,C$e),e(Wf,M$e),e(Wf,Z8),e(Z8,E$e),e(Wf,y$e),e(v,w$e),e(v,Qf),e(Qf,PQ),e(PQ,A$e),e(Qf,L$e),e(Qf,e9),e(e9,B$e),e(Qf,x$e),e(v,k$e),e(v,Hf),e(Hf,$Q),e($Q,R$e),e(Hf,S$e),e(Hf,o9),e(o9,P$e),e(Hf,$$e),e(v,I$e),e(v,Uf),e(Uf,IQ),e(IQ,j$e),e(Uf,D$e),e(Uf,r9),e(r9,N$e),e(Uf,q$e),e(v,G$e),e(v,Jf),e(Jf,jQ),e(jQ,O$e),e(Jf,X$e),e(Jf,t9),e(t9,V$e),e(Jf,z$e),e(v,W$e),e(v,Yf),e(Yf,DQ),e(DQ,Q$e),e(Yf,H$e),e(Yf,a9),e(a9,U$e),e(Yf,J$e),e(v,Y$e),e(v,Kf),e(Kf,NQ),e(NQ,K$e),e(Kf,Z$e),e(Kf,n9),e(n9,eIe),e(Kf,oIe),e(v,rIe),e(v,Zf),e(Zf,qQ),e(qQ,tIe),e(Zf,aIe),e(Zf,s9),e(s9,nIe),e(Zf,sIe),e(v,lIe),e(v,em),e(em,GQ),e(GQ,iIe),e(em,dIe),e(em,l9),e(l9,cIe),e(em,fIe),e(v,mIe),e(v,om),e(om,OQ),e(OQ,gIe),e(om,hIe),e(om,i9),e(i9,pIe),e(om,_Ie),e(v,uIe),e(v,rm),e(rm,XQ),e(XQ,bIe),e(rm,vIe),e(rm,d9),e(d9,TIe),e(rm,FIe),e(v,CIe),e(v,tm),e(tm,VQ),e(VQ,MIe),e(tm,EIe),e(tm,c9),e(c9,yIe),e(tm,wIe),e(v,AIe),e(v,am),e(am,zQ),e(zQ,LIe),e(am,BIe),e(am,f9),e(f9,xIe),e(am,kIe),e(v,RIe),e(v,nm),e(nm,WQ),e(WQ,SIe),e(nm,PIe),e(nm,m9),e(m9,$Ie),e(nm,IIe),e(v,jIe),e(v,sm),e(sm,QQ),e(QQ,DIe),e(sm,NIe),e(sm,g9),e(g9,qIe),e(sm,GIe),e(v,OIe),e(v,lm),e(lm,HQ),e(HQ,XIe),e(lm,VIe),e(lm,h9),e(h9,zIe),e(lm,WIe),e(v,QIe),e(v,im),e(im,UQ),e(UQ,HIe),e(im,UIe),e(im,p9),e(p9,JIe),e(im,YIe),e(v,KIe),e(v,dm),e(dm,JQ),e(JQ,ZIe),e(dm,eje),e(dm,_9),e(_9,oje),e(dm,rje),e(v,tje),e(v,cm),e(cm,YQ),e(YQ,aje),e(cm,nje),e(cm,u9),e(u9,sje),e(cm,lje),e(v,ije),e(v,fm),e(fm,KQ),e(KQ,dje),e(fm,cje),e(fm,b9),e(b9,fje),e(fm,mje),e(v,gje),e(v,mm),e(mm,ZQ),e(ZQ,hje),e(mm,pje),e(mm,v9),e(v9,_je),e(mm,uje),e(v,bje),e(v,gm),e(gm,eH),e(eH,vje),e(gm,Tje),e(gm,T9),e(T9,Fje),e(gm,Cje),e(v,Mje),e(v,hm),e(hm,oH),e(oH,Eje),e(hm,yje),e(hm,F9),e(F9,wje),e(hm,Aje),e(v,Lje),e(v,pm),e(pm,rH),e(rH,Bje),e(pm,xje),e(pm,C9),e(C9,kje),e(pm,Rje),e(v,Sje),e(v,_m),e(_m,tH),e(tH,Pje),e(_m,$je),e(_m,M9),e(M9,Ije),e(_m,jje),e(v,Dje),e(v,um),e(um,aH),e(aH,Nje),e(um,qje),e(um,E9),e(E9,Gje),e(um,Oje),e(v,Xje),e(v,bm),e(bm,nH),e(nH,Vje),e(bm,zje),e(bm,y9),e(y9,Wje),e(bm,Qje),e(v,Hje),e(v,vm),e(vm,sH),e(sH,Uje),e(vm,Jje),e(vm,w9),e(w9,Yje),e(vm,Kje),e(v,Zje),e(v,Tm),e(Tm,lH),e(lH,eDe),e(Tm,oDe),e(Tm,A9),e(A9,rDe),e(Tm,tDe),e(v,aDe),e(v,Fm),e(Fm,iH),e(iH,nDe),e(Fm,sDe),e(Fm,L9),e(L9,lDe),e(Fm,iDe),e(v,dDe),e(v,Cm),e(Cm,dH),e(dH,cDe),e(Cm,fDe),e(Cm,B9),e(B9,mDe),e(Cm,gDe),e(v,hDe),e(v,Mm),e(Mm,cH),e(cH,pDe),e(Mm,_De),e(Mm,x9),e(x9,uDe),e(Mm,bDe),e(v,vDe),e(v,Em),e(Em,fH),e(fH,TDe),e(Em,FDe),e(Em,k9),e(k9,CDe),e(Em,MDe),e(v,EDe),e(v,ym),e(ym,mH),e(mH,yDe),e(ym,wDe),e(ym,R9),e(R9,ADe),e(ym,LDe),e(v,BDe),e(v,wm),e(wm,gH),e(gH,xDe),e(wm,kDe),e(wm,S9),e(S9,RDe),e(wm,SDe),e(v,PDe),e(v,Am),e(Am,hH),e(hH,$De),e(Am,IDe),e(Am,P9),e(P9,jDe),e(Am,DDe),e(v,NDe),e(v,Lm),e(Lm,pH),e(pH,qDe),e(Lm,GDe),e(Lm,$9),e($9,ODe),e(Lm,XDe),e(v,VDe),e(v,Bm),e(Bm,_H),e(_H,zDe),e(Bm,WDe),e(Bm,I9),e(I9,QDe),e(Bm,HDe),e(v,UDe),e(v,xm),e(xm,uH),e(uH,JDe),e(xm,YDe),e(xm,j9),e(j9,KDe),e(xm,ZDe),e(v,eNe),e(v,km),e(km,bH),e(bH,oNe),e(km,rNe),e(km,D9),e(D9,tNe),e(km,aNe),e(v,nNe),e(v,Rm),e(Rm,vH),e(vH,sNe),e(Rm,lNe),e(Rm,N9),e(N9,iNe),e(Rm,dNe),e(v,cNe),e(v,Sm),e(Sm,TH),e(TH,fNe),e(Sm,mNe),e(Sm,q9),e(q9,gNe),e(Sm,hNe),e(v,pNe),e(v,Pm),e(Pm,FH),e(FH,_Ne),e(Pm,uNe),e(Pm,G9),e(G9,bNe),e(Pm,vNe),e(v,TNe),e(v,$m),e($m,CH),e(CH,FNe),e($m,CNe),e($m,O9),e(O9,MNe),e($m,ENe),e(v,yNe),e(v,Im),e(Im,MH),e(MH,wNe),e(Im,ANe),e(Im,X9),e(X9,LNe),e(Im,BNe),e(v,xNe),e(v,jm),e(jm,EH),e(EH,kNe),e(jm,RNe),e(jm,V9),e(V9,SNe),e(jm,PNe),e(v,$Ne),e(v,Dm),e(Dm,yH),e(yH,INe),e(Dm,jNe),e(Dm,z9),e(z9,DNe),e(Dm,NNe),e(v,qNe),e(v,Nm),e(Nm,wH),e(wH,GNe),e(Nm,ONe),e(Nm,W9),e(W9,XNe),e(Nm,VNe),e(v,zNe),e(v,qm),e(qm,AH),e(AH,WNe),e(qm,QNe),e(qm,Q9),e(Q9,HNe),e(qm,UNe),e(v,JNe),e(v,Gm),e(Gm,LH),e(LH,YNe),e(Gm,KNe),e(Gm,H9),e(H9,ZNe),e(Gm,eqe),e(v,oqe),e(v,Om),e(Om,BH),e(BH,rqe),e(Om,tqe),e(Om,U9),e(U9,aqe),e(Om,nqe),e(v,sqe),e(v,Xm),e(Xm,xH),e(xH,lqe),e(Xm,iqe),e(Xm,J9),e(J9,dqe),e(Xm,cqe),e(v,fqe),e(v,Vm),e(Vm,kH),e(kH,mqe),e(Vm,gqe),e(Vm,Y9),e(Y9,hqe),e(Vm,pqe),e(v,_qe),e(v,zm),e(zm,RH),e(RH,uqe),e(zm,bqe),e(zm,K9),e(K9,vqe),e(zm,Tqe),e(v,Fqe),e(v,Wm),e(Wm,SH),e(SH,Cqe),e(Wm,Mqe),e(Wm,Z9),e(Z9,Eqe),e(Wm,yqe),e(v,wqe),e(v,Qm),e(Qm,PH),e(PH,Aqe),e(Qm,Lqe),e(Qm,eB),e(eB,Bqe),e(Qm,xqe),e(v,kqe),e(v,Hm),e(Hm,$H),e($H,Rqe),e(Hm,Sqe),e(Hm,oB),e(oB,Pqe),e(Hm,$qe),e(v,Iqe),e(v,Um),e(Um,IH),e(IH,jqe),e(Um,Dqe),e(Um,rB),e(rB,Nqe),e(Um,qqe),e(v,Gqe),e(v,Jm),e(Jm,jH),e(jH,Oqe),e(Jm,Xqe),e(Jm,tB),e(tB,Vqe),e(Jm,zqe),e(v,Wqe),e(v,Ym),e(Ym,DH),e(DH,Qqe),e(Ym,Hqe),e(Ym,aB),e(aB,Uqe),e(Ym,Jqe),e(v,Yqe),e(v,Km),e(Km,NH),e(NH,Kqe),e(Km,Zqe),e(Km,nB),e(nB,eGe),e(Km,oGe),e(v,rGe),e(v,Zm),e(Zm,qH),e(qH,tGe),e(Zm,aGe),e(Zm,sB),e(sB,nGe),e(Zm,sGe),e(v,lGe),e(v,eg),e(eg,GH),e(GH,iGe),e(eg,dGe),e(eg,lB),e(lB,cGe),e(eg,fGe),e(v,mGe),e(v,og),e(og,OH),e(OH,gGe),e(og,hGe),e(og,iB),e(iB,pGe),e(og,_Ge),e(v,uGe),e(v,rg),e(rg,XH),e(XH,bGe),e(rg,vGe),e(rg,dB),e(dB,TGe),e(rg,FGe),e(v,CGe),e(v,tg),e(tg,VH),e(VH,MGe),e(tg,EGe),e(tg,cB),e(cB,yGe),e(tg,wGe),e(v,AGe),e(v,ag),e(ag,zH),e(zH,LGe),e(ag,BGe),e(ag,fB),e(fB,xGe),e(ag,kGe),e(v,RGe),e(v,ng),e(ng,WH),e(WH,SGe),e(ng,PGe),e(ng,mB),e(mB,$Ge),e(ng,IGe),e(v,jGe),e(v,sg),e(sg,QH),e(QH,DGe),e(sg,NGe),e(sg,gB),e(gB,qGe),e(sg,GGe),e(v,OGe),e(v,lg),e(lg,HH),e(HH,XGe),e(lg,VGe),e(lg,hB),e(hB,zGe),e(lg,WGe),e(v,QGe),e(v,ig),e(ig,UH),e(UH,HGe),e(ig,UGe),e(ig,pB),e(pB,JGe),e(ig,YGe),e(v,KGe),e(v,dg),e(dg,JH),e(JH,ZGe),e(dg,eOe),e(dg,_B),e(_B,oOe),e(dg,rOe),e(v,tOe),e(v,cg),e(cg,YH),e(YH,aOe),e(cg,nOe),e(cg,uB),e(uB,sOe),e(cg,lOe),e(v,iOe),e(v,fg),e(fg,KH),e(KH,dOe),e(fg,cOe),e(fg,bB),e(bB,fOe),e(fg,mOe),e(v,gOe),e(v,mg),e(mg,ZH),e(ZH,hOe),e(mg,pOe),e(mg,vB),e(vB,_Oe),e(mg,uOe),e(v,bOe),e(v,gg),e(gg,eU),e(eU,vOe),e(gg,TOe),e(gg,TB),e(TB,FOe),e(gg,COe),e(v,MOe),e(v,hg),e(hg,oU),e(oU,EOe),e(hg,yOe),e(hg,FB),e(FB,wOe),e(hg,AOe),e(v,LOe),e(v,pg),e(pg,rU),e(rU,BOe),e(pg,xOe),e(pg,CB),e(CB,kOe),e(pg,ROe),e(v,SOe),e(v,_g),e(_g,tU),e(tU,POe),e(_g,$Oe),e(_g,MB),e(MB,IOe),e(_g,jOe),e(v,DOe),e(v,ug),e(ug,aU),e(aU,NOe),e(ug,qOe),e(ug,EB),e(EB,GOe),e(ug,OOe),e(v,XOe),e(v,bg),e(bg,nU),e(nU,VOe),e(bg,zOe),e(bg,yB),e(yB,WOe),e(bg,QOe),e(v,HOe),e(v,vg),e(vg,sU),e(sU,UOe),e(vg,JOe),e(vg,wB),e(wB,YOe),e(vg,KOe),e(v,ZOe),e(v,Tg),e(Tg,lU),e(lU,eXe),e(Tg,oXe),e(Tg,AB),e(AB,rXe),e(Tg,tXe),e(v,aXe),e(v,Fg),e(Fg,iU),e(iU,nXe),e(Fg,sXe),e(Fg,LB),e(LB,lXe),e(Fg,iXe),e(v,dXe),e(v,Cg),e(Cg,dU),e(dU,cXe),e(Cg,fXe),e(Cg,BB),e(BB,mXe),e(Cg,gXe),e(v,hXe),e(v,Mg),e(Mg,cU),e(cU,pXe),e(Mg,_Xe),e(Mg,xB),e(xB,uXe),e(Mg,bXe),e(v,vXe),e(v,Eg),e(Eg,fU),e(fU,TXe),e(Eg,FXe),e(Eg,kB),e(kB,CXe),e(Eg,MXe),e(v,EXe),e(v,yg),e(yg,mU),e(mU,yXe),e(yg,wXe),e(yg,RB),e(RB,AXe),e(yg,LXe),e(v,BXe),e(v,wg),e(wg,gU),e(gU,xXe),e(wg,kXe),e(wg,SB),e(SB,RXe),e(wg,SXe),e(v,PXe),e(v,Ag),e(Ag,hU),e(hU,$Xe),e(Ag,IXe),e(Ag,PB),e(PB,jXe),e(Ag,DXe),e(v,NXe),e(v,Lg),e(Lg,pU),e(pU,qXe),e(Lg,GXe),e(Lg,$B),e($B,OXe),e(Lg,XXe),e(mo,VXe),e(mo,_U),e(_U,zXe),e(mo,WXe),g(lE,mo,null),e(Wo,QXe),e(Wo,Bg),g(iE,Bg,null),e(Bg,HXe),e(Bg,uU),e(uU,UXe),b(c,yxe,u),b(c,Qi,u),e(Qi,xg),e(xg,bU),g(dE,bU,null),e(Qi,JXe),e(Qi,vU),e(vU,YXe),b(c,wxe,u),b(c,Qo,u),g(cE,Qo,null),e(Qo,KXe),e(Qo,fE),e(fE,ZXe),e(fE,IB),e(IB,eVe),e(fE,oVe),e(Qo,rVe),e(Qo,mE),e(mE,tVe),e(mE,TU),e(TU,aVe),e(mE,nVe),e(Qo,sVe),e(Qo,go),g(gE,go,null),e(go,lVe),e(go,FU),e(FU,iVe),e(go,dVe),e(go,Oa),e(Oa,cVe),e(Oa,CU),e(CU,fVe),e(Oa,mVe),e(Oa,MU),e(MU,gVe),e(Oa,hVe),e(Oa,EU),e(EU,pVe),e(Oa,_Ve),e(go,uVe),e(go,E),e(E,Wn),e(Wn,yU),e(yU,bVe),e(Wn,vVe),e(Wn,jB),e(jB,TVe),e(Wn,FVe),e(Wn,DB),e(DB,CVe),e(Wn,MVe),e(E,EVe),e(E,Qn),e(Qn,wU),e(wU,yVe),e(Qn,wVe),e(Qn,NB),e(NB,AVe),e(Qn,LVe),e(Qn,qB),e(qB,BVe),e(Qn,xVe),e(E,kVe),e(E,Hn),e(Hn,AU),e(AU,RVe),e(Hn,SVe),e(Hn,GB),e(GB,PVe),e(Hn,$Ve),e(Hn,OB),e(OB,IVe),e(Hn,jVe),e(E,DVe),e(E,kg),e(kg,LU),e(LU,NVe),e(kg,qVe),e(kg,XB),e(XB,GVe),e(kg,OVe),e(E,XVe),e(E,Un),e(Un,BU),e(BU,VVe),e(Un,zVe),e(Un,VB),e(VB,WVe),e(Un,QVe),e(Un,zB),e(zB,HVe),e(Un,UVe),e(E,JVe),e(E,Rg),e(Rg,xU),e(xU,YVe),e(Rg,KVe),e(Rg,WB),e(WB,ZVe),e(Rg,eze),e(E,oze),e(E,Sg),e(Sg,kU),e(kU,rze),e(Sg,tze),e(Sg,QB),e(QB,aze),e(Sg,nze),e(E,sze),e(E,Pg),e(Pg,RU),e(RU,lze),e(Pg,ize),e(Pg,HB),e(HB,dze),e(Pg,cze),e(E,fze),e(E,Jn),e(Jn,SU),e(SU,mze),e(Jn,gze),e(Jn,UB),e(UB,hze),e(Jn,pze),e(Jn,JB),e(JB,_ze),e(Jn,uze),e(E,bze),e(E,Yn),e(Yn,PU),e(PU,vze),e(Yn,Tze),e(Yn,YB),e(YB,Fze),e(Yn,Cze),e(Yn,KB),e(KB,Mze),e(Yn,Eze),e(E,yze),e(E,Kn),e(Kn,$U),e($U,wze),e(Kn,Aze),e(Kn,ZB),e(ZB,Lze),e(Kn,Bze),e(Kn,ex),e(ex,xze),e(Kn,kze),e(E,Rze),e(E,$g),e($g,IU),e(IU,Sze),e($g,Pze),e($g,ox),e(ox,$ze),e($g,Ize),e(E,jze),e(E,Ig),e(Ig,jU),e(jU,Dze),e(Ig,Nze),e(Ig,rx),e(rx,qze),e(Ig,Gze),e(E,Oze),e(E,Zn),e(Zn,DU),e(DU,Xze),e(Zn,Vze),e(Zn,tx),e(tx,zze),e(Zn,Wze),e(Zn,ax),e(ax,Qze),e(Zn,Hze),e(E,Uze),e(E,jg),e(jg,NU),e(NU,Jze),e(jg,Yze),e(jg,nx),e(nx,Kze),e(jg,Zze),e(E,eWe),e(E,es),e(es,qU),e(qU,oWe),e(es,rWe),e(es,sx),e(sx,tWe),e(es,aWe),e(es,lx),e(lx,nWe),e(es,sWe),e(E,lWe),e(E,os),e(os,GU),e(GU,iWe),e(os,dWe),e(os,ix),e(ix,cWe),e(os,fWe),e(os,dx),e(dx,mWe),e(os,gWe),e(E,hWe),e(E,rs),e(rs,OU),e(OU,pWe),e(rs,_We),e(rs,cx),e(cx,uWe),e(rs,bWe),e(rs,XU),e(XU,vWe),e(rs,TWe),e(E,FWe),e(E,Dg),e(Dg,VU),e(VU,CWe),e(Dg,MWe),e(Dg,fx),e(fx,EWe),e(Dg,yWe),e(E,wWe),e(E,ts),e(ts,zU),e(zU,AWe),e(ts,LWe),e(ts,mx),e(mx,BWe),e(ts,xWe),e(ts,gx),e(gx,kWe),e(ts,RWe),e(E,SWe),e(E,Ng),e(Ng,WU),e(WU,PWe),e(Ng,$We),e(Ng,hx),e(hx,IWe),e(Ng,jWe),e(E,DWe),e(E,as),e(as,QU),e(QU,NWe),e(as,qWe),e(as,px),e(px,GWe),e(as,OWe),e(as,_x),e(_x,XWe),e(as,VWe),e(E,zWe),e(E,ns),e(ns,HU),e(HU,WWe),e(ns,QWe),e(ns,ux),e(ux,HWe),e(ns,UWe),e(ns,bx),e(bx,JWe),e(ns,YWe),e(E,KWe),e(E,ss),e(ss,UU),e(UU,ZWe),e(ss,eQe),e(ss,vx),e(vx,oQe),e(ss,rQe),e(ss,Tx),e(Tx,tQe),e(ss,aQe),e(E,nQe),e(E,qg),e(qg,JU),e(JU,sQe),e(qg,lQe),e(qg,Fx),e(Fx,iQe),e(qg,dQe),e(E,cQe),e(E,ls),e(ls,YU),e(YU,fQe),e(ls,mQe),e(ls,Cx),e(Cx,gQe),e(ls,hQe),e(ls,Mx),e(Mx,pQe),e(ls,_Qe),e(E,uQe),e(E,Gg),e(Gg,KU),e(KU,bQe),e(Gg,vQe),e(Gg,Ex),e(Ex,TQe),e(Gg,FQe),e(E,CQe),e(E,is),e(is,ZU),e(ZU,MQe),e(is,EQe),e(is,yx),e(yx,yQe),e(is,wQe),e(is,wx),e(wx,AQe),e(is,LQe),e(E,BQe),e(E,ds),e(ds,eJ),e(eJ,xQe),e(ds,kQe),e(ds,Ax),e(Ax,RQe),e(ds,SQe),e(ds,Lx),e(Lx,PQe),e(ds,$Qe),e(E,IQe),e(E,cs),e(cs,oJ),e(oJ,jQe),e(cs,DQe),e(cs,Bx),e(Bx,NQe),e(cs,qQe),e(cs,xx),e(xx,GQe),e(cs,OQe),e(E,XQe),e(E,fs),e(fs,rJ),e(rJ,VQe),e(fs,zQe),e(fs,kx),e(kx,WQe),e(fs,QQe),e(fs,Rx),e(Rx,HQe),e(fs,UQe),e(E,JQe),e(E,Og),e(Og,tJ),e(tJ,YQe),e(Og,KQe),e(Og,Sx),e(Sx,ZQe),e(Og,eHe),e(E,oHe),e(E,ms),e(ms,aJ),e(aJ,rHe),e(ms,tHe),e(ms,Px),e(Px,aHe),e(ms,nHe),e(ms,$x),e($x,sHe),e(ms,lHe),e(E,iHe),e(E,gs),e(gs,nJ),e(nJ,dHe),e(gs,cHe),e(gs,Ix),e(Ix,fHe),e(gs,mHe),e(gs,jx),e(jx,gHe),e(gs,hHe),e(E,pHe),e(E,hs),e(hs,sJ),e(sJ,_He),e(hs,uHe),e(hs,Dx),e(Dx,bHe),e(hs,vHe),e(hs,Nx),e(Nx,THe),e(hs,FHe),e(E,CHe),e(E,ps),e(ps,lJ),e(lJ,MHe),e(ps,EHe),e(ps,qx),e(qx,yHe),e(ps,wHe),e(ps,Gx),e(Gx,AHe),e(ps,LHe),e(E,BHe),e(E,_s),e(_s,iJ),e(iJ,xHe),e(_s,kHe),e(_s,Ox),e(Ox,RHe),e(_s,SHe),e(_s,Xx),e(Xx,PHe),e(_s,$He),e(E,IHe),e(E,us),e(us,dJ),e(dJ,jHe),e(us,DHe),e(us,Vx),e(Vx,NHe),e(us,qHe),e(us,zx),e(zx,GHe),e(us,OHe),e(E,XHe),e(E,Xg),e(Xg,cJ),e(cJ,VHe),e(Xg,zHe),e(Xg,Wx),e(Wx,WHe),e(Xg,QHe),e(E,HHe),e(E,bs),e(bs,fJ),e(fJ,UHe),e(bs,JHe),e(bs,Qx),e(Qx,YHe),e(bs,KHe),e(bs,Hx),e(Hx,ZHe),e(bs,eUe),e(E,oUe),e(E,Vg),e(Vg,mJ),e(mJ,rUe),e(Vg,tUe),e(Vg,Ux),e(Ux,aUe),e(Vg,nUe),e(E,sUe),e(E,zg),e(zg,gJ),e(gJ,lUe),e(zg,iUe),e(zg,Jx),e(Jx,dUe),e(zg,cUe),e(E,fUe),e(E,vs),e(vs,hJ),e(hJ,mUe),e(vs,gUe),e(vs,Yx),e(Yx,hUe),e(vs,pUe),e(vs,Kx),e(Kx,_Ue),e(vs,uUe),e(E,bUe),e(E,Ts),e(Ts,pJ),e(pJ,vUe),e(Ts,TUe),e(Ts,Zx),e(Zx,FUe),e(Ts,CUe),e(Ts,ek),e(ek,MUe),e(Ts,EUe),e(E,yUe),e(E,Wg),e(Wg,_J),e(_J,wUe),e(Wg,AUe),e(Wg,ok),e(ok,LUe),e(Wg,BUe),e(E,xUe),e(E,Fs),e(Fs,uJ),e(uJ,kUe),e(Fs,RUe),e(Fs,rk),e(rk,SUe),e(Fs,PUe),e(Fs,tk),e(tk,$Ue),e(Fs,IUe),e(E,jUe),e(E,Cs),e(Cs,bJ),e(bJ,DUe),e(Cs,NUe),e(Cs,ak),e(ak,qUe),e(Cs,GUe),e(Cs,nk),e(nk,OUe),e(Cs,XUe),e(E,VUe),e(E,Ms),e(Ms,vJ),e(vJ,zUe),e(Ms,WUe),e(Ms,sk),e(sk,QUe),e(Ms,HUe),e(Ms,lk),e(lk,UUe),e(Ms,JUe),e(E,YUe),e(E,Es),e(Es,TJ),e(TJ,KUe),e(Es,ZUe),e(Es,ik),e(ik,eJe),e(Es,oJe),e(Es,dk),e(dk,rJe),e(Es,tJe),e(E,aJe),e(E,ys),e(ys,FJ),e(FJ,nJe),e(ys,sJe),e(ys,ck),e(ck,lJe),e(ys,iJe),e(ys,fk),e(fk,dJe),e(ys,cJe),e(E,fJe),e(E,Qg),e(Qg,CJ),e(CJ,mJe),e(Qg,gJe),e(Qg,mk),e(mk,hJe),e(Qg,pJe),e(E,_Je),e(E,Hg),e(Hg,MJ),e(MJ,uJe),e(Hg,bJe),e(Hg,gk),e(gk,vJe),e(Hg,TJe),e(E,FJe),e(E,Ug),e(Ug,EJ),e(EJ,CJe),e(Ug,MJe),e(Ug,hk),e(hk,EJe),e(Ug,yJe),e(E,wJe),e(E,Jg),e(Jg,yJ),e(yJ,AJe),e(Jg,LJe),e(Jg,pk),e(pk,BJe),e(Jg,xJe),e(E,kJe),e(E,ws),e(ws,wJ),e(wJ,RJe),e(ws,SJe),e(ws,_k),e(_k,PJe),e(ws,$Je),e(ws,uk),e(uk,IJe),e(ws,jJe),e(E,DJe),e(E,Yg),e(Yg,AJ),e(AJ,NJe),e(Yg,qJe),e(Yg,bk),e(bk,GJe),e(Yg,OJe),e(E,XJe),e(E,As),e(As,LJ),e(LJ,VJe),e(As,zJe),e(As,vk),e(vk,WJe),e(As,QJe),e(As,Tk),e(Tk,HJe),e(As,UJe),e(E,JJe),e(E,Ls),e(Ls,BJ),e(BJ,YJe),e(Ls,KJe),e(Ls,Fk),e(Fk,ZJe),e(Ls,eYe),e(Ls,Ck),e(Ck,oYe),e(Ls,rYe),e(E,tYe),e(E,Bs),e(Bs,xJ),e(xJ,aYe),e(Bs,nYe),e(Bs,Mk),e(Mk,sYe),e(Bs,lYe),e(Bs,Ek),e(Ek,iYe),e(Bs,dYe),e(E,cYe),e(E,xs),e(xs,kJ),e(kJ,fYe),e(xs,mYe),e(xs,yk),e(yk,gYe),e(xs,hYe),e(xs,wk),e(wk,pYe),e(xs,_Ye),e(E,uYe),e(E,ks),e(ks,RJ),e(RJ,bYe),e(ks,vYe),e(ks,Ak),e(Ak,TYe),e(ks,FYe),e(ks,Lk),e(Lk,CYe),e(ks,MYe),e(E,EYe),e(E,Rs),e(Rs,SJ),e(SJ,yYe),e(Rs,wYe),e(Rs,Bk),e(Bk,AYe),e(Rs,LYe),e(Rs,xk),e(xk,BYe),e(Rs,xYe),e(E,kYe),e(E,Kg),e(Kg,PJ),e(PJ,RYe),e(Kg,SYe),e(Kg,kk),e(kk,PYe),e(Kg,$Ye),e(E,IYe),e(E,Zg),e(Zg,$J),e($J,jYe),e(Zg,DYe),e(Zg,Rk),e(Rk,NYe),e(Zg,qYe),e(E,GYe),e(E,Ss),e(Ss,IJ),e(IJ,OYe),e(Ss,XYe),e(Ss,Sk),e(Sk,VYe),e(Ss,zYe),e(Ss,Pk),e(Pk,WYe),e(Ss,QYe),e(E,HYe),e(E,Ps),e(Ps,jJ),e(jJ,UYe),e(Ps,JYe),e(Ps,$k),e($k,YYe),e(Ps,KYe),e(Ps,Ik),e(Ik,ZYe),e(Ps,eKe),e(E,oKe),e(E,$s),e($s,DJ),e(DJ,rKe),e($s,tKe),e($s,jk),e(jk,aKe),e($s,nKe),e($s,Dk),e(Dk,sKe),e($s,lKe),e(E,iKe),e(E,eh),e(eh,NJ),e(NJ,dKe),e(eh,cKe),e(eh,Nk),e(Nk,fKe),e(eh,mKe),e(E,gKe),e(E,oh),e(oh,qJ),e(qJ,hKe),e(oh,pKe),e(oh,qk),e(qk,_Ke),e(oh,uKe),e(E,bKe),e(E,rh),e(rh,GJ),e(GJ,vKe),e(rh,TKe),e(rh,Gk),e(Gk,FKe),e(rh,CKe),e(E,MKe),e(E,th),e(th,OJ),e(OJ,EKe),e(th,yKe),e(th,Ok),e(Ok,wKe),e(th,AKe),e(E,LKe),e(E,Is),e(Is,XJ),e(XJ,BKe),e(Is,xKe),e(Is,Xk),e(Xk,kKe),e(Is,RKe),e(Is,Vk),e(Vk,SKe),e(Is,PKe),e(E,$Ke),e(E,ah),e(ah,VJ),e(VJ,IKe),e(ah,jKe),e(ah,zk),e(zk,DKe),e(ah,NKe),e(E,qKe),e(E,nh),e(nh,zJ),e(zJ,GKe),e(nh,OKe),e(nh,Wk),e(Wk,XKe),e(nh,VKe),e(E,zKe),e(E,js),e(js,WJ),e(WJ,WKe),e(js,QKe),e(js,Qk),e(Qk,HKe),e(js,UKe),e(js,Hk),e(Hk,JKe),e(js,YKe),e(E,KKe),e(E,Ds),e(Ds,QJ),e(QJ,ZKe),e(Ds,eZe),e(Ds,Uk),e(Uk,oZe),e(Ds,rZe),e(Ds,Jk),e(Jk,tZe),e(Ds,aZe),e(go,nZe),e(go,HJ),e(HJ,sZe),e(go,lZe),g(hE,go,null),e(Qo,iZe),e(Qo,sh),g(pE,sh,null),e(sh,dZe),e(sh,UJ),e(UJ,cZe),b(c,Axe,u),b(c,Hi,u),e(Hi,lh),e(lh,JJ),g(_E,JJ,null),e(Hi,fZe),e(Hi,YJ),e(YJ,mZe),b(c,Lxe,u),b(c,Ho,u),g(uE,Ho,null),e(Ho,gZe),e(Ho,bE),e(bE,hZe),e(bE,Yk),e(Yk,pZe),e(bE,_Ze),e(Ho,uZe),e(Ho,vE),e(vE,bZe),e(vE,KJ),e(KJ,vZe),e(vE,TZe),e(Ho,FZe),e(Ho,$e),g(TE,$e,null),e($e,CZe),e($e,ZJ),e(ZJ,MZe),e($e,EZe),e($e,Xa),e(Xa,yZe),e(Xa,eY),e(eY,wZe),e(Xa,AZe),e(Xa,oY),e(oY,LZe),e(Xa,BZe),e(Xa,rY),e(rY,xZe),e(Xa,kZe),e($e,RZe),e($e,ae),e(ae,ih),e(ih,tY),e(tY,SZe),e(ih,PZe),e(ih,Kk),e(Kk,$Ze),e(ih,IZe),e(ae,jZe),e(ae,dh),e(dh,aY),e(aY,DZe),e(dh,NZe),e(dh,Zk),e(Zk,qZe),e(dh,GZe),e(ae,OZe),e(ae,ch),e(ch,nY),e(nY,XZe),e(ch,VZe),e(ch,eR),e(eR,zZe),e(ch,WZe),e(ae,QZe),e(ae,fh),e(fh,sY),e(sY,HZe),e(fh,UZe),e(fh,oR),e(oR,JZe),e(fh,YZe),e(ae,KZe),e(ae,mh),e(mh,lY),e(lY,ZZe),e(mh,eeo),e(mh,rR),e(rR,oeo),e(mh,reo),e(ae,teo),e(ae,gh),e(gh,iY),e(iY,aeo),e(gh,neo),e(gh,tR),e(tR,seo),e(gh,leo),e(ae,ieo),e(ae,hh),e(hh,dY),e(dY,deo),e(hh,ceo),e(hh,aR),e(aR,feo),e(hh,meo),e(ae,geo),e(ae,ph),e(ph,cY),e(cY,heo),e(ph,peo),e(ph,nR),e(nR,_eo),e(ph,ueo),e(ae,beo),e(ae,_h),e(_h,fY),e(fY,veo),e(_h,Teo),e(_h,sR),e(sR,Feo),e(_h,Ceo),e(ae,Meo),e(ae,uh),e(uh,mY),e(mY,Eeo),e(uh,yeo),e(uh,lR),e(lR,weo),e(uh,Aeo),e(ae,Leo),e(ae,bh),e(bh,gY),e(gY,Beo),e(bh,xeo),e(bh,iR),e(iR,keo),e(bh,Reo),e(ae,Seo),e(ae,vh),e(vh,hY),e(hY,Peo),e(vh,$eo),e(vh,dR),e(dR,Ieo),e(vh,jeo),e(ae,Deo),e(ae,Th),e(Th,pY),e(pY,Neo),e(Th,qeo),e(Th,cR),e(cR,Geo),e(Th,Oeo),e(ae,Xeo),e(ae,Fh),e(Fh,_Y),e(_Y,Veo),e(Fh,zeo),e(Fh,fR),e(fR,Weo),e(Fh,Qeo),e(ae,Heo),e(ae,Ch),e(Ch,uY),e(uY,Ueo),e(Ch,Jeo),e(Ch,mR),e(mR,Yeo),e(Ch,Keo),e(ae,Zeo),e(ae,Mh),e(Mh,bY),e(bY,eoo),e(Mh,ooo),e(Mh,gR),e(gR,roo),e(Mh,too),e($e,aoo),g(Eh,$e,null),e($e,noo),e($e,vY),e(vY,soo),e($e,loo),g(FE,$e,null),e(Ho,ioo),e(Ho,yh),g(CE,yh,null),e(yh,doo),e(yh,TY),e(TY,coo),b(c,Bxe,u),b(c,Ui,u),e(Ui,wh),e(wh,FY),g(ME,FY,null),e(Ui,foo),e(Ui,CY),e(CY,moo),b(c,xxe,u),b(c,Uo,u),g(EE,Uo,null),e(Uo,goo),e(Uo,yE),e(yE,hoo),e(yE,hR),e(hR,poo),e(yE,_oo),e(Uo,uoo),e(Uo,wE),e(wE,boo),e(wE,MY),e(MY,voo),e(wE,Too),e(Uo,Foo),e(Uo,Ie),g(AE,Ie,null),e(Ie,Coo),e(Ie,EY),e(EY,Moo),e(Ie,Eoo),e(Ie,Ji),e(Ji,yoo),e(Ji,yY),e(yY,woo),e(Ji,Aoo),e(Ji,wY),e(wY,Loo),e(Ji,Boo),e(Ie,xoo),e(Ie,Be),e(Be,Ah),e(Ah,AY),e(AY,koo),e(Ah,Roo),e(Ah,pR),e(pR,Soo),e(Ah,Poo),e(Be,$oo),e(Be,Lh),e(Lh,LY),e(LY,Ioo),e(Lh,joo),e(Lh,_R),e(_R,Doo),e(Lh,Noo),e(Be,qoo),e(Be,Bh),e(Bh,BY),e(BY,Goo),e(Bh,Ooo),e(Bh,uR),e(uR,Xoo),e(Bh,Voo),e(Be,zoo),e(Be,xh),e(xh,xY),e(xY,Woo),e(xh,Qoo),e(xh,bR),e(bR,Hoo),e(xh,Uoo),e(Be,Joo),e(Be,kh),e(kh,kY),e(kY,Yoo),e(kh,Koo),e(kh,vR),e(vR,Zoo),e(kh,ero),e(Be,oro),e(Be,Rh),e(Rh,RY),e(RY,rro),e(Rh,tro),e(Rh,TR),e(TR,aro),e(Rh,nro),e(Be,sro),e(Be,Sh),e(Sh,SY),e(SY,lro),e(Sh,iro),e(Sh,FR),e(FR,dro),e(Sh,cro),e(Be,fro),e(Be,Ph),e(Ph,PY),e(PY,mro),e(Ph,gro),e(Ph,CR),e(CR,hro),e(Ph,pro),e(Ie,_ro),g($h,Ie,null),e(Ie,uro),e(Ie,$Y),e($Y,bro),e(Ie,vro),g(LE,Ie,null),e(Uo,Tro),e(Uo,Ih),g(BE,Ih,null),e(Ih,Fro),e(Ih,IY),e(IY,Cro),b(c,kxe,u),b(c,Yi,u),e(Yi,jh),e(jh,jY),g(xE,jY,null),e(Yi,Mro),e(Yi,DY),e(DY,Ero),b(c,Rxe,u),b(c,Jo,u),g(kE,Jo,null),e(Jo,yro),e(Jo,Ki),e(Ki,wro),e(Ki,NY),e(NY,Aro),e(Ki,Lro),e(Ki,qY),e(qY,Bro),e(Ki,xro),e(Jo,kro),e(Jo,RE),e(RE,Rro),e(RE,GY),e(GY,Sro),e(RE,Pro),e(Jo,$ro),e(Jo,Vr),g(SE,Vr,null),e(Vr,Iro),e(Vr,OY),e(OY,jro),e(Vr,Dro),e(Vr,Zi),e(Zi,Nro),e(Zi,XY),e(XY,qro),e(Zi,Gro),e(Zi,VY),e(VY,Oro),e(Zi,Xro),e(Vr,Vro),e(Vr,zY),e(zY,zro),e(Vr,Wro),g(PE,Vr,null),e(Jo,Qro),e(Jo,je),g($E,je,null),e(je,Hro),e(je,WY),e(WY,Uro),e(je,Jro),e(je,Va),e(Va,Yro),e(Va,QY),e(QY,Kro),e(Va,Zro),e(Va,HY),e(HY,eto),e(Va,oto),e(Va,UY),e(UY,rto),e(Va,tto),e(je,ato),e(je,F),e(F,Dh),e(Dh,JY),e(JY,nto),e(Dh,sto),e(Dh,MR),e(MR,lto),e(Dh,ito),e(F,dto),e(F,Nh),e(Nh,YY),e(YY,cto),e(Nh,fto),e(Nh,ER),e(ER,mto),e(Nh,gto),e(F,hto),e(F,qh),e(qh,KY),e(KY,pto),e(qh,_to),e(qh,yR),e(yR,uto),e(qh,bto),e(F,vto),e(F,Gh),e(Gh,ZY),e(ZY,Tto),e(Gh,Fto),e(Gh,wR),e(wR,Cto),e(Gh,Mto),e(F,Eto),e(F,Oh),e(Oh,eK),e(eK,yto),e(Oh,wto),e(Oh,AR),e(AR,Ato),e(Oh,Lto),e(F,Bto),e(F,Xh),e(Xh,oK),e(oK,xto),e(Xh,kto),e(Xh,LR),e(LR,Rto),e(Xh,Sto),e(F,Pto),e(F,Vh),e(Vh,rK),e(rK,$to),e(Vh,Ito),e(Vh,BR),e(BR,jto),e(Vh,Dto),e(F,Nto),e(F,zh),e(zh,tK),e(tK,qto),e(zh,Gto),e(zh,xR),e(xR,Oto),e(zh,Xto),e(F,Vto),e(F,Wh),e(Wh,aK),e(aK,zto),e(Wh,Wto),e(Wh,kR),e(kR,Qto),e(Wh,Hto),e(F,Uto),e(F,Qh),e(Qh,nK),e(nK,Jto),e(Qh,Yto),e(Qh,RR),e(RR,Kto),e(Qh,Zto),e(F,eao),e(F,Hh),e(Hh,sK),e(sK,oao),e(Hh,rao),e(Hh,SR),e(SR,tao),e(Hh,aao),e(F,nao),e(F,Uh),e(Uh,lK),e(lK,sao),e(Uh,lao),e(Uh,PR),e(PR,iao),e(Uh,dao),e(F,cao),e(F,Jh),e(Jh,iK),e(iK,fao),e(Jh,mao),e(Jh,$R),e($R,gao),e(Jh,hao),e(F,pao),e(F,Yh),e(Yh,dK),e(dK,_ao),e(Yh,uao),e(Yh,IR),e(IR,bao),e(Yh,vao),e(F,Tao),e(F,Kh),e(Kh,cK),e(cK,Fao),e(Kh,Cao),e(Kh,jR),e(jR,Mao),e(Kh,Eao),e(F,yao),e(F,Zh),e(Zh,fK),e(fK,wao),e(Zh,Aao),e(Zh,DR),e(DR,Lao),e(Zh,Bao),e(F,xao),e(F,ep),e(ep,mK),e(mK,kao),e(ep,Rao),e(ep,NR),e(NR,Sao),e(ep,Pao),e(F,$ao),e(F,op),e(op,gK),e(gK,Iao),e(op,jao),e(op,qR),e(qR,Dao),e(op,Nao),e(F,qao),e(F,rp),e(rp,hK),e(hK,Gao),e(rp,Oao),e(rp,GR),e(GR,Xao),e(rp,Vao),e(F,zao),e(F,tp),e(tp,pK),e(pK,Wao),e(tp,Qao),e(tp,OR),e(OR,Hao),e(tp,Uao),e(F,Jao),e(F,ap),e(ap,_K),e(_K,Yao),e(ap,Kao),e(ap,XR),e(XR,Zao),e(ap,eno),e(F,ono),e(F,np),e(np,uK),e(uK,rno),e(np,tno),e(np,VR),e(VR,ano),e(np,nno),e(F,sno),e(F,sp),e(sp,bK),e(bK,lno),e(sp,ino),e(sp,zR),e(zR,dno),e(sp,cno),e(F,fno),e(F,lp),e(lp,vK),e(vK,mno),e(lp,gno),e(lp,WR),e(WR,hno),e(lp,pno),e(F,_no),e(F,ip),e(ip,TK),e(TK,uno),e(ip,bno),e(ip,QR),e(QR,vno),e(ip,Tno),e(F,Fno),e(F,dp),e(dp,FK),e(FK,Cno),e(dp,Mno),e(dp,HR),e(HR,Eno),e(dp,yno),e(F,wno),e(F,cp),e(cp,CK),e(CK,Ano),e(cp,Lno),e(cp,UR),e(UR,Bno),e(cp,xno),e(F,kno),e(F,Ns),e(Ns,MK),e(MK,Rno),e(Ns,Sno),e(Ns,JR),e(JR,Pno),e(Ns,$no),e(Ns,YR),e(YR,Ino),e(Ns,jno),e(F,Dno),e(F,fp),e(fp,EK),e(EK,Nno),e(fp,qno),e(fp,KR),e(KR,Gno),e(fp,Ono),e(F,Xno),e(F,mp),e(mp,yK),e(yK,Vno),e(mp,zno),e(mp,ZR),e(ZR,Wno),e(mp,Qno),e(F,Hno),e(F,gp),e(gp,wK),e(wK,Uno),e(gp,Jno),e(gp,eS),e(eS,Yno),e(gp,Kno),e(F,Zno),e(F,hp),e(hp,AK),e(AK,eso),e(hp,oso),e(hp,oS),e(oS,rso),e(hp,tso),e(F,aso),e(F,pp),e(pp,LK),e(LK,nso),e(pp,sso),e(pp,rS),e(rS,lso),e(pp,iso),e(F,dso),e(F,_p),e(_p,BK),e(BK,cso),e(_p,fso),e(_p,tS),e(tS,mso),e(_p,gso),e(F,hso),e(F,up),e(up,xK),e(xK,pso),e(up,_so),e(up,aS),e(aS,uso),e(up,bso),e(F,vso),e(F,bp),e(bp,kK),e(kK,Tso),e(bp,Fso),e(bp,nS),e(nS,Cso),e(bp,Mso),e(F,Eso),e(F,vp),e(vp,RK),e(RK,yso),e(vp,wso),e(vp,sS),e(sS,Aso),e(vp,Lso),e(F,Bso),e(F,Tp),e(Tp,SK),e(SK,xso),e(Tp,kso),e(Tp,lS),e(lS,Rso),e(Tp,Sso),e(F,Pso),e(F,Fp),e(Fp,PK),e(PK,$so),e(Fp,Iso),e(Fp,iS),e(iS,jso),e(Fp,Dso),e(F,Nso),e(F,Cp),e(Cp,$K),e($K,qso),e(Cp,Gso),e(Cp,dS),e(dS,Oso),e(Cp,Xso),e(F,Vso),e(F,Mp),e(Mp,IK),e(IK,zso),e(Mp,Wso),e(Mp,cS),e(cS,Qso),e(Mp,Hso),e(F,Uso),e(F,Ep),e(Ep,jK),e(jK,Jso),e(Ep,Yso),e(Ep,fS),e(fS,Kso),e(Ep,Zso),e(F,elo),e(F,yp),e(yp,DK),e(DK,olo),e(yp,rlo),e(yp,mS),e(mS,tlo),e(yp,alo),e(F,nlo),e(F,wp),e(wp,NK),e(NK,slo),e(wp,llo),e(wp,gS),e(gS,ilo),e(wp,dlo),e(F,clo),e(F,Ap),e(Ap,qK),e(qK,flo),e(Ap,mlo),e(Ap,hS),e(hS,glo),e(Ap,hlo),e(F,plo),e(F,Lp),e(Lp,GK),e(GK,_lo),e(Lp,ulo),e(Lp,pS),e(pS,blo),e(Lp,vlo),e(F,Tlo),e(F,Bp),e(Bp,OK),e(OK,Flo),e(Bp,Clo),e(Bp,_S),e(_S,Mlo),e(Bp,Elo),e(F,ylo),e(F,xp),e(xp,XK),e(XK,wlo),e(xp,Alo),e(xp,uS),e(uS,Llo),e(xp,Blo),e(F,xlo),e(F,kp),e(kp,VK),e(VK,klo),e(kp,Rlo),e(kp,bS),e(bS,Slo),e(kp,Plo),e(F,$lo),e(F,Rp),e(Rp,zK),e(zK,Ilo),e(Rp,jlo),e(Rp,vS),e(vS,Dlo),e(Rp,Nlo),e(F,qlo),e(F,Sp),e(Sp,WK),e(WK,Glo),e(Sp,Olo),e(Sp,TS),e(TS,Xlo),e(Sp,Vlo),e(F,zlo),e(F,Pp),e(Pp,QK),e(QK,Wlo),e(Pp,Qlo),e(Pp,FS),e(FS,Hlo),e(Pp,Ulo),e(F,Jlo),e(F,$p),e($p,HK),e(HK,Ylo),e($p,Klo),e($p,CS),e(CS,Zlo),e($p,eio),e(F,oio),e(F,Ip),e(Ip,UK),e(UK,rio),e(Ip,tio),e(Ip,MS),e(MS,aio),e(Ip,nio),e(F,sio),e(F,jp),e(jp,JK),e(JK,lio),e(jp,iio),e(jp,ES),e(ES,dio),e(jp,cio),e(F,fio),e(F,Dp),e(Dp,YK),e(YK,mio),e(Dp,gio),e(Dp,yS),e(yS,hio),e(Dp,pio),e(F,_io),e(F,Np),e(Np,KK),e(KK,uio),e(Np,bio),e(Np,wS),e(wS,vio),e(Np,Tio),e(F,Fio),e(F,qp),e(qp,ZK),e(ZK,Cio),e(qp,Mio),e(qp,AS),e(AS,Eio),e(qp,yio),e(F,wio),e(F,Gp),e(Gp,eZ),e(eZ,Aio),e(Gp,Lio),e(Gp,LS),e(LS,Bio),e(Gp,xio),e(F,kio),e(F,Op),e(Op,oZ),e(oZ,Rio),e(Op,Sio),e(Op,BS),e(BS,Pio),e(Op,$io),e(F,Iio),e(F,Xp),e(Xp,rZ),e(rZ,jio),e(Xp,Dio),e(Xp,xS),e(xS,Nio),e(Xp,qio),e(F,Gio),e(F,Vp),e(Vp,tZ),e(tZ,Oio),e(Vp,Xio),e(Vp,kS),e(kS,Vio),e(Vp,zio),e(F,Wio),e(F,zp),e(zp,aZ),e(aZ,Qio),e(zp,Hio),e(zp,RS),e(RS,Uio),e(zp,Jio),e(F,Yio),e(F,Wp),e(Wp,nZ),e(nZ,Kio),e(Wp,Zio),e(Wp,SS),e(SS,edo),e(Wp,odo),e(F,rdo),e(F,Qp),e(Qp,sZ),e(sZ,tdo),e(Qp,ado),e(Qp,PS),e(PS,ndo),e(Qp,sdo),e(F,ldo),e(F,Hp),e(Hp,lZ),e(lZ,ido),e(Hp,ddo),e(Hp,$S),e($S,cdo),e(Hp,fdo),e(F,mdo),e(F,Up),e(Up,iZ),e(iZ,gdo),e(Up,hdo),e(Up,IS),e(IS,pdo),e(Up,_do),e(F,udo),e(F,Jp),e(Jp,dZ),e(dZ,bdo),e(Jp,vdo),e(Jp,jS),e(jS,Tdo),e(Jp,Fdo),e(F,Cdo),e(F,Yp),e(Yp,cZ),e(cZ,Mdo),e(Yp,Edo),e(Yp,DS),e(DS,ydo),e(Yp,wdo),e(F,Ado),e(F,Kp),e(Kp,fZ),e(fZ,Ldo),e(Kp,Bdo),e(Kp,NS),e(NS,xdo),e(Kp,kdo),e(F,Rdo),e(F,Zp),e(Zp,mZ),e(mZ,Sdo),e(Zp,Pdo),e(Zp,qS),e(qS,$do),e(Zp,Ido),e(F,jdo),e(F,e_),e(e_,gZ),e(gZ,Ddo),e(e_,Ndo),e(e_,GS),e(GS,qdo),e(e_,Gdo),e(F,Odo),e(F,o_),e(o_,hZ),e(hZ,Xdo),e(o_,Vdo),e(o_,OS),e(OS,zdo),e(o_,Wdo),e(F,Qdo),e(F,r_),e(r_,pZ),e(pZ,Hdo),e(r_,Udo),e(r_,XS),e(XS,Jdo),e(r_,Ydo),e(F,Kdo),e(F,t_),e(t_,_Z),e(_Z,Zdo),e(t_,eco),e(t_,VS),e(VS,oco),e(t_,rco),e(F,tco),e(F,a_),e(a_,uZ),e(uZ,aco),e(a_,nco),e(a_,zS),e(zS,sco),e(a_,lco),e(F,ico),e(F,n_),e(n_,bZ),e(bZ,dco),e(n_,cco),e(n_,WS),e(WS,fco),e(n_,mco),e(F,gco),e(F,s_),e(s_,vZ),e(vZ,hco),e(s_,pco),e(s_,QS),e(QS,_co),e(s_,uco),e(F,bco),e(F,l_),e(l_,TZ),e(TZ,vco),e(l_,Tco),e(l_,HS),e(HS,Fco),e(l_,Cco),e(F,Mco),e(F,i_),e(i_,FZ),e(FZ,Eco),e(i_,yco),e(i_,US),e(US,wco),e(i_,Aco),e(F,Lco),e(F,d_),e(d_,CZ),e(CZ,Bco),e(d_,xco),e(d_,JS),e(JS,kco),e(d_,Rco),e(F,Sco),e(F,c_),e(c_,MZ),e(MZ,Pco),e(c_,$co),e(c_,YS),e(YS,Ico),e(c_,jco),e(F,Dco),e(F,f_),e(f_,EZ),e(EZ,Nco),e(f_,qco),e(f_,KS),e(KS,Gco),e(f_,Oco),e(F,Xco),e(F,m_),e(m_,yZ),e(yZ,Vco),e(m_,zco),e(m_,ZS),e(ZS,Wco),e(m_,Qco),e(F,Hco),e(F,g_),e(g_,wZ),e(wZ,Uco),e(g_,Jco),e(g_,eP),e(eP,Yco),e(g_,Kco),e(F,Zco),e(F,h_),e(h_,AZ),e(AZ,efo),e(h_,ofo),e(h_,oP),e(oP,rfo),e(h_,tfo),e(F,afo),e(F,p_),e(p_,LZ),e(LZ,nfo),e(p_,sfo),e(p_,rP),e(rP,lfo),e(p_,ifo),e(je,dfo),e(je,__),e(__,cfo),e(__,BZ),e(BZ,ffo),e(__,mfo),e(__,xZ),e(xZ,gfo),e(je,hfo),e(je,kZ),e(kZ,pfo),e(je,_fo),g(IE,je,null),b(c,Sxe,u),b(c,ed,u),e(ed,u_),e(u_,RZ),g(jE,RZ,null),e(ed,ufo),e(ed,SZ),e(SZ,bfo),b(c,Pxe,u),b(c,Yo,u),g(DE,Yo,null),e(Yo,vfo),e(Yo,od),e(od,Tfo),e(od,PZ),e(PZ,Ffo),e(od,Cfo),e(od,$Z),e($Z,Mfo),e(od,Efo),e(Yo,yfo),e(Yo,NE),e(NE,wfo),e(NE,IZ),e(IZ,Afo),e(NE,Lfo),e(Yo,Bfo),e(Yo,zr),g(qE,zr,null),e(zr,xfo),e(zr,jZ),e(jZ,kfo),e(zr,Rfo),e(zr,rd),e(rd,Sfo),e(rd,DZ),e(DZ,Pfo),e(rd,$fo),e(rd,NZ),e(NZ,Ifo),e(rd,jfo),e(zr,Dfo),e(zr,qZ),e(qZ,Nfo),e(zr,qfo),g(GE,zr,null),e(Yo,Gfo),e(Yo,De),g(OE,De,null),e(De,Ofo),e(De,GZ),e(GZ,Xfo),e(De,Vfo),e(De,za),e(za,zfo),e(za,OZ),e(OZ,Wfo),e(za,Qfo),e(za,XZ),e(XZ,Hfo),e(za,Ufo),e(za,VZ),e(VZ,Jfo),e(za,Yfo),e(De,Kfo),e(De,k),e(k,b_),e(b_,zZ),e(zZ,Zfo),e(b_,emo),e(b_,tP),e(tP,omo),e(b_,rmo),e(k,tmo),e(k,v_),e(v_,WZ),e(WZ,amo),e(v_,nmo),e(v_,aP),e(aP,smo),e(v_,lmo),e(k,imo),e(k,T_),e(T_,QZ),e(QZ,dmo),e(T_,cmo),e(T_,nP),e(nP,fmo),e(T_,mmo),e(k,gmo),e(k,F_),e(F_,HZ),e(HZ,hmo),e(F_,pmo),e(F_,sP),e(sP,_mo),e(F_,umo),e(k,bmo),e(k,C_),e(C_,UZ),e(UZ,vmo),e(C_,Tmo),e(C_,lP),e(lP,Fmo),e(C_,Cmo),e(k,Mmo),e(k,M_),e(M_,JZ),e(JZ,Emo),e(M_,ymo),e(M_,iP),e(iP,wmo),e(M_,Amo),e(k,Lmo),e(k,E_),e(E_,YZ),e(YZ,Bmo),e(E_,xmo),e(E_,dP),e(dP,kmo),e(E_,Rmo),e(k,Smo),e(k,y_),e(y_,KZ),e(KZ,Pmo),e(y_,$mo),e(y_,cP),e(cP,Imo),e(y_,jmo),e(k,Dmo),e(k,w_),e(w_,ZZ),e(ZZ,Nmo),e(w_,qmo),e(w_,fP),e(fP,Gmo),e(w_,Omo),e(k,Xmo),e(k,A_),e(A_,eee),e(eee,Vmo),e(A_,zmo),e(A_,mP),e(mP,Wmo),e(A_,Qmo),e(k,Hmo),e(k,L_),e(L_,oee),e(oee,Umo),e(L_,Jmo),e(L_,gP),e(gP,Ymo),e(L_,Kmo),e(k,Zmo),e(k,B_),e(B_,ree),e(ree,ego),e(B_,ogo),e(B_,hP),e(hP,rgo),e(B_,tgo),e(k,ago),e(k,x_),e(x_,tee),e(tee,ngo),e(x_,sgo),e(x_,pP),e(pP,lgo),e(x_,igo),e(k,dgo),e(k,k_),e(k_,aee),e(aee,cgo),e(k_,fgo),e(k_,_P),e(_P,mgo),e(k_,ggo),e(k,hgo),e(k,R_),e(R_,nee),e(nee,pgo),e(R_,_go),e(R_,uP),e(uP,ugo),e(R_,bgo),e(k,vgo),e(k,S_),e(S_,see),e(see,Tgo),e(S_,Fgo),e(S_,bP),e(bP,Cgo),e(S_,Mgo),e(k,Ego),e(k,P_),e(P_,lee),e(lee,ygo),e(P_,wgo),e(P_,vP),e(vP,Ago),e(P_,Lgo),e(k,Bgo),e(k,$_),e($_,iee),e(iee,xgo),e($_,kgo),e($_,TP),e(TP,Rgo),e($_,Sgo),e(k,Pgo),e(k,I_),e(I_,dee),e(dee,$go),e(I_,Igo),e(I_,FP),e(FP,jgo),e(I_,Dgo),e(k,Ngo),e(k,j_),e(j_,cee),e(cee,qgo),e(j_,Ggo),e(j_,CP),e(CP,Ogo),e(j_,Xgo),e(k,Vgo),e(k,D_),e(D_,fee),e(fee,zgo),e(D_,Wgo),e(D_,MP),e(MP,Qgo),e(D_,Hgo),e(k,Ugo),e(k,N_),e(N_,mee),e(mee,Jgo),e(N_,Ygo),e(N_,EP),e(EP,Kgo),e(N_,Zgo),e(k,eho),e(k,q_),e(q_,gee),e(gee,oho),e(q_,rho),e(q_,yP),e(yP,tho),e(q_,aho),e(k,nho),e(k,G_),e(G_,hee),e(hee,sho),e(G_,lho),e(G_,wP),e(wP,iho),e(G_,dho),e(k,cho),e(k,O_),e(O_,pee),e(pee,fho),e(O_,mho),e(O_,AP),e(AP,gho),e(O_,hho),e(k,pho),e(k,X_),e(X_,_ee),e(_ee,_ho),e(X_,uho),e(X_,LP),e(LP,bho),e(X_,vho),e(k,Tho),e(k,V_),e(V_,uee),e(uee,Fho),e(V_,Cho),e(V_,BP),e(BP,Mho),e(V_,Eho),e(k,yho),e(k,z_),e(z_,bee),e(bee,who),e(z_,Aho),e(z_,xP),e(xP,Lho),e(z_,Bho),e(k,xho),e(k,W_),e(W_,vee),e(vee,kho),e(W_,Rho),e(W_,kP),e(kP,Sho),e(W_,Pho),e(k,$ho),e(k,Q_),e(Q_,Tee),e(Tee,Iho),e(Q_,jho),e(Q_,RP),e(RP,Dho),e(Q_,Nho),e(k,qho),e(k,H_),e(H_,Fee),e(Fee,Gho),e(H_,Oho),e(H_,SP),e(SP,Xho),e(H_,Vho),e(k,zho),e(k,U_),e(U_,Cee),e(Cee,Who),e(U_,Qho),e(U_,PP),e(PP,Hho),e(U_,Uho),e(k,Jho),e(k,J_),e(J_,Mee),e(Mee,Yho),e(J_,Kho),e(J_,$P),e($P,Zho),e(J_,epo),e(k,opo),e(k,Y_),e(Y_,Eee),e(Eee,rpo),e(Y_,tpo),e(Y_,IP),e(IP,apo),e(Y_,npo),e(k,spo),e(k,K_),e(K_,yee),e(yee,lpo),e(K_,ipo),e(K_,jP),e(jP,dpo),e(K_,cpo),e(k,fpo),e(k,Z_),e(Z_,wee),e(wee,mpo),e(Z_,gpo),e(Z_,DP),e(DP,hpo),e(Z_,ppo),e(k,_po),e(k,eu),e(eu,Aee),e(Aee,upo),e(eu,bpo),e(eu,NP),e(NP,vpo),e(eu,Tpo),e(k,Fpo),e(k,ou),e(ou,Lee),e(Lee,Cpo),e(ou,Mpo),e(ou,qP),e(qP,Epo),e(ou,ypo),e(k,wpo),e(k,ru),e(ru,Bee),e(Bee,Apo),e(ru,Lpo),e(ru,GP),e(GP,Bpo),e(ru,xpo),e(De,kpo),e(De,tu),e(tu,Rpo),e(tu,xee),e(xee,Spo),e(tu,Ppo),e(tu,kee),e(kee,$po),e(De,Ipo),e(De,Ree),e(Ree,jpo),e(De,Dpo),g(XE,De,null),b(c,$xe,u),b(c,td,u),e(td,au),e(au,See),g(VE,See,null),e(td,Npo),e(td,Pee),e(Pee,qpo),b(c,Ixe,u),b(c,Ko,u),g(zE,Ko,null),e(Ko,Gpo),e(Ko,ad),e(ad,Opo),e(ad,$ee),e($ee,Xpo),e(ad,Vpo),e(ad,Iee),e(Iee,zpo),e(ad,Wpo),e(Ko,Qpo),e(Ko,WE),e(WE,Hpo),e(WE,jee),e(jee,Upo),e(WE,Jpo),e(Ko,Ypo),e(Ko,Wr),g(QE,Wr,null),e(Wr,Kpo),e(Wr,Dee),e(Dee,Zpo),e(Wr,e_o),e(Wr,nd),e(nd,o_o),e(nd,Nee),e(Nee,r_o),e(nd,t_o),e(nd,qee),e(qee,a_o),e(nd,n_o),e(Wr,s_o),e(Wr,Gee),e(Gee,l_o),e(Wr,i_o),g(HE,Wr,null),e(Ko,d_o),e(Ko,Ne),g(UE,Ne,null),e(Ne,c_o),e(Ne,Oee),e(Oee,f_o),e(Ne,m_o),e(Ne,Wa),e(Wa,g_o),e(Wa,Xee),e(Xee,h_o),e(Wa,p_o),e(Wa,Vee),e(Vee,__o),e(Wa,u_o),e(Wa,zee),e(zee,b_o),e(Wa,v_o),e(Ne,T_o),e(Ne,$),e($,nu),e(nu,Wee),e(Wee,F_o),e(nu,C_o),e(nu,OP),e(OP,M_o),e(nu,E_o),e($,y_o),e($,su),e(su,Qee),e(Qee,w_o),e(su,A_o),e(su,XP),e(XP,L_o),e(su,B_o),e($,x_o),e($,lu),e(lu,Hee),e(Hee,k_o),e(lu,R_o),e(lu,VP),e(VP,S_o),e(lu,P_o),e($,$_o),e($,iu),e(iu,Uee),e(Uee,I_o),e(iu,j_o),e(iu,zP),e(zP,D_o),e(iu,N_o),e($,q_o),e($,du),e(du,Jee),e(Jee,G_o),e(du,O_o),e(du,WP),e(WP,X_o),e(du,V_o),e($,z_o),e($,cu),e(cu,Yee),e(Yee,W_o),e(cu,Q_o),e(cu,QP),e(QP,H_o),e(cu,U_o),e($,J_o),e($,fu),e(fu,Kee),e(Kee,Y_o),e(fu,K_o),e(fu,HP),e(HP,Z_o),e(fu,euo),e($,ouo),e($,mu),e(mu,Zee),e(Zee,ruo),e(mu,tuo),e(mu,UP),e(UP,auo),e(mu,nuo),e($,suo),e($,gu),e(gu,eoe),e(eoe,luo),e(gu,iuo),e(gu,JP),e(JP,duo),e(gu,cuo),e($,fuo),e($,hu),e(hu,ooe),e(ooe,muo),e(hu,guo),e(hu,YP),e(YP,huo),e(hu,puo),e($,_uo),e($,pu),e(pu,roe),e(roe,uuo),e(pu,buo),e(pu,KP),e(KP,vuo),e(pu,Tuo),e($,Fuo),e($,_u),e(_u,toe),e(toe,Cuo),e(_u,Muo),e(_u,ZP),e(ZP,Euo),e(_u,yuo),e($,wuo),e($,uu),e(uu,aoe),e(aoe,Auo),e(uu,Luo),e(uu,e$),e(e$,Buo),e(uu,xuo),e($,kuo),e($,bu),e(bu,noe),e(noe,Ruo),e(bu,Suo),e(bu,o$),e(o$,Puo),e(bu,$uo),e($,Iuo),e($,vu),e(vu,soe),e(soe,juo),e(vu,Duo),e(vu,r$),e(r$,Nuo),e(vu,quo),e($,Guo),e($,Tu),e(Tu,loe),e(loe,Ouo),e(Tu,Xuo),e(Tu,t$),e(t$,Vuo),e(Tu,zuo),e($,Wuo),e($,Fu),e(Fu,ioe),e(ioe,Quo),e(Fu,Huo),e(Fu,a$),e(a$,Uuo),e(Fu,Juo),e($,Yuo),e($,Cu),e(Cu,doe),e(doe,Kuo),e(Cu,Zuo),e(Cu,n$),e(n$,e2o),e(Cu,o2o),e($,r2o),e($,Mu),e(Mu,coe),e(coe,t2o),e(Mu,a2o),e(Mu,s$),e(s$,n2o),e(Mu,s2o),e($,l2o),e($,Eu),e(Eu,foe),e(foe,i2o),e(Eu,d2o),e(Eu,l$),e(l$,c2o),e(Eu,f2o),e($,m2o),e($,yu),e(yu,moe),e(moe,g2o),e(yu,h2o),e(yu,i$),e(i$,p2o),e(yu,_2o),e($,u2o),e($,wu),e(wu,goe),e(goe,b2o),e(wu,v2o),e(wu,d$),e(d$,T2o),e(wu,F2o),e($,C2o),e($,Au),e(Au,hoe),e(hoe,M2o),e(Au,E2o),e(Au,c$),e(c$,y2o),e(Au,w2o),e($,A2o),e($,Lu),e(Lu,poe),e(poe,L2o),e(Lu,B2o),e(Lu,f$),e(f$,x2o),e(Lu,k2o),e($,R2o),e($,Bu),e(Bu,_oe),e(_oe,S2o),e(Bu,P2o),e(Bu,m$),e(m$,$2o),e(Bu,I2o),e($,j2o),e($,xu),e(xu,uoe),e(uoe,D2o),e(xu,N2o),e(xu,g$),e(g$,q2o),e(xu,G2o),e($,O2o),e($,ku),e(ku,boe),e(boe,X2o),e(ku,V2o),e(ku,h$),e(h$,z2o),e(ku,W2o),e($,Q2o),e($,Ru),e(Ru,voe),e(voe,H2o),e(Ru,U2o),e(Ru,p$),e(p$,J2o),e(Ru,Y2o),e($,K2o),e($,Su),e(Su,Toe),e(Toe,Z2o),e(Su,e1o),e(Su,_$),e(_$,o1o),e(Su,r1o),e($,t1o),e($,Pu),e(Pu,Foe),e(Foe,a1o),e(Pu,n1o),e(Pu,u$),e(u$,s1o),e(Pu,l1o),e($,i1o),e($,$u),e($u,Coe),e(Coe,d1o),e($u,c1o),e($u,b$),e(b$,f1o),e($u,m1o),e($,g1o),e($,Iu),e(Iu,Moe),e(Moe,h1o),e(Iu,p1o),e(Iu,v$),e(v$,_1o),e(Iu,u1o),e($,b1o),e($,ju),e(ju,Eoe),e(Eoe,v1o),e(ju,T1o),e(ju,T$),e(T$,F1o),e(ju,C1o),e($,M1o),e($,Du),e(Du,yoe),e(yoe,E1o),e(Du,y1o),e(Du,F$),e(F$,w1o),e(Du,A1o),e($,L1o),e($,Nu),e(Nu,woe),e(woe,B1o),e(Nu,x1o),e(Nu,C$),e(C$,k1o),e(Nu,R1o),e(Ne,S1o),e(Ne,qu),e(qu,P1o),e(qu,Aoe),e(Aoe,$1o),e(qu,I1o),e(qu,Loe),e(Loe,j1o),e(Ne,D1o),e(Ne,Boe),e(Boe,N1o),e(Ne,q1o),g(JE,Ne,null),b(c,jxe,u),b(c,sd,u),e(sd,Gu),e(Gu,xoe),g(YE,xoe,null),e(sd,G1o),e(sd,koe),e(koe,O1o),b(c,Dxe,u),b(c,Zo,u),g(KE,Zo,null),e(Zo,X1o),e(Zo,ld),e(ld,V1o),e(ld,Roe),e(Roe,z1o),e(ld,W1o),e(ld,Soe),e(Soe,Q1o),e(ld,H1o),e(Zo,U1o),e(Zo,ZE),e(ZE,J1o),e(ZE,Poe),e(Poe,Y1o),e(ZE,K1o),e(Zo,Z1o),e(Zo,Qr),g(ey,Qr,null),e(Qr,ebo),e(Qr,$oe),e($oe,obo),e(Qr,rbo),e(Qr,id),e(id,tbo),e(id,Ioe),e(Ioe,abo),e(id,nbo),e(id,joe),e(joe,sbo),e(id,lbo),e(Qr,ibo),e(Qr,Doe),e(Doe,dbo),e(Qr,cbo),g(oy,Qr,null),e(Zo,fbo),e(Zo,qe),g(ry,qe,null),e(qe,mbo),e(qe,Noe),e(Noe,gbo),e(qe,hbo),e(qe,Qa),e(Qa,pbo),e(Qa,qoe),e(qoe,_bo),e(Qa,ubo),e(Qa,Goe),e(Goe,bbo),e(Qa,vbo),e(Qa,Ooe),e(Ooe,Tbo),e(Qa,Fbo),e(qe,Cbo),e(qe,I),e(I,Ou),e(Ou,Xoe),e(Xoe,Mbo),e(Ou,Ebo),e(Ou,M$),e(M$,ybo),e(Ou,wbo),e(I,Abo),e(I,Xu),e(Xu,Voe),e(Voe,Lbo),e(Xu,Bbo),e(Xu,E$),e(E$,xbo),e(Xu,kbo),e(I,Rbo),e(I,Vu),e(Vu,zoe),e(zoe,Sbo),e(Vu,Pbo),e(Vu,y$),e(y$,$bo),e(Vu,Ibo),e(I,jbo),e(I,zu),e(zu,Woe),e(Woe,Dbo),e(zu,Nbo),e(zu,w$),e(w$,qbo),e(zu,Gbo),e(I,Obo),e(I,Wu),e(Wu,Qoe),e(Qoe,Xbo),e(Wu,Vbo),e(Wu,A$),e(A$,zbo),e(Wu,Wbo),e(I,Qbo),e(I,Qu),e(Qu,Hoe),e(Hoe,Hbo),e(Qu,Ubo),e(Qu,L$),e(L$,Jbo),e(Qu,Ybo),e(I,Kbo),e(I,Hu),e(Hu,Uoe),e(Uoe,Zbo),e(Hu,e3o),e(Hu,B$),e(B$,o3o),e(Hu,r3o),e(I,t3o),e(I,Uu),e(Uu,Joe),e(Joe,a3o),e(Uu,n3o),e(Uu,x$),e(x$,s3o),e(Uu,l3o),e(I,i3o),e(I,Ju),e(Ju,Yoe),e(Yoe,d3o),e(Ju,c3o),e(Ju,k$),e(k$,f3o),e(Ju,m3o),e(I,g3o),e(I,Yu),e(Yu,Koe),e(Koe,h3o),e(Yu,p3o),e(Yu,R$),e(R$,_3o),e(Yu,u3o),e(I,b3o),e(I,Ku),e(Ku,Zoe),e(Zoe,v3o),e(Ku,T3o),e(Ku,S$),e(S$,F3o),e(Ku,C3o),e(I,M3o),e(I,Zu),e(Zu,ere),e(ere,E3o),e(Zu,y3o),e(Zu,P$),e(P$,w3o),e(Zu,A3o),e(I,L3o),e(I,e2),e(e2,ore),e(ore,B3o),e(e2,x3o),e(e2,$$),e($$,k3o),e(e2,R3o),e(I,S3o),e(I,o2),e(o2,rre),e(rre,P3o),e(o2,$3o),e(o2,I$),e(I$,I3o),e(o2,j3o),e(I,D3o),e(I,r2),e(r2,tre),e(tre,N3o),e(r2,q3o),e(r2,j$),e(j$,G3o),e(r2,O3o),e(I,X3o),e(I,t2),e(t2,are),e(are,V3o),e(t2,z3o),e(t2,D$),e(D$,W3o),e(t2,Q3o),e(I,H3o),e(I,a2),e(a2,nre),e(nre,U3o),e(a2,J3o),e(a2,N$),e(N$,Y3o),e(a2,K3o),e(I,Z3o),e(I,n2),e(n2,sre),e(sre,e5o),e(n2,o5o),e(n2,q$),e(q$,r5o),e(n2,t5o),e(I,a5o),e(I,s2),e(s2,lre),e(lre,n5o),e(s2,s5o),e(s2,G$),e(G$,l5o),e(s2,i5o),e(I,d5o),e(I,l2),e(l2,ire),e(ire,c5o),e(l2,f5o),e(l2,O$),e(O$,m5o),e(l2,g5o),e(I,h5o),e(I,i2),e(i2,dre),e(dre,p5o),e(i2,_5o),e(i2,X$),e(X$,u5o),e(i2,b5o),e(I,v5o),e(I,d2),e(d2,cre),e(cre,T5o),e(d2,F5o),e(d2,V$),e(V$,C5o),e(d2,M5o),e(I,E5o),e(I,c2),e(c2,fre),e(fre,y5o),e(c2,w5o),e(c2,z$),e(z$,A5o),e(c2,L5o),e(I,B5o),e(I,f2),e(f2,mre),e(mre,x5o),e(f2,k5o),e(f2,W$),e(W$,R5o),e(f2,S5o),e(I,P5o),e(I,m2),e(m2,gre),e(gre,$5o),e(m2,I5o),e(m2,Q$),e(Q$,j5o),e(m2,D5o),e(I,N5o),e(I,g2),e(g2,hre),e(hre,q5o),e(g2,G5o),e(g2,H$),e(H$,O5o),e(g2,X5o),e(I,V5o),e(I,h2),e(h2,pre),e(pre,z5o),e(h2,W5o),e(h2,U$),e(U$,Q5o),e(h2,H5o),e(I,U5o),e(I,p2),e(p2,_re),e(_re,J5o),e(p2,Y5o),e(p2,J$),e(J$,K5o),e(p2,Z5o),e(I,evo),e(I,_2),e(_2,ure),e(ure,ovo),e(_2,rvo),e(_2,Y$),e(Y$,tvo),e(_2,avo),e(I,nvo),e(I,u2),e(u2,bre),e(bre,svo),e(u2,lvo),e(u2,K$),e(K$,ivo),e(u2,dvo),e(I,cvo),e(I,b2),e(b2,vre),e(vre,fvo),e(b2,mvo),e(b2,Tre),e(Tre,gvo),e(b2,hvo),e(I,pvo),e(I,v2),e(v2,Fre),e(Fre,_vo),e(v2,uvo),e(v2,Z$),e(Z$,bvo),e(v2,vvo),e(I,Tvo),e(I,T2),e(T2,Cre),e(Cre,Fvo),e(T2,Cvo),e(T2,eI),e(eI,Mvo),e(T2,Evo),e(I,yvo),e(I,F2),e(F2,Mre),e(Mre,wvo),e(F2,Avo),e(F2,oI),e(oI,Lvo),e(F2,Bvo),e(I,xvo),e(I,C2),e(C2,Ere),e(Ere,kvo),e(C2,Rvo),e(C2,rI),e(rI,Svo),e(C2,Pvo),e(qe,$vo),e(qe,M2),e(M2,Ivo),e(M2,yre),e(yre,jvo),e(M2,Dvo),e(M2,wre),e(wre,Nvo),e(qe,qvo),e(qe,Are),e(Are,Gvo),e(qe,Ovo),g(ty,qe,null),b(c,Nxe,u),b(c,dd,u),e(dd,E2),e(E2,Lre),g(ay,Lre,null),e(dd,Xvo),e(dd,Bre),e(Bre,Vvo),b(c,qxe,u),b(c,er,u),g(ny,er,null),e(er,zvo),e(er,cd),e(cd,Wvo),e(cd,xre),e(xre,Qvo),e(cd,Hvo),e(cd,kre),e(kre,Uvo),e(cd,Jvo),e(er,Yvo),e(er,sy),e(sy,Kvo),e(sy,Rre),e(Rre,Zvo),e(sy,e6o),e(er,o6o),e(er,Hr),g(ly,Hr,null),e(Hr,r6o),e(Hr,Sre),e(Sre,t6o),e(Hr,a6o),e(Hr,fd),e(fd,n6o),e(fd,Pre),e(Pre,s6o),e(fd,l6o),e(fd,$re),e($re,i6o),e(fd,d6o),e(Hr,c6o),e(Hr,Ire),e(Ire,f6o),e(Hr,m6o),g(iy,Hr,null),e(er,g6o),e(er,Ge),g(dy,Ge,null),e(Ge,h6o),e(Ge,jre),e(jre,p6o),e(Ge,_6o),e(Ge,Ha),e(Ha,u6o),e(Ha,Dre),e(Dre,b6o),e(Ha,v6o),e(Ha,Nre),e(Nre,T6o),e(Ha,F6o),e(Ha,qre),e(qre,C6o),e(Ha,M6o),e(Ge,E6o),e(Ge,ne),e(ne,y2),e(y2,Gre),e(Gre,y6o),e(y2,w6o),e(y2,tI),e(tI,A6o),e(y2,L6o),e(ne,B6o),e(ne,w2),e(w2,Ore),e(Ore,x6o),e(w2,k6o),e(w2,aI),e(aI,R6o),e(w2,S6o),e(ne,P6o),e(ne,A2),e(A2,Xre),e(Xre,$6o),e(A2,I6o),e(A2,nI),e(nI,j6o),e(A2,D6o),e(ne,N6o),e(ne,L2),e(L2,Vre),e(Vre,q6o),e(L2,G6o),e(L2,sI),e(sI,O6o),e(L2,X6o),e(ne,V6o),e(ne,B2),e(B2,zre),e(zre,z6o),e(B2,W6o),e(B2,lI),e(lI,Q6o),e(B2,H6o),e(ne,U6o),e(ne,x2),e(x2,Wre),e(Wre,J6o),e(x2,Y6o),e(x2,iI),e(iI,K6o),e(x2,Z6o),e(ne,eTo),e(ne,k2),e(k2,Qre),e(Qre,oTo),e(k2,rTo),e(k2,dI),e(dI,tTo),e(k2,aTo),e(ne,nTo),e(ne,R2),e(R2,Hre),e(Hre,sTo),e(R2,lTo),e(R2,cI),e(cI,iTo),e(R2,dTo),e(ne,cTo),e(ne,S2),e(S2,Ure),e(Ure,fTo),e(S2,mTo),e(S2,fI),e(fI,gTo),e(S2,hTo),e(ne,pTo),e(ne,P2),e(P2,Jre),e(Jre,_To),e(P2,uTo),e(P2,mI),e(mI,bTo),e(P2,vTo),e(ne,TTo),e(ne,$2),e($2,Yre),e(Yre,FTo),e($2,CTo),e($2,gI),e(gI,MTo),e($2,ETo),e(ne,yTo),e(ne,I2),e(I2,Kre),e(Kre,wTo),e(I2,ATo),e(I2,hI),e(hI,LTo),e(I2,BTo),e(ne,xTo),e(ne,j2),e(j2,Zre),e(Zre,kTo),e(j2,RTo),e(j2,pI),e(pI,STo),e(j2,PTo),e(ne,$To),e(ne,D2),e(D2,ete),e(ete,ITo),e(D2,jTo),e(D2,_I),e(_I,DTo),e(D2,NTo),e(ne,qTo),e(ne,N2),e(N2,ote),e(ote,GTo),e(N2,OTo),e(N2,uI),e(uI,XTo),e(N2,VTo),e(ne,zTo),e(ne,q2),e(q2,rte),e(rte,WTo),e(q2,QTo),e(q2,bI),e(bI,HTo),e(q2,UTo),e(Ge,JTo),e(Ge,G2),e(G2,YTo),e(G2,tte),e(tte,KTo),e(G2,ZTo),e(G2,ate),e(ate,eFo),e(Ge,oFo),e(Ge,nte),e(nte,rFo),e(Ge,tFo),g(cy,Ge,null),b(c,Gxe,u),b(c,md,u),e(md,O2),e(O2,ste),g(fy,ste,null),e(md,aFo),e(md,lte),e(lte,nFo),b(c,Oxe,u),b(c,or,u),g(my,or,null),e(or,sFo),e(or,gd),e(gd,lFo),e(gd,ite),e(ite,iFo),e(gd,dFo),e(gd,dte),e(dte,cFo),e(gd,fFo),e(or,mFo),e(or,gy),e(gy,gFo),e(gy,cte),e(cte,hFo),e(gy,pFo),e(or,_Fo),e(or,Ur),g(hy,Ur,null),e(Ur,uFo),e(Ur,fte),e(fte,bFo),e(Ur,vFo),e(Ur,hd),e(hd,TFo),e(hd,mte),e(mte,FFo),e(hd,CFo),e(hd,gte),e(gte,MFo),e(hd,EFo),e(Ur,yFo),e(Ur,hte),e(hte,wFo),e(Ur,AFo),g(py,Ur,null),e(or,LFo),e(or,Oe),g(_y,Oe,null),e(Oe,BFo),e(Oe,pte),e(pte,xFo),e(Oe,kFo),e(Oe,Ua),e(Ua,RFo),e(Ua,_te),e(_te,SFo),e(Ua,PFo),e(Ua,ute),e(ute,$Fo),e(Ua,IFo),e(Ua,bte),e(bte,jFo),e(Ua,DFo),e(Oe,NFo),e(Oe,A),e(A,X2),e(X2,vte),e(vte,qFo),e(X2,GFo),e(X2,vI),e(vI,OFo),e(X2,XFo),e(A,VFo),e(A,V2),e(V2,Tte),e(Tte,zFo),e(V2,WFo),e(V2,TI),e(TI,QFo),e(V2,HFo),e(A,UFo),e(A,z2),e(z2,Fte),e(Fte,JFo),e(z2,YFo),e(z2,FI),e(FI,KFo),e(z2,ZFo),e(A,eCo),e(A,W2),e(W2,Cte),e(Cte,oCo),e(W2,rCo),e(W2,CI),e(CI,tCo),e(W2,aCo),e(A,nCo),e(A,Q2),e(Q2,Mte),e(Mte,sCo),e(Q2,lCo),e(Q2,MI),e(MI,iCo),e(Q2,dCo),e(A,cCo),e(A,H2),e(H2,Ete),e(Ete,fCo),e(H2,mCo),e(H2,EI),e(EI,gCo),e(H2,hCo),e(A,pCo),e(A,U2),e(U2,yte),e(yte,_Co),e(U2,uCo),e(U2,yI),e(yI,bCo),e(U2,vCo),e(A,TCo),e(A,J2),e(J2,wte),e(wte,FCo),e(J2,CCo),e(J2,wI),e(wI,MCo),e(J2,ECo),e(A,yCo),e(A,Y2),e(Y2,Ate),e(Ate,wCo),e(Y2,ACo),e(Y2,AI),e(AI,LCo),e(Y2,BCo),e(A,xCo),e(A,K2),e(K2,Lte),e(Lte,kCo),e(K2,RCo),e(K2,LI),e(LI,SCo),e(K2,PCo),e(A,$Co),e(A,Z2),e(Z2,Bte),e(Bte,ICo),e(Z2,jCo),e(Z2,BI),e(BI,DCo),e(Z2,NCo),e(A,qCo),e(A,e1),e(e1,xte),e(xte,GCo),e(e1,OCo),e(e1,xI),e(xI,XCo),e(e1,VCo),e(A,zCo),e(A,o1),e(o1,kte),e(kte,WCo),e(o1,QCo),e(o1,kI),e(kI,HCo),e(o1,UCo),e(A,JCo),e(A,r1),e(r1,Rte),e(Rte,YCo),e(r1,KCo),e(r1,RI),e(RI,ZCo),e(r1,eMo),e(A,oMo),e(A,t1),e(t1,Ste),e(Ste,rMo),e(t1,tMo),e(t1,SI),e(SI,aMo),e(t1,nMo),e(A,sMo),e(A,a1),e(a1,Pte),e(Pte,lMo),e(a1,iMo),e(a1,PI),e(PI,dMo),e(a1,cMo),e(A,fMo),e(A,n1),e(n1,$te),e($te,mMo),e(n1,gMo),e(n1,$I),e($I,hMo),e(n1,pMo),e(A,_Mo),e(A,s1),e(s1,Ite),e(Ite,uMo),e(s1,bMo),e(s1,II),e(II,vMo),e(s1,TMo),e(A,FMo),e(A,l1),e(l1,jte),e(jte,CMo),e(l1,MMo),e(l1,jI),e(jI,EMo),e(l1,yMo),e(A,wMo),e(A,i1),e(i1,Dte),e(Dte,AMo),e(i1,LMo),e(i1,DI),e(DI,BMo),e(i1,xMo),e(A,kMo),e(A,d1),e(d1,Nte),e(Nte,RMo),e(d1,SMo),e(d1,NI),e(NI,PMo),e(d1,$Mo),e(A,IMo),e(A,c1),e(c1,qte),e(qte,jMo),e(c1,DMo),e(c1,qI),e(qI,NMo),e(c1,qMo),e(A,GMo),e(A,f1),e(f1,Gte),e(Gte,OMo),e(f1,XMo),e(f1,GI),e(GI,VMo),e(f1,zMo),e(A,WMo),e(A,m1),e(m1,Ote),e(Ote,QMo),e(m1,HMo),e(m1,OI),e(OI,UMo),e(m1,JMo),e(A,YMo),e(A,g1),e(g1,Xte),e(Xte,KMo),e(g1,ZMo),e(g1,XI),e(XI,e4o),e(g1,o4o),e(A,r4o),e(A,h1),e(h1,Vte),e(Vte,t4o),e(h1,a4o),e(h1,VI),e(VI,n4o),e(h1,s4o),e(A,l4o),e(A,p1),e(p1,zte),e(zte,i4o),e(p1,d4o),e(p1,zI),e(zI,c4o),e(p1,f4o),e(A,m4o),e(A,_1),e(_1,Wte),e(Wte,g4o),e(_1,h4o),e(_1,WI),e(WI,p4o),e(_1,_4o),e(A,u4o),e(A,u1),e(u1,Qte),e(Qte,b4o),e(u1,v4o),e(u1,QI),e(QI,T4o),e(u1,F4o),e(A,C4o),e(A,b1),e(b1,Hte),e(Hte,M4o),e(b1,E4o),e(b1,HI),e(HI,y4o),e(b1,w4o),e(A,A4o),e(A,v1),e(v1,Ute),e(Ute,L4o),e(v1,B4o),e(v1,UI),e(UI,x4o),e(v1,k4o),e(A,R4o),e(A,T1),e(T1,Jte),e(Jte,S4o),e(T1,P4o),e(T1,JI),e(JI,$4o),e(T1,I4o),e(A,j4o),e(A,F1),e(F1,Yte),e(Yte,D4o),e(F1,N4o),e(F1,YI),e(YI,q4o),e(F1,G4o),e(A,O4o),e(A,C1),e(C1,Kte),e(Kte,X4o),e(C1,V4o),e(C1,KI),e(KI,z4o),e(C1,W4o),e(A,Q4o),e(A,M1),e(M1,Zte),e(Zte,H4o),e(M1,U4o),e(M1,ZI),e(ZI,J4o),e(M1,Y4o),e(A,K4o),e(A,E1),e(E1,eae),e(eae,Z4o),e(E1,eEo),e(E1,ej),e(ej,oEo),e(E1,rEo),e(A,tEo),e(A,y1),e(y1,oae),e(oae,aEo),e(y1,nEo),e(y1,oj),e(oj,sEo),e(y1,lEo),e(A,iEo),e(A,w1),e(w1,rae),e(rae,dEo),e(w1,cEo),e(w1,rj),e(rj,fEo),e(w1,mEo),e(A,gEo),e(A,A1),e(A1,tae),e(tae,hEo),e(A1,pEo),e(A1,tj),e(tj,_Eo),e(A1,uEo),e(A,bEo),e(A,L1),e(L1,aae),e(aae,vEo),e(L1,TEo),e(L1,aj),e(aj,FEo),e(L1,CEo),e(A,MEo),e(A,B1),e(B1,nae),e(nae,EEo),e(B1,yEo),e(B1,nj),e(nj,wEo),e(B1,AEo),e(A,LEo),e(A,x1),e(x1,sae),e(sae,BEo),e(x1,xEo),e(x1,sj),e(sj,kEo),e(x1,REo),e(A,SEo),e(A,k1),e(k1,lae),e(lae,PEo),e(k1,$Eo),e(k1,lj),e(lj,IEo),e(k1,jEo),e(A,DEo),e(A,R1),e(R1,iae),e(iae,NEo),e(R1,qEo),e(R1,ij),e(ij,GEo),e(R1,OEo),e(A,XEo),e(A,S1),e(S1,dae),e(dae,VEo),e(S1,zEo),e(S1,dj),e(dj,WEo),e(S1,QEo),e(A,HEo),e(A,P1),e(P1,cae),e(cae,UEo),e(P1,JEo),e(P1,cj),e(cj,YEo),e(P1,KEo),e(Oe,ZEo),e(Oe,$1),e($1,eyo),e($1,fae),e(fae,oyo),e($1,ryo),e($1,mae),e(mae,tyo),e(Oe,ayo),e(Oe,gae),e(gae,nyo),e(Oe,syo),g(uy,Oe,null),b(c,Xxe,u),b(c,pd,u),e(pd,I1),e(I1,hae),g(by,hae,null),e(pd,lyo),e(pd,pae),e(pae,iyo),b(c,Vxe,u),b(c,rr,u),g(vy,rr,null),e(rr,dyo),e(rr,_d),e(_d,cyo),e(_d,_ae),e(_ae,fyo),e(_d,myo),e(_d,uae),e(uae,gyo),e(_d,hyo),e(rr,pyo),e(rr,Ty),e(Ty,_yo),e(Ty,bae),e(bae,uyo),e(Ty,byo),e(rr,vyo),e(rr,Jr),g(Fy,Jr,null),e(Jr,Tyo),e(Jr,vae),e(vae,Fyo),e(Jr,Cyo),e(Jr,ud),e(ud,Myo),e(ud,Tae),e(Tae,Eyo),e(ud,yyo),e(ud,Fae),e(Fae,wyo),e(ud,Ayo),e(Jr,Lyo),e(Jr,Cae),e(Cae,Byo),e(Jr,xyo),g(Cy,Jr,null),e(rr,kyo),e(rr,Xe),g(My,Xe,null),e(Xe,Ryo),e(Xe,Mae),e(Mae,Syo),e(Xe,Pyo),e(Xe,Ja),e(Ja,$yo),e(Ja,Eae),e(Eae,Iyo),e(Ja,jyo),e(Ja,yae),e(yae,Dyo),e(Ja,Nyo),e(Ja,wae),e(wae,qyo),e(Ja,Gyo),e(Xe,Oyo),e(Xe,G),e(G,j1),e(j1,Aae),e(Aae,Xyo),e(j1,Vyo),e(j1,fj),e(fj,zyo),e(j1,Wyo),e(G,Qyo),e(G,D1),e(D1,Lae),e(Lae,Hyo),e(D1,Uyo),e(D1,mj),e(mj,Jyo),e(D1,Yyo),e(G,Kyo),e(G,N1),e(N1,Bae),e(Bae,Zyo),e(N1,ewo),e(N1,gj),e(gj,owo),e(N1,rwo),e(G,two),e(G,q1),e(q1,xae),e(xae,awo),e(q1,nwo),e(q1,hj),e(hj,swo),e(q1,lwo),e(G,iwo),e(G,G1),e(G1,kae),e(kae,dwo),e(G1,cwo),e(G1,pj),e(pj,fwo),e(G1,mwo),e(G,gwo),e(G,O1),e(O1,Rae),e(Rae,hwo),e(O1,pwo),e(O1,_j),e(_j,_wo),e(O1,uwo),e(G,bwo),e(G,X1),e(X1,Sae),e(Sae,vwo),e(X1,Two),e(X1,uj),e(uj,Fwo),e(X1,Cwo),e(G,Mwo),e(G,V1),e(V1,Pae),e(Pae,Ewo),e(V1,ywo),e(V1,bj),e(bj,wwo),e(V1,Awo),e(G,Lwo),e(G,z1),e(z1,$ae),e($ae,Bwo),e(z1,xwo),e(z1,vj),e(vj,kwo),e(z1,Rwo),e(G,Swo),e(G,W1),e(W1,Iae),e(Iae,Pwo),e(W1,$wo),e(W1,Tj),e(Tj,Iwo),e(W1,jwo),e(G,Dwo),e(G,Q1),e(Q1,jae),e(jae,Nwo),e(Q1,qwo),e(Q1,Fj),e(Fj,Gwo),e(Q1,Owo),e(G,Xwo),e(G,H1),e(H1,Dae),e(Dae,Vwo),e(H1,zwo),e(H1,Cj),e(Cj,Wwo),e(H1,Qwo),e(G,Hwo),e(G,U1),e(U1,Nae),e(Nae,Uwo),e(U1,Jwo),e(U1,Mj),e(Mj,Ywo),e(U1,Kwo),e(G,Zwo),e(G,J1),e(J1,qae),e(qae,eAo),e(J1,oAo),e(J1,Ej),e(Ej,rAo),e(J1,tAo),e(G,aAo),e(G,Y1),e(Y1,Gae),e(Gae,nAo),e(Y1,sAo),e(Y1,yj),e(yj,lAo),e(Y1,iAo),e(G,dAo),e(G,K1),e(K1,Oae),e(Oae,cAo),e(K1,fAo),e(K1,wj),e(wj,mAo),e(K1,gAo),e(G,hAo),e(G,Z1),e(Z1,Xae),e(Xae,pAo),e(Z1,_Ao),e(Z1,Aj),e(Aj,uAo),e(Z1,bAo),e(G,vAo),e(G,eb),e(eb,Vae),e(Vae,TAo),e(eb,FAo),e(eb,Lj),e(Lj,CAo),e(eb,MAo),e(G,EAo),e(G,ob),e(ob,zae),e(zae,yAo),e(ob,wAo),e(ob,Bj),e(Bj,AAo),e(ob,LAo),e(G,BAo),e(G,rb),e(rb,Wae),e(Wae,xAo),e(rb,kAo),e(rb,xj),e(xj,RAo),e(rb,SAo),e(G,PAo),e(G,tb),e(tb,Qae),e(Qae,$Ao),e(tb,IAo),e(tb,kj),e(kj,jAo),e(tb,DAo),e(G,NAo),e(G,ab),e(ab,Hae),e(Hae,qAo),e(ab,GAo),e(ab,Rj),e(Rj,OAo),e(ab,XAo),e(G,VAo),e(G,nb),e(nb,Uae),e(Uae,zAo),e(nb,WAo),e(nb,Sj),e(Sj,QAo),e(nb,HAo),e(G,UAo),e(G,sb),e(sb,Jae),e(Jae,JAo),e(sb,YAo),e(sb,Pj),e(Pj,KAo),e(sb,ZAo),e(G,e0o),e(G,lb),e(lb,Yae),e(Yae,o0o),e(lb,r0o),e(lb,$j),e($j,t0o),e(lb,a0o),e(G,n0o),e(G,ib),e(ib,Kae),e(Kae,s0o),e(ib,l0o),e(ib,Ij),e(Ij,i0o),e(ib,d0o),e(G,c0o),e(G,db),e(db,Zae),e(Zae,f0o),e(db,m0o),e(db,jj),e(jj,g0o),e(db,h0o),e(G,p0o),e(G,cb),e(cb,ene),e(ene,_0o),e(cb,u0o),e(cb,Dj),e(Dj,b0o),e(cb,v0o),e(Xe,T0o),e(Xe,fb),e(fb,F0o),e(fb,one),e(one,C0o),e(fb,M0o),e(fb,rne),e(rne,E0o),e(Xe,y0o),e(Xe,tne),e(tne,w0o),e(Xe,A0o),g(Ey,Xe,null),b(c,zxe,u),b(c,bd,u),e(bd,mb),e(mb,ane),g(yy,ane,null),e(bd,L0o),e(bd,nne),e(nne,B0o),b(c,Wxe,u),b(c,tr,u),g(wy,tr,null),e(tr,x0o),e(tr,vd),e(vd,k0o),e(vd,sne),e(sne,R0o),e(vd,S0o),e(vd,lne),e(lne,P0o),e(vd,$0o),e(tr,I0o),e(tr,Ay),e(Ay,j0o),e(Ay,ine),e(ine,D0o),e(Ay,N0o),e(tr,q0o),e(tr,Yr),g(Ly,Yr,null),e(Yr,G0o),e(Yr,dne),e(dne,O0o),e(Yr,X0o),e(Yr,Td),e(Td,V0o),e(Td,cne),e(cne,z0o),e(Td,W0o),e(Td,fne),e(fne,Q0o),e(Td,H0o),e(Yr,U0o),e(Yr,mne),e(mne,J0o),e(Yr,Y0o),g(By,Yr,null),e(tr,K0o),e(tr,Ve),g(xy,Ve,null),e(Ve,Z0o),e(Ve,gne),e(gne,eLo),e(Ve,oLo),e(Ve,Ya),e(Ya,rLo),e(Ya,hne),e(hne,tLo),e(Ya,aLo),e(Ya,pne),e(pne,nLo),e(Ya,sLo),e(Ya,_ne),e(_ne,lLo),e(Ya,iLo),e(Ve,dLo),e(Ve,da),e(da,gb),e(gb,une),e(une,cLo),e(gb,fLo),e(gb,Nj),e(Nj,mLo),e(gb,gLo),e(da,hLo),e(da,hb),e(hb,bne),e(bne,pLo),e(hb,_Lo),e(hb,qj),e(qj,uLo),e(hb,bLo),e(da,vLo),e(da,pb),e(pb,vne),e(vne,TLo),e(pb,FLo),e(pb,Gj),e(Gj,CLo),e(pb,MLo),e(da,ELo),e(da,_b),e(_b,Tne),e(Tne,yLo),e(_b,wLo),e(_b,Oj),e(Oj,ALo),e(_b,LLo),e(da,BLo),e(da,ub),e(ub,Fne),e(Fne,xLo),e(ub,kLo),e(ub,Xj),e(Xj,RLo),e(ub,SLo),e(Ve,PLo),e(Ve,bb),e(bb,$Lo),e(bb,Cne),e(Cne,ILo),e(bb,jLo),e(bb,Mne),e(Mne,DLo),e(Ve,NLo),e(Ve,Ene),e(Ene,qLo),e(Ve,GLo),g(ky,Ve,null),b(c,Qxe,u),b(c,Fd,u),e(Fd,vb),e(vb,yne),g(Ry,yne,null),e(Fd,OLo),e(Fd,wne),e(wne,XLo),b(c,Hxe,u),b(c,ar,u),g(Sy,ar,null),e(ar,VLo),e(ar,Cd),e(Cd,zLo),e(Cd,Ane),e(Ane,WLo),e(Cd,QLo),e(Cd,Lne),e(Lne,HLo),e(Cd,ULo),e(ar,JLo),e(ar,Py),e(Py,YLo),e(Py,Bne),e(Bne,KLo),e(Py,ZLo),e(ar,e7o),e(ar,Kr),g($y,Kr,null),e(Kr,o7o),e(Kr,xne),e(xne,r7o),e(Kr,t7o),e(Kr,Md),e(Md,a7o),e(Md,kne),e(kne,n7o),e(Md,s7o),e(Md,Rne),e(Rne,l7o),e(Md,i7o),e(Kr,d7o),e(Kr,Sne),e(Sne,c7o),e(Kr,f7o),g(Iy,Kr,null),e(ar,m7o),e(ar,ze),g(jy,ze,null),e(ze,g7o),e(ze,Pne),e(Pne,h7o),e(ze,p7o),e(ze,Ka),e(Ka,_7o),e(Ka,$ne),e($ne,u7o),e(Ka,b7o),e(Ka,Ine),e(Ine,v7o),e(Ka,T7o),e(Ka,jne),e(jne,F7o),e(Ka,C7o),e(ze,M7o),e(ze,N),e(N,Tb),e(Tb,Dne),e(Dne,E7o),e(Tb,y7o),e(Tb,Vj),e(Vj,w7o),e(Tb,A7o),e(N,L7o),e(N,Fb),e(Fb,Nne),e(Nne,B7o),e(Fb,x7o),e(Fb,zj),e(zj,k7o),e(Fb,R7o),e(N,S7o),e(N,Cb),e(Cb,qne),e(qne,P7o),e(Cb,$7o),e(Cb,Wj),e(Wj,I7o),e(Cb,j7o),e(N,D7o),e(N,Mb),e(Mb,Gne),e(Gne,N7o),e(Mb,q7o),e(Mb,Qj),e(Qj,G7o),e(Mb,O7o),e(N,X7o),e(N,Eb),e(Eb,One),e(One,V7o),e(Eb,z7o),e(Eb,Hj),e(Hj,W7o),e(Eb,Q7o),e(N,H7o),e(N,yb),e(yb,Xne),e(Xne,U7o),e(yb,J7o),e(yb,Uj),e(Uj,Y7o),e(yb,K7o),e(N,Z7o),e(N,wb),e(wb,Vne),e(Vne,e8o),e(wb,o8o),e(wb,Jj),e(Jj,r8o),e(wb,t8o),e(N,a8o),e(N,Ab),e(Ab,zne),e(zne,n8o),e(Ab,s8o),e(Ab,Yj),e(Yj,l8o),e(Ab,i8o),e(N,d8o),e(N,Lb),e(Lb,Wne),e(Wne,c8o),e(Lb,f8o),e(Lb,Kj),e(Kj,m8o),e(Lb,g8o),e(N,h8o),e(N,Bb),e(Bb,Qne),e(Qne,p8o),e(Bb,_8o),e(Bb,Zj),e(Zj,u8o),e(Bb,b8o),e(N,v8o),e(N,xb),e(xb,Hne),e(Hne,T8o),e(xb,F8o),e(xb,eD),e(eD,C8o),e(xb,M8o),e(N,E8o),e(N,kb),e(kb,Une),e(Une,y8o),e(kb,w8o),e(kb,oD),e(oD,A8o),e(kb,L8o),e(N,B8o),e(N,Rb),e(Rb,Jne),e(Jne,x8o),e(Rb,k8o),e(Rb,rD),e(rD,R8o),e(Rb,S8o),e(N,P8o),e(N,Sb),e(Sb,Yne),e(Yne,$8o),e(Sb,I8o),e(Sb,tD),e(tD,j8o),e(Sb,D8o),e(N,N8o),e(N,Pb),e(Pb,Kne),e(Kne,q8o),e(Pb,G8o),e(Pb,aD),e(aD,O8o),e(Pb,X8o),e(N,V8o),e(N,$b),e($b,Zne),e(Zne,z8o),e($b,W8o),e($b,nD),e(nD,Q8o),e($b,H8o),e(N,U8o),e(N,Ib),e(Ib,ese),e(ese,J8o),e(Ib,Y8o),e(Ib,sD),e(sD,K8o),e(Ib,Z8o),e(N,e9o),e(N,jb),e(jb,ose),e(ose,o9o),e(jb,r9o),e(jb,lD),e(lD,t9o),e(jb,a9o),e(N,n9o),e(N,Db),e(Db,rse),e(rse,s9o),e(Db,l9o),e(Db,iD),e(iD,i9o),e(Db,d9o),e(N,c9o),e(N,Nb),e(Nb,tse),e(tse,f9o),e(Nb,m9o),e(Nb,dD),e(dD,g9o),e(Nb,h9o),e(N,p9o),e(N,qb),e(qb,ase),e(ase,_9o),e(qb,u9o),e(qb,cD),e(cD,b9o),e(qb,v9o),e(N,T9o),e(N,Gb),e(Gb,nse),e(nse,F9o),e(Gb,C9o),e(Gb,fD),e(fD,M9o),e(Gb,E9o),e(N,y9o),e(N,Ob),e(Ob,sse),e(sse,w9o),e(Ob,A9o),e(Ob,mD),e(mD,L9o),e(Ob,B9o),e(N,x9o),e(N,Xb),e(Xb,lse),e(lse,k9o),e(Xb,R9o),e(Xb,gD),e(gD,S9o),e(Xb,P9o),e(N,$9o),e(N,Vb),e(Vb,ise),e(ise,I9o),e(Vb,j9o),e(Vb,hD),e(hD,D9o),e(Vb,N9o),e(N,q9o),e(N,zb),e(zb,dse),e(dse,G9o),e(zb,O9o),e(zb,pD),e(pD,X9o),e(zb,V9o),e(N,z9o),e(N,Wb),e(Wb,cse),e(cse,W9o),e(Wb,Q9o),e(Wb,_D),e(_D,H9o),e(Wb,U9o),e(N,J9o),e(N,Qb),e(Qb,fse),e(fse,Y9o),e(Qb,K9o),e(Qb,uD),e(uD,Z9o),e(Qb,eBo),e(N,oBo),e(N,Hb),e(Hb,mse),e(mse,rBo),e(Hb,tBo),e(Hb,bD),e(bD,aBo),e(Hb,nBo),e(N,sBo),e(N,Ub),e(Ub,gse),e(gse,lBo),e(Ub,iBo),e(Ub,vD),e(vD,dBo),e(Ub,cBo),e(N,fBo),e(N,Jb),e(Jb,hse),e(hse,mBo),e(Jb,gBo),e(Jb,TD),e(TD,hBo),e(Jb,pBo),e(N,_Bo),e(N,Yb),e(Yb,pse),e(pse,uBo),e(Yb,bBo),e(Yb,FD),e(FD,vBo),e(Yb,TBo),e(N,FBo),e(N,Kb),e(Kb,_se),e(_se,CBo),e(Kb,MBo),e(Kb,CD),e(CD,EBo),e(Kb,yBo),e(ze,wBo),e(ze,Zb),e(Zb,ABo),e(Zb,use),e(use,LBo),e(Zb,BBo),e(Zb,bse),e(bse,xBo),e(ze,kBo),e(ze,vse),e(vse,RBo),e(ze,SBo),g(Dy,ze,null),b(c,Uxe,u),b(c,Ed,u),e(Ed,e3),e(e3,Tse),g(Ny,Tse,null),e(Ed,PBo),e(Ed,Fse),e(Fse,$Bo),b(c,Jxe,u),b(c,nr,u),g(qy,nr,null),e(nr,IBo),e(nr,yd),e(yd,jBo),e(yd,Cse),e(Cse,DBo),e(yd,NBo),e(yd,Mse),e(Mse,qBo),e(yd,GBo),e(nr,OBo),e(nr,Gy),e(Gy,XBo),e(Gy,Ese),e(Ese,VBo),e(Gy,zBo),e(nr,WBo),e(nr,Zr),g(Oy,Zr,null),e(Zr,QBo),e(Zr,yse),e(yse,HBo),e(Zr,UBo),e(Zr,wd),e(wd,JBo),e(wd,wse),e(wse,YBo),e(wd,KBo),e(wd,Ase),e(Ase,ZBo),e(wd,exo),e(Zr,oxo),e(Zr,Lse),e(Lse,rxo),e(Zr,txo),g(Xy,Zr,null),e(nr,axo),e(nr,We),g(Vy,We,null),e(We,nxo),e(We,Bse),e(Bse,sxo),e(We,lxo),e(We,Za),e(Za,ixo),e(Za,xse),e(xse,dxo),e(Za,cxo),e(Za,kse),e(kse,fxo),e(Za,mxo),e(Za,Rse),e(Rse,gxo),e(Za,hxo),e(We,pxo),e(We,R),e(R,o3),e(o3,Sse),e(Sse,_xo),e(o3,uxo),e(o3,MD),e(MD,bxo),e(o3,vxo),e(R,Txo),e(R,r3),e(r3,Pse),e(Pse,Fxo),e(r3,Cxo),e(r3,ED),e(ED,Mxo),e(r3,Exo),e(R,yxo),e(R,t3),e(t3,$se),e($se,wxo),e(t3,Axo),e(t3,yD),e(yD,Lxo),e(t3,Bxo),e(R,xxo),e(R,a3),e(a3,Ise),e(Ise,kxo),e(a3,Rxo),e(a3,wD),e(wD,Sxo),e(a3,Pxo),e(R,$xo),e(R,n3),e(n3,jse),e(jse,Ixo),e(n3,jxo),e(n3,AD),e(AD,Dxo),e(n3,Nxo),e(R,qxo),e(R,s3),e(s3,Dse),e(Dse,Gxo),e(s3,Oxo),e(s3,LD),e(LD,Xxo),e(s3,Vxo),e(R,zxo),e(R,l3),e(l3,Nse),e(Nse,Wxo),e(l3,Qxo),e(l3,BD),e(BD,Hxo),e(l3,Uxo),e(R,Jxo),e(R,i3),e(i3,qse),e(qse,Yxo),e(i3,Kxo),e(i3,xD),e(xD,Zxo),e(i3,eko),e(R,oko),e(R,d3),e(d3,Gse),e(Gse,rko),e(d3,tko),e(d3,kD),e(kD,ako),e(d3,nko),e(R,sko),e(R,c3),e(c3,Ose),e(Ose,lko),e(c3,iko),e(c3,RD),e(RD,dko),e(c3,cko),e(R,fko),e(R,f3),e(f3,Xse),e(Xse,mko),e(f3,gko),e(f3,SD),e(SD,hko),e(f3,pko),e(R,_ko),e(R,m3),e(m3,Vse),e(Vse,uko),e(m3,bko),e(m3,PD),e(PD,vko),e(m3,Tko),e(R,Fko),e(R,g3),e(g3,zse),e(zse,Cko),e(g3,Mko),e(g3,$D),e($D,Eko),e(g3,yko),e(R,wko),e(R,h3),e(h3,Wse),e(Wse,Ako),e(h3,Lko),e(h3,ID),e(ID,Bko),e(h3,xko),e(R,kko),e(R,p3),e(p3,Qse),e(Qse,Rko),e(p3,Sko),e(p3,jD),e(jD,Pko),e(p3,$ko),e(R,Iko),e(R,_3),e(_3,Hse),e(Hse,jko),e(_3,Dko),e(_3,DD),e(DD,Nko),e(_3,qko),e(R,Gko),e(R,u3),e(u3,Use),e(Use,Oko),e(u3,Xko),e(u3,ND),e(ND,Vko),e(u3,zko),e(R,Wko),e(R,b3),e(b3,Jse),e(Jse,Qko),e(b3,Hko),e(b3,qD),e(qD,Uko),e(b3,Jko),e(R,Yko),e(R,v3),e(v3,Yse),e(Yse,Kko),e(v3,Zko),e(v3,GD),e(GD,eRo),e(v3,oRo),e(R,rRo),e(R,T3),e(T3,Kse),e(Kse,tRo),e(T3,aRo),e(T3,OD),e(OD,nRo),e(T3,sRo),e(R,lRo),e(R,F3),e(F3,Zse),e(Zse,iRo),e(F3,dRo),e(F3,XD),e(XD,cRo),e(F3,fRo),e(R,mRo),e(R,C3),e(C3,ele),e(ele,gRo),e(C3,hRo),e(C3,VD),e(VD,pRo),e(C3,_Ro),e(R,uRo),e(R,M3),e(M3,ole),e(ole,bRo),e(M3,vRo),e(M3,zD),e(zD,TRo),e(M3,FRo),e(R,CRo),e(R,E3),e(E3,rle),e(rle,MRo),e(E3,ERo),e(E3,WD),e(WD,yRo),e(E3,wRo),e(R,ARo),e(R,y3),e(y3,tle),e(tle,LRo),e(y3,BRo),e(y3,QD),e(QD,xRo),e(y3,kRo),e(R,RRo),e(R,w3),e(w3,ale),e(ale,SRo),e(w3,PRo),e(w3,HD),e(HD,$Ro),e(w3,IRo),e(R,jRo),e(R,A3),e(A3,nle),e(nle,DRo),e(A3,NRo),e(A3,UD),e(UD,qRo),e(A3,GRo),e(R,ORo),e(R,L3),e(L3,sle),e(sle,XRo),e(L3,VRo),e(L3,JD),e(JD,zRo),e(L3,WRo),e(R,QRo),e(R,B3),e(B3,lle),e(lle,HRo),e(B3,URo),e(B3,YD),e(YD,JRo),e(B3,YRo),e(R,KRo),e(R,x3),e(x3,ile),e(ile,ZRo),e(x3,eSo),e(x3,KD),e(KD,oSo),e(x3,rSo),e(R,tSo),e(R,k3),e(k3,dle),e(dle,aSo),e(k3,nSo),e(k3,ZD),e(ZD,sSo),e(k3,lSo),e(R,iSo),e(R,R3),e(R3,cle),e(cle,dSo),e(R3,cSo),e(R3,eN),e(eN,fSo),e(R3,mSo),e(R,gSo),e(R,S3),e(S3,fle),e(fle,hSo),e(S3,pSo),e(S3,oN),e(oN,_So),e(S3,uSo),e(R,bSo),e(R,P3),e(P3,mle),e(mle,vSo),e(P3,TSo),e(P3,rN),e(rN,FSo),e(P3,CSo),e(R,MSo),e(R,$3),e($3,gle),e(gle,ESo),e($3,ySo),e($3,tN),e(tN,wSo),e($3,ASo),e(R,LSo),e(R,I3),e(I3,hle),e(hle,BSo),e(I3,xSo),e(I3,aN),e(aN,kSo),e(I3,RSo),e(R,SSo),e(R,j3),e(j3,ple),e(ple,PSo),e(j3,$So),e(j3,nN),e(nN,ISo),e(j3,jSo),e(R,DSo),e(R,D3),e(D3,_le),e(_le,NSo),e(D3,qSo),e(D3,sN),e(sN,GSo),e(D3,OSo),e(R,XSo),e(R,N3),e(N3,ule),e(ule,VSo),e(N3,zSo),e(N3,lN),e(lN,WSo),e(N3,QSo),e(We,HSo),e(We,q3),e(q3,USo),e(q3,ble),e(ble,JSo),e(q3,YSo),e(q3,vle),e(vle,KSo),e(We,ZSo),e(We,Tle),e(Tle,ePo),e(We,oPo),g(zy,We,null),b(c,Yxe,u),b(c,Ad,u),e(Ad,G3),e(G3,Fle),g(Wy,Fle,null),e(Ad,rPo),e(Ad,Cle),e(Cle,tPo),b(c,Kxe,u),b(c,sr,u),g(Qy,sr,null),e(sr,aPo),e(sr,Ld),e(Ld,nPo),e(Ld,Mle),e(Mle,sPo),e(Ld,lPo),e(Ld,Ele),e(Ele,iPo),e(Ld,dPo),e(sr,cPo),e(sr,Hy),e(Hy,fPo),e(Hy,yle),e(yle,mPo),e(Hy,gPo),e(sr,hPo),e(sr,et),g(Uy,et,null),e(et,pPo),e(et,wle),e(wle,_Po),e(et,uPo),e(et,Bd),e(Bd,bPo),e(Bd,Ale),e(Ale,vPo),e(Bd,TPo),e(Bd,Lle),e(Lle,FPo),e(Bd,CPo),e(et,MPo),e(et,Ble),e(Ble,EPo),e(et,yPo),g(Jy,et,null),e(sr,wPo),e(sr,Qe),g(Yy,Qe,null),e(Qe,APo),e(Qe,xle),e(xle,LPo),e(Qe,BPo),e(Qe,en),e(en,xPo),e(en,kle),e(kle,kPo),e(en,RPo),e(en,Rle),e(Rle,SPo),e(en,PPo),e(en,Sle),e(Sle,$Po),e(en,IPo),e(Qe,jPo),e(Qe,Ple),e(Ple,O3),e(O3,$le),e($le,DPo),e(O3,NPo),e(O3,iN),e(iN,qPo),e(O3,GPo),e(Qe,OPo),e(Qe,X3),e(X3,XPo),e(X3,Ile),e(Ile,VPo),e(X3,zPo),e(X3,jle),e(jle,WPo),e(Qe,QPo),e(Qe,Dle),e(Dle,HPo),e(Qe,UPo),g(Ky,Qe,null),b(c,Zxe,u),b(c,xd,u),e(xd,V3),e(V3,Nle),g(Zy,Nle,null),e(xd,JPo),e(xd,qle),e(qle,YPo),b(c,eke,u),b(c,lr,u),g(ew,lr,null),e(lr,KPo),e(lr,kd),e(kd,ZPo),e(kd,Gle),e(Gle,e$o),e(kd,o$o),e(kd,Ole),e(Ole,r$o),e(kd,t$o),e(lr,a$o),e(lr,ow),e(ow,n$o),e(ow,Xle),e(Xle,s$o),e(ow,l$o),e(lr,i$o),e(lr,ot),g(rw,ot,null),e(ot,d$o),e(ot,Vle),e(Vle,c$o),e(ot,f$o),e(ot,Rd),e(Rd,m$o),e(Rd,zle),e(zle,g$o),e(Rd,h$o),e(Rd,Wle),e(Wle,p$o),e(Rd,_$o),e(ot,u$o),e(ot,Qle),e(Qle,b$o),e(ot,v$o),g(tw,ot,null),e(lr,T$o),e(lr,He),g(aw,He,null),e(He,F$o),e(He,Hle),e(Hle,C$o),e(He,M$o),e(He,on),e(on,E$o),e(on,Ule),e(Ule,y$o),e(on,w$o),e(on,Jle),e(Jle,A$o),e(on,L$o),e(on,Yle),e(Yle,B$o),e(on,x$o),e(He,k$o),e(He,Ce),e(Ce,z3),e(z3,Kle),e(Kle,R$o),e(z3,S$o),e(z3,dN),e(dN,P$o),e(z3,$$o),e(Ce,I$o),e(Ce,W3),e(W3,Zle),e(Zle,j$o),e(W3,D$o),e(W3,cN),e(cN,N$o),e(W3,q$o),e(Ce,G$o),e(Ce,qs),e(qs,eie),e(eie,O$o),e(qs,X$o),e(qs,fN),e(fN,V$o),e(qs,z$o),e(qs,mN),e(mN,W$o),e(qs,Q$o),e(Ce,H$o),e(Ce,Q3),e(Q3,oie),e(oie,U$o),e(Q3,J$o),e(Q3,gN),e(gN,Y$o),e(Q3,K$o),e(Ce,Z$o),e(Ce,ma),e(ma,rie),e(rie,eIo),e(ma,oIo),e(ma,hN),e(hN,rIo),e(ma,tIo),e(ma,pN),e(pN,aIo),e(ma,nIo),e(ma,_N),e(_N,sIo),e(ma,lIo),e(Ce,iIo),e(Ce,H3),e(H3,tie),e(tie,dIo),e(H3,cIo),e(H3,uN),e(uN,fIo),e(H3,mIo),e(Ce,gIo),e(Ce,U3),e(U3,aie),e(aie,hIo),e(U3,pIo),e(U3,bN),e(bN,_Io),e(U3,uIo),e(Ce,bIo),e(Ce,J3),e(J3,nie),e(nie,vIo),e(J3,TIo),e(J3,vN),e(vN,FIo),e(J3,CIo),e(Ce,MIo),e(Ce,Y3),e(Y3,sie),e(sie,EIo),e(Y3,yIo),e(Y3,TN),e(TN,wIo),e(Y3,AIo),e(He,LIo),e(He,K3),e(K3,BIo),e(K3,lie),e(lie,xIo),e(K3,kIo),e(K3,iie),e(iie,RIo),e(He,SIo),e(He,die),e(die,PIo),e(He,$Io),g(nw,He,null),b(c,oke,u),b(c,Sd,u),e(Sd,Z3),e(Z3,cie),g(sw,cie,null),e(Sd,IIo),e(Sd,fie),e(fie,jIo),b(c,rke,u),b(c,ir,u),g(lw,ir,null),e(ir,DIo),e(ir,Pd),e(Pd,NIo),e(Pd,mie),e(mie,qIo),e(Pd,GIo),e(Pd,gie),e(gie,OIo),e(Pd,XIo),e(ir,VIo),e(ir,iw),e(iw,zIo),e(iw,hie),e(hie,WIo),e(iw,QIo),e(ir,HIo),e(ir,rt),g(dw,rt,null),e(rt,UIo),e(rt,pie),e(pie,JIo),e(rt,YIo),e(rt,$d),e($d,KIo),e($d,_ie),e(_ie,ZIo),e($d,ejo),e($d,uie),e(uie,ojo),e($d,rjo),e(rt,tjo),e(rt,bie),e(bie,ajo),e(rt,njo),g(cw,rt,null),e(ir,sjo),e(ir,Ue),g(fw,Ue,null),e(Ue,ljo),e(Ue,vie),e(vie,ijo),e(Ue,djo),e(Ue,rn),e(rn,cjo),e(rn,Tie),e(Tie,fjo),e(rn,mjo),e(rn,Fie),e(Fie,gjo),e(rn,hjo),e(rn,Cie),e(Cie,pjo),e(rn,_jo),e(Ue,ujo),e(Ue,Mie),e(Mie,e5),e(e5,Eie),e(Eie,bjo),e(e5,vjo),e(e5,FN),e(FN,Tjo),e(e5,Fjo),e(Ue,Cjo),e(Ue,o5),e(o5,Mjo),e(o5,yie),e(yie,Ejo),e(o5,yjo),e(o5,wie),e(wie,wjo),e(Ue,Ajo),e(Ue,Aie),e(Aie,Ljo),e(Ue,Bjo),g(mw,Ue,null),b(c,tke,u),b(c,Id,u),e(Id,r5),e(r5,Lie),g(gw,Lie,null),e(Id,xjo),e(Id,Bie),e(Bie,kjo),b(c,ake,u),b(c,dr,u),g(hw,dr,null),e(dr,Rjo),e(dr,jd),e(jd,Sjo),e(jd,xie),e(xie,Pjo),e(jd,$jo),e(jd,kie),e(kie,Ijo),e(jd,jjo),e(dr,Djo),e(dr,pw),e(pw,Njo),e(pw,Rie),e(Rie,qjo),e(pw,Gjo),e(dr,Ojo),e(dr,tt),g(_w,tt,null),e(tt,Xjo),e(tt,Sie),e(Sie,Vjo),e(tt,zjo),e(tt,Dd),e(Dd,Wjo),e(Dd,Pie),e(Pie,Qjo),e(Dd,Hjo),e(Dd,$ie),e($ie,Ujo),e(Dd,Jjo),e(tt,Yjo),e(tt,Iie),e(Iie,Kjo),e(tt,Zjo),g(uw,tt,null),e(dr,eDo),e(dr,Je),g(bw,Je,null),e(Je,oDo),e(Je,jie),e(jie,rDo),e(Je,tDo),e(Je,tn),e(tn,aDo),e(tn,Die),e(Die,nDo),e(tn,sDo),e(tn,Nie),e(Nie,lDo),e(tn,iDo),e(tn,qie),e(qie,dDo),e(tn,cDo),e(Je,fDo),e(Je,xe),e(xe,t5),e(t5,Gie),e(Gie,mDo),e(t5,gDo),e(t5,CN),e(CN,hDo),e(t5,pDo),e(xe,_Do),e(xe,a5),e(a5,Oie),e(Oie,uDo),e(a5,bDo),e(a5,MN),e(MN,vDo),e(a5,TDo),e(xe,FDo),e(xe,n5),e(n5,Xie),e(Xie,CDo),e(n5,MDo),e(n5,EN),e(EN,EDo),e(n5,yDo),e(xe,wDo),e(xe,s5),e(s5,Vie),e(Vie,ADo),e(s5,LDo),e(s5,yN),e(yN,BDo),e(s5,xDo),e(xe,kDo),e(xe,l5),e(l5,zie),e(zie,RDo),e(l5,SDo),e(l5,wN),e(wN,PDo),e(l5,$Do),e(xe,IDo),e(xe,i5),e(i5,Wie),e(Wie,jDo),e(i5,DDo),e(i5,AN),e(AN,NDo),e(i5,qDo),e(xe,GDo),e(xe,d5),e(d5,Qie),e(Qie,ODo),e(d5,XDo),e(d5,LN),e(LN,VDo),e(d5,zDo),e(xe,WDo),e(xe,c5),e(c5,Hie),e(Hie,QDo),e(c5,HDo),e(c5,BN),e(BN,UDo),e(c5,JDo),e(Je,YDo),e(Je,f5),e(f5,KDo),e(f5,Uie),e(Uie,ZDo),e(f5,eNo),e(f5,Jie),e(Jie,oNo),e(Je,rNo),e(Je,Yie),e(Yie,tNo),e(Je,aNo),g(vw,Je,null),b(c,nke,u),b(c,Nd,u),e(Nd,m5),e(m5,Kie),g(Tw,Kie,null),e(Nd,nNo),e(Nd,Zie),e(Zie,sNo),b(c,ske,u),b(c,cr,u),g(Fw,cr,null),e(cr,lNo),e(cr,qd),e(qd,iNo),e(qd,ede),e(ede,dNo),e(qd,cNo),e(qd,ode),e(ode,fNo),e(qd,mNo),e(cr,gNo),e(cr,Cw),e(Cw,hNo),e(Cw,rde),e(rde,pNo),e(Cw,_No),e(cr,uNo),e(cr,at),g(Mw,at,null),e(at,bNo),e(at,tde),e(tde,vNo),e(at,TNo),e(at,Gd),e(Gd,FNo),e(Gd,ade),e(ade,CNo),e(Gd,MNo),e(Gd,nde),e(nde,ENo),e(Gd,yNo),e(at,wNo),e(at,sde),e(sde,ANo),e(at,LNo),g(Ew,at,null),e(cr,BNo),e(cr,Ye),g(yw,Ye,null),e(Ye,xNo),e(Ye,lde),e(lde,kNo),e(Ye,RNo),e(Ye,an),e(an,SNo),e(an,ide),e(ide,PNo),e(an,$No),e(an,dde),e(dde,INo),e(an,jNo),e(an,cde),e(cde,DNo),e(an,NNo),e(Ye,qNo),e(Ye,nn),e(nn,g5),e(g5,fde),e(fde,GNo),e(g5,ONo),e(g5,xN),e(xN,XNo),e(g5,VNo),e(nn,zNo),e(nn,h5),e(h5,mde),e(mde,WNo),e(h5,QNo),e(h5,kN),e(kN,HNo),e(h5,UNo),e(nn,JNo),e(nn,p5),e(p5,gde),e(gde,YNo),e(p5,KNo),e(p5,RN),e(RN,ZNo),e(p5,eqo),e(nn,oqo),e(nn,_5),e(_5,hde),e(hde,rqo),e(_5,tqo),e(_5,SN),e(SN,aqo),e(_5,nqo),e(Ye,sqo),e(Ye,u5),e(u5,lqo),e(u5,pde),e(pde,iqo),e(u5,dqo),e(u5,_de),e(_de,cqo),e(Ye,fqo),e(Ye,ude),e(ude,mqo),e(Ye,gqo),g(ww,Ye,null),b(c,lke,u),b(c,Od,u),e(Od,b5),e(b5,bde),g(Aw,bde,null),e(Od,hqo),e(Od,vde),e(vde,pqo),b(c,ike,u),b(c,fr,u),g(Lw,fr,null),e(fr,_qo),e(fr,Xd),e(Xd,uqo),e(Xd,Tde),e(Tde,bqo),e(Xd,vqo),e(Xd,Fde),e(Fde,Tqo),e(Xd,Fqo),e(fr,Cqo),e(fr,Bw),e(Bw,Mqo),e(Bw,Cde),e(Cde,Eqo),e(Bw,yqo),e(fr,wqo),e(fr,nt),g(xw,nt,null),e(nt,Aqo),e(nt,Mde),e(Mde,Lqo),e(nt,Bqo),e(nt,Vd),e(Vd,xqo),e(Vd,Ede),e(Ede,kqo),e(Vd,Rqo),e(Vd,yde),e(yde,Sqo),e(Vd,Pqo),e(nt,$qo),e(nt,wde),e(wde,Iqo),e(nt,jqo),g(kw,nt,null),e(fr,Dqo),e(fr,Ke),g(Rw,Ke,null),e(Ke,Nqo),e(Ke,Ade),e(Ade,qqo),e(Ke,Gqo),e(Ke,sn),e(sn,Oqo),e(sn,Lde),e(Lde,Xqo),e(sn,Vqo),e(sn,Bde),e(Bde,zqo),e(sn,Wqo),e(sn,xde),e(xde,Qqo),e(sn,Hqo),e(Ke,Uqo),e(Ke,ke),e(ke,v5),e(v5,kde),e(kde,Jqo),e(v5,Yqo),e(v5,PN),e(PN,Kqo),e(v5,Zqo),e(ke,eGo),e(ke,T5),e(T5,Rde),e(Rde,oGo),e(T5,rGo),e(T5,$N),e($N,tGo),e(T5,aGo),e(ke,nGo),e(ke,F5),e(F5,Sde),e(Sde,sGo),e(F5,lGo),e(F5,IN),e(IN,iGo),e(F5,dGo),e(ke,cGo),e(ke,C5),e(C5,Pde),e(Pde,fGo),e(C5,mGo),e(C5,jN),e(jN,gGo),e(C5,hGo),e(ke,pGo),e(ke,M5),e(M5,$de),e($de,_Go),e(M5,uGo),e(M5,DN),e(DN,bGo),e(M5,vGo),e(ke,TGo),e(ke,E5),e(E5,Ide),e(Ide,FGo),e(E5,CGo),e(E5,NN),e(NN,MGo),e(E5,EGo),e(ke,yGo),e(ke,y5),e(y5,jde),e(jde,wGo),e(y5,AGo),e(y5,qN),e(qN,LGo),e(y5,BGo),e(ke,xGo),e(ke,w5),e(w5,Dde),e(Dde,kGo),e(w5,RGo),e(w5,GN),e(GN,SGo),e(w5,PGo),e(Ke,$Go),e(Ke,A5),e(A5,IGo),e(A5,Nde),e(Nde,jGo),e(A5,DGo),e(A5,qde),e(qde,NGo),e(Ke,qGo),e(Ke,Gde),e(Gde,GGo),e(Ke,OGo),g(Sw,Ke,null),b(c,dke,u),b(c,zd,u),e(zd,L5),e(L5,Ode),g(Pw,Ode,null),e(zd,XGo),e(zd,Xde),e(Xde,VGo),b(c,cke,u),b(c,mr,u),g($w,mr,null),e(mr,zGo),e(mr,Wd),e(Wd,WGo),e(Wd,Vde),e(Vde,QGo),e(Wd,HGo),e(Wd,zde),e(zde,UGo),e(Wd,JGo),e(mr,YGo),e(mr,Iw),e(Iw,KGo),e(Iw,Wde),e(Wde,ZGo),e(Iw,eOo),e(mr,oOo),e(mr,st),g(jw,st,null),e(st,rOo),e(st,Qde),e(Qde,tOo),e(st,aOo),e(st,Qd),e(Qd,nOo),e(Qd,Hde),e(Hde,sOo),e(Qd,lOo),e(Qd,Ude),e(Ude,iOo),e(Qd,dOo),e(st,cOo),e(st,Jde),e(Jde,fOo),e(st,mOo),g(Dw,st,null),e(mr,gOo),e(mr,Ze),g(Nw,Ze,null),e(Ze,hOo),e(Ze,Yde),e(Yde,pOo),e(Ze,_Oo),e(Ze,ln),e(ln,uOo),e(ln,Kde),e(Kde,bOo),e(ln,vOo),e(ln,Zde),e(Zde,TOo),e(ln,FOo),e(ln,ece),e(ece,COo),e(ln,MOo),e(Ze,EOo),e(Ze,qw),e(qw,B5),e(B5,oce),e(oce,yOo),e(B5,wOo),e(B5,ON),e(ON,AOo),e(B5,LOo),e(qw,BOo),e(qw,x5),e(x5,rce),e(rce,xOo),e(x5,kOo),e(x5,XN),e(XN,ROo),e(x5,SOo),e(Ze,POo),e(Ze,k5),e(k5,$Oo),e(k5,tce),e(tce,IOo),e(k5,jOo),e(k5,ace),e(ace,DOo),e(Ze,NOo),e(Ze,nce),e(nce,qOo),e(Ze,GOo),g(Gw,Ze,null),b(c,fke,u),b(c,Hd,u),e(Hd,R5),e(R5,sce),g(Ow,sce,null),e(Hd,OOo),e(Hd,lce),e(lce,XOo),b(c,mke,u),b(c,gr,u),g(Xw,gr,null),e(gr,VOo),e(gr,Ud),e(Ud,zOo),e(Ud,ice),e(ice,WOo),e(Ud,QOo),e(Ud,dce),e(dce,HOo),e(Ud,UOo),e(gr,JOo),e(gr,Vw),e(Vw,YOo),e(Vw,cce),e(cce,KOo),e(Vw,ZOo),e(gr,eXo),e(gr,lt),g(zw,lt,null),e(lt,oXo),e(lt,fce),e(fce,rXo),e(lt,tXo),e(lt,Jd),e(Jd,aXo),e(Jd,mce),e(mce,nXo),e(Jd,sXo),e(Jd,gce),e(gce,lXo),e(Jd,iXo),e(lt,dXo),e(lt,hce),e(hce,cXo),e(lt,fXo),g(Ww,lt,null),e(gr,mXo),e(gr,eo),g(Qw,eo,null),e(eo,gXo),e(eo,pce),e(pce,hXo),e(eo,pXo),e(eo,dn),e(dn,_Xo),e(dn,_ce),e(_ce,uXo),e(dn,bXo),e(dn,uce),e(uce,vXo),e(dn,TXo),e(dn,bce),e(bce,FXo),e(dn,CXo),e(eo,MXo),e(eo,cn),e(cn,S5),e(S5,vce),e(vce,EXo),e(S5,yXo),e(S5,VN),e(VN,wXo),e(S5,AXo),e(cn,LXo),e(cn,P5),e(P5,Tce),e(Tce,BXo),e(P5,xXo),e(P5,zN),e(zN,kXo),e(P5,RXo),e(cn,SXo),e(cn,$5),e($5,Fce),e(Fce,PXo),e($5,$Xo),e($5,WN),e(WN,IXo),e($5,jXo),e(cn,DXo),e(cn,I5),e(I5,Cce),e(Cce,NXo),e(I5,qXo),e(I5,QN),e(QN,GXo),e(I5,OXo),e(eo,XXo),e(eo,j5),e(j5,VXo),e(j5,Mce),e(Mce,zXo),e(j5,WXo),e(j5,Ece),e(Ece,QXo),e(eo,HXo),e(eo,yce),e(yce,UXo),e(eo,JXo),g(Hw,eo,null),b(c,gke,u),b(c,Yd,u),e(Yd,D5),e(D5,wce),g(Uw,wce,null),e(Yd,YXo),e(Yd,Ace),e(Ace,KXo),b(c,hke,u),b(c,hr,u),g(Jw,hr,null),e(hr,ZXo),e(hr,Kd),e(Kd,eVo),e(Kd,Lce),e(Lce,oVo),e(Kd,rVo),e(Kd,Bce),e(Bce,tVo),e(Kd,aVo),e(hr,nVo),e(hr,Yw),e(Yw,sVo),e(Yw,xce),e(xce,lVo),e(Yw,iVo),e(hr,dVo),e(hr,it),g(Kw,it,null),e(it,cVo),e(it,kce),e(kce,fVo),e(it,mVo),e(it,Zd),e(Zd,gVo),e(Zd,Rce),e(Rce,hVo),e(Zd,pVo),e(Zd,Sce),e(Sce,_Vo),e(Zd,uVo),e(it,bVo),e(it,Pce),e(Pce,vVo),e(it,TVo),g(Zw,it,null),e(hr,FVo),e(hr,oo),g(eA,oo,null),e(oo,CVo),e(oo,$ce),e($ce,MVo),e(oo,EVo),e(oo,fn),e(fn,yVo),e(fn,Ice),e(Ice,wVo),e(fn,AVo),e(fn,jce),e(jce,LVo),e(fn,BVo),e(fn,Dce),e(Dce,xVo),e(fn,kVo),e(oo,RVo),e(oo,ec),e(ec,N5),e(N5,Nce),e(Nce,SVo),e(N5,PVo),e(N5,HN),e(HN,$Vo),e(N5,IVo),e(ec,jVo),e(ec,q5),e(q5,qce),e(qce,DVo),e(q5,NVo),e(q5,UN),e(UN,qVo),e(q5,GVo),e(ec,OVo),e(ec,G5),e(G5,Gce),e(Gce,XVo),e(G5,VVo),e(G5,JN),e(JN,zVo),e(G5,WVo),e(oo,QVo),e(oo,O5),e(O5,HVo),e(O5,Oce),e(Oce,UVo),e(O5,JVo),e(O5,Xce),e(Xce,YVo),e(oo,KVo),e(oo,Vce),e(Vce,ZVo),e(oo,ezo),g(oA,oo,null),b(c,pke,u),b(c,oc,u),e(oc,X5),e(X5,zce),g(rA,zce,null),e(oc,ozo),e(oc,Wce),e(Wce,rzo),b(c,_ke,u),b(c,pr,u),g(tA,pr,null),e(pr,tzo),e(pr,rc),e(rc,azo),e(rc,Qce),e(Qce,nzo),e(rc,szo),e(rc,Hce),e(Hce,lzo),e(rc,izo),e(pr,dzo),e(pr,aA),e(aA,czo),e(aA,Uce),e(Uce,fzo),e(aA,mzo),e(pr,gzo),e(pr,dt),g(nA,dt,null),e(dt,hzo),e(dt,Jce),e(Jce,pzo),e(dt,_zo),e(dt,tc),e(tc,uzo),e(tc,Yce),e(Yce,bzo),e(tc,vzo),e(tc,Kce),e(Kce,Tzo),e(tc,Fzo),e(dt,Czo),e(dt,Zce),e(Zce,Mzo),e(dt,Ezo),g(sA,dt,null),e(pr,yzo),e(pr,ro),g(lA,ro,null),e(ro,wzo),e(ro,efe),e(efe,Azo),e(ro,Lzo),e(ro,mn),e(mn,Bzo),e(mn,ofe),e(ofe,xzo),e(mn,kzo),e(mn,rfe),e(rfe,Rzo),e(mn,Szo),e(mn,tfe),e(tfe,Pzo),e(mn,$zo),e(ro,Izo),e(ro,afe),e(afe,V5),e(V5,nfe),e(nfe,jzo),e(V5,Dzo),e(V5,YN),e(YN,Nzo),e(V5,qzo),e(ro,Gzo),e(ro,z5),e(z5,Ozo),e(z5,sfe),e(sfe,Xzo),e(z5,Vzo),e(z5,lfe),e(lfe,zzo),e(ro,Wzo),e(ro,ife),e(ife,Qzo),e(ro,Hzo),g(iA,ro,null),b(c,uke,u),b(c,ac,u),e(ac,W5),e(W5,dfe),g(dA,dfe,null),e(ac,Uzo),e(ac,cfe),e(cfe,Jzo),b(c,bke,u),b(c,_r,u),g(cA,_r,null),e(_r,Yzo),e(_r,nc),e(nc,Kzo),e(nc,ffe),e(ffe,Zzo),e(nc,eWo),e(nc,mfe),e(mfe,oWo),e(nc,rWo),e(_r,tWo),e(_r,fA),e(fA,aWo),e(fA,gfe),e(gfe,nWo),e(fA,sWo),e(_r,lWo),e(_r,ct),g(mA,ct,null),e(ct,iWo),e(ct,hfe),e(hfe,dWo),e(ct,cWo),e(ct,sc),e(sc,fWo),e(sc,pfe),e(pfe,mWo),e(sc,gWo),e(sc,_fe),e(_fe,hWo),e(sc,pWo),e(ct,_Wo),e(ct,ufe),e(ufe,uWo),e(ct,bWo),g(gA,ct,null),e(_r,vWo),e(_r,to),g(hA,to,null),e(to,TWo),e(to,bfe),e(bfe,FWo),e(to,CWo),e(to,gn),e(gn,MWo),e(gn,vfe),e(vfe,EWo),e(gn,yWo),e(gn,Tfe),e(Tfe,wWo),e(gn,AWo),e(gn,Ffe),e(Ffe,LWo),e(gn,BWo),e(to,xWo),e(to,Cfe),e(Cfe,Q5),e(Q5,Mfe),e(Mfe,kWo),e(Q5,RWo),e(Q5,KN),e(KN,SWo),e(Q5,PWo),e(to,$Wo),e(to,H5),e(H5,IWo),e(H5,Efe),e(Efe,jWo),e(H5,DWo),e(H5,yfe),e(yfe,NWo),e(to,qWo),e(to,wfe),e(wfe,GWo),e(to,OWo),g(pA,to,null),b(c,vke,u),b(c,lc,u),e(lc,U5),e(U5,Afe),g(_A,Afe,null),e(lc,XWo),e(lc,Lfe),e(Lfe,VWo),b(c,Tke,u),b(c,ur,u),g(uA,ur,null),e(ur,zWo),e(ur,ic),e(ic,WWo),e(ic,Bfe),e(Bfe,QWo),e(ic,HWo),e(ic,xfe),e(xfe,UWo),e(ic,JWo),e(ur,YWo),e(ur,bA),e(bA,KWo),e(bA,kfe),e(kfe,ZWo),e(bA,eQo),e(ur,oQo),e(ur,ft),g(vA,ft,null),e(ft,rQo),e(ft,Rfe),e(Rfe,tQo),e(ft,aQo),e(ft,dc),e(dc,nQo),e(dc,Sfe),e(Sfe,sQo),e(dc,lQo),e(dc,Pfe),e(Pfe,iQo),e(dc,dQo),e(ft,cQo),e(ft,$fe),e($fe,fQo),e(ft,mQo),g(TA,ft,null),e(ur,gQo),e(ur,ao),g(FA,ao,null),e(ao,hQo),e(ao,Ife),e(Ife,pQo),e(ao,_Qo),e(ao,hn),e(hn,uQo),e(hn,jfe),e(jfe,bQo),e(hn,vQo),e(hn,Dfe),e(Dfe,TQo),e(hn,FQo),e(hn,Nfe),e(Nfe,CQo),e(hn,MQo),e(ao,EQo),e(ao,CA),e(CA,J5),e(J5,qfe),e(qfe,yQo),e(J5,wQo),e(J5,ZN),e(ZN,AQo),e(J5,LQo),e(CA,BQo),e(CA,Y5),e(Y5,Gfe),e(Gfe,xQo),e(Y5,kQo),e(Y5,eq),e(eq,RQo),e(Y5,SQo),e(ao,PQo),e(ao,K5),e(K5,$Qo),e(K5,Ofe),e(Ofe,IQo),e(K5,jQo),e(K5,Xfe),e(Xfe,DQo),e(ao,NQo),e(ao,Vfe),e(Vfe,qQo),e(ao,GQo),g(MA,ao,null),b(c,Fke,u),b(c,cc,u),e(cc,Z5),e(Z5,zfe),g(EA,zfe,null),e(cc,OQo),e(cc,Wfe),e(Wfe,XQo),b(c,Cke,u),b(c,br,u),g(yA,br,null),e(br,VQo),e(br,fc),e(fc,zQo),e(fc,Qfe),e(Qfe,WQo),e(fc,QQo),e(fc,Hfe),e(Hfe,HQo),e(fc,UQo),e(br,JQo),e(br,wA),e(wA,YQo),e(wA,Ufe),e(Ufe,KQo),e(wA,ZQo),e(br,eHo),e(br,mt),g(AA,mt,null),e(mt,oHo),e(mt,Jfe),e(Jfe,rHo),e(mt,tHo),e(mt,mc),e(mc,aHo),e(mc,Yfe),e(Yfe,nHo),e(mc,sHo),e(mc,Kfe),e(Kfe,lHo),e(mc,iHo),e(mt,dHo),e(mt,Zfe),e(Zfe,cHo),e(mt,fHo),g(LA,mt,null),e(br,mHo),e(br,no),g(BA,no,null),e(no,gHo),e(no,eme),e(eme,hHo),e(no,pHo),e(no,pn),e(pn,_Ho),e(pn,ome),e(ome,uHo),e(pn,bHo),e(pn,rme),e(rme,vHo),e(pn,THo),e(pn,tme),e(tme,FHo),e(pn,CHo),e(no,MHo),e(no,ame),e(ame,ev),e(ev,nme),e(nme,EHo),e(ev,yHo),e(ev,oq),e(oq,wHo),e(ev,AHo),e(no,LHo),e(no,ov),e(ov,BHo),e(ov,sme),e(sme,xHo),e(ov,kHo),e(ov,lme),e(lme,RHo),e(no,SHo),e(no,ime),e(ime,PHo),e(no,$Ho),g(xA,no,null),b(c,Mke,u),b(c,gc,u),e(gc,rv),e(rv,dme),g(kA,dme,null),e(gc,IHo),e(gc,cme),e(cme,jHo),b(c,Eke,u),b(c,vr,u),g(RA,vr,null),e(vr,DHo),e(vr,hc),e(hc,NHo),e(hc,fme),e(fme,qHo),e(hc,GHo),e(hc,mme),e(mme,OHo),e(hc,XHo),e(vr,VHo),e(vr,SA),e(SA,zHo),e(SA,gme),e(gme,WHo),e(SA,QHo),e(vr,HHo),e(vr,gt),g(PA,gt,null),e(gt,UHo),e(gt,hme),e(hme,JHo),e(gt,YHo),e(gt,pc),e(pc,KHo),e(pc,pme),e(pme,ZHo),e(pc,eUo),e(pc,_me),e(_me,oUo),e(pc,rUo),e(gt,tUo),e(gt,ume),e(ume,aUo),e(gt,nUo),g($A,gt,null),e(vr,sUo),e(vr,ho),g(IA,ho,null),e(ho,lUo),e(ho,bme),e(bme,iUo),e(ho,dUo),e(ho,_n),e(_n,cUo),e(_n,vme),e(vme,fUo),e(_n,mUo),e(_n,Tme),e(Tme,gUo),e(_n,hUo),e(_n,Fme),e(Fme,pUo),e(_n,_Uo),e(ho,uUo),e(ho,B),e(B,tv),e(tv,Cme),e(Cme,bUo),e(tv,vUo),e(tv,rq),e(rq,TUo),e(tv,FUo),e(B,CUo),e(B,av),e(av,Mme),e(Mme,MUo),e(av,EUo),e(av,tq),e(tq,yUo),e(av,wUo),e(B,AUo),e(B,nv),e(nv,Eme),e(Eme,LUo),e(nv,BUo),e(nv,aq),e(aq,xUo),e(nv,kUo),e(B,RUo),e(B,sv),e(sv,yme),e(yme,SUo),e(sv,PUo),e(sv,nq),e(nq,$Uo),e(sv,IUo),e(B,jUo),e(B,lv),e(lv,wme),e(wme,DUo),e(lv,NUo),e(lv,sq),e(sq,qUo),e(lv,GUo),e(B,OUo),e(B,iv),e(iv,Ame),e(Ame,XUo),e(iv,VUo),e(iv,lq),e(lq,zUo),e(iv,WUo),e(B,QUo),e(B,dv),e(dv,Lme),e(Lme,HUo),e(dv,UUo),e(dv,iq),e(iq,JUo),e(dv,YUo),e(B,KUo),e(B,cv),e(cv,Bme),e(Bme,ZUo),e(cv,eJo),e(cv,dq),e(dq,oJo),e(cv,rJo),e(B,tJo),e(B,fv),e(fv,xme),e(xme,aJo),e(fv,nJo),e(fv,cq),e(cq,sJo),e(fv,lJo),e(B,iJo),e(B,mv),e(mv,kme),e(kme,dJo),e(mv,cJo),e(mv,fq),e(fq,fJo),e(mv,mJo),e(B,gJo),e(B,gv),e(gv,Rme),e(Rme,hJo),e(gv,pJo),e(gv,mq),e(mq,_Jo),e(gv,uJo),e(B,bJo),e(B,hv),e(hv,Sme),e(Sme,vJo),e(hv,TJo),e(hv,gq),e(gq,FJo),e(hv,CJo),e(B,MJo),e(B,pv),e(pv,Pme),e(Pme,EJo),e(pv,yJo),e(pv,hq),e(hq,wJo),e(pv,AJo),e(B,LJo),e(B,_v),e(_v,$me),e($me,BJo),e(_v,xJo),e(_v,pq),e(pq,kJo),e(_v,RJo),e(B,SJo),e(B,uv),e(uv,Ime),e(Ime,PJo),e(uv,$Jo),e(uv,_q),e(_q,IJo),e(uv,jJo),e(B,DJo),e(B,bv),e(bv,jme),e(jme,NJo),e(bv,qJo),e(bv,uq),e(uq,GJo),e(bv,OJo),e(B,XJo),e(B,Gs),e(Gs,Dme),e(Dme,VJo),e(Gs,zJo),e(Gs,bq),e(bq,WJo),e(Gs,QJo),e(Gs,vq),e(vq,HJo),e(Gs,UJo),e(B,JJo),e(B,vv),e(vv,Nme),e(Nme,YJo),e(vv,KJo),e(vv,Tq),e(Tq,ZJo),e(vv,eYo),e(B,oYo),e(B,Tv),e(Tv,qme),e(qme,rYo),e(Tv,tYo),e(Tv,Fq),e(Fq,aYo),e(Tv,nYo),e(B,sYo),e(B,Fv),e(Fv,Gme),e(Gme,lYo),e(Fv,iYo),e(Fv,Cq),e(Cq,dYo),e(Fv,cYo),e(B,fYo),e(B,Cv),e(Cv,Ome),e(Ome,mYo),e(Cv,gYo),e(Cv,Mq),e(Mq,hYo),e(Cv,pYo),e(B,_Yo),e(B,Mv),e(Mv,Xme),e(Xme,uYo),e(Mv,bYo),e(Mv,Eq),e(Eq,vYo),e(Mv,TYo),e(B,FYo),e(B,Ev),e(Ev,Vme),e(Vme,CYo),e(Ev,MYo),e(Ev,yq),e(yq,EYo),e(Ev,yYo),e(B,wYo),e(B,yv),e(yv,zme),e(zme,AYo),e(yv,LYo),e(yv,wq),e(wq,BYo),e(yv,xYo),e(B,kYo),e(B,wv),e(wv,Wme),e(Wme,RYo),e(wv,SYo),e(wv,Aq),e(Aq,PYo),e(wv,$Yo),e(B,IYo),e(B,Av),e(Av,Qme),e(Qme,jYo),e(Av,DYo),e(Av,Lq),e(Lq,NYo),e(Av,qYo),e(B,GYo),e(B,Lv),e(Lv,Hme),e(Hme,OYo),e(Lv,XYo),e(Lv,Bq),e(Bq,VYo),e(Lv,zYo),e(B,WYo),e(B,Bv),e(Bv,Ume),e(Ume,QYo),e(Bv,HYo),e(Bv,xq),e(xq,UYo),e(Bv,JYo),e(B,YYo),e(B,xv),e(xv,Jme),e(Jme,KYo),e(xv,ZYo),e(xv,kq),e(kq,eKo),e(xv,oKo),e(B,rKo),e(B,kv),e(kv,Yme),e(Yme,tKo),e(kv,aKo),e(kv,Rq),e(Rq,nKo),e(kv,sKo),e(B,lKo),e(B,Rv),e(Rv,Kme),e(Kme,iKo),e(Rv,dKo),e(Rv,Sq),e(Sq,cKo),e(Rv,fKo),e(B,mKo),e(B,Sv),e(Sv,Zme),e(Zme,gKo),e(Sv,hKo),e(Sv,Pq),e(Pq,pKo),e(Sv,_Ko),e(B,uKo),e(B,Pv),e(Pv,ege),e(ege,bKo),e(Pv,vKo),e(Pv,$q),e($q,TKo),e(Pv,FKo),e(B,CKo),e(B,$v),e($v,oge),e(oge,MKo),e($v,EKo),e($v,Iq),e(Iq,yKo),e($v,wKo),e(B,AKo),e(B,Iv),e(Iv,rge),e(rge,LKo),e(Iv,BKo),e(Iv,jq),e(jq,xKo),e(Iv,kKo),e(B,RKo),e(B,jv),e(jv,tge),e(tge,SKo),e(jv,PKo),e(jv,Dq),e(Dq,$Ko),e(jv,IKo),e(B,jKo),e(B,Dv),e(Dv,age),e(age,DKo),e(Dv,NKo),e(Dv,Nq),e(Nq,qKo),e(Dv,GKo),e(B,OKo),e(B,Nv),e(Nv,nge),e(nge,XKo),e(Nv,VKo),e(Nv,qq),e(qq,zKo),e(Nv,WKo),e(B,QKo),e(B,qv),e(qv,sge),e(sge,HKo),e(qv,UKo),e(qv,Gq),e(Gq,JKo),e(qv,YKo),e(B,KKo),e(B,Gv),e(Gv,lge),e(lge,ZKo),e(Gv,eZo),e(Gv,Oq),e(Oq,oZo),e(Gv,rZo),e(B,tZo),e(B,Ov),e(Ov,ige),e(ige,aZo),e(Ov,nZo),e(Ov,Xq),e(Xq,sZo),e(Ov,lZo),e(B,iZo),e(B,Xv),e(Xv,dge),e(dge,dZo),e(Xv,cZo),e(Xv,Vq),e(Vq,fZo),e(Xv,mZo),e(B,gZo),e(B,Vv),e(Vv,cge),e(cge,hZo),e(Vv,pZo),e(Vv,zq),e(zq,_Zo),e(Vv,uZo),e(ho,bZo),e(ho,fge),e(fge,vZo),e(ho,TZo),g(jA,ho,null),b(c,yke,u),b(c,_c,u),e(_c,zv),e(zv,mge),g(DA,mge,null),e(_c,FZo),e(_c,gge),e(gge,CZo),b(c,wke,u),b(c,Tr,u),g(NA,Tr,null),e(Tr,MZo),e(Tr,uc),e(uc,EZo),e(uc,hge),e(hge,yZo),e(uc,wZo),e(uc,pge),e(pge,AZo),e(uc,LZo),e(Tr,BZo),e(Tr,qA),e(qA,xZo),e(qA,_ge),e(_ge,kZo),e(qA,RZo),e(Tr,SZo),e(Tr,ht),g(GA,ht,null),e(ht,PZo),e(ht,uge),e(uge,$Zo),e(ht,IZo),e(ht,bc),e(bc,jZo),e(bc,bge),e(bge,DZo),e(bc,NZo),e(bc,vge),e(vge,qZo),e(bc,GZo),e(ht,OZo),e(ht,Tge),e(Tge,XZo),e(ht,VZo),g(OA,ht,null),e(Tr,zZo),e(Tr,po),g(XA,po,null),e(po,WZo),e(po,Fge),e(Fge,QZo),e(po,HZo),e(po,un),e(un,UZo),e(un,Cge),e(Cge,JZo),e(un,YZo),e(un,Mge),e(Mge,KZo),e(un,ZZo),e(un,Ege),e(Ege,eer),e(un,oer),e(po,rer),e(po,H),e(H,Wv),e(Wv,yge),e(yge,ter),e(Wv,aer),e(Wv,Wq),e(Wq,ner),e(Wv,ser),e(H,ler),e(H,Qv),e(Qv,wge),e(wge,ier),e(Qv,der),e(Qv,Qq),e(Qq,cer),e(Qv,fer),e(H,mer),e(H,Hv),e(Hv,Age),e(Age,ger),e(Hv,her),e(Hv,Hq),e(Hq,per),e(Hv,_er),e(H,uer),e(H,Uv),e(Uv,Lge),e(Lge,ber),e(Uv,ver),e(Uv,Uq),e(Uq,Ter),e(Uv,Fer),e(H,Cer),e(H,Jv),e(Jv,Bge),e(Bge,Mer),e(Jv,Eer),e(Jv,Jq),e(Jq,yer),e(Jv,wer),e(H,Aer),e(H,Yv),e(Yv,xge),e(xge,Ler),e(Yv,Ber),e(Yv,Yq),e(Yq,xer),e(Yv,ker),e(H,Rer),e(H,Kv),e(Kv,kge),e(kge,Ser),e(Kv,Per),e(Kv,Kq),e(Kq,$er),e(Kv,Ier),e(H,jer),e(H,Zv),e(Zv,Rge),e(Rge,Der),e(Zv,Ner),e(Zv,Zq),e(Zq,qer),e(Zv,Ger),e(H,Oer),e(H,e6),e(e6,Sge),e(Sge,Xer),e(e6,Ver),e(e6,eG),e(eG,zer),e(e6,Wer),e(H,Qer),e(H,o6),e(o6,Pge),e(Pge,Her),e(o6,Uer),e(o6,oG),e(oG,Jer),e(o6,Yer),e(H,Ker),e(H,r6),e(r6,$ge),e($ge,Zer),e(r6,eor),e(r6,rG),e(rG,oor),e(r6,ror),e(H,tor),e(H,t6),e(t6,Ige),e(Ige,aor),e(t6,nor),e(t6,tG),e(tG,sor),e(t6,lor),e(H,ior),e(H,a6),e(a6,jge),e(jge,dor),e(a6,cor),e(a6,aG),e(aG,mor),e(a6,gor),e(H,hor),e(H,n6),e(n6,Dge),e(Dge,por),e(n6,_or),e(n6,nG),e(nG,uor),e(n6,bor),e(H,vor),e(H,s6),e(s6,Nge),e(Nge,Tor),e(s6,For),e(s6,sG),e(sG,Cor),e(s6,Mor),e(H,Eor),e(H,l6),e(l6,qge),e(qge,yor),e(l6,wor),e(l6,lG),e(lG,Aor),e(l6,Lor),e(H,Bor),e(H,i6),e(i6,Gge),e(Gge,xor),e(i6,kor),e(i6,iG),e(iG,Ror),e(i6,Sor),e(H,Por),e(H,d6),e(d6,Oge),e(Oge,$or),e(d6,Ior),e(d6,dG),e(dG,jor),e(d6,Dor),e(H,Nor),e(H,c6),e(c6,Xge),e(Xge,qor),e(c6,Gor),e(c6,cG),e(cG,Oor),e(c6,Xor),e(H,Vor),e(H,f6),e(f6,Vge),e(Vge,zor),e(f6,Wor),e(f6,fG),e(fG,Qor),e(f6,Hor),e(H,Uor),e(H,m6),e(m6,zge),e(zge,Jor),e(m6,Yor),e(m6,mG),e(mG,Kor),e(m6,Zor),e(H,err),e(H,g6),e(g6,Wge),e(Wge,orr),e(g6,rrr),e(g6,gG),e(gG,trr),e(g6,arr),e(po,nrr),e(po,Qge),e(Qge,srr),e(po,lrr),g(VA,po,null),b(c,Ake,u),b(c,vc,u),e(vc,h6),e(h6,Hge),g(zA,Hge,null),e(vc,irr),e(vc,Uge),e(Uge,drr),b(c,Lke,u),b(c,Fr,u),g(WA,Fr,null),e(Fr,crr),e(Fr,Tc),e(Tc,frr),e(Tc,Jge),e(Jge,mrr),e(Tc,grr),e(Tc,Yge),e(Yge,hrr),e(Tc,prr),e(Fr,_rr),e(Fr,QA),e(QA,urr),e(QA,Kge),e(Kge,brr),e(QA,vrr),e(Fr,Trr),e(Fr,pt),g(HA,pt,null),e(pt,Frr),e(pt,Zge),e(Zge,Crr),e(pt,Mrr),e(pt,Fc),e(Fc,Err),e(Fc,ehe),e(ehe,yrr),e(Fc,wrr),e(Fc,ohe),e(ohe,Arr),e(Fc,Lrr),e(pt,Brr),e(pt,rhe),e(rhe,xrr),e(pt,krr),g(UA,pt,null),e(Fr,Rrr),e(Fr,_o),g(JA,_o,null),e(_o,Srr),e(_o,the),e(the,Prr),e(_o,$rr),e(_o,bn),e(bn,Irr),e(bn,ahe),e(ahe,jrr),e(bn,Drr),e(bn,nhe),e(nhe,Nrr),e(bn,qrr),e(bn,she),e(she,Grr),e(bn,Orr),e(_o,Xrr),e(_o,me),e(me,p6),e(p6,lhe),e(lhe,Vrr),e(p6,zrr),e(p6,hG),e(hG,Wrr),e(p6,Qrr),e(me,Hrr),e(me,_6),e(_6,ihe),e(ihe,Urr),e(_6,Jrr),e(_6,pG),e(pG,Yrr),e(_6,Krr),e(me,Zrr),e(me,u6),e(u6,dhe),e(dhe,etr),e(u6,otr),e(u6,_G),e(_G,rtr),e(u6,ttr),e(me,atr),e(me,b6),e(b6,che),e(che,ntr),e(b6,str),e(b6,uG),e(uG,ltr),e(b6,itr),e(me,dtr),e(me,v6),e(v6,fhe),e(fhe,ctr),e(v6,ftr),e(v6,bG),e(bG,mtr),e(v6,gtr),e(me,htr),e(me,T6),e(T6,mhe),e(mhe,ptr),e(T6,_tr),e(T6,vG),e(vG,utr),e(T6,btr),e(me,vtr),e(me,F6),e(F6,ghe),e(ghe,Ttr),e(F6,Ftr),e(F6,TG),e(TG,Ctr),e(F6,Mtr),e(me,Etr),e(me,C6),e(C6,hhe),e(hhe,ytr),e(C6,wtr),e(C6,FG),e(FG,Atr),e(C6,Ltr),e(me,Btr),e(me,M6),e(M6,phe),e(phe,xtr),e(M6,ktr),e(M6,CG),e(CG,Rtr),e(M6,Str),e(me,Ptr),e(me,E6),e(E6,_he),e(_he,$tr),e(E6,Itr),e(E6,MG),e(MG,jtr),e(E6,Dtr),e(me,Ntr),e(me,y6),e(y6,uhe),e(uhe,qtr),e(y6,Gtr),e(y6,EG),e(EG,Otr),e(y6,Xtr),e(_o,Vtr),e(_o,bhe),e(bhe,ztr),e(_o,Wtr),g(YA,_o,null),b(c,Bke,u),b(c,Cc,u),e(Cc,w6),e(w6,vhe),g(KA,vhe,null),e(Cc,Qtr),e(Cc,The),e(The,Htr),b(c,xke,u),b(c,Cr,u),g(ZA,Cr,null),e(Cr,Utr),e(Cr,Mc),e(Mc,Jtr),e(Mc,Fhe),e(Fhe,Ytr),e(Mc,Ktr),e(Mc,Che),e(Che,Ztr),e(Mc,ear),e(Cr,oar),e(Cr,e0),e(e0,rar),e(e0,Mhe),e(Mhe,tar),e(e0,aar),e(Cr,nar),e(Cr,_t),g(o0,_t,null),e(_t,sar),e(_t,Ehe),e(Ehe,lar),e(_t,iar),e(_t,Ec),e(Ec,dar),e(Ec,yhe),e(yhe,car),e(Ec,far),e(Ec,whe),e(whe,mar),e(Ec,gar),e(_t,har),e(_t,Ahe),e(Ahe,par),e(_t,_ar),g(r0,_t,null),e(Cr,uar),e(Cr,uo),g(t0,uo,null),e(uo,bar),e(uo,Lhe),e(Lhe,Tar),e(uo,Far),e(uo,vn),e(vn,Car),e(vn,Bhe),e(Bhe,Mar),e(vn,Ear),e(vn,xhe),e(xhe,yar),e(vn,war),e(vn,khe),e(khe,Aar),e(vn,Lar),e(uo,Bar),e(uo,a0),e(a0,A6),e(A6,Rhe),e(Rhe,xar),e(A6,kar),e(A6,yG),e(yG,Rar),e(A6,Sar),e(a0,Par),e(a0,L6),e(L6,She),e(She,$ar),e(L6,Iar),e(L6,wG),e(wG,jar),e(L6,Dar),e(uo,Nar),e(uo,Phe),e(Phe,qar),e(uo,Gar),g(n0,uo,null),b(c,kke,u),b(c,yc,u),e(yc,B6),e(B6,$he),g(s0,$he,null),e(yc,Oar),e(yc,Ihe),e(Ihe,Xar),b(c,Rke,u),b(c,Mr,u),g(l0,Mr,null),e(Mr,Var),e(Mr,wc),e(wc,zar),e(wc,jhe),e(jhe,War),e(wc,Qar),e(wc,Dhe),e(Dhe,Har),e(wc,Uar),e(Mr,Jar),e(Mr,i0),e(i0,Yar),e(i0,Nhe),e(Nhe,Kar),e(i0,Zar),e(Mr,enr),e(Mr,ut),g(d0,ut,null),e(ut,onr),e(ut,qhe),e(qhe,rnr),e(ut,tnr),e(ut,Ac),e(Ac,anr),e(Ac,Ghe),e(Ghe,nnr),e(Ac,snr),e(Ac,Ohe),e(Ohe,lnr),e(Ac,inr),e(ut,dnr),e(ut,Xhe),e(Xhe,cnr),e(ut,fnr),g(c0,ut,null),e(Mr,mnr),e(Mr,bo),g(f0,bo,null),e(bo,gnr),e(bo,Vhe),e(Vhe,hnr),e(bo,pnr),e(bo,Tn),e(Tn,_nr),e(Tn,zhe),e(zhe,unr),e(Tn,bnr),e(Tn,Whe),e(Whe,vnr),e(Tn,Tnr),e(Tn,Qhe),e(Qhe,Fnr),e(Tn,Cnr),e(bo,Mnr),e(bo,Y),e(Y,x6),e(x6,Hhe),e(Hhe,Enr),e(x6,ynr),e(x6,AG),e(AG,wnr),e(x6,Anr),e(Y,Lnr),e(Y,k6),e(k6,Uhe),e(Uhe,Bnr),e(k6,xnr),e(k6,LG),e(LG,knr),e(k6,Rnr),e(Y,Snr),e(Y,R6),e(R6,Jhe),e(Jhe,Pnr),e(R6,$nr),e(R6,BG),e(BG,Inr),e(R6,jnr),e(Y,Dnr),e(Y,S6),e(S6,Yhe),e(Yhe,Nnr),e(S6,qnr),e(S6,xG),e(xG,Gnr),e(S6,Onr),e(Y,Xnr),e(Y,P6),e(P6,Khe),e(Khe,Vnr),e(P6,znr),e(P6,kG),e(kG,Wnr),e(P6,Qnr),e(Y,Hnr),e(Y,$6),e($6,Zhe),e(Zhe,Unr),e($6,Jnr),e($6,RG),e(RG,Ynr),e($6,Knr),e(Y,Znr),e(Y,I6),e(I6,epe),e(epe,esr),e(I6,osr),e(I6,SG),e(SG,rsr),e(I6,tsr),e(Y,asr),e(Y,j6),e(j6,ope),e(ope,nsr),e(j6,ssr),e(j6,PG),e(PG,lsr),e(j6,isr),e(Y,dsr),e(Y,D6),e(D6,rpe),e(rpe,csr),e(D6,fsr),e(D6,$G),e($G,msr),e(D6,gsr),e(Y,hsr),e(Y,N6),e(N6,tpe),e(tpe,psr),e(N6,_sr),e(N6,IG),e(IG,usr),e(N6,bsr),e(Y,vsr),e(Y,q6),e(q6,ape),e(ape,Tsr),e(q6,Fsr),e(q6,jG),e(jG,Csr),e(q6,Msr),e(Y,Esr),e(Y,G6),e(G6,npe),e(npe,ysr),e(G6,wsr),e(G6,DG),e(DG,Asr),e(G6,Lsr),e(Y,Bsr),e(Y,O6),e(O6,spe),e(spe,xsr),e(O6,ksr),e(O6,NG),e(NG,Rsr),e(O6,Ssr),e(Y,Psr),e(Y,X6),e(X6,lpe),e(lpe,$sr),e(X6,Isr),e(X6,qG),e(qG,jsr),e(X6,Dsr),e(Y,Nsr),e(Y,V6),e(V6,ipe),e(ipe,qsr),e(V6,Gsr),e(V6,GG),e(GG,Osr),e(V6,Xsr),e(Y,Vsr),e(Y,z6),e(z6,dpe),e(dpe,zsr),e(z6,Wsr),e(z6,OG),e(OG,Qsr),e(z6,Hsr),e(Y,Usr),e(Y,W6),e(W6,cpe),e(cpe,Jsr),e(W6,Ysr),e(W6,XG),e(XG,Ksr),e(W6,Zsr),e(Y,elr),e(Y,Q6),e(Q6,fpe),e(fpe,olr),e(Q6,rlr),e(Q6,VG),e(VG,tlr),e(Q6,alr),e(Y,nlr),e(Y,H6),e(H6,mpe),e(mpe,slr),e(H6,llr),e(H6,zG),e(zG,ilr),e(H6,dlr),e(Y,clr),e(Y,U6),e(U6,gpe),e(gpe,flr),e(U6,mlr),e(U6,WG),e(WG,glr),e(U6,hlr),e(bo,plr),e(bo,hpe),e(hpe,_lr),e(bo,ulr),g(m0,bo,null),b(c,Ske,u),b(c,Lc,u),e(Lc,J6),e(J6,ppe),g(g0,ppe,null),e(Lc,blr),e(Lc,_pe),e(_pe,vlr),b(c,Pke,u),b(c,Er,u),g(h0,Er,null),e(Er,Tlr),e(Er,Bc),e(Bc,Flr),e(Bc,upe),e(upe,Clr),e(Bc,Mlr),e(Bc,bpe),e(bpe,Elr),e(Bc,ylr),e(Er,wlr),e(Er,p0),e(p0,Alr),e(p0,vpe),e(vpe,Llr),e(p0,Blr),e(Er,xlr),e(Er,bt),g(_0,bt,null),e(bt,klr),e(bt,Tpe),e(Tpe,Rlr),e(bt,Slr),e(bt,xc),e(xc,Plr),e(xc,Fpe),e(Fpe,$lr),e(xc,Ilr),e(xc,Cpe),e(Cpe,jlr),e(xc,Dlr),e(bt,Nlr),e(bt,Mpe),e(Mpe,qlr),e(bt,Glr),g(u0,bt,null),e(Er,Olr),e(Er,vo),g(b0,vo,null),e(vo,Xlr),e(vo,Epe),e(Epe,Vlr),e(vo,zlr),e(vo,Fn),e(Fn,Wlr),e(Fn,ype),e(ype,Qlr),e(Fn,Hlr),e(Fn,wpe),e(wpe,Ulr),e(Fn,Jlr),e(Fn,Ape),e(Ape,Ylr),e(Fn,Klr),e(vo,Zlr),e(vo,_e),e(_e,Y6),e(Y6,Lpe),e(Lpe,eir),e(Y6,oir),e(Y6,QG),e(QG,rir),e(Y6,tir),e(_e,air),e(_e,K6),e(K6,Bpe),e(Bpe,nir),e(K6,sir),e(K6,HG),e(HG,lir),e(K6,iir),e(_e,dir),e(_e,Z6),e(Z6,xpe),e(xpe,cir),e(Z6,fir),e(Z6,UG),e(UG,mir),e(Z6,gir),e(_e,hir),e(_e,eT),e(eT,kpe),e(kpe,pir),e(eT,_ir),e(eT,JG),e(JG,uir),e(eT,bir),e(_e,vir),e(_e,oT),e(oT,Rpe),e(Rpe,Tir),e(oT,Fir),e(oT,YG),e(YG,Cir),e(oT,Mir),e(_e,Eir),e(_e,rT),e(rT,Spe),e(Spe,yir),e(rT,wir),e(rT,KG),e(KG,Air),e(rT,Lir),e(_e,Bir),e(_e,tT),e(tT,Ppe),e(Ppe,xir),e(tT,kir),e(tT,ZG),e(ZG,Rir),e(tT,Sir),e(_e,Pir),e(_e,aT),e(aT,$pe),e($pe,$ir),e(aT,Iir),e(aT,eO),e(eO,jir),e(aT,Dir),e(_e,Nir),e(_e,nT),e(nT,Ipe),e(Ipe,qir),e(nT,Gir),e(nT,oO),e(oO,Oir),e(nT,Xir),e(_e,Vir),e(_e,sT),e(sT,jpe),e(jpe,zir),e(sT,Wir),e(sT,rO),e(rO,Qir),e(sT,Hir),e(vo,Uir),e(vo,Dpe),e(Dpe,Jir),e(vo,Yir),g(v0,vo,null),b(c,$ke,u),b(c,kc,u),e(kc,lT),e(lT,Npe),g(T0,Npe,null),e(kc,Kir),e(kc,qpe),e(qpe,Zir),b(c,Ike,u),b(c,yr,u),g(F0,yr,null),e(yr,edr),e(yr,Rc),e(Rc,odr),e(Rc,Gpe),e(Gpe,rdr),e(Rc,tdr),e(Rc,Ope),e(Ope,adr),e(Rc,ndr),e(yr,sdr),e(yr,C0),e(C0,ldr),e(C0,Xpe),e(Xpe,idr),e(C0,ddr),e(yr,cdr),e(yr,vt),g(M0,vt,null),e(vt,fdr),e(vt,Vpe),e(Vpe,mdr),e(vt,gdr),e(vt,Sc),e(Sc,hdr),e(Sc,zpe),e(zpe,pdr),e(Sc,_dr),e(Sc,Wpe),e(Wpe,udr),e(Sc,bdr),e(vt,vdr),e(vt,Qpe),e(Qpe,Tdr),e(vt,Fdr),g(E0,vt,null),e(yr,Cdr),e(yr,To),g(y0,To,null),e(To,Mdr),e(To,Hpe),e(Hpe,Edr),e(To,ydr),e(To,Cn),e(Cn,wdr),e(Cn,Upe),e(Upe,Adr),e(Cn,Ldr),e(Cn,Jpe),e(Jpe,Bdr),e(Cn,xdr),e(Cn,Ype),e(Ype,kdr),e(Cn,Rdr),e(To,Sdr),e(To,X),e(X,iT),e(iT,Kpe),e(Kpe,Pdr),e(iT,$dr),e(iT,tO),e(tO,Idr),e(iT,jdr),e(X,Ddr),e(X,dT),e(dT,Zpe),e(Zpe,Ndr),e(dT,qdr),e(dT,aO),e(aO,Gdr),e(dT,Odr),e(X,Xdr),e(X,cT),e(cT,e_e),e(e_e,Vdr),e(cT,zdr),e(cT,nO),e(nO,Wdr),e(cT,Qdr),e(X,Hdr),e(X,fT),e(fT,o_e),e(o_e,Udr),e(fT,Jdr),e(fT,sO),e(sO,Ydr),e(fT,Kdr),e(X,Zdr),e(X,mT),e(mT,r_e),e(r_e,ecr),e(mT,ocr),e(mT,lO),e(lO,rcr),e(mT,tcr),e(X,acr),e(X,gT),e(gT,t_e),e(t_e,ncr),e(gT,scr),e(gT,iO),e(iO,lcr),e(gT,icr),e(X,dcr),e(X,hT),e(hT,a_e),e(a_e,ccr),e(hT,fcr),e(hT,dO),e(dO,mcr),e(hT,gcr),e(X,hcr),e(X,pT),e(pT,n_e),e(n_e,pcr),e(pT,_cr),e(pT,cO),e(cO,ucr),e(pT,bcr),e(X,vcr),e(X,_T),e(_T,s_e),e(s_e,Tcr),e(_T,Fcr),e(_T,fO),e(fO,Ccr),e(_T,Mcr),e(X,Ecr),e(X,uT),e(uT,l_e),e(l_e,ycr),e(uT,wcr),e(uT,mO),e(mO,Acr),e(uT,Lcr),e(X,Bcr),e(X,bT),e(bT,i_e),e(i_e,xcr),e(bT,kcr),e(bT,gO),e(gO,Rcr),e(bT,Scr),e(X,Pcr),e(X,vT),e(vT,d_e),e(d_e,$cr),e(vT,Icr),e(vT,hO),e(hO,jcr),e(vT,Dcr),e(X,Ncr),e(X,TT),e(TT,c_e),e(c_e,qcr),e(TT,Gcr),e(TT,pO),e(pO,Ocr),e(TT,Xcr),e(X,Vcr),e(X,FT),e(FT,f_e),e(f_e,zcr),e(FT,Wcr),e(FT,_O),e(_O,Qcr),e(FT,Hcr),e(X,Ucr),e(X,CT),e(CT,m_e),e(m_e,Jcr),e(CT,Ycr),e(CT,uO),e(uO,Kcr),e(CT,Zcr),e(X,efr),e(X,MT),e(MT,g_e),e(g_e,ofr),e(MT,rfr),e(MT,bO),e(bO,tfr),e(MT,afr),e(X,nfr),e(X,ET),e(ET,h_e),e(h_e,sfr),e(ET,lfr),e(ET,vO),e(vO,ifr),e(ET,dfr),e(X,cfr),e(X,yT),e(yT,p_e),e(p_e,ffr),e(yT,mfr),e(yT,TO),e(TO,gfr),e(yT,hfr),e(X,pfr),e(X,wT),e(wT,__e),e(__e,_fr),e(wT,ufr),e(wT,FO),e(FO,bfr),e(wT,vfr),e(X,Tfr),e(X,AT),e(AT,u_e),e(u_e,Ffr),e(AT,Cfr),e(AT,CO),e(CO,Mfr),e(AT,Efr),e(X,yfr),e(X,LT),e(LT,b_e),e(b_e,wfr),e(LT,Afr),e(LT,MO),e(MO,Lfr),e(LT,Bfr),e(X,xfr),e(X,BT),e(BT,v_e),e(v_e,kfr),e(BT,Rfr),e(BT,EO),e(EO,Sfr),e(BT,Pfr),e(X,$fr),e(X,xT),e(xT,T_e),e(T_e,Ifr),e(xT,jfr),e(xT,yO),e(yO,Dfr),e(xT,Nfr),e(X,qfr),e(X,kT),e(kT,F_e),e(F_e,Gfr),e(kT,Ofr),e(kT,wO),e(wO,Xfr),e(kT,Vfr),e(X,zfr),e(X,RT),e(RT,C_e),e(C_e,Wfr),e(RT,Qfr),e(RT,AO),e(AO,Hfr),e(RT,Ufr),e(X,Jfr),e(X,ST),e(ST,M_e),e(M_e,Yfr),e(ST,Kfr),e(ST,LO),e(LO,Zfr),e(ST,emr),e(To,omr),e(To,E_e),e(E_e,rmr),e(To,tmr),g(w0,To,null),b(c,jke,u),b(c,Pc,u),e(Pc,PT),e(PT,y_e),g(A0,y_e,null),e(Pc,amr),e(Pc,w_e),e(w_e,nmr),b(c,Dke,u),b(c,wr,u),g(L0,wr,null),e(wr,smr),e(wr,$c),e($c,lmr),e($c,A_e),e(A_e,imr),e($c,dmr),e($c,L_e),e(L_e,cmr),e($c,fmr),e(wr,mmr),e(wr,B0),e(B0,gmr),e(B0,B_e),e(B_e,hmr),e(B0,pmr),e(wr,_mr),e(wr,Tt),g(x0,Tt,null),e(Tt,umr),e(Tt,x_e),e(x_e,bmr),e(Tt,vmr),e(Tt,Ic),e(Ic,Tmr),e(Ic,k_e),e(k_e,Fmr),e(Ic,Cmr),e(Ic,R_e),e(R_e,Mmr),e(Ic,Emr),e(Tt,ymr),e(Tt,S_e),e(S_e,wmr),e(Tt,Amr),g(k0,Tt,null),e(wr,Lmr),e(wr,Fo),g(R0,Fo,null),e(Fo,Bmr),e(Fo,P_e),e(P_e,xmr),e(Fo,kmr),e(Fo,Mn),e(Mn,Rmr),e(Mn,$_e),e($_e,Smr),e(Mn,Pmr),e(Mn,I_e),e(I_e,$mr),e(Mn,Imr),e(Mn,j_e),e(j_e,jmr),e(Mn,Dmr),e(Fo,Nmr),e(Fo,te),e(te,$T),e($T,D_e),e(D_e,qmr),e($T,Gmr),e($T,BO),e(BO,Omr),e($T,Xmr),e(te,Vmr),e(te,IT),e(IT,N_e),e(N_e,zmr),e(IT,Wmr),e(IT,xO),e(xO,Qmr),e(IT,Hmr),e(te,Umr),e(te,jT),e(jT,q_e),e(q_e,Jmr),e(jT,Ymr),e(jT,kO),e(kO,Kmr),e(jT,Zmr),e(te,egr),e(te,DT),e(DT,G_e),e(G_e,ogr),e(DT,rgr),e(DT,RO),e(RO,tgr),e(DT,agr),e(te,ngr),e(te,NT),e(NT,O_e),e(O_e,sgr),e(NT,lgr),e(NT,SO),e(SO,igr),e(NT,dgr),e(te,cgr),e(te,qT),e(qT,X_e),e(X_e,fgr),e(qT,mgr),e(qT,PO),e(PO,ggr),e(qT,hgr),e(te,pgr),e(te,GT),e(GT,V_e),e(V_e,_gr),e(GT,ugr),e(GT,$O),e($O,bgr),e(GT,vgr),e(te,Tgr),e(te,OT),e(OT,z_e),e(z_e,Fgr),e(OT,Cgr),e(OT,IO),e(IO,Mgr),e(OT,Egr),e(te,ygr),e(te,XT),e(XT,W_e),e(W_e,wgr),e(XT,Agr),e(XT,jO),e(jO,Lgr),e(XT,Bgr),e(te,xgr),e(te,VT),e(VT,Q_e),e(Q_e,kgr),e(VT,Rgr),e(VT,DO),e(DO,Sgr),e(VT,Pgr),e(te,$gr),e(te,zT),e(zT,H_e),e(H_e,Igr),e(zT,jgr),e(zT,NO),e(NO,Dgr),e(zT,Ngr),e(te,qgr),e(te,WT),e(WT,U_e),e(U_e,Ggr),e(WT,Ogr),e(WT,qO),e(qO,Xgr),e(WT,Vgr),e(te,zgr),e(te,QT),e(QT,J_e),e(J_e,Wgr),e(QT,Qgr),e(QT,GO),e(GO,Hgr),e(QT,Ugr),e(te,Jgr),e(te,HT),e(HT,Y_e),e(Y_e,Ygr),e(HT,Kgr),e(HT,OO),e(OO,Zgr),e(HT,ehr),e(te,ohr),e(te,UT),e(UT,K_e),e(K_e,rhr),e(UT,thr),e(UT,XO),e(XO,ahr),e(UT,nhr),e(te,shr),e(te,JT),e(JT,Z_e),e(Z_e,lhr),e(JT,ihr),e(JT,VO),e(VO,dhr),e(JT,chr),e(te,fhr),e(te,YT),e(YT,eue),e(eue,mhr),e(YT,ghr),e(YT,zO),e(zO,hhr),e(YT,phr),e(Fo,_hr),e(Fo,oue),e(oue,uhr),e(Fo,bhr),g(S0,Fo,null),b(c,Nke,u),b(c,jc,u),e(jc,KT),e(KT,rue),g(P0,rue,null),e(jc,vhr),e(jc,tue),e(tue,Thr),b(c,qke,u),b(c,Ar,u),g($0,Ar,null),e(Ar,Fhr),e(Ar,Dc),e(Dc,Chr),e(Dc,aue),e(aue,Mhr),e(Dc,Ehr),e(Dc,nue),e(nue,yhr),e(Dc,whr),e(Ar,Ahr),e(Ar,I0),e(I0,Lhr),e(I0,sue),e(sue,Bhr),e(I0,xhr),e(Ar,khr),e(Ar,Ft),g(j0,Ft,null),e(Ft,Rhr),e(Ft,lue),e(lue,Shr),e(Ft,Phr),e(Ft,Nc),e(Nc,$hr),e(Nc,iue),e(iue,Ihr),e(Nc,jhr),e(Nc,due),e(due,Dhr),e(Nc,Nhr),e(Ft,qhr),e(Ft,cue),e(cue,Ghr),e(Ft,Ohr),g(D0,Ft,null),e(Ar,Xhr),e(Ar,Co),g(N0,Co,null),e(Co,Vhr),e(Co,fue),e(fue,zhr),e(Co,Whr),e(Co,En),e(En,Qhr),e(En,mue),e(mue,Hhr),e(En,Uhr),e(En,gue),e(gue,Jhr),e(En,Yhr),e(En,hue),e(hue,Khr),e(En,Zhr),e(Co,epr),e(Co,pue),e(pue,ZT),e(ZT,_ue),e(_ue,opr),e(ZT,rpr),e(ZT,WO),e(WO,tpr),e(ZT,apr),e(Co,npr),e(Co,uue),e(uue,spr),e(Co,lpr),g(q0,Co,null),b(c,Gke,u),b(c,qc,u),e(qc,eF),e(eF,bue),g(G0,bue,null),e(qc,ipr),e(qc,vue),e(vue,dpr),b(c,Oke,u),b(c,Lr,u),g(O0,Lr,null),e(Lr,cpr),e(Lr,Gc),e(Gc,fpr),e(Gc,Tue),e(Tue,mpr),e(Gc,gpr),e(Gc,Fue),e(Fue,hpr),e(Gc,ppr),e(Lr,_pr),e(Lr,X0),e(X0,upr),e(X0,Cue),e(Cue,bpr),e(X0,vpr),e(Lr,Tpr),e(Lr,Ct),g(V0,Ct,null),e(Ct,Fpr),e(Ct,Mue),e(Mue,Cpr),e(Ct,Mpr),e(Ct,Oc),e(Oc,Epr),e(Oc,Eue),e(Eue,ypr),e(Oc,wpr),e(Oc,yue),e(yue,Apr),e(Oc,Lpr),e(Ct,Bpr),e(Ct,wue),e(wue,xpr),e(Ct,kpr),g(z0,Ct,null),e(Lr,Rpr),e(Lr,Mo),g(W0,Mo,null),e(Mo,Spr),e(Mo,Aue),e(Aue,Ppr),e(Mo,$pr),e(Mo,yn),e(yn,Ipr),e(yn,Lue),e(Lue,jpr),e(yn,Dpr),e(yn,Bue),e(Bue,Npr),e(yn,qpr),e(yn,xue),e(xue,Gpr),e(yn,Opr),e(Mo,Xpr),e(Mo,K),e(K,oF),e(oF,kue),e(kue,Vpr),e(oF,zpr),e(oF,QO),e(QO,Wpr),e(oF,Qpr),e(K,Hpr),e(K,rF),e(rF,Rue),e(Rue,Upr),e(rF,Jpr),e(rF,HO),e(HO,Ypr),e(rF,Kpr),e(K,Zpr),e(K,tF),e(tF,Sue),e(Sue,e_r),e(tF,o_r),e(tF,UO),e(UO,r_r),e(tF,t_r),e(K,a_r),e(K,aF),e(aF,Pue),e(Pue,n_r),e(aF,s_r),e(aF,JO),e(JO,l_r),e(aF,i_r),e(K,d_r),e(K,nF),e(nF,$ue),e($ue,c_r),e(nF,f_r),e(nF,YO),e(YO,m_r),e(nF,g_r),e(K,h_r),e(K,sF),e(sF,Iue),e(Iue,p_r),e(sF,__r),e(sF,KO),e(KO,u_r),e(sF,b_r),e(K,v_r),e(K,lF),e(lF,jue),e(jue,T_r),e(lF,F_r),e(lF,ZO),e(ZO,C_r),e(lF,M_r),e(K,E_r),e(K,iF),e(iF,Due),e(Due,y_r),e(iF,w_r),e(iF,eX),e(eX,A_r),e(iF,L_r),e(K,B_r),e(K,dF),e(dF,Nue),e(Nue,x_r),e(dF,k_r),e(dF,oX),e(oX,R_r),e(dF,S_r),e(K,P_r),e(K,cF),e(cF,que),e(que,$_r),e(cF,I_r),e(cF,rX),e(rX,j_r),e(cF,D_r),e(K,N_r),e(K,fF),e(fF,Gue),e(Gue,q_r),e(fF,G_r),e(fF,tX),e(tX,O_r),e(fF,X_r),e(K,V_r),e(K,mF),e(mF,Oue),e(Oue,z_r),e(mF,W_r),e(mF,aX),e(aX,Q_r),e(mF,H_r),e(K,U_r),e(K,gF),e(gF,Xue),e(Xue,J_r),e(gF,Y_r),e(gF,nX),e(nX,K_r),e(gF,Z_r),e(K,eur),e(K,hF),e(hF,Vue),e(Vue,our),e(hF,rur),e(hF,sX),e(sX,tur),e(hF,aur),e(K,nur),e(K,pF),e(pF,zue),e(zue,sur),e(pF,lur),e(pF,lX),e(lX,iur),e(pF,dur),e(K,cur),e(K,_F),e(_F,Wue),e(Wue,fur),e(_F,mur),e(_F,iX),e(iX,gur),e(_F,hur),e(K,pur),e(K,uF),e(uF,Que),e(Que,_ur),e(uF,uur),e(uF,dX),e(dX,bur),e(uF,vur),e(K,Tur),e(K,bF),e(bF,Hue),e(Hue,Fur),e(bF,Cur),e(bF,cX),e(cX,Mur),e(bF,Eur),e(K,yur),e(K,vF),e(vF,Uue),e(Uue,wur),e(vF,Aur),e(vF,fX),e(fX,Lur),e(vF,Bur),e(K,xur),e(K,TF),e(TF,Jue),e(Jue,kur),e(TF,Rur),e(TF,mX),e(mX,Sur),e(TF,Pur),e(Mo,$ur),e(Mo,Yue),e(Yue,Iur),e(Mo,jur),g(Q0,Mo,null),b(c,Xke,u),b(c,Xc,u),e(Xc,FF),e(FF,Kue),g(H0,Kue,null),e(Xc,Dur),e(Xc,Zue),e(Zue,Nur),b(c,Vke,u),b(c,Br,u),g(U0,Br,null),e(Br,qur),e(Br,Vc),e(Vc,Gur),e(Vc,e2e),e(e2e,Our),e(Vc,Xur),e(Vc,o2e),e(o2e,Vur),e(Vc,zur),e(Br,Wur),e(Br,J0),e(J0,Qur),e(J0,r2e),e(r2e,Hur),e(J0,Uur),e(Br,Jur),e(Br,Mt),g(Y0,Mt,null),e(Mt,Yur),e(Mt,t2e),e(t2e,Kur),e(Mt,Zur),e(Mt,zc),e(zc,e2r),e(zc,a2e),e(a2e,o2r),e(zc,r2r),e(zc,n2e),e(n2e,t2r),e(zc,a2r),e(Mt,n2r),e(Mt,s2e),e(s2e,s2r),e(Mt,l2r),g(K0,Mt,null),e(Br,i2r),e(Br,Eo),g(Z0,Eo,null),e(Eo,d2r),e(Eo,l2e),e(l2e,c2r),e(Eo,f2r),e(Eo,wn),e(wn,m2r),e(wn,i2e),e(i2e,g2r),e(wn,h2r),e(wn,d2e),e(d2e,p2r),e(wn,_2r),e(wn,c2e),e(c2e,u2r),e(wn,b2r),e(Eo,v2r),e(Eo,Z),e(Z,CF),e(CF,f2e),e(f2e,T2r),e(CF,F2r),e(CF,gX),e(gX,C2r),e(CF,M2r),e(Z,E2r),e(Z,MF),e(MF,m2e),e(m2e,y2r),e(MF,w2r),e(MF,hX),e(hX,A2r),e(MF,L2r),e(Z,B2r),e(Z,EF),e(EF,g2e),e(g2e,x2r),e(EF,k2r),e(EF,pX),e(pX,R2r),e(EF,S2r),e(Z,P2r),e(Z,yF),e(yF,h2e),e(h2e,$2r),e(yF,I2r),e(yF,_X),e(_X,j2r),e(yF,D2r),e(Z,N2r),e(Z,wF),e(wF,p2e),e(p2e,q2r),e(wF,G2r),e(wF,uX),e(uX,O2r),e(wF,X2r),e(Z,V2r),e(Z,AF),e(AF,_2e),e(_2e,z2r),e(AF,W2r),e(AF,bX),e(bX,Q2r),e(AF,H2r),e(Z,U2r),e(Z,LF),e(LF,u2e),e(u2e,J2r),e(LF,Y2r),e(LF,vX),e(vX,K2r),e(LF,Z2r),e(Z,e1r),e(Z,BF),e(BF,b2e),e(b2e,o1r),e(BF,r1r),e(BF,TX),e(TX,t1r),e(BF,a1r),e(Z,n1r),e(Z,xF),e(xF,v2e),e(v2e,s1r),e(xF,l1r),e(xF,FX),e(FX,i1r),e(xF,d1r),e(Z,c1r),e(Z,kF),e(kF,T2e),e(T2e,f1r),e(kF,m1r),e(kF,CX),e(CX,g1r),e(kF,h1r),e(Z,p1r),e(Z,RF),e(RF,F2e),e(F2e,_1r),e(RF,u1r),e(RF,MX),e(MX,b1r),e(RF,v1r),e(Z,T1r),e(Z,SF),e(SF,C2e),e(C2e,F1r),e(SF,C1r),e(SF,EX),e(EX,M1r),e(SF,E1r),e(Z,y1r),e(Z,PF),e(PF,M2e),e(M2e,w1r),e(PF,A1r),e(PF,yX),e(yX,L1r),e(PF,B1r),e(Z,x1r),e(Z,$F),e($F,E2e),e(E2e,k1r),e($F,R1r),e($F,wX),e(wX,S1r),e($F,P1r),e(Z,$1r),e(Z,IF),e(IF,y2e),e(y2e,I1r),e(IF,j1r),e(IF,AX),e(AX,D1r),e(IF,N1r),e(Z,q1r),e(Z,jF),e(jF,w2e),e(w2e,G1r),e(jF,O1r),e(jF,LX),e(LX,X1r),e(jF,V1r),e(Z,z1r),e(Z,DF),e(DF,A2e),e(A2e,W1r),e(DF,Q1r),e(DF,BX),e(BX,H1r),e(DF,U1r),e(Z,J1r),e(Z,NF),e(NF,L2e),e(L2e,Y1r),e(NF,K1r),e(NF,xX),e(xX,Z1r),e(NF,ebr),e(Z,obr),e(Z,qF),e(qF,B2e),e(B2e,rbr),e(qF,tbr),e(qF,kX),e(kX,abr),e(qF,nbr),e(Z,sbr),e(Z,GF),e(GF,x2e),e(x2e,lbr),e(GF,ibr),e(GF,RX),e(RX,dbr),e(GF,cbr),e(Eo,fbr),e(Eo,k2e),e(k2e,mbr),e(Eo,gbr),g(eL,Eo,null),b(c,zke,u),b(c,Wc,u),e(Wc,OF),e(OF,R2e),g(oL,R2e,null),e(Wc,hbr),e(Wc,S2e),e(S2e,pbr),b(c,Wke,u),b(c,xr,u),g(rL,xr,null),e(xr,_br),e(xr,Qc),e(Qc,ubr),e(Qc,P2e),e(P2e,bbr),e(Qc,vbr),e(Qc,$2e),e($2e,Tbr),e(Qc,Fbr),e(xr,Cbr),e(xr,tL),e(tL,Mbr),e(tL,I2e),e(I2e,Ebr),e(tL,ybr),e(xr,wbr),e(xr,Et),g(aL,Et,null),e(Et,Abr),e(Et,j2e),e(j2e,Lbr),e(Et,Bbr),e(Et,Hc),e(Hc,xbr),e(Hc,D2e),e(D2e,kbr),e(Hc,Rbr),e(Hc,N2e),e(N2e,Sbr),e(Hc,Pbr),e(Et,$br),e(Et,q2e),e(q2e,Ibr),e(Et,jbr),g(nL,Et,null),e(xr,Dbr),e(xr,yo),g(sL,yo,null),e(yo,Nbr),e(yo,G2e),e(G2e,qbr),e(yo,Gbr),e(yo,An),e(An,Obr),e(An,O2e),e(O2e,Xbr),e(An,Vbr),e(An,X2e),e(X2e,zbr),e(An,Wbr),e(An,V2e),e(V2e,Qbr),e(An,Hbr),e(yo,Ubr),e(yo,z2e),e(z2e,XF),e(XF,W2e),e(W2e,Jbr),e(XF,Ybr),e(XF,SX),e(SX,Kbr),e(XF,Zbr),e(yo,e3r),e(yo,Q2e),e(Q2e,o3r),e(yo,r3r),g(lL,yo,null),b(c,Qke,u),b(c,Uc,u),e(Uc,VF),e(VF,H2e),g(iL,H2e,null),e(Uc,t3r),e(Uc,U2e),e(U2e,a3r),b(c,Hke,u),b(c,kr,u),g(dL,kr,null),e(kr,n3r),e(kr,Jc),e(Jc,s3r),e(Jc,J2e),e(J2e,l3r),e(Jc,i3r),e(Jc,Y2e),e(Y2e,d3r),e(Jc,c3r),e(kr,f3r),e(kr,cL),e(cL,m3r),e(cL,K2e),e(K2e,g3r),e(cL,h3r),e(kr,p3r),e(kr,yt),g(fL,yt,null),e(yt,_3r),e(yt,Z2e),e(Z2e,u3r),e(yt,b3r),e(yt,Yc),e(Yc,v3r),e(Yc,e1e),e(e1e,T3r),e(Yc,F3r),e(Yc,o1e),e(o1e,C3r),e(Yc,M3r),e(yt,E3r),e(yt,r1e),e(r1e,y3r),e(yt,w3r),g(mL,yt,null),e(kr,A3r),e(kr,wo),g(gL,wo,null),e(wo,L3r),e(wo,t1e),e(t1e,B3r),e(wo,x3r),e(wo,Ln),e(Ln,k3r),e(Ln,a1e),e(a1e,R3r),e(Ln,S3r),e(Ln,n1e),e(n1e,P3r),e(Ln,$3r),e(Ln,s1e),e(s1e,I3r),e(Ln,j3r),e(wo,D3r),e(wo,l1e),e(l1e,zF),e(zF,i1e),e(i1e,N3r),e(zF,q3r),e(zF,PX),e(PX,G3r),e(zF,O3r),e(wo,X3r),e(wo,d1e),e(d1e,V3r),e(wo,z3r),g(hL,wo,null),b(c,Uke,u),b(c,Kc,u),e(Kc,WF),e(WF,c1e),g(pL,c1e,null),e(Kc,W3r),e(Kc,f1e),e(f1e,Q3r),b(c,Jke,u),b(c,Rr,u),g(_L,Rr,null),e(Rr,H3r),e(Rr,Zc),e(Zc,U3r),e(Zc,m1e),e(m1e,J3r),e(Zc,Y3r),e(Zc,g1e),e(g1e,K3r),e(Zc,Z3r),e(Rr,e5r),e(Rr,uL),e(uL,o5r),e(uL,h1e),e(h1e,r5r),e(uL,t5r),e(Rr,a5r),e(Rr,wt),g(bL,wt,null),e(wt,n5r),e(wt,p1e),e(p1e,s5r),e(wt,l5r),e(wt,ef),e(ef,i5r),e(ef,_1e),e(_1e,d5r),e(ef,c5r),e(ef,u1e),e(u1e,f5r),e(ef,m5r),e(wt,g5r),e(wt,b1e),e(b1e,h5r),e(wt,p5r),g(vL,wt,null),e(Rr,_5r),e(Rr,Ao),g(TL,Ao,null),e(Ao,u5r),e(Ao,v1e),e(v1e,b5r),e(Ao,v5r),e(Ao,Bn),e(Bn,T5r),e(Bn,T1e),e(T1e,F5r),e(Bn,C5r),e(Bn,F1e),e(F1e,M5r),e(Bn,E5r),e(Bn,C1e),e(C1e,y5r),e(Bn,w5r),e(Ao,A5r),e(Ao,z),e(z,QF),e(QF,M1e),e(M1e,L5r),e(QF,B5r),e(QF,$X),e($X,x5r),e(QF,k5r),e(z,R5r),e(z,HF),e(HF,E1e),e(E1e,S5r),e(HF,P5r),e(HF,IX),e(IX,$5r),e(HF,I5r),e(z,j5r),e(z,UF),e(UF,y1e),e(y1e,D5r),e(UF,N5r),e(UF,jX),e(jX,q5r),e(UF,G5r),e(z,O5r),e(z,JF),e(JF,w1e),e(w1e,X5r),e(JF,V5r),e(JF,DX),e(DX,z5r),e(JF,W5r),e(z,Q5r),e(z,YF),e(YF,A1e),e(A1e,H5r),e(YF,U5r),e(YF,NX),e(NX,J5r),e(YF,Y5r),e(z,K5r),e(z,KF),e(KF,L1e),e(L1e,Z5r),e(KF,evr),e(KF,qX),e(qX,ovr),e(KF,rvr),e(z,tvr),e(z,ZF),e(ZF,B1e),e(B1e,avr),e(ZF,nvr),e(ZF,GX),e(GX,svr),e(ZF,lvr),e(z,ivr),e(z,eC),e(eC,x1e),e(x1e,dvr),e(eC,cvr),e(eC,OX),e(OX,fvr),e(eC,mvr),e(z,gvr),e(z,oC),e(oC,k1e),e(k1e,hvr),e(oC,pvr),e(oC,XX),e(XX,_vr),e(oC,uvr),e(z,bvr),e(z,rC),e(rC,R1e),e(R1e,vvr),e(rC,Tvr),e(rC,VX),e(VX,Fvr),e(rC,Cvr),e(z,Mvr),e(z,tC),e(tC,S1e),e(S1e,Evr),e(tC,yvr),e(tC,zX),e(zX,wvr),e(tC,Avr),e(z,Lvr),e(z,aC),e(aC,P1e),e(P1e,Bvr),e(aC,xvr),e(aC,WX),e(WX,kvr),e(aC,Rvr),e(z,Svr),e(z,nC),e(nC,$1e),e($1e,Pvr),e(nC,$vr),e(nC,QX),e(QX,Ivr),e(nC,jvr),e(z,Dvr),e(z,sC),e(sC,I1e),e(I1e,Nvr),e(sC,qvr),e(sC,HX),e(HX,Gvr),e(sC,Ovr),e(z,Xvr),e(z,lC),e(lC,j1e),e(j1e,Vvr),e(lC,zvr),e(lC,UX),e(UX,Wvr),e(lC,Qvr),e(z,Hvr),e(z,iC),e(iC,D1e),e(D1e,Uvr),e(iC,Jvr),e(iC,JX),e(JX,Yvr),e(iC,Kvr),e(z,Zvr),e(z,dC),e(dC,N1e),e(N1e,e6r),e(dC,o6r),e(dC,YX),e(YX,r6r),e(dC,t6r),e(z,a6r),e(z,cC),e(cC,q1e),e(q1e,n6r),e(cC,s6r),e(cC,KX),e(KX,l6r),e(cC,i6r),e(z,d6r),e(z,fC),e(fC,G1e),e(G1e,c6r),e(fC,f6r),e(fC,ZX),e(ZX,m6r),e(fC,g6r),e(z,h6r),e(z,mC),e(mC,O1e),e(O1e,p6r),e(mC,_6r),e(mC,eV),e(eV,u6r),e(mC,b6r),e(z,v6r),e(z,gC),e(gC,X1e),e(X1e,T6r),e(gC,F6r),e(gC,oV),e(oV,C6r),e(gC,M6r),e(z,E6r),e(z,hC),e(hC,V1e),e(V1e,y6r),e(hC,w6r),e(hC,rV),e(rV,A6r),e(hC,L6r),e(z,B6r),e(z,pC),e(pC,z1e),e(z1e,x6r),e(pC,k6r),e(pC,tV),e(tV,R6r),e(pC,S6r),e(z,P6r),e(z,_C),e(_C,W1e),e(W1e,$6r),e(_C,I6r),e(_C,aV),e(aV,j6r),e(_C,D6r),e(z,N6r),e(z,uC),e(uC,Q1e),e(Q1e,q6r),e(uC,G6r),e(uC,nV),e(nV,O6r),e(uC,X6r),e(Ao,V6r),e(Ao,H1e),e(H1e,z6r),e(Ao,W6r),g(FL,Ao,null),b(c,Yke,u),b(c,of,u),e(of,bC),e(bC,U1e),g(CL,U1e,null),e(of,Q6r),e(of,J1e),e(J1e,H6r),b(c,Kke,u),b(c,Sr,u),g(ML,Sr,null),e(Sr,U6r),e(Sr,rf),e(rf,J6r),e(rf,Y1e),e(Y1e,Y6r),e(rf,K6r),e(rf,K1e),e(K1e,Z6r),e(rf,eTr),e(Sr,oTr),e(Sr,EL),e(EL,rTr),e(EL,Z1e),e(Z1e,tTr),e(EL,aTr),e(Sr,nTr),e(Sr,At),g(yL,At,null),e(At,sTr),e(At,ebe),e(ebe,lTr),e(At,iTr),e(At,tf),e(tf,dTr),e(tf,obe),e(obe,cTr),e(tf,fTr),e(tf,rbe),e(rbe,mTr),e(tf,gTr),e(At,hTr),e(At,tbe),e(tbe,pTr),e(At,_Tr),g(wL,At,null),e(Sr,uTr),e(Sr,Lo),g(AL,Lo,null),e(Lo,bTr),e(Lo,abe),e(abe,vTr),e(Lo,TTr),e(Lo,xn),e(xn,FTr),e(xn,nbe),e(nbe,CTr),e(xn,MTr),e(xn,sbe),e(sbe,ETr),e(xn,yTr),e(xn,lbe),e(lbe,wTr),e(xn,ATr),e(Lo,LTr),e(Lo,ca),e(ca,vC),e(vC,ibe),e(ibe,BTr),e(vC,xTr),e(vC,sV),e(sV,kTr),e(vC,RTr),e(ca,STr),e(ca,TC),e(TC,dbe),e(dbe,PTr),e(TC,$Tr),e(TC,lV),e(lV,ITr),e(TC,jTr),e(ca,DTr),e(ca,FC),e(FC,cbe),e(cbe,NTr),e(FC,qTr),e(FC,iV),e(iV,GTr),e(FC,OTr),e(ca,XTr),e(ca,CC),e(CC,fbe),e(fbe,VTr),e(CC,zTr),e(CC,dV),e(dV,WTr),e(CC,QTr),e(ca,HTr),e(ca,MC),e(MC,mbe),e(mbe,UTr),e(MC,JTr),e(MC,cV),e(cV,YTr),e(MC,KTr),e(Lo,ZTr),e(Lo,gbe),e(gbe,eFr),e(Lo,oFr),g(LL,Lo,null),b(c,Zke,u),b(c,af,u),e(af,EC),e(EC,hbe),g(BL,hbe,null),e(af,rFr),e(af,pbe),e(pbe,tFr),b(c,eRe,u),b(c,Pr,u),g(xL,Pr,null),e(Pr,aFr),e(Pr,nf),e(nf,nFr),e(nf,_be),e(_be,sFr),e(nf,lFr),e(nf,ube),e(ube,iFr),e(nf,dFr),e(Pr,cFr),e(Pr,kL),e(kL,fFr),e(kL,bbe),e(bbe,mFr),e(kL,gFr),e(Pr,hFr),e(Pr,Lt),g(RL,Lt,null),e(Lt,pFr),e(Lt,vbe),e(vbe,_Fr),e(Lt,uFr),e(Lt,sf),e(sf,bFr),e(sf,Tbe),e(Tbe,vFr),e(sf,TFr),e(sf,Fbe),e(Fbe,FFr),e(sf,CFr),e(Lt,MFr),e(Lt,Cbe),e(Cbe,EFr),e(Lt,yFr),g(SL,Lt,null),e(Pr,wFr),e(Pr,Bo),g(PL,Bo,null),e(Bo,AFr),e(Bo,Mbe),e(Mbe,LFr),e(Bo,BFr),e(Bo,kn),e(kn,xFr),e(kn,Ebe),e(Ebe,kFr),e(kn,RFr),e(kn,ybe),e(ybe,SFr),e(kn,PFr),e(kn,wbe),e(wbe,$Fr),e(kn,IFr),e(Bo,jFr),e(Bo,ce),e(ce,yC),e(yC,Abe),e(Abe,DFr),e(yC,NFr),e(yC,fV),e(fV,qFr),e(yC,GFr),e(ce,OFr),e(ce,wC),e(wC,Lbe),e(Lbe,XFr),e(wC,VFr),e(wC,mV),e(mV,zFr),e(wC,WFr),e(ce,QFr),e(ce,AC),e(AC,Bbe),e(Bbe,HFr),e(AC,UFr),e(AC,gV),e(gV,JFr),e(AC,YFr),e(ce,KFr),e(ce,LC),e(LC,xbe),e(xbe,ZFr),e(LC,eCr),e(LC,hV),e(hV,oCr),e(LC,rCr),e(ce,tCr),e(ce,BC),e(BC,kbe),e(kbe,aCr),e(BC,nCr),e(BC,pV),e(pV,sCr),e(BC,lCr),e(ce,iCr),e(ce,xC),e(xC,Rbe),e(Rbe,dCr),e(xC,cCr),e(xC,_V),e(_V,fCr),e(xC,mCr),e(ce,gCr),e(ce,kC),e(kC,Sbe),e(Sbe,hCr),e(kC,pCr),e(kC,uV),e(uV,_Cr),e(kC,uCr),e(ce,bCr),e(ce,RC),e(RC,Pbe),e(Pbe,vCr),e(RC,TCr),e(RC,bV),e(bV,FCr),e(RC,CCr),e(ce,MCr),e(ce,SC),e(SC,$be),e($be,ECr),e(SC,yCr),e(SC,vV),e(vV,wCr),e(SC,ACr),e(ce,LCr),e(ce,PC),e(PC,Ibe),e(Ibe,BCr),e(PC,xCr),e(PC,TV),e(TV,kCr),e(PC,RCr),e(ce,SCr),e(ce,$C),e($C,jbe),e(jbe,PCr),e($C,$Cr),e($C,FV),e(FV,ICr),e($C,jCr),e(ce,DCr),e(ce,IC),e(IC,Dbe),e(Dbe,NCr),e(IC,qCr),e(IC,CV),e(CV,GCr),e(IC,OCr),e(Bo,XCr),e(Bo,Nbe),e(Nbe,VCr),e(Bo,zCr),g($L,Bo,null),b(c,oRe,u),b(c,lf,u),e(lf,jC),e(jC,qbe),g(IL,qbe,null),e(lf,WCr),e(lf,Gbe),e(Gbe,QCr),b(c,rRe,u),b(c,$r,u),g(jL,$r,null),e($r,HCr),e($r,df),e(df,UCr),e(df,Obe),e(Obe,JCr),e(df,YCr),e(df,Xbe),e(Xbe,KCr),e(df,ZCr),e($r,eMr),e($r,DL),e(DL,oMr),e(DL,Vbe),e(Vbe,rMr),e(DL,tMr),e($r,aMr),e($r,Bt),g(NL,Bt,null),e(Bt,nMr),e(Bt,zbe),e(zbe,sMr),e(Bt,lMr),e(Bt,cf),e(cf,iMr),e(cf,Wbe),e(Wbe,dMr),e(cf,cMr),e(cf,Qbe),e(Qbe,fMr),e(cf,mMr),e(Bt,gMr),e(Bt,Hbe),e(Hbe,hMr),e(Bt,pMr),g(qL,Bt,null),e($r,_Mr),e($r,xo),g(GL,xo,null),e(xo,uMr),e(xo,Ube),e(Ube,bMr),e(xo,vMr),e(xo,Rn),e(Rn,TMr),e(Rn,Jbe),e(Jbe,FMr),e(Rn,CMr),e(Rn,Ybe),e(Ybe,MMr),e(Rn,EMr),e(Rn,Kbe),e(Kbe,yMr),e(Rn,wMr),e(xo,AMr),e(xo,ue),e(ue,DC),e(DC,Zbe),e(Zbe,LMr),e(DC,BMr),e(DC,MV),e(MV,xMr),e(DC,kMr),e(ue,RMr),e(ue,NC),e(NC,e3e),e(e3e,SMr),e(NC,PMr),e(NC,EV),e(EV,$Mr),e(NC,IMr),e(ue,jMr),e(ue,qC),e(qC,o3e),e(o3e,DMr),e(qC,NMr),e(qC,yV),e(yV,qMr),e(qC,GMr),e(ue,OMr),e(ue,GC),e(GC,r3e),e(r3e,XMr),e(GC,VMr),e(GC,wV),e(wV,zMr),e(GC,WMr),e(ue,QMr),e(ue,OC),e(OC,t3e),e(t3e,HMr),e(OC,UMr),e(OC,AV),e(AV,JMr),e(OC,YMr),e(ue,KMr),e(ue,XC),e(XC,a3e),e(a3e,ZMr),e(XC,e4r),e(XC,LV),e(LV,o4r),e(XC,r4r),e(ue,t4r),e(ue,VC),e(VC,n3e),e(n3e,a4r),e(VC,n4r),e(VC,BV),e(BV,s4r),e(VC,l4r),e(ue,i4r),e(ue,zC),e(zC,s3e),e(s3e,d4r),e(zC,c4r),e(zC,xV),e(xV,f4r),e(zC,m4r),e(ue,g4r),e(ue,WC),e(WC,l3e),e(l3e,h4r),e(WC,p4r),e(WC,kV),e(kV,_4r),e(WC,u4r),e(ue,b4r),e(ue,QC),e(QC,i3e),e(i3e,v4r),e(QC,T4r),e(QC,RV),e(RV,F4r),e(QC,C4r),e(xo,M4r),e(xo,d3e),e(d3e,E4r),e(xo,y4r),g(OL,xo,null),b(c,tRe,u),b(c,ff,u),e(ff,HC),e(HC,c3e),g(XL,c3e,null),e(ff,w4r),e(ff,f3e),e(f3e,A4r),b(c,aRe,u),b(c,Ir,u),g(VL,Ir,null),e(Ir,L4r),e(Ir,mf),e(mf,B4r),e(mf,m3e),e(m3e,x4r),e(mf,k4r),e(mf,g3e),e(g3e,R4r),e(mf,S4r),e(Ir,P4r),e(Ir,zL),e(zL,$4r),e(zL,h3e),e(h3e,I4r),e(zL,j4r),e(Ir,D4r),e(Ir,xt),g(WL,xt,null),e(xt,N4r),e(xt,p3e),e(p3e,q4r),e(xt,G4r),e(xt,gf),e(gf,O4r),e(gf,_3e),e(_3e,X4r),e(gf,V4r),e(gf,u3e),e(u3e,z4r),e(gf,W4r),e(xt,Q4r),e(xt,b3e),e(b3e,H4r),e(xt,U4r),g(QL,xt,null),e(Ir,J4r),e(Ir,ko),g(HL,ko,null),e(ko,Y4r),e(ko,v3e),e(v3e,K4r),e(ko,Z4r),e(ko,Sn),e(Sn,eEr),e(Sn,T3e),e(T3e,oEr),e(Sn,rEr),e(Sn,F3e),e(F3e,tEr),e(Sn,aEr),e(Sn,C3e),e(C3e,nEr),e(Sn,sEr),e(ko,lEr),e(ko,Me),e(Me,UC),e(UC,M3e),e(M3e,iEr),e(UC,dEr),e(UC,SV),e(SV,cEr),e(UC,fEr),e(Me,mEr),e(Me,JC),e(JC,E3e),e(E3e,gEr),e(JC,hEr),e(JC,PV),e(PV,pEr),e(JC,_Er),e(Me,uEr),e(Me,YC),e(YC,y3e),e(y3e,bEr),e(YC,vEr),e(YC,$V),e($V,TEr),e(YC,FEr),e(Me,CEr),e(Me,KC),e(KC,w3e),e(w3e,MEr),e(KC,EEr),e(KC,IV),e(IV,yEr),e(KC,wEr),e(Me,AEr),e(Me,ZC),e(ZC,A3e),e(A3e,LEr),e(ZC,BEr),e(ZC,jV),e(jV,xEr),e(ZC,kEr),e(Me,REr),e(Me,eM),e(eM,L3e),e(L3e,SEr),e(eM,PEr),e(eM,DV),e(DV,$Er),e(eM,IEr),e(Me,jEr),e(Me,oM),e(oM,B3e),e(B3e,DEr),e(oM,NEr),e(oM,NV),e(NV,qEr),e(oM,GEr),e(Me,OEr),e(Me,rM),e(rM,x3e),e(x3e,XEr),e(rM,VEr),e(rM,qV),e(qV,zEr),e(rM,WEr),e(Me,QEr),e(Me,tM),e(tM,k3e),e(k3e,HEr),e(tM,UEr),e(tM,GV),e(GV,JEr),e(tM,YEr),e(ko,KEr),e(ko,R3e),e(R3e,ZEr),e(ko,eyr),g(UL,ko,null),b(c,nRe,u),b(c,hf,u),e(hf,aM),e(aM,S3e),g(JL,S3e,null),e(hf,oyr),e(hf,P3e),e(P3e,ryr),b(c,sRe,u),b(c,jr,u),g(YL,jr,null),e(jr,tyr),e(jr,pf),e(pf,ayr),e(pf,$3e),e($3e,nyr),e(pf,syr),e(pf,I3e),e(I3e,lyr),e(pf,iyr),e(jr,dyr),e(jr,KL),e(KL,cyr),e(KL,j3e),e(j3e,fyr),e(KL,myr),e(jr,gyr),e(jr,kt),g(ZL,kt,null),e(kt,hyr),e(kt,D3e),e(D3e,pyr),e(kt,_yr),e(kt,_f),e(_f,uyr),e(_f,N3e),e(N3e,byr),e(_f,vyr),e(_f,q3e),e(q3e,Tyr),e(_f,Fyr),e(kt,Cyr),e(kt,G3e),e(G3e,Myr),e(kt,Eyr),g(e7,kt,null),e(jr,yyr),e(jr,Ro),g(o7,Ro,null),e(Ro,wyr),e(Ro,O3e),e(O3e,Ayr),e(Ro,Lyr),e(Ro,Pn),e(Pn,Byr),e(Pn,X3e),e(X3e,xyr),e(Pn,kyr),e(Pn,V3e),e(V3e,Ryr),e(Pn,Syr),e(Pn,z3e),e(z3e,Pyr),e(Pn,$yr),e(Ro,Iyr),e(Ro,be),e(be,nM),e(nM,W3e),e(W3e,jyr),e(nM,Dyr),e(nM,OV),e(OV,Nyr),e(nM,qyr),e(be,Gyr),e(be,sM),e(sM,Q3e),e(Q3e,Oyr),e(sM,Xyr),e(sM,XV),e(XV,Vyr),e(sM,zyr),e(be,Wyr),e(be,lM),e(lM,H3e),e(H3e,Qyr),e(lM,Hyr),e(lM,VV),e(VV,Uyr),e(lM,Jyr),e(be,Yyr),e(be,iM),e(iM,U3e),e(U3e,Kyr),e(iM,Zyr),e(iM,zV),e(zV,ewr),e(iM,owr),e(be,rwr),e(be,dM),e(dM,J3e),e(J3e,twr),e(dM,awr),e(dM,WV),e(WV,nwr),e(dM,swr),e(be,lwr),e(be,cM),e(cM,Y3e),e(Y3e,iwr),e(cM,dwr),e(cM,QV),e(QV,cwr),e(cM,fwr),e(be,mwr),e(be,fM),e(fM,K3e),e(K3e,gwr),e(fM,hwr),e(fM,HV),e(HV,pwr),e(fM,_wr),e(be,uwr),e(be,mM),e(mM,Z3e),e(Z3e,bwr),e(mM,vwr),e(mM,UV),e(UV,Twr),e(mM,Fwr),e(be,Cwr),e(be,gM),e(gM,e5e),e(e5e,Mwr),e(gM,Ewr),e(gM,JV),e(JV,ywr),e(gM,wwr),e(be,Awr),e(be,hM),e(hM,o5e),e(o5e,Lwr),e(hM,Bwr),e(hM,YV),e(YV,xwr),e(hM,kwr),e(Ro,Rwr),e(Ro,r5e),e(r5e,Swr),e(Ro,Pwr),g(r7,Ro,null),b(c,lRe,u),b(c,uf,u),e(uf,pM),e(pM,t5e),g(t7,t5e,null),e(uf,$wr),e(uf,a5e),e(a5e,Iwr),b(c,iRe,u),b(c,Dr,u),g(a7,Dr,null),e(Dr,jwr),e(Dr,bf),e(bf,Dwr),e(bf,n5e),e(n5e,Nwr),e(bf,qwr),e(bf,s5e),e(s5e,Gwr),e(bf,Owr),e(Dr,Xwr),e(Dr,n7),e(n7,Vwr),e(n7,l5e),e(l5e,zwr),e(n7,Wwr),e(Dr,Qwr),e(Dr,Rt),g(s7,Rt,null),e(Rt,Hwr),e(Rt,i5e),e(i5e,Uwr),e(Rt,Jwr),e(Rt,vf),e(vf,Ywr),e(vf,d5e),e(d5e,Kwr),e(vf,Zwr),e(vf,c5e),e(c5e,eAr),e(vf,oAr),e(Rt,rAr),e(Rt,f5e),e(f5e,tAr),e(Rt,aAr),g(l7,Rt,null),e(Dr,nAr),e(Dr,So),g(i7,So,null),e(So,sAr),e(So,m5e),e(m5e,lAr),e(So,iAr),e(So,$n),e($n,dAr),e($n,g5e),e(g5e,cAr),e($n,fAr),e($n,h5e),e(h5e,mAr),e($n,gAr),e($n,p5e),e(p5e,hAr),e($n,pAr),e(So,_Ar),e(So,ve),e(ve,_M),e(_M,_5e),e(_5e,uAr),e(_M,bAr),e(_M,KV),e(KV,vAr),e(_M,TAr),e(ve,FAr),e(ve,uM),e(uM,u5e),e(u5e,CAr),e(uM,MAr),e(uM,ZV),e(ZV,EAr),e(uM,yAr),e(ve,wAr),e(ve,bM),e(bM,b5e),e(b5e,AAr),e(bM,LAr),e(bM,ez),e(ez,BAr),e(bM,xAr),e(ve,kAr),e(ve,vM),e(vM,v5e),e(v5e,RAr),e(vM,SAr),e(vM,oz),e(oz,PAr),e(vM,$Ar),e(ve,IAr),e(ve,TM),e(TM,T5e),e(T5e,jAr),e(TM,DAr),e(TM,rz),e(rz,NAr),e(TM,qAr),e(ve,GAr),e(ve,FM),e(FM,F5e),e(F5e,OAr),e(FM,XAr),e(FM,tz),e(tz,VAr),e(FM,zAr),e(ve,WAr),e(ve,CM),e(CM,C5e),e(C5e,QAr),e(CM,HAr),e(CM,az),e(az,UAr),e(CM,JAr),e(ve,YAr),e(ve,MM),e(MM,M5e),e(M5e,KAr),e(MM,ZAr),e(MM,nz),e(nz,e0r),e(MM,o0r),e(ve,r0r),e(ve,EM),e(EM,E5e),e(E5e,t0r),e(EM,a0r),e(EM,sz),e(sz,n0r),e(EM,s0r),e(ve,l0r),e(ve,yM),e(yM,y5e),e(y5e,i0r),e(yM,d0r),e(yM,lz),e(lz,c0r),e(yM,f0r),e(So,m0r),e(So,w5e),e(w5e,g0r),e(So,h0r),g(d7,So,null),b(c,dRe,u),b(c,Tf,u),e(Tf,wM),e(wM,A5e),g(c7,A5e,null),e(Tf,p0r),e(Tf,L5e),e(L5e,_0r),b(c,cRe,u),b(c,Nr,u),g(f7,Nr,null),e(Nr,u0r),e(Nr,Ff),e(Ff,b0r),e(Ff,B5e),e(B5e,v0r),e(Ff,T0r),e(Ff,x5e),e(x5e,F0r),e(Ff,C0r),e(Nr,M0r),e(Nr,m7),e(m7,E0r),e(m7,k5e),e(k5e,y0r),e(m7,w0r),e(Nr,A0r),e(Nr,St),g(g7,St,null),e(St,L0r),e(St,R5e),e(R5e,B0r),e(St,x0r),e(St,Cf),e(Cf,k0r),e(Cf,S5e),e(S5e,R0r),e(Cf,S0r),e(Cf,P5e),e(P5e,P0r),e(Cf,$0r),e(St,I0r),e(St,$5e),e($5e,j0r),e(St,D0r),g(h7,St,null),e(Nr,N0r),e(Nr,Po),g(p7,Po,null),e(Po,q0r),e(Po,I5e),e(I5e,G0r),e(Po,O0r),e(Po,In),e(In,X0r),e(In,j5e),e(j5e,V0r),e(In,z0r),e(In,D5e),e(D5e,W0r),e(In,Q0r),e(In,N5e),e(N5e,H0r),e(In,U0r),e(Po,J0r),e(Po,Re),e(Re,AM),e(AM,q5e),e(q5e,Y0r),e(AM,K0r),e(AM,iz),e(iz,Z0r),e(AM,eLr),e(Re,oLr),e(Re,LM),e(LM,G5e),e(G5e,rLr),e(LM,tLr),e(LM,dz),e(dz,aLr),e(LM,nLr),e(Re,sLr),e(Re,BM),e(BM,O5e),e(O5e,lLr),e(BM,iLr),e(BM,cz),e(cz,dLr),e(BM,cLr),e(Re,fLr),e(Re,xM),e(xM,X5e),e(X5e,mLr),e(xM,gLr),e(xM,fz),e(fz,hLr),e(xM,pLr),e(Re,_Lr),e(Re,kM),e(kM,V5e),e(V5e,uLr),e(kM,bLr),e(kM,mz),e(mz,vLr),e(kM,TLr),e(Re,FLr),e(Re,RM),e(RM,z5e),e(z5e,CLr),e(RM,MLr),e(RM,gz),e(gz,ELr),e(RM,yLr),e(Re,wLr),e(Re,SM),e(SM,W5e),e(W5e,ALr),e(SM,LLr),e(SM,hz),e(hz,BLr),e(SM,xLr),e(Re,kLr),e(Re,PM),e(PM,Q5e),e(Q5e,RLr),e(PM,SLr),e(PM,pz),e(pz,PLr),e(PM,$Lr),e(Po,ILr),e(Po,H5e),e(H5e,jLr),e(Po,DLr),g(_7,Po,null),b(c,fRe,u),b(c,Mf,u),e(Mf,$M),e($M,U5e),g(u7,U5e,null),e(Mf,NLr),e(Mf,J5e),e(J5e,qLr),b(c,mRe,u),b(c,qr,u),g(b7,qr,null),e(qr,GLr),e(qr,Ef),e(Ef,OLr),e(Ef,Y5e),e(Y5e,XLr),e(Ef,VLr),e(Ef,K5e),e(K5e,zLr),e(Ef,WLr),e(qr,QLr),e(qr,v7),e(v7,HLr),e(v7,Z5e),e(Z5e,ULr),e(v7,JLr),e(qr,YLr),e(qr,Pt),g(T7,Pt,null),e(Pt,KLr),e(Pt,eve),e(eve,ZLr),e(Pt,e7r),e(Pt,yf),e(yf,o7r),e(yf,ove),e(ove,r7r),e(yf,t7r),e(yf,rve),e(rve,a7r),e(yf,n7r),e(Pt,s7r),e(Pt,tve),e(tve,l7r),e(Pt,i7r),g(F7,Pt,null),e(qr,d7r),e(qr,$o),g(C7,$o,null),e($o,c7r),e($o,ave),e(ave,f7r),e($o,m7r),e($o,jn),e(jn,g7r),e(jn,nve),e(nve,h7r),e(jn,p7r),e(jn,sve),e(sve,_7r),e(jn,u7r),e(jn,lve),e(lve,b7r),e(jn,v7r),e($o,T7r),e($o,Se),e(Se,IM),e(IM,ive),e(ive,F7r),e(IM,C7r),e(IM,_z),e(_z,M7r),e(IM,E7r),e(Se,y7r),e(Se,jM),e(jM,dve),e(dve,w7r),e(jM,A7r),e(jM,uz),e(uz,L7r),e(jM,B7r),e(Se,x7r),e(Se,DM),e(DM,cve),e(cve,k7r),e(DM,R7r),e(DM,bz),e(bz,S7r),e(DM,P7r),e(Se,$7r),e(Se,NM),e(NM,fve),e(fve,I7r),e(NM,j7r),e(NM,vz),e(vz,D7r),e(NM,N7r),e(Se,q7r),e(Se,qM),e(qM,mve),e(mve,G7r),e(qM,O7r),e(qM,Tz),e(Tz,X7r),e(qM,V7r),e(Se,z7r),e(Se,GM),e(GM,gve),e(gve,W7r),e(GM,Q7r),e(GM,Fz),e(Fz,H7r),e(GM,U7r),e(Se,J7r),e(Se,OM),e(OM,hve),e(hve,Y7r),e(OM,K7r),e(OM,Cz),e(Cz,Z7r),e(OM,e8r),e(Se,o8r),e(Se,XM),e(XM,pve),e(pve,r8r),e(XM,t8r),e(XM,Mz),e(Mz,a8r),e(XM,n8r),e($o,s8r),e($o,_ve),e(_ve,l8r),e($o,i8r),g(M7,$o,null),b(c,gRe,u),b(c,wf,u),e(wf,VM),e(VM,uve),g(E7,uve,null),e(wf,d8r),e(wf,bve),e(bve,c8r),b(c,hRe,u),b(c,Gr,u),g(y7,Gr,null),e(Gr,f8r),e(Gr,Af),e(Af,m8r),e(Af,vve),e(vve,g8r),e(Af,h8r),e(Af,Tve),e(Tve,p8r),e(Af,_8r),e(Gr,u8r),e(Gr,w7),e(w7,b8r),e(w7,Fve),e(Fve,v8r),e(w7,T8r),e(Gr,F8r),e(Gr,$t),g(A7,$t,null),e($t,C8r),e($t,Cve),e(Cve,M8r),e($t,E8r),e($t,Lf),e(Lf,y8r),e(Lf,Mve),e(Mve,w8r),e(Lf,A8r),e(Lf,Eve),e(Eve,L8r),e(Lf,B8r),e($t,x8r),e($t,yve),e(yve,k8r),e($t,R8r),g(L7,$t,null),e(Gr,S8r),e(Gr,Io),g(B7,Io,null),e(Io,P8r),e(Io,wve),e(wve,$8r),e(Io,I8r),e(Io,Dn),e(Dn,j8r),e(Dn,Ave),e(Ave,D8r),e(Dn,N8r),e(Dn,Lve),e(Lve,q8r),e(Dn,G8r),e(Dn,Bve),e(Bve,O8r),e(Dn,X8r),e(Io,V8r),e(Io,xve),e(xve,zM),e(zM,kve),e(kve,z8r),e(zM,W8r),e(zM,Ez),e(Ez,Q8r),e(zM,H8r),e(Io,U8r),e(Io,Rve),e(Rve,J8r),e(Io,Y8r),g(x7,Io,null),b(c,pRe,u),b(c,Bf,u),e(Bf,WM),e(WM,Sve),g(k7,Sve,null),e(Bf,K8r),e(Bf,Pve),e(Pve,Z8r),b(c,_Re,u),b(c,Or,u),g(R7,Or,null),e(Or,e9r),e(Or,xf),e(xf,o9r),e(xf,$ve),e($ve,r9r),e(xf,t9r),e(xf,Ive),e(Ive,a9r),e(xf,n9r),e(Or,s9r),e(Or,S7),e(S7,l9r),e(S7,jve),e(jve,i9r),e(S7,d9r),e(Or,c9r),e(Or,It),g(P7,It,null),e(It,f9r),e(It,Dve),e(Dve,m9r),e(It,g9r),e(It,kf),e(kf,h9r),e(kf,Nve),e(Nve,p9r),e(kf,_9r),e(kf,qve),e(qve,u9r),e(kf,b9r),e(It,v9r),e(It,Gve),e(Gve,T9r),e(It,F9r),g($7,It,null),e(Or,C9r),e(Or,jo),g(I7,jo,null),e(jo,M9r),e(jo,Ove),e(Ove,E9r),e(jo,y9r),e(jo,Nn),e(Nn,w9r),e(Nn,Xve),e(Xve,A9r),e(Nn,L9r),e(Nn,Vve),e(Vve,B9r),e(Nn,x9r),e(Nn,zve),e(zve,k9r),e(Nn,R9r),e(jo,S9r),e(jo,j7),e(j7,QM),e(QM,Wve),e(Wve,P9r),e(QM,$9r),e(QM,yz),e(yz,I9r),e(QM,j9r),e(j7,D9r),e(j7,HM),e(HM,Qve),e(Qve,N9r),e(HM,q9r),e(HM,wz),e(wz,G9r),e(HM,O9r),e(jo,X9r),e(jo,Hve),e(Hve,V9r),e(jo,z9r),g(D7,jo,null),b(c,uRe,u),b(c,Rf,u),e(Rf,UM),e(UM,Uve),g(N7,Uve,null),e(Rf,W9r),e(Rf,Jve),e(Jve,Q9r),b(c,bRe,u),b(c,Xr,u),g(q7,Xr,null),e(Xr,H9r),e(Xr,Sf),e(Sf,U9r),e(Sf,Yve),e(Yve,J9r),e(Sf,Y9r),e(Sf,Kve),e(Kve,K9r),e(Sf,Z9r),e(Xr,eBr),e(Xr,G7),e(G7,oBr),e(G7,Zve),e(Zve,rBr),e(G7,tBr),e(Xr,aBr),e(Xr,jt),g(O7,jt,null),e(jt,nBr),e(jt,e6e),e(e6e,sBr),e(jt,lBr),e(jt,Pf),e(Pf,iBr),e(Pf,o6e),e(o6e,dBr),e(Pf,cBr),e(Pf,r6e),e(r6e,fBr),e(Pf,mBr),e(jt,gBr),e(jt,t6e),e(t6e,hBr),e(jt,pBr),g(X7,jt,null),e(Xr,_Br),e(Xr,Do),g(V7,Do,null),e(Do,uBr),e(Do,a6e),e(a6e,bBr),e(Do,vBr),e(Do,qn),e(qn,TBr),e(qn,n6e),e(n6e,FBr),e(qn,CBr),e(qn,s6e),e(s6e,MBr),e(qn,EBr),e(qn,l6e),e(l6e,yBr),e(qn,wBr),e(Do,ABr),e(Do,i6e),e(i6e,JM),e(JM,d6e),e(d6e,LBr),e(JM,BBr),e(JM,Az),e(Az,xBr),e(JM,kBr),e(Do,RBr),e(Do,c6e),e(c6e,SBr),e(Do,PBr),g(z7,Do,null),vRe=!0},p(c,[u]){const W7={};u&2&&(W7.$$scope={dirty:u,ctx:c}),Gf.$set(W7);const f6e={};u&2&&(f6e.$$scope={dirty:u,ctx:c}),Eh.$set(f6e);const m6e={};u&2&&(m6e.$$scope={dirty:u,ctx:c}),$h.$set(m6e)},i(c){vRe||(h(fe.$$.fragment,c),h(qa.$$.fragment,c),h(eE.$$.fragment,c),h(oE.$$.fragment,c),h(Gf.$$.fragment,c),h(rE.$$.fragment,c),h(tE.$$.fragment,c),h(sE.$$.fragment,c),h(lE.$$.fragment,c),h(iE.$$.fragment,c),h(dE.$$.fragment,c),h(cE.$$.fragment,c),h(gE.$$.fragment,c),h(hE.$$.fragment,c),h(pE.$$.fragment,c),h(_E.$$.fragment,c),h(uE.$$.fragment,c),h(TE.$$.fragment,c),h(Eh.$$.fragment,c),h(FE.$$.fragment,c),h(CE.$$.fragment,c),h(ME.$$.fragment,c),h(EE.$$.fragment,c),h(AE.$$.fragment,c),h($h.$$.fragment,c),h(LE.$$.fragment,c),h(BE.$$.fragment,c),h(xE.$$.fragment,c),h(kE.$$.fragment,c),h(SE.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(jE.$$.fragment,c),h(DE.$$.fragment,c),h(qE.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(XE.$$.fragment,c),h(VE.$$.fragment,c),h(zE.$$.fragment,c),h(QE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Ny.$$.fragment,c),h(qy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Nw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(NA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(N0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(jL.$$.fragment,c),h(NL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(WL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(f7.$$.fragment,c),h(g7.$$.fragment,c),h(h7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(u7.$$.fragment,c),h(b7.$$.fragment,c),h(T7.$$.fragment,c),h(F7.$$.fragment,c),h(C7.$$.fragment,c),h(M7.$$.fragment,c),h(E7.$$.fragment,c),h(y7.$$.fragment,c),h(A7.$$.fragment,c),h(L7.$$.fragment,c),h(B7.$$.fragment,c),h(x7.$$.fragment,c),h(k7.$$.fragment,c),h(R7.$$.fragment,c),h(P7.$$.fragment,c),h($7.$$.fragment,c),h(I7.$$.fragment,c),h(D7.$$.fragment,c),h(N7.$$.fragment,c),h(q7.$$.fragment,c),h(O7.$$.fragment,c),h(X7.$$.fragment,c),h(V7.$$.fragment,c),h(z7.$$.fragment,c),vRe=!0)},o(c){p(fe.$$.fragment,c),p(qa.$$.fragment,c),p(eE.$$.fragment,c),p(oE.$$.fragment,c),p(Gf.$$.fragment,c),p(rE.$$.fragment,c),p(tE.$$.fragment,c),p(sE.$$.fragment,c),p(lE.$$.fragment,c),p(iE.$$.fragment,c),p(dE.$$.fragment,c),p(cE.$$.fragment,c),p(gE.$$.fragment,c),p(hE.$$.fragment,c),p(pE.$$.fragment,c),p(_E.$$.fragment,c),p(uE.$$.fragment,c),p(TE.$$.fragment,c),p(Eh.$$.fragment,c),p(FE.$$.fragment,c),p(CE.$$.fragment,c),p(ME.$$.fragment,c),p(EE.$$.fragment,c),p(AE.$$.fragment,c),p($h.$$.fragment,c),p(LE.$$.fragment,c),p(BE.$$.fragment,c),p(xE.$$.fragment,c),p(kE.$$.fragment,c),p(SE.$$.fragment,c),p(PE.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(jE.$$.fragment,c),p(DE.$$.fragment,c),p(qE.$$.fragment,c),p(GE.$$.fragment,c),p(OE.$$.fragment,c),p(XE.$$.fragment,c),p(VE.$$.fragment,c),p(zE.$$.fragment,c),p(QE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Ny.$$.fragment,c),p(qy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Nw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(NA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(F0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(y0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(S0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(N0.$$.fragment,c),p(q0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(Q0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(FL.$$.fragment,c),p(CL.$$.fragment,c),p(ML.$$.fragment,c),p(yL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(BL.$$.fragment,c),p(xL.$$.fragment,c),p(RL.$$.fragment,c),p(SL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(jL.$$.fragment,c),p(NL.$$.fragment,c),p(qL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(XL.$$.fragment,c),p(VL.$$.fragment,c),p(WL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(ZL.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(t7.$$.fragment,c),p(a7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(i7.$$.fragment,c),p(d7.$$.fragment,c),p(c7.$$.fragment,c),p(f7.$$.fragment,c),p(g7.$$.fragment,c),p(h7.$$.fragment,c),p(p7.$$.fragment,c),p(_7.$$.fragment,c),p(u7.$$.fragment,c),p(b7.$$.fragment,c),p(T7.$$.fragment,c),p(F7.$$.fragment,c),p(C7.$$.fragment,c),p(M7.$$.fragment,c),p(E7.$$.fragment,c),p(y7.$$.fragment,c),p(A7.$$.fragment,c),p(L7.$$.fragment,c),p(B7.$$.fragment,c),p(x7.$$.fragment,c),p(k7.$$.fragment,c),p(R7.$$.fragment,c),p(P7.$$.fragment,c),p($7.$$.fragment,c),p(I7.$$.fragment,c),p(D7.$$.fragment,c),p(N7.$$.fragment,c),p(q7.$$.fragment,c),p(O7.$$.fragment,c),p(X7.$$.fragment,c),p(V7.$$.fragment,c),p(z7.$$.fragment,c),vRe=!1},d(c){t(J),c&&t(Pe),c&&t(de),_(fe),c&&t(If),c&&t(fa),c&&t(Le),c&&t(co),c&&t(Df),_(qa,c),c&&t(fo),c&&t(pe),c&&t(zo),c&&t(Ga),c&&t(bxe),c&&t(Vi),_(eE),c&&t(vxe),c&&t(zn),c&&t(Txe),_(oE,c),c&&t(Fxe),c&&t(H8),c&&t(Cxe),_(Gf,c),c&&t(Mxe),c&&t(zi),_(rE),c&&t(Exe),c&&t(Wo),_(tE),_(sE),_(lE),_(iE),c&&t(yxe),c&&t(Qi),_(dE),c&&t(wxe),c&&t(Qo),_(cE),_(gE),_(hE),_(pE),c&&t(Axe),c&&t(Hi),_(_E),c&&t(Lxe),c&&t(Ho),_(uE),_(TE),_(Eh),_(FE),_(CE),c&&t(Bxe),c&&t(Ui),_(ME),c&&t(xxe),c&&t(Uo),_(EE),_(AE),_($h),_(LE),_(BE),c&&t(kxe),c&&t(Yi),_(xE),c&&t(Rxe),c&&t(Jo),_(kE),_(SE),_(PE),_($E),_(IE),c&&t(Sxe),c&&t(ed),_(jE),c&&t(Pxe),c&&t(Yo),_(DE),_(qE),_(GE),_(OE),_(XE),c&&t($xe),c&&t(td),_(VE),c&&t(Ixe),c&&t(Ko),_(zE),_(QE),_(HE),_(UE),_(JE),c&&t(jxe),c&&t(sd),_(YE),c&&t(Dxe),c&&t(Zo),_(KE),_(ey),_(oy),_(ry),_(ty),c&&t(Nxe),c&&t(dd),_(ay),c&&t(qxe),c&&t(er),_(ny),_(ly),_(iy),_(dy),_(cy),c&&t(Gxe),c&&t(md),_(fy),c&&t(Oxe),c&&t(or),_(my),_(hy),_(py),_(_y),_(uy),c&&t(Xxe),c&&t(pd),_(by),c&&t(Vxe),c&&t(rr),_(vy),_(Fy),_(Cy),_(My),_(Ey),c&&t(zxe),c&&t(bd),_(yy),c&&t(Wxe),c&&t(tr),_(wy),_(Ly),_(By),_(xy),_(ky),c&&t(Qxe),c&&t(Fd),_(Ry),c&&t(Hxe),c&&t(ar),_(Sy),_($y),_(Iy),_(jy),_(Dy),c&&t(Uxe),c&&t(Ed),_(Ny),c&&t(Jxe),c&&t(nr),_(qy),_(Oy),_(Xy),_(Vy),_(zy),c&&t(Yxe),c&&t(Ad),_(Wy),c&&t(Kxe),c&&t(sr),_(Qy),_(Uy),_(Jy),_(Yy),_(Ky),c&&t(Zxe),c&&t(xd),_(Zy),c&&t(eke),c&&t(lr),_(ew),_(rw),_(tw),_(aw),_(nw),c&&t(oke),c&&t(Sd),_(sw),c&&t(rke),c&&t(ir),_(lw),_(dw),_(cw),_(fw),_(mw),c&&t(tke),c&&t(Id),_(gw),c&&t(ake),c&&t(dr),_(hw),_(_w),_(uw),_(bw),_(vw),c&&t(nke),c&&t(Nd),_(Tw),c&&t(ske),c&&t(cr),_(Fw),_(Mw),_(Ew),_(yw),_(ww),c&&t(lke),c&&t(Od),_(Aw),c&&t(ike),c&&t(fr),_(Lw),_(xw),_(kw),_(Rw),_(Sw),c&&t(dke),c&&t(zd),_(Pw),c&&t(cke),c&&t(mr),_($w),_(jw),_(Dw),_(Nw),_(Gw),c&&t(fke),c&&t(Hd),_(Ow),c&&t(mke),c&&t(gr),_(Xw),_(zw),_(Ww),_(Qw),_(Hw),c&&t(gke),c&&t(Yd),_(Uw),c&&t(hke),c&&t(hr),_(Jw),_(Kw),_(Zw),_(eA),_(oA),c&&t(pke),c&&t(oc),_(rA),c&&t(_ke),c&&t(pr),_(tA),_(nA),_(sA),_(lA),_(iA),c&&t(uke),c&&t(ac),_(dA),c&&t(bke),c&&t(_r),_(cA),_(mA),_(gA),_(hA),_(pA),c&&t(vke),c&&t(lc),_(_A),c&&t(Tke),c&&t(ur),_(uA),_(vA),_(TA),_(FA),_(MA),c&&t(Fke),c&&t(cc),_(EA),c&&t(Cke),c&&t(br),_(yA),_(AA),_(LA),_(BA),_(xA),c&&t(Mke),c&&t(gc),_(kA),c&&t(Eke),c&&t(vr),_(RA),_(PA),_($A),_(IA),_(jA),c&&t(yke),c&&t(_c),_(DA),c&&t(wke),c&&t(Tr),_(NA),_(GA),_(OA),_(XA),_(VA),c&&t(Ake),c&&t(vc),_(zA),c&&t(Lke),c&&t(Fr),_(WA),_(HA),_(UA),_(JA),_(YA),c&&t(Bke),c&&t(Cc),_(KA),c&&t(xke),c&&t(Cr),_(ZA),_(o0),_(r0),_(t0),_(n0),c&&t(kke),c&&t(yc),_(s0),c&&t(Rke),c&&t(Mr),_(l0),_(d0),_(c0),_(f0),_(m0),c&&t(Ske),c&&t(Lc),_(g0),c&&t(Pke),c&&t(Er),_(h0),_(_0),_(u0),_(b0),_(v0),c&&t($ke),c&&t(kc),_(T0),c&&t(Ike),c&&t(yr),_(F0),_(M0),_(E0),_(y0),_(w0),c&&t(jke),c&&t(Pc),_(A0),c&&t(Dke),c&&t(wr),_(L0),_(x0),_(k0),_(R0),_(S0),c&&t(Nke),c&&t(jc),_(P0),c&&t(qke),c&&t(Ar),_($0),_(j0),_(D0),_(N0),_(q0),c&&t(Gke),c&&t(qc),_(G0),c&&t(Oke),c&&t(Lr),_(O0),_(V0),_(z0),_(W0),_(Q0),c&&t(Xke),c&&t(Xc),_(H0),c&&t(Vke),c&&t(Br),_(U0),_(Y0),_(K0),_(Z0),_(eL),c&&t(zke),c&&t(Wc),_(oL),c&&t(Wke),c&&t(xr),_(rL),_(aL),_(nL),_(sL),_(lL),c&&t(Qke),c&&t(Uc),_(iL),c&&t(Hke),c&&t(kr),_(dL),_(fL),_(mL),_(gL),_(hL),c&&t(Uke),c&&t(Kc),_(pL),c&&t(Jke),c&&t(Rr),_(_L),_(bL),_(vL),_(TL),_(FL),c&&t(Yke),c&&t(of),_(CL),c&&t(Kke),c&&t(Sr),_(ML),_(yL),_(wL),_(AL),_(LL),c&&t(Zke),c&&t(af),_(BL),c&&t(eRe),c&&t(Pr),_(xL),_(RL),_(SL),_(PL),_($L),c&&t(oRe),c&&t(lf),_(IL),c&&t(rRe),c&&t($r),_(jL),_(NL),_(qL),_(GL),_(OL),c&&t(tRe),c&&t(ff),_(XL),c&&t(aRe),c&&t(Ir),_(VL),_(WL),_(QL),_(HL),_(UL),c&&t(nRe),c&&t(hf),_(JL),c&&t(sRe),c&&t(jr),_(YL),_(ZL),_(e7),_(o7),_(r7),c&&t(lRe),c&&t(uf),_(t7),c&&t(iRe),c&&t(Dr),_(a7),_(s7),_(l7),_(i7),_(d7),c&&t(dRe),c&&t(Tf),_(c7),c&&t(cRe),c&&t(Nr),_(f7),_(g7),_(h7),_(p7),_(_7),c&&t(fRe),c&&t(Mf),_(u7),c&&t(mRe),c&&t(qr),_(b7),_(T7),_(F7),_(C7),_(M7),c&&t(gRe),c&&t(wf),_(E7),c&&t(hRe),c&&t(Gr),_(y7),_(A7),_(L7),_(B7),_(x7),c&&t(pRe),c&&t(Bf),_(k7),c&&t(_Re),c&&t(Or),_(R7),_(P7),_($7),_(I7),_(D7),c&&t(uRe),c&&t(Rf),_(N7),c&&t(bRe),c&&t(Xr),_(q7),_(O7),_(X7),_(V7),_(z7)}}}const CTt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function MTt(Ii,J,Pe){let{fw:de}=J;return Ii.$$set=he=>{"fw"in he&&Pe(0,de=he.fw)},[de]}class xTt extends hTt{constructor(J){super();pTt(this,J,MTt,FTt,_Tt,{fw:0})}}export{xTt as default,CTt as metadata};
